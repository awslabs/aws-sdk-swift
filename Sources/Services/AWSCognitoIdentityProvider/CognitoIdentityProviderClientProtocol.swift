// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

/// With the Amazon Cognito user pools API, you can set up user pools and app clients, and authenticate users. To authenticate users from third-party identity providers (IdPs) in this API, you can [link IdP users to native user profiles](https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-pools-identity-federation-consolidate-users.html). Learn more about the authentication and authorization of federated users in the [Using the Amazon Cognito user pools API and user pool endpoints](https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-userpools-server-contract-reference.html). This API reference provides detailed information about API operations and object types in Amazon Cognito. At the bottom of the page for each API operation and object, under See Also, you can learn how to use it in an Amazon Web Services SDK in the language of your choice. Along with resource management operations, the Amazon Cognito user pools API includes classes of operations and authorization models for client-side and server-side user operations. For more information, see [Using the Amazon Cognito native and OIDC APIs](https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html) in the Amazon Cognito Developer Guide. You can also start reading about the CognitoIdentityProvider client in the following SDK guides.
///
/// * [Amazon Web Services Command Line Interface](https://docs.aws.amazon.com/cli/latest/reference/cognito-idp/index.html#cli-aws-cognito-idp)
///
/// * [Amazon Web Services SDK for .NET](https://docs.aws.amazon.com/sdkfornet/v3/apidocs/items/CognitoIdentityProvider/TCognitoIdentityProviderClient.html)
///
/// * [Amazon Web Services SDK for C++](https://sdk.amazonaws.com/cpp/api/LATEST/aws-cpp-sdk-cognito-idp/html/class_aws_1_1_cognito_identity_provider_1_1_cognito_identity_provider_client.html)
///
/// * [Amazon Web Services SDK for Go](https://docs.aws.amazon.com/sdk-for-go/api/service/cognitoidentityprovider/#CognitoIdentityProvider)
///
/// * [Amazon Web Services SDK for Java V2](https://sdk.amazonaws.com/java/api/latest/software/amazon/awssdk/services/cognitoidentityprovider/CognitoIdentityProviderClient.html)
///
/// * [Amazon Web Services SDK for JavaScript](https://docs.aws.amazon.com/AWSJavaScriptSDK/latest/AWS/CognitoIdentityServiceProvider.html)
///
/// * [Amazon Web Services SDK for PHP V3](https://docs.aws.amazon.com/aws-sdk-php/v3/api/api-cognito-idp-2016-04-18.html)
///
/// * [Amazon Web Services SDK for Python](https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/cognito-idp.html)
///
/// * [Amazon Web Services SDK for Ruby V3](https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/CognitoIdentityProvider/Client.html)
///
///
/// To get started with an Amazon Web Services SDK, see [Tools to Build on Amazon Web Services](http://aws.amazon.com/developer/tools/). For example actions and scenarios, see [Code examples for Amazon Cognito Identity Provider using Amazon Web Services SDKs](https://docs.aws.amazon.com/cognito/latest/developerguide/service_code_examples_cognito-identity-provider.html).
public protocol CognitoIdentityProviderClientProtocol {
    /// Adds additional user attributes to the user pool schema. Amazon Cognito evaluates Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you must use IAM credentials to authorize requests, and you must grant yourself the corresponding IAM permission in a policy. Learn more
    ///
    /// * [Signing Amazon Web Services API Requests](https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_aws-signing.html)
    ///
    /// * [Using the Amazon Cognito user pools API and user pool endpoints](https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html)
    ///
    /// - Parameter AddCustomAttributesInput : Represents the request to add custom attributes.
    ///
    /// - Returns: `AddCustomAttributesOutputResponse` : Represents the response from the server for the request to add custom attributes.
    ///
    /// - Throws: One of the exceptions listed below __Possible Exceptions__.
    ///
    /// __Possible Exceptions:__
    /// - `InternalErrorException` : This exception is thrown when Amazon Cognito encounters an internal error.
    /// - `InvalidParameterException` : This exception is thrown when the Amazon Cognito service encounters an invalid parameter.
    /// - `NotAuthorizedException` : This exception is thrown when a user isn't authorized.
    /// - `ResourceNotFoundException` : This exception is thrown when the Amazon Cognito service can't find the requested resource.
    /// - `TooManyRequestsException` : This exception is thrown when the user has made too many requests for a given operation.
    /// - `UserImportInProgressException` : This exception is thrown when you're trying to modify a user pool while a user import job is in progress for that pool.
    func addCustomAttributes(input: AddCustomAttributesInput) async throws -> AddCustomAttributesOutputResponse
    /// Adds the specified user to the specified group. Amazon Cognito evaluates Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you must use IAM credentials to authorize requests, and you must grant yourself the corresponding IAM permission in a policy. Learn more
    ///
    /// * [Signing Amazon Web Services API Requests](https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_aws-signing.html)
    ///
    /// * [Using the Amazon Cognito user pools API and user pool endpoints](https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html)
    ///
    /// - Parameter AdminAddUserToGroupInput : [no documentation found]
    ///
    /// - Returns: `AdminAddUserToGroupOutputResponse` : [no documentation found]
    ///
    /// - Throws: One of the exceptions listed below __Possible Exceptions__.
    ///
    /// __Possible Exceptions:__
    /// - `InternalErrorException` : This exception is thrown when Amazon Cognito encounters an internal error.
    /// - `InvalidParameterException` : This exception is thrown when the Amazon Cognito service encounters an invalid parameter.
    /// - `NotAuthorizedException` : This exception is thrown when a user isn't authorized.
    /// - `ResourceNotFoundException` : This exception is thrown when the Amazon Cognito service can't find the requested resource.
    /// - `TooManyRequestsException` : This exception is thrown when the user has made too many requests for a given operation.
    /// - `UserNotFoundException` : This exception is thrown when a user isn't found.
    func adminAddUserToGroup(input: AdminAddUserToGroupInput) async throws -> AdminAddUserToGroupOutputResponse
    /// Confirms user registration as an admin without using a confirmation code. Works on any user. Amazon Cognito evaluates Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you must use IAM credentials to authorize requests, and you must grant yourself the corresponding IAM permission in a policy. Learn more
    ///
    /// * [Signing Amazon Web Services API Requests](https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_aws-signing.html)
    ///
    /// * [Using the Amazon Cognito user pools API and user pool endpoints](https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html)
    ///
    /// - Parameter AdminConfirmSignUpInput : Confirm a user's registration as a user pool administrator.
    ///
    /// - Returns: `AdminConfirmSignUpOutputResponse` : Represents the response from the server for the request to confirm registration.
    ///
    /// - Throws: One of the exceptions listed below __Possible Exceptions__.
    ///
    /// __Possible Exceptions:__
    /// - `InternalErrorException` : This exception is thrown when Amazon Cognito encounters an internal error.
    /// - `InvalidLambdaResponseException` : This exception is thrown when Amazon Cognito encounters an invalid Lambda response.
    /// - `InvalidParameterException` : This exception is thrown when the Amazon Cognito service encounters an invalid parameter.
    /// - `LimitExceededException` : This exception is thrown when a user exceeds the limit for a requested Amazon Web Services resource.
    /// - `NotAuthorizedException` : This exception is thrown when a user isn't authorized.
    /// - `ResourceNotFoundException` : This exception is thrown when the Amazon Cognito service can't find the requested resource.
    /// - `TooManyFailedAttemptsException` : This exception is thrown when the user has made too many failed attempts for a given action, such as sign-in.
    /// - `TooManyRequestsException` : This exception is thrown when the user has made too many requests for a given operation.
    /// - `UnexpectedLambdaException` : This exception is thrown when Amazon Cognito encounters an unexpected exception with Lambda.
    /// - `UserLambdaValidationException` : This exception is thrown when the Amazon Cognito service encounters a user validation exception with the Lambda service.
    /// - `UserNotFoundException` : This exception is thrown when a user isn't found.
    func adminConfirmSignUp(input: AdminConfirmSignUpInput) async throws -> AdminConfirmSignUpOutputResponse
    /// Creates a new user in the specified user pool. If MessageAction isn't set, the default is to send a welcome message via email or phone (SMS). This action might generate an SMS text message. Starting June 1, 2021, US telecom carriers require you to register an origination phone number before you can send SMS messages to US phone numbers. If you use SMS text messages in Amazon Cognito, you must register a phone number with [Amazon Pinpoint](https://console.aws.amazon.com/pinpoint/home/). Amazon Cognito uses the registered number automatically. Otherwise, Amazon Cognito users who must receive SMS messages might not be able to sign up, activate their accounts, or sign in. If you have never used SMS text messages with Amazon Cognito or any other Amazon Web Service, Amazon Simple Notification Service might place your account in the SMS sandbox. In [sandbox mode](https://docs.aws.amazon.com/sns/latest/dg/sns-sms-sandbox.html) , you can send messages only to verified phone numbers. After you test your app while in the sandbox environment, you can move out of the sandbox and into production. For more information, see [ SMS message settings for Amazon Cognito user pools](https://docs.aws.amazon.com/cognito/latest/developerguide/user-pool-sms-settings.html) in the Amazon Cognito Developer Guide. This message is based on a template that you configured in your call to create or update a user pool. This template includes your custom sign-up instructions and placeholders for user name and temporary password. Alternatively, you can call AdminCreateUser with SUPPRESS for the MessageAction parameter, and Amazon Cognito won't send any email. In either case, the user will be in the FORCE_CHANGE_PASSWORD state until they sign in and change their password. Amazon Cognito evaluates Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you must use IAM credentials to authorize requests, and you must grant yourself the corresponding IAM permission in a policy. Learn more
    ///
    /// * [Signing Amazon Web Services API Requests](https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_aws-signing.html)
    ///
    /// * [Using the Amazon Cognito user pools API and user pool endpoints](https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html)
    ///
    /// - Parameter AdminCreateUserInput : Represents the request to create a user in the specified user pool.
    ///
    /// - Returns: `AdminCreateUserOutputResponse` : Represents the response from the server to the request to create the user.
    ///
    /// - Throws: One of the exceptions listed below __Possible Exceptions__.
    ///
    /// __Possible Exceptions:__
    /// - `CodeDeliveryFailureException` : This exception is thrown when a verification code fails to deliver successfully.
    /// - `InternalErrorException` : This exception is thrown when Amazon Cognito encounters an internal error.
    /// - `InvalidLambdaResponseException` : This exception is thrown when Amazon Cognito encounters an invalid Lambda response.
    /// - `InvalidParameterException` : This exception is thrown when the Amazon Cognito service encounters an invalid parameter.
    /// - `InvalidPasswordException` : This exception is thrown when Amazon Cognito encounters an invalid password.
    /// - `InvalidSmsRoleAccessPolicyException` : This exception is returned when the role provided for SMS configuration doesn't have permission to publish using Amazon SNS.
    /// - `InvalidSmsRoleTrustRelationshipException` : This exception is thrown when the trust relationship is not valid for the role provided for SMS configuration. This can happen if you don't trust cognito-idp.amazonaws.com or the external ID provided in the role does not match what is provided in the SMS configuration for the user pool.
    /// - `NotAuthorizedException` : This exception is thrown when a user isn't authorized.
    /// - `PreconditionNotMetException` : This exception is thrown when a precondition is not met.
    /// - `ResourceNotFoundException` : This exception is thrown when the Amazon Cognito service can't find the requested resource.
    /// - `TooManyRequestsException` : This exception is thrown when the user has made too many requests for a given operation.
    /// - `UnexpectedLambdaException` : This exception is thrown when Amazon Cognito encounters an unexpected exception with Lambda.
    /// - `UnsupportedUserStateException` : The request failed because the user is in an unsupported state.
    /// - `UserLambdaValidationException` : This exception is thrown when the Amazon Cognito service encounters a user validation exception with the Lambda service.
    /// - `UsernameExistsException` : This exception is thrown when Amazon Cognito encounters a user name that already exists in the user pool.
    /// - `UserNotFoundException` : This exception is thrown when a user isn't found.
    func adminCreateUser(input: AdminCreateUserInput) async throws -> AdminCreateUserOutputResponse
    /// Deletes a user as an administrator. Works on any user. Amazon Cognito evaluates Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you must use IAM credentials to authorize requests, and you must grant yourself the corresponding IAM permission in a policy. Learn more
    ///
    /// * [Signing Amazon Web Services API Requests](https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_aws-signing.html)
    ///
    /// * [Using the Amazon Cognito user pools API and user pool endpoints](https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html)
    ///
    /// - Parameter AdminDeleteUserInput : Represents the request to delete a user as an administrator.
    ///
    /// - Returns: `AdminDeleteUserOutputResponse` : [no documentation found]
    ///
    /// - Throws: One of the exceptions listed below __Possible Exceptions__.
    ///
    /// __Possible Exceptions:__
    /// - `InternalErrorException` : This exception is thrown when Amazon Cognito encounters an internal error.
    /// - `InvalidParameterException` : This exception is thrown when the Amazon Cognito service encounters an invalid parameter.
    /// - `NotAuthorizedException` : This exception is thrown when a user isn't authorized.
    /// - `ResourceNotFoundException` : This exception is thrown when the Amazon Cognito service can't find the requested resource.
    /// - `TooManyRequestsException` : This exception is thrown when the user has made too many requests for a given operation.
    /// - `UserNotFoundException` : This exception is thrown when a user isn't found.
    func adminDeleteUser(input: AdminDeleteUserInput) async throws -> AdminDeleteUserOutputResponse
    /// Deletes the user attributes in a user pool as an administrator. Works on any user. Amazon Cognito evaluates Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you must use IAM credentials to authorize requests, and you must grant yourself the corresponding IAM permission in a policy. Learn more
    ///
    /// * [Signing Amazon Web Services API Requests](https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_aws-signing.html)
    ///
    /// * [Using the Amazon Cognito user pools API and user pool endpoints](https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html)
    ///
    /// - Parameter AdminDeleteUserAttributesInput : Represents the request to delete user attributes as an administrator.
    ///
    /// - Returns: `AdminDeleteUserAttributesOutputResponse` : Represents the response received from the server for a request to delete user attributes.
    ///
    /// - Throws: One of the exceptions listed below __Possible Exceptions__.
    ///
    /// __Possible Exceptions:__
    /// - `InternalErrorException` : This exception is thrown when Amazon Cognito encounters an internal error.
    /// - `InvalidParameterException` : This exception is thrown when the Amazon Cognito service encounters an invalid parameter.
    /// - `NotAuthorizedException` : This exception is thrown when a user isn't authorized.
    /// - `ResourceNotFoundException` : This exception is thrown when the Amazon Cognito service can't find the requested resource.
    /// - `TooManyRequestsException` : This exception is thrown when the user has made too many requests for a given operation.
    /// - `UserNotFoundException` : This exception is thrown when a user isn't found.
    func adminDeleteUserAttributes(input: AdminDeleteUserAttributesInput) async throws -> AdminDeleteUserAttributesOutputResponse
    /// Prevents the user from signing in with the specified external (SAML or social) identity provider (IdP). If the user that you want to deactivate is a Amazon Cognito user pools native username + password user, they can't use their password to sign in. If the user to deactivate is a linked external IdP user, any link between that user and an existing user is removed. When the external user signs in again, and the user is no longer attached to the previously linked DestinationUser, the user must create a new user account. See [AdminLinkProviderForUser](https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_AdminLinkProviderForUser.html). The ProviderName must match the value specified when creating an IdP for the pool. To deactivate a native username + password user, the ProviderName value must be Cognito and the ProviderAttributeName must be Cognito_Subject. The ProviderAttributeValue must be the name that is used in the user pool for the user. The ProviderAttributeName must always be Cognito_Subject for social IdPs. The ProviderAttributeValue must always be the exact subject that was used when the user was originally linked as a source user. For de-linking a SAML identity, there are two scenarios. If the linked identity has not yet been used to sign in, the ProviderAttributeName and ProviderAttributeValue must be the same values that were used for the SourceUser when the identities were originally linked using  AdminLinkProviderForUser call. (If the linking was done with ProviderAttributeName set to Cognito_Subject, the same applies here). However, if the user has already signed in, the ProviderAttributeName must be Cognito_Subject and ProviderAttributeValue must be the subject of the SAML assertion. Amazon Cognito evaluates Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you must use IAM credentials to authorize requests, and you must grant yourself the corresponding IAM permission in a policy. Learn more
    ///
    /// * [Signing Amazon Web Services API Requests](https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_aws-signing.html)
    ///
    /// * [Using the Amazon Cognito user pools API and user pool endpoints](https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html)
    ///
    /// - Parameter AdminDisableProviderForUserInput : [no documentation found]
    ///
    /// - Returns: `AdminDisableProviderForUserOutputResponse` : [no documentation found]
    ///
    /// - Throws: One of the exceptions listed below __Possible Exceptions__.
    ///
    /// __Possible Exceptions:__
    /// - `AliasExistsException` : This exception is thrown when a user tries to confirm the account with an email address or phone number that has already been supplied as an alias for a different user profile. This exception indicates that an account with this email address or phone already exists in a user pool that you've configured to use email address or phone number as a sign-in alias.
    /// - `InternalErrorException` : This exception is thrown when Amazon Cognito encounters an internal error.
    /// - `InvalidParameterException` : This exception is thrown when the Amazon Cognito service encounters an invalid parameter.
    /// - `NotAuthorizedException` : This exception is thrown when a user isn't authorized.
    /// - `ResourceNotFoundException` : This exception is thrown when the Amazon Cognito service can't find the requested resource.
    /// - `TooManyRequestsException` : This exception is thrown when the user has made too many requests for a given operation.
    /// - `UserNotFoundException` : This exception is thrown when a user isn't found.
    func adminDisableProviderForUser(input: AdminDisableProviderForUserInput) async throws -> AdminDisableProviderForUserOutputResponse
    /// Deactivates a user and revokes all access tokens for the user. A deactivated user can't sign in, but still appears in the responses to GetUser and ListUsers API requests. Amazon Cognito evaluates Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you must use IAM credentials to authorize requests, and you must grant yourself the corresponding IAM permission in a policy. Learn more
    ///
    /// * [Signing Amazon Web Services API Requests](https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_aws-signing.html)
    ///
    /// * [Using the Amazon Cognito user pools API and user pool endpoints](https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html)
    ///
    /// - Parameter AdminDisableUserInput : Represents the request to disable the user as an administrator.
    ///
    /// - Returns: `AdminDisableUserOutputResponse` : Represents the response received from the server to disable the user as an administrator.
    ///
    /// - Throws: One of the exceptions listed below __Possible Exceptions__.
    ///
    /// __Possible Exceptions:__
    /// - `InternalErrorException` : This exception is thrown when Amazon Cognito encounters an internal error.
    /// - `InvalidParameterException` : This exception is thrown when the Amazon Cognito service encounters an invalid parameter.
    /// - `NotAuthorizedException` : This exception is thrown when a user isn't authorized.
    /// - `ResourceNotFoundException` : This exception is thrown when the Amazon Cognito service can't find the requested resource.
    /// - `TooManyRequestsException` : This exception is thrown when the user has made too many requests for a given operation.
    /// - `UserNotFoundException` : This exception is thrown when a user isn't found.
    func adminDisableUser(input: AdminDisableUserInput) async throws -> AdminDisableUserOutputResponse
    /// Enables the specified user as an administrator. Works on any user. Amazon Cognito evaluates Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you must use IAM credentials to authorize requests, and you must grant yourself the corresponding IAM permission in a policy. Learn more
    ///
    /// * [Signing Amazon Web Services API Requests](https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_aws-signing.html)
    ///
    /// * [Using the Amazon Cognito user pools API and user pool endpoints](https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html)
    ///
    /// - Parameter AdminEnableUserInput : Represents the request that enables the user as an administrator.
    ///
    /// - Returns: `AdminEnableUserOutputResponse` : Represents the response from the server for the request to enable a user as an administrator.
    ///
    /// - Throws: One of the exceptions listed below __Possible Exceptions__.
    ///
    /// __Possible Exceptions:__
    /// - `InternalErrorException` : This exception is thrown when Amazon Cognito encounters an internal error.
    /// - `InvalidParameterException` : This exception is thrown when the Amazon Cognito service encounters an invalid parameter.
    /// - `NotAuthorizedException` : This exception is thrown when a user isn't authorized.
    /// - `ResourceNotFoundException` : This exception is thrown when the Amazon Cognito service can't find the requested resource.
    /// - `TooManyRequestsException` : This exception is thrown when the user has made too many requests for a given operation.
    /// - `UserNotFoundException` : This exception is thrown when a user isn't found.
    func adminEnableUser(input: AdminEnableUserInput) async throws -> AdminEnableUserOutputResponse
    /// Forgets the device, as an administrator. Amazon Cognito evaluates Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you must use IAM credentials to authorize requests, and you must grant yourself the corresponding IAM permission in a policy. Learn more
    ///
    /// * [Signing Amazon Web Services API Requests](https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_aws-signing.html)
    ///
    /// * [Using the Amazon Cognito user pools API and user pool endpoints](https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html)
    ///
    /// - Parameter AdminForgetDeviceInput : Sends the forgot device request, as an administrator.
    ///
    /// - Returns: `AdminForgetDeviceOutputResponse` : [no documentation found]
    ///
    /// - Throws: One of the exceptions listed below __Possible Exceptions__.
    ///
    /// __Possible Exceptions:__
    /// - `InternalErrorException` : This exception is thrown when Amazon Cognito encounters an internal error.
    /// - `InvalidParameterException` : This exception is thrown when the Amazon Cognito service encounters an invalid parameter.
    /// - `InvalidUserPoolConfigurationException` : This exception is thrown when the user pool configuration is not valid.
    /// - `NotAuthorizedException` : This exception is thrown when a user isn't authorized.
    /// - `ResourceNotFoundException` : This exception is thrown when the Amazon Cognito service can't find the requested resource.
    /// - `TooManyRequestsException` : This exception is thrown when the user has made too many requests for a given operation.
    /// - `UserNotFoundException` : This exception is thrown when a user isn't found.
    func adminForgetDevice(input: AdminForgetDeviceInput) async throws -> AdminForgetDeviceOutputResponse
    /// Gets the device, as an administrator. Amazon Cognito evaluates Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you must use IAM credentials to authorize requests, and you must grant yourself the corresponding IAM permission in a policy. Learn more
    ///
    /// * [Signing Amazon Web Services API Requests](https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_aws-signing.html)
    ///
    /// * [Using the Amazon Cognito user pools API and user pool endpoints](https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html)
    ///
    /// - Parameter AdminGetDeviceInput : Represents the request to get the device, as an administrator.
    ///
    /// - Returns: `AdminGetDeviceOutputResponse` : Gets the device response, as an administrator.
    ///
    /// - Throws: One of the exceptions listed below __Possible Exceptions__.
    ///
    /// __Possible Exceptions:__
    /// - `InternalErrorException` : This exception is thrown when Amazon Cognito encounters an internal error.
    /// - `InvalidParameterException` : This exception is thrown when the Amazon Cognito service encounters an invalid parameter.
    /// - `InvalidUserPoolConfigurationException` : This exception is thrown when the user pool configuration is not valid.
    /// - `NotAuthorizedException` : This exception is thrown when a user isn't authorized.
    /// - `ResourceNotFoundException` : This exception is thrown when the Amazon Cognito service can't find the requested resource.
    /// - `TooManyRequestsException` : This exception is thrown when the user has made too many requests for a given operation.
    func adminGetDevice(input: AdminGetDeviceInput) async throws -> AdminGetDeviceOutputResponse
    /// Gets the specified user by user name in a user pool as an administrator. Works on any user. Amazon Cognito evaluates Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you must use IAM credentials to authorize requests, and you must grant yourself the corresponding IAM permission in a policy. Learn more
    ///
    /// * [Signing Amazon Web Services API Requests](https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_aws-signing.html)
    ///
    /// * [Using the Amazon Cognito user pools API and user pool endpoints](https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html)
    ///
    /// - Parameter AdminGetUserInput : Represents the request to get the specified user as an administrator.
    ///
    /// - Returns: `AdminGetUserOutputResponse` : Represents the response from the server from the request to get the specified user as an administrator.
    ///
    /// - Throws: One of the exceptions listed below __Possible Exceptions__.
    ///
    /// __Possible Exceptions:__
    /// - `InternalErrorException` : This exception is thrown when Amazon Cognito encounters an internal error.
    /// - `InvalidParameterException` : This exception is thrown when the Amazon Cognito service encounters an invalid parameter.
    /// - `NotAuthorizedException` : This exception is thrown when a user isn't authorized.
    /// - `ResourceNotFoundException` : This exception is thrown when the Amazon Cognito service can't find the requested resource.
    /// - `TooManyRequestsException` : This exception is thrown when the user has made too many requests for a given operation.
    /// - `UserNotFoundException` : This exception is thrown when a user isn't found.
    func adminGetUser(input: AdminGetUserInput) async throws -> AdminGetUserOutputResponse
    /// Initiates the authentication flow, as an administrator. This action might generate an SMS text message. Starting June 1, 2021, US telecom carriers require you to register an origination phone number before you can send SMS messages to US phone numbers. If you use SMS text messages in Amazon Cognito, you must register a phone number with [Amazon Pinpoint](https://console.aws.amazon.com/pinpoint/home/). Amazon Cognito uses the registered number automatically. Otherwise, Amazon Cognito users who must receive SMS messages might not be able to sign up, activate their accounts, or sign in. If you have never used SMS text messages with Amazon Cognito or any other Amazon Web Service, Amazon Simple Notification Service might place your account in the SMS sandbox. In [sandbox mode](https://docs.aws.amazon.com/sns/latest/dg/sns-sms-sandbox.html) , you can send messages only to verified phone numbers. After you test your app while in the sandbox environment, you can move out of the sandbox and into production. For more information, see [ SMS message settings for Amazon Cognito user pools](https://docs.aws.amazon.com/cognito/latest/developerguide/user-pool-sms-settings.html) in the Amazon Cognito Developer Guide. Amazon Cognito evaluates Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you must use IAM credentials to authorize requests, and you must grant yourself the corresponding IAM permission in a policy. Learn more
    ///
    /// * [Signing Amazon Web Services API Requests](https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_aws-signing.html)
    ///
    /// * [Using the Amazon Cognito user pools API and user pool endpoints](https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html)
    ///
    /// - Parameter AdminInitiateAuthInput : Initiates the authorization request, as an administrator.
    ///
    /// - Returns: `AdminInitiateAuthOutputResponse` : Initiates the authentication response, as an administrator.
    ///
    /// - Throws: One of the exceptions listed below __Possible Exceptions__.
    ///
    /// __Possible Exceptions:__
    /// - `InternalErrorException` : This exception is thrown when Amazon Cognito encounters an internal error.
    /// - `InvalidLambdaResponseException` : This exception is thrown when Amazon Cognito encounters an invalid Lambda response.
    /// - `InvalidParameterException` : This exception is thrown when the Amazon Cognito service encounters an invalid parameter.
    /// - `InvalidSmsRoleAccessPolicyException` : This exception is returned when the role provided for SMS configuration doesn't have permission to publish using Amazon SNS.
    /// - `InvalidSmsRoleTrustRelationshipException` : This exception is thrown when the trust relationship is not valid for the role provided for SMS configuration. This can happen if you don't trust cognito-idp.amazonaws.com or the external ID provided in the role does not match what is provided in the SMS configuration for the user pool.
    /// - `InvalidUserPoolConfigurationException` : This exception is thrown when the user pool configuration is not valid.
    /// - `MFAMethodNotFoundException` : This exception is thrown when Amazon Cognito can't find a multi-factor authentication (MFA) method.
    /// - `NotAuthorizedException` : This exception is thrown when a user isn't authorized.
    /// - `PasswordResetRequiredException` : This exception is thrown when a password reset is required.
    /// - `ResourceNotFoundException` : This exception is thrown when the Amazon Cognito service can't find the requested resource.
    /// - `TooManyRequestsException` : This exception is thrown when the user has made too many requests for a given operation.
    /// - `UnexpectedLambdaException` : This exception is thrown when Amazon Cognito encounters an unexpected exception with Lambda.
    /// - `UserLambdaValidationException` : This exception is thrown when the Amazon Cognito service encounters a user validation exception with the Lambda service.
    /// - `UserNotConfirmedException` : This exception is thrown when a user isn't confirmed successfully.
    /// - `UserNotFoundException` : This exception is thrown when a user isn't found.
    func adminInitiateAuth(input: AdminInitiateAuthInput) async throws -> AdminInitiateAuthOutputResponse
    /// Links an existing user account in a user pool (DestinationUser) to an identity from an external IdP (SourceUser) based on a specified attribute name and value from the external IdP. This allows you to create a link from the existing user account to an external federated user identity that has not yet been used to sign in. You can then use the federated user identity to sign in as the existing user account. For example, if there is an existing user with a username and password, this API links that user to a federated user identity. When the user signs in with a federated user identity, they sign in as the existing user account. The maximum number of federated identities linked to a user is five. Because this API allows a user with an external federated identity to sign in as an existing user in the user pool, it is critical that it only be used with external IdPs and provider attributes that have been trusted by the application owner. Amazon Cognito evaluates Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you must use IAM credentials to authorize requests, and you must grant yourself the corresponding IAM permission in a policy. Learn more
    ///
    /// * [Signing Amazon Web Services API Requests](https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_aws-signing.html)
    ///
    /// * [Using the Amazon Cognito user pools API and user pool endpoints](https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html)
    ///
    /// - Parameter AdminLinkProviderForUserInput : [no documentation found]
    ///
    /// - Returns: `AdminLinkProviderForUserOutputResponse` : [no documentation found]
    ///
    /// - Throws: One of the exceptions listed below __Possible Exceptions__.
    ///
    /// __Possible Exceptions:__
    /// - `AliasExistsException` : This exception is thrown when a user tries to confirm the account with an email address or phone number that has already been supplied as an alias for a different user profile. This exception indicates that an account with this email address or phone already exists in a user pool that you've configured to use email address or phone number as a sign-in alias.
    /// - `InternalErrorException` : This exception is thrown when Amazon Cognito encounters an internal error.
    /// - `InvalidParameterException` : This exception is thrown when the Amazon Cognito service encounters an invalid parameter.
    /// - `LimitExceededException` : This exception is thrown when a user exceeds the limit for a requested Amazon Web Services resource.
    /// - `NotAuthorizedException` : This exception is thrown when a user isn't authorized.
    /// - `ResourceNotFoundException` : This exception is thrown when the Amazon Cognito service can't find the requested resource.
    /// - `TooManyRequestsException` : This exception is thrown when the user has made too many requests for a given operation.
    /// - `UserNotFoundException` : This exception is thrown when a user isn't found.
    func adminLinkProviderForUser(input: AdminLinkProviderForUserInput) async throws -> AdminLinkProviderForUserOutputResponse
    /// Lists devices, as an administrator. Amazon Cognito evaluates Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you must use IAM credentials to authorize requests, and you must grant yourself the corresponding IAM permission in a policy. Learn more
    ///
    /// * [Signing Amazon Web Services API Requests](https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_aws-signing.html)
    ///
    /// * [Using the Amazon Cognito user pools API and user pool endpoints](https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html)
    ///
    /// - Parameter AdminListDevicesInput : Represents the request to list devices, as an administrator.
    ///
    /// - Returns: `AdminListDevicesOutputResponse` : Lists the device's response, as an administrator.
    ///
    /// - Throws: One of the exceptions listed below __Possible Exceptions__.
    ///
    /// __Possible Exceptions:__
    /// - `InternalErrorException` : This exception is thrown when Amazon Cognito encounters an internal error.
    /// - `InvalidParameterException` : This exception is thrown when the Amazon Cognito service encounters an invalid parameter.
    /// - `InvalidUserPoolConfigurationException` : This exception is thrown when the user pool configuration is not valid.
    /// - `NotAuthorizedException` : This exception is thrown when a user isn't authorized.
    /// - `ResourceNotFoundException` : This exception is thrown when the Amazon Cognito service can't find the requested resource.
    /// - `TooManyRequestsException` : This exception is thrown when the user has made too many requests for a given operation.
    func adminListDevices(input: AdminListDevicesInput) async throws -> AdminListDevicesOutputResponse
    /// Lists the groups that the user belongs to. Amazon Cognito evaluates Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you must use IAM credentials to authorize requests, and you must grant yourself the corresponding IAM permission in a policy. Learn more
    ///
    /// * [Signing Amazon Web Services API Requests](https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_aws-signing.html)
    ///
    /// * [Using the Amazon Cognito user pools API and user pool endpoints](https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html)
    ///
    /// - Parameter AdminListGroupsForUserInput : [no documentation found]
    ///
    /// - Returns: `AdminListGroupsForUserOutputResponse` : [no documentation found]
    ///
    /// - Throws: One of the exceptions listed below __Possible Exceptions__.
    ///
    /// __Possible Exceptions:__
    /// - `InternalErrorException` : This exception is thrown when Amazon Cognito encounters an internal error.
    /// - `InvalidParameterException` : This exception is thrown when the Amazon Cognito service encounters an invalid parameter.
    /// - `NotAuthorizedException` : This exception is thrown when a user isn't authorized.
    /// - `ResourceNotFoundException` : This exception is thrown when the Amazon Cognito service can't find the requested resource.
    /// - `TooManyRequestsException` : This exception is thrown when the user has made too many requests for a given operation.
    /// - `UserNotFoundException` : This exception is thrown when a user isn't found.
    func adminListGroupsForUser(input: AdminListGroupsForUserInput) async throws -> AdminListGroupsForUserOutputResponse
    /// A history of user activity and any risks detected as part of Amazon Cognito advanced security. Amazon Cognito evaluates Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you must use IAM credentials to authorize requests, and you must grant yourself the corresponding IAM permission in a policy. Learn more
    ///
    /// * [Signing Amazon Web Services API Requests](https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_aws-signing.html)
    ///
    /// * [Using the Amazon Cognito user pools API and user pool endpoints](https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html)
    ///
    /// - Parameter AdminListUserAuthEventsInput : [no documentation found]
    ///
    /// - Returns: `AdminListUserAuthEventsOutputResponse` : [no documentation found]
    ///
    /// - Throws: One of the exceptions listed below __Possible Exceptions__.
    ///
    /// __Possible Exceptions:__
    /// - `InternalErrorException` : This exception is thrown when Amazon Cognito encounters an internal error.
    /// - `InvalidParameterException` : This exception is thrown when the Amazon Cognito service encounters an invalid parameter.
    /// - `NotAuthorizedException` : This exception is thrown when a user isn't authorized.
    /// - `ResourceNotFoundException` : This exception is thrown when the Amazon Cognito service can't find the requested resource.
    /// - `TooManyRequestsException` : This exception is thrown when the user has made too many requests for a given operation.
    /// - `UserNotFoundException` : This exception is thrown when a user isn't found.
    /// - `UserPoolAddOnNotEnabledException` : This exception is thrown when user pool add-ons aren't enabled.
    func adminListUserAuthEvents(input: AdminListUserAuthEventsInput) async throws -> AdminListUserAuthEventsOutputResponse
    /// Removes the specified user from the specified group. Amazon Cognito evaluates Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you must use IAM credentials to authorize requests, and you must grant yourself the corresponding IAM permission in a policy. Learn more
    ///
    /// * [Signing Amazon Web Services API Requests](https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_aws-signing.html)
    ///
    /// * [Using the Amazon Cognito user pools API and user pool endpoints](https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html)
    ///
    /// - Parameter AdminRemoveUserFromGroupInput : [no documentation found]
    ///
    /// - Returns: `AdminRemoveUserFromGroupOutputResponse` : [no documentation found]
    ///
    /// - Throws: One of the exceptions listed below __Possible Exceptions__.
    ///
    /// __Possible Exceptions:__
    /// - `InternalErrorException` : This exception is thrown when Amazon Cognito encounters an internal error.
    /// - `InvalidParameterException` : This exception is thrown when the Amazon Cognito service encounters an invalid parameter.
    /// - `NotAuthorizedException` : This exception is thrown when a user isn't authorized.
    /// - `ResourceNotFoundException` : This exception is thrown when the Amazon Cognito service can't find the requested resource.
    /// - `TooManyRequestsException` : This exception is thrown when the user has made too many requests for a given operation.
    /// - `UserNotFoundException` : This exception is thrown when a user isn't found.
    func adminRemoveUserFromGroup(input: AdminRemoveUserFromGroupInput) async throws -> AdminRemoveUserFromGroupOutputResponse
    /// Resets the specified user's password in a user pool as an administrator. Works on any user. This action might generate an SMS text message. Starting June 1, 2021, US telecom carriers require you to register an origination phone number before you can send SMS messages to US phone numbers. If you use SMS text messages in Amazon Cognito, you must register a phone number with [Amazon Pinpoint](https://console.aws.amazon.com/pinpoint/home/). Amazon Cognito uses the registered number automatically. Otherwise, Amazon Cognito users who must receive SMS messages might not be able to sign up, activate their accounts, or sign in. If you have never used SMS text messages with Amazon Cognito or any other Amazon Web Service, Amazon Simple Notification Service might place your account in the SMS sandbox. In [sandbox mode](https://docs.aws.amazon.com/sns/latest/dg/sns-sms-sandbox.html) , you can send messages only to verified phone numbers. After you test your app while in the sandbox environment, you can move out of the sandbox and into production. For more information, see [ SMS message settings for Amazon Cognito user pools](https://docs.aws.amazon.com/cognito/latest/developerguide/user-pool-sms-settings.html) in the Amazon Cognito Developer Guide. Deactivates a user's password, requiring them to change it. If a user tries to sign in after the API is called, Amazon Cognito responds with a PasswordResetRequiredException error. Your app must then perform the actions that reset your user's password: the forgot-password flow. In addition, if the user pool has phone verification selected and a verified phone number exists for the user, or if email verification is selected and a verified email exists for the user, calling this API will also result in sending a message to the end user with the code to change their password. Amazon Cognito evaluates Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you must use IAM credentials to authorize requests, and you must grant yourself the corresponding IAM permission in a policy. Learn more
    ///
    /// * [Signing Amazon Web Services API Requests](https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_aws-signing.html)
    ///
    /// * [Using the Amazon Cognito user pools API and user pool endpoints](https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html)
    ///
    /// - Parameter AdminResetUserPasswordInput : Represents the request to reset a user's password as an administrator.
    ///
    /// - Returns: `AdminResetUserPasswordOutputResponse` : Represents the response from the server to reset a user password as an administrator.
    ///
    /// - Throws: One of the exceptions listed below __Possible Exceptions__.
    ///
    /// __Possible Exceptions:__
    /// - `InternalErrorException` : This exception is thrown when Amazon Cognito encounters an internal error.
    /// - `InvalidEmailRoleAccessPolicyException` : This exception is thrown when Amazon Cognito isn't allowed to use your email identity. HTTP status code: 400.
    /// - `InvalidLambdaResponseException` : This exception is thrown when Amazon Cognito encounters an invalid Lambda response.
    /// - `InvalidParameterException` : This exception is thrown when the Amazon Cognito service encounters an invalid parameter.
    /// - `InvalidSmsRoleAccessPolicyException` : This exception is returned when the role provided for SMS configuration doesn't have permission to publish using Amazon SNS.
    /// - `InvalidSmsRoleTrustRelationshipException` : This exception is thrown when the trust relationship is not valid for the role provided for SMS configuration. This can happen if you don't trust cognito-idp.amazonaws.com or the external ID provided in the role does not match what is provided in the SMS configuration for the user pool.
    /// - `LimitExceededException` : This exception is thrown when a user exceeds the limit for a requested Amazon Web Services resource.
    /// - `NotAuthorizedException` : This exception is thrown when a user isn't authorized.
    /// - `ResourceNotFoundException` : This exception is thrown when the Amazon Cognito service can't find the requested resource.
    /// - `TooManyRequestsException` : This exception is thrown when the user has made too many requests for a given operation.
    /// - `UnexpectedLambdaException` : This exception is thrown when Amazon Cognito encounters an unexpected exception with Lambda.
    /// - `UserLambdaValidationException` : This exception is thrown when the Amazon Cognito service encounters a user validation exception with the Lambda service.
    /// - `UserNotFoundException` : This exception is thrown when a user isn't found.
    func adminResetUserPassword(input: AdminResetUserPasswordInput) async throws -> AdminResetUserPasswordOutputResponse
    /// Responds to an authentication challenge, as an administrator. This action might generate an SMS text message. Starting June 1, 2021, US telecom carriers require you to register an origination phone number before you can send SMS messages to US phone numbers. If you use SMS text messages in Amazon Cognito, you must register a phone number with [Amazon Pinpoint](https://console.aws.amazon.com/pinpoint/home/). Amazon Cognito uses the registered number automatically. Otherwise, Amazon Cognito users who must receive SMS messages might not be able to sign up, activate their accounts, or sign in. If you have never used SMS text messages with Amazon Cognito or any other Amazon Web Service, Amazon Simple Notification Service might place your account in the SMS sandbox. In [sandbox mode](https://docs.aws.amazon.com/sns/latest/dg/sns-sms-sandbox.html) , you can send messages only to verified phone numbers. After you test your app while in the sandbox environment, you can move out of the sandbox and into production. For more information, see [ SMS message settings for Amazon Cognito user pools](https://docs.aws.amazon.com/cognito/latest/developerguide/user-pool-sms-settings.html) in the Amazon Cognito Developer Guide. Amazon Cognito evaluates Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you must use IAM credentials to authorize requests, and you must grant yourself the corresponding IAM permission in a policy. Learn more
    ///
    /// * [Signing Amazon Web Services API Requests](https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_aws-signing.html)
    ///
    /// * [Using the Amazon Cognito user pools API and user pool endpoints](https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html)
    ///
    /// - Parameter AdminRespondToAuthChallengeInput : The request to respond to the authentication challenge, as an administrator.
    ///
    /// - Returns: `AdminRespondToAuthChallengeOutputResponse` : Responds to the authentication challenge, as an administrator.
    ///
    /// - Throws: One of the exceptions listed below __Possible Exceptions__.
    ///
    /// __Possible Exceptions:__
    /// - `AliasExistsException` : This exception is thrown when a user tries to confirm the account with an email address or phone number that has already been supplied as an alias for a different user profile. This exception indicates that an account with this email address or phone already exists in a user pool that you've configured to use email address or phone number as a sign-in alias.
    /// - `CodeMismatchException` : This exception is thrown if the provided code doesn't match what the server was expecting.
    /// - `ExpiredCodeException` : This exception is thrown if a code has expired.
    /// - `InternalErrorException` : This exception is thrown when Amazon Cognito encounters an internal error.
    /// - `InvalidLambdaResponseException` : This exception is thrown when Amazon Cognito encounters an invalid Lambda response.
    /// - `InvalidParameterException` : This exception is thrown when the Amazon Cognito service encounters an invalid parameter.
    /// - `InvalidPasswordException` : This exception is thrown when Amazon Cognito encounters an invalid password.
    /// - `InvalidSmsRoleAccessPolicyException` : This exception is returned when the role provided for SMS configuration doesn't have permission to publish using Amazon SNS.
    /// - `InvalidSmsRoleTrustRelationshipException` : This exception is thrown when the trust relationship is not valid for the role provided for SMS configuration. This can happen if you don't trust cognito-idp.amazonaws.com or the external ID provided in the role does not match what is provided in the SMS configuration for the user pool.
    /// - `InvalidUserPoolConfigurationException` : This exception is thrown when the user pool configuration is not valid.
    /// - `MFAMethodNotFoundException` : This exception is thrown when Amazon Cognito can't find a multi-factor authentication (MFA) method.
    /// - `NotAuthorizedException` : This exception is thrown when a user isn't authorized.
    /// - `PasswordResetRequiredException` : This exception is thrown when a password reset is required.
    /// - `ResourceNotFoundException` : This exception is thrown when the Amazon Cognito service can't find the requested resource.
    /// - `SoftwareTokenMFANotFoundException` : This exception is thrown when the software token time-based one-time password (TOTP) multi-factor authentication (MFA) isn't activated for the user pool.
    /// - `TooManyRequestsException` : This exception is thrown when the user has made too many requests for a given operation.
    /// - `UnexpectedLambdaException` : This exception is thrown when Amazon Cognito encounters an unexpected exception with Lambda.
    /// - `UserLambdaValidationException` : This exception is thrown when the Amazon Cognito service encounters a user validation exception with the Lambda service.
    /// - `UserNotConfirmedException` : This exception is thrown when a user isn't confirmed successfully.
    /// - `UserNotFoundException` : This exception is thrown when a user isn't found.
    func adminRespondToAuthChallenge(input: AdminRespondToAuthChallengeInput) async throws -> AdminRespondToAuthChallengeOutputResponse
    /// The user's multi-factor authentication (MFA) preference, including which MFA options are activated, and if any are preferred. Only one factor can be set as preferred. The preferred MFA factor will be used to authenticate a user if multiple factors are activated. If multiple options are activated and no preference is set, a challenge to choose an MFA option will be returned during sign-in. Amazon Cognito evaluates Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you must use IAM credentials to authorize requests, and you must grant yourself the corresponding IAM permission in a policy. Learn more
    ///
    /// * [Signing Amazon Web Services API Requests](https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_aws-signing.html)
    ///
    /// * [Using the Amazon Cognito user pools API and user pool endpoints](https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html)
    ///
    /// - Parameter AdminSetUserMFAPreferenceInput : [no documentation found]
    ///
    /// - Returns: `AdminSetUserMFAPreferenceOutputResponse` : [no documentation found]
    ///
    /// - Throws: One of the exceptions listed below __Possible Exceptions__.
    ///
    /// __Possible Exceptions:__
    /// - `InternalErrorException` : This exception is thrown when Amazon Cognito encounters an internal error.
    /// - `InvalidParameterException` : This exception is thrown when the Amazon Cognito service encounters an invalid parameter.
    /// - `NotAuthorizedException` : This exception is thrown when a user isn't authorized.
    /// - `PasswordResetRequiredException` : This exception is thrown when a password reset is required.
    /// - `ResourceNotFoundException` : This exception is thrown when the Amazon Cognito service can't find the requested resource.
    /// - `UserNotConfirmedException` : This exception is thrown when a user isn't confirmed successfully.
    /// - `UserNotFoundException` : This exception is thrown when a user isn't found.
    func adminSetUserMFAPreference(input: AdminSetUserMFAPreferenceInput) async throws -> AdminSetUserMFAPreferenceOutputResponse
    /// Sets the specified user's password in a user pool as an administrator. Works on any user. The password can be temporary or permanent. If it is temporary, the user status enters the FORCE_CHANGE_PASSWORD state. When the user next tries to sign in, the InitiateAuth/AdminInitiateAuth response will contain the NEW_PASSWORD_REQUIRED challenge. If the user doesn't sign in before it expires, the user won't be able to sign in, and an administrator must reset their password. Once the user has set a new password, or the password is permanent, the user status is set to Confirmed. AdminSetUserPassword can set a password for the user profile that Amazon Cognito creates for third-party federated users. When you set a password, the federated user's status changes from EXTERNAL_PROVIDER to CONFIRMED. A user in this state can sign in as a federated user, and initiate authentication flows in the API like a linked native user. They can also modify their password and attributes in token-authenticated API requests like ChangePassword and UpdateUserAttributes. As a best security practice and to keep users in sync with your external IdP, don't set passwords on federated user profiles. To set up a federated user for native sign-in with a linked native user, refer to [Linking federated users to an existing user profile](https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-pools-identity-federation-consolidate-users.html). Amazon Cognito evaluates Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you must use IAM credentials to authorize requests, and you must grant yourself the corresponding IAM permission in a policy. Learn more
    ///
    /// * [Signing Amazon Web Services API Requests](https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_aws-signing.html)
    ///
    /// * [Using the Amazon Cognito user pools API and user pool endpoints](https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html)
    ///
    /// - Parameter AdminSetUserPasswordInput : [no documentation found]
    ///
    /// - Returns: `AdminSetUserPasswordOutputResponse` : [no documentation found]
    ///
    /// - Throws: One of the exceptions listed below __Possible Exceptions__.
    ///
    /// __Possible Exceptions:__
    /// - `InternalErrorException` : This exception is thrown when Amazon Cognito encounters an internal error.
    /// - `InvalidParameterException` : This exception is thrown when the Amazon Cognito service encounters an invalid parameter.
    /// - `InvalidPasswordException` : This exception is thrown when Amazon Cognito encounters an invalid password.
    /// - `NotAuthorizedException` : This exception is thrown when a user isn't authorized.
    /// - `ResourceNotFoundException` : This exception is thrown when the Amazon Cognito service can't find the requested resource.
    /// - `TooManyRequestsException` : This exception is thrown when the user has made too many requests for a given operation.
    /// - `UserNotFoundException` : This exception is thrown when a user isn't found.
    func adminSetUserPassword(input: AdminSetUserPasswordInput) async throws -> AdminSetUserPasswordOutputResponse
    /// This action is no longer supported. You can use it to configure only SMS MFA. You can't use it to configure time-based one-time password (TOTP) software token MFA. To configure either type of MFA, use [AdminSetUserMFAPreference](https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_AdminSetUserMFAPreference.html) instead. Amazon Cognito evaluates Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you must use IAM credentials to authorize requests, and you must grant yourself the corresponding IAM permission in a policy. Learn more
    ///
    /// * [Signing Amazon Web Services API Requests](https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_aws-signing.html)
    ///
    /// * [Using the Amazon Cognito user pools API and user pool endpoints](https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html)
    ///
    /// - Parameter AdminSetUserSettingsInput : You can use this parameter to set an MFA configuration that uses the SMS delivery medium.
    ///
    /// - Returns: `AdminSetUserSettingsOutputResponse` : Represents the response from the server to set user settings as an administrator.
    ///
    /// - Throws: One of the exceptions listed below __Possible Exceptions__.
    ///
    /// __Possible Exceptions:__
    /// - `InternalErrorException` : This exception is thrown when Amazon Cognito encounters an internal error.
    /// - `InvalidParameterException` : This exception is thrown when the Amazon Cognito service encounters an invalid parameter.
    /// - `NotAuthorizedException` : This exception is thrown when a user isn't authorized.
    /// - `ResourceNotFoundException` : This exception is thrown when the Amazon Cognito service can't find the requested resource.
    /// - `UserNotFoundException` : This exception is thrown when a user isn't found.
    func adminSetUserSettings(input: AdminSetUserSettingsInput) async throws -> AdminSetUserSettingsOutputResponse
    /// Provides feedback for an authentication event indicating if it was from a valid user. This feedback is used for improving the risk evaluation decision for the user pool as part of Amazon Cognito advanced security. Amazon Cognito evaluates Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you must use IAM credentials to authorize requests, and you must grant yourself the corresponding IAM permission in a policy. Learn more
    ///
    /// * [Signing Amazon Web Services API Requests](https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_aws-signing.html)
    ///
    /// * [Using the Amazon Cognito user pools API and user pool endpoints](https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html)
    ///
    /// - Parameter AdminUpdateAuthEventFeedbackInput : [no documentation found]
    ///
    /// - Returns: `AdminUpdateAuthEventFeedbackOutputResponse` : [no documentation found]
    ///
    /// - Throws: One of the exceptions listed below __Possible Exceptions__.
    ///
    /// __Possible Exceptions:__
    /// - `InternalErrorException` : This exception is thrown when Amazon Cognito encounters an internal error.
    /// - `InvalidParameterException` : This exception is thrown when the Amazon Cognito service encounters an invalid parameter.
    /// - `NotAuthorizedException` : This exception is thrown when a user isn't authorized.
    /// - `ResourceNotFoundException` : This exception is thrown when the Amazon Cognito service can't find the requested resource.
    /// - `TooManyRequestsException` : This exception is thrown when the user has made too many requests for a given operation.
    /// - `UserNotFoundException` : This exception is thrown when a user isn't found.
    /// - `UserPoolAddOnNotEnabledException` : This exception is thrown when user pool add-ons aren't enabled.
    func adminUpdateAuthEventFeedback(input: AdminUpdateAuthEventFeedbackInput) async throws -> AdminUpdateAuthEventFeedbackOutputResponse
    /// Updates the device status as an administrator. Amazon Cognito evaluates Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you must use IAM credentials to authorize requests, and you must grant yourself the corresponding IAM permission in a policy. Learn more
    ///
    /// * [Signing Amazon Web Services API Requests](https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_aws-signing.html)
    ///
    /// * [Using the Amazon Cognito user pools API and user pool endpoints](https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html)
    ///
    /// - Parameter AdminUpdateDeviceStatusInput : The request to update the device status, as an administrator.
    ///
    /// - Returns: `AdminUpdateDeviceStatusOutputResponse` : The status response to the request to update the device, as an administrator.
    ///
    /// - Throws: One of the exceptions listed below __Possible Exceptions__.
    ///
    /// __Possible Exceptions:__
    /// - `InternalErrorException` : This exception is thrown when Amazon Cognito encounters an internal error.
    /// - `InvalidParameterException` : This exception is thrown when the Amazon Cognito service encounters an invalid parameter.
    /// - `InvalidUserPoolConfigurationException` : This exception is thrown when the user pool configuration is not valid.
    /// - `NotAuthorizedException` : This exception is thrown when a user isn't authorized.
    /// - `ResourceNotFoundException` : This exception is thrown when the Amazon Cognito service can't find the requested resource.
    /// - `TooManyRequestsException` : This exception is thrown when the user has made too many requests for a given operation.
    /// - `UserNotFoundException` : This exception is thrown when a user isn't found.
    func adminUpdateDeviceStatus(input: AdminUpdateDeviceStatusInput) async throws -> AdminUpdateDeviceStatusOutputResponse
    /// This action might generate an SMS text message. Starting June 1, 2021, US telecom carriers require you to register an origination phone number before you can send SMS messages to US phone numbers. If you use SMS text messages in Amazon Cognito, you must register a phone number with [Amazon Pinpoint](https://console.aws.amazon.com/pinpoint/home/). Amazon Cognito uses the registered number automatically. Otherwise, Amazon Cognito users who must receive SMS messages might not be able to sign up, activate their accounts, or sign in. If you have never used SMS text messages with Amazon Cognito or any other Amazon Web Service, Amazon Simple Notification Service might place your account in the SMS sandbox. In [sandbox mode](https://docs.aws.amazon.com/sns/latest/dg/sns-sms-sandbox.html) , you can send messages only to verified phone numbers. After you test your app while in the sandbox environment, you can move out of the sandbox and into production. For more information, see [ SMS message settings for Amazon Cognito user pools](https://docs.aws.amazon.com/cognito/latest/developerguide/user-pool-sms-settings.html) in the Amazon Cognito Developer Guide. Updates the specified user's attributes, including developer attributes, as an administrator. Works on any user. For custom attributes, you must prepend the custom: prefix to the attribute name. In addition to updating user attributes, this API can also be used to mark phone and email as verified. Amazon Cognito evaluates Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you must use IAM credentials to authorize requests, and you must grant yourself the corresponding IAM permission in a policy. Learn more
    ///
    /// * [Signing Amazon Web Services API Requests](https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_aws-signing.html)
    ///
    /// * [Using the Amazon Cognito user pools API and user pool endpoints](https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html)
    ///
    /// - Parameter AdminUpdateUserAttributesInput : Represents the request to update the user's attributes as an administrator.
    ///
    /// - Returns: `AdminUpdateUserAttributesOutputResponse` : Represents the response from the server for the request to update user attributes as an administrator.
    ///
    /// - Throws: One of the exceptions listed below __Possible Exceptions__.
    ///
    /// __Possible Exceptions:__
    /// - `AliasExistsException` : This exception is thrown when a user tries to confirm the account with an email address or phone number that has already been supplied as an alias for a different user profile. This exception indicates that an account with this email address or phone already exists in a user pool that you've configured to use email address or phone number as a sign-in alias.
    /// - `InternalErrorException` : This exception is thrown when Amazon Cognito encounters an internal error.
    /// - `InvalidEmailRoleAccessPolicyException` : This exception is thrown when Amazon Cognito isn't allowed to use your email identity. HTTP status code: 400.
    /// - `InvalidLambdaResponseException` : This exception is thrown when Amazon Cognito encounters an invalid Lambda response.
    /// - `InvalidParameterException` : This exception is thrown when the Amazon Cognito service encounters an invalid parameter.
    /// - `InvalidSmsRoleAccessPolicyException` : This exception is returned when the role provided for SMS configuration doesn't have permission to publish using Amazon SNS.
    /// - `InvalidSmsRoleTrustRelationshipException` : This exception is thrown when the trust relationship is not valid for the role provided for SMS configuration. This can happen if you don't trust cognito-idp.amazonaws.com or the external ID provided in the role does not match what is provided in the SMS configuration for the user pool.
    /// - `NotAuthorizedException` : This exception is thrown when a user isn't authorized.
    /// - `ResourceNotFoundException` : This exception is thrown when the Amazon Cognito service can't find the requested resource.
    /// - `TooManyRequestsException` : This exception is thrown when the user has made too many requests for a given operation.
    /// - `UnexpectedLambdaException` : This exception is thrown when Amazon Cognito encounters an unexpected exception with Lambda.
    /// - `UserLambdaValidationException` : This exception is thrown when the Amazon Cognito service encounters a user validation exception with the Lambda service.
    /// - `UserNotFoundException` : This exception is thrown when a user isn't found.
    func adminUpdateUserAttributes(input: AdminUpdateUserAttributesInput) async throws -> AdminUpdateUserAttributesOutputResponse
    /// Signs out a user from all devices. AdminUserGlobalSignOut invalidates all identity, access and refresh tokens that Amazon Cognito has issued to a user. A user can still use a hosted UI cookie to retrieve new tokens for the duration of the 1-hour cookie validity period. Your app isn't aware that a user's access token is revoked unless it attempts to authorize a user pools API request with an access token that contains the scope aws.cognito.signin.user.admin. Your app might otherwise accept access tokens until they expire. Amazon Cognito evaluates Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you must use IAM credentials to authorize requests, and you must grant yourself the corresponding IAM permission in a policy. Learn more
    ///
    /// * [Signing Amazon Web Services API Requests](https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_aws-signing.html)
    ///
    /// * [Using the Amazon Cognito user pools API and user pool endpoints](https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html)
    ///
    /// - Parameter AdminUserGlobalSignOutInput : The request to sign out of all devices, as an administrator.
    ///
    /// - Returns: `AdminUserGlobalSignOutOutputResponse` : The global sign-out response, as an administrator.
    ///
    /// - Throws: One of the exceptions listed below __Possible Exceptions__.
    ///
    /// __Possible Exceptions:__
    /// - `InternalErrorException` : This exception is thrown when Amazon Cognito encounters an internal error.
    /// - `InvalidParameterException` : This exception is thrown when the Amazon Cognito service encounters an invalid parameter.
    /// - `NotAuthorizedException` : This exception is thrown when a user isn't authorized.
    /// - `ResourceNotFoundException` : This exception is thrown when the Amazon Cognito service can't find the requested resource.
    /// - `TooManyRequestsException` : This exception is thrown when the user has made too many requests for a given operation.
    /// - `UserNotFoundException` : This exception is thrown when a user isn't found.
    func adminUserGlobalSignOut(input: AdminUserGlobalSignOutInput) async throws -> AdminUserGlobalSignOutOutputResponse
    /// Begins setup of time-based one-time password (TOTP) multi-factor authentication (MFA) for a user, with a unique private key that Amazon Cognito generates and returns in the API response. You can authorize an AssociateSoftwareToken request with either the user's access token, or a session string from a challenge response that you received from Amazon Cognito. Amazon Cognito disassociates an existing software token when you verify the new token in a [ VerifySoftwareToken](https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_VerifySoftwareToken.html) API request. If you don't verify the software token and your user pool doesn't require MFA, the user can then authenticate with user name and password credentials alone. If your user pool requires TOTP MFA, Amazon Cognito generates an MFA_SETUP or SOFTWARE_TOKEN_SETUP challenge each time your user signs. Complete setup with AssociateSoftwareToken and VerifySoftwareToken. After you set up software token MFA for your user, Amazon Cognito generates a SOFTWARE_TOKEN_MFA challenge when they authenticate. Respond to this challenge with your user's TOTP. Amazon Cognito doesn't evaluate Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you can't use IAM credentials to authorize requests, and you can't grant IAM permissions in policies. For more information about authorization models in Amazon Cognito, see [Using the Amazon Cognito native and OIDC APIs](https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html).
    ///
    /// - Parameter AssociateSoftwareTokenInput : [no documentation found]
    ///
    /// - Returns: `AssociateSoftwareTokenOutputResponse` : [no documentation found]
    ///
    /// - Throws: One of the exceptions listed below __Possible Exceptions__.
    ///
    /// __Possible Exceptions:__
    /// - `ConcurrentModificationException` : This exception is thrown if two or more modifications are happening concurrently.
    /// - `ForbiddenException` : This exception is thrown when WAF doesn't allow your request based on a web ACL that's associated with your user pool.
    /// - `InternalErrorException` : This exception is thrown when Amazon Cognito encounters an internal error.
    /// - `InvalidParameterException` : This exception is thrown when the Amazon Cognito service encounters an invalid parameter.
    /// - `NotAuthorizedException` : This exception is thrown when a user isn't authorized.
    /// - `ResourceNotFoundException` : This exception is thrown when the Amazon Cognito service can't find the requested resource.
    /// - `SoftwareTokenMFANotFoundException` : This exception is thrown when the software token time-based one-time password (TOTP) multi-factor authentication (MFA) isn't activated for the user pool.
    func associateSoftwareToken(input: AssociateSoftwareTokenInput) async throws -> AssociateSoftwareTokenOutputResponse
    /// Changes the password for a specified user in a user pool. Amazon Cognito doesn't evaluate Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you can't use IAM credentials to authorize requests, and you can't grant IAM permissions in policies. For more information about authorization models in Amazon Cognito, see [Using the Amazon Cognito native and OIDC APIs](https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html).
    ///
    /// - Parameter ChangePasswordInput : Represents the request to change a user password.
    ///
    /// - Returns: `ChangePasswordOutputResponse` : The response from the server to the change password request.
    ///
    /// - Throws: One of the exceptions listed below __Possible Exceptions__.
    ///
    /// __Possible Exceptions:__
    /// - `ForbiddenException` : This exception is thrown when WAF doesn't allow your request based on a web ACL that's associated with your user pool.
    /// - `InternalErrorException` : This exception is thrown when Amazon Cognito encounters an internal error.
    /// - `InvalidParameterException` : This exception is thrown when the Amazon Cognito service encounters an invalid parameter.
    /// - `InvalidPasswordException` : This exception is thrown when Amazon Cognito encounters an invalid password.
    /// - `LimitExceededException` : This exception is thrown when a user exceeds the limit for a requested Amazon Web Services resource.
    /// - `NotAuthorizedException` : This exception is thrown when a user isn't authorized.
    /// - `PasswordResetRequiredException` : This exception is thrown when a password reset is required.
    /// - `ResourceNotFoundException` : This exception is thrown when the Amazon Cognito service can't find the requested resource.
    /// - `TooManyRequestsException` : This exception is thrown when the user has made too many requests for a given operation.
    /// - `UserNotConfirmedException` : This exception is thrown when a user isn't confirmed successfully.
    /// - `UserNotFoundException` : This exception is thrown when a user isn't found.
    func changePassword(input: ChangePasswordInput) async throws -> ChangePasswordOutputResponse
    /// Confirms tracking of the device. This API call is the call that begins device tracking. Amazon Cognito doesn't evaluate Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you can't use IAM credentials to authorize requests, and you can't grant IAM permissions in policies. For more information about authorization models in Amazon Cognito, see [Using the Amazon Cognito native and OIDC APIs](https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html).
    ///
    /// - Parameter ConfirmDeviceInput : Confirms the device request.
    ///
    /// - Returns: `ConfirmDeviceOutputResponse` : Confirms the device response.
    ///
    /// - Throws: One of the exceptions listed below __Possible Exceptions__.
    ///
    /// __Possible Exceptions:__
    /// - `ForbiddenException` : This exception is thrown when WAF doesn't allow your request based on a web ACL that's associated with your user pool.
    /// - `InternalErrorException` : This exception is thrown when Amazon Cognito encounters an internal error.
    /// - `InvalidLambdaResponseException` : This exception is thrown when Amazon Cognito encounters an invalid Lambda response.
    /// - `InvalidParameterException` : This exception is thrown when the Amazon Cognito service encounters an invalid parameter.
    /// - `InvalidPasswordException` : This exception is thrown when Amazon Cognito encounters an invalid password.
    /// - `InvalidUserPoolConfigurationException` : This exception is thrown when the user pool configuration is not valid.
    /// - `NotAuthorizedException` : This exception is thrown when a user isn't authorized.
    /// - `PasswordResetRequiredException` : This exception is thrown when a password reset is required.
    /// - `ResourceNotFoundException` : This exception is thrown when the Amazon Cognito service can't find the requested resource.
    /// - `TooManyRequestsException` : This exception is thrown when the user has made too many requests for a given operation.
    /// - `UsernameExistsException` : This exception is thrown when Amazon Cognito encounters a user name that already exists in the user pool.
    /// - `UserNotConfirmedException` : This exception is thrown when a user isn't confirmed successfully.
    /// - `UserNotFoundException` : This exception is thrown when a user isn't found.
    func confirmDevice(input: ConfirmDeviceInput) async throws -> ConfirmDeviceOutputResponse
    /// Allows a user to enter a confirmation code to reset a forgotten password. Amazon Cognito doesn't evaluate Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you can't use IAM credentials to authorize requests, and you can't grant IAM permissions in policies. For more information about authorization models in Amazon Cognito, see [Using the Amazon Cognito native and OIDC APIs](https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html).
    ///
    /// - Parameter ConfirmForgotPasswordInput : The request representing the confirmation for a password reset.
    ///
    /// - Returns: `ConfirmForgotPasswordOutputResponse` : The response from the server that results from a user's request to retrieve a forgotten password.
    ///
    /// - Throws: One of the exceptions listed below __Possible Exceptions__.
    ///
    /// __Possible Exceptions:__
    /// - `CodeMismatchException` : This exception is thrown if the provided code doesn't match what the server was expecting.
    /// - `ExpiredCodeException` : This exception is thrown if a code has expired.
    /// - `ForbiddenException` : This exception is thrown when WAF doesn't allow your request based on a web ACL that's associated with your user pool.
    /// - `InternalErrorException` : This exception is thrown when Amazon Cognito encounters an internal error.
    /// - `InvalidLambdaResponseException` : This exception is thrown when Amazon Cognito encounters an invalid Lambda response.
    /// - `InvalidParameterException` : This exception is thrown when the Amazon Cognito service encounters an invalid parameter.
    /// - `InvalidPasswordException` : This exception is thrown when Amazon Cognito encounters an invalid password.
    /// - `LimitExceededException` : This exception is thrown when a user exceeds the limit for a requested Amazon Web Services resource.
    /// - `NotAuthorizedException` : This exception is thrown when a user isn't authorized.
    /// - `ResourceNotFoundException` : This exception is thrown when the Amazon Cognito service can't find the requested resource.
    /// - `TooManyFailedAttemptsException` : This exception is thrown when the user has made too many failed attempts for a given action, such as sign-in.
    /// - `TooManyRequestsException` : This exception is thrown when the user has made too many requests for a given operation.
    /// - `UnexpectedLambdaException` : This exception is thrown when Amazon Cognito encounters an unexpected exception with Lambda.
    /// - `UserLambdaValidationException` : This exception is thrown when the Amazon Cognito service encounters a user validation exception with the Lambda service.
    /// - `UserNotConfirmedException` : This exception is thrown when a user isn't confirmed successfully.
    /// - `UserNotFoundException` : This exception is thrown when a user isn't found.
    func confirmForgotPassword(input: ConfirmForgotPasswordInput) async throws -> ConfirmForgotPasswordOutputResponse
    /// Confirms registration of a new user. Amazon Cognito doesn't evaluate Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you can't use IAM credentials to authorize requests, and you can't grant IAM permissions in policies. For more information about authorization models in Amazon Cognito, see [Using the Amazon Cognito native and OIDC APIs](https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html).
    ///
    /// - Parameter ConfirmSignUpInput : Represents the request to confirm registration of a user.
    ///
    /// - Returns: `ConfirmSignUpOutputResponse` : Represents the response from the server for the registration confirmation.
    ///
    /// - Throws: One of the exceptions listed below __Possible Exceptions__.
    ///
    /// __Possible Exceptions:__
    /// - `AliasExistsException` : This exception is thrown when a user tries to confirm the account with an email address or phone number that has already been supplied as an alias for a different user profile. This exception indicates that an account with this email address or phone already exists in a user pool that you've configured to use email address or phone number as a sign-in alias.
    /// - `CodeMismatchException` : This exception is thrown if the provided code doesn't match what the server was expecting.
    /// - `ExpiredCodeException` : This exception is thrown if a code has expired.
    /// - `ForbiddenException` : This exception is thrown when WAF doesn't allow your request based on a web ACL that's associated with your user pool.
    /// - `InternalErrorException` : This exception is thrown when Amazon Cognito encounters an internal error.
    /// - `InvalidLambdaResponseException` : This exception is thrown when Amazon Cognito encounters an invalid Lambda response.
    /// - `InvalidParameterException` : This exception is thrown when the Amazon Cognito service encounters an invalid parameter.
    /// - `LimitExceededException` : This exception is thrown when a user exceeds the limit for a requested Amazon Web Services resource.
    /// - `NotAuthorizedException` : This exception is thrown when a user isn't authorized.
    /// - `ResourceNotFoundException` : This exception is thrown when the Amazon Cognito service can't find the requested resource.
    /// - `TooManyFailedAttemptsException` : This exception is thrown when the user has made too many failed attempts for a given action, such as sign-in.
    /// - `TooManyRequestsException` : This exception is thrown when the user has made too many requests for a given operation.
    /// - `UnexpectedLambdaException` : This exception is thrown when Amazon Cognito encounters an unexpected exception with Lambda.
    /// - `UserLambdaValidationException` : This exception is thrown when the Amazon Cognito service encounters a user validation exception with the Lambda service.
    /// - `UserNotFoundException` : This exception is thrown when a user isn't found.
    func confirmSignUp(input: ConfirmSignUpInput) async throws -> ConfirmSignUpOutputResponse
    /// Creates a new group in the specified user pool. Amazon Cognito evaluates Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you must use IAM credentials to authorize requests, and you must grant yourself the corresponding IAM permission in a policy. Learn more
    ///
    /// * [Signing Amazon Web Services API Requests](https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_aws-signing.html)
    ///
    /// * [Using the Amazon Cognito user pools API and user pool endpoints](https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html)
    ///
    /// - Parameter CreateGroupInput : [no documentation found]
    ///
    /// - Returns: `CreateGroupOutputResponse` : [no documentation found]
    ///
    /// - Throws: One of the exceptions listed below __Possible Exceptions__.
    ///
    /// __Possible Exceptions:__
    /// - `GroupExistsException` : This exception is thrown when Amazon Cognito encounters a group that already exists in the user pool.
    /// - `InternalErrorException` : This exception is thrown when Amazon Cognito encounters an internal error.
    /// - `InvalidParameterException` : This exception is thrown when the Amazon Cognito service encounters an invalid parameter.
    /// - `LimitExceededException` : This exception is thrown when a user exceeds the limit for a requested Amazon Web Services resource.
    /// - `NotAuthorizedException` : This exception is thrown when a user isn't authorized.
    /// - `ResourceNotFoundException` : This exception is thrown when the Amazon Cognito service can't find the requested resource.
    /// - `TooManyRequestsException` : This exception is thrown when the user has made too many requests for a given operation.
    func createGroup(input: CreateGroupInput) async throws -> CreateGroupOutputResponse
    /// Creates an IdP for a user pool. Amazon Cognito evaluates Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you must use IAM credentials to authorize requests, and you must grant yourself the corresponding IAM permission in a policy. Learn more
    ///
    /// * [Signing Amazon Web Services API Requests](https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_aws-signing.html)
    ///
    /// * [Using the Amazon Cognito user pools API and user pool endpoints](https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html)
    ///
    /// - Parameter CreateIdentityProviderInput : [no documentation found]
    ///
    /// - Returns: `CreateIdentityProviderOutputResponse` : [no documentation found]
    ///
    /// - Throws: One of the exceptions listed below __Possible Exceptions__.
    ///
    /// __Possible Exceptions:__
    /// - `DuplicateProviderException` : This exception is thrown when the provider is already supported by the user pool.
    /// - `InternalErrorException` : This exception is thrown when Amazon Cognito encounters an internal error.
    /// - `InvalidParameterException` : This exception is thrown when the Amazon Cognito service encounters an invalid parameter.
    /// - `LimitExceededException` : This exception is thrown when a user exceeds the limit for a requested Amazon Web Services resource.
    /// - `NotAuthorizedException` : This exception is thrown when a user isn't authorized.
    /// - `ResourceNotFoundException` : This exception is thrown when the Amazon Cognito service can't find the requested resource.
    /// - `TooManyRequestsException` : This exception is thrown when the user has made too many requests for a given operation.
    func createIdentityProvider(input: CreateIdentityProviderInput) async throws -> CreateIdentityProviderOutputResponse
    /// Creates a new OAuth2.0 resource server and defines custom scopes within it. Amazon Cognito evaluates Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you must use IAM credentials to authorize requests, and you must grant yourself the corresponding IAM permission in a policy. Learn more
    ///
    /// * [Signing Amazon Web Services API Requests](https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_aws-signing.html)
    ///
    /// * [Using the Amazon Cognito user pools API and user pool endpoints](https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html)
    ///
    /// - Parameter CreateResourceServerInput : [no documentation found]
    ///
    /// - Returns: `CreateResourceServerOutputResponse` : [no documentation found]
    ///
    /// - Throws: One of the exceptions listed below __Possible Exceptions__.
    ///
    /// __Possible Exceptions:__
    /// - `InternalErrorException` : This exception is thrown when Amazon Cognito encounters an internal error.
    /// - `InvalidParameterException` : This exception is thrown when the Amazon Cognito service encounters an invalid parameter.
    /// - `LimitExceededException` : This exception is thrown when a user exceeds the limit for a requested Amazon Web Services resource.
    /// - `NotAuthorizedException` : This exception is thrown when a user isn't authorized.
    /// - `ResourceNotFoundException` : This exception is thrown when the Amazon Cognito service can't find the requested resource.
    /// - `TooManyRequestsException` : This exception is thrown when the user has made too many requests for a given operation.
    func createResourceServer(input: CreateResourceServerInput) async throws -> CreateResourceServerOutputResponse
    /// Creates a user import job. Amazon Cognito evaluates Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you must use IAM credentials to authorize requests, and you must grant yourself the corresponding IAM permission in a policy. Learn more
    ///
    /// * [Signing Amazon Web Services API Requests](https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_aws-signing.html)
    ///
    /// * [Using the Amazon Cognito user pools API and user pool endpoints](https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html)
    ///
    /// - Parameter CreateUserImportJobInput : Represents the request to create the user import job.
    ///
    /// - Returns: `CreateUserImportJobOutputResponse` : Represents the response from the server to the request to create the user import job.
    ///
    /// - Throws: One of the exceptions listed below __Possible Exceptions__.
    ///
    /// __Possible Exceptions:__
    /// - `InternalErrorException` : This exception is thrown when Amazon Cognito encounters an internal error.
    /// - `InvalidParameterException` : This exception is thrown when the Amazon Cognito service encounters an invalid parameter.
    /// - `LimitExceededException` : This exception is thrown when a user exceeds the limit for a requested Amazon Web Services resource.
    /// - `NotAuthorizedException` : This exception is thrown when a user isn't authorized.
    /// - `PreconditionNotMetException` : This exception is thrown when a precondition is not met.
    /// - `ResourceNotFoundException` : This exception is thrown when the Amazon Cognito service can't find the requested resource.
    /// - `TooManyRequestsException` : This exception is thrown when the user has made too many requests for a given operation.
    func createUserImportJob(input: CreateUserImportJobInput) async throws -> CreateUserImportJobOutputResponse
    /// This action might generate an SMS text message. Starting June 1, 2021, US telecom carriers require you to register an origination phone number before you can send SMS messages to US phone numbers. If you use SMS text messages in Amazon Cognito, you must register a phone number with [Amazon Pinpoint](https://console.aws.amazon.com/pinpoint/home/). Amazon Cognito uses the registered number automatically. Otherwise, Amazon Cognito users who must receive SMS messages might not be able to sign up, activate their accounts, or sign in. If you have never used SMS text messages with Amazon Cognito or any other Amazon Web Service, Amazon Simple Notification Service might place your account in the SMS sandbox. In [sandbox mode](https://docs.aws.amazon.com/sns/latest/dg/sns-sms-sandbox.html) , you can send messages only to verified phone numbers. After you test your app while in the sandbox environment, you can move out of the sandbox and into production. For more information, see [ SMS message settings for Amazon Cognito user pools](https://docs.aws.amazon.com/cognito/latest/developerguide/user-pool-sms-settings.html) in the Amazon Cognito Developer Guide. Creates a new Amazon Cognito user pool and sets the password policy for the pool. If you don't provide a value for an attribute, Amazon Cognito sets it to its default value. Amazon Cognito evaluates Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you must use IAM credentials to authorize requests, and you must grant yourself the corresponding IAM permission in a policy. Learn more
    ///
    /// * [Signing Amazon Web Services API Requests](https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_aws-signing.html)
    ///
    /// * [Using the Amazon Cognito user pools API and user pool endpoints](https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html)
    ///
    /// - Parameter CreateUserPoolInput : Represents the request to create a user pool.
    ///
    /// - Returns: `CreateUserPoolOutputResponse` : Represents the response from the server for the request to create a user pool.
    ///
    /// - Throws: One of the exceptions listed below __Possible Exceptions__.
    ///
    /// __Possible Exceptions:__
    /// - `InternalErrorException` : This exception is thrown when Amazon Cognito encounters an internal error.
    /// - `InvalidEmailRoleAccessPolicyException` : This exception is thrown when Amazon Cognito isn't allowed to use your email identity. HTTP status code: 400.
    /// - `InvalidParameterException` : This exception is thrown when the Amazon Cognito service encounters an invalid parameter.
    /// - `InvalidSmsRoleAccessPolicyException` : This exception is returned when the role provided for SMS configuration doesn't have permission to publish using Amazon SNS.
    /// - `InvalidSmsRoleTrustRelationshipException` : This exception is thrown when the trust relationship is not valid for the role provided for SMS configuration. This can happen if you don't trust cognito-idp.amazonaws.com or the external ID provided in the role does not match what is provided in the SMS configuration for the user pool.
    /// - `LimitExceededException` : This exception is thrown when a user exceeds the limit for a requested Amazon Web Services resource.
    /// - `NotAuthorizedException` : This exception is thrown when a user isn't authorized.
    /// - `TooManyRequestsException` : This exception is thrown when the user has made too many requests for a given operation.
    /// - `UserPoolTaggingException` : This exception is thrown when a user pool tag can't be set or updated.
    func createUserPool(input: CreateUserPoolInput) async throws -> CreateUserPoolOutputResponse
    /// Creates the user pool client. When you create a new user pool client, token revocation is automatically activated. For more information about revoking tokens, see [RevokeToken](https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_RevokeToken.html). If you don't provide a value for an attribute, Amazon Cognito sets it to its default value. Amazon Cognito evaluates Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you must use IAM credentials to authorize requests, and you must grant yourself the corresponding IAM permission in a policy. Learn more
    ///
    /// * [Signing Amazon Web Services API Requests](https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_aws-signing.html)
    ///
    /// * [Using the Amazon Cognito user pools API and user pool endpoints](https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html)
    ///
    /// - Parameter CreateUserPoolClientInput : Represents the request to create a user pool client.
    ///
    /// - Returns: `CreateUserPoolClientOutputResponse` : Represents the response from the server to create a user pool client.
    ///
    /// - Throws: One of the exceptions listed below __Possible Exceptions__.
    ///
    /// __Possible Exceptions:__
    /// - `InternalErrorException` : This exception is thrown when Amazon Cognito encounters an internal error.
    /// - `InvalidOAuthFlowException` : This exception is thrown when the specified OAuth flow is not valid.
    /// - `InvalidParameterException` : This exception is thrown when the Amazon Cognito service encounters an invalid parameter.
    /// - `LimitExceededException` : This exception is thrown when a user exceeds the limit for a requested Amazon Web Services resource.
    /// - `NotAuthorizedException` : This exception is thrown when a user isn't authorized.
    /// - `ResourceNotFoundException` : This exception is thrown when the Amazon Cognito service can't find the requested resource.
    /// - `ScopeDoesNotExistException` : This exception is thrown when the specified scope doesn't exist.
    /// - `TooManyRequestsException` : This exception is thrown when the user has made too many requests for a given operation.
    func createUserPoolClient(input: CreateUserPoolClientInput) async throws -> CreateUserPoolClientOutputResponse
    /// Creates a new domain for a user pool. Amazon Cognito evaluates Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you must use IAM credentials to authorize requests, and you must grant yourself the corresponding IAM permission in a policy. Learn more
    ///
    /// * [Signing Amazon Web Services API Requests](https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_aws-signing.html)
    ///
    /// * [Using the Amazon Cognito user pools API and user pool endpoints](https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html)
    ///
    /// - Parameter CreateUserPoolDomainInput : [no documentation found]
    ///
    /// - Returns: `CreateUserPoolDomainOutputResponse` : [no documentation found]
    ///
    /// - Throws: One of the exceptions listed below __Possible Exceptions__.
    ///
    /// __Possible Exceptions:__
    /// - `InternalErrorException` : This exception is thrown when Amazon Cognito encounters an internal error.
    /// - `InvalidParameterException` : This exception is thrown when the Amazon Cognito service encounters an invalid parameter.
    /// - `LimitExceededException` : This exception is thrown when a user exceeds the limit for a requested Amazon Web Services resource.
    /// - `NotAuthorizedException` : This exception is thrown when a user isn't authorized.
    /// - `ResourceNotFoundException` : This exception is thrown when the Amazon Cognito service can't find the requested resource.
    func createUserPoolDomain(input: CreateUserPoolDomainInput) async throws -> CreateUserPoolDomainOutputResponse
    /// Deletes a group. Calling this action requires developer credentials.
    ///
    /// - Parameter DeleteGroupInput : [no documentation found]
    ///
    /// - Returns: `DeleteGroupOutputResponse` : [no documentation found]
    ///
    /// - Throws: One of the exceptions listed below __Possible Exceptions__.
    ///
    /// __Possible Exceptions:__
    /// - `InternalErrorException` : This exception is thrown when Amazon Cognito encounters an internal error.
    /// - `InvalidParameterException` : This exception is thrown when the Amazon Cognito service encounters an invalid parameter.
    /// - `NotAuthorizedException` : This exception is thrown when a user isn't authorized.
    /// - `ResourceNotFoundException` : This exception is thrown when the Amazon Cognito service can't find the requested resource.
    /// - `TooManyRequestsException` : This exception is thrown when the user has made too many requests for a given operation.
    func deleteGroup(input: DeleteGroupInput) async throws -> DeleteGroupOutputResponse
    /// Deletes an IdP for a user pool.
    ///
    /// - Parameter DeleteIdentityProviderInput : [no documentation found]
    ///
    /// - Returns: `DeleteIdentityProviderOutputResponse` : [no documentation found]
    ///
    /// - Throws: One of the exceptions listed below __Possible Exceptions__.
    ///
    /// __Possible Exceptions:__
    /// - `ConcurrentModificationException` : This exception is thrown if two or more modifications are happening concurrently.
    /// - `InternalErrorException` : This exception is thrown when Amazon Cognito encounters an internal error.
    /// - `InvalidParameterException` : This exception is thrown when the Amazon Cognito service encounters an invalid parameter.
    /// - `NotAuthorizedException` : This exception is thrown when a user isn't authorized.
    /// - `ResourceNotFoundException` : This exception is thrown when the Amazon Cognito service can't find the requested resource.
    /// - `TooManyRequestsException` : This exception is thrown when the user has made too many requests for a given operation.
    /// - `UnsupportedIdentityProviderException` : This exception is thrown when the specified identifier isn't supported.
    func deleteIdentityProvider(input: DeleteIdentityProviderInput) async throws -> DeleteIdentityProviderOutputResponse
    /// Deletes a resource server.
    ///
    /// - Parameter DeleteResourceServerInput : [no documentation found]
    ///
    /// - Returns: `DeleteResourceServerOutputResponse` : [no documentation found]
    ///
    /// - Throws: One of the exceptions listed below __Possible Exceptions__.
    ///
    /// __Possible Exceptions:__
    /// - `InternalErrorException` : This exception is thrown when Amazon Cognito encounters an internal error.
    /// - `InvalidParameterException` : This exception is thrown when the Amazon Cognito service encounters an invalid parameter.
    /// - `NotAuthorizedException` : This exception is thrown when a user isn't authorized.
    /// - `ResourceNotFoundException` : This exception is thrown when the Amazon Cognito service can't find the requested resource.
    /// - `TooManyRequestsException` : This exception is thrown when the user has made too many requests for a given operation.
    func deleteResourceServer(input: DeleteResourceServerInput) async throws -> DeleteResourceServerOutputResponse
    /// Allows a user to delete their own user profile. Amazon Cognito doesn't evaluate Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you can't use IAM credentials to authorize requests, and you can't grant IAM permissions in policies. For more information about authorization models in Amazon Cognito, see [Using the Amazon Cognito native and OIDC APIs](https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html).
    ///
    /// - Parameter DeleteUserInput : Represents the request to delete a user.
    ///
    /// - Returns: `DeleteUserOutputResponse` : [no documentation found]
    ///
    /// - Throws: One of the exceptions listed below __Possible Exceptions__.
    ///
    /// __Possible Exceptions:__
    /// - `ForbiddenException` : This exception is thrown when WAF doesn't allow your request based on a web ACL that's associated with your user pool.
    /// - `InternalErrorException` : This exception is thrown when Amazon Cognito encounters an internal error.
    /// - `InvalidParameterException` : This exception is thrown when the Amazon Cognito service encounters an invalid parameter.
    /// - `NotAuthorizedException` : This exception is thrown when a user isn't authorized.
    /// - `PasswordResetRequiredException` : This exception is thrown when a password reset is required.
    /// - `ResourceNotFoundException` : This exception is thrown when the Amazon Cognito service can't find the requested resource.
    /// - `TooManyRequestsException` : This exception is thrown when the user has made too many requests for a given operation.
    /// - `UserNotConfirmedException` : This exception is thrown when a user isn't confirmed successfully.
    /// - `UserNotFoundException` : This exception is thrown when a user isn't found.
    func deleteUser(input: DeleteUserInput) async throws -> DeleteUserOutputResponse
    /// Deletes the attributes for a user. Amazon Cognito doesn't evaluate Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you can't use IAM credentials to authorize requests, and you can't grant IAM permissions in policies. For more information about authorization models in Amazon Cognito, see [Using the Amazon Cognito native and OIDC APIs](https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html).
    ///
    /// - Parameter DeleteUserAttributesInput : Represents the request to delete user attributes.
    ///
    /// - Returns: `DeleteUserAttributesOutputResponse` : Represents the response from the server to delete user attributes.
    ///
    /// - Throws: One of the exceptions listed below __Possible Exceptions__.
    ///
    /// __Possible Exceptions:__
    /// - `ForbiddenException` : This exception is thrown when WAF doesn't allow your request based on a web ACL that's associated with your user pool.
    /// - `InternalErrorException` : This exception is thrown when Amazon Cognito encounters an internal error.
    /// - `InvalidParameterException` : This exception is thrown when the Amazon Cognito service encounters an invalid parameter.
    /// - `NotAuthorizedException` : This exception is thrown when a user isn't authorized.
    /// - `PasswordResetRequiredException` : This exception is thrown when a password reset is required.
    /// - `ResourceNotFoundException` : This exception is thrown when the Amazon Cognito service can't find the requested resource.
    /// - `TooManyRequestsException` : This exception is thrown when the user has made too many requests for a given operation.
    /// - `UserNotConfirmedException` : This exception is thrown when a user isn't confirmed successfully.
    /// - `UserNotFoundException` : This exception is thrown when a user isn't found.
    func deleteUserAttributes(input: DeleteUserAttributesInput) async throws -> DeleteUserAttributesOutputResponse
    /// Deletes the specified Amazon Cognito user pool.
    ///
    /// - Parameter DeleteUserPoolInput : Represents the request to delete a user pool.
    ///
    /// - Returns: `DeleteUserPoolOutputResponse` : [no documentation found]
    ///
    /// - Throws: One of the exceptions listed below __Possible Exceptions__.
    ///
    /// __Possible Exceptions:__
    /// - `InternalErrorException` : This exception is thrown when Amazon Cognito encounters an internal error.
    /// - `InvalidParameterException` : This exception is thrown when the Amazon Cognito service encounters an invalid parameter.
    /// - `NotAuthorizedException` : This exception is thrown when a user isn't authorized.
    /// - `ResourceNotFoundException` : This exception is thrown when the Amazon Cognito service can't find the requested resource.
    /// - `TooManyRequestsException` : This exception is thrown when the user has made too many requests for a given operation.
    /// - `UserImportInProgressException` : This exception is thrown when you're trying to modify a user pool while a user import job is in progress for that pool.
    func deleteUserPool(input: DeleteUserPoolInput) async throws -> DeleteUserPoolOutputResponse
    /// Allows the developer to delete the user pool client.
    ///
    /// - Parameter DeleteUserPoolClientInput : Represents the request to delete a user pool client.
    ///
    /// - Returns: `DeleteUserPoolClientOutputResponse` : [no documentation found]
    ///
    /// - Throws: One of the exceptions listed below __Possible Exceptions__.
    ///
    /// __Possible Exceptions:__
    /// - `ConcurrentModificationException` : This exception is thrown if two or more modifications are happening concurrently.
    /// - `InternalErrorException` : This exception is thrown when Amazon Cognito encounters an internal error.
    /// - `InvalidParameterException` : This exception is thrown when the Amazon Cognito service encounters an invalid parameter.
    /// - `NotAuthorizedException` : This exception is thrown when a user isn't authorized.
    /// - `ResourceNotFoundException` : This exception is thrown when the Amazon Cognito service can't find the requested resource.
    /// - `TooManyRequestsException` : This exception is thrown when the user has made too many requests for a given operation.
    func deleteUserPoolClient(input: DeleteUserPoolClientInput) async throws -> DeleteUserPoolClientOutputResponse
    /// Deletes a domain for a user pool.
    ///
    /// - Parameter DeleteUserPoolDomainInput : [no documentation found]
    ///
    /// - Returns: `DeleteUserPoolDomainOutputResponse` : [no documentation found]
    ///
    /// - Throws: One of the exceptions listed below __Possible Exceptions__.
    ///
    /// __Possible Exceptions:__
    /// - `InternalErrorException` : This exception is thrown when Amazon Cognito encounters an internal error.
    /// - `InvalidParameterException` : This exception is thrown when the Amazon Cognito service encounters an invalid parameter.
    /// - `NotAuthorizedException` : This exception is thrown when a user isn't authorized.
    /// - `ResourceNotFoundException` : This exception is thrown when the Amazon Cognito service can't find the requested resource.
    func deleteUserPoolDomain(input: DeleteUserPoolDomainInput) async throws -> DeleteUserPoolDomainOutputResponse
    /// Gets information about a specific IdP.
    ///
    /// - Parameter DescribeIdentityProviderInput : [no documentation found]
    ///
    /// - Returns: `DescribeIdentityProviderOutputResponse` : [no documentation found]
    ///
    /// - Throws: One of the exceptions listed below __Possible Exceptions__.
    ///
    /// __Possible Exceptions:__
    /// - `InternalErrorException` : This exception is thrown when Amazon Cognito encounters an internal error.
    /// - `InvalidParameterException` : This exception is thrown when the Amazon Cognito service encounters an invalid parameter.
    /// - `NotAuthorizedException` : This exception is thrown when a user isn't authorized.
    /// - `ResourceNotFoundException` : This exception is thrown when the Amazon Cognito service can't find the requested resource.
    /// - `TooManyRequestsException` : This exception is thrown when the user has made too many requests for a given operation.
    func describeIdentityProvider(input: DescribeIdentityProviderInput) async throws -> DescribeIdentityProviderOutputResponse
    /// Describes a resource server.
    ///
    /// - Parameter DescribeResourceServerInput : [no documentation found]
    ///
    /// - Returns: `DescribeResourceServerOutputResponse` : [no documentation found]
    ///
    /// - Throws: One of the exceptions listed below __Possible Exceptions__.
    ///
    /// __Possible Exceptions:__
    /// - `InternalErrorException` : This exception is thrown when Amazon Cognito encounters an internal error.
    /// - `InvalidParameterException` : This exception is thrown when the Amazon Cognito service encounters an invalid parameter.
    /// - `NotAuthorizedException` : This exception is thrown when a user isn't authorized.
    /// - `ResourceNotFoundException` : This exception is thrown when the Amazon Cognito service can't find the requested resource.
    /// - `TooManyRequestsException` : This exception is thrown when the user has made too many requests for a given operation.
    func describeResourceServer(input: DescribeResourceServerInput) async throws -> DescribeResourceServerOutputResponse
    /// Describes the risk configuration.
    ///
    /// - Parameter DescribeRiskConfigurationInput : [no documentation found]
    ///
    /// - Returns: `DescribeRiskConfigurationOutputResponse` : [no documentation found]
    ///
    /// - Throws: One of the exceptions listed below __Possible Exceptions__.
    ///
    /// __Possible Exceptions:__
    /// - `InternalErrorException` : This exception is thrown when Amazon Cognito encounters an internal error.
    /// - `InvalidParameterException` : This exception is thrown when the Amazon Cognito service encounters an invalid parameter.
    /// - `NotAuthorizedException` : This exception is thrown when a user isn't authorized.
    /// - `ResourceNotFoundException` : This exception is thrown when the Amazon Cognito service can't find the requested resource.
    /// - `TooManyRequestsException` : This exception is thrown when the user has made too many requests for a given operation.
    /// - `UserPoolAddOnNotEnabledException` : This exception is thrown when user pool add-ons aren't enabled.
    func describeRiskConfiguration(input: DescribeRiskConfigurationInput) async throws -> DescribeRiskConfigurationOutputResponse
    /// Describes the user import job.
    ///
    /// - Parameter DescribeUserImportJobInput : Represents the request to describe the user import job.
    ///
    /// - Returns: `DescribeUserImportJobOutputResponse` : Represents the response from the server to the request to describe the user import job.
    ///
    /// - Throws: One of the exceptions listed below __Possible Exceptions__.
    ///
    /// __Possible Exceptions:__
    /// - `InternalErrorException` : This exception is thrown when Amazon Cognito encounters an internal error.
    /// - `InvalidParameterException` : This exception is thrown when the Amazon Cognito service encounters an invalid parameter.
    /// - `NotAuthorizedException` : This exception is thrown when a user isn't authorized.
    /// - `ResourceNotFoundException` : This exception is thrown when the Amazon Cognito service can't find the requested resource.
    /// - `TooManyRequestsException` : This exception is thrown when the user has made too many requests for a given operation.
    func describeUserImportJob(input: DescribeUserImportJobInput) async throws -> DescribeUserImportJobOutputResponse
    /// Returns the configuration information and metadata of the specified user pool. Amazon Cognito evaluates Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you must use IAM credentials to authorize requests, and you must grant yourself the corresponding IAM permission in a policy. Learn more
    ///
    /// * [Signing Amazon Web Services API Requests](https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_aws-signing.html)
    ///
    /// * [Using the Amazon Cognito user pools API and user pool endpoints](https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html)
    ///
    /// - Parameter DescribeUserPoolInput : Represents the request to describe the user pool.
    ///
    /// - Returns: `DescribeUserPoolOutputResponse` : Represents the response to describe the user pool.
    ///
    /// - Throws: One of the exceptions listed below __Possible Exceptions__.
    ///
    /// __Possible Exceptions:__
    /// - `InternalErrorException` : This exception is thrown when Amazon Cognito encounters an internal error.
    /// - `InvalidParameterException` : This exception is thrown when the Amazon Cognito service encounters an invalid parameter.
    /// - `NotAuthorizedException` : This exception is thrown when a user isn't authorized.
    /// - `ResourceNotFoundException` : This exception is thrown when the Amazon Cognito service can't find the requested resource.
    /// - `TooManyRequestsException` : This exception is thrown when the user has made too many requests for a given operation.
    /// - `UserPoolTaggingException` : This exception is thrown when a user pool tag can't be set or updated.
    func describeUserPool(input: DescribeUserPoolInput) async throws -> DescribeUserPoolOutputResponse
    /// Client method for returning the configuration information and metadata of the specified user pool app client. Amazon Cognito evaluates Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you must use IAM credentials to authorize requests, and you must grant yourself the corresponding IAM permission in a policy. Learn more
    ///
    /// * [Signing Amazon Web Services API Requests](https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_aws-signing.html)
    ///
    /// * [Using the Amazon Cognito user pools API and user pool endpoints](https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html)
    ///
    /// - Parameter DescribeUserPoolClientInput : Represents the request to describe a user pool client.
    ///
    /// - Returns: `DescribeUserPoolClientOutputResponse` : Represents the response from the server from a request to describe the user pool client.
    ///
    /// - Throws: One of the exceptions listed below __Possible Exceptions__.
    ///
    /// __Possible Exceptions:__
    /// - `InternalErrorException` : This exception is thrown when Amazon Cognito encounters an internal error.
    /// - `InvalidParameterException` : This exception is thrown when the Amazon Cognito service encounters an invalid parameter.
    /// - `NotAuthorizedException` : This exception is thrown when a user isn't authorized.
    /// - `ResourceNotFoundException` : This exception is thrown when the Amazon Cognito service can't find the requested resource.
    /// - `TooManyRequestsException` : This exception is thrown when the user has made too many requests for a given operation.
    func describeUserPoolClient(input: DescribeUserPoolClientInput) async throws -> DescribeUserPoolClientOutputResponse
    /// Gets information about a domain.
    ///
    /// - Parameter DescribeUserPoolDomainInput : [no documentation found]
    ///
    /// - Returns: `DescribeUserPoolDomainOutputResponse` : [no documentation found]
    ///
    /// - Throws: One of the exceptions listed below __Possible Exceptions__.
    ///
    /// __Possible Exceptions:__
    /// - `InternalErrorException` : This exception is thrown when Amazon Cognito encounters an internal error.
    /// - `InvalidParameterException` : This exception is thrown when the Amazon Cognito service encounters an invalid parameter.
    /// - `NotAuthorizedException` : This exception is thrown when a user isn't authorized.
    /// - `ResourceNotFoundException` : This exception is thrown when the Amazon Cognito service can't find the requested resource.
    func describeUserPoolDomain(input: DescribeUserPoolDomainInput) async throws -> DescribeUserPoolDomainOutputResponse
    /// Forgets the specified device. Amazon Cognito doesn't evaluate Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you can't use IAM credentials to authorize requests, and you can't grant IAM permissions in policies. For more information about authorization models in Amazon Cognito, see [Using the Amazon Cognito native and OIDC APIs](https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html).
    ///
    /// - Parameter ForgetDeviceInput : Represents the request to forget the device.
    ///
    /// - Returns: `ForgetDeviceOutputResponse` : [no documentation found]
    ///
    /// - Throws: One of the exceptions listed below __Possible Exceptions__.
    ///
    /// __Possible Exceptions:__
    /// - `ForbiddenException` : This exception is thrown when WAF doesn't allow your request based on a web ACL that's associated with your user pool.
    /// - `InternalErrorException` : This exception is thrown when Amazon Cognito encounters an internal error.
    /// - `InvalidParameterException` : This exception is thrown when the Amazon Cognito service encounters an invalid parameter.
    /// - `InvalidUserPoolConfigurationException` : This exception is thrown when the user pool configuration is not valid.
    /// - `NotAuthorizedException` : This exception is thrown when a user isn't authorized.
    /// - `PasswordResetRequiredException` : This exception is thrown when a password reset is required.
    /// - `ResourceNotFoundException` : This exception is thrown when the Amazon Cognito service can't find the requested resource.
    /// - `TooManyRequestsException` : This exception is thrown when the user has made too many requests for a given operation.
    /// - `UserNotConfirmedException` : This exception is thrown when a user isn't confirmed successfully.
    /// - `UserNotFoundException` : This exception is thrown when a user isn't found.
    func forgetDevice(input: ForgetDeviceInput) async throws -> ForgetDeviceOutputResponse
    /// Calling this API causes a message to be sent to the end user with a confirmation code that is required to change the user's password. For the Username parameter, you can use the username or user alias. The method used to send the confirmation code is sent according to the specified AccountRecoverySetting. For more information, see [Recovering User Accounts](https://docs.aws.amazon.com/cognito/latest/developerguide/how-to-recover-a-user-account.html) in the Amazon Cognito Developer Guide. To use the confirmation code for resetting the password, call [ConfirmForgotPassword](https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_ConfirmForgotPassword.html). If neither a verified phone number nor a verified email exists, this API returns InvalidParameterException. If your app client has a client secret and you don't provide a SECRET_HASH parameter, this API returns NotAuthorizedException. Amazon Cognito doesn't evaluate Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you can't use IAM credentials to authorize requests, and you can't grant IAM permissions in policies. For more information about authorization models in Amazon Cognito, see [Using the Amazon Cognito native and OIDC APIs](https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html). This action might generate an SMS text message. Starting June 1, 2021, US telecom carriers require you to register an origination phone number before you can send SMS messages to US phone numbers. If you use SMS text messages in Amazon Cognito, you must register a phone number with [Amazon Pinpoint](https://console.aws.amazon.com/pinpoint/home/). Amazon Cognito uses the registered number automatically. Otherwise, Amazon Cognito users who must receive SMS messages might not be able to sign up, activate their accounts, or sign in. If you have never used SMS text messages with Amazon Cognito or any other Amazon Web Service, Amazon Simple Notification Service might place your account in the SMS sandbox. In [sandbox mode](https://docs.aws.amazon.com/sns/latest/dg/sns-sms-sandbox.html) , you can send messages only to verified phone numbers. After you test your app while in the sandbox environment, you can move out of the sandbox and into production. For more information, see [ SMS message settings for Amazon Cognito user pools](https://docs.aws.amazon.com/cognito/latest/developerguide/user-pool-sms-settings.html) in the Amazon Cognito Developer Guide.
    ///
    /// - Parameter ForgotPasswordInput : Represents the request to reset a user's password.
    ///
    /// - Returns: `ForgotPasswordOutputResponse` : The response from Amazon Cognito to a request to reset a password.
    ///
    /// - Throws: One of the exceptions listed below __Possible Exceptions__.
    ///
    /// __Possible Exceptions:__
    /// - `CodeDeliveryFailureException` : This exception is thrown when a verification code fails to deliver successfully.
    /// - `ForbiddenException` : This exception is thrown when WAF doesn't allow your request based on a web ACL that's associated with your user pool.
    /// - `InternalErrorException` : This exception is thrown when Amazon Cognito encounters an internal error.
    /// - `InvalidEmailRoleAccessPolicyException` : This exception is thrown when Amazon Cognito isn't allowed to use your email identity. HTTP status code: 400.
    /// - `InvalidLambdaResponseException` : This exception is thrown when Amazon Cognito encounters an invalid Lambda response.
    /// - `InvalidParameterException` : This exception is thrown when the Amazon Cognito service encounters an invalid parameter.
    /// - `InvalidSmsRoleAccessPolicyException` : This exception is returned when the role provided for SMS configuration doesn't have permission to publish using Amazon SNS.
    /// - `InvalidSmsRoleTrustRelationshipException` : This exception is thrown when the trust relationship is not valid for the role provided for SMS configuration. This can happen if you don't trust cognito-idp.amazonaws.com or the external ID provided in the role does not match what is provided in the SMS configuration for the user pool.
    /// - `LimitExceededException` : This exception is thrown when a user exceeds the limit for a requested Amazon Web Services resource.
    /// - `NotAuthorizedException` : This exception is thrown when a user isn't authorized.
    /// - `ResourceNotFoundException` : This exception is thrown when the Amazon Cognito service can't find the requested resource.
    /// - `TooManyRequestsException` : This exception is thrown when the user has made too many requests for a given operation.
    /// - `UnexpectedLambdaException` : This exception is thrown when Amazon Cognito encounters an unexpected exception with Lambda.
    /// - `UserLambdaValidationException` : This exception is thrown when the Amazon Cognito service encounters a user validation exception with the Lambda service.
    /// - `UserNotFoundException` : This exception is thrown when a user isn't found.
    func forgotPassword(input: ForgotPasswordInput) async throws -> ForgotPasswordOutputResponse
    /// Gets the header information for the comma-separated value (CSV) file to be used as input for the user import job.
    ///
    /// - Parameter GetCSVHeaderInput : Represents the request to get the header information of the CSV file for the user import job.
    ///
    /// - Returns: `GetCSVHeaderOutputResponse` : Represents the response from the server to the request to get the header information of the CSV file for the user import job.
    ///
    /// - Throws: One of the exceptions listed below __Possible Exceptions__.
    ///
    /// __Possible Exceptions:__
    /// - `InternalErrorException` : This exception is thrown when Amazon Cognito encounters an internal error.
    /// - `InvalidParameterException` : This exception is thrown when the Amazon Cognito service encounters an invalid parameter.
    /// - `NotAuthorizedException` : This exception is thrown when a user isn't authorized.
    /// - `ResourceNotFoundException` : This exception is thrown when the Amazon Cognito service can't find the requested resource.
    /// - `TooManyRequestsException` : This exception is thrown when the user has made too many requests for a given operation.
    func getCSVHeader(input: GetCSVHeaderInput) async throws -> GetCSVHeaderOutputResponse
    /// Gets the device. Amazon Cognito doesn't evaluate Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you can't use IAM credentials to authorize requests, and you can't grant IAM permissions in policies. For more information about authorization models in Amazon Cognito, see [Using the Amazon Cognito native and OIDC APIs](https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html).
    ///
    /// - Parameter GetDeviceInput : Represents the request to get the device.
    ///
    /// - Returns: `GetDeviceOutputResponse` : Gets the device response.
    ///
    /// - Throws: One of the exceptions listed below __Possible Exceptions__.
    ///
    /// __Possible Exceptions:__
    /// - `ForbiddenException` : This exception is thrown when WAF doesn't allow your request based on a web ACL that's associated with your user pool.
    /// - `InternalErrorException` : This exception is thrown when Amazon Cognito encounters an internal error.
    /// - `InvalidParameterException` : This exception is thrown when the Amazon Cognito service encounters an invalid parameter.
    /// - `InvalidUserPoolConfigurationException` : This exception is thrown when the user pool configuration is not valid.
    /// - `NotAuthorizedException` : This exception is thrown when a user isn't authorized.
    /// - `PasswordResetRequiredException` : This exception is thrown when a password reset is required.
    /// - `ResourceNotFoundException` : This exception is thrown when the Amazon Cognito service can't find the requested resource.
    /// - `TooManyRequestsException` : This exception is thrown when the user has made too many requests for a given operation.
    /// - `UserNotConfirmedException` : This exception is thrown when a user isn't confirmed successfully.
    /// - `UserNotFoundException` : This exception is thrown when a user isn't found.
    func getDevice(input: GetDeviceInput) async throws -> GetDeviceOutputResponse
    /// Gets a group. Calling this action requires developer credentials.
    ///
    /// - Parameter GetGroupInput : [no documentation found]
    ///
    /// - Returns: `GetGroupOutputResponse` : [no documentation found]
    ///
    /// - Throws: One of the exceptions listed below __Possible Exceptions__.
    ///
    /// __Possible Exceptions:__
    /// - `InternalErrorException` : This exception is thrown when Amazon Cognito encounters an internal error.
    /// - `InvalidParameterException` : This exception is thrown when the Amazon Cognito service encounters an invalid parameter.
    /// - `NotAuthorizedException` : This exception is thrown when a user isn't authorized.
    /// - `ResourceNotFoundException` : This exception is thrown when the Amazon Cognito service can't find the requested resource.
    /// - `TooManyRequestsException` : This exception is thrown when the user has made too many requests for a given operation.
    func getGroup(input: GetGroupInput) async throws -> GetGroupOutputResponse
    /// Gets the specified IdP.
    ///
    /// - Parameter GetIdentityProviderByIdentifierInput : [no documentation found]
    ///
    /// - Returns: `GetIdentityProviderByIdentifierOutputResponse` : [no documentation found]
    ///
    /// - Throws: One of the exceptions listed below __Possible Exceptions__.
    ///
    /// __Possible Exceptions:__
    /// - `InternalErrorException` : This exception is thrown when Amazon Cognito encounters an internal error.
    /// - `InvalidParameterException` : This exception is thrown when the Amazon Cognito service encounters an invalid parameter.
    /// - `NotAuthorizedException` : This exception is thrown when a user isn't authorized.
    /// - `ResourceNotFoundException` : This exception is thrown when the Amazon Cognito service can't find the requested resource.
    /// - `TooManyRequestsException` : This exception is thrown when the user has made too many requests for a given operation.
    func getIdentityProviderByIdentifier(input: GetIdentityProviderByIdentifierInput) async throws -> GetIdentityProviderByIdentifierOutputResponse
    /// Gets the detailed activity logging configuration for a user pool.
    ///
    /// - Parameter GetLogDeliveryConfigurationInput : [no documentation found]
    ///
    /// - Returns: `GetLogDeliveryConfigurationOutputResponse` : [no documentation found]
    ///
    /// - Throws: One of the exceptions listed below __Possible Exceptions__.
    ///
    /// __Possible Exceptions:__
    /// - `InternalErrorException` : This exception is thrown when Amazon Cognito encounters an internal error.
    /// - `InvalidParameterException` : This exception is thrown when the Amazon Cognito service encounters an invalid parameter.
    /// - `NotAuthorizedException` : This exception is thrown when a user isn't authorized.
    /// - `ResourceNotFoundException` : This exception is thrown when the Amazon Cognito service can't find the requested resource.
    /// - `TooManyRequestsException` : This exception is thrown when the user has made too many requests for a given operation.
    func getLogDeliveryConfiguration(input: GetLogDeliveryConfigurationInput) async throws -> GetLogDeliveryConfigurationOutputResponse
    /// This method takes a user pool ID, and returns the signing certificate. The issued certificate is valid for 10 years from the date of issue. Amazon Cognito issues and assigns a new signing certificate annually. This process returns a new value in the response to GetSigningCertificate, but doesn't invalidate the original certificate.
    ///
    /// - Parameter GetSigningCertificateInput : Request to get a signing certificate from Amazon Cognito.
    ///
    /// - Returns: `GetSigningCertificateOutputResponse` : Response from Amazon Cognito for a signing certificate request.
    ///
    /// - Throws: One of the exceptions listed below __Possible Exceptions__.
    ///
    /// __Possible Exceptions:__
    /// - `InternalErrorException` : This exception is thrown when Amazon Cognito encounters an internal error.
    /// - `InvalidParameterException` : This exception is thrown when the Amazon Cognito service encounters an invalid parameter.
    /// - `ResourceNotFoundException` : This exception is thrown when the Amazon Cognito service can't find the requested resource.
    func getSigningCertificate(input: GetSigningCertificateInput) async throws -> GetSigningCertificateOutputResponse
    /// Gets the user interface (UI) Customization information for a particular app client's app UI, if any such information exists for the client. If nothing is set for the particular client, but there is an existing pool level customization (the app clientId is ALL), then that information is returned. If nothing is present, then an empty shape is returned.
    ///
    /// - Parameter GetUICustomizationInput : [no documentation found]
    ///
    /// - Returns: `GetUICustomizationOutputResponse` : [no documentation found]
    ///
    /// - Throws: One of the exceptions listed below __Possible Exceptions__.
    ///
    /// __Possible Exceptions:__
    /// - `InternalErrorException` : This exception is thrown when Amazon Cognito encounters an internal error.
    /// - `InvalidParameterException` : This exception is thrown when the Amazon Cognito service encounters an invalid parameter.
    /// - `NotAuthorizedException` : This exception is thrown when a user isn't authorized.
    /// - `ResourceNotFoundException` : This exception is thrown when the Amazon Cognito service can't find the requested resource.
    /// - `TooManyRequestsException` : This exception is thrown when the user has made too many requests for a given operation.
    func getUICustomization(input: GetUICustomizationInput) async throws -> GetUICustomizationOutputResponse
    /// Gets the user attributes and metadata for a user. Amazon Cognito doesn't evaluate Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you can't use IAM credentials to authorize requests, and you can't grant IAM permissions in policies. For more information about authorization models in Amazon Cognito, see [Using the Amazon Cognito native and OIDC APIs](https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html).
    ///
    /// - Parameter GetUserInput : Represents the request to get information about the user.
    ///
    /// - Returns: `GetUserOutputResponse` : Represents the response from the server from the request to get information about the user.
    ///
    /// - Throws: One of the exceptions listed below __Possible Exceptions__.
    ///
    /// __Possible Exceptions:__
    /// - `ForbiddenException` : This exception is thrown when WAF doesn't allow your request based on a web ACL that's associated with your user pool.
    /// - `InternalErrorException` : This exception is thrown when Amazon Cognito encounters an internal error.
    /// - `InvalidParameterException` : This exception is thrown when the Amazon Cognito service encounters an invalid parameter.
    /// - `NotAuthorizedException` : This exception is thrown when a user isn't authorized.
    /// - `PasswordResetRequiredException` : This exception is thrown when a password reset is required.
    /// - `ResourceNotFoundException` : This exception is thrown when the Amazon Cognito service can't find the requested resource.
    /// - `TooManyRequestsException` : This exception is thrown when the user has made too many requests for a given operation.
    /// - `UserNotConfirmedException` : This exception is thrown when a user isn't confirmed successfully.
    /// - `UserNotFoundException` : This exception is thrown when a user isn't found.
    func getUser(input: GetUserInput) async throws -> GetUserOutputResponse
    /// Generates a user attribute verification code for the specified attribute name. Sends a message to a user with a code that they must return in a VerifyUserAttribute request. Amazon Cognito doesn't evaluate Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you can't use IAM credentials to authorize requests, and you can't grant IAM permissions in policies. For more information about authorization models in Amazon Cognito, see [Using the Amazon Cognito native and OIDC APIs](https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html). This action might generate an SMS text message. Starting June 1, 2021, US telecom carriers require you to register an origination phone number before you can send SMS messages to US phone numbers. If you use SMS text messages in Amazon Cognito, you must register a phone number with [Amazon Pinpoint](https://console.aws.amazon.com/pinpoint/home/). Amazon Cognito uses the registered number automatically. Otherwise, Amazon Cognito users who must receive SMS messages might not be able to sign up, activate their accounts, or sign in. If you have never used SMS text messages with Amazon Cognito or any other Amazon Web Service, Amazon Simple Notification Service might place your account in the SMS sandbox. In [sandbox mode](https://docs.aws.amazon.com/sns/latest/dg/sns-sms-sandbox.html) , you can send messages only to verified phone numbers. After you test your app while in the sandbox environment, you can move out of the sandbox and into production. For more information, see [ SMS message settings for Amazon Cognito user pools](https://docs.aws.amazon.com/cognito/latest/developerguide/user-pool-sms-settings.html) in the Amazon Cognito Developer Guide.
    ///
    /// - Parameter GetUserAttributeVerificationCodeInput : Represents the request to get user attribute verification.
    ///
    /// - Returns: `GetUserAttributeVerificationCodeOutputResponse` : The verification code response returned by the server response to get the user attribute verification code.
    ///
    /// - Throws: One of the exceptions listed below __Possible Exceptions__.
    ///
    /// __Possible Exceptions:__
    /// - `CodeDeliveryFailureException` : This exception is thrown when a verification code fails to deliver successfully.
    /// - `ForbiddenException` : This exception is thrown when WAF doesn't allow your request based on a web ACL that's associated with your user pool.
    /// - `InternalErrorException` : This exception is thrown when Amazon Cognito encounters an internal error.
    /// - `InvalidEmailRoleAccessPolicyException` : This exception is thrown when Amazon Cognito isn't allowed to use your email identity. HTTP status code: 400.
    /// - `InvalidLambdaResponseException` : This exception is thrown when Amazon Cognito encounters an invalid Lambda response.
    /// - `InvalidParameterException` : This exception is thrown when the Amazon Cognito service encounters an invalid parameter.
    /// - `InvalidSmsRoleAccessPolicyException` : This exception is returned when the role provided for SMS configuration doesn't have permission to publish using Amazon SNS.
    /// - `InvalidSmsRoleTrustRelationshipException` : This exception is thrown when the trust relationship is not valid for the role provided for SMS configuration. This can happen if you don't trust cognito-idp.amazonaws.com or the external ID provided in the role does not match what is provided in the SMS configuration for the user pool.
    /// - `LimitExceededException` : This exception is thrown when a user exceeds the limit for a requested Amazon Web Services resource.
    /// - `NotAuthorizedException` : This exception is thrown when a user isn't authorized.
    /// - `PasswordResetRequiredException` : This exception is thrown when a password reset is required.
    /// - `ResourceNotFoundException` : This exception is thrown when the Amazon Cognito service can't find the requested resource.
    /// - `TooManyRequestsException` : This exception is thrown when the user has made too many requests for a given operation.
    /// - `UnexpectedLambdaException` : This exception is thrown when Amazon Cognito encounters an unexpected exception with Lambda.
    /// - `UserLambdaValidationException` : This exception is thrown when the Amazon Cognito service encounters a user validation exception with the Lambda service.
    /// - `UserNotConfirmedException` : This exception is thrown when a user isn't confirmed successfully.
    /// - `UserNotFoundException` : This exception is thrown when a user isn't found.
    func getUserAttributeVerificationCode(input: GetUserAttributeVerificationCodeInput) async throws -> GetUserAttributeVerificationCodeOutputResponse
    /// Gets the user pool multi-factor authentication (MFA) configuration.
    ///
    /// - Parameter GetUserPoolMfaConfigInput : [no documentation found]
    ///
    /// - Returns: `GetUserPoolMfaConfigOutputResponse` : [no documentation found]
    ///
    /// - Throws: One of the exceptions listed below __Possible Exceptions__.
    ///
    /// __Possible Exceptions:__
    /// - `InternalErrorException` : This exception is thrown when Amazon Cognito encounters an internal error.
    /// - `InvalidParameterException` : This exception is thrown when the Amazon Cognito service encounters an invalid parameter.
    /// - `NotAuthorizedException` : This exception is thrown when a user isn't authorized.
    /// - `ResourceNotFoundException` : This exception is thrown when the Amazon Cognito service can't find the requested resource.
    /// - `TooManyRequestsException` : This exception is thrown when the user has made too many requests for a given operation.
    func getUserPoolMfaConfig(input: GetUserPoolMfaConfigInput) async throws -> GetUserPoolMfaConfigOutputResponse
    /// Signs out a user from all devices. GlobalSignOut invalidates all identity, access and refresh tokens that Amazon Cognito has issued to a user. A user can still use a hosted UI cookie to retrieve new tokens for the duration of the 1-hour cookie validity period. Your app isn't aware that a user's access token is revoked unless it attempts to authorize a user pools API request with an access token that contains the scope aws.cognito.signin.user.admin. Your app might otherwise accept access tokens until they expire. Amazon Cognito doesn't evaluate Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you can't use IAM credentials to authorize requests, and you can't grant IAM permissions in policies. For more information about authorization models in Amazon Cognito, see [Using the Amazon Cognito native and OIDC APIs](https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html).
    ///
    /// - Parameter GlobalSignOutInput : Represents the request to sign out all devices.
    ///
    /// - Returns: `GlobalSignOutOutputResponse` : The response to the request to sign out all devices.
    ///
    /// - Throws: One of the exceptions listed below __Possible Exceptions__.
    ///
    /// __Possible Exceptions:__
    /// - `ForbiddenException` : This exception is thrown when WAF doesn't allow your request based on a web ACL that's associated with your user pool.
    /// - `InternalErrorException` : This exception is thrown when Amazon Cognito encounters an internal error.
    /// - `InvalidParameterException` : This exception is thrown when the Amazon Cognito service encounters an invalid parameter.
    /// - `NotAuthorizedException` : This exception is thrown when a user isn't authorized.
    /// - `PasswordResetRequiredException` : This exception is thrown when a password reset is required.
    /// - `ResourceNotFoundException` : This exception is thrown when the Amazon Cognito service can't find the requested resource.
    /// - `TooManyRequestsException` : This exception is thrown when the user has made too many requests for a given operation.
    /// - `UserNotConfirmedException` : This exception is thrown when a user isn't confirmed successfully.
    func globalSignOut(input: GlobalSignOutInput) async throws -> GlobalSignOutOutputResponse
    /// Initiates sign-in for a user in the Amazon Cognito user directory. You can't sign in a user with a federated IdP with InitiateAuth. For more information, see [ Adding user pool sign-in through a third party](https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-pools-identity-federation.html). Amazon Cognito doesn't evaluate Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you can't use IAM credentials to authorize requests, and you can't grant IAM permissions in policies. For more information about authorization models in Amazon Cognito, see [Using the Amazon Cognito native and OIDC APIs](https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html). This action might generate an SMS text message. Starting June 1, 2021, US telecom carriers require you to register an origination phone number before you can send SMS messages to US phone numbers. If you use SMS text messages in Amazon Cognito, you must register a phone number with [Amazon Pinpoint](https://console.aws.amazon.com/pinpoint/home/). Amazon Cognito uses the registered number automatically. Otherwise, Amazon Cognito users who must receive SMS messages might not be able to sign up, activate their accounts, or sign in. If you have never used SMS text messages with Amazon Cognito or any other Amazon Web Service, Amazon Simple Notification Service might place your account in the SMS sandbox. In [sandbox mode](https://docs.aws.amazon.com/sns/latest/dg/sns-sms-sandbox.html) , you can send messages only to verified phone numbers. After you test your app while in the sandbox environment, you can move out of the sandbox and into production. For more information, see [ SMS message settings for Amazon Cognito user pools](https://docs.aws.amazon.com/cognito/latest/developerguide/user-pool-sms-settings.html) in the Amazon Cognito Developer Guide.
    ///
    /// - Parameter InitiateAuthInput : Initiates the authentication request.
    ///
    /// - Returns: `InitiateAuthOutputResponse` : Initiates the authentication response.
    ///
    /// - Throws: One of the exceptions listed below __Possible Exceptions__.
    ///
    /// __Possible Exceptions:__
    /// - `ForbiddenException` : This exception is thrown when WAF doesn't allow your request based on a web ACL that's associated with your user pool.
    /// - `InternalErrorException` : This exception is thrown when Amazon Cognito encounters an internal error.
    /// - `InvalidLambdaResponseException` : This exception is thrown when Amazon Cognito encounters an invalid Lambda response.
    /// - `InvalidParameterException` : This exception is thrown when the Amazon Cognito service encounters an invalid parameter.
    /// - `InvalidSmsRoleAccessPolicyException` : This exception is returned when the role provided for SMS configuration doesn't have permission to publish using Amazon SNS.
    /// - `InvalidSmsRoleTrustRelationshipException` : This exception is thrown when the trust relationship is not valid for the role provided for SMS configuration. This can happen if you don't trust cognito-idp.amazonaws.com or the external ID provided in the role does not match what is provided in the SMS configuration for the user pool.
    /// - `InvalidUserPoolConfigurationException` : This exception is thrown when the user pool configuration is not valid.
    /// - `NotAuthorizedException` : This exception is thrown when a user isn't authorized.
    /// - `PasswordResetRequiredException` : This exception is thrown when a password reset is required.
    /// - `ResourceNotFoundException` : This exception is thrown when the Amazon Cognito service can't find the requested resource.
    /// - `TooManyRequestsException` : This exception is thrown when the user has made too many requests for a given operation.
    /// - `UnexpectedLambdaException` : This exception is thrown when Amazon Cognito encounters an unexpected exception with Lambda.
    /// - `UserLambdaValidationException` : This exception is thrown when the Amazon Cognito service encounters a user validation exception with the Lambda service.
    /// - `UserNotConfirmedException` : This exception is thrown when a user isn't confirmed successfully.
    /// - `UserNotFoundException` : This exception is thrown when a user isn't found.
    func initiateAuth(input: InitiateAuthInput) async throws -> InitiateAuthOutputResponse
    /// Lists the sign-in devices that Amazon Cognito has registered to the current user. Amazon Cognito doesn't evaluate Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you can't use IAM credentials to authorize requests, and you can't grant IAM permissions in policies. For more information about authorization models in Amazon Cognito, see [Using the Amazon Cognito native and OIDC APIs](https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html).
    ///
    /// - Parameter ListDevicesInput : Represents the request to list the devices.
    ///
    /// - Returns: `ListDevicesOutputResponse` : Represents the response to list devices.
    ///
    /// - Throws: One of the exceptions listed below __Possible Exceptions__.
    ///
    /// __Possible Exceptions:__
    /// - `ForbiddenException` : This exception is thrown when WAF doesn't allow your request based on a web ACL that's associated with your user pool.
    /// - `InternalErrorException` : This exception is thrown when Amazon Cognito encounters an internal error.
    /// - `InvalidParameterException` : This exception is thrown when the Amazon Cognito service encounters an invalid parameter.
    /// - `InvalidUserPoolConfigurationException` : This exception is thrown when the user pool configuration is not valid.
    /// - `NotAuthorizedException` : This exception is thrown when a user isn't authorized.
    /// - `PasswordResetRequiredException` : This exception is thrown when a password reset is required.
    /// - `ResourceNotFoundException` : This exception is thrown when the Amazon Cognito service can't find the requested resource.
    /// - `TooManyRequestsException` : This exception is thrown when the user has made too many requests for a given operation.
    /// - `UserNotConfirmedException` : This exception is thrown when a user isn't confirmed successfully.
    /// - `UserNotFoundException` : This exception is thrown when a user isn't found.
    func listDevices(input: ListDevicesInput) async throws -> ListDevicesOutputResponse
    /// Lists the groups associated with a user pool. Amazon Cognito evaluates Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you must use IAM credentials to authorize requests, and you must grant yourself the corresponding IAM permission in a policy. Learn more
    ///
    /// * [Signing Amazon Web Services API Requests](https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_aws-signing.html)
    ///
    /// * [Using the Amazon Cognito user pools API and user pool endpoints](https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html)
    ///
    /// - Parameter ListGroupsInput : [no documentation found]
    ///
    /// - Returns: `ListGroupsOutputResponse` : [no documentation found]
    ///
    /// - Throws: One of the exceptions listed below __Possible Exceptions__.
    ///
    /// __Possible Exceptions:__
    /// - `InternalErrorException` : This exception is thrown when Amazon Cognito encounters an internal error.
    /// - `InvalidParameterException` : This exception is thrown when the Amazon Cognito service encounters an invalid parameter.
    /// - `NotAuthorizedException` : This exception is thrown when a user isn't authorized.
    /// - `ResourceNotFoundException` : This exception is thrown when the Amazon Cognito service can't find the requested resource.
    /// - `TooManyRequestsException` : This exception is thrown when the user has made too many requests for a given operation.
    func listGroups(input: ListGroupsInput) async throws -> ListGroupsOutputResponse
    /// Lists information about all IdPs for a user pool. Amazon Cognito evaluates Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you must use IAM credentials to authorize requests, and you must grant yourself the corresponding IAM permission in a policy. Learn more
    ///
    /// * [Signing Amazon Web Services API Requests](https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_aws-signing.html)
    ///
    /// * [Using the Amazon Cognito user pools API and user pool endpoints](https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html)
    ///
    /// - Parameter ListIdentityProvidersInput : [no documentation found]
    ///
    /// - Returns: `ListIdentityProvidersOutputResponse` : [no documentation found]
    ///
    /// - Throws: One of the exceptions listed below __Possible Exceptions__.
    ///
    /// __Possible Exceptions:__
    /// - `InternalErrorException` : This exception is thrown when Amazon Cognito encounters an internal error.
    /// - `InvalidParameterException` : This exception is thrown when the Amazon Cognito service encounters an invalid parameter.
    /// - `NotAuthorizedException` : This exception is thrown when a user isn't authorized.
    /// - `ResourceNotFoundException` : This exception is thrown when the Amazon Cognito service can't find the requested resource.
    /// - `TooManyRequestsException` : This exception is thrown when the user has made too many requests for a given operation.
    func listIdentityProviders(input: ListIdentityProvidersInput) async throws -> ListIdentityProvidersOutputResponse
    /// Lists the resource servers for a user pool. Amazon Cognito evaluates Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you must use IAM credentials to authorize requests, and you must grant yourself the corresponding IAM permission in a policy. Learn more
    ///
    /// * [Signing Amazon Web Services API Requests](https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_aws-signing.html)
    ///
    /// * [Using the Amazon Cognito user pools API and user pool endpoints](https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html)
    ///
    /// - Parameter ListResourceServersInput : [no documentation found]
    ///
    /// - Returns: `ListResourceServersOutputResponse` : [no documentation found]
    ///
    /// - Throws: One of the exceptions listed below __Possible Exceptions__.
    ///
    /// __Possible Exceptions:__
    /// - `InternalErrorException` : This exception is thrown when Amazon Cognito encounters an internal error.
    /// - `InvalidParameterException` : This exception is thrown when the Amazon Cognito service encounters an invalid parameter.
    /// - `NotAuthorizedException` : This exception is thrown when a user isn't authorized.
    /// - `ResourceNotFoundException` : This exception is thrown when the Amazon Cognito service can't find the requested resource.
    /// - `TooManyRequestsException` : This exception is thrown when the user has made too many requests for a given operation.
    func listResourceServers(input: ListResourceServersInput) async throws -> ListResourceServersOutputResponse
    /// Lists the tags that are assigned to an Amazon Cognito user pool. A tag is a label that you can apply to user pools to categorize and manage them in different ways, such as by purpose, owner, environment, or other criteria. You can use this action up to 10 times per second, per account.
    ///
    /// - Parameter ListTagsForResourceInput : [no documentation found]
    ///
    /// - Returns: `ListTagsForResourceOutputResponse` : [no documentation found]
    ///
    /// - Throws: One of the exceptions listed below __Possible Exceptions__.
    ///
    /// __Possible Exceptions:__
    /// - `InternalErrorException` : This exception is thrown when Amazon Cognito encounters an internal error.
    /// - `InvalidParameterException` : This exception is thrown when the Amazon Cognito service encounters an invalid parameter.
    /// - `NotAuthorizedException` : This exception is thrown when a user isn't authorized.
    /// - `ResourceNotFoundException` : This exception is thrown when the Amazon Cognito service can't find the requested resource.
    /// - `TooManyRequestsException` : This exception is thrown when the user has made too many requests for a given operation.
    func listTagsForResource(input: ListTagsForResourceInput) async throws -> ListTagsForResourceOutputResponse
    /// Lists user import jobs for a user pool. Amazon Cognito evaluates Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you must use IAM credentials to authorize requests, and you must grant yourself the corresponding IAM permission in a policy. Learn more
    ///
    /// * [Signing Amazon Web Services API Requests](https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_aws-signing.html)
    ///
    /// * [Using the Amazon Cognito user pools API and user pool endpoints](https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html)
    ///
    /// - Parameter ListUserImportJobsInput : Represents the request to list the user import jobs.
    ///
    /// - Returns: `ListUserImportJobsOutputResponse` : Represents the response from the server to the request to list the user import jobs.
    ///
    /// - Throws: One of the exceptions listed below __Possible Exceptions__.
    ///
    /// __Possible Exceptions:__
    /// - `InternalErrorException` : This exception is thrown when Amazon Cognito encounters an internal error.
    /// - `InvalidParameterException` : This exception is thrown when the Amazon Cognito service encounters an invalid parameter.
    /// - `NotAuthorizedException` : This exception is thrown when a user isn't authorized.
    /// - `ResourceNotFoundException` : This exception is thrown when the Amazon Cognito service can't find the requested resource.
    /// - `TooManyRequestsException` : This exception is thrown when the user has made too many requests for a given operation.
    func listUserImportJobs(input: ListUserImportJobsInput) async throws -> ListUserImportJobsOutputResponse
    /// Lists the clients that have been created for the specified user pool. Amazon Cognito evaluates Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you must use IAM credentials to authorize requests, and you must grant yourself the corresponding IAM permission in a policy. Learn more
    ///
    /// * [Signing Amazon Web Services API Requests](https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_aws-signing.html)
    ///
    /// * [Using the Amazon Cognito user pools API and user pool endpoints](https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html)
    ///
    /// - Parameter ListUserPoolClientsInput : Represents the request to list the user pool clients.
    ///
    /// - Returns: `ListUserPoolClientsOutputResponse` : Represents the response from the server that lists user pool clients.
    ///
    /// - Throws: One of the exceptions listed below __Possible Exceptions__.
    ///
    /// __Possible Exceptions:__
    /// - `InternalErrorException` : This exception is thrown when Amazon Cognito encounters an internal error.
    /// - `InvalidParameterException` : This exception is thrown when the Amazon Cognito service encounters an invalid parameter.
    /// - `NotAuthorizedException` : This exception is thrown when a user isn't authorized.
    /// - `ResourceNotFoundException` : This exception is thrown when the Amazon Cognito service can't find the requested resource.
    /// - `TooManyRequestsException` : This exception is thrown when the user has made too many requests for a given operation.
    func listUserPoolClients(input: ListUserPoolClientsInput) async throws -> ListUserPoolClientsOutputResponse
    /// Lists the user pools associated with an Amazon Web Services account. Amazon Cognito evaluates Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you must use IAM credentials to authorize requests, and you must grant yourself the corresponding IAM permission in a policy. Learn more
    ///
    /// * [Signing Amazon Web Services API Requests](https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_aws-signing.html)
    ///
    /// * [Using the Amazon Cognito user pools API and user pool endpoints](https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html)
    ///
    /// - Parameter ListUserPoolsInput : Represents the request to list user pools.
    ///
    /// - Returns: `ListUserPoolsOutputResponse` : Represents the response to list user pools.
    ///
    /// - Throws: One of the exceptions listed below __Possible Exceptions__.
    ///
    /// __Possible Exceptions:__
    /// - `InternalErrorException` : This exception is thrown when Amazon Cognito encounters an internal error.
    /// - `InvalidParameterException` : This exception is thrown when the Amazon Cognito service encounters an invalid parameter.
    /// - `NotAuthorizedException` : This exception is thrown when a user isn't authorized.
    /// - `TooManyRequestsException` : This exception is thrown when the user has made too many requests for a given operation.
    func listUserPools(input: ListUserPoolsInput) async throws -> ListUserPoolsOutputResponse
    /// Lists users and their basic details in a user pool. Amazon Cognito evaluates Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you must use IAM credentials to authorize requests, and you must grant yourself the corresponding IAM permission in a policy. Learn more
    ///
    /// * [Signing Amazon Web Services API Requests](https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_aws-signing.html)
    ///
    /// * [Using the Amazon Cognito user pools API and user pool endpoints](https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html)
    ///
    /// - Parameter ListUsersInput : Represents the request to list users.
    ///
    /// - Returns: `ListUsersOutputResponse` : The response from the request to list users.
    ///
    /// - Throws: One of the exceptions listed below __Possible Exceptions__.
    ///
    /// __Possible Exceptions:__
    /// - `InternalErrorException` : This exception is thrown when Amazon Cognito encounters an internal error.
    /// - `InvalidParameterException` : This exception is thrown when the Amazon Cognito service encounters an invalid parameter.
    /// - `NotAuthorizedException` : This exception is thrown when a user isn't authorized.
    /// - `ResourceNotFoundException` : This exception is thrown when the Amazon Cognito service can't find the requested resource.
    /// - `TooManyRequestsException` : This exception is thrown when the user has made too many requests for a given operation.
    func listUsers(input: ListUsersInput) async throws -> ListUsersOutputResponse
    /// Lists the users in the specified group. Amazon Cognito evaluates Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you must use IAM credentials to authorize requests, and you must grant yourself the corresponding IAM permission in a policy. Learn more
    ///
    /// * [Signing Amazon Web Services API Requests](https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_aws-signing.html)
    ///
    /// * [Using the Amazon Cognito user pools API and user pool endpoints](https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html)
    ///
    /// - Parameter ListUsersInGroupInput : [no documentation found]
    ///
    /// - Returns: `ListUsersInGroupOutputResponse` : [no documentation found]
    ///
    /// - Throws: One of the exceptions listed below __Possible Exceptions__.
    ///
    /// __Possible Exceptions:__
    /// - `InternalErrorException` : This exception is thrown when Amazon Cognito encounters an internal error.
    /// - `InvalidParameterException` : This exception is thrown when the Amazon Cognito service encounters an invalid parameter.
    /// - `NotAuthorizedException` : This exception is thrown when a user isn't authorized.
    /// - `ResourceNotFoundException` : This exception is thrown when the Amazon Cognito service can't find the requested resource.
    /// - `TooManyRequestsException` : This exception is thrown when the user has made too many requests for a given operation.
    func listUsersInGroup(input: ListUsersInGroupInput) async throws -> ListUsersInGroupOutputResponse
    /// Resends the confirmation (for confirmation of registration) to a specific user in the user pool. Amazon Cognito doesn't evaluate Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you can't use IAM credentials to authorize requests, and you can't grant IAM permissions in policies. For more information about authorization models in Amazon Cognito, see [Using the Amazon Cognito native and OIDC APIs](https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html). This action might generate an SMS text message. Starting June 1, 2021, US telecom carriers require you to register an origination phone number before you can send SMS messages to US phone numbers. If you use SMS text messages in Amazon Cognito, you must register a phone number with [Amazon Pinpoint](https://console.aws.amazon.com/pinpoint/home/). Amazon Cognito uses the registered number automatically. Otherwise, Amazon Cognito users who must receive SMS messages might not be able to sign up, activate their accounts, or sign in. If you have never used SMS text messages with Amazon Cognito or any other Amazon Web Service, Amazon Simple Notification Service might place your account in the SMS sandbox. In [sandbox mode](https://docs.aws.amazon.com/sns/latest/dg/sns-sms-sandbox.html) , you can send messages only to verified phone numbers. After you test your app while in the sandbox environment, you can move out of the sandbox and into production. For more information, see [ SMS message settings for Amazon Cognito user pools](https://docs.aws.amazon.com/cognito/latest/developerguide/user-pool-sms-settings.html) in the Amazon Cognito Developer Guide.
    ///
    /// - Parameter ResendConfirmationCodeInput : Represents the request to resend the confirmation code.
    ///
    /// - Returns: `ResendConfirmationCodeOutputResponse` : The response from the server when Amazon Cognito makes the request to resend a confirmation code.
    ///
    /// - Throws: One of the exceptions listed below __Possible Exceptions__.
    ///
    /// __Possible Exceptions:__
    /// - `CodeDeliveryFailureException` : This exception is thrown when a verification code fails to deliver successfully.
    /// - `ForbiddenException` : This exception is thrown when WAF doesn't allow your request based on a web ACL that's associated with your user pool.
    /// - `InternalErrorException` : This exception is thrown when Amazon Cognito encounters an internal error.
    /// - `InvalidEmailRoleAccessPolicyException` : This exception is thrown when Amazon Cognito isn't allowed to use your email identity. HTTP status code: 400.
    /// - `InvalidLambdaResponseException` : This exception is thrown when Amazon Cognito encounters an invalid Lambda response.
    /// - `InvalidParameterException` : This exception is thrown when the Amazon Cognito service encounters an invalid parameter.
    /// - `InvalidSmsRoleAccessPolicyException` : This exception is returned when the role provided for SMS configuration doesn't have permission to publish using Amazon SNS.
    /// - `InvalidSmsRoleTrustRelationshipException` : This exception is thrown when the trust relationship is not valid for the role provided for SMS configuration. This can happen if you don't trust cognito-idp.amazonaws.com or the external ID provided in the role does not match what is provided in the SMS configuration for the user pool.
    /// - `LimitExceededException` : This exception is thrown when a user exceeds the limit for a requested Amazon Web Services resource.
    /// - `NotAuthorizedException` : This exception is thrown when a user isn't authorized.
    /// - `ResourceNotFoundException` : This exception is thrown when the Amazon Cognito service can't find the requested resource.
    /// - `TooManyRequestsException` : This exception is thrown when the user has made too many requests for a given operation.
    /// - `UnexpectedLambdaException` : This exception is thrown when Amazon Cognito encounters an unexpected exception with Lambda.
    /// - `UserLambdaValidationException` : This exception is thrown when the Amazon Cognito service encounters a user validation exception with the Lambda service.
    /// - `UserNotFoundException` : This exception is thrown when a user isn't found.
    func resendConfirmationCode(input: ResendConfirmationCodeInput) async throws -> ResendConfirmationCodeOutputResponse
    /// Responds to the authentication challenge. Amazon Cognito doesn't evaluate Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you can't use IAM credentials to authorize requests, and you can't grant IAM permissions in policies. For more information about authorization models in Amazon Cognito, see [Using the Amazon Cognito native and OIDC APIs](https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html). This action might generate an SMS text message. Starting June 1, 2021, US telecom carriers require you to register an origination phone number before you can send SMS messages to US phone numbers. If you use SMS text messages in Amazon Cognito, you must register a phone number with [Amazon Pinpoint](https://console.aws.amazon.com/pinpoint/home/). Amazon Cognito uses the registered number automatically. Otherwise, Amazon Cognito users who must receive SMS messages might not be able to sign up, activate their accounts, or sign in. If you have never used SMS text messages with Amazon Cognito or any other Amazon Web Service, Amazon Simple Notification Service might place your account in the SMS sandbox. In [sandbox mode](https://docs.aws.amazon.com/sns/latest/dg/sns-sms-sandbox.html) , you can send messages only to verified phone numbers. After you test your app while in the sandbox environment, you can move out of the sandbox and into production. For more information, see [ SMS message settings for Amazon Cognito user pools](https://docs.aws.amazon.com/cognito/latest/developerguide/user-pool-sms-settings.html) in the Amazon Cognito Developer Guide.
    ///
    /// - Parameter RespondToAuthChallengeInput : The request to respond to an authentication challenge.
    ///
    /// - Returns: `RespondToAuthChallengeOutputResponse` : The response to respond to the authentication challenge.
    ///
    /// - Throws: One of the exceptions listed below __Possible Exceptions__.
    ///
    /// __Possible Exceptions:__
    /// - `AliasExistsException` : This exception is thrown when a user tries to confirm the account with an email address or phone number that has already been supplied as an alias for a different user profile. This exception indicates that an account with this email address or phone already exists in a user pool that you've configured to use email address or phone number as a sign-in alias.
    /// - `CodeMismatchException` : This exception is thrown if the provided code doesn't match what the server was expecting.
    /// - `ExpiredCodeException` : This exception is thrown if a code has expired.
    /// - `ForbiddenException` : This exception is thrown when WAF doesn't allow your request based on a web ACL that's associated with your user pool.
    /// - `InternalErrorException` : This exception is thrown when Amazon Cognito encounters an internal error.
    /// - `InvalidLambdaResponseException` : This exception is thrown when Amazon Cognito encounters an invalid Lambda response.
    /// - `InvalidParameterException` : This exception is thrown when the Amazon Cognito service encounters an invalid parameter.
    /// - `InvalidPasswordException` : This exception is thrown when Amazon Cognito encounters an invalid password.
    /// - `InvalidSmsRoleAccessPolicyException` : This exception is returned when the role provided for SMS configuration doesn't have permission to publish using Amazon SNS.
    /// - `InvalidSmsRoleTrustRelationshipException` : This exception is thrown when the trust relationship is not valid for the role provided for SMS configuration. This can happen if you don't trust cognito-idp.amazonaws.com or the external ID provided in the role does not match what is provided in the SMS configuration for the user pool.
    /// - `InvalidUserPoolConfigurationException` : This exception is thrown when the user pool configuration is not valid.
    /// - `MFAMethodNotFoundException` : This exception is thrown when Amazon Cognito can't find a multi-factor authentication (MFA) method.
    /// - `NotAuthorizedException` : This exception is thrown when a user isn't authorized.
    /// - `PasswordResetRequiredException` : This exception is thrown when a password reset is required.
    /// - `ResourceNotFoundException` : This exception is thrown when the Amazon Cognito service can't find the requested resource.
    /// - `SoftwareTokenMFANotFoundException` : This exception is thrown when the software token time-based one-time password (TOTP) multi-factor authentication (MFA) isn't activated for the user pool.
    /// - `TooManyRequestsException` : This exception is thrown when the user has made too many requests for a given operation.
    /// - `UnexpectedLambdaException` : This exception is thrown when Amazon Cognito encounters an unexpected exception with Lambda.
    /// - `UserLambdaValidationException` : This exception is thrown when the Amazon Cognito service encounters a user validation exception with the Lambda service.
    /// - `UserNotConfirmedException` : This exception is thrown when a user isn't confirmed successfully.
    /// - `UserNotFoundException` : This exception is thrown when a user isn't found.
    func respondToAuthChallenge(input: RespondToAuthChallengeInput) async throws -> RespondToAuthChallengeOutputResponse
    /// Revokes all of the access tokens generated by, and at the same time as, the specified refresh token. After a token is revoked, you can't use the revoked token to access Amazon Cognito user APIs, or to authorize access to your resource server. Amazon Cognito doesn't evaluate Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you can't use IAM credentials to authorize requests, and you can't grant IAM permissions in policies. For more information about authorization models in Amazon Cognito, see [Using the Amazon Cognito native and OIDC APIs](https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html).
    ///
    /// - Parameter RevokeTokenInput : [no documentation found]
    ///
    /// - Returns: `RevokeTokenOutputResponse` : [no documentation found]
    ///
    /// - Throws: One of the exceptions listed below __Possible Exceptions__.
    ///
    /// __Possible Exceptions:__
    /// - `ForbiddenException` : This exception is thrown when WAF doesn't allow your request based on a web ACL that's associated with your user pool.
    /// - `InternalErrorException` : This exception is thrown when Amazon Cognito encounters an internal error.
    /// - `InvalidParameterException` : This exception is thrown when the Amazon Cognito service encounters an invalid parameter.
    /// - `TooManyRequestsException` : This exception is thrown when the user has made too many requests for a given operation.
    /// - `UnauthorizedException` : Exception that is thrown when the request isn't authorized. This can happen due to an invalid access token in the request.
    /// - `UnsupportedOperationException` : Exception that is thrown when you attempt to perform an operation that isn't enabled for the user pool client.
    /// - `UnsupportedTokenTypeException` : Exception that is thrown when an unsupported token is passed to an operation.
    func revokeToken(input: RevokeTokenInput) async throws -> RevokeTokenOutputResponse
    /// Sets up or modifies the detailed activity logging configuration of a user pool.
    ///
    /// - Parameter SetLogDeliveryConfigurationInput : [no documentation found]
    ///
    /// - Returns: `SetLogDeliveryConfigurationOutputResponse` : [no documentation found]
    ///
    /// - Throws: One of the exceptions listed below __Possible Exceptions__.
    ///
    /// __Possible Exceptions:__
    /// - `InternalErrorException` : This exception is thrown when Amazon Cognito encounters an internal error.
    /// - `InvalidParameterException` : This exception is thrown when the Amazon Cognito service encounters an invalid parameter.
    /// - `NotAuthorizedException` : This exception is thrown when a user isn't authorized.
    /// - `ResourceNotFoundException` : This exception is thrown when the Amazon Cognito service can't find the requested resource.
    /// - `TooManyRequestsException` : This exception is thrown when the user has made too many requests for a given operation.
    func setLogDeliveryConfiguration(input: SetLogDeliveryConfigurationInput) async throws -> SetLogDeliveryConfigurationOutputResponse
    /// Configures actions on detected risks. To delete the risk configuration for UserPoolId or ClientId, pass null values for all four configuration types. To activate Amazon Cognito advanced security features, update the user pool to include the UserPoolAddOns keyAdvancedSecurityMode.
    ///
    /// - Parameter SetRiskConfigurationInput : [no documentation found]
    ///
    /// - Returns: `SetRiskConfigurationOutputResponse` : [no documentation found]
    ///
    /// - Throws: One of the exceptions listed below __Possible Exceptions__.
    ///
    /// __Possible Exceptions:__
    /// - `CodeDeliveryFailureException` : This exception is thrown when a verification code fails to deliver successfully.
    /// - `InternalErrorException` : This exception is thrown when Amazon Cognito encounters an internal error.
    /// - `InvalidEmailRoleAccessPolicyException` : This exception is thrown when Amazon Cognito isn't allowed to use your email identity. HTTP status code: 400.
    /// - `InvalidParameterException` : This exception is thrown when the Amazon Cognito service encounters an invalid parameter.
    /// - `NotAuthorizedException` : This exception is thrown when a user isn't authorized.
    /// - `ResourceNotFoundException` : This exception is thrown when the Amazon Cognito service can't find the requested resource.
    /// - `TooManyRequestsException` : This exception is thrown when the user has made too many requests for a given operation.
    /// - `UserPoolAddOnNotEnabledException` : This exception is thrown when user pool add-ons aren't enabled.
    func setRiskConfiguration(input: SetRiskConfigurationInput) async throws -> SetRiskConfigurationOutputResponse
    /// Sets the user interface (UI) customization information for a user pool's built-in app UI. You can specify app UI customization settings for a single client (with a specific clientId) or for all clients (by setting the clientId to ALL). If you specify ALL, the default configuration is used for every client that has no previously set UI customization. If you specify UI customization settings for a particular client, it will no longer return to the ALL configuration. To use this API, your user pool must have a domain associated with it. Otherwise, there is no place to host the app's pages, and the service will throw an error.
    ///
    /// - Parameter SetUICustomizationInput : [no documentation found]
    ///
    /// - Returns: `SetUICustomizationOutputResponse` : [no documentation found]
    ///
    /// - Throws: One of the exceptions listed below __Possible Exceptions__.
    ///
    /// __Possible Exceptions:__
    /// - `InternalErrorException` : This exception is thrown when Amazon Cognito encounters an internal error.
    /// - `InvalidParameterException` : This exception is thrown when the Amazon Cognito service encounters an invalid parameter.
    /// - `NotAuthorizedException` : This exception is thrown when a user isn't authorized.
    /// - `ResourceNotFoundException` : This exception is thrown when the Amazon Cognito service can't find the requested resource.
    /// - `TooManyRequestsException` : This exception is thrown when the user has made too many requests for a given operation.
    func setUICustomization(input: SetUICustomizationInput) async throws -> SetUICustomizationOutputResponse
    /// Set the user's multi-factor authentication (MFA) method preference, including which MFA factors are activated and if any are preferred. Only one factor can be set as preferred. The preferred MFA factor will be used to authenticate a user if multiple factors are activated. If multiple options are activated and no preference is set, a challenge to choose an MFA option will be returned during sign-in. If an MFA type is activated for a user, the user will be prompted for MFA during all sign-in attempts unless device tracking is turned on and the device has been trusted. If you want MFA to be applied selectively based on the assessed risk level of sign-in attempts, deactivate MFA for users and turn on Adaptive Authentication for the user pool. Amazon Cognito doesn't evaluate Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you can't use IAM credentials to authorize requests, and you can't grant IAM permissions in policies. For more information about authorization models in Amazon Cognito, see [Using the Amazon Cognito native and OIDC APIs](https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html).
    ///
    /// - Parameter SetUserMFAPreferenceInput : [no documentation found]
    ///
    /// - Returns: `SetUserMFAPreferenceOutputResponse` : [no documentation found]
    ///
    /// - Throws: One of the exceptions listed below __Possible Exceptions__.
    ///
    /// __Possible Exceptions:__
    /// - `ForbiddenException` : This exception is thrown when WAF doesn't allow your request based on a web ACL that's associated with your user pool.
    /// - `InternalErrorException` : This exception is thrown when Amazon Cognito encounters an internal error.
    /// - `InvalidParameterException` : This exception is thrown when the Amazon Cognito service encounters an invalid parameter.
    /// - `NotAuthorizedException` : This exception is thrown when a user isn't authorized.
    /// - `PasswordResetRequiredException` : This exception is thrown when a password reset is required.
    /// - `ResourceNotFoundException` : This exception is thrown when the Amazon Cognito service can't find the requested resource.
    /// - `UserNotConfirmedException` : This exception is thrown when a user isn't confirmed successfully.
    /// - `UserNotFoundException` : This exception is thrown when a user isn't found.
    func setUserMFAPreference(input: SetUserMFAPreferenceInput) async throws -> SetUserMFAPreferenceOutputResponse
    /// Sets the user pool multi-factor authentication (MFA) configuration. This action might generate an SMS text message. Starting June 1, 2021, US telecom carriers require you to register an origination phone number before you can send SMS messages to US phone numbers. If you use SMS text messages in Amazon Cognito, you must register a phone number with [Amazon Pinpoint](https://console.aws.amazon.com/pinpoint/home/). Amazon Cognito uses the registered number automatically. Otherwise, Amazon Cognito users who must receive SMS messages might not be able to sign up, activate their accounts, or sign in. If you have never used SMS text messages with Amazon Cognito or any other Amazon Web Service, Amazon Simple Notification Service might place your account in the SMS sandbox. In [sandbox mode](https://docs.aws.amazon.com/sns/latest/dg/sns-sms-sandbox.html) , you can send messages only to verified phone numbers. After you test your app while in the sandbox environment, you can move out of the sandbox and into production. For more information, see [ SMS message settings for Amazon Cognito user pools](https://docs.aws.amazon.com/cognito/latest/developerguide/user-pool-sms-settings.html) in the Amazon Cognito Developer Guide.
    ///
    /// - Parameter SetUserPoolMfaConfigInput : [no documentation found]
    ///
    /// - Returns: `SetUserPoolMfaConfigOutputResponse` : [no documentation found]
    ///
    /// - Throws: One of the exceptions listed below __Possible Exceptions__.
    ///
    /// __Possible Exceptions:__
    /// - `InternalErrorException` : This exception is thrown when Amazon Cognito encounters an internal error.
    /// - `InvalidParameterException` : This exception is thrown when the Amazon Cognito service encounters an invalid parameter.
    /// - `InvalidSmsRoleAccessPolicyException` : This exception is returned when the role provided for SMS configuration doesn't have permission to publish using Amazon SNS.
    /// - `InvalidSmsRoleTrustRelationshipException` : This exception is thrown when the trust relationship is not valid for the role provided for SMS configuration. This can happen if you don't trust cognito-idp.amazonaws.com or the external ID provided in the role does not match what is provided in the SMS configuration for the user pool.
    /// - `NotAuthorizedException` : This exception is thrown when a user isn't authorized.
    /// - `ResourceNotFoundException` : This exception is thrown when the Amazon Cognito service can't find the requested resource.
    /// - `TooManyRequestsException` : This exception is thrown when the user has made too many requests for a given operation.
    func setUserPoolMfaConfig(input: SetUserPoolMfaConfigInput) async throws -> SetUserPoolMfaConfigOutputResponse
    /// This action is no longer supported. You can use it to configure only SMS MFA. You can't use it to configure time-based one-time password (TOTP) software token MFA. To configure either type of MFA, use [SetUserMFAPreference](https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_SetUserMFAPreference.html) instead. Amazon Cognito doesn't evaluate Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you can't use IAM credentials to authorize requests, and you can't grant IAM permissions in policies. For more information about authorization models in Amazon Cognito, see [Using the Amazon Cognito native and OIDC APIs](https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html).
    ///
    /// - Parameter SetUserSettingsInput : Represents the request to set user settings.
    ///
    /// - Returns: `SetUserSettingsOutputResponse` : The response from the server for a set user settings request.
    ///
    /// - Throws: One of the exceptions listed below __Possible Exceptions__.
    ///
    /// __Possible Exceptions:__
    /// - `ForbiddenException` : This exception is thrown when WAF doesn't allow your request based on a web ACL that's associated with your user pool.
    /// - `InternalErrorException` : This exception is thrown when Amazon Cognito encounters an internal error.
    /// - `InvalidParameterException` : This exception is thrown when the Amazon Cognito service encounters an invalid parameter.
    /// - `NotAuthorizedException` : This exception is thrown when a user isn't authorized.
    /// - `PasswordResetRequiredException` : This exception is thrown when a password reset is required.
    /// - `ResourceNotFoundException` : This exception is thrown when the Amazon Cognito service can't find the requested resource.
    /// - `UserNotConfirmedException` : This exception is thrown when a user isn't confirmed successfully.
    /// - `UserNotFoundException` : This exception is thrown when a user isn't found.
    func setUserSettings(input: SetUserSettingsInput) async throws -> SetUserSettingsOutputResponse
    /// Registers the user in the specified user pool and creates a user name, password, and user attributes. Amazon Cognito doesn't evaluate Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you can't use IAM credentials to authorize requests, and you can't grant IAM permissions in policies. For more information about authorization models in Amazon Cognito, see [Using the Amazon Cognito native and OIDC APIs](https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html). This action might generate an SMS text message. Starting June 1, 2021, US telecom carriers require you to register an origination phone number before you can send SMS messages to US phone numbers. If you use SMS text messages in Amazon Cognito, you must register a phone number with [Amazon Pinpoint](https://console.aws.amazon.com/pinpoint/home/). Amazon Cognito uses the registered number automatically. Otherwise, Amazon Cognito users who must receive SMS messages might not be able to sign up, activate their accounts, or sign in. If you have never used SMS text messages with Amazon Cognito or any other Amazon Web Service, Amazon Simple Notification Service might place your account in the SMS sandbox. In [sandbox mode](https://docs.aws.amazon.com/sns/latest/dg/sns-sms-sandbox.html) , you can send messages only to verified phone numbers. After you test your app while in the sandbox environment, you can move out of the sandbox and into production. For more information, see [ SMS message settings for Amazon Cognito user pools](https://docs.aws.amazon.com/cognito/latest/developerguide/user-pool-sms-settings.html) in the Amazon Cognito Developer Guide.
    ///
    /// - Parameter SignUpInput : Represents the request to register a user.
    ///
    /// - Returns: `SignUpOutputResponse` : The response from the server for a registration request.
    ///
    /// - Throws: One of the exceptions listed below __Possible Exceptions__.
    ///
    /// __Possible Exceptions:__
    /// - `CodeDeliveryFailureException` : This exception is thrown when a verification code fails to deliver successfully.
    /// - `ForbiddenException` : This exception is thrown when WAF doesn't allow your request based on a web ACL that's associated with your user pool.
    /// - `InternalErrorException` : This exception is thrown when Amazon Cognito encounters an internal error.
    /// - `InvalidEmailRoleAccessPolicyException` : This exception is thrown when Amazon Cognito isn't allowed to use your email identity. HTTP status code: 400.
    /// - `InvalidLambdaResponseException` : This exception is thrown when Amazon Cognito encounters an invalid Lambda response.
    /// - `InvalidParameterException` : This exception is thrown when the Amazon Cognito service encounters an invalid parameter.
    /// - `InvalidPasswordException` : This exception is thrown when Amazon Cognito encounters an invalid password.
    /// - `InvalidSmsRoleAccessPolicyException` : This exception is returned when the role provided for SMS configuration doesn't have permission to publish using Amazon SNS.
    /// - `InvalidSmsRoleTrustRelationshipException` : This exception is thrown when the trust relationship is not valid for the role provided for SMS configuration. This can happen if you don't trust cognito-idp.amazonaws.com or the external ID provided in the role does not match what is provided in the SMS configuration for the user pool.
    /// - `NotAuthorizedException` : This exception is thrown when a user isn't authorized.
    /// - `ResourceNotFoundException` : This exception is thrown when the Amazon Cognito service can't find the requested resource.
    /// - `TooManyRequestsException` : This exception is thrown when the user has made too many requests for a given operation.
    /// - `UnexpectedLambdaException` : This exception is thrown when Amazon Cognito encounters an unexpected exception with Lambda.
    /// - `UserLambdaValidationException` : This exception is thrown when the Amazon Cognito service encounters a user validation exception with the Lambda service.
    /// - `UsernameExistsException` : This exception is thrown when Amazon Cognito encounters a user name that already exists in the user pool.
    func signUp(input: SignUpInput) async throws -> SignUpOutputResponse
    /// Starts the user import.
    ///
    /// - Parameter StartUserImportJobInput : Represents the request to start the user import job.
    ///
    /// - Returns: `StartUserImportJobOutputResponse` : Represents the response from the server to the request to start the user import job.
    ///
    /// - Throws: One of the exceptions listed below __Possible Exceptions__.
    ///
    /// __Possible Exceptions:__
    /// - `InternalErrorException` : This exception is thrown when Amazon Cognito encounters an internal error.
    /// - `InvalidParameterException` : This exception is thrown when the Amazon Cognito service encounters an invalid parameter.
    /// - `NotAuthorizedException` : This exception is thrown when a user isn't authorized.
    /// - `PreconditionNotMetException` : This exception is thrown when a precondition is not met.
    /// - `ResourceNotFoundException` : This exception is thrown when the Amazon Cognito service can't find the requested resource.
    /// - `TooManyRequestsException` : This exception is thrown when the user has made too many requests for a given operation.
    func startUserImportJob(input: StartUserImportJobInput) async throws -> StartUserImportJobOutputResponse
    /// Stops the user import job.
    ///
    /// - Parameter StopUserImportJobInput : Represents the request to stop the user import job.
    ///
    /// - Returns: `StopUserImportJobOutputResponse` : Represents the response from the server to the request to stop the user import job.
    ///
    /// - Throws: One of the exceptions listed below __Possible Exceptions__.
    ///
    /// __Possible Exceptions:__
    /// - `InternalErrorException` : This exception is thrown when Amazon Cognito encounters an internal error.
    /// - `InvalidParameterException` : This exception is thrown when the Amazon Cognito service encounters an invalid parameter.
    /// - `NotAuthorizedException` : This exception is thrown when a user isn't authorized.
    /// - `PreconditionNotMetException` : This exception is thrown when a precondition is not met.
    /// - `ResourceNotFoundException` : This exception is thrown when the Amazon Cognito service can't find the requested resource.
    /// - `TooManyRequestsException` : This exception is thrown when the user has made too many requests for a given operation.
    func stopUserImportJob(input: StopUserImportJobInput) async throws -> StopUserImportJobOutputResponse
    /// Assigns a set of tags to an Amazon Cognito user pool. A tag is a label that you can use to categorize and manage user pools in different ways, such as by purpose, owner, environment, or other criteria. Each tag consists of a key and value, both of which you define. A key is a general category for more specific values. For example, if you have two versions of a user pool, one for testing and another for production, you might assign an Environment tag key to both user pools. The value of this key might be Test for one user pool, and Production for the other. Tags are useful for cost tracking and access control. You can activate your tags so that they appear on the Billing and Cost Management console, where you can track the costs associated with your user pools. In an Identity and Access Management policy, you can constrain permissions for user pools based on specific tags or tag values. You can use this action up to 5 times per second, per account. A user pool can have as many as 50 tags.
    ///
    /// - Parameter TagResourceInput : [no documentation found]
    ///
    /// - Returns: `TagResourceOutputResponse` : [no documentation found]
    ///
    /// - Throws: One of the exceptions listed below __Possible Exceptions__.
    ///
    /// __Possible Exceptions:__
    /// - `InternalErrorException` : This exception is thrown when Amazon Cognito encounters an internal error.
    /// - `InvalidParameterException` : This exception is thrown when the Amazon Cognito service encounters an invalid parameter.
    /// - `NotAuthorizedException` : This exception is thrown when a user isn't authorized.
    /// - `ResourceNotFoundException` : This exception is thrown when the Amazon Cognito service can't find the requested resource.
    /// - `TooManyRequestsException` : This exception is thrown when the user has made too many requests for a given operation.
    func tagResource(input: TagResourceInput) async throws -> TagResourceOutputResponse
    /// Removes the specified tags from an Amazon Cognito user pool. You can use this action up to 5 times per second, per account.
    ///
    /// - Parameter UntagResourceInput : [no documentation found]
    ///
    /// - Returns: `UntagResourceOutputResponse` : [no documentation found]
    ///
    /// - Throws: One of the exceptions listed below __Possible Exceptions__.
    ///
    /// __Possible Exceptions:__
    /// - `InternalErrorException` : This exception is thrown when Amazon Cognito encounters an internal error.
    /// - `InvalidParameterException` : This exception is thrown when the Amazon Cognito service encounters an invalid parameter.
    /// - `NotAuthorizedException` : This exception is thrown when a user isn't authorized.
    /// - `ResourceNotFoundException` : This exception is thrown when the Amazon Cognito service can't find the requested resource.
    /// - `TooManyRequestsException` : This exception is thrown when the user has made too many requests for a given operation.
    func untagResource(input: UntagResourceInput) async throws -> UntagResourceOutputResponse
    /// Provides the feedback for an authentication event, whether it was from a valid user or not. This feedback is used for improving the risk evaluation decision for the user pool as part of Amazon Cognito advanced security. Amazon Cognito doesn't evaluate Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you can't use IAM credentials to authorize requests, and you can't grant IAM permissions in policies. For more information about authorization models in Amazon Cognito, see [Using the Amazon Cognito native and OIDC APIs](https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html).
    ///
    /// - Parameter UpdateAuthEventFeedbackInput : [no documentation found]
    ///
    /// - Returns: `UpdateAuthEventFeedbackOutputResponse` : [no documentation found]
    ///
    /// - Throws: One of the exceptions listed below __Possible Exceptions__.
    ///
    /// __Possible Exceptions:__
    /// - `InternalErrorException` : This exception is thrown when Amazon Cognito encounters an internal error.
    /// - `InvalidParameterException` : This exception is thrown when the Amazon Cognito service encounters an invalid parameter.
    /// - `NotAuthorizedException` : This exception is thrown when a user isn't authorized.
    /// - `ResourceNotFoundException` : This exception is thrown when the Amazon Cognito service can't find the requested resource.
    /// - `TooManyRequestsException` : This exception is thrown when the user has made too many requests for a given operation.
    /// - `UserNotFoundException` : This exception is thrown when a user isn't found.
    /// - `UserPoolAddOnNotEnabledException` : This exception is thrown when user pool add-ons aren't enabled.
    func updateAuthEventFeedback(input: UpdateAuthEventFeedbackInput) async throws -> UpdateAuthEventFeedbackOutputResponse
    /// Updates the device status. Amazon Cognito doesn't evaluate Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you can't use IAM credentials to authorize requests, and you can't grant IAM permissions in policies. For more information about authorization models in Amazon Cognito, see [Using the Amazon Cognito native and OIDC APIs](https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html).
    ///
    /// - Parameter UpdateDeviceStatusInput : Represents the request to update the device status.
    ///
    /// - Returns: `UpdateDeviceStatusOutputResponse` : The response to the request to update the device status.
    ///
    /// - Throws: One of the exceptions listed below __Possible Exceptions__.
    ///
    /// __Possible Exceptions:__
    /// - `ForbiddenException` : This exception is thrown when WAF doesn't allow your request based on a web ACL that's associated with your user pool.
    /// - `InternalErrorException` : This exception is thrown when Amazon Cognito encounters an internal error.
    /// - `InvalidParameterException` : This exception is thrown when the Amazon Cognito service encounters an invalid parameter.
    /// - `InvalidUserPoolConfigurationException` : This exception is thrown when the user pool configuration is not valid.
    /// - `NotAuthorizedException` : This exception is thrown when a user isn't authorized.
    /// - `PasswordResetRequiredException` : This exception is thrown when a password reset is required.
    /// - `ResourceNotFoundException` : This exception is thrown when the Amazon Cognito service can't find the requested resource.
    /// - `TooManyRequestsException` : This exception is thrown when the user has made too many requests for a given operation.
    /// - `UserNotConfirmedException` : This exception is thrown when a user isn't confirmed successfully.
    /// - `UserNotFoundException` : This exception is thrown when a user isn't found.
    func updateDeviceStatus(input: UpdateDeviceStatusInput) async throws -> UpdateDeviceStatusOutputResponse
    /// Updates the specified group with the specified attributes. Amazon Cognito evaluates Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you must use IAM credentials to authorize requests, and you must grant yourself the corresponding IAM permission in a policy. Learn more
    ///
    /// * [Signing Amazon Web Services API Requests](https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_aws-signing.html)
    ///
    /// * [Using the Amazon Cognito user pools API and user pool endpoints](https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html)
    ///
    /// - Parameter UpdateGroupInput : [no documentation found]
    ///
    /// - Returns: `UpdateGroupOutputResponse` : [no documentation found]
    ///
    /// - Throws: One of the exceptions listed below __Possible Exceptions__.
    ///
    /// __Possible Exceptions:__
    /// - `InternalErrorException` : This exception is thrown when Amazon Cognito encounters an internal error.
    /// - `InvalidParameterException` : This exception is thrown when the Amazon Cognito service encounters an invalid parameter.
    /// - `NotAuthorizedException` : This exception is thrown when a user isn't authorized.
    /// - `ResourceNotFoundException` : This exception is thrown when the Amazon Cognito service can't find the requested resource.
    /// - `TooManyRequestsException` : This exception is thrown when the user has made too many requests for a given operation.
    func updateGroup(input: UpdateGroupInput) async throws -> UpdateGroupOutputResponse
    /// Updates IdP information for a user pool. Amazon Cognito evaluates Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you must use IAM credentials to authorize requests, and you must grant yourself the corresponding IAM permission in a policy. Learn more
    ///
    /// * [Signing Amazon Web Services API Requests](https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_aws-signing.html)
    ///
    /// * [Using the Amazon Cognito user pools API and user pool endpoints](https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html)
    ///
    /// - Parameter UpdateIdentityProviderInput : [no documentation found]
    ///
    /// - Returns: `UpdateIdentityProviderOutputResponse` : [no documentation found]
    ///
    /// - Throws: One of the exceptions listed below __Possible Exceptions__.
    ///
    /// __Possible Exceptions:__
    /// - `ConcurrentModificationException` : This exception is thrown if two or more modifications are happening concurrently.
    /// - `InternalErrorException` : This exception is thrown when Amazon Cognito encounters an internal error.
    /// - `InvalidParameterException` : This exception is thrown when the Amazon Cognito service encounters an invalid parameter.
    /// - `NotAuthorizedException` : This exception is thrown when a user isn't authorized.
    /// - `ResourceNotFoundException` : This exception is thrown when the Amazon Cognito service can't find the requested resource.
    /// - `TooManyRequestsException` : This exception is thrown when the user has made too many requests for a given operation.
    /// - `UnsupportedIdentityProviderException` : This exception is thrown when the specified identifier isn't supported.
    func updateIdentityProvider(input: UpdateIdentityProviderInput) async throws -> UpdateIdentityProviderOutputResponse
    /// Updates the name and scopes of resource server. All other fields are read-only. If you don't provide a value for an attribute, it is set to the default value. Amazon Cognito evaluates Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you must use IAM credentials to authorize requests, and you must grant yourself the corresponding IAM permission in a policy. Learn more
    ///
    /// * [Signing Amazon Web Services API Requests](https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_aws-signing.html)
    ///
    /// * [Using the Amazon Cognito user pools API and user pool endpoints](https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html)
    ///
    /// - Parameter UpdateResourceServerInput : [no documentation found]
    ///
    /// - Returns: `UpdateResourceServerOutputResponse` : [no documentation found]
    ///
    /// - Throws: One of the exceptions listed below __Possible Exceptions__.
    ///
    /// __Possible Exceptions:__
    /// - `InternalErrorException` : This exception is thrown when Amazon Cognito encounters an internal error.
    /// - `InvalidParameterException` : This exception is thrown when the Amazon Cognito service encounters an invalid parameter.
    /// - `NotAuthorizedException` : This exception is thrown when a user isn't authorized.
    /// - `ResourceNotFoundException` : This exception is thrown when the Amazon Cognito service can't find the requested resource.
    /// - `TooManyRequestsException` : This exception is thrown when the user has made too many requests for a given operation.
    func updateResourceServer(input: UpdateResourceServerInput) async throws -> UpdateResourceServerOutputResponse
    /// Allows a user to update a specific attribute (one at a time). Amazon Cognito doesn't evaluate Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you can't use IAM credentials to authorize requests, and you can't grant IAM permissions in policies. For more information about authorization models in Amazon Cognito, see [Using the Amazon Cognito native and OIDC APIs](https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html). This action might generate an SMS text message. Starting June 1, 2021, US telecom carriers require you to register an origination phone number before you can send SMS messages to US phone numbers. If you use SMS text messages in Amazon Cognito, you must register a phone number with [Amazon Pinpoint](https://console.aws.amazon.com/pinpoint/home/). Amazon Cognito uses the registered number automatically. Otherwise, Amazon Cognito users who must receive SMS messages might not be able to sign up, activate their accounts, or sign in. If you have never used SMS text messages with Amazon Cognito or any other Amazon Web Service, Amazon Simple Notification Service might place your account in the SMS sandbox. In [sandbox mode](https://docs.aws.amazon.com/sns/latest/dg/sns-sms-sandbox.html) , you can send messages only to verified phone numbers. After you test your app while in the sandbox environment, you can move out of the sandbox and into production. For more information, see [ SMS message settings for Amazon Cognito user pools](https://docs.aws.amazon.com/cognito/latest/developerguide/user-pool-sms-settings.html) in the Amazon Cognito Developer Guide.
    ///
    /// - Parameter UpdateUserAttributesInput : Represents the request to update user attributes.
    ///
    /// - Returns: `UpdateUserAttributesOutputResponse` : Represents the response from the server for the request to update user attributes.
    ///
    /// - Throws: One of the exceptions listed below __Possible Exceptions__.
    ///
    /// __Possible Exceptions:__
    /// - `AliasExistsException` : This exception is thrown when a user tries to confirm the account with an email address or phone number that has already been supplied as an alias for a different user profile. This exception indicates that an account with this email address or phone already exists in a user pool that you've configured to use email address or phone number as a sign-in alias.
    /// - `CodeDeliveryFailureException` : This exception is thrown when a verification code fails to deliver successfully.
    /// - `CodeMismatchException` : This exception is thrown if the provided code doesn't match what the server was expecting.
    /// - `ExpiredCodeException` : This exception is thrown if a code has expired.
    /// - `ForbiddenException` : This exception is thrown when WAF doesn't allow your request based on a web ACL that's associated with your user pool.
    /// - `InternalErrorException` : This exception is thrown when Amazon Cognito encounters an internal error.
    /// - `InvalidEmailRoleAccessPolicyException` : This exception is thrown when Amazon Cognito isn't allowed to use your email identity. HTTP status code: 400.
    /// - `InvalidLambdaResponseException` : This exception is thrown when Amazon Cognito encounters an invalid Lambda response.
    /// - `InvalidParameterException` : This exception is thrown when the Amazon Cognito service encounters an invalid parameter.
    /// - `InvalidSmsRoleAccessPolicyException` : This exception is returned when the role provided for SMS configuration doesn't have permission to publish using Amazon SNS.
    /// - `InvalidSmsRoleTrustRelationshipException` : This exception is thrown when the trust relationship is not valid for the role provided for SMS configuration. This can happen if you don't trust cognito-idp.amazonaws.com or the external ID provided in the role does not match what is provided in the SMS configuration for the user pool.
    /// - `NotAuthorizedException` : This exception is thrown when a user isn't authorized.
    /// - `PasswordResetRequiredException` : This exception is thrown when a password reset is required.
    /// - `ResourceNotFoundException` : This exception is thrown when the Amazon Cognito service can't find the requested resource.
    /// - `TooManyRequestsException` : This exception is thrown when the user has made too many requests for a given operation.
    /// - `UnexpectedLambdaException` : This exception is thrown when Amazon Cognito encounters an unexpected exception with Lambda.
    /// - `UserLambdaValidationException` : This exception is thrown when the Amazon Cognito service encounters a user validation exception with the Lambda service.
    /// - `UserNotConfirmedException` : This exception is thrown when a user isn't confirmed successfully.
    /// - `UserNotFoundException` : This exception is thrown when a user isn't found.
    func updateUserAttributes(input: UpdateUserAttributesInput) async throws -> UpdateUserAttributesOutputResponse
    /// This action might generate an SMS text message. Starting June 1, 2021, US telecom carriers require you to register an origination phone number before you can send SMS messages to US phone numbers. If you use SMS text messages in Amazon Cognito, you must register a phone number with [Amazon Pinpoint](https://console.aws.amazon.com/pinpoint/home/). Amazon Cognito uses the registered number automatically. Otherwise, Amazon Cognito users who must receive SMS messages might not be able to sign up, activate their accounts, or sign in. If you have never used SMS text messages with Amazon Cognito or any other Amazon Web Service, Amazon Simple Notification Service might place your account in the SMS sandbox. In [sandbox mode](https://docs.aws.amazon.com/sns/latest/dg/sns-sms-sandbox.html) , you can send messages only to verified phone numbers. After you test your app while in the sandbox environment, you can move out of the sandbox and into production. For more information, see [ SMS message settings for Amazon Cognito user pools](https://docs.aws.amazon.com/cognito/latest/developerguide/user-pool-sms-settings.html) in the Amazon Cognito Developer Guide. Updates the specified user pool with the specified attributes. You can get a list of the current user pool settings using [DescribeUserPool](https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_DescribeUserPool.html). If you don't provide a value for an attribute, Amazon Cognito sets it to its default value. Amazon Cognito evaluates Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you must use IAM credentials to authorize requests, and you must grant yourself the corresponding IAM permission in a policy. Learn more
    ///
    /// * [Signing Amazon Web Services API Requests](https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_aws-signing.html)
    ///
    /// * [Using the Amazon Cognito user pools API and user pool endpoints](https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html)
    ///
    /// - Parameter UpdateUserPoolInput : Represents the request to update the user pool.
    ///
    /// - Returns: `UpdateUserPoolOutputResponse` : Represents the response from the server when you make a request to update the user pool.
    ///
    /// - Throws: One of the exceptions listed below __Possible Exceptions__.
    ///
    /// __Possible Exceptions:__
    /// - `ConcurrentModificationException` : This exception is thrown if two or more modifications are happening concurrently.
    /// - `InternalErrorException` : This exception is thrown when Amazon Cognito encounters an internal error.
    /// - `InvalidEmailRoleAccessPolicyException` : This exception is thrown when Amazon Cognito isn't allowed to use your email identity. HTTP status code: 400.
    /// - `InvalidParameterException` : This exception is thrown when the Amazon Cognito service encounters an invalid parameter.
    /// - `InvalidSmsRoleAccessPolicyException` : This exception is returned when the role provided for SMS configuration doesn't have permission to publish using Amazon SNS.
    /// - `InvalidSmsRoleTrustRelationshipException` : This exception is thrown when the trust relationship is not valid for the role provided for SMS configuration. This can happen if you don't trust cognito-idp.amazonaws.com or the external ID provided in the role does not match what is provided in the SMS configuration for the user pool.
    /// - `NotAuthorizedException` : This exception is thrown when a user isn't authorized.
    /// - `ResourceNotFoundException` : This exception is thrown when the Amazon Cognito service can't find the requested resource.
    /// - `TooManyRequestsException` : This exception is thrown when the user has made too many requests for a given operation.
    /// - `UserImportInProgressException` : This exception is thrown when you're trying to modify a user pool while a user import job is in progress for that pool.
    /// - `UserPoolTaggingException` : This exception is thrown when a user pool tag can't be set or updated.
    func updateUserPool(input: UpdateUserPoolInput) async throws -> UpdateUserPoolOutputResponse
    /// Updates the specified user pool app client with the specified attributes. You can get a list of the current user pool app client settings using [DescribeUserPoolClient](https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_DescribeUserPoolClient.html). If you don't provide a value for an attribute, Amazon Cognito sets it to its default value. You can also use this operation to enable token revocation for user pool clients. For more information about revoking tokens, see [RevokeToken](https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_RevokeToken.html). Amazon Cognito evaluates Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you must use IAM credentials to authorize requests, and you must grant yourself the corresponding IAM permission in a policy. Learn more
    ///
    /// * [Signing Amazon Web Services API Requests](https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_aws-signing.html)
    ///
    /// * [Using the Amazon Cognito user pools API and user pool endpoints](https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html)
    ///
    /// - Parameter UpdateUserPoolClientInput : Represents the request to update the user pool client.
    ///
    /// - Returns: `UpdateUserPoolClientOutputResponse` : Represents the response from the server to the request to update the user pool client.
    ///
    /// - Throws: One of the exceptions listed below __Possible Exceptions__.
    ///
    /// __Possible Exceptions:__
    /// - `ConcurrentModificationException` : This exception is thrown if two or more modifications are happening concurrently.
    /// - `InternalErrorException` : This exception is thrown when Amazon Cognito encounters an internal error.
    /// - `InvalidOAuthFlowException` : This exception is thrown when the specified OAuth flow is not valid.
    /// - `InvalidParameterException` : This exception is thrown when the Amazon Cognito service encounters an invalid parameter.
    /// - `NotAuthorizedException` : This exception is thrown when a user isn't authorized.
    /// - `ResourceNotFoundException` : This exception is thrown when the Amazon Cognito service can't find the requested resource.
    /// - `ScopeDoesNotExistException` : This exception is thrown when the specified scope doesn't exist.
    /// - `TooManyRequestsException` : This exception is thrown when the user has made too many requests for a given operation.
    func updateUserPoolClient(input: UpdateUserPoolClientInput) async throws -> UpdateUserPoolClientOutputResponse
    /// Updates the Secure Sockets Layer (SSL) certificate for the custom domain for your user pool. You can use this operation to provide the Amazon Resource Name (ARN) of a new certificate to Amazon Cognito. You can't use it to change the domain for a user pool. A custom domain is used to host the Amazon Cognito hosted UI, which provides sign-up and sign-in pages for your application. When you set up a custom domain, you provide a certificate that you manage with Certificate Manager (ACM). When necessary, you can use this operation to change the certificate that you applied to your custom domain. Usually, this is unnecessary following routine certificate renewal with ACM. When you renew your existing certificate in ACM, the ARN for your certificate remains the same, and your custom domain uses the new certificate automatically. However, if you replace your existing certificate with a new one, ACM gives the new certificate a new ARN. To apply the new certificate to your custom domain, you must provide this ARN to Amazon Cognito. When you add your new certificate in ACM, you must choose US East (N. Virginia) as the Amazon Web Services Region. After you submit your request, Amazon Cognito requires up to 1 hour to distribute your new certificate to your custom domain. For more information about adding a custom domain to your user pool, see [Using Your Own Domain for the Hosted UI](https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-pools-add-custom-domain.html). Amazon Cognito evaluates Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you must use IAM credentials to authorize requests, and you must grant yourself the corresponding IAM permission in a policy. Learn more
    ///
    /// * [Signing Amazon Web Services API Requests](https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_aws-signing.html)
    ///
    /// * [Using the Amazon Cognito user pools API and user pool endpoints](https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html)
    ///
    /// - Parameter UpdateUserPoolDomainInput : The UpdateUserPoolDomain request input.
    ///
    /// - Returns: `UpdateUserPoolDomainOutputResponse` : The UpdateUserPoolDomain response output.
    ///
    /// - Throws: One of the exceptions listed below __Possible Exceptions__.
    ///
    /// __Possible Exceptions:__
    /// - `InternalErrorException` : This exception is thrown when Amazon Cognito encounters an internal error.
    /// - `InvalidParameterException` : This exception is thrown when the Amazon Cognito service encounters an invalid parameter.
    /// - `NotAuthorizedException` : This exception is thrown when a user isn't authorized.
    /// - `ResourceNotFoundException` : This exception is thrown when the Amazon Cognito service can't find the requested resource.
    /// - `TooManyRequestsException` : This exception is thrown when the user has made too many requests for a given operation.
    func updateUserPoolDomain(input: UpdateUserPoolDomainInput) async throws -> UpdateUserPoolDomainOutputResponse
    /// Use this API to register a user's entered time-based one-time password (TOTP) code and mark the user's software token MFA status as "verified" if successful. The request takes an access token or a session string, but not both. Amazon Cognito doesn't evaluate Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you can't use IAM credentials to authorize requests, and you can't grant IAM permissions in policies. For more information about authorization models in Amazon Cognito, see [Using the Amazon Cognito native and OIDC APIs](https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html).
    ///
    /// - Parameter VerifySoftwareTokenInput : [no documentation found]
    ///
    /// - Returns: `VerifySoftwareTokenOutputResponse` : [no documentation found]
    ///
    /// - Throws: One of the exceptions listed below __Possible Exceptions__.
    ///
    /// __Possible Exceptions:__
    /// - `CodeMismatchException` : This exception is thrown if the provided code doesn't match what the server was expecting.
    /// - `EnableSoftwareTokenMFAException` : This exception is thrown when there is a code mismatch and the service fails to configure the software token TOTP multi-factor authentication (MFA).
    /// - `ForbiddenException` : This exception is thrown when WAF doesn't allow your request based on a web ACL that's associated with your user pool.
    /// - `InternalErrorException` : This exception is thrown when Amazon Cognito encounters an internal error.
    /// - `InvalidParameterException` : This exception is thrown when the Amazon Cognito service encounters an invalid parameter.
    /// - `InvalidUserPoolConfigurationException` : This exception is thrown when the user pool configuration is not valid.
    /// - `NotAuthorizedException` : This exception is thrown when a user isn't authorized.
    /// - `PasswordResetRequiredException` : This exception is thrown when a password reset is required.
    /// - `ResourceNotFoundException` : This exception is thrown when the Amazon Cognito service can't find the requested resource.
    /// - `SoftwareTokenMFANotFoundException` : This exception is thrown when the software token time-based one-time password (TOTP) multi-factor authentication (MFA) isn't activated for the user pool.
    /// - `TooManyRequestsException` : This exception is thrown when the user has made too many requests for a given operation.
    /// - `UserNotConfirmedException` : This exception is thrown when a user isn't confirmed successfully.
    /// - `UserNotFoundException` : This exception is thrown when a user isn't found.
    func verifySoftwareToken(input: VerifySoftwareTokenInput) async throws -> VerifySoftwareTokenOutputResponse
    /// Verifies the specified user attributes in the user pool. If your user pool requires verification before Amazon Cognito updates the attribute value, VerifyUserAttribute updates the affected attribute to its pending value. For more information, see [ UserAttributeUpdateSettingsType](https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_UserAttributeUpdateSettingsType.html). Amazon Cognito doesn't evaluate Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you can't use IAM credentials to authorize requests, and you can't grant IAM permissions in policies. For more information about authorization models in Amazon Cognito, see [Using the Amazon Cognito native and OIDC APIs](https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html).
    ///
    /// - Parameter VerifyUserAttributeInput : Represents the request to verify user attributes.
    ///
    /// - Returns: `VerifyUserAttributeOutputResponse` : A container representing the response from the server from the request to verify user attributes.
    ///
    /// - Throws: One of the exceptions listed below __Possible Exceptions__.
    ///
    /// __Possible Exceptions:__
    /// - `AliasExistsException` : This exception is thrown when a user tries to confirm the account with an email address or phone number that has already been supplied as an alias for a different user profile. This exception indicates that an account with this email address or phone already exists in a user pool that you've configured to use email address or phone number as a sign-in alias.
    /// - `CodeMismatchException` : This exception is thrown if the provided code doesn't match what the server was expecting.
    /// - `ExpiredCodeException` : This exception is thrown if a code has expired.
    /// - `ForbiddenException` : This exception is thrown when WAF doesn't allow your request based on a web ACL that's associated with your user pool.
    /// - `InternalErrorException` : This exception is thrown when Amazon Cognito encounters an internal error.
    /// - `InvalidParameterException` : This exception is thrown when the Amazon Cognito service encounters an invalid parameter.
    /// - `LimitExceededException` : This exception is thrown when a user exceeds the limit for a requested Amazon Web Services resource.
    /// - `NotAuthorizedException` : This exception is thrown when a user isn't authorized.
    /// - `PasswordResetRequiredException` : This exception is thrown when a password reset is required.
    /// - `ResourceNotFoundException` : This exception is thrown when the Amazon Cognito service can't find the requested resource.
    /// - `TooManyRequestsException` : This exception is thrown when the user has made too many requests for a given operation.
    /// - `UserNotConfirmedException` : This exception is thrown when a user isn't confirmed successfully.
    /// - `UserNotFoundException` : This exception is thrown when a user isn't found.
    func verifyUserAttribute(input: VerifyUserAttributeInput) async throws -> VerifyUserAttributeOutputResponse
}

public enum CognitoIdentityProviderClientTypes {}
