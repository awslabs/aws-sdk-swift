//
// Copyright Amazon.com Inc. or its affiliates.
// All Rights Reserved.
//
// SPDX-License-Identifier: Apache-2.0
//

// Code generated by smithy-swift-codegen. DO NOT EDIT!

@_spi(SmithyReadWrite) import ClientRuntime
import Foundation
import class SmithyHTTPAPI.HTTPResponse
@_spi(SmithyReadWrite) import class SmithyJSON.Reader
@_spi(SmithyReadWrite) import class SmithyJSON.Writer
import enum ClientRuntime.ErrorFault
import enum SmithyReadWrite.ReaderError
@_spi(SmithyReadWrite) import enum SmithyReadWrite.ReadingClosures
@_spi(SmithyReadWrite) import enum SmithyReadWrite.WritingClosures
@_spi(SmithyTimestamps) import enum SmithyTimestamps.TimestampFormat
import protocol AWSClientRuntime.AWSServiceError
import protocol ClientRuntime.HTTPError
import protocol ClientRuntime.ModeledError
@_spi(SmithyReadWrite) import protocol SmithyReadWrite.SmithyReader
@_spi(SmithyReadWrite) import protocol SmithyReadWrite.SmithyWriter
@_spi(SmithyReadWrite) import struct AWSClientRuntime.AWSJSONError
@_spi(UnknownAWSHTTPServiceError) import struct AWSClientRuntime.UnknownAWSHTTPServiceError
@_spi(SmithyReadWrite) import struct SmithyReadWrite.ReadingClosureBox
@_spi(SmithyReadWrite) import struct SmithyReadWrite.WritingClosureBox


public struct AdminAddUserToGroupOutput: Swift.Sendable {

    public init() { }
}

public struct AdminDeleteUserOutput: Swift.Sendable {

    public init() { }
}

public struct AdminForgetDeviceOutput: Swift.Sendable {

    public init() { }
}

public struct AdminRemoveUserFromGroupOutput: Swift.Sendable {

    public init() { }
}

public struct DeleteGroupOutput: Swift.Sendable {

    public init() { }
}

public struct DeleteIdentityProviderOutput: Swift.Sendable {

    public init() { }
}

public struct DeleteResourceServerOutput: Swift.Sendable {

    public init() { }
}

public struct DeleteUserOutput: Swift.Sendable {

    public init() { }
}

public struct DeleteUserPoolClientOutput: Swift.Sendable {

    public init() { }
}

public struct DeleteUserPoolOutput: Swift.Sendable {

    public init() { }
}

public struct ForgetDeviceOutput: Swift.Sendable {

    public init() { }
}

extension CognitoIdentityProviderClientTypes {

    public enum RecoveryOptionNameType: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case adminOnly
        case verifiedEmail
        case verifiedPhoneNumber
        case sdkUnknown(Swift.String)

        public static var allCases: [RecoveryOptionNameType] {
            return [
                .adminOnly,
                .verifiedEmail,
                .verifiedPhoneNumber
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .adminOnly: return "admin_only"
            case .verifiedEmail: return "verified_email"
            case .verifiedPhoneNumber: return "verified_phone_number"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension CognitoIdentityProviderClientTypes {

    /// A map containing a priority as a key, and recovery method name as a value.
    public struct RecoveryOptionType: Swift.Sendable {
        /// The recovery method for a user.
        /// This member is required.
        public var name: CognitoIdentityProviderClientTypes.RecoveryOptionNameType?
        /// A positive integer specifying priority of a method with 1 being the highest priority.
        /// This member is required.
        public var priority: Swift.Int?

        public init(
            name: CognitoIdentityProviderClientTypes.RecoveryOptionNameType? = nil,
            priority: Swift.Int? = nil
        )
        {
            self.name = name
            self.priority = priority
        }
    }
}

extension CognitoIdentityProviderClientTypes {

    /// The data type for AccountRecoverySetting.
    public struct AccountRecoverySettingType: Swift.Sendable {
        /// The list of RecoveryOptionTypes.
        public var recoveryMechanisms: [CognitoIdentityProviderClientTypes.RecoveryOptionType]?

        public init(
            recoveryMechanisms: [CognitoIdentityProviderClientTypes.RecoveryOptionType]? = nil
        )
        {
            self.recoveryMechanisms = recoveryMechanisms
        }
    }
}

extension CognitoIdentityProviderClientTypes {

    public enum AccountTakeoverEventActionType: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case block
        case mfaIfConfigured
        case mfaRequired
        case noAction
        case sdkUnknown(Swift.String)

        public static var allCases: [AccountTakeoverEventActionType] {
            return [
                .block,
                .mfaIfConfigured,
                .mfaRequired,
                .noAction
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .block: return "BLOCK"
            case .mfaIfConfigured: return "MFA_IF_CONFIGURED"
            case .mfaRequired: return "MFA_REQUIRED"
            case .noAction: return "NO_ACTION"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension CognitoIdentityProviderClientTypes {

    /// Account takeover action type.
    public struct AccountTakeoverActionType: Swift.Sendable {
        /// The action to take in response to the account takeover action. Valid values are as follows:
        ///
        /// * BLOCK Choosing this action will block the request.
        ///
        /// * MFA_IF_CONFIGURED Present an MFA challenge if user has configured it, else allow the request.
        ///
        /// * MFA_REQUIRED Present an MFA challenge if user has configured it, else block the request.
        ///
        /// * NO_ACTION Allow the user to sign in.
        /// This member is required.
        public var eventAction: CognitoIdentityProviderClientTypes.AccountTakeoverEventActionType?
        /// Flag specifying whether to send a notification.
        /// This member is required.
        public var notify: Swift.Bool

        public init(
            eventAction: CognitoIdentityProviderClientTypes.AccountTakeoverEventActionType? = nil,
            notify: Swift.Bool = false
        )
        {
            self.eventAction = eventAction
            self.notify = notify
        }
    }
}

extension CognitoIdentityProviderClientTypes {

    /// Account takeover actions type.
    public struct AccountTakeoverActionsType: Swift.Sendable {
        /// Action to take for a high risk.
        public var highAction: CognitoIdentityProviderClientTypes.AccountTakeoverActionType?
        /// Action to take for a low risk.
        public var lowAction: CognitoIdentityProviderClientTypes.AccountTakeoverActionType?
        /// Action to take for a medium risk.
        public var mediumAction: CognitoIdentityProviderClientTypes.AccountTakeoverActionType?

        public init(
            highAction: CognitoIdentityProviderClientTypes.AccountTakeoverActionType? = nil,
            lowAction: CognitoIdentityProviderClientTypes.AccountTakeoverActionType? = nil,
            mediumAction: CognitoIdentityProviderClientTypes.AccountTakeoverActionType? = nil
        )
        {
            self.highAction = highAction
            self.lowAction = lowAction
            self.mediumAction = mediumAction
        }
    }
}

extension CognitoIdentityProviderClientTypes {

    /// The notify email type.
    public struct NotifyEmailType: Swift.Sendable {
        /// The email HTML body.
        public var htmlBody: Swift.String?
        /// The email subject.
        /// This member is required.
        public var subject: Swift.String?
        /// The email text body.
        public var textBody: Swift.String?

        public init(
            htmlBody: Swift.String? = nil,
            subject: Swift.String? = nil,
            textBody: Swift.String? = nil
        )
        {
            self.htmlBody = htmlBody
            self.subject = subject
            self.textBody = textBody
        }
    }
}

extension CognitoIdentityProviderClientTypes {

    /// The notify configuration type.
    public struct NotifyConfigurationType: Swift.Sendable {
        /// Email template used when a detected risk event is blocked.
        public var blockEmail: CognitoIdentityProviderClientTypes.NotifyEmailType?
        /// The email address that is sending the email. The address must be either individually verified with Amazon Simple Email Service, or from a domain that has been verified with Amazon SES.
        public var from: Swift.String?
        /// The multi-factor authentication (MFA) email template used when MFA is challenged as part of a detected risk.
        public var mfaEmail: CognitoIdentityProviderClientTypes.NotifyEmailType?
        /// The email template used when a detected risk event is allowed.
        public var noActionEmail: CognitoIdentityProviderClientTypes.NotifyEmailType?
        /// The destination to which the receiver of an email should reply to.
        public var replyTo: Swift.String?
        /// The Amazon Resource Name (ARN) of the identity that is associated with the sending authorization policy. This identity permits Amazon Cognito to send for the email address specified in the From parameter.
        /// This member is required.
        public var sourceArn: Swift.String?

        public init(
            blockEmail: CognitoIdentityProviderClientTypes.NotifyEmailType? = nil,
            from: Swift.String? = nil,
            mfaEmail: CognitoIdentityProviderClientTypes.NotifyEmailType? = nil,
            noActionEmail: CognitoIdentityProviderClientTypes.NotifyEmailType? = nil,
            replyTo: Swift.String? = nil,
            sourceArn: Swift.String? = nil
        )
        {
            self.blockEmail = blockEmail
            self.from = from
            self.mfaEmail = mfaEmail
            self.noActionEmail = noActionEmail
            self.replyTo = replyTo
            self.sourceArn = sourceArn
        }
    }
}

extension CognitoIdentityProviderClientTypes {

    /// Configuration for mitigation actions and notification for different levels of risk detected for a potential account takeover.
    public struct AccountTakeoverRiskConfigurationType: Swift.Sendable {
        /// Account takeover risk configuration actions.
        /// This member is required.
        public var actions: CognitoIdentityProviderClientTypes.AccountTakeoverActionsType?
        /// The notify configuration used to construct email notifications.
        public var notifyConfiguration: CognitoIdentityProviderClientTypes.NotifyConfigurationType?

        public init(
            actions: CognitoIdentityProviderClientTypes.AccountTakeoverActionsType? = nil,
            notifyConfiguration: CognitoIdentityProviderClientTypes.NotifyConfigurationType? = nil
        )
        {
            self.actions = actions
            self.notifyConfiguration = notifyConfiguration
        }
    }
}

/// This exception is thrown when Amazon Cognito encounters an internal error.
public struct InternalErrorException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// The message returned when Amazon Cognito throws an internal error exception.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InternalErrorException" }
    public static var fault: ClientRuntime.ErrorFault { .server }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// This exception is thrown when the Amazon Cognito service encounters an invalid parameter.
public struct InvalidParameterException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// The message returned when the Amazon Cognito service throws an invalid parameter exception.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidParameterException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// This exception is thrown when a user isn't authorized.
public struct NotAuthorizedException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// The message returned when the Amazon Cognito service returns a not authorized exception.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "NotAuthorizedException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// This exception is thrown when the Amazon Cognito service can't find the requested resource.
public struct ResourceNotFoundException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// The message returned when the Amazon Cognito service returns a resource not found exception.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ResourceNotFoundException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// This exception is thrown when the user has made too many requests for a given operation.
public struct TooManyRequestsException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// The message returned when the Amazon Cognito service returns a too many requests exception.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "TooManyRequestsException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// This exception is thrown when you're trying to modify a user pool while a user import job is in progress for that pool.
public struct UserImportInProgressException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// The message returned when the user pool has an import job running.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "UserImportInProgressException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension CognitoIdentityProviderClientTypes {

    public enum AttributeDataType: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case boolean
        case datetime
        case number
        case string
        case sdkUnknown(Swift.String)

        public static var allCases: [AttributeDataType] {
            return [
                .boolean,
                .datetime,
                .number,
                .string
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .boolean: return "Boolean"
            case .datetime: return "DateTime"
            case .number: return "Number"
            case .string: return "String"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension CognitoIdentityProviderClientTypes {

    /// The minimum and maximum values of an attribute that is of the number data type.
    public struct NumberAttributeConstraintsType: Swift.Sendable {
        /// The maximum length of a number attribute value. Must be a number less than or equal to 2^1023, represented as a string with a length of 131072 characters or fewer.
        public var maxValue: Swift.String?
        /// The minimum value of an attribute that is of the number data type.
        public var minValue: Swift.String?

        public init(
            maxValue: Swift.String? = nil,
            minValue: Swift.String? = nil
        )
        {
            self.maxValue = maxValue
            self.minValue = minValue
        }
    }
}

extension CognitoIdentityProviderClientTypes {

    /// The constraints associated with a string attribute.
    public struct StringAttributeConstraintsType: Swift.Sendable {
        /// The maximum length of a string attribute value. Must be a number less than or equal to 2^1023, represented as a string with a length of 131072 characters or fewer.
        public var maxLength: Swift.String?
        /// The minimum length.
        public var minLength: Swift.String?

        public init(
            maxLength: Swift.String? = nil,
            minLength: Swift.String? = nil
        )
        {
            self.maxLength = maxLength
            self.minLength = minLength
        }
    }
}

extension CognitoIdentityProviderClientTypes {

    /// A list of the user attributes and their properties in your user pool. The attribute schema contains standard attributes, custom attributes with a custom: prefix, and developer attributes with a dev: prefix. For more information, see [User pool attributes](https://docs.aws.amazon.com/cognito/latest/developerguide/user-pool-settings-attributes.html). Developer-only attributes are a legacy feature of user pools, are read-only to all app clients. You can create and update developer-only attributes only with IAM-authenticated API operations. Use app client read/write permissions instead.
    public struct SchemaAttributeType: Swift.Sendable {
        /// The data format of the values for your attribute. When you choose an AttributeDataType, Amazon Cognito validates the input against the data type. A custom attribute value in your user's ID token is always a string, for example "custom:isMember" : "true" or "custom:YearsAsMember" : "12".
        public var attributeDataType: CognitoIdentityProviderClientTypes.AttributeDataType?
        /// You should use [WriteAttributes](https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_UserPoolClientType.html#CognitoUserPools-Type-UserPoolClientType-WriteAttributes) in the user pool client to control how attributes can be mutated for new use cases instead of using DeveloperOnlyAttribute. Specifies whether the attribute type is developer only. This attribute can only be modified by an administrator. Users won't be able to modify this attribute using their access token. For example, DeveloperOnlyAttribute can be modified using AdminUpdateUserAttributes but can't be updated using UpdateUserAttributes.
        public var developerOnlyAttribute: Swift.Bool?
        /// Specifies whether the value of the attribute can be changed. Any user pool attribute whose value you map from an IdP attribute must be mutable, with a parameter value of true. Amazon Cognito updates mapped attributes when users sign in to your application through an IdP. If an attribute is immutable, Amazon Cognito throws an error when it attempts to update the attribute. For more information, see [Specifying Identity Provider Attribute Mappings for Your User Pool](https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-pools-specifying-attribute-mapping.html).
        public var mutable: Swift.Bool?
        /// The name of your user pool attribute. When you create or update a user pool, adding a schema attribute creates a custom or developer-only attribute. When you add an attribute with a Name value of MyAttribute, Amazon Cognito creates the custom attribute custom:MyAttribute. When DeveloperOnlyAttribute is true, Amazon Cognito creates your attribute as dev:MyAttribute. In an operation that describes a user pool, Amazon Cognito returns this value as value for standard attributes, custom:value for custom attributes, and dev:value for developer-only attributes..
        public var name: Swift.String?
        /// Specifies the constraints for an attribute of the number type.
        public var numberAttributeConstraints: CognitoIdentityProviderClientTypes.NumberAttributeConstraintsType?
        /// Specifies whether a user pool attribute is required. If the attribute is required and the user doesn't provide a value, registration or sign-in will fail.
        public var `required`: Swift.Bool?
        /// Specifies the constraints for an attribute of the string type.
        public var stringAttributeConstraints: CognitoIdentityProviderClientTypes.StringAttributeConstraintsType?

        public init(
            attributeDataType: CognitoIdentityProviderClientTypes.AttributeDataType? = nil,
            developerOnlyAttribute: Swift.Bool? = false,
            mutable: Swift.Bool? = false,
            name: Swift.String? = nil,
            numberAttributeConstraints: CognitoIdentityProviderClientTypes.NumberAttributeConstraintsType? = nil,
            `required`: Swift.Bool? = false,
            stringAttributeConstraints: CognitoIdentityProviderClientTypes.StringAttributeConstraintsType? = nil
        )
        {
            self.attributeDataType = attributeDataType
            self.developerOnlyAttribute = developerOnlyAttribute
            self.mutable = mutable
            self.name = name
            self.numberAttributeConstraints = numberAttributeConstraints
            self.`required` = `required`
            self.stringAttributeConstraints = stringAttributeConstraints
        }
    }
}

/// Represents the request to add custom attributes.
public struct AddCustomAttributesInput: Swift.Sendable {
    /// An array of custom attributes, such as Mutable and Name.
    /// This member is required.
    public var customAttributes: [CognitoIdentityProviderClientTypes.SchemaAttributeType]?
    /// The user pool ID for the user pool where you want to add custom attributes.
    /// This member is required.
    public var userPoolId: Swift.String?

    public init(
        customAttributes: [CognitoIdentityProviderClientTypes.SchemaAttributeType]? = nil,
        userPoolId: Swift.String? = nil
    )
    {
        self.customAttributes = customAttributes
        self.userPoolId = userPoolId
    }
}

/// Represents the response from the server for the request to add custom attributes.
public struct AddCustomAttributesOutput: Swift.Sendable {

    public init() { }
}

/// This exception is thrown when a user isn't found.
public struct UserNotFoundException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// The message returned when a user isn't found.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "UserNotFoundException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

public struct AdminAddUserToGroupInput: Swift.Sendable {
    /// The name of the group that you want to add your user to.
    /// This member is required.
    public var groupName: Swift.String?
    /// The user pool ID for the user pool.
    /// This member is required.
    public var userPoolId: Swift.String?
    /// The username of the user that you want to query or modify. The value of this parameter is typically your user's username, but it can be any of their alias attributes. If username isn't an alias attribute in your user pool, this value must be the sub of a local user or the username of a user from a third-party IdP.
    /// This member is required.
    public var username: Swift.String?

    public init(
        groupName: Swift.String? = nil,
        userPoolId: Swift.String? = nil,
        username: Swift.String? = nil
    )
    {
        self.groupName = groupName
        self.userPoolId = userPoolId
        self.username = username
    }
}

extension AdminAddUserToGroupInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AdminAddUserToGroupInput(groupName: \(Swift.String(describing: groupName)), userPoolId: \(Swift.String(describing: userPoolId)), username: \"CONTENT_REDACTED\")"}
}

/// This exception is thrown when Amazon Cognito encounters an invalid Lambda response.
public struct InvalidLambdaResponseException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// The message returned when Amazon Cognito throws an invalid Lambda response exception.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidLambdaResponseException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// This exception is thrown when a user exceeds the limit for a requested Amazon Web Services resource.
public struct LimitExceededException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// The message returned when Amazon Cognito throws a limit exceeded exception.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "LimitExceededException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// This exception is thrown when the user has made too many failed attempts for a given action, such as sign-in.
public struct TooManyFailedAttemptsException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// The message returned when Amazon Cognito returns a TooManyFailedAttempts exception.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "TooManyFailedAttemptsException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// This exception is thrown when Amazon Cognito encounters an unexpected exception with Lambda.
public struct UnexpectedLambdaException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// The message returned when Amazon Cognito returns an unexpected Lambda exception.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "UnexpectedLambdaException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// This exception is thrown when the Amazon Cognito service encounters a user validation exception with the Lambda service.
public struct UserLambdaValidationException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// The message returned when the Amazon Cognito service returns a user validation exception with the Lambda service.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "UserLambdaValidationException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// Confirm a user's registration as a user pool administrator.
public struct AdminConfirmSignUpInput: Swift.Sendable {
    /// A map of custom key-value pairs that you can provide as input for any custom workflows that this action triggers. If your user pool configuration includes triggers, the AdminConfirmSignUp API action invokes the Lambda function that is specified for the post confirmation trigger. When Amazon Cognito invokes this function, it passes a JSON payload, which the function receives as input. In this payload, the clientMetadata attribute provides the data that you assigned to the ClientMetadata parameter in your AdminConfirmSignUp request. In your function code in Lambda, you can process the ClientMetadata value to enhance your workflow for your specific needs. For more information, see [ Customizing user pool Workflows with Lambda Triggers](https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools-working-with-aws-lambda-triggers.html) in the Amazon Cognito Developer Guide. When you use the ClientMetadata parameter, remember that Amazon Cognito won't do the following:
    ///
    /// * Store the ClientMetadata value. This data is available only to Lambda triggers that are assigned to a user pool to support custom workflows. If your user pool configuration doesn't include triggers, the ClientMetadata parameter serves no purpose.
    ///
    /// * Validate the ClientMetadata value.
    ///
    /// * Encrypt the ClientMetadata value. Don't use Amazon Cognito to provide sensitive information.
    public var clientMetadata: [Swift.String: Swift.String]?
    /// The user pool ID for which you want to confirm user registration.
    /// This member is required.
    public var userPoolId: Swift.String?
    /// The username of the user that you want to query or modify. The value of this parameter is typically your user's username, but it can be any of their alias attributes. If username isn't an alias attribute in your user pool, this value must be the sub of a local user or the username of a user from a third-party IdP.
    /// This member is required.
    public var username: Swift.String?

    public init(
        clientMetadata: [Swift.String: Swift.String]? = nil,
        userPoolId: Swift.String? = nil,
        username: Swift.String? = nil
    )
    {
        self.clientMetadata = clientMetadata
        self.userPoolId = userPoolId
        self.username = username
    }
}

extension AdminConfirmSignUpInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AdminConfirmSignUpInput(clientMetadata: \(Swift.String(describing: clientMetadata)), userPoolId: \(Swift.String(describing: userPoolId)), username: \"CONTENT_REDACTED\")"}
}

/// Represents the response from the server for the request to confirm registration.
public struct AdminConfirmSignUpOutput: Swift.Sendable {

    public init() { }
}

/// This exception is thrown when a verification code fails to deliver successfully.
public struct CodeDeliveryFailureException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// The message sent when a verification code fails to deliver successfully.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "CodeDeliveryFailureException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// This exception is thrown when Amazon Cognito encounters an invalid password.
public struct InvalidPasswordException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// The message returned when Amazon Cognito throws an invalid user password exception.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidPasswordException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// This exception is returned when the role provided for SMS configuration doesn't have permission to publish using Amazon SNS.
public struct InvalidSmsRoleAccessPolicyException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// The message returned when the invalid SMS role access policy exception is thrown.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidSmsRoleAccessPolicyException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// This exception is thrown when the trust relationship is not valid for the role provided for SMS configuration. This can happen if you don't trust cognito-idp.amazonaws.com or the external ID provided in the role does not match what is provided in the SMS configuration for the user pool.
public struct InvalidSmsRoleTrustRelationshipException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// The message returned when the role trust relationship for the SMS message is not valid.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidSmsRoleTrustRelationshipException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// This exception is thrown when a precondition is not met.
public struct PreconditionNotMetException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// The message returned when a precondition is not met.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "PreconditionNotMetException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The request failed because the user is in an unsupported state.
public struct UnsupportedUserStateException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// The message returned when the user is in an unsupported state.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "UnsupportedUserStateException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// This exception is thrown when Amazon Cognito encounters a user name that already exists in the user pool.
public struct UsernameExistsException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// The message returned when Amazon Cognito throws a user name exists exception.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "UsernameExistsException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension CognitoIdentityProviderClientTypes {

    public enum DeliveryMediumType: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case email
        case sms
        case sdkUnknown(Swift.String)

        public static var allCases: [DeliveryMediumType] {
            return [
                .email,
                .sms
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .email: return "EMAIL"
            case .sms: return "SMS"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension CognitoIdentityProviderClientTypes {

    public enum MessageActionType: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case resend
        case suppress
        case sdkUnknown(Swift.String)

        public static var allCases: [MessageActionType] {
            return [
                .resend,
                .suppress
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .resend: return "RESEND"
            case .suppress: return "SUPPRESS"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension CognitoIdentityProviderClientTypes {

    /// Specifies whether the attribute is standard or custom.
    public struct AttributeType: Swift.Sendable {
        /// The name of the attribute.
        /// This member is required.
        public var name: Swift.String?
        /// The value of the attribute.
        public var value: Swift.String?

        public init(
            name: Swift.String? = nil,
            value: Swift.String? = nil
        )
        {
            self.name = name
            self.value = value
        }
    }
}

extension CognitoIdentityProviderClientTypes.AttributeType: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AttributeType(name: \(Swift.String(describing: name)), value: \"CONTENT_REDACTED\")"}
}

/// Represents the request to create a user in the specified user pool.
public struct AdminCreateUserInput: Swift.Sendable {
    /// A map of custom key-value pairs that you can provide as input for any custom workflows that this action triggers. You create custom workflows by assigning Lambda functions to user pool triggers. When you use the AdminCreateUser API action, Amazon Cognito invokes the function that is assigned to the pre sign-up trigger. When Amazon Cognito invokes this function, it passes a JSON payload, which the function receives as input. This payload contains a clientMetadata attribute, which provides the data that you assigned to the ClientMetadata parameter in your AdminCreateUser request. In your function code in Lambda, you can process the clientMetadata value to enhance your workflow for your specific needs. For more information, see [ Customizing user pool Workflows with Lambda Triggers](https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools-working-with-aws-lambda-triggers.html) in the Amazon Cognito Developer Guide. When you use the ClientMetadata parameter, remember that Amazon Cognito won't do the following:
    ///
    /// * Store the ClientMetadata value. This data is available only to Lambda triggers that are assigned to a user pool to support custom workflows. If your user pool configuration doesn't include triggers, the ClientMetadata parameter serves no purpose.
    ///
    /// * Validate the ClientMetadata value.
    ///
    /// * Encrypt the ClientMetadata value. Don't use Amazon Cognito to provide sensitive information.
    public var clientMetadata: [Swift.String: Swift.String]?
    /// Specify "EMAIL" if email will be used to send the welcome message. Specify "SMS" if the phone number will be used. The default value is "SMS". You can specify more than one value.
    public var desiredDeliveryMediums: [CognitoIdentityProviderClientTypes.DeliveryMediumType]?
    /// This parameter is used only if the phone_number_verified or email_verified attribute is set to True. Otherwise, it is ignored. If this parameter is set to True and the phone number or email address specified in the UserAttributes parameter already exists as an alias with a different user, the API call will migrate the alias from the previous user to the newly created user. The previous user will no longer be able to log in using that alias. If this parameter is set to False, the API throws an AliasExistsException error if the alias already exists. The default value is False.
    public var forceAliasCreation: Swift.Bool?
    /// Set to RESEND to resend the invitation message to a user that already exists and reset the expiration limit on the user's account. Set to SUPPRESS to suppress sending the message. You can specify only one value.
    public var messageAction: CognitoIdentityProviderClientTypes.MessageActionType?
    /// The user's temporary password. This password must conform to the password policy that you specified when you created the user pool. The temporary password is valid only once. To complete the Admin Create User flow, the user must enter the temporary password in the sign-in page, along with a new password to be used in all future sign-ins. This parameter isn't required. If you don't specify a value, Amazon Cognito generates one for you. The temporary password can only be used until the user account expiration limit that you set for your user pool. To reset the account after that time limit, you must call AdminCreateUser again and specify RESEND for the MessageAction parameter.
    public var temporaryPassword: Swift.String?
    /// An array of name-value pairs that contain user attributes and attribute values to be set for the user to be created. You can create a user without specifying any attributes other than Username. However, any attributes that you specify as required (when creating a user pool or in the Attributes tab of the console) either you should supply (in your call to AdminCreateUser) or the user should supply (when they sign up in response to your welcome message). For custom attributes, you must prepend the custom: prefix to the attribute name. To send a message inviting the user to sign up, you must specify the user's email address or phone number. You can do this in your call to AdminCreateUser or in the Users tab of the Amazon Cognito console for managing your user pools. In your call to AdminCreateUser, you can set the email_verified attribute to True, and you can set the phone_number_verified attribute to True. You can also do this by calling [AdminUpdateUserAttributes](https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_AdminUpdateUserAttributes.html).
    ///
    /// * email: The email address of the user to whom the message that contains the code and username will be sent. Required if the email_verified attribute is set to True, or if "EMAIL" is specified in the DesiredDeliveryMediums parameter.
    ///
    /// * phone_number: The phone number of the user to whom the message that contains the code and username will be sent. Required if the phone_number_verified attribute is set to True, or if "SMS" is specified in the DesiredDeliveryMediums parameter.
    public var userAttributes: [CognitoIdentityProviderClientTypes.AttributeType]?
    /// The user pool ID for the user pool where the user will be created.
    /// This member is required.
    public var userPoolId: Swift.String?
    /// The value that you want to set as the username sign-in attribute. The following conditions apply to the username parameter.
    ///
    /// * The username can't be a duplicate of another username in the same user pool.
    ///
    /// * You can't change the value of a username after you create it.
    ///
    /// * You can only provide a value if usernames are a valid sign-in attribute for your user pool. If your user pool only supports phone numbers or email addresses as sign-in attributes, Amazon Cognito automatically generates a username value. For more information, see [Customizing sign-in attributes](https://docs.aws.amazon.com/cognito/latest/developerguide/user-pool-settings-attributes.html#user-pool-settings-aliases).
    /// This member is required.
    public var username: Swift.String?
    /// Temporary user attributes that contribute to the outcomes of your pre sign-up Lambda trigger. This set of key-value pairs are for custom validation of information that you collect from your users but don't need to retain. Your Lambda function can analyze this additional data and act on it. Your function might perform external API operations like logging user attributes and validation data to Amazon CloudWatch Logs. Validation data might also affect the response that your function returns to Amazon Cognito, like automatically confirming the user if they sign up from within your network. For more information about the pre sign-up Lambda trigger, see [Pre sign-up Lambda trigger](https://docs.aws.amazon.com/cognito/latest/developerguide/user-pool-lambda-pre-sign-up.html).
    public var validationData: [CognitoIdentityProviderClientTypes.AttributeType]?

    public init(
        clientMetadata: [Swift.String: Swift.String]? = nil,
        desiredDeliveryMediums: [CognitoIdentityProviderClientTypes.DeliveryMediumType]? = nil,
        forceAliasCreation: Swift.Bool? = false,
        messageAction: CognitoIdentityProviderClientTypes.MessageActionType? = nil,
        temporaryPassword: Swift.String? = nil,
        userAttributes: [CognitoIdentityProviderClientTypes.AttributeType]? = nil,
        userPoolId: Swift.String? = nil,
        username: Swift.String? = nil,
        validationData: [CognitoIdentityProviderClientTypes.AttributeType]? = nil
    )
    {
        self.clientMetadata = clientMetadata
        self.desiredDeliveryMediums = desiredDeliveryMediums
        self.forceAliasCreation = forceAliasCreation
        self.messageAction = messageAction
        self.temporaryPassword = temporaryPassword
        self.userAttributes = userAttributes
        self.userPoolId = userPoolId
        self.username = username
        self.validationData = validationData
    }
}

extension AdminCreateUserInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AdminCreateUserInput(clientMetadata: \(Swift.String(describing: clientMetadata)), desiredDeliveryMediums: \(Swift.String(describing: desiredDeliveryMediums)), forceAliasCreation: \(Swift.String(describing: forceAliasCreation)), messageAction: \(Swift.String(describing: messageAction)), userAttributes: \(Swift.String(describing: userAttributes)), userPoolId: \(Swift.String(describing: userPoolId)), validationData: \(Swift.String(describing: validationData)), temporaryPassword: \"CONTENT_REDACTED\", username: \"CONTENT_REDACTED\")"}
}

extension CognitoIdentityProviderClientTypes {

    /// This data type is no longer supported. Applies only to SMS multi-factor authentication (MFA) configurations. Does not apply to time-based one-time password (TOTP) software token MFA configurations.
    public struct MFAOptionType: Swift.Sendable {
        /// The attribute name of the MFA option type. The only valid value is phone_number.
        public var attributeName: Swift.String?
        /// The delivery medium to send the MFA code. You can use this parameter to set only the SMS delivery medium value.
        public var deliveryMedium: CognitoIdentityProviderClientTypes.DeliveryMediumType?

        public init(
            attributeName: Swift.String? = nil,
            deliveryMedium: CognitoIdentityProviderClientTypes.DeliveryMediumType? = nil
        )
        {
            self.attributeName = attributeName
            self.deliveryMedium = deliveryMedium
        }
    }
}

extension CognitoIdentityProviderClientTypes {

    public enum UserStatusType: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case archived
        case compromised
        case confirmed
        case externalProvider
        case forceChangePassword
        case resetRequired
        case unconfirmed
        case unknown
        case sdkUnknown(Swift.String)

        public static var allCases: [UserStatusType] {
            return [
                .archived,
                .compromised,
                .confirmed,
                .externalProvider,
                .forceChangePassword,
                .resetRequired,
                .unconfirmed,
                .unknown
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .archived: return "ARCHIVED"
            case .compromised: return "COMPROMISED"
            case .confirmed: return "CONFIRMED"
            case .externalProvider: return "EXTERNAL_PROVIDER"
            case .forceChangePassword: return "FORCE_CHANGE_PASSWORD"
            case .resetRequired: return "RESET_REQUIRED"
            case .unconfirmed: return "UNCONFIRMED"
            case .unknown: return "UNKNOWN"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension CognitoIdentityProviderClientTypes {

    /// A user profile in a Amazon Cognito user pool.
    public struct UserType: Swift.Sendable {
        /// A container with information about the user type attributes.
        public var attributes: [CognitoIdentityProviderClientTypes.AttributeType]?
        /// Specifies whether the user is enabled.
        public var enabled: Swift.Bool
        /// The MFA options for the user.
        public var mfaOptions: [CognitoIdentityProviderClientTypes.MFAOptionType]?
        /// The creation date of the user.
        public var userCreateDate: Foundation.Date?
        /// The date and time when the item was modified. Amazon Cognito returns this timestamp in UNIX epoch time format. Your SDK might render the output in a human-readable format like ISO 8601 or a Java Date object.
        public var userLastModifiedDate: Foundation.Date?
        /// The user status. This can be one of the following:
        ///
        /// * UNCONFIRMED - User has been created but not confirmed.
        ///
        /// * CONFIRMED - User has been confirmed.
        ///
        /// * EXTERNAL_PROVIDER - User signed in with a third-party IdP.
        ///
        /// * UNKNOWN - User status isn't known.
        ///
        /// * RESET_REQUIRED - User is confirmed, but the user must request a code and reset their password before they can sign in.
        ///
        /// * FORCE_CHANGE_PASSWORD - The user is confirmed and the user can sign in using a temporary password, but on first sign-in, the user must change their password to a new value before doing anything else.
        public var userStatus: CognitoIdentityProviderClientTypes.UserStatusType?
        /// The user name of the user you want to describe.
        public var username: Swift.String?

        public init(
            attributes: [CognitoIdentityProviderClientTypes.AttributeType]? = nil,
            enabled: Swift.Bool = false,
            mfaOptions: [CognitoIdentityProviderClientTypes.MFAOptionType]? = nil,
            userCreateDate: Foundation.Date? = nil,
            userLastModifiedDate: Foundation.Date? = nil,
            userStatus: CognitoIdentityProviderClientTypes.UserStatusType? = nil,
            username: Swift.String? = nil
        )
        {
            self.attributes = attributes
            self.enabled = enabled
            self.mfaOptions = mfaOptions
            self.userCreateDate = userCreateDate
            self.userLastModifiedDate = userLastModifiedDate
            self.userStatus = userStatus
            self.username = username
        }
    }
}

extension CognitoIdentityProviderClientTypes.UserType: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UserType(attributes: \(Swift.String(describing: attributes)), enabled: \(Swift.String(describing: enabled)), mfaOptions: \(Swift.String(describing: mfaOptions)), userCreateDate: \(Swift.String(describing: userCreateDate)), userLastModifiedDate: \(Swift.String(describing: userLastModifiedDate)), userStatus: \(Swift.String(describing: userStatus)), username: \"CONTENT_REDACTED\")"}
}

/// Represents the response from the server to the request to create the user.
public struct AdminCreateUserOutput: Swift.Sendable {
    /// The newly created user.
    public var user: CognitoIdentityProviderClientTypes.UserType?

    public init(
        user: CognitoIdentityProviderClientTypes.UserType? = nil
    )
    {
        self.user = user
    }
}

extension CognitoIdentityProviderClientTypes {

    /// The message template structure.
    public struct MessageTemplateType: Swift.Sendable {
        /// The message template for email messages. EmailMessage is allowed only if [EmailSendingAccount](https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_EmailConfigurationType.html#CognitoUserPools-Type-EmailConfigurationType-EmailSendingAccount) is DEVELOPER.
        public var emailMessage: Swift.String?
        /// The subject line for email messages. EmailSubject is allowed only if [EmailSendingAccount](https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_EmailConfigurationType.html#CognitoUserPools-Type-EmailConfigurationType-EmailSendingAccount) is DEVELOPER.
        public var emailSubject: Swift.String?
        /// The message template for SMS messages.
        public var smsMessage: Swift.String?

        public init(
            emailMessage: Swift.String? = nil,
            emailSubject: Swift.String? = nil,
            smsMessage: Swift.String? = nil
        )
        {
            self.emailMessage = emailMessage
            self.emailSubject = emailSubject
            self.smsMessage = smsMessage
        }
    }
}

extension CognitoIdentityProviderClientTypes {

    /// The configuration for creating a new user profile.
    public struct AdminCreateUserConfigType: Swift.Sendable {
        /// Set to True if only the administrator is allowed to create user profiles. Set to False if users can sign themselves up via an app.
        public var allowAdminCreateUserOnly: Swift.Bool
        /// The message template to be used for the welcome message to new users. See also [Customizing User Invitation Messages](https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-pool-settings-message-customizations.html#cognito-user-pool-settings-user-invitation-message-customization).
        public var inviteMessageTemplate: CognitoIdentityProviderClientTypes.MessageTemplateType?
        /// The user account expiration limit, in days, after which a new account that hasn't signed in is no longer usable. To reset the account after that time limit, you must call AdminCreateUser again, specifying "RESEND" for the MessageAction parameter. The default value for this parameter is 7. If you set a value for TemporaryPasswordValidityDays in PasswordPolicy, that value will be used, and UnusedAccountValidityDays will be no longer be an available parameter for that user pool.
        public var unusedAccountValidityDays: Swift.Int

        public init(
            allowAdminCreateUserOnly: Swift.Bool = false,
            inviteMessageTemplate: CognitoIdentityProviderClientTypes.MessageTemplateType? = nil,
            unusedAccountValidityDays: Swift.Int = 0
        )
        {
            self.allowAdminCreateUserOnly = allowAdminCreateUserOnly
            self.inviteMessageTemplate = inviteMessageTemplate
            self.unusedAccountValidityDays = unusedAccountValidityDays
        }
    }
}

/// Represents the request to delete a user as an administrator.
public struct AdminDeleteUserInput: Swift.Sendable {
    /// The user pool ID for the user pool where you want to delete the user.
    /// This member is required.
    public var userPoolId: Swift.String?
    /// The username of the user that you want to query or modify. The value of this parameter is typically your user's username, but it can be any of their alias attributes. If username isn't an alias attribute in your user pool, this value must be the sub of a local user or the username of a user from a third-party IdP.
    /// This member is required.
    public var username: Swift.String?

    public init(
        userPoolId: Swift.String? = nil,
        username: Swift.String? = nil
    )
    {
        self.userPoolId = userPoolId
        self.username = username
    }
}

extension AdminDeleteUserInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AdminDeleteUserInput(userPoolId: \(Swift.String(describing: userPoolId)), username: \"CONTENT_REDACTED\")"}
}

/// Represents the request to delete user attributes as an administrator.
public struct AdminDeleteUserAttributesInput: Swift.Sendable {
    /// An array of strings representing the user attribute names you want to delete. For custom attributes, you must prepend the custom: prefix to the attribute name.
    /// This member is required.
    public var userAttributeNames: [Swift.String]?
    /// The user pool ID for the user pool where you want to delete user attributes.
    /// This member is required.
    public var userPoolId: Swift.String?
    /// The username of the user that you want to query or modify. The value of this parameter is typically your user's username, but it can be any of their alias attributes. If username isn't an alias attribute in your user pool, this value must be the sub of a local user or the username of a user from a third-party IdP.
    /// This member is required.
    public var username: Swift.String?

    public init(
        userAttributeNames: [Swift.String]? = nil,
        userPoolId: Swift.String? = nil,
        username: Swift.String? = nil
    )
    {
        self.userAttributeNames = userAttributeNames
        self.userPoolId = userPoolId
        self.username = username
    }
}

extension AdminDeleteUserAttributesInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AdminDeleteUserAttributesInput(userAttributeNames: \(Swift.String(describing: userAttributeNames)), userPoolId: \(Swift.String(describing: userPoolId)), username: \"CONTENT_REDACTED\")"}
}

/// Represents the response received from the server for a request to delete user attributes.
public struct AdminDeleteUserAttributesOutput: Swift.Sendable {

    public init() { }
}

/// This exception is thrown when a user tries to confirm the account with an email address or phone number that has already been supplied as an alias for a different user profile. This exception indicates that an account with this email address or phone already exists in a user pool that you've configured to use email address or phone number as a sign-in alias.
public struct AliasExistsException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// The message that Amazon Cognito sends to the user when the value of an alias attribute is already linked to another user profile.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "AliasExistsException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension CognitoIdentityProviderClientTypes {

    /// A container for information about an IdP for a user pool.
    public struct ProviderUserIdentifierType: Swift.Sendable {
        /// The name of the provider attribute to link to, such as NameID.
        public var providerAttributeName: Swift.String?
        /// The value of the provider attribute to link to, such as xxxxx_account.
        public var providerAttributeValue: Swift.String?
        /// The name of the provider, such as Facebook, Google, or Login with Amazon.
        public var providerName: Swift.String?

        public init(
            providerAttributeName: Swift.String? = nil,
            providerAttributeValue: Swift.String? = nil,
            providerName: Swift.String? = nil
        )
        {
            self.providerAttributeName = providerAttributeName
            self.providerAttributeValue = providerAttributeValue
            self.providerName = providerName
        }
    }
}

public struct AdminDisableProviderForUserInput: Swift.Sendable {
    /// The user to be disabled.
    /// This member is required.
    public var user: CognitoIdentityProviderClientTypes.ProviderUserIdentifierType?
    /// The user pool ID for the user pool.
    /// This member is required.
    public var userPoolId: Swift.String?

    public init(
        user: CognitoIdentityProviderClientTypes.ProviderUserIdentifierType? = nil,
        userPoolId: Swift.String? = nil
    )
    {
        self.user = user
        self.userPoolId = userPoolId
    }
}

public struct AdminDisableProviderForUserOutput: Swift.Sendable {

    public init() { }
}

/// Represents the request to disable the user as an administrator.
public struct AdminDisableUserInput: Swift.Sendable {
    /// The user pool ID for the user pool where you want to disable the user.
    /// This member is required.
    public var userPoolId: Swift.String?
    /// The username of the user that you want to query or modify. The value of this parameter is typically your user's username, but it can be any of their alias attributes. If username isn't an alias attribute in your user pool, this value must be the sub of a local user or the username of a user from a third-party IdP.
    /// This member is required.
    public var username: Swift.String?

    public init(
        userPoolId: Swift.String? = nil,
        username: Swift.String? = nil
    )
    {
        self.userPoolId = userPoolId
        self.username = username
    }
}

extension AdminDisableUserInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AdminDisableUserInput(userPoolId: \(Swift.String(describing: userPoolId)), username: \"CONTENT_REDACTED\")"}
}

/// Represents the response received from the server to disable the user as an administrator.
public struct AdminDisableUserOutput: Swift.Sendable {

    public init() { }
}

/// Represents the request that enables the user as an administrator.
public struct AdminEnableUserInput: Swift.Sendable {
    /// The user pool ID for the user pool where you want to enable the user.
    /// This member is required.
    public var userPoolId: Swift.String?
    /// The username of the user that you want to query or modify. The value of this parameter is typically your user's username, but it can be any of their alias attributes. If username isn't an alias attribute in your user pool, this value must be the sub of a local user or the username of a user from a third-party IdP.
    /// This member is required.
    public var username: Swift.String?

    public init(
        userPoolId: Swift.String? = nil,
        username: Swift.String? = nil
    )
    {
        self.userPoolId = userPoolId
        self.username = username
    }
}

extension AdminEnableUserInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AdminEnableUserInput(userPoolId: \(Swift.String(describing: userPoolId)), username: \"CONTENT_REDACTED\")"}
}

/// Represents the response from the server for the request to enable a user as an administrator.
public struct AdminEnableUserOutput: Swift.Sendable {

    public init() { }
}

/// This exception is thrown when the user pool configuration is not valid.
public struct InvalidUserPoolConfigurationException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// The message returned when the user pool configuration is not valid.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidUserPoolConfigurationException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// Sends the forgot device request, as an administrator.
public struct AdminForgetDeviceInput: Swift.Sendable {
    /// The device key.
    /// This member is required.
    public var deviceKey: Swift.String?
    /// The user pool ID.
    /// This member is required.
    public var userPoolId: Swift.String?
    /// The username of the user that you want to query or modify. The value of this parameter is typically your user's username, but it can be any of their alias attributes. If username isn't an alias attribute in your user pool, this value must be the sub of a local user or the username of a user from a third-party IdP.
    /// This member is required.
    public var username: Swift.String?

    public init(
        deviceKey: Swift.String? = nil,
        userPoolId: Swift.String? = nil,
        username: Swift.String? = nil
    )
    {
        self.deviceKey = deviceKey
        self.userPoolId = userPoolId
        self.username = username
    }
}

extension AdminForgetDeviceInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AdminForgetDeviceInput(deviceKey: \(Swift.String(describing: deviceKey)), userPoolId: \(Swift.String(describing: userPoolId)), username: \"CONTENT_REDACTED\")"}
}

/// Represents the request to get the device, as an administrator.
public struct AdminGetDeviceInput: Swift.Sendable {
    /// The device key.
    /// This member is required.
    public var deviceKey: Swift.String?
    /// The user pool ID.
    /// This member is required.
    public var userPoolId: Swift.String?
    /// The username of the user that you want to query or modify. The value of this parameter is typically your user's username, but it can be any of their alias attributes. If username isn't an alias attribute in your user pool, this value must be the sub of a local user or the username of a user from a third-party IdP.
    /// This member is required.
    public var username: Swift.String?

    public init(
        deviceKey: Swift.String? = nil,
        userPoolId: Swift.String? = nil,
        username: Swift.String? = nil
    )
    {
        self.deviceKey = deviceKey
        self.userPoolId = userPoolId
        self.username = username
    }
}

extension AdminGetDeviceInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AdminGetDeviceInput(deviceKey: \(Swift.String(describing: deviceKey)), userPoolId: \(Swift.String(describing: userPoolId)), username: \"CONTENT_REDACTED\")"}
}

extension CognitoIdentityProviderClientTypes {

    /// The device type.
    public struct DeviceType: Swift.Sendable {
        /// The device attributes.
        public var deviceAttributes: [CognitoIdentityProviderClientTypes.AttributeType]?
        /// The creation date of the device.
        public var deviceCreateDate: Foundation.Date?
        /// The device key.
        public var deviceKey: Swift.String?
        /// The date when the device was last authenticated.
        public var deviceLastAuthenticatedDate: Foundation.Date?
        /// The date and time when the item was modified. Amazon Cognito returns this timestamp in UNIX epoch time format. Your SDK might render the output in a human-readable format like ISO 8601 or a Java Date object.
        public var deviceLastModifiedDate: Foundation.Date?

        public init(
            deviceAttributes: [CognitoIdentityProviderClientTypes.AttributeType]? = nil,
            deviceCreateDate: Foundation.Date? = nil,
            deviceKey: Swift.String? = nil,
            deviceLastAuthenticatedDate: Foundation.Date? = nil,
            deviceLastModifiedDate: Foundation.Date? = nil
        )
        {
            self.deviceAttributes = deviceAttributes
            self.deviceCreateDate = deviceCreateDate
            self.deviceKey = deviceKey
            self.deviceLastAuthenticatedDate = deviceLastAuthenticatedDate
            self.deviceLastModifiedDate = deviceLastModifiedDate
        }
    }
}

/// Gets the device response, as an administrator.
public struct AdminGetDeviceOutput: Swift.Sendable {
    /// The device.
    /// This member is required.
    public var device: CognitoIdentityProviderClientTypes.DeviceType?

    public init(
        device: CognitoIdentityProviderClientTypes.DeviceType? = nil
    )
    {
        self.device = device
    }
}

/// Represents the request to get the specified user as an administrator.
public struct AdminGetUserInput: Swift.Sendable {
    /// The user pool ID for the user pool where you want to get information about the user.
    /// This member is required.
    public var userPoolId: Swift.String?
    /// The username of the user that you want to query or modify. The value of this parameter is typically your user's username, but it can be any of their alias attributes. If username isn't an alias attribute in your user pool, this value must be the sub of a local user or the username of a user from a third-party IdP.
    /// This member is required.
    public var username: Swift.String?

    public init(
        userPoolId: Swift.String? = nil,
        username: Swift.String? = nil
    )
    {
        self.userPoolId = userPoolId
        self.username = username
    }
}

extension AdminGetUserInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AdminGetUserInput(userPoolId: \(Swift.String(describing: userPoolId)), username: \"CONTENT_REDACTED\")"}
}

/// Represents the response from the server from the request to get the specified user as an administrator.
public struct AdminGetUserOutput: Swift.Sendable {
    /// Indicates that the status is enabled.
    public var enabled: Swift.Bool
    /// This response parameter is no longer supported. It provides information only about SMS MFA configurations. It doesn't provide information about time-based one-time password (TOTP) software token MFA configurations. To look up information about either type of MFA configuration, use UserMFASettingList instead.
    public var mfaOptions: [CognitoIdentityProviderClientTypes.MFAOptionType]?
    /// The user's preferred MFA setting.
    public var preferredMfaSetting: Swift.String?
    /// An array of name-value pairs representing user attributes.
    public var userAttributes: [CognitoIdentityProviderClientTypes.AttributeType]?
    /// The date the user was created.
    public var userCreateDate: Foundation.Date?
    /// The date and time when the item was modified. Amazon Cognito returns this timestamp in UNIX epoch time format. Your SDK might render the output in a human-readable format like ISO 8601 or a Java Date object.
    public var userLastModifiedDate: Foundation.Date?
    /// The MFA options that are activated for the user. The possible values in this list are SMS_MFA, EMAIL_OTP, and SOFTWARE_TOKEN_MFA.
    public var userMFASettingList: [Swift.String]?
    /// The user status. Can be one of the following:
    ///
    /// * UNCONFIRMED - User has been created but not confirmed.
    ///
    /// * CONFIRMED - User has been confirmed.
    ///
    /// * UNKNOWN - User status isn't known.
    ///
    /// * RESET_REQUIRED - User is confirmed, but the user must request a code and reset their password before they can sign in.
    ///
    /// * FORCE_CHANGE_PASSWORD - The user is confirmed and the user can sign in using a temporary password, but on first sign-in, the user must change their password to a new value before doing anything else.
    public var userStatus: CognitoIdentityProviderClientTypes.UserStatusType?
    /// The username of the user that you requested.
    /// This member is required.
    public var username: Swift.String?

    public init(
        enabled: Swift.Bool = false,
        mfaOptions: [CognitoIdentityProviderClientTypes.MFAOptionType]? = nil,
        preferredMfaSetting: Swift.String? = nil,
        userAttributes: [CognitoIdentityProviderClientTypes.AttributeType]? = nil,
        userCreateDate: Foundation.Date? = nil,
        userLastModifiedDate: Foundation.Date? = nil,
        userMFASettingList: [Swift.String]? = nil,
        userStatus: CognitoIdentityProviderClientTypes.UserStatusType? = nil,
        username: Swift.String? = nil
    )
    {
        self.enabled = enabled
        self.mfaOptions = mfaOptions
        self.preferredMfaSetting = preferredMfaSetting
        self.userAttributes = userAttributes
        self.userCreateDate = userCreateDate
        self.userLastModifiedDate = userLastModifiedDate
        self.userMFASettingList = userMFASettingList
        self.userStatus = userStatus
        self.username = username
    }
}

extension AdminGetUserOutput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AdminGetUserOutput(enabled: \(Swift.String(describing: enabled)), mfaOptions: \(Swift.String(describing: mfaOptions)), preferredMfaSetting: \(Swift.String(describing: preferredMfaSetting)), userAttributes: \(Swift.String(describing: userAttributes)), userCreateDate: \(Swift.String(describing: userCreateDate)), userLastModifiedDate: \(Swift.String(describing: userLastModifiedDate)), userMFASettingList: \(Swift.String(describing: userMFASettingList)), userStatus: \(Swift.String(describing: userStatus)), username: \"CONTENT_REDACTED\")"}
}

/// This exception is thrown when Amazon Cognito isn't allowed to use your email identity. HTTP status code: 400.
public struct InvalidEmailRoleAccessPolicyException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// The message returned when you have an unverified email address or the identity policy isn't set on an email address that Amazon Cognito can access.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidEmailRoleAccessPolicyException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// This exception is thrown when Amazon Cognito can't find a multi-factor authentication (MFA) method.
public struct MFAMethodNotFoundException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// The message returned when Amazon Cognito throws an MFA method not found exception.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "MFAMethodNotFoundException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// This exception is thrown when a password reset is required.
public struct PasswordResetRequiredException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// The message returned when a password reset is required.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "PasswordResetRequiredException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// This exception is thrown when a user isn't confirmed successfully.
public struct UserNotConfirmedException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// The message returned when a user isn't confirmed successfully.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "UserNotConfirmedException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension CognitoIdentityProviderClientTypes {

    /// An Amazon Pinpoint analytics endpoint. An endpoint uniquely identifies a mobile device, email address, or phone number that can receive messages from Amazon Pinpoint analytics. For more information about Amazon Web Services Regions that can contain Amazon Pinpoint resources for use with Amazon Cognito user pools, see [Using Amazon Pinpoint analytics with Amazon Cognito user pools](https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-pools-pinpoint-integration.html).
    public struct AnalyticsMetadataType: Swift.Sendable {
        /// The endpoint ID.
        public var analyticsEndpointId: Swift.String?

        public init(
            analyticsEndpointId: Swift.String? = nil
        )
        {
            self.analyticsEndpointId = analyticsEndpointId
        }
    }
}

extension CognitoIdentityProviderClientTypes {

    public enum AuthFlowType: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case adminNoSrpAuth
        case adminUserPasswordAuth
        case customAuth
        case refreshToken
        case refreshTokenAuth
        case userPasswordAuth
        case userSrpAuth
        case sdkUnknown(Swift.String)

        public static var allCases: [AuthFlowType] {
            return [
                .adminNoSrpAuth,
                .adminUserPasswordAuth,
                .customAuth,
                .refreshToken,
                .refreshTokenAuth,
                .userPasswordAuth,
                .userSrpAuth
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .adminNoSrpAuth: return "ADMIN_NO_SRP_AUTH"
            case .adminUserPasswordAuth: return "ADMIN_USER_PASSWORD_AUTH"
            case .customAuth: return "CUSTOM_AUTH"
            case .refreshToken: return "REFRESH_TOKEN"
            case .refreshTokenAuth: return "REFRESH_TOKEN_AUTH"
            case .userPasswordAuth: return "USER_PASSWORD_AUTH"
            case .userSrpAuth: return "USER_SRP_AUTH"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension CognitoIdentityProviderClientTypes {

    /// The HTTP header.
    public struct HttpHeader: Swift.Sendable {
        /// The header name.
        public var headerName: Swift.String?
        /// The header value.
        public var headerValue: Swift.String?

        public init(
            headerName: Swift.String? = nil,
            headerValue: Swift.String? = nil
        )
        {
            self.headerName = headerName
            self.headerValue = headerValue
        }
    }
}

extension CognitoIdentityProviderClientTypes {

    /// Contextual user data type used for evaluating the risk of an unexpected event by Amazon Cognito advanced security.
    public struct ContextDataType: Swift.Sendable {
        /// Encoded device-fingerprint details that your app collected with the Amazon Cognito context data collection library. For more information, see [Adding user device and session data to API requests](https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-pool-settings-adaptive-authentication.html#user-pool-settings-adaptive-authentication-device-fingerprint).
        public var encodedData: Swift.String?
        /// HttpHeaders received on your server in same order.
        /// This member is required.
        public var httpHeaders: [CognitoIdentityProviderClientTypes.HttpHeader]?
        /// The source IP address of your user's device.
        /// This member is required.
        public var ipAddress: Swift.String?
        /// Your server endpoint where this API is invoked.
        /// This member is required.
        public var serverName: Swift.String?
        /// Your server path where this API is invoked.
        /// This member is required.
        public var serverPath: Swift.String?

        public init(
            encodedData: Swift.String? = nil,
            httpHeaders: [CognitoIdentityProviderClientTypes.HttpHeader]? = nil,
            ipAddress: Swift.String? = nil,
            serverName: Swift.String? = nil,
            serverPath: Swift.String? = nil
        )
        {
            self.encodedData = encodedData
            self.httpHeaders = httpHeaders
            self.ipAddress = ipAddress
            self.serverName = serverName
            self.serverPath = serverPath
        }
    }
}

/// Initiates the authorization request, as an administrator.
public struct AdminInitiateAuthInput: Swift.Sendable {
    /// The analytics metadata for collecting Amazon Pinpoint metrics for AdminInitiateAuth calls.
    public var analyticsMetadata: CognitoIdentityProviderClientTypes.AnalyticsMetadataType?
    /// The authentication flow for this call to run. The API action will depend on this value. For example:
    ///
    /// * REFRESH_TOKEN_AUTH will take in a valid refresh token and return new tokens.
    ///
    /// * USER_SRP_AUTH will take in USERNAME and SRP_A and return the Secure Remote Password (SRP) protocol variables to be used for next challenge execution.
    ///
    /// * ADMIN_USER_PASSWORD_AUTH will take in USERNAME and PASSWORD and return the next challenge or tokens.
    ///
    ///
    /// Valid values include:
    ///
    /// * USER_SRP_AUTH: Authentication flow for the Secure Remote Password (SRP) protocol.
    ///
    /// * REFRESH_TOKEN_AUTH/REFRESH_TOKEN: Authentication flow for refreshing the access token and ID token by supplying a valid refresh token.
    ///
    /// * CUSTOM_AUTH: Custom authentication flow.
    ///
    /// * ADMIN_NO_SRP_AUTH: Non-SRP authentication flow; you can pass in the USERNAME and PASSWORD directly if the flow is enabled for calling the app client.
    ///
    /// * ADMIN_USER_PASSWORD_AUTH: Admin-based user password authentication. This replaces the ADMIN_NO_SRP_AUTH authentication flow. In this flow, Amazon Cognito receives the password in the request instead of using the SRP process to verify passwords.
    /// This member is required.
    public var authFlow: CognitoIdentityProviderClientTypes.AuthFlowType?
    /// The authentication parameters. These are inputs corresponding to the AuthFlow that you're invoking. The required values depend on the value of AuthFlow:
    ///
    /// * For USER_SRP_AUTH: USERNAME (required), SRP_A (required), SECRET_HASH (required if the app client is configured with a client secret), DEVICE_KEY.
    ///
    /// * For ADMIN_USER_PASSWORD_AUTH: USERNAME (required), PASSWORD (required), SECRET_HASH (required if the app client is configured with a client secret), DEVICE_KEY.
    ///
    /// * For REFRESH_TOKEN_AUTH/REFRESH_TOKEN: REFRESH_TOKEN (required), SECRET_HASH (required if the app client is configured with a client secret), DEVICE_KEY.
    ///
    /// * For CUSTOM_AUTH: USERNAME (required), SECRET_HASH (if app client is configured with client secret), DEVICE_KEY. To start the authentication flow with password verification, include ChallengeName: SRP_A and SRP_A: (The SRP_A Value).
    ///
    ///
    /// For more information about SECRET_HASH, see [Computing secret hash values](https://docs.aws.amazon.com/cognito/latest/developerguide/signing-up-users-in-your-app.html#cognito-user-pools-computing-secret-hash). For information about DEVICE_KEY, see [Working with user devices in your user pool](https://docs.aws.amazon.com/cognito/latest/developerguide/amazon-cognito-user-pools-device-tracking.html).
    public var authParameters: [Swift.String: Swift.String]?
    /// The app client ID.
    /// This member is required.
    public var clientId: Swift.String?
    /// A map of custom key-value pairs that you can provide as input for certain custom workflows that this action triggers. You create custom workflows by assigning Lambda functions to user pool triggers. When you use the AdminInitiateAuth API action, Amazon Cognito invokes the Lambda functions that are specified for various triggers. The ClientMetadata value is passed as input to the functions for only the following triggers:
    ///
    /// * Pre signup
    ///
    /// * Pre authentication
    ///
    /// * User migration
    ///
    ///
    /// When Amazon Cognito invokes the functions for these triggers, it passes a JSON payload, which the function receives as input. This payload contains a validationData attribute, which provides the data that you assigned to the ClientMetadata parameter in your AdminInitiateAuth request. In your function code in Lambda, you can process the validationData value to enhance your workflow for your specific needs. When you use the AdminInitiateAuth API action, Amazon Cognito also invokes the functions for the following triggers, but it doesn't provide the ClientMetadata value as input:
    ///
    /// * Post authentication
    ///
    /// * Custom message
    ///
    /// * Pre token generation
    ///
    /// * Create auth challenge
    ///
    /// * Define auth challenge
    ///
    ///
    /// For more information, see [ Customizing user pool Workflows with Lambda Triggers](https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools-working-with-aws-lambda-triggers.html) in the Amazon Cognito Developer Guide. When you use the ClientMetadata parameter, remember that Amazon Cognito won't do the following:
    ///
    /// * Store the ClientMetadata value. This data is available only to Lambda triggers that are assigned to a user pool to support custom workflows. If your user pool configuration doesn't include triggers, the ClientMetadata parameter serves no purpose.
    ///
    /// * Validate the ClientMetadata value.
    ///
    /// * Encrypt the ClientMetadata value. Don't use Amazon Cognito to provide sensitive information.
    public var clientMetadata: [Swift.String: Swift.String]?
    /// Contextual data about your user session, such as the device fingerprint, IP address, or location. Amazon Cognito advanced security evaluates the risk of an authentication event based on the context that your app generates and passes to Amazon Cognito when it makes API requests.
    public var contextData: CognitoIdentityProviderClientTypes.ContextDataType?
    /// The ID of the Amazon Cognito user pool.
    /// This member is required.
    public var userPoolId: Swift.String?

    public init(
        analyticsMetadata: CognitoIdentityProviderClientTypes.AnalyticsMetadataType? = nil,
        authFlow: CognitoIdentityProviderClientTypes.AuthFlowType? = nil,
        authParameters: [Swift.String: Swift.String]? = nil,
        clientId: Swift.String? = nil,
        clientMetadata: [Swift.String: Swift.String]? = nil,
        contextData: CognitoIdentityProviderClientTypes.ContextDataType? = nil,
        userPoolId: Swift.String? = nil
    )
    {
        self.analyticsMetadata = analyticsMetadata
        self.authFlow = authFlow
        self.authParameters = authParameters
        self.clientId = clientId
        self.clientMetadata = clientMetadata
        self.contextData = contextData
        self.userPoolId = userPoolId
    }
}

extension AdminInitiateAuthInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AdminInitiateAuthInput(analyticsMetadata: \(Swift.String(describing: analyticsMetadata)), authFlow: \(Swift.String(describing: authFlow)), clientMetadata: \(Swift.String(describing: clientMetadata)), contextData: \(Swift.String(describing: contextData)), userPoolId: \(Swift.String(describing: userPoolId)), authParameters: \"CONTENT_REDACTED\", clientId: \"CONTENT_REDACTED\")"}
}

extension CognitoIdentityProviderClientTypes {

    /// The new device metadata type.
    public struct NewDeviceMetadataType: Swift.Sendable {
        /// The device group key.
        public var deviceGroupKey: Swift.String?
        /// The device key.
        public var deviceKey: Swift.String?

        public init(
            deviceGroupKey: Swift.String? = nil,
            deviceKey: Swift.String? = nil
        )
        {
            self.deviceGroupKey = deviceGroupKey
            self.deviceKey = deviceKey
        }
    }
}

extension CognitoIdentityProviderClientTypes {

    /// The authentication result.
    public struct AuthenticationResultType: Swift.Sendable {
        /// A valid access token that Amazon Cognito issued to the user who you want to authenticate.
        public var accessToken: Swift.String?
        /// The expiration period of the authentication result in seconds.
        public var expiresIn: Swift.Int
        /// The ID token.
        public var idToken: Swift.String?
        /// The new device metadata from an authentication result.
        public var newDeviceMetadata: CognitoIdentityProviderClientTypes.NewDeviceMetadataType?
        /// The refresh token.
        public var refreshToken: Swift.String?
        /// The token type.
        public var tokenType: Swift.String?

        public init(
            accessToken: Swift.String? = nil,
            expiresIn: Swift.Int = 0,
            idToken: Swift.String? = nil,
            newDeviceMetadata: CognitoIdentityProviderClientTypes.NewDeviceMetadataType? = nil,
            refreshToken: Swift.String? = nil,
            tokenType: Swift.String? = nil
        )
        {
            self.accessToken = accessToken
            self.expiresIn = expiresIn
            self.idToken = idToken
            self.newDeviceMetadata = newDeviceMetadata
            self.refreshToken = refreshToken
            self.tokenType = tokenType
        }
    }
}

extension CognitoIdentityProviderClientTypes.AuthenticationResultType: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AuthenticationResultType(expiresIn: \(Swift.String(describing: expiresIn)), newDeviceMetadata: \(Swift.String(describing: newDeviceMetadata)), tokenType: \(Swift.String(describing: tokenType)), accessToken: \"CONTENT_REDACTED\", idToken: \"CONTENT_REDACTED\", refreshToken: \"CONTENT_REDACTED\")"}
}

extension CognitoIdentityProviderClientTypes {

    public enum ChallengeNameType: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case adminNoSrpAuth
        case customChallenge
        case devicePasswordVerifier
        case deviceSrpAuth
        case emailOtp
        case mfaSetup
        case newPasswordRequired
        case passwordVerifier
        case selectMfaType
        case smsMfa
        case softwareTokenMfa
        case sdkUnknown(Swift.String)

        public static var allCases: [ChallengeNameType] {
            return [
                .adminNoSrpAuth,
                .customChallenge,
                .devicePasswordVerifier,
                .deviceSrpAuth,
                .emailOtp,
                .mfaSetup,
                .newPasswordRequired,
                .passwordVerifier,
                .selectMfaType,
                .smsMfa,
                .softwareTokenMfa
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .adminNoSrpAuth: return "ADMIN_NO_SRP_AUTH"
            case .customChallenge: return "CUSTOM_CHALLENGE"
            case .devicePasswordVerifier: return "DEVICE_PASSWORD_VERIFIER"
            case .deviceSrpAuth: return "DEVICE_SRP_AUTH"
            case .emailOtp: return "EMAIL_OTP"
            case .mfaSetup: return "MFA_SETUP"
            case .newPasswordRequired: return "NEW_PASSWORD_REQUIRED"
            case .passwordVerifier: return "PASSWORD_VERIFIER"
            case .selectMfaType: return "SELECT_MFA_TYPE"
            case .smsMfa: return "SMS_MFA"
            case .softwareTokenMfa: return "SOFTWARE_TOKEN_MFA"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

/// Initiates the authentication response, as an administrator.
public struct AdminInitiateAuthOutput: Swift.Sendable {
    /// The result of the authentication response. This is only returned if the caller doesn't need to pass another challenge. If the caller does need to pass another challenge before it gets tokens, ChallengeName, ChallengeParameters, and Session are returned.
    public var authenticationResult: CognitoIdentityProviderClientTypes.AuthenticationResultType?
    /// The name of the challenge that you're responding to with this call. This is returned in the AdminInitiateAuth response if you must pass another challenge.
    ///
    /// * MFA_SETUP: If MFA is required, users who don't have at least one of the MFA methods set up are presented with an MFA_SETUP challenge. The user must set up at least one MFA type to continue to authenticate.
    ///
    /// * SELECT_MFA_TYPE: Selects the MFA type. Valid MFA options are SMS_MFA for SMS message MFA, EMAIL_OTP for email message MFA, and SOFTWARE_TOKEN_MFA for time-based one-time password (TOTP) software token MFA.
    ///
    /// * SMS_MFA: Next challenge is to supply an SMS_MFA_CODEthat your user pool delivered in an SMS message.
    ///
    /// * EMAIL_OTP: Next challenge is to supply an EMAIL_OTP_CODE that your user pool delivered in an email message.
    ///
    /// * PASSWORD_VERIFIER: Next challenge is to supply PASSWORD_CLAIM_SIGNATURE, PASSWORD_CLAIM_SECRET_BLOCK, and TIMESTAMP after the client-side SRP calculations.
    ///
    /// * CUSTOM_CHALLENGE: This is returned if your custom authentication flow determines that the user should pass another challenge before tokens are issued.
    ///
    /// * DEVICE_SRP_AUTH: If device tracking was activated in your user pool and the previous challenges were passed, this challenge is returned so that Amazon Cognito can start tracking this device.
    ///
    /// * DEVICE_PASSWORD_VERIFIER: Similar to PASSWORD_VERIFIER, but for devices only.
    ///
    /// * ADMIN_NO_SRP_AUTH: This is returned if you must authenticate with USERNAME and PASSWORD directly. An app client must be enabled to use this flow.
    ///
    /// * NEW_PASSWORD_REQUIRED: For users who are required to change their passwords after successful first login. Respond to this challenge with NEW_PASSWORD and any required attributes that Amazon Cognito returned in the requiredAttributes parameter. You can also set values for attributes that aren't required by your user pool and that your app client can write. For more information, see [AdminRespondToAuthChallenge](https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_AdminRespondToAuthChallenge.html). In a NEW_PASSWORD_REQUIRED challenge response, you can't modify a required attribute that already has a value. In AdminRespondToAuthChallenge, set a value for any keys that Amazon Cognito returned in the requiredAttributes parameter, then use the AdminUpdateUserAttributes API operation to modify the value of any additional attributes.
    ///
    /// * MFA_SETUP: For users who are required to set up an MFA factor before they can sign in. The MFA types activated for the user pool will be listed in the challenge parameters MFAS_CAN_SETUP value. To set up software token MFA, use the session returned here from InitiateAuth as an input to AssociateSoftwareToken, and use the session returned by VerifySoftwareToken as an input to RespondToAuthChallenge with challenge name MFA_SETUP to complete sign-in. To set up SMS MFA, users will need help from an administrator to add a phone number to their account and then call InitiateAuth again to restart sign-in.
    public var challengeName: CognitoIdentityProviderClientTypes.ChallengeNameType?
    /// The challenge parameters. These are returned to you in the AdminInitiateAuth response if you must pass another challenge. The responses in this parameter should be used to compute inputs to the next call (AdminRespondToAuthChallenge). All challenges require USERNAME and SECRET_HASH (if applicable). The value of the USER_ID_FOR_SRP attribute is the user's actual username, not an alias (such as email address or phone number), even if you specified an alias in your call to AdminInitiateAuth. This happens because, in the AdminRespondToAuthChallenge API ChallengeResponses, the USERNAME attribute can't be an alias.
    public var challengeParameters: [Swift.String: Swift.String]?
    /// The session that should be passed both ways in challenge-response calls to the service. If AdminInitiateAuth or AdminRespondToAuthChallenge API call determines that the caller must pass another challenge, they return a session with other challenge parameters. This session should be passed as it is to the next AdminRespondToAuthChallenge API call.
    public var session: Swift.String?

    public init(
        authenticationResult: CognitoIdentityProviderClientTypes.AuthenticationResultType? = nil,
        challengeName: CognitoIdentityProviderClientTypes.ChallengeNameType? = nil,
        challengeParameters: [Swift.String: Swift.String]? = nil,
        session: Swift.String? = nil
    )
    {
        self.authenticationResult = authenticationResult
        self.challengeName = challengeName
        self.challengeParameters = challengeParameters
        self.session = session
    }
}

extension AdminInitiateAuthOutput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AdminInitiateAuthOutput(authenticationResult: \(Swift.String(describing: authenticationResult)), challengeName: \(Swift.String(describing: challengeName)), challengeParameters: \(Swift.String(describing: challengeParameters)), session: \"CONTENT_REDACTED\")"}
}

public struct AdminLinkProviderForUserInput: Swift.Sendable {
    /// The existing user in the user pool that you want to assign to the external IdP user account. This user can be a local (Username + Password) Amazon Cognito user pools user or a federated user (for example, a SAML or Facebook user). If the user doesn't exist, Amazon Cognito generates an exception. Amazon Cognito returns this user when the new user (with the linked IdP attribute) signs in. For a native username + password user, the ProviderAttributeValue for the DestinationUser should be the username in the user pool. For a federated user, it should be the provider-specific user_id. The ProviderAttributeName of the DestinationUser is ignored. The ProviderName should be set to Cognito for users in Cognito user pools. All attributes in the DestinationUser profile must be mutable. If you have assigned the user any immutable custom attributes, the operation won't succeed.
    /// This member is required.
    public var destinationUser: CognitoIdentityProviderClientTypes.ProviderUserIdentifierType?
    /// An external IdP account for a user who doesn't exist yet in the user pool. This user must be a federated user (for example, a SAML or Facebook user), not another native user. If the SourceUser is using a federated social IdP, such as Facebook, Google, or Login with Amazon, you must set the ProviderAttributeName to Cognito_Subject. For social IdPs, the ProviderName will be Facebook, Google, or LoginWithAmazon, and Amazon Cognito will automatically parse the Facebook, Google, and Login with Amazon tokens for id, sub, and user_id, respectively. The ProviderAttributeValue for the user must be the same value as the id, sub, or user_id value found in the social IdP token. For OIDC, the ProviderAttributeName can be any value that matches a claim in the ID token, or that your app retrieves from the userInfo endpoint. You must map the claim to a user pool attribute in your IdP configuration, and set the user pool attribute name as the value of ProviderAttributeName in your AdminLinkProviderForUser request. For SAML, the ProviderAttributeName can be any value that matches a claim in the SAML assertion. To link SAML users based on the subject of the SAML assertion, map the subject to a claim through the SAML IdP and set that claim name as the value of ProviderAttributeName in your AdminLinkProviderForUser request. For both OIDC and SAML users, when you set ProviderAttributeName to Cognito_Subject, Amazon Cognito will automatically parse the default unique identifier found in the subject from the IdP token.
    /// This member is required.
    public var sourceUser: CognitoIdentityProviderClientTypes.ProviderUserIdentifierType?
    /// The user pool ID for the user pool.
    /// This member is required.
    public var userPoolId: Swift.String?

    public init(
        destinationUser: CognitoIdentityProviderClientTypes.ProviderUserIdentifierType? = nil,
        sourceUser: CognitoIdentityProviderClientTypes.ProviderUserIdentifierType? = nil,
        userPoolId: Swift.String? = nil
    )
    {
        self.destinationUser = destinationUser
        self.sourceUser = sourceUser
        self.userPoolId = userPoolId
    }
}

public struct AdminLinkProviderForUserOutput: Swift.Sendable {

    public init() { }
}

/// Represents the request to list devices, as an administrator.
public struct AdminListDevicesInput: Swift.Sendable {
    /// The limit of the devices request.
    public var limit: Swift.Int?
    /// This API operation returns a limited number of results. The pagination token is an identifier that you can present in an additional API request with the same parameters. When you include the pagination token, Amazon Cognito returns the next set of items after the current list. Subsequent requests return a new pagination token. By use of this token, you can paginate through the full list of items.
    public var paginationToken: Swift.String?
    /// The user pool ID.
    /// This member is required.
    public var userPoolId: Swift.String?
    /// The username of the user that you want to query or modify. The value of this parameter is typically your user's username, but it can be any of their alias attributes. If username isn't an alias attribute in your user pool, this value must be the sub of a local user or the username of a user from a third-party IdP.
    /// This member is required.
    public var username: Swift.String?

    public init(
        limit: Swift.Int? = nil,
        paginationToken: Swift.String? = nil,
        userPoolId: Swift.String? = nil,
        username: Swift.String? = nil
    )
    {
        self.limit = limit
        self.paginationToken = paginationToken
        self.userPoolId = userPoolId
        self.username = username
    }
}

extension AdminListDevicesInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AdminListDevicesInput(limit: \(Swift.String(describing: limit)), paginationToken: \(Swift.String(describing: paginationToken)), userPoolId: \(Swift.String(describing: userPoolId)), username: \"CONTENT_REDACTED\")"}
}

/// Lists the device's response, as an administrator.
public struct AdminListDevicesOutput: Swift.Sendable {
    /// The devices in the list of devices response.
    public var devices: [CognitoIdentityProviderClientTypes.DeviceType]?
    /// The identifier that Amazon Cognito returned with the previous request to this operation. When you include a pagination token in your request, Amazon Cognito returns the next set of items in the list. By use of this token, you can paginate through the full list of items.
    public var paginationToken: Swift.String?

    public init(
        devices: [CognitoIdentityProviderClientTypes.DeviceType]? = nil,
        paginationToken: Swift.String? = nil
    )
    {
        self.devices = devices
        self.paginationToken = paginationToken
    }
}

public struct AdminListGroupsForUserInput: Swift.Sendable {
    /// The limit of the request to list groups.
    public var limit: Swift.Int?
    /// An identifier that was returned from the previous call to this operation, which can be used to return the next set of items in the list.
    public var nextToken: Swift.String?
    /// The user pool ID for the user pool.
    /// This member is required.
    public var userPoolId: Swift.String?
    /// The username of the user that you want to query or modify. The value of this parameter is typically your user's username, but it can be any of their alias attributes. If username isn't an alias attribute in your user pool, this value must be the sub of a local user or the username of a user from a third-party IdP.
    /// This member is required.
    public var username: Swift.String?

    public init(
        limit: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        userPoolId: Swift.String? = nil,
        username: Swift.String? = nil
    )
    {
        self.limit = limit
        self.nextToken = nextToken
        self.userPoolId = userPoolId
        self.username = username
    }
}

extension AdminListGroupsForUserInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AdminListGroupsForUserInput(limit: \(Swift.String(describing: limit)), nextToken: \(Swift.String(describing: nextToken)), userPoolId: \(Swift.String(describing: userPoolId)), username: \"CONTENT_REDACTED\")"}
}

extension CognitoIdentityProviderClientTypes {

    /// The group type.
    public struct GroupType: Swift.Sendable {
        /// The date and time when the item was created. Amazon Cognito returns this timestamp in UNIX epoch time format. Your SDK might render the output in a human-readable format like ISO 8601 or a Java Date object.
        public var creationDate: Foundation.Date?
        /// A string containing the description of the group.
        public var description: Swift.String?
        /// The name of the group.
        public var groupName: Swift.String?
        /// The date and time when the item was modified. Amazon Cognito returns this timestamp in UNIX epoch time format. Your SDK might render the output in a human-readable format like ISO 8601 or a Java Date object.
        public var lastModifiedDate: Foundation.Date?
        /// A non-negative integer value that specifies the precedence of this group relative to the other groups that a user can belong to in the user pool. Zero is the highest precedence value. Groups with lower Precedence values take precedence over groups with higher ornull Precedence values. If a user belongs to two or more groups, it is the group with the lowest precedence value whose role ARN is given in the user's tokens for the cognito:roles and cognito:preferred_role claims. Two groups can have the same Precedence value. If this happens, neither group takes precedence over the other. If two groups with the same Precedence have the same role ARN, that role is used in the cognito:preferred_role claim in tokens for users in each group. If the two groups have different role ARNs, the cognito:preferred_role claim isn't set in users' tokens. The default Precedence value is null.
        public var precedence: Swift.Int?
        /// The role Amazon Resource Name (ARN) for the group.
        public var roleArn: Swift.String?
        /// The user pool ID for the user pool.
        public var userPoolId: Swift.String?

        public init(
            creationDate: Foundation.Date? = nil,
            description: Swift.String? = nil,
            groupName: Swift.String? = nil,
            lastModifiedDate: Foundation.Date? = nil,
            precedence: Swift.Int? = nil,
            roleArn: Swift.String? = nil,
            userPoolId: Swift.String? = nil
        )
        {
            self.creationDate = creationDate
            self.description = description
            self.groupName = groupName
            self.lastModifiedDate = lastModifiedDate
            self.precedence = precedence
            self.roleArn = roleArn
            self.userPoolId = userPoolId
        }
    }
}

public struct AdminListGroupsForUserOutput: Swift.Sendable {
    /// The groups that the user belongs to.
    public var groups: [CognitoIdentityProviderClientTypes.GroupType]?
    /// An identifier that was returned from the previous call to this operation, which can be used to return the next set of items in the list.
    public var nextToken: Swift.String?

    public init(
        groups: [CognitoIdentityProviderClientTypes.GroupType]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.groups = groups
        self.nextToken = nextToken
    }
}

/// This exception is thrown when user pool add-ons aren't enabled.
public struct UserPoolAddOnNotEnabledException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "UserPoolAddOnNotEnabledException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

public struct AdminListUserAuthEventsInput: Swift.Sendable {
    /// The maximum number of authentication events to return. Returns 60 events if you set MaxResults to 0, or if you don't include a MaxResults parameter.
    public var maxResults: Swift.Int?
    /// A pagination token.
    public var nextToken: Swift.String?
    /// The user pool ID.
    /// This member is required.
    public var userPoolId: Swift.String?
    /// The username of the user that you want to query or modify. The value of this parameter is typically your user's username, but it can be any of their alias attributes. If username isn't an alias attribute in your user pool, this value must be the sub of a local user or the username of a user from a third-party IdP.
    /// This member is required.
    public var username: Swift.String?

    public init(
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        userPoolId: Swift.String? = nil,
        username: Swift.String? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.userPoolId = userPoolId
        self.username = username
    }
}

extension AdminListUserAuthEventsInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AdminListUserAuthEventsInput(maxResults: \(Swift.String(describing: maxResults)), nextToken: \(Swift.String(describing: nextToken)), userPoolId: \(Swift.String(describing: userPoolId)), username: \"CONTENT_REDACTED\")"}
}

extension CognitoIdentityProviderClientTypes {

    public enum ChallengeName: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case mfa
        case password
        case sdkUnknown(Swift.String)

        public static var allCases: [ChallengeName] {
            return [
                .mfa,
                .password
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .mfa: return "Mfa"
            case .password: return "Password"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension CognitoIdentityProviderClientTypes {

    public enum ChallengeResponse: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case failure
        case success
        case sdkUnknown(Swift.String)

        public static var allCases: [ChallengeResponse] {
            return [
                .failure,
                .success
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .failure: return "Failure"
            case .success: return "Success"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension CognitoIdentityProviderClientTypes {

    /// The challenge response type.
    public struct ChallengeResponseType: Swift.Sendable {
        /// The challenge name.
        public var challengeName: CognitoIdentityProviderClientTypes.ChallengeName?
        /// The challenge response.
        public var challengeResponse: CognitoIdentityProviderClientTypes.ChallengeResponse?

        public init(
            challengeName: CognitoIdentityProviderClientTypes.ChallengeName? = nil,
            challengeResponse: CognitoIdentityProviderClientTypes.ChallengeResponse? = nil
        )
        {
            self.challengeName = challengeName
            self.challengeResponse = challengeResponse
        }
    }
}

extension CognitoIdentityProviderClientTypes {

    /// Specifies the user context data captured at the time of an event request.
    public struct EventContextDataType: Swift.Sendable {
        /// The user's city.
        public var city: Swift.String?
        /// The user's country.
        public var country: Swift.String?
        /// The user's device name.
        public var deviceName: Swift.String?
        /// The source IP address of your user's device.
        public var ipAddress: Swift.String?
        /// The user's time zone.
        public var timezone: Swift.String?

        public init(
            city: Swift.String? = nil,
            country: Swift.String? = nil,
            deviceName: Swift.String? = nil,
            ipAddress: Swift.String? = nil,
            timezone: Swift.String? = nil
        )
        {
            self.city = city
            self.country = country
            self.deviceName = deviceName
            self.ipAddress = ipAddress
            self.timezone = timezone
        }
    }
}

extension CognitoIdentityProviderClientTypes {

    public enum FeedbackValueType: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case invalid
        case valid
        case sdkUnknown(Swift.String)

        public static var allCases: [FeedbackValueType] {
            return [
                .invalid,
                .valid
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .invalid: return "Invalid"
            case .valid: return "Valid"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension CognitoIdentityProviderClientTypes {

    /// Specifies the event feedback type.
    public struct EventFeedbackType: Swift.Sendable {
        /// The event feedback date.
        public var feedbackDate: Foundation.Date?
        /// The authentication event feedback value. When you provide a FeedbackValue value of valid, you tell Amazon Cognito that you trust a user session where Amazon Cognito has evaluated some level of risk. When you provide a FeedbackValue value of invalid, you tell Amazon Cognito that you don't trust a user session, or you don't believe that Amazon Cognito evaluated a high-enough risk level.
        /// This member is required.
        public var feedbackValue: CognitoIdentityProviderClientTypes.FeedbackValueType?
        /// The provider.
        /// This member is required.
        public var provider: Swift.String?

        public init(
            feedbackDate: Foundation.Date? = nil,
            feedbackValue: CognitoIdentityProviderClientTypes.FeedbackValueType? = nil,
            provider: Swift.String? = nil
        )
        {
            self.feedbackDate = feedbackDate
            self.feedbackValue = feedbackValue
            self.provider = provider
        }
    }
}

extension CognitoIdentityProviderClientTypes {

    public enum EventResponseType: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case fail
        case inprogress
        case pass
        case sdkUnknown(Swift.String)

        public static var allCases: [EventResponseType] {
            return [
                .fail,
                .inprogress,
                .pass
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .fail: return "Fail"
            case .inprogress: return "InProgress"
            case .pass: return "Pass"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension CognitoIdentityProviderClientTypes {

    public enum RiskDecisionType: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case accounttakeover
        case block
        case norisk
        case sdkUnknown(Swift.String)

        public static var allCases: [RiskDecisionType] {
            return [
                .accounttakeover,
                .block,
                .norisk
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .accounttakeover: return "AccountTakeover"
            case .block: return "Block"
            case .norisk: return "NoRisk"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension CognitoIdentityProviderClientTypes {

    public enum RiskLevelType: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case high
        case low
        case medium
        case sdkUnknown(Swift.String)

        public static var allCases: [RiskLevelType] {
            return [
                .high,
                .low,
                .medium
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .high: return "High"
            case .low: return "Low"
            case .medium: return "Medium"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension CognitoIdentityProviderClientTypes {

    /// The event risk type.
    public struct EventRiskType: Swift.Sendable {
        /// Indicates whether compromised credentials were detected during an authentication event.
        public var compromisedCredentialsDetected: Swift.Bool?
        /// The risk decision.
        public var riskDecision: CognitoIdentityProviderClientTypes.RiskDecisionType?
        /// The risk level.
        public var riskLevel: CognitoIdentityProviderClientTypes.RiskLevelType?

        public init(
            compromisedCredentialsDetected: Swift.Bool? = nil,
            riskDecision: CognitoIdentityProviderClientTypes.RiskDecisionType? = nil,
            riskLevel: CognitoIdentityProviderClientTypes.RiskLevelType? = nil
        )
        {
            self.compromisedCredentialsDetected = compromisedCredentialsDetected
            self.riskDecision = riskDecision
            self.riskLevel = riskLevel
        }
    }
}

extension CognitoIdentityProviderClientTypes {

    public enum EventType: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case forgotpassword
        case passwordchange
        case resendcode
        case signin
        case signup
        case sdkUnknown(Swift.String)

        public static var allCases: [EventType] {
            return [
                .forgotpassword,
                .passwordchange,
                .resendcode,
                .signin,
                .signup
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .forgotpassword: return "ForgotPassword"
            case .passwordchange: return "PasswordChange"
            case .resendcode: return "ResendCode"
            case .signin: return "SignIn"
            case .signup: return "SignUp"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension CognitoIdentityProviderClientTypes {

    /// The authentication event type.
    public struct AuthEventType: Swift.Sendable {
        /// The challenge responses.
        public var challengeResponses: [CognitoIdentityProviderClientTypes.ChallengeResponseType]?
        /// The date and time when the item was created. Amazon Cognito returns this timestamp in UNIX epoch time format. Your SDK might render the output in a human-readable format like ISO 8601 or a Java Date object.
        public var creationDate: Foundation.Date?
        /// The user context data captured at the time of an event request. This value provides additional information about the client from which event the request is received.
        public var eventContextData: CognitoIdentityProviderClientTypes.EventContextDataType?
        /// A flag specifying the user feedback captured at the time of an event request is good or bad.
        public var eventFeedback: CognitoIdentityProviderClientTypes.EventFeedbackType?
        /// The event ID.
        public var eventId: Swift.String?
        /// The event response.
        public var eventResponse: CognitoIdentityProviderClientTypes.EventResponseType?
        /// The event risk.
        public var eventRisk: CognitoIdentityProviderClientTypes.EventRiskType?
        /// The event type.
        public var eventType: CognitoIdentityProviderClientTypes.EventType?

        public init(
            challengeResponses: [CognitoIdentityProviderClientTypes.ChallengeResponseType]? = nil,
            creationDate: Foundation.Date? = nil,
            eventContextData: CognitoIdentityProviderClientTypes.EventContextDataType? = nil,
            eventFeedback: CognitoIdentityProviderClientTypes.EventFeedbackType? = nil,
            eventId: Swift.String? = nil,
            eventResponse: CognitoIdentityProviderClientTypes.EventResponseType? = nil,
            eventRisk: CognitoIdentityProviderClientTypes.EventRiskType? = nil,
            eventType: CognitoIdentityProviderClientTypes.EventType? = nil
        )
        {
            self.challengeResponses = challengeResponses
            self.creationDate = creationDate
            self.eventContextData = eventContextData
            self.eventFeedback = eventFeedback
            self.eventId = eventId
            self.eventResponse = eventResponse
            self.eventRisk = eventRisk
            self.eventType = eventType
        }
    }
}

public struct AdminListUserAuthEventsOutput: Swift.Sendable {
    /// The response object. It includes the EventID, EventType, CreationDate, EventRisk, and EventResponse.
    public var authEvents: [CognitoIdentityProviderClientTypes.AuthEventType]?
    /// A pagination token.
    public var nextToken: Swift.String?

    public init(
        authEvents: [CognitoIdentityProviderClientTypes.AuthEventType]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.authEvents = authEvents
        self.nextToken = nextToken
    }
}

public struct AdminRemoveUserFromGroupInput: Swift.Sendable {
    /// The group name.
    /// This member is required.
    public var groupName: Swift.String?
    /// The user pool ID for the user pool.
    /// This member is required.
    public var userPoolId: Swift.String?
    /// The username of the user that you want to query or modify. The value of this parameter is typically your user's username, but it can be any of their alias attributes. If username isn't an alias attribute in your user pool, this value must be the sub of a local user or the username of a user from a third-party IdP.
    /// This member is required.
    public var username: Swift.String?

    public init(
        groupName: Swift.String? = nil,
        userPoolId: Swift.String? = nil,
        username: Swift.String? = nil
    )
    {
        self.groupName = groupName
        self.userPoolId = userPoolId
        self.username = username
    }
}

extension AdminRemoveUserFromGroupInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AdminRemoveUserFromGroupInput(groupName: \(Swift.String(describing: groupName)), userPoolId: \(Swift.String(describing: userPoolId)), username: \"CONTENT_REDACTED\")"}
}

/// Represents the request to reset a user's password as an administrator.
public struct AdminResetUserPasswordInput: Swift.Sendable {
    /// A map of custom key-value pairs that you can provide as input for any custom workflows that this action triggers. You create custom workflows by assigning Lambda functions to user pool triggers. When you use the AdminResetUserPassword API action, Amazon Cognito invokes the function that is assigned to the custom message trigger. When Amazon Cognito invokes this function, it passes a JSON payload, which the function receives as input. This payload contains a clientMetadata attribute, which provides the data that you assigned to the ClientMetadata parameter in your AdminResetUserPassword request. In your function code in Lambda, you can process the clientMetadata value to enhance your workflow for your specific needs. For more information, see [ Customizing user pool Workflows with Lambda Triggers](https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools-working-with-aws-lambda-triggers.html) in the Amazon Cognito Developer Guide. When you use the ClientMetadata parameter, remember that Amazon Cognito won't do the following:
    ///
    /// * Store the ClientMetadata value. This data is available only to Lambda triggers that are assigned to a user pool to support custom workflows. If your user pool configuration doesn't include triggers, the ClientMetadata parameter serves no purpose.
    ///
    /// * Validate the ClientMetadata value.
    ///
    /// * Encrypt the ClientMetadata value. Don't use Amazon Cognito to provide sensitive information.
    public var clientMetadata: [Swift.String: Swift.String]?
    /// The user pool ID for the user pool where you want to reset the user's password.
    /// This member is required.
    public var userPoolId: Swift.String?
    /// The username of the user that you want to query or modify. The value of this parameter is typically your user's username, but it can be any of their alias attributes. If username isn't an alias attribute in your user pool, this value must be the sub of a local user or the username of a user from a third-party IdP.
    /// This member is required.
    public var username: Swift.String?

    public init(
        clientMetadata: [Swift.String: Swift.String]? = nil,
        userPoolId: Swift.String? = nil,
        username: Swift.String? = nil
    )
    {
        self.clientMetadata = clientMetadata
        self.userPoolId = userPoolId
        self.username = username
    }
}

extension AdminResetUserPasswordInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AdminResetUserPasswordInput(clientMetadata: \(Swift.String(describing: clientMetadata)), userPoolId: \(Swift.String(describing: userPoolId)), username: \"CONTENT_REDACTED\")"}
}

/// Represents the response from the server to reset a user password as an administrator.
public struct AdminResetUserPasswordOutput: Swift.Sendable {

    public init() { }
}

/// This exception is thrown if the provided code doesn't match what the server was expecting.
public struct CodeMismatchException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// The message provided when the code mismatch exception is thrown.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "CodeMismatchException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// This exception is thrown if a code has expired.
public struct ExpiredCodeException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// The message returned when the expired code exception is thrown.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ExpiredCodeException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The message returned when a user's new password matches a previous password and doesn't comply with the password-history policy.
public struct PasswordHistoryPolicyViolationException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "PasswordHistoryPolicyViolationException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// This exception is thrown when the software token time-based one-time password (TOTP) multi-factor authentication (MFA) isn't activated for the user pool.
public struct SoftwareTokenMFANotFoundException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "SoftwareTokenMFANotFoundException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The request to respond to the authentication challenge, as an administrator.
public struct AdminRespondToAuthChallengeInput: Swift.Sendable {
    /// The analytics metadata for collecting Amazon Pinpoint metrics for AdminRespondToAuthChallenge calls.
    public var analyticsMetadata: CognitoIdentityProviderClientTypes.AnalyticsMetadataType?
    /// The challenge name. For more information, see [AdminInitiateAuth](https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_AdminInitiateAuth.html).
    /// This member is required.
    public var challengeName: CognitoIdentityProviderClientTypes.ChallengeNameType?
    /// The responses to the challenge that you received in the previous request. Each challenge has its own required response parameters. The following examples are partial JSON request bodies that highlight challenge-response parameters. You must provide a SECRET_HASH parameter in all challenge responses to an app client that has a client secret. SMS_MFA "ChallengeName": "SMS_MFA", "ChallengeResponses": {"SMS_MFA_CODE": "[code]", "USERNAME": "[username]"} EMAIL_OTP "ChallengeName": "EMAIL_OTP", "ChallengeResponses": {"EMAIL_OTP_CODE": "[code]", "USERNAME": "[username]"} PASSWORD_VERIFIER This challenge response is part of the SRP flow. Amazon Cognito requires that your application respond to this challenge within a few seconds. When the response time exceeds this period, your user pool returns a NotAuthorizedException error. "ChallengeName": "PASSWORD_VERIFIER", "ChallengeResponses": {"PASSWORD_CLAIM_SIGNATURE": "[claim_signature]", "PASSWORD_CLAIM_SECRET_BLOCK": "[secret_block]", "TIMESTAMP": [timestamp], "USERNAME": "[username]"} Add "DEVICE_KEY" when you sign in with a remembered device. CUSTOM_CHALLENGE "ChallengeName": "CUSTOM_CHALLENGE", "ChallengeResponses": {"USERNAME": "[username]", "ANSWER": "[challenge_answer]"} Add "DEVICE_KEY" when you sign in with a remembered device. NEW_PASSWORD_REQUIRED "ChallengeName": "NEW_PASSWORD_REQUIRED", "ChallengeResponses": {"NEW_PASSWORD": "[new_password]", "USERNAME": "[username]"} To set any required attributes that InitiateAuth returned in an requiredAttributes parameter, add "userAttributes.[attribute_name]": "[attribute_value]". This parameter can also set values for writable attributes that aren't required by your user pool. In a NEW_PASSWORD_REQUIRED challenge response, you can't modify a required attribute that already has a value. In RespondToAuthChallenge, set a value for any keys that Amazon Cognito returned in the requiredAttributes parameter, then use the UpdateUserAttributes API operation to modify the value of any additional attributes. SOFTWARE_TOKEN_MFA "ChallengeName": "SOFTWARE_TOKEN_MFA", "ChallengeResponses": {"USERNAME": "[username]", "SOFTWARE_TOKEN_MFA_CODE": [authenticator_code]} DEVICE_SRP_AUTH "ChallengeName": "DEVICE_SRP_AUTH", "ChallengeResponses": {"USERNAME": "[username]", "DEVICE_KEY": "[device_key]", "SRP_A": "[srp_a]"} DEVICE_PASSWORD_VERIFIER "ChallengeName": "DEVICE_PASSWORD_VERIFIER", "ChallengeResponses": {"DEVICE_KEY": "[device_key]", "PASSWORD_CLAIM_SIGNATURE": "[claim_signature]", "PASSWORD_CLAIM_SECRET_BLOCK": "[secret_block]", "TIMESTAMP": [timestamp], "USERNAME": "[username]"} MFA_SETUP "ChallengeName": "MFA_SETUP", "ChallengeResponses": {"USERNAME": "[username]"}, "SESSION": "[Session ID from VerifySoftwareToken]" SELECT_MFA_TYPE "ChallengeName": "SELECT_MFA_TYPE", "ChallengeResponses": {"USERNAME": "[username]", "ANSWER": "[SMS_MFA or SOFTWARE_TOKEN_MFA]"} For more information about SECRET_HASH, see [Computing secret hash values](https://docs.aws.amazon.com/cognito/latest/developerguide/signing-up-users-in-your-app.html#cognito-user-pools-computing-secret-hash). For information about DEVICE_KEY, see [Working with user devices in your user pool](https://docs.aws.amazon.com/cognito/latest/developerguide/amazon-cognito-user-pools-device-tracking.html).
    public var challengeResponses: [Swift.String: Swift.String]?
    /// The app client ID.
    /// This member is required.
    public var clientId: Swift.String?
    /// A map of custom key-value pairs that you can provide as input for any custom workflows that this action triggers. You create custom workflows by assigning Lambda functions to user pool triggers. When you use the AdminRespondToAuthChallenge API action, Amazon Cognito invokes any functions that you have assigned to the following triggers:
    ///
    /// * pre sign-up
    ///
    /// * custom message
    ///
    /// * post authentication
    ///
    /// * user migration
    ///
    /// * pre token generation
    ///
    /// * define auth challenge
    ///
    /// * create auth challenge
    ///
    /// * verify auth challenge response
    ///
    ///
    /// When Amazon Cognito invokes any of these functions, it passes a JSON payload, which the function receives as input. This payload contains a clientMetadata attribute that provides the data that you assigned to the ClientMetadata parameter in your AdminRespondToAuthChallenge request. In your function code in Lambda, you can process the clientMetadata value to enhance your workflow for your specific needs. For more information, see [ Customizing user pool Workflows with Lambda Triggers](https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools-working-with-aws-lambda-triggers.html) in the Amazon Cognito Developer Guide. When you use the ClientMetadata parameter, remember that Amazon Cognito won't do the following:
    ///
    /// * Store the ClientMetadata value. This data is available only to Lambda triggers that are assigned to a user pool to support custom workflows. If your user pool configuration doesn't include triggers, the ClientMetadata parameter serves no purpose.
    ///
    /// * Validate the ClientMetadata value.
    ///
    /// * Encrypt the ClientMetadata value. Don't use Amazon Cognito to provide sensitive information.
    public var clientMetadata: [Swift.String: Swift.String]?
    /// Contextual data about your user session, such as the device fingerprint, IP address, or location. Amazon Cognito advanced security evaluates the risk of an authentication event based on the context that your app generates and passes to Amazon Cognito when it makes API requests.
    public var contextData: CognitoIdentityProviderClientTypes.ContextDataType?
    /// The session that should be passed both ways in challenge-response calls to the service. If an InitiateAuth or RespondToAuthChallenge API call determines that the caller must pass another challenge, it returns a session with other challenge parameters. This session should be passed as it is to the next RespondToAuthChallenge API call.
    public var session: Swift.String?
    /// The ID of the Amazon Cognito user pool.
    /// This member is required.
    public var userPoolId: Swift.String?

    public init(
        analyticsMetadata: CognitoIdentityProviderClientTypes.AnalyticsMetadataType? = nil,
        challengeName: CognitoIdentityProviderClientTypes.ChallengeNameType? = nil,
        challengeResponses: [Swift.String: Swift.String]? = nil,
        clientId: Swift.String? = nil,
        clientMetadata: [Swift.String: Swift.String]? = nil,
        contextData: CognitoIdentityProviderClientTypes.ContextDataType? = nil,
        session: Swift.String? = nil,
        userPoolId: Swift.String? = nil
    )
    {
        self.analyticsMetadata = analyticsMetadata
        self.challengeName = challengeName
        self.challengeResponses = challengeResponses
        self.clientId = clientId
        self.clientMetadata = clientMetadata
        self.contextData = contextData
        self.session = session
        self.userPoolId = userPoolId
    }
}

extension AdminRespondToAuthChallengeInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AdminRespondToAuthChallengeInput(analyticsMetadata: \(Swift.String(describing: analyticsMetadata)), challengeName: \(Swift.String(describing: challengeName)), clientMetadata: \(Swift.String(describing: clientMetadata)), contextData: \(Swift.String(describing: contextData)), userPoolId: \(Swift.String(describing: userPoolId)), challengeResponses: \"CONTENT_REDACTED\", clientId: \"CONTENT_REDACTED\", session: \"CONTENT_REDACTED\")"}
}

/// Responds to the authentication challenge, as an administrator.
public struct AdminRespondToAuthChallengeOutput: Swift.Sendable {
    /// The result returned by the server in response to the authentication request.
    public var authenticationResult: CognitoIdentityProviderClientTypes.AuthenticationResultType?
    /// The name of the challenge. For more information, see [AdminInitiateAuth](https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_AdminInitiateAuth.html).
    public var challengeName: CognitoIdentityProviderClientTypes.ChallengeNameType?
    /// The challenge parameters. For more information, see [AdminInitiateAuth](https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_AdminInitiateAuth.html).
    public var challengeParameters: [Swift.String: Swift.String]?
    /// The session that should be passed both ways in challenge-response calls to the service. If the caller must pass another challenge, they return a session with other challenge parameters. This session should be passed as it is to the next RespondToAuthChallenge API call.
    public var session: Swift.String?

    public init(
        authenticationResult: CognitoIdentityProviderClientTypes.AuthenticationResultType? = nil,
        challengeName: CognitoIdentityProviderClientTypes.ChallengeNameType? = nil,
        challengeParameters: [Swift.String: Swift.String]? = nil,
        session: Swift.String? = nil
    )
    {
        self.authenticationResult = authenticationResult
        self.challengeName = challengeName
        self.challengeParameters = challengeParameters
        self.session = session
    }
}

extension AdminRespondToAuthChallengeOutput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AdminRespondToAuthChallengeOutput(authenticationResult: \(Swift.String(describing: authenticationResult)), challengeName: \(Swift.String(describing: challengeName)), challengeParameters: \(Swift.String(describing: challengeParameters)), session: \"CONTENT_REDACTED\")"}
}

extension CognitoIdentityProviderClientTypes {

    /// User preferences for multi-factor authentication with email messages. Activates or deactivates email MFA and sets it as the preferred MFA method when multiple methods are available. To activate this setting, [ advanced security features](https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-pool-settings-advanced-security.html) must be active in your user pool.
    public struct EmailMfaSettingsType: Swift.Sendable {
        /// Specifies whether email message MFA is active for a user. When the value of this parameter is Enabled, the user will be prompted for MFA during all sign-in attempts, unless device tracking is turned on and the device has been trusted.
        public var enabled: Swift.Bool
        /// Specifies whether email message MFA is the user's preferred method.
        public var preferredMfa: Swift.Bool

        public init(
            enabled: Swift.Bool = false,
            preferredMfa: Swift.Bool = false
        )
        {
            self.enabled = enabled
            self.preferredMfa = preferredMfa
        }
    }
}

extension CognitoIdentityProviderClientTypes {

    /// The type used for enabling SMS multi-factor authentication (MFA) at the user level. Phone numbers don't need to be verified to be used for SMS MFA. If an MFA type is activated for a user, the user will be prompted for MFA during all sign-in attempts, unless device tracking is turned on and the device has been trusted. If you would like MFA to be applied selectively based on the assessed risk level of sign-in attempts, deactivate MFA for users and turn on Adaptive Authentication for the user pool.
    public struct SMSMfaSettingsType: Swift.Sendable {
        /// Specifies whether SMS message MFA is activated. If an MFA type is activated for a user, the user will be prompted for MFA during all sign-in attempts, unless device tracking is turned on and the device has been trusted.
        public var enabled: Swift.Bool
        /// Specifies whether SMS is the preferred MFA method.
        public var preferredMfa: Swift.Bool

        public init(
            enabled: Swift.Bool = false,
            preferredMfa: Swift.Bool = false
        )
        {
            self.enabled = enabled
            self.preferredMfa = preferredMfa
        }
    }
}

extension CognitoIdentityProviderClientTypes {

    /// The type used for enabling software token MFA at the user level. If an MFA type is activated for a user, the user will be prompted for MFA during all sign-in attempts, unless device tracking is turned on and the device has been trusted. If you want MFA to be applied selectively based on the assessed risk level of sign-in attempts, deactivate MFA for users and turn on Adaptive Authentication for the user pool.
    public struct SoftwareTokenMfaSettingsType: Swift.Sendable {
        /// Specifies whether software token MFA is activated. If an MFA type is activated for a user, the user will be prompted for MFA during all sign-in attempts, unless device tracking is turned on and the device has been trusted.
        public var enabled: Swift.Bool
        /// Specifies whether software token MFA is the preferred MFA method.
        public var preferredMfa: Swift.Bool

        public init(
            enabled: Swift.Bool = false,
            preferredMfa: Swift.Bool = false
        )
        {
            self.enabled = enabled
            self.preferredMfa = preferredMfa
        }
    }
}

public struct AdminSetUserMFAPreferenceInput: Swift.Sendable {
    /// User preferences for email message MFA. Activates or deactivates email MFA and sets it as the preferred MFA method when multiple methods are available. To activate this setting, [ advanced security features](https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-pool-settings-advanced-security.html) must be active in your user pool.
    public var emailMfaSettings: CognitoIdentityProviderClientTypes.EmailMfaSettingsType?
    /// User preferences for SMS message MFA. Activates or deactivates SMS MFA and sets it as the preferred MFA method when multiple methods are available.
    public var smsMfaSettings: CognitoIdentityProviderClientTypes.SMSMfaSettingsType?
    /// User preferences for time-based one-time password (TOTP) MFA. Activates or deactivates TOTP MFA and sets it as the preferred MFA method when multiple methods are available.
    public var softwareTokenMfaSettings: CognitoIdentityProviderClientTypes.SoftwareTokenMfaSettingsType?
    /// The ID of the user pool where you want to set a user's MFA preferences.
    /// This member is required.
    public var userPoolId: Swift.String?
    /// The username of the user that you want to query or modify. The value of this parameter is typically your user's username, but it can be any of their alias attributes. If username isn't an alias attribute in your user pool, this value must be the sub of a local user or the username of a user from a third-party IdP.
    /// This member is required.
    public var username: Swift.String?

    public init(
        emailMfaSettings: CognitoIdentityProviderClientTypes.EmailMfaSettingsType? = nil,
        smsMfaSettings: CognitoIdentityProviderClientTypes.SMSMfaSettingsType? = nil,
        softwareTokenMfaSettings: CognitoIdentityProviderClientTypes.SoftwareTokenMfaSettingsType? = nil,
        userPoolId: Swift.String? = nil,
        username: Swift.String? = nil
    )
    {
        self.emailMfaSettings = emailMfaSettings
        self.smsMfaSettings = smsMfaSettings
        self.softwareTokenMfaSettings = softwareTokenMfaSettings
        self.userPoolId = userPoolId
        self.username = username
    }
}

extension AdminSetUserMFAPreferenceInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AdminSetUserMFAPreferenceInput(emailMfaSettings: \(Swift.String(describing: emailMfaSettings)), smsMfaSettings: \(Swift.String(describing: smsMfaSettings)), softwareTokenMfaSettings: \(Swift.String(describing: softwareTokenMfaSettings)), userPoolId: \(Swift.String(describing: userPoolId)), username: \"CONTENT_REDACTED\")"}
}

public struct AdminSetUserMFAPreferenceOutput: Swift.Sendable {

    public init() { }
}

public struct AdminSetUserPasswordInput: Swift.Sendable {
    /// The password for the user.
    /// This member is required.
    public var password: Swift.String?
    /// True if the password is permanent, False if it is temporary.
    public var permanent: Swift.Bool?
    /// The user pool ID for the user pool where you want to set the user's password.
    /// This member is required.
    public var userPoolId: Swift.String?
    /// The username of the user that you want to query or modify. The value of this parameter is typically your user's username, but it can be any of their alias attributes. If username isn't an alias attribute in your user pool, this value must be the sub of a local user or the username of a user from a third-party IdP.
    /// This member is required.
    public var username: Swift.String?

    public init(
        password: Swift.String? = nil,
        permanent: Swift.Bool? = false,
        userPoolId: Swift.String? = nil,
        username: Swift.String? = nil
    )
    {
        self.password = password
        self.permanent = permanent
        self.userPoolId = userPoolId
        self.username = username
    }
}

extension AdminSetUserPasswordInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AdminSetUserPasswordInput(permanent: \(Swift.String(describing: permanent)), userPoolId: \(Swift.String(describing: userPoolId)), password: \"CONTENT_REDACTED\", username: \"CONTENT_REDACTED\")"}
}

public struct AdminSetUserPasswordOutput: Swift.Sendable {

    public init() { }
}

/// You can use this parameter to set an MFA configuration that uses the SMS delivery medium.
public struct AdminSetUserSettingsInput: Swift.Sendable {
    /// You can use this parameter only to set an SMS configuration that uses SMS for delivery.
    /// This member is required.
    public var mfaOptions: [CognitoIdentityProviderClientTypes.MFAOptionType]?
    /// The ID of the user pool that contains the user whose options you're setting.
    /// This member is required.
    public var userPoolId: Swift.String?
    /// The username of the user that you want to query or modify. The value of this parameter is typically your user's username, but it can be any of their alias attributes. If username isn't an alias attribute in your user pool, this value must be the sub of a local user or the username of a user from a third-party IdP.
    /// This member is required.
    public var username: Swift.String?

    public init(
        mfaOptions: [CognitoIdentityProviderClientTypes.MFAOptionType]? = nil,
        userPoolId: Swift.String? = nil,
        username: Swift.String? = nil
    )
    {
        self.mfaOptions = mfaOptions
        self.userPoolId = userPoolId
        self.username = username
    }
}

extension AdminSetUserSettingsInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AdminSetUserSettingsInput(mfaOptions: \(Swift.String(describing: mfaOptions)), userPoolId: \(Swift.String(describing: userPoolId)), username: \"CONTENT_REDACTED\")"}
}

/// Represents the response from the server to set user settings as an administrator.
public struct AdminSetUserSettingsOutput: Swift.Sendable {

    public init() { }
}

public struct AdminUpdateAuthEventFeedbackInput: Swift.Sendable {
    /// The authentication event ID.
    /// This member is required.
    public var eventId: Swift.String?
    /// The authentication event feedback value. When you provide a FeedbackValue value of valid, you tell Amazon Cognito that you trust a user session where Amazon Cognito has evaluated some level of risk. When you provide a FeedbackValue value of invalid, you tell Amazon Cognito that you don't trust a user session, or you don't believe that Amazon Cognito evaluated a high-enough risk level.
    /// This member is required.
    public var feedbackValue: CognitoIdentityProviderClientTypes.FeedbackValueType?
    /// The user pool ID.
    /// This member is required.
    public var userPoolId: Swift.String?
    /// The username of the user that you want to query or modify. The value of this parameter is typically your user's username, but it can be any of their alias attributes. If username isn't an alias attribute in your user pool, this value must be the sub of a local user or the username of a user from a third-party IdP.
    /// This member is required.
    public var username: Swift.String?

    public init(
        eventId: Swift.String? = nil,
        feedbackValue: CognitoIdentityProviderClientTypes.FeedbackValueType? = nil,
        userPoolId: Swift.String? = nil,
        username: Swift.String? = nil
    )
    {
        self.eventId = eventId
        self.feedbackValue = feedbackValue
        self.userPoolId = userPoolId
        self.username = username
    }
}

extension AdminUpdateAuthEventFeedbackInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AdminUpdateAuthEventFeedbackInput(eventId: \(Swift.String(describing: eventId)), feedbackValue: \(Swift.String(describing: feedbackValue)), userPoolId: \(Swift.String(describing: userPoolId)), username: \"CONTENT_REDACTED\")"}
}

public struct AdminUpdateAuthEventFeedbackOutput: Swift.Sendable {

    public init() { }
}

extension CognitoIdentityProviderClientTypes {

    public enum DeviceRememberedStatusType: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case notRemembered
        case remembered
        case sdkUnknown(Swift.String)

        public static var allCases: [DeviceRememberedStatusType] {
            return [
                .notRemembered,
                .remembered
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .notRemembered: return "not_remembered"
            case .remembered: return "remembered"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

/// The request to update the device status, as an administrator.
public struct AdminUpdateDeviceStatusInput: Swift.Sendable {
    /// The device key.
    /// This member is required.
    public var deviceKey: Swift.String?
    /// The status indicating whether a device has been remembered or not.
    public var deviceRememberedStatus: CognitoIdentityProviderClientTypes.DeviceRememberedStatusType?
    /// The user pool ID.
    /// This member is required.
    public var userPoolId: Swift.String?
    /// The username of the user that you want to query or modify. The value of this parameter is typically your user's username, but it can be any of their alias attributes. If username isn't an alias attribute in your user pool, this value must be the sub of a local user or the username of a user from a third-party IdP.
    /// This member is required.
    public var username: Swift.String?

    public init(
        deviceKey: Swift.String? = nil,
        deviceRememberedStatus: CognitoIdentityProviderClientTypes.DeviceRememberedStatusType? = nil,
        userPoolId: Swift.String? = nil,
        username: Swift.String? = nil
    )
    {
        self.deviceKey = deviceKey
        self.deviceRememberedStatus = deviceRememberedStatus
        self.userPoolId = userPoolId
        self.username = username
    }
}

extension AdminUpdateDeviceStatusInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AdminUpdateDeviceStatusInput(deviceKey: \(Swift.String(describing: deviceKey)), deviceRememberedStatus: \(Swift.String(describing: deviceRememberedStatus)), userPoolId: \(Swift.String(describing: userPoolId)), username: \"CONTENT_REDACTED\")"}
}

/// The status response to the request to update the device, as an administrator.
public struct AdminUpdateDeviceStatusOutput: Swift.Sendable {

    public init() { }
}

/// Represents the request to update the user's attributes as an administrator.
public struct AdminUpdateUserAttributesInput: Swift.Sendable {
    /// A map of custom key-value pairs that you can provide as input for any custom workflows that this action triggers. You create custom workflows by assigning Lambda functions to user pool triggers. When you use the AdminUpdateUserAttributes API action, Amazon Cognito invokes the function that is assigned to the custom message trigger. When Amazon Cognito invokes this function, it passes a JSON payload, which the function receives as input. This payload contains a clientMetadata attribute, which provides the data that you assigned to the ClientMetadata parameter in your AdminUpdateUserAttributes request. In your function code in Lambda, you can process the clientMetadata value to enhance your workflow for your specific needs. For more information, see [ Customizing user pool Workflows with Lambda Triggers](https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools-working-with-aws-lambda-triggers.html) in the Amazon Cognito Developer Guide. When you use the ClientMetadata parameter, remember that Amazon Cognito won't do the following:
    ///
    /// * Store the ClientMetadata value. This data is available only to Lambda triggers that are assigned to a user pool to support custom workflows. If your user pool configuration doesn't include triggers, the ClientMetadata parameter serves no purpose.
    ///
    /// * Validate the ClientMetadata value.
    ///
    /// * Encrypt the ClientMetadata value. Don't use Amazon Cognito to provide sensitive information.
    public var clientMetadata: [Swift.String: Swift.String]?
    /// An array of name-value pairs representing user attributes. For custom attributes, you must prepend the custom: prefix to the attribute name. If your user pool requires verification before Amazon Cognito updates an attribute value that you specify in this request, Amazon Cognito doesn’t immediately update the value of that attribute. After your user receives and responds to a verification message to verify the new value, Amazon Cognito updates the attribute value. Your user can sign in and receive messages with the original attribute value until they verify the new value. To update the value of an attribute that requires verification in the same API request, include the email_verified or phone_number_verified attribute, with a value of true. If you set the email_verified or phone_number_verified value for an email or phone_number attribute that requires verification to true, Amazon Cognito doesn’t send a verification message to your user.
    /// This member is required.
    public var userAttributes: [CognitoIdentityProviderClientTypes.AttributeType]?
    /// The user pool ID for the user pool where you want to update user attributes.
    /// This member is required.
    public var userPoolId: Swift.String?
    /// The username of the user that you want to query or modify. The value of this parameter is typically your user's username, but it can be any of their alias attributes. If username isn't an alias attribute in your user pool, this value must be the sub of a local user or the username of a user from a third-party IdP.
    /// This member is required.
    public var username: Swift.String?

    public init(
        clientMetadata: [Swift.String: Swift.String]? = nil,
        userAttributes: [CognitoIdentityProviderClientTypes.AttributeType]? = nil,
        userPoolId: Swift.String? = nil,
        username: Swift.String? = nil
    )
    {
        self.clientMetadata = clientMetadata
        self.userAttributes = userAttributes
        self.userPoolId = userPoolId
        self.username = username
    }
}

extension AdminUpdateUserAttributesInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AdminUpdateUserAttributesInput(clientMetadata: \(Swift.String(describing: clientMetadata)), userAttributes: \(Swift.String(describing: userAttributes)), userPoolId: \(Swift.String(describing: userPoolId)), username: \"CONTENT_REDACTED\")"}
}

/// Represents the response from the server for the request to update user attributes as an administrator.
public struct AdminUpdateUserAttributesOutput: Swift.Sendable {

    public init() { }
}

/// The request to sign out of all devices, as an administrator.
public struct AdminUserGlobalSignOutInput: Swift.Sendable {
    /// The user pool ID.
    /// This member is required.
    public var userPoolId: Swift.String?
    /// The username of the user that you want to query or modify. The value of this parameter is typically your user's username, but it can be any of their alias attributes. If username isn't an alias attribute in your user pool, this value must be the sub of a local user or the username of a user from a third-party IdP.
    /// This member is required.
    public var username: Swift.String?

    public init(
        userPoolId: Swift.String? = nil,
        username: Swift.String? = nil
    )
    {
        self.userPoolId = userPoolId
        self.username = username
    }
}

extension AdminUserGlobalSignOutInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AdminUserGlobalSignOutInput(userPoolId: \(Swift.String(describing: userPoolId)), username: \"CONTENT_REDACTED\")"}
}

/// The global sign-out response, as an administrator.
public struct AdminUserGlobalSignOutOutput: Swift.Sendable {

    public init() { }
}

extension CognitoIdentityProviderClientTypes {

    public enum AdvancedSecurityEnabledModeType: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case audit
        case enforced
        case sdkUnknown(Swift.String)

        public static var allCases: [AdvancedSecurityEnabledModeType] {
            return [
                .audit,
                .enforced
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .audit: return "AUDIT"
            case .enforced: return "ENFORCED"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension CognitoIdentityProviderClientTypes {

    /// Advanced security configuration options for additional authentication types in your user pool, including custom authentication.
    public struct AdvancedSecurityAdditionalFlowsType: Swift.Sendable {
        /// The operating mode of advanced security features in custom authentication with [ Custom authentication challenge Lambda triggers](https://docs.aws.amazon.com/cognito/latest/developerguide/user-pool-lambda-challenge.html).
        public var customAuthMode: CognitoIdentityProviderClientTypes.AdvancedSecurityEnabledModeType?

        public init(
            customAuthMode: CognitoIdentityProviderClientTypes.AdvancedSecurityEnabledModeType? = nil
        )
        {
            self.customAuthMode = customAuthMode
        }
    }
}

extension CognitoIdentityProviderClientTypes {

    public enum AdvancedSecurityModeType: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case audit
        case enforced
        case off
        case sdkUnknown(Swift.String)

        public static var allCases: [AdvancedSecurityModeType] {
            return [
                .audit,
                .enforced,
                .off
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .audit: return "AUDIT"
            case .enforced: return "ENFORCED"
            case .off: return "OFF"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension CognitoIdentityProviderClientTypes {

    public enum AliasAttributeType: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case email
        case phoneNumber
        case preferredUsername
        case sdkUnknown(Swift.String)

        public static var allCases: [AliasAttributeType] {
            return [
                .email,
                .phoneNumber,
                .preferredUsername
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .email: return "email"
            case .phoneNumber: return "phone_number"
            case .preferredUsername: return "preferred_username"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension CognitoIdentityProviderClientTypes {

    /// The Amazon Pinpoint analytics configuration necessary to collect metrics for a user pool. In Regions where Amazon Pinpoint isn't available, user pools only support sending events to Amazon Pinpoint projects in us-east-1. In Regions where Amazon Pinpoint is available, user pools support sending events to Amazon Pinpoint projects within that same Region.
    public struct AnalyticsConfigurationType: Swift.Sendable {
        /// The Amazon Resource Name (ARN) of an Amazon Pinpoint project. You can use the Amazon Pinpoint project to integrate with the chosen user pool Client. Amazon Cognito publishes events to the Amazon Pinpoint project that the app ARN declares.
        public var applicationArn: Swift.String?
        /// The application ID for an Amazon Pinpoint application.
        public var applicationId: Swift.String?
        /// The external ID.
        public var externalId: Swift.String?
        /// The ARN of an Identity and Access Management role that authorizes Amazon Cognito to publish events to Amazon Pinpoint analytics.
        public var roleArn: Swift.String?
        /// If UserDataShared is true, Amazon Cognito includes user data in the events that it publishes to Amazon Pinpoint analytics.
        public var userDataShared: Swift.Bool

        public init(
            applicationArn: Swift.String? = nil,
            applicationId: Swift.String? = nil,
            externalId: Swift.String? = nil,
            roleArn: Swift.String? = nil,
            userDataShared: Swift.Bool = false
        )
        {
            self.applicationArn = applicationArn
            self.applicationId = applicationId
            self.externalId = externalId
            self.roleArn = roleArn
            self.userDataShared = userDataShared
        }
    }
}

/// This exception is thrown if two or more modifications are happening concurrently.
public struct ConcurrentModificationException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// The message provided when the concurrent exception is thrown.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ConcurrentModificationException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// This exception is thrown when WAF doesn't allow your request based on a web ACL that's associated with your user pool.
public struct ForbiddenException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// The message returned when WAF doesn't allow your request based on a web ACL that's associated with your user pool.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ForbiddenException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

public struct AssociateSoftwareTokenInput: Swift.Sendable {
    /// A valid access token that Amazon Cognito issued to the user whose software token you want to generate.
    public var accessToken: Swift.String?
    /// The session that should be passed both ways in challenge-response calls to the service. This allows authentication of the user as part of the MFA setup process.
    public var session: Swift.String?

    public init(
        accessToken: Swift.String? = nil,
        session: Swift.String? = nil
    )
    {
        self.accessToken = accessToken
        self.session = session
    }
}

extension AssociateSoftwareTokenInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AssociateSoftwareTokenInput(accessToken: \"CONTENT_REDACTED\", session: \"CONTENT_REDACTED\")"}
}

public struct AssociateSoftwareTokenOutput: Swift.Sendable {
    /// A unique generated shared secret code that is used in the TOTP algorithm to generate a one-time code.
    public var secretCode: Swift.String?
    /// The session that should be passed both ways in challenge-response calls to the service. This allows authentication of the user as part of the MFA setup process.
    public var session: Swift.String?

    public init(
        secretCode: Swift.String? = nil,
        session: Swift.String? = nil
    )
    {
        self.secretCode = secretCode
        self.session = session
    }
}

extension AssociateSoftwareTokenOutput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AssociateSoftwareTokenOutput(secretCode: \"CONTENT_REDACTED\", session: \"CONTENT_REDACTED\")"}
}

extension CognitoIdentityProviderClientTypes {

    public enum VerifiedAttributeType: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case email
        case phoneNumber
        case sdkUnknown(Swift.String)

        public static var allCases: [VerifiedAttributeType] {
            return [
                .email,
                .phoneNumber
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .email: return "email"
            case .phoneNumber: return "phone_number"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

/// Represents the request to change a user password.
public struct ChangePasswordInput: Swift.Sendable {
    /// A valid access token that Amazon Cognito issued to the user whose password you want to change.
    /// This member is required.
    public var accessToken: Swift.String?
    /// The old password.
    /// This member is required.
    public var previousPassword: Swift.String?
    /// The new password.
    /// This member is required.
    public var proposedPassword: Swift.String?

    public init(
        accessToken: Swift.String? = nil,
        previousPassword: Swift.String? = nil,
        proposedPassword: Swift.String? = nil
    )
    {
        self.accessToken = accessToken
        self.previousPassword = previousPassword
        self.proposedPassword = proposedPassword
    }
}

extension ChangePasswordInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ChangePasswordInput(accessToken: \"CONTENT_REDACTED\", previousPassword: \"CONTENT_REDACTED\", proposedPassword: \"CONTENT_REDACTED\")"}
}

/// The response from the server to the change password request.
public struct ChangePasswordOutput: Swift.Sendable {

    public init() { }
}

extension CognitoIdentityProviderClientTypes {

    /// The device verifier against which it is authenticated.
    public struct DeviceSecretVerifierConfigType: Swift.Sendable {
        /// The password verifier.
        public var passwordVerifier: Swift.String?
        /// The [salt](https://en.wikipedia.org/wiki/Salt_(cryptography))
        public var salt: Swift.String?

        public init(
            passwordVerifier: Swift.String? = nil,
            salt: Swift.String? = nil
        )
        {
            self.passwordVerifier = passwordVerifier
            self.salt = salt
        }
    }
}

/// Confirms the device request.
public struct ConfirmDeviceInput: Swift.Sendable {
    /// A valid access token that Amazon Cognito issued to the user whose device you want to confirm.
    /// This member is required.
    public var accessToken: Swift.String?
    /// The device key.
    /// This member is required.
    public var deviceKey: Swift.String?
    /// The device name.
    public var deviceName: Swift.String?
    /// The configuration of the device secret verifier.
    public var deviceSecretVerifierConfig: CognitoIdentityProviderClientTypes.DeviceSecretVerifierConfigType?

    public init(
        accessToken: Swift.String? = nil,
        deviceKey: Swift.String? = nil,
        deviceName: Swift.String? = nil,
        deviceSecretVerifierConfig: CognitoIdentityProviderClientTypes.DeviceSecretVerifierConfigType? = nil
    )
    {
        self.accessToken = accessToken
        self.deviceKey = deviceKey
        self.deviceName = deviceName
        self.deviceSecretVerifierConfig = deviceSecretVerifierConfig
    }
}

extension ConfirmDeviceInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ConfirmDeviceInput(deviceKey: \(Swift.String(describing: deviceKey)), deviceName: \(Swift.String(describing: deviceName)), deviceSecretVerifierConfig: \(Swift.String(describing: deviceSecretVerifierConfig)), accessToken: \"CONTENT_REDACTED\")"}
}

/// Confirms the device response.
public struct ConfirmDeviceOutput: Swift.Sendable {
    /// Indicates whether the user confirmation must confirm the device response.
    public var userConfirmationNecessary: Swift.Bool

    public init(
        userConfirmationNecessary: Swift.Bool = false
    )
    {
        self.userConfirmationNecessary = userConfirmationNecessary
    }
}

extension CognitoIdentityProviderClientTypes {

    /// Contextual data, such as the user's device fingerprint, IP address, or location, used for evaluating the risk of an unexpected event by Amazon Cognito advanced security.
    public struct UserContextDataType: Swift.Sendable {
        /// Encoded device-fingerprint details that your app collected with the Amazon Cognito context data collection library. For more information, see [Adding user device and session data to API requests](https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-pool-settings-adaptive-authentication.html#user-pool-settings-adaptive-authentication-device-fingerprint).
        public var encodedData: Swift.String?
        /// The source IP address of your user's device.
        public var ipAddress: Swift.String?

        public init(
            encodedData: Swift.String? = nil,
            ipAddress: Swift.String? = nil
        )
        {
            self.encodedData = encodedData
            self.ipAddress = ipAddress
        }
    }
}

extension CognitoIdentityProviderClientTypes.UserContextDataType: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CONTENT_REDACTED"
    }
}

/// The request representing the confirmation for a password reset.
public struct ConfirmForgotPasswordInput: Swift.Sendable {
    /// The Amazon Pinpoint analytics metadata for collecting metrics for ConfirmForgotPassword calls.
    public var analyticsMetadata: CognitoIdentityProviderClientTypes.AnalyticsMetadataType?
    /// The app client ID of the app associated with the user pool.
    /// This member is required.
    public var clientId: Swift.String?
    /// A map of custom key-value pairs that you can provide as input for any custom workflows that this action triggers. You create custom workflows by assigning Lambda functions to user pool triggers. When you use the ConfirmForgotPassword API action, Amazon Cognito invokes the function that is assigned to the post confirmation trigger. When Amazon Cognito invokes this function, it passes a JSON payload, which the function receives as input. This payload contains a clientMetadata attribute, which provides the data that you assigned to the ClientMetadata parameter in your ConfirmForgotPassword request. In your function code in Lambda, you can process the clientMetadata value to enhance your workflow for your specific needs. For more information, see [ Customizing user pool Workflows with Lambda Triggers](https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools-working-with-aws-lambda-triggers.html) in the Amazon Cognito Developer Guide. When you use the ClientMetadata parameter, remember that Amazon Cognito won't do the following:
    ///
    /// * Store the ClientMetadata value. This data is available only to Lambda triggers that are assigned to a user pool to support custom workflows. If your user pool configuration doesn't include triggers, the ClientMetadata parameter serves no purpose.
    ///
    /// * Validate the ClientMetadata value.
    ///
    /// * Encrypt the ClientMetadata value. Don't use Amazon Cognito to provide sensitive information.
    public var clientMetadata: [Swift.String: Swift.String]?
    /// The confirmation code from your user's request to reset their password. For more information, see [ForgotPassword](https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_ForgotPassword.html).
    /// This member is required.
    public var confirmationCode: Swift.String?
    /// The new password that your user wants to set.
    /// This member is required.
    public var password: Swift.String?
    /// A keyed-hash message authentication code (HMAC) calculated using the secret key of a user pool client and username plus the client ID in the message. For more information about SecretHash, see [Computing secret hash values](https://docs.aws.amazon.com/cognito/latest/developerguide/signing-up-users-in-your-app.html#cognito-user-pools-computing-secret-hash).
    public var secretHash: Swift.String?
    /// Contextual data about your user session, such as the device fingerprint, IP address, or location. Amazon Cognito advanced security evaluates the risk of an authentication event based on the context that your app generates and passes to Amazon Cognito when it makes API requests.
    public var userContextData: CognitoIdentityProviderClientTypes.UserContextDataType?
    /// The username of the user that you want to query or modify. The value of this parameter is typically your user's username, but it can be any of their alias attributes. If username isn't an alias attribute in your user pool, this value must be the sub of a local user or the username of a user from a third-party IdP.
    /// This member is required.
    public var username: Swift.String?

    public init(
        analyticsMetadata: CognitoIdentityProviderClientTypes.AnalyticsMetadataType? = nil,
        clientId: Swift.String? = nil,
        clientMetadata: [Swift.String: Swift.String]? = nil,
        confirmationCode: Swift.String? = nil,
        password: Swift.String? = nil,
        secretHash: Swift.String? = nil,
        userContextData: CognitoIdentityProviderClientTypes.UserContextDataType? = nil,
        username: Swift.String? = nil
    )
    {
        self.analyticsMetadata = analyticsMetadata
        self.clientId = clientId
        self.clientMetadata = clientMetadata
        self.confirmationCode = confirmationCode
        self.password = password
        self.secretHash = secretHash
        self.userContextData = userContextData
        self.username = username
    }
}

extension ConfirmForgotPasswordInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ConfirmForgotPasswordInput(analyticsMetadata: \(Swift.String(describing: analyticsMetadata)), clientMetadata: \(Swift.String(describing: clientMetadata)), confirmationCode: \(Swift.String(describing: confirmationCode)), clientId: \"CONTENT_REDACTED\", password: \"CONTENT_REDACTED\", secretHash: \"CONTENT_REDACTED\", userContextData: \"CONTENT_REDACTED\", username: \"CONTENT_REDACTED\")"}
}

/// The response from the server that results from a user's request to retrieve a forgotten password.
public struct ConfirmForgotPasswordOutput: Swift.Sendable {

    public init() { }
}

/// Represents the request to confirm registration of a user.
public struct ConfirmSignUpInput: Swift.Sendable {
    /// The Amazon Pinpoint analytics metadata for collecting metrics for ConfirmSignUp calls.
    public var analyticsMetadata: CognitoIdentityProviderClientTypes.AnalyticsMetadataType?
    /// The ID of the app client associated with the user pool.
    /// This member is required.
    public var clientId: Swift.String?
    /// A map of custom key-value pairs that you can provide as input for any custom workflows that this action triggers. You create custom workflows by assigning Lambda functions to user pool triggers. When you use the ConfirmSignUp API action, Amazon Cognito invokes the function that is assigned to the post confirmation trigger. When Amazon Cognito invokes this function, it passes a JSON payload, which the function receives as input. This payload contains a clientMetadata attribute, which provides the data that you assigned to the ClientMetadata parameter in your ConfirmSignUp request. In your function code in Lambda, you can process the clientMetadata value to enhance your workflow for your specific needs. For more information, see [ Customizing user pool Workflows with Lambda Triggers](https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools-working-with-aws-lambda-triggers.html) in the Amazon Cognito Developer Guide. When you use the ClientMetadata parameter, remember that Amazon Cognito won't do the following:
    ///
    /// * Store the ClientMetadata value. This data is available only to Lambda triggers that are assigned to a user pool to support custom workflows. If your user pool configuration doesn't include triggers, the ClientMetadata parameter serves no purpose.
    ///
    /// * Validate the ClientMetadata value.
    ///
    /// * Encrypt the ClientMetadata value. Don't use Amazon Cognito to provide sensitive information.
    public var clientMetadata: [Swift.String: Swift.String]?
    /// The confirmation code sent by a user's request to confirm registration.
    /// This member is required.
    public var confirmationCode: Swift.String?
    /// Boolean to be specified to force user confirmation irrespective of existing alias. By default set to False. If this parameter is set to True and the phone number/email used for sign up confirmation already exists as an alias with a different user, the API call will migrate the alias from the previous user to the newly created user being confirmed. If set to False, the API will throw an AliasExistsException error.
    public var forceAliasCreation: Swift.Bool?
    /// A keyed-hash message authentication code (HMAC) calculated using the secret key of a user pool client and username plus the client ID in the message.
    public var secretHash: Swift.String?
    /// Contextual data about your user session, such as the device fingerprint, IP address, or location. Amazon Cognito advanced security evaluates the risk of an authentication event based on the context that your app generates and passes to Amazon Cognito when it makes API requests.
    public var userContextData: CognitoIdentityProviderClientTypes.UserContextDataType?
    /// The username of the user that you want to query or modify. The value of this parameter is typically your user's username, but it can be any of their alias attributes. If username isn't an alias attribute in your user pool, this value must be the sub of a local user or the username of a user from a third-party IdP.
    /// This member is required.
    public var username: Swift.String?

    public init(
        analyticsMetadata: CognitoIdentityProviderClientTypes.AnalyticsMetadataType? = nil,
        clientId: Swift.String? = nil,
        clientMetadata: [Swift.String: Swift.String]? = nil,
        confirmationCode: Swift.String? = nil,
        forceAliasCreation: Swift.Bool? = false,
        secretHash: Swift.String? = nil,
        userContextData: CognitoIdentityProviderClientTypes.UserContextDataType? = nil,
        username: Swift.String? = nil
    )
    {
        self.analyticsMetadata = analyticsMetadata
        self.clientId = clientId
        self.clientMetadata = clientMetadata
        self.confirmationCode = confirmationCode
        self.forceAliasCreation = forceAliasCreation
        self.secretHash = secretHash
        self.userContextData = userContextData
        self.username = username
    }
}

extension ConfirmSignUpInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ConfirmSignUpInput(analyticsMetadata: \(Swift.String(describing: analyticsMetadata)), clientMetadata: \(Swift.String(describing: clientMetadata)), confirmationCode: \(Swift.String(describing: confirmationCode)), forceAliasCreation: \(Swift.String(describing: forceAliasCreation)), clientId: \"CONTENT_REDACTED\", secretHash: \"CONTENT_REDACTED\", userContextData: \"CONTENT_REDACTED\", username: \"CONTENT_REDACTED\")"}
}

/// Represents the response from the server for the registration confirmation.
public struct ConfirmSignUpOutput: Swift.Sendable {

    public init() { }
}

/// This exception is thrown when Amazon Cognito encounters a group that already exists in the user pool.
public struct GroupExistsException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "GroupExistsException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

public struct CreateGroupInput: Swift.Sendable {
    /// A string containing the description of the group.
    public var description: Swift.String?
    /// The name of the group. Must be unique.
    /// This member is required.
    public var groupName: Swift.String?
    /// A non-negative integer value that specifies the precedence of this group relative to the other groups that a user can belong to in the user pool. Zero is the highest precedence value. Groups with lower Precedence values take precedence over groups with higher or null Precedence values. If a user belongs to two or more groups, it is the group with the lowest precedence value whose role ARN is given in the user's tokens for the cognito:roles and cognito:preferred_role claims. Two groups can have the same Precedence value. If this happens, neither group takes precedence over the other. If two groups with the same Precedence have the same role ARN, that role is used in the cognito:preferred_role claim in tokens for users in each group. If the two groups have different role ARNs, the cognito:preferred_role claim isn't set in users' tokens. The default Precedence value is null. The maximum Precedence value is 2^31-1.
    public var precedence: Swift.Int?
    /// The role Amazon Resource Name (ARN) for the group.
    public var roleArn: Swift.String?
    /// The user pool ID for the user pool.
    /// This member is required.
    public var userPoolId: Swift.String?

    public init(
        description: Swift.String? = nil,
        groupName: Swift.String? = nil,
        precedence: Swift.Int? = nil,
        roleArn: Swift.String? = nil,
        userPoolId: Swift.String? = nil
    )
    {
        self.description = description
        self.groupName = groupName
        self.precedence = precedence
        self.roleArn = roleArn
        self.userPoolId = userPoolId
    }
}

public struct CreateGroupOutput: Swift.Sendable {
    /// The group object for the group.
    public var group: CognitoIdentityProviderClientTypes.GroupType?

    public init(
        group: CognitoIdentityProviderClientTypes.GroupType? = nil
    )
    {
        self.group = group
    }
}

/// This exception is thrown when the provider is already supported by the user pool.
public struct DuplicateProviderException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "DuplicateProviderException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension CognitoIdentityProviderClientTypes {

    public enum IdentityProviderTypeType: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case facebook
        case google
        case loginwithamazon
        case oidc
        case saml
        case signinwithapple
        case sdkUnknown(Swift.String)

        public static var allCases: [IdentityProviderTypeType] {
            return [
                .facebook,
                .google,
                .loginwithamazon,
                .oidc,
                .saml,
                .signinwithapple
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .facebook: return "Facebook"
            case .google: return "Google"
            case .loginwithamazon: return "LoginWithAmazon"
            case .oidc: return "OIDC"
            case .saml: return "SAML"
            case .signinwithapple: return "SignInWithApple"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

public struct CreateIdentityProviderInput: Swift.Sendable {
    /// A mapping of IdP attributes to standard and custom user pool attributes.
    public var attributeMapping: [Swift.String: Swift.String]?
    /// A list of IdP identifiers.
    public var idpIdentifiers: [Swift.String]?
    /// The scopes, URLs, and identifiers for your external identity provider. The following examples describe the provider detail keys for each IdP type. These values and their schema are subject to change. Social IdP authorize_scopes values must match the values listed here. OpenID Connect (OIDC) Amazon Cognito accepts the following elements when it can't discover endpoint URLs from oidc_issuer: attributes_url, authorize_url, jwks_uri, token_url. Create or update request: "ProviderDetails": { "attributes_request_method": "GET", "attributes_url": "https://auth.example.com/userInfo", "authorize_scopes": "openid profile email", "authorize_url": "https://auth.example.com/authorize", "client_id": "1example23456789", "client_secret": "provider-app-client-secret", "jwks_uri": "https://auth.example.com/.well-known/jwks.json", "oidc_issuer": "https://auth.example.com", "token_url": "https://example.com/token" } Describe response: "ProviderDetails": { "attributes_request_method": "GET", "attributes_url": "https://auth.example.com/userInfo", "attributes_url_add_attributes": "false", "authorize_scopes": "openid profile email", "authorize_url": "https://auth.example.com/authorize", "client_id": "1example23456789", "client_secret": "provider-app-client-secret", "jwks_uri": "https://auth.example.com/.well-known/jwks.json", "oidc_issuer": "https://auth.example.com", "token_url": "https://example.com/token" } SAML Create or update request with Metadata URL: "ProviderDetails": { "IDPInit": "true", "IDPSignout": "true", "EncryptedResponses" : "true", "MetadataURL": "https://auth.example.com/sso/saml/metadata", "RequestSigningAlgorithm": "rsa-sha256" } Create or update request with Metadata file: "ProviderDetails": { "IDPInit": "true", "IDPSignout": "true", "EncryptedResponses" : "true", "MetadataFile": "[metadata XML]", "RequestSigningAlgorithm": "rsa-sha256" } The value of MetadataFile must be the plaintext metadata document with all quote (") characters escaped by backslashes. Describe response: "ProviderDetails": { "IDPInit": "true", "IDPSignout": "true", "EncryptedResponses" : "true", "ActiveEncryptionCertificate": "[certificate]", "MetadataURL": "https://auth.example.com/sso/saml/metadata", "RequestSigningAlgorithm": "rsa-sha256", "SLORedirectBindingURI": "https://auth.example.com/slo/saml", "SSORedirectBindingURI": "https://auth.example.com/sso/saml" } LoginWithAmazon Create or update request: "ProviderDetails": { "authorize_scopes": "profile postal_code", "client_id": "amzn1.application-oa2-client.1example23456789", "client_secret": "provider-app-client-secret" Describe response: "ProviderDetails": { "attributes_url": "https://api.amazon.com/user/profile", "attributes_url_add_attributes": "false", "authorize_scopes": "profile postal_code", "authorize_url": "https://www.amazon.com/ap/oa", "client_id": "amzn1.application-oa2-client.1example23456789", "client_secret": "provider-app-client-secret", "token_request_method": "POST", "token_url": "https://api.amazon.com/auth/o2/token" } Google Create or update request: "ProviderDetails": { "authorize_scopes": "email profile openid", "client_id": "1example23456789.apps.googleusercontent.com", "client_secret": "provider-app-client-secret" } Describe response: "ProviderDetails": { "attributes_url": "https://people.googleapis.com/v1/people/me?personFields=", "attributes_url_add_attributes": "true", "authorize_scopes": "email profile openid", "authorize_url": "https://accounts.google.com/o/oauth2/v2/auth", "client_id": "1example23456789.apps.googleusercontent.com", "client_secret": "provider-app-client-secret", "oidc_issuer": "https://accounts.google.com", "token_request_method": "POST", "token_url": "https://www.googleapis.com/oauth2/v4/token" } SignInWithApple Create or update request: "ProviderDetails": { "authorize_scopes": "email name", "client_id": "com.example.cognito", "private_key": "1EXAMPLE", "key_id": "2EXAMPLE", "team_id": "3EXAMPLE" } Describe response: "ProviderDetails": { "attributes_url_add_attributes": "false", "authorize_scopes": "email name", "authorize_url": "https://appleid.apple.com/auth/authorize", "client_id": "com.example.cognito", "key_id": "1EXAMPLE", "oidc_issuer": "https://appleid.apple.com", "team_id": "2EXAMPLE", "token_request_method": "POST", "token_url": "https://appleid.apple.com/auth/token" } Facebook Create or update request: "ProviderDetails": { "api_version": "v17.0", "authorize_scopes": "public_profile, email", "client_id": "1example23456789", "client_secret": "provider-app-client-secret" } Describe response: "ProviderDetails": { "api_version": "v17.0", "attributes_url": "https://graph.facebook.com/v17.0/me?fields=", "attributes_url_add_attributes": "true", "authorize_scopes": "public_profile, email", "authorize_url": "https://www.facebook.com/v17.0/dialog/oauth", "client_id": "1example23456789", "client_secret": "provider-app-client-secret", "token_request_method": "GET", "token_url": "https://graph.facebook.com/v17.0/oauth/access_token" }
    /// This member is required.
    public var providerDetails: [Swift.String: Swift.String]?
    /// The IdP name.
    /// This member is required.
    public var providerName: Swift.String?
    /// The IdP type.
    /// This member is required.
    public var providerType: CognitoIdentityProviderClientTypes.IdentityProviderTypeType?
    /// The user pool ID.
    /// This member is required.
    public var userPoolId: Swift.String?

    public init(
        attributeMapping: [Swift.String: Swift.String]? = nil,
        idpIdentifiers: [Swift.String]? = nil,
        providerDetails: [Swift.String: Swift.String]? = nil,
        providerName: Swift.String? = nil,
        providerType: CognitoIdentityProviderClientTypes.IdentityProviderTypeType? = nil,
        userPoolId: Swift.String? = nil
    )
    {
        self.attributeMapping = attributeMapping
        self.idpIdentifiers = idpIdentifiers
        self.providerDetails = providerDetails
        self.providerName = providerName
        self.providerType = providerType
        self.userPoolId = userPoolId
    }
}

extension CognitoIdentityProviderClientTypes {

    /// A container for information about an IdP.
    public struct IdentityProviderType: Swift.Sendable {
        /// A mapping of IdP attributes to standard and custom user pool attributes.
        public var attributeMapping: [Swift.String: Swift.String]?
        /// The date and time when the item was created. Amazon Cognito returns this timestamp in UNIX epoch time format. Your SDK might render the output in a human-readable format like ISO 8601 or a Java Date object.
        public var creationDate: Foundation.Date?
        /// A list of IdP identifiers.
        public var idpIdentifiers: [Swift.String]?
        /// The date and time when the item was modified. Amazon Cognito returns this timestamp in UNIX epoch time format. Your SDK might render the output in a human-readable format like ISO 8601 or a Java Date object.
        public var lastModifiedDate: Foundation.Date?
        /// The scopes, URLs, and identifiers for your external identity provider. The following examples describe the provider detail keys for each IdP type. These values and their schema are subject to change. Social IdP authorize_scopes values must match the values listed here. OpenID Connect (OIDC) Amazon Cognito accepts the following elements when it can't discover endpoint URLs from oidc_issuer: attributes_url, authorize_url, jwks_uri, token_url. Create or update request: "ProviderDetails": { "attributes_request_method": "GET", "attributes_url": "https://auth.example.com/userInfo", "authorize_scopes": "openid profile email", "authorize_url": "https://auth.example.com/authorize", "client_id": "1example23456789", "client_secret": "provider-app-client-secret", "jwks_uri": "https://auth.example.com/.well-known/jwks.json", "oidc_issuer": "https://auth.example.com", "token_url": "https://example.com/token" } Describe response: "ProviderDetails": { "attributes_request_method": "GET", "attributes_url": "https://auth.example.com/userInfo", "attributes_url_add_attributes": "false", "authorize_scopes": "openid profile email", "authorize_url": "https://auth.example.com/authorize", "client_id": "1example23456789", "client_secret": "provider-app-client-secret", "jwks_uri": "https://auth.example.com/.well-known/jwks.json", "oidc_issuer": "https://auth.example.com", "token_url": "https://example.com/token" } SAML Create or update request with Metadata URL: "ProviderDetails": { "IDPInit": "true", "IDPSignout": "true", "EncryptedResponses" : "true", "MetadataURL": "https://auth.example.com/sso/saml/metadata", "RequestSigningAlgorithm": "rsa-sha256" } Create or update request with Metadata file: "ProviderDetails": { "IDPInit": "true", "IDPSignout": "true", "EncryptedResponses" : "true", "MetadataFile": "[metadata XML]", "RequestSigningAlgorithm": "rsa-sha256" } The value of MetadataFile must be the plaintext metadata document with all quote (") characters escaped by backslashes. Describe response: "ProviderDetails": { "IDPInit": "true", "IDPSignout": "true", "EncryptedResponses" : "true", "ActiveEncryptionCertificate": "[certificate]", "MetadataURL": "https://auth.example.com/sso/saml/metadata", "RequestSigningAlgorithm": "rsa-sha256", "SLORedirectBindingURI": "https://auth.example.com/slo/saml", "SSORedirectBindingURI": "https://auth.example.com/sso/saml" } LoginWithAmazon Create or update request: "ProviderDetails": { "authorize_scopes": "profile postal_code", "client_id": "amzn1.application-oa2-client.1example23456789", "client_secret": "provider-app-client-secret" Describe response: "ProviderDetails": { "attributes_url": "https://api.amazon.com/user/profile", "attributes_url_add_attributes": "false", "authorize_scopes": "profile postal_code", "authorize_url": "https://www.amazon.com/ap/oa", "client_id": "amzn1.application-oa2-client.1example23456789", "client_secret": "provider-app-client-secret", "token_request_method": "POST", "token_url": "https://api.amazon.com/auth/o2/token" } Google Create or update request: "ProviderDetails": { "authorize_scopes": "email profile openid", "client_id": "1example23456789.apps.googleusercontent.com", "client_secret": "provider-app-client-secret" } Describe response: "ProviderDetails": { "attributes_url": "https://people.googleapis.com/v1/people/me?personFields=", "attributes_url_add_attributes": "true", "authorize_scopes": "email profile openid", "authorize_url": "https://accounts.google.com/o/oauth2/v2/auth", "client_id": "1example23456789.apps.googleusercontent.com", "client_secret": "provider-app-client-secret", "oidc_issuer": "https://accounts.google.com", "token_request_method": "POST", "token_url": "https://www.googleapis.com/oauth2/v4/token" } SignInWithApple Create or update request: "ProviderDetails": { "authorize_scopes": "email name", "client_id": "com.example.cognito", "private_key": "1EXAMPLE", "key_id": "2EXAMPLE", "team_id": "3EXAMPLE" } Describe response: "ProviderDetails": { "attributes_url_add_attributes": "false", "authorize_scopes": "email name", "authorize_url": "https://appleid.apple.com/auth/authorize", "client_id": "com.example.cognito", "key_id": "1EXAMPLE", "oidc_issuer": "https://appleid.apple.com", "team_id": "2EXAMPLE", "token_request_method": "POST", "token_url": "https://appleid.apple.com/auth/token" } Facebook Create or update request: "ProviderDetails": { "api_version": "v17.0", "authorize_scopes": "public_profile, email", "client_id": "1example23456789", "client_secret": "provider-app-client-secret" } Describe response: "ProviderDetails": { "api_version": "v17.0", "attributes_url": "https://graph.facebook.com/v17.0/me?fields=", "attributes_url_add_attributes": "true", "authorize_scopes": "public_profile, email", "authorize_url": "https://www.facebook.com/v17.0/dialog/oauth", "client_id": "1example23456789", "client_secret": "provider-app-client-secret", "token_request_method": "GET", "token_url": "https://graph.facebook.com/v17.0/oauth/access_token" }
        public var providerDetails: [Swift.String: Swift.String]?
        /// The IdP name.
        public var providerName: Swift.String?
        /// The IdP type.
        public var providerType: CognitoIdentityProviderClientTypes.IdentityProviderTypeType?
        /// The user pool ID.
        public var userPoolId: Swift.String?

        public init(
            attributeMapping: [Swift.String: Swift.String]? = nil,
            creationDate: Foundation.Date? = nil,
            idpIdentifiers: [Swift.String]? = nil,
            lastModifiedDate: Foundation.Date? = nil,
            providerDetails: [Swift.String: Swift.String]? = nil,
            providerName: Swift.String? = nil,
            providerType: CognitoIdentityProviderClientTypes.IdentityProviderTypeType? = nil,
            userPoolId: Swift.String? = nil
        )
        {
            self.attributeMapping = attributeMapping
            self.creationDate = creationDate
            self.idpIdentifiers = idpIdentifiers
            self.lastModifiedDate = lastModifiedDate
            self.providerDetails = providerDetails
            self.providerName = providerName
            self.providerType = providerType
            self.userPoolId = userPoolId
        }
    }
}

public struct CreateIdentityProviderOutput: Swift.Sendable {
    /// The newly created IdP object.
    /// This member is required.
    public var identityProvider: CognitoIdentityProviderClientTypes.IdentityProviderType?

    public init(
        identityProvider: CognitoIdentityProviderClientTypes.IdentityProviderType? = nil
    )
    {
        self.identityProvider = identityProvider
    }
}

extension CognitoIdentityProviderClientTypes {

    /// A resource server scope.
    public struct ResourceServerScopeType: Swift.Sendable {
        /// A description of the scope.
        /// This member is required.
        public var scopeDescription: Swift.String?
        /// The name of the scope.
        /// This member is required.
        public var scopeName: Swift.String?

        public init(
            scopeDescription: Swift.String? = nil,
            scopeName: Swift.String? = nil
        )
        {
            self.scopeDescription = scopeDescription
            self.scopeName = scopeName
        }
    }
}

public struct CreateResourceServerInput: Swift.Sendable {
    /// A unique resource server identifier for the resource server. The identifier can be an API friendly name like solar-system-data. You can also set an API URL like https://solar-system-data-api.example.com as your identifier. Amazon Cognito represents scopes in the access token in the format $resource-server-identifier/$scope. Longer scope-identifier strings increase the size of your access tokens.
    /// This member is required.
    public var identifier: Swift.String?
    /// A friendly name for the resource server.
    /// This member is required.
    public var name: Swift.String?
    /// A list of scopes. Each scope is a key-value map with the keys name and description.
    public var scopes: [CognitoIdentityProviderClientTypes.ResourceServerScopeType]?
    /// The user pool ID for the user pool.
    /// This member is required.
    public var userPoolId: Swift.String?

    public init(
        identifier: Swift.String? = nil,
        name: Swift.String? = nil,
        scopes: [CognitoIdentityProviderClientTypes.ResourceServerScopeType]? = nil,
        userPoolId: Swift.String? = nil
    )
    {
        self.identifier = identifier
        self.name = name
        self.scopes = scopes
        self.userPoolId = userPoolId
    }
}

extension CognitoIdentityProviderClientTypes {

    /// A container for information about a resource server for a user pool.
    public struct ResourceServerType: Swift.Sendable {
        /// A unique resource server identifier for the resource server. The identifier can be an API friendly name like solar-system-data. You can also set an API URL like https://solar-system-data-api.example.com as your identifier. Amazon Cognito represents scopes in the access token in the format $resource-server-identifier/$scope. Longer scope-identifier strings increase the size of your access tokens.
        public var identifier: Swift.String?
        /// The name of the resource server.
        public var name: Swift.String?
        /// A list of scopes that are defined for the resource server.
        public var scopes: [CognitoIdentityProviderClientTypes.ResourceServerScopeType]?
        /// The user pool ID for the user pool that hosts the resource server.
        public var userPoolId: Swift.String?

        public init(
            identifier: Swift.String? = nil,
            name: Swift.String? = nil,
            scopes: [CognitoIdentityProviderClientTypes.ResourceServerScopeType]? = nil,
            userPoolId: Swift.String? = nil
        )
        {
            self.identifier = identifier
            self.name = name
            self.scopes = scopes
            self.userPoolId = userPoolId
        }
    }
}

public struct CreateResourceServerOutput: Swift.Sendable {
    /// The newly created resource server.
    /// This member is required.
    public var resourceServer: CognitoIdentityProviderClientTypes.ResourceServerType?

    public init(
        resourceServer: CognitoIdentityProviderClientTypes.ResourceServerType? = nil
    )
    {
        self.resourceServer = resourceServer
    }
}

/// Represents the request to create the user import job.
public struct CreateUserImportJobInput: Swift.Sendable {
    /// The role ARN for the Amazon CloudWatch Logs Logging role for the user import job.
    /// This member is required.
    public var cloudWatchLogsRoleArn: Swift.String?
    /// The job name for the user import job.
    /// This member is required.
    public var jobName: Swift.String?
    /// The user pool ID for the user pool that the users are being imported into.
    /// This member is required.
    public var userPoolId: Swift.String?

    public init(
        cloudWatchLogsRoleArn: Swift.String? = nil,
        jobName: Swift.String? = nil,
        userPoolId: Swift.String? = nil
    )
    {
        self.cloudWatchLogsRoleArn = cloudWatchLogsRoleArn
        self.jobName = jobName
        self.userPoolId = userPoolId
    }
}

extension CognitoIdentityProviderClientTypes {

    public enum UserImportJobStatusType: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case created
        case expired
        case failed
        case inprogress
        case pending
        case stopped
        case stopping
        case succeeded
        case sdkUnknown(Swift.String)

        public static var allCases: [UserImportJobStatusType] {
            return [
                .created,
                .expired,
                .failed,
                .inprogress,
                .pending,
                .stopped,
                .stopping,
                .succeeded
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .created: return "Created"
            case .expired: return "Expired"
            case .failed: return "Failed"
            case .inprogress: return "InProgress"
            case .pending: return "Pending"
            case .stopped: return "Stopped"
            case .stopping: return "Stopping"
            case .succeeded: return "Succeeded"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension CognitoIdentityProviderClientTypes {

    /// The user import job type.
    public struct UserImportJobType: Swift.Sendable {
        /// The role Amazon Resource Name (ARN) for the Amazon CloudWatch Logging role for the user import job. For more information, see "Creating the CloudWatch Logs IAM Role" in the Amazon Cognito Developer Guide.
        public var cloudWatchLogsRoleArn: Swift.String?
        /// The date when the user import job was completed.
        public var completionDate: Foundation.Date?
        /// The message returned when the user import job is completed.
        public var completionMessage: Swift.String?
        /// The date and time when the item was created. Amazon Cognito returns this timestamp in UNIX epoch time format. Your SDK might render the output in a human-readable format like ISO 8601 or a Java Date object.
        public var creationDate: Foundation.Date?
        /// The number of users that couldn't be imported.
        public var failedUsers: Swift.Int
        /// The number of users that were successfully imported.
        public var importedUsers: Swift.Int
        /// The job ID for the user import job.
        public var jobId: Swift.String?
        /// The job name for the user import job.
        public var jobName: Swift.String?
        /// The pre-signed URL to be used to upload the .csv file.
        public var preSignedUrl: Swift.String?
        /// The number of users that were skipped.
        public var skippedUsers: Swift.Int
        /// The date when the user import job was started.
        public var startDate: Foundation.Date?
        /// The status of the user import job. One of the following:
        ///
        /// * Created - The job was created but not started.
        ///
        /// * Pending - A transition state. You have started the job, but it has not begun importing users yet.
        ///
        /// * InProgress - The job has started, and users are being imported.
        ///
        /// * Stopping - You have stopped the job, but the job has not stopped importing users yet.
        ///
        /// * Stopped - You have stopped the job, and the job has stopped importing users.
        ///
        /// * Succeeded - The job has completed successfully.
        ///
        /// * Failed - The job has stopped due to an error.
        ///
        /// * Expired - You created a job, but did not start the job within 24-48 hours. All data associated with the job was deleted, and the job can't be started.
        public var status: CognitoIdentityProviderClientTypes.UserImportJobStatusType?
        /// The user pool ID for the user pool that the users are being imported into.
        public var userPoolId: Swift.String?

        public init(
            cloudWatchLogsRoleArn: Swift.String? = nil,
            completionDate: Foundation.Date? = nil,
            completionMessage: Swift.String? = nil,
            creationDate: Foundation.Date? = nil,
            failedUsers: Swift.Int = 0,
            importedUsers: Swift.Int = 0,
            jobId: Swift.String? = nil,
            jobName: Swift.String? = nil,
            preSignedUrl: Swift.String? = nil,
            skippedUsers: Swift.Int = 0,
            startDate: Foundation.Date? = nil,
            status: CognitoIdentityProviderClientTypes.UserImportJobStatusType? = nil,
            userPoolId: Swift.String? = nil
        )
        {
            self.cloudWatchLogsRoleArn = cloudWatchLogsRoleArn
            self.completionDate = completionDate
            self.completionMessage = completionMessage
            self.creationDate = creationDate
            self.failedUsers = failedUsers
            self.importedUsers = importedUsers
            self.jobId = jobId
            self.jobName = jobName
            self.preSignedUrl = preSignedUrl
            self.skippedUsers = skippedUsers
            self.startDate = startDate
            self.status = status
            self.userPoolId = userPoolId
        }
    }
}

/// Represents the response from the server to the request to create the user import job.
public struct CreateUserImportJobOutput: Swift.Sendable {
    /// The job object that represents the user import job.
    public var userImportJob: CognitoIdentityProviderClientTypes.UserImportJobType?

    public init(
        userImportJob: CognitoIdentityProviderClientTypes.UserImportJobType? = nil
    )
    {
        self.userImportJob = userImportJob
    }
}

/// This exception is thrown when a user pool tag can't be set or updated.
public struct UserPoolTaggingException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "UserPoolTaggingException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension CognitoIdentityProviderClientTypes {

    public enum DeletionProtectionType: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case active
        case inactive
        case sdkUnknown(Swift.String)

        public static var allCases: [DeletionProtectionType] {
            return [
                .active,
                .inactive
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .active: return "ACTIVE"
            case .inactive: return "INACTIVE"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension CognitoIdentityProviderClientTypes {

    /// The device-remembering configuration for a user pool. A [ DescribeUserPool](https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_DescribeUserPool.html) request returns a null value for this object when the user pool isn't configured to remember devices. When device remembering is active, you can remember a user's device with a [ConfirmDevice](https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_ConfirmDevice.html) API request. Additionally. when the property DeviceOnlyRememberedOnUserPrompt is true, you must follow ConfirmDevice with an [UpdateDeviceStatus](https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_UpdateDeviceStatus.html) API request that sets the user's device to remembered or not_remembered. To sign in with a remembered device, include DEVICE_KEY in the authentication parameters in your user's [ InitiateAuth](https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_InitiateAuth.html) request. If your app doesn't include a DEVICE_KEY parameter, the [response](https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_InitiateAuth.html#API_InitiateAuth_ResponseSyntax) from Amazon Cognito includes newly-generated DEVICE_KEY and DEVICE_GROUP_KEY values under NewDeviceMetadata. Store these values to use in future device-authentication requests. When you provide a value for any property of DeviceConfiguration, you activate the device remembering for the user pool.
    public struct DeviceConfigurationType: Swift.Sendable {
        /// When true, a remembered device can sign in with device authentication instead of SMS and time-based one-time password (TOTP) factors for multi-factor authentication (MFA). Whether or not ChallengeRequiredOnNewDevice is true, users who sign in with devices that have not been confirmed or remembered must still provide a second factor in a user pool that requires MFA.
        public var challengeRequiredOnNewDevice: Swift.Bool
        /// When true, Amazon Cognito doesn't automatically remember a user's device when your app sends a [ ConfirmDevice](https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_ConfirmDevice.html) API request. In your app, create a prompt for your user to choose whether they want to remember their device. Return the user's choice in an [ UpdateDeviceStatus](https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_UpdateDeviceStatus.html) API request. When DeviceOnlyRememberedOnUserPrompt is false, Amazon Cognito immediately remembers devices that you register in a ConfirmDevice API request.
        public var deviceOnlyRememberedOnUserPrompt: Swift.Bool

        public init(
            challengeRequiredOnNewDevice: Swift.Bool = false,
            deviceOnlyRememberedOnUserPrompt: Swift.Bool = false
        )
        {
            self.challengeRequiredOnNewDevice = challengeRequiredOnNewDevice
            self.deviceOnlyRememberedOnUserPrompt = deviceOnlyRememberedOnUserPrompt
        }
    }
}

extension CognitoIdentityProviderClientTypes {

    public enum EmailSendingAccountType: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case cognitoDefault
        case developer
        case sdkUnknown(Swift.String)

        public static var allCases: [EmailSendingAccountType] {
            return [
                .cognitoDefault,
                .developer
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .cognitoDefault: return "COGNITO_DEFAULT"
            case .developer: return "DEVELOPER"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension CognitoIdentityProviderClientTypes {

    /// The email configuration of your user pool. The email configuration type sets your preferred sending method, Amazon Web Services Region, and sender for messages from your user pool. Amazon Cognito can send email messages with Amazon Simple Email Service resources in the Amazon Web Services Region where you created your user pool, and in alternate Regions in some cases. For more information on the supported Regions, see [Email settings for Amazon Cognito user pools](https://docs.aws.amazon.com/cognito/latest/developerguide/user-pool-email.html).
    public struct EmailConfigurationType: Swift.Sendable {
        /// The set of configuration rules that can be applied to emails sent using Amazon Simple Email Service. A configuration set is applied to an email by including a reference to the configuration set in the headers of the email. Once applied, all of the rules in that configuration set are applied to the email. Configuration sets can be used to apply the following types of rules to emails: Event publishing Amazon Simple Email Service can track the number of send, delivery, open, click, bounce, and complaint events for each email sent. Use event publishing to send information about these events to other Amazon Web Services services such as and Amazon CloudWatch IP pool management When leasing dedicated IP addresses with Amazon Simple Email Service, you can create groups of IP addresses, called dedicated IP pools. You can then associate the dedicated IP pools with configuration sets.
        public var configurationSet: Swift.String?
        /// Specifies whether Amazon Cognito uses its built-in functionality to send your users email messages, or uses your Amazon Simple Email Service email configuration. Specify one of the following values: COGNITO_DEFAULT When Amazon Cognito emails your users, it uses its built-in email functionality. When you use the default option, Amazon Cognito allows only a limited number of emails each day for your user pool. For typical production environments, the default email limit is less than the required delivery volume. To achieve a higher delivery volume, specify DEVELOPER to use your Amazon SES email configuration. To look up the email delivery limit for the default option, see [Limits](https://docs.aws.amazon.com/cognito/latest/developerguide/limits.html) in the Amazon Cognito Developer Guide. The default FROM address is no-reply@verificationemail.com. To customize the FROM address, provide the Amazon Resource Name (ARN) of an Amazon SES verified email address for the SourceArn parameter. DEVELOPER When Amazon Cognito emails your users, it uses your Amazon SES configuration. Amazon Cognito calls Amazon SES on your behalf to send email from your verified email address. When you use this option, the email delivery limits are the same limits that apply to your Amazon SES verified email address in your Amazon Web Services account. If you use this option, provide the ARN of an Amazon SES verified email address for the SourceArn parameter. Before Amazon Cognito can email your users, it requires additional permissions to call Amazon SES on your behalf. When you update your user pool with this option, Amazon Cognito creates a service-linked role, which is a type of role in your Amazon Web Services account. This role contains the permissions that allow you to access Amazon SES and send email messages from your email address. For more information about the service-linked role that Amazon Cognito creates, see [Using Service-Linked Roles for Amazon Cognito](https://docs.aws.amazon.com/cognito/latest/developerguide/using-service-linked-roles.html) in the Amazon Cognito Developer Guide.
        public var emailSendingAccount: CognitoIdentityProviderClientTypes.EmailSendingAccountType?
        /// Either the sender’s email address or the sender’s name with their email address. For example, testuser@example.com or Test User . This address appears before the body of the email.
        public var from: Swift.String?
        /// The destination to which the receiver of the email should reply.
        public var replyToEmailAddress: Swift.String?
        /// The ARN of a verified email address or an address from a verified domain in Amazon SES. You can set a SourceArn email from a verified domain only with an API request. You can set a verified email address, but not an address in a verified domain, in the Amazon Cognito console. Amazon Cognito uses the email address that you provide in one of the following ways, depending on the value that you specify for the EmailSendingAccount parameter:
        ///
        /// * If you specify COGNITO_DEFAULT, Amazon Cognito uses this address as the custom FROM address when it emails your users using its built-in email account.
        ///
        /// * If you specify DEVELOPER, Amazon Cognito emails your users with this address by calling Amazon SES on your behalf.
        ///
        ///
        /// The Region value of the SourceArn parameter must indicate a supported Amazon Web Services Region of your user pool. Typically, the Region in the SourceArn and the user pool Region are the same. For more information, see [Amazon SES email configuration regions](https://docs.aws.amazon.com/cognito/latest/developerguide/user-pool-email.html#user-pool-email-developer-region-mapping) in the [Amazon Cognito Developer Guide](https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools.html).
        public var sourceArn: Swift.String?

        public init(
            configurationSet: Swift.String? = nil,
            emailSendingAccount: CognitoIdentityProviderClientTypes.EmailSendingAccountType? = nil,
            from: Swift.String? = nil,
            replyToEmailAddress: Swift.String? = nil,
            sourceArn: Swift.String? = nil
        )
        {
            self.configurationSet = configurationSet
            self.emailSendingAccount = emailSendingAccount
            self.from = from
            self.replyToEmailAddress = replyToEmailAddress
            self.sourceArn = sourceArn
        }
    }
}

extension CognitoIdentityProviderClientTypes {

    public enum CustomEmailSenderLambdaVersionType: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case v10
        case sdkUnknown(Swift.String)

        public static var allCases: [CustomEmailSenderLambdaVersionType] {
            return [
                .v10
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .v10: return "V1_0"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension CognitoIdentityProviderClientTypes {

    /// The properties of a custom email sender Lambda trigger.
    public struct CustomEmailLambdaVersionConfigType: Swift.Sendable {
        /// The Amazon Resource Name (ARN) of the function that you want to assign to your Lambda trigger.
        /// This member is required.
        public var lambdaArn: Swift.String?
        /// The user pool trigger version of the request that Amazon Cognito sends to your Lambda function. Higher-numbered versions add fields that support new features. You must use a LambdaVersion of V1_0 with a custom sender function.
        /// This member is required.
        public var lambdaVersion: CognitoIdentityProviderClientTypes.CustomEmailSenderLambdaVersionType?

        public init(
            lambdaArn: Swift.String? = nil,
            lambdaVersion: CognitoIdentityProviderClientTypes.CustomEmailSenderLambdaVersionType? = nil
        )
        {
            self.lambdaArn = lambdaArn
            self.lambdaVersion = lambdaVersion
        }
    }
}

extension CognitoIdentityProviderClientTypes {

    public enum CustomSMSSenderLambdaVersionType: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case v10
        case sdkUnknown(Swift.String)

        public static var allCases: [CustomSMSSenderLambdaVersionType] {
            return [
                .v10
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .v10: return "V1_0"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension CognitoIdentityProviderClientTypes {

    /// The properties of a custom SMS sender Lambda trigger.
    public struct CustomSMSLambdaVersionConfigType: Swift.Sendable {
        /// The Amazon Resource Name (ARN) of the function that you want to assign to your Lambda trigger.
        /// This member is required.
        public var lambdaArn: Swift.String?
        /// The user pool trigger version of the request that Amazon Cognito sends to your Lambda function. Higher-numbered versions add fields that support new features. You must use a LambdaVersion of V1_0 with a custom sender function.
        /// This member is required.
        public var lambdaVersion: CognitoIdentityProviderClientTypes.CustomSMSSenderLambdaVersionType?

        public init(
            lambdaArn: Swift.String? = nil,
            lambdaVersion: CognitoIdentityProviderClientTypes.CustomSMSSenderLambdaVersionType? = nil
        )
        {
            self.lambdaArn = lambdaArn
            self.lambdaVersion = lambdaVersion
        }
    }
}

extension CognitoIdentityProviderClientTypes {

    public enum PreTokenGenerationLambdaVersionType: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case v10
        case v20
        case sdkUnknown(Swift.String)

        public static var allCases: [PreTokenGenerationLambdaVersionType] {
            return [
                .v10,
                .v20
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .v10: return "V1_0"
            case .v20: return "V2_0"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension CognitoIdentityProviderClientTypes {

    /// The properties of a pre token generation Lambda trigger.
    public struct PreTokenGenerationVersionConfigType: Swift.Sendable {
        /// The Amazon Resource Name (ARN) of the function that you want to assign to your Lambda trigger. This parameter and the PreTokenGeneration property of LambdaConfig have the same value. For new instances of pre token generation triggers, set LambdaArn.
        /// This member is required.
        public var lambdaArn: Swift.String?
        /// The user pool trigger version of the request that Amazon Cognito sends to your Lambda function. Higher-numbered versions add fields that support new features.
        /// This member is required.
        public var lambdaVersion: CognitoIdentityProviderClientTypes.PreTokenGenerationLambdaVersionType?

        public init(
            lambdaArn: Swift.String? = nil,
            lambdaVersion: CognitoIdentityProviderClientTypes.PreTokenGenerationLambdaVersionType? = nil
        )
        {
            self.lambdaArn = lambdaArn
            self.lambdaVersion = lambdaVersion
        }
    }
}

extension CognitoIdentityProviderClientTypes {

    /// Specifies the configuration for Lambda triggers.
    public struct LambdaConfigType: Swift.Sendable {
        /// Creates an authentication challenge.
        public var createAuthChallenge: Swift.String?
        /// A custom email sender Lambda trigger.
        public var customEmailSender: CognitoIdentityProviderClientTypes.CustomEmailLambdaVersionConfigType?
        /// A custom Message Lambda trigger.
        public var customMessage: Swift.String?
        /// A custom SMS sender Lambda trigger.
        public var customSMSSender: CognitoIdentityProviderClientTypes.CustomSMSLambdaVersionConfigType?
        /// Defines the authentication challenge.
        public var defineAuthChallenge: Swift.String?
        /// The Amazon Resource Name (ARN) of an [KMS key]. Amazon Cognito uses the key to encrypt codes and temporary passwords sent to CustomEmailSender and CustomSMSSender.
        public var kmsKeyID: Swift.String?
        /// A post-authentication Lambda trigger.
        public var postAuthentication: Swift.String?
        /// A post-confirmation Lambda trigger.
        public var postConfirmation: Swift.String?
        /// A pre-authentication Lambda trigger.
        public var preAuthentication: Swift.String?
        /// A pre-registration Lambda trigger.
        public var preSignUp: Swift.String?
        /// The Amazon Resource Name (ARN) of the function that you want to assign to your Lambda trigger. Set this parameter for legacy purposes. If you also set an ARN in PreTokenGenerationConfig, its value must be identical to PreTokenGeneration. For new instances of pre token generation triggers, set the LambdaArn of PreTokenGenerationConfig. You can set
        public var preTokenGeneration: Swift.String?
        /// The detailed configuration of a pre token generation trigger. If you also set an ARN in PreTokenGeneration, its value must be identical to PreTokenGenerationConfig.
        public var preTokenGenerationConfig: CognitoIdentityProviderClientTypes.PreTokenGenerationVersionConfigType?
        /// The user migration Lambda config type.
        public var userMigration: Swift.String?
        /// Verifies the authentication challenge response.
        public var verifyAuthChallengeResponse: Swift.String?

        public init(
            createAuthChallenge: Swift.String? = nil,
            customEmailSender: CognitoIdentityProviderClientTypes.CustomEmailLambdaVersionConfigType? = nil,
            customMessage: Swift.String? = nil,
            customSMSSender: CognitoIdentityProviderClientTypes.CustomSMSLambdaVersionConfigType? = nil,
            defineAuthChallenge: Swift.String? = nil,
            kmsKeyID: Swift.String? = nil,
            postAuthentication: Swift.String? = nil,
            postConfirmation: Swift.String? = nil,
            preAuthentication: Swift.String? = nil,
            preSignUp: Swift.String? = nil,
            preTokenGeneration: Swift.String? = nil,
            preTokenGenerationConfig: CognitoIdentityProviderClientTypes.PreTokenGenerationVersionConfigType? = nil,
            userMigration: Swift.String? = nil,
            verifyAuthChallengeResponse: Swift.String? = nil
        )
        {
            self.createAuthChallenge = createAuthChallenge
            self.customEmailSender = customEmailSender
            self.customMessage = customMessage
            self.customSMSSender = customSMSSender
            self.defineAuthChallenge = defineAuthChallenge
            self.kmsKeyID = kmsKeyID
            self.postAuthentication = postAuthentication
            self.postConfirmation = postConfirmation
            self.preAuthentication = preAuthentication
            self.preSignUp = preSignUp
            self.preTokenGeneration = preTokenGeneration
            self.preTokenGenerationConfig = preTokenGenerationConfig
            self.userMigration = userMigration
            self.verifyAuthChallengeResponse = verifyAuthChallengeResponse
        }
    }
}

extension CognitoIdentityProviderClientTypes {

    public enum UserPoolMfaType: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case off
        case on
        case `optional`
        case sdkUnknown(Swift.String)

        public static var allCases: [UserPoolMfaType] {
            return [
                .off,
                .on,
                .optional
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .off: return "OFF"
            case .on: return "ON"
            case .optional: return "OPTIONAL"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension CognitoIdentityProviderClientTypes {

    /// The password policy type.
    public struct PasswordPolicyType: Swift.Sendable {
        /// The minimum length of the password in the policy that you have set. This value can't be less than 6.
        public var minimumLength: Swift.Int?
        /// The number of previous passwords that you want Amazon Cognito to restrict each user from reusing. Users can't set a password that matches any of n previous passwords, where n is the value of PasswordHistorySize. Password history isn't enforced and isn't displayed in [DescribeUserPool](https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_DescribeUserPool.html) responses when you set this value to 0 or don't provide it. To activate this setting, [ advanced security features](https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-pool-settings-advanced-security.html) must be active in your user pool.
        public var passwordHistorySize: Swift.Int?
        /// In the password policy that you have set, refers to whether you have required users to use at least one lowercase letter in their password.
        public var requireLowercase: Swift.Bool
        /// In the password policy that you have set, refers to whether you have required users to use at least one number in their password.
        public var requireNumbers: Swift.Bool
        /// In the password policy that you have set, refers to whether you have required users to use at least one symbol in their password.
        public var requireSymbols: Swift.Bool
        /// In the password policy that you have set, refers to whether you have required users to use at least one uppercase letter in their password.
        public var requireUppercase: Swift.Bool
        /// The number of days a temporary password is valid in the password policy. If the user doesn't sign in during this time, an administrator must reset their password. Defaults to 7. If you submit a value of 0, Amazon Cognito treats it as a null value and sets TemporaryPasswordValidityDays to its default value. When you set TemporaryPasswordValidityDays for a user pool, you can no longer set a value for the legacy UnusedAccountValidityDays parameter in that user pool.
        public var temporaryPasswordValidityDays: Swift.Int

        public init(
            minimumLength: Swift.Int? = nil,
            passwordHistorySize: Swift.Int? = nil,
            requireLowercase: Swift.Bool = false,
            requireNumbers: Swift.Bool = false,
            requireSymbols: Swift.Bool = false,
            requireUppercase: Swift.Bool = false,
            temporaryPasswordValidityDays: Swift.Int = 0
        )
        {
            self.minimumLength = minimumLength
            self.passwordHistorySize = passwordHistorySize
            self.requireLowercase = requireLowercase
            self.requireNumbers = requireNumbers
            self.requireSymbols = requireSymbols
            self.requireUppercase = requireUppercase
            self.temporaryPasswordValidityDays = temporaryPasswordValidityDays
        }
    }
}

extension CognitoIdentityProviderClientTypes {

    /// The policy associated with a user pool.
    public struct UserPoolPolicyType: Swift.Sendable {
        /// The password policy.
        public var passwordPolicy: CognitoIdentityProviderClientTypes.PasswordPolicyType?

        public init(
            passwordPolicy: CognitoIdentityProviderClientTypes.PasswordPolicyType? = nil
        )
        {
            self.passwordPolicy = passwordPolicy
        }
    }
}

extension CognitoIdentityProviderClientTypes {

    /// The SMS configuration type is the settings that your Amazon Cognito user pool must use to send an SMS message from your Amazon Web Services account through Amazon Simple Notification Service. To send SMS messages with Amazon SNS in the Amazon Web Services Region that you want, the Amazon Cognito user pool uses an Identity and Access Management (IAM) role in your Amazon Web Services account.
    public struct SmsConfigurationType: Swift.Sendable {
        /// The external ID provides additional security for your IAM role. You can use an ExternalId with the IAM role that you use with Amazon SNS to send SMS messages for your user pool. If you provide an ExternalId, your Amazon Cognito user pool includes it in the request to assume your IAM role. You can configure the role trust policy to require that Amazon Cognito, and any principal, provide the ExternalID. If you use the Amazon Cognito Management Console to create a role for SMS multi-factor authentication (MFA), Amazon Cognito creates a role with the required permissions and a trust policy that demonstrates use of the ExternalId. For more information about the ExternalId of a role, see [How to use an external ID when granting access to your Amazon Web Services resources to a third party](https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_create_for-user_externalid.html)
        public var externalId: Swift.String?
        /// The Amazon Resource Name (ARN) of the Amazon SNS caller. This is the ARN of the IAM role in your Amazon Web Services account that Amazon Cognito will use to send SMS messages. SMS messages are subject to a [spending limit](https://docs.aws.amazon.com/cognito/latest/developerguide/user-pool-settings-email-phone-verification.html).
        /// This member is required.
        public var snsCallerArn: Swift.String?
        /// The Amazon Web Services Region to use with Amazon SNS integration. You can choose the same Region as your user pool, or a supported Legacy Amazon SNS alternate Region. Amazon Cognito resources in the Asia Pacific (Seoul) Amazon Web Services Region must use your Amazon SNS configuration in the Asia Pacific (Tokyo) Region. For more information, see [SMS message settings for Amazon Cognito user pools](https://docs.aws.amazon.com/cognito/latest/developerguide/user-pool-sms-settings.html).
        public var snsRegion: Swift.String?

        public init(
            externalId: Swift.String? = nil,
            snsCallerArn: Swift.String? = nil,
            snsRegion: Swift.String? = nil
        )
        {
            self.externalId = externalId
            self.snsCallerArn = snsCallerArn
            self.snsRegion = snsRegion
        }
    }
}

extension CognitoIdentityProviderClientTypes {

    /// The settings for updates to user attributes. These settings include the property AttributesRequireVerificationBeforeUpdate, a user-pool setting that tells Amazon Cognito how to handle changes to the value of your users' email address and phone number attributes. For more information, see [ Verifying updates to email addresses and phone numbers](https://docs.aws.amazon.com/cognito/latest/developerguide/user-pool-settings-email-phone-verification.html#user-pool-settings-verifications-verify-attribute-updates).
    public struct UserAttributeUpdateSettingsType: Swift.Sendable {
        /// Requires that your user verifies their email address, phone number, or both before Amazon Cognito updates the value of that attribute. When you update a user attribute that has this option activated, Amazon Cognito sends a verification message to the new phone number or email address. Amazon Cognito doesn’t change the value of the attribute until your user responds to the verification message and confirms the new value. You can verify an updated email address or phone number with a [VerifyUserAttribute](https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_VerifyUserAttribute.html) API request. You can also call the [AdminUpdateUserAttributes](https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_AdminUpdateUserAttributes.html) API and set email_verified or phone_number_verified to true. When AttributesRequireVerificationBeforeUpdate is false, your user pool doesn't require that your users verify attribute changes before Amazon Cognito updates them. In a user pool where AttributesRequireVerificationBeforeUpdate is false, API operations that change attribute values can immediately update a user’s email or phone_number attribute.
        public var attributesRequireVerificationBeforeUpdate: [CognitoIdentityProviderClientTypes.VerifiedAttributeType]?

        public init(
            attributesRequireVerificationBeforeUpdate: [CognitoIdentityProviderClientTypes.VerifiedAttributeType]? = nil
        )
        {
            self.attributesRequireVerificationBeforeUpdate = attributesRequireVerificationBeforeUpdate
        }
    }
}

extension CognitoIdentityProviderClientTypes {

    public enum UsernameAttributeType: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case email
        case phoneNumber
        case sdkUnknown(Swift.String)

        public static var allCases: [UsernameAttributeType] {
            return [
                .email,
                .phoneNumber
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .email: return "email"
            case .phoneNumber: return "phone_number"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension CognitoIdentityProviderClientTypes {

    /// The username configuration type.
    public struct UsernameConfigurationType: Swift.Sendable {
        /// Specifies whether user name case sensitivity will be applied for all users in the user pool through Amazon Cognito APIs. For most use cases, set case sensitivity to False (case insensitive) as a best practice. When usernames and email addresses are case insensitive, users can sign in as the same user when they enter a different capitalization of their user name. Valid values include: True Enables case sensitivity for all username input. When this option is set to True, users must sign in using the exact capitalization of their given username, such as “UserName”. This is the default value. False Enables case insensitivity for all username input. For example, when this option is set to False, users can sign in using username, USERNAME, or UserName. This option also enables both preferred_username and email alias to be case insensitive, in addition to the username attribute.
        /// This member is required.
        public var caseSensitive: Swift.Bool?

        public init(
            caseSensitive: Swift.Bool? = nil
        )
        {
            self.caseSensitive = caseSensitive
        }
    }
}

extension CognitoIdentityProviderClientTypes {

    /// User pool add-ons. Contains settings for activation of advanced security features. To log user security information but take no action, set to AUDIT. To configure automatic security responses to risky traffic to your user pool, set to ENFORCED. For more information, see [Adding advanced security to a user pool](https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-pool-settings-advanced-security.html).
    public struct UserPoolAddOnsType: Swift.Sendable {
        /// Advanced security configuration options for additional authentication types in your user pool, including custom authentication.
        public var advancedSecurityAdditionalFlows: CognitoIdentityProviderClientTypes.AdvancedSecurityAdditionalFlowsType?
        /// The operating mode of advanced security features for standard authentication types in your user pool, including username-password and secure remote password (SRP) authentication.
        /// This member is required.
        public var advancedSecurityMode: CognitoIdentityProviderClientTypes.AdvancedSecurityModeType?

        public init(
            advancedSecurityAdditionalFlows: CognitoIdentityProviderClientTypes.AdvancedSecurityAdditionalFlowsType? = nil,
            advancedSecurityMode: CognitoIdentityProviderClientTypes.AdvancedSecurityModeType? = nil
        )
        {
            self.advancedSecurityAdditionalFlows = advancedSecurityAdditionalFlows
            self.advancedSecurityMode = advancedSecurityMode
        }
    }
}

extension CognitoIdentityProviderClientTypes {

    public enum DefaultEmailOptionType: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case confirmWithCode
        case confirmWithLink
        case sdkUnknown(Swift.String)

        public static var allCases: [DefaultEmailOptionType] {
            return [
                .confirmWithCode,
                .confirmWithLink
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .confirmWithCode: return "CONFIRM_WITH_CODE"
            case .confirmWithLink: return "CONFIRM_WITH_LINK"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension CognitoIdentityProviderClientTypes {

    /// The template for verification messages.
    public struct VerificationMessageTemplateType: Swift.Sendable {
        /// The default email option.
        public var defaultEmailOption: CognitoIdentityProviderClientTypes.DefaultEmailOptionType?
        /// The template for email messages that Amazon Cognito sends to your users. You can set an EmailMessage template only if the value of [ EmailSendingAccount](https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_EmailConfigurationType.html#CognitoUserPools-Type-EmailConfigurationType-EmailSendingAccount) is DEVELOPER. When your [EmailSendingAccount](https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_EmailConfigurationType.html#CognitoUserPools-Type-EmailConfigurationType-EmailSendingAccount) is DEVELOPER, your user pool sends email messages with your own Amazon SES configuration.
        public var emailMessage: Swift.String?
        /// The email message template for sending a confirmation link to the user. You can set an EmailMessageByLink template only if the value of [ EmailSendingAccount](https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_EmailConfigurationType.html#CognitoUserPools-Type-EmailConfigurationType-EmailSendingAccount) is DEVELOPER. When your [EmailSendingAccount](https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_EmailConfigurationType.html#CognitoUserPools-Type-EmailConfigurationType-EmailSendingAccount) is DEVELOPER, your user pool sends email messages with your own Amazon SES configuration.
        public var emailMessageByLink: Swift.String?
        /// The subject line for the email message template. You can set an EmailSubject template only if the value of [ EmailSendingAccount](https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_EmailConfigurationType.html#CognitoUserPools-Type-EmailConfigurationType-EmailSendingAccount) is DEVELOPER. When your [EmailSendingAccount](https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_EmailConfigurationType.html#CognitoUserPools-Type-EmailConfigurationType-EmailSendingAccount) is DEVELOPER, your user pool sends email messages with your own Amazon SES configuration.
        public var emailSubject: Swift.String?
        /// The subject line for the email message template for sending a confirmation link to the user. You can set an EmailSubjectByLink template only if the value of [ EmailSendingAccount](https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_EmailConfigurationType.html#CognitoUserPools-Type-EmailConfigurationType-EmailSendingAccount) is DEVELOPER. When your [EmailSendingAccount](https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_EmailConfigurationType.html#CognitoUserPools-Type-EmailConfigurationType-EmailSendingAccount) is DEVELOPER, your user pool sends email messages with your own Amazon SES configuration.
        public var emailSubjectByLink: Swift.String?
        /// The template for SMS messages that Amazon Cognito sends to your users.
        public var smsMessage: Swift.String?

        public init(
            defaultEmailOption: CognitoIdentityProviderClientTypes.DefaultEmailOptionType? = nil,
            emailMessage: Swift.String? = nil,
            emailMessageByLink: Swift.String? = nil,
            emailSubject: Swift.String? = nil,
            emailSubjectByLink: Swift.String? = nil,
            smsMessage: Swift.String? = nil
        )
        {
            self.defaultEmailOption = defaultEmailOption
            self.emailMessage = emailMessage
            self.emailMessageByLink = emailMessageByLink
            self.emailSubject = emailSubject
            self.emailSubjectByLink = emailSubjectByLink
            self.smsMessage = smsMessage
        }
    }
}

/// Represents the request to create a user pool.
public struct CreateUserPoolInput: Swift.Sendable {
    /// The available verified method a user can use to recover their password when they call ForgotPassword. You can use this setting to define a preferred method when a user has more than one method available. With this setting, SMS doesn't qualify for a valid password recovery mechanism if the user also has SMS multi-factor authentication (MFA) activated. In the absence of this setting, Amazon Cognito uses the legacy behavior to determine the recovery method where SMS is preferred through email.
    public var accountRecoverySetting: CognitoIdentityProviderClientTypes.AccountRecoverySettingType?
    /// The configuration for AdminCreateUser requests.
    public var adminCreateUserConfig: CognitoIdentityProviderClientTypes.AdminCreateUserConfigType?
    /// Attributes supported as an alias for this user pool. Possible values: phone_number, email, or preferred_username.
    public var aliasAttributes: [CognitoIdentityProviderClientTypes.AliasAttributeType]?
    /// The attributes to be auto-verified. Possible values: email, phone_number.
    public var autoVerifiedAttributes: [CognitoIdentityProviderClientTypes.VerifiedAttributeType]?
    /// When active, DeletionProtection prevents accidental deletion of your user pool. Before you can delete a user pool that you have protected against deletion, you must deactivate this feature. When you try to delete a protected user pool in a DeleteUserPool API request, Amazon Cognito returns an InvalidParameterException error. To delete a protected user pool, send a new DeleteUserPool request after you deactivate deletion protection in an UpdateUserPool API request.
    public var deletionProtection: CognitoIdentityProviderClientTypes.DeletionProtectionType?
    /// The device-remembering configuration for a user pool. A null value indicates that you have deactivated device remembering in your user pool. When you provide a value for any DeviceConfiguration field, you activate the Amazon Cognito device-remembering feature.
    public var deviceConfiguration: CognitoIdentityProviderClientTypes.DeviceConfigurationType?
    /// The email configuration of your user pool. The email configuration type sets your preferred sending method, Amazon Web Services Region, and sender for messages from your user pool.
    public var emailConfiguration: CognitoIdentityProviderClientTypes.EmailConfigurationType?
    /// This parameter is no longer used. See [VerificationMessageTemplateType](https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_VerificationMessageTemplateType.html).
    public var emailVerificationMessage: Swift.String?
    /// This parameter is no longer used. See [VerificationMessageTemplateType](https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_VerificationMessageTemplateType.html).
    public var emailVerificationSubject: Swift.String?
    /// The Lambda trigger configuration information for the new user pool. In a push model, event sources (such as Amazon S3 and custom applications) need permission to invoke a function. So you must make an extra call to add permission for these event sources to invoke your Lambda function. For more information on using the Lambda API to add permission, see[ AddPermission ](https://docs.aws.amazon.com/lambda/latest/dg/API_AddPermission.html). For adding permission using the CLI, see[ add-permission ](https://docs.aws.amazon.com/cli/latest/reference/lambda/add-permission.html).
    public var lambdaConfig: CognitoIdentityProviderClientTypes.LambdaConfigType?
    /// Specifies MFA configuration details.
    public var mfaConfiguration: CognitoIdentityProviderClientTypes.UserPoolMfaType?
    /// The policies associated with the new user pool.
    public var policies: CognitoIdentityProviderClientTypes.UserPoolPolicyType?
    /// A string used to name the user pool.
    /// This member is required.
    public var poolName: Swift.String?
    /// An array of schema attributes for the new user pool. These attributes can be standard or custom attributes.
    public var schema: [CognitoIdentityProviderClientTypes.SchemaAttributeType]?
    /// A string representing the SMS authentication message.
    public var smsAuthenticationMessage: Swift.String?
    /// The SMS configuration with the settings that your Amazon Cognito user pool must use to send an SMS message from your Amazon Web Services account through Amazon Simple Notification Service. To send SMS messages with Amazon SNS in the Amazon Web Services Region that you want, the Amazon Cognito user pool uses an Identity and Access Management (IAM) role in your Amazon Web Services account.
    public var smsConfiguration: CognitoIdentityProviderClientTypes.SmsConfigurationType?
    /// This parameter is no longer used. See [VerificationMessageTemplateType](https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_VerificationMessageTemplateType.html).
    public var smsVerificationMessage: Swift.String?
    /// The settings for updates to user attributes. These settings include the property AttributesRequireVerificationBeforeUpdate, a user-pool setting that tells Amazon Cognito how to handle changes to the value of your users' email address and phone number attributes. For more information, see [ Verifying updates to email addresses and phone numbers](https://docs.aws.amazon.com/cognito/latest/developerguide/user-pool-settings-email-phone-verification.html#user-pool-settings-verifications-verify-attribute-updates).
    public var userAttributeUpdateSettings: CognitoIdentityProviderClientTypes.UserAttributeUpdateSettingsType?
    /// User pool add-ons. Contains settings for activation of advanced security features. To log user security information but take no action, set to AUDIT. To configure automatic security responses to risky traffic to your user pool, set to ENFORCED. For more information, see [Adding advanced security to a user pool](https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-pool-settings-advanced-security.html).
    public var userPoolAddOns: CognitoIdentityProviderClientTypes.UserPoolAddOnsType?
    /// The tag keys and values to assign to the user pool. A tag is a label that you can use to categorize and manage user pools in different ways, such as by purpose, owner, environment, or other criteria.
    public var userPoolTags: [Swift.String: Swift.String]?
    /// Specifies whether a user can use an email address or phone number as a username when they sign up.
    public var usernameAttributes: [CognitoIdentityProviderClientTypes.UsernameAttributeType]?
    /// Case sensitivity on the username input for the selected sign-in option. When case sensitivity is set to False (case insensitive), users can sign in with any combination of capital and lowercase letters. For example, username, USERNAME, or UserName, or for email, email@example.com or EMaiL@eXamplE.Com. For most use cases, set case sensitivity to False (case insensitive) as a best practice. When usernames and email addresses are case insensitive, Amazon Cognito treats any variation in case as the same user, and prevents a case variation from being assigned to the same attribute for a different user. This configuration is immutable after you set it. For more information, see [UsernameConfigurationType](https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_UsernameConfigurationType.html).
    public var usernameConfiguration: CognitoIdentityProviderClientTypes.UsernameConfigurationType?
    /// The template for the verification message that the user sees when the app requests permission to access the user's information.
    public var verificationMessageTemplate: CognitoIdentityProviderClientTypes.VerificationMessageTemplateType?

    public init(
        accountRecoverySetting: CognitoIdentityProviderClientTypes.AccountRecoverySettingType? = nil,
        adminCreateUserConfig: CognitoIdentityProviderClientTypes.AdminCreateUserConfigType? = nil,
        aliasAttributes: [CognitoIdentityProviderClientTypes.AliasAttributeType]? = nil,
        autoVerifiedAttributes: [CognitoIdentityProviderClientTypes.VerifiedAttributeType]? = nil,
        deletionProtection: CognitoIdentityProviderClientTypes.DeletionProtectionType? = nil,
        deviceConfiguration: CognitoIdentityProviderClientTypes.DeviceConfigurationType? = nil,
        emailConfiguration: CognitoIdentityProviderClientTypes.EmailConfigurationType? = nil,
        emailVerificationMessage: Swift.String? = nil,
        emailVerificationSubject: Swift.String? = nil,
        lambdaConfig: CognitoIdentityProviderClientTypes.LambdaConfigType? = nil,
        mfaConfiguration: CognitoIdentityProviderClientTypes.UserPoolMfaType? = nil,
        policies: CognitoIdentityProviderClientTypes.UserPoolPolicyType? = nil,
        poolName: Swift.String? = nil,
        schema: [CognitoIdentityProviderClientTypes.SchemaAttributeType]? = nil,
        smsAuthenticationMessage: Swift.String? = nil,
        smsConfiguration: CognitoIdentityProviderClientTypes.SmsConfigurationType? = nil,
        smsVerificationMessage: Swift.String? = nil,
        userAttributeUpdateSettings: CognitoIdentityProviderClientTypes.UserAttributeUpdateSettingsType? = nil,
        userPoolAddOns: CognitoIdentityProviderClientTypes.UserPoolAddOnsType? = nil,
        userPoolTags: [Swift.String: Swift.String]? = nil,
        usernameAttributes: [CognitoIdentityProviderClientTypes.UsernameAttributeType]? = nil,
        usernameConfiguration: CognitoIdentityProviderClientTypes.UsernameConfigurationType? = nil,
        verificationMessageTemplate: CognitoIdentityProviderClientTypes.VerificationMessageTemplateType? = nil
    )
    {
        self.accountRecoverySetting = accountRecoverySetting
        self.adminCreateUserConfig = adminCreateUserConfig
        self.aliasAttributes = aliasAttributes
        self.autoVerifiedAttributes = autoVerifiedAttributes
        self.deletionProtection = deletionProtection
        self.deviceConfiguration = deviceConfiguration
        self.emailConfiguration = emailConfiguration
        self.emailVerificationMessage = emailVerificationMessage
        self.emailVerificationSubject = emailVerificationSubject
        self.lambdaConfig = lambdaConfig
        self.mfaConfiguration = mfaConfiguration
        self.policies = policies
        self.poolName = poolName
        self.schema = schema
        self.smsAuthenticationMessage = smsAuthenticationMessage
        self.smsConfiguration = smsConfiguration
        self.smsVerificationMessage = smsVerificationMessage
        self.userAttributeUpdateSettings = userAttributeUpdateSettings
        self.userPoolAddOns = userPoolAddOns
        self.userPoolTags = userPoolTags
        self.usernameAttributes = usernameAttributes
        self.usernameConfiguration = usernameConfiguration
        self.verificationMessageTemplate = verificationMessageTemplate
    }
}

extension CognitoIdentityProviderClientTypes {

    public enum StatusType: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case disabled
        case enabled
        case sdkUnknown(Swift.String)

        public static var allCases: [StatusType] {
            return [
                .disabled,
                .enabled
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .disabled: return "Disabled"
            case .enabled: return "Enabled"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension CognitoIdentityProviderClientTypes {

    /// A container for information about the user pool.
    public struct UserPoolType: Swift.Sendable {
        /// The available verified method a user can use to recover their password when they call ForgotPassword. You can use this setting to define a preferred method when a user has more than one method available. With this setting, SMS doesn't qualify for a valid password recovery mechanism if the user also has SMS multi-factor authentication (MFA) activated. In the absence of this setting, Amazon Cognito uses the legacy behavior to determine the recovery method where SMS is preferred through email.
        public var accountRecoverySetting: CognitoIdentityProviderClientTypes.AccountRecoverySettingType?
        /// The configuration for AdminCreateUser requests.
        public var adminCreateUserConfig: CognitoIdentityProviderClientTypes.AdminCreateUserConfigType?
        /// The attributes that are aliased in a user pool.
        public var aliasAttributes: [CognitoIdentityProviderClientTypes.AliasAttributeType]?
        /// The Amazon Resource Name (ARN) for the user pool.
        public var arn: Swift.String?
        /// The attributes that are auto-verified in a user pool.
        public var autoVerifiedAttributes: [CognitoIdentityProviderClientTypes.VerifiedAttributeType]?
        /// The date and time when the item was created. Amazon Cognito returns this timestamp in UNIX epoch time format. Your SDK might render the output in a human-readable format like ISO 8601 or a Java Date object.
        public var creationDate: Foundation.Date?
        /// A custom domain name that you provide to Amazon Cognito. This parameter applies only if you use a custom domain to host the sign-up and sign-in pages for your application. An example of a custom domain name might be auth.example.com. For more information about adding a custom domain to your user pool, see [Using Your Own Domain for the Hosted UI](https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-pools-add-custom-domain.html).
        public var customDomain: Swift.String?
        /// When active, DeletionProtection prevents accidental deletion of your user pool. Before you can delete a user pool that you have protected against deletion, you must deactivate this feature. When you try to delete a protected user pool in a DeleteUserPool API request, Amazon Cognito returns an InvalidParameterException error. To delete a protected user pool, send a new DeleteUserPool request after you deactivate deletion protection in an UpdateUserPool API request.
        public var deletionProtection: CognitoIdentityProviderClientTypes.DeletionProtectionType?
        /// The device-remembering configuration for a user pool. A null value indicates that you have deactivated device remembering in your user pool. When you provide a value for any DeviceConfiguration field, you activate the Amazon Cognito device-remembering feature.
        public var deviceConfiguration: CognitoIdentityProviderClientTypes.DeviceConfigurationType?
        /// The domain prefix, if the user pool has a domain associated with it.
        public var domain: Swift.String?
        /// The email configuration of your user pool. The email configuration type sets your preferred sending method, Amazon Web Services Region, and sender for messages from your user pool.
        public var emailConfiguration: CognitoIdentityProviderClientTypes.EmailConfigurationType?
        /// Deprecated. Review error codes from API requests with EventSource:cognito-idp.amazonaws.com in CloudTrail for information about problems with user pool email configuration.
        public var emailConfigurationFailure: Swift.String?
        /// This parameter is no longer used. See [VerificationMessageTemplateType](https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_VerificationMessageTemplateType.html).
        public var emailVerificationMessage: Swift.String?
        /// This parameter is no longer used. See [VerificationMessageTemplateType](https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_VerificationMessageTemplateType.html).
        public var emailVerificationSubject: Swift.String?
        /// A number estimating the size of the user pool.
        public var estimatedNumberOfUsers: Swift.Int
        /// The ID of the user pool.
        public var id: Swift.String?
        /// The Lambda triggers associated with the user pool.
        public var lambdaConfig: CognitoIdentityProviderClientTypes.LambdaConfigType?
        /// The date and time when the item was modified. Amazon Cognito returns this timestamp in UNIX epoch time format. Your SDK might render the output in a human-readable format like ISO 8601 or a Java Date object.
        public var lastModifiedDate: Foundation.Date?
        /// Can be one of the following values:
        ///
        /// * OFF - MFA tokens aren't required and can't be specified during user registration.
        ///
        /// * ON - MFA tokens are required for all user registrations. You can only specify required when you're initially creating a user pool.
        ///
        /// * OPTIONAL - Users have the option when registering to create an MFA token.
        public var mfaConfiguration: CognitoIdentityProviderClientTypes.UserPoolMfaType?
        /// The name of the user pool.
        public var name: Swift.String?
        /// The policies associated with the user pool.
        public var policies: CognitoIdentityProviderClientTypes.UserPoolPolicyType?
        /// A list of the user attributes and their properties in your user pool. The attribute schema contains standard attributes, custom attributes with a custom: prefix, and developer attributes with a dev: prefix. For more information, see [User pool attributes](https://docs.aws.amazon.com/cognito/latest/developerguide/user-pool-settings-attributes.html). Developer-only attributes are a legacy feature of user pools, are read-only to all app clients. You can create and update developer-only attributes only with IAM-authenticated API operations. Use app client read/write permissions instead.
        public var schemaAttributes: [CognitoIdentityProviderClientTypes.SchemaAttributeType]?
        /// The contents of the SMS authentication message.
        public var smsAuthenticationMessage: Swift.String?
        /// The SMS configuration with the settings that your Amazon Cognito user pool must use to send an SMS message from your Amazon Web Services account through Amazon Simple Notification Service. To send SMS messages with Amazon SNS in the Amazon Web Services Region that you want, the Amazon Cognito user pool uses an Identity and Access Management (IAM) role in your Amazon Web Services account.
        public var smsConfiguration: CognitoIdentityProviderClientTypes.SmsConfigurationType?
        /// The reason why the SMS configuration can't send the messages to your users. This message might include comma-separated values to describe why your SMS configuration can't send messages to user pool end users. InvalidSmsRoleAccessPolicyException The Identity and Access Management role that Amazon Cognito uses to send SMS messages isn't properly configured. For more information, see [SmsConfigurationType](https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_SmsConfigurationType.html). SNSSandbox The Amazon Web Services account is in the SNS SMS Sandbox and messages will only reach verified end users. This parameter won’t get populated with SNSSandbox if the user creating the user pool doesn’t have SNS permissions. To learn how to move your Amazon Web Services account out of the sandbox, see [Moving out of the SMS sandbox](https://docs.aws.amazon.com/sns/latest/dg/sns-sms-sandbox-moving-to-production.html).
        public var smsConfigurationFailure: Swift.String?
        /// This parameter is no longer used. See [VerificationMessageTemplateType](https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_VerificationMessageTemplateType.html).
        public var smsVerificationMessage: Swift.String?
        /// This parameter is no longer used.
        @available(*, deprecated, message: "This property is no longer available.")
        public var status: CognitoIdentityProviderClientTypes.StatusType?
        /// The settings for updates to user attributes. These settings include the property AttributesRequireVerificationBeforeUpdate, a user-pool setting that tells Amazon Cognito how to handle changes to the value of your users' email address and phone number attributes. For more information, see [ Verifying updates to email addresses and phone numbers](https://docs.aws.amazon.com/cognito/latest/developerguide/user-pool-settings-email-phone-verification.html#user-pool-settings-verifications-verify-attribute-updates).
        public var userAttributeUpdateSettings: CognitoIdentityProviderClientTypes.UserAttributeUpdateSettingsType?
        /// User pool add-ons. Contains settings for activation of advanced security features. To log user security information but take no action, set to AUDIT. To configure automatic security responses to risky traffic to your user pool, set to ENFORCED. For more information, see [Adding advanced security to a user pool](https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-pool-settings-advanced-security.html).
        public var userPoolAddOns: CognitoIdentityProviderClientTypes.UserPoolAddOnsType?
        /// The tags that are assigned to the user pool. A tag is a label that you can apply to user pools to categorize and manage them in different ways, such as by purpose, owner, environment, or other criteria.
        public var userPoolTags: [Swift.String: Swift.String]?
        /// Specifies whether a user can use an email address or phone number as a username when they sign up.
        public var usernameAttributes: [CognitoIdentityProviderClientTypes.UsernameAttributeType]?
        /// Case sensitivity of the username input for the selected sign-in option. For example, when case sensitivity is set to False, users can sign in using either "username" or "Username". This configuration is immutable once it has been set. For more information, see [UsernameConfigurationType](https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_UsernameConfigurationType.html).
        public var usernameConfiguration: CognitoIdentityProviderClientTypes.UsernameConfigurationType?
        /// The template for verification messages.
        public var verificationMessageTemplate: CognitoIdentityProviderClientTypes.VerificationMessageTemplateType?

        public init(
            accountRecoverySetting: CognitoIdentityProviderClientTypes.AccountRecoverySettingType? = nil,
            adminCreateUserConfig: CognitoIdentityProviderClientTypes.AdminCreateUserConfigType? = nil,
            aliasAttributes: [CognitoIdentityProviderClientTypes.AliasAttributeType]? = nil,
            arn: Swift.String? = nil,
            autoVerifiedAttributes: [CognitoIdentityProviderClientTypes.VerifiedAttributeType]? = nil,
            creationDate: Foundation.Date? = nil,
            customDomain: Swift.String? = nil,
            deletionProtection: CognitoIdentityProviderClientTypes.DeletionProtectionType? = nil,
            deviceConfiguration: CognitoIdentityProviderClientTypes.DeviceConfigurationType? = nil,
            domain: Swift.String? = nil,
            emailConfiguration: CognitoIdentityProviderClientTypes.EmailConfigurationType? = nil,
            emailConfigurationFailure: Swift.String? = nil,
            emailVerificationMessage: Swift.String? = nil,
            emailVerificationSubject: Swift.String? = nil,
            estimatedNumberOfUsers: Swift.Int = 0,
            id: Swift.String? = nil,
            lambdaConfig: CognitoIdentityProviderClientTypes.LambdaConfigType? = nil,
            lastModifiedDate: Foundation.Date? = nil,
            mfaConfiguration: CognitoIdentityProviderClientTypes.UserPoolMfaType? = nil,
            name: Swift.String? = nil,
            policies: CognitoIdentityProviderClientTypes.UserPoolPolicyType? = nil,
            schemaAttributes: [CognitoIdentityProviderClientTypes.SchemaAttributeType]? = nil,
            smsAuthenticationMessage: Swift.String? = nil,
            smsConfiguration: CognitoIdentityProviderClientTypes.SmsConfigurationType? = nil,
            smsConfigurationFailure: Swift.String? = nil,
            smsVerificationMessage: Swift.String? = nil,
            status: CognitoIdentityProviderClientTypes.StatusType? = nil,
            userAttributeUpdateSettings: CognitoIdentityProviderClientTypes.UserAttributeUpdateSettingsType? = nil,
            userPoolAddOns: CognitoIdentityProviderClientTypes.UserPoolAddOnsType? = nil,
            userPoolTags: [Swift.String: Swift.String]? = nil,
            usernameAttributes: [CognitoIdentityProviderClientTypes.UsernameAttributeType]? = nil,
            usernameConfiguration: CognitoIdentityProviderClientTypes.UsernameConfigurationType? = nil,
            verificationMessageTemplate: CognitoIdentityProviderClientTypes.VerificationMessageTemplateType? = nil
        )
        {
            self.accountRecoverySetting = accountRecoverySetting
            self.adminCreateUserConfig = adminCreateUserConfig
            self.aliasAttributes = aliasAttributes
            self.arn = arn
            self.autoVerifiedAttributes = autoVerifiedAttributes
            self.creationDate = creationDate
            self.customDomain = customDomain
            self.deletionProtection = deletionProtection
            self.deviceConfiguration = deviceConfiguration
            self.domain = domain
            self.emailConfiguration = emailConfiguration
            self.emailConfigurationFailure = emailConfigurationFailure
            self.emailVerificationMessage = emailVerificationMessage
            self.emailVerificationSubject = emailVerificationSubject
            self.estimatedNumberOfUsers = estimatedNumberOfUsers
            self.id = id
            self.lambdaConfig = lambdaConfig
            self.lastModifiedDate = lastModifiedDate
            self.mfaConfiguration = mfaConfiguration
            self.name = name
            self.policies = policies
            self.schemaAttributes = schemaAttributes
            self.smsAuthenticationMessage = smsAuthenticationMessage
            self.smsConfiguration = smsConfiguration
            self.smsConfigurationFailure = smsConfigurationFailure
            self.smsVerificationMessage = smsVerificationMessage
            self.status = status
            self.userAttributeUpdateSettings = userAttributeUpdateSettings
            self.userPoolAddOns = userPoolAddOns
            self.userPoolTags = userPoolTags
            self.usernameAttributes = usernameAttributes
            self.usernameConfiguration = usernameConfiguration
            self.verificationMessageTemplate = verificationMessageTemplate
        }
    }
}

/// Represents the response from the server for the request to create a user pool.
public struct CreateUserPoolOutput: Swift.Sendable {
    /// A container for the user pool details.
    public var userPool: CognitoIdentityProviderClientTypes.UserPoolType?

    public init(
        userPool: CognitoIdentityProviderClientTypes.UserPoolType? = nil
    )
    {
        self.userPool = userPool
    }
}

/// This exception is thrown when the specified OAuth flow is not valid.
public struct InvalidOAuthFlowException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidOAuthFlowException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// This exception is thrown when the specified scope doesn't exist.
public struct ScopeDoesNotExistException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ScopeDoesNotExistException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension CognitoIdentityProviderClientTypes {

    public enum OAuthFlowType: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case clientCredentials
        case code
        case implicit
        case sdkUnknown(Swift.String)

        public static var allCases: [OAuthFlowType] {
            return [
                .clientCredentials,
                .code,
                .implicit
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .clientCredentials: return "client_credentials"
            case .code: return "code"
            case .implicit: return "implicit"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension CognitoIdentityProviderClientTypes {

    public enum ExplicitAuthFlowsType: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case adminNoSrpAuth
        case allowAdminUserPasswordAuth
        case allowCustomAuth
        case allowRefreshTokenAuth
        case allowUserPasswordAuth
        case allowUserSrpAuth
        case customAuthFlowOnly
        case userPasswordAuth
        case sdkUnknown(Swift.String)

        public static var allCases: [ExplicitAuthFlowsType] {
            return [
                .adminNoSrpAuth,
                .allowAdminUserPasswordAuth,
                .allowCustomAuth,
                .allowRefreshTokenAuth,
                .allowUserPasswordAuth,
                .allowUserSrpAuth,
                .customAuthFlowOnly,
                .userPasswordAuth
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .adminNoSrpAuth: return "ADMIN_NO_SRP_AUTH"
            case .allowAdminUserPasswordAuth: return "ALLOW_ADMIN_USER_PASSWORD_AUTH"
            case .allowCustomAuth: return "ALLOW_CUSTOM_AUTH"
            case .allowRefreshTokenAuth: return "ALLOW_REFRESH_TOKEN_AUTH"
            case .allowUserPasswordAuth: return "ALLOW_USER_PASSWORD_AUTH"
            case .allowUserSrpAuth: return "ALLOW_USER_SRP_AUTH"
            case .customAuthFlowOnly: return "CUSTOM_AUTH_FLOW_ONLY"
            case .userPasswordAuth: return "USER_PASSWORD_AUTH"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension CognitoIdentityProviderClientTypes {

    public enum PreventUserExistenceErrorTypes: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case enabled
        case legacy
        case sdkUnknown(Swift.String)

        public static var allCases: [PreventUserExistenceErrorTypes] {
            return [
                .enabled,
                .legacy
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .enabled: return "ENABLED"
            case .legacy: return "LEGACY"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension CognitoIdentityProviderClientTypes {

    public enum TimeUnitsType: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case days
        case hours
        case minutes
        case seconds
        case sdkUnknown(Swift.String)

        public static var allCases: [TimeUnitsType] {
            return [
                .days,
                .hours,
                .minutes,
                .seconds
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .days: return "days"
            case .hours: return "hours"
            case .minutes: return "minutes"
            case .seconds: return "seconds"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension CognitoIdentityProviderClientTypes {

    /// The data type TokenValidityUnits specifies the time units you use when you set the duration of ID, access, and refresh tokens.
    public struct TokenValidityUnitsType: Swift.Sendable {
        /// A time unit of seconds, minutes, hours, or days for the value that you set in the AccessTokenValidity parameter. The default AccessTokenValidity time unit is hours. AccessTokenValidity duration can range from five minutes to one day.
        public var accessToken: CognitoIdentityProviderClientTypes.TimeUnitsType?
        /// A time unit of seconds, minutes, hours, or days for the value that you set in the IdTokenValidity parameter. The default IdTokenValidity time unit is hours. IdTokenValidity duration can range from five minutes to one day.
        public var idToken: CognitoIdentityProviderClientTypes.TimeUnitsType?
        /// A time unit of seconds, minutes, hours, or days for the value that you set in the RefreshTokenValidity parameter. The default RefreshTokenValidity time unit is days. RefreshTokenValidity duration can range from 60 minutes to 10 years.
        public var refreshToken: CognitoIdentityProviderClientTypes.TimeUnitsType?

        public init(
            accessToken: CognitoIdentityProviderClientTypes.TimeUnitsType? = nil,
            idToken: CognitoIdentityProviderClientTypes.TimeUnitsType? = nil,
            refreshToken: CognitoIdentityProviderClientTypes.TimeUnitsType? = nil
        )
        {
            self.accessToken = accessToken
            self.idToken = idToken
            self.refreshToken = refreshToken
        }
    }
}

/// Represents the request to create a user pool client.
public struct CreateUserPoolClientInput: Swift.Sendable {
    /// The access token time limit. After this limit expires, your user can't use their access token. To specify the time unit for AccessTokenValidity as seconds, minutes, hours, or days, set a TokenValidityUnits value in your API request. For example, when you set AccessTokenValidity to 10 and TokenValidityUnits to hours, your user can authorize access with their access token for 10 hours. The default time unit for AccessTokenValidity in an API request is hours. Valid range is displayed below in seconds. If you don't specify otherwise in the configuration of your app client, your access tokens are valid for one hour.
    public var accessTokenValidity: Swift.Int?
    /// The OAuth grant types that you want your app client to generate. To create an app client that generates client credentials grants, you must add client_credentials as the only allowed OAuth flow. code Use a code grant flow, which provides an authorization code as the response. This code can be exchanged for access tokens with the /oauth2/token endpoint. implicit Issue the access token (and, optionally, ID token, based on scopes) directly to your user. client_credentials Issue the access token from the /oauth2/token endpoint directly to a non-person user using a combination of the client ID and client secret.
    public var allowedOAuthFlows: [CognitoIdentityProviderClientTypes.OAuthFlowType]?
    /// Set to true to use OAuth 2.0 features in your user pool app client. AllowedOAuthFlowsUserPoolClient must be true before you can configure the following features in your app client.
    ///
    /// * CallBackURLs: Callback URLs.
    ///
    /// * LogoutURLs: Sign-out redirect URLs.
    ///
    /// * AllowedOAuthScopes: OAuth 2.0 scopes.
    ///
    /// * AllowedOAuthFlows: Support for authorization code, implicit, and client credentials OAuth 2.0 grants.
    ///
    ///
    /// To use OAuth 2.0 features, configure one of these features in the Amazon Cognito console or set AllowedOAuthFlowsUserPoolClient to true in a CreateUserPoolClient or UpdateUserPoolClient API request. If you don't set a value for AllowedOAuthFlowsUserPoolClient in a request with the CLI or SDKs, it defaults to false.
    public var allowedOAuthFlowsUserPoolClient: Swift.Bool?
    /// The allowed OAuth scopes. Possible values provided by OAuth are phone, email, openid, and profile. Possible values provided by Amazon Web Services are aws.cognito.signin.user.admin. Custom scopes created in Resource Servers are also supported.
    public var allowedOAuthScopes: [Swift.String]?
    /// The user pool analytics configuration for collecting metrics and sending them to your Amazon Pinpoint campaign. In Amazon Web Services Regions where Amazon Pinpoint isn't available, user pools only support sending events to Amazon Pinpoint projects in Amazon Web Services Region us-east-1. In Regions where Amazon Pinpoint is available, user pools support sending events to Amazon Pinpoint projects within that same Region.
    public var analyticsConfiguration: CognitoIdentityProviderClientTypes.AnalyticsConfigurationType?
    /// Amazon Cognito creates a session token for each API request in an authentication flow. AuthSessionValidity is the duration, in minutes, of that session token. Your user pool native user must respond to each authentication challenge before the session expires.
    public var authSessionValidity: Swift.Int?
    /// A list of allowed redirect (callback) URLs for the IdPs. A redirect URI must:
    ///
    /// * Be an absolute URI.
    ///
    /// * Be registered with the authorization server.
    ///
    /// * Not include a fragment component.
    ///
    ///
    /// See [OAuth 2.0 - Redirection Endpoint](https://tools.ietf.org/html/rfc6749#section-3.1.2). Amazon Cognito requires HTTPS over HTTP except for http://localhost for testing purposes only. App callback URLs such as myapp://example are also supported.
    public var callbackURLs: [Swift.String]?
    /// The client name for the user pool client you would like to create.
    /// This member is required.
    public var clientName: Swift.String?
    /// The default redirect URI. In app clients with one assigned IdP, replaces redirect_uri in authentication requests. Must be in the CallbackURLs list. A redirect URI must:
    ///
    /// * Be an absolute URI.
    ///
    /// * Be registered with the authorization server.
    ///
    /// * Not include a fragment component.
    ///
    ///
    /// For more information, see [Default redirect URI](https://docs.aws.amazon.com/cognito/latest/developerguide/user-pool-settings-client-apps.html#cognito-user-pools-app-idp-settings-about). Amazon Cognito requires HTTPS over HTTP except for http://localhost for testing purposes only. App callback URLs such as myapp://example are also supported.
    public var defaultRedirectURI: Swift.String?
    /// Activates the propagation of additional user context data. For more information about propagation of user context data, see [ Adding advanced security to a user pool](https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-pool-settings-advanced-security.html). If you don’t include this parameter, you can't send device fingerprint information, including source IP address, to Amazon Cognito advanced security. You can only activate EnablePropagateAdditionalUserContextData in an app client that has a client secret.
    public var enablePropagateAdditionalUserContextData: Swift.Bool?
    /// Activates or deactivates token revocation. For more information about revoking tokens, see [RevokeToken](https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_RevokeToken.html). If you don't include this parameter, token revocation is automatically activated for the new user pool client.
    public var enableTokenRevocation: Swift.Bool?
    /// The authentication flows that you want your user pool client to support. For each app client in your user pool, you can sign in your users with any combination of one or more flows, including with a user name and Secure Remote Password (SRP), a user name and password, or a custom authentication process that you define with Lambda functions. If you don't specify a value for ExplicitAuthFlows, your user client supports ALLOW_REFRESH_TOKEN_AUTH, ALLOW_USER_SRP_AUTH, and ALLOW_CUSTOM_AUTH. Valid values include:
    ///
    /// * ALLOW_ADMIN_USER_PASSWORD_AUTH: Enable admin based user password authentication flow ADMIN_USER_PASSWORD_AUTH. This setting replaces the ADMIN_NO_SRP_AUTH setting. With this authentication flow, your app passes a user name and password to Amazon Cognito in the request, instead of using the Secure Remote Password (SRP) protocol to securely transmit the password.
    ///
    /// * ALLOW_CUSTOM_AUTH: Enable Lambda trigger based authentication.
    ///
    /// * ALLOW_USER_PASSWORD_AUTH: Enable user password-based authentication. In this flow, Amazon Cognito receives the password in the request instead of using the SRP protocol to verify passwords.
    ///
    /// * ALLOW_USER_SRP_AUTH: Enable SRP-based authentication.
    ///
    /// * ALLOW_REFRESH_TOKEN_AUTH: Enable authflow to refresh tokens.
    ///
    ///
    /// In some environments, you will see the values ADMIN_NO_SRP_AUTH, CUSTOM_AUTH_FLOW_ONLY, or USER_PASSWORD_AUTH. You can't assign these legacy ExplicitAuthFlows values to user pool clients at the same time as values that begin with ALLOW_, like ALLOW_USER_SRP_AUTH.
    public var explicitAuthFlows: [CognitoIdentityProviderClientTypes.ExplicitAuthFlowsType]?
    /// Boolean to specify whether you want to generate a secret for the user pool client being created.
    public var generateSecret: Swift.Bool?
    /// The ID token time limit. After this limit expires, your user can't use their ID token. To specify the time unit for IdTokenValidity as seconds, minutes, hours, or days, set a TokenValidityUnits value in your API request. For example, when you set IdTokenValidity as 10 and TokenValidityUnits as hours, your user can authenticate their session with their ID token for 10 hours. The default time unit for IdTokenValidity in an API request is hours. Valid range is displayed below in seconds. If you don't specify otherwise in the configuration of your app client, your ID tokens are valid for one hour.
    public var idTokenValidity: Swift.Int?
    /// A list of allowed logout URLs for the IdPs.
    public var logoutURLs: [Swift.String]?
    /// Errors and responses that you want Amazon Cognito APIs to return during authentication, account confirmation, and password recovery when the user doesn't exist in the user pool. When set to ENABLED and the user doesn't exist, authentication returns an error indicating either the username or password was incorrect. Account confirmation and password recovery return a response indicating a code was sent to a simulated destination. When set to LEGACY, those APIs return a UserNotFoundException exception if the user doesn't exist in the user pool. Valid values include:
    ///
    /// * ENABLED - This prevents user existence-related errors.
    ///
    /// * LEGACY - This represents the early behavior of Amazon Cognito where user existence related errors aren't prevented.
    ///
    ///
    /// Defaults to LEGACY when you don't provide a value.
    public var preventUserExistenceErrors: CognitoIdentityProviderClientTypes.PreventUserExistenceErrorTypes?
    /// The list of user attributes that you want your app client to have read access to. After your user authenticates in your app, their access token authorizes them to read their own attribute value for any attribute in this list. An example of this kind of activity is when your user selects a link to view their profile information. Your app makes a [GetUser](https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_GetUser.html) API request to retrieve and display your user's profile data. When you don't specify the ReadAttributes for your app client, your app can read the values of email_verified, phone_number_verified, and the Standard attributes of your user pool. When your user pool app client has read access to these default attributes, ReadAttributes doesn't return any information. Amazon Cognito only populates ReadAttributes in the API response if you have specified your own custom set of read attributes.
    public var readAttributes: [Swift.String]?
    /// The refresh token time limit. After this limit expires, your user can't use their refresh token. To specify the time unit for RefreshTokenValidity as seconds, minutes, hours, or days, set a TokenValidityUnits value in your API request. For example, when you set RefreshTokenValidity as 10 and TokenValidityUnits as days, your user can refresh their session and retrieve new access and ID tokens for 10 days. The default time unit for RefreshTokenValidity in an API request is days. You can't set RefreshTokenValidity to 0. If you do, Amazon Cognito overrides the value with the default value of 30 days. Valid range is displayed below in seconds. If you don't specify otherwise in the configuration of your app client, your refresh tokens are valid for 30 days.
    public var refreshTokenValidity: Swift.Int?
    /// A list of provider names for the identity providers (IdPs) that are supported on this client. The following are supported: COGNITO, Facebook, Google, SignInWithApple, and LoginWithAmazon. You can also specify the names that you configured for the SAML and OIDC IdPs in your user pool, for example MySAMLIdP or MyOIDCIdP.
    public var supportedIdentityProviders: [Swift.String]?
    /// The units in which the validity times are represented. The default unit for RefreshToken is days, and default for ID and access tokens are hours.
    public var tokenValidityUnits: CognitoIdentityProviderClientTypes.TokenValidityUnitsType?
    /// The user pool ID for the user pool where you want to create a user pool client.
    /// This member is required.
    public var userPoolId: Swift.String?
    /// The list of user attributes that you want your app client to have write access to. After your user authenticates in your app, their access token authorizes them to set or modify their own attribute value for any attribute in this list. An example of this kind of activity is when you present your user with a form to update their profile information and they change their last name. Your app then makes an [UpdateUserAttributes](https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_UpdateUserAttributes.html) API request and sets family_name to the new value. When you don't specify the WriteAttributes for your app client, your app can write the values of the Standard attributes of your user pool. When your user pool has write access to these default attributes, WriteAttributes doesn't return any information. Amazon Cognito only populates WriteAttributes in the API response if you have specified your own custom set of write attributes. If your app client allows users to sign in through an IdP, this array must include all attributes that you have mapped to IdP attributes. Amazon Cognito updates mapped attributes when users sign in to your application through an IdP. If your app client does not have write access to a mapped attribute, Amazon Cognito throws an error when it tries to update the attribute. For more information, see [Specifying IdP Attribute Mappings for Your user pool](https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-pools-specifying-attribute-mapping.html).
    public var writeAttributes: [Swift.String]?

    public init(
        accessTokenValidity: Swift.Int? = nil,
        allowedOAuthFlows: [CognitoIdentityProviderClientTypes.OAuthFlowType]? = nil,
        allowedOAuthFlowsUserPoolClient: Swift.Bool? = false,
        allowedOAuthScopes: [Swift.String]? = nil,
        analyticsConfiguration: CognitoIdentityProviderClientTypes.AnalyticsConfigurationType? = nil,
        authSessionValidity: Swift.Int? = nil,
        callbackURLs: [Swift.String]? = nil,
        clientName: Swift.String? = nil,
        defaultRedirectURI: Swift.String? = nil,
        enablePropagateAdditionalUserContextData: Swift.Bool? = nil,
        enableTokenRevocation: Swift.Bool? = nil,
        explicitAuthFlows: [CognitoIdentityProviderClientTypes.ExplicitAuthFlowsType]? = nil,
        generateSecret: Swift.Bool? = false,
        idTokenValidity: Swift.Int? = nil,
        logoutURLs: [Swift.String]? = nil,
        preventUserExistenceErrors: CognitoIdentityProviderClientTypes.PreventUserExistenceErrorTypes? = nil,
        readAttributes: [Swift.String]? = nil,
        refreshTokenValidity: Swift.Int? = 0,
        supportedIdentityProviders: [Swift.String]? = nil,
        tokenValidityUnits: CognitoIdentityProviderClientTypes.TokenValidityUnitsType? = nil,
        userPoolId: Swift.String? = nil,
        writeAttributes: [Swift.String]? = nil
    )
    {
        self.accessTokenValidity = accessTokenValidity
        self.allowedOAuthFlows = allowedOAuthFlows
        self.allowedOAuthFlowsUserPoolClient = allowedOAuthFlowsUserPoolClient
        self.allowedOAuthScopes = allowedOAuthScopes
        self.analyticsConfiguration = analyticsConfiguration
        self.authSessionValidity = authSessionValidity
        self.callbackURLs = callbackURLs
        self.clientName = clientName
        self.defaultRedirectURI = defaultRedirectURI
        self.enablePropagateAdditionalUserContextData = enablePropagateAdditionalUserContextData
        self.enableTokenRevocation = enableTokenRevocation
        self.explicitAuthFlows = explicitAuthFlows
        self.generateSecret = generateSecret
        self.idTokenValidity = idTokenValidity
        self.logoutURLs = logoutURLs
        self.preventUserExistenceErrors = preventUserExistenceErrors
        self.readAttributes = readAttributes
        self.refreshTokenValidity = refreshTokenValidity
        self.supportedIdentityProviders = supportedIdentityProviders
        self.tokenValidityUnits = tokenValidityUnits
        self.userPoolId = userPoolId
        self.writeAttributes = writeAttributes
    }
}

extension CognitoIdentityProviderClientTypes {

    /// Contains information about a user pool client.
    public struct UserPoolClientType: Swift.Sendable {
        /// The access token time limit. After this limit expires, your user can't use their access token. To specify the time unit for AccessTokenValidity as seconds, minutes, hours, or days, set a TokenValidityUnits value in your API request. For example, when you set AccessTokenValidity to 10 and TokenValidityUnits to hours, your user can authorize access with their access token for 10 hours. The default time unit for AccessTokenValidity in an API request is hours. Valid range is displayed below in seconds. If you don't specify otherwise in the configuration of your app client, your access tokens are valid for one hour.
        public var accessTokenValidity: Swift.Int?
        /// The allowed OAuth flows. code Use a code grant flow, which provides an authorization code as the response. This code can be exchanged for access tokens with the /oauth2/token endpoint. implicit Issue the access token (and, optionally, ID token, based on scopes) directly to your user. client_credentials Issue the access token from the /oauth2/token endpoint directly to a non-person user using a combination of the client ID and client secret.
        public var allowedOAuthFlows: [CognitoIdentityProviderClientTypes.OAuthFlowType]?
        /// Set to true to use OAuth 2.0 features in your user pool app client. AllowedOAuthFlowsUserPoolClient must be true before you can configure the following features in your app client.
        ///
        /// * CallBackURLs: Callback URLs.
        ///
        /// * LogoutURLs: Sign-out redirect URLs.
        ///
        /// * AllowedOAuthScopes: OAuth 2.0 scopes.
        ///
        /// * AllowedOAuthFlows: Support for authorization code, implicit, and client credentials OAuth 2.0 grants.
        ///
        ///
        /// To use OAuth 2.0 features, configure one of these features in the Amazon Cognito console or set AllowedOAuthFlowsUserPoolClient to true in a CreateUserPoolClient or UpdateUserPoolClient API request. If you don't set a value for AllowedOAuthFlowsUserPoolClient in a request with the CLI or SDKs, it defaults to false.
        public var allowedOAuthFlowsUserPoolClient: Swift.Bool?
        /// The OAuth scopes that your app client supports. Possible values that OAuth provides are phone, email, openid, and profile. Possible values that Amazon Web Services provides are aws.cognito.signin.user.admin. Amazon Cognito also supports custom scopes that you create in Resource Servers.
        public var allowedOAuthScopes: [Swift.String]?
        /// The Amazon Pinpoint analytics configuration for the user pool client. Amazon Cognito user pools only support sending events to Amazon Pinpoint projects in the US East (N. Virginia) us-east-1 Region, regardless of the Region where the user pool resides.
        public var analyticsConfiguration: CognitoIdentityProviderClientTypes.AnalyticsConfigurationType?
        /// Amazon Cognito creates a session token for each API request in an authentication flow. AuthSessionValidity is the duration, in minutes, of that session token. Your user pool native user must respond to each authentication challenge before the session expires.
        public var authSessionValidity: Swift.Int?
        /// A list of allowed redirect (callback) URLs for the IdPs. A redirect URI must:
        ///
        /// * Be an absolute URI.
        ///
        /// * Be registered with the authorization server.
        ///
        /// * Not include a fragment component.
        ///
        ///
        /// See [OAuth 2.0 - Redirection Endpoint](https://tools.ietf.org/html/rfc6749#section-3.1.2). Amazon Cognito requires HTTPS over HTTP except for http://localhost for testing purposes only. App callback URLs such as myapp://example are also supported.
        public var callbackURLs: [Swift.String]?
        /// The ID of the client associated with the user pool.
        public var clientId: Swift.String?
        /// The client name from the user pool request of the client type.
        public var clientName: Swift.String?
        /// The client secret from the user pool request of the client type.
        public var clientSecret: Swift.String?
        /// The date and time when the item was created. Amazon Cognito returns this timestamp in UNIX epoch time format. Your SDK might render the output in a human-readable format like ISO 8601 or a Java Date object.
        public var creationDate: Foundation.Date?
        /// The default redirect URI. Must be in the CallbackURLs list. A redirect URI must:
        ///
        /// * Be an absolute URI.
        ///
        /// * Be registered with the authorization server.
        ///
        /// * Not include a fragment component.
        ///
        ///
        /// See [OAuth 2.0 - Redirection Endpoint](https://tools.ietf.org/html/rfc6749#section-3.1.2). Amazon Cognito requires HTTPS over HTTP except for http://localhost for testing purposes only. App callback URLs such as myapp://example are also supported.
        public var defaultRedirectURI: Swift.String?
        /// When EnablePropagateAdditionalUserContextData is true, Amazon Cognito accepts an IpAddress value that you send in the UserContextData parameter. The UserContextData parameter sends information to Amazon Cognito advanced security for risk analysis. You can send UserContextData when you sign in Amazon Cognito native users with the InitiateAuth and RespondToAuthChallenge API operations. When EnablePropagateAdditionalUserContextData is false, you can't send your user's source IP address to Amazon Cognito advanced security with unauthenticated API operations. EnablePropagateAdditionalUserContextData doesn't affect whether you can send a source IP address in a ContextData parameter with the authenticated API operations AdminInitiateAuth and AdminRespondToAuthChallenge. You can only activate EnablePropagateAdditionalUserContextData in an app client that has a client secret. For more information about propagation of user context data, see [Adding user device and session data to API requests](https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-pool-settings-adaptive-authentication.html#user-pool-settings-adaptive-authentication-device-fingerprint).
        public var enablePropagateAdditionalUserContextData: Swift.Bool?
        /// Indicates whether token revocation is activated for the user pool client. When you create a new user pool client, token revocation is activated by default. For more information about revoking tokens, see [RevokeToken](https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_RevokeToken.html).
        public var enableTokenRevocation: Swift.Bool?
        /// The authentication flows that you want your user pool client to support. For each app client in your user pool, you can sign in your users with any combination of one or more flows, including with a user name and Secure Remote Password (SRP), a user name and password, or a custom authentication process that you define with Lambda functions. If you don't specify a value for ExplicitAuthFlows, your user client supports ALLOW_REFRESH_TOKEN_AUTH, ALLOW_USER_SRP_AUTH, and ALLOW_CUSTOM_AUTH. Valid values include:
        ///
        /// * ALLOW_ADMIN_USER_PASSWORD_AUTH: Enable admin based user password authentication flow ADMIN_USER_PASSWORD_AUTH. This setting replaces the ADMIN_NO_SRP_AUTH setting. With this authentication flow, your app passes a user name and password to Amazon Cognito in the request, instead of using the Secure Remote Password (SRP) protocol to securely transmit the password.
        ///
        /// * ALLOW_CUSTOM_AUTH: Enable Lambda trigger based authentication.
        ///
        /// * ALLOW_USER_PASSWORD_AUTH: Enable user password-based authentication. In this flow, Amazon Cognito receives the password in the request instead of using the SRP protocol to verify passwords.
        ///
        /// * ALLOW_USER_SRP_AUTH: Enable SRP-based authentication.
        ///
        /// * ALLOW_REFRESH_TOKEN_AUTH: Enable authflow to refresh tokens.
        ///
        ///
        /// In some environments, you will see the values ADMIN_NO_SRP_AUTH, CUSTOM_AUTH_FLOW_ONLY, or USER_PASSWORD_AUTH. You can't assign these legacy ExplicitAuthFlows values to user pool clients at the same time as values that begin with ALLOW_, like ALLOW_USER_SRP_AUTH.
        public var explicitAuthFlows: [CognitoIdentityProviderClientTypes.ExplicitAuthFlowsType]?
        /// The ID token time limit. After this limit expires, your user can't use their ID token. To specify the time unit for IdTokenValidity as seconds, minutes, hours, or days, set a TokenValidityUnits value in your API request. For example, when you set IdTokenValidity as 10 and TokenValidityUnits as hours, your user can authenticate their session with their ID token for 10 hours. The default time unit for IdTokenValidity in an API request is hours. Valid range is displayed below in seconds. If you don't specify otherwise in the configuration of your app client, your ID tokens are valid for one hour.
        public var idTokenValidity: Swift.Int?
        /// The date and time when the item was modified. Amazon Cognito returns this timestamp in UNIX epoch time format. Your SDK might render the output in a human-readable format like ISO 8601 or a Java Date object.
        public var lastModifiedDate: Foundation.Date?
        /// A list of allowed logout URLs for the IdPs.
        public var logoutURLs: [Swift.String]?
        /// Errors and responses that you want Amazon Cognito APIs to return during authentication, account confirmation, and password recovery when the user doesn't exist in the user pool. When set to ENABLED and the user doesn't exist, authentication returns an error indicating either the username or password was incorrect. Account confirmation and password recovery return a response indicating a code was sent to a simulated destination. When set to LEGACY, those APIs return a UserNotFoundException exception if the user doesn't exist in the user pool. Valid values include:
        ///
        /// * ENABLED - This prevents user existence-related errors.
        ///
        /// * LEGACY - This represents the early behavior of Amazon Cognito where user existence related errors aren't prevented.
        ///
        ///
        /// Defaults to LEGACY when you don't provide a value.
        public var preventUserExistenceErrors: CognitoIdentityProviderClientTypes.PreventUserExistenceErrorTypes?
        /// The list of user attributes that you want your app client to have read access to. After your user authenticates in your app, their access token authorizes them to read their own attribute value for any attribute in this list. An example of this kind of activity is when your user selects a link to view their profile information. Your app makes a [GetUser](https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_GetUser.html) API request to retrieve and display your user's profile data. When you don't specify the ReadAttributes for your app client, your app can read the values of email_verified, phone_number_verified, and the Standard attributes of your user pool. When your user pool app client has read access to these default attributes, ReadAttributes doesn't return any information. Amazon Cognito only populates ReadAttributes in the API response if you have specified your own custom set of read attributes.
        public var readAttributes: [Swift.String]?
        /// The refresh token time limit. After this limit expires, your user can't use their refresh token. To specify the time unit for RefreshTokenValidity as seconds, minutes, hours, or days, set a TokenValidityUnits value in your API request. For example, when you set RefreshTokenValidity as 10 and TokenValidityUnits as days, your user can refresh their session and retrieve new access and ID tokens for 10 days. The default time unit for RefreshTokenValidity in an API request is days. You can't set RefreshTokenValidity to 0. If you do, Amazon Cognito overrides the value with the default value of 30 days. Valid range is displayed below in seconds. If you don't specify otherwise in the configuration of your app client, your refresh tokens are valid for 30 days.
        public var refreshTokenValidity: Swift.Int
        /// A list of provider names for the IdPs that this client supports. The following are supported: COGNITO, Facebook, Google, SignInWithApple, LoginWithAmazon, and the names of your own SAML and OIDC providers.
        public var supportedIdentityProviders: [Swift.String]?
        /// The time units used to specify the token validity times of each token type: ID, access, and refresh.
        public var tokenValidityUnits: CognitoIdentityProviderClientTypes.TokenValidityUnitsType?
        /// The user pool ID for the user pool client.
        public var userPoolId: Swift.String?
        /// The list of user attributes that you want your app client to have write access to. After your user authenticates in your app, their access token authorizes them to set or modify their own attribute value for any attribute in this list. An example of this kind of activity is when you present your user with a form to update their profile information and they change their last name. Your app then makes an [UpdateUserAttributes](https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_UpdateUserAttributes.html) API request and sets family_name to the new value. When you don't specify the WriteAttributes for your app client, your app can write the values of the Standard attributes of your user pool. When your user pool has write access to these default attributes, WriteAttributes doesn't return any information. Amazon Cognito only populates WriteAttributes in the API response if you have specified your own custom set of write attributes. If your app client allows users to sign in through an IdP, this array must include all attributes that you have mapped to IdP attributes. Amazon Cognito updates mapped attributes when users sign in to your application through an IdP. If your app client does not have write access to a mapped attribute, Amazon Cognito throws an error when it tries to update the attribute. For more information, see [Specifying IdP Attribute Mappings for Your user pool](https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-pools-specifying-attribute-mapping.html).
        public var writeAttributes: [Swift.String]?

        public init(
            accessTokenValidity: Swift.Int? = nil,
            allowedOAuthFlows: [CognitoIdentityProviderClientTypes.OAuthFlowType]? = nil,
            allowedOAuthFlowsUserPoolClient: Swift.Bool? = false,
            allowedOAuthScopes: [Swift.String]? = nil,
            analyticsConfiguration: CognitoIdentityProviderClientTypes.AnalyticsConfigurationType? = nil,
            authSessionValidity: Swift.Int? = nil,
            callbackURLs: [Swift.String]? = nil,
            clientId: Swift.String? = nil,
            clientName: Swift.String? = nil,
            clientSecret: Swift.String? = nil,
            creationDate: Foundation.Date? = nil,
            defaultRedirectURI: Swift.String? = nil,
            enablePropagateAdditionalUserContextData: Swift.Bool? = nil,
            enableTokenRevocation: Swift.Bool? = nil,
            explicitAuthFlows: [CognitoIdentityProviderClientTypes.ExplicitAuthFlowsType]? = nil,
            idTokenValidity: Swift.Int? = nil,
            lastModifiedDate: Foundation.Date? = nil,
            logoutURLs: [Swift.String]? = nil,
            preventUserExistenceErrors: CognitoIdentityProviderClientTypes.PreventUserExistenceErrorTypes? = nil,
            readAttributes: [Swift.String]? = nil,
            refreshTokenValidity: Swift.Int = 0,
            supportedIdentityProviders: [Swift.String]? = nil,
            tokenValidityUnits: CognitoIdentityProviderClientTypes.TokenValidityUnitsType? = nil,
            userPoolId: Swift.String? = nil,
            writeAttributes: [Swift.String]? = nil
        )
        {
            self.accessTokenValidity = accessTokenValidity
            self.allowedOAuthFlows = allowedOAuthFlows
            self.allowedOAuthFlowsUserPoolClient = allowedOAuthFlowsUserPoolClient
            self.allowedOAuthScopes = allowedOAuthScopes
            self.analyticsConfiguration = analyticsConfiguration
            self.authSessionValidity = authSessionValidity
            self.callbackURLs = callbackURLs
            self.clientId = clientId
            self.clientName = clientName
            self.clientSecret = clientSecret
            self.creationDate = creationDate
            self.defaultRedirectURI = defaultRedirectURI
            self.enablePropagateAdditionalUserContextData = enablePropagateAdditionalUserContextData
            self.enableTokenRevocation = enableTokenRevocation
            self.explicitAuthFlows = explicitAuthFlows
            self.idTokenValidity = idTokenValidity
            self.lastModifiedDate = lastModifiedDate
            self.logoutURLs = logoutURLs
            self.preventUserExistenceErrors = preventUserExistenceErrors
            self.readAttributes = readAttributes
            self.refreshTokenValidity = refreshTokenValidity
            self.supportedIdentityProviders = supportedIdentityProviders
            self.tokenValidityUnits = tokenValidityUnits
            self.userPoolId = userPoolId
            self.writeAttributes = writeAttributes
        }
    }
}

extension CognitoIdentityProviderClientTypes.UserPoolClientType: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UserPoolClientType(accessTokenValidity: \(Swift.String(describing: accessTokenValidity)), allowedOAuthFlows: \(Swift.String(describing: allowedOAuthFlows)), allowedOAuthFlowsUserPoolClient: \(Swift.String(describing: allowedOAuthFlowsUserPoolClient)), allowedOAuthScopes: \(Swift.String(describing: allowedOAuthScopes)), analyticsConfiguration: \(Swift.String(describing: analyticsConfiguration)), authSessionValidity: \(Swift.String(describing: authSessionValidity)), callbackURLs: \(Swift.String(describing: callbackURLs)), clientName: \(Swift.String(describing: clientName)), creationDate: \(Swift.String(describing: creationDate)), defaultRedirectURI: \(Swift.String(describing: defaultRedirectURI)), enablePropagateAdditionalUserContextData: \(Swift.String(describing: enablePropagateAdditionalUserContextData)), enableTokenRevocation: \(Swift.String(describing: enableTokenRevocation)), explicitAuthFlows: \(Swift.String(describing: explicitAuthFlows)), idTokenValidity: \(Swift.String(describing: idTokenValidity)), lastModifiedDate: \(Swift.String(describing: lastModifiedDate)), logoutURLs: \(Swift.String(describing: logoutURLs)), preventUserExistenceErrors: \(Swift.String(describing: preventUserExistenceErrors)), readAttributes: \(Swift.String(describing: readAttributes)), refreshTokenValidity: \(Swift.String(describing: refreshTokenValidity)), supportedIdentityProviders: \(Swift.String(describing: supportedIdentityProviders)), tokenValidityUnits: \(Swift.String(describing: tokenValidityUnits)), userPoolId: \(Swift.String(describing: userPoolId)), writeAttributes: \(Swift.String(describing: writeAttributes)), clientId: \"CONTENT_REDACTED\", clientSecret: \"CONTENT_REDACTED\")"}
}

/// Represents the response from the server to create a user pool client.
public struct CreateUserPoolClientOutput: Swift.Sendable {
    /// The user pool client that was just created.
    public var userPoolClient: CognitoIdentityProviderClientTypes.UserPoolClientType?

    public init(
        userPoolClient: CognitoIdentityProviderClientTypes.UserPoolClientType? = nil
    )
    {
        self.userPoolClient = userPoolClient
    }
}

extension CognitoIdentityProviderClientTypes {

    /// The configuration for a custom domain that hosts the sign-up and sign-in webpages for your application.
    public struct CustomDomainConfigType: Swift.Sendable {
        /// The Amazon Resource Name (ARN) of an Certificate Manager SSL certificate. You use this certificate for the subdomain of your custom domain.
        /// This member is required.
        public var certificateArn: Swift.String?

        public init(
            certificateArn: Swift.String? = nil
        )
        {
            self.certificateArn = certificateArn
        }
    }
}

public struct CreateUserPoolDomainInput: Swift.Sendable {
    /// The configuration for a custom domain that hosts the sign-up and sign-in webpages for your application. Provide this parameter only if you want to use a custom domain for your user pool. Otherwise, you can exclude this parameter and use the Amazon Cognito hosted domain instead. For more information about the hosted domain and custom domains, see [Configuring a User Pool Domain](https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-pools-assign-domain.html).
    public var customDomainConfig: CognitoIdentityProviderClientTypes.CustomDomainConfigType?
    /// The domain string. For custom domains, this is the fully-qualified domain name, such as auth.example.com. For Amazon Cognito prefix domains, this is the prefix alone, such as auth.
    /// This member is required.
    public var domain: Swift.String?
    /// The user pool ID.
    /// This member is required.
    public var userPoolId: Swift.String?

    public init(
        customDomainConfig: CognitoIdentityProviderClientTypes.CustomDomainConfigType? = nil,
        domain: Swift.String? = nil,
        userPoolId: Swift.String? = nil
    )
    {
        self.customDomainConfig = customDomainConfig
        self.domain = domain
        self.userPoolId = userPoolId
    }
}

public struct CreateUserPoolDomainOutput: Swift.Sendable {
    /// The Amazon CloudFront endpoint that you use as the target of the alias that you set up with your Domain Name Service (DNS) provider. Amazon Cognito returns this value if you set a custom domain with CustomDomainConfig. If you set an Amazon Cognito prefix domain, this operation returns a blank response.
    public var cloudFrontDomain: Swift.String?

    public init(
        cloudFrontDomain: Swift.String? = nil
    )
    {
        self.cloudFrontDomain = cloudFrontDomain
    }
}

public struct DeleteGroupInput: Swift.Sendable {
    /// The name of the group.
    /// This member is required.
    public var groupName: Swift.String?
    /// The user pool ID for the user pool.
    /// This member is required.
    public var userPoolId: Swift.String?

    public init(
        groupName: Swift.String? = nil,
        userPoolId: Swift.String? = nil
    )
    {
        self.groupName = groupName
        self.userPoolId = userPoolId
    }
}

/// This exception is thrown when the specified identifier isn't supported.
public struct UnsupportedIdentityProviderException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "UnsupportedIdentityProviderException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

public struct DeleteIdentityProviderInput: Swift.Sendable {
    /// The IdP name.
    /// This member is required.
    public var providerName: Swift.String?
    /// The user pool ID.
    /// This member is required.
    public var userPoolId: Swift.String?

    public init(
        providerName: Swift.String? = nil,
        userPoolId: Swift.String? = nil
    )
    {
        self.providerName = providerName
        self.userPoolId = userPoolId
    }
}

public struct DeleteResourceServerInput: Swift.Sendable {
    /// The identifier for the resource server.
    /// This member is required.
    public var identifier: Swift.String?
    /// The user pool ID for the user pool that hosts the resource server.
    /// This member is required.
    public var userPoolId: Swift.String?

    public init(
        identifier: Swift.String? = nil,
        userPoolId: Swift.String? = nil
    )
    {
        self.identifier = identifier
        self.userPoolId = userPoolId
    }
}

/// Represents the request to delete a user.
public struct DeleteUserInput: Swift.Sendable {
    /// A valid access token that Amazon Cognito issued to the user whose user profile you want to delete.
    /// This member is required.
    public var accessToken: Swift.String?

    public init(
        accessToken: Swift.String? = nil
    )
    {
        self.accessToken = accessToken
    }
}

extension DeleteUserInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteUserInput(accessToken: \"CONTENT_REDACTED\")"}
}

/// Represents the request to delete user attributes.
public struct DeleteUserAttributesInput: Swift.Sendable {
    /// A valid access token that Amazon Cognito issued to the user whose attributes you want to delete.
    /// This member is required.
    public var accessToken: Swift.String?
    /// An array of strings representing the user attribute names you want to delete. For custom attributes, you must prependattach the custom: prefix to the front of the attribute name.
    /// This member is required.
    public var userAttributeNames: [Swift.String]?

    public init(
        accessToken: Swift.String? = nil,
        userAttributeNames: [Swift.String]? = nil
    )
    {
        self.accessToken = accessToken
        self.userAttributeNames = userAttributeNames
    }
}

extension DeleteUserAttributesInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteUserAttributesInput(userAttributeNames: \(Swift.String(describing: userAttributeNames)), accessToken: \"CONTENT_REDACTED\")"}
}

/// Represents the response from the server to delete user attributes.
public struct DeleteUserAttributesOutput: Swift.Sendable {

    public init() { }
}

/// Represents the request to delete a user pool.
public struct DeleteUserPoolInput: Swift.Sendable {
    /// The user pool ID for the user pool you want to delete.
    /// This member is required.
    public var userPoolId: Swift.String?

    public init(
        userPoolId: Swift.String? = nil
    )
    {
        self.userPoolId = userPoolId
    }
}

/// Represents the request to delete a user pool client.
public struct DeleteUserPoolClientInput: Swift.Sendable {
    /// The app client ID of the app associated with the user pool.
    /// This member is required.
    public var clientId: Swift.String?
    /// The user pool ID for the user pool where you want to delete the client.
    /// This member is required.
    public var userPoolId: Swift.String?

    public init(
        clientId: Swift.String? = nil,
        userPoolId: Swift.String? = nil
    )
    {
        self.clientId = clientId
        self.userPoolId = userPoolId
    }
}

extension DeleteUserPoolClientInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteUserPoolClientInput(userPoolId: \(Swift.String(describing: userPoolId)), clientId: \"CONTENT_REDACTED\")"}
}

public struct DeleteUserPoolDomainInput: Swift.Sendable {
    /// The domain string. For custom domains, this is the fully-qualified domain name, such as auth.example.com. For Amazon Cognito prefix domains, this is the prefix alone, such as auth.
    /// This member is required.
    public var domain: Swift.String?
    /// The user pool ID.
    /// This member is required.
    public var userPoolId: Swift.String?

    public init(
        domain: Swift.String? = nil,
        userPoolId: Swift.String? = nil
    )
    {
        self.domain = domain
        self.userPoolId = userPoolId
    }
}

public struct DeleteUserPoolDomainOutput: Swift.Sendable {

    public init() { }
}

public struct DescribeIdentityProviderInput: Swift.Sendable {
    /// The IdP name.
    /// This member is required.
    public var providerName: Swift.String?
    /// The user pool ID.
    /// This member is required.
    public var userPoolId: Swift.String?

    public init(
        providerName: Swift.String? = nil,
        userPoolId: Swift.String? = nil
    )
    {
        self.providerName = providerName
        self.userPoolId = userPoolId
    }
}

public struct DescribeIdentityProviderOutput: Swift.Sendable {
    /// The identity provider details.
    /// This member is required.
    public var identityProvider: CognitoIdentityProviderClientTypes.IdentityProviderType?

    public init(
        identityProvider: CognitoIdentityProviderClientTypes.IdentityProviderType? = nil
    )
    {
        self.identityProvider = identityProvider
    }
}

public struct DescribeResourceServerInput: Swift.Sendable {
    /// A unique resource server identifier for the resource server. The identifier can be an API friendly name like solar-system-data. You can also set an API URL like https://solar-system-data-api.example.com as your identifier. Amazon Cognito represents scopes in the access token in the format $resource-server-identifier/$scope. Longer scope-identifier strings increase the size of your access tokens.
    /// This member is required.
    public var identifier: Swift.String?
    /// The user pool ID for the user pool that hosts the resource server.
    /// This member is required.
    public var userPoolId: Swift.String?

    public init(
        identifier: Swift.String? = nil,
        userPoolId: Swift.String? = nil
    )
    {
        self.identifier = identifier
        self.userPoolId = userPoolId
    }
}

public struct DescribeResourceServerOutput: Swift.Sendable {
    /// The resource server.
    /// This member is required.
    public var resourceServer: CognitoIdentityProviderClientTypes.ResourceServerType?

    public init(
        resourceServer: CognitoIdentityProviderClientTypes.ResourceServerType? = nil
    )
    {
        self.resourceServer = resourceServer
    }
}

public struct DescribeRiskConfigurationInput: Swift.Sendable {
    /// The app client ID.
    public var clientId: Swift.String?
    /// The user pool ID.
    /// This member is required.
    public var userPoolId: Swift.String?

    public init(
        clientId: Swift.String? = nil,
        userPoolId: Swift.String? = nil
    )
    {
        self.clientId = clientId
        self.userPoolId = userPoolId
    }
}

extension DescribeRiskConfigurationInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeRiskConfigurationInput(userPoolId: \(Swift.String(describing: userPoolId)), clientId: \"CONTENT_REDACTED\")"}
}

extension CognitoIdentityProviderClientTypes {

    public enum CompromisedCredentialsEventActionType: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case block
        case noAction
        case sdkUnknown(Swift.String)

        public static var allCases: [CompromisedCredentialsEventActionType] {
            return [
                .block,
                .noAction
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .block: return "BLOCK"
            case .noAction: return "NO_ACTION"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension CognitoIdentityProviderClientTypes {

    /// The compromised credentials actions type.
    public struct CompromisedCredentialsActionsType: Swift.Sendable {
        /// The event action.
        /// This member is required.
        public var eventAction: CognitoIdentityProviderClientTypes.CompromisedCredentialsEventActionType?

        public init(
            eventAction: CognitoIdentityProviderClientTypes.CompromisedCredentialsEventActionType? = nil
        )
        {
            self.eventAction = eventAction
        }
    }
}

extension CognitoIdentityProviderClientTypes {

    public enum EventFilterType: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case passwordChange
        case signIn
        case signUp
        case sdkUnknown(Swift.String)

        public static var allCases: [EventFilterType] {
            return [
                .passwordChange,
                .signIn,
                .signUp
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .passwordChange: return "PASSWORD_CHANGE"
            case .signIn: return "SIGN_IN"
            case .signUp: return "SIGN_UP"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension CognitoIdentityProviderClientTypes {

    /// The compromised credentials risk configuration type.
    public struct CompromisedCredentialsRiskConfigurationType: Swift.Sendable {
        /// The compromised credentials risk configuration actions.
        /// This member is required.
        public var actions: CognitoIdentityProviderClientTypes.CompromisedCredentialsActionsType?
        /// Perform the action for these events. The default is to perform all events if no event filter is specified.
        public var eventFilter: [CognitoIdentityProviderClientTypes.EventFilterType]?

        public init(
            actions: CognitoIdentityProviderClientTypes.CompromisedCredentialsActionsType? = nil,
            eventFilter: [CognitoIdentityProviderClientTypes.EventFilterType]? = nil
        )
        {
            self.actions = actions
            self.eventFilter = eventFilter
        }
    }
}

extension CognitoIdentityProviderClientTypes {

    /// The type of the configuration to override the risk decision.
    public struct RiskExceptionConfigurationType: Swift.Sendable {
        /// Overrides the risk decision to always block the pre-authentication requests. The IP range is in CIDR notation, a compact representation of an IP address and its routing prefix.
        public var blockedIPRangeList: [Swift.String]?
        /// Risk detection isn't performed on the IP addresses in this range list. The IP range is in CIDR notation.
        public var skippedIPRangeList: [Swift.String]?

        public init(
            blockedIPRangeList: [Swift.String]? = nil,
            skippedIPRangeList: [Swift.String]? = nil
        )
        {
            self.blockedIPRangeList = blockedIPRangeList
            self.skippedIPRangeList = skippedIPRangeList
        }
    }
}

extension CognitoIdentityProviderClientTypes {

    /// The risk configuration type.
    public struct RiskConfigurationType: Swift.Sendable {
        /// The account takeover risk configuration object, including the NotifyConfiguration object and Actions to take if there is an account takeover.
        public var accountTakeoverRiskConfiguration: CognitoIdentityProviderClientTypes.AccountTakeoverRiskConfigurationType?
        /// The app client ID.
        public var clientId: Swift.String?
        /// The compromised credentials risk configuration object, including the EventFilter and the EventAction.
        public var compromisedCredentialsRiskConfiguration: CognitoIdentityProviderClientTypes.CompromisedCredentialsRiskConfigurationType?
        /// The date and time when the item was modified. Amazon Cognito returns this timestamp in UNIX epoch time format. Your SDK might render the output in a human-readable format like ISO 8601 or a Java Date object.
        public var lastModifiedDate: Foundation.Date?
        /// The configuration to override the risk decision.
        public var riskExceptionConfiguration: CognitoIdentityProviderClientTypes.RiskExceptionConfigurationType?
        /// The user pool ID.
        public var userPoolId: Swift.String?

        public init(
            accountTakeoverRiskConfiguration: CognitoIdentityProviderClientTypes.AccountTakeoverRiskConfigurationType? = nil,
            clientId: Swift.String? = nil,
            compromisedCredentialsRiskConfiguration: CognitoIdentityProviderClientTypes.CompromisedCredentialsRiskConfigurationType? = nil,
            lastModifiedDate: Foundation.Date? = nil,
            riskExceptionConfiguration: CognitoIdentityProviderClientTypes.RiskExceptionConfigurationType? = nil,
            userPoolId: Swift.String? = nil
        )
        {
            self.accountTakeoverRiskConfiguration = accountTakeoverRiskConfiguration
            self.clientId = clientId
            self.compromisedCredentialsRiskConfiguration = compromisedCredentialsRiskConfiguration
            self.lastModifiedDate = lastModifiedDate
            self.riskExceptionConfiguration = riskExceptionConfiguration
            self.userPoolId = userPoolId
        }
    }
}

extension CognitoIdentityProviderClientTypes.RiskConfigurationType: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "RiskConfigurationType(accountTakeoverRiskConfiguration: \(Swift.String(describing: accountTakeoverRiskConfiguration)), compromisedCredentialsRiskConfiguration: \(Swift.String(describing: compromisedCredentialsRiskConfiguration)), lastModifiedDate: \(Swift.String(describing: lastModifiedDate)), riskExceptionConfiguration: \(Swift.String(describing: riskExceptionConfiguration)), userPoolId: \(Swift.String(describing: userPoolId)), clientId: \"CONTENT_REDACTED\")"}
}

public struct DescribeRiskConfigurationOutput: Swift.Sendable {
    /// The risk configuration.
    /// This member is required.
    public var riskConfiguration: CognitoIdentityProviderClientTypes.RiskConfigurationType?

    public init(
        riskConfiguration: CognitoIdentityProviderClientTypes.RiskConfigurationType? = nil
    )
    {
        self.riskConfiguration = riskConfiguration
    }
}

/// Represents the request to describe the user import job.
public struct DescribeUserImportJobInput: Swift.Sendable {
    /// The job ID for the user import job.
    /// This member is required.
    public var jobId: Swift.String?
    /// The user pool ID for the user pool that the users are being imported into.
    /// This member is required.
    public var userPoolId: Swift.String?

    public init(
        jobId: Swift.String? = nil,
        userPoolId: Swift.String? = nil
    )
    {
        self.jobId = jobId
        self.userPoolId = userPoolId
    }
}

/// Represents the response from the server to the request to describe the user import job.
public struct DescribeUserImportJobOutput: Swift.Sendable {
    /// The job object that represents the user import job.
    public var userImportJob: CognitoIdentityProviderClientTypes.UserImportJobType?

    public init(
        userImportJob: CognitoIdentityProviderClientTypes.UserImportJobType? = nil
    )
    {
        self.userImportJob = userImportJob
    }
}

/// Represents the request to describe the user pool.
public struct DescribeUserPoolInput: Swift.Sendable {
    /// The user pool ID for the user pool you want to describe.
    /// This member is required.
    public var userPoolId: Swift.String?

    public init(
        userPoolId: Swift.String? = nil
    )
    {
        self.userPoolId = userPoolId
    }
}

/// Represents the response to describe the user pool.
public struct DescribeUserPoolOutput: Swift.Sendable {
    /// The container of metadata returned by the server to describe the pool.
    public var userPool: CognitoIdentityProviderClientTypes.UserPoolType?

    public init(
        userPool: CognitoIdentityProviderClientTypes.UserPoolType? = nil
    )
    {
        self.userPool = userPool
    }
}

/// Represents the request to describe a user pool client.
public struct DescribeUserPoolClientInput: Swift.Sendable {
    /// The app client ID of the app associated with the user pool.
    /// This member is required.
    public var clientId: Swift.String?
    /// The user pool ID for the user pool you want to describe.
    /// This member is required.
    public var userPoolId: Swift.String?

    public init(
        clientId: Swift.String? = nil,
        userPoolId: Swift.String? = nil
    )
    {
        self.clientId = clientId
        self.userPoolId = userPoolId
    }
}

extension DescribeUserPoolClientInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeUserPoolClientInput(userPoolId: \(Swift.String(describing: userPoolId)), clientId: \"CONTENT_REDACTED\")"}
}

/// Represents the response from the server from a request to describe the user pool client.
public struct DescribeUserPoolClientOutput: Swift.Sendable {
    /// The user pool client from a server response to describe the user pool client.
    public var userPoolClient: CognitoIdentityProviderClientTypes.UserPoolClientType?

    public init(
        userPoolClient: CognitoIdentityProviderClientTypes.UserPoolClientType? = nil
    )
    {
        self.userPoolClient = userPoolClient
    }
}

public struct DescribeUserPoolDomainInput: Swift.Sendable {
    /// The domain string. For custom domains, this is the fully-qualified domain name, such as auth.example.com. For Amazon Cognito prefix domains, this is the prefix alone, such as auth.
    /// This member is required.
    public var domain: Swift.String?

    public init(
        domain: Swift.String? = nil
    )
    {
        self.domain = domain
    }
}

extension CognitoIdentityProviderClientTypes {

    public enum DomainStatusType: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case active
        case creating
        case deleting
        case failed
        case updating
        case sdkUnknown(Swift.String)

        public static var allCases: [DomainStatusType] {
            return [
                .active,
                .creating,
                .deleting,
                .failed,
                .updating
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .active: return "ACTIVE"
            case .creating: return "CREATING"
            case .deleting: return "DELETING"
            case .failed: return "FAILED"
            case .updating: return "UPDATING"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension CognitoIdentityProviderClientTypes {

    /// A container for information about a domain.
    public struct DomainDescriptionType: Swift.Sendable {
        /// The Amazon Web Services ID for the user pool owner.
        public var awsAccountId: Swift.String?
        /// The Amazon CloudFront endpoint that you use as the target of the alias that you set up with your Domain Name Service (DNS) provider.
        public var cloudFrontDistribution: Swift.String?
        /// The configuration for a custom domain that hosts the sign-up and sign-in webpages for your application.
        public var customDomainConfig: CognitoIdentityProviderClientTypes.CustomDomainConfigType?
        /// The domain string. For custom domains, this is the fully-qualified domain name, such as auth.example.com. For Amazon Cognito prefix domains, this is the prefix alone, such as auth.
        public var domain: Swift.String?
        /// The Amazon S3 bucket where the static files for this domain are stored.
        public var s3Bucket: Swift.String?
        /// The domain status.
        public var status: CognitoIdentityProviderClientTypes.DomainStatusType?
        /// The user pool ID.
        public var userPoolId: Swift.String?
        /// The app version.
        public var version: Swift.String?

        public init(
            awsAccountId: Swift.String? = nil,
            cloudFrontDistribution: Swift.String? = nil,
            customDomainConfig: CognitoIdentityProviderClientTypes.CustomDomainConfigType? = nil,
            domain: Swift.String? = nil,
            s3Bucket: Swift.String? = nil,
            status: CognitoIdentityProviderClientTypes.DomainStatusType? = nil,
            userPoolId: Swift.String? = nil,
            version: Swift.String? = nil
        )
        {
            self.awsAccountId = awsAccountId
            self.cloudFrontDistribution = cloudFrontDistribution
            self.customDomainConfig = customDomainConfig
            self.domain = domain
            self.s3Bucket = s3Bucket
            self.status = status
            self.userPoolId = userPoolId
            self.version = version
        }
    }
}

public struct DescribeUserPoolDomainOutput: Swift.Sendable {
    /// A domain description object containing information about the domain.
    public var domainDescription: CognitoIdentityProviderClientTypes.DomainDescriptionType?

    public init(
        domainDescription: CognitoIdentityProviderClientTypes.DomainDescriptionType? = nil
    )
    {
        self.domainDescription = domainDescription
    }
}

/// Represents the request to forget the device.
public struct ForgetDeviceInput: Swift.Sendable {
    /// A valid access token that Amazon Cognito issued to the user whose registered device you want to forget.
    public var accessToken: Swift.String?
    /// The device key.
    /// This member is required.
    public var deviceKey: Swift.String?

    public init(
        accessToken: Swift.String? = nil,
        deviceKey: Swift.String? = nil
    )
    {
        self.accessToken = accessToken
        self.deviceKey = deviceKey
    }
}

extension ForgetDeviceInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ForgetDeviceInput(deviceKey: \(Swift.String(describing: deviceKey)), accessToken: \"CONTENT_REDACTED\")"}
}

/// Represents the request to reset a user's password.
public struct ForgotPasswordInput: Swift.Sendable {
    /// The Amazon Pinpoint analytics metadata that contributes to your metrics for ForgotPassword calls.
    public var analyticsMetadata: CognitoIdentityProviderClientTypes.AnalyticsMetadataType?
    /// The ID of the client associated with the user pool.
    /// This member is required.
    public var clientId: Swift.String?
    /// A map of custom key-value pairs that you can provide as input for any custom workflows that this action triggers. You create custom workflows by assigning Lambda functions to user pool triggers. When you use the ForgotPassword API action, Amazon Cognito invokes any functions that are assigned to the following triggers: pre sign-up, custom message, and user migration. When Amazon Cognito invokes any of these functions, it passes a JSON payload, which the function receives as input. This payload contains a clientMetadata attribute, which provides the data that you assigned to the ClientMetadata parameter in your ForgotPassword request. In your function code in Lambda, you can process the clientMetadata value to enhance your workflow for your specific needs. For more information, see [ Customizing user pool Workflows with Lambda Triggers](https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools-working-with-aws-lambda-triggers.html) in the Amazon Cognito Developer Guide. When you use the ClientMetadata parameter, remember that Amazon Cognito won't do the following:
    ///
    /// * Store the ClientMetadata value. This data is available only to Lambda triggers that are assigned to a user pool to support custom workflows. If your user pool configuration doesn't include triggers, the ClientMetadata parameter serves no purpose.
    ///
    /// * Validate the ClientMetadata value.
    ///
    /// * Encrypt the ClientMetadata value. Don't use Amazon Cognito to provide sensitive information.
    public var clientMetadata: [Swift.String: Swift.String]?
    /// A keyed-hash message authentication code (HMAC) calculated using the secret key of a user pool client and username plus the client ID in the message.
    public var secretHash: Swift.String?
    /// Contextual data about your user session, such as the device fingerprint, IP address, or location. Amazon Cognito advanced security evaluates the risk of an authentication event based on the context that your app generates and passes to Amazon Cognito when it makes API requests.
    public var userContextData: CognitoIdentityProviderClientTypes.UserContextDataType?
    /// The username of the user that you want to query or modify. The value of this parameter is typically your user's username, but it can be any of their alias attributes. If username isn't an alias attribute in your user pool, this value must be the sub of a local user or the username of a user from a third-party IdP.
    /// This member is required.
    public var username: Swift.String?

    public init(
        analyticsMetadata: CognitoIdentityProviderClientTypes.AnalyticsMetadataType? = nil,
        clientId: Swift.String? = nil,
        clientMetadata: [Swift.String: Swift.String]? = nil,
        secretHash: Swift.String? = nil,
        userContextData: CognitoIdentityProviderClientTypes.UserContextDataType? = nil,
        username: Swift.String? = nil
    )
    {
        self.analyticsMetadata = analyticsMetadata
        self.clientId = clientId
        self.clientMetadata = clientMetadata
        self.secretHash = secretHash
        self.userContextData = userContextData
        self.username = username
    }
}

extension ForgotPasswordInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ForgotPasswordInput(analyticsMetadata: \(Swift.String(describing: analyticsMetadata)), clientMetadata: \(Swift.String(describing: clientMetadata)), clientId: \"CONTENT_REDACTED\", secretHash: \"CONTENT_REDACTED\", userContextData: \"CONTENT_REDACTED\", username: \"CONTENT_REDACTED\")"}
}

extension CognitoIdentityProviderClientTypes {

    /// The delivery details for an email or SMS message that Amazon Cognito sent for authentication or verification.
    public struct CodeDeliveryDetailsType: Swift.Sendable {
        /// The name of the attribute that Amazon Cognito verifies with the code.
        public var attributeName: Swift.String?
        /// The method that Amazon Cognito used to send the code.
        public var deliveryMedium: CognitoIdentityProviderClientTypes.DeliveryMediumType?
        /// The email address or phone number destination where Amazon Cognito sent the code.
        public var destination: Swift.String?

        public init(
            attributeName: Swift.String? = nil,
            deliveryMedium: CognitoIdentityProviderClientTypes.DeliveryMediumType? = nil,
            destination: Swift.String? = nil
        )
        {
            self.attributeName = attributeName
            self.deliveryMedium = deliveryMedium
            self.destination = destination
        }
    }
}

/// The response from Amazon Cognito to a request to reset a password.
public struct ForgotPasswordOutput: Swift.Sendable {
    /// The code delivery details returned by the server in response to the request to reset a password.
    public var codeDeliveryDetails: CognitoIdentityProviderClientTypes.CodeDeliveryDetailsType?

    public init(
        codeDeliveryDetails: CognitoIdentityProviderClientTypes.CodeDeliveryDetailsType? = nil
    )
    {
        self.codeDeliveryDetails = codeDeliveryDetails
    }
}

/// Represents the request to get the header information of the CSV file for the user import job.
public struct GetCSVHeaderInput: Swift.Sendable {
    /// The user pool ID for the user pool that the users are to be imported into.
    /// This member is required.
    public var userPoolId: Swift.String?

    public init(
        userPoolId: Swift.String? = nil
    )
    {
        self.userPoolId = userPoolId
    }
}

/// Represents the response from the server to the request to get the header information of the CSV file for the user import job.
public struct GetCSVHeaderOutput: Swift.Sendable {
    /// The header information of the CSV file for the user import job.
    public var csvHeader: [Swift.String]?
    /// The user pool ID for the user pool that the users are to be imported into.
    public var userPoolId: Swift.String?

    public init(
        csvHeader: [Swift.String]? = nil,
        userPoolId: Swift.String? = nil
    )
    {
        self.csvHeader = csvHeader
        self.userPoolId = userPoolId
    }
}

/// Represents the request to get the device.
public struct GetDeviceInput: Swift.Sendable {
    /// A valid access token that Amazon Cognito issued to the user whose device information you want to request.
    public var accessToken: Swift.String?
    /// The device key.
    /// This member is required.
    public var deviceKey: Swift.String?

    public init(
        accessToken: Swift.String? = nil,
        deviceKey: Swift.String? = nil
    )
    {
        self.accessToken = accessToken
        self.deviceKey = deviceKey
    }
}

extension GetDeviceInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetDeviceInput(deviceKey: \(Swift.String(describing: deviceKey)), accessToken: \"CONTENT_REDACTED\")"}
}

/// Gets the device response.
public struct GetDeviceOutput: Swift.Sendable {
    /// The device.
    /// This member is required.
    public var device: CognitoIdentityProviderClientTypes.DeviceType?

    public init(
        device: CognitoIdentityProviderClientTypes.DeviceType? = nil
    )
    {
        self.device = device
    }
}

public struct GetGroupInput: Swift.Sendable {
    /// The name of the group.
    /// This member is required.
    public var groupName: Swift.String?
    /// The user pool ID for the user pool.
    /// This member is required.
    public var userPoolId: Swift.String?

    public init(
        groupName: Swift.String? = nil,
        userPoolId: Swift.String? = nil
    )
    {
        self.groupName = groupName
        self.userPoolId = userPoolId
    }
}

public struct GetGroupOutput: Swift.Sendable {
    /// The group object for the group.
    public var group: CognitoIdentityProviderClientTypes.GroupType?

    public init(
        group: CognitoIdentityProviderClientTypes.GroupType? = nil
    )
    {
        self.group = group
    }
}

public struct GetIdentityProviderByIdentifierInput: Swift.Sendable {
    /// The IdP identifier.
    /// This member is required.
    public var idpIdentifier: Swift.String?
    /// The user pool ID.
    /// This member is required.
    public var userPoolId: Swift.String?

    public init(
        idpIdentifier: Swift.String? = nil,
        userPoolId: Swift.String? = nil
    )
    {
        self.idpIdentifier = idpIdentifier
        self.userPoolId = userPoolId
    }
}

public struct GetIdentityProviderByIdentifierOutput: Swift.Sendable {
    /// The identity provider details.
    /// This member is required.
    public var identityProvider: CognitoIdentityProviderClientTypes.IdentityProviderType?

    public init(
        identityProvider: CognitoIdentityProviderClientTypes.IdentityProviderType? = nil
    )
    {
        self.identityProvider = identityProvider
    }
}

public struct GetLogDeliveryConfigurationInput: Swift.Sendable {
    /// The ID of the user pool that has the logging configuration that you want to view.
    /// This member is required.
    public var userPoolId: Swift.String?

    public init(
        userPoolId: Swift.String? = nil
    )
    {
        self.userPoolId = userPoolId
    }
}

extension CognitoIdentityProviderClientTypes {

    /// Configuration for the CloudWatch log group destination of user pool detailed activity logging, or of user activity log export with advanced security features.
    public struct CloudWatchLogsConfigurationType: Swift.Sendable {
        /// The Amazon Resource Name (arn) of a CloudWatch Logs log group where your user pool sends logs. The log group must not be encrypted with Key Management Service and must be in the same Amazon Web Services account as your user pool. To send logs to log groups with a resource policy of a size greater than 5120 characters, configure a log group with a path that starts with /aws/vendedlogs. For more information, see [Enabling logging from certain Amazon Web Services services](https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/AWS-logs-and-resource-policy.html).
        public var logGroupArn: Swift.String?

        public init(
            logGroupArn: Swift.String? = nil
        )
        {
            self.logGroupArn = logGroupArn
        }
    }
}

extension CognitoIdentityProviderClientTypes {

    public enum EventSourceName: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case userAuthEvents
        case userNotification
        case sdkUnknown(Swift.String)

        public static var allCases: [EventSourceName] {
            return [
                .userAuthEvents,
                .userNotification
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .userAuthEvents: return "userAuthEvents"
            case .userNotification: return "userNotification"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension CognitoIdentityProviderClientTypes {

    /// Configuration for the Amazon Data Firehose stream destination of user activity log export with advanced security features.
    public struct FirehoseConfigurationType: Swift.Sendable {
        /// The ARN of an Amazon Data Firehose stream that's the destination for advanced security features log export.
        public var streamArn: Swift.String?

        public init(
            streamArn: Swift.String? = nil
        )
        {
            self.streamArn = streamArn
        }
    }
}

extension CognitoIdentityProviderClientTypes {

    public enum LogLevel: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case error
        case info
        case sdkUnknown(Swift.String)

        public static var allCases: [LogLevel] {
            return [
                .error,
                .info
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .error: return "ERROR"
            case .info: return "INFO"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension CognitoIdentityProviderClientTypes {

    /// Configuration for the Amazon S3 bucket destination of user activity log export with advanced security features.
    public struct S3ConfigurationType: Swift.Sendable {
        /// The ARN of an Amazon S3 bucket that's the destination for advanced security features log export.
        public var bucketArn: Swift.String?

        public init(
            bucketArn: Swift.String? = nil
        )
        {
            self.bucketArn = bucketArn
        }
    }
}

extension CognitoIdentityProviderClientTypes {

    /// The logging parameters of a user pool.
    public struct LogConfigurationType: Swift.Sendable {
        /// The CloudWatch log group destination of user pool detailed activity logs, or of user activity log export with advanced security features.
        public var cloudWatchLogsConfiguration: CognitoIdentityProviderClientTypes.CloudWatchLogsConfigurationType?
        /// The source of events that your user pool sends for logging. To send error-level logs about user notification activity, set to userNotification. To send info-level logs about advanced security features user activity, set to userAuthEvents.
        /// This member is required.
        public var eventSource: CognitoIdentityProviderClientTypes.EventSourceName?
        /// The Amazon Data Firehose stream destination of user activity log export with advanced security features. To activate this setting, [ advanced security features](https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-pool-settings-advanced-security.html) must be active in your user pool.
        public var firehoseConfiguration: CognitoIdentityProviderClientTypes.FirehoseConfigurationType?
        /// The errorlevel selection of logs that a user pool sends for detailed activity logging. To send userNotification activity with [information about message delivery](https://docs.aws.amazon.com/cognito/latest/developerguide/tracking-quotas-and-usage-in-cloud-watch-logs.html), choose ERROR with CloudWatchLogsConfiguration. To send userAuthEvents activity with user logs from advanced security features, choose INFO with one of CloudWatchLogsConfiguration, FirehoseConfiguration, or S3Configuration.
        /// This member is required.
        public var logLevel: CognitoIdentityProviderClientTypes.LogLevel?
        /// The Amazon S3 bucket destination of user activity log export with advanced security features. To activate this setting, [ advanced security features](https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-pool-settings-advanced-security.html) must be active in your user pool.
        public var s3Configuration: CognitoIdentityProviderClientTypes.S3ConfigurationType?

        public init(
            cloudWatchLogsConfiguration: CognitoIdentityProviderClientTypes.CloudWatchLogsConfigurationType? = nil,
            eventSource: CognitoIdentityProviderClientTypes.EventSourceName? = nil,
            firehoseConfiguration: CognitoIdentityProviderClientTypes.FirehoseConfigurationType? = nil,
            logLevel: CognitoIdentityProviderClientTypes.LogLevel? = nil,
            s3Configuration: CognitoIdentityProviderClientTypes.S3ConfigurationType? = nil
        )
        {
            self.cloudWatchLogsConfiguration = cloudWatchLogsConfiguration
            self.eventSource = eventSource
            self.firehoseConfiguration = firehoseConfiguration
            self.logLevel = logLevel
            self.s3Configuration = s3Configuration
        }
    }
}

extension CognitoIdentityProviderClientTypes {

    /// The logging parameters of a user pool returned in response to GetLogDeliveryConfiguration.
    public struct LogDeliveryConfigurationType: Swift.Sendable {
        /// A logging destination of a user pool. User pools can have multiple logging destinations for message-delivery and user-activity logs.
        /// This member is required.
        public var logConfigurations: [CognitoIdentityProviderClientTypes.LogConfigurationType]?
        /// The ID of the user pool where you configured logging.
        /// This member is required.
        public var userPoolId: Swift.String?

        public init(
            logConfigurations: [CognitoIdentityProviderClientTypes.LogConfigurationType]? = nil,
            userPoolId: Swift.String? = nil
        )
        {
            self.logConfigurations = logConfigurations
            self.userPoolId = userPoolId
        }
    }
}

public struct GetLogDeliveryConfigurationOutput: Swift.Sendable {
    /// The logging configuration of the requested user pool.
    public var logDeliveryConfiguration: CognitoIdentityProviderClientTypes.LogDeliveryConfigurationType?

    public init(
        logDeliveryConfiguration: CognitoIdentityProviderClientTypes.LogDeliveryConfigurationType? = nil
    )
    {
        self.logDeliveryConfiguration = logDeliveryConfiguration
    }
}

/// Request to get a signing certificate from Amazon Cognito.
public struct GetSigningCertificateInput: Swift.Sendable {
    /// The user pool ID.
    /// This member is required.
    public var userPoolId: Swift.String?

    public init(
        userPoolId: Swift.String? = nil
    )
    {
        self.userPoolId = userPoolId
    }
}

/// Response from Amazon Cognito for a signing certificate request.
public struct GetSigningCertificateOutput: Swift.Sendable {
    /// The signing certificate.
    public var certificate: Swift.String?

    public init(
        certificate: Swift.String? = nil
    )
    {
        self.certificate = certificate
    }
}

public struct GetUICustomizationInput: Swift.Sendable {
    /// The client ID for the client app.
    public var clientId: Swift.String?
    /// The user pool ID for the user pool.
    /// This member is required.
    public var userPoolId: Swift.String?

    public init(
        clientId: Swift.String? = nil,
        userPoolId: Swift.String? = nil
    )
    {
        self.clientId = clientId
        self.userPoolId = userPoolId
    }
}

extension GetUICustomizationInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetUICustomizationInput(userPoolId: \(Swift.String(describing: userPoolId)), clientId: \"CONTENT_REDACTED\")"}
}

extension CognitoIdentityProviderClientTypes {

    /// A container for the UI customization information for a user pool's built-in app UI.
    public struct UICustomizationType: Swift.Sendable {
        /// The client ID for the client app.
        public var clientId: Swift.String?
        /// The date and time when the item was created. Amazon Cognito returns this timestamp in UNIX epoch time format. Your SDK might render the output in a human-readable format like ISO 8601 or a Java Date object.
        public var creationDate: Foundation.Date?
        /// The CSS values in the UI customization.
        public var css: Swift.String?
        /// The CSS version number.
        public var cssVersion: Swift.String?
        /// The logo image for the UI customization.
        public var imageUrl: Swift.String?
        /// The date and time when the item was modified. Amazon Cognito returns this timestamp in UNIX epoch time format. Your SDK might render the output in a human-readable format like ISO 8601 or a Java Date object.
        public var lastModifiedDate: Foundation.Date?
        /// The user pool ID for the user pool.
        public var userPoolId: Swift.String?

        public init(
            clientId: Swift.String? = nil,
            creationDate: Foundation.Date? = nil,
            css: Swift.String? = nil,
            cssVersion: Swift.String? = nil,
            imageUrl: Swift.String? = nil,
            lastModifiedDate: Foundation.Date? = nil,
            userPoolId: Swift.String? = nil
        )
        {
            self.clientId = clientId
            self.creationDate = creationDate
            self.css = css
            self.cssVersion = cssVersion
            self.imageUrl = imageUrl
            self.lastModifiedDate = lastModifiedDate
            self.userPoolId = userPoolId
        }
    }
}

extension CognitoIdentityProviderClientTypes.UICustomizationType: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UICustomizationType(creationDate: \(Swift.String(describing: creationDate)), css: \(Swift.String(describing: css)), cssVersion: \(Swift.String(describing: cssVersion)), imageUrl: \(Swift.String(describing: imageUrl)), lastModifiedDate: \(Swift.String(describing: lastModifiedDate)), userPoolId: \(Swift.String(describing: userPoolId)), clientId: \"CONTENT_REDACTED\")"}
}

public struct GetUICustomizationOutput: Swift.Sendable {
    /// The UI customization information.
    /// This member is required.
    public var uiCustomization: CognitoIdentityProviderClientTypes.UICustomizationType?

    public init(
        uiCustomization: CognitoIdentityProviderClientTypes.UICustomizationType? = nil
    )
    {
        self.uiCustomization = uiCustomization
    }
}

/// Represents the request to get information about the user.
public struct GetUserInput: Swift.Sendable {
    /// A non-expired access token for the user whose information you want to query.
    /// This member is required.
    public var accessToken: Swift.String?

    public init(
        accessToken: Swift.String? = nil
    )
    {
        self.accessToken = accessToken
    }
}

extension GetUserInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetUserInput(accessToken: \"CONTENT_REDACTED\")"}
}

/// Represents the response from the server from the request to get information about the user.
public struct GetUserOutput: Swift.Sendable {
    /// This response parameter is no longer supported. It provides information only about SMS MFA configurations. It doesn't provide information about time-based one-time password (TOTP) software token MFA configurations. To look up information about either type of MFA configuration, use UserMFASettingList instead.
    public var mfaOptions: [CognitoIdentityProviderClientTypes.MFAOptionType]?
    /// The user's preferred MFA setting.
    public var preferredMfaSetting: Swift.String?
    /// An array of name-value pairs representing user attributes. For custom attributes, you must prepend the custom: prefix to the attribute name.
    /// This member is required.
    public var userAttributes: [CognitoIdentityProviderClientTypes.AttributeType]?
    /// The MFA options that are activated for the user. The possible values in this list are SMS_MFA, EMAIL_OTP, and SOFTWARE_TOKEN_MFA.
    public var userMFASettingList: [Swift.String]?
    /// The username of the user that you requested.
    /// This member is required.
    public var username: Swift.String?

    public init(
        mfaOptions: [CognitoIdentityProviderClientTypes.MFAOptionType]? = nil,
        preferredMfaSetting: Swift.String? = nil,
        userAttributes: [CognitoIdentityProviderClientTypes.AttributeType]? = nil,
        userMFASettingList: [Swift.String]? = nil,
        username: Swift.String? = nil
    )
    {
        self.mfaOptions = mfaOptions
        self.preferredMfaSetting = preferredMfaSetting
        self.userAttributes = userAttributes
        self.userMFASettingList = userMFASettingList
        self.username = username
    }
}

extension GetUserOutput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetUserOutput(mfaOptions: \(Swift.String(describing: mfaOptions)), preferredMfaSetting: \(Swift.String(describing: preferredMfaSetting)), userAttributes: \(Swift.String(describing: userAttributes)), userMFASettingList: \(Swift.String(describing: userMFASettingList)), username: \"CONTENT_REDACTED\")"}
}

/// Represents the request to get user attribute verification.
public struct GetUserAttributeVerificationCodeInput: Swift.Sendable {
    /// A non-expired access token for the user whose attribute verification code you want to generate.
    /// This member is required.
    public var accessToken: Swift.String?
    /// The attribute name returned by the server response to get the user attribute verification code.
    /// This member is required.
    public var attributeName: Swift.String?
    /// A map of custom key-value pairs that you can provide as input for any custom workflows that this action triggers. You create custom workflows by assigning Lambda functions to user pool triggers. When you use the GetUserAttributeVerificationCode API action, Amazon Cognito invokes the function that is assigned to the custom message trigger. When Amazon Cognito invokes this function, it passes a JSON payload, which the function receives as input. This payload contains a clientMetadata attribute, which provides the data that you assigned to the ClientMetadata parameter in your GetUserAttributeVerificationCode request. In your function code in Lambda, you can process the clientMetadata value to enhance your workflow for your specific needs. For more information, see [ Customizing user pool Workflows with Lambda Triggers](https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools-working-with-aws-lambda-triggers.html) in the Amazon Cognito Developer Guide. When you use the ClientMetadata parameter, remember that Amazon Cognito won't do the following:
    ///
    /// * Store the ClientMetadata value. This data is available only to Lambda triggers that are assigned to a user pool to support custom workflows. If your user pool configuration doesn't include triggers, the ClientMetadata parameter serves no purpose.
    ///
    /// * Validate the ClientMetadata value.
    ///
    /// * Encrypt the ClientMetadata value. Don't use Amazon Cognito to provide sensitive information.
    public var clientMetadata: [Swift.String: Swift.String]?

    public init(
        accessToken: Swift.String? = nil,
        attributeName: Swift.String? = nil,
        clientMetadata: [Swift.String: Swift.String]? = nil
    )
    {
        self.accessToken = accessToken
        self.attributeName = attributeName
        self.clientMetadata = clientMetadata
    }
}

extension GetUserAttributeVerificationCodeInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetUserAttributeVerificationCodeInput(attributeName: \(Swift.String(describing: attributeName)), clientMetadata: \(Swift.String(describing: clientMetadata)), accessToken: \"CONTENT_REDACTED\")"}
}

/// The verification code response returned by the server response to get the user attribute verification code.
public struct GetUserAttributeVerificationCodeOutput: Swift.Sendable {
    /// The code delivery details returned by the server in response to the request to get the user attribute verification code.
    public var codeDeliveryDetails: CognitoIdentityProviderClientTypes.CodeDeliveryDetailsType?

    public init(
        codeDeliveryDetails: CognitoIdentityProviderClientTypes.CodeDeliveryDetailsType? = nil
    )
    {
        self.codeDeliveryDetails = codeDeliveryDetails
    }
}

public struct GetUserPoolMfaConfigInput: Swift.Sendable {
    /// The user pool ID.
    /// This member is required.
    public var userPoolId: Swift.String?

    public init(
        userPoolId: Swift.String? = nil
    )
    {
        self.userPoolId = userPoolId
    }
}

extension CognitoIdentityProviderClientTypes {

    /// Sets or shows user pool email message configuration for MFA. Includes the subject and body of the email message template for MFA messages. To activate this setting, [ advanced security features](https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-pool-settings-advanced-security.html) must be active in your user pool.
    public struct EmailMfaConfigType: Swift.Sendable {
        /// The template for the email message that your user pool sends to users with an MFA code. The message must contain the {####} placeholder. In the message, Amazon Cognito replaces this placeholder with the code. If you don't provide this parameter, Amazon Cognito sends messages in the default format.
        public var message: Swift.String?
        /// The subject of the email message that your user pool sends to users with an MFA code.
        public var subject: Swift.String?

        public init(
            message: Swift.String? = nil,
            subject: Swift.String? = nil
        )
        {
            self.message = message
            self.subject = subject
        }
    }
}

extension CognitoIdentityProviderClientTypes {

    /// Configures user pool SMS messages for multi-factor authentication (MFA). Sets the message template and the SMS message sending configuration for Amazon SNS.
    public struct SmsMfaConfigType: Swift.Sendable {
        /// The SMS message that your user pool sends to users with an MFA code. The message must contain the {####} placeholder. In the message, Amazon Cognito replaces this placeholder with the code. If you don't provide this parameter, Amazon Cognito sends messages in the default format.
        public var smsAuthenticationMessage: Swift.String?
        /// The SMS configuration with the settings that your Amazon Cognito user pool must use to send an SMS message from your Amazon Web Services account through Amazon Simple Notification Service. To request Amazon SNS in the Amazon Web Services Region that you want, the Amazon Cognito user pool uses an Identity and Access Management (IAM) role that you provide for your Amazon Web Services account.
        public var smsConfiguration: CognitoIdentityProviderClientTypes.SmsConfigurationType?

        public init(
            smsAuthenticationMessage: Swift.String? = nil,
            smsConfiguration: CognitoIdentityProviderClientTypes.SmsConfigurationType? = nil
        )
        {
            self.smsAuthenticationMessage = smsAuthenticationMessage
            self.smsConfiguration = smsConfiguration
        }
    }
}

extension CognitoIdentityProviderClientTypes {

    /// Configures a user pool for time-based one-time password (TOTP) multi-factor authentication (MFA). Enables or disables TOTP.
    public struct SoftwareTokenMfaConfigType: Swift.Sendable {
        /// Specifies whether software token MFA is activated.
        public var enabled: Swift.Bool

        public init(
            enabled: Swift.Bool = false
        )
        {
            self.enabled = enabled
        }
    }
}

public struct GetUserPoolMfaConfigOutput: Swift.Sendable {
    /// Shows user pool email message configuration for MFA. Includes the subject and body of the email message template for MFA messages. To activate this setting, [ advanced security features](https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-pool-settings-advanced-security.html) must be active in your user pool.
    public var emailMfaConfiguration: CognitoIdentityProviderClientTypes.EmailMfaConfigType?
    /// The multi-factor authentication (MFA) configuration. Valid values include:
    ///
    /// * OFF MFA won't be used for any users.
    ///
    /// * ON MFA is required for all users to sign in.
    ///
    /// * OPTIONAL MFA will be required only for individual users who have an MFA factor activated.
    public var mfaConfiguration: CognitoIdentityProviderClientTypes.UserPoolMfaType?
    /// Shows user pool SMS message configuration for MFA. Includes the message template and the SMS message sending configuration for Amazon SNS.
    public var smsMfaConfiguration: CognitoIdentityProviderClientTypes.SmsMfaConfigType?
    /// Shows user pool configuration for time-based one-time password (TOTP) MFA. Includes TOTP enabled or disabled state.
    public var softwareTokenMfaConfiguration: CognitoIdentityProviderClientTypes.SoftwareTokenMfaConfigType?

    public init(
        emailMfaConfiguration: CognitoIdentityProviderClientTypes.EmailMfaConfigType? = nil,
        mfaConfiguration: CognitoIdentityProviderClientTypes.UserPoolMfaType? = nil,
        smsMfaConfiguration: CognitoIdentityProviderClientTypes.SmsMfaConfigType? = nil,
        softwareTokenMfaConfiguration: CognitoIdentityProviderClientTypes.SoftwareTokenMfaConfigType? = nil
    )
    {
        self.emailMfaConfiguration = emailMfaConfiguration
        self.mfaConfiguration = mfaConfiguration
        self.smsMfaConfiguration = smsMfaConfiguration
        self.softwareTokenMfaConfiguration = softwareTokenMfaConfiguration
    }
}

/// Represents the request to sign out all devices.
public struct GlobalSignOutInput: Swift.Sendable {
    /// A valid access token that Amazon Cognito issued to the user who you want to sign out.
    /// This member is required.
    public var accessToken: Swift.String?

    public init(
        accessToken: Swift.String? = nil
    )
    {
        self.accessToken = accessToken
    }
}

extension GlobalSignOutInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GlobalSignOutInput(accessToken: \"CONTENT_REDACTED\")"}
}

/// The response to the request to sign out all devices.
public struct GlobalSignOutOutput: Swift.Sendable {

    public init() { }
}

/// Initiates the authentication request.
public struct InitiateAuthInput: Swift.Sendable {
    /// The Amazon Pinpoint analytics metadata that contributes to your metrics for InitiateAuth calls.
    public var analyticsMetadata: CognitoIdentityProviderClientTypes.AnalyticsMetadataType?
    /// The authentication flow for this call to run. The API action will depend on this value. For example:
    ///
    /// * REFRESH_TOKEN_AUTH takes in a valid refresh token and returns new tokens.
    ///
    /// * USER_SRP_AUTH takes in USERNAME and SRP_A and returns the SRP variables to be used for next challenge execution.
    ///
    /// * USER_PASSWORD_AUTH takes in USERNAME and PASSWORD and returns the next challenge or tokens.
    ///
    ///
    /// Valid values include:
    ///
    /// * USER_SRP_AUTH: Authentication flow for the Secure Remote Password (SRP) protocol.
    ///
    /// * REFRESH_TOKEN_AUTH/REFRESH_TOKEN: Authentication flow for refreshing the access token and ID token by supplying a valid refresh token.
    ///
    /// * CUSTOM_AUTH: Custom authentication flow.
    ///
    /// * USER_PASSWORD_AUTH: Non-SRP authentication flow; user name and password are passed directly. If a user migration Lambda trigger is set, this flow will invoke the user migration Lambda if it doesn't find the user name in the user pool.
    ///
    ///
    /// ADMIN_NO_SRP_AUTH isn't a valid value.
    /// This member is required.
    public var authFlow: CognitoIdentityProviderClientTypes.AuthFlowType?
    /// The authentication parameters. These are inputs corresponding to the AuthFlow that you're invoking. The required values depend on the value of AuthFlow:
    ///
    /// * For USER_SRP_AUTH: USERNAME (required), SRP_A (required), SECRET_HASH (required if the app client is configured with a client secret), DEVICE_KEY.
    ///
    /// * For USER_PASSWORD_AUTH: USERNAME (required), PASSWORD (required), SECRET_HASH (required if the app client is configured with a client secret), DEVICE_KEY.
    ///
    /// * For REFRESH_TOKEN_AUTH/REFRESH_TOKEN: REFRESH_TOKEN (required), SECRET_HASH (required if the app client is configured with a client secret), DEVICE_KEY.
    ///
    /// * For CUSTOM_AUTH: USERNAME (required), SECRET_HASH (if app client is configured with client secret), DEVICE_KEY. To start the authentication flow with password verification, include ChallengeName: SRP_A and SRP_A: (The SRP_A Value).
    ///
    ///
    /// For more information about SECRET_HASH, see [Computing secret hash values](https://docs.aws.amazon.com/cognito/latest/developerguide/signing-up-users-in-your-app.html#cognito-user-pools-computing-secret-hash). For information about DEVICE_KEY, see [Working with user devices in your user pool](https://docs.aws.amazon.com/cognito/latest/developerguide/amazon-cognito-user-pools-device-tracking.html).
    public var authParameters: [Swift.String: Swift.String]?
    /// The app client ID.
    /// This member is required.
    public var clientId: Swift.String?
    /// A map of custom key-value pairs that you can provide as input for certain custom workflows that this action triggers. You create custom workflows by assigning Lambda functions to user pool triggers. When you use the InitiateAuth API action, Amazon Cognito invokes the Lambda functions that are specified for various triggers. The ClientMetadata value is passed as input to the functions for only the following triggers:
    ///
    /// * Pre signup
    ///
    /// * Pre authentication
    ///
    /// * User migration
    ///
    ///
    /// When Amazon Cognito invokes the functions for these triggers, it passes a JSON payload, which the function receives as input. This payload contains a validationData attribute, which provides the data that you assigned to the ClientMetadata parameter in your InitiateAuth request. In your function code in Lambda, you can process the validationData value to enhance your workflow for your specific needs. When you use the InitiateAuth API action, Amazon Cognito also invokes the functions for the following triggers, but it doesn't provide the ClientMetadata value as input:
    ///
    /// * Post authentication
    ///
    /// * Custom message
    ///
    /// * Pre token generation
    ///
    /// * Create auth challenge
    ///
    /// * Define auth challenge
    ///
    ///
    /// For more information, see [ Customizing user pool Workflows with Lambda Triggers](https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools-working-with-aws-lambda-triggers.html) in the Amazon Cognito Developer Guide. When you use the ClientMetadata parameter, remember that Amazon Cognito won't do the following:
    ///
    /// * Store the ClientMetadata value. This data is available only to Lambda triggers that are assigned to a user pool to support custom workflows. If your user pool configuration doesn't include triggers, the ClientMetadata parameter serves no purpose.
    ///
    /// * Validate the ClientMetadata value.
    ///
    /// * Encrypt the ClientMetadata value. Don't use Amazon Cognito to provide sensitive information.
    public var clientMetadata: [Swift.String: Swift.String]?
    /// Contextual data about your user session, such as the device fingerprint, IP address, or location. Amazon Cognito advanced security evaluates the risk of an authentication event based on the context that your app generates and passes to Amazon Cognito when it makes API requests.
    public var userContextData: CognitoIdentityProviderClientTypes.UserContextDataType?

    public init(
        analyticsMetadata: CognitoIdentityProviderClientTypes.AnalyticsMetadataType? = nil,
        authFlow: CognitoIdentityProviderClientTypes.AuthFlowType? = nil,
        authParameters: [Swift.String: Swift.String]? = nil,
        clientId: Swift.String? = nil,
        clientMetadata: [Swift.String: Swift.String]? = nil,
        userContextData: CognitoIdentityProviderClientTypes.UserContextDataType? = nil
    )
    {
        self.analyticsMetadata = analyticsMetadata
        self.authFlow = authFlow
        self.authParameters = authParameters
        self.clientId = clientId
        self.clientMetadata = clientMetadata
        self.userContextData = userContextData
    }
}

extension InitiateAuthInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "InitiateAuthInput(analyticsMetadata: \(Swift.String(describing: analyticsMetadata)), authFlow: \(Swift.String(describing: authFlow)), clientMetadata: \(Swift.String(describing: clientMetadata)), authParameters: \"CONTENT_REDACTED\", clientId: \"CONTENT_REDACTED\", userContextData: \"CONTENT_REDACTED\")"}
}

/// Initiates the authentication response.
public struct InitiateAuthOutput: Swift.Sendable {
    /// The result of the authentication response. This result is only returned if the caller doesn't need to pass another challenge. If the caller does need to pass another challenge before it gets tokens, ChallengeName, ChallengeParameters, and Session are returned.
    public var authenticationResult: CognitoIdentityProviderClientTypes.AuthenticationResultType?
    /// The name of the challenge that you're responding to with this call. This name is returned in the InitiateAuth response if you must pass another challenge. Valid values include the following: All of the following challenges require USERNAME and SECRET_HASH (if applicable) in the parameters.
    ///
    /// * SMS_MFA: Next challenge is to supply an SMS_MFA_CODEthat your user pool delivered in an SMS message.
    ///
    /// * EMAIL_OTP: Next challenge is to supply an EMAIL_OTP_CODE that your user pool delivered in an email message.
    ///
    /// * PASSWORD_VERIFIER: Next challenge is to supply PASSWORD_CLAIM_SIGNATURE, PASSWORD_CLAIM_SECRET_BLOCK, and TIMESTAMP after the client-side SRP calculations.
    ///
    /// * CUSTOM_CHALLENGE: This is returned if your custom authentication flow determines that the user should pass another challenge before tokens are issued.
    ///
    /// * DEVICE_SRP_AUTH: If device tracking was activated on your user pool and the previous challenges were passed, this challenge is returned so that Amazon Cognito can start tracking this device.
    ///
    /// * DEVICE_PASSWORD_VERIFIER: Similar to PASSWORD_VERIFIER, but for devices only.
    ///
    /// * NEW_PASSWORD_REQUIRED: For users who are required to change their passwords after successful first login. Respond to this challenge with NEW_PASSWORD and any required attributes that Amazon Cognito returned in the requiredAttributes parameter. You can also set values for attributes that aren't required by your user pool and that your app client can write. For more information, see [RespondToAuthChallenge](https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_RespondToAuthChallenge.html). In a NEW_PASSWORD_REQUIRED challenge response, you can't modify a required attribute that already has a value. In RespondToAuthChallenge, set a value for any keys that Amazon Cognito returned in the requiredAttributes parameter, then use the UpdateUserAttributes API operation to modify the value of any additional attributes.
    ///
    /// * MFA_SETUP: For users who are required to setup an MFA factor before they can sign in. The MFA types activated for the user pool will be listed in the challenge parameters MFAS_CAN_SETUP value. To set up software token MFA, use the session returned here from InitiateAuth as an input to AssociateSoftwareToken. Use the session returned by VerifySoftwareToken as an input to RespondToAuthChallenge with challenge name MFA_SETUP to complete sign-in. To set up SMS MFA, an administrator should help the user to add a phone number to their account, and then the user should call InitiateAuth again to restart sign-in.
    public var challengeName: CognitoIdentityProviderClientTypes.ChallengeNameType?
    /// The challenge parameters. These are returned in the InitiateAuth response if you must pass another challenge. The responses in this parameter should be used to compute inputs to the next call (RespondToAuthChallenge). All challenges require USERNAME and SECRET_HASH (if applicable).
    public var challengeParameters: [Swift.String: Swift.String]?
    /// The session that should pass both ways in challenge-response calls to the service. If the caller must pass another challenge, they return a session with other challenge parameters. This session should be passed as it is to the next RespondToAuthChallenge API call.
    public var session: Swift.String?

    public init(
        authenticationResult: CognitoIdentityProviderClientTypes.AuthenticationResultType? = nil,
        challengeName: CognitoIdentityProviderClientTypes.ChallengeNameType? = nil,
        challengeParameters: [Swift.String: Swift.String]? = nil,
        session: Swift.String? = nil
    )
    {
        self.authenticationResult = authenticationResult
        self.challengeName = challengeName
        self.challengeParameters = challengeParameters
        self.session = session
    }
}

extension InitiateAuthOutput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "InitiateAuthOutput(authenticationResult: \(Swift.String(describing: authenticationResult)), challengeName: \(Swift.String(describing: challengeName)), challengeParameters: \(Swift.String(describing: challengeParameters)), session: \"CONTENT_REDACTED\")"}
}

/// Represents the request to list the devices.
public struct ListDevicesInput: Swift.Sendable {
    /// A valid access token that Amazon Cognito issued to the user whose list of devices you want to view.
    /// This member is required.
    public var accessToken: Swift.String?
    /// The limit of the device request.
    public var limit: Swift.Int?
    /// This API operation returns a limited number of results. The pagination token is an identifier that you can present in an additional API request with the same parameters. When you include the pagination token, Amazon Cognito returns the next set of items after the current list. Subsequent requests return a new pagination token. By use of this token, you can paginate through the full list of items.
    public var paginationToken: Swift.String?

    public init(
        accessToken: Swift.String? = nil,
        limit: Swift.Int? = nil,
        paginationToken: Swift.String? = nil
    )
    {
        self.accessToken = accessToken
        self.limit = limit
        self.paginationToken = paginationToken
    }
}

extension ListDevicesInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListDevicesInput(limit: \(Swift.String(describing: limit)), paginationToken: \(Swift.String(describing: paginationToken)), accessToken: \"CONTENT_REDACTED\")"}
}

/// Represents the response to list devices.
public struct ListDevicesOutput: Swift.Sendable {
    /// The devices returned in the list devices response.
    public var devices: [CognitoIdentityProviderClientTypes.DeviceType]?
    /// The identifier that Amazon Cognito returned with the previous request to this operation. When you include a pagination token in your request, Amazon Cognito returns the next set of items in the list. By use of this token, you can paginate through the full list of items.
    public var paginationToken: Swift.String?

    public init(
        devices: [CognitoIdentityProviderClientTypes.DeviceType]? = nil,
        paginationToken: Swift.String? = nil
    )
    {
        self.devices = devices
        self.paginationToken = paginationToken
    }
}

public struct ListGroupsInput: Swift.Sendable {
    /// The limit of the request to list groups.
    public var limit: Swift.Int?
    /// An identifier that was returned from the previous call to this operation, which can be used to return the next set of items in the list.
    public var nextToken: Swift.String?
    /// The user pool ID for the user pool.
    /// This member is required.
    public var userPoolId: Swift.String?

    public init(
        limit: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        userPoolId: Swift.String? = nil
    )
    {
        self.limit = limit
        self.nextToken = nextToken
        self.userPoolId = userPoolId
    }
}

public struct ListGroupsOutput: Swift.Sendable {
    /// The group objects for the groups.
    public var groups: [CognitoIdentityProviderClientTypes.GroupType]?
    /// An identifier that was returned from the previous call to this operation, which can be used to return the next set of items in the list.
    public var nextToken: Swift.String?

    public init(
        groups: [CognitoIdentityProviderClientTypes.GroupType]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.groups = groups
        self.nextToken = nextToken
    }
}

public struct ListIdentityProvidersInput: Swift.Sendable {
    /// The maximum number of IdPs to return.
    public var maxResults: Swift.Int?
    /// A pagination token.
    public var nextToken: Swift.String?
    /// The user pool ID.
    /// This member is required.
    public var userPoolId: Swift.String?

    public init(
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        userPoolId: Swift.String? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.userPoolId = userPoolId
    }
}

extension CognitoIdentityProviderClientTypes {

    /// A container for IdP details.
    public struct ProviderDescription: Swift.Sendable {
        /// The date and time when the item was created. Amazon Cognito returns this timestamp in UNIX epoch time format. Your SDK might render the output in a human-readable format like ISO 8601 or a Java Date object.
        public var creationDate: Foundation.Date?
        /// The date the provider was last modified.
        public var lastModifiedDate: Foundation.Date?
        /// The IdP name.
        public var providerName: Swift.String?
        /// The IdP type.
        public var providerType: CognitoIdentityProviderClientTypes.IdentityProviderTypeType?

        public init(
            creationDate: Foundation.Date? = nil,
            lastModifiedDate: Foundation.Date? = nil,
            providerName: Swift.String? = nil,
            providerType: CognitoIdentityProviderClientTypes.IdentityProviderTypeType? = nil
        )
        {
            self.creationDate = creationDate
            self.lastModifiedDate = lastModifiedDate
            self.providerName = providerName
            self.providerType = providerType
        }
    }
}

public struct ListIdentityProvidersOutput: Swift.Sendable {
    /// A pagination token.
    public var nextToken: Swift.String?
    /// A list of IdP objects.
    /// This member is required.
    public var providers: [CognitoIdentityProviderClientTypes.ProviderDescription]?

    public init(
        nextToken: Swift.String? = nil,
        providers: [CognitoIdentityProviderClientTypes.ProviderDescription]? = nil
    )
    {
        self.nextToken = nextToken
        self.providers = providers
    }
}

public struct ListResourceServersInput: Swift.Sendable {
    /// The maximum number of resource servers to return.
    public var maxResults: Swift.Int?
    /// A pagination token.
    public var nextToken: Swift.String?
    /// The user pool ID for the user pool.
    /// This member is required.
    public var userPoolId: Swift.String?

    public init(
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        userPoolId: Swift.String? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.userPoolId = userPoolId
    }
}

public struct ListResourceServersOutput: Swift.Sendable {
    /// A pagination token.
    public var nextToken: Swift.String?
    /// The resource servers.
    /// This member is required.
    public var resourceServers: [CognitoIdentityProviderClientTypes.ResourceServerType]?

    public init(
        nextToken: Swift.String? = nil,
        resourceServers: [CognitoIdentityProviderClientTypes.ResourceServerType]? = nil
    )
    {
        self.nextToken = nextToken
        self.resourceServers = resourceServers
    }
}

public struct ListTagsForResourceInput: Swift.Sendable {
    /// The Amazon Resource Name (ARN) of the user pool that the tags are assigned to.
    /// This member is required.
    public var resourceArn: Swift.String?

    public init(
        resourceArn: Swift.String? = nil
    )
    {
        self.resourceArn = resourceArn
    }
}

public struct ListTagsForResourceOutput: Swift.Sendable {
    /// The tags that are assigned to the user pool.
    public var tags: [Swift.String: Swift.String]?

    public init(
        tags: [Swift.String: Swift.String]? = nil
    )
    {
        self.tags = tags
    }
}

/// Represents the request to list the user import jobs.
public struct ListUserImportJobsInput: Swift.Sendable {
    /// The maximum number of import jobs you want the request to return.
    /// This member is required.
    public var maxResults: Swift.Int?
    /// This API operation returns a limited number of results. The pagination token is an identifier that you can present in an additional API request with the same parameters. When you include the pagination token, Amazon Cognito returns the next set of items after the current list. Subsequent requests return a new pagination token. By use of this token, you can paginate through the full list of items.
    public var paginationToken: Swift.String?
    /// The user pool ID for the user pool that the users are being imported into.
    /// This member is required.
    public var userPoolId: Swift.String?

    public init(
        maxResults: Swift.Int? = nil,
        paginationToken: Swift.String? = nil,
        userPoolId: Swift.String? = nil
    )
    {
        self.maxResults = maxResults
        self.paginationToken = paginationToken
        self.userPoolId = userPoolId
    }
}

/// Represents the response from the server to the request to list the user import jobs.
public struct ListUserImportJobsOutput: Swift.Sendable {
    /// The identifier that Amazon Cognito returned with the previous request to this operation. When you include a pagination token in your request, Amazon Cognito returns the next set of items in the list. By use of this token, you can paginate through the full list of items.
    public var paginationToken: Swift.String?
    /// The user import jobs.
    public var userImportJobs: [CognitoIdentityProviderClientTypes.UserImportJobType]?

    public init(
        paginationToken: Swift.String? = nil,
        userImportJobs: [CognitoIdentityProviderClientTypes.UserImportJobType]? = nil
    )
    {
        self.paginationToken = paginationToken
        self.userImportJobs = userImportJobs
    }
}

/// Represents the request to list the user pool clients.
public struct ListUserPoolClientsInput: Swift.Sendable {
    /// The maximum number of results you want the request to return when listing the user pool clients.
    public var maxResults: Swift.Int?
    /// An identifier that was returned from the previous call to this operation, which can be used to return the next set of items in the list.
    public var nextToken: Swift.String?
    /// The user pool ID for the user pool where you want to list user pool clients.
    /// This member is required.
    public var userPoolId: Swift.String?

    public init(
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        userPoolId: Swift.String? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.userPoolId = userPoolId
    }
}

extension CognitoIdentityProviderClientTypes {

    /// The description of the user pool client.
    public struct UserPoolClientDescription: Swift.Sendable {
        /// The ID of the client associated with the user pool.
        public var clientId: Swift.String?
        /// The client name from the user pool client description.
        public var clientName: Swift.String?
        /// The user pool ID for the user pool where you want to describe the user pool client.
        public var userPoolId: Swift.String?

        public init(
            clientId: Swift.String? = nil,
            clientName: Swift.String? = nil,
            userPoolId: Swift.String? = nil
        )
        {
            self.clientId = clientId
            self.clientName = clientName
            self.userPoolId = userPoolId
        }
    }
}

extension CognitoIdentityProviderClientTypes.UserPoolClientDescription: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UserPoolClientDescription(clientName: \(Swift.String(describing: clientName)), userPoolId: \(Swift.String(describing: userPoolId)), clientId: \"CONTENT_REDACTED\")"}
}

/// Represents the response from the server that lists user pool clients.
public struct ListUserPoolClientsOutput: Swift.Sendable {
    /// An identifier that was returned from the previous call to this operation, which can be used to return the next set of items in the list.
    public var nextToken: Swift.String?
    /// The user pool clients in the response that lists user pool clients.
    public var userPoolClients: [CognitoIdentityProviderClientTypes.UserPoolClientDescription]?

    public init(
        nextToken: Swift.String? = nil,
        userPoolClients: [CognitoIdentityProviderClientTypes.UserPoolClientDescription]? = nil
    )
    {
        self.nextToken = nextToken
        self.userPoolClients = userPoolClients
    }
}

/// Represents the request to list user pools.
public struct ListUserPoolsInput: Swift.Sendable {
    /// The maximum number of results you want the request to return when listing the user pools.
    /// This member is required.
    public var maxResults: Swift.Int?
    /// An identifier that was returned from the previous call to this operation, which can be used to return the next set of items in the list.
    public var nextToken: Swift.String?

    public init(
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

extension CognitoIdentityProviderClientTypes {

    /// A user pool description.
    public struct UserPoolDescriptionType: Swift.Sendable {
        /// The date and time when the item was created. Amazon Cognito returns this timestamp in UNIX epoch time format. Your SDK might render the output in a human-readable format like ISO 8601 or a Java Date object.
        public var creationDate: Foundation.Date?
        /// The ID in a user pool description.
        public var id: Swift.String?
        /// The Lambda configuration information in a user pool description.
        public var lambdaConfig: CognitoIdentityProviderClientTypes.LambdaConfigType?
        /// The date and time when the item was modified. Amazon Cognito returns this timestamp in UNIX epoch time format. Your SDK might render the output in a human-readable format like ISO 8601 or a Java Date object.
        public var lastModifiedDate: Foundation.Date?
        /// The name in a user pool description.
        public var name: Swift.String?
        /// The user pool status in a user pool description.
        @available(*, deprecated, message: "This property is no longer available.")
        public var status: CognitoIdentityProviderClientTypes.StatusType?

        public init(
            creationDate: Foundation.Date? = nil,
            id: Swift.String? = nil,
            lambdaConfig: CognitoIdentityProviderClientTypes.LambdaConfigType? = nil,
            lastModifiedDate: Foundation.Date? = nil,
            name: Swift.String? = nil,
            status: CognitoIdentityProviderClientTypes.StatusType? = nil
        )
        {
            self.creationDate = creationDate
            self.id = id
            self.lambdaConfig = lambdaConfig
            self.lastModifiedDate = lastModifiedDate
            self.name = name
            self.status = status
        }
    }
}

/// Represents the response to list user pools.
public struct ListUserPoolsOutput: Swift.Sendable {
    /// An identifier that was returned from the previous call to this operation, which can be used to return the next set of items in the list.
    public var nextToken: Swift.String?
    /// The user pools from the response to list users.
    public var userPools: [CognitoIdentityProviderClientTypes.UserPoolDescriptionType]?

    public init(
        nextToken: Swift.String? = nil,
        userPools: [CognitoIdentityProviderClientTypes.UserPoolDescriptionType]? = nil
    )
    {
        self.nextToken = nextToken
        self.userPools = userPools
    }
}

/// Represents the request to list users.
public struct ListUsersInput: Swift.Sendable {
    /// A JSON array of user attribute names, for example given_name, that you want Amazon Cognito to include in the response for each user. When you don't provide an AttributesToGet parameter, Amazon Cognito returns all attributes for each user. Use AttributesToGet with required attributes in your user pool, or in conjunction with Filter. Amazon Cognito returns an error if not all users in the results have set a value for the attribute you request. Attributes that you can't filter on, including custom attributes, must have a value set in every user profile before an AttributesToGet parameter returns results.
    public var attributesToGet: [Swift.String]?
    /// A filter string of the form "AttributeName Filter-Type "AttributeValue"". Quotation marks within the filter string must be escaped using the backslash (\) character. For example, "family_name = \"Reddy\"".
    ///
    /// * AttributeName: The name of the attribute to search for. You can only search for one attribute at a time.
    ///
    /// * Filter-Type: For an exact match, use =, for example, "given_name = \"Jon\"". For a prefix ("starts with") match, use ^=, for example, "given_name ^= \"Jon\"".
    ///
    /// * AttributeValue: The attribute value that must be matched for each user.
    ///
    ///
    /// If the filter string is empty, ListUsers returns all users in the user pool. You can only search for the following standard attributes:
    ///
    /// * username (case-sensitive)
    ///
    /// * email
    ///
    /// * phone_number
    ///
    /// * name
    ///
    /// * given_name
    ///
    /// * family_name
    ///
    /// * preferred_username
    ///
    /// * cognito:user_status (called Status in the Console) (case-insensitive)
    ///
    /// * status (called Enabled in the Console) (case-sensitive)
    ///
    /// * sub
    ///
    ///
    /// Custom attributes aren't searchable. You can also list users with a client-side filter. The server-side filter matches no more than one attribute. For an advanced search, use a client-side filter with the --query parameter of the list-users action in the CLI. When you use a client-side filter, ListUsers returns a paginated list of zero or more users. You can receive multiple pages in a row with zero results. Repeat the query with each pagination token that is returned until you receive a null pagination token value, and then review the combined result. For more information about server-side and client-side filtering, see [FilteringCLI output](https://docs.aws.amazon.com/cli/latest/userguide/cli-usage-filter.html) in the [Command Line Interface User Guide](https://docs.aws.amazon.com/cli/latest/userguide/cli-usage-filter.html). For more information, see [Searching for Users Using the ListUsers API](https://docs.aws.amazon.com/cognito/latest/developerguide/how-to-manage-user-accounts.html#cognito-user-pools-searching-for-users-using-listusers-api) and [Examples of Using the ListUsers API](https://docs.aws.amazon.com/cognito/latest/developerguide/how-to-manage-user-accounts.html#cognito-user-pools-searching-for-users-listusers-api-examples) in the Amazon Cognito Developer Guide.
    public var filter: Swift.String?
    /// Maximum number of users to be returned.
    public var limit: Swift.Int?
    /// This API operation returns a limited number of results. The pagination token is an identifier that you can present in an additional API request with the same parameters. When you include the pagination token, Amazon Cognito returns the next set of items after the current list. Subsequent requests return a new pagination token. By use of this token, you can paginate through the full list of items.
    public var paginationToken: Swift.String?
    /// The user pool ID for the user pool on which the search should be performed.
    /// This member is required.
    public var userPoolId: Swift.String?

    public init(
        attributesToGet: [Swift.String]? = nil,
        filter: Swift.String? = nil,
        limit: Swift.Int? = nil,
        paginationToken: Swift.String? = nil,
        userPoolId: Swift.String? = nil
    )
    {
        self.attributesToGet = attributesToGet
        self.filter = filter
        self.limit = limit
        self.paginationToken = paginationToken
        self.userPoolId = userPoolId
    }
}

/// The response from the request to list users.
public struct ListUsersOutput: Swift.Sendable {
    /// The identifier that Amazon Cognito returned with the previous request to this operation. When you include a pagination token in your request, Amazon Cognito returns the next set of items in the list. By use of this token, you can paginate through the full list of items.
    public var paginationToken: Swift.String?
    /// A list of the user pool users, and their attributes, that match your query. Amazon Cognito creates a profile in your user pool for each native user in your user pool, and each unique user ID from your third-party identity providers (IdPs). When you link users with the [AdminLinkProviderForUser](https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_AdminLinkProviderForUser.html) API operation, the output of ListUsers displays both the IdP user and the native user that you linked. You can identify IdP users in the Users object of this API response by the IdP prefix that Amazon Cognito appends to Username.
    public var users: [CognitoIdentityProviderClientTypes.UserType]?

    public init(
        paginationToken: Swift.String? = nil,
        users: [CognitoIdentityProviderClientTypes.UserType]? = nil
    )
    {
        self.paginationToken = paginationToken
        self.users = users
    }
}

public struct ListUsersInGroupInput: Swift.Sendable {
    /// The name of the group.
    /// This member is required.
    public var groupName: Swift.String?
    /// The maximum number of users that you want to retrieve before pagination.
    public var limit: Swift.Int?
    /// An identifier that was returned from the previous call to this operation, which can be used to return the next set of items in the list.
    public var nextToken: Swift.String?
    /// The user pool ID for the user pool.
    /// This member is required.
    public var userPoolId: Swift.String?

    public init(
        groupName: Swift.String? = nil,
        limit: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        userPoolId: Swift.String? = nil
    )
    {
        self.groupName = groupName
        self.limit = limit
        self.nextToken = nextToken
        self.userPoolId = userPoolId
    }
}

public struct ListUsersInGroupOutput: Swift.Sendable {
    /// An identifier that you can use in a later request to return the next set of items in the list.
    public var nextToken: Swift.String?
    /// A list of users in the group, and their attributes.
    public var users: [CognitoIdentityProviderClientTypes.UserType]?

    public init(
        nextToken: Swift.String? = nil,
        users: [CognitoIdentityProviderClientTypes.UserType]? = nil
    )
    {
        self.nextToken = nextToken
        self.users = users
    }
}

/// Represents the request to resend the confirmation code.
public struct ResendConfirmationCodeInput: Swift.Sendable {
    /// The Amazon Pinpoint analytics metadata that contributes to your metrics for ResendConfirmationCode calls.
    public var analyticsMetadata: CognitoIdentityProviderClientTypes.AnalyticsMetadataType?
    /// The ID of the client associated with the user pool.
    /// This member is required.
    public var clientId: Swift.String?
    /// A map of custom key-value pairs that you can provide as input for any custom workflows that this action triggers. You create custom workflows by assigning Lambda functions to user pool triggers. When you use the ResendConfirmationCode API action, Amazon Cognito invokes the function that is assigned to the custom message trigger. When Amazon Cognito invokes this function, it passes a JSON payload, which the function receives as input. This payload contains a clientMetadata attribute, which provides the data that you assigned to the ClientMetadata parameter in your ResendConfirmationCode request. In your function code in Lambda, you can process the clientMetadata value to enhance your workflow for your specific needs. For more information, see [ Customizing user pool Workflows with Lambda Triggers](https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools-working-with-aws-lambda-triggers.html) in the Amazon Cognito Developer Guide. When you use the ClientMetadata parameter, remember that Amazon Cognito won't do the following:
    ///
    /// * Store the ClientMetadata value. This data is available only to Lambda triggers that are assigned to a user pool to support custom workflows. If your user pool configuration doesn't include triggers, the ClientMetadata parameter serves no purpose.
    ///
    /// * Validate the ClientMetadata value.
    ///
    /// * Encrypt the ClientMetadata value. Don't use Amazon Cognito to provide sensitive information.
    public var clientMetadata: [Swift.String: Swift.String]?
    /// A keyed-hash message authentication code (HMAC) calculated using the secret key of a user pool client and username plus the client ID in the message.
    public var secretHash: Swift.String?
    /// Contextual data about your user session, such as the device fingerprint, IP address, or location. Amazon Cognito advanced security evaluates the risk of an authentication event based on the context that your app generates and passes to Amazon Cognito when it makes API requests.
    public var userContextData: CognitoIdentityProviderClientTypes.UserContextDataType?
    /// The username of the user that you want to query or modify. The value of this parameter is typically your user's username, but it can be any of their alias attributes. If username isn't an alias attribute in your user pool, this value must be the sub of a local user or the username of a user from a third-party IdP.
    /// This member is required.
    public var username: Swift.String?

    public init(
        analyticsMetadata: CognitoIdentityProviderClientTypes.AnalyticsMetadataType? = nil,
        clientId: Swift.String? = nil,
        clientMetadata: [Swift.String: Swift.String]? = nil,
        secretHash: Swift.String? = nil,
        userContextData: CognitoIdentityProviderClientTypes.UserContextDataType? = nil,
        username: Swift.String? = nil
    )
    {
        self.analyticsMetadata = analyticsMetadata
        self.clientId = clientId
        self.clientMetadata = clientMetadata
        self.secretHash = secretHash
        self.userContextData = userContextData
        self.username = username
    }
}

extension ResendConfirmationCodeInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ResendConfirmationCodeInput(analyticsMetadata: \(Swift.String(describing: analyticsMetadata)), clientMetadata: \(Swift.String(describing: clientMetadata)), clientId: \"CONTENT_REDACTED\", secretHash: \"CONTENT_REDACTED\", userContextData: \"CONTENT_REDACTED\", username: \"CONTENT_REDACTED\")"}
}

/// The response from the server when Amazon Cognito makes the request to resend a confirmation code.
public struct ResendConfirmationCodeOutput: Swift.Sendable {
    /// The code delivery details returned by the server in response to the request to resend the confirmation code.
    public var codeDeliveryDetails: CognitoIdentityProviderClientTypes.CodeDeliveryDetailsType?

    public init(
        codeDeliveryDetails: CognitoIdentityProviderClientTypes.CodeDeliveryDetailsType? = nil
    )
    {
        self.codeDeliveryDetails = codeDeliveryDetails
    }
}

/// The request to respond to an authentication challenge.
public struct RespondToAuthChallengeInput: Swift.Sendable {
    /// The Amazon Pinpoint analytics metadata that contributes to your metrics for RespondToAuthChallenge calls.
    public var analyticsMetadata: CognitoIdentityProviderClientTypes.AnalyticsMetadataType?
    /// The challenge name. For more information, see [InitiateAuth](https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_InitiateAuth.html). ADMIN_NO_SRP_AUTH isn't a valid value.
    /// This member is required.
    public var challengeName: CognitoIdentityProviderClientTypes.ChallengeNameType?
    /// The responses to the challenge that you received in the previous request. Each challenge has its own required response parameters. The following examples are partial JSON request bodies that highlight challenge-response parameters. You must provide a SECRET_HASH parameter in all challenge responses to an app client that has a client secret. SMS_MFA "ChallengeName": "SMS_MFA", "ChallengeResponses": {"SMS_MFA_CODE": "[code]", "USERNAME": "[username]"} EMAIL_OTP "ChallengeName": "EMAIL_OTP", "ChallengeResponses": {"EMAIL_OTP_CODE": "[code]", "USERNAME": "[username]"} PASSWORD_VERIFIER This challenge response is part of the SRP flow. Amazon Cognito requires that your application respond to this challenge within a few seconds. When the response time exceeds this period, your user pool returns a NotAuthorizedException error. "ChallengeName": "PASSWORD_VERIFIER", "ChallengeResponses": {"PASSWORD_CLAIM_SIGNATURE": "[claim_signature]", "PASSWORD_CLAIM_SECRET_BLOCK": "[secret_block]", "TIMESTAMP": [timestamp], "USERNAME": "[username]"} Add "DEVICE_KEY" when you sign in with a remembered device. CUSTOM_CHALLENGE "ChallengeName": "CUSTOM_CHALLENGE", "ChallengeResponses": {"USERNAME": "[username]", "ANSWER": "[challenge_answer]"} Add "DEVICE_KEY" when you sign in with a remembered device. NEW_PASSWORD_REQUIRED "ChallengeName": "NEW_PASSWORD_REQUIRED", "ChallengeResponses": {"NEW_PASSWORD": "[new_password]", "USERNAME": "[username]"} To set any required attributes that InitiateAuth returned in an requiredAttributes parameter, add "userAttributes.[attribute_name]": "[attribute_value]". This parameter can also set values for writable attributes that aren't required by your user pool. In a NEW_PASSWORD_REQUIRED challenge response, you can't modify a required attribute that already has a value. In RespondToAuthChallenge, set a value for any keys that Amazon Cognito returned in the requiredAttributes parameter, then use the UpdateUserAttributes API operation to modify the value of any additional attributes. SOFTWARE_TOKEN_MFA "ChallengeName": "SOFTWARE_TOKEN_MFA", "ChallengeResponses": {"USERNAME": "[username]", "SOFTWARE_TOKEN_MFA_CODE": [authenticator_code]} DEVICE_SRP_AUTH "ChallengeName": "DEVICE_SRP_AUTH", "ChallengeResponses": {"USERNAME": "[username]", "DEVICE_KEY": "[device_key]", "SRP_A": "[srp_a]"} DEVICE_PASSWORD_VERIFIER "ChallengeName": "DEVICE_PASSWORD_VERIFIER", "ChallengeResponses": {"DEVICE_KEY": "[device_key]", "PASSWORD_CLAIM_SIGNATURE": "[claim_signature]", "PASSWORD_CLAIM_SECRET_BLOCK": "[secret_block]", "TIMESTAMP": [timestamp], "USERNAME": "[username]"} MFA_SETUP "ChallengeName": "MFA_SETUP", "ChallengeResponses": {"USERNAME": "[username]"}, "SESSION": "[Session ID from VerifySoftwareToken]" SELECT_MFA_TYPE "ChallengeName": "SELECT_MFA_TYPE", "ChallengeResponses": {"USERNAME": "[username]", "ANSWER": "[SMS_MFA or SOFTWARE_TOKEN_MFA]"} For more information about SECRET_HASH, see [Computing secret hash values](https://docs.aws.amazon.com/cognito/latest/developerguide/signing-up-users-in-your-app.html#cognito-user-pools-computing-secret-hash). For information about DEVICE_KEY, see [Working with user devices in your user pool](https://docs.aws.amazon.com/cognito/latest/developerguide/amazon-cognito-user-pools-device-tracking.html).
    public var challengeResponses: [Swift.String: Swift.String]?
    /// The app client ID.
    /// This member is required.
    public var clientId: Swift.String?
    /// A map of custom key-value pairs that you can provide as input for any custom workflows that this action triggers. You create custom workflows by assigning Lambda functions to user pool triggers. When you use the RespondToAuthChallenge API action, Amazon Cognito invokes any functions that are assigned to the following triggers: post authentication, pre token generation, define auth challenge, create auth challenge, and verify auth challenge. When Amazon Cognito invokes any of these functions, it passes a JSON payload, which the function receives as input. This payload contains a clientMetadata attribute, which provides the data that you assigned to the ClientMetadata parameter in your RespondToAuthChallenge request. In your function code in Lambda, you can process the clientMetadata value to enhance your workflow for your specific needs. For more information, see [ Customizing user pool Workflows with Lambda Triggers](https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools-working-with-aws-lambda-triggers.html) in the Amazon Cognito Developer Guide. When you use the ClientMetadata parameter, remember that Amazon Cognito won't do the following:
    ///
    /// * Store the ClientMetadata value. This data is available only to Lambda triggers that are assigned to a user pool to support custom workflows. If your user pool configuration doesn't include triggers, the ClientMetadata parameter serves no purpose.
    ///
    /// * Validate the ClientMetadata value.
    ///
    /// * Encrypt the ClientMetadata value. Don't use Amazon Cognito to provide sensitive information.
    public var clientMetadata: [Swift.String: Swift.String]?
    /// The session that should be passed both ways in challenge-response calls to the service. If InitiateAuth or RespondToAuthChallenge API call determines that the caller must pass another challenge, they return a session with other challenge parameters. This session should be passed as it is to the next RespondToAuthChallenge API call.
    public var session: Swift.String?
    /// Contextual data about your user session, such as the device fingerprint, IP address, or location. Amazon Cognito advanced security evaluates the risk of an authentication event based on the context that your app generates and passes to Amazon Cognito when it makes API requests.
    public var userContextData: CognitoIdentityProviderClientTypes.UserContextDataType?

    public init(
        analyticsMetadata: CognitoIdentityProviderClientTypes.AnalyticsMetadataType? = nil,
        challengeName: CognitoIdentityProviderClientTypes.ChallengeNameType? = nil,
        challengeResponses: [Swift.String: Swift.String]? = nil,
        clientId: Swift.String? = nil,
        clientMetadata: [Swift.String: Swift.String]? = nil,
        session: Swift.String? = nil,
        userContextData: CognitoIdentityProviderClientTypes.UserContextDataType? = nil
    )
    {
        self.analyticsMetadata = analyticsMetadata
        self.challengeName = challengeName
        self.challengeResponses = challengeResponses
        self.clientId = clientId
        self.clientMetadata = clientMetadata
        self.session = session
        self.userContextData = userContextData
    }
}

extension RespondToAuthChallengeInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "RespondToAuthChallengeInput(analyticsMetadata: \(Swift.String(describing: analyticsMetadata)), challengeName: \(Swift.String(describing: challengeName)), clientMetadata: \(Swift.String(describing: clientMetadata)), challengeResponses: \"CONTENT_REDACTED\", clientId: \"CONTENT_REDACTED\", session: \"CONTENT_REDACTED\", userContextData: \"CONTENT_REDACTED\")"}
}

/// The response to respond to the authentication challenge.
public struct RespondToAuthChallengeOutput: Swift.Sendable {
    /// The result returned by the server in response to the request to respond to the authentication challenge.
    public var authenticationResult: CognitoIdentityProviderClientTypes.AuthenticationResultType?
    /// The challenge name. For more information, see [InitiateAuth](https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_InitiateAuth.html).
    public var challengeName: CognitoIdentityProviderClientTypes.ChallengeNameType?
    /// The challenge parameters. For more information, see [InitiateAuth](https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_InitiateAuth.html).
    public var challengeParameters: [Swift.String: Swift.String]?
    /// The session that should be passed both ways in challenge-response calls to the service. If the caller must pass another challenge, they return a session with other challenge parameters. This session should be passed as it is to the next RespondToAuthChallenge API call.
    public var session: Swift.String?

    public init(
        authenticationResult: CognitoIdentityProviderClientTypes.AuthenticationResultType? = nil,
        challengeName: CognitoIdentityProviderClientTypes.ChallengeNameType? = nil,
        challengeParameters: [Swift.String: Swift.String]? = nil,
        session: Swift.String? = nil
    )
    {
        self.authenticationResult = authenticationResult
        self.challengeName = challengeName
        self.challengeParameters = challengeParameters
        self.session = session
    }
}

extension RespondToAuthChallengeOutput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "RespondToAuthChallengeOutput(authenticationResult: \(Swift.String(describing: authenticationResult)), challengeName: \(Swift.String(describing: challengeName)), challengeParameters: \(Swift.String(describing: challengeParameters)), session: \"CONTENT_REDACTED\")"}
}

/// Exception that is thrown when the request isn't authorized. This can happen due to an invalid access token in the request.
public struct UnauthorizedException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "UnauthorizedException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// Exception that is thrown when you attempt to perform an operation that isn't enabled for the user pool client.
public struct UnsupportedOperationException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "UnsupportedOperationException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// Exception that is thrown when an unsupported token is passed to an operation.
public struct UnsupportedTokenTypeException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "UnsupportedTokenTypeException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

public struct RevokeTokenInput: Swift.Sendable {
    /// The client ID for the token that you want to revoke.
    /// This member is required.
    public var clientId: Swift.String?
    /// The secret for the client ID. This is required only if the client ID has a secret.
    public var clientSecret: Swift.String?
    /// The refresh token that you want to revoke.
    /// This member is required.
    public var token: Swift.String?

    public init(
        clientId: Swift.String? = nil,
        clientSecret: Swift.String? = nil,
        token: Swift.String? = nil
    )
    {
        self.clientId = clientId
        self.clientSecret = clientSecret
        self.token = token
    }
}

extension RevokeTokenInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "RevokeTokenInput(clientId: \"CONTENT_REDACTED\", clientSecret: \"CONTENT_REDACTED\", token: \"CONTENT_REDACTED\")"}
}

public struct RevokeTokenOutput: Swift.Sendable {

    public init() { }
}

public struct SetLogDeliveryConfigurationInput: Swift.Sendable {
    /// A collection of the logging configurations for a user pool.
    /// This member is required.
    public var logConfigurations: [CognitoIdentityProviderClientTypes.LogConfigurationType]?
    /// The ID of the user pool where you want to configure logging.
    /// This member is required.
    public var userPoolId: Swift.String?

    public init(
        logConfigurations: [CognitoIdentityProviderClientTypes.LogConfigurationType]? = nil,
        userPoolId: Swift.String? = nil
    )
    {
        self.logConfigurations = logConfigurations
        self.userPoolId = userPoolId
    }
}

public struct SetLogDeliveryConfigurationOutput: Swift.Sendable {
    /// The detailed activity logging configuration that you applied to the requested user pool.
    public var logDeliveryConfiguration: CognitoIdentityProviderClientTypes.LogDeliveryConfigurationType?

    public init(
        logDeliveryConfiguration: CognitoIdentityProviderClientTypes.LogDeliveryConfigurationType? = nil
    )
    {
        self.logDeliveryConfiguration = logDeliveryConfiguration
    }
}

public struct SetRiskConfigurationInput: Swift.Sendable {
    /// The account takeover risk configuration.
    public var accountTakeoverRiskConfiguration: CognitoIdentityProviderClientTypes.AccountTakeoverRiskConfigurationType?
    /// The app client ID. If ClientId is null, then the risk configuration is mapped to userPoolId. When the client ID is null, the same risk configuration is applied to all the clients in the userPool. Otherwise, ClientId is mapped to the client. When the client ID isn't null, the user pool configuration is overridden and the risk configuration for the client is used instead.
    public var clientId: Swift.String?
    /// The compromised credentials risk configuration.
    public var compromisedCredentialsRiskConfiguration: CognitoIdentityProviderClientTypes.CompromisedCredentialsRiskConfigurationType?
    /// The configuration to override the risk decision.
    public var riskExceptionConfiguration: CognitoIdentityProviderClientTypes.RiskExceptionConfigurationType?
    /// The user pool ID.
    /// This member is required.
    public var userPoolId: Swift.String?

    public init(
        accountTakeoverRiskConfiguration: CognitoIdentityProviderClientTypes.AccountTakeoverRiskConfigurationType? = nil,
        clientId: Swift.String? = nil,
        compromisedCredentialsRiskConfiguration: CognitoIdentityProviderClientTypes.CompromisedCredentialsRiskConfigurationType? = nil,
        riskExceptionConfiguration: CognitoIdentityProviderClientTypes.RiskExceptionConfigurationType? = nil,
        userPoolId: Swift.String? = nil
    )
    {
        self.accountTakeoverRiskConfiguration = accountTakeoverRiskConfiguration
        self.clientId = clientId
        self.compromisedCredentialsRiskConfiguration = compromisedCredentialsRiskConfiguration
        self.riskExceptionConfiguration = riskExceptionConfiguration
        self.userPoolId = userPoolId
    }
}

extension SetRiskConfigurationInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "SetRiskConfigurationInput(accountTakeoverRiskConfiguration: \(Swift.String(describing: accountTakeoverRiskConfiguration)), compromisedCredentialsRiskConfiguration: \(Swift.String(describing: compromisedCredentialsRiskConfiguration)), riskExceptionConfiguration: \(Swift.String(describing: riskExceptionConfiguration)), userPoolId: \(Swift.String(describing: userPoolId)), clientId: \"CONTENT_REDACTED\")"}
}

public struct SetRiskConfigurationOutput: Swift.Sendable {
    /// The risk configuration.
    /// This member is required.
    public var riskConfiguration: CognitoIdentityProviderClientTypes.RiskConfigurationType?

    public init(
        riskConfiguration: CognitoIdentityProviderClientTypes.RiskConfigurationType? = nil
    )
    {
        self.riskConfiguration = riskConfiguration
    }
}

public struct SetUICustomizationInput: Swift.Sendable {
    /// The client ID for the client app.
    public var clientId: Swift.String?
    /// The CSS values in the UI customization.
    public var css: Swift.String?
    /// The uploaded logo image for the UI customization.
    public var imageFile: Foundation.Data?
    /// The user pool ID for the user pool.
    /// This member is required.
    public var userPoolId: Swift.String?

    public init(
        clientId: Swift.String? = nil,
        css: Swift.String? = nil,
        imageFile: Foundation.Data? = nil,
        userPoolId: Swift.String? = nil
    )
    {
        self.clientId = clientId
        self.css = css
        self.imageFile = imageFile
        self.userPoolId = userPoolId
    }
}

extension SetUICustomizationInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "SetUICustomizationInput(css: \(Swift.String(describing: css)), imageFile: \(Swift.String(describing: imageFile)), userPoolId: \(Swift.String(describing: userPoolId)), clientId: \"CONTENT_REDACTED\")"}
}

public struct SetUICustomizationOutput: Swift.Sendable {
    /// The UI customization information.
    /// This member is required.
    public var uiCustomization: CognitoIdentityProviderClientTypes.UICustomizationType?

    public init(
        uiCustomization: CognitoIdentityProviderClientTypes.UICustomizationType? = nil
    )
    {
        self.uiCustomization = uiCustomization
    }
}

public struct SetUserMFAPreferenceInput: Swift.Sendable {
    /// A valid access token that Amazon Cognito issued to the user whose MFA preference you want to set.
    /// This member is required.
    public var accessToken: Swift.String?
    /// User preferences for email message MFA. Activates or deactivates email MFA and sets it as the preferred MFA method when multiple methods are available. To activate this setting, [ advanced security features](https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-pool-settings-advanced-security.html) must be active in your user pool.
    public var emailMfaSettings: CognitoIdentityProviderClientTypes.EmailMfaSettingsType?
    /// User preferences for SMS message MFA. Activates or deactivates SMS MFA and sets it as the preferred MFA method when multiple methods are available.
    public var smsMfaSettings: CognitoIdentityProviderClientTypes.SMSMfaSettingsType?
    /// User preferences for time-based one-time password (TOTP) MFA. Activates or deactivates TOTP MFA and sets it as the preferred MFA method when multiple methods are available.
    public var softwareTokenMfaSettings: CognitoIdentityProviderClientTypes.SoftwareTokenMfaSettingsType?

    public init(
        accessToken: Swift.String? = nil,
        emailMfaSettings: CognitoIdentityProviderClientTypes.EmailMfaSettingsType? = nil,
        smsMfaSettings: CognitoIdentityProviderClientTypes.SMSMfaSettingsType? = nil,
        softwareTokenMfaSettings: CognitoIdentityProviderClientTypes.SoftwareTokenMfaSettingsType? = nil
    )
    {
        self.accessToken = accessToken
        self.emailMfaSettings = emailMfaSettings
        self.smsMfaSettings = smsMfaSettings
        self.softwareTokenMfaSettings = softwareTokenMfaSettings
    }
}

extension SetUserMFAPreferenceInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "SetUserMFAPreferenceInput(emailMfaSettings: \(Swift.String(describing: emailMfaSettings)), smsMfaSettings: \(Swift.String(describing: smsMfaSettings)), softwareTokenMfaSettings: \(Swift.String(describing: softwareTokenMfaSettings)), accessToken: \"CONTENT_REDACTED\")"}
}

public struct SetUserMFAPreferenceOutput: Swift.Sendable {

    public init() { }
}

public struct SetUserPoolMfaConfigInput: Swift.Sendable {
    /// Configures user pool email messages for MFA. Sets the subject and body of the email message template for MFA messages. To activate this setting, [ advanced security features](https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-pool-settings-advanced-security.html) must be active in your user pool.
    public var emailMfaConfiguration: CognitoIdentityProviderClientTypes.EmailMfaConfigType?
    /// The MFA configuration. If you set the MfaConfiguration value to ‘ON’, only users who have set up an MFA factor can sign in. To learn more, see [Adding Multi-Factor Authentication (MFA) to a user pool](https://docs.aws.amazon.com/cognito/latest/developerguide/user-pool-settings-mfa.html). Valid values include:
    ///
    /// * OFF MFA won't be used for any users.
    ///
    /// * ON MFA is required for all users to sign in.
    ///
    /// * OPTIONAL MFA will be required only for individual users who have an MFA factor activated.
    public var mfaConfiguration: CognitoIdentityProviderClientTypes.UserPoolMfaType?
    /// Configures user pool SMS messages for MFA. Sets the message template and the SMS message sending configuration for Amazon SNS.
    public var smsMfaConfiguration: CognitoIdentityProviderClientTypes.SmsMfaConfigType?
    /// Configures a user pool for time-based one-time password (TOTP) MFA. Enables or disables TOTP.
    public var softwareTokenMfaConfiguration: CognitoIdentityProviderClientTypes.SoftwareTokenMfaConfigType?
    /// The user pool ID.
    /// This member is required.
    public var userPoolId: Swift.String?

    public init(
        emailMfaConfiguration: CognitoIdentityProviderClientTypes.EmailMfaConfigType? = nil,
        mfaConfiguration: CognitoIdentityProviderClientTypes.UserPoolMfaType? = nil,
        smsMfaConfiguration: CognitoIdentityProviderClientTypes.SmsMfaConfigType? = nil,
        softwareTokenMfaConfiguration: CognitoIdentityProviderClientTypes.SoftwareTokenMfaConfigType? = nil,
        userPoolId: Swift.String? = nil
    )
    {
        self.emailMfaConfiguration = emailMfaConfiguration
        self.mfaConfiguration = mfaConfiguration
        self.smsMfaConfiguration = smsMfaConfiguration
        self.softwareTokenMfaConfiguration = softwareTokenMfaConfiguration
        self.userPoolId = userPoolId
    }
}

public struct SetUserPoolMfaConfigOutput: Swift.Sendable {
    /// Shows user pool email message configuration for MFA. Includes the subject and body of the email message template for MFA messages. To activate this setting, [ advanced security features](https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-pool-settings-advanced-security.html) must be active in your user pool.
    public var emailMfaConfiguration: CognitoIdentityProviderClientTypes.EmailMfaConfigType?
    /// The MFA configuration. Valid values include:
    ///
    /// * OFF MFA won't be used for any users.
    ///
    /// * ON MFA is required for all users to sign in.
    ///
    /// * OPTIONAL MFA will be required only for individual users who have an MFA factor enabled.
    public var mfaConfiguration: CognitoIdentityProviderClientTypes.UserPoolMfaType?
    /// Shows user pool SMS message configuration for MFA. Includes the message template and the SMS message sending configuration for Amazon SNS.
    public var smsMfaConfiguration: CognitoIdentityProviderClientTypes.SmsMfaConfigType?
    /// Shows user pool configuration for time-based one-time password (TOTP) MFA. Includes TOTP enabled or disabled state.
    public var softwareTokenMfaConfiguration: CognitoIdentityProviderClientTypes.SoftwareTokenMfaConfigType?

    public init(
        emailMfaConfiguration: CognitoIdentityProviderClientTypes.EmailMfaConfigType? = nil,
        mfaConfiguration: CognitoIdentityProviderClientTypes.UserPoolMfaType? = nil,
        smsMfaConfiguration: CognitoIdentityProviderClientTypes.SmsMfaConfigType? = nil,
        softwareTokenMfaConfiguration: CognitoIdentityProviderClientTypes.SoftwareTokenMfaConfigType? = nil
    )
    {
        self.emailMfaConfiguration = emailMfaConfiguration
        self.mfaConfiguration = mfaConfiguration
        self.smsMfaConfiguration = smsMfaConfiguration
        self.softwareTokenMfaConfiguration = softwareTokenMfaConfiguration
    }
}

/// Represents the request to set user settings.
public struct SetUserSettingsInput: Swift.Sendable {
    /// A valid access token that Amazon Cognito issued to the user whose user settings you want to configure.
    /// This member is required.
    public var accessToken: Swift.String?
    /// You can use this parameter only to set an SMS configuration that uses SMS for delivery.
    /// This member is required.
    public var mfaOptions: [CognitoIdentityProviderClientTypes.MFAOptionType]?

    public init(
        accessToken: Swift.String? = nil,
        mfaOptions: [CognitoIdentityProviderClientTypes.MFAOptionType]? = nil
    )
    {
        self.accessToken = accessToken
        self.mfaOptions = mfaOptions
    }
}

extension SetUserSettingsInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "SetUserSettingsInput(mfaOptions: \(Swift.String(describing: mfaOptions)), accessToken: \"CONTENT_REDACTED\")"}
}

/// The response from the server for a set user settings request.
public struct SetUserSettingsOutput: Swift.Sendable {

    public init() { }
}

/// Represents the request to register a user.
public struct SignUpInput: Swift.Sendable {
    /// The Amazon Pinpoint analytics metadata that contributes to your metrics for SignUp calls.
    public var analyticsMetadata: CognitoIdentityProviderClientTypes.AnalyticsMetadataType?
    /// The ID of the client associated with the user pool.
    /// This member is required.
    public var clientId: Swift.String?
    /// A map of custom key-value pairs that you can provide as input for any custom workflows that this action triggers. You create custom workflows by assigning Lambda functions to user pool triggers. When you use the SignUp API action, Amazon Cognito invokes any functions that are assigned to the following triggers: pre sign-up, custom message, and post confirmation. When Amazon Cognito invokes any of these functions, it passes a JSON payload, which the function receives as input. This payload contains a clientMetadata attribute, which provides the data that you assigned to the ClientMetadata parameter in your SignUp request. In your function code in Lambda, you can process the clientMetadata value to enhance your workflow for your specific needs. For more information, see [ Customizing user pool Workflows with Lambda Triggers](https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools-working-with-aws-lambda-triggers.html) in the Amazon Cognito Developer Guide. When you use the ClientMetadata parameter, remember that Amazon Cognito won't do the following:
    ///
    /// * Store the ClientMetadata value. This data is available only to Lambda triggers that are assigned to a user pool to support custom workflows. If your user pool configuration doesn't include triggers, the ClientMetadata parameter serves no purpose.
    ///
    /// * Validate the ClientMetadata value.
    ///
    /// * Encrypt the ClientMetadata value. Don't use Amazon Cognito to provide sensitive information.
    public var clientMetadata: [Swift.String: Swift.String]?
    /// The password of the user you want to register.
    /// This member is required.
    public var password: Swift.String?
    /// A keyed-hash message authentication code (HMAC) calculated using the secret key of a user pool client and username plus the client ID in the message.
    public var secretHash: Swift.String?
    /// An array of name-value pairs representing user attributes. For custom attributes, you must prepend the custom: prefix to the attribute name.
    public var userAttributes: [CognitoIdentityProviderClientTypes.AttributeType]?
    /// Contextual data about your user session, such as the device fingerprint, IP address, or location. Amazon Cognito advanced security evaluates the risk of an authentication event based on the context that your app generates and passes to Amazon Cognito when it makes API requests.
    public var userContextData: CognitoIdentityProviderClientTypes.UserContextDataType?
    /// The username of the user that you want to sign up. The value of this parameter is typically a username, but can be any alias attribute in your user pool.
    /// This member is required.
    public var username: Swift.String?
    /// Temporary user attributes that contribute to the outcomes of your pre sign-up Lambda trigger. This set of key-value pairs are for custom validation of information that you collect from your users but don't need to retain. Your Lambda function can analyze this additional data and act on it. Your function might perform external API operations like logging user attributes and validation data to Amazon CloudWatch Logs. Validation data might also affect the response that your function returns to Amazon Cognito, like automatically confirming the user if they sign up from within your network. For more information about the pre sign-up Lambda trigger, see [Pre sign-up Lambda trigger](https://docs.aws.amazon.com/cognito/latest/developerguide/user-pool-lambda-pre-sign-up.html).
    public var validationData: [CognitoIdentityProviderClientTypes.AttributeType]?

    public init(
        analyticsMetadata: CognitoIdentityProviderClientTypes.AnalyticsMetadataType? = nil,
        clientId: Swift.String? = nil,
        clientMetadata: [Swift.String: Swift.String]? = nil,
        password: Swift.String? = nil,
        secretHash: Swift.String? = nil,
        userAttributes: [CognitoIdentityProviderClientTypes.AttributeType]? = nil,
        userContextData: CognitoIdentityProviderClientTypes.UserContextDataType? = nil,
        username: Swift.String? = nil,
        validationData: [CognitoIdentityProviderClientTypes.AttributeType]? = nil
    )
    {
        self.analyticsMetadata = analyticsMetadata
        self.clientId = clientId
        self.clientMetadata = clientMetadata
        self.password = password
        self.secretHash = secretHash
        self.userAttributes = userAttributes
        self.userContextData = userContextData
        self.username = username
        self.validationData = validationData
    }
}

extension SignUpInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "SignUpInput(analyticsMetadata: \(Swift.String(describing: analyticsMetadata)), clientMetadata: \(Swift.String(describing: clientMetadata)), userAttributes: \(Swift.String(describing: userAttributes)), validationData: \(Swift.String(describing: validationData)), clientId: \"CONTENT_REDACTED\", password: \"CONTENT_REDACTED\", secretHash: \"CONTENT_REDACTED\", userContextData: \"CONTENT_REDACTED\", username: \"CONTENT_REDACTED\")"}
}

/// The response from the server for a registration request.
public struct SignUpOutput: Swift.Sendable {
    /// The code delivery details returned by the server response to the user registration request.
    public var codeDeliveryDetails: CognitoIdentityProviderClientTypes.CodeDeliveryDetailsType?
    /// A response from the server indicating that a user registration has been confirmed.
    /// This member is required.
    public var userConfirmed: Swift.Bool
    /// The 128-bit ID of the authenticated user. This isn't the same as username.
    /// This member is required.
    public var userSub: Swift.String?

    public init(
        codeDeliveryDetails: CognitoIdentityProviderClientTypes.CodeDeliveryDetailsType? = nil,
        userConfirmed: Swift.Bool = false,
        userSub: Swift.String? = nil
    )
    {
        self.codeDeliveryDetails = codeDeliveryDetails
        self.userConfirmed = userConfirmed
        self.userSub = userSub
    }
}

/// Represents the request to start the user import job.
public struct StartUserImportJobInput: Swift.Sendable {
    /// The job ID for the user import job.
    /// This member is required.
    public var jobId: Swift.String?
    /// The user pool ID for the user pool that the users are being imported into.
    /// This member is required.
    public var userPoolId: Swift.String?

    public init(
        jobId: Swift.String? = nil,
        userPoolId: Swift.String? = nil
    )
    {
        self.jobId = jobId
        self.userPoolId = userPoolId
    }
}

/// Represents the response from the server to the request to start the user import job.
public struct StartUserImportJobOutput: Swift.Sendable {
    /// The job object that represents the user import job.
    public var userImportJob: CognitoIdentityProviderClientTypes.UserImportJobType?

    public init(
        userImportJob: CognitoIdentityProviderClientTypes.UserImportJobType? = nil
    )
    {
        self.userImportJob = userImportJob
    }
}

/// Represents the request to stop the user import job.
public struct StopUserImportJobInput: Swift.Sendable {
    /// The job ID for the user import job.
    /// This member is required.
    public var jobId: Swift.String?
    /// The user pool ID for the user pool that the users are being imported into.
    /// This member is required.
    public var userPoolId: Swift.String?

    public init(
        jobId: Swift.String? = nil,
        userPoolId: Swift.String? = nil
    )
    {
        self.jobId = jobId
        self.userPoolId = userPoolId
    }
}

/// Represents the response from the server to the request to stop the user import job.
public struct StopUserImportJobOutput: Swift.Sendable {
    /// The job object that represents the user import job.
    public var userImportJob: CognitoIdentityProviderClientTypes.UserImportJobType?

    public init(
        userImportJob: CognitoIdentityProviderClientTypes.UserImportJobType? = nil
    )
    {
        self.userImportJob = userImportJob
    }
}

public struct TagResourceInput: Swift.Sendable {
    /// The Amazon Resource Name (ARN) of the user pool to assign the tags to.
    /// This member is required.
    public var resourceArn: Swift.String?
    /// The tags to assign to the user pool.
    /// This member is required.
    public var tags: [Swift.String: Swift.String]?

    public init(
        resourceArn: Swift.String? = nil,
        tags: [Swift.String: Swift.String]? = nil
    )
    {
        self.resourceArn = resourceArn
        self.tags = tags
    }
}

public struct TagResourceOutput: Swift.Sendable {

    public init() { }
}

public struct UntagResourceInput: Swift.Sendable {
    /// The Amazon Resource Name (ARN) of the user pool that the tags are assigned to.
    /// This member is required.
    public var resourceArn: Swift.String?
    /// The keys of the tags to remove from the user pool.
    /// This member is required.
    public var tagKeys: [Swift.String]?

    public init(
        resourceArn: Swift.String? = nil,
        tagKeys: [Swift.String]? = nil
    )
    {
        self.resourceArn = resourceArn
        self.tagKeys = tagKeys
    }
}

public struct UntagResourceOutput: Swift.Sendable {

    public init() { }
}

public struct UpdateAuthEventFeedbackInput: Swift.Sendable {
    /// The event ID.
    /// This member is required.
    public var eventId: Swift.String?
    /// The feedback token.
    /// This member is required.
    public var feedbackToken: Swift.String?
    /// The authentication event feedback value. When you provide a FeedbackValue value of valid, you tell Amazon Cognito that you trust a user session where Amazon Cognito has evaluated some level of risk. When you provide a FeedbackValue value of invalid, you tell Amazon Cognito that you don't trust a user session, or you don't believe that Amazon Cognito evaluated a high-enough risk level.
    /// This member is required.
    public var feedbackValue: CognitoIdentityProviderClientTypes.FeedbackValueType?
    /// The user pool ID.
    /// This member is required.
    public var userPoolId: Swift.String?
    /// The username of the user that you want to query or modify. The value of this parameter is typically your user's username, but it can be any of their alias attributes. If username isn't an alias attribute in your user pool, this value must be the sub of a local user or the username of a user from a third-party IdP.
    /// This member is required.
    public var username: Swift.String?

    public init(
        eventId: Swift.String? = nil,
        feedbackToken: Swift.String? = nil,
        feedbackValue: CognitoIdentityProviderClientTypes.FeedbackValueType? = nil,
        userPoolId: Swift.String? = nil,
        username: Swift.String? = nil
    )
    {
        self.eventId = eventId
        self.feedbackToken = feedbackToken
        self.feedbackValue = feedbackValue
        self.userPoolId = userPoolId
        self.username = username
    }
}

extension UpdateAuthEventFeedbackInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UpdateAuthEventFeedbackInput(eventId: \(Swift.String(describing: eventId)), feedbackValue: \(Swift.String(describing: feedbackValue)), userPoolId: \(Swift.String(describing: userPoolId)), feedbackToken: \"CONTENT_REDACTED\", username: \"CONTENT_REDACTED\")"}
}

public struct UpdateAuthEventFeedbackOutput: Swift.Sendable {

    public init() { }
}

/// Represents the request to update the device status.
public struct UpdateDeviceStatusInput: Swift.Sendable {
    /// A valid access token that Amazon Cognito issued to the user whose device status you want to update.
    /// This member is required.
    public var accessToken: Swift.String?
    /// The device key.
    /// This member is required.
    public var deviceKey: Swift.String?
    /// The status of whether a device is remembered.
    public var deviceRememberedStatus: CognitoIdentityProviderClientTypes.DeviceRememberedStatusType?

    public init(
        accessToken: Swift.String? = nil,
        deviceKey: Swift.String? = nil,
        deviceRememberedStatus: CognitoIdentityProviderClientTypes.DeviceRememberedStatusType? = nil
    )
    {
        self.accessToken = accessToken
        self.deviceKey = deviceKey
        self.deviceRememberedStatus = deviceRememberedStatus
    }
}

extension UpdateDeviceStatusInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UpdateDeviceStatusInput(deviceKey: \(Swift.String(describing: deviceKey)), deviceRememberedStatus: \(Swift.String(describing: deviceRememberedStatus)), accessToken: \"CONTENT_REDACTED\")"}
}

/// The response to the request to update the device status.
public struct UpdateDeviceStatusOutput: Swift.Sendable {

    public init() { }
}

public struct UpdateGroupInput: Swift.Sendable {
    /// A string containing the new description of the group.
    public var description: Swift.String?
    /// The name of the group.
    /// This member is required.
    public var groupName: Swift.String?
    /// The new precedence value for the group. For more information about this parameter, see [CreateGroup](https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_CreateGroup.html).
    public var precedence: Swift.Int?
    /// The new role Amazon Resource Name (ARN) for the group. This is used for setting the cognito:roles and cognito:preferred_role claims in the token.
    public var roleArn: Swift.String?
    /// The user pool ID for the user pool.
    /// This member is required.
    public var userPoolId: Swift.String?

    public init(
        description: Swift.String? = nil,
        groupName: Swift.String? = nil,
        precedence: Swift.Int? = nil,
        roleArn: Swift.String? = nil,
        userPoolId: Swift.String? = nil
    )
    {
        self.description = description
        self.groupName = groupName
        self.precedence = precedence
        self.roleArn = roleArn
        self.userPoolId = userPoolId
    }
}

public struct UpdateGroupOutput: Swift.Sendable {
    /// The group object for the group.
    public var group: CognitoIdentityProviderClientTypes.GroupType?

    public init(
        group: CognitoIdentityProviderClientTypes.GroupType? = nil
    )
    {
        self.group = group
    }
}

public struct UpdateIdentityProviderInput: Swift.Sendable {
    /// The IdP attribute mapping to be changed.
    public var attributeMapping: [Swift.String: Swift.String]?
    /// A list of IdP identifiers.
    public var idpIdentifiers: [Swift.String]?
    /// The scopes, URLs, and identifiers for your external identity provider. The following examples describe the provider detail keys for each IdP type. These values and their schema are subject to change. Social IdP authorize_scopes values must match the values listed here. OpenID Connect (OIDC) Amazon Cognito accepts the following elements when it can't discover endpoint URLs from oidc_issuer: attributes_url, authorize_url, jwks_uri, token_url. Create or update request: "ProviderDetails": { "attributes_request_method": "GET", "attributes_url": "https://auth.example.com/userInfo", "authorize_scopes": "openid profile email", "authorize_url": "https://auth.example.com/authorize", "client_id": "1example23456789", "client_secret": "provider-app-client-secret", "jwks_uri": "https://auth.example.com/.well-known/jwks.json", "oidc_issuer": "https://auth.example.com", "token_url": "https://example.com/token" } Describe response: "ProviderDetails": { "attributes_request_method": "GET", "attributes_url": "https://auth.example.com/userInfo", "attributes_url_add_attributes": "false", "authorize_scopes": "openid profile email", "authorize_url": "https://auth.example.com/authorize", "client_id": "1example23456789", "client_secret": "provider-app-client-secret", "jwks_uri": "https://auth.example.com/.well-known/jwks.json", "oidc_issuer": "https://auth.example.com", "token_url": "https://example.com/token" } SAML Create or update request with Metadata URL: "ProviderDetails": { "IDPInit": "true", "IDPSignout": "true", "EncryptedResponses" : "true", "MetadataURL": "https://auth.example.com/sso/saml/metadata", "RequestSigningAlgorithm": "rsa-sha256" } Create or update request with Metadata file: "ProviderDetails": { "IDPInit": "true", "IDPSignout": "true", "EncryptedResponses" : "true", "MetadataFile": "[metadata XML]", "RequestSigningAlgorithm": "rsa-sha256" } The value of MetadataFile must be the plaintext metadata document with all quote (") characters escaped by backslashes. Describe response: "ProviderDetails": { "IDPInit": "true", "IDPSignout": "true", "EncryptedResponses" : "true", "ActiveEncryptionCertificate": "[certificate]", "MetadataURL": "https://auth.example.com/sso/saml/metadata", "RequestSigningAlgorithm": "rsa-sha256", "SLORedirectBindingURI": "https://auth.example.com/slo/saml", "SSORedirectBindingURI": "https://auth.example.com/sso/saml" } LoginWithAmazon Create or update request: "ProviderDetails": { "authorize_scopes": "profile postal_code", "client_id": "amzn1.application-oa2-client.1example23456789", "client_secret": "provider-app-client-secret" Describe response: "ProviderDetails": { "attributes_url": "https://api.amazon.com/user/profile", "attributes_url_add_attributes": "false", "authorize_scopes": "profile postal_code", "authorize_url": "https://www.amazon.com/ap/oa", "client_id": "amzn1.application-oa2-client.1example23456789", "client_secret": "provider-app-client-secret", "token_request_method": "POST", "token_url": "https://api.amazon.com/auth/o2/token" } Google Create or update request: "ProviderDetails": { "authorize_scopes": "email profile openid", "client_id": "1example23456789.apps.googleusercontent.com", "client_secret": "provider-app-client-secret" } Describe response: "ProviderDetails": { "attributes_url": "https://people.googleapis.com/v1/people/me?personFields=", "attributes_url_add_attributes": "true", "authorize_scopes": "email profile openid", "authorize_url": "https://accounts.google.com/o/oauth2/v2/auth", "client_id": "1example23456789.apps.googleusercontent.com", "client_secret": "provider-app-client-secret", "oidc_issuer": "https://accounts.google.com", "token_request_method": "POST", "token_url": "https://www.googleapis.com/oauth2/v4/token" } SignInWithApple Create or update request: "ProviderDetails": { "authorize_scopes": "email name", "client_id": "com.example.cognito", "private_key": "1EXAMPLE", "key_id": "2EXAMPLE", "team_id": "3EXAMPLE" } Describe response: "ProviderDetails": { "attributes_url_add_attributes": "false", "authorize_scopes": "email name", "authorize_url": "https://appleid.apple.com/auth/authorize", "client_id": "com.example.cognito", "key_id": "1EXAMPLE", "oidc_issuer": "https://appleid.apple.com", "team_id": "2EXAMPLE", "token_request_method": "POST", "token_url": "https://appleid.apple.com/auth/token" } Facebook Create or update request: "ProviderDetails": { "api_version": "v17.0", "authorize_scopes": "public_profile, email", "client_id": "1example23456789", "client_secret": "provider-app-client-secret" } Describe response: "ProviderDetails": { "api_version": "v17.0", "attributes_url": "https://graph.facebook.com/v17.0/me?fields=", "attributes_url_add_attributes": "true", "authorize_scopes": "public_profile, email", "authorize_url": "https://www.facebook.com/v17.0/dialog/oauth", "client_id": "1example23456789", "client_secret": "provider-app-client-secret", "token_request_method": "GET", "token_url": "https://graph.facebook.com/v17.0/oauth/access_token" }
    public var providerDetails: [Swift.String: Swift.String]?
    /// The IdP name.
    /// This member is required.
    public var providerName: Swift.String?
    /// The user pool ID.
    /// This member is required.
    public var userPoolId: Swift.String?

    public init(
        attributeMapping: [Swift.String: Swift.String]? = nil,
        idpIdentifiers: [Swift.String]? = nil,
        providerDetails: [Swift.String: Swift.String]? = nil,
        providerName: Swift.String? = nil,
        userPoolId: Swift.String? = nil
    )
    {
        self.attributeMapping = attributeMapping
        self.idpIdentifiers = idpIdentifiers
        self.providerDetails = providerDetails
        self.providerName = providerName
        self.userPoolId = userPoolId
    }
}

public struct UpdateIdentityProviderOutput: Swift.Sendable {
    /// The identity provider details.
    /// This member is required.
    public var identityProvider: CognitoIdentityProviderClientTypes.IdentityProviderType?

    public init(
        identityProvider: CognitoIdentityProviderClientTypes.IdentityProviderType? = nil
    )
    {
        self.identityProvider = identityProvider
    }
}

public struct UpdateResourceServerInput: Swift.Sendable {
    /// A unique resource server identifier for the resource server. The identifier can be an API friendly name like solar-system-data. You can also set an API URL like https://solar-system-data-api.example.com as your identifier. Amazon Cognito represents scopes in the access token in the format $resource-server-identifier/$scope. Longer scope-identifier strings increase the size of your access tokens.
    /// This member is required.
    public var identifier: Swift.String?
    /// The name of the resource server.
    /// This member is required.
    public var name: Swift.String?
    /// The scope values to be set for the resource server.
    public var scopes: [CognitoIdentityProviderClientTypes.ResourceServerScopeType]?
    /// The user pool ID for the user pool.
    /// This member is required.
    public var userPoolId: Swift.String?

    public init(
        identifier: Swift.String? = nil,
        name: Swift.String? = nil,
        scopes: [CognitoIdentityProviderClientTypes.ResourceServerScopeType]? = nil,
        userPoolId: Swift.String? = nil
    )
    {
        self.identifier = identifier
        self.name = name
        self.scopes = scopes
        self.userPoolId = userPoolId
    }
}

public struct UpdateResourceServerOutput: Swift.Sendable {
    /// The resource server.
    /// This member is required.
    public var resourceServer: CognitoIdentityProviderClientTypes.ResourceServerType?

    public init(
        resourceServer: CognitoIdentityProviderClientTypes.ResourceServerType? = nil
    )
    {
        self.resourceServer = resourceServer
    }
}

/// Represents the request to update user attributes.
public struct UpdateUserAttributesInput: Swift.Sendable {
    /// A valid access token that Amazon Cognito issued to the user whose user attributes you want to update.
    /// This member is required.
    public var accessToken: Swift.String?
    /// A map of custom key-value pairs that you can provide as input for any custom workflows that this action initiates. You create custom workflows by assigning Lambda functions to user pool triggers. When you use the UpdateUserAttributes API action, Amazon Cognito invokes the function that is assigned to the custom message trigger. When Amazon Cognito invokes this function, it passes a JSON payload, which the function receives as input. This payload contains a clientMetadata attribute, which provides the data that you assigned to the ClientMetadata parameter in your UpdateUserAttributes request. In your function code in Lambda, you can process the clientMetadata value to enhance your workflow for your specific needs. For more information, see [ Customizing user pool Workflows with Lambda Triggers](https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools-working-with-aws-lambda-triggers.html) in the Amazon Cognito Developer Guide. When you use the ClientMetadata parameter, remember that Amazon Cognito won't do the following:
    ///
    /// * Store the ClientMetadata value. This data is available only to Lambda triggers that are assigned to a user pool to support custom workflows. If your user pool configuration doesn't include triggers, the ClientMetadata parameter serves no purpose.
    ///
    /// * Validate the ClientMetadata value.
    ///
    /// * Encrypt the ClientMetadata value. Don't use Amazon Cognito to provide sensitive information.
    public var clientMetadata: [Swift.String: Swift.String]?
    /// An array of name-value pairs representing user attributes. For custom attributes, you must prepend the custom: prefix to the attribute name. If you have set an attribute to require verification before Amazon Cognito updates its value, this request doesn’t immediately update the value of that attribute. After your user receives and responds to a verification message to verify the new value, Amazon Cognito updates the attribute value. Your user can sign in and receive messages with the original attribute value until they verify the new value.
    /// This member is required.
    public var userAttributes: [CognitoIdentityProviderClientTypes.AttributeType]?

    public init(
        accessToken: Swift.String? = nil,
        clientMetadata: [Swift.String: Swift.String]? = nil,
        userAttributes: [CognitoIdentityProviderClientTypes.AttributeType]? = nil
    )
    {
        self.accessToken = accessToken
        self.clientMetadata = clientMetadata
        self.userAttributes = userAttributes
    }
}

extension UpdateUserAttributesInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UpdateUserAttributesInput(clientMetadata: \(Swift.String(describing: clientMetadata)), userAttributes: \(Swift.String(describing: userAttributes)), accessToken: \"CONTENT_REDACTED\")"}
}

/// Represents the response from the server for the request to update user attributes.
public struct UpdateUserAttributesOutput: Swift.Sendable {
    /// The code delivery details list from the server for the request to update user attributes.
    public var codeDeliveryDetailsList: [CognitoIdentityProviderClientTypes.CodeDeliveryDetailsType]?

    public init(
        codeDeliveryDetailsList: [CognitoIdentityProviderClientTypes.CodeDeliveryDetailsType]? = nil
    )
    {
        self.codeDeliveryDetailsList = codeDeliveryDetailsList
    }
}

/// Represents the request to update the user pool.
public struct UpdateUserPoolInput: Swift.Sendable {
    /// The available verified method a user can use to recover their password when they call ForgotPassword. You can use this setting to define a preferred method when a user has more than one method available. With this setting, SMS doesn't qualify for a valid password recovery mechanism if the user also has SMS multi-factor authentication (MFA) activated. In the absence of this setting, Amazon Cognito uses the legacy behavior to determine the recovery method where SMS is preferred through email.
    public var accountRecoverySetting: CognitoIdentityProviderClientTypes.AccountRecoverySettingType?
    /// The configuration for AdminCreateUser requests.
    public var adminCreateUserConfig: CognitoIdentityProviderClientTypes.AdminCreateUserConfigType?
    /// The attributes that are automatically verified when Amazon Cognito requests to update user pools.
    public var autoVerifiedAttributes: [CognitoIdentityProviderClientTypes.VerifiedAttributeType]?
    /// When active, DeletionProtection prevents accidental deletion of your user pool. Before you can delete a user pool that you have protected against deletion, you must deactivate this feature. When you try to delete a protected user pool in a DeleteUserPool API request, Amazon Cognito returns an InvalidParameterException error. To delete a protected user pool, send a new DeleteUserPool request after you deactivate deletion protection in an UpdateUserPool API request.
    public var deletionProtection: CognitoIdentityProviderClientTypes.DeletionProtectionType?
    /// The device-remembering configuration for a user pool. A null value indicates that you have deactivated device remembering in your user pool. When you provide a value for any DeviceConfiguration field, you activate the Amazon Cognito device-remembering feature.
    public var deviceConfiguration: CognitoIdentityProviderClientTypes.DeviceConfigurationType?
    /// The email configuration of your user pool. The email configuration type sets your preferred sending method, Amazon Web Services Region, and sender for email invitation and verification messages from your user pool.
    public var emailConfiguration: CognitoIdentityProviderClientTypes.EmailConfigurationType?
    /// This parameter is no longer used. See [VerificationMessageTemplateType](https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_VerificationMessageTemplateType.html).
    public var emailVerificationMessage: Swift.String?
    /// This parameter is no longer used. See [VerificationMessageTemplateType](https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_VerificationMessageTemplateType.html).
    public var emailVerificationSubject: Swift.String?
    /// The Lambda configuration information from the request to update the user pool.
    public var lambdaConfig: CognitoIdentityProviderClientTypes.LambdaConfigType?
    /// Possible values include:
    ///
    /// * OFF - MFA tokens aren't required and can't be specified during user registration.
    ///
    /// * ON - MFA tokens are required for all user registrations. You can only specify ON when you're initially creating a user pool. You can use the [SetUserPoolMfaConfig](https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_SetUserPoolMfaConfig.html) API operation to turn MFA "ON" for existing user pools.
    ///
    /// * OPTIONAL - Users have the option when registering to create an MFA token.
    public var mfaConfiguration: CognitoIdentityProviderClientTypes.UserPoolMfaType?
    /// A container with the policies you want to update in a user pool.
    public var policies: CognitoIdentityProviderClientTypes.UserPoolPolicyType?
    /// The contents of the SMS authentication message.
    public var smsAuthenticationMessage: Swift.String?
    /// The SMS configuration with the settings that your Amazon Cognito user pool must use to send an SMS message from your Amazon Web Services account through Amazon Simple Notification Service. To send SMS messages with Amazon SNS in the Amazon Web Services Region that you want, the Amazon Cognito user pool uses an Identity and Access Management (IAM) role in your Amazon Web Services account.
    public var smsConfiguration: CognitoIdentityProviderClientTypes.SmsConfigurationType?
    /// This parameter is no longer used. See [VerificationMessageTemplateType](https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_VerificationMessageTemplateType.html).
    public var smsVerificationMessage: Swift.String?
    /// The settings for updates to user attributes. These settings include the property AttributesRequireVerificationBeforeUpdate, a user-pool setting that tells Amazon Cognito how to handle changes to the value of your users' email address and phone number attributes. For more information, see [ Verifying updates to email addresses and phone numbers](https://docs.aws.amazon.com/cognito/latest/developerguide/user-pool-settings-email-phone-verification.html#user-pool-settings-verifications-verify-attribute-updates).
    public var userAttributeUpdateSettings: CognitoIdentityProviderClientTypes.UserAttributeUpdateSettingsType?
    /// User pool add-ons. Contains settings for activation of advanced security features. To log user security information but take no action, set to AUDIT. To configure automatic security responses to risky traffic to your user pool, set to ENFORCED. For more information, see [Adding advanced security to a user pool](https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-pool-settings-advanced-security.html).
    public var userPoolAddOns: CognitoIdentityProviderClientTypes.UserPoolAddOnsType?
    /// The user pool ID for the user pool you want to update.
    /// This member is required.
    public var userPoolId: Swift.String?
    /// The tag keys and values to assign to the user pool. A tag is a label that you can use to categorize and manage user pools in different ways, such as by purpose, owner, environment, or other criteria.
    public var userPoolTags: [Swift.String: Swift.String]?
    /// The template for verification messages.
    public var verificationMessageTemplate: CognitoIdentityProviderClientTypes.VerificationMessageTemplateType?

    public init(
        accountRecoverySetting: CognitoIdentityProviderClientTypes.AccountRecoverySettingType? = nil,
        adminCreateUserConfig: CognitoIdentityProviderClientTypes.AdminCreateUserConfigType? = nil,
        autoVerifiedAttributes: [CognitoIdentityProviderClientTypes.VerifiedAttributeType]? = nil,
        deletionProtection: CognitoIdentityProviderClientTypes.DeletionProtectionType? = nil,
        deviceConfiguration: CognitoIdentityProviderClientTypes.DeviceConfigurationType? = nil,
        emailConfiguration: CognitoIdentityProviderClientTypes.EmailConfigurationType? = nil,
        emailVerificationMessage: Swift.String? = nil,
        emailVerificationSubject: Swift.String? = nil,
        lambdaConfig: CognitoIdentityProviderClientTypes.LambdaConfigType? = nil,
        mfaConfiguration: CognitoIdentityProviderClientTypes.UserPoolMfaType? = nil,
        policies: CognitoIdentityProviderClientTypes.UserPoolPolicyType? = nil,
        smsAuthenticationMessage: Swift.String? = nil,
        smsConfiguration: CognitoIdentityProviderClientTypes.SmsConfigurationType? = nil,
        smsVerificationMessage: Swift.String? = nil,
        userAttributeUpdateSettings: CognitoIdentityProviderClientTypes.UserAttributeUpdateSettingsType? = nil,
        userPoolAddOns: CognitoIdentityProviderClientTypes.UserPoolAddOnsType? = nil,
        userPoolId: Swift.String? = nil,
        userPoolTags: [Swift.String: Swift.String]? = nil,
        verificationMessageTemplate: CognitoIdentityProviderClientTypes.VerificationMessageTemplateType? = nil
    )
    {
        self.accountRecoverySetting = accountRecoverySetting
        self.adminCreateUserConfig = adminCreateUserConfig
        self.autoVerifiedAttributes = autoVerifiedAttributes
        self.deletionProtection = deletionProtection
        self.deviceConfiguration = deviceConfiguration
        self.emailConfiguration = emailConfiguration
        self.emailVerificationMessage = emailVerificationMessage
        self.emailVerificationSubject = emailVerificationSubject
        self.lambdaConfig = lambdaConfig
        self.mfaConfiguration = mfaConfiguration
        self.policies = policies
        self.smsAuthenticationMessage = smsAuthenticationMessage
        self.smsConfiguration = smsConfiguration
        self.smsVerificationMessage = smsVerificationMessage
        self.userAttributeUpdateSettings = userAttributeUpdateSettings
        self.userPoolAddOns = userPoolAddOns
        self.userPoolId = userPoolId
        self.userPoolTags = userPoolTags
        self.verificationMessageTemplate = verificationMessageTemplate
    }
}

/// Represents the response from the server when you make a request to update the user pool.
public struct UpdateUserPoolOutput: Swift.Sendable {

    public init() { }
}

/// Represents the request to update the user pool client.
public struct UpdateUserPoolClientInput: Swift.Sendable {
    /// The access token time limit. After this limit expires, your user can't use their access token. To specify the time unit for AccessTokenValidity as seconds, minutes, hours, or days, set a TokenValidityUnits value in your API request. For example, when you set AccessTokenValidity to 10 and TokenValidityUnits to hours, your user can authorize access with their access token for 10 hours. The default time unit for AccessTokenValidity in an API request is hours. Valid range is displayed below in seconds. If you don't specify otherwise in the configuration of your app client, your access tokens are valid for one hour.
    public var accessTokenValidity: Swift.Int?
    /// The allowed OAuth flows. code Use a code grant flow, which provides an authorization code as the response. This code can be exchanged for access tokens with the /oauth2/token endpoint. implicit Issue the access token (and, optionally, ID token, based on scopes) directly to your user. client_credentials Issue the access token from the /oauth2/token endpoint directly to a non-person user using a combination of the client ID and client secret.
    public var allowedOAuthFlows: [CognitoIdentityProviderClientTypes.OAuthFlowType]?
    /// Set to true to use OAuth 2.0 features in your user pool app client. AllowedOAuthFlowsUserPoolClient must be true before you can configure the following features in your app client.
    ///
    /// * CallBackURLs: Callback URLs.
    ///
    /// * LogoutURLs: Sign-out redirect URLs.
    ///
    /// * AllowedOAuthScopes: OAuth 2.0 scopes.
    ///
    /// * AllowedOAuthFlows: Support for authorization code, implicit, and client credentials OAuth 2.0 grants.
    ///
    ///
    /// To use OAuth 2.0 features, configure one of these features in the Amazon Cognito console or set AllowedOAuthFlowsUserPoolClient to true in a CreateUserPoolClient or UpdateUserPoolClient API request. If you don't set a value for AllowedOAuthFlowsUserPoolClient in a request with the CLI or SDKs, it defaults to false.
    public var allowedOAuthFlowsUserPoolClient: Swift.Bool?
    /// The allowed OAuth scopes. Possible values provided by OAuth are phone, email, openid, and profile. Possible values provided by Amazon Web Services are aws.cognito.signin.user.admin. Custom scopes created in Resource Servers are also supported.
    public var allowedOAuthScopes: [Swift.String]?
    /// The Amazon Pinpoint analytics configuration necessary to collect metrics for this user pool. In Amazon Web Services Regions where Amazon Pinpoint isn't available, user pools only support sending events to Amazon Pinpoint projects in us-east-1. In Regions where Amazon Pinpoint is available, user pools support sending events to Amazon Pinpoint projects within that same Region.
    public var analyticsConfiguration: CognitoIdentityProviderClientTypes.AnalyticsConfigurationType?
    /// Amazon Cognito creates a session token for each API request in an authentication flow. AuthSessionValidity is the duration, in minutes, of that session token. Your user pool native user must respond to each authentication challenge before the session expires.
    public var authSessionValidity: Swift.Int?
    /// A list of allowed redirect (callback) URLs for the IdPs. A redirect URI must:
    ///
    /// * Be an absolute URI.
    ///
    /// * Be registered with the authorization server.
    ///
    /// * Not include a fragment component.
    ///
    ///
    /// See [OAuth 2.0 - Redirection Endpoint](https://tools.ietf.org/html/rfc6749#section-3.1.2). Amazon Cognito requires HTTPS over HTTP except for http://localhost for testing purposes only. App callback URLs such as myapp://example are also supported.
    public var callbackURLs: [Swift.String]?
    /// The ID of the client associated with the user pool.
    /// This member is required.
    public var clientId: Swift.String?
    /// The client name from the update user pool client request.
    public var clientName: Swift.String?
    /// The default redirect URI. Must be in the CallbackURLs list. A redirect URI must:
    ///
    /// * Be an absolute URI.
    ///
    /// * Be registered with the authorization server.
    ///
    /// * Not include a fragment component.
    ///
    ///
    /// See [OAuth 2.0 - Redirection Endpoint](https://tools.ietf.org/html/rfc6749#section-3.1.2). Amazon Cognito requires HTTPS over HTTP except for http://localhost for testing purposes only. App callback URLs such as myapp://example are also supported.
    public var defaultRedirectURI: Swift.String?
    /// Activates the propagation of additional user context data. For more information about propagation of user context data, see [ Adding advanced security to a user pool](https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-pool-settings-advanced-security.html). If you don’t include this parameter, you can't send device fingerprint information, including source IP address, to Amazon Cognito advanced security. You can only activate EnablePropagateAdditionalUserContextData in an app client that has a client secret.
    public var enablePropagateAdditionalUserContextData: Swift.Bool?
    /// Activates or deactivates token revocation. For more information about revoking tokens, see [RevokeToken](https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_RevokeToken.html).
    public var enableTokenRevocation: Swift.Bool?
    /// The authentication flows that you want your user pool client to support. For each app client in your user pool, you can sign in your users with any combination of one or more flows, including with a user name and Secure Remote Password (SRP), a user name and password, or a custom authentication process that you define with Lambda functions. If you don't specify a value for ExplicitAuthFlows, your user client supports ALLOW_REFRESH_TOKEN_AUTH, ALLOW_USER_SRP_AUTH, and ALLOW_CUSTOM_AUTH. Valid values include:
    ///
    /// * ALLOW_ADMIN_USER_PASSWORD_AUTH: Enable admin based user password authentication flow ADMIN_USER_PASSWORD_AUTH. This setting replaces the ADMIN_NO_SRP_AUTH setting. With this authentication flow, your app passes a user name and password to Amazon Cognito in the request, instead of using the Secure Remote Password (SRP) protocol to securely transmit the password.
    ///
    /// * ALLOW_CUSTOM_AUTH: Enable Lambda trigger based authentication.
    ///
    /// * ALLOW_USER_PASSWORD_AUTH: Enable user password-based authentication. In this flow, Amazon Cognito receives the password in the request instead of using the SRP protocol to verify passwords.
    ///
    /// * ALLOW_USER_SRP_AUTH: Enable SRP-based authentication.
    ///
    /// * ALLOW_REFRESH_TOKEN_AUTH: Enable authflow to refresh tokens.
    ///
    ///
    /// In some environments, you will see the values ADMIN_NO_SRP_AUTH, CUSTOM_AUTH_FLOW_ONLY, or USER_PASSWORD_AUTH. You can't assign these legacy ExplicitAuthFlows values to user pool clients at the same time as values that begin with ALLOW_, like ALLOW_USER_SRP_AUTH.
    public var explicitAuthFlows: [CognitoIdentityProviderClientTypes.ExplicitAuthFlowsType]?
    /// The ID token time limit. After this limit expires, your user can't use their ID token. To specify the time unit for IdTokenValidity as seconds, minutes, hours, or days, set a TokenValidityUnits value in your API request. For example, when you set IdTokenValidity as 10 and TokenValidityUnits as hours, your user can authenticate their session with their ID token for 10 hours. The default time unit for IdTokenValidity in an API request is hours. Valid range is displayed below in seconds. If you don't specify otherwise in the configuration of your app client, your ID tokens are valid for one hour.
    public var idTokenValidity: Swift.Int?
    /// A list of allowed logout URLs for the IdPs.
    public var logoutURLs: [Swift.String]?
    /// Errors and responses that you want Amazon Cognito APIs to return during authentication, account confirmation, and password recovery when the user doesn't exist in the user pool. When set to ENABLED and the user doesn't exist, authentication returns an error indicating either the username or password was incorrect. Account confirmation and password recovery return a response indicating a code was sent to a simulated destination. When set to LEGACY, those APIs return a UserNotFoundException exception if the user doesn't exist in the user pool. Valid values include:
    ///
    /// * ENABLED - This prevents user existence-related errors.
    ///
    /// * LEGACY - This represents the early behavior of Amazon Cognito where user existence related errors aren't prevented.
    ///
    ///
    /// Defaults to LEGACY when you don't provide a value.
    public var preventUserExistenceErrors: CognitoIdentityProviderClientTypes.PreventUserExistenceErrorTypes?
    /// The list of user attributes that you want your app client to have read access to. After your user authenticates in your app, their access token authorizes them to read their own attribute value for any attribute in this list. An example of this kind of activity is when your user selects a link to view their profile information. Your app makes a [GetUser](https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_GetUser.html) API request to retrieve and display your user's profile data. When you don't specify the ReadAttributes for your app client, your app can read the values of email_verified, phone_number_verified, and the Standard attributes of your user pool. When your user pool app client has read access to these default attributes, ReadAttributes doesn't return any information. Amazon Cognito only populates ReadAttributes in the API response if you have specified your own custom set of read attributes.
    public var readAttributes: [Swift.String]?
    /// The refresh token time limit. After this limit expires, your user can't use their refresh token. To specify the time unit for RefreshTokenValidity as seconds, minutes, hours, or days, set a TokenValidityUnits value in your API request. For example, when you set RefreshTokenValidity as 10 and TokenValidityUnits as days, your user can refresh their session and retrieve new access and ID tokens for 10 days. The default time unit for RefreshTokenValidity in an API request is days. You can't set RefreshTokenValidity to 0. If you do, Amazon Cognito overrides the value with the default value of 30 days. Valid range is displayed below in seconds. If you don't specify otherwise in the configuration of your app client, your refresh tokens are valid for 30 days.
    public var refreshTokenValidity: Swift.Int?
    /// A list of provider names for the IdPs that this client supports. The following are supported: COGNITO, Facebook, Google, SignInWithApple, LoginWithAmazon, and the names of your own SAML and OIDC providers.
    public var supportedIdentityProviders: [Swift.String]?
    /// The time units you use when you set the duration of ID, access, and refresh tokens. The default unit for RefreshToken is days, and the default for ID and access tokens is hours.
    public var tokenValidityUnits: CognitoIdentityProviderClientTypes.TokenValidityUnitsType?
    /// The user pool ID for the user pool where you want to update the user pool client.
    /// This member is required.
    public var userPoolId: Swift.String?
    /// The list of user attributes that you want your app client to have write access to. After your user authenticates in your app, their access token authorizes them to set or modify their own attribute value for any attribute in this list. An example of this kind of activity is when you present your user with a form to update their profile information and they change their last name. Your app then makes an [UpdateUserAttributes](https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_UpdateUserAttributes.html) API request and sets family_name to the new value. When you don't specify the WriteAttributes for your app client, your app can write the values of the Standard attributes of your user pool. When your user pool has write access to these default attributes, WriteAttributes doesn't return any information. Amazon Cognito only populates WriteAttributes in the API response if you have specified your own custom set of write attributes. If your app client allows users to sign in through an IdP, this array must include all attributes that you have mapped to IdP attributes. Amazon Cognito updates mapped attributes when users sign in to your application through an IdP. If your app client does not have write access to a mapped attribute, Amazon Cognito throws an error when it tries to update the attribute. For more information, see [Specifying IdP Attribute Mappings for Your user pool](https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-pools-specifying-attribute-mapping.html).
    public var writeAttributes: [Swift.String]?

    public init(
        accessTokenValidity: Swift.Int? = nil,
        allowedOAuthFlows: [CognitoIdentityProviderClientTypes.OAuthFlowType]? = nil,
        allowedOAuthFlowsUserPoolClient: Swift.Bool? = false,
        allowedOAuthScopes: [Swift.String]? = nil,
        analyticsConfiguration: CognitoIdentityProviderClientTypes.AnalyticsConfigurationType? = nil,
        authSessionValidity: Swift.Int? = nil,
        callbackURLs: [Swift.String]? = nil,
        clientId: Swift.String? = nil,
        clientName: Swift.String? = nil,
        defaultRedirectURI: Swift.String? = nil,
        enablePropagateAdditionalUserContextData: Swift.Bool? = nil,
        enableTokenRevocation: Swift.Bool? = nil,
        explicitAuthFlows: [CognitoIdentityProviderClientTypes.ExplicitAuthFlowsType]? = nil,
        idTokenValidity: Swift.Int? = nil,
        logoutURLs: [Swift.String]? = nil,
        preventUserExistenceErrors: CognitoIdentityProviderClientTypes.PreventUserExistenceErrorTypes? = nil,
        readAttributes: [Swift.String]? = nil,
        refreshTokenValidity: Swift.Int? = 0,
        supportedIdentityProviders: [Swift.String]? = nil,
        tokenValidityUnits: CognitoIdentityProviderClientTypes.TokenValidityUnitsType? = nil,
        userPoolId: Swift.String? = nil,
        writeAttributes: [Swift.String]? = nil
    )
    {
        self.accessTokenValidity = accessTokenValidity
        self.allowedOAuthFlows = allowedOAuthFlows
        self.allowedOAuthFlowsUserPoolClient = allowedOAuthFlowsUserPoolClient
        self.allowedOAuthScopes = allowedOAuthScopes
        self.analyticsConfiguration = analyticsConfiguration
        self.authSessionValidity = authSessionValidity
        self.callbackURLs = callbackURLs
        self.clientId = clientId
        self.clientName = clientName
        self.defaultRedirectURI = defaultRedirectURI
        self.enablePropagateAdditionalUserContextData = enablePropagateAdditionalUserContextData
        self.enableTokenRevocation = enableTokenRevocation
        self.explicitAuthFlows = explicitAuthFlows
        self.idTokenValidity = idTokenValidity
        self.logoutURLs = logoutURLs
        self.preventUserExistenceErrors = preventUserExistenceErrors
        self.readAttributes = readAttributes
        self.refreshTokenValidity = refreshTokenValidity
        self.supportedIdentityProviders = supportedIdentityProviders
        self.tokenValidityUnits = tokenValidityUnits
        self.userPoolId = userPoolId
        self.writeAttributes = writeAttributes
    }
}

extension UpdateUserPoolClientInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UpdateUserPoolClientInput(accessTokenValidity: \(Swift.String(describing: accessTokenValidity)), allowedOAuthFlows: \(Swift.String(describing: allowedOAuthFlows)), allowedOAuthFlowsUserPoolClient: \(Swift.String(describing: allowedOAuthFlowsUserPoolClient)), allowedOAuthScopes: \(Swift.String(describing: allowedOAuthScopes)), analyticsConfiguration: \(Swift.String(describing: analyticsConfiguration)), authSessionValidity: \(Swift.String(describing: authSessionValidity)), callbackURLs: \(Swift.String(describing: callbackURLs)), clientName: \(Swift.String(describing: clientName)), defaultRedirectURI: \(Swift.String(describing: defaultRedirectURI)), enablePropagateAdditionalUserContextData: \(Swift.String(describing: enablePropagateAdditionalUserContextData)), enableTokenRevocation: \(Swift.String(describing: enableTokenRevocation)), explicitAuthFlows: \(Swift.String(describing: explicitAuthFlows)), idTokenValidity: \(Swift.String(describing: idTokenValidity)), logoutURLs: \(Swift.String(describing: logoutURLs)), preventUserExistenceErrors: \(Swift.String(describing: preventUserExistenceErrors)), readAttributes: \(Swift.String(describing: readAttributes)), refreshTokenValidity: \(Swift.String(describing: refreshTokenValidity)), supportedIdentityProviders: \(Swift.String(describing: supportedIdentityProviders)), tokenValidityUnits: \(Swift.String(describing: tokenValidityUnits)), userPoolId: \(Swift.String(describing: userPoolId)), writeAttributes: \(Swift.String(describing: writeAttributes)), clientId: \"CONTENT_REDACTED\")"}
}

/// Represents the response from the server to the request to update the user pool client.
public struct UpdateUserPoolClientOutput: Swift.Sendable {
    /// The user pool client value from the response from the server when you request to update the user pool client.
    public var userPoolClient: CognitoIdentityProviderClientTypes.UserPoolClientType?

    public init(
        userPoolClient: CognitoIdentityProviderClientTypes.UserPoolClientType? = nil
    )
    {
        self.userPoolClient = userPoolClient
    }
}

/// The UpdateUserPoolDomain request input.
public struct UpdateUserPoolDomainInput: Swift.Sendable {
    /// The configuration for a custom domain that hosts the sign-up and sign-in pages for your application. Use this object to specify an SSL certificate that is managed by ACM.
    /// This member is required.
    public var customDomainConfig: CognitoIdentityProviderClientTypes.CustomDomainConfigType?
    /// The domain name for the custom domain that hosts the sign-up and sign-in pages for your application. One example might be auth.example.com. This string can include only lowercase letters, numbers, and hyphens. Don't use a hyphen for the first or last character. Use periods to separate subdomain names.
    /// This member is required.
    public var domain: Swift.String?
    /// The ID of the user pool that is associated with the custom domain whose certificate you're updating.
    /// This member is required.
    public var userPoolId: Swift.String?

    public init(
        customDomainConfig: CognitoIdentityProviderClientTypes.CustomDomainConfigType? = nil,
        domain: Swift.String? = nil,
        userPoolId: Swift.String? = nil
    )
    {
        self.customDomainConfig = customDomainConfig
        self.domain = domain
        self.userPoolId = userPoolId
    }
}

/// The UpdateUserPoolDomain response output.
public struct UpdateUserPoolDomainOutput: Swift.Sendable {
    /// The Amazon CloudFront endpoint that Amazon Cognito set up when you added the custom domain to your user pool.
    public var cloudFrontDomain: Swift.String?

    public init(
        cloudFrontDomain: Swift.String? = nil
    )
    {
        self.cloudFrontDomain = cloudFrontDomain
    }
}

/// This exception is thrown when there is a code mismatch and the service fails to configure the software token TOTP multi-factor authentication (MFA).
public struct EnableSoftwareTokenMFAException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "EnableSoftwareTokenMFAException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

public struct VerifySoftwareTokenInput: Swift.Sendable {
    /// A valid access token that Amazon Cognito issued to the user whose software token you want to verify.
    public var accessToken: Swift.String?
    /// The friendly device name.
    public var friendlyDeviceName: Swift.String?
    /// The session that should be passed both ways in challenge-response calls to the service.
    public var session: Swift.String?
    /// The one- time password computed using the secret code returned by [AssociateSoftwareToken](https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_AssociateSoftwareToken.html).
    /// This member is required.
    public var userCode: Swift.String?

    public init(
        accessToken: Swift.String? = nil,
        friendlyDeviceName: Swift.String? = nil,
        session: Swift.String? = nil,
        userCode: Swift.String? = nil
    )
    {
        self.accessToken = accessToken
        self.friendlyDeviceName = friendlyDeviceName
        self.session = session
        self.userCode = userCode
    }
}

extension VerifySoftwareTokenInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "VerifySoftwareTokenInput(friendlyDeviceName: \(Swift.String(describing: friendlyDeviceName)), accessToken: \"CONTENT_REDACTED\", session: \"CONTENT_REDACTED\", userCode: \"CONTENT_REDACTED\")"}
}

extension CognitoIdentityProviderClientTypes {

    public enum VerifySoftwareTokenResponseType: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case error
        case success
        case sdkUnknown(Swift.String)

        public static var allCases: [VerifySoftwareTokenResponseType] {
            return [
                .error,
                .success
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .error: return "ERROR"
            case .success: return "SUCCESS"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

public struct VerifySoftwareTokenOutput: Swift.Sendable {
    /// The session that should be passed both ways in challenge-response calls to the service.
    public var session: Swift.String?
    /// The status of the verify software token.
    public var status: CognitoIdentityProviderClientTypes.VerifySoftwareTokenResponseType?

    public init(
        session: Swift.String? = nil,
        status: CognitoIdentityProviderClientTypes.VerifySoftwareTokenResponseType? = nil
    )
    {
        self.session = session
        self.status = status
    }
}

extension VerifySoftwareTokenOutput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "VerifySoftwareTokenOutput(status: \(Swift.String(describing: status)), session: \"CONTENT_REDACTED\")"}
}

/// Represents the request to verify user attributes.
public struct VerifyUserAttributeInput: Swift.Sendable {
    /// A valid access token that Amazon Cognito issued to the user whose user attributes you want to verify.
    /// This member is required.
    public var accessToken: Swift.String?
    /// The attribute name in the request to verify user attributes.
    /// This member is required.
    public var attributeName: Swift.String?
    /// The verification code in the request to verify user attributes.
    /// This member is required.
    public var code: Swift.String?

    public init(
        accessToken: Swift.String? = nil,
        attributeName: Swift.String? = nil,
        code: Swift.String? = nil
    )
    {
        self.accessToken = accessToken
        self.attributeName = attributeName
        self.code = code
    }
}

extension VerifyUserAttributeInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "VerifyUserAttributeInput(attributeName: \(Swift.String(describing: attributeName)), code: \(Swift.String(describing: code)), accessToken: \"CONTENT_REDACTED\")"}
}

/// A container representing the response from the server from the request to verify user attributes.
public struct VerifyUserAttributeOutput: Swift.Sendable {

    public init() { }
}

extension AddCustomAttributesInput {

    static func urlPathProvider(_ value: AddCustomAttributesInput) -> Swift.String? {
        return "/"
    }
}

extension AdminAddUserToGroupInput {

    static func urlPathProvider(_ value: AdminAddUserToGroupInput) -> Swift.String? {
        return "/"
    }
}

extension AdminConfirmSignUpInput {

    static func urlPathProvider(_ value: AdminConfirmSignUpInput) -> Swift.String? {
        return "/"
    }
}

extension AdminCreateUserInput {

    static func urlPathProvider(_ value: AdminCreateUserInput) -> Swift.String? {
        return "/"
    }
}

extension AdminDeleteUserInput {

    static func urlPathProvider(_ value: AdminDeleteUserInput) -> Swift.String? {
        return "/"
    }
}

extension AdminDeleteUserAttributesInput {

    static func urlPathProvider(_ value: AdminDeleteUserAttributesInput) -> Swift.String? {
        return "/"
    }
}

extension AdminDisableProviderForUserInput {

    static func urlPathProvider(_ value: AdminDisableProviderForUserInput) -> Swift.String? {
        return "/"
    }
}

extension AdminDisableUserInput {

    static func urlPathProvider(_ value: AdminDisableUserInput) -> Swift.String? {
        return "/"
    }
}

extension AdminEnableUserInput {

    static func urlPathProvider(_ value: AdminEnableUserInput) -> Swift.String? {
        return "/"
    }
}

extension AdminForgetDeviceInput {

    static func urlPathProvider(_ value: AdminForgetDeviceInput) -> Swift.String? {
        return "/"
    }
}

extension AdminGetDeviceInput {

    static func urlPathProvider(_ value: AdminGetDeviceInput) -> Swift.String? {
        return "/"
    }
}

extension AdminGetUserInput {

    static func urlPathProvider(_ value: AdminGetUserInput) -> Swift.String? {
        return "/"
    }
}

extension AdminInitiateAuthInput {

    static func urlPathProvider(_ value: AdminInitiateAuthInput) -> Swift.String? {
        return "/"
    }
}

extension AdminLinkProviderForUserInput {

    static func urlPathProvider(_ value: AdminLinkProviderForUserInput) -> Swift.String? {
        return "/"
    }
}

extension AdminListDevicesInput {

    static func urlPathProvider(_ value: AdminListDevicesInput) -> Swift.String? {
        return "/"
    }
}

extension AdminListGroupsForUserInput {

    static func urlPathProvider(_ value: AdminListGroupsForUserInput) -> Swift.String? {
        return "/"
    }
}

extension AdminListUserAuthEventsInput {

    static func urlPathProvider(_ value: AdminListUserAuthEventsInput) -> Swift.String? {
        return "/"
    }
}

extension AdminRemoveUserFromGroupInput {

    static func urlPathProvider(_ value: AdminRemoveUserFromGroupInput) -> Swift.String? {
        return "/"
    }
}

extension AdminResetUserPasswordInput {

    static func urlPathProvider(_ value: AdminResetUserPasswordInput) -> Swift.String? {
        return "/"
    }
}

extension AdminRespondToAuthChallengeInput {

    static func urlPathProvider(_ value: AdminRespondToAuthChallengeInput) -> Swift.String? {
        return "/"
    }
}

extension AdminSetUserMFAPreferenceInput {

    static func urlPathProvider(_ value: AdminSetUserMFAPreferenceInput) -> Swift.String? {
        return "/"
    }
}

extension AdminSetUserPasswordInput {

    static func urlPathProvider(_ value: AdminSetUserPasswordInput) -> Swift.String? {
        return "/"
    }
}

extension AdminSetUserSettingsInput {

    static func urlPathProvider(_ value: AdminSetUserSettingsInput) -> Swift.String? {
        return "/"
    }
}

extension AdminUpdateAuthEventFeedbackInput {

    static func urlPathProvider(_ value: AdminUpdateAuthEventFeedbackInput) -> Swift.String? {
        return "/"
    }
}

extension AdminUpdateDeviceStatusInput {

    static func urlPathProvider(_ value: AdminUpdateDeviceStatusInput) -> Swift.String? {
        return "/"
    }
}

extension AdminUpdateUserAttributesInput {

    static func urlPathProvider(_ value: AdminUpdateUserAttributesInput) -> Swift.String? {
        return "/"
    }
}

extension AdminUserGlobalSignOutInput {

    static func urlPathProvider(_ value: AdminUserGlobalSignOutInput) -> Swift.String? {
        return "/"
    }
}

extension AssociateSoftwareTokenInput {

    static func urlPathProvider(_ value: AssociateSoftwareTokenInput) -> Swift.String? {
        return "/"
    }
}

extension ChangePasswordInput {

    static func urlPathProvider(_ value: ChangePasswordInput) -> Swift.String? {
        return "/"
    }
}

extension ConfirmDeviceInput {

    static func urlPathProvider(_ value: ConfirmDeviceInput) -> Swift.String? {
        return "/"
    }
}

extension ConfirmForgotPasswordInput {

    static func urlPathProvider(_ value: ConfirmForgotPasswordInput) -> Swift.String? {
        return "/"
    }
}

extension ConfirmSignUpInput {

    static func urlPathProvider(_ value: ConfirmSignUpInput) -> Swift.String? {
        return "/"
    }
}

extension CreateGroupInput {

    static func urlPathProvider(_ value: CreateGroupInput) -> Swift.String? {
        return "/"
    }
}

extension CreateIdentityProviderInput {

    static func urlPathProvider(_ value: CreateIdentityProviderInput) -> Swift.String? {
        return "/"
    }
}

extension CreateResourceServerInput {

    static func urlPathProvider(_ value: CreateResourceServerInput) -> Swift.String? {
        return "/"
    }
}

extension CreateUserImportJobInput {

    static func urlPathProvider(_ value: CreateUserImportJobInput) -> Swift.String? {
        return "/"
    }
}

extension CreateUserPoolInput {

    static func urlPathProvider(_ value: CreateUserPoolInput) -> Swift.String? {
        return "/"
    }
}

extension CreateUserPoolClientInput {

    static func urlPathProvider(_ value: CreateUserPoolClientInput) -> Swift.String? {
        return "/"
    }
}

extension CreateUserPoolDomainInput {

    static func urlPathProvider(_ value: CreateUserPoolDomainInput) -> Swift.String? {
        return "/"
    }
}

extension DeleteGroupInput {

    static func urlPathProvider(_ value: DeleteGroupInput) -> Swift.String? {
        return "/"
    }
}

extension DeleteIdentityProviderInput {

    static func urlPathProvider(_ value: DeleteIdentityProviderInput) -> Swift.String? {
        return "/"
    }
}

extension DeleteResourceServerInput {

    static func urlPathProvider(_ value: DeleteResourceServerInput) -> Swift.String? {
        return "/"
    }
}

extension DeleteUserInput {

    static func urlPathProvider(_ value: DeleteUserInput) -> Swift.String? {
        return "/"
    }
}

extension DeleteUserAttributesInput {

    static func urlPathProvider(_ value: DeleteUserAttributesInput) -> Swift.String? {
        return "/"
    }
}

extension DeleteUserPoolInput {

    static func urlPathProvider(_ value: DeleteUserPoolInput) -> Swift.String? {
        return "/"
    }
}

extension DeleteUserPoolClientInput {

    static func urlPathProvider(_ value: DeleteUserPoolClientInput) -> Swift.String? {
        return "/"
    }
}

extension DeleteUserPoolDomainInput {

    static func urlPathProvider(_ value: DeleteUserPoolDomainInput) -> Swift.String? {
        return "/"
    }
}

extension DescribeIdentityProviderInput {

    static func urlPathProvider(_ value: DescribeIdentityProviderInput) -> Swift.String? {
        return "/"
    }
}

extension DescribeResourceServerInput {

    static func urlPathProvider(_ value: DescribeResourceServerInput) -> Swift.String? {
        return "/"
    }
}

extension DescribeRiskConfigurationInput {

    static func urlPathProvider(_ value: DescribeRiskConfigurationInput) -> Swift.String? {
        return "/"
    }
}

extension DescribeUserImportJobInput {

    static func urlPathProvider(_ value: DescribeUserImportJobInput) -> Swift.String? {
        return "/"
    }
}

extension DescribeUserPoolInput {

    static func urlPathProvider(_ value: DescribeUserPoolInput) -> Swift.String? {
        return "/"
    }
}

extension DescribeUserPoolClientInput {

    static func urlPathProvider(_ value: DescribeUserPoolClientInput) -> Swift.String? {
        return "/"
    }
}

extension DescribeUserPoolDomainInput {

    static func urlPathProvider(_ value: DescribeUserPoolDomainInput) -> Swift.String? {
        return "/"
    }
}

extension ForgetDeviceInput {

    static func urlPathProvider(_ value: ForgetDeviceInput) -> Swift.String? {
        return "/"
    }
}

extension ForgotPasswordInput {

    static func urlPathProvider(_ value: ForgotPasswordInput) -> Swift.String? {
        return "/"
    }
}

extension GetCSVHeaderInput {

    static func urlPathProvider(_ value: GetCSVHeaderInput) -> Swift.String? {
        return "/"
    }
}

extension GetDeviceInput {

    static func urlPathProvider(_ value: GetDeviceInput) -> Swift.String? {
        return "/"
    }
}

extension GetGroupInput {

    static func urlPathProvider(_ value: GetGroupInput) -> Swift.String? {
        return "/"
    }
}

extension GetIdentityProviderByIdentifierInput {

    static func urlPathProvider(_ value: GetIdentityProviderByIdentifierInput) -> Swift.String? {
        return "/"
    }
}

extension GetLogDeliveryConfigurationInput {

    static func urlPathProvider(_ value: GetLogDeliveryConfigurationInput) -> Swift.String? {
        return "/"
    }
}

extension GetSigningCertificateInput {

    static func urlPathProvider(_ value: GetSigningCertificateInput) -> Swift.String? {
        return "/"
    }
}

extension GetUICustomizationInput {

    static func urlPathProvider(_ value: GetUICustomizationInput) -> Swift.String? {
        return "/"
    }
}

extension GetUserInput {

    static func urlPathProvider(_ value: GetUserInput) -> Swift.String? {
        return "/"
    }
}

extension GetUserAttributeVerificationCodeInput {

    static func urlPathProvider(_ value: GetUserAttributeVerificationCodeInput) -> Swift.String? {
        return "/"
    }
}

extension GetUserPoolMfaConfigInput {

    static func urlPathProvider(_ value: GetUserPoolMfaConfigInput) -> Swift.String? {
        return "/"
    }
}

extension GlobalSignOutInput {

    static func urlPathProvider(_ value: GlobalSignOutInput) -> Swift.String? {
        return "/"
    }
}

extension InitiateAuthInput {

    static func urlPathProvider(_ value: InitiateAuthInput) -> Swift.String? {
        return "/"
    }
}

extension ListDevicesInput {

    static func urlPathProvider(_ value: ListDevicesInput) -> Swift.String? {
        return "/"
    }
}

extension ListGroupsInput {

    static func urlPathProvider(_ value: ListGroupsInput) -> Swift.String? {
        return "/"
    }
}

extension ListIdentityProvidersInput {

    static func urlPathProvider(_ value: ListIdentityProvidersInput) -> Swift.String? {
        return "/"
    }
}

extension ListResourceServersInput {

    static func urlPathProvider(_ value: ListResourceServersInput) -> Swift.String? {
        return "/"
    }
}

extension ListTagsForResourceInput {

    static func urlPathProvider(_ value: ListTagsForResourceInput) -> Swift.String? {
        return "/"
    }
}

extension ListUserImportJobsInput {

    static func urlPathProvider(_ value: ListUserImportJobsInput) -> Swift.String? {
        return "/"
    }
}

extension ListUserPoolClientsInput {

    static func urlPathProvider(_ value: ListUserPoolClientsInput) -> Swift.String? {
        return "/"
    }
}

extension ListUserPoolsInput {

    static func urlPathProvider(_ value: ListUserPoolsInput) -> Swift.String? {
        return "/"
    }
}

extension ListUsersInput {

    static func urlPathProvider(_ value: ListUsersInput) -> Swift.String? {
        return "/"
    }
}

extension ListUsersInGroupInput {

    static func urlPathProvider(_ value: ListUsersInGroupInput) -> Swift.String? {
        return "/"
    }
}

extension ResendConfirmationCodeInput {

    static func urlPathProvider(_ value: ResendConfirmationCodeInput) -> Swift.String? {
        return "/"
    }
}

extension RespondToAuthChallengeInput {

    static func urlPathProvider(_ value: RespondToAuthChallengeInput) -> Swift.String? {
        return "/"
    }
}

extension RevokeTokenInput {

    static func urlPathProvider(_ value: RevokeTokenInput) -> Swift.String? {
        return "/"
    }
}

extension SetLogDeliveryConfigurationInput {

    static func urlPathProvider(_ value: SetLogDeliveryConfigurationInput) -> Swift.String? {
        return "/"
    }
}

extension SetRiskConfigurationInput {

    static func urlPathProvider(_ value: SetRiskConfigurationInput) -> Swift.String? {
        return "/"
    }
}

extension SetUICustomizationInput {

    static func urlPathProvider(_ value: SetUICustomizationInput) -> Swift.String? {
        return "/"
    }
}

extension SetUserMFAPreferenceInput {

    static func urlPathProvider(_ value: SetUserMFAPreferenceInput) -> Swift.String? {
        return "/"
    }
}

extension SetUserPoolMfaConfigInput {

    static func urlPathProvider(_ value: SetUserPoolMfaConfigInput) -> Swift.String? {
        return "/"
    }
}

extension SetUserSettingsInput {

    static func urlPathProvider(_ value: SetUserSettingsInput) -> Swift.String? {
        return "/"
    }
}

extension SignUpInput {

    static func urlPathProvider(_ value: SignUpInput) -> Swift.String? {
        return "/"
    }
}

extension StartUserImportJobInput {

    static func urlPathProvider(_ value: StartUserImportJobInput) -> Swift.String? {
        return "/"
    }
}

extension StopUserImportJobInput {

    static func urlPathProvider(_ value: StopUserImportJobInput) -> Swift.String? {
        return "/"
    }
}

extension TagResourceInput {

    static func urlPathProvider(_ value: TagResourceInput) -> Swift.String? {
        return "/"
    }
}

extension UntagResourceInput {

    static func urlPathProvider(_ value: UntagResourceInput) -> Swift.String? {
        return "/"
    }
}

extension UpdateAuthEventFeedbackInput {

    static func urlPathProvider(_ value: UpdateAuthEventFeedbackInput) -> Swift.String? {
        return "/"
    }
}

extension UpdateDeviceStatusInput {

    static func urlPathProvider(_ value: UpdateDeviceStatusInput) -> Swift.String? {
        return "/"
    }
}

extension UpdateGroupInput {

    static func urlPathProvider(_ value: UpdateGroupInput) -> Swift.String? {
        return "/"
    }
}

extension UpdateIdentityProviderInput {

    static func urlPathProvider(_ value: UpdateIdentityProviderInput) -> Swift.String? {
        return "/"
    }
}

extension UpdateResourceServerInput {

    static func urlPathProvider(_ value: UpdateResourceServerInput) -> Swift.String? {
        return "/"
    }
}

extension UpdateUserAttributesInput {

    static func urlPathProvider(_ value: UpdateUserAttributesInput) -> Swift.String? {
        return "/"
    }
}

extension UpdateUserPoolInput {

    static func urlPathProvider(_ value: UpdateUserPoolInput) -> Swift.String? {
        return "/"
    }
}

extension UpdateUserPoolClientInput {

    static func urlPathProvider(_ value: UpdateUserPoolClientInput) -> Swift.String? {
        return "/"
    }
}

extension UpdateUserPoolDomainInput {

    static func urlPathProvider(_ value: UpdateUserPoolDomainInput) -> Swift.String? {
        return "/"
    }
}

extension VerifySoftwareTokenInput {

    static func urlPathProvider(_ value: VerifySoftwareTokenInput) -> Swift.String? {
        return "/"
    }
}

extension VerifyUserAttributeInput {

    static func urlPathProvider(_ value: VerifyUserAttributeInput) -> Swift.String? {
        return "/"
    }
}

extension AddCustomAttributesInput {

    static func write(value: AddCustomAttributesInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["CustomAttributes"].writeList(value.customAttributes, memberWritingClosure: CognitoIdentityProviderClientTypes.SchemaAttributeType.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["UserPoolId"].write(value.userPoolId)
    }
}

extension AdminAddUserToGroupInput {

    static func write(value: AdminAddUserToGroupInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["GroupName"].write(value.groupName)
        try writer["UserPoolId"].write(value.userPoolId)
        try writer["Username"].write(value.username)
    }
}

extension AdminConfirmSignUpInput {

    static func write(value: AdminConfirmSignUpInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ClientMetadata"].writeMap(value.clientMetadata, valueWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        try writer["UserPoolId"].write(value.userPoolId)
        try writer["Username"].write(value.username)
    }
}

extension AdminCreateUserInput {

    static func write(value: AdminCreateUserInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ClientMetadata"].writeMap(value.clientMetadata, valueWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        try writer["DesiredDeliveryMediums"].writeList(value.desiredDeliveryMediums, memberWritingClosure: SmithyReadWrite.WritingClosureBox<CognitoIdentityProviderClientTypes.DeliveryMediumType>().write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["ForceAliasCreation"].write(value.forceAliasCreation)
        try writer["MessageAction"].write(value.messageAction)
        try writer["TemporaryPassword"].write(value.temporaryPassword)
        try writer["UserAttributes"].writeList(value.userAttributes, memberWritingClosure: CognitoIdentityProviderClientTypes.AttributeType.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["UserPoolId"].write(value.userPoolId)
        try writer["Username"].write(value.username)
        try writer["ValidationData"].writeList(value.validationData, memberWritingClosure: CognitoIdentityProviderClientTypes.AttributeType.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension AdminDeleteUserInput {

    static func write(value: AdminDeleteUserInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["UserPoolId"].write(value.userPoolId)
        try writer["Username"].write(value.username)
    }
}

extension AdminDeleteUserAttributesInput {

    static func write(value: AdminDeleteUserAttributesInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["UserAttributeNames"].writeList(value.userAttributeNames, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["UserPoolId"].write(value.userPoolId)
        try writer["Username"].write(value.username)
    }
}

extension AdminDisableProviderForUserInput {

    static func write(value: AdminDisableProviderForUserInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["User"].write(value.user, with: CognitoIdentityProviderClientTypes.ProviderUserIdentifierType.write(value:to:))
        try writer["UserPoolId"].write(value.userPoolId)
    }
}

extension AdminDisableUserInput {

    static func write(value: AdminDisableUserInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["UserPoolId"].write(value.userPoolId)
        try writer["Username"].write(value.username)
    }
}

extension AdminEnableUserInput {

    static func write(value: AdminEnableUserInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["UserPoolId"].write(value.userPoolId)
        try writer["Username"].write(value.username)
    }
}

extension AdminForgetDeviceInput {

    static func write(value: AdminForgetDeviceInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["DeviceKey"].write(value.deviceKey)
        try writer["UserPoolId"].write(value.userPoolId)
        try writer["Username"].write(value.username)
    }
}

extension AdminGetDeviceInput {

    static func write(value: AdminGetDeviceInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["DeviceKey"].write(value.deviceKey)
        try writer["UserPoolId"].write(value.userPoolId)
        try writer["Username"].write(value.username)
    }
}

extension AdminGetUserInput {

    static func write(value: AdminGetUserInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["UserPoolId"].write(value.userPoolId)
        try writer["Username"].write(value.username)
    }
}

extension AdminInitiateAuthInput {

    static func write(value: AdminInitiateAuthInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["AnalyticsMetadata"].write(value.analyticsMetadata, with: CognitoIdentityProviderClientTypes.AnalyticsMetadataType.write(value:to:))
        try writer["AuthFlow"].write(value.authFlow)
        try writer["AuthParameters"].writeMap(value.authParameters, valueWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        try writer["ClientId"].write(value.clientId)
        try writer["ClientMetadata"].writeMap(value.clientMetadata, valueWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        try writer["ContextData"].write(value.contextData, with: CognitoIdentityProviderClientTypes.ContextDataType.write(value:to:))
        try writer["UserPoolId"].write(value.userPoolId)
    }
}

extension AdminLinkProviderForUserInput {

    static func write(value: AdminLinkProviderForUserInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["DestinationUser"].write(value.destinationUser, with: CognitoIdentityProviderClientTypes.ProviderUserIdentifierType.write(value:to:))
        try writer["SourceUser"].write(value.sourceUser, with: CognitoIdentityProviderClientTypes.ProviderUserIdentifierType.write(value:to:))
        try writer["UserPoolId"].write(value.userPoolId)
    }
}

extension AdminListDevicesInput {

    static func write(value: AdminListDevicesInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Limit"].write(value.limit)
        try writer["PaginationToken"].write(value.paginationToken)
        try writer["UserPoolId"].write(value.userPoolId)
        try writer["Username"].write(value.username)
    }
}

extension AdminListGroupsForUserInput {

    static func write(value: AdminListGroupsForUserInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Limit"].write(value.limit)
        try writer["NextToken"].write(value.nextToken)
        try writer["UserPoolId"].write(value.userPoolId)
        try writer["Username"].write(value.username)
    }
}

extension AdminListUserAuthEventsInput {

    static func write(value: AdminListUserAuthEventsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["MaxResults"].write(value.maxResults)
        try writer["NextToken"].write(value.nextToken)
        try writer["UserPoolId"].write(value.userPoolId)
        try writer["Username"].write(value.username)
    }
}

extension AdminRemoveUserFromGroupInput {

    static func write(value: AdminRemoveUserFromGroupInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["GroupName"].write(value.groupName)
        try writer["UserPoolId"].write(value.userPoolId)
        try writer["Username"].write(value.username)
    }
}

extension AdminResetUserPasswordInput {

    static func write(value: AdminResetUserPasswordInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ClientMetadata"].writeMap(value.clientMetadata, valueWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        try writer["UserPoolId"].write(value.userPoolId)
        try writer["Username"].write(value.username)
    }
}

extension AdminRespondToAuthChallengeInput {

    static func write(value: AdminRespondToAuthChallengeInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["AnalyticsMetadata"].write(value.analyticsMetadata, with: CognitoIdentityProviderClientTypes.AnalyticsMetadataType.write(value:to:))
        try writer["ChallengeName"].write(value.challengeName)
        try writer["ChallengeResponses"].writeMap(value.challengeResponses, valueWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        try writer["ClientId"].write(value.clientId)
        try writer["ClientMetadata"].writeMap(value.clientMetadata, valueWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        try writer["ContextData"].write(value.contextData, with: CognitoIdentityProviderClientTypes.ContextDataType.write(value:to:))
        try writer["Session"].write(value.session)
        try writer["UserPoolId"].write(value.userPoolId)
    }
}

extension AdminSetUserMFAPreferenceInput {

    static func write(value: AdminSetUserMFAPreferenceInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["EmailMfaSettings"].write(value.emailMfaSettings, with: CognitoIdentityProviderClientTypes.EmailMfaSettingsType.write(value:to:))
        try writer["SMSMfaSettings"].write(value.smsMfaSettings, with: CognitoIdentityProviderClientTypes.SMSMfaSettingsType.write(value:to:))
        try writer["SoftwareTokenMfaSettings"].write(value.softwareTokenMfaSettings, with: CognitoIdentityProviderClientTypes.SoftwareTokenMfaSettingsType.write(value:to:))
        try writer["UserPoolId"].write(value.userPoolId)
        try writer["Username"].write(value.username)
    }
}

extension AdminSetUserPasswordInput {

    static func write(value: AdminSetUserPasswordInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Password"].write(value.password)
        try writer["Permanent"].write(value.permanent)
        try writer["UserPoolId"].write(value.userPoolId)
        try writer["Username"].write(value.username)
    }
}

extension AdminSetUserSettingsInput {

    static func write(value: AdminSetUserSettingsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["MFAOptions"].writeList(value.mfaOptions, memberWritingClosure: CognitoIdentityProviderClientTypes.MFAOptionType.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["UserPoolId"].write(value.userPoolId)
        try writer["Username"].write(value.username)
    }
}

extension AdminUpdateAuthEventFeedbackInput {

    static func write(value: AdminUpdateAuthEventFeedbackInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["EventId"].write(value.eventId)
        try writer["FeedbackValue"].write(value.feedbackValue)
        try writer["UserPoolId"].write(value.userPoolId)
        try writer["Username"].write(value.username)
    }
}

extension AdminUpdateDeviceStatusInput {

    static func write(value: AdminUpdateDeviceStatusInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["DeviceKey"].write(value.deviceKey)
        try writer["DeviceRememberedStatus"].write(value.deviceRememberedStatus)
        try writer["UserPoolId"].write(value.userPoolId)
        try writer["Username"].write(value.username)
    }
}

extension AdminUpdateUserAttributesInput {

    static func write(value: AdminUpdateUserAttributesInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ClientMetadata"].writeMap(value.clientMetadata, valueWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        try writer["UserAttributes"].writeList(value.userAttributes, memberWritingClosure: CognitoIdentityProviderClientTypes.AttributeType.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["UserPoolId"].write(value.userPoolId)
        try writer["Username"].write(value.username)
    }
}

extension AdminUserGlobalSignOutInput {

    static func write(value: AdminUserGlobalSignOutInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["UserPoolId"].write(value.userPoolId)
        try writer["Username"].write(value.username)
    }
}

extension AssociateSoftwareTokenInput {

    static func write(value: AssociateSoftwareTokenInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["AccessToken"].write(value.accessToken)
        try writer["Session"].write(value.session)
    }
}

extension ChangePasswordInput {

    static func write(value: ChangePasswordInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["AccessToken"].write(value.accessToken)
        try writer["PreviousPassword"].write(value.previousPassword)
        try writer["ProposedPassword"].write(value.proposedPassword)
    }
}

extension ConfirmDeviceInput {

    static func write(value: ConfirmDeviceInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["AccessToken"].write(value.accessToken)
        try writer["DeviceKey"].write(value.deviceKey)
        try writer["DeviceName"].write(value.deviceName)
        try writer["DeviceSecretVerifierConfig"].write(value.deviceSecretVerifierConfig, with: CognitoIdentityProviderClientTypes.DeviceSecretVerifierConfigType.write(value:to:))
    }
}

extension ConfirmForgotPasswordInput {

    static func write(value: ConfirmForgotPasswordInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["AnalyticsMetadata"].write(value.analyticsMetadata, with: CognitoIdentityProviderClientTypes.AnalyticsMetadataType.write(value:to:))
        try writer["ClientId"].write(value.clientId)
        try writer["ClientMetadata"].writeMap(value.clientMetadata, valueWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        try writer["ConfirmationCode"].write(value.confirmationCode)
        try writer["Password"].write(value.password)
        try writer["SecretHash"].write(value.secretHash)
        try writer["UserContextData"].write(value.userContextData, with: CognitoIdentityProviderClientTypes.UserContextDataType.write(value:to:))
        try writer["Username"].write(value.username)
    }
}

extension ConfirmSignUpInput {

    static func write(value: ConfirmSignUpInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["AnalyticsMetadata"].write(value.analyticsMetadata, with: CognitoIdentityProviderClientTypes.AnalyticsMetadataType.write(value:to:))
        try writer["ClientId"].write(value.clientId)
        try writer["ClientMetadata"].writeMap(value.clientMetadata, valueWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        try writer["ConfirmationCode"].write(value.confirmationCode)
        try writer["ForceAliasCreation"].write(value.forceAliasCreation)
        try writer["SecretHash"].write(value.secretHash)
        try writer["UserContextData"].write(value.userContextData, with: CognitoIdentityProviderClientTypes.UserContextDataType.write(value:to:))
        try writer["Username"].write(value.username)
    }
}

extension CreateGroupInput {

    static func write(value: CreateGroupInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Description"].write(value.description)
        try writer["GroupName"].write(value.groupName)
        try writer["Precedence"].write(value.precedence)
        try writer["RoleArn"].write(value.roleArn)
        try writer["UserPoolId"].write(value.userPoolId)
    }
}

extension CreateIdentityProviderInput {

    static func write(value: CreateIdentityProviderInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["AttributeMapping"].writeMap(value.attributeMapping, valueWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        try writer["IdpIdentifiers"].writeList(value.idpIdentifiers, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["ProviderDetails"].writeMap(value.providerDetails, valueWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        try writer["ProviderName"].write(value.providerName)
        try writer["ProviderType"].write(value.providerType)
        try writer["UserPoolId"].write(value.userPoolId)
    }
}

extension CreateResourceServerInput {

    static func write(value: CreateResourceServerInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Identifier"].write(value.identifier)
        try writer["Name"].write(value.name)
        try writer["Scopes"].writeList(value.scopes, memberWritingClosure: CognitoIdentityProviderClientTypes.ResourceServerScopeType.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["UserPoolId"].write(value.userPoolId)
    }
}

extension CreateUserImportJobInput {

    static func write(value: CreateUserImportJobInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["CloudWatchLogsRoleArn"].write(value.cloudWatchLogsRoleArn)
        try writer["JobName"].write(value.jobName)
        try writer["UserPoolId"].write(value.userPoolId)
    }
}

extension CreateUserPoolInput {

    static func write(value: CreateUserPoolInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["AccountRecoverySetting"].write(value.accountRecoverySetting, with: CognitoIdentityProviderClientTypes.AccountRecoverySettingType.write(value:to:))
        try writer["AdminCreateUserConfig"].write(value.adminCreateUserConfig, with: CognitoIdentityProviderClientTypes.AdminCreateUserConfigType.write(value:to:))
        try writer["AliasAttributes"].writeList(value.aliasAttributes, memberWritingClosure: SmithyReadWrite.WritingClosureBox<CognitoIdentityProviderClientTypes.AliasAttributeType>().write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["AutoVerifiedAttributes"].writeList(value.autoVerifiedAttributes, memberWritingClosure: SmithyReadWrite.WritingClosureBox<CognitoIdentityProviderClientTypes.VerifiedAttributeType>().write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["DeletionProtection"].write(value.deletionProtection)
        try writer["DeviceConfiguration"].write(value.deviceConfiguration, with: CognitoIdentityProviderClientTypes.DeviceConfigurationType.write(value:to:))
        try writer["EmailConfiguration"].write(value.emailConfiguration, with: CognitoIdentityProviderClientTypes.EmailConfigurationType.write(value:to:))
        try writer["EmailVerificationMessage"].write(value.emailVerificationMessage)
        try writer["EmailVerificationSubject"].write(value.emailVerificationSubject)
        try writer["LambdaConfig"].write(value.lambdaConfig, with: CognitoIdentityProviderClientTypes.LambdaConfigType.write(value:to:))
        try writer["MfaConfiguration"].write(value.mfaConfiguration)
        try writer["Policies"].write(value.policies, with: CognitoIdentityProviderClientTypes.UserPoolPolicyType.write(value:to:))
        try writer["PoolName"].write(value.poolName)
        try writer["Schema"].writeList(value.schema, memberWritingClosure: CognitoIdentityProviderClientTypes.SchemaAttributeType.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["SmsAuthenticationMessage"].write(value.smsAuthenticationMessage)
        try writer["SmsConfiguration"].write(value.smsConfiguration, with: CognitoIdentityProviderClientTypes.SmsConfigurationType.write(value:to:))
        try writer["SmsVerificationMessage"].write(value.smsVerificationMessage)
        try writer["UserAttributeUpdateSettings"].write(value.userAttributeUpdateSettings, with: CognitoIdentityProviderClientTypes.UserAttributeUpdateSettingsType.write(value:to:))
        try writer["UserPoolAddOns"].write(value.userPoolAddOns, with: CognitoIdentityProviderClientTypes.UserPoolAddOnsType.write(value:to:))
        try writer["UserPoolTags"].writeMap(value.userPoolTags, valueWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        try writer["UsernameAttributes"].writeList(value.usernameAttributes, memberWritingClosure: SmithyReadWrite.WritingClosureBox<CognitoIdentityProviderClientTypes.UsernameAttributeType>().write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["UsernameConfiguration"].write(value.usernameConfiguration, with: CognitoIdentityProviderClientTypes.UsernameConfigurationType.write(value:to:))
        try writer["VerificationMessageTemplate"].write(value.verificationMessageTemplate, with: CognitoIdentityProviderClientTypes.VerificationMessageTemplateType.write(value:to:))
    }
}

extension CreateUserPoolClientInput {

    static func write(value: CreateUserPoolClientInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["AccessTokenValidity"].write(value.accessTokenValidity)
        try writer["AllowedOAuthFlows"].writeList(value.allowedOAuthFlows, memberWritingClosure: SmithyReadWrite.WritingClosureBox<CognitoIdentityProviderClientTypes.OAuthFlowType>().write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["AllowedOAuthFlowsUserPoolClient"].write(value.allowedOAuthFlowsUserPoolClient)
        try writer["AllowedOAuthScopes"].writeList(value.allowedOAuthScopes, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["AnalyticsConfiguration"].write(value.analyticsConfiguration, with: CognitoIdentityProviderClientTypes.AnalyticsConfigurationType.write(value:to:))
        try writer["AuthSessionValidity"].write(value.authSessionValidity)
        try writer["CallbackURLs"].writeList(value.callbackURLs, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["ClientName"].write(value.clientName)
        try writer["DefaultRedirectURI"].write(value.defaultRedirectURI)
        try writer["EnablePropagateAdditionalUserContextData"].write(value.enablePropagateAdditionalUserContextData)
        try writer["EnableTokenRevocation"].write(value.enableTokenRevocation)
        try writer["ExplicitAuthFlows"].writeList(value.explicitAuthFlows, memberWritingClosure: SmithyReadWrite.WritingClosureBox<CognitoIdentityProviderClientTypes.ExplicitAuthFlowsType>().write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["GenerateSecret"].write(value.generateSecret)
        try writer["IdTokenValidity"].write(value.idTokenValidity)
        try writer["LogoutURLs"].writeList(value.logoutURLs, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["PreventUserExistenceErrors"].write(value.preventUserExistenceErrors)
        try writer["ReadAttributes"].writeList(value.readAttributes, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["RefreshTokenValidity"].write(value.refreshTokenValidity)
        try writer["SupportedIdentityProviders"].writeList(value.supportedIdentityProviders, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["TokenValidityUnits"].write(value.tokenValidityUnits, with: CognitoIdentityProviderClientTypes.TokenValidityUnitsType.write(value:to:))
        try writer["UserPoolId"].write(value.userPoolId)
        try writer["WriteAttributes"].writeList(value.writeAttributes, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension CreateUserPoolDomainInput {

    static func write(value: CreateUserPoolDomainInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["CustomDomainConfig"].write(value.customDomainConfig, with: CognitoIdentityProviderClientTypes.CustomDomainConfigType.write(value:to:))
        try writer["Domain"].write(value.domain)
        try writer["UserPoolId"].write(value.userPoolId)
    }
}

extension DeleteGroupInput {

    static func write(value: DeleteGroupInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["GroupName"].write(value.groupName)
        try writer["UserPoolId"].write(value.userPoolId)
    }
}

extension DeleteIdentityProviderInput {

    static func write(value: DeleteIdentityProviderInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ProviderName"].write(value.providerName)
        try writer["UserPoolId"].write(value.userPoolId)
    }
}

extension DeleteResourceServerInput {

    static func write(value: DeleteResourceServerInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Identifier"].write(value.identifier)
        try writer["UserPoolId"].write(value.userPoolId)
    }
}

extension DeleteUserInput {

    static func write(value: DeleteUserInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["AccessToken"].write(value.accessToken)
    }
}

extension DeleteUserAttributesInput {

    static func write(value: DeleteUserAttributesInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["AccessToken"].write(value.accessToken)
        try writer["UserAttributeNames"].writeList(value.userAttributeNames, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension DeleteUserPoolInput {

    static func write(value: DeleteUserPoolInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["UserPoolId"].write(value.userPoolId)
    }
}

extension DeleteUserPoolClientInput {

    static func write(value: DeleteUserPoolClientInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ClientId"].write(value.clientId)
        try writer["UserPoolId"].write(value.userPoolId)
    }
}

extension DeleteUserPoolDomainInput {

    static func write(value: DeleteUserPoolDomainInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Domain"].write(value.domain)
        try writer["UserPoolId"].write(value.userPoolId)
    }
}

extension DescribeIdentityProviderInput {

    static func write(value: DescribeIdentityProviderInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ProviderName"].write(value.providerName)
        try writer["UserPoolId"].write(value.userPoolId)
    }
}

extension DescribeResourceServerInput {

    static func write(value: DescribeResourceServerInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Identifier"].write(value.identifier)
        try writer["UserPoolId"].write(value.userPoolId)
    }
}

extension DescribeRiskConfigurationInput {

    static func write(value: DescribeRiskConfigurationInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ClientId"].write(value.clientId)
        try writer["UserPoolId"].write(value.userPoolId)
    }
}

extension DescribeUserImportJobInput {

    static func write(value: DescribeUserImportJobInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["JobId"].write(value.jobId)
        try writer["UserPoolId"].write(value.userPoolId)
    }
}

extension DescribeUserPoolInput {

    static func write(value: DescribeUserPoolInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["UserPoolId"].write(value.userPoolId)
    }
}

extension DescribeUserPoolClientInput {

    static func write(value: DescribeUserPoolClientInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ClientId"].write(value.clientId)
        try writer["UserPoolId"].write(value.userPoolId)
    }
}

extension DescribeUserPoolDomainInput {

    static func write(value: DescribeUserPoolDomainInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Domain"].write(value.domain)
    }
}

extension ForgetDeviceInput {

    static func write(value: ForgetDeviceInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["AccessToken"].write(value.accessToken)
        try writer["DeviceKey"].write(value.deviceKey)
    }
}

extension ForgotPasswordInput {

    static func write(value: ForgotPasswordInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["AnalyticsMetadata"].write(value.analyticsMetadata, with: CognitoIdentityProviderClientTypes.AnalyticsMetadataType.write(value:to:))
        try writer["ClientId"].write(value.clientId)
        try writer["ClientMetadata"].writeMap(value.clientMetadata, valueWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        try writer["SecretHash"].write(value.secretHash)
        try writer["UserContextData"].write(value.userContextData, with: CognitoIdentityProviderClientTypes.UserContextDataType.write(value:to:))
        try writer["Username"].write(value.username)
    }
}

extension GetCSVHeaderInput {

    static func write(value: GetCSVHeaderInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["UserPoolId"].write(value.userPoolId)
    }
}

extension GetDeviceInput {

    static func write(value: GetDeviceInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["AccessToken"].write(value.accessToken)
        try writer["DeviceKey"].write(value.deviceKey)
    }
}

extension GetGroupInput {

    static func write(value: GetGroupInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["GroupName"].write(value.groupName)
        try writer["UserPoolId"].write(value.userPoolId)
    }
}

extension GetIdentityProviderByIdentifierInput {

    static func write(value: GetIdentityProviderByIdentifierInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["IdpIdentifier"].write(value.idpIdentifier)
        try writer["UserPoolId"].write(value.userPoolId)
    }
}

extension GetLogDeliveryConfigurationInput {

    static func write(value: GetLogDeliveryConfigurationInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["UserPoolId"].write(value.userPoolId)
    }
}

extension GetSigningCertificateInput {

    static func write(value: GetSigningCertificateInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["UserPoolId"].write(value.userPoolId)
    }
}

extension GetUICustomizationInput {

    static func write(value: GetUICustomizationInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ClientId"].write(value.clientId)
        try writer["UserPoolId"].write(value.userPoolId)
    }
}

extension GetUserInput {

    static func write(value: GetUserInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["AccessToken"].write(value.accessToken)
    }
}

extension GetUserAttributeVerificationCodeInput {

    static func write(value: GetUserAttributeVerificationCodeInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["AccessToken"].write(value.accessToken)
        try writer["AttributeName"].write(value.attributeName)
        try writer["ClientMetadata"].writeMap(value.clientMetadata, valueWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
    }
}

extension GetUserPoolMfaConfigInput {

    static func write(value: GetUserPoolMfaConfigInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["UserPoolId"].write(value.userPoolId)
    }
}

extension GlobalSignOutInput {

    static func write(value: GlobalSignOutInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["AccessToken"].write(value.accessToken)
    }
}

extension InitiateAuthInput {

    static func write(value: InitiateAuthInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["AnalyticsMetadata"].write(value.analyticsMetadata, with: CognitoIdentityProviderClientTypes.AnalyticsMetadataType.write(value:to:))
        try writer["AuthFlow"].write(value.authFlow)
        try writer["AuthParameters"].writeMap(value.authParameters, valueWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        try writer["ClientId"].write(value.clientId)
        try writer["ClientMetadata"].writeMap(value.clientMetadata, valueWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        try writer["UserContextData"].write(value.userContextData, with: CognitoIdentityProviderClientTypes.UserContextDataType.write(value:to:))
    }
}

extension ListDevicesInput {

    static func write(value: ListDevicesInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["AccessToken"].write(value.accessToken)
        try writer["Limit"].write(value.limit)
        try writer["PaginationToken"].write(value.paginationToken)
    }
}

extension ListGroupsInput {

    static func write(value: ListGroupsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Limit"].write(value.limit)
        try writer["NextToken"].write(value.nextToken)
        try writer["UserPoolId"].write(value.userPoolId)
    }
}

extension ListIdentityProvidersInput {

    static func write(value: ListIdentityProvidersInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["MaxResults"].write(value.maxResults)
        try writer["NextToken"].write(value.nextToken)
        try writer["UserPoolId"].write(value.userPoolId)
    }
}

extension ListResourceServersInput {

    static func write(value: ListResourceServersInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["MaxResults"].write(value.maxResults)
        try writer["NextToken"].write(value.nextToken)
        try writer["UserPoolId"].write(value.userPoolId)
    }
}

extension ListTagsForResourceInput {

    static func write(value: ListTagsForResourceInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ResourceArn"].write(value.resourceArn)
    }
}

extension ListUserImportJobsInput {

    static func write(value: ListUserImportJobsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["MaxResults"].write(value.maxResults)
        try writer["PaginationToken"].write(value.paginationToken)
        try writer["UserPoolId"].write(value.userPoolId)
    }
}

extension ListUserPoolClientsInput {

    static func write(value: ListUserPoolClientsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["MaxResults"].write(value.maxResults)
        try writer["NextToken"].write(value.nextToken)
        try writer["UserPoolId"].write(value.userPoolId)
    }
}

extension ListUserPoolsInput {

    static func write(value: ListUserPoolsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["MaxResults"].write(value.maxResults)
        try writer["NextToken"].write(value.nextToken)
    }
}

extension ListUsersInput {

    static func write(value: ListUsersInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["AttributesToGet"].writeList(value.attributesToGet, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["Filter"].write(value.filter)
        try writer["Limit"].write(value.limit)
        try writer["PaginationToken"].write(value.paginationToken)
        try writer["UserPoolId"].write(value.userPoolId)
    }
}

extension ListUsersInGroupInput {

    static func write(value: ListUsersInGroupInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["GroupName"].write(value.groupName)
        try writer["Limit"].write(value.limit)
        try writer["NextToken"].write(value.nextToken)
        try writer["UserPoolId"].write(value.userPoolId)
    }
}

extension ResendConfirmationCodeInput {

    static func write(value: ResendConfirmationCodeInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["AnalyticsMetadata"].write(value.analyticsMetadata, with: CognitoIdentityProviderClientTypes.AnalyticsMetadataType.write(value:to:))
        try writer["ClientId"].write(value.clientId)
        try writer["ClientMetadata"].writeMap(value.clientMetadata, valueWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        try writer["SecretHash"].write(value.secretHash)
        try writer["UserContextData"].write(value.userContextData, with: CognitoIdentityProviderClientTypes.UserContextDataType.write(value:to:))
        try writer["Username"].write(value.username)
    }
}

extension RespondToAuthChallengeInput {

    static func write(value: RespondToAuthChallengeInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["AnalyticsMetadata"].write(value.analyticsMetadata, with: CognitoIdentityProviderClientTypes.AnalyticsMetadataType.write(value:to:))
        try writer["ChallengeName"].write(value.challengeName)
        try writer["ChallengeResponses"].writeMap(value.challengeResponses, valueWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        try writer["ClientId"].write(value.clientId)
        try writer["ClientMetadata"].writeMap(value.clientMetadata, valueWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        try writer["Session"].write(value.session)
        try writer["UserContextData"].write(value.userContextData, with: CognitoIdentityProviderClientTypes.UserContextDataType.write(value:to:))
    }
}

extension RevokeTokenInput {

    static func write(value: RevokeTokenInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ClientId"].write(value.clientId)
        try writer["ClientSecret"].write(value.clientSecret)
        try writer["Token"].write(value.token)
    }
}

extension SetLogDeliveryConfigurationInput {

    static func write(value: SetLogDeliveryConfigurationInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["LogConfigurations"].writeList(value.logConfigurations, memberWritingClosure: CognitoIdentityProviderClientTypes.LogConfigurationType.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["UserPoolId"].write(value.userPoolId)
    }
}

extension SetRiskConfigurationInput {

    static func write(value: SetRiskConfigurationInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["AccountTakeoverRiskConfiguration"].write(value.accountTakeoverRiskConfiguration, with: CognitoIdentityProviderClientTypes.AccountTakeoverRiskConfigurationType.write(value:to:))
        try writer["ClientId"].write(value.clientId)
        try writer["CompromisedCredentialsRiskConfiguration"].write(value.compromisedCredentialsRiskConfiguration, with: CognitoIdentityProviderClientTypes.CompromisedCredentialsRiskConfigurationType.write(value:to:))
        try writer["RiskExceptionConfiguration"].write(value.riskExceptionConfiguration, with: CognitoIdentityProviderClientTypes.RiskExceptionConfigurationType.write(value:to:))
        try writer["UserPoolId"].write(value.userPoolId)
    }
}

extension SetUICustomizationInput {

    static func write(value: SetUICustomizationInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["CSS"].write(value.css)
        try writer["ClientId"].write(value.clientId)
        try writer["ImageFile"].write(value.imageFile)
        try writer["UserPoolId"].write(value.userPoolId)
    }
}

extension SetUserMFAPreferenceInput {

    static func write(value: SetUserMFAPreferenceInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["AccessToken"].write(value.accessToken)
        try writer["EmailMfaSettings"].write(value.emailMfaSettings, with: CognitoIdentityProviderClientTypes.EmailMfaSettingsType.write(value:to:))
        try writer["SMSMfaSettings"].write(value.smsMfaSettings, with: CognitoIdentityProviderClientTypes.SMSMfaSettingsType.write(value:to:))
        try writer["SoftwareTokenMfaSettings"].write(value.softwareTokenMfaSettings, with: CognitoIdentityProviderClientTypes.SoftwareTokenMfaSettingsType.write(value:to:))
    }
}

extension SetUserPoolMfaConfigInput {

    static func write(value: SetUserPoolMfaConfigInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["EmailMfaConfiguration"].write(value.emailMfaConfiguration, with: CognitoIdentityProviderClientTypes.EmailMfaConfigType.write(value:to:))
        try writer["MfaConfiguration"].write(value.mfaConfiguration)
        try writer["SmsMfaConfiguration"].write(value.smsMfaConfiguration, with: CognitoIdentityProviderClientTypes.SmsMfaConfigType.write(value:to:))
        try writer["SoftwareTokenMfaConfiguration"].write(value.softwareTokenMfaConfiguration, with: CognitoIdentityProviderClientTypes.SoftwareTokenMfaConfigType.write(value:to:))
        try writer["UserPoolId"].write(value.userPoolId)
    }
}

extension SetUserSettingsInput {

    static func write(value: SetUserSettingsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["AccessToken"].write(value.accessToken)
        try writer["MFAOptions"].writeList(value.mfaOptions, memberWritingClosure: CognitoIdentityProviderClientTypes.MFAOptionType.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension SignUpInput {

    static func write(value: SignUpInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["AnalyticsMetadata"].write(value.analyticsMetadata, with: CognitoIdentityProviderClientTypes.AnalyticsMetadataType.write(value:to:))
        try writer["ClientId"].write(value.clientId)
        try writer["ClientMetadata"].writeMap(value.clientMetadata, valueWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        try writer["Password"].write(value.password)
        try writer["SecretHash"].write(value.secretHash)
        try writer["UserAttributes"].writeList(value.userAttributes, memberWritingClosure: CognitoIdentityProviderClientTypes.AttributeType.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["UserContextData"].write(value.userContextData, with: CognitoIdentityProviderClientTypes.UserContextDataType.write(value:to:))
        try writer["Username"].write(value.username)
        try writer["ValidationData"].writeList(value.validationData, memberWritingClosure: CognitoIdentityProviderClientTypes.AttributeType.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension StartUserImportJobInput {

    static func write(value: StartUserImportJobInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["JobId"].write(value.jobId)
        try writer["UserPoolId"].write(value.userPoolId)
    }
}

extension StopUserImportJobInput {

    static func write(value: StopUserImportJobInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["JobId"].write(value.jobId)
        try writer["UserPoolId"].write(value.userPoolId)
    }
}

extension TagResourceInput {

    static func write(value: TagResourceInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ResourceArn"].write(value.resourceArn)
        try writer["Tags"].writeMap(value.tags, valueWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
    }
}

extension UntagResourceInput {

    static func write(value: UntagResourceInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ResourceArn"].write(value.resourceArn)
        try writer["TagKeys"].writeList(value.tagKeys, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension UpdateAuthEventFeedbackInput {

    static func write(value: UpdateAuthEventFeedbackInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["EventId"].write(value.eventId)
        try writer["FeedbackToken"].write(value.feedbackToken)
        try writer["FeedbackValue"].write(value.feedbackValue)
        try writer["UserPoolId"].write(value.userPoolId)
        try writer["Username"].write(value.username)
    }
}

extension UpdateDeviceStatusInput {

    static func write(value: UpdateDeviceStatusInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["AccessToken"].write(value.accessToken)
        try writer["DeviceKey"].write(value.deviceKey)
        try writer["DeviceRememberedStatus"].write(value.deviceRememberedStatus)
    }
}

extension UpdateGroupInput {

    static func write(value: UpdateGroupInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Description"].write(value.description)
        try writer["GroupName"].write(value.groupName)
        try writer["Precedence"].write(value.precedence)
        try writer["RoleArn"].write(value.roleArn)
        try writer["UserPoolId"].write(value.userPoolId)
    }
}

extension UpdateIdentityProviderInput {

    static func write(value: UpdateIdentityProviderInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["AttributeMapping"].writeMap(value.attributeMapping, valueWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        try writer["IdpIdentifiers"].writeList(value.idpIdentifiers, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["ProviderDetails"].writeMap(value.providerDetails, valueWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        try writer["ProviderName"].write(value.providerName)
        try writer["UserPoolId"].write(value.userPoolId)
    }
}

extension UpdateResourceServerInput {

    static func write(value: UpdateResourceServerInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Identifier"].write(value.identifier)
        try writer["Name"].write(value.name)
        try writer["Scopes"].writeList(value.scopes, memberWritingClosure: CognitoIdentityProviderClientTypes.ResourceServerScopeType.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["UserPoolId"].write(value.userPoolId)
    }
}

extension UpdateUserAttributesInput {

    static func write(value: UpdateUserAttributesInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["AccessToken"].write(value.accessToken)
        try writer["ClientMetadata"].writeMap(value.clientMetadata, valueWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        try writer["UserAttributes"].writeList(value.userAttributes, memberWritingClosure: CognitoIdentityProviderClientTypes.AttributeType.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension UpdateUserPoolInput {

    static func write(value: UpdateUserPoolInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["AccountRecoverySetting"].write(value.accountRecoverySetting, with: CognitoIdentityProviderClientTypes.AccountRecoverySettingType.write(value:to:))
        try writer["AdminCreateUserConfig"].write(value.adminCreateUserConfig, with: CognitoIdentityProviderClientTypes.AdminCreateUserConfigType.write(value:to:))
        try writer["AutoVerifiedAttributes"].writeList(value.autoVerifiedAttributes, memberWritingClosure: SmithyReadWrite.WritingClosureBox<CognitoIdentityProviderClientTypes.VerifiedAttributeType>().write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["DeletionProtection"].write(value.deletionProtection)
        try writer["DeviceConfiguration"].write(value.deviceConfiguration, with: CognitoIdentityProviderClientTypes.DeviceConfigurationType.write(value:to:))
        try writer["EmailConfiguration"].write(value.emailConfiguration, with: CognitoIdentityProviderClientTypes.EmailConfigurationType.write(value:to:))
        try writer["EmailVerificationMessage"].write(value.emailVerificationMessage)
        try writer["EmailVerificationSubject"].write(value.emailVerificationSubject)
        try writer["LambdaConfig"].write(value.lambdaConfig, with: CognitoIdentityProviderClientTypes.LambdaConfigType.write(value:to:))
        try writer["MfaConfiguration"].write(value.mfaConfiguration)
        try writer["Policies"].write(value.policies, with: CognitoIdentityProviderClientTypes.UserPoolPolicyType.write(value:to:))
        try writer["SmsAuthenticationMessage"].write(value.smsAuthenticationMessage)
        try writer["SmsConfiguration"].write(value.smsConfiguration, with: CognitoIdentityProviderClientTypes.SmsConfigurationType.write(value:to:))
        try writer["SmsVerificationMessage"].write(value.smsVerificationMessage)
        try writer["UserAttributeUpdateSettings"].write(value.userAttributeUpdateSettings, with: CognitoIdentityProviderClientTypes.UserAttributeUpdateSettingsType.write(value:to:))
        try writer["UserPoolAddOns"].write(value.userPoolAddOns, with: CognitoIdentityProviderClientTypes.UserPoolAddOnsType.write(value:to:))
        try writer["UserPoolId"].write(value.userPoolId)
        try writer["UserPoolTags"].writeMap(value.userPoolTags, valueWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        try writer["VerificationMessageTemplate"].write(value.verificationMessageTemplate, with: CognitoIdentityProviderClientTypes.VerificationMessageTemplateType.write(value:to:))
    }
}

extension UpdateUserPoolClientInput {

    static func write(value: UpdateUserPoolClientInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["AccessTokenValidity"].write(value.accessTokenValidity)
        try writer["AllowedOAuthFlows"].writeList(value.allowedOAuthFlows, memberWritingClosure: SmithyReadWrite.WritingClosureBox<CognitoIdentityProviderClientTypes.OAuthFlowType>().write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["AllowedOAuthFlowsUserPoolClient"].write(value.allowedOAuthFlowsUserPoolClient)
        try writer["AllowedOAuthScopes"].writeList(value.allowedOAuthScopes, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["AnalyticsConfiguration"].write(value.analyticsConfiguration, with: CognitoIdentityProviderClientTypes.AnalyticsConfigurationType.write(value:to:))
        try writer["AuthSessionValidity"].write(value.authSessionValidity)
        try writer["CallbackURLs"].writeList(value.callbackURLs, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["ClientId"].write(value.clientId)
        try writer["ClientName"].write(value.clientName)
        try writer["DefaultRedirectURI"].write(value.defaultRedirectURI)
        try writer["EnablePropagateAdditionalUserContextData"].write(value.enablePropagateAdditionalUserContextData)
        try writer["EnableTokenRevocation"].write(value.enableTokenRevocation)
        try writer["ExplicitAuthFlows"].writeList(value.explicitAuthFlows, memberWritingClosure: SmithyReadWrite.WritingClosureBox<CognitoIdentityProviderClientTypes.ExplicitAuthFlowsType>().write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["IdTokenValidity"].write(value.idTokenValidity)
        try writer["LogoutURLs"].writeList(value.logoutURLs, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["PreventUserExistenceErrors"].write(value.preventUserExistenceErrors)
        try writer["ReadAttributes"].writeList(value.readAttributes, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["RefreshTokenValidity"].write(value.refreshTokenValidity)
        try writer["SupportedIdentityProviders"].writeList(value.supportedIdentityProviders, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["TokenValidityUnits"].write(value.tokenValidityUnits, with: CognitoIdentityProviderClientTypes.TokenValidityUnitsType.write(value:to:))
        try writer["UserPoolId"].write(value.userPoolId)
        try writer["WriteAttributes"].writeList(value.writeAttributes, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension UpdateUserPoolDomainInput {

    static func write(value: UpdateUserPoolDomainInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["CustomDomainConfig"].write(value.customDomainConfig, with: CognitoIdentityProviderClientTypes.CustomDomainConfigType.write(value:to:))
        try writer["Domain"].write(value.domain)
        try writer["UserPoolId"].write(value.userPoolId)
    }
}

extension VerifySoftwareTokenInput {

    static func write(value: VerifySoftwareTokenInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["AccessToken"].write(value.accessToken)
        try writer["FriendlyDeviceName"].write(value.friendlyDeviceName)
        try writer["Session"].write(value.session)
        try writer["UserCode"].write(value.userCode)
    }
}

extension VerifyUserAttributeInput {

    static func write(value: VerifyUserAttributeInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["AccessToken"].write(value.accessToken)
        try writer["AttributeName"].write(value.attributeName)
        try writer["Code"].write(value.code)
    }
}

extension AddCustomAttributesOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> AddCustomAttributesOutput {
        return AddCustomAttributesOutput()
    }
}

extension AdminAddUserToGroupOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> AdminAddUserToGroupOutput {
        return AdminAddUserToGroupOutput()
    }
}

extension AdminConfirmSignUpOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> AdminConfirmSignUpOutput {
        return AdminConfirmSignUpOutput()
    }
}

extension AdminCreateUserOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> AdminCreateUserOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = AdminCreateUserOutput()
        value.user = try reader["User"].readIfPresent(with: CognitoIdentityProviderClientTypes.UserType.read(from:))
        return value
    }
}

extension AdminDeleteUserOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> AdminDeleteUserOutput {
        return AdminDeleteUserOutput()
    }
}

extension AdminDeleteUserAttributesOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> AdminDeleteUserAttributesOutput {
        return AdminDeleteUserAttributesOutput()
    }
}

extension AdminDisableProviderForUserOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> AdminDisableProviderForUserOutput {
        return AdminDisableProviderForUserOutput()
    }
}

extension AdminDisableUserOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> AdminDisableUserOutput {
        return AdminDisableUserOutput()
    }
}

extension AdminEnableUserOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> AdminEnableUserOutput {
        return AdminEnableUserOutput()
    }
}

extension AdminForgetDeviceOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> AdminForgetDeviceOutput {
        return AdminForgetDeviceOutput()
    }
}

extension AdminGetDeviceOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> AdminGetDeviceOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = AdminGetDeviceOutput()
        value.device = try reader["Device"].readIfPresent(with: CognitoIdentityProviderClientTypes.DeviceType.read(from:))
        return value
    }
}

extension AdminGetUserOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> AdminGetUserOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = AdminGetUserOutput()
        value.enabled = try reader["Enabled"].readIfPresent() ?? false
        value.mfaOptions = try reader["MFAOptions"].readListIfPresent(memberReadingClosure: CognitoIdentityProviderClientTypes.MFAOptionType.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.preferredMfaSetting = try reader["PreferredMfaSetting"].readIfPresent()
        value.userAttributes = try reader["UserAttributes"].readListIfPresent(memberReadingClosure: CognitoIdentityProviderClientTypes.AttributeType.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.userCreateDate = try reader["UserCreateDate"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.userLastModifiedDate = try reader["UserLastModifiedDate"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.userMFASettingList = try reader["UserMFASettingList"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.userStatus = try reader["UserStatus"].readIfPresent()
        value.username = try reader["Username"].readIfPresent() ?? ""
        return value
    }
}

extension AdminInitiateAuthOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> AdminInitiateAuthOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = AdminInitiateAuthOutput()
        value.authenticationResult = try reader["AuthenticationResult"].readIfPresent(with: CognitoIdentityProviderClientTypes.AuthenticationResultType.read(from:))
        value.challengeName = try reader["ChallengeName"].readIfPresent()
        value.challengeParameters = try reader["ChallengeParameters"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        value.session = try reader["Session"].readIfPresent()
        return value
    }
}

extension AdminLinkProviderForUserOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> AdminLinkProviderForUserOutput {
        return AdminLinkProviderForUserOutput()
    }
}

extension AdminListDevicesOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> AdminListDevicesOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = AdminListDevicesOutput()
        value.devices = try reader["Devices"].readListIfPresent(memberReadingClosure: CognitoIdentityProviderClientTypes.DeviceType.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.paginationToken = try reader["PaginationToken"].readIfPresent()
        return value
    }
}

extension AdminListGroupsForUserOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> AdminListGroupsForUserOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = AdminListGroupsForUserOutput()
        value.groups = try reader["Groups"].readListIfPresent(memberReadingClosure: CognitoIdentityProviderClientTypes.GroupType.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.nextToken = try reader["NextToken"].readIfPresent()
        return value
    }
}

extension AdminListUserAuthEventsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> AdminListUserAuthEventsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = AdminListUserAuthEventsOutput()
        value.authEvents = try reader["AuthEvents"].readListIfPresent(memberReadingClosure: CognitoIdentityProviderClientTypes.AuthEventType.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.nextToken = try reader["NextToken"].readIfPresent()
        return value
    }
}

extension AdminRemoveUserFromGroupOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> AdminRemoveUserFromGroupOutput {
        return AdminRemoveUserFromGroupOutput()
    }
}

extension AdminResetUserPasswordOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> AdminResetUserPasswordOutput {
        return AdminResetUserPasswordOutput()
    }
}

extension AdminRespondToAuthChallengeOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> AdminRespondToAuthChallengeOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = AdminRespondToAuthChallengeOutput()
        value.authenticationResult = try reader["AuthenticationResult"].readIfPresent(with: CognitoIdentityProviderClientTypes.AuthenticationResultType.read(from:))
        value.challengeName = try reader["ChallengeName"].readIfPresent()
        value.challengeParameters = try reader["ChallengeParameters"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        value.session = try reader["Session"].readIfPresent()
        return value
    }
}

extension AdminSetUserMFAPreferenceOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> AdminSetUserMFAPreferenceOutput {
        return AdminSetUserMFAPreferenceOutput()
    }
}

extension AdminSetUserPasswordOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> AdminSetUserPasswordOutput {
        return AdminSetUserPasswordOutput()
    }
}

extension AdminSetUserSettingsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> AdminSetUserSettingsOutput {
        return AdminSetUserSettingsOutput()
    }
}

extension AdminUpdateAuthEventFeedbackOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> AdminUpdateAuthEventFeedbackOutput {
        return AdminUpdateAuthEventFeedbackOutput()
    }
}

extension AdminUpdateDeviceStatusOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> AdminUpdateDeviceStatusOutput {
        return AdminUpdateDeviceStatusOutput()
    }
}

extension AdminUpdateUserAttributesOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> AdminUpdateUserAttributesOutput {
        return AdminUpdateUserAttributesOutput()
    }
}

extension AdminUserGlobalSignOutOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> AdminUserGlobalSignOutOutput {
        return AdminUserGlobalSignOutOutput()
    }
}

extension AssociateSoftwareTokenOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> AssociateSoftwareTokenOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = AssociateSoftwareTokenOutput()
        value.secretCode = try reader["SecretCode"].readIfPresent()
        value.session = try reader["Session"].readIfPresent()
        return value
    }
}

extension ChangePasswordOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ChangePasswordOutput {
        return ChangePasswordOutput()
    }
}

extension ConfirmDeviceOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ConfirmDeviceOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ConfirmDeviceOutput()
        value.userConfirmationNecessary = try reader["UserConfirmationNecessary"].readIfPresent() ?? false
        return value
    }
}

extension ConfirmForgotPasswordOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ConfirmForgotPasswordOutput {
        return ConfirmForgotPasswordOutput()
    }
}

extension ConfirmSignUpOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ConfirmSignUpOutput {
        return ConfirmSignUpOutput()
    }
}

extension CreateGroupOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateGroupOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateGroupOutput()
        value.group = try reader["Group"].readIfPresent(with: CognitoIdentityProviderClientTypes.GroupType.read(from:))
        return value
    }
}

extension CreateIdentityProviderOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateIdentityProviderOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateIdentityProviderOutput()
        value.identityProvider = try reader["IdentityProvider"].readIfPresent(with: CognitoIdentityProviderClientTypes.IdentityProviderType.read(from:))
        return value
    }
}

extension CreateResourceServerOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateResourceServerOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateResourceServerOutput()
        value.resourceServer = try reader["ResourceServer"].readIfPresent(with: CognitoIdentityProviderClientTypes.ResourceServerType.read(from:))
        return value
    }
}

extension CreateUserImportJobOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateUserImportJobOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateUserImportJobOutput()
        value.userImportJob = try reader["UserImportJob"].readIfPresent(with: CognitoIdentityProviderClientTypes.UserImportJobType.read(from:))
        return value
    }
}

extension CreateUserPoolOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateUserPoolOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateUserPoolOutput()
        value.userPool = try reader["UserPool"].readIfPresent(with: CognitoIdentityProviderClientTypes.UserPoolType.read(from:))
        return value
    }
}

extension CreateUserPoolClientOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateUserPoolClientOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateUserPoolClientOutput()
        value.userPoolClient = try reader["UserPoolClient"].readIfPresent(with: CognitoIdentityProviderClientTypes.UserPoolClientType.read(from:))
        return value
    }
}

extension CreateUserPoolDomainOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateUserPoolDomainOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateUserPoolDomainOutput()
        value.cloudFrontDomain = try reader["CloudFrontDomain"].readIfPresent()
        return value
    }
}

extension DeleteGroupOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteGroupOutput {
        return DeleteGroupOutput()
    }
}

extension DeleteIdentityProviderOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteIdentityProviderOutput {
        return DeleteIdentityProviderOutput()
    }
}

extension DeleteResourceServerOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteResourceServerOutput {
        return DeleteResourceServerOutput()
    }
}

extension DeleteUserOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteUserOutput {
        return DeleteUserOutput()
    }
}

extension DeleteUserAttributesOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteUserAttributesOutput {
        return DeleteUserAttributesOutput()
    }
}

extension DeleteUserPoolOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteUserPoolOutput {
        return DeleteUserPoolOutput()
    }
}

extension DeleteUserPoolClientOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteUserPoolClientOutput {
        return DeleteUserPoolClientOutput()
    }
}

extension DeleteUserPoolDomainOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteUserPoolDomainOutput {
        return DeleteUserPoolDomainOutput()
    }
}

extension DescribeIdentityProviderOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeIdentityProviderOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DescribeIdentityProviderOutput()
        value.identityProvider = try reader["IdentityProvider"].readIfPresent(with: CognitoIdentityProviderClientTypes.IdentityProviderType.read(from:))
        return value
    }
}

extension DescribeResourceServerOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeResourceServerOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DescribeResourceServerOutput()
        value.resourceServer = try reader["ResourceServer"].readIfPresent(with: CognitoIdentityProviderClientTypes.ResourceServerType.read(from:))
        return value
    }
}

extension DescribeRiskConfigurationOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeRiskConfigurationOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DescribeRiskConfigurationOutput()
        value.riskConfiguration = try reader["RiskConfiguration"].readIfPresent(with: CognitoIdentityProviderClientTypes.RiskConfigurationType.read(from:))
        return value
    }
}

extension DescribeUserImportJobOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeUserImportJobOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DescribeUserImportJobOutput()
        value.userImportJob = try reader["UserImportJob"].readIfPresent(with: CognitoIdentityProviderClientTypes.UserImportJobType.read(from:))
        return value
    }
}

extension DescribeUserPoolOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeUserPoolOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DescribeUserPoolOutput()
        value.userPool = try reader["UserPool"].readIfPresent(with: CognitoIdentityProviderClientTypes.UserPoolType.read(from:))
        return value
    }
}

extension DescribeUserPoolClientOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeUserPoolClientOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DescribeUserPoolClientOutput()
        value.userPoolClient = try reader["UserPoolClient"].readIfPresent(with: CognitoIdentityProviderClientTypes.UserPoolClientType.read(from:))
        return value
    }
}

extension DescribeUserPoolDomainOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeUserPoolDomainOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DescribeUserPoolDomainOutput()
        value.domainDescription = try reader["DomainDescription"].readIfPresent(with: CognitoIdentityProviderClientTypes.DomainDescriptionType.read(from:))
        return value
    }
}

extension ForgetDeviceOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ForgetDeviceOutput {
        return ForgetDeviceOutput()
    }
}

extension ForgotPasswordOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ForgotPasswordOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ForgotPasswordOutput()
        value.codeDeliveryDetails = try reader["CodeDeliveryDetails"].readIfPresent(with: CognitoIdentityProviderClientTypes.CodeDeliveryDetailsType.read(from:))
        return value
    }
}

extension GetCSVHeaderOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetCSVHeaderOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetCSVHeaderOutput()
        value.csvHeader = try reader["CSVHeader"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.userPoolId = try reader["UserPoolId"].readIfPresent()
        return value
    }
}

extension GetDeviceOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetDeviceOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetDeviceOutput()
        value.device = try reader["Device"].readIfPresent(with: CognitoIdentityProviderClientTypes.DeviceType.read(from:))
        return value
    }
}

extension GetGroupOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetGroupOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetGroupOutput()
        value.group = try reader["Group"].readIfPresent(with: CognitoIdentityProviderClientTypes.GroupType.read(from:))
        return value
    }
}

extension GetIdentityProviderByIdentifierOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetIdentityProviderByIdentifierOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetIdentityProviderByIdentifierOutput()
        value.identityProvider = try reader["IdentityProvider"].readIfPresent(with: CognitoIdentityProviderClientTypes.IdentityProviderType.read(from:))
        return value
    }
}

extension GetLogDeliveryConfigurationOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetLogDeliveryConfigurationOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetLogDeliveryConfigurationOutput()
        value.logDeliveryConfiguration = try reader["LogDeliveryConfiguration"].readIfPresent(with: CognitoIdentityProviderClientTypes.LogDeliveryConfigurationType.read(from:))
        return value
    }
}

extension GetSigningCertificateOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetSigningCertificateOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetSigningCertificateOutput()
        value.certificate = try reader["Certificate"].readIfPresent()
        return value
    }
}

extension GetUICustomizationOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetUICustomizationOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetUICustomizationOutput()
        value.uiCustomization = try reader["UICustomization"].readIfPresent(with: CognitoIdentityProviderClientTypes.UICustomizationType.read(from:))
        return value
    }
}

extension GetUserOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetUserOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetUserOutput()
        value.mfaOptions = try reader["MFAOptions"].readListIfPresent(memberReadingClosure: CognitoIdentityProviderClientTypes.MFAOptionType.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.preferredMfaSetting = try reader["PreferredMfaSetting"].readIfPresent()
        value.userAttributes = try reader["UserAttributes"].readListIfPresent(memberReadingClosure: CognitoIdentityProviderClientTypes.AttributeType.read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        value.userMFASettingList = try reader["UserMFASettingList"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.username = try reader["Username"].readIfPresent() ?? ""
        return value
    }
}

extension GetUserAttributeVerificationCodeOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetUserAttributeVerificationCodeOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetUserAttributeVerificationCodeOutput()
        value.codeDeliveryDetails = try reader["CodeDeliveryDetails"].readIfPresent(with: CognitoIdentityProviderClientTypes.CodeDeliveryDetailsType.read(from:))
        return value
    }
}

extension GetUserPoolMfaConfigOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetUserPoolMfaConfigOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetUserPoolMfaConfigOutput()
        value.emailMfaConfiguration = try reader["EmailMfaConfiguration"].readIfPresent(with: CognitoIdentityProviderClientTypes.EmailMfaConfigType.read(from:))
        value.mfaConfiguration = try reader["MfaConfiguration"].readIfPresent()
        value.smsMfaConfiguration = try reader["SmsMfaConfiguration"].readIfPresent(with: CognitoIdentityProviderClientTypes.SmsMfaConfigType.read(from:))
        value.softwareTokenMfaConfiguration = try reader["SoftwareTokenMfaConfiguration"].readIfPresent(with: CognitoIdentityProviderClientTypes.SoftwareTokenMfaConfigType.read(from:))
        return value
    }
}

extension GlobalSignOutOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GlobalSignOutOutput {
        return GlobalSignOutOutput()
    }
}

extension InitiateAuthOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> InitiateAuthOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = InitiateAuthOutput()
        value.authenticationResult = try reader["AuthenticationResult"].readIfPresent(with: CognitoIdentityProviderClientTypes.AuthenticationResultType.read(from:))
        value.challengeName = try reader["ChallengeName"].readIfPresent()
        value.challengeParameters = try reader["ChallengeParameters"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        value.session = try reader["Session"].readIfPresent()
        return value
    }
}

extension ListDevicesOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListDevicesOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListDevicesOutput()
        value.devices = try reader["Devices"].readListIfPresent(memberReadingClosure: CognitoIdentityProviderClientTypes.DeviceType.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.paginationToken = try reader["PaginationToken"].readIfPresent()
        return value
    }
}

extension ListGroupsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListGroupsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListGroupsOutput()
        value.groups = try reader["Groups"].readListIfPresent(memberReadingClosure: CognitoIdentityProviderClientTypes.GroupType.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.nextToken = try reader["NextToken"].readIfPresent()
        return value
    }
}

extension ListIdentityProvidersOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListIdentityProvidersOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListIdentityProvidersOutput()
        value.nextToken = try reader["NextToken"].readIfPresent()
        value.providers = try reader["Providers"].readListIfPresent(memberReadingClosure: CognitoIdentityProviderClientTypes.ProviderDescription.read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        return value
    }
}

extension ListResourceServersOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListResourceServersOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListResourceServersOutput()
        value.nextToken = try reader["NextToken"].readIfPresent()
        value.resourceServers = try reader["ResourceServers"].readListIfPresent(memberReadingClosure: CognitoIdentityProviderClientTypes.ResourceServerType.read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        return value
    }
}

extension ListTagsForResourceOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListTagsForResourceOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListTagsForResourceOutput()
        value.tags = try reader["Tags"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        return value
    }
}

extension ListUserImportJobsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListUserImportJobsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListUserImportJobsOutput()
        value.paginationToken = try reader["PaginationToken"].readIfPresent()
        value.userImportJobs = try reader["UserImportJobs"].readListIfPresent(memberReadingClosure: CognitoIdentityProviderClientTypes.UserImportJobType.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension ListUserPoolClientsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListUserPoolClientsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListUserPoolClientsOutput()
        value.nextToken = try reader["NextToken"].readIfPresent()
        value.userPoolClients = try reader["UserPoolClients"].readListIfPresent(memberReadingClosure: CognitoIdentityProviderClientTypes.UserPoolClientDescription.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension ListUserPoolsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListUserPoolsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListUserPoolsOutput()
        value.nextToken = try reader["NextToken"].readIfPresent()
        value.userPools = try reader["UserPools"].readListIfPresent(memberReadingClosure: CognitoIdentityProviderClientTypes.UserPoolDescriptionType.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension ListUsersOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListUsersOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListUsersOutput()
        value.paginationToken = try reader["PaginationToken"].readIfPresent()
        value.users = try reader["Users"].readListIfPresent(memberReadingClosure: CognitoIdentityProviderClientTypes.UserType.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension ListUsersInGroupOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListUsersInGroupOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListUsersInGroupOutput()
        value.nextToken = try reader["NextToken"].readIfPresent()
        value.users = try reader["Users"].readListIfPresent(memberReadingClosure: CognitoIdentityProviderClientTypes.UserType.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension ResendConfirmationCodeOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ResendConfirmationCodeOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ResendConfirmationCodeOutput()
        value.codeDeliveryDetails = try reader["CodeDeliveryDetails"].readIfPresent(with: CognitoIdentityProviderClientTypes.CodeDeliveryDetailsType.read(from:))
        return value
    }
}

extension RespondToAuthChallengeOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> RespondToAuthChallengeOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = RespondToAuthChallengeOutput()
        value.authenticationResult = try reader["AuthenticationResult"].readIfPresent(with: CognitoIdentityProviderClientTypes.AuthenticationResultType.read(from:))
        value.challengeName = try reader["ChallengeName"].readIfPresent()
        value.challengeParameters = try reader["ChallengeParameters"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        value.session = try reader["Session"].readIfPresent()
        return value
    }
}

extension RevokeTokenOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> RevokeTokenOutput {
        return RevokeTokenOutput()
    }
}

extension SetLogDeliveryConfigurationOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> SetLogDeliveryConfigurationOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = SetLogDeliveryConfigurationOutput()
        value.logDeliveryConfiguration = try reader["LogDeliveryConfiguration"].readIfPresent(with: CognitoIdentityProviderClientTypes.LogDeliveryConfigurationType.read(from:))
        return value
    }
}

extension SetRiskConfigurationOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> SetRiskConfigurationOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = SetRiskConfigurationOutput()
        value.riskConfiguration = try reader["RiskConfiguration"].readIfPresent(with: CognitoIdentityProviderClientTypes.RiskConfigurationType.read(from:))
        return value
    }
}

extension SetUICustomizationOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> SetUICustomizationOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = SetUICustomizationOutput()
        value.uiCustomization = try reader["UICustomization"].readIfPresent(with: CognitoIdentityProviderClientTypes.UICustomizationType.read(from:))
        return value
    }
}

extension SetUserMFAPreferenceOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> SetUserMFAPreferenceOutput {
        return SetUserMFAPreferenceOutput()
    }
}

extension SetUserPoolMfaConfigOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> SetUserPoolMfaConfigOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = SetUserPoolMfaConfigOutput()
        value.emailMfaConfiguration = try reader["EmailMfaConfiguration"].readIfPresent(with: CognitoIdentityProviderClientTypes.EmailMfaConfigType.read(from:))
        value.mfaConfiguration = try reader["MfaConfiguration"].readIfPresent()
        value.smsMfaConfiguration = try reader["SmsMfaConfiguration"].readIfPresent(with: CognitoIdentityProviderClientTypes.SmsMfaConfigType.read(from:))
        value.softwareTokenMfaConfiguration = try reader["SoftwareTokenMfaConfiguration"].readIfPresent(with: CognitoIdentityProviderClientTypes.SoftwareTokenMfaConfigType.read(from:))
        return value
    }
}

extension SetUserSettingsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> SetUserSettingsOutput {
        return SetUserSettingsOutput()
    }
}

extension SignUpOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> SignUpOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = SignUpOutput()
        value.codeDeliveryDetails = try reader["CodeDeliveryDetails"].readIfPresent(with: CognitoIdentityProviderClientTypes.CodeDeliveryDetailsType.read(from:))
        value.userConfirmed = try reader["UserConfirmed"].readIfPresent() ?? false
        value.userSub = try reader["UserSub"].readIfPresent() ?? ""
        return value
    }
}

extension StartUserImportJobOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> StartUserImportJobOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = StartUserImportJobOutput()
        value.userImportJob = try reader["UserImportJob"].readIfPresent(with: CognitoIdentityProviderClientTypes.UserImportJobType.read(from:))
        return value
    }
}

extension StopUserImportJobOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> StopUserImportJobOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = StopUserImportJobOutput()
        value.userImportJob = try reader["UserImportJob"].readIfPresent(with: CognitoIdentityProviderClientTypes.UserImportJobType.read(from:))
        return value
    }
}

extension TagResourceOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> TagResourceOutput {
        return TagResourceOutput()
    }
}

extension UntagResourceOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UntagResourceOutput {
        return UntagResourceOutput()
    }
}

extension UpdateAuthEventFeedbackOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdateAuthEventFeedbackOutput {
        return UpdateAuthEventFeedbackOutput()
    }
}

extension UpdateDeviceStatusOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdateDeviceStatusOutput {
        return UpdateDeviceStatusOutput()
    }
}

extension UpdateGroupOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdateGroupOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = UpdateGroupOutput()
        value.group = try reader["Group"].readIfPresent(with: CognitoIdentityProviderClientTypes.GroupType.read(from:))
        return value
    }
}

extension UpdateIdentityProviderOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdateIdentityProviderOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = UpdateIdentityProviderOutput()
        value.identityProvider = try reader["IdentityProvider"].readIfPresent(with: CognitoIdentityProviderClientTypes.IdentityProviderType.read(from:))
        return value
    }
}

extension UpdateResourceServerOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdateResourceServerOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = UpdateResourceServerOutput()
        value.resourceServer = try reader["ResourceServer"].readIfPresent(with: CognitoIdentityProviderClientTypes.ResourceServerType.read(from:))
        return value
    }
}

extension UpdateUserAttributesOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdateUserAttributesOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = UpdateUserAttributesOutput()
        value.codeDeliveryDetailsList = try reader["CodeDeliveryDetailsList"].readListIfPresent(memberReadingClosure: CognitoIdentityProviderClientTypes.CodeDeliveryDetailsType.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension UpdateUserPoolOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdateUserPoolOutput {
        return UpdateUserPoolOutput()
    }
}

extension UpdateUserPoolClientOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdateUserPoolClientOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = UpdateUserPoolClientOutput()
        value.userPoolClient = try reader["UserPoolClient"].readIfPresent(with: CognitoIdentityProviderClientTypes.UserPoolClientType.read(from:))
        return value
    }
}

extension UpdateUserPoolDomainOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdateUserPoolDomainOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = UpdateUserPoolDomainOutput()
        value.cloudFrontDomain = try reader["CloudFrontDomain"].readIfPresent()
        return value
    }
}

extension VerifySoftwareTokenOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> VerifySoftwareTokenOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = VerifySoftwareTokenOutput()
        value.session = try reader["Session"].readIfPresent()
        value.status = try reader["Status"].readIfPresent()
        return value
    }
}

extension VerifyUserAttributeOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> VerifyUserAttributeOutput {
        return VerifyUserAttributeOutput()
    }
}

enum AddCustomAttributesOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalErrorException": return try InternalErrorException.makeError(baseError: baseError)
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "NotAuthorizedException": return try NotAuthorizedException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            case "UserImportInProgressException": return try UserImportInProgressException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum AdminAddUserToGroupOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalErrorException": return try InternalErrorException.makeError(baseError: baseError)
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "NotAuthorizedException": return try NotAuthorizedException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            case "UserNotFoundException": return try UserNotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum AdminConfirmSignUpOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalErrorException": return try InternalErrorException.makeError(baseError: baseError)
            case "InvalidLambdaResponseException": return try InvalidLambdaResponseException.makeError(baseError: baseError)
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "LimitExceededException": return try LimitExceededException.makeError(baseError: baseError)
            case "NotAuthorizedException": return try NotAuthorizedException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "TooManyFailedAttemptsException": return try TooManyFailedAttemptsException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            case "UnexpectedLambdaException": return try UnexpectedLambdaException.makeError(baseError: baseError)
            case "UserLambdaValidationException": return try UserLambdaValidationException.makeError(baseError: baseError)
            case "UserNotFoundException": return try UserNotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum AdminCreateUserOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "CodeDeliveryFailureException": return try CodeDeliveryFailureException.makeError(baseError: baseError)
            case "InternalErrorException": return try InternalErrorException.makeError(baseError: baseError)
            case "InvalidLambdaResponseException": return try InvalidLambdaResponseException.makeError(baseError: baseError)
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "InvalidPasswordException": return try InvalidPasswordException.makeError(baseError: baseError)
            case "InvalidSmsRoleAccessPolicyException": return try InvalidSmsRoleAccessPolicyException.makeError(baseError: baseError)
            case "InvalidSmsRoleTrustRelationshipException": return try InvalidSmsRoleTrustRelationshipException.makeError(baseError: baseError)
            case "NotAuthorizedException": return try NotAuthorizedException.makeError(baseError: baseError)
            case "PreconditionNotMetException": return try PreconditionNotMetException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            case "UnexpectedLambdaException": return try UnexpectedLambdaException.makeError(baseError: baseError)
            case "UnsupportedUserStateException": return try UnsupportedUserStateException.makeError(baseError: baseError)
            case "UserLambdaValidationException": return try UserLambdaValidationException.makeError(baseError: baseError)
            case "UsernameExistsException": return try UsernameExistsException.makeError(baseError: baseError)
            case "UserNotFoundException": return try UserNotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum AdminDeleteUserOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalErrorException": return try InternalErrorException.makeError(baseError: baseError)
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "NotAuthorizedException": return try NotAuthorizedException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            case "UserNotFoundException": return try UserNotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum AdminDeleteUserAttributesOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalErrorException": return try InternalErrorException.makeError(baseError: baseError)
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "NotAuthorizedException": return try NotAuthorizedException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            case "UserNotFoundException": return try UserNotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum AdminDisableProviderForUserOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AliasExistsException": return try AliasExistsException.makeError(baseError: baseError)
            case "InternalErrorException": return try InternalErrorException.makeError(baseError: baseError)
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "NotAuthorizedException": return try NotAuthorizedException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            case "UserNotFoundException": return try UserNotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum AdminDisableUserOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalErrorException": return try InternalErrorException.makeError(baseError: baseError)
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "NotAuthorizedException": return try NotAuthorizedException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            case "UserNotFoundException": return try UserNotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum AdminEnableUserOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalErrorException": return try InternalErrorException.makeError(baseError: baseError)
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "NotAuthorizedException": return try NotAuthorizedException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            case "UserNotFoundException": return try UserNotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum AdminForgetDeviceOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalErrorException": return try InternalErrorException.makeError(baseError: baseError)
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "InvalidUserPoolConfigurationException": return try InvalidUserPoolConfigurationException.makeError(baseError: baseError)
            case "NotAuthorizedException": return try NotAuthorizedException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            case "UserNotFoundException": return try UserNotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum AdminGetDeviceOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalErrorException": return try InternalErrorException.makeError(baseError: baseError)
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "InvalidUserPoolConfigurationException": return try InvalidUserPoolConfigurationException.makeError(baseError: baseError)
            case "NotAuthorizedException": return try NotAuthorizedException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum AdminGetUserOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalErrorException": return try InternalErrorException.makeError(baseError: baseError)
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "NotAuthorizedException": return try NotAuthorizedException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            case "UserNotFoundException": return try UserNotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum AdminInitiateAuthOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalErrorException": return try InternalErrorException.makeError(baseError: baseError)
            case "InvalidEmailRoleAccessPolicyException": return try InvalidEmailRoleAccessPolicyException.makeError(baseError: baseError)
            case "InvalidLambdaResponseException": return try InvalidLambdaResponseException.makeError(baseError: baseError)
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "InvalidSmsRoleAccessPolicyException": return try InvalidSmsRoleAccessPolicyException.makeError(baseError: baseError)
            case "InvalidSmsRoleTrustRelationshipException": return try InvalidSmsRoleTrustRelationshipException.makeError(baseError: baseError)
            case "InvalidUserPoolConfigurationException": return try InvalidUserPoolConfigurationException.makeError(baseError: baseError)
            case "MFAMethodNotFoundException": return try MFAMethodNotFoundException.makeError(baseError: baseError)
            case "NotAuthorizedException": return try NotAuthorizedException.makeError(baseError: baseError)
            case "PasswordResetRequiredException": return try PasswordResetRequiredException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            case "UnexpectedLambdaException": return try UnexpectedLambdaException.makeError(baseError: baseError)
            case "UserLambdaValidationException": return try UserLambdaValidationException.makeError(baseError: baseError)
            case "UserNotConfirmedException": return try UserNotConfirmedException.makeError(baseError: baseError)
            case "UserNotFoundException": return try UserNotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum AdminLinkProviderForUserOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AliasExistsException": return try AliasExistsException.makeError(baseError: baseError)
            case "InternalErrorException": return try InternalErrorException.makeError(baseError: baseError)
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "LimitExceededException": return try LimitExceededException.makeError(baseError: baseError)
            case "NotAuthorizedException": return try NotAuthorizedException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            case "UserNotFoundException": return try UserNotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum AdminListDevicesOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalErrorException": return try InternalErrorException.makeError(baseError: baseError)
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "InvalidUserPoolConfigurationException": return try InvalidUserPoolConfigurationException.makeError(baseError: baseError)
            case "NotAuthorizedException": return try NotAuthorizedException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum AdminListGroupsForUserOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalErrorException": return try InternalErrorException.makeError(baseError: baseError)
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "NotAuthorizedException": return try NotAuthorizedException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            case "UserNotFoundException": return try UserNotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum AdminListUserAuthEventsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalErrorException": return try InternalErrorException.makeError(baseError: baseError)
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "NotAuthorizedException": return try NotAuthorizedException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            case "UserNotFoundException": return try UserNotFoundException.makeError(baseError: baseError)
            case "UserPoolAddOnNotEnabledException": return try UserPoolAddOnNotEnabledException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum AdminRemoveUserFromGroupOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalErrorException": return try InternalErrorException.makeError(baseError: baseError)
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "NotAuthorizedException": return try NotAuthorizedException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            case "UserNotFoundException": return try UserNotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum AdminResetUserPasswordOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalErrorException": return try InternalErrorException.makeError(baseError: baseError)
            case "InvalidEmailRoleAccessPolicyException": return try InvalidEmailRoleAccessPolicyException.makeError(baseError: baseError)
            case "InvalidLambdaResponseException": return try InvalidLambdaResponseException.makeError(baseError: baseError)
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "InvalidSmsRoleAccessPolicyException": return try InvalidSmsRoleAccessPolicyException.makeError(baseError: baseError)
            case "InvalidSmsRoleTrustRelationshipException": return try InvalidSmsRoleTrustRelationshipException.makeError(baseError: baseError)
            case "LimitExceededException": return try LimitExceededException.makeError(baseError: baseError)
            case "NotAuthorizedException": return try NotAuthorizedException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            case "UnexpectedLambdaException": return try UnexpectedLambdaException.makeError(baseError: baseError)
            case "UserLambdaValidationException": return try UserLambdaValidationException.makeError(baseError: baseError)
            case "UserNotFoundException": return try UserNotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum AdminRespondToAuthChallengeOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AliasExistsException": return try AliasExistsException.makeError(baseError: baseError)
            case "CodeMismatchException": return try CodeMismatchException.makeError(baseError: baseError)
            case "ExpiredCodeException": return try ExpiredCodeException.makeError(baseError: baseError)
            case "InternalErrorException": return try InternalErrorException.makeError(baseError: baseError)
            case "InvalidEmailRoleAccessPolicyException": return try InvalidEmailRoleAccessPolicyException.makeError(baseError: baseError)
            case "InvalidLambdaResponseException": return try InvalidLambdaResponseException.makeError(baseError: baseError)
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "InvalidPasswordException": return try InvalidPasswordException.makeError(baseError: baseError)
            case "InvalidSmsRoleAccessPolicyException": return try InvalidSmsRoleAccessPolicyException.makeError(baseError: baseError)
            case "InvalidSmsRoleTrustRelationshipException": return try InvalidSmsRoleTrustRelationshipException.makeError(baseError: baseError)
            case "InvalidUserPoolConfigurationException": return try InvalidUserPoolConfigurationException.makeError(baseError: baseError)
            case "MFAMethodNotFoundException": return try MFAMethodNotFoundException.makeError(baseError: baseError)
            case "NotAuthorizedException": return try NotAuthorizedException.makeError(baseError: baseError)
            case "PasswordHistoryPolicyViolationException": return try PasswordHistoryPolicyViolationException.makeError(baseError: baseError)
            case "PasswordResetRequiredException": return try PasswordResetRequiredException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "SoftwareTokenMFANotFoundException": return try SoftwareTokenMFANotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            case "UnexpectedLambdaException": return try UnexpectedLambdaException.makeError(baseError: baseError)
            case "UserLambdaValidationException": return try UserLambdaValidationException.makeError(baseError: baseError)
            case "UserNotConfirmedException": return try UserNotConfirmedException.makeError(baseError: baseError)
            case "UserNotFoundException": return try UserNotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum AdminSetUserMFAPreferenceOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalErrorException": return try InternalErrorException.makeError(baseError: baseError)
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "NotAuthorizedException": return try NotAuthorizedException.makeError(baseError: baseError)
            case "PasswordResetRequiredException": return try PasswordResetRequiredException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "UserNotConfirmedException": return try UserNotConfirmedException.makeError(baseError: baseError)
            case "UserNotFoundException": return try UserNotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum AdminSetUserPasswordOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalErrorException": return try InternalErrorException.makeError(baseError: baseError)
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "InvalidPasswordException": return try InvalidPasswordException.makeError(baseError: baseError)
            case "NotAuthorizedException": return try NotAuthorizedException.makeError(baseError: baseError)
            case "PasswordHistoryPolicyViolationException": return try PasswordHistoryPolicyViolationException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            case "UserNotFoundException": return try UserNotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum AdminSetUserSettingsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalErrorException": return try InternalErrorException.makeError(baseError: baseError)
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "NotAuthorizedException": return try NotAuthorizedException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "UserNotFoundException": return try UserNotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum AdminUpdateAuthEventFeedbackOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalErrorException": return try InternalErrorException.makeError(baseError: baseError)
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "NotAuthorizedException": return try NotAuthorizedException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            case "UserNotFoundException": return try UserNotFoundException.makeError(baseError: baseError)
            case "UserPoolAddOnNotEnabledException": return try UserPoolAddOnNotEnabledException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum AdminUpdateDeviceStatusOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalErrorException": return try InternalErrorException.makeError(baseError: baseError)
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "InvalidUserPoolConfigurationException": return try InvalidUserPoolConfigurationException.makeError(baseError: baseError)
            case "NotAuthorizedException": return try NotAuthorizedException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            case "UserNotFoundException": return try UserNotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum AdminUpdateUserAttributesOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AliasExistsException": return try AliasExistsException.makeError(baseError: baseError)
            case "InternalErrorException": return try InternalErrorException.makeError(baseError: baseError)
            case "InvalidEmailRoleAccessPolicyException": return try InvalidEmailRoleAccessPolicyException.makeError(baseError: baseError)
            case "InvalidLambdaResponseException": return try InvalidLambdaResponseException.makeError(baseError: baseError)
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "InvalidSmsRoleAccessPolicyException": return try InvalidSmsRoleAccessPolicyException.makeError(baseError: baseError)
            case "InvalidSmsRoleTrustRelationshipException": return try InvalidSmsRoleTrustRelationshipException.makeError(baseError: baseError)
            case "NotAuthorizedException": return try NotAuthorizedException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            case "UnexpectedLambdaException": return try UnexpectedLambdaException.makeError(baseError: baseError)
            case "UserLambdaValidationException": return try UserLambdaValidationException.makeError(baseError: baseError)
            case "UserNotFoundException": return try UserNotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum AdminUserGlobalSignOutOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalErrorException": return try InternalErrorException.makeError(baseError: baseError)
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "NotAuthorizedException": return try NotAuthorizedException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            case "UserNotFoundException": return try UserNotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum AssociateSoftwareTokenOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ConcurrentModificationException": return try ConcurrentModificationException.makeError(baseError: baseError)
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "InternalErrorException": return try InternalErrorException.makeError(baseError: baseError)
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "NotAuthorizedException": return try NotAuthorizedException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "SoftwareTokenMFANotFoundException": return try SoftwareTokenMFANotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ChangePasswordOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "InternalErrorException": return try InternalErrorException.makeError(baseError: baseError)
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "InvalidPasswordException": return try InvalidPasswordException.makeError(baseError: baseError)
            case "LimitExceededException": return try LimitExceededException.makeError(baseError: baseError)
            case "NotAuthorizedException": return try NotAuthorizedException.makeError(baseError: baseError)
            case "PasswordHistoryPolicyViolationException": return try PasswordHistoryPolicyViolationException.makeError(baseError: baseError)
            case "PasswordResetRequiredException": return try PasswordResetRequiredException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            case "UserNotConfirmedException": return try UserNotConfirmedException.makeError(baseError: baseError)
            case "UserNotFoundException": return try UserNotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ConfirmDeviceOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "InternalErrorException": return try InternalErrorException.makeError(baseError: baseError)
            case "InvalidLambdaResponseException": return try InvalidLambdaResponseException.makeError(baseError: baseError)
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "InvalidPasswordException": return try InvalidPasswordException.makeError(baseError: baseError)
            case "InvalidUserPoolConfigurationException": return try InvalidUserPoolConfigurationException.makeError(baseError: baseError)
            case "NotAuthorizedException": return try NotAuthorizedException.makeError(baseError: baseError)
            case "PasswordResetRequiredException": return try PasswordResetRequiredException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            case "UsernameExistsException": return try UsernameExistsException.makeError(baseError: baseError)
            case "UserNotConfirmedException": return try UserNotConfirmedException.makeError(baseError: baseError)
            case "UserNotFoundException": return try UserNotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ConfirmForgotPasswordOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "CodeMismatchException": return try CodeMismatchException.makeError(baseError: baseError)
            case "ExpiredCodeException": return try ExpiredCodeException.makeError(baseError: baseError)
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "InternalErrorException": return try InternalErrorException.makeError(baseError: baseError)
            case "InvalidLambdaResponseException": return try InvalidLambdaResponseException.makeError(baseError: baseError)
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "InvalidPasswordException": return try InvalidPasswordException.makeError(baseError: baseError)
            case "LimitExceededException": return try LimitExceededException.makeError(baseError: baseError)
            case "NotAuthorizedException": return try NotAuthorizedException.makeError(baseError: baseError)
            case "PasswordHistoryPolicyViolationException": return try PasswordHistoryPolicyViolationException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "TooManyFailedAttemptsException": return try TooManyFailedAttemptsException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            case "UnexpectedLambdaException": return try UnexpectedLambdaException.makeError(baseError: baseError)
            case "UserLambdaValidationException": return try UserLambdaValidationException.makeError(baseError: baseError)
            case "UserNotConfirmedException": return try UserNotConfirmedException.makeError(baseError: baseError)
            case "UserNotFoundException": return try UserNotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ConfirmSignUpOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AliasExistsException": return try AliasExistsException.makeError(baseError: baseError)
            case "CodeMismatchException": return try CodeMismatchException.makeError(baseError: baseError)
            case "ExpiredCodeException": return try ExpiredCodeException.makeError(baseError: baseError)
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "InternalErrorException": return try InternalErrorException.makeError(baseError: baseError)
            case "InvalidLambdaResponseException": return try InvalidLambdaResponseException.makeError(baseError: baseError)
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "LimitExceededException": return try LimitExceededException.makeError(baseError: baseError)
            case "NotAuthorizedException": return try NotAuthorizedException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "TooManyFailedAttemptsException": return try TooManyFailedAttemptsException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            case "UnexpectedLambdaException": return try UnexpectedLambdaException.makeError(baseError: baseError)
            case "UserLambdaValidationException": return try UserLambdaValidationException.makeError(baseError: baseError)
            case "UserNotFoundException": return try UserNotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateGroupOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "GroupExistsException": return try GroupExistsException.makeError(baseError: baseError)
            case "InternalErrorException": return try InternalErrorException.makeError(baseError: baseError)
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "LimitExceededException": return try LimitExceededException.makeError(baseError: baseError)
            case "NotAuthorizedException": return try NotAuthorizedException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateIdentityProviderOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "DuplicateProviderException": return try DuplicateProviderException.makeError(baseError: baseError)
            case "InternalErrorException": return try InternalErrorException.makeError(baseError: baseError)
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "LimitExceededException": return try LimitExceededException.makeError(baseError: baseError)
            case "NotAuthorizedException": return try NotAuthorizedException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateResourceServerOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalErrorException": return try InternalErrorException.makeError(baseError: baseError)
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "LimitExceededException": return try LimitExceededException.makeError(baseError: baseError)
            case "NotAuthorizedException": return try NotAuthorizedException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateUserImportJobOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalErrorException": return try InternalErrorException.makeError(baseError: baseError)
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "LimitExceededException": return try LimitExceededException.makeError(baseError: baseError)
            case "NotAuthorizedException": return try NotAuthorizedException.makeError(baseError: baseError)
            case "PreconditionNotMetException": return try PreconditionNotMetException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateUserPoolOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalErrorException": return try InternalErrorException.makeError(baseError: baseError)
            case "InvalidEmailRoleAccessPolicyException": return try InvalidEmailRoleAccessPolicyException.makeError(baseError: baseError)
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "InvalidSmsRoleAccessPolicyException": return try InvalidSmsRoleAccessPolicyException.makeError(baseError: baseError)
            case "InvalidSmsRoleTrustRelationshipException": return try InvalidSmsRoleTrustRelationshipException.makeError(baseError: baseError)
            case "LimitExceededException": return try LimitExceededException.makeError(baseError: baseError)
            case "NotAuthorizedException": return try NotAuthorizedException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            case "UserPoolTaggingException": return try UserPoolTaggingException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateUserPoolClientOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalErrorException": return try InternalErrorException.makeError(baseError: baseError)
            case "InvalidOAuthFlowException": return try InvalidOAuthFlowException.makeError(baseError: baseError)
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "LimitExceededException": return try LimitExceededException.makeError(baseError: baseError)
            case "NotAuthorizedException": return try NotAuthorizedException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ScopeDoesNotExistException": return try ScopeDoesNotExistException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateUserPoolDomainOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalErrorException": return try InternalErrorException.makeError(baseError: baseError)
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "LimitExceededException": return try LimitExceededException.makeError(baseError: baseError)
            case "NotAuthorizedException": return try NotAuthorizedException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteGroupOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalErrorException": return try InternalErrorException.makeError(baseError: baseError)
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "NotAuthorizedException": return try NotAuthorizedException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteIdentityProviderOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ConcurrentModificationException": return try ConcurrentModificationException.makeError(baseError: baseError)
            case "InternalErrorException": return try InternalErrorException.makeError(baseError: baseError)
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "NotAuthorizedException": return try NotAuthorizedException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            case "UnsupportedIdentityProviderException": return try UnsupportedIdentityProviderException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteResourceServerOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalErrorException": return try InternalErrorException.makeError(baseError: baseError)
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "NotAuthorizedException": return try NotAuthorizedException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteUserOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "InternalErrorException": return try InternalErrorException.makeError(baseError: baseError)
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "NotAuthorizedException": return try NotAuthorizedException.makeError(baseError: baseError)
            case "PasswordResetRequiredException": return try PasswordResetRequiredException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            case "UserNotConfirmedException": return try UserNotConfirmedException.makeError(baseError: baseError)
            case "UserNotFoundException": return try UserNotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteUserAttributesOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "InternalErrorException": return try InternalErrorException.makeError(baseError: baseError)
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "NotAuthorizedException": return try NotAuthorizedException.makeError(baseError: baseError)
            case "PasswordResetRequiredException": return try PasswordResetRequiredException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            case "UserNotConfirmedException": return try UserNotConfirmedException.makeError(baseError: baseError)
            case "UserNotFoundException": return try UserNotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteUserPoolOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalErrorException": return try InternalErrorException.makeError(baseError: baseError)
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "NotAuthorizedException": return try NotAuthorizedException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            case "UserImportInProgressException": return try UserImportInProgressException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteUserPoolClientOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ConcurrentModificationException": return try ConcurrentModificationException.makeError(baseError: baseError)
            case "InternalErrorException": return try InternalErrorException.makeError(baseError: baseError)
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "NotAuthorizedException": return try NotAuthorizedException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteUserPoolDomainOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalErrorException": return try InternalErrorException.makeError(baseError: baseError)
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "NotAuthorizedException": return try NotAuthorizedException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeIdentityProviderOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalErrorException": return try InternalErrorException.makeError(baseError: baseError)
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "NotAuthorizedException": return try NotAuthorizedException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeResourceServerOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalErrorException": return try InternalErrorException.makeError(baseError: baseError)
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "NotAuthorizedException": return try NotAuthorizedException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeRiskConfigurationOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalErrorException": return try InternalErrorException.makeError(baseError: baseError)
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "NotAuthorizedException": return try NotAuthorizedException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            case "UserPoolAddOnNotEnabledException": return try UserPoolAddOnNotEnabledException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeUserImportJobOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalErrorException": return try InternalErrorException.makeError(baseError: baseError)
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "NotAuthorizedException": return try NotAuthorizedException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeUserPoolOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalErrorException": return try InternalErrorException.makeError(baseError: baseError)
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "NotAuthorizedException": return try NotAuthorizedException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            case "UserPoolTaggingException": return try UserPoolTaggingException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeUserPoolClientOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalErrorException": return try InternalErrorException.makeError(baseError: baseError)
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "NotAuthorizedException": return try NotAuthorizedException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeUserPoolDomainOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalErrorException": return try InternalErrorException.makeError(baseError: baseError)
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "NotAuthorizedException": return try NotAuthorizedException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ForgetDeviceOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "InternalErrorException": return try InternalErrorException.makeError(baseError: baseError)
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "InvalidUserPoolConfigurationException": return try InvalidUserPoolConfigurationException.makeError(baseError: baseError)
            case "NotAuthorizedException": return try NotAuthorizedException.makeError(baseError: baseError)
            case "PasswordResetRequiredException": return try PasswordResetRequiredException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            case "UserNotConfirmedException": return try UserNotConfirmedException.makeError(baseError: baseError)
            case "UserNotFoundException": return try UserNotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ForgotPasswordOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "CodeDeliveryFailureException": return try CodeDeliveryFailureException.makeError(baseError: baseError)
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "InternalErrorException": return try InternalErrorException.makeError(baseError: baseError)
            case "InvalidEmailRoleAccessPolicyException": return try InvalidEmailRoleAccessPolicyException.makeError(baseError: baseError)
            case "InvalidLambdaResponseException": return try InvalidLambdaResponseException.makeError(baseError: baseError)
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "InvalidSmsRoleAccessPolicyException": return try InvalidSmsRoleAccessPolicyException.makeError(baseError: baseError)
            case "InvalidSmsRoleTrustRelationshipException": return try InvalidSmsRoleTrustRelationshipException.makeError(baseError: baseError)
            case "LimitExceededException": return try LimitExceededException.makeError(baseError: baseError)
            case "NotAuthorizedException": return try NotAuthorizedException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            case "UnexpectedLambdaException": return try UnexpectedLambdaException.makeError(baseError: baseError)
            case "UserLambdaValidationException": return try UserLambdaValidationException.makeError(baseError: baseError)
            case "UserNotFoundException": return try UserNotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetCSVHeaderOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalErrorException": return try InternalErrorException.makeError(baseError: baseError)
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "NotAuthorizedException": return try NotAuthorizedException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetDeviceOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "InternalErrorException": return try InternalErrorException.makeError(baseError: baseError)
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "InvalidUserPoolConfigurationException": return try InvalidUserPoolConfigurationException.makeError(baseError: baseError)
            case "NotAuthorizedException": return try NotAuthorizedException.makeError(baseError: baseError)
            case "PasswordResetRequiredException": return try PasswordResetRequiredException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            case "UserNotConfirmedException": return try UserNotConfirmedException.makeError(baseError: baseError)
            case "UserNotFoundException": return try UserNotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetGroupOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalErrorException": return try InternalErrorException.makeError(baseError: baseError)
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "NotAuthorizedException": return try NotAuthorizedException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetIdentityProviderByIdentifierOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalErrorException": return try InternalErrorException.makeError(baseError: baseError)
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "NotAuthorizedException": return try NotAuthorizedException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetLogDeliveryConfigurationOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalErrorException": return try InternalErrorException.makeError(baseError: baseError)
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "NotAuthorizedException": return try NotAuthorizedException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetSigningCertificateOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalErrorException": return try InternalErrorException.makeError(baseError: baseError)
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetUICustomizationOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalErrorException": return try InternalErrorException.makeError(baseError: baseError)
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "NotAuthorizedException": return try NotAuthorizedException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetUserOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "InternalErrorException": return try InternalErrorException.makeError(baseError: baseError)
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "NotAuthorizedException": return try NotAuthorizedException.makeError(baseError: baseError)
            case "PasswordResetRequiredException": return try PasswordResetRequiredException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            case "UserNotConfirmedException": return try UserNotConfirmedException.makeError(baseError: baseError)
            case "UserNotFoundException": return try UserNotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetUserAttributeVerificationCodeOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "CodeDeliveryFailureException": return try CodeDeliveryFailureException.makeError(baseError: baseError)
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "InternalErrorException": return try InternalErrorException.makeError(baseError: baseError)
            case "InvalidEmailRoleAccessPolicyException": return try InvalidEmailRoleAccessPolicyException.makeError(baseError: baseError)
            case "InvalidLambdaResponseException": return try InvalidLambdaResponseException.makeError(baseError: baseError)
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "InvalidSmsRoleAccessPolicyException": return try InvalidSmsRoleAccessPolicyException.makeError(baseError: baseError)
            case "InvalidSmsRoleTrustRelationshipException": return try InvalidSmsRoleTrustRelationshipException.makeError(baseError: baseError)
            case "LimitExceededException": return try LimitExceededException.makeError(baseError: baseError)
            case "NotAuthorizedException": return try NotAuthorizedException.makeError(baseError: baseError)
            case "PasswordResetRequiredException": return try PasswordResetRequiredException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            case "UnexpectedLambdaException": return try UnexpectedLambdaException.makeError(baseError: baseError)
            case "UserLambdaValidationException": return try UserLambdaValidationException.makeError(baseError: baseError)
            case "UserNotConfirmedException": return try UserNotConfirmedException.makeError(baseError: baseError)
            case "UserNotFoundException": return try UserNotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetUserPoolMfaConfigOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalErrorException": return try InternalErrorException.makeError(baseError: baseError)
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "NotAuthorizedException": return try NotAuthorizedException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GlobalSignOutOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "InternalErrorException": return try InternalErrorException.makeError(baseError: baseError)
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "NotAuthorizedException": return try NotAuthorizedException.makeError(baseError: baseError)
            case "PasswordResetRequiredException": return try PasswordResetRequiredException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            case "UserNotConfirmedException": return try UserNotConfirmedException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum InitiateAuthOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "InternalErrorException": return try InternalErrorException.makeError(baseError: baseError)
            case "InvalidEmailRoleAccessPolicyException": return try InvalidEmailRoleAccessPolicyException.makeError(baseError: baseError)
            case "InvalidLambdaResponseException": return try InvalidLambdaResponseException.makeError(baseError: baseError)
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "InvalidSmsRoleAccessPolicyException": return try InvalidSmsRoleAccessPolicyException.makeError(baseError: baseError)
            case "InvalidSmsRoleTrustRelationshipException": return try InvalidSmsRoleTrustRelationshipException.makeError(baseError: baseError)
            case "InvalidUserPoolConfigurationException": return try InvalidUserPoolConfigurationException.makeError(baseError: baseError)
            case "NotAuthorizedException": return try NotAuthorizedException.makeError(baseError: baseError)
            case "PasswordResetRequiredException": return try PasswordResetRequiredException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            case "UnexpectedLambdaException": return try UnexpectedLambdaException.makeError(baseError: baseError)
            case "UserLambdaValidationException": return try UserLambdaValidationException.makeError(baseError: baseError)
            case "UserNotConfirmedException": return try UserNotConfirmedException.makeError(baseError: baseError)
            case "UserNotFoundException": return try UserNotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListDevicesOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "InternalErrorException": return try InternalErrorException.makeError(baseError: baseError)
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "InvalidUserPoolConfigurationException": return try InvalidUserPoolConfigurationException.makeError(baseError: baseError)
            case "NotAuthorizedException": return try NotAuthorizedException.makeError(baseError: baseError)
            case "PasswordResetRequiredException": return try PasswordResetRequiredException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            case "UserNotConfirmedException": return try UserNotConfirmedException.makeError(baseError: baseError)
            case "UserNotFoundException": return try UserNotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListGroupsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalErrorException": return try InternalErrorException.makeError(baseError: baseError)
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "NotAuthorizedException": return try NotAuthorizedException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListIdentityProvidersOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalErrorException": return try InternalErrorException.makeError(baseError: baseError)
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "NotAuthorizedException": return try NotAuthorizedException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListResourceServersOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalErrorException": return try InternalErrorException.makeError(baseError: baseError)
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "NotAuthorizedException": return try NotAuthorizedException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListTagsForResourceOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalErrorException": return try InternalErrorException.makeError(baseError: baseError)
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "NotAuthorizedException": return try NotAuthorizedException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListUserImportJobsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalErrorException": return try InternalErrorException.makeError(baseError: baseError)
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "NotAuthorizedException": return try NotAuthorizedException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListUserPoolClientsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalErrorException": return try InternalErrorException.makeError(baseError: baseError)
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "NotAuthorizedException": return try NotAuthorizedException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListUserPoolsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalErrorException": return try InternalErrorException.makeError(baseError: baseError)
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "NotAuthorizedException": return try NotAuthorizedException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListUsersOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalErrorException": return try InternalErrorException.makeError(baseError: baseError)
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "NotAuthorizedException": return try NotAuthorizedException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListUsersInGroupOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalErrorException": return try InternalErrorException.makeError(baseError: baseError)
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "NotAuthorizedException": return try NotAuthorizedException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ResendConfirmationCodeOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "CodeDeliveryFailureException": return try CodeDeliveryFailureException.makeError(baseError: baseError)
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "InternalErrorException": return try InternalErrorException.makeError(baseError: baseError)
            case "InvalidEmailRoleAccessPolicyException": return try InvalidEmailRoleAccessPolicyException.makeError(baseError: baseError)
            case "InvalidLambdaResponseException": return try InvalidLambdaResponseException.makeError(baseError: baseError)
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "InvalidSmsRoleAccessPolicyException": return try InvalidSmsRoleAccessPolicyException.makeError(baseError: baseError)
            case "InvalidSmsRoleTrustRelationshipException": return try InvalidSmsRoleTrustRelationshipException.makeError(baseError: baseError)
            case "LimitExceededException": return try LimitExceededException.makeError(baseError: baseError)
            case "NotAuthorizedException": return try NotAuthorizedException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            case "UnexpectedLambdaException": return try UnexpectedLambdaException.makeError(baseError: baseError)
            case "UserLambdaValidationException": return try UserLambdaValidationException.makeError(baseError: baseError)
            case "UserNotFoundException": return try UserNotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum RespondToAuthChallengeOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AliasExistsException": return try AliasExistsException.makeError(baseError: baseError)
            case "CodeMismatchException": return try CodeMismatchException.makeError(baseError: baseError)
            case "ExpiredCodeException": return try ExpiredCodeException.makeError(baseError: baseError)
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "InternalErrorException": return try InternalErrorException.makeError(baseError: baseError)
            case "InvalidEmailRoleAccessPolicyException": return try InvalidEmailRoleAccessPolicyException.makeError(baseError: baseError)
            case "InvalidLambdaResponseException": return try InvalidLambdaResponseException.makeError(baseError: baseError)
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "InvalidPasswordException": return try InvalidPasswordException.makeError(baseError: baseError)
            case "InvalidSmsRoleAccessPolicyException": return try InvalidSmsRoleAccessPolicyException.makeError(baseError: baseError)
            case "InvalidSmsRoleTrustRelationshipException": return try InvalidSmsRoleTrustRelationshipException.makeError(baseError: baseError)
            case "InvalidUserPoolConfigurationException": return try InvalidUserPoolConfigurationException.makeError(baseError: baseError)
            case "MFAMethodNotFoundException": return try MFAMethodNotFoundException.makeError(baseError: baseError)
            case "NotAuthorizedException": return try NotAuthorizedException.makeError(baseError: baseError)
            case "PasswordHistoryPolicyViolationException": return try PasswordHistoryPolicyViolationException.makeError(baseError: baseError)
            case "PasswordResetRequiredException": return try PasswordResetRequiredException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "SoftwareTokenMFANotFoundException": return try SoftwareTokenMFANotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            case "UnexpectedLambdaException": return try UnexpectedLambdaException.makeError(baseError: baseError)
            case "UserLambdaValidationException": return try UserLambdaValidationException.makeError(baseError: baseError)
            case "UserNotConfirmedException": return try UserNotConfirmedException.makeError(baseError: baseError)
            case "UserNotFoundException": return try UserNotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum RevokeTokenOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "InternalErrorException": return try InternalErrorException.makeError(baseError: baseError)
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            case "UnauthorizedException": return try UnauthorizedException.makeError(baseError: baseError)
            case "UnsupportedOperationException": return try UnsupportedOperationException.makeError(baseError: baseError)
            case "UnsupportedTokenTypeException": return try UnsupportedTokenTypeException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum SetLogDeliveryConfigurationOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalErrorException": return try InternalErrorException.makeError(baseError: baseError)
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "NotAuthorizedException": return try NotAuthorizedException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum SetRiskConfigurationOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "CodeDeliveryFailureException": return try CodeDeliveryFailureException.makeError(baseError: baseError)
            case "InternalErrorException": return try InternalErrorException.makeError(baseError: baseError)
            case "InvalidEmailRoleAccessPolicyException": return try InvalidEmailRoleAccessPolicyException.makeError(baseError: baseError)
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "NotAuthorizedException": return try NotAuthorizedException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            case "UserPoolAddOnNotEnabledException": return try UserPoolAddOnNotEnabledException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum SetUICustomizationOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalErrorException": return try InternalErrorException.makeError(baseError: baseError)
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "NotAuthorizedException": return try NotAuthorizedException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum SetUserMFAPreferenceOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "InternalErrorException": return try InternalErrorException.makeError(baseError: baseError)
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "NotAuthorizedException": return try NotAuthorizedException.makeError(baseError: baseError)
            case "PasswordResetRequiredException": return try PasswordResetRequiredException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "UserNotConfirmedException": return try UserNotConfirmedException.makeError(baseError: baseError)
            case "UserNotFoundException": return try UserNotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum SetUserPoolMfaConfigOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ConcurrentModificationException": return try ConcurrentModificationException.makeError(baseError: baseError)
            case "InternalErrorException": return try InternalErrorException.makeError(baseError: baseError)
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "InvalidSmsRoleAccessPolicyException": return try InvalidSmsRoleAccessPolicyException.makeError(baseError: baseError)
            case "InvalidSmsRoleTrustRelationshipException": return try InvalidSmsRoleTrustRelationshipException.makeError(baseError: baseError)
            case "NotAuthorizedException": return try NotAuthorizedException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum SetUserSettingsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "InternalErrorException": return try InternalErrorException.makeError(baseError: baseError)
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "NotAuthorizedException": return try NotAuthorizedException.makeError(baseError: baseError)
            case "PasswordResetRequiredException": return try PasswordResetRequiredException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "UserNotConfirmedException": return try UserNotConfirmedException.makeError(baseError: baseError)
            case "UserNotFoundException": return try UserNotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum SignUpOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "CodeDeliveryFailureException": return try CodeDeliveryFailureException.makeError(baseError: baseError)
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "InternalErrorException": return try InternalErrorException.makeError(baseError: baseError)
            case "InvalidEmailRoleAccessPolicyException": return try InvalidEmailRoleAccessPolicyException.makeError(baseError: baseError)
            case "InvalidLambdaResponseException": return try InvalidLambdaResponseException.makeError(baseError: baseError)
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "InvalidPasswordException": return try InvalidPasswordException.makeError(baseError: baseError)
            case "InvalidSmsRoleAccessPolicyException": return try InvalidSmsRoleAccessPolicyException.makeError(baseError: baseError)
            case "InvalidSmsRoleTrustRelationshipException": return try InvalidSmsRoleTrustRelationshipException.makeError(baseError: baseError)
            case "LimitExceededException": return try LimitExceededException.makeError(baseError: baseError)
            case "NotAuthorizedException": return try NotAuthorizedException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            case "UnexpectedLambdaException": return try UnexpectedLambdaException.makeError(baseError: baseError)
            case "UserLambdaValidationException": return try UserLambdaValidationException.makeError(baseError: baseError)
            case "UsernameExistsException": return try UsernameExistsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum StartUserImportJobOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalErrorException": return try InternalErrorException.makeError(baseError: baseError)
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "NotAuthorizedException": return try NotAuthorizedException.makeError(baseError: baseError)
            case "PreconditionNotMetException": return try PreconditionNotMetException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum StopUserImportJobOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalErrorException": return try InternalErrorException.makeError(baseError: baseError)
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "NotAuthorizedException": return try NotAuthorizedException.makeError(baseError: baseError)
            case "PreconditionNotMetException": return try PreconditionNotMetException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum TagResourceOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalErrorException": return try InternalErrorException.makeError(baseError: baseError)
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "NotAuthorizedException": return try NotAuthorizedException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UntagResourceOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalErrorException": return try InternalErrorException.makeError(baseError: baseError)
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "NotAuthorizedException": return try NotAuthorizedException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdateAuthEventFeedbackOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalErrorException": return try InternalErrorException.makeError(baseError: baseError)
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "NotAuthorizedException": return try NotAuthorizedException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            case "UserNotFoundException": return try UserNotFoundException.makeError(baseError: baseError)
            case "UserPoolAddOnNotEnabledException": return try UserPoolAddOnNotEnabledException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdateDeviceStatusOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "InternalErrorException": return try InternalErrorException.makeError(baseError: baseError)
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "InvalidUserPoolConfigurationException": return try InvalidUserPoolConfigurationException.makeError(baseError: baseError)
            case "NotAuthorizedException": return try NotAuthorizedException.makeError(baseError: baseError)
            case "PasswordResetRequiredException": return try PasswordResetRequiredException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            case "UserNotConfirmedException": return try UserNotConfirmedException.makeError(baseError: baseError)
            case "UserNotFoundException": return try UserNotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdateGroupOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalErrorException": return try InternalErrorException.makeError(baseError: baseError)
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "NotAuthorizedException": return try NotAuthorizedException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdateIdentityProviderOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ConcurrentModificationException": return try ConcurrentModificationException.makeError(baseError: baseError)
            case "InternalErrorException": return try InternalErrorException.makeError(baseError: baseError)
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "NotAuthorizedException": return try NotAuthorizedException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            case "UnsupportedIdentityProviderException": return try UnsupportedIdentityProviderException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdateResourceServerOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalErrorException": return try InternalErrorException.makeError(baseError: baseError)
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "NotAuthorizedException": return try NotAuthorizedException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdateUserAttributesOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AliasExistsException": return try AliasExistsException.makeError(baseError: baseError)
            case "CodeDeliveryFailureException": return try CodeDeliveryFailureException.makeError(baseError: baseError)
            case "CodeMismatchException": return try CodeMismatchException.makeError(baseError: baseError)
            case "ExpiredCodeException": return try ExpiredCodeException.makeError(baseError: baseError)
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "InternalErrorException": return try InternalErrorException.makeError(baseError: baseError)
            case "InvalidEmailRoleAccessPolicyException": return try InvalidEmailRoleAccessPolicyException.makeError(baseError: baseError)
            case "InvalidLambdaResponseException": return try InvalidLambdaResponseException.makeError(baseError: baseError)
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "InvalidSmsRoleAccessPolicyException": return try InvalidSmsRoleAccessPolicyException.makeError(baseError: baseError)
            case "InvalidSmsRoleTrustRelationshipException": return try InvalidSmsRoleTrustRelationshipException.makeError(baseError: baseError)
            case "NotAuthorizedException": return try NotAuthorizedException.makeError(baseError: baseError)
            case "PasswordResetRequiredException": return try PasswordResetRequiredException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            case "UnexpectedLambdaException": return try UnexpectedLambdaException.makeError(baseError: baseError)
            case "UserLambdaValidationException": return try UserLambdaValidationException.makeError(baseError: baseError)
            case "UserNotConfirmedException": return try UserNotConfirmedException.makeError(baseError: baseError)
            case "UserNotFoundException": return try UserNotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdateUserPoolOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ConcurrentModificationException": return try ConcurrentModificationException.makeError(baseError: baseError)
            case "InternalErrorException": return try InternalErrorException.makeError(baseError: baseError)
            case "InvalidEmailRoleAccessPolicyException": return try InvalidEmailRoleAccessPolicyException.makeError(baseError: baseError)
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "InvalidSmsRoleAccessPolicyException": return try InvalidSmsRoleAccessPolicyException.makeError(baseError: baseError)
            case "InvalidSmsRoleTrustRelationshipException": return try InvalidSmsRoleTrustRelationshipException.makeError(baseError: baseError)
            case "NotAuthorizedException": return try NotAuthorizedException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            case "UserImportInProgressException": return try UserImportInProgressException.makeError(baseError: baseError)
            case "UserPoolTaggingException": return try UserPoolTaggingException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdateUserPoolClientOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ConcurrentModificationException": return try ConcurrentModificationException.makeError(baseError: baseError)
            case "InternalErrorException": return try InternalErrorException.makeError(baseError: baseError)
            case "InvalidOAuthFlowException": return try InvalidOAuthFlowException.makeError(baseError: baseError)
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "NotAuthorizedException": return try NotAuthorizedException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ScopeDoesNotExistException": return try ScopeDoesNotExistException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdateUserPoolDomainOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalErrorException": return try InternalErrorException.makeError(baseError: baseError)
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "NotAuthorizedException": return try NotAuthorizedException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum VerifySoftwareTokenOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "CodeMismatchException": return try CodeMismatchException.makeError(baseError: baseError)
            case "EnableSoftwareTokenMFAException": return try EnableSoftwareTokenMFAException.makeError(baseError: baseError)
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "InternalErrorException": return try InternalErrorException.makeError(baseError: baseError)
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "InvalidUserPoolConfigurationException": return try InvalidUserPoolConfigurationException.makeError(baseError: baseError)
            case "NotAuthorizedException": return try NotAuthorizedException.makeError(baseError: baseError)
            case "PasswordResetRequiredException": return try PasswordResetRequiredException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "SoftwareTokenMFANotFoundException": return try SoftwareTokenMFANotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            case "UserNotConfirmedException": return try UserNotConfirmedException.makeError(baseError: baseError)
            case "UserNotFoundException": return try UserNotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum VerifyUserAttributeOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AliasExistsException": return try AliasExistsException.makeError(baseError: baseError)
            case "CodeMismatchException": return try CodeMismatchException.makeError(baseError: baseError)
            case "ExpiredCodeException": return try ExpiredCodeException.makeError(baseError: baseError)
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "InternalErrorException": return try InternalErrorException.makeError(baseError: baseError)
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "LimitExceededException": return try LimitExceededException.makeError(baseError: baseError)
            case "NotAuthorizedException": return try NotAuthorizedException.makeError(baseError: baseError)
            case "PasswordResetRequiredException": return try PasswordResetRequiredException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            case "UserNotConfirmedException": return try UserNotConfirmedException.makeError(baseError: baseError)
            case "UserNotFoundException": return try UserNotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

extension InvalidParameterException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> InvalidParameterException {
        let reader = baseError.errorBodyReader
        var value = InvalidParameterException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension UserImportInProgressException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> UserImportInProgressException {
        let reader = baseError.errorBodyReader
        var value = UserImportInProgressException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ResourceNotFoundException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> ResourceNotFoundException {
        let reader = baseError.errorBodyReader
        var value = ResourceNotFoundException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension InternalErrorException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> InternalErrorException {
        let reader = baseError.errorBodyReader
        var value = InternalErrorException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension NotAuthorizedException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> NotAuthorizedException {
        let reader = baseError.errorBodyReader
        var value = NotAuthorizedException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension TooManyRequestsException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> TooManyRequestsException {
        let reader = baseError.errorBodyReader
        var value = TooManyRequestsException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension UserNotFoundException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> UserNotFoundException {
        let reader = baseError.errorBodyReader
        var value = UserNotFoundException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension UnexpectedLambdaException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> UnexpectedLambdaException {
        let reader = baseError.errorBodyReader
        var value = UnexpectedLambdaException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension TooManyFailedAttemptsException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> TooManyFailedAttemptsException {
        let reader = baseError.errorBodyReader
        var value = TooManyFailedAttemptsException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension UserLambdaValidationException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> UserLambdaValidationException {
        let reader = baseError.errorBodyReader
        var value = UserLambdaValidationException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension LimitExceededException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> LimitExceededException {
        let reader = baseError.errorBodyReader
        var value = LimitExceededException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension InvalidLambdaResponseException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> InvalidLambdaResponseException {
        let reader = baseError.errorBodyReader
        var value = InvalidLambdaResponseException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension CodeDeliveryFailureException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> CodeDeliveryFailureException {
        let reader = baseError.errorBodyReader
        var value = CodeDeliveryFailureException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension InvalidSmsRoleTrustRelationshipException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> InvalidSmsRoleTrustRelationshipException {
        let reader = baseError.errorBodyReader
        var value = InvalidSmsRoleTrustRelationshipException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension InvalidSmsRoleAccessPolicyException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> InvalidSmsRoleAccessPolicyException {
        let reader = baseError.errorBodyReader
        var value = InvalidSmsRoleAccessPolicyException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension PreconditionNotMetException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> PreconditionNotMetException {
        let reader = baseError.errorBodyReader
        var value = PreconditionNotMetException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension InvalidPasswordException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> InvalidPasswordException {
        let reader = baseError.errorBodyReader
        var value = InvalidPasswordException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension UsernameExistsException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> UsernameExistsException {
        let reader = baseError.errorBodyReader
        var value = UsernameExistsException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension UnsupportedUserStateException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> UnsupportedUserStateException {
        let reader = baseError.errorBodyReader
        var value = UnsupportedUserStateException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension AliasExistsException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> AliasExistsException {
        let reader = baseError.errorBodyReader
        var value = AliasExistsException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension InvalidUserPoolConfigurationException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> InvalidUserPoolConfigurationException {
        let reader = baseError.errorBodyReader
        var value = InvalidUserPoolConfigurationException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension UserNotConfirmedException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> UserNotConfirmedException {
        let reader = baseError.errorBodyReader
        var value = UserNotConfirmedException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension InvalidEmailRoleAccessPolicyException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> InvalidEmailRoleAccessPolicyException {
        let reader = baseError.errorBodyReader
        var value = InvalidEmailRoleAccessPolicyException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension MFAMethodNotFoundException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> MFAMethodNotFoundException {
        let reader = baseError.errorBodyReader
        var value = MFAMethodNotFoundException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension PasswordResetRequiredException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> PasswordResetRequiredException {
        let reader = baseError.errorBodyReader
        var value = PasswordResetRequiredException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension UserPoolAddOnNotEnabledException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> UserPoolAddOnNotEnabledException {
        let reader = baseError.errorBodyReader
        var value = UserPoolAddOnNotEnabledException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ExpiredCodeException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> ExpiredCodeException {
        let reader = baseError.errorBodyReader
        var value = ExpiredCodeException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension CodeMismatchException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> CodeMismatchException {
        let reader = baseError.errorBodyReader
        var value = CodeMismatchException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension PasswordHistoryPolicyViolationException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> PasswordHistoryPolicyViolationException {
        let reader = baseError.errorBodyReader
        var value = PasswordHistoryPolicyViolationException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension SoftwareTokenMFANotFoundException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> SoftwareTokenMFANotFoundException {
        let reader = baseError.errorBodyReader
        var value = SoftwareTokenMFANotFoundException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ForbiddenException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> ForbiddenException {
        let reader = baseError.errorBodyReader
        var value = ForbiddenException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ConcurrentModificationException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> ConcurrentModificationException {
        let reader = baseError.errorBodyReader
        var value = ConcurrentModificationException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension GroupExistsException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> GroupExistsException {
        let reader = baseError.errorBodyReader
        var value = GroupExistsException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension DuplicateProviderException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> DuplicateProviderException {
        let reader = baseError.errorBodyReader
        var value = DuplicateProviderException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension UserPoolTaggingException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> UserPoolTaggingException {
        let reader = baseError.errorBodyReader
        var value = UserPoolTaggingException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ScopeDoesNotExistException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> ScopeDoesNotExistException {
        let reader = baseError.errorBodyReader
        var value = ScopeDoesNotExistException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension InvalidOAuthFlowException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> InvalidOAuthFlowException {
        let reader = baseError.errorBodyReader
        var value = InvalidOAuthFlowException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension UnsupportedIdentityProviderException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> UnsupportedIdentityProviderException {
        let reader = baseError.errorBodyReader
        var value = UnsupportedIdentityProviderException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension UnsupportedTokenTypeException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> UnsupportedTokenTypeException {
        let reader = baseError.errorBodyReader
        var value = UnsupportedTokenTypeException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension UnauthorizedException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> UnauthorizedException {
        let reader = baseError.errorBodyReader
        var value = UnauthorizedException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension UnsupportedOperationException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> UnsupportedOperationException {
        let reader = baseError.errorBodyReader
        var value = UnsupportedOperationException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension EnableSoftwareTokenMFAException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> EnableSoftwareTokenMFAException {
        let reader = baseError.errorBodyReader
        var value = EnableSoftwareTokenMFAException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension CognitoIdentityProviderClientTypes.UserType {

    static func read(from reader: SmithyJSON.Reader) throws -> CognitoIdentityProviderClientTypes.UserType {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = CognitoIdentityProviderClientTypes.UserType()
        value.username = try reader["Username"].readIfPresent()
        value.attributes = try reader["Attributes"].readListIfPresent(memberReadingClosure: CognitoIdentityProviderClientTypes.AttributeType.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.userCreateDate = try reader["UserCreateDate"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.userLastModifiedDate = try reader["UserLastModifiedDate"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.enabled = try reader["Enabled"].readIfPresent() ?? false
        value.userStatus = try reader["UserStatus"].readIfPresent()
        value.mfaOptions = try reader["MFAOptions"].readListIfPresent(memberReadingClosure: CognitoIdentityProviderClientTypes.MFAOptionType.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension CognitoIdentityProviderClientTypes.MFAOptionType {

    static func write(value: CognitoIdentityProviderClientTypes.MFAOptionType?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["AttributeName"].write(value.attributeName)
        try writer["DeliveryMedium"].write(value.deliveryMedium)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> CognitoIdentityProviderClientTypes.MFAOptionType {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = CognitoIdentityProviderClientTypes.MFAOptionType()
        value.deliveryMedium = try reader["DeliveryMedium"].readIfPresent()
        value.attributeName = try reader["AttributeName"].readIfPresent()
        return value
    }
}

extension CognitoIdentityProviderClientTypes.AttributeType {

    static func write(value: CognitoIdentityProviderClientTypes.AttributeType?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Name"].write(value.name)
        try writer["Value"].write(value.value)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> CognitoIdentityProviderClientTypes.AttributeType {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = CognitoIdentityProviderClientTypes.AttributeType()
        value.name = try reader["Name"].readIfPresent() ?? ""
        value.value = try reader["Value"].readIfPresent()
        return value
    }
}

extension CognitoIdentityProviderClientTypes.DeviceType {

    static func read(from reader: SmithyJSON.Reader) throws -> CognitoIdentityProviderClientTypes.DeviceType {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = CognitoIdentityProviderClientTypes.DeviceType()
        value.deviceKey = try reader["DeviceKey"].readIfPresent()
        value.deviceAttributes = try reader["DeviceAttributes"].readListIfPresent(memberReadingClosure: CognitoIdentityProviderClientTypes.AttributeType.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.deviceCreateDate = try reader["DeviceCreateDate"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.deviceLastModifiedDate = try reader["DeviceLastModifiedDate"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.deviceLastAuthenticatedDate = try reader["DeviceLastAuthenticatedDate"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        return value
    }
}

extension CognitoIdentityProviderClientTypes.AuthenticationResultType {

    static func read(from reader: SmithyJSON.Reader) throws -> CognitoIdentityProviderClientTypes.AuthenticationResultType {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = CognitoIdentityProviderClientTypes.AuthenticationResultType()
        value.accessToken = try reader["AccessToken"].readIfPresent()
        value.expiresIn = try reader["ExpiresIn"].readIfPresent() ?? 0
        value.tokenType = try reader["TokenType"].readIfPresent()
        value.refreshToken = try reader["RefreshToken"].readIfPresent()
        value.idToken = try reader["IdToken"].readIfPresent()
        value.newDeviceMetadata = try reader["NewDeviceMetadata"].readIfPresent(with: CognitoIdentityProviderClientTypes.NewDeviceMetadataType.read(from:))
        return value
    }
}

extension CognitoIdentityProviderClientTypes.NewDeviceMetadataType {

    static func read(from reader: SmithyJSON.Reader) throws -> CognitoIdentityProviderClientTypes.NewDeviceMetadataType {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = CognitoIdentityProviderClientTypes.NewDeviceMetadataType()
        value.deviceKey = try reader["DeviceKey"].readIfPresent()
        value.deviceGroupKey = try reader["DeviceGroupKey"].readIfPresent()
        return value
    }
}

extension CognitoIdentityProviderClientTypes.GroupType {

    static func read(from reader: SmithyJSON.Reader) throws -> CognitoIdentityProviderClientTypes.GroupType {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = CognitoIdentityProviderClientTypes.GroupType()
        value.groupName = try reader["GroupName"].readIfPresent()
        value.userPoolId = try reader["UserPoolId"].readIfPresent()
        value.description = try reader["Description"].readIfPresent()
        value.roleArn = try reader["RoleArn"].readIfPresent()
        value.precedence = try reader["Precedence"].readIfPresent()
        value.lastModifiedDate = try reader["LastModifiedDate"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.creationDate = try reader["CreationDate"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        return value
    }
}

extension CognitoIdentityProviderClientTypes.AuthEventType {

    static func read(from reader: SmithyJSON.Reader) throws -> CognitoIdentityProviderClientTypes.AuthEventType {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = CognitoIdentityProviderClientTypes.AuthEventType()
        value.eventId = try reader["EventId"].readIfPresent()
        value.eventType = try reader["EventType"].readIfPresent()
        value.creationDate = try reader["CreationDate"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.eventResponse = try reader["EventResponse"].readIfPresent()
        value.eventRisk = try reader["EventRisk"].readIfPresent(with: CognitoIdentityProviderClientTypes.EventRiskType.read(from:))
        value.challengeResponses = try reader["ChallengeResponses"].readListIfPresent(memberReadingClosure: CognitoIdentityProviderClientTypes.ChallengeResponseType.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.eventContextData = try reader["EventContextData"].readIfPresent(with: CognitoIdentityProviderClientTypes.EventContextDataType.read(from:))
        value.eventFeedback = try reader["EventFeedback"].readIfPresent(with: CognitoIdentityProviderClientTypes.EventFeedbackType.read(from:))
        return value
    }
}

extension CognitoIdentityProviderClientTypes.EventFeedbackType {

    static func read(from reader: SmithyJSON.Reader) throws -> CognitoIdentityProviderClientTypes.EventFeedbackType {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = CognitoIdentityProviderClientTypes.EventFeedbackType()
        value.feedbackValue = try reader["FeedbackValue"].readIfPresent() ?? .sdkUnknown("")
        value.provider = try reader["Provider"].readIfPresent() ?? ""
        value.feedbackDate = try reader["FeedbackDate"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        return value
    }
}

extension CognitoIdentityProviderClientTypes.EventContextDataType {

    static func read(from reader: SmithyJSON.Reader) throws -> CognitoIdentityProviderClientTypes.EventContextDataType {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = CognitoIdentityProviderClientTypes.EventContextDataType()
        value.ipAddress = try reader["IpAddress"].readIfPresent()
        value.deviceName = try reader["DeviceName"].readIfPresent()
        value.timezone = try reader["Timezone"].readIfPresent()
        value.city = try reader["City"].readIfPresent()
        value.country = try reader["Country"].readIfPresent()
        return value
    }
}

extension CognitoIdentityProviderClientTypes.ChallengeResponseType {

    static func read(from reader: SmithyJSON.Reader) throws -> CognitoIdentityProviderClientTypes.ChallengeResponseType {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = CognitoIdentityProviderClientTypes.ChallengeResponseType()
        value.challengeName = try reader["ChallengeName"].readIfPresent()
        value.challengeResponse = try reader["ChallengeResponse"].readIfPresent()
        return value
    }
}

extension CognitoIdentityProviderClientTypes.EventRiskType {

    static func read(from reader: SmithyJSON.Reader) throws -> CognitoIdentityProviderClientTypes.EventRiskType {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = CognitoIdentityProviderClientTypes.EventRiskType()
        value.riskDecision = try reader["RiskDecision"].readIfPresent()
        value.riskLevel = try reader["RiskLevel"].readIfPresent()
        value.compromisedCredentialsDetected = try reader["CompromisedCredentialsDetected"].readIfPresent()
        return value
    }
}

extension CognitoIdentityProviderClientTypes.IdentityProviderType {

    static func read(from reader: SmithyJSON.Reader) throws -> CognitoIdentityProviderClientTypes.IdentityProviderType {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = CognitoIdentityProviderClientTypes.IdentityProviderType()
        value.userPoolId = try reader["UserPoolId"].readIfPresent()
        value.providerName = try reader["ProviderName"].readIfPresent()
        value.providerType = try reader["ProviderType"].readIfPresent()
        value.providerDetails = try reader["ProviderDetails"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        value.attributeMapping = try reader["AttributeMapping"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        value.idpIdentifiers = try reader["IdpIdentifiers"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.lastModifiedDate = try reader["LastModifiedDate"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.creationDate = try reader["CreationDate"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        return value
    }
}

extension CognitoIdentityProviderClientTypes.ResourceServerType {

    static func read(from reader: SmithyJSON.Reader) throws -> CognitoIdentityProviderClientTypes.ResourceServerType {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = CognitoIdentityProviderClientTypes.ResourceServerType()
        value.userPoolId = try reader["UserPoolId"].readIfPresent()
        value.identifier = try reader["Identifier"].readIfPresent()
        value.name = try reader["Name"].readIfPresent()
        value.scopes = try reader["Scopes"].readListIfPresent(memberReadingClosure: CognitoIdentityProviderClientTypes.ResourceServerScopeType.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension CognitoIdentityProviderClientTypes.ResourceServerScopeType {

    static func write(value: CognitoIdentityProviderClientTypes.ResourceServerScopeType?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ScopeDescription"].write(value.scopeDescription)
        try writer["ScopeName"].write(value.scopeName)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> CognitoIdentityProviderClientTypes.ResourceServerScopeType {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = CognitoIdentityProviderClientTypes.ResourceServerScopeType()
        value.scopeName = try reader["ScopeName"].readIfPresent() ?? ""
        value.scopeDescription = try reader["ScopeDescription"].readIfPresent() ?? ""
        return value
    }
}

extension CognitoIdentityProviderClientTypes.UserImportJobType {

    static func read(from reader: SmithyJSON.Reader) throws -> CognitoIdentityProviderClientTypes.UserImportJobType {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = CognitoIdentityProviderClientTypes.UserImportJobType()
        value.jobName = try reader["JobName"].readIfPresent()
        value.jobId = try reader["JobId"].readIfPresent()
        value.userPoolId = try reader["UserPoolId"].readIfPresent()
        value.preSignedUrl = try reader["PreSignedUrl"].readIfPresent()
        value.creationDate = try reader["CreationDate"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.startDate = try reader["StartDate"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.completionDate = try reader["CompletionDate"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.status = try reader["Status"].readIfPresent()
        value.cloudWatchLogsRoleArn = try reader["CloudWatchLogsRoleArn"].readIfPresent()
        value.importedUsers = try reader["ImportedUsers"].readIfPresent() ?? 0
        value.skippedUsers = try reader["SkippedUsers"].readIfPresent() ?? 0
        value.failedUsers = try reader["FailedUsers"].readIfPresent() ?? 0
        value.completionMessage = try reader["CompletionMessage"].readIfPresent()
        return value
    }
}

extension CognitoIdentityProviderClientTypes.UserPoolType {

    static func read(from reader: SmithyJSON.Reader) throws -> CognitoIdentityProviderClientTypes.UserPoolType {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = CognitoIdentityProviderClientTypes.UserPoolType()
        value.id = try reader["Id"].readIfPresent()
        value.name = try reader["Name"].readIfPresent()
        value.policies = try reader["Policies"].readIfPresent(with: CognitoIdentityProviderClientTypes.UserPoolPolicyType.read(from:))
        value.deletionProtection = try reader["DeletionProtection"].readIfPresent()
        value.lambdaConfig = try reader["LambdaConfig"].readIfPresent(with: CognitoIdentityProviderClientTypes.LambdaConfigType.read(from:))
        value.status = try reader["Status"].readIfPresent()
        value.lastModifiedDate = try reader["LastModifiedDate"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.creationDate = try reader["CreationDate"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.schemaAttributes = try reader["SchemaAttributes"].readListIfPresent(memberReadingClosure: CognitoIdentityProviderClientTypes.SchemaAttributeType.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.autoVerifiedAttributes = try reader["AutoVerifiedAttributes"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosureBox<CognitoIdentityProviderClientTypes.VerifiedAttributeType>().read(from:), memberNodeInfo: "member", isFlattened: false)
        value.aliasAttributes = try reader["AliasAttributes"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosureBox<CognitoIdentityProviderClientTypes.AliasAttributeType>().read(from:), memberNodeInfo: "member", isFlattened: false)
        value.usernameAttributes = try reader["UsernameAttributes"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosureBox<CognitoIdentityProviderClientTypes.UsernameAttributeType>().read(from:), memberNodeInfo: "member", isFlattened: false)
        value.smsVerificationMessage = try reader["SmsVerificationMessage"].readIfPresent()
        value.emailVerificationMessage = try reader["EmailVerificationMessage"].readIfPresent()
        value.emailVerificationSubject = try reader["EmailVerificationSubject"].readIfPresent()
        value.verificationMessageTemplate = try reader["VerificationMessageTemplate"].readIfPresent(with: CognitoIdentityProviderClientTypes.VerificationMessageTemplateType.read(from:))
        value.smsAuthenticationMessage = try reader["SmsAuthenticationMessage"].readIfPresent()
        value.userAttributeUpdateSettings = try reader["UserAttributeUpdateSettings"].readIfPresent(with: CognitoIdentityProviderClientTypes.UserAttributeUpdateSettingsType.read(from:))
        value.mfaConfiguration = try reader["MfaConfiguration"].readIfPresent()
        value.deviceConfiguration = try reader["DeviceConfiguration"].readIfPresent(with: CognitoIdentityProviderClientTypes.DeviceConfigurationType.read(from:))
        value.estimatedNumberOfUsers = try reader["EstimatedNumberOfUsers"].readIfPresent() ?? 0
        value.emailConfiguration = try reader["EmailConfiguration"].readIfPresent(with: CognitoIdentityProviderClientTypes.EmailConfigurationType.read(from:))
        value.smsConfiguration = try reader["SmsConfiguration"].readIfPresent(with: CognitoIdentityProviderClientTypes.SmsConfigurationType.read(from:))
        value.userPoolTags = try reader["UserPoolTags"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        value.smsConfigurationFailure = try reader["SmsConfigurationFailure"].readIfPresent()
        value.emailConfigurationFailure = try reader["EmailConfigurationFailure"].readIfPresent()
        value.domain = try reader["Domain"].readIfPresent()
        value.customDomain = try reader["CustomDomain"].readIfPresent()
        value.adminCreateUserConfig = try reader["AdminCreateUserConfig"].readIfPresent(with: CognitoIdentityProviderClientTypes.AdminCreateUserConfigType.read(from:))
        value.userPoolAddOns = try reader["UserPoolAddOns"].readIfPresent(with: CognitoIdentityProviderClientTypes.UserPoolAddOnsType.read(from:))
        value.usernameConfiguration = try reader["UsernameConfiguration"].readIfPresent(with: CognitoIdentityProviderClientTypes.UsernameConfigurationType.read(from:))
        value.arn = try reader["Arn"].readIfPresent()
        value.accountRecoverySetting = try reader["AccountRecoverySetting"].readIfPresent(with: CognitoIdentityProviderClientTypes.AccountRecoverySettingType.read(from:))
        return value
    }
}

extension CognitoIdentityProviderClientTypes.AccountRecoverySettingType {

    static func write(value: CognitoIdentityProviderClientTypes.AccountRecoverySettingType?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["RecoveryMechanisms"].writeList(value.recoveryMechanisms, memberWritingClosure: CognitoIdentityProviderClientTypes.RecoveryOptionType.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> CognitoIdentityProviderClientTypes.AccountRecoverySettingType {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = CognitoIdentityProviderClientTypes.AccountRecoverySettingType()
        value.recoveryMechanisms = try reader["RecoveryMechanisms"].readListIfPresent(memberReadingClosure: CognitoIdentityProviderClientTypes.RecoveryOptionType.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension CognitoIdentityProviderClientTypes.RecoveryOptionType {

    static func write(value: CognitoIdentityProviderClientTypes.RecoveryOptionType?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Name"].write(value.name)
        try writer["Priority"].write(value.priority)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> CognitoIdentityProviderClientTypes.RecoveryOptionType {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = CognitoIdentityProviderClientTypes.RecoveryOptionType()
        value.priority = try reader["Priority"].readIfPresent() ?? 0
        value.name = try reader["Name"].readIfPresent() ?? .sdkUnknown("")
        return value
    }
}

extension CognitoIdentityProviderClientTypes.UsernameConfigurationType {

    static func write(value: CognitoIdentityProviderClientTypes.UsernameConfigurationType?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["CaseSensitive"].write(value.caseSensitive)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> CognitoIdentityProviderClientTypes.UsernameConfigurationType {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = CognitoIdentityProviderClientTypes.UsernameConfigurationType()
        value.caseSensitive = try reader["CaseSensitive"].readIfPresent() ?? false
        return value
    }
}

extension CognitoIdentityProviderClientTypes.UserPoolAddOnsType {

    static func write(value: CognitoIdentityProviderClientTypes.UserPoolAddOnsType?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["AdvancedSecurityAdditionalFlows"].write(value.advancedSecurityAdditionalFlows, with: CognitoIdentityProviderClientTypes.AdvancedSecurityAdditionalFlowsType.write(value:to:))
        try writer["AdvancedSecurityMode"].write(value.advancedSecurityMode)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> CognitoIdentityProviderClientTypes.UserPoolAddOnsType {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = CognitoIdentityProviderClientTypes.UserPoolAddOnsType()
        value.advancedSecurityMode = try reader["AdvancedSecurityMode"].readIfPresent() ?? .sdkUnknown("")
        value.advancedSecurityAdditionalFlows = try reader["AdvancedSecurityAdditionalFlows"].readIfPresent(with: CognitoIdentityProviderClientTypes.AdvancedSecurityAdditionalFlowsType.read(from:))
        return value
    }
}

extension CognitoIdentityProviderClientTypes.AdvancedSecurityAdditionalFlowsType {

    static func write(value: CognitoIdentityProviderClientTypes.AdvancedSecurityAdditionalFlowsType?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["CustomAuthMode"].write(value.customAuthMode)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> CognitoIdentityProviderClientTypes.AdvancedSecurityAdditionalFlowsType {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = CognitoIdentityProviderClientTypes.AdvancedSecurityAdditionalFlowsType()
        value.customAuthMode = try reader["CustomAuthMode"].readIfPresent()
        return value
    }
}

extension CognitoIdentityProviderClientTypes.AdminCreateUserConfigType {

    static func write(value: CognitoIdentityProviderClientTypes.AdminCreateUserConfigType?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["AllowAdminCreateUserOnly"].write(value.allowAdminCreateUserOnly)
        try writer["InviteMessageTemplate"].write(value.inviteMessageTemplate, with: CognitoIdentityProviderClientTypes.MessageTemplateType.write(value:to:))
        try writer["UnusedAccountValidityDays"].write(value.unusedAccountValidityDays)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> CognitoIdentityProviderClientTypes.AdminCreateUserConfigType {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = CognitoIdentityProviderClientTypes.AdminCreateUserConfigType()
        value.allowAdminCreateUserOnly = try reader["AllowAdminCreateUserOnly"].readIfPresent() ?? false
        value.unusedAccountValidityDays = try reader["UnusedAccountValidityDays"].readIfPresent() ?? 0
        value.inviteMessageTemplate = try reader["InviteMessageTemplate"].readIfPresent(with: CognitoIdentityProviderClientTypes.MessageTemplateType.read(from:))
        return value
    }
}

extension CognitoIdentityProviderClientTypes.MessageTemplateType {

    static func write(value: CognitoIdentityProviderClientTypes.MessageTemplateType?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["EmailMessage"].write(value.emailMessage)
        try writer["EmailSubject"].write(value.emailSubject)
        try writer["SMSMessage"].write(value.smsMessage)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> CognitoIdentityProviderClientTypes.MessageTemplateType {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = CognitoIdentityProviderClientTypes.MessageTemplateType()
        value.smsMessage = try reader["SMSMessage"].readIfPresent()
        value.emailMessage = try reader["EmailMessage"].readIfPresent()
        value.emailSubject = try reader["EmailSubject"].readIfPresent()
        return value
    }
}

extension CognitoIdentityProviderClientTypes.SmsConfigurationType {

    static func write(value: CognitoIdentityProviderClientTypes.SmsConfigurationType?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ExternalId"].write(value.externalId)
        try writer["SnsCallerArn"].write(value.snsCallerArn)
        try writer["SnsRegion"].write(value.snsRegion)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> CognitoIdentityProviderClientTypes.SmsConfigurationType {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = CognitoIdentityProviderClientTypes.SmsConfigurationType()
        value.snsCallerArn = try reader["SnsCallerArn"].readIfPresent() ?? ""
        value.externalId = try reader["ExternalId"].readIfPresent()
        value.snsRegion = try reader["SnsRegion"].readIfPresent()
        return value
    }
}

extension CognitoIdentityProviderClientTypes.EmailConfigurationType {

    static func write(value: CognitoIdentityProviderClientTypes.EmailConfigurationType?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ConfigurationSet"].write(value.configurationSet)
        try writer["EmailSendingAccount"].write(value.emailSendingAccount)
        try writer["From"].write(value.from)
        try writer["ReplyToEmailAddress"].write(value.replyToEmailAddress)
        try writer["SourceArn"].write(value.sourceArn)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> CognitoIdentityProviderClientTypes.EmailConfigurationType {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = CognitoIdentityProviderClientTypes.EmailConfigurationType()
        value.sourceArn = try reader["SourceArn"].readIfPresent()
        value.replyToEmailAddress = try reader["ReplyToEmailAddress"].readIfPresent()
        value.emailSendingAccount = try reader["EmailSendingAccount"].readIfPresent()
        value.from = try reader["From"].readIfPresent()
        value.configurationSet = try reader["ConfigurationSet"].readIfPresent()
        return value
    }
}

extension CognitoIdentityProviderClientTypes.DeviceConfigurationType {

    static func write(value: CognitoIdentityProviderClientTypes.DeviceConfigurationType?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ChallengeRequiredOnNewDevice"].write(value.challengeRequiredOnNewDevice)
        try writer["DeviceOnlyRememberedOnUserPrompt"].write(value.deviceOnlyRememberedOnUserPrompt)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> CognitoIdentityProviderClientTypes.DeviceConfigurationType {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = CognitoIdentityProviderClientTypes.DeviceConfigurationType()
        value.challengeRequiredOnNewDevice = try reader["ChallengeRequiredOnNewDevice"].readIfPresent() ?? false
        value.deviceOnlyRememberedOnUserPrompt = try reader["DeviceOnlyRememberedOnUserPrompt"].readIfPresent() ?? false
        return value
    }
}

extension CognitoIdentityProviderClientTypes.UserAttributeUpdateSettingsType {

    static func write(value: CognitoIdentityProviderClientTypes.UserAttributeUpdateSettingsType?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["AttributesRequireVerificationBeforeUpdate"].writeList(value.attributesRequireVerificationBeforeUpdate, memberWritingClosure: SmithyReadWrite.WritingClosureBox<CognitoIdentityProviderClientTypes.VerifiedAttributeType>().write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> CognitoIdentityProviderClientTypes.UserAttributeUpdateSettingsType {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = CognitoIdentityProviderClientTypes.UserAttributeUpdateSettingsType()
        value.attributesRequireVerificationBeforeUpdate = try reader["AttributesRequireVerificationBeforeUpdate"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosureBox<CognitoIdentityProviderClientTypes.VerifiedAttributeType>().read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension CognitoIdentityProviderClientTypes.VerificationMessageTemplateType {

    static func write(value: CognitoIdentityProviderClientTypes.VerificationMessageTemplateType?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["DefaultEmailOption"].write(value.defaultEmailOption)
        try writer["EmailMessage"].write(value.emailMessage)
        try writer["EmailMessageByLink"].write(value.emailMessageByLink)
        try writer["EmailSubject"].write(value.emailSubject)
        try writer["EmailSubjectByLink"].write(value.emailSubjectByLink)
        try writer["SmsMessage"].write(value.smsMessage)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> CognitoIdentityProviderClientTypes.VerificationMessageTemplateType {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = CognitoIdentityProviderClientTypes.VerificationMessageTemplateType()
        value.smsMessage = try reader["SmsMessage"].readIfPresent()
        value.emailMessage = try reader["EmailMessage"].readIfPresent()
        value.emailSubject = try reader["EmailSubject"].readIfPresent()
        value.emailMessageByLink = try reader["EmailMessageByLink"].readIfPresent()
        value.emailSubjectByLink = try reader["EmailSubjectByLink"].readIfPresent()
        value.defaultEmailOption = try reader["DefaultEmailOption"].readIfPresent()
        return value
    }
}

extension CognitoIdentityProviderClientTypes.SchemaAttributeType {

    static func write(value: CognitoIdentityProviderClientTypes.SchemaAttributeType?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["AttributeDataType"].write(value.attributeDataType)
        try writer["DeveloperOnlyAttribute"].write(value.developerOnlyAttribute)
        try writer["Mutable"].write(value.mutable)
        try writer["Name"].write(value.name)
        try writer["NumberAttributeConstraints"].write(value.numberAttributeConstraints, with: CognitoIdentityProviderClientTypes.NumberAttributeConstraintsType.write(value:to:))
        try writer["Required"].write(value.`required`)
        try writer["StringAttributeConstraints"].write(value.stringAttributeConstraints, with: CognitoIdentityProviderClientTypes.StringAttributeConstraintsType.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> CognitoIdentityProviderClientTypes.SchemaAttributeType {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = CognitoIdentityProviderClientTypes.SchemaAttributeType()
        value.name = try reader["Name"].readIfPresent()
        value.attributeDataType = try reader["AttributeDataType"].readIfPresent()
        value.developerOnlyAttribute = try reader["DeveloperOnlyAttribute"].readIfPresent()
        value.mutable = try reader["Mutable"].readIfPresent()
        value.`required` = try reader["Required"].readIfPresent()
        value.numberAttributeConstraints = try reader["NumberAttributeConstraints"].readIfPresent(with: CognitoIdentityProviderClientTypes.NumberAttributeConstraintsType.read(from:))
        value.stringAttributeConstraints = try reader["StringAttributeConstraints"].readIfPresent(with: CognitoIdentityProviderClientTypes.StringAttributeConstraintsType.read(from:))
        return value
    }
}

extension CognitoIdentityProviderClientTypes.StringAttributeConstraintsType {

    static func write(value: CognitoIdentityProviderClientTypes.StringAttributeConstraintsType?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["MaxLength"].write(value.maxLength)
        try writer["MinLength"].write(value.minLength)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> CognitoIdentityProviderClientTypes.StringAttributeConstraintsType {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = CognitoIdentityProviderClientTypes.StringAttributeConstraintsType()
        value.minLength = try reader["MinLength"].readIfPresent()
        value.maxLength = try reader["MaxLength"].readIfPresent()
        return value
    }
}

extension CognitoIdentityProviderClientTypes.NumberAttributeConstraintsType {

    static func write(value: CognitoIdentityProviderClientTypes.NumberAttributeConstraintsType?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["MaxValue"].write(value.maxValue)
        try writer["MinValue"].write(value.minValue)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> CognitoIdentityProviderClientTypes.NumberAttributeConstraintsType {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = CognitoIdentityProviderClientTypes.NumberAttributeConstraintsType()
        value.minValue = try reader["MinValue"].readIfPresent()
        value.maxValue = try reader["MaxValue"].readIfPresent()
        return value
    }
}

extension CognitoIdentityProviderClientTypes.LambdaConfigType {

    static func write(value: CognitoIdentityProviderClientTypes.LambdaConfigType?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["CreateAuthChallenge"].write(value.createAuthChallenge)
        try writer["CustomEmailSender"].write(value.customEmailSender, with: CognitoIdentityProviderClientTypes.CustomEmailLambdaVersionConfigType.write(value:to:))
        try writer["CustomMessage"].write(value.customMessage)
        try writer["CustomSMSSender"].write(value.customSMSSender, with: CognitoIdentityProviderClientTypes.CustomSMSLambdaVersionConfigType.write(value:to:))
        try writer["DefineAuthChallenge"].write(value.defineAuthChallenge)
        try writer["KMSKeyID"].write(value.kmsKeyID)
        try writer["PostAuthentication"].write(value.postAuthentication)
        try writer["PostConfirmation"].write(value.postConfirmation)
        try writer["PreAuthentication"].write(value.preAuthentication)
        try writer["PreSignUp"].write(value.preSignUp)
        try writer["PreTokenGeneration"].write(value.preTokenGeneration)
        try writer["PreTokenGenerationConfig"].write(value.preTokenGenerationConfig, with: CognitoIdentityProviderClientTypes.PreTokenGenerationVersionConfigType.write(value:to:))
        try writer["UserMigration"].write(value.userMigration)
        try writer["VerifyAuthChallengeResponse"].write(value.verifyAuthChallengeResponse)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> CognitoIdentityProviderClientTypes.LambdaConfigType {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = CognitoIdentityProviderClientTypes.LambdaConfigType()
        value.preSignUp = try reader["PreSignUp"].readIfPresent()
        value.customMessage = try reader["CustomMessage"].readIfPresent()
        value.postConfirmation = try reader["PostConfirmation"].readIfPresent()
        value.preAuthentication = try reader["PreAuthentication"].readIfPresent()
        value.postAuthentication = try reader["PostAuthentication"].readIfPresent()
        value.defineAuthChallenge = try reader["DefineAuthChallenge"].readIfPresent()
        value.createAuthChallenge = try reader["CreateAuthChallenge"].readIfPresent()
        value.verifyAuthChallengeResponse = try reader["VerifyAuthChallengeResponse"].readIfPresent()
        value.preTokenGeneration = try reader["PreTokenGeneration"].readIfPresent()
        value.userMigration = try reader["UserMigration"].readIfPresent()
        value.preTokenGenerationConfig = try reader["PreTokenGenerationConfig"].readIfPresent(with: CognitoIdentityProviderClientTypes.PreTokenGenerationVersionConfigType.read(from:))
        value.customSMSSender = try reader["CustomSMSSender"].readIfPresent(with: CognitoIdentityProviderClientTypes.CustomSMSLambdaVersionConfigType.read(from:))
        value.customEmailSender = try reader["CustomEmailSender"].readIfPresent(with: CognitoIdentityProviderClientTypes.CustomEmailLambdaVersionConfigType.read(from:))
        value.kmsKeyID = try reader["KMSKeyID"].readIfPresent()
        return value
    }
}

extension CognitoIdentityProviderClientTypes.CustomEmailLambdaVersionConfigType {

    static func write(value: CognitoIdentityProviderClientTypes.CustomEmailLambdaVersionConfigType?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["LambdaArn"].write(value.lambdaArn)
        try writer["LambdaVersion"].write(value.lambdaVersion)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> CognitoIdentityProviderClientTypes.CustomEmailLambdaVersionConfigType {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = CognitoIdentityProviderClientTypes.CustomEmailLambdaVersionConfigType()
        value.lambdaVersion = try reader["LambdaVersion"].readIfPresent() ?? .sdkUnknown("")
        value.lambdaArn = try reader["LambdaArn"].readIfPresent() ?? ""
        return value
    }
}

extension CognitoIdentityProviderClientTypes.CustomSMSLambdaVersionConfigType {

    static func write(value: CognitoIdentityProviderClientTypes.CustomSMSLambdaVersionConfigType?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["LambdaArn"].write(value.lambdaArn)
        try writer["LambdaVersion"].write(value.lambdaVersion)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> CognitoIdentityProviderClientTypes.CustomSMSLambdaVersionConfigType {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = CognitoIdentityProviderClientTypes.CustomSMSLambdaVersionConfigType()
        value.lambdaVersion = try reader["LambdaVersion"].readIfPresent() ?? .sdkUnknown("")
        value.lambdaArn = try reader["LambdaArn"].readIfPresent() ?? ""
        return value
    }
}

extension CognitoIdentityProviderClientTypes.PreTokenGenerationVersionConfigType {

    static func write(value: CognitoIdentityProviderClientTypes.PreTokenGenerationVersionConfigType?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["LambdaArn"].write(value.lambdaArn)
        try writer["LambdaVersion"].write(value.lambdaVersion)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> CognitoIdentityProviderClientTypes.PreTokenGenerationVersionConfigType {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = CognitoIdentityProviderClientTypes.PreTokenGenerationVersionConfigType()
        value.lambdaVersion = try reader["LambdaVersion"].readIfPresent() ?? .sdkUnknown("")
        value.lambdaArn = try reader["LambdaArn"].readIfPresent() ?? ""
        return value
    }
}

extension CognitoIdentityProviderClientTypes.UserPoolPolicyType {

    static func write(value: CognitoIdentityProviderClientTypes.UserPoolPolicyType?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["PasswordPolicy"].write(value.passwordPolicy, with: CognitoIdentityProviderClientTypes.PasswordPolicyType.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> CognitoIdentityProviderClientTypes.UserPoolPolicyType {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = CognitoIdentityProviderClientTypes.UserPoolPolicyType()
        value.passwordPolicy = try reader["PasswordPolicy"].readIfPresent(with: CognitoIdentityProviderClientTypes.PasswordPolicyType.read(from:))
        return value
    }
}

extension CognitoIdentityProviderClientTypes.PasswordPolicyType {

    static func write(value: CognitoIdentityProviderClientTypes.PasswordPolicyType?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["MinimumLength"].write(value.minimumLength)
        try writer["PasswordHistorySize"].write(value.passwordHistorySize)
        try writer["RequireLowercase"].write(value.requireLowercase)
        try writer["RequireNumbers"].write(value.requireNumbers)
        try writer["RequireSymbols"].write(value.requireSymbols)
        try writer["RequireUppercase"].write(value.requireUppercase)
        try writer["TemporaryPasswordValidityDays"].write(value.temporaryPasswordValidityDays)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> CognitoIdentityProviderClientTypes.PasswordPolicyType {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = CognitoIdentityProviderClientTypes.PasswordPolicyType()
        value.minimumLength = try reader["MinimumLength"].readIfPresent()
        value.requireUppercase = try reader["RequireUppercase"].readIfPresent() ?? false
        value.requireLowercase = try reader["RequireLowercase"].readIfPresent() ?? false
        value.requireNumbers = try reader["RequireNumbers"].readIfPresent() ?? false
        value.requireSymbols = try reader["RequireSymbols"].readIfPresent() ?? false
        value.passwordHistorySize = try reader["PasswordHistorySize"].readIfPresent()
        value.temporaryPasswordValidityDays = try reader["TemporaryPasswordValidityDays"].readIfPresent() ?? 0
        return value
    }
}

extension CognitoIdentityProviderClientTypes.UserPoolClientType {

    static func read(from reader: SmithyJSON.Reader) throws -> CognitoIdentityProviderClientTypes.UserPoolClientType {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = CognitoIdentityProviderClientTypes.UserPoolClientType()
        value.userPoolId = try reader["UserPoolId"].readIfPresent()
        value.clientName = try reader["ClientName"].readIfPresent()
        value.clientId = try reader["ClientId"].readIfPresent()
        value.clientSecret = try reader["ClientSecret"].readIfPresent()
        value.lastModifiedDate = try reader["LastModifiedDate"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.creationDate = try reader["CreationDate"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.refreshTokenValidity = try reader["RefreshTokenValidity"].readIfPresent() ?? 0
        value.accessTokenValidity = try reader["AccessTokenValidity"].readIfPresent()
        value.idTokenValidity = try reader["IdTokenValidity"].readIfPresent()
        value.tokenValidityUnits = try reader["TokenValidityUnits"].readIfPresent(with: CognitoIdentityProviderClientTypes.TokenValidityUnitsType.read(from:))
        value.readAttributes = try reader["ReadAttributes"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.writeAttributes = try reader["WriteAttributes"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.explicitAuthFlows = try reader["ExplicitAuthFlows"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosureBox<CognitoIdentityProviderClientTypes.ExplicitAuthFlowsType>().read(from:), memberNodeInfo: "member", isFlattened: false)
        value.supportedIdentityProviders = try reader["SupportedIdentityProviders"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.callbackURLs = try reader["CallbackURLs"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.logoutURLs = try reader["LogoutURLs"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.defaultRedirectURI = try reader["DefaultRedirectURI"].readIfPresent()
        value.allowedOAuthFlows = try reader["AllowedOAuthFlows"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosureBox<CognitoIdentityProviderClientTypes.OAuthFlowType>().read(from:), memberNodeInfo: "member", isFlattened: false)
        value.allowedOAuthScopes = try reader["AllowedOAuthScopes"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.allowedOAuthFlowsUserPoolClient = try reader["AllowedOAuthFlowsUserPoolClient"].readIfPresent()
        value.analyticsConfiguration = try reader["AnalyticsConfiguration"].readIfPresent(with: CognitoIdentityProviderClientTypes.AnalyticsConfigurationType.read(from:))
        value.preventUserExistenceErrors = try reader["PreventUserExistenceErrors"].readIfPresent()
        value.enableTokenRevocation = try reader["EnableTokenRevocation"].readIfPresent()
        value.enablePropagateAdditionalUserContextData = try reader["EnablePropagateAdditionalUserContextData"].readIfPresent()
        value.authSessionValidity = try reader["AuthSessionValidity"].readIfPresent()
        return value
    }
}

extension CognitoIdentityProviderClientTypes.AnalyticsConfigurationType {

    static func write(value: CognitoIdentityProviderClientTypes.AnalyticsConfigurationType?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ApplicationArn"].write(value.applicationArn)
        try writer["ApplicationId"].write(value.applicationId)
        try writer["ExternalId"].write(value.externalId)
        try writer["RoleArn"].write(value.roleArn)
        try writer["UserDataShared"].write(value.userDataShared)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> CognitoIdentityProviderClientTypes.AnalyticsConfigurationType {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = CognitoIdentityProviderClientTypes.AnalyticsConfigurationType()
        value.applicationId = try reader["ApplicationId"].readIfPresent()
        value.applicationArn = try reader["ApplicationArn"].readIfPresent()
        value.roleArn = try reader["RoleArn"].readIfPresent()
        value.externalId = try reader["ExternalId"].readIfPresent()
        value.userDataShared = try reader["UserDataShared"].readIfPresent() ?? false
        return value
    }
}

extension CognitoIdentityProviderClientTypes.TokenValidityUnitsType {

    static func write(value: CognitoIdentityProviderClientTypes.TokenValidityUnitsType?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["AccessToken"].write(value.accessToken)
        try writer["IdToken"].write(value.idToken)
        try writer["RefreshToken"].write(value.refreshToken)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> CognitoIdentityProviderClientTypes.TokenValidityUnitsType {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = CognitoIdentityProviderClientTypes.TokenValidityUnitsType()
        value.accessToken = try reader["AccessToken"].readIfPresent()
        value.idToken = try reader["IdToken"].readIfPresent()
        value.refreshToken = try reader["RefreshToken"].readIfPresent()
        return value
    }
}

extension CognitoIdentityProviderClientTypes.RiskConfigurationType {

    static func read(from reader: SmithyJSON.Reader) throws -> CognitoIdentityProviderClientTypes.RiskConfigurationType {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = CognitoIdentityProviderClientTypes.RiskConfigurationType()
        value.userPoolId = try reader["UserPoolId"].readIfPresent()
        value.clientId = try reader["ClientId"].readIfPresent()
        value.compromisedCredentialsRiskConfiguration = try reader["CompromisedCredentialsRiskConfiguration"].readIfPresent(with: CognitoIdentityProviderClientTypes.CompromisedCredentialsRiskConfigurationType.read(from:))
        value.accountTakeoverRiskConfiguration = try reader["AccountTakeoverRiskConfiguration"].readIfPresent(with: CognitoIdentityProviderClientTypes.AccountTakeoverRiskConfigurationType.read(from:))
        value.riskExceptionConfiguration = try reader["RiskExceptionConfiguration"].readIfPresent(with: CognitoIdentityProviderClientTypes.RiskExceptionConfigurationType.read(from:))
        value.lastModifiedDate = try reader["LastModifiedDate"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        return value
    }
}

extension CognitoIdentityProviderClientTypes.RiskExceptionConfigurationType {

    static func write(value: CognitoIdentityProviderClientTypes.RiskExceptionConfigurationType?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["BlockedIPRangeList"].writeList(value.blockedIPRangeList, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["SkippedIPRangeList"].writeList(value.skippedIPRangeList, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> CognitoIdentityProviderClientTypes.RiskExceptionConfigurationType {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = CognitoIdentityProviderClientTypes.RiskExceptionConfigurationType()
        value.blockedIPRangeList = try reader["BlockedIPRangeList"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.skippedIPRangeList = try reader["SkippedIPRangeList"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension CognitoIdentityProviderClientTypes.AccountTakeoverRiskConfigurationType {

    static func write(value: CognitoIdentityProviderClientTypes.AccountTakeoverRiskConfigurationType?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Actions"].write(value.actions, with: CognitoIdentityProviderClientTypes.AccountTakeoverActionsType.write(value:to:))
        try writer["NotifyConfiguration"].write(value.notifyConfiguration, with: CognitoIdentityProviderClientTypes.NotifyConfigurationType.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> CognitoIdentityProviderClientTypes.AccountTakeoverRiskConfigurationType {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = CognitoIdentityProviderClientTypes.AccountTakeoverRiskConfigurationType()
        value.notifyConfiguration = try reader["NotifyConfiguration"].readIfPresent(with: CognitoIdentityProviderClientTypes.NotifyConfigurationType.read(from:))
        value.actions = try reader["Actions"].readIfPresent(with: CognitoIdentityProviderClientTypes.AccountTakeoverActionsType.read(from:))
        return value
    }
}

extension CognitoIdentityProviderClientTypes.AccountTakeoverActionsType {

    static func write(value: CognitoIdentityProviderClientTypes.AccountTakeoverActionsType?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["HighAction"].write(value.highAction, with: CognitoIdentityProviderClientTypes.AccountTakeoverActionType.write(value:to:))
        try writer["LowAction"].write(value.lowAction, with: CognitoIdentityProviderClientTypes.AccountTakeoverActionType.write(value:to:))
        try writer["MediumAction"].write(value.mediumAction, with: CognitoIdentityProviderClientTypes.AccountTakeoverActionType.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> CognitoIdentityProviderClientTypes.AccountTakeoverActionsType {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = CognitoIdentityProviderClientTypes.AccountTakeoverActionsType()
        value.lowAction = try reader["LowAction"].readIfPresent(with: CognitoIdentityProviderClientTypes.AccountTakeoverActionType.read(from:))
        value.mediumAction = try reader["MediumAction"].readIfPresent(with: CognitoIdentityProviderClientTypes.AccountTakeoverActionType.read(from:))
        value.highAction = try reader["HighAction"].readIfPresent(with: CognitoIdentityProviderClientTypes.AccountTakeoverActionType.read(from:))
        return value
    }
}

extension CognitoIdentityProviderClientTypes.AccountTakeoverActionType {

    static func write(value: CognitoIdentityProviderClientTypes.AccountTakeoverActionType?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["EventAction"].write(value.eventAction)
        try writer["Notify"].write(value.notify)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> CognitoIdentityProviderClientTypes.AccountTakeoverActionType {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = CognitoIdentityProviderClientTypes.AccountTakeoverActionType()
        value.notify = try reader["Notify"].readIfPresent() ?? false
        value.eventAction = try reader["EventAction"].readIfPresent() ?? .sdkUnknown("")
        return value
    }
}

extension CognitoIdentityProviderClientTypes.NotifyConfigurationType {

    static func write(value: CognitoIdentityProviderClientTypes.NotifyConfigurationType?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["BlockEmail"].write(value.blockEmail, with: CognitoIdentityProviderClientTypes.NotifyEmailType.write(value:to:))
        try writer["From"].write(value.from)
        try writer["MfaEmail"].write(value.mfaEmail, with: CognitoIdentityProviderClientTypes.NotifyEmailType.write(value:to:))
        try writer["NoActionEmail"].write(value.noActionEmail, with: CognitoIdentityProviderClientTypes.NotifyEmailType.write(value:to:))
        try writer["ReplyTo"].write(value.replyTo)
        try writer["SourceArn"].write(value.sourceArn)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> CognitoIdentityProviderClientTypes.NotifyConfigurationType {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = CognitoIdentityProviderClientTypes.NotifyConfigurationType()
        value.from = try reader["From"].readIfPresent()
        value.replyTo = try reader["ReplyTo"].readIfPresent()
        value.sourceArn = try reader["SourceArn"].readIfPresent() ?? ""
        value.blockEmail = try reader["BlockEmail"].readIfPresent(with: CognitoIdentityProviderClientTypes.NotifyEmailType.read(from:))
        value.noActionEmail = try reader["NoActionEmail"].readIfPresent(with: CognitoIdentityProviderClientTypes.NotifyEmailType.read(from:))
        value.mfaEmail = try reader["MfaEmail"].readIfPresent(with: CognitoIdentityProviderClientTypes.NotifyEmailType.read(from:))
        return value
    }
}

extension CognitoIdentityProviderClientTypes.NotifyEmailType {

    static func write(value: CognitoIdentityProviderClientTypes.NotifyEmailType?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["HtmlBody"].write(value.htmlBody)
        try writer["Subject"].write(value.subject)
        try writer["TextBody"].write(value.textBody)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> CognitoIdentityProviderClientTypes.NotifyEmailType {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = CognitoIdentityProviderClientTypes.NotifyEmailType()
        value.subject = try reader["Subject"].readIfPresent() ?? ""
        value.htmlBody = try reader["HtmlBody"].readIfPresent()
        value.textBody = try reader["TextBody"].readIfPresent()
        return value
    }
}

extension CognitoIdentityProviderClientTypes.CompromisedCredentialsRiskConfigurationType {

    static func write(value: CognitoIdentityProviderClientTypes.CompromisedCredentialsRiskConfigurationType?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Actions"].write(value.actions, with: CognitoIdentityProviderClientTypes.CompromisedCredentialsActionsType.write(value:to:))
        try writer["EventFilter"].writeList(value.eventFilter, memberWritingClosure: SmithyReadWrite.WritingClosureBox<CognitoIdentityProviderClientTypes.EventFilterType>().write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> CognitoIdentityProviderClientTypes.CompromisedCredentialsRiskConfigurationType {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = CognitoIdentityProviderClientTypes.CompromisedCredentialsRiskConfigurationType()
        value.eventFilter = try reader["EventFilter"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosureBox<CognitoIdentityProviderClientTypes.EventFilterType>().read(from:), memberNodeInfo: "member", isFlattened: false)
        value.actions = try reader["Actions"].readIfPresent(with: CognitoIdentityProviderClientTypes.CompromisedCredentialsActionsType.read(from:))
        return value
    }
}

extension CognitoIdentityProviderClientTypes.CompromisedCredentialsActionsType {

    static func write(value: CognitoIdentityProviderClientTypes.CompromisedCredentialsActionsType?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["EventAction"].write(value.eventAction)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> CognitoIdentityProviderClientTypes.CompromisedCredentialsActionsType {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = CognitoIdentityProviderClientTypes.CompromisedCredentialsActionsType()
        value.eventAction = try reader["EventAction"].readIfPresent() ?? .sdkUnknown("")
        return value
    }
}

extension CognitoIdentityProviderClientTypes.DomainDescriptionType {

    static func read(from reader: SmithyJSON.Reader) throws -> CognitoIdentityProviderClientTypes.DomainDescriptionType {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = CognitoIdentityProviderClientTypes.DomainDescriptionType()
        value.userPoolId = try reader["UserPoolId"].readIfPresent()
        value.awsAccountId = try reader["AWSAccountId"].readIfPresent()
        value.domain = try reader["Domain"].readIfPresent()
        value.s3Bucket = try reader["S3Bucket"].readIfPresent()
        value.cloudFrontDistribution = try reader["CloudFrontDistribution"].readIfPresent()
        value.version = try reader["Version"].readIfPresent()
        value.status = try reader["Status"].readIfPresent()
        value.customDomainConfig = try reader["CustomDomainConfig"].readIfPresent(with: CognitoIdentityProviderClientTypes.CustomDomainConfigType.read(from:))
        return value
    }
}

extension CognitoIdentityProviderClientTypes.CustomDomainConfigType {

    static func write(value: CognitoIdentityProviderClientTypes.CustomDomainConfigType?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["CertificateArn"].write(value.certificateArn)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> CognitoIdentityProviderClientTypes.CustomDomainConfigType {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = CognitoIdentityProviderClientTypes.CustomDomainConfigType()
        value.certificateArn = try reader["CertificateArn"].readIfPresent() ?? ""
        return value
    }
}

extension CognitoIdentityProviderClientTypes.CodeDeliveryDetailsType {

    static func read(from reader: SmithyJSON.Reader) throws -> CognitoIdentityProviderClientTypes.CodeDeliveryDetailsType {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = CognitoIdentityProviderClientTypes.CodeDeliveryDetailsType()
        value.destination = try reader["Destination"].readIfPresent()
        value.deliveryMedium = try reader["DeliveryMedium"].readIfPresent()
        value.attributeName = try reader["AttributeName"].readIfPresent()
        return value
    }
}

extension CognitoIdentityProviderClientTypes.LogDeliveryConfigurationType {

    static func read(from reader: SmithyJSON.Reader) throws -> CognitoIdentityProviderClientTypes.LogDeliveryConfigurationType {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = CognitoIdentityProviderClientTypes.LogDeliveryConfigurationType()
        value.userPoolId = try reader["UserPoolId"].readIfPresent() ?? ""
        value.logConfigurations = try reader["LogConfigurations"].readListIfPresent(memberReadingClosure: CognitoIdentityProviderClientTypes.LogConfigurationType.read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        return value
    }
}

extension CognitoIdentityProviderClientTypes.LogConfigurationType {

    static func write(value: CognitoIdentityProviderClientTypes.LogConfigurationType?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["CloudWatchLogsConfiguration"].write(value.cloudWatchLogsConfiguration, with: CognitoIdentityProviderClientTypes.CloudWatchLogsConfigurationType.write(value:to:))
        try writer["EventSource"].write(value.eventSource)
        try writer["FirehoseConfiguration"].write(value.firehoseConfiguration, with: CognitoIdentityProviderClientTypes.FirehoseConfigurationType.write(value:to:))
        try writer["LogLevel"].write(value.logLevel)
        try writer["S3Configuration"].write(value.s3Configuration, with: CognitoIdentityProviderClientTypes.S3ConfigurationType.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> CognitoIdentityProviderClientTypes.LogConfigurationType {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = CognitoIdentityProviderClientTypes.LogConfigurationType()
        value.logLevel = try reader["LogLevel"].readIfPresent() ?? .sdkUnknown("")
        value.eventSource = try reader["EventSource"].readIfPresent() ?? .sdkUnknown("")
        value.cloudWatchLogsConfiguration = try reader["CloudWatchLogsConfiguration"].readIfPresent(with: CognitoIdentityProviderClientTypes.CloudWatchLogsConfigurationType.read(from:))
        value.s3Configuration = try reader["S3Configuration"].readIfPresent(with: CognitoIdentityProviderClientTypes.S3ConfigurationType.read(from:))
        value.firehoseConfiguration = try reader["FirehoseConfiguration"].readIfPresent(with: CognitoIdentityProviderClientTypes.FirehoseConfigurationType.read(from:))
        return value
    }
}

extension CognitoIdentityProviderClientTypes.FirehoseConfigurationType {

    static func write(value: CognitoIdentityProviderClientTypes.FirehoseConfigurationType?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["StreamArn"].write(value.streamArn)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> CognitoIdentityProviderClientTypes.FirehoseConfigurationType {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = CognitoIdentityProviderClientTypes.FirehoseConfigurationType()
        value.streamArn = try reader["StreamArn"].readIfPresent()
        return value
    }
}

extension CognitoIdentityProviderClientTypes.S3ConfigurationType {

    static func write(value: CognitoIdentityProviderClientTypes.S3ConfigurationType?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["BucketArn"].write(value.bucketArn)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> CognitoIdentityProviderClientTypes.S3ConfigurationType {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = CognitoIdentityProviderClientTypes.S3ConfigurationType()
        value.bucketArn = try reader["BucketArn"].readIfPresent()
        return value
    }
}

extension CognitoIdentityProviderClientTypes.CloudWatchLogsConfigurationType {

    static func write(value: CognitoIdentityProviderClientTypes.CloudWatchLogsConfigurationType?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["LogGroupArn"].write(value.logGroupArn)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> CognitoIdentityProviderClientTypes.CloudWatchLogsConfigurationType {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = CognitoIdentityProviderClientTypes.CloudWatchLogsConfigurationType()
        value.logGroupArn = try reader["LogGroupArn"].readIfPresent()
        return value
    }
}

extension CognitoIdentityProviderClientTypes.UICustomizationType {

    static func read(from reader: SmithyJSON.Reader) throws -> CognitoIdentityProviderClientTypes.UICustomizationType {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = CognitoIdentityProviderClientTypes.UICustomizationType()
        value.userPoolId = try reader["UserPoolId"].readIfPresent()
        value.clientId = try reader["ClientId"].readIfPresent()
        value.imageUrl = try reader["ImageUrl"].readIfPresent()
        value.css = try reader["CSS"].readIfPresent()
        value.cssVersion = try reader["CSSVersion"].readIfPresent()
        value.lastModifiedDate = try reader["LastModifiedDate"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.creationDate = try reader["CreationDate"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        return value
    }
}

extension CognitoIdentityProviderClientTypes.SmsMfaConfigType {

    static func write(value: CognitoIdentityProviderClientTypes.SmsMfaConfigType?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["SmsAuthenticationMessage"].write(value.smsAuthenticationMessage)
        try writer["SmsConfiguration"].write(value.smsConfiguration, with: CognitoIdentityProviderClientTypes.SmsConfigurationType.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> CognitoIdentityProviderClientTypes.SmsMfaConfigType {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = CognitoIdentityProviderClientTypes.SmsMfaConfigType()
        value.smsAuthenticationMessage = try reader["SmsAuthenticationMessage"].readIfPresent()
        value.smsConfiguration = try reader["SmsConfiguration"].readIfPresent(with: CognitoIdentityProviderClientTypes.SmsConfigurationType.read(from:))
        return value
    }
}

extension CognitoIdentityProviderClientTypes.SoftwareTokenMfaConfigType {

    static func write(value: CognitoIdentityProviderClientTypes.SoftwareTokenMfaConfigType?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Enabled"].write(value.enabled)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> CognitoIdentityProviderClientTypes.SoftwareTokenMfaConfigType {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = CognitoIdentityProviderClientTypes.SoftwareTokenMfaConfigType()
        value.enabled = try reader["Enabled"].readIfPresent() ?? false
        return value
    }
}

extension CognitoIdentityProviderClientTypes.EmailMfaConfigType {

    static func write(value: CognitoIdentityProviderClientTypes.EmailMfaConfigType?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Message"].write(value.message)
        try writer["Subject"].write(value.subject)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> CognitoIdentityProviderClientTypes.EmailMfaConfigType {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = CognitoIdentityProviderClientTypes.EmailMfaConfigType()
        value.message = try reader["Message"].readIfPresent()
        value.subject = try reader["Subject"].readIfPresent()
        return value
    }
}

extension CognitoIdentityProviderClientTypes.ProviderDescription {

    static func read(from reader: SmithyJSON.Reader) throws -> CognitoIdentityProviderClientTypes.ProviderDescription {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = CognitoIdentityProviderClientTypes.ProviderDescription()
        value.providerName = try reader["ProviderName"].readIfPresent()
        value.providerType = try reader["ProviderType"].readIfPresent()
        value.lastModifiedDate = try reader["LastModifiedDate"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.creationDate = try reader["CreationDate"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        return value
    }
}

extension CognitoIdentityProviderClientTypes.UserPoolClientDescription {

    static func read(from reader: SmithyJSON.Reader) throws -> CognitoIdentityProviderClientTypes.UserPoolClientDescription {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = CognitoIdentityProviderClientTypes.UserPoolClientDescription()
        value.clientId = try reader["ClientId"].readIfPresent()
        value.userPoolId = try reader["UserPoolId"].readIfPresent()
        value.clientName = try reader["ClientName"].readIfPresent()
        return value
    }
}

extension CognitoIdentityProviderClientTypes.UserPoolDescriptionType {

    static func read(from reader: SmithyJSON.Reader) throws -> CognitoIdentityProviderClientTypes.UserPoolDescriptionType {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = CognitoIdentityProviderClientTypes.UserPoolDescriptionType()
        value.id = try reader["Id"].readIfPresent()
        value.name = try reader["Name"].readIfPresent()
        value.lambdaConfig = try reader["LambdaConfig"].readIfPresent(with: CognitoIdentityProviderClientTypes.LambdaConfigType.read(from:))
        value.status = try reader["Status"].readIfPresent()
        value.lastModifiedDate = try reader["LastModifiedDate"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.creationDate = try reader["CreationDate"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        return value
    }
}

extension CognitoIdentityProviderClientTypes.ProviderUserIdentifierType {

    static func write(value: CognitoIdentityProviderClientTypes.ProviderUserIdentifierType?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ProviderAttributeName"].write(value.providerAttributeName)
        try writer["ProviderAttributeValue"].write(value.providerAttributeValue)
        try writer["ProviderName"].write(value.providerName)
    }
}

extension CognitoIdentityProviderClientTypes.AnalyticsMetadataType {

    static func write(value: CognitoIdentityProviderClientTypes.AnalyticsMetadataType?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["AnalyticsEndpointId"].write(value.analyticsEndpointId)
    }
}

extension CognitoIdentityProviderClientTypes.ContextDataType {

    static func write(value: CognitoIdentityProviderClientTypes.ContextDataType?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["EncodedData"].write(value.encodedData)
        try writer["HttpHeaders"].writeList(value.httpHeaders, memberWritingClosure: CognitoIdentityProviderClientTypes.HttpHeader.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["IpAddress"].write(value.ipAddress)
        try writer["ServerName"].write(value.serverName)
        try writer["ServerPath"].write(value.serverPath)
    }
}

extension CognitoIdentityProviderClientTypes.HttpHeader {

    static func write(value: CognitoIdentityProviderClientTypes.HttpHeader?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["headerName"].write(value.headerName)
        try writer["headerValue"].write(value.headerValue)
    }
}

extension CognitoIdentityProviderClientTypes.SMSMfaSettingsType {

    static func write(value: CognitoIdentityProviderClientTypes.SMSMfaSettingsType?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Enabled"].write(value.enabled)
        try writer["PreferredMfa"].write(value.preferredMfa)
    }
}

extension CognitoIdentityProviderClientTypes.SoftwareTokenMfaSettingsType {

    static func write(value: CognitoIdentityProviderClientTypes.SoftwareTokenMfaSettingsType?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Enabled"].write(value.enabled)
        try writer["PreferredMfa"].write(value.preferredMfa)
    }
}

extension CognitoIdentityProviderClientTypes.EmailMfaSettingsType {

    static func write(value: CognitoIdentityProviderClientTypes.EmailMfaSettingsType?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Enabled"].write(value.enabled)
        try writer["PreferredMfa"].write(value.preferredMfa)
    }
}

extension CognitoIdentityProviderClientTypes.DeviceSecretVerifierConfigType {

    static func write(value: CognitoIdentityProviderClientTypes.DeviceSecretVerifierConfigType?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["PasswordVerifier"].write(value.passwordVerifier)
        try writer["Salt"].write(value.salt)
    }
}

extension CognitoIdentityProviderClientTypes.UserContextDataType {

    static func write(value: CognitoIdentityProviderClientTypes.UserContextDataType?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["EncodedData"].write(value.encodedData)
        try writer["IpAddress"].write(value.ipAddress)
    }
}

public enum CognitoIdentityProviderClientTypes {}
