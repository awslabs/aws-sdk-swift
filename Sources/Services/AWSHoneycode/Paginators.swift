// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension HoneycodeClient {
    /// Paginate over `[ListTableColumnsOutput]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[ListTableColumnsInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `ListTableColumnsOutput`
    public func listTableColumnsPaginated(input: ListTableColumnsInput) -> ClientRuntime.PaginatorSequence<ListTableColumnsInput, ListTableColumnsOutput> {
<<<<<<< HEAD
        return ClientRuntime.PaginatorSequence<ListTableColumnsInput, ListTableColumnsOutput>(input: input, inputKey: \ListTableColumnsInput.nextToken, outputKey: \ListTableColumnsOutput.nextToken, paginationFunction: self.listTableColumns(input:))
=======
        return ClientRuntime.PaginatorSequence<ListTableColumnsInput, ListTableColumnsOutput>(input: input, inputKey: \.nextToken, outputKey: \.nextToken, paginationFunction: self.listTableColumns(input:))
>>>>>>> main
    }
}

extension ListTableColumnsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListTableColumnsInput {
        return ListTableColumnsInput(
            nextToken: token,
            tableId: self.tableId,
            workbookId: self.workbookId
        )}
}

<<<<<<< HEAD
extension PaginatorSequence where Input == ListTableColumnsInput, Output == ListTableColumnsOutput {
=======
extension PaginatorSequence where OperationStackInput == ListTableColumnsInput, OperationStackOutput == ListTableColumnsOutput {
>>>>>>> main
    /// This paginator transforms the `AsyncSequence` returned by `listTableColumnsPaginated`
    /// to access the nested member `[HoneycodeClientTypes.TableColumn]`
    /// - Returns: `[HoneycodeClientTypes.TableColumn]`
    public func tableColumns() async throws -> [HoneycodeClientTypes.TableColumn] {
        return try await self.asyncCompactMap { item in item.tableColumns }
    }
}
extension HoneycodeClient {
    /// Paginate over `[ListTableRowsOutput]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[ListTableRowsInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `ListTableRowsOutput`
    public func listTableRowsPaginated(input: ListTableRowsInput) -> ClientRuntime.PaginatorSequence<ListTableRowsInput, ListTableRowsOutput> {
<<<<<<< HEAD
        return ClientRuntime.PaginatorSequence<ListTableRowsInput, ListTableRowsOutput>(input: input, inputKey: \ListTableRowsInput.nextToken, outputKey: \ListTableRowsOutput.nextToken, paginationFunction: self.listTableRows(input:))
=======
        return ClientRuntime.PaginatorSequence<ListTableRowsInput, ListTableRowsOutput>(input: input, inputKey: \.nextToken, outputKey: \.nextToken, paginationFunction: self.listTableRows(input:))
>>>>>>> main
    }
}

extension ListTableRowsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListTableRowsInput {
        return ListTableRowsInput(
            maxResults: self.maxResults,
            nextToken: token,
            rowIds: self.rowIds,
            tableId: self.tableId,
            workbookId: self.workbookId
        )}
}

<<<<<<< HEAD
extension PaginatorSequence where Input == ListTableRowsInput, Output == ListTableRowsOutput {
=======
extension PaginatorSequence where OperationStackInput == ListTableRowsInput, OperationStackOutput == ListTableRowsOutput {
>>>>>>> main
    /// This paginator transforms the `AsyncSequence` returned by `listTableRowsPaginated`
    /// to access the nested member `[HoneycodeClientTypes.TableRow]`
    /// - Returns: `[HoneycodeClientTypes.TableRow]`
    public func rows() async throws -> [HoneycodeClientTypes.TableRow] {
        return try await self.asyncCompactMap { item in item.rows }
    }
}
extension HoneycodeClient {
    /// Paginate over `[ListTablesOutput]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[ListTablesInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `ListTablesOutput`
    public func listTablesPaginated(input: ListTablesInput) -> ClientRuntime.PaginatorSequence<ListTablesInput, ListTablesOutput> {
<<<<<<< HEAD
        return ClientRuntime.PaginatorSequence<ListTablesInput, ListTablesOutput>(input: input, inputKey: \ListTablesInput.nextToken, outputKey: \ListTablesOutput.nextToken, paginationFunction: self.listTables(input:))
=======
        return ClientRuntime.PaginatorSequence<ListTablesInput, ListTablesOutput>(input: input, inputKey: \.nextToken, outputKey: \.nextToken, paginationFunction: self.listTables(input:))
>>>>>>> main
    }
}

extension ListTablesInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListTablesInput {
        return ListTablesInput(
            maxResults: self.maxResults,
            nextToken: token,
            workbookId: self.workbookId
        )}
}

<<<<<<< HEAD
extension PaginatorSequence where Input == ListTablesInput, Output == ListTablesOutput {
=======
extension PaginatorSequence where OperationStackInput == ListTablesInput, OperationStackOutput == ListTablesOutput {
>>>>>>> main
    /// This paginator transforms the `AsyncSequence` returned by `listTablesPaginated`
    /// to access the nested member `[HoneycodeClientTypes.Table]`
    /// - Returns: `[HoneycodeClientTypes.Table]`
    public func tables() async throws -> [HoneycodeClientTypes.Table] {
        return try await self.asyncCompactMap { item in item.tables }
    }
}
extension HoneycodeClient {
    /// Paginate over `[QueryTableRowsOutput]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[QueryTableRowsInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `QueryTableRowsOutput`
    public func queryTableRowsPaginated(input: QueryTableRowsInput) -> ClientRuntime.PaginatorSequence<QueryTableRowsInput, QueryTableRowsOutput> {
<<<<<<< HEAD
        return ClientRuntime.PaginatorSequence<QueryTableRowsInput, QueryTableRowsOutput>(input: input, inputKey: \QueryTableRowsInput.nextToken, outputKey: \QueryTableRowsOutput.nextToken, paginationFunction: self.queryTableRows(input:))
=======
        return ClientRuntime.PaginatorSequence<QueryTableRowsInput, QueryTableRowsOutput>(input: input, inputKey: \.nextToken, outputKey: \.nextToken, paginationFunction: self.queryTableRows(input:))
>>>>>>> main
    }
}

extension QueryTableRowsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> QueryTableRowsInput {
        return QueryTableRowsInput(
            filterFormula: self.filterFormula,
            maxResults: self.maxResults,
            nextToken: token,
            tableId: self.tableId,
            workbookId: self.workbookId
        )}
}

<<<<<<< HEAD
extension PaginatorSequence where Input == QueryTableRowsInput, Output == QueryTableRowsOutput {
=======
extension PaginatorSequence where OperationStackInput == QueryTableRowsInput, OperationStackOutput == QueryTableRowsOutput {
>>>>>>> main
    /// This paginator transforms the `AsyncSequence` returned by `queryTableRowsPaginated`
    /// to access the nested member `[HoneycodeClientTypes.TableRow]`
    /// - Returns: `[HoneycodeClientTypes.TableRow]`
    public func rows() async throws -> [HoneycodeClientTypes.TableRow] {
        return try await self.asyncCompactMap { item in item.rows }
    }
}
