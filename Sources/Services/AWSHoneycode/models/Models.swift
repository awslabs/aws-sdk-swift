// Code generated by smithy-swift-codegen. DO NOT EDIT!
import AWSClientRuntime
import ClientRuntime
import SmithyJSON
import SmithyReadWrite

extension AccessDeniedException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> AccessDeniedException {
        let reader = baseError.errorBodyReader
        var value = AccessDeniedException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

/// You do not have sufficient access to perform this action. Check that the workbook is owned by you and your IAM policy allows access to the resource in the request.
public struct AccessDeniedException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "AccessDeniedException" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension AutomationExecutionException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> AutomationExecutionException {
        let reader = baseError.errorBodyReader
        var value = AutomationExecutionException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

/// The automation execution did not end successfully.
public struct AutomationExecutionException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "AutomationExecutionException" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension AutomationExecutionTimeoutException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> AutomationExecutionTimeoutException {
        let reader = baseError.errorBodyReader
        var value = AutomationExecutionTimeoutException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

/// The automation execution timed out.
public struct AutomationExecutionTimeoutException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "AutomationExecutionTimeoutException" }
    public static var fault: ErrorFault { .server }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension BatchCreateTableRowsInput {

    static func urlPathProvider(_ value: BatchCreateTableRowsInput) -> Swift.String? {
        guard let workbookId = value.workbookId else {
            return nil
        }
        guard let tableId = value.tableId else {
            return nil
        }
        return "/workbooks/\(workbookId.urlPercentEncoding())/tables/\(tableId.urlPercentEncoding())/rows/batchcreate"
    }
}

extension BatchCreateTableRowsInput {

    static func write(value: BatchCreateTableRowsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["clientRequestToken"].write(value.clientRequestToken)
        try writer["rowsToCreate"].writeList(value.rowsToCreate, memberWritingClosure: HoneycodeClientTypes.CreateRowData.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

public struct BatchCreateTableRowsInput {
    /// The request token for performing the batch create operation. Request tokens help to identify duplicate requests. If a call times out or fails due to a transient error like a failed network connection, you can retry the call with the same request token. The service ensures that if the first call using that request token is successfully performed, the second call will not perform the operation again. Note that request tokens are valid only for a few minutes. You cannot use request tokens to dedupe requests spanning hours or days.
    public var clientRequestToken: Swift.String?
    /// The list of rows to create at the end of the table. Each item in this list needs to have a batch item id to uniquely identify the element in the request and the cells to create for that row. You need to specify at least one item in this list. Note that if one of the column ids in any of the rows in the request does not exist in the table, then the request fails and no updates are made to the table.
    /// This member is required.
    public var rowsToCreate: [HoneycodeClientTypes.CreateRowData]?
    /// The ID of the table where the new rows are being added. If a table with the specified ID could not be found, this API throws ResourceNotFoundException.
    /// This member is required.
    public var tableId: Swift.String?
    /// The ID of the workbook where the new rows are being added. If a workbook with the specified ID could not be found, this API throws ResourceNotFoundException.
    /// This member is required.
    public var workbookId: Swift.String?

    public init(
        clientRequestToken: Swift.String? = nil,
        rowsToCreate: [HoneycodeClientTypes.CreateRowData]? = nil,
        tableId: Swift.String? = nil,
        workbookId: Swift.String? = nil
    )
    {
        self.clientRequestToken = clientRequestToken
        self.rowsToCreate = rowsToCreate
        self.tableId = tableId
        self.workbookId = workbookId
    }
}

extension BatchCreateTableRowsOutput {

    static func httpOutput(from httpResponse: ClientRuntime.HttpResponse) async throws -> BatchCreateTableRowsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = BatchCreateTableRowsOutput()
        value.createdRows = try reader["createdRows"].readMapIfPresent(valueReadingClosure: Swift.String.read(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        value.failedBatchItems = try reader["failedBatchItems"].readListIfPresent(memberReadingClosure: HoneycodeClientTypes.FailedBatchItem.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.workbookCursor = try reader["workbookCursor"].readIfPresent() ?? 0
        return value
    }
}

public struct BatchCreateTableRowsOutput {
    /// The map of batch item id to the row id that was created for that item.
    /// This member is required.
    public var createdRows: [Swift.String:Swift.String]?
    /// The list of batch items in the request that could not be added to the table. Each element in this list contains one item from the request that could not be added to the table along with the reason why that item could not be added.
    public var failedBatchItems: [HoneycodeClientTypes.FailedBatchItem]?
    /// The updated workbook cursor after adding the new rows at the end of the table.
    /// This member is required.
    public var workbookCursor: Swift.Int

    public init(
        createdRows: [Swift.String:Swift.String]? = nil,
        failedBatchItems: [HoneycodeClientTypes.FailedBatchItem]? = nil,
        workbookCursor: Swift.Int = 0
    )
    {
        self.createdRows = createdRows
        self.failedBatchItems = failedBatchItems
        self.workbookCursor = workbookCursor
    }
}

enum BatchCreateTableRowsOutputError {

    static func httpError(from httpResponse: ClientRuntime.HttpResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "RequestTimeoutException": return try RequestTimeoutException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceQuotaExceededException": return try ServiceQuotaExceededException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

extension BatchDeleteTableRowsInput {

    static func urlPathProvider(_ value: BatchDeleteTableRowsInput) -> Swift.String? {
        guard let workbookId = value.workbookId else {
            return nil
        }
        guard let tableId = value.tableId else {
            return nil
        }
        return "/workbooks/\(workbookId.urlPercentEncoding())/tables/\(tableId.urlPercentEncoding())/rows/batchdelete"
    }
}

extension BatchDeleteTableRowsInput {

    static func write(value: BatchDeleteTableRowsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["clientRequestToken"].write(value.clientRequestToken)
        try writer["rowIds"].writeList(value.rowIds, memberWritingClosure: Swift.String.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

public struct BatchDeleteTableRowsInput {
    /// The request token for performing the delete action. Request tokens help to identify duplicate requests. If a call times out or fails due to a transient error like a failed network connection, you can retry the call with the same request token. The service ensures that if the first call using that request token is successfully performed, the second call will not perform the action again. Note that request tokens are valid only for a few minutes. You cannot use request tokens to dedupe requests spanning hours or days.
    public var clientRequestToken: Swift.String?
    /// The list of row ids to delete from the table. You need to specify at least one row id in this list. Note that if one of the row ids provided in the request does not exist in the table, then the request fails and no rows are deleted from the table.
    /// This member is required.
    public var rowIds: [Swift.String]?
    /// The ID of the table where the rows are being deleted. If a table with the specified id could not be found, this API throws ResourceNotFoundException.
    /// This member is required.
    public var tableId: Swift.String?
    /// The ID of the workbook where the rows are being deleted. If a workbook with the specified id could not be found, this API throws ResourceNotFoundException.
    /// This member is required.
    public var workbookId: Swift.String?

    public init(
        clientRequestToken: Swift.String? = nil,
        rowIds: [Swift.String]? = nil,
        tableId: Swift.String? = nil,
        workbookId: Swift.String? = nil
    )
    {
        self.clientRequestToken = clientRequestToken
        self.rowIds = rowIds
        self.tableId = tableId
        self.workbookId = workbookId
    }
}

extension BatchDeleteTableRowsOutput {

    static func httpOutput(from httpResponse: ClientRuntime.HttpResponse) async throws -> BatchDeleteTableRowsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = BatchDeleteTableRowsOutput()
        value.failedBatchItems = try reader["failedBatchItems"].readListIfPresent(memberReadingClosure: HoneycodeClientTypes.FailedBatchItem.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.workbookCursor = try reader["workbookCursor"].readIfPresent() ?? 0
        return value
    }
}

public struct BatchDeleteTableRowsOutput {
    /// The list of row ids in the request that could not be deleted from the table. Each element in this list contains one row id from the request that could not be deleted along with the reason why that item could not be deleted.
    public var failedBatchItems: [HoneycodeClientTypes.FailedBatchItem]?
    /// The updated workbook cursor after deleting the rows from the table.
    /// This member is required.
    public var workbookCursor: Swift.Int

    public init(
        failedBatchItems: [HoneycodeClientTypes.FailedBatchItem]? = nil,
        workbookCursor: Swift.Int = 0
    )
    {
        self.failedBatchItems = failedBatchItems
        self.workbookCursor = workbookCursor
    }
}

enum BatchDeleteTableRowsOutputError {

    static func httpError(from httpResponse: ClientRuntime.HttpResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "RequestTimeoutException": return try RequestTimeoutException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

extension BatchUpdateTableRowsInput {

    static func urlPathProvider(_ value: BatchUpdateTableRowsInput) -> Swift.String? {
        guard let workbookId = value.workbookId else {
            return nil
        }
        guard let tableId = value.tableId else {
            return nil
        }
        return "/workbooks/\(workbookId.urlPercentEncoding())/tables/\(tableId.urlPercentEncoding())/rows/batchupdate"
    }
}

extension BatchUpdateTableRowsInput {

    static func write(value: BatchUpdateTableRowsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["clientRequestToken"].write(value.clientRequestToken)
        try writer["rowsToUpdate"].writeList(value.rowsToUpdate, memberWritingClosure: HoneycodeClientTypes.UpdateRowData.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

public struct BatchUpdateTableRowsInput {
    /// The request token for performing the update action. Request tokens help to identify duplicate requests. If a call times out or fails due to a transient error like a failed network connection, you can retry the call with the same request token. The service ensures that if the first call using that request token is successfully performed, the second call will not perform the action again. Note that request tokens are valid only for a few minutes. You cannot use request tokens to dedupe requests spanning hours or days.
    public var clientRequestToken: Swift.String?
    /// The list of rows to update in the table. Each item in this list needs to contain the row id to update along with the map of column id to cell values for each column in that row that needs to be updated. You need to specify at least one row in this list, and for each row, you need to specify at least one column to update. Note that if one of the row or column ids in the request does not exist in the table, then the request fails and no updates are made to the table.
    /// This member is required.
    public var rowsToUpdate: [HoneycodeClientTypes.UpdateRowData]?
    /// The ID of the table where the rows are being updated. If a table with the specified id could not be found, this API throws ResourceNotFoundException.
    /// This member is required.
    public var tableId: Swift.String?
    /// The ID of the workbook where the rows are being updated. If a workbook with the specified id could not be found, this API throws ResourceNotFoundException.
    /// This member is required.
    public var workbookId: Swift.String?

    public init(
        clientRequestToken: Swift.String? = nil,
        rowsToUpdate: [HoneycodeClientTypes.UpdateRowData]? = nil,
        tableId: Swift.String? = nil,
        workbookId: Swift.String? = nil
    )
    {
        self.clientRequestToken = clientRequestToken
        self.rowsToUpdate = rowsToUpdate
        self.tableId = tableId
        self.workbookId = workbookId
    }
}

extension BatchUpdateTableRowsOutput {

    static func httpOutput(from httpResponse: ClientRuntime.HttpResponse) async throws -> BatchUpdateTableRowsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = BatchUpdateTableRowsOutput()
        value.failedBatchItems = try reader["failedBatchItems"].readListIfPresent(memberReadingClosure: HoneycodeClientTypes.FailedBatchItem.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.workbookCursor = try reader["workbookCursor"].readIfPresent() ?? 0
        return value
    }
}

public struct BatchUpdateTableRowsOutput {
    /// The list of batch items in the request that could not be updated in the table. Each element in this list contains one item from the request that could not be updated in the table along with the reason why that item could not be updated.
    public var failedBatchItems: [HoneycodeClientTypes.FailedBatchItem]?
    /// The updated workbook cursor after adding the new rows at the end of the table.
    /// This member is required.
    public var workbookCursor: Swift.Int

    public init(
        failedBatchItems: [HoneycodeClientTypes.FailedBatchItem]? = nil,
        workbookCursor: Swift.Int = 0
    )
    {
        self.failedBatchItems = failedBatchItems
        self.workbookCursor = workbookCursor
    }
}

enum BatchUpdateTableRowsOutputError {

    static func httpError(from httpResponse: ClientRuntime.HttpResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "RequestTimeoutException": return try RequestTimeoutException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

extension BatchUpsertTableRowsInput {

    static func urlPathProvider(_ value: BatchUpsertTableRowsInput) -> Swift.String? {
        guard let workbookId = value.workbookId else {
            return nil
        }
        guard let tableId = value.tableId else {
            return nil
        }
        return "/workbooks/\(workbookId.urlPercentEncoding())/tables/\(tableId.urlPercentEncoding())/rows/batchupsert"
    }
}

extension BatchUpsertTableRowsInput {

    static func write(value: BatchUpsertTableRowsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["clientRequestToken"].write(value.clientRequestToken)
        try writer["rowsToUpsert"].writeList(value.rowsToUpsert, memberWritingClosure: HoneycodeClientTypes.UpsertRowData.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

public struct BatchUpsertTableRowsInput {
    /// The request token for performing the update action. Request tokens help to identify duplicate requests. If a call times out or fails due to a transient error like a failed network connection, you can retry the call with the same request token. The service ensures that if the first call using that request token is successfully performed, the second call will not perform the action again. Note that request tokens are valid only for a few minutes. You cannot use request tokens to dedupe requests spanning hours or days.
    public var clientRequestToken: Swift.String?
    /// The list of rows to upsert in the table. Each item in this list needs to have a batch item id to uniquely identify the element in the request, a filter expression to find the rows to update for that element and the cell values to set for each column in the upserted rows. You need to specify at least one item in this list. Note that if one of the filter formulas in the request fails to evaluate because of an error or one of the column ids in any of the rows does not exist in the table, then the request fails and no updates are made to the table.
    /// This member is required.
    public var rowsToUpsert: [HoneycodeClientTypes.UpsertRowData]?
    /// The ID of the table where the rows are being upserted. If a table with the specified id could not be found, this API throws ResourceNotFoundException.
    /// This member is required.
    public var tableId: Swift.String?
    /// The ID of the workbook where the rows are being upserted. If a workbook with the specified id could not be found, this API throws ResourceNotFoundException.
    /// This member is required.
    public var workbookId: Swift.String?

    public init(
        clientRequestToken: Swift.String? = nil,
        rowsToUpsert: [HoneycodeClientTypes.UpsertRowData]? = nil,
        tableId: Swift.String? = nil,
        workbookId: Swift.String? = nil
    )
    {
        self.clientRequestToken = clientRequestToken
        self.rowsToUpsert = rowsToUpsert
        self.tableId = tableId
        self.workbookId = workbookId
    }
}

extension BatchUpsertTableRowsOutput {

    static func httpOutput(from httpResponse: ClientRuntime.HttpResponse) async throws -> BatchUpsertTableRowsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = BatchUpsertTableRowsOutput()
        value.failedBatchItems = try reader["failedBatchItems"].readListIfPresent(memberReadingClosure: HoneycodeClientTypes.FailedBatchItem.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.rows = try reader["rows"].readMapIfPresent(valueReadingClosure: HoneycodeClientTypes.UpsertRowsResult.read(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        value.workbookCursor = try reader["workbookCursor"].readIfPresent() ?? 0
        return value
    }
}

public struct BatchUpsertTableRowsOutput {
    /// The list of batch items in the request that could not be updated or appended in the table. Each element in this list contains one item from the request that could not be updated in the table along with the reason why that item could not be updated or appended.
    public var failedBatchItems: [HoneycodeClientTypes.FailedBatchItem]?
    /// A map with the batch item id as the key and the result of the upsert operation as the value. The result of the upsert operation specifies whether existing rows were updated or a new row was appended, along with the list of row ids that were affected.
    /// This member is required.
    public var rows: [Swift.String:HoneycodeClientTypes.UpsertRowsResult]?
    /// The updated workbook cursor after updating or appending rows in the table.
    /// This member is required.
    public var workbookCursor: Swift.Int

    public init(
        failedBatchItems: [HoneycodeClientTypes.FailedBatchItem]? = nil,
        rows: [Swift.String:HoneycodeClientTypes.UpsertRowsResult]? = nil,
        workbookCursor: Swift.Int = 0
    )
    {
        self.failedBatchItems = failedBatchItems
        self.rows = rows
        self.workbookCursor = workbookCursor
    }
}

enum BatchUpsertTableRowsOutputError {

    static func httpError(from httpResponse: ClientRuntime.HttpResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "RequestTimeoutException": return try RequestTimeoutException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceQuotaExceededException": return try ServiceQuotaExceededException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

extension HoneycodeClientTypes.Cell: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CONTENT_REDACTED"
    }
}

extension HoneycodeClientTypes.Cell {

    static func read(from reader: SmithyJSON.Reader) throws -> HoneycodeClientTypes.Cell {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = HoneycodeClientTypes.Cell()
        value.formula = try reader["formula"].readIfPresent()
        value.format = try reader["format"].readIfPresent()
        value.rawValue = try reader["rawValue"].readIfPresent()
        value.formattedValue = try reader["formattedValue"].readIfPresent()
        value.formattedValues = try reader["formattedValues"].readListIfPresent(memberReadingClosure: Swift.String.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension HoneycodeClientTypes {
    /// An object that represents a single cell in a table.
    public struct Cell {
        /// The format of the cell. If this field is empty, then the format is either not specified in the workbook or the format is set to AUTO.
        public var format: HoneycodeClientTypes.Format?
        /// The formatted value of the cell. This is the value that you see displayed in the cell in the UI. Note that the formatted value of a cell is always represented as a string irrespective of the data that is stored in the cell. For example, if a cell contains a date, the formatted value of the cell is the string representation of the formatted date being shown in the cell in the UI. See details in the rawValue field below for how cells of different formats will have different raw and formatted values.
        public var formattedValue: Swift.String?
        /// A list of formatted values of the cell. This field is only returned when the cell is ROWSET format (aka multi-select or multi-record picklist). Values in the list are always represented as strings. The formattedValue field will be empty if this field is returned.
        public var formattedValues: [Swift.String]?
        /// The formula contained in the cell. This field is empty if a cell does not have a formula.
        public var formula: Swift.String?
        /// The raw value of the data contained in the cell. The raw value depends on the format of the data in the cell. However the attribute in the API return value is always a string containing the raw value. Cells with format DATE, DATE_TIME or TIME have the raw value as a floating point number where the whole number represents the number of days since 1/1/1900 and the fractional part represents the fraction of the day since midnight. For example, a cell with date 11/3/2020 has the raw value "44138". A cell with the time 9:00 AM has the raw value "0.375" and a cell with date/time value of 11/3/2020 9:00 AM has the raw value "44138.375". Notice that even though the raw value is a number in all three cases, it is still represented as a string. Cells with format NUMBER, CURRENCY, PERCENTAGE and ACCOUNTING have the raw value of the data as the number representing the data being displayed. For example, the number 1.325 with two decimal places in the format will have it's raw value as "1.325" and formatted value as "1.33". A currency value for $10 will have the raw value as "10" and formatted value as "$10.00". A value representing 20% with two decimal places in the format will have its raw value as "0.2" and the formatted value as "20.00%". An accounting value of -$25 will have "-25" as the raw value and "$ (25.00)" as the formatted value. Cells with format TEXT will have the raw text as the raw value. For example, a cell with text "John Smith" will have "John Smith" as both the raw value and the formatted value. Cells with format CONTACT will have the name of the contact as a formatted value and the email address of the contact as the raw value. For example, a contact for John Smith will have "John Smith" as the formatted value and "john.smith@example.com" as the raw value. Cells with format ROWLINK (aka picklist) will have the first column of the linked row as the formatted value and the row id of the linked row as the raw value. For example, a cell containing a picklist to a table that displays task status might have "Completed" as the formatted value and "row:dfcefaee-5b37-4355-8f28-40c3e4ff5dd4/ca432b2f-b8eb-431d-9fb5-cbe0342f9f03" as the raw value. Cells with format ROWSET (aka multi-select or multi-record picklist) will by default have the first column of each of the linked rows as the formatted value in the list, and the rowset id of the linked rows as the raw value. For example, a cell containing a multi-select picklist to a table that contains items might have "Item A", "Item B" in the formatted value list and "rows:b742c1f4-6cb0-4650-a845-35eb86fcc2bb/ [fdea123b-8f68-474a-aa8a-5ff87aa333af,6daf41f0-a138-4eee-89da-123086d36ecf]" as the raw value. Cells with format ATTACHMENT will have the name of the attachment as the formatted value and the attachment id as the raw value. For example, a cell containing an attachment named "image.jpeg" will have "image.jpeg" as the formatted value and "attachment:ca432b2f-b8eb-431d-9fb5-cbe0342f9f03" as the raw value. Cells with format AUTO or cells without any format that are auto-detected as one of the formats above will contain the raw and formatted values as mentioned above, based on the auto-detected formats. If there is no auto-detected format, the raw and formatted values will be the same as the data in the cell.
        public var rawValue: Swift.String?

        public init(
            format: HoneycodeClientTypes.Format? = nil,
            formattedValue: Swift.String? = nil,
            formattedValues: [Swift.String]? = nil,
            formula: Swift.String? = nil,
            rawValue: Swift.String? = nil
        )
        {
            self.format = format
            self.formattedValue = formattedValue
            self.formattedValues = formattedValues
            self.formula = formula
            self.rawValue = rawValue
        }
    }

}

extension HoneycodeClientTypes.CellInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CellInput(facts: \(Swift.String(describing: facts)), fact: \"CONTENT_REDACTED\")"}
}

extension HoneycodeClientTypes.CellInput {

    static func write(value: HoneycodeClientTypes.CellInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["fact"].write(value.fact)
        try writer["facts"].writeList(value.facts, memberWritingClosure: Swift.String.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension HoneycodeClientTypes {
    /// CellInput object contains the data needed to create or update cells in a table. CellInput object has only a facts field or a fact field, but not both. A 400 bad request will be thrown if both fact and facts field are present.
    public struct CellInput {
        /// Fact represents the data that is entered into a cell. This data can be free text or a formula. Formulas need to start with the equals (=) sign.
        public var fact: Swift.String?
        /// A list representing the values that are entered into a ROWSET cell. Facts list can have either only values or rowIDs, and rowIDs should from the same table.
        public var facts: [Swift.String]?

        public init(
            fact: Swift.String? = nil,
            facts: [Swift.String]? = nil
        )
        {
            self.fact = fact
            self.facts = facts
        }
    }

}

extension HoneycodeClientTypes.ColumnMetadata: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ColumnMetadata(format: \(Swift.String(describing: format)), name: \"CONTENT_REDACTED\")"}
}

extension HoneycodeClientTypes.ColumnMetadata {

    static func read(from reader: SmithyJSON.Reader) throws -> HoneycodeClientTypes.ColumnMetadata {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = HoneycodeClientTypes.ColumnMetadata()
        value.name = try reader["name"].readIfPresent()
        value.format = try reader["format"].readIfPresent()
        return value
    }
}

extension HoneycodeClientTypes {
    /// Metadata for column in the table.
    public struct ColumnMetadata {
        /// The format of the column.
        /// This member is required.
        public var format: HoneycodeClientTypes.Format?
        /// The name of the column.
        /// This member is required.
        public var name: Swift.String?

        public init(
            format: HoneycodeClientTypes.Format? = nil,
            name: Swift.String? = nil
        )
        {
            self.format = format
            self.name = name
        }
    }

}

extension HoneycodeClientTypes.CreateRowData {

    static func write(value: HoneycodeClientTypes.CreateRowData?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["batchItemId"].write(value.batchItemId)
        try writer["cellsToCreate"].writeMap(value.cellsToCreate, valueWritingClosure: HoneycodeClientTypes.CellInput.write(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
    }
}

extension HoneycodeClientTypes {
    /// Data needed to create a single row in a table as part of the BatchCreateTableRows request.
    public struct CreateRowData {
        /// An external identifier that represents the single row that is being created as part of the BatchCreateTableRows request. This can be any string that you can use to identify the row in the request. The BatchCreateTableRows API puts the batch item id in the results to allow you to link data in the request to data in the results.
        /// This member is required.
        public var batchItemId: Swift.String?
        /// A map representing the cells to create in the new row. The key is the column id of the cell and the value is the CellInput object that represents the data to set in that cell.
        /// This member is required.
        public var cellsToCreate: [Swift.String:HoneycodeClientTypes.CellInput]?

        public init(
            batchItemId: Swift.String? = nil,
            cellsToCreate: [Swift.String:HoneycodeClientTypes.CellInput]? = nil
        )
        {
            self.batchItemId = batchItemId
            self.cellsToCreate = cellsToCreate
        }
    }

}

extension HoneycodeClientTypes.DataItem: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CONTENT_REDACTED"
    }
}

extension HoneycodeClientTypes.DataItem {

    static func read(from reader: SmithyJSON.Reader) throws -> HoneycodeClientTypes.DataItem {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = HoneycodeClientTypes.DataItem()
        value.overrideFormat = try reader["overrideFormat"].readIfPresent()
        value.rawValue = try reader["rawValue"].readIfPresent()
        value.formattedValue = try reader["formattedValue"].readIfPresent()
        return value
    }
}

extension HoneycodeClientTypes {
    /// The data in a particular data cell defined on the screen.
    public struct DataItem {
        /// The formatted value of the data. e.g. John Smith.
        public var formattedValue: Swift.String?
        /// The overrideFormat is optional and is specified only if a particular row of data has a different format for the data than the default format defined on the screen or the table.
        public var overrideFormat: HoneycodeClientTypes.Format?
        /// The raw value of the data. e.g. jsmith@example.com
        public var rawValue: Swift.String?

        public init(
            formattedValue: Swift.String? = nil,
            overrideFormat: HoneycodeClientTypes.Format? = nil,
            rawValue: Swift.String? = nil
        )
        {
            self.formattedValue = formattedValue
            self.overrideFormat = overrideFormat
            self.rawValue = rawValue
        }
    }

}

extension HoneycodeClientTypes.DelimitedTextImportOptions {

    static func write(value: HoneycodeClientTypes.DelimitedTextImportOptions?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["dataCharacterEncoding"].write(value.dataCharacterEncoding)
        try writer["delimiter"].write(value.delimiter)
        try writer["hasHeaderRow"].write(value.hasHeaderRow)
        try writer["ignoreEmptyRows"].write(value.ignoreEmptyRows)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> HoneycodeClientTypes.DelimitedTextImportOptions {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = HoneycodeClientTypes.DelimitedTextImportOptions()
        value.delimiter = try reader["delimiter"].readIfPresent()
        value.hasHeaderRow = try reader["hasHeaderRow"].readIfPresent() ?? false
        value.ignoreEmptyRows = try reader["ignoreEmptyRows"].readIfPresent() ?? false
        value.dataCharacterEncoding = try reader["dataCharacterEncoding"].readIfPresent()
        return value
    }
}

extension HoneycodeClientTypes {
    /// An object that contains the options relating to parsing delimited text as part of an import request.
    public struct DelimitedTextImportOptions {
        /// The encoding of the data in the input file.
        public var dataCharacterEncoding: HoneycodeClientTypes.ImportDataCharacterEncoding?
        /// The delimiter to use for separating columns in a single row of the input.
        /// This member is required.
        public var delimiter: Swift.String?
        /// Indicates whether the input file has a header row at the top containing the column names.
        public var hasHeaderRow: Swift.Bool
        /// A parameter to indicate whether empty rows should be ignored or be included in the import.
        public var ignoreEmptyRows: Swift.Bool

        public init(
            dataCharacterEncoding: HoneycodeClientTypes.ImportDataCharacterEncoding? = nil,
            delimiter: Swift.String? = nil,
            hasHeaderRow: Swift.Bool = false,
            ignoreEmptyRows: Swift.Bool = false
        )
        {
            self.dataCharacterEncoding = dataCharacterEncoding
            self.delimiter = delimiter
            self.hasHeaderRow = hasHeaderRow
            self.ignoreEmptyRows = ignoreEmptyRows
        }
    }

}

extension DescribeTableDataImportJobInput {

    static func urlPathProvider(_ value: DescribeTableDataImportJobInput) -> Swift.String? {
        guard let workbookId = value.workbookId else {
            return nil
        }
        guard let tableId = value.tableId else {
            return nil
        }
        guard let jobId = value.jobId else {
            return nil
        }
        return "/workbooks/\(workbookId.urlPercentEncoding())/tables/\(tableId.urlPercentEncoding())/import/\(jobId.urlPercentEncoding())"
    }
}

public struct DescribeTableDataImportJobInput {
    /// The ID of the job that was returned by the StartTableDataImportJob request. If a job with the specified id could not be found, this API throws ResourceNotFoundException.
    /// This member is required.
    public var jobId: Swift.String?
    /// The ID of the table into which data was imported. If a table with the specified id could not be found, this API throws ResourceNotFoundException.
    /// This member is required.
    public var tableId: Swift.String?
    /// The ID of the workbook into which data was imported. If a workbook with the specified id could not be found, this API throws ResourceNotFoundException.
    /// This member is required.
    public var workbookId: Swift.String?

    public init(
        jobId: Swift.String? = nil,
        tableId: Swift.String? = nil,
        workbookId: Swift.String? = nil
    )
    {
        self.jobId = jobId
        self.tableId = tableId
        self.workbookId = workbookId
    }
}

extension DescribeTableDataImportJobOutput {

    static func httpOutput(from httpResponse: ClientRuntime.HttpResponse) async throws -> DescribeTableDataImportJobOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DescribeTableDataImportJobOutput()
        value.errorCode = try reader["errorCode"].readIfPresent()
        value.jobMetadata = try reader["jobMetadata"].readIfPresent(with: HoneycodeClientTypes.TableDataImportJobMetadata.read(from:))
        value.jobStatus = try reader["jobStatus"].readIfPresent()
        value.message = try reader["message"].readIfPresent()
        return value
    }
}

public struct DescribeTableDataImportJobOutput {
    /// If job status is failed, error code to understand reason for the failure.
    public var errorCode: HoneycodeClientTypes.ErrorCode?
    /// The metadata about the job that was submitted for import.
    /// This member is required.
    public var jobMetadata: HoneycodeClientTypes.TableDataImportJobMetadata?
    /// The current status of the import job.
    /// This member is required.
    public var jobStatus: HoneycodeClientTypes.TableDataImportJobStatus?
    /// A message providing more details about the current status of the import job.
    /// This member is required.
    public var message: Swift.String?

    public init(
        errorCode: HoneycodeClientTypes.ErrorCode? = nil,
        jobMetadata: HoneycodeClientTypes.TableDataImportJobMetadata? = nil,
        jobStatus: HoneycodeClientTypes.TableDataImportJobStatus? = nil,
        message: Swift.String? = nil
    )
    {
        self.errorCode = errorCode
        self.jobMetadata = jobMetadata
        self.jobStatus = jobStatus
        self.message = message
    }
}

enum DescribeTableDataImportJobOutputError {

    static func httpError(from httpResponse: ClientRuntime.HttpResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "RequestTimeoutException": return try RequestTimeoutException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

extension HoneycodeClientTypes.DestinationOptions {

    static func write(value: HoneycodeClientTypes.DestinationOptions?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["columnMap"].writeMap(value.columnMap, valueWritingClosure: HoneycodeClientTypes.SourceDataColumnProperties.write(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> HoneycodeClientTypes.DestinationOptions {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = HoneycodeClientTypes.DestinationOptions()
        value.columnMap = try reader["columnMap"].readMapIfPresent(valueReadingClosure: HoneycodeClientTypes.SourceDataColumnProperties.read(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        return value
    }
}

extension HoneycodeClientTypes {
    /// An object that contains the options relating to the destination of the import request.
    public struct DestinationOptions {
        /// A map of the column id to the import properties for each column.
        public var columnMap: [Swift.String:HoneycodeClientTypes.SourceDataColumnProperties]?

        public init(
            columnMap: [Swift.String:HoneycodeClientTypes.SourceDataColumnProperties]? = nil
        )
        {
            self.columnMap = columnMap
        }
    }

}

extension HoneycodeClientTypes {

    public enum ErrorCode: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case accessdenied
        case fileemptyerror
        case filenotfounderror
        case fileparsingerror
        case filesizelimiterror
        case invalidfiletypeerror
        case invalidimportoptionserror
        case invalidtablecolumniderror
        case invalidtableiderror
        case invalidurlerror
        case resourcenotfounderror
        case systemlimiterror
        case tablenotfounderror
        case unknownerror
        case sdkUnknown(Swift.String)

        public static var allCases: [ErrorCode] {
            return [
                .accessdenied,
                .fileemptyerror,
                .filenotfounderror,
                .fileparsingerror,
                .filesizelimiterror,
                .invalidfiletypeerror,
                .invalidimportoptionserror,
                .invalidtablecolumniderror,
                .invalidtableiderror,
                .invalidurlerror,
                .resourcenotfounderror,
                .systemlimiterror,
                .tablenotfounderror,
                .unknownerror,
                .sdkUnknown("")
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .accessdenied: return "ACCESS_DENIED"
            case .fileemptyerror: return "FILE_EMPTY_ERROR"
            case .filenotfounderror: return "FILE_NOT_FOUND_ERROR"
            case .fileparsingerror: return "FILE_PARSING_ERROR"
            case .filesizelimiterror: return "FILE_SIZE_LIMIT_ERROR"
            case .invalidfiletypeerror: return "INVALID_FILE_TYPE_ERROR"
            case .invalidimportoptionserror: return "INVALID_IMPORT_OPTIONS_ERROR"
            case .invalidtablecolumniderror: return "INVALID_TABLE_COLUMN_ID_ERROR"
            case .invalidtableiderror: return "INVALID_TABLE_ID_ERROR"
            case .invalidurlerror: return "INVALID_URL_ERROR"
            case .resourcenotfounderror: return "RESOURCE_NOT_FOUND_ERROR"
            case .systemlimiterror: return "SYSTEM_LIMIT_ERROR"
            case .tablenotfounderror: return "TABLE_NOT_FOUND_ERROR"
            case .unknownerror: return "UNKNOWN_ERROR"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension HoneycodeClientTypes.FailedBatchItem {

    static func read(from reader: SmithyJSON.Reader) throws -> HoneycodeClientTypes.FailedBatchItem {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = HoneycodeClientTypes.FailedBatchItem()
        value.id = try reader["id"].readIfPresent()
        value.errorMessage = try reader["errorMessage"].readIfPresent()
        return value
    }
}

extension HoneycodeClientTypes {
    /// A single item in a batch that failed to perform the intended action because of an error preventing it from succeeding.
    public struct FailedBatchItem {
        /// The error message that indicates why the batch item failed.
        /// This member is required.
        public var errorMessage: Swift.String?
        /// The id of the batch item that failed. This is the batch item id for the BatchCreateTableRows and BatchUpsertTableRows operations and the row id for the BatchUpdateTableRows and BatchDeleteTableRows operations.
        /// This member is required.
        public var id: Swift.String?

        public init(
            errorMessage: Swift.String? = nil,
            id: Swift.String? = nil
        )
        {
            self.errorMessage = errorMessage
            self.id = id
        }
    }

}

extension HoneycodeClientTypes.Filter: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "Filter(contextRowId: \(Swift.String(describing: contextRowId)), formula: \"CONTENT_REDACTED\")"}
}

extension HoneycodeClientTypes.Filter {

    static func write(value: HoneycodeClientTypes.Filter?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["contextRowId"].write(value.contextRowId)
        try writer["formula"].write(value.formula)
    }
}

extension HoneycodeClientTypes {
    /// An object that represents a filter formula along with the id of the context row under which the filter function needs to evaluate.
    public struct Filter {
        /// The optional contextRowId attribute can be used to specify the row id of the context row if the filter formula contains unqualified references to table columns and needs a context row to evaluate them successfully.
        public var contextRowId: Swift.String?
        /// A formula representing a filter function that returns zero or more matching rows from a table. Valid formulas in this field return a list of rows from a table. The most common ways of writing a formula to return a list of rows are to use the FindRow() or Filter() functions. Any other formula that returns zero or more rows is also acceptable. For example, you can use a formula that points to a cell that contains a filter function.
        /// This member is required.
        public var formula: Swift.String?

        public init(
            contextRowId: Swift.String? = nil,
            formula: Swift.String? = nil
        )
        {
            self.contextRowId = contextRowId
            self.formula = formula
        }
    }

}

extension HoneycodeClientTypes {

    public enum Format: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case accounting
        case auto
        case contact
        case currency
        case date
        case datetime
        case number
        case percentage
        case rowlink
        case rowset
        case text
        case time
        case sdkUnknown(Swift.String)

        public static var allCases: [Format] {
            return [
                .accounting,
                .auto,
                .contact,
                .currency,
                .date,
                .datetime,
                .number,
                .percentage,
                .rowlink,
                .rowset,
                .text,
                .time,
                .sdkUnknown("")
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .accounting: return "ACCOUNTING"
            case .auto: return "AUTO"
            case .contact: return "CONTACT"
            case .currency: return "CURRENCY"
            case .date: return "DATE"
            case .datetime: return "DATE_TIME"
            case .number: return "NUMBER"
            case .percentage: return "PERCENTAGE"
            case .rowlink: return "ROWLINK"
            case .rowset: return "ROWSET"
            case .text: return "TEXT"
            case .time: return "TIME"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension GetScreenDataInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetScreenDataInput(appId: \(Swift.String(describing: appId)), maxResults: \(Swift.String(describing: maxResults)), nextToken: \(Swift.String(describing: nextToken)), screenId: \(Swift.String(describing: screenId)), workbookId: \(Swift.String(describing: workbookId)), variables: \"CONTENT_REDACTED\")"}
}

extension GetScreenDataInput {

    static func urlPathProvider(_ value: GetScreenDataInput) -> Swift.String? {
        return "/screendata"
    }
}

extension GetScreenDataInput {

    static func write(value: GetScreenDataInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["appId"].write(value.appId)
        try writer["maxResults"].write(value.maxResults)
        try writer["nextToken"].write(value.nextToken)
        try writer["screenId"].write(value.screenId)
        try writer["variables"].writeMap(value.variables, valueWritingClosure: HoneycodeClientTypes.VariableValue.write(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        try writer["workbookId"].write(value.workbookId)
    }
}

public struct GetScreenDataInput {
    /// The ID of the app that contains the screen.
    /// This member is required.
    public var appId: Swift.String?
    /// The number of results to be returned on a single page. Specify a number between 1 and 100. The maximum value is 100. This parameter is optional. If you don't specify this parameter, the default page size is 100.
    public var maxResults: Swift.Int?
    /// This parameter is optional. If a nextToken is not specified, the API returns the first page of data. Pagination tokens expire after 1 hour. If you use a token that was returned more than an hour back, the API will throw ValidationException.
    public var nextToken: Swift.String?
    /// The ID of the screen.
    /// This member is required.
    public var screenId: Swift.String?
    /// Variables are optional and are needed only if the screen requires them to render correctly. Variables are specified as a map where the key is the name of the variable as defined on the screen. The value is an object which currently has only one property, rawValue, which holds the value of the variable to be passed to the screen.
    public var variables: [Swift.String:HoneycodeClientTypes.VariableValue]?
    /// The ID of the workbook that contains the screen.
    /// This member is required.
    public var workbookId: Swift.String?

    public init(
        appId: Swift.String? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        screenId: Swift.String? = nil,
        variables: [Swift.String:HoneycodeClientTypes.VariableValue]? = nil,
        workbookId: Swift.String? = nil
    )
    {
        self.appId = appId
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.screenId = screenId
        self.variables = variables
        self.workbookId = workbookId
    }
}

extension GetScreenDataOutput {

    static func httpOutput(from httpResponse: ClientRuntime.HttpResponse) async throws -> GetScreenDataOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetScreenDataOutput()
        value.nextToken = try reader["nextToken"].readIfPresent()
        value.results = try reader["results"].readMapIfPresent(valueReadingClosure: HoneycodeClientTypes.ResultSet.read(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        value.workbookCursor = try reader["workbookCursor"].readIfPresent() ?? 0
        return value
    }
}

public struct GetScreenDataOutput {
    /// Provides the pagination token to load the next page if there are more results matching the request. If a pagination token is not present in the response, it means that all data matching the query has been loaded.
    public var nextToken: Swift.String?
    /// A map of all the rows on the screen keyed by block name.
    /// This member is required.
    public var results: [Swift.String:HoneycodeClientTypes.ResultSet]?
    /// Indicates the cursor of the workbook at which the data returned by this workbook is read. Workbook cursor keeps increasing with every update and the increments are not sequential.
    /// This member is required.
    public var workbookCursor: Swift.Int

    public init(
        nextToken: Swift.String? = nil,
        results: [Swift.String:HoneycodeClientTypes.ResultSet]? = nil,
        workbookCursor: Swift.Int = 0
    )
    {
        self.nextToken = nextToken
        self.results = results
        self.workbookCursor = workbookCursor
    }
}

enum GetScreenDataOutputError {

    static func httpError(from httpResponse: ClientRuntime.HttpResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "RequestTimeoutException": return try RequestTimeoutException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

public enum HoneycodeClientTypes {}

extension HoneycodeClientTypes {

    public enum ImportDataCharacterEncoding: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case iso88591
        case usAscii
        case utf16
        case utf16be
        case utf16le
        case utf8
        case sdkUnknown(Swift.String)

        public static var allCases: [ImportDataCharacterEncoding] {
            return [
                .iso88591,
                .usAscii,
                .utf16,
                .utf16be,
                .utf16le,
                .utf8,
                .sdkUnknown("")
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .iso88591: return "ISO-8859-1"
            case .usAscii: return "US-ASCII"
            case .utf16: return "UTF-16"
            case .utf16be: return "UTF-16BE"
            case .utf16le: return "UTF-16LE"
            case .utf8: return "UTF-8"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension HoneycodeClientTypes.ImportDataSource {

    static func write(value: HoneycodeClientTypes.ImportDataSource?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["dataSourceConfig"].write(value.dataSourceConfig, with: HoneycodeClientTypes.ImportDataSourceConfig.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> HoneycodeClientTypes.ImportDataSource {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = HoneycodeClientTypes.ImportDataSource()
        value.dataSourceConfig = try reader["dataSourceConfig"].readIfPresent(with: HoneycodeClientTypes.ImportDataSourceConfig.read(from:))
        return value
    }
}

extension HoneycodeClientTypes {
    /// An object that has details about the source of the data that was submitted for import.
    public struct ImportDataSource {
        /// The configuration parameters for the data source of the import
        /// This member is required.
        public var dataSourceConfig: HoneycodeClientTypes.ImportDataSourceConfig?

        public init(
            dataSourceConfig: HoneycodeClientTypes.ImportDataSourceConfig? = nil
        )
        {
            self.dataSourceConfig = dataSourceConfig
        }
    }

}

extension HoneycodeClientTypes.ImportDataSourceConfig: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ImportDataSourceConfig(dataSourceUrl: \"CONTENT_REDACTED\")"}
}

extension HoneycodeClientTypes.ImportDataSourceConfig {

    static func write(value: HoneycodeClientTypes.ImportDataSourceConfig?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["dataSourceUrl"].write(value.dataSourceUrl)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> HoneycodeClientTypes.ImportDataSourceConfig {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = HoneycodeClientTypes.ImportDataSourceConfig()
        value.dataSourceUrl = try reader["dataSourceUrl"].readIfPresent()
        return value
    }
}

extension HoneycodeClientTypes {
    /// An object that contains the configuration parameters for the data source of an import request.
    public struct ImportDataSourceConfig {
        /// The URL from which source data will be downloaded for the import request.
        public var dataSourceUrl: Swift.String?

        public init(
            dataSourceUrl: Swift.String? = nil
        )
        {
            self.dataSourceUrl = dataSourceUrl
        }
    }

}

extension HoneycodeClientTypes.ImportJobSubmitter: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ImportJobSubmitter(userArn: \(Swift.String(describing: userArn)), email: \"CONTENT_REDACTED\")"}
}

extension HoneycodeClientTypes.ImportJobSubmitter {

    static func read(from reader: SmithyJSON.Reader) throws -> HoneycodeClientTypes.ImportJobSubmitter {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = HoneycodeClientTypes.ImportJobSubmitter()
        value.email = try reader["email"].readIfPresent()
        value.userArn = try reader["userArn"].readIfPresent()
        return value
    }
}

extension HoneycodeClientTypes {
    /// An object that contains the attributes of the submitter of the import job.
    public struct ImportJobSubmitter {
        /// The email id of the submitter of the import job, if available.
        public var email: Swift.String?
        /// The AWS user ARN of the submitter of the import job, if available.
        public var userArn: Swift.String?

        public init(
            email: Swift.String? = nil,
            userArn: Swift.String? = nil
        )
        {
            self.email = email
            self.userArn = userArn
        }
    }

}

extension HoneycodeClientTypes.ImportOptions {

    static func write(value: HoneycodeClientTypes.ImportOptions?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["delimitedTextOptions"].write(value.delimitedTextOptions, with: HoneycodeClientTypes.DelimitedTextImportOptions.write(value:to:))
        try writer["destinationOptions"].write(value.destinationOptions, with: HoneycodeClientTypes.DestinationOptions.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> HoneycodeClientTypes.ImportOptions {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = HoneycodeClientTypes.ImportOptions()
        value.destinationOptions = try reader["destinationOptions"].readIfPresent(with: HoneycodeClientTypes.DestinationOptions.read(from:))
        value.delimitedTextOptions = try reader["delimitedTextOptions"].readIfPresent(with: HoneycodeClientTypes.DelimitedTextImportOptions.read(from:))
        return value
    }
}

extension HoneycodeClientTypes {
    /// An object that contains the options specified by the sumitter of the import request.
    public struct ImportOptions {
        /// Options relating to parsing delimited text. Required if dataFormat is DELIMITED_TEXT.
        public var delimitedTextOptions: HoneycodeClientTypes.DelimitedTextImportOptions?
        /// Options relating to the destination of the import request.
        public var destinationOptions: HoneycodeClientTypes.DestinationOptions?

        public init(
            delimitedTextOptions: HoneycodeClientTypes.DelimitedTextImportOptions? = nil,
            destinationOptions: HoneycodeClientTypes.DestinationOptions? = nil
        )
        {
            self.delimitedTextOptions = delimitedTextOptions
            self.destinationOptions = destinationOptions
        }
    }

}

extension HoneycodeClientTypes {

    public enum ImportSourceDataFormat: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case delimitedtext
        case sdkUnknown(Swift.String)

        public static var allCases: [ImportSourceDataFormat] {
            return [
                .delimitedtext,
                .sdkUnknown("")
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .delimitedtext: return "DELIMITED_TEXT"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension InternalServerException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> InternalServerException {
        let reader = baseError.errorBodyReader
        var value = InternalServerException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

/// There were unexpected errors from the server.
public struct InternalServerException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InternalServerException" }
    public static var fault: ErrorFault { .server }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension InvokeScreenAutomationInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "InvokeScreenAutomationInput(appId: \(Swift.String(describing: appId)), clientRequestToken: \(Swift.String(describing: clientRequestToken)), rowId: \(Swift.String(describing: rowId)), screenAutomationId: \(Swift.String(describing: screenAutomationId)), screenId: \(Swift.String(describing: screenId)), workbookId: \(Swift.String(describing: workbookId)), variables: \"CONTENT_REDACTED\")"}
}

extension InvokeScreenAutomationInput {

    static func urlPathProvider(_ value: InvokeScreenAutomationInput) -> Swift.String? {
        guard let workbookId = value.workbookId else {
            return nil
        }
        guard let appId = value.appId else {
            return nil
        }
        guard let screenId = value.screenId else {
            return nil
        }
        guard let screenAutomationId = value.screenAutomationId else {
            return nil
        }
        return "/workbooks/\(workbookId.urlPercentEncoding())/apps/\(appId.urlPercentEncoding())/screens/\(screenId.urlPercentEncoding())/automations/\(screenAutomationId.urlPercentEncoding())"
    }
}

extension InvokeScreenAutomationInput {

    static func write(value: InvokeScreenAutomationInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["clientRequestToken"].write(value.clientRequestToken)
        try writer["rowId"].write(value.rowId)
        try writer["variables"].writeMap(value.variables, valueWritingClosure: HoneycodeClientTypes.VariableValue.write(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
    }
}

public struct InvokeScreenAutomationInput {
    /// The ID of the app that contains the screen automation.
    /// This member is required.
    public var appId: Swift.String?
    /// The request token for performing the automation action. Request tokens help to identify duplicate requests. If a call times out or fails due to a transient error like a failed network connection, you can retry the call with the same request token. The service ensures that if the first call using that request token is successfully performed, the second call will return the response of the previous call rather than performing the action again. Note that request tokens are valid only for a few minutes. You cannot use request tokens to dedupe requests spanning hours or days.
    public var clientRequestToken: Swift.String?
    /// The row ID for the automation if the automation is defined inside a block with source or list.
    public var rowId: Swift.String?
    /// The ID of the automation action to be performed.
    /// This member is required.
    public var screenAutomationId: Swift.String?
    /// The ID of the screen that contains the screen automation.
    /// This member is required.
    public var screenId: Swift.String?
    /// Variables are specified as a map where the key is the name of the variable as defined on the screen. The value is an object which currently has only one property, rawValue, which holds the value of the variable to be passed to the screen. Any variables defined in a screen are required to be passed in the call.
    public var variables: [Swift.String:HoneycodeClientTypes.VariableValue]?
    /// The ID of the workbook that contains the screen automation.
    /// This member is required.
    public var workbookId: Swift.String?

    public init(
        appId: Swift.String? = nil,
        clientRequestToken: Swift.String? = nil,
        rowId: Swift.String? = nil,
        screenAutomationId: Swift.String? = nil,
        screenId: Swift.String? = nil,
        variables: [Swift.String:HoneycodeClientTypes.VariableValue]? = nil,
        workbookId: Swift.String? = nil
    )
    {
        self.appId = appId
        self.clientRequestToken = clientRequestToken
        self.rowId = rowId
        self.screenAutomationId = screenAutomationId
        self.screenId = screenId
        self.variables = variables
        self.workbookId = workbookId
    }
}

extension InvokeScreenAutomationOutput {

    static func httpOutput(from httpResponse: ClientRuntime.HttpResponse) async throws -> InvokeScreenAutomationOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = InvokeScreenAutomationOutput()
        value.workbookCursor = try reader["workbookCursor"].readIfPresent() ?? 0
        return value
    }
}

public struct InvokeScreenAutomationOutput {
    /// The updated workbook cursor after performing the automation action.
    /// This member is required.
    public var workbookCursor: Swift.Int

    public init(
        workbookCursor: Swift.Int = 0
    )
    {
        self.workbookCursor = workbookCursor
    }
}

enum InvokeScreenAutomationOutputError {

    static func httpError(from httpResponse: ClientRuntime.HttpResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "AutomationExecutionException": return try AutomationExecutionException.makeError(baseError: baseError)
            case "AutomationExecutionTimeoutException": return try AutomationExecutionTimeoutException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "RequestTimeoutException": return try RequestTimeoutException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceQuotaExceededException": return try ServiceQuotaExceededException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

extension ListTableColumnsInput {

    static func queryItemProvider(_ value: ListTableColumnsInput) throws -> [ClientRuntime.SDKURLQueryItem] {
        var items = [ClientRuntime.SDKURLQueryItem]()
        if let nextToken = value.nextToken {
            let nextTokenQueryItem = ClientRuntime.SDKURLQueryItem(name: "nextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
            items.append(nextTokenQueryItem)
        }
        return items
    }
}

extension ListTableColumnsInput {

    static func urlPathProvider(_ value: ListTableColumnsInput) -> Swift.String? {
        guard let workbookId = value.workbookId else {
            return nil
        }
        guard let tableId = value.tableId else {
            return nil
        }
        return "/workbooks/\(workbookId.urlPercentEncoding())/tables/\(tableId.urlPercentEncoding())/columns"
    }
}

public struct ListTableColumnsInput {
    /// This parameter is optional. If a nextToken is not specified, the API returns the first page of data. Pagination tokens expire after 1 hour. If you use a token that was returned more than an hour back, the API will throw ValidationException.
    public var nextToken: Swift.String?
    /// The ID of the table whose columns are being retrieved. If a table with the specified id could not be found, this API throws ResourceNotFoundException.
    /// This member is required.
    public var tableId: Swift.String?
    /// The ID of the workbook that contains the table whose columns are being retrieved. If a workbook with the specified id could not be found, this API throws ResourceNotFoundException.
    /// This member is required.
    public var workbookId: Swift.String?

    public init(
        nextToken: Swift.String? = nil,
        tableId: Swift.String? = nil,
        workbookId: Swift.String? = nil
    )
    {
        self.nextToken = nextToken
        self.tableId = tableId
        self.workbookId = workbookId
    }
}

extension ListTableColumnsOutput {

    static func httpOutput(from httpResponse: ClientRuntime.HttpResponse) async throws -> ListTableColumnsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListTableColumnsOutput()
        value.nextToken = try reader["nextToken"].readIfPresent()
        value.tableColumns = try reader["tableColumns"].readListIfPresent(memberReadingClosure: HoneycodeClientTypes.TableColumn.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.workbookCursor = try reader["workbookCursor"].readIfPresent() ?? 0
        return value
    }
}

public struct ListTableColumnsOutput {
    /// Provides the pagination token to load the next page if there are more results matching the request. If a pagination token is not present in the response, it means that all data matching the request has been loaded.
    public var nextToken: Swift.String?
    /// The list of columns in the table.
    /// This member is required.
    public var tableColumns: [HoneycodeClientTypes.TableColumn]?
    /// Indicates the cursor of the workbook at which the data returned by this request is read. Workbook cursor keeps increasing with every update and the increments are not sequential.
    public var workbookCursor: Swift.Int

    public init(
        nextToken: Swift.String? = nil,
        tableColumns: [HoneycodeClientTypes.TableColumn]? = nil,
        workbookCursor: Swift.Int = 0
    )
    {
        self.nextToken = nextToken
        self.tableColumns = tableColumns
        self.workbookCursor = workbookCursor
    }
}

enum ListTableColumnsOutputError {

    static func httpError(from httpResponse: ClientRuntime.HttpResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "RequestTimeoutException": return try RequestTimeoutException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

extension ListTableRowsInput {

    static func urlPathProvider(_ value: ListTableRowsInput) -> Swift.String? {
        guard let workbookId = value.workbookId else {
            return nil
        }
        guard let tableId = value.tableId else {
            return nil
        }
        return "/workbooks/\(workbookId.urlPercentEncoding())/tables/\(tableId.urlPercentEncoding())/rows/list"
    }
}

extension ListTableRowsInput {

    static func write(value: ListTableRowsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["maxResults"].write(value.maxResults)
        try writer["nextToken"].write(value.nextToken)
        try writer["rowIds"].writeList(value.rowIds, memberWritingClosure: Swift.String.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

public struct ListTableRowsInput {
    /// The maximum number of rows to return in each page of the results.
    public var maxResults: Swift.Int?
    /// This parameter is optional. If a nextToken is not specified, the API returns the first page of data. Pagination tokens expire after 1 hour. If you use a token that was returned more than an hour back, the API will throw ValidationException.
    public var nextToken: Swift.String?
    /// This parameter is optional. If one or more row ids are specified in this list, then only the specified row ids are returned in the result. If no row ids are specified here, then all the rows in the table are returned.
    public var rowIds: [Swift.String]?
    /// The ID of the table whose rows are being retrieved. If a table with the specified id could not be found, this API throws ResourceNotFoundException.
    /// This member is required.
    public var tableId: Swift.String?
    /// The ID of the workbook that contains the table whose rows are being retrieved. If a workbook with the specified id could not be found, this API throws ResourceNotFoundException.
    /// This member is required.
    public var workbookId: Swift.String?

    public init(
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        rowIds: [Swift.String]? = nil,
        tableId: Swift.String? = nil,
        workbookId: Swift.String? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.rowIds = rowIds
        self.tableId = tableId
        self.workbookId = workbookId
    }
}

extension ListTableRowsOutput {

    static func httpOutput(from httpResponse: ClientRuntime.HttpResponse) async throws -> ListTableRowsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListTableRowsOutput()
        value.columnIds = try reader["columnIds"].readListIfPresent(memberReadingClosure: Swift.String.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.nextToken = try reader["nextToken"].readIfPresent()
        value.rowIdsNotFound = try reader["rowIdsNotFound"].readListIfPresent(memberReadingClosure: Swift.String.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.rows = try reader["rows"].readListIfPresent(memberReadingClosure: HoneycodeClientTypes.TableRow.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.workbookCursor = try reader["workbookCursor"].readIfPresent() ?? 0
        return value
    }
}

public struct ListTableRowsOutput {
    /// The list of columns in the table whose row data is returned in the result.
    /// This member is required.
    public var columnIds: [Swift.String]?
    /// Provides the pagination token to load the next page if there are more results matching the request. If a pagination token is not present in the response, it means that all data matching the request has been loaded.
    public var nextToken: Swift.String?
    /// The list of row ids included in the request that were not found in the table.
    public var rowIdsNotFound: [Swift.String]?
    /// The list of rows in the table. Note that this result is paginated, so this list contains a maximum of 100 rows.
    /// This member is required.
    public var rows: [HoneycodeClientTypes.TableRow]?
    /// Indicates the cursor of the workbook at which the data returned by this request is read. Workbook cursor keeps increasing with every update and the increments are not sequential.
    /// This member is required.
    public var workbookCursor: Swift.Int

    public init(
        columnIds: [Swift.String]? = nil,
        nextToken: Swift.String? = nil,
        rowIdsNotFound: [Swift.String]? = nil,
        rows: [HoneycodeClientTypes.TableRow]? = nil,
        workbookCursor: Swift.Int = 0
    )
    {
        self.columnIds = columnIds
        self.nextToken = nextToken
        self.rowIdsNotFound = rowIdsNotFound
        self.rows = rows
        self.workbookCursor = workbookCursor
    }
}

enum ListTableRowsOutputError {

    static func httpError(from httpResponse: ClientRuntime.HttpResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "RequestTimeoutException": return try RequestTimeoutException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

extension ListTablesInput {

    static func queryItemProvider(_ value: ListTablesInput) throws -> [ClientRuntime.SDKURLQueryItem] {
        var items = [ClientRuntime.SDKURLQueryItem]()
        if let maxResults = value.maxResults {
            let maxResultsQueryItem = ClientRuntime.SDKURLQueryItem(name: "maxResults".urlPercentEncoding(), value: Swift.String(maxResults).urlPercentEncoding())
            items.append(maxResultsQueryItem)
        }
        if let nextToken = value.nextToken {
            let nextTokenQueryItem = ClientRuntime.SDKURLQueryItem(name: "nextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
            items.append(nextTokenQueryItem)
        }
        return items
    }
}

extension ListTablesInput {

    static func urlPathProvider(_ value: ListTablesInput) -> Swift.String? {
        guard let workbookId = value.workbookId else {
            return nil
        }
        return "/workbooks/\(workbookId.urlPercentEncoding())/tables"
    }
}

public struct ListTablesInput {
    /// The maximum number of tables to return in each page of the results.
    public var maxResults: Swift.Int?
    /// This parameter is optional. If a nextToken is not specified, the API returns the first page of data. Pagination tokens expire after 1 hour. If you use a token that was returned more than an hour back, the API will throw ValidationException.
    public var nextToken: Swift.String?
    /// The ID of the workbook whose tables are being retrieved. If a workbook with the specified id could not be found, this API throws ResourceNotFoundException.
    /// This member is required.
    public var workbookId: Swift.String?

    public init(
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        workbookId: Swift.String? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.workbookId = workbookId
    }
}

extension ListTablesOutput {

    static func httpOutput(from httpResponse: ClientRuntime.HttpResponse) async throws -> ListTablesOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListTablesOutput()
        value.nextToken = try reader["nextToken"].readIfPresent()
        value.tables = try reader["tables"].readListIfPresent(memberReadingClosure: HoneycodeClientTypes.Table.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.workbookCursor = try reader["workbookCursor"].readIfPresent() ?? 0
        return value
    }
}

public struct ListTablesOutput {
    /// Provides the pagination token to load the next page if there are more results matching the request. If a pagination token is not present in the response, it means that all data matching the request has been loaded.
    public var nextToken: Swift.String?
    /// The list of tables in the workbook.
    /// This member is required.
    public var tables: [HoneycodeClientTypes.Table]?
    /// Indicates the cursor of the workbook at which the data returned by this request is read. Workbook cursor keeps increasing with every update and the increments are not sequential.
    public var workbookCursor: Swift.Int

    public init(
        nextToken: Swift.String? = nil,
        tables: [HoneycodeClientTypes.Table]? = nil,
        workbookCursor: Swift.Int = 0
    )
    {
        self.nextToken = nextToken
        self.tables = tables
        self.workbookCursor = workbookCursor
    }
}

enum ListTablesOutputError {

    static func httpError(from httpResponse: ClientRuntime.HttpResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "RequestTimeoutException": return try RequestTimeoutException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

extension ListTagsForResourceInput {

    static func urlPathProvider(_ value: ListTagsForResourceInput) -> Swift.String? {
        guard let resourceArn = value.resourceArn else {
            return nil
        }
        return "/tags/\(resourceArn.urlPercentEncoding())"
    }
}

public struct ListTagsForResourceInput {
    /// The resource's Amazon Resource Name (ARN).
    /// This member is required.
    public var resourceArn: Swift.String?

    public init(
        resourceArn: Swift.String? = nil
    )
    {
        self.resourceArn = resourceArn
    }
}

extension ListTagsForResourceOutput {

    static func httpOutput(from httpResponse: ClientRuntime.HttpResponse) async throws -> ListTagsForResourceOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListTagsForResourceOutput()
        value.tags = try reader["tags"].readMapIfPresent(valueReadingClosure: Swift.String.read(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        return value
    }
}

public struct ListTagsForResourceOutput {
    /// The resource's tags.
    public var tags: [Swift.String:Swift.String]?

    public init(
        tags: [Swift.String:Swift.String]? = nil
    )
    {
        self.tags = tags
    }
}

enum ListTagsForResourceOutputError {

    static func httpError(from httpResponse: ClientRuntime.HttpResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "RequestTimeoutException": return try RequestTimeoutException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

extension QueryTableRowsInput {

    static func urlPathProvider(_ value: QueryTableRowsInput) -> Swift.String? {
        guard let workbookId = value.workbookId else {
            return nil
        }
        guard let tableId = value.tableId else {
            return nil
        }
        return "/workbooks/\(workbookId.urlPercentEncoding())/tables/\(tableId.urlPercentEncoding())/rows/query"
    }
}

extension QueryTableRowsInput {

    static func write(value: QueryTableRowsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["filterFormula"].write(value.filterFormula, with: HoneycodeClientTypes.Filter.write(value:to:))
        try writer["maxResults"].write(value.maxResults)
        try writer["nextToken"].write(value.nextToken)
    }
}

public struct QueryTableRowsInput {
    /// An object that represents a filter formula along with the id of the context row under which the filter function needs to evaluate.
    /// This member is required.
    public var filterFormula: HoneycodeClientTypes.Filter?
    /// The maximum number of rows to return in each page of the results.
    public var maxResults: Swift.Int?
    /// This parameter is optional. If a nextToken is not specified, the API returns the first page of data. Pagination tokens expire after 1 hour. If you use a token that was returned more than an hour back, the API will throw ValidationException.
    public var nextToken: Swift.String?
    /// The ID of the table whose rows are being queried. If a table with the specified id could not be found, this API throws ResourceNotFoundException.
    /// This member is required.
    public var tableId: Swift.String?
    /// The ID of the workbook whose table rows are being queried. If a workbook with the specified id could not be found, this API throws ResourceNotFoundException.
    /// This member is required.
    public var workbookId: Swift.String?

    public init(
        filterFormula: HoneycodeClientTypes.Filter? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        tableId: Swift.String? = nil,
        workbookId: Swift.String? = nil
    )
    {
        self.filterFormula = filterFormula
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.tableId = tableId
        self.workbookId = workbookId
    }
}

extension QueryTableRowsOutput {

    static func httpOutput(from httpResponse: ClientRuntime.HttpResponse) async throws -> QueryTableRowsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = QueryTableRowsOutput()
        value.columnIds = try reader["columnIds"].readListIfPresent(memberReadingClosure: Swift.String.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.nextToken = try reader["nextToken"].readIfPresent()
        value.rows = try reader["rows"].readListIfPresent(memberReadingClosure: HoneycodeClientTypes.TableRow.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.workbookCursor = try reader["workbookCursor"].readIfPresent() ?? 0
        return value
    }
}

public struct QueryTableRowsOutput {
    /// The list of columns in the table whose row data is returned in the result.
    /// This member is required.
    public var columnIds: [Swift.String]?
    /// Provides the pagination token to load the next page if there are more results matching the request. If a pagination token is not present in the response, it means that all data matching the request has been loaded.
    public var nextToken: Swift.String?
    /// The list of rows in the table that match the query filter.
    /// This member is required.
    public var rows: [HoneycodeClientTypes.TableRow]?
    /// Indicates the cursor of the workbook at which the data returned by this request is read. Workbook cursor keeps increasing with every update and the increments are not sequential.
    /// This member is required.
    public var workbookCursor: Swift.Int

    public init(
        columnIds: [Swift.String]? = nil,
        nextToken: Swift.String? = nil,
        rows: [HoneycodeClientTypes.TableRow]? = nil,
        workbookCursor: Swift.Int = 0
    )
    {
        self.columnIds = columnIds
        self.nextToken = nextToken
        self.rows = rows
        self.workbookCursor = workbookCursor
    }
}

enum QueryTableRowsOutputError {

    static func httpError(from httpResponse: ClientRuntime.HttpResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "RequestTimeoutException": return try RequestTimeoutException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

extension RequestTimeoutException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> RequestTimeoutException {
        let reader = baseError.errorBodyReader
        var value = RequestTimeoutException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

/// The request timed out.
public struct RequestTimeoutException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "RequestTimeoutException" }
    public static var fault: ErrorFault { .server }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension ResourceNotFoundException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> ResourceNotFoundException {
        let reader = baseError.errorBodyReader
        var value = ResourceNotFoundException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

/// A Workbook, Table, App, Screen or Screen Automation was not found with the given ID.
public struct ResourceNotFoundException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ResourceNotFoundException" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension HoneycodeClientTypes.ResultRow {

    static func read(from reader: SmithyJSON.Reader) throws -> HoneycodeClientTypes.ResultRow {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = HoneycodeClientTypes.ResultRow()
        value.rowId = try reader["rowId"].readIfPresent()
        value.dataItems = try reader["dataItems"].readListIfPresent(memberReadingClosure: HoneycodeClientTypes.DataItem.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension HoneycodeClientTypes {
    /// A single row in the ResultSet.
    public struct ResultRow {
        /// List of all the data cells in a row.
        /// This member is required.
        public var dataItems: [HoneycodeClientTypes.DataItem]?
        /// The ID for a particular row.
        public var rowId: Swift.String?

        public init(
            dataItems: [HoneycodeClientTypes.DataItem]? = nil,
            rowId: Swift.String? = nil
        )
        {
            self.dataItems = dataItems
            self.rowId = rowId
        }
    }

}

extension HoneycodeClientTypes.ResultSet {

    static func read(from reader: SmithyJSON.Reader) throws -> HoneycodeClientTypes.ResultSet {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = HoneycodeClientTypes.ResultSet()
        value.headers = try reader["headers"].readListIfPresent(memberReadingClosure: HoneycodeClientTypes.ColumnMetadata.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.rows = try reader["rows"].readListIfPresent(memberReadingClosure: HoneycodeClientTypes.ResultRow.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension HoneycodeClientTypes {
    /// ResultSet contains the results of the request for a single block or list defined on the screen.
    public struct ResultSet {
        /// List of headers for all the data cells in the block. The header identifies the name and default format of the data cell. Data cells appear in the same order in all rows as defined in the header. The names and formats are not repeated in the rows. If a particular row does not have a value for a data cell, a blank value is used. For example, a task list that displays the task name, due date and assigned person might have headers [ { "name": "Task Name"}, {"name": "Due Date", "format": "DATE"}, {"name": "Assigned", "format": "CONTACT"} ]. Every row in the result will have the task name as the first item, due date as the second item and assigned person as the third item. If a particular task does not have a due date, that row will still have a blank value in the second element and the assigned person will still be in the third element.
        /// This member is required.
        public var headers: [HoneycodeClientTypes.ColumnMetadata]?
        /// List of rows returned by the request. Each row has a row Id and a list of data cells in that row. The data cells will be present in the same order as they are defined in the header.
        /// This member is required.
        public var rows: [HoneycodeClientTypes.ResultRow]?

        public init(
            headers: [HoneycodeClientTypes.ColumnMetadata]? = nil,
            rows: [HoneycodeClientTypes.ResultRow]? = nil
        )
        {
            self.headers = headers
            self.rows = rows
        }
    }

}

extension ServiceQuotaExceededException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> ServiceQuotaExceededException {
        let reader = baseError.errorBodyReader
        var value = ServiceQuotaExceededException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

/// The request caused service quota to be breached.
public struct ServiceQuotaExceededException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// This member is required.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ServiceQuotaExceededException" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension ServiceUnavailableException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> ServiceUnavailableException {
        let reader = baseError.errorBodyReader
        var value = ServiceUnavailableException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

/// Remote service is unreachable.
public struct ServiceUnavailableException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ServiceUnavailableException" }
    public static var fault: ErrorFault { .server }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension HoneycodeClientTypes.SourceDataColumnProperties {

    static func write(value: HoneycodeClientTypes.SourceDataColumnProperties?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["columnIndex"].write(value.columnIndex)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> HoneycodeClientTypes.SourceDataColumnProperties {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = HoneycodeClientTypes.SourceDataColumnProperties()
        value.columnIndex = try reader["columnIndex"].readIfPresent()
        return value
    }
}

extension HoneycodeClientTypes {
    /// An object that contains the properties for importing data to a specific column in a table.
    public struct SourceDataColumnProperties {
        /// The index of the column in the input file.
        public var columnIndex: Swift.Int?

        public init(
            columnIndex: Swift.Int? = nil
        )
        {
            self.columnIndex = columnIndex
        }
    }

}

extension StartTableDataImportJobInput {

    static func urlPathProvider(_ value: StartTableDataImportJobInput) -> Swift.String? {
        guard let workbookId = value.workbookId else {
            return nil
        }
        guard let destinationTableId = value.destinationTableId else {
            return nil
        }
        return "/workbooks/\(workbookId.urlPercentEncoding())/tables/\(destinationTableId.urlPercentEncoding())/import"
    }
}

extension StartTableDataImportJobInput {

    static func write(value: StartTableDataImportJobInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["clientRequestToken"].write(value.clientRequestToken)
        try writer["dataFormat"].write(value.dataFormat)
        try writer["dataSource"].write(value.dataSource, with: HoneycodeClientTypes.ImportDataSource.write(value:to:))
        try writer["importOptions"].write(value.importOptions, with: HoneycodeClientTypes.ImportOptions.write(value:to:))
    }
}

public struct StartTableDataImportJobInput {
    /// The request token for performing the update action. Request tokens help to identify duplicate requests. If a call times out or fails due to a transient error like a failed network connection, you can retry the call with the same request token. The service ensures that if the first call using that request token is successfully performed, the second call will not perform the action again. Note that request tokens are valid only for a few minutes. You cannot use request tokens to dedupe requests spanning hours or days.
    /// This member is required.
    public var clientRequestToken: Swift.String?
    /// The format of the data that is being imported. Currently the only option supported is "DELIMITED_TEXT".
    /// This member is required.
    public var dataFormat: HoneycodeClientTypes.ImportSourceDataFormat?
    /// The source of the data that is being imported. The size of source must be no larger than 100 MB. Source must have no more than 100,000 cells and no more than 1,000 rows.
    /// This member is required.
    public var dataSource: HoneycodeClientTypes.ImportDataSource?
    /// The ID of the table where the rows are being imported. If a table with the specified id could not be found, this API throws ResourceNotFoundException.
    /// This member is required.
    public var destinationTableId: Swift.String?
    /// The options for customizing this import request.
    /// This member is required.
    public var importOptions: HoneycodeClientTypes.ImportOptions?
    /// The ID of the workbook where the rows are being imported. If a workbook with the specified id could not be found, this API throws ResourceNotFoundException.
    /// This member is required.
    public var workbookId: Swift.String?

    public init(
        clientRequestToken: Swift.String? = nil,
        dataFormat: HoneycodeClientTypes.ImportSourceDataFormat? = nil,
        dataSource: HoneycodeClientTypes.ImportDataSource? = nil,
        destinationTableId: Swift.String? = nil,
        importOptions: HoneycodeClientTypes.ImportOptions? = nil,
        workbookId: Swift.String? = nil
    )
    {
        self.clientRequestToken = clientRequestToken
        self.dataFormat = dataFormat
        self.dataSource = dataSource
        self.destinationTableId = destinationTableId
        self.importOptions = importOptions
        self.workbookId = workbookId
    }
}

extension StartTableDataImportJobOutput {

    static func httpOutput(from httpResponse: ClientRuntime.HttpResponse) async throws -> StartTableDataImportJobOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = StartTableDataImportJobOutput()
        value.jobId = try reader["jobId"].readIfPresent()
        value.jobStatus = try reader["jobStatus"].readIfPresent()
        return value
    }
}

public struct StartTableDataImportJobOutput {
    /// The id that is assigned to this import job. Future requests to find out the status of this import job need to send this id in the appropriate parameter in the request.
    /// This member is required.
    public var jobId: Swift.String?
    /// The status of the import job immediately after submitting the request.
    /// This member is required.
    public var jobStatus: HoneycodeClientTypes.TableDataImportJobStatus?

    public init(
        jobId: Swift.String? = nil,
        jobStatus: HoneycodeClientTypes.TableDataImportJobStatus? = nil
    )
    {
        self.jobId = jobId
        self.jobStatus = jobStatus
    }
}

enum StartTableDataImportJobOutputError {

    static func httpError(from httpResponse: ClientRuntime.HttpResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "RequestTimeoutException": return try RequestTimeoutException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceQuotaExceededException": return try ServiceQuotaExceededException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

extension HoneycodeClientTypes.Table {

    static func read(from reader: SmithyJSON.Reader) throws -> HoneycodeClientTypes.Table {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = HoneycodeClientTypes.Table()
        value.tableId = try reader["tableId"].readIfPresent()
        value.tableName = try reader["tableName"].readIfPresent()
        return value
    }
}

extension HoneycodeClientTypes {
    /// An object representing the properties of a table in a workbook.
    public struct Table {
        /// The id of the table.
        public var tableId: Swift.String?
        /// The name of the table.
        public var tableName: Swift.String?

        public init(
            tableId: Swift.String? = nil,
            tableName: Swift.String? = nil
        )
        {
            self.tableId = tableId
            self.tableName = tableName
        }
    }

}

extension HoneycodeClientTypes.TableColumn {

    static func read(from reader: SmithyJSON.Reader) throws -> HoneycodeClientTypes.TableColumn {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = HoneycodeClientTypes.TableColumn()
        value.tableColumnId = try reader["tableColumnId"].readIfPresent()
        value.tableColumnName = try reader["tableColumnName"].readIfPresent()
        value.format = try reader["format"].readIfPresent()
        return value
    }
}

extension HoneycodeClientTypes {
    /// An object that contains attributes about a single column in a table
    public struct TableColumn {
        /// The column level format that is applied in the table. An empty value in this field means that the column format is the default value 'AUTO'.
        public var format: HoneycodeClientTypes.Format?
        /// The id of the column in the table.
        public var tableColumnId: Swift.String?
        /// The name of the column in the table.
        public var tableColumnName: Swift.String?

        public init(
            format: HoneycodeClientTypes.Format? = nil,
            tableColumnId: Swift.String? = nil,
            tableColumnName: Swift.String? = nil
        )
        {
            self.format = format
            self.tableColumnId = tableColumnId
            self.tableColumnName = tableColumnName
        }
    }

}

extension HoneycodeClientTypes.TableDataImportJobMetadata {

    static func read(from reader: SmithyJSON.Reader) throws -> HoneycodeClientTypes.TableDataImportJobMetadata {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = HoneycodeClientTypes.TableDataImportJobMetadata()
        value.submitter = try reader["submitter"].readIfPresent(with: HoneycodeClientTypes.ImportJobSubmitter.read(from:))
        value.submitTime = try reader["submitTime"].readTimestampIfPresent(format: .epochSeconds)
        value.importOptions = try reader["importOptions"].readIfPresent(with: HoneycodeClientTypes.ImportOptions.read(from:))
        value.dataSource = try reader["dataSource"].readIfPresent(with: HoneycodeClientTypes.ImportDataSource.read(from:))
        return value
    }
}

extension HoneycodeClientTypes {
    /// The metadata associated with the table data import job that was submitted.
    public struct TableDataImportJobMetadata {
        /// The source of the data that was submitted for import.
        /// This member is required.
        public var dataSource: HoneycodeClientTypes.ImportDataSource?
        /// The options that was specified at the time of submitting the import request.
        /// This member is required.
        public var importOptions: HoneycodeClientTypes.ImportOptions?
        /// The timestamp when the job was submitted for import.
        /// This member is required.
        public var submitTime: ClientRuntime.Date?
        /// Details about the submitter of the import request.
        /// This member is required.
        public var submitter: HoneycodeClientTypes.ImportJobSubmitter?

        public init(
            dataSource: HoneycodeClientTypes.ImportDataSource? = nil,
            importOptions: HoneycodeClientTypes.ImportOptions? = nil,
            submitTime: ClientRuntime.Date? = nil,
            submitter: HoneycodeClientTypes.ImportJobSubmitter? = nil
        )
        {
            self.dataSource = dataSource
            self.importOptions = importOptions
            self.submitTime = submitTime
            self.submitter = submitter
        }
    }

}

extension HoneycodeClientTypes {

    public enum TableDataImportJobStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case completed
        case failed
        case inprogress
        case submitted
        case sdkUnknown(Swift.String)

        public static var allCases: [TableDataImportJobStatus] {
            return [
                .completed,
                .failed,
                .inprogress,
                .submitted,
                .sdkUnknown("")
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .completed: return "COMPLETED"
            case .failed: return "FAILED"
            case .inprogress: return "IN_PROGRESS"
            case .submitted: return "SUBMITTED"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension HoneycodeClientTypes.TableRow {

    static func read(from reader: SmithyJSON.Reader) throws -> HoneycodeClientTypes.TableRow {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = HoneycodeClientTypes.TableRow()
        value.rowId = try reader["rowId"].readIfPresent()
        value.cells = try reader["cells"].readListIfPresent(memberReadingClosure: HoneycodeClientTypes.Cell.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension HoneycodeClientTypes {
    /// An object that contains attributes about a single row in a table
    public struct TableRow {
        /// A list of cells in the table row. The cells appear in the same order as the columns of the table.
        /// This member is required.
        public var cells: [HoneycodeClientTypes.Cell]?
        /// The id of the row in the table.
        /// This member is required.
        public var rowId: Swift.String?

        public init(
            cells: [HoneycodeClientTypes.Cell]? = nil,
            rowId: Swift.String? = nil
        )
        {
            self.cells = cells
            self.rowId = rowId
        }
    }

}

extension TagResourceInput {

    static func urlPathProvider(_ value: TagResourceInput) -> Swift.String? {
        guard let resourceArn = value.resourceArn else {
            return nil
        }
        return "/tags/\(resourceArn.urlPercentEncoding())"
    }
}

extension TagResourceInput {

    static func write(value: TagResourceInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["tags"].writeMap(value.tags, valueWritingClosure: Swift.String.write(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
    }
}

public struct TagResourceInput {
    /// The resource's Amazon Resource Name (ARN).
    /// This member is required.
    public var resourceArn: Swift.String?
    /// A list of tags to apply to the resource.
    /// This member is required.
    public var tags: [Swift.String:Swift.String]?

    public init(
        resourceArn: Swift.String? = nil,
        tags: [Swift.String:Swift.String]? = nil
    )
    {
        self.resourceArn = resourceArn
        self.tags = tags
    }
}

extension TagResourceOutput {

    static func httpOutput(from httpResponse: ClientRuntime.HttpResponse) async throws -> TagResourceOutput {
        return TagResourceOutput()
    }
}

public struct TagResourceOutput {

    public init() { }
}

enum TagResourceOutputError {

    static func httpError(from httpResponse: ClientRuntime.HttpResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "RequestTimeoutException": return try RequestTimeoutException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

extension ThrottlingException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> ThrottlingException {
        let reader = baseError.errorBodyReader
        var value = ThrottlingException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

/// Tps(transactions per second) rate reached.
public struct ThrottlingException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ThrottlingException" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension UntagResourceInput {

    static func queryItemProvider(_ value: UntagResourceInput) throws -> [ClientRuntime.SDKURLQueryItem] {
        var items = [ClientRuntime.SDKURLQueryItem]()
        guard let tagKeys = value.tagKeys else {
            let message = "Creating a URL Query Item failed. tagKeys is required and must not be nil."
            throw ClientRuntime.ClientError.unknownError(message)
        }
        tagKeys.forEach { queryItemValue in
            let queryItem = ClientRuntime.SDKURLQueryItem(name: "tagKeys".urlPercentEncoding(), value: Swift.String(queryItemValue).urlPercentEncoding())
            items.append(queryItem)
        }
        return items
    }
}

extension UntagResourceInput {

    static func urlPathProvider(_ value: UntagResourceInput) -> Swift.String? {
        guard let resourceArn = value.resourceArn else {
            return nil
        }
        return "/tags/\(resourceArn.urlPercentEncoding())"
    }
}

public struct UntagResourceInput {
    /// The resource's Amazon Resource Name (ARN).
    /// This member is required.
    public var resourceArn: Swift.String?
    /// A list of tag keys to remove from the resource.
    /// This member is required.
    public var tagKeys: [Swift.String]?

    public init(
        resourceArn: Swift.String? = nil,
        tagKeys: [Swift.String]? = nil
    )
    {
        self.resourceArn = resourceArn
        self.tagKeys = tagKeys
    }
}

extension UntagResourceOutput {

    static func httpOutput(from httpResponse: ClientRuntime.HttpResponse) async throws -> UntagResourceOutput {
        return UntagResourceOutput()
    }
}

public struct UntagResourceOutput {

    public init() { }
}

enum UntagResourceOutputError {

    static func httpError(from httpResponse: ClientRuntime.HttpResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "RequestTimeoutException": return try RequestTimeoutException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

extension HoneycodeClientTypes.UpdateRowData {

    static func write(value: HoneycodeClientTypes.UpdateRowData?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["cellsToUpdate"].writeMap(value.cellsToUpdate, valueWritingClosure: HoneycodeClientTypes.CellInput.write(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        try writer["rowId"].write(value.rowId)
    }
}

extension HoneycodeClientTypes {
    /// Data needed to create a single row in a table as part of the BatchCreateTableRows request.
    public struct UpdateRowData {
        /// A map representing the cells to update in the given row. The key is the column id of the cell and the value is the CellInput object that represents the data to set in that cell.
        /// This member is required.
        public var cellsToUpdate: [Swift.String:HoneycodeClientTypes.CellInput]?
        /// The id of the row that needs to be updated.
        /// This member is required.
        public var rowId: Swift.String?

        public init(
            cellsToUpdate: [Swift.String:HoneycodeClientTypes.CellInput]? = nil,
            rowId: Swift.String? = nil
        )
        {
            self.cellsToUpdate = cellsToUpdate
            self.rowId = rowId
        }
    }

}

extension HoneycodeClientTypes {

    public enum UpsertAction: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case appended
        case updated
        case sdkUnknown(Swift.String)

        public static var allCases: [UpsertAction] {
            return [
                .appended,
                .updated,
                .sdkUnknown("")
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .appended: return "APPENDED"
            case .updated: return "UPDATED"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension HoneycodeClientTypes.UpsertRowData {

    static func write(value: HoneycodeClientTypes.UpsertRowData?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["batchItemId"].write(value.batchItemId)
        try writer["cellsToUpdate"].writeMap(value.cellsToUpdate, valueWritingClosure: HoneycodeClientTypes.CellInput.write(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        try writer["filter"].write(value.filter, with: HoneycodeClientTypes.Filter.write(value:to:))
    }
}

extension HoneycodeClientTypes {
    /// Data needed to upsert rows in a table as part of a single item in the BatchUpsertTableRows request.
    public struct UpsertRowData {
        /// An external identifier that represents a single item in the request that is being upserted as part of the BatchUpsertTableRows request. This can be any string that you can use to identify the item in the request. The BatchUpsertTableRows API puts the batch item id in the results to allow you to link data in the request to data in the results.
        /// This member is required.
        public var batchItemId: Swift.String?
        /// A map representing the cells to update for the matching rows or an appended row. The key is the column id of the cell and the value is the CellInput object that represents the data to set in that cell.
        /// This member is required.
        public var cellsToUpdate: [Swift.String:HoneycodeClientTypes.CellInput]?
        /// The filter formula to use to find existing matching rows to update. The formula needs to return zero or more rows. If the formula returns 0 rows, then a new row will be appended in the target table. If the formula returns one or more rows, then the returned rows will be updated. Note that the filter formula needs to return rows from the target table for the upsert operation to succeed. If the filter formula has a syntax error or it doesn't evaluate to zero or more rows in the target table for any one item in the input list, then the entire BatchUpsertTableRows request fails and no updates are made to the table.
        /// This member is required.
        public var filter: HoneycodeClientTypes.Filter?

        public init(
            batchItemId: Swift.String? = nil,
            cellsToUpdate: [Swift.String:HoneycodeClientTypes.CellInput]? = nil,
            filter: HoneycodeClientTypes.Filter? = nil
        )
        {
            self.batchItemId = batchItemId
            self.cellsToUpdate = cellsToUpdate
            self.filter = filter
        }
    }

}

extension HoneycodeClientTypes.UpsertRowsResult {

    static func read(from reader: SmithyJSON.Reader) throws -> HoneycodeClientTypes.UpsertRowsResult {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = HoneycodeClientTypes.UpsertRowsResult()
        value.rowIds = try reader["rowIds"].readListIfPresent(memberReadingClosure: Swift.String.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.upsertAction = try reader["upsertAction"].readIfPresent()
        return value
    }
}

extension HoneycodeClientTypes {
    /// An object that represents the result of a single upsert row request.
    public struct UpsertRowsResult {
        /// The list of row ids that were changed as part of an upsert row operation. If the upsert resulted in an update, this list could potentially contain multiple rows that matched the filter and hence got updated. If the upsert resulted in an append, this list would only have the single row that was appended.
        /// This member is required.
        public var rowIds: [Swift.String]?
        /// The result of the upsert action.
        /// This member is required.
        public var upsertAction: HoneycodeClientTypes.UpsertAction?

        public init(
            rowIds: [Swift.String]? = nil,
            upsertAction: HoneycodeClientTypes.UpsertAction? = nil
        )
        {
            self.rowIds = rowIds
            self.upsertAction = upsertAction
        }
    }

}

extension ValidationException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> ValidationException {
        let reader = baseError.errorBodyReader
        var value = ValidationException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

/// Request is invalid. The message in the response contains details on why the request is invalid.
public struct ValidationException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// This member is required.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ValidationException" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension HoneycodeClientTypes.VariableValue: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CONTENT_REDACTED"
    }
}

extension HoneycodeClientTypes.VariableValue {

    static func write(value: HoneycodeClientTypes.VariableValue?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["rawValue"].write(value.rawValue)
    }
}

extension HoneycodeClientTypes {
    /// The input variables to the app to be used by the InvokeScreenAutomation action request.
    public struct VariableValue {
        /// Raw value of the variable.
        /// This member is required.
        public var rawValue: Swift.String?

        public init(
            rawValue: Swift.String? = nil
        )
        {
            self.rawValue = rawValue
        }
    }

}
