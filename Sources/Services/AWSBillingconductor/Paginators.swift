// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension BillingconductorClient {
    /// Paginate over `[ListAccountAssociationsOutput]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[ListAccountAssociationsInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `ListAccountAssociationsOutput`
    public func listAccountAssociationsPaginated(input: ListAccountAssociationsInput) -> ClientRuntime.PaginatorSequence<ListAccountAssociationsInput, ListAccountAssociationsOutput> {
        return ClientRuntime.PaginatorSequence<ListAccountAssociationsInput, ListAccountAssociationsOutput>(input: input, inputKey: \ListAccountAssociationsInput.nextToken, outputKey: \ListAccountAssociationsOutput.nextToken, paginationFunction: self.listAccountAssociations(input:))
    }
}

extension ListAccountAssociationsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListAccountAssociationsInput {
        return ListAccountAssociationsInput(
            billingPeriod: self.billingPeriod,
            filters: self.filters,
            nextToken: token
        )}
}

extension PaginatorSequence where Input == ListAccountAssociationsInput, Output == ListAccountAssociationsOutput {
    /// This paginator transforms the `AsyncSequence` returned by `listAccountAssociationsPaginated`
    /// to access the nested member `[BillingconductorClientTypes.AccountAssociationsListElement]`
    /// - Returns: `[BillingconductorClientTypes.AccountAssociationsListElement]`
    public func linkedAccounts() async throws -> [BillingconductorClientTypes.AccountAssociationsListElement] {
        return try await self.asyncCompactMap { item in item.linkedAccounts }
    }
}
extension BillingconductorClient {
    /// Paginate over `[ListBillingGroupCostReportsOutput]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[ListBillingGroupCostReportsInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `ListBillingGroupCostReportsOutput`
    public func listBillingGroupCostReportsPaginated(input: ListBillingGroupCostReportsInput) -> ClientRuntime.PaginatorSequence<ListBillingGroupCostReportsInput, ListBillingGroupCostReportsOutput> {
        return ClientRuntime.PaginatorSequence<ListBillingGroupCostReportsInput, ListBillingGroupCostReportsOutput>(input: input, inputKey: \ListBillingGroupCostReportsInput.nextToken, outputKey: \ListBillingGroupCostReportsOutput.nextToken, paginationFunction: self.listBillingGroupCostReports(input:))
    }
}

extension ListBillingGroupCostReportsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListBillingGroupCostReportsInput {
        return ListBillingGroupCostReportsInput(
            billingPeriod: self.billingPeriod,
            filters: self.filters,
            maxResults: self.maxResults,
            nextToken: token
        )}
}

extension PaginatorSequence where Input == ListBillingGroupCostReportsInput, Output == ListBillingGroupCostReportsOutput {
    /// This paginator transforms the `AsyncSequence` returned by `listBillingGroupCostReportsPaginated`
    /// to access the nested member `[BillingconductorClientTypes.BillingGroupCostReportElement]`
    /// - Returns: `[BillingconductorClientTypes.BillingGroupCostReportElement]`
    public func billingGroupCostReports() async throws -> [BillingconductorClientTypes.BillingGroupCostReportElement] {
        return try await self.asyncCompactMap { item in item.billingGroupCostReports }
    }
}
