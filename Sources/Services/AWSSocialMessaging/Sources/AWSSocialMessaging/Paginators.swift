//
// Copyright Amazon.com Inc. or its affiliates.
// All Rights Reserved.
//
// SPDX-License-Identifier: Apache-2.0
//

// Code generated by smithy-swift-codegen. DO NOT EDIT!

import protocol ClientRuntime.PaginateToken
import struct ClientRuntime.PaginatorSequence

extension SocialMessagingClient {
    /// Paginate over `[ListWhatsAppMessageTemplatesOutput]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[ListWhatsAppMessageTemplatesInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `ListWhatsAppMessageTemplatesOutput`
    public func listWhatsAppMessageTemplatesPaginated(input: ListWhatsAppMessageTemplatesInput) -> ClientRuntime.PaginatorSequence<ListWhatsAppMessageTemplatesInput, ListWhatsAppMessageTemplatesOutput> {
        return ClientRuntime.PaginatorSequence<ListWhatsAppMessageTemplatesInput, ListWhatsAppMessageTemplatesOutput>(input: input, inputKey: \.nextToken, outputKey: \.nextToken, paginationFunction: self.listWhatsAppMessageTemplates(input:))
    }
}

extension ListWhatsAppMessageTemplatesInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListWhatsAppMessageTemplatesInput {
        return ListWhatsAppMessageTemplatesInput(
            id: self.id,
            maxResults: self.maxResults,
            nextToken: token
        )}
}

extension PaginatorSequence where OperationStackInput == ListWhatsAppMessageTemplatesInput, OperationStackOutput == ListWhatsAppMessageTemplatesOutput {
    /// This paginator transforms the `AsyncSequence` returned by `listWhatsAppMessageTemplatesPaginated`
    /// to access the nested member `[SocialMessagingClientTypes.TemplateSummary]`
    /// - Returns: `[SocialMessagingClientTypes.TemplateSummary]`
    public func templates() async throws -> [SocialMessagingClientTypes.TemplateSummary] {
        return try await self.asyncCompactMap { item in item.templates }
    }
}
extension SocialMessagingClient {
    /// Paginate over `[ListWhatsAppTemplateLibraryOutput]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[ListWhatsAppTemplateLibraryInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `ListWhatsAppTemplateLibraryOutput`
    public func listWhatsAppTemplateLibraryPaginated(input: ListWhatsAppTemplateLibraryInput) -> ClientRuntime.PaginatorSequence<ListWhatsAppTemplateLibraryInput, ListWhatsAppTemplateLibraryOutput> {
        return ClientRuntime.PaginatorSequence<ListWhatsAppTemplateLibraryInput, ListWhatsAppTemplateLibraryOutput>(input: input, inputKey: \.nextToken, outputKey: \.nextToken, paginationFunction: self.listWhatsAppTemplateLibrary(input:))
    }
}

extension ListWhatsAppTemplateLibraryInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListWhatsAppTemplateLibraryInput {
        return ListWhatsAppTemplateLibraryInput(
            filters: self.filters,
            id: self.id,
            maxResults: self.maxResults,
            nextToken: token
        )}
}

extension PaginatorSequence where OperationStackInput == ListWhatsAppTemplateLibraryInput, OperationStackOutput == ListWhatsAppTemplateLibraryOutput {
    /// This paginator transforms the `AsyncSequence` returned by `listWhatsAppTemplateLibraryPaginated`
    /// to access the nested member `[SocialMessagingClientTypes.MetaLibraryTemplateDefinition]`
    /// - Returns: `[SocialMessagingClientTypes.MetaLibraryTemplateDefinition]`
    public func metaLibraryTemplates() async throws -> [SocialMessagingClientTypes.MetaLibraryTemplateDefinition] {
        return try await self.asyncCompactMap { item in item.metaLibraryTemplates }
    }
}
