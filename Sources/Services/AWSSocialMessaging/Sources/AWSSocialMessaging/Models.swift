//
// Copyright Amazon.com Inc. or its affiliates.
// All Rights Reserved.
//
// SPDX-License-Identifier: Apache-2.0
//

// Code generated by smithy-swift-codegen. DO NOT EDIT!

@_spi(SmithyReadWrite) import ClientRuntime
import Foundation
import class SmithyHTTPAPI.HTTPResponse
@_spi(SmithyReadWrite) import class SmithyJSON.Reader
@_spi(SmithyReadWrite) import class SmithyJSON.Writer
import enum ClientRuntime.ErrorFault
import enum Smithy.ClientError
import enum SmithyReadWrite.ReaderError
@_spi(SmithyReadWrite) import enum SmithyReadWrite.ReadingClosures
@_spi(SmithyReadWrite) import enum SmithyReadWrite.WritingClosures
@_spi(SmithyTimestamps) import enum SmithyTimestamps.TimestampFormat
@_spi(SmithyReadWrite) import func SmithyReadWrite.mapReadingClosure
@_spi(SmithyReadWrite) import func SmithyReadWrite.mapWritingClosure
import protocol AWSClientRuntime.AWSServiceError
import protocol ClientRuntime.HTTPError
import protocol ClientRuntime.ModeledError
@_spi(SmithyReadWrite) import protocol SmithyReadWrite.SmithyReader
@_spi(SmithyReadWrite) import protocol SmithyReadWrite.SmithyWriter
@_spi(SmithyReadWrite) import struct AWSClientRuntime.RestJSONError
@_spi(UnknownAWSHTTPServiceError) import struct AWSClientRuntime.UnknownAWSHTTPServiceError
import struct Smithy.URIQueryItem
@_spi(SmithyTimestamps) import struct SmithyTimestamps.TimestampFormatter

/// You do not have sufficient access to perform this action.
public struct AccessDeniedByMetaException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error, Swift.Sendable {

    public struct Properties: Swift.Sendable {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "AccessDeniedByMetaException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    ) {
        self.properties.message = message
    }
}

/// You do not have sufficient access to perform this action.
public struct AccessDeniedException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error, Swift.Sendable {

    public struct Properties: Swift.Sendable {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "AccessDeniedException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    ) {
        self.properties.message = message
    }
}

/// Thrown when performing an action because a dependency would be broken.
public struct DependencyException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error, Swift.Sendable {

    public struct Properties: Swift.Sendable {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "DependencyException" }
    public static var fault: ClientRuntime.ErrorFault { .server }
    public static var isRetryable: Swift.Bool { true }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    ) {
        self.properties.message = message
    }
}

/// One or more parameters provided to the action are not valid.
public struct InvalidParametersException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error, Swift.Sendable {

    public struct Properties: Swift.Sendable {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidParametersException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    ) {
        self.properties.message = message
    }
}

/// The request was denied because it would exceed one or more service quotas or limits.
public struct LimitExceededException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error, Swift.Sendable {

    public struct Properties: Swift.Sendable {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "LimitExceededException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    ) {
        self.properties.message = message
    }
}

/// The request was denied due to request throttling.
public struct ThrottledRequestException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error, Swift.Sendable {

    public struct Properties: Swift.Sendable {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ThrottledRequestException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { true }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    ) {
        self.properties.message = message
    }
}

extension SocialMessagingClientTypes {

    /// The tag for a resource.
    public struct Tag: Swift.Sendable {
        /// The tag key.
        /// This member is required.
        public var key: Swift.String?
        /// The tag value.
        public var value: Swift.String?

        public init(
            key: Swift.String? = nil,
            value: Swift.String? = nil
        ) {
            self.key = key
            self.value = value
        }
    }
}

extension SocialMessagingClientTypes {

    /// The registration details for a linked phone number.
    public struct WabaPhoneNumberSetupFinalization: Swift.Sendable {
        /// The two letter ISO region for the location of where Meta will store data. Asiaâ€“Pacific (APAC)
        ///
        /// * Australia AU
        ///
        /// * Indonesia ID
        ///
        /// * India IN
        ///
        /// * Japan JP
        ///
        /// * Singapore SG
        ///
        /// * South Korea KR
        ///
        ///
        /// Europe
        ///
        /// * Germany DE
        ///
        /// * Switzerland CH
        ///
        /// * United Kingdom GB
        ///
        ///
        /// Latin America (LATAM)
        ///
        /// * Brazil BR
        ///
        ///
        /// Middle East and Africa (MEA)
        ///
        /// * Bahrain BH
        ///
        /// * South Africa ZA
        ///
        /// * United Arab Emirates AE
        ///
        ///
        /// North America (NORAM)
        ///
        /// * Canada CA
        public var dataLocalizationRegion: Swift.String?
        /// The unique identifier of the originating phone number associated with the media. Phone number identifiers are formatted as phone-number-id-01234567890123456789012345678901. Use [GetLinkedWhatsAppBusinessAccount](https://docs.aws.amazon.com/social-messaging/latest/APIReference/API_GetLinkedWhatsAppBusinessAccountPhoneNumber.html) to find a phone number's id.
        /// This member is required.
        public var id: Swift.String?
        /// An array of key and value pair tags.
        public var tags: [SocialMessagingClientTypes.Tag]?
        /// The PIN to use for two-step verification. To reset your PIN follow the directions in [Updating PIN](https://developers.facebook.com/docs/whatsapp/cloud-api/reference/two-step-verification/#updating-pin) in the WhatsApp Business Platform Cloud API Reference.
        /// This member is required.
        public var twoFactorPin: Swift.String?

        public init(
            dataLocalizationRegion: Swift.String? = nil,
            id: Swift.String? = nil,
            tags: [SocialMessagingClientTypes.Tag]? = nil,
            twoFactorPin: Swift.String? = nil
        ) {
            self.dataLocalizationRegion = dataLocalizationRegion
            self.id = id
            self.tags = tags
            self.twoFactorPin = twoFactorPin
        }
    }
}

extension SocialMessagingClientTypes.WabaPhoneNumberSetupFinalization: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "WabaPhoneNumberSetupFinalization(dataLocalizationRegion: \(Swift.String(describing: dataLocalizationRegion)), id: \(Swift.String(describing: id)), tags: \(Swift.String(describing: tags)), twoFactorPin: \"CONTENT_REDACTED\")"}
}

extension SocialMessagingClientTypes {

    /// Contains information on the event destination.
    public struct WhatsAppBusinessAccountEventDestination: Swift.Sendable {
        /// The ARN of the event destination.
        /// This member is required.
        public var eventDestinationArn: Swift.String?
        /// The Amazon Resource Name (ARN) of an Identity and Access Management role that is able to import phone numbers and write events.
        public var roleArn: Swift.String?

        public init(
            eventDestinationArn: Swift.String? = nil,
            roleArn: Swift.String? = nil
        ) {
            self.eventDestinationArn = eventDestinationArn
            self.roleArn = roleArn
        }
    }
}

extension SocialMessagingClientTypes {

    /// The registration details for a linked WhatsApp Business Account.
    public struct WabaSetupFinalization: Swift.Sendable {
        /// The event destinations for the linked WhatsApp Business Account.
        public var eventDestinations: [SocialMessagingClientTypes.WhatsAppBusinessAccountEventDestination]?
        /// The ID of the linked WhatsApp Business Account, formatted as waba-01234567890123456789012345678901.
        public var id: Swift.String?
        /// An array of key and value pair tags.
        public var tags: [SocialMessagingClientTypes.Tag]?

        public init(
            eventDestinations: [SocialMessagingClientTypes.WhatsAppBusinessAccountEventDestination]? = nil,
            id: Swift.String? = nil,
            tags: [SocialMessagingClientTypes.Tag]? = nil
        ) {
            self.eventDestinations = eventDestinations
            self.id = id
            self.tags = tags
        }
    }
}

extension SocialMessagingClientTypes {

    /// The details of linking a WhatsApp Business Account to your Amazon Web Services account.
    public struct WhatsAppSetupFinalization: Swift.Sendable {
        /// An Amazon Web Services access token generated by WhatsAppSignupCallback and used by WhatsAppSetupFinalization.
        /// This member is required.
        public var associateInProgressToken: Swift.String?
        /// Used to add a new phone number to an existing WhatsApp Business Account. This field can't be used when the waba field is present.
        public var phoneNumberParent: Swift.String?
        /// An array of WabaPhoneNumberSetupFinalization objects containing the details of each phone number associated with the WhatsApp Business Account.
        /// This member is required.
        public var phoneNumbers: [SocialMessagingClientTypes.WabaPhoneNumberSetupFinalization]?
        /// Used to create a new WhatsApp Business Account and add a phone number. This field can't be used when the phoneNumberParent field is present.
        public var waba: SocialMessagingClientTypes.WabaSetupFinalization?

        public init(
            associateInProgressToken: Swift.String? = nil,
            phoneNumberParent: Swift.String? = nil,
            phoneNumbers: [SocialMessagingClientTypes.WabaPhoneNumberSetupFinalization]? = nil,
            waba: SocialMessagingClientTypes.WabaSetupFinalization? = nil
        ) {
            self.associateInProgressToken = associateInProgressToken
            self.phoneNumberParent = phoneNumberParent
            self.phoneNumbers = phoneNumbers
            self.waba = waba
        }
    }
}

extension SocialMessagingClientTypes.WhatsAppSetupFinalization: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "WhatsAppSetupFinalization(phoneNumberParent: \(Swift.String(describing: phoneNumberParent)), phoneNumbers: \(Swift.String(describing: phoneNumbers)), waba: \(Swift.String(describing: waba)), associateInProgressToken: \"CONTENT_REDACTED\")"}
}

extension SocialMessagingClientTypes {

    /// Contains the accessToken provided by Meta during signup.
    public struct WhatsAppSignupCallback: Swift.Sendable {
        /// The access token for your WhatsApp Business Account. The accessToken value is provided by Meta.
        /// This member is required.
        public var accessToken: Swift.String?
        /// The URL where WhatsApp will send callback notifications for this account.
        public var callbackUrl: Swift.String?

        public init(
            accessToken: Swift.String? = nil,
            callbackUrl: Swift.String? = nil
        ) {
            self.accessToken = accessToken
            self.callbackUrl = callbackUrl
        }
    }
}

public struct AssociateWhatsAppBusinessAccountInput: Swift.Sendable {
    /// A JSON object that contains the phone numbers and WhatsApp Business Account to link to your account.
    public var setupFinalization: SocialMessagingClientTypes.WhatsAppSetupFinalization?
    /// Contains the callback access token.
    public var signupCallback: SocialMessagingClientTypes.WhatsAppSignupCallback?

    public init(
        setupFinalization: SocialMessagingClientTypes.WhatsAppSetupFinalization? = nil,
        signupCallback: SocialMessagingClientTypes.WhatsAppSignupCallback? = nil
    ) {
        self.setupFinalization = setupFinalization
        self.signupCallback = signupCallback
    }
}

extension SocialMessagingClientTypes {

    public enum RegistrationStatus: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case complete
        case incomplete
        case sdkUnknown(Swift.String)

        public static var allCases: [RegistrationStatus] {
            return [
                .complete,
                .incomplete
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .complete: return "COMPLETE"
            case .incomplete: return "INCOMPLETE"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension SocialMessagingClientTypes {

    /// The details of your WhatsApp phone number.
    public struct WhatsAppPhoneNumberDetail: Swift.Sendable {
        /// The ARN of the WhatsApp phone number.
        /// This member is required.
        public var arn: Swift.String?
        /// The geographic region where the WhatsApp phone number's data is stored and processed.
        public var dataLocalizationRegion: Swift.String?
        /// The phone number that appears in the recipients display.
        /// This member is required.
        public var displayPhoneNumber: Swift.String?
        /// The display name for this phone number.
        /// This member is required.
        public var displayPhoneNumberName: Swift.String?
        /// The phone number ID from Meta.
        /// This member is required.
        public var metaPhoneNumberId: Swift.String?
        /// The phone number for sending WhatsApp.
        /// This member is required.
        public var phoneNumber: Swift.String?
        /// The phone number ID. Phone number identifiers are formatted as phone-number-id-01234567890123456789012345678901.
        /// This member is required.
        public var phoneNumberId: Swift.String?
        /// The quality rating of the phone number.
        /// This member is required.
        public var qualityRating: Swift.String?

        public init(
            arn: Swift.String? = nil,
            dataLocalizationRegion: Swift.String? = nil,
            displayPhoneNumber: Swift.String? = nil,
            displayPhoneNumberName: Swift.String? = nil,
            metaPhoneNumberId: Swift.String? = nil,
            phoneNumber: Swift.String? = nil,
            phoneNumberId: Swift.String? = nil,
            qualityRating: Swift.String? = nil
        ) {
            self.arn = arn
            self.dataLocalizationRegion = dataLocalizationRegion
            self.displayPhoneNumber = displayPhoneNumber
            self.displayPhoneNumberName = displayPhoneNumberName
            self.metaPhoneNumberId = metaPhoneNumberId
            self.phoneNumber = phoneNumber
            self.phoneNumberId = phoneNumberId
            self.qualityRating = qualityRating
        }
    }
}

extension SocialMessagingClientTypes {

    /// Contains your WhatsApp registration status and details of any unregistered WhatsApp phone number.
    public struct LinkedWhatsAppBusinessAccountIdMetaData: Swift.Sendable {
        /// The name of your account.
        public var accountName: Swift.String?
        /// The registration status of the linked WhatsApp Business Account.
        public var registrationStatus: SocialMessagingClientTypes.RegistrationStatus?
        /// The details for unregistered WhatsApp phone numbers.
        public var unregisteredWhatsAppPhoneNumbers: [SocialMessagingClientTypes.WhatsAppPhoneNumberDetail]?
        /// The Amazon Resource Name (ARN) of the WhatsApp Business Account ID.
        public var wabaId: Swift.String?

        public init(
            accountName: Swift.String? = nil,
            registrationStatus: SocialMessagingClientTypes.RegistrationStatus? = nil,
            unregisteredWhatsAppPhoneNumbers: [SocialMessagingClientTypes.WhatsAppPhoneNumberDetail]? = nil,
            wabaId: Swift.String? = nil
        ) {
            self.accountName = accountName
            self.registrationStatus = registrationStatus
            self.unregisteredWhatsAppPhoneNumbers = unregisteredWhatsAppPhoneNumbers
            self.wabaId = wabaId
        }
    }
}

extension SocialMessagingClientTypes {

    /// Contains the results of WhatsAppSignupCallback.
    public struct WhatsAppSignupCallbackResult: Swift.Sendable {
        /// An Amazon Web Services access token generated by WhatsAppSignupCallback and used by WhatsAppSetupFinalization.
        public var associateInProgressToken: Swift.String?
        /// A LinkedWhatsAppBusinessAccountIdMetaData object map containing the details of any WhatsAppBusiness accounts that have incomplete setup.
        public var linkedAccountsWithIncompleteSetup: [Swift.String: SocialMessagingClientTypes.LinkedWhatsAppBusinessAccountIdMetaData]?

        public init(
            associateInProgressToken: Swift.String? = nil,
            linkedAccountsWithIncompleteSetup: [Swift.String: SocialMessagingClientTypes.LinkedWhatsAppBusinessAccountIdMetaData]? = nil
        ) {
            self.associateInProgressToken = associateInProgressToken
            self.linkedAccountsWithIncompleteSetup = linkedAccountsWithIncompleteSetup
        }
    }
}

extension SocialMessagingClientTypes.WhatsAppSignupCallbackResult: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "WhatsAppSignupCallbackResult(linkedAccountsWithIncompleteSetup: \(Swift.String(describing: linkedAccountsWithIncompleteSetup)), associateInProgressToken: \"CONTENT_REDACTED\")"}
}

public struct AssociateWhatsAppBusinessAccountOutput: Swift.Sendable {
    /// Contains your WhatsApp registration status.
    public var signupCallbackResult: SocialMessagingClientTypes.WhatsAppSignupCallbackResult?
    /// The status code for the response.
    public var statusCode: Swift.Int?

    public init(
        signupCallbackResult: SocialMessagingClientTypes.WhatsAppSignupCallbackResult? = nil,
        statusCode: Swift.Int? = nil
    ) {
        self.signupCallbackResult = signupCallbackResult
        self.statusCode = statusCode
    }
}

/// The request processing has failed because of an unknown error, exception, or failure.
public struct InternalServiceException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error, Swift.Sendable {

    public struct Properties: Swift.Sendable {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InternalServiceException" }
    public static var fault: ClientRuntime.ErrorFault { .server }
    public static var isRetryable: Swift.Bool { true }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    ) {
        self.properties.message = message
    }
}

/// The resource was not found.
public struct ResourceNotFoundException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error, Swift.Sendable {

    public struct Properties: Swift.Sendable {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ResourceNotFoundException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    ) {
        self.properties.message = message
    }
}

public struct CreateWhatsAppMessageTemplateInput: Swift.Sendable {
    /// The ID of the WhatsApp Business Account to associate with this template.
    /// This member is required.
    public var id: Swift.String?
    /// The complete template definition as a JSON blob.
    /// This member is required.
    public var templateDefinition: Foundation.Data?

    public init(
        id: Swift.String? = nil,
        templateDefinition: Foundation.Data? = nil
    ) {
        self.id = id
        self.templateDefinition = templateDefinition
    }
}

public struct CreateWhatsAppMessageTemplateOutput: Swift.Sendable {
    /// The category of the template, such as UTILITY or MARKETING.
    public var category: Swift.String?
    /// The numeric ID assigned to the template by Meta.
    public var metaTemplateId: Swift.String?
    /// The status of the created template, such as PENDING or APPROVED..
    public var templateStatus: Swift.String?

    public init(
        category: Swift.String? = nil,
        metaTemplateId: Swift.String? = nil,
        templateStatus: Swift.String? = nil
    ) {
        self.category = category
        self.metaTemplateId = metaTemplateId
        self.templateStatus = templateStatus
    }
}

extension SocialMessagingClientTypes {

    /// Configuration options for customizing the body content of a template from Meta's library.
    public struct LibraryTemplateBodyInputs: Swift.Sendable {
        /// When true, includes a contact number in the template body.
        public var addContactNumber: Swift.Bool?
        /// When true, includes a "learn more" link in the template body.
        public var addLearnMoreLink: Swift.Bool?
        /// When true, includes security recommendations in the template body.
        public var addSecurityRecommendation: Swift.Bool?
        /// When true, includes a package tracking link in the template body.
        public var addTrackPackageLink: Swift.Bool?
        /// The number of minutes until a verification code or OTP expires.
        public var codeExpirationMinutes: Swift.Int?

        public init(
            addContactNumber: Swift.Bool? = nil,
            addLearnMoreLink: Swift.Bool? = nil,
            addSecurityRecommendation: Swift.Bool? = nil,
            addTrackPackageLink: Swift.Bool? = nil,
            codeExpirationMinutes: Swift.Int? = nil
        ) {
            self.addContactNumber = addContactNumber
            self.addLearnMoreLink = addLearnMoreLink
            self.addSecurityRecommendation = addSecurityRecommendation
            self.addTrackPackageLink = addTrackPackageLink
            self.codeExpirationMinutes = codeExpirationMinutes
        }
    }
}

extension SocialMessagingClientTypes {

    /// Configuration options for customizing buttons in a template from Meta's library.
    public struct LibraryTemplateButtonInput: Swift.Sendable {
        /// The type of one-time password for OTP buttons.
        public var otpType: Swift.String?
        /// The phone number in E.164 format for CALL-type buttons.
        public var phoneNumber: Swift.String?
        /// List of supported applications for this button type.
        public var supportedApps: [[Swift.String: Swift.String]]?
        /// The type of button (for example, QUICK_REPLY, CALL, or URL).
        public var type: Swift.String?
        /// The URL with dynamic parameters for URL-type buttons.
        public var url: [Swift.String: Swift.String]?
        /// When true, indicates acceptance of zero-tap terms for the button.
        public var zeroTapTermsAccepted: Swift.Bool?

        public init(
            otpType: Swift.String? = nil,
            phoneNumber: Swift.String? = nil,
            supportedApps: [[Swift.String: Swift.String]]? = nil,
            type: Swift.String? = nil,
            url: [Swift.String: Swift.String]? = nil,
            zeroTapTermsAccepted: Swift.Bool? = nil
        ) {
            self.otpType = otpType
            self.phoneNumber = phoneNumber
            self.supportedApps = supportedApps
            self.type = type
            self.url = url
            self.zeroTapTermsAccepted = zeroTapTermsAccepted
        }
    }
}

extension SocialMessagingClientTypes {

    /// Represents a template from Meta's library with customization options.
    public struct MetaLibraryTemplate: Swift.Sendable {
        /// Body text customizations for the template.
        public var libraryTemplateBodyInputs: SocialMessagingClientTypes.LibraryTemplateBodyInputs?
        /// Button customizations for the template.
        public var libraryTemplateButtonInputs: [SocialMessagingClientTypes.LibraryTemplateButtonInput]?
        /// The name of the template in Meta's library.
        /// This member is required.
        public var libraryTemplateName: Swift.String?
        /// The category of the template (for example, UTILITY or MARKETING).
        /// This member is required.
        public var templateCategory: Swift.String?
        /// The language code for the template (for example, en_US).
        /// This member is required.
        public var templateLanguage: Swift.String?
        /// The name to assign to the template.
        /// This member is required.
        public var templateName: Swift.String?

        public init(
            libraryTemplateBodyInputs: SocialMessagingClientTypes.LibraryTemplateBodyInputs? = nil,
            libraryTemplateButtonInputs: [SocialMessagingClientTypes.LibraryTemplateButtonInput]? = nil,
            libraryTemplateName: Swift.String? = nil,
            templateCategory: Swift.String? = nil,
            templateLanguage: Swift.String? = nil,
            templateName: Swift.String? = nil
        ) {
            self.libraryTemplateBodyInputs = libraryTemplateBodyInputs
            self.libraryTemplateButtonInputs = libraryTemplateButtonInputs
            self.libraryTemplateName = libraryTemplateName
            self.templateCategory = templateCategory
            self.templateLanguage = templateLanguage
            self.templateName = templateName
        }
    }
}

public struct CreateWhatsAppMessageTemplateFromLibraryInput: Swift.Sendable {
    /// The ID of the WhatsApp Business Account to associate with this template.
    /// This member is required.
    public var id: Swift.String?
    /// The template configuration from Meta's library, including customizations for buttons and body text.
    /// This member is required.
    public var metaLibraryTemplate: SocialMessagingClientTypes.MetaLibraryTemplate?

    public init(
        id: Swift.String? = nil,
        metaLibraryTemplate: SocialMessagingClientTypes.MetaLibraryTemplate? = nil
    ) {
        self.id = id
        self.metaLibraryTemplate = metaLibraryTemplate
    }
}

public struct CreateWhatsAppMessageTemplateFromLibraryOutput: Swift.Sendable {
    /// The category of the template (for example, UTILITY or MARKETING).
    public var category: Swift.String?
    /// The numeric ID assigned to the template by Meta.
    public var metaTemplateId: Swift.String?
    /// The status of the created template (for example, PENDING or APPROVED).
    public var templateStatus: Swift.String?

    public init(
        category: Swift.String? = nil,
        metaTemplateId: Swift.String? = nil,
        templateStatus: Swift.String? = nil
    ) {
        self.category = category
        self.metaTemplateId = metaTemplateId
        self.templateStatus = templateStatus
    }
}

extension SocialMessagingClientTypes {

    /// Contains information for the S3 bucket that contains media files.
    public struct S3File: Swift.Sendable {
        /// The bucket name.
        /// This member is required.
        public var bucketName: Swift.String?
        /// The object key of the media file.
        /// This member is required.
        public var key: Swift.String?

        public init(
            bucketName: Swift.String? = nil,
            key: Swift.String? = nil
        ) {
            self.bucketName = bucketName
            self.key = key
        }
    }
}

extension SocialMessagingClientTypes.S3File: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CONTENT_REDACTED"
    }
}

public struct CreateWhatsAppMessageTemplateMediaInput: Swift.Sendable {
    /// The ID of the WhatsApp Business Account associated with this media upload.
    /// This member is required.
    public var id: Swift.String?
    /// Contains information for the S3 bucket that contains media files.
    public var sourceS3File: SocialMessagingClientTypes.S3File?

    public init(
        id: Swift.String? = nil,
        sourceS3File: SocialMessagingClientTypes.S3File? = nil
    ) {
        self.id = id
        self.sourceS3File = sourceS3File
    }
}

extension CreateWhatsAppMessageTemplateMediaInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateWhatsAppMessageTemplateMediaInput(id: \(Swift.String(describing: id)), sourceS3File: \"CONTENT_REDACTED\")"}
}

public struct CreateWhatsAppMessageTemplateMediaOutput: Swift.Sendable {
    /// The handle assigned to the uploaded media by Meta, used to reference the media in templates.
    public var metaHeaderHandle: Swift.String?

    public init(
        metaHeaderHandle: Swift.String? = nil
    ) {
        self.metaHeaderHandle = metaHeaderHandle
    }
}

public struct DeleteWhatsAppMessageMediaInput: Swift.Sendable {
    /// The unique identifier of the media file to delete. Use the mediaId returned from [PostWhatsAppMessageMedia](https://console.aws.amazon.com/social-messaging/latest/APIReference/API_PostWhatsAppMessageMedia.html).
    /// This member is required.
    public var mediaId: Swift.String?
    /// The unique identifier of the originating phone number associated with the media. Phone number identifiers are formatted as phone-number-id-01234567890123456789012345678901. Use [GetLinkedWhatsAppBusinessAccount](https://docs.aws.amazon.com/social-messaging/latest/APIReference/API_GetLinkedWhatsAppBusinessAccountPhoneNumber.html) to find a phone number's id.
    /// This member is required.
    public var originationPhoneNumberId: Swift.String?

    public init(
        mediaId: Swift.String? = nil,
        originationPhoneNumberId: Swift.String? = nil
    ) {
        self.mediaId = mediaId
        self.originationPhoneNumberId = originationPhoneNumberId
    }
}

public struct DeleteWhatsAppMessageMediaOutput: Swift.Sendable {
    /// Success indicator for deleting the media file.
    public var success: Swift.Bool?

    public init(
        success: Swift.Bool? = nil
    ) {
        self.success = success
    }
}

public struct DeleteWhatsAppMessageTemplateInput: Swift.Sendable {
    /// If true, deletes all language versions of the template.
    public var deleteAllLanguages: Swift.Bool?
    /// The ID of the WhatsApp Business Account associated with this template.
    /// This member is required.
    public var id: Swift.String?
    /// The numeric ID of the template assigned by Meta.
    public var metaTemplateId: Swift.String?
    /// The name of the template to delete.
    /// This member is required.
    public var templateName: Swift.String?

    public init(
        deleteAllLanguages: Swift.Bool? = nil,
        id: Swift.String? = nil,
        metaTemplateId: Swift.String? = nil,
        templateName: Swift.String? = nil
    ) {
        self.deleteAllLanguages = deleteAllLanguages
        self.id = id
        self.metaTemplateId = metaTemplateId
        self.templateName = templateName
    }
}

public struct DeleteWhatsAppMessageTemplateOutput: Swift.Sendable {

    public init() { }
}

public struct DisassociateWhatsAppBusinessAccountInput: Swift.Sendable {
    /// The unique identifier of your WhatsApp Business Account. WABA identifiers are formatted as waba-01234567890123456789012345678901. Use [ListLinkedWhatsAppBusinessAccounts](https://docs.aws.amazon.com/social-messaging/latest/APIReference/API_ListLinkedWhatsAppBusinessAccounts.html) to list all WABAs and their details.
    /// This member is required.
    public var id: Swift.String?

    public init(
        id: Swift.String? = nil
    ) {
        self.id = id
    }
}

public struct DisassociateWhatsAppBusinessAccountOutput: Swift.Sendable {

    public init() { }
}

public struct GetLinkedWhatsAppBusinessAccountInput: Swift.Sendable {
    /// The unique identifier, from Amazon Web Services, of the linked WhatsApp Business Account. WABA identifiers are formatted as waba-01234567890123456789012345678901. Use [ListLinkedWhatsAppBusinessAccounts](https://docs.aws.amazon.com/social-messaging/latest/APIReference/API_ListLinkedWhatsAppBusinessAccounts.html) to list all WABAs and their details.
    /// This member is required.
    public var id: Swift.String?

    public init(
        id: Swift.String? = nil
    ) {
        self.id = id
    }
}

extension SocialMessagingClientTypes {

    /// The details of a linked phone number.
    public struct WhatsAppPhoneNumberSummary: Swift.Sendable {
        /// The full Amazon Resource Name (ARN) for the phone number.
        /// This member is required.
        public var arn: Swift.String?
        /// The geographic region where the WhatsApp phone number's data is stored and processed.
        public var dataLocalizationRegion: Swift.String?
        /// The phone number that appears in the recipients display.
        /// This member is required.
        public var displayPhoneNumber: Swift.String?
        /// The display name for this phone number.
        /// This member is required.
        public var displayPhoneNumberName: Swift.String?
        /// The phone number ID from Meta.
        /// This member is required.
        public var metaPhoneNumberId: Swift.String?
        /// The phone number associated with the Linked WhatsApp Business Account.
        /// This member is required.
        public var phoneNumber: Swift.String?
        /// The phone number ID. Phone number identifiers are formatted as phone-number-id-01234567890123456789012345678901.
        /// This member is required.
        public var phoneNumberId: Swift.String?
        /// The quality rating of the phone number. This is from Meta.
        /// This member is required.
        public var qualityRating: Swift.String?

        public init(
            arn: Swift.String? = nil,
            dataLocalizationRegion: Swift.String? = nil,
            displayPhoneNumber: Swift.String? = nil,
            displayPhoneNumberName: Swift.String? = nil,
            metaPhoneNumberId: Swift.String? = nil,
            phoneNumber: Swift.String? = nil,
            phoneNumberId: Swift.String? = nil,
            qualityRating: Swift.String? = nil
        ) {
            self.arn = arn
            self.dataLocalizationRegion = dataLocalizationRegion
            self.displayPhoneNumber = displayPhoneNumber
            self.displayPhoneNumberName = displayPhoneNumberName
            self.metaPhoneNumberId = metaPhoneNumberId
            self.phoneNumber = phoneNumber
            self.phoneNumberId = phoneNumberId
            self.qualityRating = qualityRating
        }
    }
}

extension SocialMessagingClientTypes {

    /// The details of your linked WhatsApp Business Account.
    public struct LinkedWhatsAppBusinessAccount: Swift.Sendable {
        /// The ARN of the linked WhatsApp Business Account.
        /// This member is required.
        public var arn: Swift.String?
        /// The event destinations for the linked WhatsApp Business Account.
        /// This member is required.
        public var eventDestinations: [SocialMessagingClientTypes.WhatsAppBusinessAccountEventDestination]?
        /// The ID of the linked WhatsApp Business Account, formatted as waba-01234567890123456789012345678901.
        /// This member is required.
        public var id: Swift.String?
        /// The date the WhatsApp Business Account was linked.
        /// This member is required.
        public var linkDate: Foundation.Date?
        /// The phone numbers associated with the Linked WhatsApp Business Account.
        /// This member is required.
        public var phoneNumbers: [SocialMessagingClientTypes.WhatsAppPhoneNumberSummary]?
        /// The registration status of the linked WhatsApp Business Account.
        /// This member is required.
        public var registrationStatus: SocialMessagingClientTypes.RegistrationStatus?
        /// The WhatsApp Business Account ID from meta.
        /// This member is required.
        public var wabaId: Swift.String?
        /// The name of the linked WhatsApp Business Account.
        /// This member is required.
        public var wabaName: Swift.String?

        public init(
            arn: Swift.String? = nil,
            eventDestinations: [SocialMessagingClientTypes.WhatsAppBusinessAccountEventDestination]? = nil,
            id: Swift.String? = nil,
            linkDate: Foundation.Date? = nil,
            phoneNumbers: [SocialMessagingClientTypes.WhatsAppPhoneNumberSummary]? = nil,
            registrationStatus: SocialMessagingClientTypes.RegistrationStatus? = nil,
            wabaId: Swift.String? = nil,
            wabaName: Swift.String? = nil
        ) {
            self.arn = arn
            self.eventDestinations = eventDestinations
            self.id = id
            self.linkDate = linkDate
            self.phoneNumbers = phoneNumbers
            self.registrationStatus = registrationStatus
            self.wabaId = wabaId
            self.wabaName = wabaName
        }
    }
}

public struct GetLinkedWhatsAppBusinessAccountOutput: Swift.Sendable {
    /// The details of the linked WhatsApp Business Account.
    public var account: SocialMessagingClientTypes.LinkedWhatsAppBusinessAccount?

    public init(
        account: SocialMessagingClientTypes.LinkedWhatsAppBusinessAccount? = nil
    ) {
        self.account = account
    }
}

public struct GetLinkedWhatsAppBusinessAccountPhoneNumberInput: Swift.Sendable {
    /// The unique identifier of the phone number. Phone number identifiers are formatted as phone-number-id-01234567890123456789012345678901. Use [GetLinkedWhatsAppBusinessAccount](https://docs.aws.amazon.com/social-messaging/latest/APIReference/API_GetLinkedWhatsAppBusinessAccountPhoneNumber.html) to find a phone number's id.
    /// This member is required.
    public var id: Swift.String?

    public init(
        id: Swift.String? = nil
    ) {
        self.id = id
    }
}

public struct GetLinkedWhatsAppBusinessAccountPhoneNumberOutput: Swift.Sendable {
    /// The WABA identifier linked to the phone number, formatted as waba-01234567890123456789012345678901.
    public var linkedWhatsAppBusinessAccountId: Swift.String?
    /// The details of your WhatsApp phone number.
    public var phoneNumber: SocialMessagingClientTypes.WhatsAppPhoneNumberDetail?

    public init(
        linkedWhatsAppBusinessAccountId: Swift.String? = nil,
        phoneNumber: SocialMessagingClientTypes.WhatsAppPhoneNumberDetail? = nil
    ) {
        self.linkedWhatsAppBusinessAccountId = linkedWhatsAppBusinessAccountId
        self.phoneNumber = phoneNumber
    }
}

extension SocialMessagingClientTypes {

    /// You can use presigned URLs to grant time-limited access to objects in Amazon S3 without updating your bucket policy. For more information, see [Working with presigned URLs](https://docs.aws.amazon.com/AmazonS3/latest/userguide/using-presigned-url.html) in the Amazon S3 User Guide.
    public struct S3PresignedUrl: Swift.Sendable {
        /// A map of headers and their values. You must specify the Content-Type header when using PostWhatsAppMessageMedia. For a list of common headers, see [Common Request Headers](https://docs.aws.amazon.com/AmazonS3/latest/API/RESTCommonRequestHeaders.html) in the Amazon S3 API Reference
        /// This member is required.
        public var headers: [Swift.String: Swift.String]?
        /// The presign url to the object.
        /// This member is required.
        public var url: Swift.String?

        public init(
            headers: [Swift.String: Swift.String]? = nil,
            url: Swift.String? = nil
        ) {
            self.headers = headers
            self.url = url
        }
    }
}

extension SocialMessagingClientTypes.S3PresignedUrl: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CONTENT_REDACTED"
    }
}

public struct GetWhatsAppMessageMediaInput: Swift.Sendable {
    /// The bucketName and key of the S3 media file.
    public var destinationS3File: SocialMessagingClientTypes.S3File?
    /// The presign url of the media file.
    public var destinationS3PresignedUrl: SocialMessagingClientTypes.S3PresignedUrl?
    /// The unique identifier for the media file.
    /// This member is required.
    public var mediaId: Swift.String?
    /// Set to True to get only the metadata for the file.
    public var metadataOnly: Swift.Bool?
    /// The unique identifier of the originating phone number for the WhatsApp message media. The phone number identifiers are formatted as phone-number-id-01234567890123456789012345678901. Use [GetLinkedWhatsAppBusinessAccount](https://docs.aws.amazon.com/social-messaging/latest/APIReference/API_GetLinkedWhatsAppBusinessAccountPhoneNumber.html) to find a phone number's id.
    /// This member is required.
    public var originationPhoneNumberId: Swift.String?

    public init(
        destinationS3File: SocialMessagingClientTypes.S3File? = nil,
        destinationS3PresignedUrl: SocialMessagingClientTypes.S3PresignedUrl? = nil,
        mediaId: Swift.String? = nil,
        metadataOnly: Swift.Bool? = nil,
        originationPhoneNumberId: Swift.String? = nil
    ) {
        self.destinationS3File = destinationS3File
        self.destinationS3PresignedUrl = destinationS3PresignedUrl
        self.mediaId = mediaId
        self.metadataOnly = metadataOnly
        self.originationPhoneNumberId = originationPhoneNumberId
    }
}

extension GetWhatsAppMessageMediaInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetWhatsAppMessageMediaInput(mediaId: \(Swift.String(describing: mediaId)), metadataOnly: \(Swift.String(describing: metadataOnly)), originationPhoneNumberId: \(Swift.String(describing: originationPhoneNumberId)), destinationS3File: \"CONTENT_REDACTED\", destinationS3PresignedUrl: \"CONTENT_REDACTED\")"}
}

public struct GetWhatsAppMessageMediaOutput: Swift.Sendable {
    /// The file size of the media, in KB.
    public var fileSize: Swift.Int?
    /// The MIME type of the media.
    public var mimeType: Swift.String?

    public init(
        fileSize: Swift.Int? = nil,
        mimeType: Swift.String? = nil
    ) {
        self.fileSize = fileSize
        self.mimeType = mimeType
    }
}

public struct GetWhatsAppMessageTemplateInput: Swift.Sendable {
    /// The ID of the WhatsApp Business Account associated with this template.
    /// This member is required.
    public var id: Swift.String?
    /// The numeric ID of the template assigned by Meta.
    /// This member is required.
    public var metaTemplateId: Swift.String?

    public init(
        id: Swift.String? = nil,
        metaTemplateId: Swift.String? = nil
    ) {
        self.id = id
        self.metaTemplateId = metaTemplateId
    }
}

public struct GetWhatsAppMessageTemplateOutput: Swift.Sendable {
    /// The complete template definition as a JSON string (maximum 6000 characters).
    public var template: Swift.String?

    public init(
        template: Swift.String? = nil
    ) {
        self.template = template
    }
}

extension SocialMessagingClientTypes {

    /// Defines a button in a template from Meta's library.
    public struct LibraryTemplateButtonList: Swift.Sendable {
        /// The type of one-time password for OTP buttons.
        public var otpType: Swift.String?
        /// The phone number in E.164 format for CALL-type buttons.
        public var phoneNumber: Swift.String?
        /// List of supported applications for this button type.
        public var supportedApps: [[Swift.String: Swift.String]]?
        /// The text displayed on the button (maximum 40 characters).
        public var text: Swift.String?
        /// The type of button (for example, QUICK_REPLY, CALL, or URL).
        public var type: Swift.String?
        /// The URL for URL-type buttons.
        public var url: Swift.String?
        /// When true, indicates acceptance of zero-tap terms for the button.
        public var zeroTapTermsAccepted: Swift.Bool?

        public init(
            otpType: Swift.String? = nil,
            phoneNumber: Swift.String? = nil,
            supportedApps: [[Swift.String: Swift.String]]? = nil,
            text: Swift.String? = nil,
            type: Swift.String? = nil,
            url: Swift.String? = nil,
            zeroTapTermsAccepted: Swift.Bool? = nil
        ) {
            self.otpType = otpType
            self.phoneNumber = phoneNumber
            self.supportedApps = supportedApps
            self.text = text
            self.type = type
            self.url = url
            self.zeroTapTermsAccepted = zeroTapTermsAccepted
        }
    }
}

public struct ListLinkedWhatsAppBusinessAccountsInput: Swift.Sendable {
    /// The maximum number of results to return.
    public var maxResults: Swift.Int?
    /// The next token for pagination.
    public var nextToken: Swift.String?

    public init(
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    ) {
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

extension SocialMessagingClientTypes {

    /// The details of a linked WhatsApp Business Account.
    public struct LinkedWhatsAppBusinessAccountSummary: Swift.Sendable {
        /// The ARN of the linked WhatsApp Business Account.
        /// This member is required.
        public var arn: Swift.String?
        /// The event destinations for the linked WhatsApp Business Account.
        /// This member is required.
        public var eventDestinations: [SocialMessagingClientTypes.WhatsAppBusinessAccountEventDestination]?
        /// The ID of the linked WhatsApp Business Account, formatted as waba-01234567890123456789012345678901.
        /// This member is required.
        public var id: Swift.String?
        /// The date the WhatsApp Business Account was linked.
        /// This member is required.
        public var linkDate: Foundation.Date?
        /// The registration status of the linked WhatsApp Business Account.
        /// This member is required.
        public var registrationStatus: SocialMessagingClientTypes.RegistrationStatus?
        /// The WhatsApp Business Account ID provided by Meta.
        /// This member is required.
        public var wabaId: Swift.String?
        /// The name of the linked WhatsApp Business Account.
        /// This member is required.
        public var wabaName: Swift.String?

        public init(
            arn: Swift.String? = nil,
            eventDestinations: [SocialMessagingClientTypes.WhatsAppBusinessAccountEventDestination]? = nil,
            id: Swift.String? = nil,
            linkDate: Foundation.Date? = nil,
            registrationStatus: SocialMessagingClientTypes.RegistrationStatus? = nil,
            wabaId: Swift.String? = nil,
            wabaName: Swift.String? = nil
        ) {
            self.arn = arn
            self.eventDestinations = eventDestinations
            self.id = id
            self.linkDate = linkDate
            self.registrationStatus = registrationStatus
            self.wabaId = wabaId
            self.wabaName = wabaName
        }
    }
}

public struct ListLinkedWhatsAppBusinessAccountsOutput: Swift.Sendable {
    /// A list of WhatsApp Business Accounts linked to your Amazon Web Services account.
    public var linkedAccounts: [SocialMessagingClientTypes.LinkedWhatsAppBusinessAccountSummary]?
    /// The next token for pagination.
    public var nextToken: Swift.String?

    public init(
        linkedAccounts: [SocialMessagingClientTypes.LinkedWhatsAppBusinessAccountSummary]? = nil,
        nextToken: Swift.String? = nil
    ) {
        self.linkedAccounts = linkedAccounts
        self.nextToken = nextToken
    }
}

public struct PutWhatsAppBusinessAccountEventDestinationsInput: Swift.Sendable {
    /// An array of WhatsAppBusinessAccountEventDestination event destinations.
    /// This member is required.
    public var eventDestinations: [SocialMessagingClientTypes.WhatsAppBusinessAccountEventDestination]?
    /// The unique identifier of your WhatsApp Business Account. WABA identifiers are formatted as waba-01234567890123456789012345678901. Use [ListLinkedWhatsAppBusinessAccounts](https://docs.aws.amazon.com/social-messaging/latest/APIReference/API_ListLinkedWhatsAppBusinessAccounts.html) to list all WABAs and their details.
    /// This member is required.
    public var id: Swift.String?

    public init(
        eventDestinations: [SocialMessagingClientTypes.WhatsAppBusinessAccountEventDestination]? = nil,
        id: Swift.String? = nil
    ) {
        self.eventDestinations = eventDestinations
        self.id = id
    }
}

public struct PutWhatsAppBusinessAccountEventDestinationsOutput: Swift.Sendable {

    public init() { }
}

public struct PostWhatsAppMessageMediaInput: Swift.Sendable {
    /// The ID of the phone number to associate with the WhatsApp media file. The phone number identifiers are formatted as phone-number-id-01234567890123456789012345678901. Use [GetLinkedWhatsAppBusinessAccount](https://docs.aws.amazon.com/social-messaging/latest/APIReference/API_GetLinkedWhatsAppBusinessAccountPhoneNumber.html) to find a phone number's id.
    /// This member is required.
    public var originationPhoneNumberId: Swift.String?
    /// The source S3 url for the media file.
    public var sourceS3File: SocialMessagingClientTypes.S3File?
    /// The source presign url of the media file.
    public var sourceS3PresignedUrl: SocialMessagingClientTypes.S3PresignedUrl?

    public init(
        originationPhoneNumberId: Swift.String? = nil,
        sourceS3File: SocialMessagingClientTypes.S3File? = nil,
        sourceS3PresignedUrl: SocialMessagingClientTypes.S3PresignedUrl? = nil
    ) {
        self.originationPhoneNumberId = originationPhoneNumberId
        self.sourceS3File = sourceS3File
        self.sourceS3PresignedUrl = sourceS3PresignedUrl
    }
}

extension PostWhatsAppMessageMediaInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "PostWhatsAppMessageMediaInput(originationPhoneNumberId: \(Swift.String(describing: originationPhoneNumberId)), sourceS3File: \"CONTENT_REDACTED\", sourceS3PresignedUrl: \"CONTENT_REDACTED\")"}
}

public struct PostWhatsAppMessageMediaOutput: Swift.Sendable {
    /// The unique identifier of the posted WhatsApp message.
    public var mediaId: Swift.String?

    public init(
        mediaId: Swift.String? = nil
    ) {
        self.mediaId = mediaId
    }
}

public struct SendWhatsAppMessageInput: Swift.Sendable {
    /// The message to send through WhatsApp. The length is in KB. The message field passes through a WhatsApp Message object, see [Messages](https://developers.facebook.com/docs/whatsapp/cloud-api/reference/messages) in the WhatsApp Business Platform Cloud API Reference.
    /// This member is required.
    public var message: Foundation.Data?
    /// The API version for the request formatted as v{VersionNumber}. For a list of supported API versions and Amazon Web Services Regions, see [ Amazon Web Services End User Messaging Social API Service Endpoints](https://docs.aws.amazon.com/general/latest/gr/end-user-messaging.html) in the Amazon Web Services General Reference.
    /// This member is required.
    public var metaApiVersion: Swift.String?
    /// The ID of the phone number used to send the WhatsApp message. If you are sending a media file only the originationPhoneNumberId used to upload the file can be used. Phone number identifiers are formatted as phone-number-id-01234567890123456789012345678901. Use [GetLinkedWhatsAppBusinessAccount](https://docs.aws.amazon.com/social-messaging/latest/APIReference/API_GetLinkedWhatsAppBusinessAccountPhoneNumber.html) to find a phone number's id.
    /// This member is required.
    public var originationPhoneNumberId: Swift.String?

    public init(
        message: Foundation.Data? = nil,
        metaApiVersion: Swift.String? = nil,
        originationPhoneNumberId: Swift.String? = nil
    ) {
        self.message = message
        self.metaApiVersion = metaApiVersion
        self.originationPhoneNumberId = originationPhoneNumberId
    }
}

extension SendWhatsAppMessageInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "SendWhatsAppMessageInput(metaApiVersion: \(Swift.String(describing: metaApiVersion)), originationPhoneNumberId: \(Swift.String(describing: originationPhoneNumberId)), message: \"CONTENT_REDACTED\")"}
}

public struct SendWhatsAppMessageOutput: Swift.Sendable {
    /// The unique identifier of the message.
    public var messageId: Swift.String?

    public init(
        messageId: Swift.String? = nil
    ) {
        self.messageId = messageId
    }
}

public struct ListTagsForResourceInput: Swift.Sendable {
    /// The Amazon Resource Name (ARN) of the resource to retrieve the tags from.
    /// This member is required.
    public var resourceArn: Swift.String?

    public init(
        resourceArn: Swift.String? = nil
    ) {
        self.resourceArn = resourceArn
    }
}

public struct ListTagsForResourceOutput: Swift.Sendable {
    /// The status code of the response.
    public var statusCode: Swift.Int?
    /// The tags for the resource.
    public var tags: [SocialMessagingClientTypes.Tag]?

    public init(
        statusCode: Swift.Int? = nil,
        tags: [SocialMessagingClientTypes.Tag]? = nil
    ) {
        self.statusCode = statusCode
        self.tags = tags
    }
}

public struct ListWhatsAppMessageTemplatesInput: Swift.Sendable {
    /// The ID of the WhatsApp Business Account to list templates for.
    /// This member is required.
    public var id: Swift.String?
    /// The maximum number of results to return per page (1-100).
    public var maxResults: Swift.Int?
    /// The token for the next page of results.
    public var nextToken: Swift.String?

    public init(
        id: Swift.String? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    ) {
        self.id = id
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

extension SocialMessagingClientTypes {

    /// Provides a summary of a WhatsApp message template's key attributes.
    public struct TemplateSummary: Swift.Sendable {
        /// The numeric ID assigned to the template by Meta.
        public var metaTemplateId: Swift.String?
        /// The category of the template (for example, UTILITY or MARKETING).
        public var templateCategory: Swift.String?
        /// The language code of the template (for example, en_US).
        public var templateLanguage: Swift.String?
        /// The name of the template.
        public var templateName: Swift.String?
        /// The quality score assigned to the template by Meta.
        public var templateQualityScore: Swift.String?
        /// The current status of the template (for example, APPROVED, PENDING, or REJECTED).
        public var templateStatus: Swift.String?

        public init(
            metaTemplateId: Swift.String? = nil,
            templateCategory: Swift.String? = nil,
            templateLanguage: Swift.String? = nil,
            templateName: Swift.String? = nil,
            templateQualityScore: Swift.String? = nil,
            templateStatus: Swift.String? = nil
        ) {
            self.metaTemplateId = metaTemplateId
            self.templateCategory = templateCategory
            self.templateLanguage = templateLanguage
            self.templateName = templateName
            self.templateQualityScore = templateQualityScore
            self.templateStatus = templateStatus
        }
    }
}

public struct ListWhatsAppMessageTemplatesOutput: Swift.Sendable {
    /// The token to retrieve the next page of results, if any.
    public var nextToken: Swift.String?
    /// A list of template summaries.
    public var templates: [SocialMessagingClientTypes.TemplateSummary]?

    public init(
        nextToken: Swift.String? = nil,
        templates: [SocialMessagingClientTypes.TemplateSummary]? = nil
    ) {
        self.nextToken = nextToken
        self.templates = templates
    }
}

public struct ListWhatsAppTemplateLibraryInput: Swift.Sendable {
    /// Map of filters to apply (searchKey, topic, usecase, industry, language).
    public var filters: [Swift.String: Swift.String]?
    /// The ID of the WhatsApp Business Account to list library templates for.
    /// This member is required.
    public var id: Swift.String?
    /// The maximum number of results to return per page (1-100).
    public var maxResults: Swift.Int?
    /// The token for the next page of results.
    public var nextToken: Swift.String?

    public init(
        filters: [Swift.String: Swift.String]? = nil,
        id: Swift.String? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    ) {
        self.filters = filters
        self.id = id
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

extension SocialMessagingClientTypes {

    /// Defines the complete structure and content of a template in Meta's library.
    public struct MetaLibraryTemplateDefinition: Swift.Sendable {
        /// The body text of the template.
        public var templateBody: Swift.String?
        /// The buttons included in the template.
        public var templateButtons: [SocialMessagingClientTypes.LibraryTemplateButtonList]?
        /// The category of the template (for example, UTILITY or MARKETING).
        public var templateCategory: Swift.String?
        /// The header text of the template.
        public var templateHeader: Swift.String?
        /// The ID of the template in Meta's library.
        public var templateId: Swift.String?
        /// The industries the template is designed for.
        public var templateIndustry: [Swift.String]?
        /// The language code for the template (for example, en_US).
        public var templateLanguage: Swift.String?
        /// The name of the template.
        public var templateName: Swift.String?
        /// The topic or subject matter of the template.
        public var templateTopic: Swift.String?
        /// The intended use case for the template.
        public var templateUseCase: Swift.String?

        public init(
            templateBody: Swift.String? = nil,
            templateButtons: [SocialMessagingClientTypes.LibraryTemplateButtonList]? = nil,
            templateCategory: Swift.String? = nil,
            templateHeader: Swift.String? = nil,
            templateId: Swift.String? = nil,
            templateIndustry: [Swift.String]? = nil,
            templateLanguage: Swift.String? = nil,
            templateName: Swift.String? = nil,
            templateTopic: Swift.String? = nil,
            templateUseCase: Swift.String? = nil
        ) {
            self.templateBody = templateBody
            self.templateButtons = templateButtons
            self.templateCategory = templateCategory
            self.templateHeader = templateHeader
            self.templateId = templateId
            self.templateIndustry = templateIndustry
            self.templateLanguage = templateLanguage
            self.templateName = templateName
            self.templateTopic = templateTopic
            self.templateUseCase = templateUseCase
        }
    }
}

public struct ListWhatsAppTemplateLibraryOutput: Swift.Sendable {
    /// A list of templates from Meta's library.
    public var metaLibraryTemplates: [SocialMessagingClientTypes.MetaLibraryTemplateDefinition]?
    /// The token to retrieve the next page of results, if any.
    public var nextToken: Swift.String?

    public init(
        metaLibraryTemplates: [SocialMessagingClientTypes.MetaLibraryTemplateDefinition]? = nil,
        nextToken: Swift.String? = nil
    ) {
        self.metaLibraryTemplates = metaLibraryTemplates
        self.nextToken = nextToken
    }
}

public struct TagResourceInput: Swift.Sendable {
    /// The Amazon Resource Name (ARN) of the resource to tag.
    /// This member is required.
    public var resourceArn: Swift.String?
    /// The tags to add to the resource.
    /// This member is required.
    public var tags: [SocialMessagingClientTypes.Tag]?

    public init(
        resourceArn: Swift.String? = nil,
        tags: [SocialMessagingClientTypes.Tag]? = nil
    ) {
        self.resourceArn = resourceArn
        self.tags = tags
    }
}

public struct TagResourceOutput: Swift.Sendable {
    /// The status code of the tag resource operation.
    public var statusCode: Swift.Int?

    public init(
        statusCode: Swift.Int? = nil
    ) {
        self.statusCode = statusCode
    }
}

public struct UntagResourceInput: Swift.Sendable {
    /// The Amazon Resource Name (ARN) of the resource to remove tags from.
    /// This member is required.
    public var resourceArn: Swift.String?
    /// The keys of the tags to remove from the resource.
    /// This member is required.
    public var tagKeys: [Swift.String]?

    public init(
        resourceArn: Swift.String? = nil,
        tagKeys: [Swift.String]? = nil
    ) {
        self.resourceArn = resourceArn
        self.tagKeys = tagKeys
    }
}

public struct UntagResourceOutput: Swift.Sendable {
    /// The status code of the untag resource operation.
    public var statusCode: Swift.Int?

    public init(
        statusCode: Swift.Int? = nil
    ) {
        self.statusCode = statusCode
    }
}

public struct UpdateWhatsAppMessageTemplateInput: Swift.Sendable {
    /// The ID of the WhatsApp Business Account associated with this template.
    /// This member is required.
    public var id: Swift.String?
    /// The numeric ID of the template assigned by Meta.
    /// This member is required.
    public var metaTemplateId: Swift.String?
    /// The new category for the template (for example, UTILITY or MARKETING).
    public var templateCategory: Swift.String?
    /// The updated components of the template as a JSON blob (maximum 3000 characters).
    public var templateComponents: Foundation.Data?

    public init(
        id: Swift.String? = nil,
        metaTemplateId: Swift.String? = nil,
        templateCategory: Swift.String? = nil,
        templateComponents: Foundation.Data? = nil
    ) {
        self.id = id
        self.metaTemplateId = metaTemplateId
        self.templateCategory = templateCategory
        self.templateComponents = templateComponents
    }
}

public struct UpdateWhatsAppMessageTemplateOutput: Swift.Sendable {

    public init() { }
}

/// The request contains an invalid parameter value.
public struct ValidationException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error, Swift.Sendable {

    public struct Properties: Swift.Sendable {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ValidationException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    ) {
        self.properties.message = message
    }
}

extension AssociateWhatsAppBusinessAccountInput {

    static func urlPathProvider(_ value: AssociateWhatsAppBusinessAccountInput) -> Swift.String? {
        return "/v1/whatsapp/signup"
    }
}

extension CreateWhatsAppMessageTemplateInput {

    static func urlPathProvider(_ value: CreateWhatsAppMessageTemplateInput) -> Swift.String? {
        return "/v1/whatsapp/template/put"
    }
}

extension CreateWhatsAppMessageTemplateFromLibraryInput {

    static func urlPathProvider(_ value: CreateWhatsAppMessageTemplateFromLibraryInput) -> Swift.String? {
        return "/v1/whatsapp/template/create"
    }
}

extension CreateWhatsAppMessageTemplateMediaInput {

    static func urlPathProvider(_ value: CreateWhatsAppMessageTemplateMediaInput) -> Swift.String? {
        return "/v1/whatsapp/template/media"
    }
}

extension DeleteWhatsAppMessageMediaInput {

    static func urlPathProvider(_ value: DeleteWhatsAppMessageMediaInput) -> Swift.String? {
        return "/v1/whatsapp/media"
    }
}

extension DeleteWhatsAppMessageMediaInput {

    static func queryItemProvider(_ value: DeleteWhatsAppMessageMediaInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        guard let originationPhoneNumberId = value.originationPhoneNumberId else {
            let message = "Creating a URL Query Item failed. originationPhoneNumberId is required and must not be nil."
            throw Smithy.ClientError.unknownError(message)
        }
        let originationPhoneNumberIdQueryItem = Smithy.URIQueryItem(name: "originationPhoneNumberId".urlPercentEncoding(), value: Swift.String(originationPhoneNumberId).urlPercentEncoding())
        items.append(originationPhoneNumberIdQueryItem)
        guard let mediaId = value.mediaId else {
            let message = "Creating a URL Query Item failed. mediaId is required and must not be nil."
            throw Smithy.ClientError.unknownError(message)
        }
        let mediaIdQueryItem = Smithy.URIQueryItem(name: "mediaId".urlPercentEncoding(), value: Swift.String(mediaId).urlPercentEncoding())
        items.append(mediaIdQueryItem)
        return items
    }
}

extension DeleteWhatsAppMessageTemplateInput {

    static func urlPathProvider(_ value: DeleteWhatsAppMessageTemplateInput) -> Swift.String? {
        return "/v1/whatsapp/template"
    }
}

extension DeleteWhatsAppMessageTemplateInput {

    static func queryItemProvider(_ value: DeleteWhatsAppMessageTemplateInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        if let deleteAllLanguages = value.deleteAllLanguages {
            let deleteAllLanguagesQueryItem = Smithy.URIQueryItem(name: "deleteAllTemplates".urlPercentEncoding(), value: Swift.String(deleteAllLanguages).urlPercentEncoding())
            items.append(deleteAllLanguagesQueryItem)
        }
        guard let templateName = value.templateName else {
            let message = "Creating a URL Query Item failed. templateName is required and must not be nil."
            throw Smithy.ClientError.unknownError(message)
        }
        let templateNameQueryItem = Smithy.URIQueryItem(name: "templateName".urlPercentEncoding(), value: Swift.String(templateName).urlPercentEncoding())
        items.append(templateNameQueryItem)
        if let metaTemplateId = value.metaTemplateId {
            let metaTemplateIdQueryItem = Smithy.URIQueryItem(name: "metaTemplateId".urlPercentEncoding(), value: Swift.String(metaTemplateId).urlPercentEncoding())
            items.append(metaTemplateIdQueryItem)
        }
        guard let id = value.id else {
            let message = "Creating a URL Query Item failed. id is required and must not be nil."
            throw Smithy.ClientError.unknownError(message)
        }
        let idQueryItem = Smithy.URIQueryItem(name: "id".urlPercentEncoding(), value: Swift.String(id).urlPercentEncoding())
        items.append(idQueryItem)
        return items
    }
}

extension DisassociateWhatsAppBusinessAccountInput {

    static func urlPathProvider(_ value: DisassociateWhatsAppBusinessAccountInput) -> Swift.String? {
        return "/v1/whatsapp/waba/disassociate"
    }
}

extension DisassociateWhatsAppBusinessAccountInput {

    static func queryItemProvider(_ value: DisassociateWhatsAppBusinessAccountInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        guard let id = value.id else {
            let message = "Creating a URL Query Item failed. id is required and must not be nil."
            throw Smithy.ClientError.unknownError(message)
        }
        let idQueryItem = Smithy.URIQueryItem(name: "id".urlPercentEncoding(), value: Swift.String(id).urlPercentEncoding())
        items.append(idQueryItem)
        return items
    }
}

extension GetLinkedWhatsAppBusinessAccountInput {

    static func urlPathProvider(_ value: GetLinkedWhatsAppBusinessAccountInput) -> Swift.String? {
        return "/v1/whatsapp/waba/details"
    }
}

extension GetLinkedWhatsAppBusinessAccountInput {

    static func queryItemProvider(_ value: GetLinkedWhatsAppBusinessAccountInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        guard let id = value.id else {
            let message = "Creating a URL Query Item failed. id is required and must not be nil."
            throw Smithy.ClientError.unknownError(message)
        }
        let idQueryItem = Smithy.URIQueryItem(name: "id".urlPercentEncoding(), value: Swift.String(id).urlPercentEncoding())
        items.append(idQueryItem)
        return items
    }
}

extension GetLinkedWhatsAppBusinessAccountPhoneNumberInput {

    static func urlPathProvider(_ value: GetLinkedWhatsAppBusinessAccountPhoneNumberInput) -> Swift.String? {
        return "/v1/whatsapp/waba/phone/details"
    }
}

extension GetLinkedWhatsAppBusinessAccountPhoneNumberInput {

    static func queryItemProvider(_ value: GetLinkedWhatsAppBusinessAccountPhoneNumberInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        guard let id = value.id else {
            let message = "Creating a URL Query Item failed. id is required and must not be nil."
            throw Smithy.ClientError.unknownError(message)
        }
        let idQueryItem = Smithy.URIQueryItem(name: "id".urlPercentEncoding(), value: Swift.String(id).urlPercentEncoding())
        items.append(idQueryItem)
        return items
    }
}

extension GetWhatsAppMessageMediaInput {

    static func urlPathProvider(_ value: GetWhatsAppMessageMediaInput) -> Swift.String? {
        return "/v1/whatsapp/media/get"
    }
}

extension GetWhatsAppMessageTemplateInput {

    static func urlPathProvider(_ value: GetWhatsAppMessageTemplateInput) -> Swift.String? {
        return "/v1/whatsapp/template"
    }
}

extension GetWhatsAppMessageTemplateInput {

    static func queryItemProvider(_ value: GetWhatsAppMessageTemplateInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        guard let metaTemplateId = value.metaTemplateId else {
            let message = "Creating a URL Query Item failed. metaTemplateId is required and must not be nil."
            throw Smithy.ClientError.unknownError(message)
        }
        let metaTemplateIdQueryItem = Smithy.URIQueryItem(name: "metaTemplateId".urlPercentEncoding(), value: Swift.String(metaTemplateId).urlPercentEncoding())
        items.append(metaTemplateIdQueryItem)
        guard let id = value.id else {
            let message = "Creating a URL Query Item failed. id is required and must not be nil."
            throw Smithy.ClientError.unknownError(message)
        }
        let idQueryItem = Smithy.URIQueryItem(name: "id".urlPercentEncoding(), value: Swift.String(id).urlPercentEncoding())
        items.append(idQueryItem)
        return items
    }
}

extension ListLinkedWhatsAppBusinessAccountsInput {

    static func urlPathProvider(_ value: ListLinkedWhatsAppBusinessAccountsInput) -> Swift.String? {
        return "/v1/whatsapp/waba/list"
    }
}

extension ListLinkedWhatsAppBusinessAccountsInput {

    static func queryItemProvider(_ value: ListLinkedWhatsAppBusinessAccountsInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        if let nextToken = value.nextToken {
            let nextTokenQueryItem = Smithy.URIQueryItem(name: "nextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
            items.append(nextTokenQueryItem)
        }
        if let maxResults = value.maxResults {
            let maxResultsQueryItem = Smithy.URIQueryItem(name: "maxResults".urlPercentEncoding(), value: Swift.String(maxResults).urlPercentEncoding())
            items.append(maxResultsQueryItem)
        }
        return items
    }
}

extension ListTagsForResourceInput {

    static func urlPathProvider(_ value: ListTagsForResourceInput) -> Swift.String? {
        return "/v1/tags/list"
    }
}

extension ListTagsForResourceInput {

    static func queryItemProvider(_ value: ListTagsForResourceInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        guard let resourceArn = value.resourceArn else {
            let message = "Creating a URL Query Item failed. resourceArn is required and must not be nil."
            throw Smithy.ClientError.unknownError(message)
        }
        let resourceArnQueryItem = Smithy.URIQueryItem(name: "resourceArn".urlPercentEncoding(), value: Swift.String(resourceArn).urlPercentEncoding())
        items.append(resourceArnQueryItem)
        return items
    }
}

extension ListWhatsAppMessageTemplatesInput {

    static func urlPathProvider(_ value: ListWhatsAppMessageTemplatesInput) -> Swift.String? {
        return "/v1/whatsapp/template/list"
    }
}

extension ListWhatsAppMessageTemplatesInput {

    static func queryItemProvider(_ value: ListWhatsAppMessageTemplatesInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        if let nextToken = value.nextToken {
            let nextTokenQueryItem = Smithy.URIQueryItem(name: "nextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
            items.append(nextTokenQueryItem)
        }
        if let maxResults = value.maxResults {
            let maxResultsQueryItem = Smithy.URIQueryItem(name: "maxResults".urlPercentEncoding(), value: Swift.String(maxResults).urlPercentEncoding())
            items.append(maxResultsQueryItem)
        }
        guard let id = value.id else {
            let message = "Creating a URL Query Item failed. id is required and must not be nil."
            throw Smithy.ClientError.unknownError(message)
        }
        let idQueryItem = Smithy.URIQueryItem(name: "id".urlPercentEncoding(), value: Swift.String(id).urlPercentEncoding())
        items.append(idQueryItem)
        return items
    }
}

extension ListWhatsAppTemplateLibraryInput {

    static func urlPathProvider(_ value: ListWhatsAppTemplateLibraryInput) -> Swift.String? {
        return "/v1/whatsapp/template/library"
    }
}

extension ListWhatsAppTemplateLibraryInput {

    static func queryItemProvider(_ value: ListWhatsAppTemplateLibraryInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        guard let id = value.id else {
            let message = "Creating a URL Query Item failed. id is required and must not be nil."
            throw Smithy.ClientError.unknownError(message)
        }
        let idQueryItem = Smithy.URIQueryItem(name: "id".urlPercentEncoding(), value: Swift.String(id).urlPercentEncoding())
        items.append(idQueryItem)
        return items
    }
}

extension PostWhatsAppMessageMediaInput {

    static func urlPathProvider(_ value: PostWhatsAppMessageMediaInput) -> Swift.String? {
        return "/v1/whatsapp/media"
    }
}

extension PutWhatsAppBusinessAccountEventDestinationsInput {

    static func urlPathProvider(_ value: PutWhatsAppBusinessAccountEventDestinationsInput) -> Swift.String? {
        return "/v1/whatsapp/waba/eventdestinations"
    }
}

extension SendWhatsAppMessageInput {

    static func urlPathProvider(_ value: SendWhatsAppMessageInput) -> Swift.String? {
        return "/v1/whatsapp/send"
    }
}

extension TagResourceInput {

    static func urlPathProvider(_ value: TagResourceInput) -> Swift.String? {
        return "/v1/tags/tag-resource"
    }
}

extension UntagResourceInput {

    static func urlPathProvider(_ value: UntagResourceInput) -> Swift.String? {
        return "/v1/tags/untag-resource"
    }
}

extension UpdateWhatsAppMessageTemplateInput {

    static func urlPathProvider(_ value: UpdateWhatsAppMessageTemplateInput) -> Swift.String? {
        return "/v1/whatsapp/template"
    }
}

extension AssociateWhatsAppBusinessAccountInput {

    static func write(value: AssociateWhatsAppBusinessAccountInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["setupFinalization"].write(value.setupFinalization, with: SocialMessagingClientTypes.WhatsAppSetupFinalization.write(value:to:))
        try writer["signupCallback"].write(value.signupCallback, with: SocialMessagingClientTypes.WhatsAppSignupCallback.write(value:to:))
    }
}

extension CreateWhatsAppMessageTemplateInput {

    static func write(value: CreateWhatsAppMessageTemplateInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["id"].write(value.id)
        try writer["templateDefinition"].write(value.templateDefinition)
    }
}

extension CreateWhatsAppMessageTemplateFromLibraryInput {

    static func write(value: CreateWhatsAppMessageTemplateFromLibraryInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["id"].write(value.id)
        try writer["metaLibraryTemplate"].write(value.metaLibraryTemplate, with: SocialMessagingClientTypes.MetaLibraryTemplate.write(value:to:))
    }
}

extension CreateWhatsAppMessageTemplateMediaInput {

    static func write(value: CreateWhatsAppMessageTemplateMediaInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["id"].write(value.id)
        try writer["sourceS3File"].write(value.sourceS3File, with: SocialMessagingClientTypes.S3File.write(value:to:))
    }
}

extension GetWhatsAppMessageMediaInput {

    static func write(value: GetWhatsAppMessageMediaInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["destinationS3File"].write(value.destinationS3File, with: SocialMessagingClientTypes.S3File.write(value:to:))
        try writer["destinationS3PresignedUrl"].write(value.destinationS3PresignedUrl, with: SocialMessagingClientTypes.S3PresignedUrl.write(value:to:))
        try writer["mediaId"].write(value.mediaId)
        try writer["metadataOnly"].write(value.metadataOnly)
        try writer["originationPhoneNumberId"].write(value.originationPhoneNumberId)
    }
}

extension ListWhatsAppTemplateLibraryInput {

    static func write(value: ListWhatsAppTemplateLibraryInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["filters"].writeMap(value.filters, valueWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        try writer["maxResults"].write(value.maxResults)
        try writer["nextToken"].write(value.nextToken)
    }
}

extension PostWhatsAppMessageMediaInput {

    static func write(value: PostWhatsAppMessageMediaInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["originationPhoneNumberId"].write(value.originationPhoneNumberId)
        try writer["sourceS3File"].write(value.sourceS3File, with: SocialMessagingClientTypes.S3File.write(value:to:))
        try writer["sourceS3PresignedUrl"].write(value.sourceS3PresignedUrl, with: SocialMessagingClientTypes.S3PresignedUrl.write(value:to:))
    }
}

extension PutWhatsAppBusinessAccountEventDestinationsInput {

    static func write(value: PutWhatsAppBusinessAccountEventDestinationsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["eventDestinations"].writeList(value.eventDestinations, memberWritingClosure: SocialMessagingClientTypes.WhatsAppBusinessAccountEventDestination.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["id"].write(value.id)
    }
}

extension SendWhatsAppMessageInput {

    static func write(value: SendWhatsAppMessageInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["message"].write(value.message)
        try writer["metaApiVersion"].write(value.metaApiVersion)
        try writer["originationPhoneNumberId"].write(value.originationPhoneNumberId)
    }
}

extension TagResourceInput {

    static func write(value: TagResourceInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["resourceArn"].write(value.resourceArn)
        try writer["tags"].writeList(value.tags, memberWritingClosure: SocialMessagingClientTypes.Tag.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension UntagResourceInput {

    static func write(value: UntagResourceInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["resourceArn"].write(value.resourceArn)
        try writer["tagKeys"].writeList(value.tagKeys, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension UpdateWhatsAppMessageTemplateInput {

    static func write(value: UpdateWhatsAppMessageTemplateInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["id"].write(value.id)
        try writer["metaTemplateId"].write(value.metaTemplateId)
        try writer["templateCategory"].write(value.templateCategory)
        try writer["templateComponents"].write(value.templateComponents)
    }
}

extension AssociateWhatsAppBusinessAccountOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> AssociateWhatsAppBusinessAccountOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = AssociateWhatsAppBusinessAccountOutput()
        value.signupCallbackResult = try reader["signupCallbackResult"].readIfPresent(with: SocialMessagingClientTypes.WhatsAppSignupCallbackResult.read(from:))
        value.statusCode = try reader["statusCode"].readIfPresent()
        return value
    }
}

extension CreateWhatsAppMessageTemplateOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateWhatsAppMessageTemplateOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateWhatsAppMessageTemplateOutput()
        value.category = try reader["category"].readIfPresent()
        value.metaTemplateId = try reader["metaTemplateId"].readIfPresent()
        value.templateStatus = try reader["templateStatus"].readIfPresent()
        return value
    }
}

extension CreateWhatsAppMessageTemplateFromLibraryOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateWhatsAppMessageTemplateFromLibraryOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateWhatsAppMessageTemplateFromLibraryOutput()
        value.category = try reader["category"].readIfPresent()
        value.metaTemplateId = try reader["metaTemplateId"].readIfPresent()
        value.templateStatus = try reader["templateStatus"].readIfPresent()
        return value
    }
}

extension CreateWhatsAppMessageTemplateMediaOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateWhatsAppMessageTemplateMediaOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateWhatsAppMessageTemplateMediaOutput()
        value.metaHeaderHandle = try reader["metaHeaderHandle"].readIfPresent()
        return value
    }
}

extension DeleteWhatsAppMessageMediaOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteWhatsAppMessageMediaOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DeleteWhatsAppMessageMediaOutput()
        value.success = try reader["success"].readIfPresent()
        return value
    }
}

extension DeleteWhatsAppMessageTemplateOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteWhatsAppMessageTemplateOutput {
        return DeleteWhatsAppMessageTemplateOutput()
    }
}

extension DisassociateWhatsAppBusinessAccountOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DisassociateWhatsAppBusinessAccountOutput {
        return DisassociateWhatsAppBusinessAccountOutput()
    }
}

extension GetLinkedWhatsAppBusinessAccountOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetLinkedWhatsAppBusinessAccountOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetLinkedWhatsAppBusinessAccountOutput()
        value.account = try reader["account"].readIfPresent(with: SocialMessagingClientTypes.LinkedWhatsAppBusinessAccount.read(from:))
        return value
    }
}

extension GetLinkedWhatsAppBusinessAccountPhoneNumberOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetLinkedWhatsAppBusinessAccountPhoneNumberOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetLinkedWhatsAppBusinessAccountPhoneNumberOutput()
        value.linkedWhatsAppBusinessAccountId = try reader["linkedWhatsAppBusinessAccountId"].readIfPresent()
        value.phoneNumber = try reader["phoneNumber"].readIfPresent(with: SocialMessagingClientTypes.WhatsAppPhoneNumberDetail.read(from:))
        return value
    }
}

extension GetWhatsAppMessageMediaOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetWhatsAppMessageMediaOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetWhatsAppMessageMediaOutput()
        value.fileSize = try reader["fileSize"].readIfPresent()
        value.mimeType = try reader["mimeType"].readIfPresent()
        return value
    }
}

extension GetWhatsAppMessageTemplateOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetWhatsAppMessageTemplateOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetWhatsAppMessageTemplateOutput()
        value.template = try reader["template"].readIfPresent()
        return value
    }
}

extension ListLinkedWhatsAppBusinessAccountsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListLinkedWhatsAppBusinessAccountsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListLinkedWhatsAppBusinessAccountsOutput()
        value.linkedAccounts = try reader["linkedAccounts"].readListIfPresent(memberReadingClosure: SocialMessagingClientTypes.LinkedWhatsAppBusinessAccountSummary.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.nextToken = try reader["nextToken"].readIfPresent()
        return value
    }
}

extension ListTagsForResourceOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListTagsForResourceOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListTagsForResourceOutput()
        value.statusCode = try reader["statusCode"].readIfPresent()
        value.tags = try reader["tags"].readListIfPresent(memberReadingClosure: SocialMessagingClientTypes.Tag.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension ListWhatsAppMessageTemplatesOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListWhatsAppMessageTemplatesOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListWhatsAppMessageTemplatesOutput()
        value.nextToken = try reader["nextToken"].readIfPresent()
        value.templates = try reader["templates"].readListIfPresent(memberReadingClosure: SocialMessagingClientTypes.TemplateSummary.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension ListWhatsAppTemplateLibraryOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListWhatsAppTemplateLibraryOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListWhatsAppTemplateLibraryOutput()
        value.metaLibraryTemplates = try reader["metaLibraryTemplates"].readListIfPresent(memberReadingClosure: SocialMessagingClientTypes.MetaLibraryTemplateDefinition.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.nextToken = try reader["nextToken"].readIfPresent()
        return value
    }
}

extension PostWhatsAppMessageMediaOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> PostWhatsAppMessageMediaOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = PostWhatsAppMessageMediaOutput()
        value.mediaId = try reader["mediaId"].readIfPresent()
        return value
    }
}

extension PutWhatsAppBusinessAccountEventDestinationsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> PutWhatsAppBusinessAccountEventDestinationsOutput {
        return PutWhatsAppBusinessAccountEventDestinationsOutput()
    }
}

extension SendWhatsAppMessageOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> SendWhatsAppMessageOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = SendWhatsAppMessageOutput()
        value.messageId = try reader["messageId"].readIfPresent()
        return value
    }
}

extension TagResourceOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> TagResourceOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = TagResourceOutput()
        value.statusCode = try reader["statusCode"].readIfPresent()
        return value
    }
}

extension UntagResourceOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UntagResourceOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = UntagResourceOutput()
        value.statusCode = try reader["statusCode"].readIfPresent()
        return value
    }
}

extension UpdateWhatsAppMessageTemplateOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdateWhatsAppMessageTemplateOutput {
        return UpdateWhatsAppMessageTemplateOutput()
    }
}

func httpServiceError(baseError: AWSClientRuntime.RestJSONError) throws -> Swift.Error? {
    switch baseError.code {
        case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
        case "ValidationException": return try ValidationException.makeError(baseError: baseError)
        default: return nil
    }
}

enum AssociateWhatsAppBusinessAccountOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        if let error = try httpServiceError(baseError: baseError) { return error }
        switch baseError.code {
            case "DependencyException": return try DependencyException.makeError(baseError: baseError)
            case "InvalidParametersException": return try InvalidParametersException.makeError(baseError: baseError)
            case "LimitExceededException": return try LimitExceededException.makeError(baseError: baseError)
            case "ThrottledRequestException": return try ThrottledRequestException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateWhatsAppMessageTemplateOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        if let error = try httpServiceError(baseError: baseError) { return error }
        switch baseError.code {
            case "DependencyException": return try DependencyException.makeError(baseError: baseError)
            case "InternalServiceException": return try InternalServiceException.makeError(baseError: baseError)
            case "InvalidParametersException": return try InvalidParametersException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottledRequestException": return try ThrottledRequestException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateWhatsAppMessageTemplateFromLibraryOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        if let error = try httpServiceError(baseError: baseError) { return error }
        switch baseError.code {
            case "DependencyException": return try DependencyException.makeError(baseError: baseError)
            case "InternalServiceException": return try InternalServiceException.makeError(baseError: baseError)
            case "InvalidParametersException": return try InvalidParametersException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottledRequestException": return try ThrottledRequestException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateWhatsAppMessageTemplateMediaOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        if let error = try httpServiceError(baseError: baseError) { return error }
        switch baseError.code {
            case "DependencyException": return try DependencyException.makeError(baseError: baseError)
            case "InternalServiceException": return try InternalServiceException.makeError(baseError: baseError)
            case "InvalidParametersException": return try InvalidParametersException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottledRequestException": return try ThrottledRequestException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteWhatsAppMessageMediaOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        if let error = try httpServiceError(baseError: baseError) { return error }
        switch baseError.code {
            case "AccessDeniedByMetaException": return try AccessDeniedByMetaException.makeError(baseError: baseError)
            case "DependencyException": return try DependencyException.makeError(baseError: baseError)
            case "InternalServiceException": return try InternalServiceException.makeError(baseError: baseError)
            case "InvalidParametersException": return try InvalidParametersException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottledRequestException": return try ThrottledRequestException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteWhatsAppMessageTemplateOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        if let error = try httpServiceError(baseError: baseError) { return error }
        switch baseError.code {
            case "DependencyException": return try DependencyException.makeError(baseError: baseError)
            case "InternalServiceException": return try InternalServiceException.makeError(baseError: baseError)
            case "InvalidParametersException": return try InvalidParametersException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottledRequestException": return try ThrottledRequestException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DisassociateWhatsAppBusinessAccountOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        if let error = try httpServiceError(baseError: baseError) { return error }
        switch baseError.code {
            case "DependencyException": return try DependencyException.makeError(baseError: baseError)
            case "InvalidParametersException": return try InvalidParametersException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottledRequestException": return try ThrottledRequestException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetLinkedWhatsAppBusinessAccountOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        if let error = try httpServiceError(baseError: baseError) { return error }
        switch baseError.code {
            case "DependencyException": return try DependencyException.makeError(baseError: baseError)
            case "InternalServiceException": return try InternalServiceException.makeError(baseError: baseError)
            case "InvalidParametersException": return try InvalidParametersException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottledRequestException": return try ThrottledRequestException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetLinkedWhatsAppBusinessAccountPhoneNumberOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        if let error = try httpServiceError(baseError: baseError) { return error }
        switch baseError.code {
            case "DependencyException": return try DependencyException.makeError(baseError: baseError)
            case "InternalServiceException": return try InternalServiceException.makeError(baseError: baseError)
            case "InvalidParametersException": return try InvalidParametersException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottledRequestException": return try ThrottledRequestException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetWhatsAppMessageMediaOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        if let error = try httpServiceError(baseError: baseError) { return error }
        switch baseError.code {
            case "AccessDeniedByMetaException": return try AccessDeniedByMetaException.makeError(baseError: baseError)
            case "DependencyException": return try DependencyException.makeError(baseError: baseError)
            case "InternalServiceException": return try InternalServiceException.makeError(baseError: baseError)
            case "InvalidParametersException": return try InvalidParametersException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottledRequestException": return try ThrottledRequestException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetWhatsAppMessageTemplateOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        if let error = try httpServiceError(baseError: baseError) { return error }
        switch baseError.code {
            case "DependencyException": return try DependencyException.makeError(baseError: baseError)
            case "InternalServiceException": return try InternalServiceException.makeError(baseError: baseError)
            case "InvalidParametersException": return try InvalidParametersException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottledRequestException": return try ThrottledRequestException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListLinkedWhatsAppBusinessAccountsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        if let error = try httpServiceError(baseError: baseError) { return error }
        switch baseError.code {
            case "InternalServiceException": return try InternalServiceException.makeError(baseError: baseError)
            case "InvalidParametersException": return try InvalidParametersException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottledRequestException": return try ThrottledRequestException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListTagsForResourceOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        if let error = try httpServiceError(baseError: baseError) { return error }
        switch baseError.code {
            case "InternalServiceException": return try InternalServiceException.makeError(baseError: baseError)
            case "InvalidParametersException": return try InvalidParametersException.makeError(baseError: baseError)
            case "ThrottledRequestException": return try ThrottledRequestException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListWhatsAppMessageTemplatesOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        if let error = try httpServiceError(baseError: baseError) { return error }
        switch baseError.code {
            case "DependencyException": return try DependencyException.makeError(baseError: baseError)
            case "InternalServiceException": return try InternalServiceException.makeError(baseError: baseError)
            case "InvalidParametersException": return try InvalidParametersException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottledRequestException": return try ThrottledRequestException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListWhatsAppTemplateLibraryOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        if let error = try httpServiceError(baseError: baseError) { return error }
        switch baseError.code {
            case "DependencyException": return try DependencyException.makeError(baseError: baseError)
            case "InternalServiceException": return try InternalServiceException.makeError(baseError: baseError)
            case "InvalidParametersException": return try InvalidParametersException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottledRequestException": return try ThrottledRequestException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum PostWhatsAppMessageMediaOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        if let error = try httpServiceError(baseError: baseError) { return error }
        switch baseError.code {
            case "AccessDeniedByMetaException": return try AccessDeniedByMetaException.makeError(baseError: baseError)
            case "DependencyException": return try DependencyException.makeError(baseError: baseError)
            case "InternalServiceException": return try InternalServiceException.makeError(baseError: baseError)
            case "InvalidParametersException": return try InvalidParametersException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottledRequestException": return try ThrottledRequestException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum PutWhatsAppBusinessAccountEventDestinationsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        if let error = try httpServiceError(baseError: baseError) { return error }
        switch baseError.code {
            case "InternalServiceException": return try InternalServiceException.makeError(baseError: baseError)
            case "InvalidParametersException": return try InvalidParametersException.makeError(baseError: baseError)
            case "ThrottledRequestException": return try ThrottledRequestException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum SendWhatsAppMessageOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        if let error = try httpServiceError(baseError: baseError) { return error }
        switch baseError.code {
            case "DependencyException": return try DependencyException.makeError(baseError: baseError)
            case "InternalServiceException": return try InternalServiceException.makeError(baseError: baseError)
            case "InvalidParametersException": return try InvalidParametersException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottledRequestException": return try ThrottledRequestException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum TagResourceOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        if let error = try httpServiceError(baseError: baseError) { return error }
        switch baseError.code {
            case "InternalServiceException": return try InternalServiceException.makeError(baseError: baseError)
            case "InvalidParametersException": return try InvalidParametersException.makeError(baseError: baseError)
            case "ThrottledRequestException": return try ThrottledRequestException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UntagResourceOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        if let error = try httpServiceError(baseError: baseError) { return error }
        switch baseError.code {
            case "InternalServiceException": return try InternalServiceException.makeError(baseError: baseError)
            case "InvalidParametersException": return try InvalidParametersException.makeError(baseError: baseError)
            case "ThrottledRequestException": return try ThrottledRequestException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdateWhatsAppMessageTemplateOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        if let error = try httpServiceError(baseError: baseError) { return error }
        switch baseError.code {
            case "DependencyException": return try DependencyException.makeError(baseError: baseError)
            case "InternalServiceException": return try InternalServiceException.makeError(baseError: baseError)
            case "InvalidParametersException": return try InvalidParametersException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottledRequestException": return try ThrottledRequestException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

extension DependencyException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> DependencyException {
        let reader = baseError.errorBodyReader
        var value = DependencyException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension InvalidParametersException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> InvalidParametersException {
        let reader = baseError.errorBodyReader
        var value = InvalidParametersException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension LimitExceededException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> LimitExceededException {
        let reader = baseError.errorBodyReader
        var value = LimitExceededException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ThrottledRequestException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> ThrottledRequestException {
        let reader = baseError.errorBodyReader
        var value = ThrottledRequestException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension InternalServiceException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> InternalServiceException {
        let reader = baseError.errorBodyReader
        var value = InternalServiceException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ResourceNotFoundException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> ResourceNotFoundException {
        let reader = baseError.errorBodyReader
        var value = ResourceNotFoundException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension AccessDeniedByMetaException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> AccessDeniedByMetaException {
        let reader = baseError.errorBodyReader
        var value = AccessDeniedByMetaException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension AccessDeniedException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> AccessDeniedException {
        let reader = baseError.errorBodyReader
        var value = AccessDeniedException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ValidationException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> ValidationException {
        let reader = baseError.errorBodyReader
        var value = ValidationException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension SocialMessagingClientTypes.WhatsAppSignupCallbackResult {

    static func read(from reader: SmithyJSON.Reader) throws -> SocialMessagingClientTypes.WhatsAppSignupCallbackResult {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SocialMessagingClientTypes.WhatsAppSignupCallbackResult()
        value.associateInProgressToken = try reader["associateInProgressToken"].readIfPresent()
        value.linkedAccountsWithIncompleteSetup = try reader["linkedAccountsWithIncompleteSetup"].readMapIfPresent(valueReadingClosure: SocialMessagingClientTypes.LinkedWhatsAppBusinessAccountIdMetaData.read(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        return value
    }
}

extension SocialMessagingClientTypes.LinkedWhatsAppBusinessAccountIdMetaData {

    static func read(from reader: SmithyJSON.Reader) throws -> SocialMessagingClientTypes.LinkedWhatsAppBusinessAccountIdMetaData {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SocialMessagingClientTypes.LinkedWhatsAppBusinessAccountIdMetaData()
        value.accountName = try reader["accountName"].readIfPresent()
        value.registrationStatus = try reader["registrationStatus"].readIfPresent()
        value.unregisteredWhatsAppPhoneNumbers = try reader["unregisteredWhatsAppPhoneNumbers"].readListIfPresent(memberReadingClosure: SocialMessagingClientTypes.WhatsAppPhoneNumberDetail.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.wabaId = try reader["wabaId"].readIfPresent()
        return value
    }
}

extension SocialMessagingClientTypes.WhatsAppPhoneNumberDetail {

    static func read(from reader: SmithyJSON.Reader) throws -> SocialMessagingClientTypes.WhatsAppPhoneNumberDetail {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SocialMessagingClientTypes.WhatsAppPhoneNumberDetail()
        value.arn = try reader["arn"].readIfPresent() ?? ""
        value.phoneNumber = try reader["phoneNumber"].readIfPresent() ?? ""
        value.phoneNumberId = try reader["phoneNumberId"].readIfPresent() ?? ""
        value.metaPhoneNumberId = try reader["metaPhoneNumberId"].readIfPresent() ?? ""
        value.displayPhoneNumberName = try reader["displayPhoneNumberName"].readIfPresent() ?? ""
        value.displayPhoneNumber = try reader["displayPhoneNumber"].readIfPresent() ?? ""
        value.qualityRating = try reader["qualityRating"].readIfPresent() ?? ""
        value.dataLocalizationRegion = try reader["dataLocalizationRegion"].readIfPresent()
        return value
    }
}

extension SocialMessagingClientTypes.LinkedWhatsAppBusinessAccount {

    static func read(from reader: SmithyJSON.Reader) throws -> SocialMessagingClientTypes.LinkedWhatsAppBusinessAccount {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SocialMessagingClientTypes.LinkedWhatsAppBusinessAccount()
        value.arn = try reader["arn"].readIfPresent() ?? ""
        value.id = try reader["id"].readIfPresent() ?? ""
        value.wabaId = try reader["wabaId"].readIfPresent() ?? ""
        value.registrationStatus = try reader["registrationStatus"].readIfPresent() ?? .sdkUnknown("")
        value.linkDate = try reader["linkDate"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds) ?? SmithyTimestamps.TimestampFormatter(format: .dateTime).date(from: "1970-01-01T00:00:00Z")
        value.wabaName = try reader["wabaName"].readIfPresent() ?? ""
        value.eventDestinations = try reader["eventDestinations"].readListIfPresent(memberReadingClosure: SocialMessagingClientTypes.WhatsAppBusinessAccountEventDestination.read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        value.phoneNumbers = try reader["phoneNumbers"].readListIfPresent(memberReadingClosure: SocialMessagingClientTypes.WhatsAppPhoneNumberSummary.read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        return value
    }
}

extension SocialMessagingClientTypes.WhatsAppPhoneNumberSummary {

    static func read(from reader: SmithyJSON.Reader) throws -> SocialMessagingClientTypes.WhatsAppPhoneNumberSummary {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SocialMessagingClientTypes.WhatsAppPhoneNumberSummary()
        value.arn = try reader["arn"].readIfPresent() ?? ""
        value.phoneNumber = try reader["phoneNumber"].readIfPresent() ?? ""
        value.phoneNumberId = try reader["phoneNumberId"].readIfPresent() ?? ""
        value.metaPhoneNumberId = try reader["metaPhoneNumberId"].readIfPresent() ?? ""
        value.displayPhoneNumberName = try reader["displayPhoneNumberName"].readIfPresent() ?? ""
        value.displayPhoneNumber = try reader["displayPhoneNumber"].readIfPresent() ?? ""
        value.qualityRating = try reader["qualityRating"].readIfPresent() ?? ""
        value.dataLocalizationRegion = try reader["dataLocalizationRegion"].readIfPresent()
        return value
    }
}

extension SocialMessagingClientTypes.WhatsAppBusinessAccountEventDestination {

    static func write(value: SocialMessagingClientTypes.WhatsAppBusinessAccountEventDestination?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["eventDestinationArn"].write(value.eventDestinationArn)
        try writer["roleArn"].write(value.roleArn)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SocialMessagingClientTypes.WhatsAppBusinessAccountEventDestination {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SocialMessagingClientTypes.WhatsAppBusinessAccountEventDestination()
        value.eventDestinationArn = try reader["eventDestinationArn"].readIfPresent() ?? ""
        value.roleArn = try reader["roleArn"].readIfPresent()
        return value
    }
}

extension SocialMessagingClientTypes.LinkedWhatsAppBusinessAccountSummary {

    static func read(from reader: SmithyJSON.Reader) throws -> SocialMessagingClientTypes.LinkedWhatsAppBusinessAccountSummary {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SocialMessagingClientTypes.LinkedWhatsAppBusinessAccountSummary()
        value.arn = try reader["arn"].readIfPresent() ?? ""
        value.id = try reader["id"].readIfPresent() ?? ""
        value.wabaId = try reader["wabaId"].readIfPresent() ?? ""
        value.registrationStatus = try reader["registrationStatus"].readIfPresent() ?? .sdkUnknown("")
        value.linkDate = try reader["linkDate"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds) ?? SmithyTimestamps.TimestampFormatter(format: .dateTime).date(from: "1970-01-01T00:00:00Z")
        value.wabaName = try reader["wabaName"].readIfPresent() ?? ""
        value.eventDestinations = try reader["eventDestinations"].readListIfPresent(memberReadingClosure: SocialMessagingClientTypes.WhatsAppBusinessAccountEventDestination.read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        return value
    }
}

extension SocialMessagingClientTypes.Tag {

    static func write(value: SocialMessagingClientTypes.Tag?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["key"].write(value.key)
        try writer["value"].write(value.value)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SocialMessagingClientTypes.Tag {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SocialMessagingClientTypes.Tag()
        value.key = try reader["key"].readIfPresent() ?? ""
        value.value = try reader["value"].readIfPresent()
        return value
    }
}

extension SocialMessagingClientTypes.TemplateSummary {

    static func read(from reader: SmithyJSON.Reader) throws -> SocialMessagingClientTypes.TemplateSummary {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SocialMessagingClientTypes.TemplateSummary()
        value.templateName = try reader["templateName"].readIfPresent()
        value.metaTemplateId = try reader["metaTemplateId"].readIfPresent()
        value.templateStatus = try reader["templateStatus"].readIfPresent()
        value.templateQualityScore = try reader["templateQualityScore"].readIfPresent()
        value.templateLanguage = try reader["templateLanguage"].readIfPresent()
        value.templateCategory = try reader["templateCategory"].readIfPresent()
        return value
    }
}

extension SocialMessagingClientTypes.MetaLibraryTemplateDefinition {

    static func read(from reader: SmithyJSON.Reader) throws -> SocialMessagingClientTypes.MetaLibraryTemplateDefinition {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SocialMessagingClientTypes.MetaLibraryTemplateDefinition()
        value.templateName = try reader["templateName"].readIfPresent()
        value.templateLanguage = try reader["templateLanguage"].readIfPresent()
        value.templateCategory = try reader["templateCategory"].readIfPresent()
        value.templateTopic = try reader["templateTopic"].readIfPresent()
        value.templateUseCase = try reader["templateUseCase"].readIfPresent()
        value.templateIndustry = try reader["templateIndustry"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.templateHeader = try reader["templateHeader"].readIfPresent()
        value.templateBody = try reader["templateBody"].readIfPresent()
        value.templateButtons = try reader["templateButtons"].readListIfPresent(memberReadingClosure: SocialMessagingClientTypes.LibraryTemplateButtonList.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.templateId = try reader["templateId"].readIfPresent()
        return value
    }
}

extension SocialMessagingClientTypes.LibraryTemplateButtonList {

    static func read(from reader: SmithyJSON.Reader) throws -> SocialMessagingClientTypes.LibraryTemplateButtonList {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SocialMessagingClientTypes.LibraryTemplateButtonList()
        value.type = try reader["type"].readIfPresent()
        value.text = try reader["text"].readIfPresent()
        value.phoneNumber = try reader["phoneNumber"].readIfPresent()
        value.url = try reader["url"].readIfPresent()
        value.otpType = try reader["otpType"].readIfPresent()
        value.zeroTapTermsAccepted = try reader["zeroTapTermsAccepted"].readIfPresent()
        value.supportedApps = try reader["supportedApps"].readListIfPresent(memberReadingClosure: SmithyReadWrite.mapReadingClosure(valueReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension SocialMessagingClientTypes.WhatsAppSignupCallback {

    static func write(value: SocialMessagingClientTypes.WhatsAppSignupCallback?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["accessToken"].write(value.accessToken)
        try writer["callbackUrl"].write(value.callbackUrl)
    }
}

extension SocialMessagingClientTypes.WhatsAppSetupFinalization {

    static func write(value: SocialMessagingClientTypes.WhatsAppSetupFinalization?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["associateInProgressToken"].write(value.associateInProgressToken)
        try writer["phoneNumberParent"].write(value.phoneNumberParent)
        try writer["phoneNumbers"].writeList(value.phoneNumbers, memberWritingClosure: SocialMessagingClientTypes.WabaPhoneNumberSetupFinalization.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["waba"].write(value.waba, with: SocialMessagingClientTypes.WabaSetupFinalization.write(value:to:))
    }
}

extension SocialMessagingClientTypes.WabaSetupFinalization {

    static func write(value: SocialMessagingClientTypes.WabaSetupFinalization?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["eventDestinations"].writeList(value.eventDestinations, memberWritingClosure: SocialMessagingClientTypes.WhatsAppBusinessAccountEventDestination.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["id"].write(value.id)
        try writer["tags"].writeList(value.tags, memberWritingClosure: SocialMessagingClientTypes.Tag.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension SocialMessagingClientTypes.WabaPhoneNumberSetupFinalization {

    static func write(value: SocialMessagingClientTypes.WabaPhoneNumberSetupFinalization?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["dataLocalizationRegion"].write(value.dataLocalizationRegion)
        try writer["id"].write(value.id)
        try writer["tags"].writeList(value.tags, memberWritingClosure: SocialMessagingClientTypes.Tag.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["twoFactorPin"].write(value.twoFactorPin)
    }
}

extension SocialMessagingClientTypes.MetaLibraryTemplate {

    static func write(value: SocialMessagingClientTypes.MetaLibraryTemplate?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["libraryTemplateBodyInputs"].write(value.libraryTemplateBodyInputs, with: SocialMessagingClientTypes.LibraryTemplateBodyInputs.write(value:to:))
        try writer["libraryTemplateButtonInputs"].writeList(value.libraryTemplateButtonInputs, memberWritingClosure: SocialMessagingClientTypes.LibraryTemplateButtonInput.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["libraryTemplateName"].write(value.libraryTemplateName)
        try writer["templateCategory"].write(value.templateCategory)
        try writer["templateLanguage"].write(value.templateLanguage)
        try writer["templateName"].write(value.templateName)
    }
}

extension SocialMessagingClientTypes.LibraryTemplateBodyInputs {

    static func write(value: SocialMessagingClientTypes.LibraryTemplateBodyInputs?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["addContactNumber"].write(value.addContactNumber)
        try writer["addLearnMoreLink"].write(value.addLearnMoreLink)
        try writer["addSecurityRecommendation"].write(value.addSecurityRecommendation)
        try writer["addTrackPackageLink"].write(value.addTrackPackageLink)
        try writer["codeExpirationMinutes"].write(value.codeExpirationMinutes)
    }
}

extension SocialMessagingClientTypes.LibraryTemplateButtonInput {

    static func write(value: SocialMessagingClientTypes.LibraryTemplateButtonInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["otpType"].write(value.otpType)
        try writer["phoneNumber"].write(value.phoneNumber)
        try writer["supportedApps"].writeList(value.supportedApps, memberWritingClosure: SmithyReadWrite.mapWritingClosure(valueWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false), memberNodeInfo: "member", isFlattened: false)
        try writer["type"].write(value.type)
        try writer["url"].writeMap(value.url, valueWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        try writer["zeroTapTermsAccepted"].write(value.zeroTapTermsAccepted)
    }
}

extension SocialMessagingClientTypes.S3File {

    static func write(value: SocialMessagingClientTypes.S3File?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["bucketName"].write(value.bucketName)
        try writer["key"].write(value.key)
    }
}

extension SocialMessagingClientTypes.S3PresignedUrl {

    static func write(value: SocialMessagingClientTypes.S3PresignedUrl?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["headers"].writeMap(value.headers, valueWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        try writer["url"].write(value.url)
    }
}

public enum SocialMessagingClientTypes {}
