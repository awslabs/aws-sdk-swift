//
// Copyright Amazon.com Inc. or its affiliates.
// All Rights Reserved.
//
// SPDX-License-Identifier: Apache-2.0
//

// Code generated by smithy-swift-codegen. DO NOT EDIT!

@_spi(SmithyReadWrite) import ClientRuntime
import class SmithyHTTPAPI.HTTPResponse
@_spi(SmithyReadWrite) import class SmithyJSON.Reader
@_spi(SmithyReadWrite) import class SmithyJSON.Writer
import enum ClientRuntime.ErrorFault
import enum SmithyReadWrite.ReaderError
@_spi(SmithyReadWrite) import enum SmithyReadWrite.ReadingClosures
@_spi(SmithyReadWrite) import enum SmithyReadWrite.WritingClosures
import protocol AWSClientRuntime.AWSServiceError
import protocol ClientRuntime.HTTPError
import protocol ClientRuntime.ModeledError
@_spi(SmithyReadWrite) import protocol SmithyReadWrite.SmithyReader
@_spi(SmithyReadWrite) import protocol SmithyReadWrite.SmithyWriter
@_spi(SmithyReadWrite) import struct AWSClientRuntime.RestJSONError
@_spi(UnknownAWSHTTPServiceError) import struct AWSClientRuntime.UnknownAWSHTTPServiceError
@_spi(SmithyReadWrite) import struct SmithyReadWrite.ReadingClosureBox
@_spi(SmithyReadWrite) import struct SmithyReadWrite.WritingClosureBox

extension AmplifyBackendClientTypes {

    public enum AdditionalConstraintsElement: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case requireDigit
        case requireLowercase
        case requireSymbol
        case requireUppercase
        case sdkUnknown(Swift.String)

        public static var allCases: [AdditionalConstraintsElement] {
            return [
                .requireDigit,
                .requireLowercase,
                .requireSymbol,
                .requireUppercase
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .requireDigit: return "REQUIRE_DIGIT"
            case .requireLowercase: return "REQUIRE_LOWERCASE"
            case .requireSymbol: return "REQUIRE_SYMBOL"
            case .requireUppercase: return "REQUIRE_UPPERCASE"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

/// An error returned if a request is not formed properly.
public struct BadRequestException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// An error message to inform that the request failed.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "BadRequestException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// An error returned if there's a temporary issue with the service.
public struct GatewayTimeoutException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// An error message to inform that the request failed.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "GatewayTimeoutException" }
    public static var fault: ClientRuntime.ErrorFault { .server }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// An error returned when a specific resource type is not found.
public struct NotFoundException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// An error message to inform that the request has failed.
        public internal(set) var message: Swift.String? = nil
        /// The type of resource that is not found.
        public internal(set) var resourceType: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "NotFoundException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil,
        resourceType: Swift.String? = nil
    )
    {
        self.properties.message = message
        self.properties.resourceType = resourceType
    }
}

/// An error that is returned when a limit of a specific type has been exceeded.
public struct TooManyRequestsException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// The type of limit that was exceeded.
        public internal(set) var limitType: Swift.String? = nil
        /// An error message to inform that the request has failed.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "TooManyRequestsException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        limitType: Swift.String? = nil,
        message: Swift.String? = nil
    )
    {
        self.properties.limitType = limitType
        self.properties.message = message
    }
}

/// The request body for CloneBackend.
public struct CloneBackendInput {
    /// The app ID.
    /// This member is required.
    public var appId: Swift.String?
    /// The name of the backend environment.
    /// This member is required.
    public var backendEnvironmentName: Swift.String?
    /// The name of the destination backend environment to be created.
    /// This member is required.
    public var targetEnvironmentName: Swift.String?

    public init(
        appId: Swift.String? = nil,
        backendEnvironmentName: Swift.String? = nil,
        targetEnvironmentName: Swift.String? = nil
    )
    {
        self.appId = appId
        self.backendEnvironmentName = backendEnvironmentName
        self.targetEnvironmentName = targetEnvironmentName
    }
}

public struct CloneBackendOutput {
    /// The app ID.
    public var appId: Swift.String?
    /// The name of the backend environment.
    public var backendEnvironmentName: Swift.String?
    /// If the request fails, this error is returned.
    public var error: Swift.String?
    /// The ID for the job.
    public var jobId: Swift.String?
    /// The name of the operation.
    public var operation: Swift.String?
    /// The current status of the request.
    public var status: Swift.String?

    public init(
        appId: Swift.String? = nil,
        backendEnvironmentName: Swift.String? = nil,
        error: Swift.String? = nil,
        jobId: Swift.String? = nil,
        operation: Swift.String? = nil,
        status: Swift.String? = nil
    )
    {
        self.appId = appId
        self.backendEnvironmentName = backendEnvironmentName
        self.error = error
        self.jobId = jobId
        self.operation = operation
        self.status = status
    }
}

extension AmplifyBackendClientTypes {
    /// Defines the resource configuration for the data model in your Amplify project.
    public struct ResourceConfig {

        public init() { }
    }

}

/// The request body for CreateBackend.
public struct CreateBackendInput {
    /// The app ID.
    /// This member is required.
    public var appId: Swift.String?
    /// The name of the app.
    /// This member is required.
    public var appName: Swift.String?
    /// The name of the backend environment.
    /// This member is required.
    public var backendEnvironmentName: Swift.String?
    /// The resource configuration for creating a backend.
    public var resourceConfig: AmplifyBackendClientTypes.ResourceConfig?
    /// The name of the resource.
    public var resourceName: Swift.String?

    public init(
        appId: Swift.String? = nil,
        appName: Swift.String? = nil,
        backendEnvironmentName: Swift.String? = nil,
        resourceConfig: AmplifyBackendClientTypes.ResourceConfig? = nil,
        resourceName: Swift.String? = nil
    )
    {
        self.appId = appId
        self.appName = appName
        self.backendEnvironmentName = backendEnvironmentName
        self.resourceConfig = resourceConfig
        self.resourceName = resourceName
    }
}

public struct CreateBackendOutput {
    /// The app ID.
    public var appId: Swift.String?
    /// The name of the backend environment.
    public var backendEnvironmentName: Swift.String?
    /// If the request fails, this error is returned.
    public var error: Swift.String?
    /// The ID for the job.
    public var jobId: Swift.String?
    /// The name of the operation.
    public var operation: Swift.String?
    /// The current status of the request.
    public var status: Swift.String?

    public init(
        appId: Swift.String? = nil,
        backendEnvironmentName: Swift.String? = nil,
        error: Swift.String? = nil,
        jobId: Swift.String? = nil,
        operation: Swift.String? = nil,
        status: Swift.String? = nil
    )
    {
        self.appId = appId
        self.backendEnvironmentName = backendEnvironmentName
        self.error = error
        self.jobId = jobId
        self.operation = operation
        self.status = status
    }
}

extension AmplifyBackendClientTypes {

    public enum Mode: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case amazonCognitoUserPools
        case apiKey
        case awsIam
        case openidConnect
        case sdkUnknown(Swift.String)

        public static var allCases: [Mode] {
            return [
                .amazonCognitoUserPools,
                .apiKey,
                .awsIam,
                .openidConnect
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .amazonCognitoUserPools: return "AMAZON_COGNITO_USER_POOLS"
            case .apiKey: return "API_KEY"
            case .awsIam: return "AWS_IAM"
            case .openidConnect: return "OPENID_CONNECT"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension AmplifyBackendClientTypes {
    /// The authentication settings for accessing provisioned data models in your Amplify project.
    public struct BackendAPIAppSyncAuthSettings {
        /// The Amazon Cognito user pool ID, if Amazon Cognito was used as an authentication setting to access your data models.
        public var cognitoUserPoolId: Swift.String?
        /// The API key description for API_KEY, if it was used as an authentication mechanism to access your data models.
        public var description: Swift.String?
        /// The API key expiration time for API_KEY, if it was used as an authentication mechanism to access your data models.
        public var expirationTime: Swift.Double?
        /// The expiry time for the OpenID authentication mechanism.
        public var openIDAuthTTL: Swift.String?
        /// The clientID for openID, if openID was used as an authentication setting to access your data models.
        public var openIDClientId: Swift.String?
        /// The expiry time for the OpenID authentication mechanism.
        public var openIDIatTTL: Swift.String?
        /// The openID issuer URL, if openID was used as an authentication setting to access your data models.
        public var openIDIssueURL: Swift.String?
        /// The OpenID provider name, if OpenID was used as an authentication mechanism to access your data models.
        public var openIDProviderName: Swift.String?

        public init(
            cognitoUserPoolId: Swift.String? = nil,
            description: Swift.String? = nil,
            expirationTime: Swift.Double? = nil,
            openIDAuthTTL: Swift.String? = nil,
            openIDClientId: Swift.String? = nil,
            openIDIatTTL: Swift.String? = nil,
            openIDIssueURL: Swift.String? = nil,
            openIDProviderName: Swift.String? = nil
        )
        {
            self.cognitoUserPoolId = cognitoUserPoolId
            self.description = description
            self.expirationTime = expirationTime
            self.openIDAuthTTL = openIDAuthTTL
            self.openIDClientId = openIDClientId
            self.openIDIatTTL = openIDIatTTL
            self.openIDIssueURL = openIDIssueURL
            self.openIDProviderName = openIDProviderName
        }
    }

}

extension AmplifyBackendClientTypes {
    /// Describes the auth types for your configured data models.
    public struct BackendAPIAuthType {
        /// Describes the authentication mode.
        public var mode: AmplifyBackendClientTypes.Mode?
        /// Describes settings for the authentication mode.
        public var settings: AmplifyBackendClientTypes.BackendAPIAppSyncAuthSettings?

        public init(
            mode: AmplifyBackendClientTypes.Mode? = nil,
            settings: AmplifyBackendClientTypes.BackendAPIAppSyncAuthSettings? = nil
        )
        {
            self.mode = mode
            self.settings = settings
        }
    }

}

extension AmplifyBackendClientTypes {

    public enum ResolutionStrategy: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case automerge
        case lambda
        case `none`
        case optimisticConcurrency
        case sdkUnknown(Swift.String)

        public static var allCases: [ResolutionStrategy] {
            return [
                .automerge,
                .lambda,
                .none,
                .optimisticConcurrency
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .automerge: return "AUTOMERGE"
            case .lambda: return "LAMBDA"
            case .none: return "NONE"
            case .optimisticConcurrency: return "OPTIMISTIC_CONCURRENCY"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension AmplifyBackendClientTypes {
    /// Describes the conflict resolution configuration for your data model configured in your Amplify project.
    public struct BackendAPIConflictResolution {
        /// The strategy for conflict resolution.
        public var resolutionStrategy: AmplifyBackendClientTypes.ResolutionStrategy?

        public init(
            resolutionStrategy: AmplifyBackendClientTypes.ResolutionStrategy? = nil
        )
        {
            self.resolutionStrategy = resolutionStrategy
        }
    }

}

extension AmplifyBackendClientTypes {
    /// The resource config for the data model, configured as a part of the Amplify project.
    public struct BackendAPIResourceConfig {
        /// Additional authentication methods used to interact with your data models.
        public var additionalAuthTypes: [AmplifyBackendClientTypes.BackendAPIAuthType]?
        /// The API name used to interact with the data model, configured as a part of your Amplify project.
        public var apiName: Swift.String?
        /// The conflict resolution strategy for your data stored in the data models.
        public var conflictResolution: AmplifyBackendClientTypes.BackendAPIConflictResolution?
        /// The default authentication type for interacting with the configured data models in your Amplify project.
        public var defaultAuthType: AmplifyBackendClientTypes.BackendAPIAuthType?
        /// The service used to provision and interact with the data model.
        public var service: Swift.String?
        /// The definition of the data model in the annotated transform of the GraphQL schema.
        public var transformSchema: Swift.String?

        public init(
            additionalAuthTypes: [AmplifyBackendClientTypes.BackendAPIAuthType]? = nil,
            apiName: Swift.String? = nil,
            conflictResolution: AmplifyBackendClientTypes.BackendAPIConflictResolution? = nil,
            defaultAuthType: AmplifyBackendClientTypes.BackendAPIAuthType? = nil,
            service: Swift.String? = nil,
            transformSchema: Swift.String? = nil
        )
        {
            self.additionalAuthTypes = additionalAuthTypes
            self.apiName = apiName
            self.conflictResolution = conflictResolution
            self.defaultAuthType = defaultAuthType
            self.service = service
            self.transformSchema = transformSchema
        }
    }

}

/// The request body for CreateBackendAPI.
public struct CreateBackendAPIInput {
    /// The app ID.
    /// This member is required.
    public var appId: Swift.String?
    /// The name of the backend environment.
    /// This member is required.
    public var backendEnvironmentName: Swift.String?
    /// The resource configuration for this request.
    /// This member is required.
    public var resourceConfig: AmplifyBackendClientTypes.BackendAPIResourceConfig?
    /// The name of this resource.
    /// This member is required.
    public var resourceName: Swift.String?

    public init(
        appId: Swift.String? = nil,
        backendEnvironmentName: Swift.String? = nil,
        resourceConfig: AmplifyBackendClientTypes.BackendAPIResourceConfig? = nil,
        resourceName: Swift.String? = nil
    )
    {
        self.appId = appId
        self.backendEnvironmentName = backendEnvironmentName
        self.resourceConfig = resourceConfig
        self.resourceName = resourceName
    }
}

public struct CreateBackendAPIOutput {
    /// The app ID.
    public var appId: Swift.String?
    /// The name of the backend environment.
    public var backendEnvironmentName: Swift.String?
    /// If the request fails, this error is returned.
    public var error: Swift.String?
    /// The ID for the job.
    public var jobId: Swift.String?
    /// The name of the operation.
    public var operation: Swift.String?
    /// The current status of the request.
    public var status: Swift.String?

    public init(
        appId: Swift.String? = nil,
        backendEnvironmentName: Swift.String? = nil,
        error: Swift.String? = nil,
        jobId: Swift.String? = nil,
        operation: Swift.String? = nil,
        status: Swift.String? = nil
    )
    {
        self.appId = appId
        self.backendEnvironmentName = backendEnvironmentName
        self.error = error
        self.jobId = jobId
        self.operation = operation
        self.status = status
    }
}

extension AmplifyBackendClientTypes {

    public enum AuthResources: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case identityPoolAndUserPool
        case userPoolOnly
        case sdkUnknown(Swift.String)

        public static var allCases: [AuthResources] {
            return [
                .identityPoolAndUserPool,
                .userPoolOnly
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .identityPoolAndUserPool: return "IDENTITY_POOL_AND_USER_POOL"
            case .userPoolOnly: return "USER_POOL_ONLY"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension AmplifyBackendClientTypes {
    /// Describes authorization configurations for the auth resources, configured as a part of your Amplify project.
    public struct CreateBackendAuthIdentityPoolConfig {
        /// Name of the Amazon Cognito identity pool used for authorization.
        /// This member is required.
        public var identityPoolName: Swift.String?
        /// Set to true or false based on whether you want to enable guest authorization to your Amplify app.
        /// This member is required.
        public var unauthenticatedLogin: Swift.Bool?

        public init(
            identityPoolName: Swift.String? = nil,
            unauthenticatedLogin: Swift.Bool? = nil
        )
        {
            self.identityPoolName = identityPoolName
            self.unauthenticatedLogin = unauthenticatedLogin
        }
    }

}

extension AmplifyBackendClientTypes {

    public enum Service: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case cognito
        case sdkUnknown(Swift.String)

        public static var allCases: [Service] {
            return [
                .cognito
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .cognito: return "COGNITO"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension AmplifyBackendClientTypes {

    /// The type of verification message to send.
    public enum DeliveryMethod: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case email
        case sms
        case sdkUnknown(Swift.String)

        public static var allCases: [DeliveryMethod] {
            return [
                .email,
                .sms
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .email: return "EMAIL"
            case .sms: return "SMS"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension AmplifyBackendClientTypes {
    /// The configuration for the email sent when an app user forgets their password.
    public struct EmailSettings {
        /// The contents of the email message.
        public var emailMessage: Swift.String?
        /// The contents of the subject line of the email message.
        public var emailSubject: Swift.String?

        public init(
            emailMessage: Swift.String? = nil,
            emailSubject: Swift.String? = nil
        )
        {
            self.emailMessage = emailMessage
            self.emailSubject = emailSubject
        }
    }

}

extension AmplifyBackendClientTypes.EmailSettings: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CONTENT_REDACTED"
    }
}

extension AmplifyBackendClientTypes {
    /// SMS settings for authentication.
    public struct SmsSettings {
        /// The contents of the SMS message.
        public var smsMessage: Swift.String?

        public init(
            smsMessage: Swift.String? = nil
        )
        {
            self.smsMessage = smsMessage
        }
    }

}

extension AmplifyBackendClientTypes.SmsSettings: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CONTENT_REDACTED"
    }
}

extension AmplifyBackendClientTypes {
    /// (DEPRECATED) Describes the forgot password policy for authenticating into the Amplify app.
    public struct CreateBackendAuthForgotPasswordConfig {
        /// (DEPRECATED) Describes which mode to use (either SMS or email) to deliver messages to app users who want to recover their password.
        /// This member is required.
        public var deliveryMethod: AmplifyBackendClientTypes.DeliveryMethod?
        /// (DEPRECATED) The configuration for the email sent when an app user forgets their password.
        public var emailSettings: AmplifyBackendClientTypes.EmailSettings?
        /// (DEPRECATED) The configuration for the SMS message sent when an app user forgets their password.
        public var smsSettings: AmplifyBackendClientTypes.SmsSettings?

        public init(
            deliveryMethod: AmplifyBackendClientTypes.DeliveryMethod? = nil,
            emailSettings: AmplifyBackendClientTypes.EmailSettings? = nil,
            smsSettings: AmplifyBackendClientTypes.SmsSettings? = nil
        )
        {
            self.deliveryMethod = deliveryMethod
            self.emailSettings = emailSettings
            self.smsSettings = smsSettings
        }
    }

}

extension AmplifyBackendClientTypes.CreateBackendAuthForgotPasswordConfig: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateBackendAuthForgotPasswordConfig(deliveryMethod: \(Swift.String(describing: deliveryMethod)), emailSettings: \"CONTENT_REDACTED\", smsSettings: \"CONTENT_REDACTED\")"}
}

extension AmplifyBackendClientTypes {

    public enum MFAMode: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case off
        case on
        case `optional`
        case sdkUnknown(Swift.String)

        public static var allCases: [MFAMode] {
            return [
                .off,
                .on,
                .optional
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .off: return "OFF"
            case .on: return "ON"
            case .optional: return "OPTIONAL"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension AmplifyBackendClientTypes {

    public enum MfaTypesElement: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case sms
        case totp
        case sdkUnknown(Swift.String)

        public static var allCases: [MfaTypesElement] {
            return [
                .sms,
                .totp
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .sms: return "SMS"
            case .totp: return "TOTP"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension AmplifyBackendClientTypes {
    /// The settings of your MFA configuration for the backend of your Amplify project.
    public struct Settings {
        /// The supported MFA types.
        public var mfaTypes: [AmplifyBackendClientTypes.MfaTypesElement]?
        /// The body of the SMS message.
        public var smsMessage: Swift.String?

        public init(
            mfaTypes: [AmplifyBackendClientTypes.MfaTypesElement]? = nil,
            smsMessage: Swift.String? = nil
        )
        {
            self.mfaTypes = mfaTypes
            self.smsMessage = smsMessage
        }
    }

}

extension AmplifyBackendClientTypes {
    /// Describes whether to apply multi-factor authentication policies for your Amazon Cognito user pool configured as a part of your Amplify project.
    public struct CreateBackendAuthMFAConfig {
        /// Describes whether MFA should be [ON, OFF, or OPTIONAL] for authentication in your Amplify project.
        /// This member is required.
        public var mfaMode: AmplifyBackendClientTypes.MFAMode?
        /// Describes the configuration settings and methods for your Amplify app users to use MFA.
        public var settings: AmplifyBackendClientTypes.Settings?

        public init(
            mfaMode: AmplifyBackendClientTypes.MFAMode? = nil,
            settings: AmplifyBackendClientTypes.Settings? = nil
        )
        {
            self.mfaMode = mfaMode
            self.settings = settings
        }
    }

}

extension AmplifyBackendClientTypes {

    public enum OAuthGrantType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case code
        case implicit
        case sdkUnknown(Swift.String)

        public static var allCases: [OAuthGrantType] {
            return [
                .code,
                .implicit
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .code: return "CODE"
            case .implicit: return "IMPLICIT"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension AmplifyBackendClientTypes {

    public enum OAuthScopesElement: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case awsCognitoSigninUserAdmin
        case email
        case openid
        case phone
        case profile
        case sdkUnknown(Swift.String)

        public static var allCases: [OAuthScopesElement] {
            return [
                .awsCognitoSigninUserAdmin,
                .email,
                .openid,
                .phone,
                .profile
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .awsCognitoSigninUserAdmin: return "AWS_COGNITO_SIGNIN_USER_ADMIN"
            case .email: return "EMAIL"
            case .openid: return "OPENID"
            case .phone: return "PHONE"
            case .profile: return "PROFILE"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension AmplifyBackendClientTypes {
    /// Describes third-party social federation configurations for allowing your app users to sign in using OAuth.
    public struct BackendAuthSocialProviderConfig {
        /// Describes the client_id, which can be obtained from the third-party social federation provider.
        public var clientId: Swift.String?
        /// Describes the client_secret, which can be obtained from third-party social federation providers.
        public var clientSecret: Swift.String?

        public init(
            clientId: Swift.String? = nil,
            clientSecret: Swift.String? = nil
        )
        {
            self.clientId = clientId
            self.clientSecret = clientSecret
        }
    }

}

extension AmplifyBackendClientTypes.BackendAuthSocialProviderConfig: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CONTENT_REDACTED"
    }
}

extension AmplifyBackendClientTypes {
    /// Describes Apple social federation configurations for allowing your app users to sign in using OAuth.
    public struct BackendAuthAppleProviderConfig {
        /// Describes the client_id (also called Services ID) that comes from Apple.
        public var clientId: Swift.String?
        /// Describes the key_id that comes from Apple.
        public var keyId: Swift.String?
        /// Describes the private_key that comes from Apple.
        public var privateKey: Swift.String?
        /// Describes the team_id that comes from Apple.
        public var teamId: Swift.String?

        public init(
            clientId: Swift.String? = nil,
            keyId: Swift.String? = nil,
            privateKey: Swift.String? = nil,
            teamId: Swift.String? = nil
        )
        {
            self.clientId = clientId
            self.keyId = keyId
            self.privateKey = privateKey
            self.teamId = teamId
        }
    }

}

extension AmplifyBackendClientTypes.BackendAuthAppleProviderConfig: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CONTENT_REDACTED"
    }
}

extension AmplifyBackendClientTypes {
    /// The settings for using the social identity providers for access to your Amplify app.
    public struct SocialProviderSettings {
        /// Describes third-party social federation configurations for allowing your app users to sign in using OAuth.
        public var facebook: AmplifyBackendClientTypes.BackendAuthSocialProviderConfig?
        /// Describes third-party social federation configurations for allowing your app users to sign in using OAuth.
        public var google: AmplifyBackendClientTypes.BackendAuthSocialProviderConfig?
        /// Describes third-party social federation configurations for allowing your app users to sign in using OAuth.
        public var loginWithAmazon: AmplifyBackendClientTypes.BackendAuthSocialProviderConfig?
        /// Describes Apple social federation configurations for allowing your app users to sign in using OAuth.
        public var signInWithApple: AmplifyBackendClientTypes.BackendAuthAppleProviderConfig?

        public init(
            facebook: AmplifyBackendClientTypes.BackendAuthSocialProviderConfig? = nil,
            google: AmplifyBackendClientTypes.BackendAuthSocialProviderConfig? = nil,
            loginWithAmazon: AmplifyBackendClientTypes.BackendAuthSocialProviderConfig? = nil,
            signInWithApple: AmplifyBackendClientTypes.BackendAuthAppleProviderConfig? = nil
        )
        {
            self.facebook = facebook
            self.google = google
            self.loginWithAmazon = loginWithAmazon
            self.signInWithApple = signInWithApple
        }
    }

}

extension AmplifyBackendClientTypes.SocialProviderSettings: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "SocialProviderSettings(facebook: \"CONTENT_REDACTED\", google: \"CONTENT_REDACTED\", loginWithAmazon: \"CONTENT_REDACTED\", signInWithApple: \"CONTENT_REDACTED\")"}
}

extension AmplifyBackendClientTypes {
    /// Creates the OAuth configuration for your Amplify project.
    public struct CreateBackendAuthOAuthConfig {
        /// The domain prefix for your Amplify app.
        public var domainPrefix: Swift.String?
        /// The OAuth grant type that you use to allow app users to authenticate from your Amplify app.
        /// This member is required.
        public var oAuthGrantType: AmplifyBackendClientTypes.OAuthGrantType?
        /// List of OAuth-related flows used to allow your app users to authenticate from your Amplify app.
        /// This member is required.
        public var oAuthScopes: [AmplifyBackendClientTypes.OAuthScopesElement]?
        /// The redirected URI for signing in to your Amplify app.
        /// This member is required.
        public var redirectSignInURIs: [Swift.String]?
        /// Redirect URLs that OAuth uses when a user signs out of an Amplify app.
        /// This member is required.
        public var redirectSignOutURIs: [Swift.String]?
        /// The settings for using social providers to access your Amplify app.
        public var socialProviderSettings: AmplifyBackendClientTypes.SocialProviderSettings?

        public init(
            domainPrefix: Swift.String? = nil,
            oAuthGrantType: AmplifyBackendClientTypes.OAuthGrantType? = nil,
            oAuthScopes: [AmplifyBackendClientTypes.OAuthScopesElement]? = nil,
            redirectSignInURIs: [Swift.String]? = nil,
            redirectSignOutURIs: [Swift.String]? = nil,
            socialProviderSettings: AmplifyBackendClientTypes.SocialProviderSettings? = nil
        )
        {
            self.domainPrefix = domainPrefix
            self.oAuthGrantType = oAuthGrantType
            self.oAuthScopes = oAuthScopes
            self.redirectSignInURIs = redirectSignInURIs
            self.redirectSignOutURIs = redirectSignOutURIs
            self.socialProviderSettings = socialProviderSettings
        }
    }

}

extension AmplifyBackendClientTypes {
    /// The password policy configuration for the backend to your Amplify project.
    public struct CreateBackendAuthPasswordPolicyConfig {
        /// Additional constraints for the password used to access the backend of your Amplify project.
        public var additionalConstraints: [AmplifyBackendClientTypes.AdditionalConstraintsElement]?
        /// The minimum length of the password used to access the backend of your Amplify project.
        /// This member is required.
        public var minimumLength: Swift.Double?

        public init(
            additionalConstraints: [AmplifyBackendClientTypes.AdditionalConstraintsElement]? = nil,
            minimumLength: Swift.Double? = nil
        )
        {
            self.additionalConstraints = additionalConstraints
            self.minimumLength = minimumLength
        }
    }

}

extension AmplifyBackendClientTypes {

    public enum RequiredSignUpAttributesElement: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case address
        case birthdate
        case email
        case familyName
        case gender
        case givenName
        case locale
        case middleName
        case name
        case nickname
        case phoneNumber
        case picture
        case preferredUsername
        case profile
        case updatedAt
        case website
        case zoneInfo
        case sdkUnknown(Swift.String)

        public static var allCases: [RequiredSignUpAttributesElement] {
            return [
                .address,
                .birthdate,
                .email,
                .familyName,
                .gender,
                .givenName,
                .locale,
                .middleName,
                .name,
                .nickname,
                .phoneNumber,
                .picture,
                .preferredUsername,
                .profile,
                .updatedAt,
                .website,
                .zoneInfo
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .address: return "ADDRESS"
            case .birthdate: return "BIRTHDATE"
            case .email: return "EMAIL"
            case .familyName: return "FAMILY_NAME"
            case .gender: return "GENDER"
            case .givenName: return "GIVEN_NAME"
            case .locale: return "LOCALE"
            case .middleName: return "MIDDLE_NAME"
            case .name: return "NAME"
            case .nickname: return "NICKNAME"
            case .phoneNumber: return "PHONE_NUMBER"
            case .picture: return "PICTURE"
            case .preferredUsername: return "PREFERRED_USERNAME"
            case .profile: return "PROFILE"
            case .updatedAt: return "UPDATED_AT"
            case .website: return "WEBSITE"
            case .zoneInfo: return "ZONE_INFO"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension AmplifyBackendClientTypes {

    public enum SignInMethod: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case email
        case emailAndPhoneNumber
        case phoneNumber
        case username
        case sdkUnknown(Swift.String)

        public static var allCases: [SignInMethod] {
            return [
                .email,
                .emailAndPhoneNumber,
                .phoneNumber,
                .username
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .email: return "EMAIL"
            case .emailAndPhoneNumber: return "EMAIL_AND_PHONE_NUMBER"
            case .phoneNumber: return "PHONE_NUMBER"
            case .username: return "USERNAME"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension AmplifyBackendClientTypes {
    /// Creates an email or SMS verification message for the auth resource configured for your Amplify project.
    public struct CreateBackendAuthVerificationMessageConfig {
        /// The type of verification message to send.
        /// This member is required.
        public var deliveryMethod: AmplifyBackendClientTypes.DeliveryMethod?
        /// The settings for the email message.
        public var emailSettings: AmplifyBackendClientTypes.EmailSettings?
        /// The settings for the SMS message.
        public var smsSettings: AmplifyBackendClientTypes.SmsSettings?

        public init(
            deliveryMethod: AmplifyBackendClientTypes.DeliveryMethod? = nil,
            emailSettings: AmplifyBackendClientTypes.EmailSettings? = nil,
            smsSettings: AmplifyBackendClientTypes.SmsSettings? = nil
        )
        {
            self.deliveryMethod = deliveryMethod
            self.emailSettings = emailSettings
            self.smsSettings = smsSettings
        }
    }

}

extension AmplifyBackendClientTypes.CreateBackendAuthVerificationMessageConfig: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateBackendAuthVerificationMessageConfig(deliveryMethod: \(Swift.String(describing: deliveryMethod)), emailSettings: \"CONTENT_REDACTED\", smsSettings: \"CONTENT_REDACTED\")"}
}

extension AmplifyBackendClientTypes {
    /// Describes the Amazon Cognito user pool configuration for the auth resource to be configured for your Amplify project.
    public struct CreateBackendAuthUserPoolConfig {
        /// (DEPRECATED) Describes the forgotten password policy for your Amazon Cognito user pool, configured as a part of your Amplify project.
        public var forgotPassword: AmplifyBackendClientTypes.CreateBackendAuthForgotPasswordConfig?
        /// Describes whether to apply multi-factor authentication policies for your Amazon Cognito user pool configured as a part of your Amplify project.
        public var mfa: AmplifyBackendClientTypes.CreateBackendAuthMFAConfig?
        /// Describes the OAuth policy and rules for your Amazon Cognito user pool, configured as a part of your Amplify project.
        public var oAuth: AmplifyBackendClientTypes.CreateBackendAuthOAuthConfig?
        /// Describes the password policy for your Amazon Cognito user pool, configured as a part of your Amplify project.
        public var passwordPolicy: AmplifyBackendClientTypes.CreateBackendAuthPasswordPolicyConfig?
        /// The required attributes to sign up new users in the user pool.
        /// This member is required.
        public var requiredSignUpAttributes: [AmplifyBackendClientTypes.RequiredSignUpAttributesElement]?
        /// Describes the sign-in methods that your Amplify app users use to log in using the Amazon Cognito user pool, configured as a part of your Amplify project.
        /// This member is required.
        public var signInMethod: AmplifyBackendClientTypes.SignInMethod?
        /// The Amazon Cognito user pool name.
        /// This member is required.
        public var userPoolName: Swift.String?
        /// Describes the email or SMS verification message for your Amazon Cognito user pool, configured as a part of your Amplify project.
        public var verificationMessage: AmplifyBackendClientTypes.CreateBackendAuthVerificationMessageConfig?

        public init(
            forgotPassword: AmplifyBackendClientTypes.CreateBackendAuthForgotPasswordConfig? = nil,
            mfa: AmplifyBackendClientTypes.CreateBackendAuthMFAConfig? = nil,
            oAuth: AmplifyBackendClientTypes.CreateBackendAuthOAuthConfig? = nil,
            passwordPolicy: AmplifyBackendClientTypes.CreateBackendAuthPasswordPolicyConfig? = nil,
            requiredSignUpAttributes: [AmplifyBackendClientTypes.RequiredSignUpAttributesElement]? = nil,
            signInMethod: AmplifyBackendClientTypes.SignInMethod? = nil,
            userPoolName: Swift.String? = nil,
            verificationMessage: AmplifyBackendClientTypes.CreateBackendAuthVerificationMessageConfig? = nil
        )
        {
            self.forgotPassword = forgotPassword
            self.mfa = mfa
            self.oAuth = oAuth
            self.passwordPolicy = passwordPolicy
            self.requiredSignUpAttributes = requiredSignUpAttributes
            self.signInMethod = signInMethod
            self.userPoolName = userPoolName
            self.verificationMessage = verificationMessage
        }
    }

}

extension AmplifyBackendClientTypes {
    /// Defines the resource configuration when creating an auth resource in your Amplify project.
    public struct CreateBackendAuthResourceConfig {
        /// Defines whether you want to configure only authentication or both authentication and authorization settings.
        /// This member is required.
        public var authResources: AmplifyBackendClientTypes.AuthResources?
        /// Describes the authorization configuration for the Amazon Cognito identity pool, provisioned as a part of your auth resource in the Amplify project.
        public var identityPoolConfigs: AmplifyBackendClientTypes.CreateBackendAuthIdentityPoolConfig?
        /// Defines the service name to use when configuring an authentication resource in your Amplify project.
        /// This member is required.
        public var service: AmplifyBackendClientTypes.Service?
        /// Describes authentication configuration for the Amazon Cognito user pool, provisioned as a part of your auth resource in the Amplify project.
        /// This member is required.
        public var userPoolConfigs: AmplifyBackendClientTypes.CreateBackendAuthUserPoolConfig?

        public init(
            authResources: AmplifyBackendClientTypes.AuthResources? = nil,
            identityPoolConfigs: AmplifyBackendClientTypes.CreateBackendAuthIdentityPoolConfig? = nil,
            service: AmplifyBackendClientTypes.Service? = nil,
            userPoolConfigs: AmplifyBackendClientTypes.CreateBackendAuthUserPoolConfig? = nil
        )
        {
            self.authResources = authResources
            self.identityPoolConfigs = identityPoolConfigs
            self.service = service
            self.userPoolConfigs = userPoolConfigs
        }
    }

}

/// The request body for CreateBackendAuth.
public struct CreateBackendAuthInput {
    /// The app ID.
    /// This member is required.
    public var appId: Swift.String?
    /// The name of the backend environment.
    /// This member is required.
    public var backendEnvironmentName: Swift.String?
    /// The resource configuration for this request object.
    /// This member is required.
    public var resourceConfig: AmplifyBackendClientTypes.CreateBackendAuthResourceConfig?
    /// The name of this resource.
    /// This member is required.
    public var resourceName: Swift.String?

    public init(
        appId: Swift.String? = nil,
        backendEnvironmentName: Swift.String? = nil,
        resourceConfig: AmplifyBackendClientTypes.CreateBackendAuthResourceConfig? = nil,
        resourceName: Swift.String? = nil
    )
    {
        self.appId = appId
        self.backendEnvironmentName = backendEnvironmentName
        self.resourceConfig = resourceConfig
        self.resourceName = resourceName
    }
}

public struct CreateBackendAuthOutput {
    /// The app ID.
    public var appId: Swift.String?
    /// The name of the backend environment.
    public var backendEnvironmentName: Swift.String?
    /// If the request fails, this error is returned.
    public var error: Swift.String?
    /// The ID for the job.
    public var jobId: Swift.String?
    /// The name of the operation.
    public var operation: Swift.String?
    /// The current status of the request.
    public var status: Swift.String?

    public init(
        appId: Swift.String? = nil,
        backendEnvironmentName: Swift.String? = nil,
        error: Swift.String? = nil,
        jobId: Swift.String? = nil,
        operation: Swift.String? = nil,
        status: Swift.String? = nil
    )
    {
        self.appId = appId
        self.backendEnvironmentName = backendEnvironmentName
        self.error = error
        self.jobId = jobId
        self.operation = operation
        self.status = status
    }
}

/// The request body for CreateBackendConfig.
public struct CreateBackendConfigInput {
    /// The app ID.
    /// This member is required.
    public var appId: Swift.String?
    /// The app ID for the backend manager.
    public var backendManagerAppId: Swift.String?

    public init(
        appId: Swift.String? = nil,
        backendManagerAppId: Swift.String? = nil
    )
    {
        self.appId = appId
        self.backendManagerAppId = backendManagerAppId
    }
}

public struct CreateBackendConfigOutput {
    /// The app ID.
    public var appId: Swift.String?
    /// The name of the backend environment.
    public var backendEnvironmentName: Swift.String?
    /// The ID for the job.
    public var jobId: Swift.String?
    /// The current status of the request.
    public var status: Swift.String?

    public init(
        appId: Swift.String? = nil,
        backendEnvironmentName: Swift.String? = nil,
        jobId: Swift.String? = nil,
        status: Swift.String? = nil
    )
    {
        self.appId = appId
        self.backendEnvironmentName = backendEnvironmentName
        self.jobId = jobId
        self.status = status
    }
}

extension AmplifyBackendClientTypes {

    public enum AuthenticatedElement: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case createAndUpdate
        case delete
        case read
        case sdkUnknown(Swift.String)

        public static var allCases: [AuthenticatedElement] {
            return [
                .createAndUpdate,
                .delete,
                .read
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .createAndUpdate: return "CREATE_AND_UPDATE"
            case .delete: return "DELETE"
            case .read: return "READ"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension AmplifyBackendClientTypes {

    public enum UnAuthenticatedElement: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case createAndUpdate
        case delete
        case read
        case sdkUnknown(Swift.String)

        public static var allCases: [UnAuthenticatedElement] {
            return [
                .createAndUpdate,
                .delete,
                .read
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .createAndUpdate: return "CREATE_AND_UPDATE"
            case .delete: return "DELETE"
            case .read: return "READ"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension AmplifyBackendClientTypes {
    /// Describes the read, write, and delete permissions users have against your storage S3 bucket.
    public struct BackendStoragePermissions {
        /// Lists all authenticated user read, write, and delete permissions for your S3 bucket.
        /// This member is required.
        public var authenticated: [AmplifyBackendClientTypes.AuthenticatedElement]?
        /// Lists all unauthenticated user read, write, and delete permissions for your S3 bucket.
        public var unAuthenticated: [AmplifyBackendClientTypes.UnAuthenticatedElement]?

        public init(
            authenticated: [AmplifyBackendClientTypes.AuthenticatedElement]? = nil,
            unAuthenticated: [AmplifyBackendClientTypes.UnAuthenticatedElement]? = nil
        )
        {
            self.authenticated = authenticated
            self.unAuthenticated = unAuthenticated
        }
    }

}

extension AmplifyBackendClientTypes {

    public enum ServiceName: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case s3
        case sdkUnknown(Swift.String)

        public static var allCases: [ServiceName] {
            return [
                .s3
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .s3: return "S3"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension AmplifyBackendClientTypes {
    /// The resource configuration for creating backend storage.
    public struct CreateBackendStorageResourceConfig {
        /// The name of the S3 bucket.
        public var bucketName: Swift.String?
        /// The authorization configuration for the storage S3 bucket.
        /// This member is required.
        public var permissions: AmplifyBackendClientTypes.BackendStoragePermissions?
        /// The name of the storage service.
        /// This member is required.
        public var serviceName: AmplifyBackendClientTypes.ServiceName?

        public init(
            bucketName: Swift.String? = nil,
            permissions: AmplifyBackendClientTypes.BackendStoragePermissions? = nil,
            serviceName: AmplifyBackendClientTypes.ServiceName? = nil
        )
        {
            self.bucketName = bucketName
            self.permissions = permissions
            self.serviceName = serviceName
        }
    }

}

/// The request body for CreateBackendStorage.
public struct CreateBackendStorageInput {
    /// The app ID.
    /// This member is required.
    public var appId: Swift.String?
    /// The name of the backend environment.
    /// This member is required.
    public var backendEnvironmentName: Swift.String?
    /// The resource configuration for creating backend storage.
    /// This member is required.
    public var resourceConfig: AmplifyBackendClientTypes.CreateBackendStorageResourceConfig?
    /// The name of the storage resource.
    /// This member is required.
    public var resourceName: Swift.String?

    public init(
        appId: Swift.String? = nil,
        backendEnvironmentName: Swift.String? = nil,
        resourceConfig: AmplifyBackendClientTypes.CreateBackendStorageResourceConfig? = nil,
        resourceName: Swift.String? = nil
    )
    {
        self.appId = appId
        self.backendEnvironmentName = backendEnvironmentName
        self.resourceConfig = resourceConfig
        self.resourceName = resourceName
    }
}

public struct CreateBackendStorageOutput {
    /// The app ID.
    public var appId: Swift.String?
    /// The name of the backend environment.
    public var backendEnvironmentName: Swift.String?
    /// The ID for the job.
    public var jobId: Swift.String?
    /// The current status of the request.
    public var status: Swift.String?

    public init(
        appId: Swift.String? = nil,
        backendEnvironmentName: Swift.String? = nil,
        jobId: Swift.String? = nil,
        status: Swift.String? = nil
    )
    {
        self.appId = appId
        self.backendEnvironmentName = backendEnvironmentName
        self.jobId = jobId
        self.status = status
    }
}

public struct CreateTokenInput {
    /// The app ID.
    /// This member is required.
    public var appId: Swift.String?

    public init(
        appId: Swift.String? = nil
    )
    {
        self.appId = appId
    }
}

public struct CreateTokenOutput {
    /// The app ID.
    public var appId: Swift.String?
    /// One-time challenge code for authenticating into the Amplify Admin UI.
    public var challengeCode: Swift.String?
    /// A unique ID provided when creating a new challenge token.
    public var sessionId: Swift.String?
    /// The expiry time for the one-time generated token code.
    public var ttl: Swift.String?

    public init(
        appId: Swift.String? = nil,
        challengeCode: Swift.String? = nil,
        sessionId: Swift.String? = nil,
        ttl: Swift.String? = nil
    )
    {
        self.appId = appId
        self.challengeCode = challengeCode
        self.sessionId = sessionId
        self.ttl = ttl
    }
}

public struct DeleteBackendInput {
    /// The app ID.
    /// This member is required.
    public var appId: Swift.String?
    /// The name of the backend environment.
    /// This member is required.
    public var backendEnvironmentName: Swift.String?

    public init(
        appId: Swift.String? = nil,
        backendEnvironmentName: Swift.String? = nil
    )
    {
        self.appId = appId
        self.backendEnvironmentName = backendEnvironmentName
    }
}

public struct DeleteBackendOutput {
    /// The app ID.
    public var appId: Swift.String?
    /// The name of the backend environment.
    public var backendEnvironmentName: Swift.String?
    /// If the request fails, this error is returned.
    public var error: Swift.String?
    /// The ID for the job.
    public var jobId: Swift.String?
    /// The name of the operation.
    public var operation: Swift.String?
    /// The current status of the request.
    public var status: Swift.String?

    public init(
        appId: Swift.String? = nil,
        backendEnvironmentName: Swift.String? = nil,
        error: Swift.String? = nil,
        jobId: Swift.String? = nil,
        operation: Swift.String? = nil,
        status: Swift.String? = nil
    )
    {
        self.appId = appId
        self.backendEnvironmentName = backendEnvironmentName
        self.error = error
        self.jobId = jobId
        self.operation = operation
        self.status = status
    }
}

/// The request body for DeleteBackendAPI.
public struct DeleteBackendAPIInput {
    /// The app ID.
    /// This member is required.
    public var appId: Swift.String?
    /// The name of the backend environment.
    /// This member is required.
    public var backendEnvironmentName: Swift.String?
    /// Defines the resource configuration for the data model in your Amplify project.
    public var resourceConfig: AmplifyBackendClientTypes.BackendAPIResourceConfig?
    /// The name of this resource.
    /// This member is required.
    public var resourceName: Swift.String?

    public init(
        appId: Swift.String? = nil,
        backendEnvironmentName: Swift.String? = nil,
        resourceConfig: AmplifyBackendClientTypes.BackendAPIResourceConfig? = nil,
        resourceName: Swift.String? = nil
    )
    {
        self.appId = appId
        self.backendEnvironmentName = backendEnvironmentName
        self.resourceConfig = resourceConfig
        self.resourceName = resourceName
    }
}

public struct DeleteBackendAPIOutput {
    /// The app ID.
    public var appId: Swift.String?
    /// The name of the backend environment.
    public var backendEnvironmentName: Swift.String?
    /// If the request fails, this error is returned.
    public var error: Swift.String?
    /// The ID for the job.
    public var jobId: Swift.String?
    /// The name of the operation.
    public var operation: Swift.String?
    /// The current status of the request.
    public var status: Swift.String?

    public init(
        appId: Swift.String? = nil,
        backendEnvironmentName: Swift.String? = nil,
        error: Swift.String? = nil,
        jobId: Swift.String? = nil,
        operation: Swift.String? = nil,
        status: Swift.String? = nil
    )
    {
        self.appId = appId
        self.backendEnvironmentName = backendEnvironmentName
        self.error = error
        self.jobId = jobId
        self.operation = operation
        self.status = status
    }
}

/// The request body for DeleteBackendAuth.
public struct DeleteBackendAuthInput {
    /// The app ID.
    /// This member is required.
    public var appId: Swift.String?
    /// The name of the backend environment.
    /// This member is required.
    public var backendEnvironmentName: Swift.String?
    /// The name of this resource.
    /// This member is required.
    public var resourceName: Swift.String?

    public init(
        appId: Swift.String? = nil,
        backendEnvironmentName: Swift.String? = nil,
        resourceName: Swift.String? = nil
    )
    {
        self.appId = appId
        self.backendEnvironmentName = backendEnvironmentName
        self.resourceName = resourceName
    }
}

public struct DeleteBackendAuthOutput {
    /// The app ID.
    public var appId: Swift.String?
    /// The name of the backend environment.
    public var backendEnvironmentName: Swift.String?
    /// If the request fails, this error is returned.
    public var error: Swift.String?
    /// The ID for the job.
    public var jobId: Swift.String?
    /// The name of the operation.
    public var operation: Swift.String?
    /// The current status of the request.
    public var status: Swift.String?

    public init(
        appId: Swift.String? = nil,
        backendEnvironmentName: Swift.String? = nil,
        error: Swift.String? = nil,
        jobId: Swift.String? = nil,
        operation: Swift.String? = nil,
        status: Swift.String? = nil
    )
    {
        self.appId = appId
        self.backendEnvironmentName = backendEnvironmentName
        self.error = error
        self.jobId = jobId
        self.operation = operation
        self.status = status
    }
}

/// The request body for DeleteBackendStorage.
public struct DeleteBackendStorageInput {
    /// The app ID.
    /// This member is required.
    public var appId: Swift.String?
    /// The name of the backend environment.
    /// This member is required.
    public var backendEnvironmentName: Swift.String?
    /// The name of the storage resource.
    /// This member is required.
    public var resourceName: Swift.String?
    /// The name of the storage service.
    /// This member is required.
    public var serviceName: AmplifyBackendClientTypes.ServiceName?

    public init(
        appId: Swift.String? = nil,
        backendEnvironmentName: Swift.String? = nil,
        resourceName: Swift.String? = nil,
        serviceName: AmplifyBackendClientTypes.ServiceName? = nil
    )
    {
        self.appId = appId
        self.backendEnvironmentName = backendEnvironmentName
        self.resourceName = resourceName
        self.serviceName = serviceName
    }
}

public struct DeleteBackendStorageOutput {
    /// The app ID.
    public var appId: Swift.String?
    /// The name of the backend environment.
    public var backendEnvironmentName: Swift.String?
    /// The ID for the job.
    public var jobId: Swift.String?
    /// The current status of the request.
    public var status: Swift.String?

    public init(
        appId: Swift.String? = nil,
        backendEnvironmentName: Swift.String? = nil,
        jobId: Swift.String? = nil,
        status: Swift.String? = nil
    )
    {
        self.appId = appId
        self.backendEnvironmentName = backendEnvironmentName
        self.jobId = jobId
        self.status = status
    }
}

public struct DeleteTokenInput {
    /// The app ID.
    /// This member is required.
    public var appId: Swift.String?
    /// The session ID.
    /// This member is required.
    public var sessionId: Swift.String?

    public init(
        appId: Swift.String? = nil,
        sessionId: Swift.String? = nil
    )
    {
        self.appId = appId
        self.sessionId = sessionId
    }
}

public struct DeleteTokenOutput {
    /// Indicates whether the request succeeded or failed.
    public var isSuccess: Swift.Bool?

    public init(
        isSuccess: Swift.Bool? = nil
    )
    {
        self.isSuccess = isSuccess
    }
}

/// The request body for GenerateBackendAPIModels.
public struct GenerateBackendAPIModelsInput {
    /// The app ID.
    /// This member is required.
    public var appId: Swift.String?
    /// The name of the backend environment.
    /// This member is required.
    public var backendEnvironmentName: Swift.String?
    /// The name of this resource.
    /// This member is required.
    public var resourceName: Swift.String?

    public init(
        appId: Swift.String? = nil,
        backendEnvironmentName: Swift.String? = nil,
        resourceName: Swift.String? = nil
    )
    {
        self.appId = appId
        self.backendEnvironmentName = backendEnvironmentName
        self.resourceName = resourceName
    }
}

public struct GenerateBackendAPIModelsOutput {
    /// The app ID.
    public var appId: Swift.String?
    /// The name of the backend environment.
    public var backendEnvironmentName: Swift.String?
    /// If the request fails, this error is returned.
    public var error: Swift.String?
    /// The ID for the job.
    public var jobId: Swift.String?
    /// The name of the operation.
    public var operation: Swift.String?
    /// The current status of the request.
    public var status: Swift.String?

    public init(
        appId: Swift.String? = nil,
        backendEnvironmentName: Swift.String? = nil,
        error: Swift.String? = nil,
        jobId: Swift.String? = nil,
        operation: Swift.String? = nil,
        status: Swift.String? = nil
    )
    {
        self.appId = appId
        self.backendEnvironmentName = backendEnvironmentName
        self.error = error
        self.jobId = jobId
        self.operation = operation
        self.status = status
    }
}

/// The request body for GetBackend.
public struct GetBackendInput {
    /// The app ID.
    /// This member is required.
    public var appId: Swift.String?
    /// The name of the backend environment.
    public var backendEnvironmentName: Swift.String?

    public init(
        appId: Swift.String? = nil,
        backendEnvironmentName: Swift.String? = nil
    )
    {
        self.appId = appId
        self.backendEnvironmentName = backendEnvironmentName
    }
}

public struct GetBackendOutput {
    /// A stringified version of the cli.json file for your Amplify project.
    public var amplifyFeatureFlags: Swift.String?
    /// A stringified version of the current configs for your Amplify project.
    public var amplifyMetaConfig: Swift.String?
    /// The app ID.
    public var appId: Swift.String?
    /// The name of the app.
    public var appName: Swift.String?
    /// A list of backend environments in an array.
    public var backendEnvironmentList: [Swift.String]?
    /// The name of the backend environment.
    public var backendEnvironmentName: Swift.String?
    /// If the request failed, this is the returned error.
    public var error: Swift.String?

    public init(
        amplifyFeatureFlags: Swift.String? = nil,
        amplifyMetaConfig: Swift.String? = nil,
        appId: Swift.String? = nil,
        appName: Swift.String? = nil,
        backendEnvironmentList: [Swift.String]? = nil,
        backendEnvironmentName: Swift.String? = nil,
        error: Swift.String? = nil
    )
    {
        self.amplifyFeatureFlags = amplifyFeatureFlags
        self.amplifyMetaConfig = amplifyMetaConfig
        self.appId = appId
        self.appName = appName
        self.backendEnvironmentList = backendEnvironmentList
        self.backendEnvironmentName = backendEnvironmentName
        self.error = error
    }
}

/// The request body for GetBackendAPI.
public struct GetBackendAPIInput {
    /// The app ID.
    /// This member is required.
    public var appId: Swift.String?
    /// The name of the backend environment.
    /// This member is required.
    public var backendEnvironmentName: Swift.String?
    /// Defines the resource configuration for the data model in your Amplify project.
    public var resourceConfig: AmplifyBackendClientTypes.BackendAPIResourceConfig?
    /// The name of this resource.
    /// This member is required.
    public var resourceName: Swift.String?

    public init(
        appId: Swift.String? = nil,
        backendEnvironmentName: Swift.String? = nil,
        resourceConfig: AmplifyBackendClientTypes.BackendAPIResourceConfig? = nil,
        resourceName: Swift.String? = nil
    )
    {
        self.appId = appId
        self.backendEnvironmentName = backendEnvironmentName
        self.resourceConfig = resourceConfig
        self.resourceName = resourceName
    }
}

public struct GetBackendAPIOutput {
    /// The app ID.
    public var appId: Swift.String?
    /// The name of the backend environment.
    public var backendEnvironmentName: Swift.String?
    /// If the request fails, this error is returned.
    public var error: Swift.String?
    /// The resource configuration for this response object.
    public var resourceConfig: AmplifyBackendClientTypes.BackendAPIResourceConfig?
    /// The name of this resource.
    public var resourceName: Swift.String?

    public init(
        appId: Swift.String? = nil,
        backendEnvironmentName: Swift.String? = nil,
        error: Swift.String? = nil,
        resourceConfig: AmplifyBackendClientTypes.BackendAPIResourceConfig? = nil,
        resourceName: Swift.String? = nil
    )
    {
        self.appId = appId
        self.backendEnvironmentName = backendEnvironmentName
        self.error = error
        self.resourceConfig = resourceConfig
        self.resourceName = resourceName
    }
}

/// The request body for GetBackendAPIModels.
public struct GetBackendAPIModelsInput {
    /// The app ID.
    /// This member is required.
    public var appId: Swift.String?
    /// The name of the backend environment.
    /// This member is required.
    public var backendEnvironmentName: Swift.String?
    /// The name of this resource.
    /// This member is required.
    public var resourceName: Swift.String?

    public init(
        appId: Swift.String? = nil,
        backendEnvironmentName: Swift.String? = nil,
        resourceName: Swift.String? = nil
    )
    {
        self.appId = appId
        self.backendEnvironmentName = backendEnvironmentName
        self.resourceName = resourceName
    }
}

extension AmplifyBackendClientTypes {

    public enum Status: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case latest
        case stale
        case sdkUnknown(Swift.String)

        public static var allCases: [Status] {
            return [
                .latest,
                .stale
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .latest: return "LATEST"
            case .stale: return "STALE"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

public struct GetBackendAPIModelsOutput {
    /// Stringified JSON of the model introspection schema for an existing backend API resource.
    public var modelIntrospectionSchema: Swift.String?
    /// Stringified JSON of the datastore model.
    public var models: Swift.String?
    /// The current status of the request.
    public var status: AmplifyBackendClientTypes.Status?

    public init(
        modelIntrospectionSchema: Swift.String? = nil,
        models: Swift.String? = nil,
        status: AmplifyBackendClientTypes.Status? = nil
    )
    {
        self.modelIntrospectionSchema = modelIntrospectionSchema
        self.models = models
        self.status = status
    }
}

/// The request body for GetBackendAuth.
public struct GetBackendAuthInput {
    /// The app ID.
    /// This member is required.
    public var appId: Swift.String?
    /// The name of the backend environment.
    /// This member is required.
    public var backendEnvironmentName: Swift.String?
    /// The name of this resource.
    /// This member is required.
    public var resourceName: Swift.String?

    public init(
        appId: Swift.String? = nil,
        backendEnvironmentName: Swift.String? = nil,
        resourceName: Swift.String? = nil
    )
    {
        self.appId = appId
        self.backendEnvironmentName = backendEnvironmentName
        self.resourceName = resourceName
    }
}

public struct GetBackendAuthOutput {
    /// The app ID.
    public var appId: Swift.String?
    /// The name of the backend environment.
    public var backendEnvironmentName: Swift.String?
    /// If the request fails, this error is returned.
    public var error: Swift.String?
    /// The resource configuration for authorization requests to the backend of your Amplify project.
    public var resourceConfig: AmplifyBackendClientTypes.CreateBackendAuthResourceConfig?
    /// The name of this resource.
    public var resourceName: Swift.String?

    public init(
        appId: Swift.String? = nil,
        backendEnvironmentName: Swift.String? = nil,
        error: Swift.String? = nil,
        resourceConfig: AmplifyBackendClientTypes.CreateBackendAuthResourceConfig? = nil,
        resourceName: Swift.String? = nil
    )
    {
        self.appId = appId
        self.backendEnvironmentName = backendEnvironmentName
        self.error = error
        self.resourceConfig = resourceConfig
        self.resourceName = resourceName
    }
}

public struct GetBackendJobInput {
    /// The app ID.
    /// This member is required.
    public var appId: Swift.String?
    /// The name of the backend environment.
    /// This member is required.
    public var backendEnvironmentName: Swift.String?
    /// The ID for the job.
    /// This member is required.
    public var jobId: Swift.String?

    public init(
        appId: Swift.String? = nil,
        backendEnvironmentName: Swift.String? = nil,
        jobId: Swift.String? = nil
    )
    {
        self.appId = appId
        self.backendEnvironmentName = backendEnvironmentName
        self.jobId = jobId
    }
}

public struct GetBackendJobOutput {
    /// The app ID.
    public var appId: Swift.String?
    /// The name of the backend environment.
    public var backendEnvironmentName: Swift.String?
    /// The time when the job was created.
    public var createTime: Swift.String?
    /// If the request fails, this error is returned.
    public var error: Swift.String?
    /// The ID for the job.
    public var jobId: Swift.String?
    /// The name of the operation.
    public var operation: Swift.String?
    /// The current status of the request.
    public var status: Swift.String?
    /// The time when the job was last updated.
    public var updateTime: Swift.String?

    public init(
        appId: Swift.String? = nil,
        backendEnvironmentName: Swift.String? = nil,
        createTime: Swift.String? = nil,
        error: Swift.String? = nil,
        jobId: Swift.String? = nil,
        operation: Swift.String? = nil,
        status: Swift.String? = nil,
        updateTime: Swift.String? = nil
    )
    {
        self.appId = appId
        self.backendEnvironmentName = backendEnvironmentName
        self.createTime = createTime
        self.error = error
        self.jobId = jobId
        self.operation = operation
        self.status = status
        self.updateTime = updateTime
    }
}

/// The request body for GetBackendStorage.
public struct GetBackendStorageInput {
    /// The app ID.
    /// This member is required.
    public var appId: Swift.String?
    /// The name of the backend environment.
    /// This member is required.
    public var backendEnvironmentName: Swift.String?
    /// The name of the storage resource.
    /// This member is required.
    public var resourceName: Swift.String?

    public init(
        appId: Swift.String? = nil,
        backendEnvironmentName: Swift.String? = nil,
        resourceName: Swift.String? = nil
    )
    {
        self.appId = appId
        self.backendEnvironmentName = backendEnvironmentName
        self.resourceName = resourceName
    }
}

extension AmplifyBackendClientTypes {
    /// The details for a backend storage resource.
    public struct GetBackendStorageResourceConfig {
        /// The name of the S3 bucket.
        public var bucketName: Swift.String?
        /// Returns True if the storage resource has been imported.
        /// This member is required.
        public var imported: Swift.Bool?
        /// The authorization configuration for the storage S3 bucket.
        public var permissions: AmplifyBackendClientTypes.BackendStoragePermissions?
        /// The name of the storage service.
        /// This member is required.
        public var serviceName: AmplifyBackendClientTypes.ServiceName?

        public init(
            bucketName: Swift.String? = nil,
            imported: Swift.Bool? = nil,
            permissions: AmplifyBackendClientTypes.BackendStoragePermissions? = nil,
            serviceName: AmplifyBackendClientTypes.ServiceName? = nil
        )
        {
            self.bucketName = bucketName
            self.imported = imported
            self.permissions = permissions
            self.serviceName = serviceName
        }
    }

}

public struct GetBackendStorageOutput {
    /// The app ID.
    public var appId: Swift.String?
    /// The name of the backend environment.
    public var backendEnvironmentName: Swift.String?
    /// The resource configuration for the backend storage resource.
    public var resourceConfig: AmplifyBackendClientTypes.GetBackendStorageResourceConfig?
    /// The name of the storage resource.
    public var resourceName: Swift.String?

    public init(
        appId: Swift.String? = nil,
        backendEnvironmentName: Swift.String? = nil,
        resourceConfig: AmplifyBackendClientTypes.GetBackendStorageResourceConfig? = nil,
        resourceName: Swift.String? = nil
    )
    {
        self.appId = appId
        self.backendEnvironmentName = backendEnvironmentName
        self.resourceConfig = resourceConfig
        self.resourceName = resourceName
    }
}

public struct GetTokenInput {
    /// The app ID.
    /// This member is required.
    public var appId: Swift.String?
    /// The session ID.
    /// This member is required.
    public var sessionId: Swift.String?

    public init(
        appId: Swift.String? = nil,
        sessionId: Swift.String? = nil
    )
    {
        self.appId = appId
        self.sessionId = sessionId
    }
}

public struct GetTokenOutput {
    /// The app ID.
    public var appId: Swift.String?
    /// The one-time challenge code for authenticating into the Amplify Admin UI.
    public var challengeCode: Swift.String?
    /// A unique ID provided when creating a new challenge token.
    public var sessionId: Swift.String?
    /// The expiry time for the one-time generated token code.
    public var ttl: Swift.String?

    public init(
        appId: Swift.String? = nil,
        challengeCode: Swift.String? = nil,
        sessionId: Swift.String? = nil,
        ttl: Swift.String? = nil
    )
    {
        self.appId = appId
        self.challengeCode = challengeCode
        self.sessionId = sessionId
        self.ttl = ttl
    }
}

/// The request body for ImportBackendAuth.
public struct ImportBackendAuthInput {
    /// The app ID.
    /// This member is required.
    public var appId: Swift.String?
    /// The name of the backend environment.
    /// This member is required.
    public var backendEnvironmentName: Swift.String?
    /// The ID of the Amazon Cognito identity pool.
    public var identityPoolId: Swift.String?
    /// The ID of the Amazon Cognito native client.
    /// This member is required.
    public var nativeClientId: Swift.String?
    /// The ID of the Amazon Cognito user pool.
    /// This member is required.
    public var userPoolId: Swift.String?
    /// The ID of the Amazon Cognito web client.
    /// This member is required.
    public var webClientId: Swift.String?

    public init(
        appId: Swift.String? = nil,
        backendEnvironmentName: Swift.String? = nil,
        identityPoolId: Swift.String? = nil,
        nativeClientId: Swift.String? = nil,
        userPoolId: Swift.String? = nil,
        webClientId: Swift.String? = nil
    )
    {
        self.appId = appId
        self.backendEnvironmentName = backendEnvironmentName
        self.identityPoolId = identityPoolId
        self.nativeClientId = nativeClientId
        self.userPoolId = userPoolId
        self.webClientId = webClientId
    }
}

public struct ImportBackendAuthOutput {
    /// The app ID.
    public var appId: Swift.String?
    /// The name of the backend environment.
    public var backendEnvironmentName: Swift.String?
    /// If the request fails, this error is returned.
    public var error: Swift.String?
    /// The ID for the job.
    public var jobId: Swift.String?
    /// The name of the operation.
    public var operation: Swift.String?
    /// The current status of the request.
    public var status: Swift.String?

    public init(
        appId: Swift.String? = nil,
        backendEnvironmentName: Swift.String? = nil,
        error: Swift.String? = nil,
        jobId: Swift.String? = nil,
        operation: Swift.String? = nil,
        status: Swift.String? = nil
    )
    {
        self.appId = appId
        self.backendEnvironmentName = backendEnvironmentName
        self.error = error
        self.jobId = jobId
        self.operation = operation
        self.status = status
    }
}

/// The request body for ImportBackendStorage.
public struct ImportBackendStorageInput {
    /// The app ID.
    /// This member is required.
    public var appId: Swift.String?
    /// The name of the backend environment.
    /// This member is required.
    public var backendEnvironmentName: Swift.String?
    /// The name of the S3 bucket.
    public var bucketName: Swift.String?
    /// The name of the storage service.
    /// This member is required.
    public var serviceName: AmplifyBackendClientTypes.ServiceName?

    public init(
        appId: Swift.String? = nil,
        backendEnvironmentName: Swift.String? = nil,
        bucketName: Swift.String? = nil,
        serviceName: AmplifyBackendClientTypes.ServiceName? = nil
    )
    {
        self.appId = appId
        self.backendEnvironmentName = backendEnvironmentName
        self.bucketName = bucketName
        self.serviceName = serviceName
    }
}

public struct ImportBackendStorageOutput {
    /// The app ID.
    public var appId: Swift.String?
    /// The name of the backend environment.
    public var backendEnvironmentName: Swift.String?
    /// The ID for the job.
    public var jobId: Swift.String?
    /// The current status of the request.
    public var status: Swift.String?

    public init(
        appId: Swift.String? = nil,
        backendEnvironmentName: Swift.String? = nil,
        jobId: Swift.String? = nil,
        status: Swift.String? = nil
    )
    {
        self.appId = appId
        self.backendEnvironmentName = backendEnvironmentName
        self.jobId = jobId
        self.status = status
    }
}

/// The request body for ListBackendJobs.
public struct ListBackendJobsInput {
    /// The app ID.
    /// This member is required.
    public var appId: Swift.String?
    /// The name of the backend environment.
    /// This member is required.
    public var backendEnvironmentName: Swift.String?
    /// The ID for the job.
    public var jobId: Swift.String?
    /// The maximum number of results that you want in the response.
    public var maxResults: Swift.Int?
    /// The token for the next set of results.
    public var nextToken: Swift.String?
    /// Filters the list of response objects to include only those with the specified operation name.
    public var operation: Swift.String?
    /// Filters the list of response objects to include only those with the specified status.
    public var status: Swift.String?

    public init(
        appId: Swift.String? = nil,
        backendEnvironmentName: Swift.String? = nil,
        jobId: Swift.String? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        operation: Swift.String? = nil,
        status: Swift.String? = nil
    )
    {
        self.appId = appId
        self.backendEnvironmentName = backendEnvironmentName
        self.jobId = jobId
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.operation = operation
        self.status = status
    }
}

extension AmplifyBackendClientTypes {
    /// The response object for this operation.
    public struct BackendJobRespObj {
        /// The app ID.
        /// This member is required.
        public var appId: Swift.String?
        /// The name of the backend environment.
        /// This member is required.
        public var backendEnvironmentName: Swift.String?
        /// The time when the job was created.
        public var createTime: Swift.String?
        /// If the request fails, this error is returned.
        public var error: Swift.String?
        /// The ID for the job.
        public var jobId: Swift.String?
        /// The name of the operation.
        public var operation: Swift.String?
        /// The current status of the request.
        public var status: Swift.String?
        /// The time when the job was last updated.
        public var updateTime: Swift.String?

        public init(
            appId: Swift.String? = nil,
            backendEnvironmentName: Swift.String? = nil,
            createTime: Swift.String? = nil,
            error: Swift.String? = nil,
            jobId: Swift.String? = nil,
            operation: Swift.String? = nil,
            status: Swift.String? = nil,
            updateTime: Swift.String? = nil
        )
        {
            self.appId = appId
            self.backendEnvironmentName = backendEnvironmentName
            self.createTime = createTime
            self.error = error
            self.jobId = jobId
            self.operation = operation
            self.status = status
            self.updateTime = updateTime
        }
    }

}

public struct ListBackendJobsOutput {
    /// An array of jobs and their properties.
    public var jobs: [AmplifyBackendClientTypes.BackendJobRespObj]?
    /// The token for the next set of results.
    public var nextToken: Swift.String?

    public init(
        jobs: [AmplifyBackendClientTypes.BackendJobRespObj]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.jobs = jobs
        self.nextToken = nextToken
    }
}

/// The request body for S3Buckets.
public struct ListS3BucketsInput {
    /// Reserved for future use.
    public var nextToken: Swift.String?

    public init(
        nextToken: Swift.String? = nil
    )
    {
        self.nextToken = nextToken
    }
}

extension AmplifyBackendClientTypes {
    /// Describes the metadata of the S3 bucket.
    public struct S3BucketInfo {
        /// The creation date of the S3 bucket.
        public var creationDate: Swift.String?
        /// The name of the S3 bucket.
        public var name: Swift.String?

        public init(
            creationDate: Swift.String? = nil,
            name: Swift.String? = nil
        )
        {
            self.creationDate = creationDate
            self.name = name
        }
    }

}

public struct ListS3BucketsOutput {
    /// The list of S3 buckets.
    public var buckets: [AmplifyBackendClientTypes.S3BucketInfo]?
    /// Reserved for future use.
    public var nextToken: Swift.String?

    public init(
        buckets: [AmplifyBackendClientTypes.S3BucketInfo]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.buckets = buckets
        self.nextToken = nextToken
    }
}

/// The request body for RemoveAllBackends.
public struct RemoveAllBackendsInput {
    /// The app ID.
    /// This member is required.
    public var appId: Swift.String?
    /// Cleans up the Amplify Console app if this value is set to true.
    public var cleanAmplifyApp: Swift.Bool?

    public init(
        appId: Swift.String? = nil,
        cleanAmplifyApp: Swift.Bool? = nil
    )
    {
        self.appId = appId
        self.cleanAmplifyApp = cleanAmplifyApp
    }
}

public struct RemoveAllBackendsOutput {
    /// The app ID.
    public var appId: Swift.String?
    /// If the request fails, this error is returned.
    public var error: Swift.String?
    /// The ID for the job.
    public var jobId: Swift.String?
    /// The name of the operation.
    public var operation: Swift.String?
    /// The current status of the request.
    public var status: Swift.String?

    public init(
        appId: Swift.String? = nil,
        error: Swift.String? = nil,
        jobId: Swift.String? = nil,
        operation: Swift.String? = nil,
        status: Swift.String? = nil
    )
    {
        self.appId = appId
        self.error = error
        self.jobId = jobId
        self.operation = operation
        self.status = status
    }
}

public struct RemoveBackendConfigInput {
    /// The app ID.
    /// This member is required.
    public var appId: Swift.String?

    public init(
        appId: Swift.String? = nil
    )
    {
        self.appId = appId
    }
}

public struct RemoveBackendConfigOutput {
    /// If the request fails, this error is returned.
    public var error: Swift.String?

    public init(
        error: Swift.String? = nil
    )
    {
        self.error = error
    }
}

/// The request body for UpdateBackendAPI.
public struct UpdateBackendAPIInput {
    /// The app ID.
    /// This member is required.
    public var appId: Swift.String?
    /// The name of the backend environment.
    /// This member is required.
    public var backendEnvironmentName: Swift.String?
    /// Defines the resource configuration for the data model in your Amplify project.
    public var resourceConfig: AmplifyBackendClientTypes.BackendAPIResourceConfig?
    /// The name of this resource.
    /// This member is required.
    public var resourceName: Swift.String?

    public init(
        appId: Swift.String? = nil,
        backendEnvironmentName: Swift.String? = nil,
        resourceConfig: AmplifyBackendClientTypes.BackendAPIResourceConfig? = nil,
        resourceName: Swift.String? = nil
    )
    {
        self.appId = appId
        self.backendEnvironmentName = backendEnvironmentName
        self.resourceConfig = resourceConfig
        self.resourceName = resourceName
    }
}

public struct UpdateBackendAPIOutput {
    /// The app ID.
    public var appId: Swift.String?
    /// The name of the backend environment.
    public var backendEnvironmentName: Swift.String?
    /// If the request fails, this error is returned.
    public var error: Swift.String?
    /// The ID for the job.
    public var jobId: Swift.String?
    /// The name of the operation.
    public var operation: Swift.String?
    /// The current status of the request.
    public var status: Swift.String?

    public init(
        appId: Swift.String? = nil,
        backendEnvironmentName: Swift.String? = nil,
        error: Swift.String? = nil,
        jobId: Swift.String? = nil,
        operation: Swift.String? = nil,
        status: Swift.String? = nil
    )
    {
        self.appId = appId
        self.backendEnvironmentName = backendEnvironmentName
        self.error = error
        self.jobId = jobId
        self.operation = operation
        self.status = status
    }
}

extension AmplifyBackendClientTypes {
    /// Describes the authorization configuration for the Amazon Cognito identity pool, provisioned as a part of your auth resource in the Amplify project.
    public struct UpdateBackendAuthIdentityPoolConfig {
        /// A boolean value that can be set to allow or disallow guest-level authorization into your Amplify app.
        public var unauthenticatedLogin: Swift.Bool?

        public init(
            unauthenticatedLogin: Swift.Bool? = nil
        )
        {
            self.unauthenticatedLogin = unauthenticatedLogin
        }
    }

}

extension AmplifyBackendClientTypes {
    /// (DEPRECATED) Describes the forgot password policy for authenticating into the Amplify app.
    public struct UpdateBackendAuthForgotPasswordConfig {
        /// (DEPRECATED) Describes which mode to use (either SMS or email) to deliver messages to app users that want to recover their password.
        public var deliveryMethod: AmplifyBackendClientTypes.DeliveryMethod?
        /// (DEPRECATED) The configuration for the email sent when an app user forgets their password.
        public var emailSettings: AmplifyBackendClientTypes.EmailSettings?
        /// (DEPRECATED) The configuration for the SMS message sent when an Amplify app user forgets their password.
        public var smsSettings: AmplifyBackendClientTypes.SmsSettings?

        public init(
            deliveryMethod: AmplifyBackendClientTypes.DeliveryMethod? = nil,
            emailSettings: AmplifyBackendClientTypes.EmailSettings? = nil,
            smsSettings: AmplifyBackendClientTypes.SmsSettings? = nil
        )
        {
            self.deliveryMethod = deliveryMethod
            self.emailSettings = emailSettings
            self.smsSettings = smsSettings
        }
    }

}

extension AmplifyBackendClientTypes.UpdateBackendAuthForgotPasswordConfig: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UpdateBackendAuthForgotPasswordConfig(deliveryMethod: \(Swift.String(describing: deliveryMethod)), emailSettings: \"CONTENT_REDACTED\", smsSettings: \"CONTENT_REDACTED\")"}
}

extension AmplifyBackendClientTypes {
    /// Updates the multi-factor authentication (MFA) configuration for the backend of your Amplify project.
    public struct UpdateBackendAuthMFAConfig {
        /// The MFA mode for the backend of your Amplify project.
        public var mfaMode: AmplifyBackendClientTypes.MFAMode?
        /// The settings of your MFA configuration for the backend of your Amplify project.
        public var settings: AmplifyBackendClientTypes.Settings?

        public init(
            mfaMode: AmplifyBackendClientTypes.MFAMode? = nil,
            settings: AmplifyBackendClientTypes.Settings? = nil
        )
        {
            self.mfaMode = mfaMode
            self.settings = settings
        }
    }

}

extension AmplifyBackendClientTypes {
    /// The OAuth configurations for authenticating users into your Amplify app.
    public struct UpdateBackendAuthOAuthConfig {
        /// The Amazon Cognito domain prefix used to create a hosted UI for authentication.
        public var domainPrefix: Swift.String?
        /// The OAuth grant type to allow app users to authenticate from your Amplify app.
        public var oAuthGrantType: AmplifyBackendClientTypes.OAuthGrantType?
        /// The list of OAuth-related flows that can allow users to authenticate from your Amplify app.
        public var oAuthScopes: [AmplifyBackendClientTypes.OAuthScopesElement]?
        /// Redirect URLs that OAuth uses when a user signs in to an Amplify app.
        public var redirectSignInURIs: [Swift.String]?
        /// Redirect URLs that OAuth uses when a user signs out of an Amplify app.
        public var redirectSignOutURIs: [Swift.String]?
        /// Describes third-party social federation configurations for allowing your users to sign in with OAuth.
        public var socialProviderSettings: AmplifyBackendClientTypes.SocialProviderSettings?

        public init(
            domainPrefix: Swift.String? = nil,
            oAuthGrantType: AmplifyBackendClientTypes.OAuthGrantType? = nil,
            oAuthScopes: [AmplifyBackendClientTypes.OAuthScopesElement]? = nil,
            redirectSignInURIs: [Swift.String]? = nil,
            redirectSignOutURIs: [Swift.String]? = nil,
            socialProviderSettings: AmplifyBackendClientTypes.SocialProviderSettings? = nil
        )
        {
            self.domainPrefix = domainPrefix
            self.oAuthGrantType = oAuthGrantType
            self.oAuthScopes = oAuthScopes
            self.redirectSignInURIs = redirectSignInURIs
            self.redirectSignOutURIs = redirectSignOutURIs
            self.socialProviderSettings = socialProviderSettings
        }
    }

}

extension AmplifyBackendClientTypes {
    /// Describes the password policy for your Amazon Cognito user pool configured as a part of your Amplify project.
    public struct UpdateBackendAuthPasswordPolicyConfig {
        /// Describes additional constraints on password requirements to sign in to the auth resource, configured as a part of your Amplify project.
        public var additionalConstraints: [AmplifyBackendClientTypes.AdditionalConstraintsElement]?
        /// Describes the minimum length of the password required to sign in to the auth resource, configured as a part of your Amplify project.
        public var minimumLength: Swift.Double?

        public init(
            additionalConstraints: [AmplifyBackendClientTypes.AdditionalConstraintsElement]? = nil,
            minimumLength: Swift.Double? = nil
        )
        {
            self.additionalConstraints = additionalConstraints
            self.minimumLength = minimumLength
        }
    }

}

extension AmplifyBackendClientTypes {
    /// Updates the configuration of the email or SMS message for the auth resource configured for your Amplify project.
    public struct UpdateBackendAuthVerificationMessageConfig {
        /// The type of verification message to send.
        /// This member is required.
        public var deliveryMethod: AmplifyBackendClientTypes.DeliveryMethod?
        /// The settings for the email message.
        public var emailSettings: AmplifyBackendClientTypes.EmailSettings?
        /// The settings for the SMS message.
        public var smsSettings: AmplifyBackendClientTypes.SmsSettings?

        public init(
            deliveryMethod: AmplifyBackendClientTypes.DeliveryMethod? = nil,
            emailSettings: AmplifyBackendClientTypes.EmailSettings? = nil,
            smsSettings: AmplifyBackendClientTypes.SmsSettings? = nil
        )
        {
            self.deliveryMethod = deliveryMethod
            self.emailSettings = emailSettings
            self.smsSettings = smsSettings
        }
    }

}

extension AmplifyBackendClientTypes.UpdateBackendAuthVerificationMessageConfig: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UpdateBackendAuthVerificationMessageConfig(deliveryMethod: \(Swift.String(describing: deliveryMethod)), emailSettings: \"CONTENT_REDACTED\", smsSettings: \"CONTENT_REDACTED\")"}
}

extension AmplifyBackendClientTypes {
    /// Describes the Amazon Cognito user pool configuration for the authorization resource to be configured for your Amplify project on an update.
    public struct UpdateBackendAuthUserPoolConfig {
        /// (DEPRECATED) Describes the forgot password policy for your Amazon Cognito user pool, configured as a part of your Amplify project.
        public var forgotPassword: AmplifyBackendClientTypes.UpdateBackendAuthForgotPasswordConfig?
        /// Describes whether to apply multi-factor authentication policies for your Amazon Cognito user pool configured as a part of your Amplify project.
        public var mfa: AmplifyBackendClientTypes.UpdateBackendAuthMFAConfig?
        /// Describes the OAuth policy and rules for your Amazon Cognito user pool, configured as a part of your Amplify project.
        public var oAuth: AmplifyBackendClientTypes.UpdateBackendAuthOAuthConfig?
        /// Describes the password policy for your Amazon Cognito user pool, configured as a part of your Amplify project.
        public var passwordPolicy: AmplifyBackendClientTypes.UpdateBackendAuthPasswordPolicyConfig?
        /// Describes the email or SMS verification message for your Amazon Cognito user pool, configured as a part of your Amplify project.
        public var verificationMessage: AmplifyBackendClientTypes.UpdateBackendAuthVerificationMessageConfig?

        public init(
            forgotPassword: AmplifyBackendClientTypes.UpdateBackendAuthForgotPasswordConfig? = nil,
            mfa: AmplifyBackendClientTypes.UpdateBackendAuthMFAConfig? = nil,
            oAuth: AmplifyBackendClientTypes.UpdateBackendAuthOAuthConfig? = nil,
            passwordPolicy: AmplifyBackendClientTypes.UpdateBackendAuthPasswordPolicyConfig? = nil,
            verificationMessage: AmplifyBackendClientTypes.UpdateBackendAuthVerificationMessageConfig? = nil
        )
        {
            self.forgotPassword = forgotPassword
            self.mfa = mfa
            self.oAuth = oAuth
            self.passwordPolicy = passwordPolicy
            self.verificationMessage = verificationMessage
        }
    }

}

extension AmplifyBackendClientTypes {
    /// Defines the resource configuration when updating an authentication resource in your Amplify project.
    public struct UpdateBackendAuthResourceConfig {
        /// Defines the service name to use when configuring an authentication resource in your Amplify project.
        /// This member is required.
        public var authResources: AmplifyBackendClientTypes.AuthResources?
        /// Describes the authorization configuration for the Amazon Cognito identity pool, provisioned as a part of your auth resource in the Amplify project.
        public var identityPoolConfigs: AmplifyBackendClientTypes.UpdateBackendAuthIdentityPoolConfig?
        /// Defines the service name to use when configuring an authentication resource in your Amplify project.
        /// This member is required.
        public var service: AmplifyBackendClientTypes.Service?
        /// Describes the authentication configuration for the Amazon Cognito user pool, provisioned as a part of your auth resource in the Amplify project.
        /// This member is required.
        public var userPoolConfigs: AmplifyBackendClientTypes.UpdateBackendAuthUserPoolConfig?

        public init(
            authResources: AmplifyBackendClientTypes.AuthResources? = nil,
            identityPoolConfigs: AmplifyBackendClientTypes.UpdateBackendAuthIdentityPoolConfig? = nil,
            service: AmplifyBackendClientTypes.Service? = nil,
            userPoolConfigs: AmplifyBackendClientTypes.UpdateBackendAuthUserPoolConfig? = nil
        )
        {
            self.authResources = authResources
            self.identityPoolConfigs = identityPoolConfigs
            self.service = service
            self.userPoolConfigs = userPoolConfigs
        }
    }

}

/// The request body for UpdateBackendAuth.
public struct UpdateBackendAuthInput {
    /// The app ID.
    /// This member is required.
    public var appId: Swift.String?
    /// The name of the backend environment.
    /// This member is required.
    public var backendEnvironmentName: Swift.String?
    /// The resource configuration for this request object.
    /// This member is required.
    public var resourceConfig: AmplifyBackendClientTypes.UpdateBackendAuthResourceConfig?
    /// The name of this resource.
    /// This member is required.
    public var resourceName: Swift.String?

    public init(
        appId: Swift.String? = nil,
        backendEnvironmentName: Swift.String? = nil,
        resourceConfig: AmplifyBackendClientTypes.UpdateBackendAuthResourceConfig? = nil,
        resourceName: Swift.String? = nil
    )
    {
        self.appId = appId
        self.backendEnvironmentName = backendEnvironmentName
        self.resourceConfig = resourceConfig
        self.resourceName = resourceName
    }
}

public struct UpdateBackendAuthOutput {
    /// The app ID.
    public var appId: Swift.String?
    /// The name of the backend environment.
    public var backendEnvironmentName: Swift.String?
    /// If the request fails, this error is returned.
    public var error: Swift.String?
    /// The ID for the job.
    public var jobId: Swift.String?
    /// The name of the operation.
    public var operation: Swift.String?
    /// The current status of the request.
    public var status: Swift.String?

    public init(
        appId: Swift.String? = nil,
        backendEnvironmentName: Swift.String? = nil,
        error: Swift.String? = nil,
        jobId: Swift.String? = nil,
        operation: Swift.String? = nil,
        status: Swift.String? = nil
    )
    {
        self.appId = appId
        self.backendEnvironmentName = backendEnvironmentName
        self.error = error
        self.jobId = jobId
        self.operation = operation
        self.status = status
    }
}

extension AmplifyBackendClientTypes {
    /// The request object for this operation.
    public struct LoginAuthConfigReqObj {
        /// The Amazon Cognito identity pool ID used for the Amplify Admin UI login authorization.
        public var awsCognitoIdentityPoolId: Swift.String?
        /// The AWS Region for the Amplify Admin UI login.
        public var awsCognitoRegion: Swift.String?
        /// The Amazon Cognito user pool ID used for Amplify Admin UI login authentication.
        public var awsUserPoolsId: Swift.String?
        /// The web client ID for the Amazon Cognito user pools.
        public var awsUserPoolsWebClientId: Swift.String?

        public init(
            awsCognitoIdentityPoolId: Swift.String? = nil,
            awsCognitoRegion: Swift.String? = nil,
            awsUserPoolsId: Swift.String? = nil,
            awsUserPoolsWebClientId: Swift.String? = nil
        )
        {
            self.awsCognitoIdentityPoolId = awsCognitoIdentityPoolId
            self.awsCognitoRegion = awsCognitoRegion
            self.awsUserPoolsId = awsUserPoolsId
            self.awsUserPoolsWebClientId = awsUserPoolsWebClientId
        }
    }

}

/// The request body for UpdateBackendConfig.
public struct UpdateBackendConfigInput {
    /// The app ID.
    /// This member is required.
    public var appId: Swift.String?
    /// Describes the Amazon Cognito configuration for Admin UI access.
    public var loginAuthConfig: AmplifyBackendClientTypes.LoginAuthConfigReqObj?

    public init(
        appId: Swift.String? = nil,
        loginAuthConfig: AmplifyBackendClientTypes.LoginAuthConfigReqObj? = nil
    )
    {
        self.appId = appId
        self.loginAuthConfig = loginAuthConfig
    }
}

public struct UpdateBackendConfigOutput {
    /// The app ID.
    public var appId: Swift.String?
    /// The app ID for the backend manager.
    public var backendManagerAppId: Swift.String?
    /// If the request fails, this error is returned.
    public var error: Swift.String?
    /// Describes the Amazon Cognito configurations for the Admin UI auth resource to log in with.
    public var loginAuthConfig: AmplifyBackendClientTypes.LoginAuthConfigReqObj?

    public init(
        appId: Swift.String? = nil,
        backendManagerAppId: Swift.String? = nil,
        error: Swift.String? = nil,
        loginAuthConfig: AmplifyBackendClientTypes.LoginAuthConfigReqObj? = nil
    )
    {
        self.appId = appId
        self.backendManagerAppId = backendManagerAppId
        self.error = error
        self.loginAuthConfig = loginAuthConfig
    }
}

/// The request body for GetBackendJob.
public struct UpdateBackendJobInput {
    /// The app ID.
    /// This member is required.
    public var appId: Swift.String?
    /// The name of the backend environment.
    /// This member is required.
    public var backendEnvironmentName: Swift.String?
    /// The ID for the job.
    /// This member is required.
    public var jobId: Swift.String?
    /// Filters the list of response objects to include only those with the specified operation name.
    public var operation: Swift.String?
    /// Filters the list of response objects to include only those with the specified status.
    public var status: Swift.String?

    public init(
        appId: Swift.String? = nil,
        backendEnvironmentName: Swift.String? = nil,
        jobId: Swift.String? = nil,
        operation: Swift.String? = nil,
        status: Swift.String? = nil
    )
    {
        self.appId = appId
        self.backendEnvironmentName = backendEnvironmentName
        self.jobId = jobId
        self.operation = operation
        self.status = status
    }
}

public struct UpdateBackendJobOutput {
    /// The app ID.
    public var appId: Swift.String?
    /// The name of the backend environment.
    public var backendEnvironmentName: Swift.String?
    /// The time when the job was created.
    public var createTime: Swift.String?
    /// If the request fails, this error is returned.
    public var error: Swift.String?
    /// The ID for the job.
    public var jobId: Swift.String?
    /// The name of the operation.
    public var operation: Swift.String?
    /// The current status of the request.
    public var status: Swift.String?
    /// The time when the job was last updated.
    public var updateTime: Swift.String?

    public init(
        appId: Swift.String? = nil,
        backendEnvironmentName: Swift.String? = nil,
        createTime: Swift.String? = nil,
        error: Swift.String? = nil,
        jobId: Swift.String? = nil,
        operation: Swift.String? = nil,
        status: Swift.String? = nil,
        updateTime: Swift.String? = nil
    )
    {
        self.appId = appId
        self.backendEnvironmentName = backendEnvironmentName
        self.createTime = createTime
        self.error = error
        self.jobId = jobId
        self.operation = operation
        self.status = status
        self.updateTime = updateTime
    }
}

extension AmplifyBackendClientTypes {
    /// The resource configuration for updating backend storage.
    public struct UpdateBackendStorageResourceConfig {
        /// The authorization configuration for the storage S3 bucket.
        /// This member is required.
        public var permissions: AmplifyBackendClientTypes.BackendStoragePermissions?
        /// The name of the storage service.
        /// This member is required.
        public var serviceName: AmplifyBackendClientTypes.ServiceName?

        public init(
            permissions: AmplifyBackendClientTypes.BackendStoragePermissions? = nil,
            serviceName: AmplifyBackendClientTypes.ServiceName? = nil
        )
        {
            self.permissions = permissions
            self.serviceName = serviceName
        }
    }

}

/// The request body for UpdateBackendStorage.
public struct UpdateBackendStorageInput {
    /// The app ID.
    /// This member is required.
    public var appId: Swift.String?
    /// The name of the backend environment.
    /// This member is required.
    public var backendEnvironmentName: Swift.String?
    /// The resource configuration for updating backend storage.
    /// This member is required.
    public var resourceConfig: AmplifyBackendClientTypes.UpdateBackendStorageResourceConfig?
    /// The name of the storage resource.
    /// This member is required.
    public var resourceName: Swift.String?

    public init(
        appId: Swift.String? = nil,
        backendEnvironmentName: Swift.String? = nil,
        resourceConfig: AmplifyBackendClientTypes.UpdateBackendStorageResourceConfig? = nil,
        resourceName: Swift.String? = nil
    )
    {
        self.appId = appId
        self.backendEnvironmentName = backendEnvironmentName
        self.resourceConfig = resourceConfig
        self.resourceName = resourceName
    }
}

public struct UpdateBackendStorageOutput {
    /// The app ID.
    public var appId: Swift.String?
    /// The name of the backend environment.
    public var backendEnvironmentName: Swift.String?
    /// The ID for the job.
    public var jobId: Swift.String?
    /// The current status of the request.
    public var status: Swift.String?

    public init(
        appId: Swift.String? = nil,
        backendEnvironmentName: Swift.String? = nil,
        jobId: Swift.String? = nil,
        status: Swift.String? = nil
    )
    {
        self.appId = appId
        self.backendEnvironmentName = backendEnvironmentName
        self.jobId = jobId
        self.status = status
    }
}

extension CloneBackendInput {

    static func urlPathProvider(_ value: CloneBackendInput) -> Swift.String? {
        guard let appId = value.appId else {
            return nil
        }
        guard let backendEnvironmentName = value.backendEnvironmentName else {
            return nil
        }
        return "/backend/\(appId.urlPercentEncoding())/environments/\(backendEnvironmentName.urlPercentEncoding())/clone"
    }
}

extension CreateBackendInput {

    static func urlPathProvider(_ value: CreateBackendInput) -> Swift.String? {
        return "/backend"
    }
}

extension CreateBackendAPIInput {

    static func urlPathProvider(_ value: CreateBackendAPIInput) -> Swift.String? {
        guard let appId = value.appId else {
            return nil
        }
        return "/backend/\(appId.urlPercentEncoding())/api"
    }
}

extension CreateBackendAuthInput {

    static func urlPathProvider(_ value: CreateBackendAuthInput) -> Swift.String? {
        guard let appId = value.appId else {
            return nil
        }
        return "/backend/\(appId.urlPercentEncoding())/auth"
    }
}

extension CreateBackendConfigInput {

    static func urlPathProvider(_ value: CreateBackendConfigInput) -> Swift.String? {
        guard let appId = value.appId else {
            return nil
        }
        return "/backend/\(appId.urlPercentEncoding())/config"
    }
}

extension CreateBackendStorageInput {

    static func urlPathProvider(_ value: CreateBackendStorageInput) -> Swift.String? {
        guard let appId = value.appId else {
            return nil
        }
        return "/backend/\(appId.urlPercentEncoding())/storage"
    }
}

extension CreateTokenInput {

    static func urlPathProvider(_ value: CreateTokenInput) -> Swift.String? {
        guard let appId = value.appId else {
            return nil
        }
        return "/backend/\(appId.urlPercentEncoding())/challenge"
    }
}

extension DeleteBackendInput {

    static func urlPathProvider(_ value: DeleteBackendInput) -> Swift.String? {
        guard let appId = value.appId else {
            return nil
        }
        guard let backendEnvironmentName = value.backendEnvironmentName else {
            return nil
        }
        return "/backend/\(appId.urlPercentEncoding())/environments/\(backendEnvironmentName.urlPercentEncoding())/remove"
    }
}

extension DeleteBackendAPIInput {

    static func urlPathProvider(_ value: DeleteBackendAPIInput) -> Swift.String? {
        guard let appId = value.appId else {
            return nil
        }
        guard let backendEnvironmentName = value.backendEnvironmentName else {
            return nil
        }
        return "/backend/\(appId.urlPercentEncoding())/api/\(backendEnvironmentName.urlPercentEncoding())/remove"
    }
}

extension DeleteBackendAuthInput {

    static func urlPathProvider(_ value: DeleteBackendAuthInput) -> Swift.String? {
        guard let appId = value.appId else {
            return nil
        }
        guard let backendEnvironmentName = value.backendEnvironmentName else {
            return nil
        }
        return "/backend/\(appId.urlPercentEncoding())/auth/\(backendEnvironmentName.urlPercentEncoding())/remove"
    }
}

extension DeleteBackendStorageInput {

    static func urlPathProvider(_ value: DeleteBackendStorageInput) -> Swift.String? {
        guard let appId = value.appId else {
            return nil
        }
        guard let backendEnvironmentName = value.backendEnvironmentName else {
            return nil
        }
        return "/backend/\(appId.urlPercentEncoding())/storage/\(backendEnvironmentName.urlPercentEncoding())/remove"
    }
}

extension DeleteTokenInput {

    static func urlPathProvider(_ value: DeleteTokenInput) -> Swift.String? {
        guard let appId = value.appId else {
            return nil
        }
        guard let sessionId = value.sessionId else {
            return nil
        }
        return "/backend/\(appId.urlPercentEncoding())/challenge/\(sessionId.urlPercentEncoding())/remove"
    }
}

extension GenerateBackendAPIModelsInput {

    static func urlPathProvider(_ value: GenerateBackendAPIModelsInput) -> Swift.String? {
        guard let appId = value.appId else {
            return nil
        }
        guard let backendEnvironmentName = value.backendEnvironmentName else {
            return nil
        }
        return "/backend/\(appId.urlPercentEncoding())/api/\(backendEnvironmentName.urlPercentEncoding())/generateModels"
    }
}

extension GetBackendInput {

    static func urlPathProvider(_ value: GetBackendInput) -> Swift.String? {
        guard let appId = value.appId else {
            return nil
        }
        return "/backend/\(appId.urlPercentEncoding())/details"
    }
}

extension GetBackendAPIInput {

    static func urlPathProvider(_ value: GetBackendAPIInput) -> Swift.String? {
        guard let appId = value.appId else {
            return nil
        }
        guard let backendEnvironmentName = value.backendEnvironmentName else {
            return nil
        }
        return "/backend/\(appId.urlPercentEncoding())/api/\(backendEnvironmentName.urlPercentEncoding())/details"
    }
}

extension GetBackendAPIModelsInput {

    static func urlPathProvider(_ value: GetBackendAPIModelsInput) -> Swift.String? {
        guard let appId = value.appId else {
            return nil
        }
        guard let backendEnvironmentName = value.backendEnvironmentName else {
            return nil
        }
        return "/backend/\(appId.urlPercentEncoding())/api/\(backendEnvironmentName.urlPercentEncoding())/getModels"
    }
}

extension GetBackendAuthInput {

    static func urlPathProvider(_ value: GetBackendAuthInput) -> Swift.String? {
        guard let appId = value.appId else {
            return nil
        }
        guard let backendEnvironmentName = value.backendEnvironmentName else {
            return nil
        }
        return "/backend/\(appId.urlPercentEncoding())/auth/\(backendEnvironmentName.urlPercentEncoding())/details"
    }
}

extension GetBackendJobInput {

    static func urlPathProvider(_ value: GetBackendJobInput) -> Swift.String? {
        guard let appId = value.appId else {
            return nil
        }
        guard let backendEnvironmentName = value.backendEnvironmentName else {
            return nil
        }
        guard let jobId = value.jobId else {
            return nil
        }
        return "/backend/\(appId.urlPercentEncoding())/job/\(backendEnvironmentName.urlPercentEncoding())/\(jobId.urlPercentEncoding())"
    }
}

extension GetBackendStorageInput {

    static func urlPathProvider(_ value: GetBackendStorageInput) -> Swift.String? {
        guard let appId = value.appId else {
            return nil
        }
        guard let backendEnvironmentName = value.backendEnvironmentName else {
            return nil
        }
        return "/backend/\(appId.urlPercentEncoding())/storage/\(backendEnvironmentName.urlPercentEncoding())/details"
    }
}

extension GetTokenInput {

    static func urlPathProvider(_ value: GetTokenInput) -> Swift.String? {
        guard let appId = value.appId else {
            return nil
        }
        guard let sessionId = value.sessionId else {
            return nil
        }
        return "/backend/\(appId.urlPercentEncoding())/challenge/\(sessionId.urlPercentEncoding())"
    }
}

extension ImportBackendAuthInput {

    static func urlPathProvider(_ value: ImportBackendAuthInput) -> Swift.String? {
        guard let appId = value.appId else {
            return nil
        }
        guard let backendEnvironmentName = value.backendEnvironmentName else {
            return nil
        }
        return "/backend/\(appId.urlPercentEncoding())/auth/\(backendEnvironmentName.urlPercentEncoding())/import"
    }
}

extension ImportBackendStorageInput {

    static func urlPathProvider(_ value: ImportBackendStorageInput) -> Swift.String? {
        guard let appId = value.appId else {
            return nil
        }
        guard let backendEnvironmentName = value.backendEnvironmentName else {
            return nil
        }
        return "/backend/\(appId.urlPercentEncoding())/storage/\(backendEnvironmentName.urlPercentEncoding())/import"
    }
}

extension ListBackendJobsInput {

    static func urlPathProvider(_ value: ListBackendJobsInput) -> Swift.String? {
        guard let appId = value.appId else {
            return nil
        }
        guard let backendEnvironmentName = value.backendEnvironmentName else {
            return nil
        }
        return "/backend/\(appId.urlPercentEncoding())/job/\(backendEnvironmentName.urlPercentEncoding())"
    }
}

extension ListS3BucketsInput {

    static func urlPathProvider(_ value: ListS3BucketsInput) -> Swift.String? {
        return "/s3Buckets"
    }
}

extension RemoveAllBackendsInput {

    static func urlPathProvider(_ value: RemoveAllBackendsInput) -> Swift.String? {
        guard let appId = value.appId else {
            return nil
        }
        return "/backend/\(appId.urlPercentEncoding())/remove"
    }
}

extension RemoveBackendConfigInput {

    static func urlPathProvider(_ value: RemoveBackendConfigInput) -> Swift.String? {
        guard let appId = value.appId else {
            return nil
        }
        return "/backend/\(appId.urlPercentEncoding())/config/remove"
    }
}

extension UpdateBackendAPIInput {

    static func urlPathProvider(_ value: UpdateBackendAPIInput) -> Swift.String? {
        guard let appId = value.appId else {
            return nil
        }
        guard let backendEnvironmentName = value.backendEnvironmentName else {
            return nil
        }
        return "/backend/\(appId.urlPercentEncoding())/api/\(backendEnvironmentName.urlPercentEncoding())"
    }
}

extension UpdateBackendAuthInput {

    static func urlPathProvider(_ value: UpdateBackendAuthInput) -> Swift.String? {
        guard let appId = value.appId else {
            return nil
        }
        guard let backendEnvironmentName = value.backendEnvironmentName else {
            return nil
        }
        return "/backend/\(appId.urlPercentEncoding())/auth/\(backendEnvironmentName.urlPercentEncoding())"
    }
}

extension UpdateBackendConfigInput {

    static func urlPathProvider(_ value: UpdateBackendConfigInput) -> Swift.String? {
        guard let appId = value.appId else {
            return nil
        }
        return "/backend/\(appId.urlPercentEncoding())/config/update"
    }
}

extension UpdateBackendJobInput {

    static func urlPathProvider(_ value: UpdateBackendJobInput) -> Swift.String? {
        guard let appId = value.appId else {
            return nil
        }
        guard let backendEnvironmentName = value.backendEnvironmentName else {
            return nil
        }
        guard let jobId = value.jobId else {
            return nil
        }
        return "/backend/\(appId.urlPercentEncoding())/job/\(backendEnvironmentName.urlPercentEncoding())/\(jobId.urlPercentEncoding())"
    }
}

extension UpdateBackendStorageInput {

    static func urlPathProvider(_ value: UpdateBackendStorageInput) -> Swift.String? {
        guard let appId = value.appId else {
            return nil
        }
        guard let backendEnvironmentName = value.backendEnvironmentName else {
            return nil
        }
        return "/backend/\(appId.urlPercentEncoding())/storage/\(backendEnvironmentName.urlPercentEncoding())"
    }
}

extension CloneBackendInput {

    static func write(value: CloneBackendInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["targetEnvironmentName"].write(value.targetEnvironmentName)
    }
}

extension CreateBackendInput {

    static func write(value: CreateBackendInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["appId"].write(value.appId)
        try writer["appName"].write(value.appName)
        try writer["backendEnvironmentName"].write(value.backendEnvironmentName)
        try writer["resourceConfig"].write(value.resourceConfig, with: AmplifyBackendClientTypes.ResourceConfig.write(value:to:))
        try writer["resourceName"].write(value.resourceName)
    }
}

extension CreateBackendAPIInput {

    static func write(value: CreateBackendAPIInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["backendEnvironmentName"].write(value.backendEnvironmentName)
        try writer["resourceConfig"].write(value.resourceConfig, with: AmplifyBackendClientTypes.BackendAPIResourceConfig.write(value:to:))
        try writer["resourceName"].write(value.resourceName)
    }
}

extension CreateBackendAuthInput {

    static func write(value: CreateBackendAuthInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["backendEnvironmentName"].write(value.backendEnvironmentName)
        try writer["resourceConfig"].write(value.resourceConfig, with: AmplifyBackendClientTypes.CreateBackendAuthResourceConfig.write(value:to:))
        try writer["resourceName"].write(value.resourceName)
    }
}

extension CreateBackendConfigInput {

    static func write(value: CreateBackendConfigInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["backendManagerAppId"].write(value.backendManagerAppId)
    }
}

extension CreateBackendStorageInput {

    static func write(value: CreateBackendStorageInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["backendEnvironmentName"].write(value.backendEnvironmentName)
        try writer["resourceConfig"].write(value.resourceConfig, with: AmplifyBackendClientTypes.CreateBackendStorageResourceConfig.write(value:to:))
        try writer["resourceName"].write(value.resourceName)
    }
}

extension DeleteBackendAPIInput {

    static func write(value: DeleteBackendAPIInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["resourceConfig"].write(value.resourceConfig, with: AmplifyBackendClientTypes.BackendAPIResourceConfig.write(value:to:))
        try writer["resourceName"].write(value.resourceName)
    }
}

extension DeleteBackendAuthInput {

    static func write(value: DeleteBackendAuthInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["resourceName"].write(value.resourceName)
    }
}

extension DeleteBackendStorageInput {

    static func write(value: DeleteBackendStorageInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["resourceName"].write(value.resourceName)
        try writer["serviceName"].write(value.serviceName)
    }
}

extension GenerateBackendAPIModelsInput {

    static func write(value: GenerateBackendAPIModelsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["resourceName"].write(value.resourceName)
    }
}

extension GetBackendInput {

    static func write(value: GetBackendInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["backendEnvironmentName"].write(value.backendEnvironmentName)
    }
}

extension GetBackendAPIInput {

    static func write(value: GetBackendAPIInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["resourceConfig"].write(value.resourceConfig, with: AmplifyBackendClientTypes.BackendAPIResourceConfig.write(value:to:))
        try writer["resourceName"].write(value.resourceName)
    }
}

extension GetBackendAPIModelsInput {

    static func write(value: GetBackendAPIModelsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["resourceName"].write(value.resourceName)
    }
}

extension GetBackendAuthInput {

    static func write(value: GetBackendAuthInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["resourceName"].write(value.resourceName)
    }
}

extension GetBackendStorageInput {

    static func write(value: GetBackendStorageInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["resourceName"].write(value.resourceName)
    }
}

extension ImportBackendAuthInput {

    static func write(value: ImportBackendAuthInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["identityPoolId"].write(value.identityPoolId)
        try writer["nativeClientId"].write(value.nativeClientId)
        try writer["userPoolId"].write(value.userPoolId)
        try writer["webClientId"].write(value.webClientId)
    }
}

extension ImportBackendStorageInput {

    static func write(value: ImportBackendStorageInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["bucketName"].write(value.bucketName)
        try writer["serviceName"].write(value.serviceName)
    }
}

extension ListBackendJobsInput {

    static func write(value: ListBackendJobsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["jobId"].write(value.jobId)
        try writer["maxResults"].write(value.maxResults)
        try writer["nextToken"].write(value.nextToken)
        try writer["operation"].write(value.operation)
        try writer["status"].write(value.status)
    }
}

extension ListS3BucketsInput {

    static func write(value: ListS3BucketsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["nextToken"].write(value.nextToken)
    }
}

extension RemoveAllBackendsInput {

    static func write(value: RemoveAllBackendsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["cleanAmplifyApp"].write(value.cleanAmplifyApp)
    }
}

extension UpdateBackendAPIInput {

    static func write(value: UpdateBackendAPIInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["resourceConfig"].write(value.resourceConfig, with: AmplifyBackendClientTypes.BackendAPIResourceConfig.write(value:to:))
        try writer["resourceName"].write(value.resourceName)
    }
}

extension UpdateBackendAuthInput {

    static func write(value: UpdateBackendAuthInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["resourceConfig"].write(value.resourceConfig, with: AmplifyBackendClientTypes.UpdateBackendAuthResourceConfig.write(value:to:))
        try writer["resourceName"].write(value.resourceName)
    }
}

extension UpdateBackendConfigInput {

    static func write(value: UpdateBackendConfigInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["loginAuthConfig"].write(value.loginAuthConfig, with: AmplifyBackendClientTypes.LoginAuthConfigReqObj.write(value:to:))
    }
}

extension UpdateBackendJobInput {

    static func write(value: UpdateBackendJobInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["operation"].write(value.operation)
        try writer["status"].write(value.status)
    }
}

extension UpdateBackendStorageInput {

    static func write(value: UpdateBackendStorageInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["resourceConfig"].write(value.resourceConfig, with: AmplifyBackendClientTypes.UpdateBackendStorageResourceConfig.write(value:to:))
        try writer["resourceName"].write(value.resourceName)
    }
}

extension CloneBackendOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CloneBackendOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CloneBackendOutput()
        value.appId = try reader["appId"].readIfPresent()
        value.backendEnvironmentName = try reader["backendEnvironmentName"].readIfPresent()
        value.error = try reader["error"].readIfPresent()
        value.jobId = try reader["jobId"].readIfPresent()
        value.operation = try reader["operation"].readIfPresent()
        value.status = try reader["status"].readIfPresent()
        return value
    }
}

extension CreateBackendOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateBackendOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateBackendOutput()
        value.appId = try reader["appId"].readIfPresent()
        value.backendEnvironmentName = try reader["backendEnvironmentName"].readIfPresent()
        value.error = try reader["error"].readIfPresent()
        value.jobId = try reader["jobId"].readIfPresent()
        value.operation = try reader["operation"].readIfPresent()
        value.status = try reader["status"].readIfPresent()
        return value
    }
}

extension CreateBackendAPIOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateBackendAPIOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateBackendAPIOutput()
        value.appId = try reader["appId"].readIfPresent()
        value.backendEnvironmentName = try reader["backendEnvironmentName"].readIfPresent()
        value.error = try reader["error"].readIfPresent()
        value.jobId = try reader["jobId"].readIfPresent()
        value.operation = try reader["operation"].readIfPresent()
        value.status = try reader["status"].readIfPresent()
        return value
    }
}

extension CreateBackendAuthOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateBackendAuthOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateBackendAuthOutput()
        value.appId = try reader["appId"].readIfPresent()
        value.backendEnvironmentName = try reader["backendEnvironmentName"].readIfPresent()
        value.error = try reader["error"].readIfPresent()
        value.jobId = try reader["jobId"].readIfPresent()
        value.operation = try reader["operation"].readIfPresent()
        value.status = try reader["status"].readIfPresent()
        return value
    }
}

extension CreateBackendConfigOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateBackendConfigOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateBackendConfigOutput()
        value.appId = try reader["appId"].readIfPresent()
        value.backendEnvironmentName = try reader["backendEnvironmentName"].readIfPresent()
        value.jobId = try reader["jobId"].readIfPresent()
        value.status = try reader["status"].readIfPresent()
        return value
    }
}

extension CreateBackendStorageOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateBackendStorageOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateBackendStorageOutput()
        value.appId = try reader["appId"].readIfPresent()
        value.backendEnvironmentName = try reader["backendEnvironmentName"].readIfPresent()
        value.jobId = try reader["jobId"].readIfPresent()
        value.status = try reader["status"].readIfPresent()
        return value
    }
}

extension CreateTokenOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateTokenOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateTokenOutput()
        value.appId = try reader["appId"].readIfPresent()
        value.challengeCode = try reader["challengeCode"].readIfPresent()
        value.sessionId = try reader["sessionId"].readIfPresent()
        value.ttl = try reader["ttl"].readIfPresent()
        return value
    }
}

extension DeleteBackendOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteBackendOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DeleteBackendOutput()
        value.appId = try reader["appId"].readIfPresent()
        value.backendEnvironmentName = try reader["backendEnvironmentName"].readIfPresent()
        value.error = try reader["error"].readIfPresent()
        value.jobId = try reader["jobId"].readIfPresent()
        value.operation = try reader["operation"].readIfPresent()
        value.status = try reader["status"].readIfPresent()
        return value
    }
}

extension DeleteBackendAPIOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteBackendAPIOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DeleteBackendAPIOutput()
        value.appId = try reader["appId"].readIfPresent()
        value.backendEnvironmentName = try reader["backendEnvironmentName"].readIfPresent()
        value.error = try reader["error"].readIfPresent()
        value.jobId = try reader["jobId"].readIfPresent()
        value.operation = try reader["operation"].readIfPresent()
        value.status = try reader["status"].readIfPresent()
        return value
    }
}

extension DeleteBackendAuthOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteBackendAuthOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DeleteBackendAuthOutput()
        value.appId = try reader["appId"].readIfPresent()
        value.backendEnvironmentName = try reader["backendEnvironmentName"].readIfPresent()
        value.error = try reader["error"].readIfPresent()
        value.jobId = try reader["jobId"].readIfPresent()
        value.operation = try reader["operation"].readIfPresent()
        value.status = try reader["status"].readIfPresent()
        return value
    }
}

extension DeleteBackendStorageOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteBackendStorageOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DeleteBackendStorageOutput()
        value.appId = try reader["appId"].readIfPresent()
        value.backendEnvironmentName = try reader["backendEnvironmentName"].readIfPresent()
        value.jobId = try reader["jobId"].readIfPresent()
        value.status = try reader["status"].readIfPresent()
        return value
    }
}

extension DeleteTokenOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteTokenOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DeleteTokenOutput()
        value.isSuccess = try reader["isSuccess"].readIfPresent()
        return value
    }
}

extension GenerateBackendAPIModelsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GenerateBackendAPIModelsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GenerateBackendAPIModelsOutput()
        value.appId = try reader["appId"].readIfPresent()
        value.backendEnvironmentName = try reader["backendEnvironmentName"].readIfPresent()
        value.error = try reader["error"].readIfPresent()
        value.jobId = try reader["jobId"].readIfPresent()
        value.operation = try reader["operation"].readIfPresent()
        value.status = try reader["status"].readIfPresent()
        return value
    }
}

extension GetBackendOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetBackendOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetBackendOutput()
        value.amplifyFeatureFlags = try reader["amplifyFeatureFlags"].readIfPresent()
        value.amplifyMetaConfig = try reader["amplifyMetaConfig"].readIfPresent()
        value.appId = try reader["appId"].readIfPresent()
        value.appName = try reader["appName"].readIfPresent()
        value.backendEnvironmentList = try reader["backendEnvironmentList"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.backendEnvironmentName = try reader["backendEnvironmentName"].readIfPresent()
        value.error = try reader["error"].readIfPresent()
        return value
    }
}

extension GetBackendAPIOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetBackendAPIOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetBackendAPIOutput()
        value.appId = try reader["appId"].readIfPresent()
        value.backendEnvironmentName = try reader["backendEnvironmentName"].readIfPresent()
        value.error = try reader["error"].readIfPresent()
        value.resourceConfig = try reader["resourceConfig"].readIfPresent(with: AmplifyBackendClientTypes.BackendAPIResourceConfig.read(from:))
        value.resourceName = try reader["resourceName"].readIfPresent()
        return value
    }
}

extension GetBackendAPIModelsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetBackendAPIModelsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetBackendAPIModelsOutput()
        value.modelIntrospectionSchema = try reader["modelIntrospectionSchema"].readIfPresent()
        value.models = try reader["models"].readIfPresent()
        value.status = try reader["status"].readIfPresent()
        return value
    }
}

extension GetBackendAuthOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetBackendAuthOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetBackendAuthOutput()
        value.appId = try reader["appId"].readIfPresent()
        value.backendEnvironmentName = try reader["backendEnvironmentName"].readIfPresent()
        value.error = try reader["error"].readIfPresent()
        value.resourceConfig = try reader["resourceConfig"].readIfPresent(with: AmplifyBackendClientTypes.CreateBackendAuthResourceConfig.read(from:))
        value.resourceName = try reader["resourceName"].readIfPresent()
        return value
    }
}

extension GetBackendJobOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetBackendJobOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetBackendJobOutput()
        value.appId = try reader["appId"].readIfPresent()
        value.backendEnvironmentName = try reader["backendEnvironmentName"].readIfPresent()
        value.createTime = try reader["createTime"].readIfPresent()
        value.error = try reader["error"].readIfPresent()
        value.jobId = try reader["jobId"].readIfPresent()
        value.operation = try reader["operation"].readIfPresent()
        value.status = try reader["status"].readIfPresent()
        value.updateTime = try reader["updateTime"].readIfPresent()
        return value
    }
}

extension GetBackendStorageOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetBackendStorageOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetBackendStorageOutput()
        value.appId = try reader["appId"].readIfPresent()
        value.backendEnvironmentName = try reader["backendEnvironmentName"].readIfPresent()
        value.resourceConfig = try reader["resourceConfig"].readIfPresent(with: AmplifyBackendClientTypes.GetBackendStorageResourceConfig.read(from:))
        value.resourceName = try reader["resourceName"].readIfPresent()
        return value
    }
}

extension GetTokenOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetTokenOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetTokenOutput()
        value.appId = try reader["appId"].readIfPresent()
        value.challengeCode = try reader["challengeCode"].readIfPresent()
        value.sessionId = try reader["sessionId"].readIfPresent()
        value.ttl = try reader["ttl"].readIfPresent()
        return value
    }
}

extension ImportBackendAuthOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ImportBackendAuthOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ImportBackendAuthOutput()
        value.appId = try reader["appId"].readIfPresent()
        value.backendEnvironmentName = try reader["backendEnvironmentName"].readIfPresent()
        value.error = try reader["error"].readIfPresent()
        value.jobId = try reader["jobId"].readIfPresent()
        value.operation = try reader["operation"].readIfPresent()
        value.status = try reader["status"].readIfPresent()
        return value
    }
}

extension ImportBackendStorageOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ImportBackendStorageOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ImportBackendStorageOutput()
        value.appId = try reader["appId"].readIfPresent()
        value.backendEnvironmentName = try reader["backendEnvironmentName"].readIfPresent()
        value.jobId = try reader["jobId"].readIfPresent()
        value.status = try reader["status"].readIfPresent()
        return value
    }
}

extension ListBackendJobsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListBackendJobsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListBackendJobsOutput()
        value.jobs = try reader["jobs"].readListIfPresent(memberReadingClosure: AmplifyBackendClientTypes.BackendJobRespObj.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.nextToken = try reader["nextToken"].readIfPresent()
        return value
    }
}

extension ListS3BucketsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListS3BucketsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListS3BucketsOutput()
        value.buckets = try reader["buckets"].readListIfPresent(memberReadingClosure: AmplifyBackendClientTypes.S3BucketInfo.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.nextToken = try reader["nextToken"].readIfPresent()
        return value
    }
}

extension RemoveAllBackendsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> RemoveAllBackendsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = RemoveAllBackendsOutput()
        value.appId = try reader["appId"].readIfPresent()
        value.error = try reader["error"].readIfPresent()
        value.jobId = try reader["jobId"].readIfPresent()
        value.operation = try reader["operation"].readIfPresent()
        value.status = try reader["status"].readIfPresent()
        return value
    }
}

extension RemoveBackendConfigOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> RemoveBackendConfigOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = RemoveBackendConfigOutput()
        value.error = try reader["error"].readIfPresent()
        return value
    }
}

extension UpdateBackendAPIOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdateBackendAPIOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = UpdateBackendAPIOutput()
        value.appId = try reader["appId"].readIfPresent()
        value.backendEnvironmentName = try reader["backendEnvironmentName"].readIfPresent()
        value.error = try reader["error"].readIfPresent()
        value.jobId = try reader["jobId"].readIfPresent()
        value.operation = try reader["operation"].readIfPresent()
        value.status = try reader["status"].readIfPresent()
        return value
    }
}

extension UpdateBackendAuthOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdateBackendAuthOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = UpdateBackendAuthOutput()
        value.appId = try reader["appId"].readIfPresent()
        value.backendEnvironmentName = try reader["backendEnvironmentName"].readIfPresent()
        value.error = try reader["error"].readIfPresent()
        value.jobId = try reader["jobId"].readIfPresent()
        value.operation = try reader["operation"].readIfPresent()
        value.status = try reader["status"].readIfPresent()
        return value
    }
}

extension UpdateBackendConfigOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdateBackendConfigOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = UpdateBackendConfigOutput()
        value.appId = try reader["appId"].readIfPresent()
        value.backendManagerAppId = try reader["backendManagerAppId"].readIfPresent()
        value.error = try reader["error"].readIfPresent()
        value.loginAuthConfig = try reader["loginAuthConfig"].readIfPresent(with: AmplifyBackendClientTypes.LoginAuthConfigReqObj.read(from:))
        return value
    }
}

extension UpdateBackendJobOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdateBackendJobOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = UpdateBackendJobOutput()
        value.appId = try reader["appId"].readIfPresent()
        value.backendEnvironmentName = try reader["backendEnvironmentName"].readIfPresent()
        value.createTime = try reader["createTime"].readIfPresent()
        value.error = try reader["error"].readIfPresent()
        value.jobId = try reader["jobId"].readIfPresent()
        value.operation = try reader["operation"].readIfPresent()
        value.status = try reader["status"].readIfPresent()
        value.updateTime = try reader["updateTime"].readIfPresent()
        return value
    }
}

extension UpdateBackendStorageOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdateBackendStorageOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = UpdateBackendStorageOutput()
        value.appId = try reader["appId"].readIfPresent()
        value.backendEnvironmentName = try reader["backendEnvironmentName"].readIfPresent()
        value.jobId = try reader["jobId"].readIfPresent()
        value.status = try reader["status"].readIfPresent()
        return value
    }
}

enum CloneBackendOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "GatewayTimeoutException": return try GatewayTimeoutException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateBackendOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "GatewayTimeoutException": return try GatewayTimeoutException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateBackendAPIOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "GatewayTimeoutException": return try GatewayTimeoutException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateBackendAuthOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "GatewayTimeoutException": return try GatewayTimeoutException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateBackendConfigOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "GatewayTimeoutException": return try GatewayTimeoutException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateBackendStorageOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "GatewayTimeoutException": return try GatewayTimeoutException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateTokenOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "GatewayTimeoutException": return try GatewayTimeoutException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteBackendOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "GatewayTimeoutException": return try GatewayTimeoutException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteBackendAPIOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "GatewayTimeoutException": return try GatewayTimeoutException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteBackendAuthOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "GatewayTimeoutException": return try GatewayTimeoutException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteBackendStorageOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "GatewayTimeoutException": return try GatewayTimeoutException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteTokenOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "GatewayTimeoutException": return try GatewayTimeoutException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GenerateBackendAPIModelsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "GatewayTimeoutException": return try GatewayTimeoutException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetBackendOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "GatewayTimeoutException": return try GatewayTimeoutException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetBackendAPIOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "GatewayTimeoutException": return try GatewayTimeoutException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetBackendAPIModelsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "GatewayTimeoutException": return try GatewayTimeoutException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetBackendAuthOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "GatewayTimeoutException": return try GatewayTimeoutException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetBackendJobOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "GatewayTimeoutException": return try GatewayTimeoutException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetBackendStorageOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "GatewayTimeoutException": return try GatewayTimeoutException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetTokenOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "GatewayTimeoutException": return try GatewayTimeoutException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ImportBackendAuthOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "GatewayTimeoutException": return try GatewayTimeoutException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ImportBackendStorageOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "GatewayTimeoutException": return try GatewayTimeoutException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListBackendJobsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "GatewayTimeoutException": return try GatewayTimeoutException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListS3BucketsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "GatewayTimeoutException": return try GatewayTimeoutException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum RemoveAllBackendsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "GatewayTimeoutException": return try GatewayTimeoutException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum RemoveBackendConfigOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "GatewayTimeoutException": return try GatewayTimeoutException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdateBackendAPIOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "GatewayTimeoutException": return try GatewayTimeoutException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdateBackendAuthOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "GatewayTimeoutException": return try GatewayTimeoutException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdateBackendConfigOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "GatewayTimeoutException": return try GatewayTimeoutException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdateBackendJobOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "GatewayTimeoutException": return try GatewayTimeoutException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdateBackendStorageOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "GatewayTimeoutException": return try GatewayTimeoutException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

extension GatewayTimeoutException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> GatewayTimeoutException {
        let reader = baseError.errorBodyReader
        var value = GatewayTimeoutException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension NotFoundException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> NotFoundException {
        let reader = baseError.errorBodyReader
        var value = NotFoundException()
        value.properties.message = try reader["message"].readIfPresent()
        value.properties.resourceType = try reader["resourceType"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension BadRequestException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> BadRequestException {
        let reader = baseError.errorBodyReader
        var value = BadRequestException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension TooManyRequestsException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> TooManyRequestsException {
        let reader = baseError.errorBodyReader
        var value = TooManyRequestsException()
        value.properties.limitType = try reader["limitType"].readIfPresent()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension AmplifyBackendClientTypes.BackendAPIResourceConfig {

    static func write(value: AmplifyBackendClientTypes.BackendAPIResourceConfig?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["additionalAuthTypes"].writeList(value.additionalAuthTypes, memberWritingClosure: AmplifyBackendClientTypes.BackendAPIAuthType.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["apiName"].write(value.apiName)
        try writer["conflictResolution"].write(value.conflictResolution, with: AmplifyBackendClientTypes.BackendAPIConflictResolution.write(value:to:))
        try writer["defaultAuthType"].write(value.defaultAuthType, with: AmplifyBackendClientTypes.BackendAPIAuthType.write(value:to:))
        try writer["service"].write(value.service)
        try writer["transformSchema"].write(value.transformSchema)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> AmplifyBackendClientTypes.BackendAPIResourceConfig {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = AmplifyBackendClientTypes.BackendAPIResourceConfig()
        value.additionalAuthTypes = try reader["additionalAuthTypes"].readListIfPresent(memberReadingClosure: AmplifyBackendClientTypes.BackendAPIAuthType.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.apiName = try reader["apiName"].readIfPresent()
        value.conflictResolution = try reader["conflictResolution"].readIfPresent(with: AmplifyBackendClientTypes.BackendAPIConflictResolution.read(from:))
        value.defaultAuthType = try reader["defaultAuthType"].readIfPresent(with: AmplifyBackendClientTypes.BackendAPIAuthType.read(from:))
        value.service = try reader["service"].readIfPresent()
        value.transformSchema = try reader["transformSchema"].readIfPresent()
        return value
    }
}

extension AmplifyBackendClientTypes.BackendAPIAuthType {

    static func write(value: AmplifyBackendClientTypes.BackendAPIAuthType?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["mode"].write(value.mode)
        try writer["settings"].write(value.settings, with: AmplifyBackendClientTypes.BackendAPIAppSyncAuthSettings.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> AmplifyBackendClientTypes.BackendAPIAuthType {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = AmplifyBackendClientTypes.BackendAPIAuthType()
        value.mode = try reader["mode"].readIfPresent()
        value.settings = try reader["settings"].readIfPresent(with: AmplifyBackendClientTypes.BackendAPIAppSyncAuthSettings.read(from:))
        return value
    }
}

extension AmplifyBackendClientTypes.BackendAPIAppSyncAuthSettings {

    static func write(value: AmplifyBackendClientTypes.BackendAPIAppSyncAuthSettings?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["cognitoUserPoolId"].write(value.cognitoUserPoolId)
        try writer["description"].write(value.description)
        try writer["expirationTime"].write(value.expirationTime)
        try writer["openIDAuthTTL"].write(value.openIDAuthTTL)
        try writer["openIDClientId"].write(value.openIDClientId)
        try writer["openIDIatTTL"].write(value.openIDIatTTL)
        try writer["openIDIssueURL"].write(value.openIDIssueURL)
        try writer["openIDProviderName"].write(value.openIDProviderName)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> AmplifyBackendClientTypes.BackendAPIAppSyncAuthSettings {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = AmplifyBackendClientTypes.BackendAPIAppSyncAuthSettings()
        value.cognitoUserPoolId = try reader["cognitoUserPoolId"].readIfPresent()
        value.description = try reader["description"].readIfPresent()
        value.expirationTime = try reader["expirationTime"].readIfPresent()
        value.openIDAuthTTL = try reader["openIDAuthTTL"].readIfPresent()
        value.openIDClientId = try reader["openIDClientId"].readIfPresent()
        value.openIDIatTTL = try reader["openIDIatTTL"].readIfPresent()
        value.openIDIssueURL = try reader["openIDIssueURL"].readIfPresent()
        value.openIDProviderName = try reader["openIDProviderName"].readIfPresent()
        return value
    }
}

extension AmplifyBackendClientTypes.BackendAPIConflictResolution {

    static func write(value: AmplifyBackendClientTypes.BackendAPIConflictResolution?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["resolutionStrategy"].write(value.resolutionStrategy)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> AmplifyBackendClientTypes.BackendAPIConflictResolution {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = AmplifyBackendClientTypes.BackendAPIConflictResolution()
        value.resolutionStrategy = try reader["resolutionStrategy"].readIfPresent()
        return value
    }
}

extension AmplifyBackendClientTypes.CreateBackendAuthResourceConfig {

    static func write(value: AmplifyBackendClientTypes.CreateBackendAuthResourceConfig?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["authResources"].write(value.authResources)
        try writer["identityPoolConfigs"].write(value.identityPoolConfigs, with: AmplifyBackendClientTypes.CreateBackendAuthIdentityPoolConfig.write(value:to:))
        try writer["service"].write(value.service)
        try writer["userPoolConfigs"].write(value.userPoolConfigs, with: AmplifyBackendClientTypes.CreateBackendAuthUserPoolConfig.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> AmplifyBackendClientTypes.CreateBackendAuthResourceConfig {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = AmplifyBackendClientTypes.CreateBackendAuthResourceConfig()
        value.authResources = try reader["authResources"].readIfPresent() ?? .sdkUnknown("")
        value.identityPoolConfigs = try reader["identityPoolConfigs"].readIfPresent(with: AmplifyBackendClientTypes.CreateBackendAuthIdentityPoolConfig.read(from:))
        value.service = try reader["service"].readIfPresent() ?? .sdkUnknown("")
        value.userPoolConfigs = try reader["userPoolConfigs"].readIfPresent(with: AmplifyBackendClientTypes.CreateBackendAuthUserPoolConfig.read(from:))
        return value
    }
}

extension AmplifyBackendClientTypes.CreateBackendAuthUserPoolConfig {

    static func write(value: AmplifyBackendClientTypes.CreateBackendAuthUserPoolConfig?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["forgotPassword"].write(value.forgotPassword, with: AmplifyBackendClientTypes.CreateBackendAuthForgotPasswordConfig.write(value:to:))
        try writer["mfa"].write(value.mfa, with: AmplifyBackendClientTypes.CreateBackendAuthMFAConfig.write(value:to:))
        try writer["oAuth"].write(value.oAuth, with: AmplifyBackendClientTypes.CreateBackendAuthOAuthConfig.write(value:to:))
        try writer["passwordPolicy"].write(value.passwordPolicy, with: AmplifyBackendClientTypes.CreateBackendAuthPasswordPolicyConfig.write(value:to:))
        try writer["requiredSignUpAttributes"].writeList(value.requiredSignUpAttributes, memberWritingClosure: SmithyReadWrite.WritingClosureBox<AmplifyBackendClientTypes.RequiredSignUpAttributesElement>().write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["signInMethod"].write(value.signInMethod)
        try writer["userPoolName"].write(value.userPoolName)
        try writer["verificationMessage"].write(value.verificationMessage, with: AmplifyBackendClientTypes.CreateBackendAuthVerificationMessageConfig.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> AmplifyBackendClientTypes.CreateBackendAuthUserPoolConfig {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = AmplifyBackendClientTypes.CreateBackendAuthUserPoolConfig()
        value.forgotPassword = try reader["forgotPassword"].readIfPresent(with: AmplifyBackendClientTypes.CreateBackendAuthForgotPasswordConfig.read(from:))
        value.mfa = try reader["mfa"].readIfPresent(with: AmplifyBackendClientTypes.CreateBackendAuthMFAConfig.read(from:))
        value.oAuth = try reader["oAuth"].readIfPresent(with: AmplifyBackendClientTypes.CreateBackendAuthOAuthConfig.read(from:))
        value.passwordPolicy = try reader["passwordPolicy"].readIfPresent(with: AmplifyBackendClientTypes.CreateBackendAuthPasswordPolicyConfig.read(from:))
        value.requiredSignUpAttributes = try reader["requiredSignUpAttributes"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosureBox<AmplifyBackendClientTypes.RequiredSignUpAttributesElement>().read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        value.signInMethod = try reader["signInMethod"].readIfPresent() ?? .sdkUnknown("")
        value.userPoolName = try reader["userPoolName"].readIfPresent() ?? ""
        value.verificationMessage = try reader["verificationMessage"].readIfPresent(with: AmplifyBackendClientTypes.CreateBackendAuthVerificationMessageConfig.read(from:))
        return value
    }
}

extension AmplifyBackendClientTypes.CreateBackendAuthVerificationMessageConfig {

    static func write(value: AmplifyBackendClientTypes.CreateBackendAuthVerificationMessageConfig?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["deliveryMethod"].write(value.deliveryMethod)
        try writer["emailSettings"].write(value.emailSettings, with: AmplifyBackendClientTypes.EmailSettings.write(value:to:))
        try writer["smsSettings"].write(value.smsSettings, with: AmplifyBackendClientTypes.SmsSettings.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> AmplifyBackendClientTypes.CreateBackendAuthVerificationMessageConfig {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = AmplifyBackendClientTypes.CreateBackendAuthVerificationMessageConfig()
        value.deliveryMethod = try reader["deliveryMethod"].readIfPresent() ?? .sdkUnknown("")
        value.emailSettings = try reader["emailSettings"].readIfPresent(with: AmplifyBackendClientTypes.EmailSettings.read(from:))
        value.smsSettings = try reader["smsSettings"].readIfPresent(with: AmplifyBackendClientTypes.SmsSettings.read(from:))
        return value
    }
}

extension AmplifyBackendClientTypes.SmsSettings {

    static func write(value: AmplifyBackendClientTypes.SmsSettings?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["smsMessage"].write(value.smsMessage)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> AmplifyBackendClientTypes.SmsSettings {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = AmplifyBackendClientTypes.SmsSettings()
        value.smsMessage = try reader["smsMessage"].readIfPresent()
        return value
    }
}

extension AmplifyBackendClientTypes.EmailSettings {

    static func write(value: AmplifyBackendClientTypes.EmailSettings?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["emailMessage"].write(value.emailMessage)
        try writer["emailSubject"].write(value.emailSubject)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> AmplifyBackendClientTypes.EmailSettings {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = AmplifyBackendClientTypes.EmailSettings()
        value.emailMessage = try reader["emailMessage"].readIfPresent()
        value.emailSubject = try reader["emailSubject"].readIfPresent()
        return value
    }
}

extension AmplifyBackendClientTypes.CreateBackendAuthPasswordPolicyConfig {

    static func write(value: AmplifyBackendClientTypes.CreateBackendAuthPasswordPolicyConfig?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["additionalConstraints"].writeList(value.additionalConstraints, memberWritingClosure: SmithyReadWrite.WritingClosureBox<AmplifyBackendClientTypes.AdditionalConstraintsElement>().write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["minimumLength"].write(value.minimumLength)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> AmplifyBackendClientTypes.CreateBackendAuthPasswordPolicyConfig {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = AmplifyBackendClientTypes.CreateBackendAuthPasswordPolicyConfig()
        value.additionalConstraints = try reader["additionalConstraints"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosureBox<AmplifyBackendClientTypes.AdditionalConstraintsElement>().read(from:), memberNodeInfo: "member", isFlattened: false)
        value.minimumLength = try reader["minimumLength"].readIfPresent() ?? 0.0
        return value
    }
}

extension AmplifyBackendClientTypes.CreateBackendAuthOAuthConfig {

    static func write(value: AmplifyBackendClientTypes.CreateBackendAuthOAuthConfig?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["domainPrefix"].write(value.domainPrefix)
        try writer["oAuthGrantType"].write(value.oAuthGrantType)
        try writer["oAuthScopes"].writeList(value.oAuthScopes, memberWritingClosure: SmithyReadWrite.WritingClosureBox<AmplifyBackendClientTypes.OAuthScopesElement>().write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["redirectSignInURIs"].writeList(value.redirectSignInURIs, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["redirectSignOutURIs"].writeList(value.redirectSignOutURIs, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["socialProviderSettings"].write(value.socialProviderSettings, with: AmplifyBackendClientTypes.SocialProviderSettings.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> AmplifyBackendClientTypes.CreateBackendAuthOAuthConfig {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = AmplifyBackendClientTypes.CreateBackendAuthOAuthConfig()
        value.domainPrefix = try reader["domainPrefix"].readIfPresent()
        value.oAuthGrantType = try reader["oAuthGrantType"].readIfPresent() ?? .sdkUnknown("")
        value.oAuthScopes = try reader["oAuthScopes"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosureBox<AmplifyBackendClientTypes.OAuthScopesElement>().read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        value.redirectSignInURIs = try reader["redirectSignInURIs"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        value.redirectSignOutURIs = try reader["redirectSignOutURIs"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        value.socialProviderSettings = try reader["socialProviderSettings"].readIfPresent(with: AmplifyBackendClientTypes.SocialProviderSettings.read(from:))
        return value
    }
}

extension AmplifyBackendClientTypes.SocialProviderSettings {

    static func write(value: AmplifyBackendClientTypes.SocialProviderSettings?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Facebook"].write(value.facebook, with: AmplifyBackendClientTypes.BackendAuthSocialProviderConfig.write(value:to:))
        try writer["Google"].write(value.google, with: AmplifyBackendClientTypes.BackendAuthSocialProviderConfig.write(value:to:))
        try writer["LoginWithAmazon"].write(value.loginWithAmazon, with: AmplifyBackendClientTypes.BackendAuthSocialProviderConfig.write(value:to:))
        try writer["SignInWithApple"].write(value.signInWithApple, with: AmplifyBackendClientTypes.BackendAuthAppleProviderConfig.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> AmplifyBackendClientTypes.SocialProviderSettings {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = AmplifyBackendClientTypes.SocialProviderSettings()
        value.facebook = try reader["Facebook"].readIfPresent(with: AmplifyBackendClientTypes.BackendAuthSocialProviderConfig.read(from:))
        value.google = try reader["Google"].readIfPresent(with: AmplifyBackendClientTypes.BackendAuthSocialProviderConfig.read(from:))
        value.loginWithAmazon = try reader["LoginWithAmazon"].readIfPresent(with: AmplifyBackendClientTypes.BackendAuthSocialProviderConfig.read(from:))
        value.signInWithApple = try reader["SignInWithApple"].readIfPresent(with: AmplifyBackendClientTypes.BackendAuthAppleProviderConfig.read(from:))
        return value
    }
}

extension AmplifyBackendClientTypes.BackendAuthAppleProviderConfig {

    static func write(value: AmplifyBackendClientTypes.BackendAuthAppleProviderConfig?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["client_id"].write(value.clientId)
        try writer["key_id"].write(value.keyId)
        try writer["private_key"].write(value.privateKey)
        try writer["team_id"].write(value.teamId)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> AmplifyBackendClientTypes.BackendAuthAppleProviderConfig {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = AmplifyBackendClientTypes.BackendAuthAppleProviderConfig()
        value.clientId = try reader["client_id"].readIfPresent()
        value.keyId = try reader["key_id"].readIfPresent()
        value.privateKey = try reader["private_key"].readIfPresent()
        value.teamId = try reader["team_id"].readIfPresent()
        return value
    }
}

extension AmplifyBackendClientTypes.BackendAuthSocialProviderConfig {

    static func write(value: AmplifyBackendClientTypes.BackendAuthSocialProviderConfig?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["client_id"].write(value.clientId)
        try writer["client_secret"].write(value.clientSecret)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> AmplifyBackendClientTypes.BackendAuthSocialProviderConfig {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = AmplifyBackendClientTypes.BackendAuthSocialProviderConfig()
        value.clientId = try reader["client_id"].readIfPresent()
        value.clientSecret = try reader["client_secret"].readIfPresent()
        return value
    }
}

extension AmplifyBackendClientTypes.CreateBackendAuthMFAConfig {

    static func write(value: AmplifyBackendClientTypes.CreateBackendAuthMFAConfig?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["MFAMode"].write(value.mfaMode)
        try writer["settings"].write(value.settings, with: AmplifyBackendClientTypes.Settings.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> AmplifyBackendClientTypes.CreateBackendAuthMFAConfig {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = AmplifyBackendClientTypes.CreateBackendAuthMFAConfig()
        value.mfaMode = try reader["MFAMode"].readIfPresent() ?? .sdkUnknown("")
        value.settings = try reader["settings"].readIfPresent(with: AmplifyBackendClientTypes.Settings.read(from:))
        return value
    }
}

extension AmplifyBackendClientTypes.Settings {

    static func write(value: AmplifyBackendClientTypes.Settings?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["mfaTypes"].writeList(value.mfaTypes, memberWritingClosure: SmithyReadWrite.WritingClosureBox<AmplifyBackendClientTypes.MfaTypesElement>().write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["smsMessage"].write(value.smsMessage)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> AmplifyBackendClientTypes.Settings {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = AmplifyBackendClientTypes.Settings()
        value.mfaTypes = try reader["mfaTypes"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosureBox<AmplifyBackendClientTypes.MfaTypesElement>().read(from:), memberNodeInfo: "member", isFlattened: false)
        value.smsMessage = try reader["smsMessage"].readIfPresent()
        return value
    }
}

extension AmplifyBackendClientTypes.CreateBackendAuthForgotPasswordConfig {

    static func write(value: AmplifyBackendClientTypes.CreateBackendAuthForgotPasswordConfig?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["deliveryMethod"].write(value.deliveryMethod)
        try writer["emailSettings"].write(value.emailSettings, with: AmplifyBackendClientTypes.EmailSettings.write(value:to:))
        try writer["smsSettings"].write(value.smsSettings, with: AmplifyBackendClientTypes.SmsSettings.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> AmplifyBackendClientTypes.CreateBackendAuthForgotPasswordConfig {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = AmplifyBackendClientTypes.CreateBackendAuthForgotPasswordConfig()
        value.deliveryMethod = try reader["deliveryMethod"].readIfPresent() ?? .sdkUnknown("")
        value.emailSettings = try reader["emailSettings"].readIfPresent(with: AmplifyBackendClientTypes.EmailSettings.read(from:))
        value.smsSettings = try reader["smsSettings"].readIfPresent(with: AmplifyBackendClientTypes.SmsSettings.read(from:))
        return value
    }
}

extension AmplifyBackendClientTypes.CreateBackendAuthIdentityPoolConfig {

    static func write(value: AmplifyBackendClientTypes.CreateBackendAuthIdentityPoolConfig?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["identityPoolName"].write(value.identityPoolName)
        try writer["unauthenticatedLogin"].write(value.unauthenticatedLogin)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> AmplifyBackendClientTypes.CreateBackendAuthIdentityPoolConfig {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = AmplifyBackendClientTypes.CreateBackendAuthIdentityPoolConfig()
        value.identityPoolName = try reader["identityPoolName"].readIfPresent() ?? ""
        value.unauthenticatedLogin = try reader["unauthenticatedLogin"].readIfPresent() ?? false
        return value
    }
}

extension AmplifyBackendClientTypes.GetBackendStorageResourceConfig {

    static func read(from reader: SmithyJSON.Reader) throws -> AmplifyBackendClientTypes.GetBackendStorageResourceConfig {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = AmplifyBackendClientTypes.GetBackendStorageResourceConfig()
        value.bucketName = try reader["bucketName"].readIfPresent()
        value.imported = try reader["imported"].readIfPresent() ?? false
        value.permissions = try reader["permissions"].readIfPresent(with: AmplifyBackendClientTypes.BackendStoragePermissions.read(from:))
        value.serviceName = try reader["serviceName"].readIfPresent() ?? .sdkUnknown("")
        return value
    }
}

extension AmplifyBackendClientTypes.BackendStoragePermissions {

    static func write(value: AmplifyBackendClientTypes.BackendStoragePermissions?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["authenticated"].writeList(value.authenticated, memberWritingClosure: SmithyReadWrite.WritingClosureBox<AmplifyBackendClientTypes.AuthenticatedElement>().write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["unAuthenticated"].writeList(value.unAuthenticated, memberWritingClosure: SmithyReadWrite.WritingClosureBox<AmplifyBackendClientTypes.UnAuthenticatedElement>().write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> AmplifyBackendClientTypes.BackendStoragePermissions {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = AmplifyBackendClientTypes.BackendStoragePermissions()
        value.authenticated = try reader["authenticated"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosureBox<AmplifyBackendClientTypes.AuthenticatedElement>().read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        value.unAuthenticated = try reader["unAuthenticated"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosureBox<AmplifyBackendClientTypes.UnAuthenticatedElement>().read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension AmplifyBackendClientTypes.BackendJobRespObj {

    static func read(from reader: SmithyJSON.Reader) throws -> AmplifyBackendClientTypes.BackendJobRespObj {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = AmplifyBackendClientTypes.BackendJobRespObj()
        value.appId = try reader["appId"].readIfPresent() ?? ""
        value.backendEnvironmentName = try reader["backendEnvironmentName"].readIfPresent() ?? ""
        value.createTime = try reader["createTime"].readIfPresent()
        value.error = try reader["error"].readIfPresent()
        value.jobId = try reader["jobId"].readIfPresent()
        value.operation = try reader["operation"].readIfPresent()
        value.status = try reader["status"].readIfPresent()
        value.updateTime = try reader["updateTime"].readIfPresent()
        return value
    }
}

extension AmplifyBackendClientTypes.S3BucketInfo {

    static func read(from reader: SmithyJSON.Reader) throws -> AmplifyBackendClientTypes.S3BucketInfo {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = AmplifyBackendClientTypes.S3BucketInfo()
        value.creationDate = try reader["creationDate"].readIfPresent()
        value.name = try reader["name"].readIfPresent()
        return value
    }
}

extension AmplifyBackendClientTypes.LoginAuthConfigReqObj {

    static func write(value: AmplifyBackendClientTypes.LoginAuthConfigReqObj?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["aws_cognito_identity_pool_id"].write(value.awsCognitoIdentityPoolId)
        try writer["aws_cognito_region"].write(value.awsCognitoRegion)
        try writer["aws_user_pools_id"].write(value.awsUserPoolsId)
        try writer["aws_user_pools_web_client_id"].write(value.awsUserPoolsWebClientId)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> AmplifyBackendClientTypes.LoginAuthConfigReqObj {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = AmplifyBackendClientTypes.LoginAuthConfigReqObj()
        value.awsCognitoIdentityPoolId = try reader["aws_cognito_identity_pool_id"].readIfPresent()
        value.awsCognitoRegion = try reader["aws_cognito_region"].readIfPresent()
        value.awsUserPoolsId = try reader["aws_user_pools_id"].readIfPresent()
        value.awsUserPoolsWebClientId = try reader["aws_user_pools_web_client_id"].readIfPresent()
        return value
    }
}

extension AmplifyBackendClientTypes.ResourceConfig {

    static func write(value: AmplifyBackendClientTypes.ResourceConfig?, to writer: SmithyJSON.Writer) throws {
        guard value != nil else { return }
        _ = writer[""]  // create an empty structure
    }
}

extension AmplifyBackendClientTypes.CreateBackendStorageResourceConfig {

    static func write(value: AmplifyBackendClientTypes.CreateBackendStorageResourceConfig?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["bucketName"].write(value.bucketName)
        try writer["permissions"].write(value.permissions, with: AmplifyBackendClientTypes.BackendStoragePermissions.write(value:to:))
        try writer["serviceName"].write(value.serviceName)
    }
}

extension AmplifyBackendClientTypes.UpdateBackendAuthResourceConfig {

    static func write(value: AmplifyBackendClientTypes.UpdateBackendAuthResourceConfig?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["authResources"].write(value.authResources)
        try writer["identityPoolConfigs"].write(value.identityPoolConfigs, with: AmplifyBackendClientTypes.UpdateBackendAuthIdentityPoolConfig.write(value:to:))
        try writer["service"].write(value.service)
        try writer["userPoolConfigs"].write(value.userPoolConfigs, with: AmplifyBackendClientTypes.UpdateBackendAuthUserPoolConfig.write(value:to:))
    }
}

extension AmplifyBackendClientTypes.UpdateBackendAuthUserPoolConfig {

    static func write(value: AmplifyBackendClientTypes.UpdateBackendAuthUserPoolConfig?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["forgotPassword"].write(value.forgotPassword, with: AmplifyBackendClientTypes.UpdateBackendAuthForgotPasswordConfig.write(value:to:))
        try writer["mfa"].write(value.mfa, with: AmplifyBackendClientTypes.UpdateBackendAuthMFAConfig.write(value:to:))
        try writer["oAuth"].write(value.oAuth, with: AmplifyBackendClientTypes.UpdateBackendAuthOAuthConfig.write(value:to:))
        try writer["passwordPolicy"].write(value.passwordPolicy, with: AmplifyBackendClientTypes.UpdateBackendAuthPasswordPolicyConfig.write(value:to:))
        try writer["verificationMessage"].write(value.verificationMessage, with: AmplifyBackendClientTypes.UpdateBackendAuthVerificationMessageConfig.write(value:to:))
    }
}

extension AmplifyBackendClientTypes.UpdateBackendAuthVerificationMessageConfig {

    static func write(value: AmplifyBackendClientTypes.UpdateBackendAuthVerificationMessageConfig?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["deliveryMethod"].write(value.deliveryMethod)
        try writer["emailSettings"].write(value.emailSettings, with: AmplifyBackendClientTypes.EmailSettings.write(value:to:))
        try writer["smsSettings"].write(value.smsSettings, with: AmplifyBackendClientTypes.SmsSettings.write(value:to:))
    }
}

extension AmplifyBackendClientTypes.UpdateBackendAuthPasswordPolicyConfig {

    static func write(value: AmplifyBackendClientTypes.UpdateBackendAuthPasswordPolicyConfig?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["additionalConstraints"].writeList(value.additionalConstraints, memberWritingClosure: SmithyReadWrite.WritingClosureBox<AmplifyBackendClientTypes.AdditionalConstraintsElement>().write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["minimumLength"].write(value.minimumLength)
    }
}

extension AmplifyBackendClientTypes.UpdateBackendAuthOAuthConfig {

    static func write(value: AmplifyBackendClientTypes.UpdateBackendAuthOAuthConfig?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["domainPrefix"].write(value.domainPrefix)
        try writer["oAuthGrantType"].write(value.oAuthGrantType)
        try writer["oAuthScopes"].writeList(value.oAuthScopes, memberWritingClosure: SmithyReadWrite.WritingClosureBox<AmplifyBackendClientTypes.OAuthScopesElement>().write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["redirectSignInURIs"].writeList(value.redirectSignInURIs, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["redirectSignOutURIs"].writeList(value.redirectSignOutURIs, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["socialProviderSettings"].write(value.socialProviderSettings, with: AmplifyBackendClientTypes.SocialProviderSettings.write(value:to:))
    }
}

extension AmplifyBackendClientTypes.UpdateBackendAuthMFAConfig {

    static func write(value: AmplifyBackendClientTypes.UpdateBackendAuthMFAConfig?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["MFAMode"].write(value.mfaMode)
        try writer["settings"].write(value.settings, with: AmplifyBackendClientTypes.Settings.write(value:to:))
    }
}

extension AmplifyBackendClientTypes.UpdateBackendAuthForgotPasswordConfig {

    static func write(value: AmplifyBackendClientTypes.UpdateBackendAuthForgotPasswordConfig?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["deliveryMethod"].write(value.deliveryMethod)
        try writer["emailSettings"].write(value.emailSettings, with: AmplifyBackendClientTypes.EmailSettings.write(value:to:))
        try writer["smsSettings"].write(value.smsSettings, with: AmplifyBackendClientTypes.SmsSettings.write(value:to:))
    }
}

extension AmplifyBackendClientTypes.UpdateBackendAuthIdentityPoolConfig {

    static func write(value: AmplifyBackendClientTypes.UpdateBackendAuthIdentityPoolConfig?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["unauthenticatedLogin"].write(value.unauthenticatedLogin)
    }
}

extension AmplifyBackendClientTypes.UpdateBackendStorageResourceConfig {

    static func write(value: AmplifyBackendClientTypes.UpdateBackendStorageResourceConfig?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["permissions"].write(value.permissions, with: AmplifyBackendClientTypes.BackendStoragePermissions.write(value:to:))
        try writer["serviceName"].write(value.serviceName)
    }
}

public enum AmplifyBackendClientTypes {}
