// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension RepostspaceClient {
    /// Paginate over `[ListSpacesOutput]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[ListSpacesInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `ListSpacesOutput`
    public func listSpacesPaginated(input: ListSpacesInput) -> ClientRuntime.PaginatorSequence<ListSpacesInput, ListSpacesOutput> {
        return ClientRuntime.PaginatorSequence<ListSpacesInput, ListSpacesOutput>(input: input, inputKey: \.nextToken, outputKey: \.nextToken, paginationFunction: self.listSpaces(input:))
    }
}

extension ListSpacesInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListSpacesInput {
        return ListSpacesInput(
            maxResults: self.maxResults,
            nextToken: token
        )}
}

extension PaginatorSequence where OperationStackInput == ListSpacesInput, OperationStackOutput == ListSpacesOutput {
    /// This paginator transforms the `AsyncSequence` returned by `listSpacesPaginated`
    /// to access the nested member `[RepostspaceClientTypes.SpaceData]`
    /// - Returns: `[RepostspaceClientTypes.SpaceData]`
    public func spaces() async throws -> [RepostspaceClientTypes.SpaceData] {
        return try await self.asyncCompactMap { item in item.spaces }
    }
}
