//
// Copyright Amazon.com Inc. or its affiliates.
// All Rights Reserved.
//
// SPDX-License-Identifier: Apache-2.0
//

// Code generated by smithy-swift-codegen. DO NOT EDIT!

@_spi(SmithyReadWrite) import ClientRuntime
import Foundation
import class SmithyHTTPAPI.HTTPResponse
@_spi(SmithyReadWrite) import class SmithyJSON.Reader
@_spi(SmithyReadWrite) import class SmithyJSON.Writer
import enum ClientRuntime.ErrorFault
import enum Smithy.ClientError
import enum SmithyReadWrite.ReaderError
@_spi(SmithyReadWrite) import enum SmithyReadWrite.ReadingClosures
@_spi(SmithyReadWrite) import enum SmithyReadWrite.WritingClosures
@_spi(SmithyTimestamps) import enum SmithyTimestamps.TimestampFormat
@_spi(SmithyReadWrite) import func SmithyReadWrite.listReadingClosure
import protocol AWSClientRuntime.AWSServiceError
import protocol ClientRuntime.HTTPError
import protocol ClientRuntime.ModeledError
@_spi(SmithyReadWrite) import protocol SmithyReadWrite.SmithyReader
@_spi(SmithyReadWrite) import protocol SmithyReadWrite.SmithyWriter
@_spi(SmithyReadWrite) import struct AWSClientRuntime.RestJSONError
@_spi(UnknownAWSHTTPServiceError) import struct AWSClientRuntime.UnknownAWSHTTPServiceError
import struct Smithy.URIQueryItem
@_spi(SmithyReadWrite) import struct SmithyReadWrite.ReadingClosureBox
@_spi(SmithyTimestamps) import struct SmithyTimestamps.TimestampFormatter


public struct DeleteSpaceOutput: Swift.Sendable {

    public init() { }
}

public struct DeregisterAdminOutput: Swift.Sendable {

    public init() { }
}

public struct RegisterAdminOutput: Swift.Sendable {

    public init() { }
}

public struct SendInvitesOutput: Swift.Sendable {

    public init() { }
}

public struct UpdateSpaceOutput: Swift.Sendable {

    public init() { }
}

/// User does not have sufficient access to perform this action.
public struct AccessDeniedException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// This member is required.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "AccessDeniedException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// Unexpected error during processing of request.
public struct InternalServerException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// This member is required.
        public internal(set) var message: Swift.String? = nil
        /// Advice to clients on when the call can be safely retried.
        public internal(set) var retryAfterSeconds: Swift.Int? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InternalServerException" }
    public static var fault: ClientRuntime.ErrorFault { .server }
    public static var isRetryable: Swift.Bool { true }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil,
        retryAfterSeconds: Swift.Int? = nil
    )
    {
        self.properties.message = message
        self.properties.retryAfterSeconds = retryAfterSeconds
    }
}

/// Request references a resource which does not exist.
public struct ResourceNotFoundException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// This member is required.
        public internal(set) var message: Swift.String? = nil
        /// The ID of the resource.
        /// This member is required.
        public internal(set) var resourceId: Swift.String? = nil
        /// The type of the resource.
        /// This member is required.
        public internal(set) var resourceType: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ResourceNotFoundException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil,
        resourceId: Swift.String? = nil,
        resourceType: Swift.String? = nil
    )
    {
        self.properties.message = message
        self.properties.resourceId = resourceId
        self.properties.resourceType = resourceType
    }
}

/// Request was denied due to request throttling.
public struct ThrottlingException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// This member is required.
        public internal(set) var message: Swift.String? = nil
        /// The code to identify the quota.
        public internal(set) var quotaCode: Swift.String? = nil
        /// Advice to clients on when the call can be safely retried.
        public internal(set) var retryAfterSeconds: Swift.Int? = nil
        /// The code to identify the service.
        public internal(set) var serviceCode: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ThrottlingException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { true }
    public static var isThrottling: Swift.Bool { true }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil,
        quotaCode: Swift.String? = nil,
        retryAfterSeconds: Swift.Int? = nil,
        serviceCode: Swift.String? = nil
    )
    {
        self.properties.message = message
        self.properties.quotaCode = quotaCode
        self.properties.retryAfterSeconds = retryAfterSeconds
        self.properties.serviceCode = serviceCode
    }
}

extension RepostspaceClientTypes {

    /// Stores information about a field thatâ€™s passed inside a request that resulted in an exception.
    public struct ValidationExceptionField: Swift.Sendable {
        /// The name of the field.
        /// This member is required.
        public var message: Swift.String?
        /// Message describing why the field failed validation.
        /// This member is required.
        public var name: Swift.String?

        public init(
            message: Swift.String? = nil,
            name: Swift.String? = nil
        )
        {
            self.message = message
            self.name = name
        }
    }
}

extension RepostspaceClientTypes {

    public enum ValidationExceptionReason: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case cannotParse
        case fieldValidationFailed
        case other
        case unknownOperation
        case sdkUnknown(Swift.String)

        public static var allCases: [ValidationExceptionReason] {
            return [
                .cannotParse,
                .fieldValidationFailed,
                .other,
                .unknownOperation
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .cannotParse: return "cannotParse"
            case .fieldValidationFailed: return "fieldValidationFailed"
            case .other: return "other"
            case .unknownOperation: return "unknownOperation"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

/// The input fails to satisfy the constraints specified by an AWS service.
public struct ValidationException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// The field that caused the error, if applicable.
        public internal(set) var fieldList: [RepostspaceClientTypes.ValidationExceptionField]? = nil
        /// This member is required.
        public internal(set) var message: Swift.String? = nil
        /// The reason why the request failed validation.
        /// This member is required.
        public internal(set) var reason: RepostspaceClientTypes.ValidationExceptionReason? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ValidationException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        fieldList: [RepostspaceClientTypes.ValidationExceptionField]? = nil,
        message: Swift.String? = nil,
        reason: RepostspaceClientTypes.ValidationExceptionReason? = nil
    )
    {
        self.properties.fieldList = fieldList
        self.properties.message = message
        self.properties.reason = reason
    }
}

extension RepostspaceClientTypes {

    public enum Role: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case administrator
        case expert
        case moderator
        case supportrequestor
        case sdkUnknown(Swift.String)

        public static var allCases: [Role] {
            return [
                .administrator,
                .expert,
                .moderator,
                .supportrequestor
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .administrator: return "ADMINISTRATOR"
            case .expert: return "EXPERT"
            case .moderator: return "MODERATOR"
            case .supportrequestor: return "SUPPORTREQUESTOR"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

public struct BatchAddRoleInput: Swift.Sendable {
    /// The user or group accessor identifiers to add the role to.
    /// This member is required.
    public var accessorIds: [Swift.String]?
    /// The role to add to the users or groups.
    /// This member is required.
    public var role: RepostspaceClientTypes.Role?
    /// The unique ID of the private re:Post.
    /// This member is required.
    public var spaceId: Swift.String?

    public init(
        accessorIds: [Swift.String]? = nil,
        role: RepostspaceClientTypes.Role? = nil,
        spaceId: Swift.String? = nil
    )
    {
        self.accessorIds = accessorIds
        self.role = role
        self.spaceId = spaceId
    }
}

extension RepostspaceClientTypes {

    /// An error that occurred during a batch operation.
    public struct BatchError: Swift.Sendable {
        /// The accessor identifier that's related to the error.
        /// This member is required.
        public var accessorId: Swift.String?
        /// The error code.
        /// This member is required.
        public var error: Swift.Int?
        /// Description of the error.
        /// This member is required.
        public var message: Swift.String?

        public init(
            accessorId: Swift.String? = nil,
            error: Swift.Int? = nil,
            message: Swift.String? = nil
        )
        {
            self.accessorId = accessorId
            self.error = error
            self.message = message
        }
    }
}

public struct BatchAddRoleOutput: Swift.Sendable {
    /// An array of successfully updated accessor identifiers.
    /// This member is required.
    public var addedAccessorIds: [Swift.String]?
    /// An array of errors that occurred when roles were added.
    /// This member is required.
    public var errors: [RepostspaceClientTypes.BatchError]?

    public init(
        addedAccessorIds: [Swift.String]? = nil,
        errors: [RepostspaceClientTypes.BatchError]? = nil
    )
    {
        self.addedAccessorIds = addedAccessorIds
        self.errors = errors
    }
}

public struct BatchRemoveRoleInput: Swift.Sendable {
    /// The user or group accessor identifiers to remove the role from.
    /// This member is required.
    public var accessorIds: [Swift.String]?
    /// The role to remove from the users or groups.
    /// This member is required.
    public var role: RepostspaceClientTypes.Role?
    /// The unique ID of the private re:Post.
    /// This member is required.
    public var spaceId: Swift.String?

    public init(
        accessorIds: [Swift.String]? = nil,
        role: RepostspaceClientTypes.Role? = nil,
        spaceId: Swift.String? = nil
    )
    {
        self.accessorIds = accessorIds
        self.role = role
        self.spaceId = spaceId
    }
}

public struct BatchRemoveRoleOutput: Swift.Sendable {
    /// An array of errors that occurred when roles were removed.
    /// This member is required.
    public var errors: [RepostspaceClientTypes.BatchError]?
    /// An array of successfully updated accessor identifiers.
    /// This member is required.
    public var removedAccessorIds: [Swift.String]?

    public init(
        errors: [RepostspaceClientTypes.BatchError]? = nil,
        removedAccessorIds: [Swift.String]? = nil
    )
    {
        self.errors = errors
        self.removedAccessorIds = removedAccessorIds
    }
}

extension RepostspaceClientTypes {

    public enum ConfigurationStatus: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case configured
        case unconfigured
        case sdkUnknown(Swift.String)

        public static var allCases: [ConfigurationStatus] {
            return [
                .configured,
                .unconfigured
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .configured: return "CONFIGURED"
            case .unconfigured: return "UNCONFIGURED"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

/// Updating or deleting a resource can cause an inconsistent state.
public struct ConflictException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// This member is required.
        public internal(set) var message: Swift.String? = nil
        /// The ID of the resource.
        /// This member is required.
        public internal(set) var resourceId: Swift.String? = nil
        /// The type of the resource.
        /// This member is required.
        public internal(set) var resourceType: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ConflictException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil,
        resourceId: Swift.String? = nil,
        resourceType: Swift.String? = nil
    )
    {
        self.properties.message = message
        self.properties.resourceId = resourceId
        self.properties.resourceType = resourceType
    }
}

/// Request would cause a service quota to be exceeded.
public struct ServiceQuotaExceededException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// This member is required.
        public internal(set) var message: Swift.String? = nil
        /// The code to identify the quota.
        /// This member is required.
        public internal(set) var quotaCode: Swift.String? = nil
        /// The id of the resource.
        /// This member is required.
        public internal(set) var resourceId: Swift.String? = nil
        /// The type of the resource.
        /// This member is required.
        public internal(set) var resourceType: Swift.String? = nil
        /// The code to identify the service.
        /// This member is required.
        public internal(set) var serviceCode: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ServiceQuotaExceededException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil,
        quotaCode: Swift.String? = nil,
        resourceId: Swift.String? = nil,
        resourceType: Swift.String? = nil,
        serviceCode: Swift.String? = nil
    )
    {
        self.properties.message = message
        self.properties.quotaCode = quotaCode
        self.properties.resourceId = resourceId
        self.properties.resourceType = resourceType
        self.properties.serviceCode = serviceCode
    }
}

extension RepostspaceClientTypes {

    public enum TierLevel: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case basic
        case standard
        case sdkUnknown(Swift.String)

        public static var allCases: [TierLevel] {
            return [
                .basic,
                .standard
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .basic: return "BASIC"
            case .standard: return "STANDARD"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

public struct CreateSpaceInput: Swift.Sendable {
    /// A description for the private re:Post. This is used only to help you identify this private re:Post.
    public var description: Swift.String?
    /// The name for the private re:Post. This must be unique in your account.
    /// This member is required.
    public var name: Swift.String?
    /// The IAM role that grants permissions to the private re:Post to convert unanswered questions into AWS support tickets.
    public var roleArn: Swift.String?
    /// The subdomain that you use to access your AWS re:Post Private private re:Post. All custom subdomains must be approved by AWS before use. In addition to your custom subdomain, all private re:Posts are issued an AWS generated subdomain for immediate use.
    /// This member is required.
    public var subdomain: Swift.String?
    /// The list of tags associated with the private re:Post.
    public var tags: [Swift.String: Swift.String]?
    /// The pricing tier for the private re:Post.
    /// This member is required.
    public var tier: RepostspaceClientTypes.TierLevel?
    /// The AWS KMS key ARN thatâ€™s used for the AWS KMS encryption. If you don't provide a key, your data is encrypted by default with a key that AWS owns and manages for you.
    public var userKMSKey: Swift.String?

    public init(
        description: Swift.String? = nil,
        name: Swift.String? = nil,
        roleArn: Swift.String? = nil,
        subdomain: Swift.String? = nil,
        tags: [Swift.String: Swift.String]? = nil,
        tier: RepostspaceClientTypes.TierLevel? = nil,
        userKMSKey: Swift.String? = nil
    )
    {
        self.description = description
        self.name = name
        self.roleArn = roleArn
        self.subdomain = subdomain
        self.tags = tags
        self.tier = tier
        self.userKMSKey = userKMSKey
    }
}

extension CreateSpaceInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateSpaceInput(roleArn: \(Swift.String(describing: roleArn)), subdomain: \(Swift.String(describing: subdomain)), tier: \(Swift.String(describing: tier)), userKMSKey: \(Swift.String(describing: userKMSKey)), description: \"CONTENT_REDACTED\", name: \"CONTENT_REDACTED\", tags: \"CONTENT_REDACTED\")"}
}

public struct CreateSpaceOutput: Swift.Sendable {
    /// The unique ID of the private re:Post.
    /// This member is required.
    public var spaceId: Swift.String?

    public init(
        spaceId: Swift.String? = nil
    )
    {
        self.spaceId = spaceId
    }
}

public struct DeleteSpaceInput: Swift.Sendable {
    /// The unique ID of the private re:Post.
    /// This member is required.
    public var spaceId: Swift.String?

    public init(
        spaceId: Swift.String? = nil
    )
    {
        self.spaceId = spaceId
    }
}

public struct DeregisterAdminInput: Swift.Sendable {
    /// The ID of the admin to remove.
    /// This member is required.
    public var adminId: Swift.String?
    /// The ID of the private re:Post to remove the admin from.
    /// This member is required.
    public var spaceId: Swift.String?

    public init(
        adminId: Swift.String? = nil,
        spaceId: Swift.String? = nil
    )
    {
        self.adminId = adminId
        self.spaceId = spaceId
    }
}

public struct GetSpaceInput: Swift.Sendable {
    /// The ID of the private re:Post.
    /// This member is required.
    public var spaceId: Swift.String?

    public init(
        spaceId: Swift.String? = nil
    )
    {
        self.spaceId = spaceId
    }
}

extension RepostspaceClientTypes {

    public enum VanityDomainStatus: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case approved
        case pending
        case unapproved
        case sdkUnknown(Swift.String)

        public static var allCases: [VanityDomainStatus] {
            return [
                .approved,
                .pending,
                .unapproved
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .approved: return "APPROVED"
            case .pending: return "PENDING"
            case .unapproved: return "UNAPPROVED"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

public struct GetSpaceOutput: Swift.Sendable {
    /// The ARN of the private re:Post.
    /// This member is required.
    public var arn: Swift.String?
    /// The Identity Center identifier for the Application Instance.
    /// This member is required.
    public var clientId: Swift.String?
    /// The configuration status of the private re:Post.
    /// This member is required.
    public var configurationStatus: RepostspaceClientTypes.ConfigurationStatus?
    /// The content size of the private re:Post.
    public var contentSize: Swift.Int?
    /// The date when the private re:Post was created.
    /// This member is required.
    public var createDateTime: Foundation.Date?
    /// The IAM role that grants permissions to the private re:Post to convert unanswered questions into AWS support tickets.
    public var customerRoleArn: Swift.String?
    /// The date when the private re:Post was deleted.
    public var deleteDateTime: Foundation.Date?
    /// The description of the private re:Post.
    public var description: Swift.String?
    /// The list of groups that are administrators of the private re:Post.
    @available(*, deprecated, message: "This property has been depracted and will be replaced by the roles property.")
    public var groupAdmins: [Swift.String]?
    /// The name of the private re:Post.
    /// This member is required.
    public var name: Swift.String?
    /// The AWS generated subdomain of the private re:Post
    /// This member is required.
    public var randomDomain: Swift.String?
    /// A map of accessor identifiers and their roles.
    public var roles: [Swift.String: [RepostspaceClientTypes.Role]]?
    /// The unique ID of the private re:Post.
    /// This member is required.
    public var spaceId: Swift.String?
    /// The creation or deletion status of the private re:Post.
    /// This member is required.
    public var status: Swift.String?
    /// The storage limit of the private re:Post.
    /// This member is required.
    public var storageLimit: Swift.Int?
    /// The pricing tier of the private re:Post.
    /// This member is required.
    public var tier: RepostspaceClientTypes.TierLevel?
    /// The list of users that are administrators of the private re:Post.
    @available(*, deprecated, message: "This property has been depracted and will be replaced by the roles property.")
    public var userAdmins: [Swift.String]?
    /// The number of users that have onboarded to the private re:Post.
    public var userCount: Swift.Int?
    /// The custom AWS KMS key ARN thatâ€™s used for the AWS KMS encryption.
    public var userKMSKey: Swift.String?
    /// The custom subdomain that you use to access your private re:Post. All custom subdomains must be approved by AWS before use.
    /// This member is required.
    public var vanityDomain: Swift.String?
    /// The approval status of the custom subdomain.
    /// This member is required.
    public var vanityDomainStatus: RepostspaceClientTypes.VanityDomainStatus?

    public init(
        arn: Swift.String? = nil,
        clientId: Swift.String? = nil,
        configurationStatus: RepostspaceClientTypes.ConfigurationStatus? = nil,
        contentSize: Swift.Int? = nil,
        createDateTime: Foundation.Date? = nil,
        customerRoleArn: Swift.String? = nil,
        deleteDateTime: Foundation.Date? = nil,
        description: Swift.String? = nil,
        groupAdmins: [Swift.String]? = nil,
        name: Swift.String? = nil,
        randomDomain: Swift.String? = nil,
        roles: [Swift.String: [RepostspaceClientTypes.Role]]? = nil,
        spaceId: Swift.String? = nil,
        status: Swift.String? = nil,
        storageLimit: Swift.Int? = nil,
        tier: RepostspaceClientTypes.TierLevel? = nil,
        userAdmins: [Swift.String]? = nil,
        userCount: Swift.Int? = nil,
        userKMSKey: Swift.String? = nil,
        vanityDomain: Swift.String? = nil,
        vanityDomainStatus: RepostspaceClientTypes.VanityDomainStatus? = nil
    )
    {
        self.arn = arn
        self.clientId = clientId
        self.configurationStatus = configurationStatus
        self.contentSize = contentSize
        self.createDateTime = createDateTime
        self.customerRoleArn = customerRoleArn
        self.deleteDateTime = deleteDateTime
        self.description = description
        self.groupAdmins = groupAdmins
        self.name = name
        self.randomDomain = randomDomain
        self.roles = roles
        self.spaceId = spaceId
        self.status = status
        self.storageLimit = storageLimit
        self.tier = tier
        self.userAdmins = userAdmins
        self.userCount = userCount
        self.userKMSKey = userKMSKey
        self.vanityDomain = vanityDomain
        self.vanityDomainStatus = vanityDomainStatus
    }
}

extension GetSpaceOutput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetSpaceOutput(arn: \(Swift.String(describing: arn)), clientId: \(Swift.String(describing: clientId)), configurationStatus: \(Swift.String(describing: configurationStatus)), contentSize: \(Swift.String(describing: contentSize)), createDateTime: \(Swift.String(describing: createDateTime)), customerRoleArn: \(Swift.String(describing: customerRoleArn)), deleteDateTime: \(Swift.String(describing: deleteDateTime)), groupAdmins: \(Swift.String(describing: groupAdmins)), randomDomain: \(Swift.String(describing: randomDomain)), roles: \(Swift.String(describing: roles)), spaceId: \(Swift.String(describing: spaceId)), status: \(Swift.String(describing: status)), storageLimit: \(Swift.String(describing: storageLimit)), tier: \(Swift.String(describing: tier)), userAdmins: \(Swift.String(describing: userAdmins)), userCount: \(Swift.String(describing: userCount)), userKMSKey: \(Swift.String(describing: userKMSKey)), vanityDomain: \(Swift.String(describing: vanityDomain)), vanityDomainStatus: \(Swift.String(describing: vanityDomainStatus)), description: \"CONTENT_REDACTED\", name: \"CONTENT_REDACTED\")"}
}

public struct ListSpacesInput: Swift.Sendable {
    /// The maximum number of private re:Posts to include in the results.
    public var maxResults: Swift.Int?
    /// The token for the next set of private re:Posts to return. You receive this token from a previous ListSpaces operation.
    public var nextToken: Swift.String?

    public init(
        maxResults: Swift.Int? = 10,
        nextToken: Swift.String? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

extension RepostspaceClientTypes {

    /// A structure that contains some information about a private re:Post in the account.
    public struct SpaceData: Swift.Sendable {
        /// The ARN of the private re:Post.
        /// This member is required.
        public var arn: Swift.String?
        /// The configuration status of the private re:Post.
        /// This member is required.
        public var configurationStatus: RepostspaceClientTypes.ConfigurationStatus?
        /// The content size of the private re:Post.
        public var contentSize: Swift.Int?
        /// The date when the private re:Post was created.
        /// This member is required.
        public var createDateTime: Foundation.Date?
        /// The date when the private re:Post was deleted.
        public var deleteDateTime: Foundation.Date?
        /// The description for the private re:Post. This is used only to help you identify this private re:Post.
        public var description: Swift.String?
        /// The name for the private re:Post.
        /// This member is required.
        public var name: Swift.String?
        /// The AWS generated subdomain of the private re:Post.
        /// This member is required.
        public var randomDomain: Swift.String?
        /// The unique ID of the private re:Post.
        /// This member is required.
        public var spaceId: Swift.String?
        /// The creation/deletion status of the private re:Post.
        /// This member is required.
        public var status: Swift.String?
        /// The storage limit of the private re:Post.
        /// This member is required.
        public var storageLimit: Swift.Int?
        /// The pricing tier of the private re:Post.
        /// This member is required.
        public var tier: RepostspaceClientTypes.TierLevel?
        /// The number of onboarded users to the private re:Post.
        public var userCount: Swift.Int?
        /// The custom AWS KMS key ARN thatâ€™s used for the AWS KMS encryption.
        public var userKMSKey: Swift.String?
        /// This custom subdomain that you use to access your private re:Post. All custom subdomains must be approved by AWS before use.
        /// This member is required.
        public var vanityDomain: Swift.String?
        /// This approval status of the custom subdomain.
        /// This member is required.
        public var vanityDomainStatus: RepostspaceClientTypes.VanityDomainStatus?

        public init(
            arn: Swift.String? = nil,
            configurationStatus: RepostspaceClientTypes.ConfigurationStatus? = nil,
            contentSize: Swift.Int? = nil,
            createDateTime: Foundation.Date? = nil,
            deleteDateTime: Foundation.Date? = nil,
            description: Swift.String? = nil,
            name: Swift.String? = nil,
            randomDomain: Swift.String? = nil,
            spaceId: Swift.String? = nil,
            status: Swift.String? = nil,
            storageLimit: Swift.Int? = nil,
            tier: RepostspaceClientTypes.TierLevel? = nil,
            userCount: Swift.Int? = nil,
            userKMSKey: Swift.String? = nil,
            vanityDomain: Swift.String? = nil,
            vanityDomainStatus: RepostspaceClientTypes.VanityDomainStatus? = nil
        )
        {
            self.arn = arn
            self.configurationStatus = configurationStatus
            self.contentSize = contentSize
            self.createDateTime = createDateTime
            self.deleteDateTime = deleteDateTime
            self.description = description
            self.name = name
            self.randomDomain = randomDomain
            self.spaceId = spaceId
            self.status = status
            self.storageLimit = storageLimit
            self.tier = tier
            self.userCount = userCount
            self.userKMSKey = userKMSKey
            self.vanityDomain = vanityDomain
            self.vanityDomainStatus = vanityDomainStatus
        }
    }
}

extension RepostspaceClientTypes.SpaceData: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "SpaceData(arn: \(Swift.String(describing: arn)), configurationStatus: \(Swift.String(describing: configurationStatus)), contentSize: \(Swift.String(describing: contentSize)), createDateTime: \(Swift.String(describing: createDateTime)), deleteDateTime: \(Swift.String(describing: deleteDateTime)), randomDomain: \(Swift.String(describing: randomDomain)), spaceId: \(Swift.String(describing: spaceId)), status: \(Swift.String(describing: status)), storageLimit: \(Swift.String(describing: storageLimit)), tier: \(Swift.String(describing: tier)), userCount: \(Swift.String(describing: userCount)), userKMSKey: \(Swift.String(describing: userKMSKey)), vanityDomain: \(Swift.String(describing: vanityDomain)), vanityDomainStatus: \(Swift.String(describing: vanityDomainStatus)), description: \"CONTENT_REDACTED\", name: \"CONTENT_REDACTED\")"}
}

public struct ListSpacesOutput: Swift.Sendable {
    /// The token that you use when you request the next set of private re:Posts.
    public var nextToken: Swift.String?
    /// An array of structures that contain some information about the private re:Posts in the account.
    /// This member is required.
    public var spaces: [RepostspaceClientTypes.SpaceData]?

    public init(
        nextToken: Swift.String? = nil,
        spaces: [RepostspaceClientTypes.SpaceData]? = nil
    )
    {
        self.nextToken = nextToken
        self.spaces = spaces
    }
}

public struct ListTagsForResourceInput: Swift.Sendable {
    /// The ARN of the resource that the tags are associated with.
    /// This member is required.
    public var resourceArn: Swift.String?

    public init(
        resourceArn: Swift.String? = nil
    )
    {
        self.resourceArn = resourceArn
    }
}

public struct ListTagsForResourceOutput: Swift.Sendable {
    /// The list of tags that are associated with the resource.
    public var tags: [Swift.String: Swift.String]?

    public init(
        tags: [Swift.String: Swift.String]? = nil
    )
    {
        self.tags = tags
    }
}

extension ListTagsForResourceOutput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListTagsForResourceOutput(tags: \"CONTENT_REDACTED\")"}
}

public struct RegisterAdminInput: Swift.Sendable {
    /// The ID of the administrator.
    /// This member is required.
    public var adminId: Swift.String?
    /// The ID of the private re:Post.
    /// This member is required.
    public var spaceId: Swift.String?

    public init(
        adminId: Swift.String? = nil,
        spaceId: Swift.String? = nil
    )
    {
        self.adminId = adminId
        self.spaceId = spaceId
    }
}

public struct SendInvitesInput: Swift.Sendable {
    /// The array of identifiers for the users and groups.
    /// This member is required.
    public var accessorIds: [Swift.String]?
    /// The body of the invite.
    /// This member is required.
    public var body: Swift.String?
    /// The ID of the private re:Post.
    /// This member is required.
    public var spaceId: Swift.String?
    /// The title of the invite.
    /// This member is required.
    public var title: Swift.String?

    public init(
        accessorIds: [Swift.String]? = nil,
        body: Swift.String? = nil,
        spaceId: Swift.String? = nil,
        title: Swift.String? = nil
    )
    {
        self.accessorIds = accessorIds
        self.body = body
        self.spaceId = spaceId
        self.title = title
    }
}

extension SendInvitesInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "SendInvitesInput(accessorIds: \(Swift.String(describing: accessorIds)), spaceId: \(Swift.String(describing: spaceId)), body: \"CONTENT_REDACTED\", title: \"CONTENT_REDACTED\")"}
}

public struct TagResourceInput: Swift.Sendable {
    /// The ARN of the resource that the tag is associated with.
    /// This member is required.
    public var resourceArn: Swift.String?
    /// The list of tag keys and values that must be associated with the resource. You can associate tag keys only, tags (key and values) only, or a combination of tag keys and tags.
    /// This member is required.
    public var tags: [Swift.String: Swift.String]?

    public init(
        resourceArn: Swift.String? = nil,
        tags: [Swift.String: Swift.String]? = nil
    )
    {
        self.resourceArn = resourceArn
        self.tags = tags
    }
}

extension TagResourceInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "TagResourceInput(resourceArn: \(Swift.String(describing: resourceArn)), tags: \"CONTENT_REDACTED\")"}
}

public struct TagResourceOutput: Swift.Sendable {

    public init() { }
}

public struct UntagResourceInput: Swift.Sendable {
    /// The ARN of the resource.
    /// This member is required.
    public var resourceArn: Swift.String?
    /// The key values of the tag.
    /// This member is required.
    public var tagKeys: [Swift.String]?

    public init(
        resourceArn: Swift.String? = nil,
        tagKeys: [Swift.String]? = nil
    )
    {
        self.resourceArn = resourceArn
        self.tagKeys = tagKeys
    }
}

public struct UntagResourceOutput: Swift.Sendable {

    public init() { }
}

public struct UpdateSpaceInput: Swift.Sendable {
    /// A description for the private re:Post. This is used only to help you identify this private re:Post.
    public var description: Swift.String?
    /// The IAM role that grants permissions to the private re:Post to convert unanswered questions into AWS support tickets.
    public var roleArn: Swift.String?
    /// The unique ID of this private re:Post.
    /// This member is required.
    public var spaceId: Swift.String?
    /// The pricing tier of this private re:Post.
    public var tier: RepostspaceClientTypes.TierLevel?

    public init(
        description: Swift.String? = nil,
        roleArn: Swift.String? = nil,
        spaceId: Swift.String? = nil,
        tier: RepostspaceClientTypes.TierLevel? = nil
    )
    {
        self.description = description
        self.roleArn = roleArn
        self.spaceId = spaceId
        self.tier = tier
    }
}

extension UpdateSpaceInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UpdateSpaceInput(roleArn: \(Swift.String(describing: roleArn)), spaceId: \(Swift.String(describing: spaceId)), tier: \(Swift.String(describing: tier)), description: \"CONTENT_REDACTED\")"}
}

extension BatchAddRoleInput {

    static func urlPathProvider(_ value: BatchAddRoleInput) -> Swift.String? {
        guard let spaceId = value.spaceId else {
            return nil
        }
        return "/spaces/\(spaceId.urlPercentEncoding())/roles"
    }
}

extension BatchRemoveRoleInput {

    static func urlPathProvider(_ value: BatchRemoveRoleInput) -> Swift.String? {
        guard let spaceId = value.spaceId else {
            return nil
        }
        return "/spaces/\(spaceId.urlPercentEncoding())/roles"
    }
}

extension CreateSpaceInput {

    static func urlPathProvider(_ value: CreateSpaceInput) -> Swift.String? {
        return "/spaces"
    }
}

extension DeleteSpaceInput {

    static func urlPathProvider(_ value: DeleteSpaceInput) -> Swift.String? {
        guard let spaceId = value.spaceId else {
            return nil
        }
        return "/spaces/\(spaceId.urlPercentEncoding())"
    }
}

extension DeregisterAdminInput {

    static func urlPathProvider(_ value: DeregisterAdminInput) -> Swift.String? {
        guard let spaceId = value.spaceId else {
            return nil
        }
        guard let adminId = value.adminId else {
            return nil
        }
        return "/spaces/\(spaceId.urlPercentEncoding())/admins/\(adminId.urlPercentEncoding())"
    }
}

extension GetSpaceInput {

    static func urlPathProvider(_ value: GetSpaceInput) -> Swift.String? {
        guard let spaceId = value.spaceId else {
            return nil
        }
        return "/spaces/\(spaceId.urlPercentEncoding())"
    }
}

extension ListSpacesInput {

    static func urlPathProvider(_ value: ListSpacesInput) -> Swift.String? {
        return "/spaces"
    }
}

extension ListSpacesInput {

    static func queryItemProvider(_ value: ListSpacesInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        if let nextToken = value.nextToken {
            let nextTokenQueryItem = Smithy.URIQueryItem(name: "nextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
            items.append(nextTokenQueryItem)
        }
        if let maxResults = value.maxResults {
            let maxResultsQueryItem = Smithy.URIQueryItem(name: "maxResults".urlPercentEncoding(), value: Swift.String(maxResults).urlPercentEncoding())
            items.append(maxResultsQueryItem)
        }
        return items
    }
}

extension ListTagsForResourceInput {

    static func urlPathProvider(_ value: ListTagsForResourceInput) -> Swift.String? {
        guard let resourceArn = value.resourceArn else {
            return nil
        }
        return "/tags/\(resourceArn.urlPercentEncoding())"
    }
}

extension RegisterAdminInput {

    static func urlPathProvider(_ value: RegisterAdminInput) -> Swift.String? {
        guard let spaceId = value.spaceId else {
            return nil
        }
        guard let adminId = value.adminId else {
            return nil
        }
        return "/spaces/\(spaceId.urlPercentEncoding())/admins/\(adminId.urlPercentEncoding())"
    }
}

extension SendInvitesInput {

    static func urlPathProvider(_ value: SendInvitesInput) -> Swift.String? {
        guard let spaceId = value.spaceId else {
            return nil
        }
        return "/spaces/\(spaceId.urlPercentEncoding())/invite"
    }
}

extension TagResourceInput {

    static func urlPathProvider(_ value: TagResourceInput) -> Swift.String? {
        guard let resourceArn = value.resourceArn else {
            return nil
        }
        return "/tags/\(resourceArn.urlPercentEncoding())"
    }
}

extension UntagResourceInput {

    static func urlPathProvider(_ value: UntagResourceInput) -> Swift.String? {
        guard let resourceArn = value.resourceArn else {
            return nil
        }
        return "/tags/\(resourceArn.urlPercentEncoding())"
    }
}

extension UntagResourceInput {

    static func queryItemProvider(_ value: UntagResourceInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        guard let tagKeys = value.tagKeys else {
            let message = "Creating a URL Query Item failed. tagKeys is required and must not be nil."
            throw Smithy.ClientError.unknownError(message)
        }
        tagKeys.forEach { queryItemValue in
            let queryItem = Smithy.URIQueryItem(name: "tagKeys".urlPercentEncoding(), value: Swift.String(queryItemValue).urlPercentEncoding())
            items.append(queryItem)
        }
        return items
    }
}

extension UpdateSpaceInput {

    static func urlPathProvider(_ value: UpdateSpaceInput) -> Swift.String? {
        guard let spaceId = value.spaceId else {
            return nil
        }
        return "/spaces/\(spaceId.urlPercentEncoding())"
    }
}

extension BatchAddRoleInput {

    static func write(value: BatchAddRoleInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["accessorIds"].writeList(value.accessorIds, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["role"].write(value.role)
    }
}

extension BatchRemoveRoleInput {

    static func write(value: BatchRemoveRoleInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["accessorIds"].writeList(value.accessorIds, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["role"].write(value.role)
    }
}

extension CreateSpaceInput {

    static func write(value: CreateSpaceInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["description"].write(value.description)
        try writer["name"].write(value.name)
        try writer["roleArn"].write(value.roleArn)
        try writer["subdomain"].write(value.subdomain)
        try writer["tags"].writeMap(value.tags, valueWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        try writer["tier"].write(value.tier)
        try writer["userKMSKey"].write(value.userKMSKey)
    }
}

extension SendInvitesInput {

    static func write(value: SendInvitesInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["accessorIds"].writeList(value.accessorIds, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["body"].write(value.body)
        try writer["title"].write(value.title)
    }
}

extension TagResourceInput {

    static func write(value: TagResourceInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["tags"].writeMap(value.tags, valueWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
    }
}

extension UpdateSpaceInput {

    static func write(value: UpdateSpaceInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["description"].write(value.description)
        try writer["roleArn"].write(value.roleArn)
        try writer["tier"].write(value.tier)
    }
}

extension BatchAddRoleOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> BatchAddRoleOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = BatchAddRoleOutput()
        value.addedAccessorIds = try reader["addedAccessorIds"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        value.errors = try reader["errors"].readListIfPresent(memberReadingClosure: RepostspaceClientTypes.BatchError.read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        return value
    }
}

extension BatchRemoveRoleOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> BatchRemoveRoleOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = BatchRemoveRoleOutput()
        value.errors = try reader["errors"].readListIfPresent(memberReadingClosure: RepostspaceClientTypes.BatchError.read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        value.removedAccessorIds = try reader["removedAccessorIds"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        return value
    }
}

extension CreateSpaceOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateSpaceOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateSpaceOutput()
        value.spaceId = try reader["spaceId"].readIfPresent() ?? ""
        return value
    }
}

extension DeleteSpaceOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteSpaceOutput {
        return DeleteSpaceOutput()
    }
}

extension DeregisterAdminOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeregisterAdminOutput {
        return DeregisterAdminOutput()
    }
}

extension GetSpaceOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetSpaceOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetSpaceOutput()
        value.arn = try reader["arn"].readIfPresent() ?? ""
        value.clientId = try reader["clientId"].readIfPresent() ?? ""
        value.configurationStatus = try reader["configurationStatus"].readIfPresent() ?? .sdkUnknown("")
        value.contentSize = try reader["contentSize"].readIfPresent()
        value.createDateTime = try reader["createDateTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.dateTime) ?? SmithyTimestamps.TimestampFormatter(format: .dateTime).date(from: "1970-01-01T00:00:00Z")
        value.customerRoleArn = try reader["customerRoleArn"].readIfPresent()
        value.deleteDateTime = try reader["deleteDateTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.dateTime)
        value.description = try reader["description"].readIfPresent()
        value.groupAdmins = try reader["groupAdmins"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.name = try reader["name"].readIfPresent() ?? ""
        value.randomDomain = try reader["randomDomain"].readIfPresent() ?? ""
        value.roles = try reader["roles"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.listReadingClosure(memberReadingClosure: SmithyReadWrite.ReadingClosureBox<RepostspaceClientTypes.Role>().read(from:), memberNodeInfo: "member", isFlattened: false), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        value.spaceId = try reader["spaceId"].readIfPresent() ?? ""
        value.status = try reader["status"].readIfPresent() ?? ""
        value.storageLimit = try reader["storageLimit"].readIfPresent() ?? 0
        value.tier = try reader["tier"].readIfPresent() ?? .sdkUnknown("")
        value.userAdmins = try reader["userAdmins"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.userCount = try reader["userCount"].readIfPresent()
        value.userKMSKey = try reader["userKMSKey"].readIfPresent()
        value.vanityDomain = try reader["vanityDomain"].readIfPresent() ?? ""
        value.vanityDomainStatus = try reader["vanityDomainStatus"].readIfPresent() ?? .sdkUnknown("")
        return value
    }
}

extension ListSpacesOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListSpacesOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListSpacesOutput()
        value.nextToken = try reader["nextToken"].readIfPresent()
        value.spaces = try reader["spaces"].readListIfPresent(memberReadingClosure: RepostspaceClientTypes.SpaceData.read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        return value
    }
}

extension ListTagsForResourceOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListTagsForResourceOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListTagsForResourceOutput()
        value.tags = try reader["tags"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        return value
    }
}

extension RegisterAdminOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> RegisterAdminOutput {
        return RegisterAdminOutput()
    }
}

extension SendInvitesOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> SendInvitesOutput {
        return SendInvitesOutput()
    }
}

extension TagResourceOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> TagResourceOutput {
        return TagResourceOutput()
    }
}

extension UntagResourceOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UntagResourceOutput {
        return UntagResourceOutput()
    }
}

extension UpdateSpaceOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdateSpaceOutput {
        return UpdateSpaceOutput()
    }
}

enum BatchAddRoleOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum BatchRemoveRoleOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateSpaceOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceQuotaExceededException": return try ServiceQuotaExceededException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteSpaceOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeregisterAdminOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetSpaceOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListSpacesOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListTagsForResourceOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum RegisterAdminOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum SendInvitesOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum TagResourceOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UntagResourceOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdateSpaceOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

extension ResourceNotFoundException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> ResourceNotFoundException {
        let reader = baseError.errorBodyReader
        var value = ResourceNotFoundException()
        value.properties.message = try reader["message"].readIfPresent() ?? ""
        value.properties.resourceId = try reader["resourceId"].readIfPresent() ?? ""
        value.properties.resourceType = try reader["resourceType"].readIfPresent() ?? ""
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension InternalServerException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> InternalServerException {
        let reader = baseError.errorBodyReader
        let httpResponse = baseError.httpResponse
        var value = InternalServerException()
        if let retryAfterSecondsHeaderValue = httpResponse.headers.value(for: "Retry-After") {
            value.properties.retryAfterSeconds = Swift.Int(retryAfterSecondsHeaderValue) ?? 0
        }
        value.properties.message = try reader["message"].readIfPresent() ?? ""
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ValidationException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> ValidationException {
        let reader = baseError.errorBodyReader
        var value = ValidationException()
        value.properties.fieldList = try reader["fieldList"].readListIfPresent(memberReadingClosure: RepostspaceClientTypes.ValidationExceptionField.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.properties.message = try reader["message"].readIfPresent() ?? ""
        value.properties.reason = try reader["reason"].readIfPresent() ?? .sdkUnknown("")
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ThrottlingException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> ThrottlingException {
        let reader = baseError.errorBodyReader
        let httpResponse = baseError.httpResponse
        var value = ThrottlingException()
        if let retryAfterSecondsHeaderValue = httpResponse.headers.value(for: "Retry-After") {
            value.properties.retryAfterSeconds = Swift.Int(retryAfterSecondsHeaderValue) ?? 0
        }
        value.properties.message = try reader["message"].readIfPresent() ?? ""
        value.properties.quotaCode = try reader["quotaCode"].readIfPresent()
        value.properties.serviceCode = try reader["serviceCode"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension AccessDeniedException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> AccessDeniedException {
        let reader = baseError.errorBodyReader
        var value = AccessDeniedException()
        value.properties.message = try reader["message"].readIfPresent() ?? ""
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ConflictException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> ConflictException {
        let reader = baseError.errorBodyReader
        var value = ConflictException()
        value.properties.message = try reader["message"].readIfPresent() ?? ""
        value.properties.resourceId = try reader["resourceId"].readIfPresent() ?? ""
        value.properties.resourceType = try reader["resourceType"].readIfPresent() ?? ""
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ServiceQuotaExceededException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> ServiceQuotaExceededException {
        let reader = baseError.errorBodyReader
        var value = ServiceQuotaExceededException()
        value.properties.message = try reader["message"].readIfPresent() ?? ""
        value.properties.quotaCode = try reader["quotaCode"].readIfPresent() ?? ""
        value.properties.resourceId = try reader["resourceId"].readIfPresent() ?? ""
        value.properties.resourceType = try reader["resourceType"].readIfPresent() ?? ""
        value.properties.serviceCode = try reader["serviceCode"].readIfPresent() ?? ""
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension RepostspaceClientTypes.BatchError {

    static func read(from reader: SmithyJSON.Reader) throws -> RepostspaceClientTypes.BatchError {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = RepostspaceClientTypes.BatchError()
        value.accessorId = try reader["accessorId"].readIfPresent() ?? ""
        value.error = try reader["error"].readIfPresent() ?? 0
        value.message = try reader["message"].readIfPresent() ?? ""
        return value
    }
}

extension RepostspaceClientTypes.SpaceData {

    static func read(from reader: SmithyJSON.Reader) throws -> RepostspaceClientTypes.SpaceData {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = RepostspaceClientTypes.SpaceData()
        value.spaceId = try reader["spaceId"].readIfPresent() ?? ""
        value.arn = try reader["arn"].readIfPresent() ?? ""
        value.name = try reader["name"].readIfPresent() ?? ""
        value.description = try reader["description"].readIfPresent()
        value.status = try reader["status"].readIfPresent() ?? ""
        value.configurationStatus = try reader["configurationStatus"].readIfPresent() ?? .sdkUnknown("")
        value.vanityDomainStatus = try reader["vanityDomainStatus"].readIfPresent() ?? .sdkUnknown("")
        value.vanityDomain = try reader["vanityDomain"].readIfPresent() ?? ""
        value.randomDomain = try reader["randomDomain"].readIfPresent() ?? ""
        value.tier = try reader["tier"].readIfPresent() ?? .sdkUnknown("")
        value.storageLimit = try reader["storageLimit"].readIfPresent() ?? 0
        value.createDateTime = try reader["createDateTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.dateTime) ?? SmithyTimestamps.TimestampFormatter(format: .dateTime).date(from: "1970-01-01T00:00:00Z")
        value.deleteDateTime = try reader["deleteDateTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.dateTime)
        value.userKMSKey = try reader["userKMSKey"].readIfPresent()
        value.userCount = try reader["userCount"].readIfPresent()
        value.contentSize = try reader["contentSize"].readIfPresent()
        return value
    }
}

extension RepostspaceClientTypes.ValidationExceptionField {

    static func read(from reader: SmithyJSON.Reader) throws -> RepostspaceClientTypes.ValidationExceptionField {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = RepostspaceClientTypes.ValidationExceptionField()
        value.name = try reader["name"].readIfPresent() ?? ""
        value.message = try reader["message"].readIfPresent() ?? ""
        return value
    }
}

public enum RepostspaceClientTypes {}
