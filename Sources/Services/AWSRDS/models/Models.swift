// Code generated by smithy-swift-codegen. DO NOT EDIT!
import AWSClientRuntime
import ClientRuntime
import SmithyReadWrite
import SmithyXML

extension RDSClientTypes.AccountQuota: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accountQuotaName = "AccountQuotaName"
        case max = "Max"
        case used = "Used"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let accountQuotaName = accountQuotaName {
            try container.encode(accountQuotaName, forKey: ClientRuntime.Key("AccountQuotaName"))
        }
        if let max = max {
            try container.encode(max, forKey: ClientRuntime.Key("Max"))
        }
        if let used = used {
            try container.encode(used, forKey: ClientRuntime.Key("Used"))
        }
    }

    static var readingClosure: SmithyReadWrite.ReadingClosure<RDSClientTypes.AccountQuota, SmithyXML.Reader> {
        return { reader in
            guard reader.content != nil else { return nil }
            var value = RDSClientTypes.AccountQuota()
            value.accountQuotaName = try reader["AccountQuotaName"].readIfPresent()
            value.used = try reader["Used"].readIfPresent()
            value.max = try reader["Max"].readIfPresent()
            return value
        }
    }
}

extension RDSClientTypes {
    /// Describes a quota for an Amazon Web Services account. The following are account quotas:
    ///
    /// * AllocatedStorage - The total allocated storage per account, in GiB. The used value is the total allocated storage in the account, in GiB.
    ///
    /// * AuthorizationsPerDBSecurityGroup - The number of ingress rules per DB security group. The used value is the highest number of ingress rules in a DB security group in the account. Other DB security groups in the account might have a lower number of ingress rules.
    ///
    /// * CustomEndpointsPerDBCluster - The number of custom endpoints per DB cluster. The used value is the highest number of custom endpoints in a DB clusters in the account. Other DB clusters in the account might have a lower number of custom endpoints.
    ///
    /// * DBClusterParameterGroups - The number of DB cluster parameter groups per account, excluding default parameter groups. The used value is the count of nondefault DB cluster parameter groups in the account.
    ///
    /// * DBClusterRoles - The number of associated Amazon Web Services Identity and Access Management (IAM) roles per DB cluster. The used value is the highest number of associated IAM roles for a DB cluster in the account. Other DB clusters in the account might have a lower number of associated IAM roles.
    ///
    /// * DBClusters - The number of DB clusters per account. The used value is the count of DB clusters in the account.
    ///
    /// * DBInstanceRoles - The number of associated IAM roles per DB instance. The used value is the highest number of associated IAM roles for a DB instance in the account. Other DB instances in the account might have a lower number of associated IAM roles.
    ///
    /// * DBInstances - The number of DB instances per account. The used value is the count of the DB instances in the account. Amazon RDS DB instances, Amazon Aurora DB instances, Amazon Neptune instances, and Amazon DocumentDB instances apply to this quota.
    ///
    /// * DBParameterGroups - The number of DB parameter groups per account, excluding default parameter groups. The used value is the count of nondefault DB parameter groups in the account.
    ///
    /// * DBSecurityGroups - The number of DB security groups (not VPC security groups) per account, excluding the default security group. The used value is the count of nondefault DB security groups in the account.
    ///
    /// * DBSubnetGroups - The number of DB subnet groups per account. The used value is the count of the DB subnet groups in the account.
    ///
    /// * EventSubscriptions - The number of event subscriptions per account. The used value is the count of the event subscriptions in the account.
    ///
    /// * ManualClusterSnapshots - The number of manual DB cluster snapshots per account. The used value is the count of the manual DB cluster snapshots in the account.
    ///
    /// * ManualSnapshots - The number of manual DB instance snapshots per account. The used value is the count of the manual DB instance snapshots in the account.
    ///
    /// * OptionGroups - The number of DB option groups per account, excluding default option groups. The used value is the count of nondefault DB option groups in the account.
    ///
    /// * ReadReplicasPerMaster - The number of read replicas per DB instance. The used value is the highest number of read replicas for a DB instance in the account. Other DB instances in the account might have a lower number of read replicas.
    ///
    /// * ReservedDBInstances - The number of reserved DB instances per account. The used value is the count of the active reserved DB instances in the account.
    ///
    /// * SubnetsPerDBSubnetGroup - The number of subnets per DB subnet group. The used value is highest number of subnets for a DB subnet group in the account. Other DB subnet groups in the account might have a lower number of subnets.
    ///
    ///
    /// For more information, see [Quotas for Amazon RDS](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_Limits.html) in the Amazon RDS User Guide and [Quotas for Amazon Aurora](https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_Limits.html) in the Amazon Aurora User Guide.
    public struct AccountQuota: Swift.Equatable {
        /// The name of the Amazon RDS quota for this Amazon Web Services account.
        public var accountQuotaName: Swift.String?
        /// The maximum allowed value for the quota.
        public var max: Swift.Int?
        /// The amount currently used toward the quota maximum.
        public var used: Swift.Int?

        public init(
            accountQuotaName: Swift.String? = nil,
            max: Swift.Int? = nil,
            used: Swift.Int? = nil
        )
        {
            self.accountQuotaName = accountQuotaName
            self.max = max
            self.used = used
        }
    }

}

extension RDSClientTypes {
    public enum ActivityStreamMode: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case async
        case sync
        case sdkUnknown(Swift.String)

        public static var allCases: [ActivityStreamMode] {
            return [
                .async,
                .sync,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .async: return "async"
            case .sync: return "sync"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ActivityStreamMode(rawValue: rawValue) ?? ActivityStreamMode.sdkUnknown(rawValue)
        }
    }
}

extension RDSClientTypes {
    public enum ActivityStreamPolicyStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case locked
        case lockingPolicy
        case unlocked
        case unlockingPolicy
        case sdkUnknown(Swift.String)

        public static var allCases: [ActivityStreamPolicyStatus] {
            return [
                .locked,
                .lockingPolicy,
                .unlocked,
                .unlockingPolicy,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .locked: return "locked"
            case .lockingPolicy: return "locking-policy"
            case .unlocked: return "unlocked"
            case .unlockingPolicy: return "unlocking-policy"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ActivityStreamPolicyStatus(rawValue: rawValue) ?? ActivityStreamPolicyStatus.sdkUnknown(rawValue)
        }
    }
}

extension RDSClientTypes {
    public enum ActivityStreamStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case started
        case starting
        case stopped
        case stopping
        case sdkUnknown(Swift.String)

        public static var allCases: [ActivityStreamStatus] {
            return [
                .started,
                .starting,
                .stopped,
                .stopping,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .started: return "started"
            case .starting: return "starting"
            case .stopped: return "stopped"
            case .stopping: return "stopping"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ActivityStreamStatus(rawValue: rawValue) ?? ActivityStreamStatus.sdkUnknown(rawValue)
        }
    }
}

extension AddRoleToDBClusterInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dbClusterIdentifier = "DBClusterIdentifier"
        case featureName = "FeatureName"
        case roleArn = "RoleArn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let dbClusterIdentifier = dbClusterIdentifier {
            try container.encode(dbClusterIdentifier, forKey: ClientRuntime.Key("DBClusterIdentifier"))
        }
        if let featureName = featureName {
            try container.encode(featureName, forKey: ClientRuntime.Key("FeatureName"))
        }
        if let roleArn = roleArn {
            try container.encode(roleArn, forKey: ClientRuntime.Key("RoleArn"))
        }
        try container.encode("AddRoleToDBCluster", forKey:ClientRuntime.Key("Action"))
        try container.encode("2014-10-31", forKey:ClientRuntime.Key("Version"))
    }
}

extension AddRoleToDBClusterInput {

    static func urlPathProvider(_ value: AddRoleToDBClusterInput) -> Swift.String? {
        return "/"
    }
}

public struct AddRoleToDBClusterInput: Swift.Equatable {
    /// The name of the DB cluster to associate the IAM role with.
    /// This member is required.
    public var dbClusterIdentifier: Swift.String?
    /// The name of the feature for the DB cluster that the IAM role is to be associated with. For information about supported feature names, see [DBEngineVersion].
    public var featureName: Swift.String?
    /// The Amazon Resource Name (ARN) of the IAM role to associate with the Aurora DB cluster, for example arn:aws:iam::123456789012:role/AuroraAccessRole.
    /// This member is required.
    public var roleArn: Swift.String?

    public init(
        dbClusterIdentifier: Swift.String? = nil,
        featureName: Swift.String? = nil,
        roleArn: Swift.String? = nil
    )
    {
        self.dbClusterIdentifier = dbClusterIdentifier
        self.featureName = featureName
        self.roleArn = roleArn
    }
}

extension AddRoleToDBClusterOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<AddRoleToDBClusterOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            return AddRoleToDBClusterOutput()
        }
    }
}

public struct AddRoleToDBClusterOutput: Swift.Equatable {

    public init() { }
}

enum AddRoleToDBClusterOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "DBClusterNotFoundFault": return try await DBClusterNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "DBClusterRoleAlreadyExists": return try await DBClusterRoleAlreadyExistsFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "DBClusterRoleQuotaExceeded": return try await DBClusterRoleQuotaExceededFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "InvalidDBClusterStateFault": return try await InvalidDBClusterStateFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension AddRoleToDBInstanceInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dbInstanceIdentifier = "DBInstanceIdentifier"
        case featureName = "FeatureName"
        case roleArn = "RoleArn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let dbInstanceIdentifier = dbInstanceIdentifier {
            try container.encode(dbInstanceIdentifier, forKey: ClientRuntime.Key("DBInstanceIdentifier"))
        }
        if let featureName = featureName {
            try container.encode(featureName, forKey: ClientRuntime.Key("FeatureName"))
        }
        if let roleArn = roleArn {
            try container.encode(roleArn, forKey: ClientRuntime.Key("RoleArn"))
        }
        try container.encode("AddRoleToDBInstance", forKey:ClientRuntime.Key("Action"))
        try container.encode("2014-10-31", forKey:ClientRuntime.Key("Version"))
    }
}

extension AddRoleToDBInstanceInput {

    static func urlPathProvider(_ value: AddRoleToDBInstanceInput) -> Swift.String? {
        return "/"
    }
}

public struct AddRoleToDBInstanceInput: Swift.Equatable {
    /// The name of the DB instance to associate the IAM role with.
    /// This member is required.
    public var dbInstanceIdentifier: Swift.String?
    /// The name of the feature for the DB instance that the IAM role is to be associated with. For information about supported feature names, see [DBEngineVersion].
    /// This member is required.
    public var featureName: Swift.String?
    /// The Amazon Resource Name (ARN) of the IAM role to associate with the DB instance, for example arn:aws:iam::123456789012:role/AccessRole.
    /// This member is required.
    public var roleArn: Swift.String?

    public init(
        dbInstanceIdentifier: Swift.String? = nil,
        featureName: Swift.String? = nil,
        roleArn: Swift.String? = nil
    )
    {
        self.dbInstanceIdentifier = dbInstanceIdentifier
        self.featureName = featureName
        self.roleArn = roleArn
    }
}

extension AddRoleToDBInstanceOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<AddRoleToDBInstanceOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            return AddRoleToDBInstanceOutput()
        }
    }
}

public struct AddRoleToDBInstanceOutput: Swift.Equatable {

    public init() { }
}

enum AddRoleToDBInstanceOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "DBInstanceNotFound": return try await DBInstanceNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "DBInstanceRoleAlreadyExists": return try await DBInstanceRoleAlreadyExistsFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "DBInstanceRoleQuotaExceeded": return try await DBInstanceRoleQuotaExceededFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "InvalidDBInstanceState": return try await InvalidDBInstanceStateFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension AddSourceIdentifierToSubscriptionInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case sourceIdentifier = "SourceIdentifier"
        case subscriptionName = "SubscriptionName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let sourceIdentifier = sourceIdentifier {
            try container.encode(sourceIdentifier, forKey: ClientRuntime.Key("SourceIdentifier"))
        }
        if let subscriptionName = subscriptionName {
            try container.encode(subscriptionName, forKey: ClientRuntime.Key("SubscriptionName"))
        }
        try container.encode("AddSourceIdentifierToSubscription", forKey:ClientRuntime.Key("Action"))
        try container.encode("2014-10-31", forKey:ClientRuntime.Key("Version"))
    }
}

extension AddSourceIdentifierToSubscriptionInput {

    static func urlPathProvider(_ value: AddSourceIdentifierToSubscriptionInput) -> Swift.String? {
        return "/"
    }
}

///
public struct AddSourceIdentifierToSubscriptionInput: Swift.Equatable {
    /// The identifier of the event source to be added. Constraints:
    ///
    /// * If the source type is a DB instance, a DBInstanceIdentifier value must be supplied.
    ///
    /// * If the source type is a DB cluster, a DBClusterIdentifier value must be supplied.
    ///
    /// * If the source type is a DB parameter group, a DBParameterGroupName value must be supplied.
    ///
    /// * If the source type is a DB security group, a DBSecurityGroupName value must be supplied.
    ///
    /// * If the source type is a DB snapshot, a DBSnapshotIdentifier value must be supplied.
    ///
    /// * If the source type is a DB cluster snapshot, a DBClusterSnapshotIdentifier value must be supplied.
    ///
    /// * If the source type is an RDS Proxy, a DBProxyName value must be supplied.
    /// This member is required.
    public var sourceIdentifier: Swift.String?
    /// The name of the RDS event notification subscription you want to add a source identifier to.
    /// This member is required.
    public var subscriptionName: Swift.String?

    public init(
        sourceIdentifier: Swift.String? = nil,
        subscriptionName: Swift.String? = nil
    )
    {
        self.sourceIdentifier = sourceIdentifier
        self.subscriptionName = subscriptionName
    }
}

extension AddSourceIdentifierToSubscriptionOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<AddSourceIdentifierToSubscriptionOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["AddSourceIdentifierToSubscriptionResult"]
            var value = AddSourceIdentifierToSubscriptionOutput()
            value.eventSubscription = try reader["EventSubscription"].readIfPresent(readingClosure: RDSClientTypes.EventSubscription.readingClosure)
            return value
        }
    }
}

public struct AddSourceIdentifierToSubscriptionOutput: Swift.Equatable {
    /// Contains the results of a successful invocation of the DescribeEventSubscriptions action.
    public var eventSubscription: RDSClientTypes.EventSubscription?

    public init(
        eventSubscription: RDSClientTypes.EventSubscription? = nil
    )
    {
        self.eventSubscription = eventSubscription
    }
}

enum AddSourceIdentifierToSubscriptionOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "SourceNotFound": return try await SourceNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "SubscriptionNotFound": return try await SubscriptionNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension AddTagsToResourceInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case resourceName = "ResourceName"
        case tags = "Tags"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let resourceName = resourceName {
            try container.encode(resourceName, forKey: ClientRuntime.Key("ResourceName"))
        }
        if let tags = tags {
            if !tags.isEmpty {
                var tagsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Tags"))
                for (index0, tag0) in tags.enumerated() {
                    try tagsContainer.encode(tag0, forKey: ClientRuntime.Key("Tag.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var tagsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Tags"))
                try tagsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        try container.encode("AddTagsToResource", forKey:ClientRuntime.Key("Action"))
        try container.encode("2014-10-31", forKey:ClientRuntime.Key("Version"))
    }
}

extension AddTagsToResourceInput {

    static func urlPathProvider(_ value: AddTagsToResourceInput) -> Swift.String? {
        return "/"
    }
}

///
public struct AddTagsToResourceInput: Swift.Equatable {
    /// The Amazon RDS resource that the tags are added to. This value is an Amazon Resource Name (ARN). For information about creating an ARN, see [ Constructing an RDS Amazon Resource Name (ARN)](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.ARN.html#USER_Tagging.ARN.Constructing).
    /// This member is required.
    public var resourceName: Swift.String?
    /// The tags to be assigned to the Amazon RDS resource.
    /// This member is required.
    public var tags: [RDSClientTypes.Tag]?

    public init(
        resourceName: Swift.String? = nil,
        tags: [RDSClientTypes.Tag]? = nil
    )
    {
        self.resourceName = resourceName
        self.tags = tags
    }
}

extension AddTagsToResourceOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<AddTagsToResourceOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            return AddTagsToResourceOutput()
        }
    }
}

public struct AddTagsToResourceOutput: Swift.Equatable {

    public init() { }
}

enum AddTagsToResourceOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "BlueGreenDeploymentNotFoundFault": return try await BlueGreenDeploymentNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "DBClusterNotFoundFault": return try await DBClusterNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "DBInstanceNotFound": return try await DBInstanceNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "DBProxyNotFoundFault": return try await DBProxyNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "DBProxyTargetGroupNotFoundFault": return try await DBProxyTargetGroupNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "DBSnapshotNotFound": return try await DBSnapshotNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "DBSnapshotTenantDatabaseNotFoundFault": return try await DBSnapshotTenantDatabaseNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "IntegrationNotFoundFault": return try await IntegrationNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "TenantDatabaseNotFound": return try await TenantDatabaseNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension RDSClientTypes {
    public enum ApplyMethod: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case immediate
        case pendingReboot
        case sdkUnknown(Swift.String)

        public static var allCases: [ApplyMethod] {
            return [
                .immediate,
                .pendingReboot,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .immediate: return "immediate"
            case .pendingReboot: return "pending-reboot"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ApplyMethod(rawValue: rawValue) ?? ApplyMethod.sdkUnknown(rawValue)
        }
    }
}

extension ApplyPendingMaintenanceActionInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case applyAction = "ApplyAction"
        case optInType = "OptInType"
        case resourceIdentifier = "ResourceIdentifier"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let applyAction = applyAction {
            try container.encode(applyAction, forKey: ClientRuntime.Key("ApplyAction"))
        }
        if let optInType = optInType {
            try container.encode(optInType, forKey: ClientRuntime.Key("OptInType"))
        }
        if let resourceIdentifier = resourceIdentifier {
            try container.encode(resourceIdentifier, forKey: ClientRuntime.Key("ResourceIdentifier"))
        }
        try container.encode("ApplyPendingMaintenanceAction", forKey:ClientRuntime.Key("Action"))
        try container.encode("2014-10-31", forKey:ClientRuntime.Key("Version"))
    }
}

extension ApplyPendingMaintenanceActionInput {

    static func urlPathProvider(_ value: ApplyPendingMaintenanceActionInput) -> Swift.String? {
        return "/"
    }
}

///
public struct ApplyPendingMaintenanceActionInput: Swift.Equatable {
    /// The pending maintenance action to apply to this resource. Valid Values: system-update, db-upgrade, hardware-maintenance, ca-certificate-rotation
    /// This member is required.
    public var applyAction: Swift.String?
    /// A value that specifies the type of opt-in request, or undoes an opt-in request. An opt-in request of type immediate can't be undone. Valid Values:
    ///
    /// * immediate - Apply the maintenance action immediately.
    ///
    /// * next-maintenance - Apply the maintenance action during the next maintenance window for the resource.
    ///
    /// * undo-opt-in - Cancel any existing next-maintenance opt-in requests.
    /// This member is required.
    public var optInType: Swift.String?
    /// The RDS Amazon Resource Name (ARN) of the resource that the pending maintenance action applies to. For information about creating an ARN, see [ Constructing an RDS Amazon Resource Name (ARN)](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.ARN.html#USER_Tagging.ARN.Constructing).
    /// This member is required.
    public var resourceIdentifier: Swift.String?

    public init(
        applyAction: Swift.String? = nil,
        optInType: Swift.String? = nil,
        resourceIdentifier: Swift.String? = nil
    )
    {
        self.applyAction = applyAction
        self.optInType = optInType
        self.resourceIdentifier = resourceIdentifier
    }
}

extension ApplyPendingMaintenanceActionOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<ApplyPendingMaintenanceActionOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["ApplyPendingMaintenanceActionResult"]
            var value = ApplyPendingMaintenanceActionOutput()
            value.resourcePendingMaintenanceActions = try reader["ResourcePendingMaintenanceActions"].readIfPresent(readingClosure: RDSClientTypes.ResourcePendingMaintenanceActions.readingClosure)
            return value
        }
    }
}

public struct ApplyPendingMaintenanceActionOutput: Swift.Equatable {
    /// Describes the pending maintenance actions for a resource.
    public var resourcePendingMaintenanceActions: RDSClientTypes.ResourcePendingMaintenanceActions?

    public init(
        resourcePendingMaintenanceActions: RDSClientTypes.ResourcePendingMaintenanceActions? = nil
    )
    {
        self.resourcePendingMaintenanceActions = resourcePendingMaintenanceActions
    }
}

enum ApplyPendingMaintenanceActionOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "InvalidDBClusterStateFault": return try await InvalidDBClusterStateFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "InvalidDBInstanceState": return try await InvalidDBInstanceStateFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "ResourceNotFoundFault": return try await ResourceNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension RDSClientTypes {
    public enum AuditPolicyState: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case lockedPolicy
        case unlockedPolicy
        case sdkUnknown(Swift.String)

        public static var allCases: [AuditPolicyState] {
            return [
                .lockedPolicy,
                .unlockedPolicy,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .lockedPolicy: return "locked"
            case .unlockedPolicy: return "unlocked"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = AuditPolicyState(rawValue: rawValue) ?? AuditPolicyState.sdkUnknown(rawValue)
        }
    }
}

extension RDSClientTypes {
    public enum AuthScheme: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case secrets
        case sdkUnknown(Swift.String)

        public static var allCases: [AuthScheme] {
            return [
                .secrets,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .secrets: return "SECRETS"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = AuthScheme(rawValue: rawValue) ?? AuthScheme.sdkUnknown(rawValue)
        }
    }
}

extension AuthorizationAlreadyExistsFault {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = AuthorizationAlreadyExistsFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// The specified CIDR IP range or Amazon EC2 security group is already authorized for the specified DB security group.
public struct AuthorizationAlreadyExistsFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "AuthorizationAlreadyExists" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension AuthorizationNotFoundFault {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = AuthorizationNotFoundFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// The specified CIDR IP range or Amazon EC2 security group might not be authorized for the specified DB security group. Or, RDS might not be authorized to perform necessary actions using IAM on your behalf.
public struct AuthorizationNotFoundFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "AuthorizationNotFound" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension AuthorizationQuotaExceededFault {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = AuthorizationQuotaExceededFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// The DB security group authorization quota has been reached.
public struct AuthorizationQuotaExceededFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "AuthorizationQuotaExceeded" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension AuthorizeDBSecurityGroupIngressInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case cidrip = "CIDRIP"
        case dbSecurityGroupName = "DBSecurityGroupName"
        case ec2SecurityGroupId = "EC2SecurityGroupId"
        case ec2SecurityGroupName = "EC2SecurityGroupName"
        case ec2SecurityGroupOwnerId = "EC2SecurityGroupOwnerId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let cidrip = cidrip {
            try container.encode(cidrip, forKey: ClientRuntime.Key("CIDRIP"))
        }
        if let dbSecurityGroupName = dbSecurityGroupName {
            try container.encode(dbSecurityGroupName, forKey: ClientRuntime.Key("DBSecurityGroupName"))
        }
        if let ec2SecurityGroupId = ec2SecurityGroupId {
            try container.encode(ec2SecurityGroupId, forKey: ClientRuntime.Key("EC2SecurityGroupId"))
        }
        if let ec2SecurityGroupName = ec2SecurityGroupName {
            try container.encode(ec2SecurityGroupName, forKey: ClientRuntime.Key("EC2SecurityGroupName"))
        }
        if let ec2SecurityGroupOwnerId = ec2SecurityGroupOwnerId {
            try container.encode(ec2SecurityGroupOwnerId, forKey: ClientRuntime.Key("EC2SecurityGroupOwnerId"))
        }
        try container.encode("AuthorizeDBSecurityGroupIngress", forKey:ClientRuntime.Key("Action"))
        try container.encode("2014-10-31", forKey:ClientRuntime.Key("Version"))
    }
}

extension AuthorizeDBSecurityGroupIngressInput {

    static func urlPathProvider(_ value: AuthorizeDBSecurityGroupIngressInput) -> Swift.String? {
        return "/"
    }
}

///
public struct AuthorizeDBSecurityGroupIngressInput: Swift.Equatable {
    /// The IP range to authorize.
    public var cidrip: Swift.String?
    /// The name of the DB security group to add authorization to.
    /// This member is required.
    public var dbSecurityGroupName: Swift.String?
    /// Id of the EC2 security group to authorize. For VPC DB security groups, EC2SecurityGroupId must be provided. Otherwise, EC2SecurityGroupOwnerId and either EC2SecurityGroupName or EC2SecurityGroupId must be provided.
    public var ec2SecurityGroupId: Swift.String?
    /// Name of the EC2 security group to authorize. For VPC DB security groups, EC2SecurityGroupId must be provided. Otherwise, EC2SecurityGroupOwnerId and either EC2SecurityGroupName or EC2SecurityGroupId must be provided.
    public var ec2SecurityGroupName: Swift.String?
    /// Amazon Web Services account number of the owner of the EC2 security group specified in the EC2SecurityGroupName parameter. The Amazon Web Services access key ID isn't an acceptable value. For VPC DB security groups, EC2SecurityGroupId must be provided. Otherwise, EC2SecurityGroupOwnerId and either EC2SecurityGroupName or EC2SecurityGroupId must be provided.
    public var ec2SecurityGroupOwnerId: Swift.String?

    public init(
        cidrip: Swift.String? = nil,
        dbSecurityGroupName: Swift.String? = nil,
        ec2SecurityGroupId: Swift.String? = nil,
        ec2SecurityGroupName: Swift.String? = nil,
        ec2SecurityGroupOwnerId: Swift.String? = nil
    )
    {
        self.cidrip = cidrip
        self.dbSecurityGroupName = dbSecurityGroupName
        self.ec2SecurityGroupId = ec2SecurityGroupId
        self.ec2SecurityGroupName = ec2SecurityGroupName
        self.ec2SecurityGroupOwnerId = ec2SecurityGroupOwnerId
    }
}

extension AuthorizeDBSecurityGroupIngressOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<AuthorizeDBSecurityGroupIngressOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["AuthorizeDBSecurityGroupIngressResult"]
            var value = AuthorizeDBSecurityGroupIngressOutput()
            value.dbSecurityGroup = try reader["DBSecurityGroup"].readIfPresent(readingClosure: RDSClientTypes.DBSecurityGroup.readingClosure)
            return value
        }
    }
}

public struct AuthorizeDBSecurityGroupIngressOutput: Swift.Equatable {
    /// Contains the details for an Amazon RDS DB security group. This data type is used as a response element in the DescribeDBSecurityGroups action.
    public var dbSecurityGroup: RDSClientTypes.DBSecurityGroup?

    public init(
        dbSecurityGroup: RDSClientTypes.DBSecurityGroup? = nil
    )
    {
        self.dbSecurityGroup = dbSecurityGroup
    }
}

enum AuthorizeDBSecurityGroupIngressOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "AuthorizationAlreadyExists": return try await AuthorizationAlreadyExistsFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "AuthorizationQuotaExceeded": return try await AuthorizationQuotaExceededFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "DBSecurityGroupNotFound": return try await DBSecurityGroupNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "InvalidDBSecurityGroupState": return try await InvalidDBSecurityGroupStateFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension RDSClientTypes {
    public enum AutomationMode: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case allPaused
        case full
        case sdkUnknown(Swift.String)

        public static var allCases: [AutomationMode] {
            return [
                .allPaused,
                .full,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .allPaused: return "all-paused"
            case .full: return "full"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = AutomationMode(rawValue: rawValue) ?? AutomationMode.sdkUnknown(rawValue)
        }
    }
}

extension RDSClientTypes.AvailabilityZone: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name = "Name"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let name = name {
            try container.encode(name, forKey: ClientRuntime.Key("Name"))
        }
    }

    static var readingClosure: SmithyReadWrite.ReadingClosure<RDSClientTypes.AvailabilityZone, SmithyXML.Reader> {
        return { reader in
            guard reader.content != nil else { return nil }
            var value = RDSClientTypes.AvailabilityZone()
            value.name = try reader["Name"].readIfPresent()
            return value
        }
    }
}

extension RDSClientTypes {
    /// Contains Availability Zone information. This data type is used as an element in the OrderableDBInstanceOption data type.
    public struct AvailabilityZone: Swift.Equatable {
        /// The name of the Availability Zone.
        public var name: Swift.String?

        public init(
            name: Swift.String? = nil
        )
        {
            self.name = name
        }
    }

}

extension RDSClientTypes.AvailableProcessorFeature: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case allowedValues = "AllowedValues"
        case defaultValue = "DefaultValue"
        case name = "Name"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let allowedValues = allowedValues {
            try container.encode(allowedValues, forKey: ClientRuntime.Key("AllowedValues"))
        }
        if let defaultValue = defaultValue {
            try container.encode(defaultValue, forKey: ClientRuntime.Key("DefaultValue"))
        }
        if let name = name {
            try container.encode(name, forKey: ClientRuntime.Key("Name"))
        }
    }

    static var readingClosure: SmithyReadWrite.ReadingClosure<RDSClientTypes.AvailableProcessorFeature, SmithyXML.Reader> {
        return { reader in
            guard reader.content != nil else { return nil }
            var value = RDSClientTypes.AvailableProcessorFeature()
            value.name = try reader["Name"].readIfPresent()
            value.defaultValue = try reader["DefaultValue"].readIfPresent()
            value.allowedValues = try reader["AllowedValues"].readIfPresent()
            return value
        }
    }
}

extension RDSClientTypes {
    /// Contains the available processor feature information for the DB instance class of a DB instance. For more information, see [Configuring the Processor of the DB Instance Class](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.DBInstanceClass.html#USER_ConfigureProcessor) in the Amazon RDS User Guide.
    public struct AvailableProcessorFeature: Swift.Equatable {
        /// The allowed values for the processor feature of the DB instance class.
        public var allowedValues: Swift.String?
        /// The default value for the processor feature of the DB instance class.
        public var defaultValue: Swift.String?
        /// The name of the processor feature. Valid names are coreCount and threadsPerCore.
        public var name: Swift.String?

        public init(
            allowedValues: Swift.String? = nil,
            defaultValue: Swift.String? = nil,
            name: Swift.String? = nil
        )
        {
            self.allowedValues = allowedValues
            self.defaultValue = defaultValue
            self.name = name
        }
    }

}

extension BacktrackDBClusterInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case backtrackTo = "BacktrackTo"
        case dbClusterIdentifier = "DBClusterIdentifier"
        case force = "Force"
        case useEarliestTimeOnPointInTimeUnavailable = "UseEarliestTimeOnPointInTimeUnavailable"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let backtrackTo = backtrackTo {
            try container.encodeTimestamp(backtrackTo, format: .dateTime, forKey: ClientRuntime.Key("BacktrackTo"))
        }
        if let dbClusterIdentifier = dbClusterIdentifier {
            try container.encode(dbClusterIdentifier, forKey: ClientRuntime.Key("DBClusterIdentifier"))
        }
        if let force = force {
            try container.encode(force, forKey: ClientRuntime.Key("Force"))
        }
        if let useEarliestTimeOnPointInTimeUnavailable = useEarliestTimeOnPointInTimeUnavailable {
            try container.encode(useEarliestTimeOnPointInTimeUnavailable, forKey: ClientRuntime.Key("UseEarliestTimeOnPointInTimeUnavailable"))
        }
        try container.encode("BacktrackDBCluster", forKey:ClientRuntime.Key("Action"))
        try container.encode("2014-10-31", forKey:ClientRuntime.Key("Version"))
    }
}

extension BacktrackDBClusterInput {

    static func urlPathProvider(_ value: BacktrackDBClusterInput) -> Swift.String? {
        return "/"
    }
}

///
public struct BacktrackDBClusterInput: Swift.Equatable {
    /// The timestamp of the time to backtrack the DB cluster to, specified in ISO 8601 format. For more information about ISO 8601, see the [ISO8601 Wikipedia page.](http://en.wikipedia.org/wiki/ISO_8601) If the specified time isn't a consistent time for the DB cluster, Aurora automatically chooses the nearest possible consistent time for the DB cluster. Constraints:
    ///
    /// * Must contain a valid ISO 8601 timestamp.
    ///
    /// * Can't contain a timestamp set in the future.
    ///
    ///
    /// Example: 2017-07-08T18:00Z
    /// This member is required.
    public var backtrackTo: ClientRuntime.Date?
    /// The DB cluster identifier of the DB cluster to be backtracked. This parameter is stored as a lowercase string. Constraints:
    ///
    /// * Must contain from 1 to 63 alphanumeric characters or hyphens.
    ///
    /// * First character must be a letter.
    ///
    /// * Can't end with a hyphen or contain two consecutive hyphens.
    ///
    ///
    /// Example: my-cluster1
    /// This member is required.
    public var dbClusterIdentifier: Swift.String?
    /// Specifies whether to force the DB cluster to backtrack when binary logging is enabled. Otherwise, an error occurs when binary logging is enabled.
    public var force: Swift.Bool?
    /// Specifies whether to backtrack the DB cluster to the earliest possible backtrack time when BacktrackTo is set to a timestamp earlier than the earliest backtrack time. When this parameter is disabled and BacktrackTo is set to a timestamp earlier than the earliest backtrack time, an error occurs.
    public var useEarliestTimeOnPointInTimeUnavailable: Swift.Bool?

    public init(
        backtrackTo: ClientRuntime.Date? = nil,
        dbClusterIdentifier: Swift.String? = nil,
        force: Swift.Bool? = nil,
        useEarliestTimeOnPointInTimeUnavailable: Swift.Bool? = nil
    )
    {
        self.backtrackTo = backtrackTo
        self.dbClusterIdentifier = dbClusterIdentifier
        self.force = force
        self.useEarliestTimeOnPointInTimeUnavailable = useEarliestTimeOnPointInTimeUnavailable
    }
}

extension BacktrackDBClusterOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<BacktrackDBClusterOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["BacktrackDBClusterResult"]
            var value = BacktrackDBClusterOutput()
            value.backtrackIdentifier = try reader["BacktrackIdentifier"].readIfPresent()
            value.backtrackRequestCreationTime = try reader["BacktrackRequestCreationTime"].readTimestampIfPresent(format: .dateTime)
            value.backtrackTo = try reader["BacktrackTo"].readTimestampIfPresent(format: .dateTime)
            value.backtrackedFrom = try reader["BacktrackedFrom"].readTimestampIfPresent(format: .dateTime)
            value.dbClusterIdentifier = try reader["DBClusterIdentifier"].readIfPresent()
            value.status = try reader["Status"].readIfPresent()
            return value
        }
    }
}

/// This data type is used as a response element in the DescribeDBClusterBacktracks action.
public struct BacktrackDBClusterOutput: Swift.Equatable {
    /// Contains the backtrack identifier.
    public var backtrackIdentifier: Swift.String?
    /// The timestamp of the time at which the backtrack was requested.
    public var backtrackRequestCreationTime: ClientRuntime.Date?
    /// The timestamp of the time to which the DB cluster was backtracked.
    public var backtrackTo: ClientRuntime.Date?
    /// The timestamp of the time from which the DB cluster was backtracked.
    public var backtrackedFrom: ClientRuntime.Date?
    /// Contains a user-supplied DB cluster identifier. This identifier is the unique key that identifies a DB cluster.
    public var dbClusterIdentifier: Swift.String?
    /// The status of the backtrack. This property returns one of the following values:
    ///
    /// * applying - The backtrack is currently being applied to or rolled back from the DB cluster.
    ///
    /// * completed - The backtrack has successfully been applied to or rolled back from the DB cluster.
    ///
    /// * failed - An error occurred while the backtrack was applied to or rolled back from the DB cluster.
    ///
    /// * pending - The backtrack is currently pending application to or rollback from the DB cluster.
    public var status: Swift.String?

    public init(
        backtrackIdentifier: Swift.String? = nil,
        backtrackRequestCreationTime: ClientRuntime.Date? = nil,
        backtrackTo: ClientRuntime.Date? = nil,
        backtrackedFrom: ClientRuntime.Date? = nil,
        dbClusterIdentifier: Swift.String? = nil,
        status: Swift.String? = nil
    )
    {
        self.backtrackIdentifier = backtrackIdentifier
        self.backtrackRequestCreationTime = backtrackRequestCreationTime
        self.backtrackTo = backtrackTo
        self.backtrackedFrom = backtrackedFrom
        self.dbClusterIdentifier = dbClusterIdentifier
        self.status = status
    }
}

enum BacktrackDBClusterOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "DBClusterNotFoundFault": return try await DBClusterNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "InvalidDBClusterStateFault": return try await InvalidDBClusterStateFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension BackupPolicyNotFoundFault {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = BackupPolicyNotFoundFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

@available(*, deprecated, message: "Please avoid using this fault")
public struct BackupPolicyNotFoundFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "BackupPolicyNotFoundFault" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension RDSClientTypes.BlueGreenDeployment: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case blueGreenDeploymentIdentifier = "BlueGreenDeploymentIdentifier"
        case blueGreenDeploymentName = "BlueGreenDeploymentName"
        case createTime = "CreateTime"
        case deleteTime = "DeleteTime"
        case source = "Source"
        case status = "Status"
        case statusDetails = "StatusDetails"
        case switchoverDetails = "SwitchoverDetails"
        case tagList = "TagList"
        case target = "Target"
        case tasks = "Tasks"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let blueGreenDeploymentIdentifier = blueGreenDeploymentIdentifier {
            try container.encode(blueGreenDeploymentIdentifier, forKey: ClientRuntime.Key("BlueGreenDeploymentIdentifier"))
        }
        if let blueGreenDeploymentName = blueGreenDeploymentName {
            try container.encode(blueGreenDeploymentName, forKey: ClientRuntime.Key("BlueGreenDeploymentName"))
        }
        if let createTime = createTime {
            try container.encodeTimestamp(createTime, format: .dateTime, forKey: ClientRuntime.Key("CreateTime"))
        }
        if let deleteTime = deleteTime {
            try container.encodeTimestamp(deleteTime, format: .dateTime, forKey: ClientRuntime.Key("DeleteTime"))
        }
        if let source = source {
            try container.encode(source, forKey: ClientRuntime.Key("Source"))
        }
        if let status = status {
            try container.encode(status, forKey: ClientRuntime.Key("Status"))
        }
        if let statusDetails = statusDetails {
            try container.encode(statusDetails, forKey: ClientRuntime.Key("StatusDetails"))
        }
        if let switchoverDetails = switchoverDetails {
            if !switchoverDetails.isEmpty {
                var switchoverDetailsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("SwitchoverDetails"))
                for (index0, switchoverdetail0) in switchoverDetails.enumerated() {
                    try switchoverDetailsContainer.encode(switchoverdetail0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var switchoverDetailsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("SwitchoverDetails"))
                try switchoverDetailsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let tagList = tagList {
            if !tagList.isEmpty {
                var tagListContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("TagList"))
                for (index0, tag0) in tagList.enumerated() {
                    try tagListContainer.encode(tag0, forKey: ClientRuntime.Key("Tag.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var tagListContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("TagList"))
                try tagListContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let target = target {
            try container.encode(target, forKey: ClientRuntime.Key("Target"))
        }
        if let tasks = tasks {
            if !tasks.isEmpty {
                var tasksContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Tasks"))
                for (index0, bluegreendeploymenttask0) in tasks.enumerated() {
                    try tasksContainer.encode(bluegreendeploymenttask0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var tasksContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Tasks"))
                try tasksContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
    }

    static var readingClosure: SmithyReadWrite.ReadingClosure<RDSClientTypes.BlueGreenDeployment, SmithyXML.Reader> {
        return { reader in
            guard reader.content != nil else { return nil }
            var value = RDSClientTypes.BlueGreenDeployment()
            value.blueGreenDeploymentIdentifier = try reader["BlueGreenDeploymentIdentifier"].readIfPresent()
            value.blueGreenDeploymentName = try reader["BlueGreenDeploymentName"].readIfPresent()
            value.source = try reader["Source"].readIfPresent()
            value.target = try reader["Target"].readIfPresent()
            value.switchoverDetails = try reader["SwitchoverDetails"].readListIfPresent(memberReadingClosure: RDSClientTypes.SwitchoverDetail.readingClosure, memberNodeInfo: "member", isFlattened: false)
            value.tasks = try reader["Tasks"].readListIfPresent(memberReadingClosure: RDSClientTypes.BlueGreenDeploymentTask.readingClosure, memberNodeInfo: "member", isFlattened: false)
            value.status = try reader["Status"].readIfPresent()
            value.statusDetails = try reader["StatusDetails"].readIfPresent()
            value.createTime = try reader["CreateTime"].readTimestampIfPresent(format: .dateTime)
            value.deleteTime = try reader["DeleteTime"].readTimestampIfPresent(format: .dateTime)
            value.tagList = try reader["TagList"].readListIfPresent(memberReadingClosure: RDSClientTypes.Tag.readingClosure, memberNodeInfo: "Tag", isFlattened: false)
            return value
        }
    }
}

extension RDSClientTypes {
    /// Details about a blue/green deployment. For more information, see [Using Amazon RDS Blue/Green Deployments for database updates](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/blue-green-deployments.html) in the Amazon RDS User Guide and [Using Amazon RDS Blue/Green Deployments for database updates](https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/blue-green-deployments.html) in the Amazon Aurora User Guide.
    public struct BlueGreenDeployment: Swift.Equatable {
        /// The unique identifier of the blue/green deployment.
        public var blueGreenDeploymentIdentifier: Swift.String?
        /// The user-supplied name of the blue/green deployment.
        public var blueGreenDeploymentName: Swift.String?
        /// The time when the blue/green deployment was created, in Universal Coordinated Time (UTC).
        public var createTime: ClientRuntime.Date?
        /// The time when the blue/green deployment was deleted, in Universal Coordinated Time (UTC).
        public var deleteTime: ClientRuntime.Date?
        /// The source database for the blue/green deployment. Before switchover, the source database is the production database in the blue environment.
        public var source: Swift.String?
        /// The status of the blue/green deployment. Valid Values:
        ///
        /// * PROVISIONING - Resources are being created in the green environment.
        ///
        /// * AVAILABLE - Resources are available in the green environment.
        ///
        /// * SWITCHOVER_IN_PROGRESS - The deployment is being switched from the blue environment to the green environment.
        ///
        /// * SWITCHOVER_COMPLETED - Switchover from the blue environment to the green environment is complete.
        ///
        /// * INVALID_CONFIGURATION - Resources in the green environment are invalid, so switchover isn't possible.
        ///
        /// * SWITCHOVER_FAILED - Switchover was attempted but failed.
        ///
        /// * DELETING - The blue/green deployment is being deleted.
        public var status: Swift.String?
        /// Additional information about the status of the blue/green deployment.
        public var statusDetails: Swift.String?
        /// The details about each source and target resource in the blue/green deployment.
        public var switchoverDetails: [RDSClientTypes.SwitchoverDetail]?
        /// A list of tags. For more information, see [Tagging Amazon RDS Resources](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html) in the Amazon RDS User Guide.
        public var tagList: [RDSClientTypes.Tag]?
        /// The target database for the blue/green deployment. Before switchover, the target database is the clone database in the green environment.
        public var target: Swift.String?
        /// Either tasks to be performed or tasks that have been completed on the target database before switchover.
        public var tasks: [RDSClientTypes.BlueGreenDeploymentTask]?

        public init(
            blueGreenDeploymentIdentifier: Swift.String? = nil,
            blueGreenDeploymentName: Swift.String? = nil,
            createTime: ClientRuntime.Date? = nil,
            deleteTime: ClientRuntime.Date? = nil,
            source: Swift.String? = nil,
            status: Swift.String? = nil,
            statusDetails: Swift.String? = nil,
            switchoverDetails: [RDSClientTypes.SwitchoverDetail]? = nil,
            tagList: [RDSClientTypes.Tag]? = nil,
            target: Swift.String? = nil,
            tasks: [RDSClientTypes.BlueGreenDeploymentTask]? = nil
        )
        {
            self.blueGreenDeploymentIdentifier = blueGreenDeploymentIdentifier
            self.blueGreenDeploymentName = blueGreenDeploymentName
            self.createTime = createTime
            self.deleteTime = deleteTime
            self.source = source
            self.status = status
            self.statusDetails = statusDetails
            self.switchoverDetails = switchoverDetails
            self.tagList = tagList
            self.target = target
            self.tasks = tasks
        }
    }

}

extension BlueGreenDeploymentAlreadyExistsFault {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = BlueGreenDeploymentAlreadyExistsFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// A blue/green deployment with the specified name already exists.
public struct BlueGreenDeploymentAlreadyExistsFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "BlueGreenDeploymentAlreadyExistsFault" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension BlueGreenDeploymentNotFoundFault {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = BlueGreenDeploymentNotFoundFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// BlueGreenDeploymentIdentifier doesn't refer to an existing blue/green deployment.
public struct BlueGreenDeploymentNotFoundFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "BlueGreenDeploymentNotFoundFault" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension RDSClientTypes.BlueGreenDeploymentTask: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name = "Name"
        case status = "Status"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let name = name {
            try container.encode(name, forKey: ClientRuntime.Key("Name"))
        }
        if let status = status {
            try container.encode(status, forKey: ClientRuntime.Key("Status"))
        }
    }

    static var readingClosure: SmithyReadWrite.ReadingClosure<RDSClientTypes.BlueGreenDeploymentTask, SmithyXML.Reader> {
        return { reader in
            guard reader.content != nil else { return nil }
            var value = RDSClientTypes.BlueGreenDeploymentTask()
            value.name = try reader["Name"].readIfPresent()
            value.status = try reader["Status"].readIfPresent()
            return value
        }
    }
}

extension RDSClientTypes {
    /// Details about a task for a blue/green deployment. For more information, see [Using Amazon RDS Blue/Green Deployments for database updates](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/blue-green-deployments.html) in the Amazon RDS User Guide and [Using Amazon RDS Blue/Green Deployments for database updates](https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/blue-green-deployments.html) in the Amazon Aurora User Guide.
    public struct BlueGreenDeploymentTask: Swift.Equatable {
        /// The name of the blue/green deployment task.
        public var name: Swift.String?
        /// The status of the blue/green deployment task. Valid Values:
        ///
        /// * PENDING - The resource is being prepared for deployment.
        ///
        /// * IN_PROGRESS - The resource is being deployed.
        ///
        /// * COMPLETED - The resource has been deployed.
        ///
        /// * FAILED - Deployment of the resource failed.
        public var status: Swift.String?

        public init(
            name: Swift.String? = nil,
            status: Swift.String? = nil
        )
        {
            self.name = name
            self.status = status
        }
    }

}

extension CancelExportTaskInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case exportTaskIdentifier = "ExportTaskIdentifier"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let exportTaskIdentifier = exportTaskIdentifier {
            try container.encode(exportTaskIdentifier, forKey: ClientRuntime.Key("ExportTaskIdentifier"))
        }
        try container.encode("CancelExportTask", forKey:ClientRuntime.Key("Action"))
        try container.encode("2014-10-31", forKey:ClientRuntime.Key("Version"))
    }
}

extension CancelExportTaskInput {

    static func urlPathProvider(_ value: CancelExportTaskInput) -> Swift.String? {
        return "/"
    }
}

public struct CancelExportTaskInput: Swift.Equatable {
    /// The identifier of the snapshot or cluster export task to cancel.
    /// This member is required.
    public var exportTaskIdentifier: Swift.String?

    public init(
        exportTaskIdentifier: Swift.String? = nil
    )
    {
        self.exportTaskIdentifier = exportTaskIdentifier
    }
}

extension CancelExportTaskOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<CancelExportTaskOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["CancelExportTaskResult"]
            var value = CancelExportTaskOutput()
            value.exportOnly = try reader["ExportOnly"].readListIfPresent(memberReadingClosure: Swift.String.readingClosure, memberNodeInfo: "member", isFlattened: false)
            value.exportTaskIdentifier = try reader["ExportTaskIdentifier"].readIfPresent()
            value.failureCause = try reader["FailureCause"].readIfPresent()
            value.iamRoleArn = try reader["IamRoleArn"].readIfPresent()
            value.kmsKeyId = try reader["KmsKeyId"].readIfPresent()
            value.percentProgress = try reader["PercentProgress"].readIfPresent()
            value.s3Bucket = try reader["S3Bucket"].readIfPresent()
            value.s3Prefix = try reader["S3Prefix"].readIfPresent()
            value.snapshotTime = try reader["SnapshotTime"].readTimestampIfPresent(format: .dateTime)
            value.sourceArn = try reader["SourceArn"].readIfPresent()
            value.sourceType = try reader["SourceType"].readIfPresent()
            value.status = try reader["Status"].readIfPresent()
            value.taskEndTime = try reader["TaskEndTime"].readTimestampIfPresent(format: .dateTime)
            value.taskStartTime = try reader["TaskStartTime"].readTimestampIfPresent(format: .dateTime)
            value.totalExtractedDataInGB = try reader["TotalExtractedDataInGB"].readIfPresent()
            value.warningMessage = try reader["WarningMessage"].readIfPresent()
            return value
        }
    }
}

/// Contains the details of a snapshot or cluster export to Amazon S3. This data type is used as a response element in the DescribeExportTasks operation.
public struct CancelExportTaskOutput: Swift.Equatable {
    /// The data exported from the snapshot or cluster. Valid Values:
    ///
    /// * database - Export all the data from a specified database.
    ///
    /// * database.table table-name - Export a table of the snapshot or cluster. This format is valid only for RDS for MySQL, RDS for MariaDB, and Aurora MySQL.
    ///
    /// * database.schema schema-name - Export a database schema of the snapshot or cluster. This format is valid only for RDS for PostgreSQL and Aurora PostgreSQL.
    ///
    /// * database.schema.table table-name - Export a table of the database schema. This format is valid only for RDS for PostgreSQL and Aurora PostgreSQL.
    public var exportOnly: [Swift.String]?
    /// A unique identifier for the snapshot or cluster export task. This ID isn't an identifier for the Amazon S3 bucket where the data is exported.
    public var exportTaskIdentifier: Swift.String?
    /// The reason the export failed, if it failed.
    public var failureCause: Swift.String?
    /// The name of the IAM role that is used to write to Amazon S3 when exporting a snapshot or cluster.
    public var iamRoleArn: Swift.String?
    /// The key identifier of the Amazon Web Services KMS key that is used to encrypt the data when it's exported to Amazon S3. The KMS key identifier is its key ARN, key ID, alias ARN, or alias name. The IAM role used for the export must have encryption and decryption permissions to use this KMS key.
    public var kmsKeyId: Swift.String?
    /// The progress of the snapshot or cluster export task as a percentage.
    public var percentProgress: Swift.Int?
    /// The Amazon S3 bucket where the snapshot or cluster is exported to.
    public var s3Bucket: Swift.String?
    /// The Amazon S3 bucket prefix that is the file name and path of the exported data.
    public var s3Prefix: Swift.String?
    /// The time when the snapshot was created.
    public var snapshotTime: ClientRuntime.Date?
    /// The Amazon Resource Name (ARN) of the snapshot or cluster exported to Amazon S3.
    public var sourceArn: Swift.String?
    /// The type of source for the export.
    public var sourceType: RDSClientTypes.ExportSourceType?
    /// The progress status of the export task. The status can be one of the following:
    ///
    /// * CANCELED
    ///
    /// * CANCELING
    ///
    /// * COMPLETE
    ///
    /// * FAILED
    ///
    /// * IN_PROGRESS
    ///
    /// * STARTING
    public var status: Swift.String?
    /// The time when the snapshot or cluster export task ended.
    public var taskEndTime: ClientRuntime.Date?
    /// The time when the snapshot or cluster export task started.
    public var taskStartTime: ClientRuntime.Date?
    /// The total amount of data exported, in gigabytes.
    public var totalExtractedDataInGB: Swift.Int?
    /// A warning about the snapshot or cluster export task.
    public var warningMessage: Swift.String?

    public init(
        exportOnly: [Swift.String]? = nil,
        exportTaskIdentifier: Swift.String? = nil,
        failureCause: Swift.String? = nil,
        iamRoleArn: Swift.String? = nil,
        kmsKeyId: Swift.String? = nil,
        percentProgress: Swift.Int? = nil,
        s3Bucket: Swift.String? = nil,
        s3Prefix: Swift.String? = nil,
        snapshotTime: ClientRuntime.Date? = nil,
        sourceArn: Swift.String? = nil,
        sourceType: RDSClientTypes.ExportSourceType? = nil,
        status: Swift.String? = nil,
        taskEndTime: ClientRuntime.Date? = nil,
        taskStartTime: ClientRuntime.Date? = nil,
        totalExtractedDataInGB: Swift.Int? = nil,
        warningMessage: Swift.String? = nil
    )
    {
        self.exportOnly = exportOnly
        self.exportTaskIdentifier = exportTaskIdentifier
        self.failureCause = failureCause
        self.iamRoleArn = iamRoleArn
        self.kmsKeyId = kmsKeyId
        self.percentProgress = percentProgress
        self.s3Bucket = s3Bucket
        self.s3Prefix = s3Prefix
        self.snapshotTime = snapshotTime
        self.sourceArn = sourceArn
        self.sourceType = sourceType
        self.status = status
        self.taskEndTime = taskEndTime
        self.taskStartTime = taskStartTime
        self.totalExtractedDataInGB = totalExtractedDataInGB
        self.warningMessage = warningMessage
    }
}

enum CancelExportTaskOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "ExportTaskNotFound": return try await ExportTaskNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "InvalidExportTaskStateFault": return try await InvalidExportTaskStateFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension RDSClientTypes.Certificate: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case certificateArn = "CertificateArn"
        case certificateIdentifier = "CertificateIdentifier"
        case certificateType = "CertificateType"
        case customerOverride = "CustomerOverride"
        case customerOverrideValidTill = "CustomerOverrideValidTill"
        case thumbprint = "Thumbprint"
        case validFrom = "ValidFrom"
        case validTill = "ValidTill"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let certificateArn = certificateArn {
            try container.encode(certificateArn, forKey: ClientRuntime.Key("CertificateArn"))
        }
        if let certificateIdentifier = certificateIdentifier {
            try container.encode(certificateIdentifier, forKey: ClientRuntime.Key("CertificateIdentifier"))
        }
        if let certificateType = certificateType {
            try container.encode(certificateType, forKey: ClientRuntime.Key("CertificateType"))
        }
        if let customerOverride = customerOverride {
            try container.encode(customerOverride, forKey: ClientRuntime.Key("CustomerOverride"))
        }
        if let customerOverrideValidTill = customerOverrideValidTill {
            try container.encodeTimestamp(customerOverrideValidTill, format: .dateTime, forKey: ClientRuntime.Key("CustomerOverrideValidTill"))
        }
        if let thumbprint = thumbprint {
            try container.encode(thumbprint, forKey: ClientRuntime.Key("Thumbprint"))
        }
        if let validFrom = validFrom {
            try container.encodeTimestamp(validFrom, format: .dateTime, forKey: ClientRuntime.Key("ValidFrom"))
        }
        if let validTill = validTill {
            try container.encodeTimestamp(validTill, format: .dateTime, forKey: ClientRuntime.Key("ValidTill"))
        }
    }

    static var readingClosure: SmithyReadWrite.ReadingClosure<RDSClientTypes.Certificate, SmithyXML.Reader> {
        return { reader in
            guard reader.content != nil else { return nil }
            var value = RDSClientTypes.Certificate()
            value.certificateIdentifier = try reader["CertificateIdentifier"].readIfPresent()
            value.certificateType = try reader["CertificateType"].readIfPresent()
            value.thumbprint = try reader["Thumbprint"].readIfPresent()
            value.validFrom = try reader["ValidFrom"].readTimestampIfPresent(format: .dateTime)
            value.validTill = try reader["ValidTill"].readTimestampIfPresent(format: .dateTime)
            value.certificateArn = try reader["CertificateArn"].readIfPresent()
            value.customerOverride = try reader["CustomerOverride"].readIfPresent()
            value.customerOverrideValidTill = try reader["CustomerOverrideValidTill"].readTimestampIfPresent(format: .dateTime)
            return value
        }
    }
}

extension RDSClientTypes {
    /// A CA certificate for an Amazon Web Services account. For more information, see [Using SSL/TLS to encrypt a connection to a DB instance](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.SSL.html) in the Amazon RDS User Guide and [ Using SSL/TLS to encrypt a connection to a DB cluster](https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/UsingWithRDS.SSL.html) in the Amazon Aurora User Guide.
    public struct Certificate: Swift.Equatable {
        /// The Amazon Resource Name (ARN) for the certificate.
        public var certificateArn: Swift.String?
        /// The unique key that identifies a certificate.
        public var certificateIdentifier: Swift.String?
        /// The type of the certificate.
        public var certificateType: Swift.String?
        /// Indicates whether there is an override for the default certificate identifier.
        public var customerOverride: Swift.Bool?
        /// If there is an override for the default certificate identifier, when the override expires.
        public var customerOverrideValidTill: ClientRuntime.Date?
        /// The thumbprint of the certificate.
        public var thumbprint: Swift.String?
        /// The starting date from which the certificate is valid.
        public var validFrom: ClientRuntime.Date?
        /// The final date that the certificate continues to be valid.
        public var validTill: ClientRuntime.Date?

        public init(
            certificateArn: Swift.String? = nil,
            certificateIdentifier: Swift.String? = nil,
            certificateType: Swift.String? = nil,
            customerOverride: Swift.Bool? = nil,
            customerOverrideValidTill: ClientRuntime.Date? = nil,
            thumbprint: Swift.String? = nil,
            validFrom: ClientRuntime.Date? = nil,
            validTill: ClientRuntime.Date? = nil
        )
        {
            self.certificateArn = certificateArn
            self.certificateIdentifier = certificateIdentifier
            self.certificateType = certificateType
            self.customerOverride = customerOverride
            self.customerOverrideValidTill = customerOverrideValidTill
            self.thumbprint = thumbprint
            self.validFrom = validFrom
            self.validTill = validTill
        }
    }

}

extension RDSClientTypes.CertificateDetails: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case caIdentifier = "CAIdentifier"
        case validTill = "ValidTill"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let caIdentifier = caIdentifier {
            try container.encode(caIdentifier, forKey: ClientRuntime.Key("CAIdentifier"))
        }
        if let validTill = validTill {
            try container.encodeTimestamp(validTill, format: .dateTime, forKey: ClientRuntime.Key("ValidTill"))
        }
    }

    static var readingClosure: SmithyReadWrite.ReadingClosure<RDSClientTypes.CertificateDetails, SmithyXML.Reader> {
        return { reader in
            guard reader.content != nil else { return nil }
            var value = RDSClientTypes.CertificateDetails()
            value.caIdentifier = try reader["CAIdentifier"].readIfPresent()
            value.validTill = try reader["ValidTill"].readTimestampIfPresent(format: .dateTime)
            return value
        }
    }
}

extension RDSClientTypes {
    /// Returns the details of the DB instance’s server certificate. For more information, see [Using SSL/TLS to encrypt a connection to a DB instance](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.SSL.html) in the Amazon RDS User Guide and [ Using SSL/TLS to encrypt a connection to a DB cluster](https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/UsingWithRDS.SSL.html) in the Amazon Aurora User Guide.
    public struct CertificateDetails: Swift.Equatable {
        /// The CA identifier of the CA certificate used for the DB instance's server certificate.
        public var caIdentifier: Swift.String?
        /// The expiration date of the DB instance’s server certificate.
        public var validTill: ClientRuntime.Date?

        public init(
            caIdentifier: Swift.String? = nil,
            validTill: ClientRuntime.Date? = nil
        )
        {
            self.caIdentifier = caIdentifier
            self.validTill = validTill
        }
    }

}

extension CertificateNotFoundFault {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = CertificateNotFoundFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// CertificateIdentifier doesn't refer to an existing certificate.
public struct CertificateNotFoundFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "CertificateNotFound" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension RDSClientTypes.CharacterSet: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case characterSetDescription = "CharacterSetDescription"
        case characterSetName = "CharacterSetName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let characterSetDescription = characterSetDescription {
            try container.encode(characterSetDescription, forKey: ClientRuntime.Key("CharacterSetDescription"))
        }
        if let characterSetName = characterSetName {
            try container.encode(characterSetName, forKey: ClientRuntime.Key("CharacterSetName"))
        }
    }

    static var readingClosure: SmithyReadWrite.ReadingClosure<RDSClientTypes.CharacterSet, SmithyXML.Reader> {
        return { reader in
            guard reader.content != nil else { return nil }
            var value = RDSClientTypes.CharacterSet()
            value.characterSetName = try reader["CharacterSetName"].readIfPresent()
            value.characterSetDescription = try reader["CharacterSetDescription"].readIfPresent()
            return value
        }
    }
}

extension RDSClientTypes {
    /// This data type is used as a response element in the action DescribeDBEngineVersions.
    public struct CharacterSet: Swift.Equatable {
        /// The description of the character set.
        public var characterSetDescription: Swift.String?
        /// The name of the character set.
        public var characterSetName: Swift.String?

        public init(
            characterSetDescription: Swift.String? = nil,
            characterSetName: Swift.String? = nil
        )
        {
            self.characterSetDescription = characterSetDescription
            self.characterSetName = characterSetName
        }
    }

}

extension RDSClientTypes {
    public enum ClientPasswordAuthType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case mysqlNativePassword
        case postgresMd5
        case postgresScramSha256
        case sqlServerAuthentication
        case sdkUnknown(Swift.String)

        public static var allCases: [ClientPasswordAuthType] {
            return [
                .mysqlNativePassword,
                .postgresMd5,
                .postgresScramSha256,
                .sqlServerAuthentication,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .mysqlNativePassword: return "MYSQL_NATIVE_PASSWORD"
            case .postgresMd5: return "POSTGRES_MD5"
            case .postgresScramSha256: return "POSTGRES_SCRAM_SHA_256"
            case .sqlServerAuthentication: return "SQL_SERVER_AUTHENTICATION"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ClientPasswordAuthType(rawValue: rawValue) ?? ClientPasswordAuthType.sdkUnknown(rawValue)
        }
    }
}

extension RDSClientTypes.CloudwatchLogsExportConfiguration: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case disableLogTypes = "DisableLogTypes"
        case enableLogTypes = "EnableLogTypes"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let disableLogTypes = disableLogTypes {
            if !disableLogTypes.isEmpty {
                var disableLogTypesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("DisableLogTypes"))
                for (index0, string0) in disableLogTypes.enumerated() {
                    try disableLogTypesContainer.encode(string0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var disableLogTypesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("DisableLogTypes"))
                try disableLogTypesContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let enableLogTypes = enableLogTypes {
            if !enableLogTypes.isEmpty {
                var enableLogTypesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("EnableLogTypes"))
                for (index0, string0) in enableLogTypes.enumerated() {
                    try enableLogTypesContainer.encode(string0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var enableLogTypesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("EnableLogTypes"))
                try enableLogTypesContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
    }

    static var readingClosure: SmithyReadWrite.ReadingClosure<RDSClientTypes.CloudwatchLogsExportConfiguration, SmithyXML.Reader> {
        return { reader in
            guard reader.content != nil else { return nil }
            var value = RDSClientTypes.CloudwatchLogsExportConfiguration()
            value.enableLogTypes = try reader["EnableLogTypes"].readListIfPresent(memberReadingClosure: Swift.String.readingClosure, memberNodeInfo: "member", isFlattened: false)
            value.disableLogTypes = try reader["DisableLogTypes"].readListIfPresent(memberReadingClosure: Swift.String.readingClosure, memberNodeInfo: "member", isFlattened: false)
            return value
        }
    }
}

extension RDSClientTypes {
    /// The configuration setting for the log types to be enabled for export to CloudWatch Logs for a specific DB instance or DB cluster. The EnableLogTypes and DisableLogTypes arrays determine which logs will be exported (or not exported) to CloudWatch Logs. The values within these arrays depend on the DB engine being used. For more information about exporting CloudWatch Logs for Amazon RDS DB instances, see [Publishing Database Logs to Amazon CloudWatch Logs ](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch) in the Amazon RDS User Guide. For more information about exporting CloudWatch Logs for Amazon Aurora DB clusters, see [Publishing Database Logs to Amazon CloudWatch Logs](https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch) in the Amazon Aurora User Guide.
    public struct CloudwatchLogsExportConfiguration: Swift.Equatable {
        /// The list of log types to disable.
        public var disableLogTypes: [Swift.String]?
        /// The list of log types to enable.
        public var enableLogTypes: [Swift.String]?

        public init(
            disableLogTypes: [Swift.String]? = nil,
            enableLogTypes: [Swift.String]? = nil
        )
        {
            self.disableLogTypes = disableLogTypes
            self.enableLogTypes = enableLogTypes
        }
    }

}

extension RDSClientTypes.ClusterPendingModifiedValues: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case allocatedStorage = "AllocatedStorage"
        case backupRetentionPeriod = "BackupRetentionPeriod"
        case dbClusterIdentifier = "DBClusterIdentifier"
        case engineVersion = "EngineVersion"
        case iamDatabaseAuthenticationEnabled = "IAMDatabaseAuthenticationEnabled"
        case iops = "Iops"
        case masterUserPassword = "MasterUserPassword"
        case pendingCloudwatchLogsExports = "PendingCloudwatchLogsExports"
        case rdsCustomClusterConfiguration = "RdsCustomClusterConfiguration"
        case storageType = "StorageType"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let allocatedStorage = allocatedStorage {
            try container.encode(allocatedStorage, forKey: ClientRuntime.Key("AllocatedStorage"))
        }
        if let backupRetentionPeriod = backupRetentionPeriod {
            try container.encode(backupRetentionPeriod, forKey: ClientRuntime.Key("BackupRetentionPeriod"))
        }
        if let dbClusterIdentifier = dbClusterIdentifier {
            try container.encode(dbClusterIdentifier, forKey: ClientRuntime.Key("DBClusterIdentifier"))
        }
        if let engineVersion = engineVersion {
            try container.encode(engineVersion, forKey: ClientRuntime.Key("EngineVersion"))
        }
        if let iamDatabaseAuthenticationEnabled = iamDatabaseAuthenticationEnabled {
            try container.encode(iamDatabaseAuthenticationEnabled, forKey: ClientRuntime.Key("IAMDatabaseAuthenticationEnabled"))
        }
        if let iops = iops {
            try container.encode(iops, forKey: ClientRuntime.Key("Iops"))
        }
        if let masterUserPassword = masterUserPassword {
            try container.encode(masterUserPassword, forKey: ClientRuntime.Key("MasterUserPassword"))
        }
        if let pendingCloudwatchLogsExports = pendingCloudwatchLogsExports {
            try container.encode(pendingCloudwatchLogsExports, forKey: ClientRuntime.Key("PendingCloudwatchLogsExports"))
        }
        if let rdsCustomClusterConfiguration = rdsCustomClusterConfiguration {
            try container.encode(rdsCustomClusterConfiguration, forKey: ClientRuntime.Key("RdsCustomClusterConfiguration"))
        }
        if let storageType = storageType {
            try container.encode(storageType, forKey: ClientRuntime.Key("StorageType"))
        }
    }

    static var readingClosure: SmithyReadWrite.ReadingClosure<RDSClientTypes.ClusterPendingModifiedValues, SmithyXML.Reader> {
        return { reader in
            guard reader.content != nil else { return nil }
            var value = RDSClientTypes.ClusterPendingModifiedValues()
            value.pendingCloudwatchLogsExports = try reader["PendingCloudwatchLogsExports"].readIfPresent(readingClosure: RDSClientTypes.PendingCloudwatchLogsExports.readingClosure)
            value.dbClusterIdentifier = try reader["DBClusterIdentifier"].readIfPresent()
            value.masterUserPassword = try reader["MasterUserPassword"].readIfPresent()
            value.iamDatabaseAuthenticationEnabled = try reader["IAMDatabaseAuthenticationEnabled"].readIfPresent()
            value.engineVersion = try reader["EngineVersion"].readIfPresent()
            value.backupRetentionPeriod = try reader["BackupRetentionPeriod"].readIfPresent()
            value.allocatedStorage = try reader["AllocatedStorage"].readIfPresent()
            value.rdsCustomClusterConfiguration = try reader["RdsCustomClusterConfiguration"].readIfPresent(readingClosure: RDSClientTypes.RdsCustomClusterConfiguration.readingClosure)
            value.iops = try reader["Iops"].readIfPresent()
            value.storageType = try reader["StorageType"].readIfPresent()
            return value
        }
    }
}

extension RDSClientTypes {
    /// This data type is used as a response element in the ModifyDBCluster operation and contains changes that will be applied during the next maintenance window.
    public struct ClusterPendingModifiedValues: Swift.Equatable {
        /// The allocated storage size in gibibytes (GiB) for all database engines except Amazon Aurora. For Aurora, AllocatedStorage always returns 1, because Aurora DB cluster storage size isn't fixed, but instead automatically adjusts as needed.
        public var allocatedStorage: Swift.Int?
        /// The number of days for which automatic DB snapshots are retained.
        public var backupRetentionPeriod: Swift.Int?
        /// The DBClusterIdentifier value for the DB cluster.
        public var dbClusterIdentifier: Swift.String?
        /// The database engine version.
        public var engineVersion: Swift.String?
        /// Indicates whether mapping of Amazon Web Services Identity and Access Management (IAM) accounts to database accounts is enabled.
        public var iamDatabaseAuthenticationEnabled: Swift.Bool?
        /// The Provisioned IOPS (I/O operations per second) value. This setting is only for non-Aurora Multi-AZ DB clusters.
        public var iops: Swift.Int?
        /// The master credentials for the DB cluster.
        public var masterUserPassword: Swift.String?
        /// A list of the log types whose configuration is still pending. In other words, these log types are in the process of being activated or deactivated.
        public var pendingCloudwatchLogsExports: RDSClientTypes.PendingCloudwatchLogsExports?
        /// Reserved for future use.
        public var rdsCustomClusterConfiguration: RDSClientTypes.RdsCustomClusterConfiguration?
        /// The storage type for the DB cluster.
        public var storageType: Swift.String?

        public init(
            allocatedStorage: Swift.Int? = nil,
            backupRetentionPeriod: Swift.Int? = nil,
            dbClusterIdentifier: Swift.String? = nil,
            engineVersion: Swift.String? = nil,
            iamDatabaseAuthenticationEnabled: Swift.Bool? = nil,
            iops: Swift.Int? = nil,
            masterUserPassword: Swift.String? = nil,
            pendingCloudwatchLogsExports: RDSClientTypes.PendingCloudwatchLogsExports? = nil,
            rdsCustomClusterConfiguration: RDSClientTypes.RdsCustomClusterConfiguration? = nil,
            storageType: Swift.String? = nil
        )
        {
            self.allocatedStorage = allocatedStorage
            self.backupRetentionPeriod = backupRetentionPeriod
            self.dbClusterIdentifier = dbClusterIdentifier
            self.engineVersion = engineVersion
            self.iamDatabaseAuthenticationEnabled = iamDatabaseAuthenticationEnabled
            self.iops = iops
            self.masterUserPassword = masterUserPassword
            self.pendingCloudwatchLogsExports = pendingCloudwatchLogsExports
            self.rdsCustomClusterConfiguration = rdsCustomClusterConfiguration
            self.storageType = storageType
        }
    }

}

extension RDSClientTypes.ConnectionPoolConfiguration: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case connectionBorrowTimeout = "ConnectionBorrowTimeout"
        case initQuery = "InitQuery"
        case maxConnectionsPercent = "MaxConnectionsPercent"
        case maxIdleConnectionsPercent = "MaxIdleConnectionsPercent"
        case sessionPinningFilters = "SessionPinningFilters"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let connectionBorrowTimeout = connectionBorrowTimeout {
            try container.encode(connectionBorrowTimeout, forKey: ClientRuntime.Key("ConnectionBorrowTimeout"))
        }
        if let initQuery = initQuery {
            try container.encode(initQuery, forKey: ClientRuntime.Key("InitQuery"))
        }
        if let maxConnectionsPercent = maxConnectionsPercent {
            try container.encode(maxConnectionsPercent, forKey: ClientRuntime.Key("MaxConnectionsPercent"))
        }
        if let maxIdleConnectionsPercent = maxIdleConnectionsPercent {
            try container.encode(maxIdleConnectionsPercent, forKey: ClientRuntime.Key("MaxIdleConnectionsPercent"))
        }
        if let sessionPinningFilters = sessionPinningFilters {
            if !sessionPinningFilters.isEmpty {
                var sessionPinningFiltersContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("SessionPinningFilters"))
                for (index0, string0) in sessionPinningFilters.enumerated() {
                    try sessionPinningFiltersContainer.encode(string0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var sessionPinningFiltersContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("SessionPinningFilters"))
                try sessionPinningFiltersContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
    }

    static var readingClosure: SmithyReadWrite.ReadingClosure<RDSClientTypes.ConnectionPoolConfiguration, SmithyXML.Reader> {
        return { reader in
            guard reader.content != nil else { return nil }
            var value = RDSClientTypes.ConnectionPoolConfiguration()
            value.maxConnectionsPercent = try reader["MaxConnectionsPercent"].readIfPresent()
            value.maxIdleConnectionsPercent = try reader["MaxIdleConnectionsPercent"].readIfPresent()
            value.connectionBorrowTimeout = try reader["ConnectionBorrowTimeout"].readIfPresent()
            value.sessionPinningFilters = try reader["SessionPinningFilters"].readListIfPresent(memberReadingClosure: Swift.String.readingClosure, memberNodeInfo: "member", isFlattened: false)
            value.initQuery = try reader["InitQuery"].readIfPresent()
            return value
        }
    }
}

extension RDSClientTypes {
    /// Specifies the settings that control the size and behavior of the connection pool associated with a DBProxyTargetGroup.
    public struct ConnectionPoolConfiguration: Swift.Equatable {
        /// The number of seconds for a proxy to wait for a connection to become available in the connection pool. This setting only applies when the proxy has opened its maximum number of connections and all connections are busy with client sessions. For an unlimited wait time, specify 0. Default: 120 Constraints:
        ///
        /// * Must be between 0 and 3600.
        public var connectionBorrowTimeout: Swift.Int?
        /// One or more SQL statements for the proxy to run when opening each new database connection. Typically used with SET statements to make sure that each connection has identical settings such as time zone and character set. For multiple statements, use semicolons as the separator. You can also include multiple variables in a single SET statement, such as SET x=1, y=2. Default: no initialization query
        public var initQuery: Swift.String?
        /// The maximum size of the connection pool for each target in a target group. The value is expressed as a percentage of the max_connections setting for the RDS DB instance or Aurora DB cluster used by the target group. If you specify MaxIdleConnectionsPercent, then you must also include a value for this parameter. Default: 10 for RDS for Microsoft SQL Server, and 100 for all other engines Constraints:
        ///
        /// * Must be between 1 and 100.
        public var maxConnectionsPercent: Swift.Int?
        /// A value that controls how actively the proxy closes idle database connections in the connection pool. The value is expressed as a percentage of the max_connections setting for the RDS DB instance or Aurora DB cluster used by the target group. With a high value, the proxy leaves a high percentage of idle database connections open. A low value causes the proxy to close more idle connections and return them to the database. If you specify this parameter, then you must also include a value for MaxConnectionsPercent. Default: The default value is half of the value of MaxConnectionsPercent. For example, if MaxConnectionsPercent is 80, then the default value of MaxIdleConnectionsPercent is 40. If the value of MaxConnectionsPercent isn't specified, then for SQL Server, MaxIdleConnectionsPercent is 5, and for all other engines, the default is 50. Constraints:
        ///
        /// * Must be between 0 and the value of MaxConnectionsPercent.
        public var maxIdleConnectionsPercent: Swift.Int?
        /// Each item in the list represents a class of SQL operations that normally cause all later statements in a session using a proxy to be pinned to the same underlying database connection. Including an item in the list exempts that class of SQL operations from the pinning behavior. Default: no session pinning filters
        public var sessionPinningFilters: [Swift.String]?

        public init(
            connectionBorrowTimeout: Swift.Int? = nil,
            initQuery: Swift.String? = nil,
            maxConnectionsPercent: Swift.Int? = nil,
            maxIdleConnectionsPercent: Swift.Int? = nil,
            sessionPinningFilters: [Swift.String]? = nil
        )
        {
            self.connectionBorrowTimeout = connectionBorrowTimeout
            self.initQuery = initQuery
            self.maxConnectionsPercent = maxConnectionsPercent
            self.maxIdleConnectionsPercent = maxIdleConnectionsPercent
            self.sessionPinningFilters = sessionPinningFilters
        }
    }

}

extension RDSClientTypes.ConnectionPoolConfigurationInfo: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case connectionBorrowTimeout = "ConnectionBorrowTimeout"
        case initQuery = "InitQuery"
        case maxConnectionsPercent = "MaxConnectionsPercent"
        case maxIdleConnectionsPercent = "MaxIdleConnectionsPercent"
        case sessionPinningFilters = "SessionPinningFilters"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let connectionBorrowTimeout = connectionBorrowTimeout {
            try container.encode(connectionBorrowTimeout, forKey: ClientRuntime.Key("ConnectionBorrowTimeout"))
        }
        if let initQuery = initQuery {
            try container.encode(initQuery, forKey: ClientRuntime.Key("InitQuery"))
        }
        if let maxConnectionsPercent = maxConnectionsPercent {
            try container.encode(maxConnectionsPercent, forKey: ClientRuntime.Key("MaxConnectionsPercent"))
        }
        if let maxIdleConnectionsPercent = maxIdleConnectionsPercent {
            try container.encode(maxIdleConnectionsPercent, forKey: ClientRuntime.Key("MaxIdleConnectionsPercent"))
        }
        if let sessionPinningFilters = sessionPinningFilters {
            if !sessionPinningFilters.isEmpty {
                var sessionPinningFiltersContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("SessionPinningFilters"))
                for (index0, string0) in sessionPinningFilters.enumerated() {
                    try sessionPinningFiltersContainer.encode(string0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var sessionPinningFiltersContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("SessionPinningFilters"))
                try sessionPinningFiltersContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
    }

    static var readingClosure: SmithyReadWrite.ReadingClosure<RDSClientTypes.ConnectionPoolConfigurationInfo, SmithyXML.Reader> {
        return { reader in
            guard reader.content != nil else { return nil }
            var value = RDSClientTypes.ConnectionPoolConfigurationInfo()
            value.maxConnectionsPercent = try reader["MaxConnectionsPercent"].readIfPresent()
            value.maxIdleConnectionsPercent = try reader["MaxIdleConnectionsPercent"].readIfPresent()
            value.connectionBorrowTimeout = try reader["ConnectionBorrowTimeout"].readIfPresent()
            value.sessionPinningFilters = try reader["SessionPinningFilters"].readListIfPresent(memberReadingClosure: Swift.String.readingClosure, memberNodeInfo: "member", isFlattened: false)
            value.initQuery = try reader["InitQuery"].readIfPresent()
            return value
        }
    }
}

extension RDSClientTypes {
    /// Displays the settings that control the size and behavior of the connection pool associated with a DBProxyTarget.
    public struct ConnectionPoolConfigurationInfo: Swift.Equatable {
        /// The number of seconds for a proxy to wait for a connection to become available in the connection pool. Only applies when the proxy has opened its maximum number of connections and all connections are busy with client sessions.
        public var connectionBorrowTimeout: Swift.Int?
        /// One or more SQL statements for the proxy to run when opening each new database connection. Typically used with SET statements to make sure that each connection has identical settings such as time zone and character set. This setting is empty by default. For multiple statements, use semicolons as the separator. You can also include multiple variables in a single SET statement, such as SET x=1, y=2.
        public var initQuery: Swift.String?
        /// The maximum size of the connection pool for each target in a target group. The value is expressed as a percentage of the max_connections setting for the RDS DB instance or Aurora DB cluster used by the target group.
        public var maxConnectionsPercent: Swift.Int?
        /// Controls how actively the proxy closes idle database connections in the connection pool. The value is expressed as a percentage of the max_connections setting for the RDS DB instance or Aurora DB cluster used by the target group. With a high value, the proxy leaves a high percentage of idle database connections open. A low value causes the proxy to close more idle connections and return them to the database.
        public var maxIdleConnectionsPercent: Swift.Int?
        /// Each item in the list represents a class of SQL operations that normally cause all later statements in a session using a proxy to be pinned to the same underlying database connection. Including an item in the list exempts that class of SQL operations from the pinning behavior. This setting is only supported for MySQL engine family databases. Currently, the only allowed value is EXCLUDE_VARIABLE_SETS.
        public var sessionPinningFilters: [Swift.String]?

        public init(
            connectionBorrowTimeout: Swift.Int? = nil,
            initQuery: Swift.String? = nil,
            maxConnectionsPercent: Swift.Int? = nil,
            maxIdleConnectionsPercent: Swift.Int? = nil,
            sessionPinningFilters: [Swift.String]? = nil
        )
        {
            self.connectionBorrowTimeout = connectionBorrowTimeout
            self.initQuery = initQuery
            self.maxConnectionsPercent = maxConnectionsPercent
            self.maxIdleConnectionsPercent = maxIdleConnectionsPercent
            self.sessionPinningFilters = sessionPinningFilters
        }
    }

}

extension RDSClientTypes.ContextAttribute: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case key = "Key"
        case value = "Value"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let key = key {
            try container.encode(key, forKey: ClientRuntime.Key("Key"))
        }
        if let value = value {
            try container.encode(value, forKey: ClientRuntime.Key("Value"))
        }
    }

    static var readingClosure: SmithyReadWrite.ReadingClosure<RDSClientTypes.ContextAttribute, SmithyXML.Reader> {
        return { reader in
            guard reader.content != nil else { return nil }
            var value = RDSClientTypes.ContextAttribute()
            value.key = try reader["Key"].readIfPresent()
            value.value = try reader["Value"].readIfPresent()
            return value
        }
    }
}

extension RDSClientTypes {
    /// The additional attributes of RecommendedAction data type.
    public struct ContextAttribute: Swift.Equatable {
        /// The key of ContextAttribute.
        public var key: Swift.String?
        /// The value of ContextAttribute.
        public var value: Swift.String?

        public init(
            key: Swift.String? = nil,
            value: Swift.String? = nil
        )
        {
            self.key = key
            self.value = value
        }
    }

}

extension CopyDBClusterParameterGroupInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case sourceDBClusterParameterGroupIdentifier = "SourceDBClusterParameterGroupIdentifier"
        case tags = "Tags"
        case targetDBClusterParameterGroupDescription = "TargetDBClusterParameterGroupDescription"
        case targetDBClusterParameterGroupIdentifier = "TargetDBClusterParameterGroupIdentifier"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let sourceDBClusterParameterGroupIdentifier = sourceDBClusterParameterGroupIdentifier {
            try container.encode(sourceDBClusterParameterGroupIdentifier, forKey: ClientRuntime.Key("SourceDBClusterParameterGroupIdentifier"))
        }
        if let tags = tags {
            if !tags.isEmpty {
                var tagsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Tags"))
                for (index0, tag0) in tags.enumerated() {
                    try tagsContainer.encode(tag0, forKey: ClientRuntime.Key("Tag.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var tagsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Tags"))
                try tagsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let targetDBClusterParameterGroupDescription = targetDBClusterParameterGroupDescription {
            try container.encode(targetDBClusterParameterGroupDescription, forKey: ClientRuntime.Key("TargetDBClusterParameterGroupDescription"))
        }
        if let targetDBClusterParameterGroupIdentifier = targetDBClusterParameterGroupIdentifier {
            try container.encode(targetDBClusterParameterGroupIdentifier, forKey: ClientRuntime.Key("TargetDBClusterParameterGroupIdentifier"))
        }
        try container.encode("CopyDBClusterParameterGroup", forKey:ClientRuntime.Key("Action"))
        try container.encode("2014-10-31", forKey:ClientRuntime.Key("Version"))
    }
}

extension CopyDBClusterParameterGroupInput {

    static func urlPathProvider(_ value: CopyDBClusterParameterGroupInput) -> Swift.String? {
        return "/"
    }
}

public struct CopyDBClusterParameterGroupInput: Swift.Equatable {
    /// The identifier or Amazon Resource Name (ARN) for the source DB cluster parameter group. For information about creating an ARN, see [ Constructing an ARN for Amazon RDS](https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_Tagging.ARN.html#USER_Tagging.ARN.Constructing) in the Amazon Aurora User Guide. Constraints:
    ///
    /// * Must specify a valid DB cluster parameter group.
    /// This member is required.
    public var sourceDBClusterParameterGroupIdentifier: Swift.String?
    /// A list of tags. For more information, see [Tagging Amazon RDS Resources](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html) in the Amazon RDS User Guide.
    public var tags: [RDSClientTypes.Tag]?
    /// A description for the copied DB cluster parameter group.
    /// This member is required.
    public var targetDBClusterParameterGroupDescription: Swift.String?
    /// The identifier for the copied DB cluster parameter group. Constraints:
    ///
    /// * Can't be null, empty, or blank
    ///
    /// * Must contain from 1 to 255 letters, numbers, or hyphens
    ///
    /// * First character must be a letter
    ///
    /// * Can't end with a hyphen or contain two consecutive hyphens
    ///
    ///
    /// Example: my-cluster-param-group1
    /// This member is required.
    public var targetDBClusterParameterGroupIdentifier: Swift.String?

    public init(
        sourceDBClusterParameterGroupIdentifier: Swift.String? = nil,
        tags: [RDSClientTypes.Tag]? = nil,
        targetDBClusterParameterGroupDescription: Swift.String? = nil,
        targetDBClusterParameterGroupIdentifier: Swift.String? = nil
    )
    {
        self.sourceDBClusterParameterGroupIdentifier = sourceDBClusterParameterGroupIdentifier
        self.tags = tags
        self.targetDBClusterParameterGroupDescription = targetDBClusterParameterGroupDescription
        self.targetDBClusterParameterGroupIdentifier = targetDBClusterParameterGroupIdentifier
    }
}

extension CopyDBClusterParameterGroupOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<CopyDBClusterParameterGroupOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["CopyDBClusterParameterGroupResult"]
            var value = CopyDBClusterParameterGroupOutput()
            value.dbClusterParameterGroup = try reader["DBClusterParameterGroup"].readIfPresent(readingClosure: RDSClientTypes.DBClusterParameterGroup.readingClosure)
            return value
        }
    }
}

public struct CopyDBClusterParameterGroupOutput: Swift.Equatable {
    /// Contains the details of an Amazon RDS DB cluster parameter group. This data type is used as a response element in the DescribeDBClusterParameterGroups action.
    public var dbClusterParameterGroup: RDSClientTypes.DBClusterParameterGroup?

    public init(
        dbClusterParameterGroup: RDSClientTypes.DBClusterParameterGroup? = nil
    )
    {
        self.dbClusterParameterGroup = dbClusterParameterGroup
    }
}

enum CopyDBClusterParameterGroupOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "DBParameterGroupAlreadyExists": return try await DBParameterGroupAlreadyExistsFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "DBParameterGroupNotFound": return try await DBParameterGroupNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "DBParameterGroupQuotaExceeded": return try await DBParameterGroupQuotaExceededFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension CopyDBClusterSnapshotInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case copyTags = "CopyTags"
        case kmsKeyId = "KmsKeyId"
        case preSignedUrl = "PreSignedUrl"
        case sourceDBClusterSnapshotIdentifier = "SourceDBClusterSnapshotIdentifier"
        case tags = "Tags"
        case targetDBClusterSnapshotIdentifier = "TargetDBClusterSnapshotIdentifier"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let copyTags = copyTags {
            try container.encode(copyTags, forKey: ClientRuntime.Key("CopyTags"))
        }
        if let kmsKeyId = kmsKeyId {
            try container.encode(kmsKeyId, forKey: ClientRuntime.Key("KmsKeyId"))
        }
        if let preSignedUrl = preSignedUrl {
            try container.encode(preSignedUrl, forKey: ClientRuntime.Key("PreSignedUrl"))
        }
        if let sourceDBClusterSnapshotIdentifier = sourceDBClusterSnapshotIdentifier {
            try container.encode(sourceDBClusterSnapshotIdentifier, forKey: ClientRuntime.Key("SourceDBClusterSnapshotIdentifier"))
        }
        if let tags = tags {
            if !tags.isEmpty {
                var tagsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Tags"))
                for (index0, tag0) in tags.enumerated() {
                    try tagsContainer.encode(tag0, forKey: ClientRuntime.Key("Tag.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var tagsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Tags"))
                try tagsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let targetDBClusterSnapshotIdentifier = targetDBClusterSnapshotIdentifier {
            try container.encode(targetDBClusterSnapshotIdentifier, forKey: ClientRuntime.Key("TargetDBClusterSnapshotIdentifier"))
        }
        try container.encode("CopyDBClusterSnapshot", forKey:ClientRuntime.Key("Action"))
        try container.encode("2014-10-31", forKey:ClientRuntime.Key("Version"))
    }
}

extension CopyDBClusterSnapshotInput {

    static func urlPathProvider(_ value: CopyDBClusterSnapshotInput) -> Swift.String? {
        return "/"
    }
}

///
public struct CopyDBClusterSnapshotInput: Swift.Equatable {
    /// Specifies whether to copy all tags from the source DB cluster snapshot to the target DB cluster snapshot. By default, tags are not copied.
    public var copyTags: Swift.Bool?
    /// The Amazon Web Services KMS key identifier for an encrypted DB cluster snapshot. The Amazon Web Services KMS key identifier is the key ARN, key ID, alias ARN, or alias name for the Amazon Web Services KMS key. If you copy an encrypted DB cluster snapshot from your Amazon Web Services account, you can specify a value for KmsKeyId to encrypt the copy with a new KMS key. If you don't specify a value for KmsKeyId, then the copy of the DB cluster snapshot is encrypted with the same KMS key as the source DB cluster snapshot. If you copy an encrypted DB cluster snapshot that is shared from another Amazon Web Services account, then you must specify a value for KmsKeyId. To copy an encrypted DB cluster snapshot to another Amazon Web Services Region, you must set KmsKeyId to the Amazon Web Services KMS key identifier you want to use to encrypt the copy of the DB cluster snapshot in the destination Amazon Web Services Region. KMS keys are specific to the Amazon Web Services Region that they are created in, and you can't use KMS keys from one Amazon Web Services Region in another Amazon Web Services Region. If you copy an unencrypted DB cluster snapshot and specify a value for the KmsKeyId parameter, an error is returned.
    public var kmsKeyId: Swift.String?
    /// When you are copying a DB cluster snapshot from one Amazon Web Services GovCloud (US) Region to another, the URL that contains a Signature Version 4 signed request for the CopyDBClusterSnapshot API operation in the Amazon Web Services Region that contains the source DB cluster snapshot to copy. Use the PreSignedUrl parameter when copying an encrypted DB cluster snapshot from another Amazon Web Services Region. Don't specify PreSignedUrl when copying an encrypted DB cluster snapshot in the same Amazon Web Services Region. This setting applies only to Amazon Web Services GovCloud (US) Regions. It's ignored in other Amazon Web Services Regions. The presigned URL must be a valid request for the CopyDBClusterSnapshot API operation that can run in the source Amazon Web Services Region that contains the encrypted DB cluster snapshot to copy. The presigned URL request must contain the following parameter values:
    ///
    /// * KmsKeyId - The KMS key identifier for the KMS key to use to encrypt the copy of the DB cluster snapshot in the destination Amazon Web Services Region. This is the same identifier for both the CopyDBClusterSnapshot operation that is called in the destination Amazon Web Services Region, and the operation contained in the presigned URL.
    ///
    /// * DestinationRegion - The name of the Amazon Web Services Region that the DB cluster snapshot is to be created in.
    ///
    /// * SourceDBClusterSnapshotIdentifier - The DB cluster snapshot identifier for the encrypted DB cluster snapshot to be copied. This identifier must be in the Amazon Resource Name (ARN) format for the source Amazon Web Services Region. For example, if you are copying an encrypted DB cluster snapshot from the us-west-2 Amazon Web Services Region, then your SourceDBClusterSnapshotIdentifier looks like the following example: arn:aws:rds:us-west-2:123456789012:cluster-snapshot:aurora-cluster1-snapshot-20161115.
    ///
    ///
    /// To learn how to generate a Signature Version 4 signed request, see [ Authenticating Requests: Using Query Parameters (Amazon Web Services Signature Version 4)](https://docs.aws.amazon.com/AmazonS3/latest/API/sigv4-query-string-auth.html) and [ Signature Version 4 Signing Process](https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html). If you are using an Amazon Web Services SDK tool or the CLI, you can specify SourceRegion (or --source-region for the CLI) instead of specifying PreSignedUrl manually. Specifying SourceRegion autogenerates a presigned URL that is a valid request for the operation that can run in the source Amazon Web Services Region.
    public var preSignedUrl: Swift.String?
    /// The identifier of the DB cluster snapshot to copy. This parameter isn't case-sensitive. You can't copy an encrypted, shared DB cluster snapshot from one Amazon Web Services Region to another. Constraints:
    ///
    /// * Must specify a valid system snapshot in the "available" state.
    ///
    /// * If the source snapshot is in the same Amazon Web Services Region as the copy, specify a valid DB snapshot identifier.
    ///
    /// * If the source snapshot is in a different Amazon Web Services Region than the copy, specify a valid DB cluster snapshot ARN. For more information, go to [ Copying Snapshots Across Amazon Web Services Regions](https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_CopySnapshot.html#USER_CopySnapshot.AcrossRegions) in the Amazon Aurora User Guide.
    ///
    ///
    /// Example: my-cluster-snapshot1
    /// This member is required.
    public var sourceDBClusterSnapshotIdentifier: Swift.String?
    /// A list of tags. For more information, see [Tagging Amazon RDS Resources](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html) in the Amazon RDS User Guide.
    public var tags: [RDSClientTypes.Tag]?
    /// The identifier of the new DB cluster snapshot to create from the source DB cluster snapshot. This parameter isn't case-sensitive. Constraints:
    ///
    /// * Must contain from 1 to 63 letters, numbers, or hyphens.
    ///
    /// * First character must be a letter.
    ///
    /// * Can't end with a hyphen or contain two consecutive hyphens.
    ///
    ///
    /// Example: my-cluster-snapshot2
    /// This member is required.
    public var targetDBClusterSnapshotIdentifier: Swift.String?

    public init(
        copyTags: Swift.Bool? = nil,
        kmsKeyId: Swift.String? = nil,
        preSignedUrl: Swift.String? = nil,
        sourceDBClusterSnapshotIdentifier: Swift.String? = nil,
        tags: [RDSClientTypes.Tag]? = nil,
        targetDBClusterSnapshotIdentifier: Swift.String? = nil
    )
    {
        self.copyTags = copyTags
        self.kmsKeyId = kmsKeyId
        self.preSignedUrl = preSignedUrl
        self.sourceDBClusterSnapshotIdentifier = sourceDBClusterSnapshotIdentifier
        self.tags = tags
        self.targetDBClusterSnapshotIdentifier = targetDBClusterSnapshotIdentifier
    }
}

extension CopyDBClusterSnapshotOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<CopyDBClusterSnapshotOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["CopyDBClusterSnapshotResult"]
            var value = CopyDBClusterSnapshotOutput()
            value.dbClusterSnapshot = try reader["DBClusterSnapshot"].readIfPresent(readingClosure: RDSClientTypes.DBClusterSnapshot.readingClosure)
            return value
        }
    }
}

public struct CopyDBClusterSnapshotOutput: Swift.Equatable {
    /// Contains the details for an Amazon RDS DB cluster snapshot This data type is used as a response element in the DescribeDBClusterSnapshots action.
    public var dbClusterSnapshot: RDSClientTypes.DBClusterSnapshot?

    public init(
        dbClusterSnapshot: RDSClientTypes.DBClusterSnapshot? = nil
    )
    {
        self.dbClusterSnapshot = dbClusterSnapshot
    }
}

enum CopyDBClusterSnapshotOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "DBClusterSnapshotAlreadyExistsFault": return try await DBClusterSnapshotAlreadyExistsFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "DBClusterSnapshotNotFoundFault": return try await DBClusterSnapshotNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "InvalidDBClusterSnapshotStateFault": return try await InvalidDBClusterSnapshotStateFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "InvalidDBClusterStateFault": return try await InvalidDBClusterStateFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "KMSKeyNotAccessibleFault": return try await KMSKeyNotAccessibleFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "SnapshotQuotaExceeded": return try await SnapshotQuotaExceededFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension CopyDBParameterGroupInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case sourceDBParameterGroupIdentifier = "SourceDBParameterGroupIdentifier"
        case tags = "Tags"
        case targetDBParameterGroupDescription = "TargetDBParameterGroupDescription"
        case targetDBParameterGroupIdentifier = "TargetDBParameterGroupIdentifier"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let sourceDBParameterGroupIdentifier = sourceDBParameterGroupIdentifier {
            try container.encode(sourceDBParameterGroupIdentifier, forKey: ClientRuntime.Key("SourceDBParameterGroupIdentifier"))
        }
        if let tags = tags {
            if !tags.isEmpty {
                var tagsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Tags"))
                for (index0, tag0) in tags.enumerated() {
                    try tagsContainer.encode(tag0, forKey: ClientRuntime.Key("Tag.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var tagsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Tags"))
                try tagsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let targetDBParameterGroupDescription = targetDBParameterGroupDescription {
            try container.encode(targetDBParameterGroupDescription, forKey: ClientRuntime.Key("TargetDBParameterGroupDescription"))
        }
        if let targetDBParameterGroupIdentifier = targetDBParameterGroupIdentifier {
            try container.encode(targetDBParameterGroupIdentifier, forKey: ClientRuntime.Key("TargetDBParameterGroupIdentifier"))
        }
        try container.encode("CopyDBParameterGroup", forKey:ClientRuntime.Key("Action"))
        try container.encode("2014-10-31", forKey:ClientRuntime.Key("Version"))
    }
}

extension CopyDBParameterGroupInput {

    static func urlPathProvider(_ value: CopyDBParameterGroupInput) -> Swift.String? {
        return "/"
    }
}

///
public struct CopyDBParameterGroupInput: Swift.Equatable {
    /// The identifier or ARN for the source DB parameter group. For information about creating an ARN, see [ Constructing an ARN for Amazon RDS](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.ARN.html#USER_Tagging.ARN.Constructing) in the Amazon RDS User Guide. Constraints:
    ///
    /// * Must specify a valid DB parameter group.
    /// This member is required.
    public var sourceDBParameterGroupIdentifier: Swift.String?
    /// A list of tags. For more information, see [Tagging Amazon RDS Resources](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html) in the Amazon RDS User Guide.
    public var tags: [RDSClientTypes.Tag]?
    /// A description for the copied DB parameter group.
    /// This member is required.
    public var targetDBParameterGroupDescription: Swift.String?
    /// The identifier for the copied DB parameter group. Constraints:
    ///
    /// * Can't be null, empty, or blank
    ///
    /// * Must contain from 1 to 255 letters, numbers, or hyphens
    ///
    /// * First character must be a letter
    ///
    /// * Can't end with a hyphen or contain two consecutive hyphens
    ///
    ///
    /// Example: my-db-parameter-group
    /// This member is required.
    public var targetDBParameterGroupIdentifier: Swift.String?

    public init(
        sourceDBParameterGroupIdentifier: Swift.String? = nil,
        tags: [RDSClientTypes.Tag]? = nil,
        targetDBParameterGroupDescription: Swift.String? = nil,
        targetDBParameterGroupIdentifier: Swift.String? = nil
    )
    {
        self.sourceDBParameterGroupIdentifier = sourceDBParameterGroupIdentifier
        self.tags = tags
        self.targetDBParameterGroupDescription = targetDBParameterGroupDescription
        self.targetDBParameterGroupIdentifier = targetDBParameterGroupIdentifier
    }
}

extension CopyDBParameterGroupOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<CopyDBParameterGroupOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["CopyDBParameterGroupResult"]
            var value = CopyDBParameterGroupOutput()
            value.dbParameterGroup = try reader["DBParameterGroup"].readIfPresent(readingClosure: RDSClientTypes.DBParameterGroup.readingClosure)
            return value
        }
    }
}

public struct CopyDBParameterGroupOutput: Swift.Equatable {
    /// Contains the details of an Amazon RDS DB parameter group. This data type is used as a response element in the DescribeDBParameterGroups action.
    public var dbParameterGroup: RDSClientTypes.DBParameterGroup?

    public init(
        dbParameterGroup: RDSClientTypes.DBParameterGroup? = nil
    )
    {
        self.dbParameterGroup = dbParameterGroup
    }
}

enum CopyDBParameterGroupOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "DBParameterGroupAlreadyExists": return try await DBParameterGroupAlreadyExistsFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "DBParameterGroupNotFound": return try await DBParameterGroupNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "DBParameterGroupQuotaExceeded": return try await DBParameterGroupQuotaExceededFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension CopyDBSnapshotInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case copyOptionGroup = "CopyOptionGroup"
        case copyTags = "CopyTags"
        case kmsKeyId = "KmsKeyId"
        case optionGroupName = "OptionGroupName"
        case preSignedUrl = "PreSignedUrl"
        case sourceDBSnapshotIdentifier = "SourceDBSnapshotIdentifier"
        case tags = "Tags"
        case targetCustomAvailabilityZone = "TargetCustomAvailabilityZone"
        case targetDBSnapshotIdentifier = "TargetDBSnapshotIdentifier"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let copyOptionGroup = copyOptionGroup {
            try container.encode(copyOptionGroup, forKey: ClientRuntime.Key("CopyOptionGroup"))
        }
        if let copyTags = copyTags {
            try container.encode(copyTags, forKey: ClientRuntime.Key("CopyTags"))
        }
        if let kmsKeyId = kmsKeyId {
            try container.encode(kmsKeyId, forKey: ClientRuntime.Key("KmsKeyId"))
        }
        if let optionGroupName = optionGroupName {
            try container.encode(optionGroupName, forKey: ClientRuntime.Key("OptionGroupName"))
        }
        if let preSignedUrl = preSignedUrl {
            try container.encode(preSignedUrl, forKey: ClientRuntime.Key("PreSignedUrl"))
        }
        if let sourceDBSnapshotIdentifier = sourceDBSnapshotIdentifier {
            try container.encode(sourceDBSnapshotIdentifier, forKey: ClientRuntime.Key("SourceDBSnapshotIdentifier"))
        }
        if let tags = tags {
            if !tags.isEmpty {
                var tagsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Tags"))
                for (index0, tag0) in tags.enumerated() {
                    try tagsContainer.encode(tag0, forKey: ClientRuntime.Key("Tag.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var tagsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Tags"))
                try tagsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let targetCustomAvailabilityZone = targetCustomAvailabilityZone {
            try container.encode(targetCustomAvailabilityZone, forKey: ClientRuntime.Key("TargetCustomAvailabilityZone"))
        }
        if let targetDBSnapshotIdentifier = targetDBSnapshotIdentifier {
            try container.encode(targetDBSnapshotIdentifier, forKey: ClientRuntime.Key("TargetDBSnapshotIdentifier"))
        }
        try container.encode("CopyDBSnapshot", forKey:ClientRuntime.Key("Action"))
        try container.encode("2014-10-31", forKey:ClientRuntime.Key("Version"))
    }
}

extension CopyDBSnapshotInput {

    static func urlPathProvider(_ value: CopyDBSnapshotInput) -> Swift.String? {
        return "/"
    }
}

///
public struct CopyDBSnapshotInput: Swift.Equatable {
    /// Specifies whether to copy the DB option group associated with the source DB snapshot to the target Amazon Web Services account and associate with the target DB snapshot. The associated option group can be copied only with cross-account snapshot copy calls.
    public var copyOptionGroup: Swift.Bool?
    /// Specifies whether to copy all tags from the source DB snapshot to the target DB snapshot. By default, tags aren't copied.
    public var copyTags: Swift.Bool?
    /// The Amazon Web Services KMS key identifier for an encrypted DB snapshot. The Amazon Web Services KMS key identifier is the key ARN, key ID, alias ARN, or alias name for the KMS key. If you copy an encrypted DB snapshot from your Amazon Web Services account, you can specify a value for this parameter to encrypt the copy with a new KMS key. If you don't specify a value for this parameter, then the copy of the DB snapshot is encrypted with the same Amazon Web Services KMS key as the source DB snapshot. If you copy an encrypted DB snapshot that is shared from another Amazon Web Services account, then you must specify a value for this parameter. If you specify this parameter when you copy an unencrypted snapshot, the copy is encrypted. If you copy an encrypted snapshot to a different Amazon Web Services Region, then you must specify an Amazon Web Services KMS key identifier for the destination Amazon Web Services Region. KMS keys are specific to the Amazon Web Services Region that they are created in, and you can't use KMS keys from one Amazon Web Services Region in another Amazon Web Services Region.
    public var kmsKeyId: Swift.String?
    /// The name of an option group to associate with the copy of the snapshot. Specify this option if you are copying a snapshot from one Amazon Web Services Region to another, and your DB instance uses a nondefault option group. If your source DB instance uses Transparent Data Encryption for Oracle or Microsoft SQL Server, you must specify this option when copying across Amazon Web Services Regions. For more information, see [Option group considerations](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_CopySnapshot.html#USER_CopySnapshot.Options) in the Amazon RDS User Guide.
    public var optionGroupName: Swift.String?
    /// When you are copying a snapshot from one Amazon Web Services GovCloud (US) Region to another, the URL that contains a Signature Version 4 signed request for the CopyDBSnapshot API operation in the source Amazon Web Services Region that contains the source DB snapshot to copy. This setting applies only to Amazon Web Services GovCloud (US) Regions. It's ignored in other Amazon Web Services Regions. You must specify this parameter when you copy an encrypted DB snapshot from another Amazon Web Services Region by using the Amazon RDS API. Don't specify PreSignedUrl when you are copying an encrypted DB snapshot in the same Amazon Web Services Region. The presigned URL must be a valid request for the CopyDBClusterSnapshot API operation that can run in the source Amazon Web Services Region that contains the encrypted DB cluster snapshot to copy. The presigned URL request must contain the following parameter values:
    ///
    /// * DestinationRegion - The Amazon Web Services Region that the encrypted DB snapshot is copied to. This Amazon Web Services Region is the same one where the CopyDBSnapshot operation is called that contains this presigned URL. For example, if you copy an encrypted DB snapshot from the us-west-2 Amazon Web Services Region to the us-east-1 Amazon Web Services Region, then you call the CopyDBSnapshot operation in the us-east-1 Amazon Web Services Region and provide a presigned URL that contains a call to the CopyDBSnapshot operation in the us-west-2 Amazon Web Services Region. For this example, the DestinationRegion in the presigned URL must be set to the us-east-1 Amazon Web Services Region.
    ///
    /// * KmsKeyId - The KMS key identifier for the KMS key to use to encrypt the copy of the DB snapshot in the destination Amazon Web Services Region. This is the same identifier for both the CopyDBSnapshot operation that is called in the destination Amazon Web Services Region, and the operation contained in the presigned URL.
    ///
    /// * SourceDBSnapshotIdentifier - The DB snapshot identifier for the encrypted snapshot to be copied. This identifier must be in the Amazon Resource Name (ARN) format for the source Amazon Web Services Region. For example, if you are copying an encrypted DB snapshot from the us-west-2 Amazon Web Services Region, then your SourceDBSnapshotIdentifier looks like the following example: arn:aws:rds:us-west-2:123456789012:snapshot:mysql-instance1-snapshot-20161115.
    ///
    ///
    /// To learn how to generate a Signature Version 4 signed request, see [Authenticating Requests: Using Query Parameters (Amazon Web Services Signature Version 4)](https://docs.aws.amazon.com/AmazonS3/latest/API/sigv4-query-string-auth.html) and [Signature Version 4 Signing Process](https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html). If you are using an Amazon Web Services SDK tool or the CLI, you can specify SourceRegion (or --source-region for the CLI) instead of specifying PreSignedUrl manually. Specifying SourceRegion autogenerates a presigned URL that is a valid request for the operation that can run in the source Amazon Web Services Region.
    public var preSignedUrl: Swift.String?
    /// The identifier for the source DB snapshot. If the source snapshot is in the same Amazon Web Services Region as the copy, specify a valid DB snapshot identifier. For example, you might specify rds:mysql-instance1-snapshot-20130805. If the source snapshot is in a different Amazon Web Services Region than the copy, specify a valid DB snapshot ARN. For example, you might specify arn:aws:rds:us-west-2:123456789012:snapshot:mysql-instance1-snapshot-20130805. If you are copying from a shared manual DB snapshot, this parameter must be the Amazon Resource Name (ARN) of the shared DB snapshot. If you are copying an encrypted snapshot this parameter must be in the ARN format for the source Amazon Web Services Region. Constraints:
    ///
    /// * Must specify a valid system snapshot in the "available" state.
    ///
    ///
    /// Example: rds:mydb-2012-04-02-00-01 Example: arn:aws:rds:us-west-2:123456789012:snapshot:mysql-instance1-snapshot-20130805
    /// This member is required.
    public var sourceDBSnapshotIdentifier: Swift.String?
    /// A list of tags. For more information, see [Tagging Amazon RDS Resources](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html) in the Amazon RDS User Guide.
    public var tags: [RDSClientTypes.Tag]?
    /// The external custom Availability Zone (CAZ) identifier for the target CAZ. Example: rds-caz-aiqhTgQv.
    public var targetCustomAvailabilityZone: Swift.String?
    /// The identifier for the copy of the snapshot. Constraints:
    ///
    /// * Can't be null, empty, or blank
    ///
    /// * Must contain from 1 to 255 letters, numbers, or hyphens
    ///
    /// * First character must be a letter
    ///
    /// * Can't end with a hyphen or contain two consecutive hyphens
    ///
    ///
    /// Example: my-db-snapshot
    /// This member is required.
    public var targetDBSnapshotIdentifier: Swift.String?

    public init(
        copyOptionGroup: Swift.Bool? = nil,
        copyTags: Swift.Bool? = nil,
        kmsKeyId: Swift.String? = nil,
        optionGroupName: Swift.String? = nil,
        preSignedUrl: Swift.String? = nil,
        sourceDBSnapshotIdentifier: Swift.String? = nil,
        tags: [RDSClientTypes.Tag]? = nil,
        targetCustomAvailabilityZone: Swift.String? = nil,
        targetDBSnapshotIdentifier: Swift.String? = nil
    )
    {
        self.copyOptionGroup = copyOptionGroup
        self.copyTags = copyTags
        self.kmsKeyId = kmsKeyId
        self.optionGroupName = optionGroupName
        self.preSignedUrl = preSignedUrl
        self.sourceDBSnapshotIdentifier = sourceDBSnapshotIdentifier
        self.tags = tags
        self.targetCustomAvailabilityZone = targetCustomAvailabilityZone
        self.targetDBSnapshotIdentifier = targetDBSnapshotIdentifier
    }
}

extension CopyDBSnapshotOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<CopyDBSnapshotOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["CopyDBSnapshotResult"]
            var value = CopyDBSnapshotOutput()
            value.dbSnapshot = try reader["DBSnapshot"].readIfPresent(readingClosure: RDSClientTypes.DBSnapshot.readingClosure)
            return value
        }
    }
}

public struct CopyDBSnapshotOutput: Swift.Equatable {
    /// Contains the details of an Amazon RDS DB snapshot. This data type is used as a response element in the DescribeDBSnapshots action.
    public var dbSnapshot: RDSClientTypes.DBSnapshot?

    public init(
        dbSnapshot: RDSClientTypes.DBSnapshot? = nil
    )
    {
        self.dbSnapshot = dbSnapshot
    }
}

enum CopyDBSnapshotOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "CustomAvailabilityZoneNotFound": return try await CustomAvailabilityZoneNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "DBSnapshotAlreadyExists": return try await DBSnapshotAlreadyExistsFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "DBSnapshotNotFound": return try await DBSnapshotNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "InvalidDBSnapshotState": return try await InvalidDBSnapshotStateFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "KMSKeyNotAccessibleFault": return try await KMSKeyNotAccessibleFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "SnapshotQuotaExceeded": return try await SnapshotQuotaExceededFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension CopyOptionGroupInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case sourceOptionGroupIdentifier = "SourceOptionGroupIdentifier"
        case tags = "Tags"
        case targetOptionGroupDescription = "TargetOptionGroupDescription"
        case targetOptionGroupIdentifier = "TargetOptionGroupIdentifier"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let sourceOptionGroupIdentifier = sourceOptionGroupIdentifier {
            try container.encode(sourceOptionGroupIdentifier, forKey: ClientRuntime.Key("SourceOptionGroupIdentifier"))
        }
        if let tags = tags {
            if !tags.isEmpty {
                var tagsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Tags"))
                for (index0, tag0) in tags.enumerated() {
                    try tagsContainer.encode(tag0, forKey: ClientRuntime.Key("Tag.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var tagsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Tags"))
                try tagsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let targetOptionGroupDescription = targetOptionGroupDescription {
            try container.encode(targetOptionGroupDescription, forKey: ClientRuntime.Key("TargetOptionGroupDescription"))
        }
        if let targetOptionGroupIdentifier = targetOptionGroupIdentifier {
            try container.encode(targetOptionGroupIdentifier, forKey: ClientRuntime.Key("TargetOptionGroupIdentifier"))
        }
        try container.encode("CopyOptionGroup", forKey:ClientRuntime.Key("Action"))
        try container.encode("2014-10-31", forKey:ClientRuntime.Key("Version"))
    }
}

extension CopyOptionGroupInput {

    static func urlPathProvider(_ value: CopyOptionGroupInput) -> Swift.String? {
        return "/"
    }
}

///
public struct CopyOptionGroupInput: Swift.Equatable {
    /// The identifier for the source option group. Constraints:
    ///
    /// * Must specify a valid option group.
    /// This member is required.
    public var sourceOptionGroupIdentifier: Swift.String?
    /// A list of tags. For more information, see [Tagging Amazon RDS Resources](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html) in the Amazon RDS User Guide.
    public var tags: [RDSClientTypes.Tag]?
    /// The description for the copied option group.
    /// This member is required.
    public var targetOptionGroupDescription: Swift.String?
    /// The identifier for the copied option group. Constraints:
    ///
    /// * Can't be null, empty, or blank
    ///
    /// * Must contain from 1 to 255 letters, numbers, or hyphens
    ///
    /// * First character must be a letter
    ///
    /// * Can't end with a hyphen or contain two consecutive hyphens
    ///
    ///
    /// Example: my-option-group
    /// This member is required.
    public var targetOptionGroupIdentifier: Swift.String?

    public init(
        sourceOptionGroupIdentifier: Swift.String? = nil,
        tags: [RDSClientTypes.Tag]? = nil,
        targetOptionGroupDescription: Swift.String? = nil,
        targetOptionGroupIdentifier: Swift.String? = nil
    )
    {
        self.sourceOptionGroupIdentifier = sourceOptionGroupIdentifier
        self.tags = tags
        self.targetOptionGroupDescription = targetOptionGroupDescription
        self.targetOptionGroupIdentifier = targetOptionGroupIdentifier
    }
}

extension CopyOptionGroupOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<CopyOptionGroupOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["CopyOptionGroupResult"]
            var value = CopyOptionGroupOutput()
            value.optionGroup = try reader["OptionGroup"].readIfPresent(readingClosure: RDSClientTypes.OptionGroup.readingClosure)
            return value
        }
    }
}

public struct CopyOptionGroupOutput: Swift.Equatable {
    ///
    public var optionGroup: RDSClientTypes.OptionGroup?

    public init(
        optionGroup: RDSClientTypes.OptionGroup? = nil
    )
    {
        self.optionGroup = optionGroup
    }
}

enum CopyOptionGroupOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "OptionGroupAlreadyExistsFault": return try await OptionGroupAlreadyExistsFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "OptionGroupNotFoundFault": return try await OptionGroupNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "OptionGroupQuotaExceededFault": return try await OptionGroupQuotaExceededFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension CreateBlueGreenDeploymentInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case blueGreenDeploymentName = "BlueGreenDeploymentName"
        case source = "Source"
        case tags = "Tags"
        case targetDBClusterParameterGroupName = "TargetDBClusterParameterGroupName"
        case targetDBInstanceClass = "TargetDBInstanceClass"
        case targetDBParameterGroupName = "TargetDBParameterGroupName"
        case targetEngineVersion = "TargetEngineVersion"
        case upgradeTargetStorageConfig = "UpgradeTargetStorageConfig"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let blueGreenDeploymentName = blueGreenDeploymentName {
            try container.encode(blueGreenDeploymentName, forKey: ClientRuntime.Key("BlueGreenDeploymentName"))
        }
        if let source = source {
            try container.encode(source, forKey: ClientRuntime.Key("Source"))
        }
        if let tags = tags {
            if !tags.isEmpty {
                var tagsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Tags"))
                for (index0, tag0) in tags.enumerated() {
                    try tagsContainer.encode(tag0, forKey: ClientRuntime.Key("Tag.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var tagsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Tags"))
                try tagsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let targetDBClusterParameterGroupName = targetDBClusterParameterGroupName {
            try container.encode(targetDBClusterParameterGroupName, forKey: ClientRuntime.Key("TargetDBClusterParameterGroupName"))
        }
        if let targetDBInstanceClass = targetDBInstanceClass {
            try container.encode(targetDBInstanceClass, forKey: ClientRuntime.Key("TargetDBInstanceClass"))
        }
        if let targetDBParameterGroupName = targetDBParameterGroupName {
            try container.encode(targetDBParameterGroupName, forKey: ClientRuntime.Key("TargetDBParameterGroupName"))
        }
        if let targetEngineVersion = targetEngineVersion {
            try container.encode(targetEngineVersion, forKey: ClientRuntime.Key("TargetEngineVersion"))
        }
        if let upgradeTargetStorageConfig = upgradeTargetStorageConfig {
            try container.encode(upgradeTargetStorageConfig, forKey: ClientRuntime.Key("UpgradeTargetStorageConfig"))
        }
        try container.encode("CreateBlueGreenDeployment", forKey:ClientRuntime.Key("Action"))
        try container.encode("2014-10-31", forKey:ClientRuntime.Key("Version"))
    }
}

extension CreateBlueGreenDeploymentInput {

    static func urlPathProvider(_ value: CreateBlueGreenDeploymentInput) -> Swift.String? {
        return "/"
    }
}

public struct CreateBlueGreenDeploymentInput: Swift.Equatable {
    /// The name of the blue/green deployment. Constraints:
    ///
    /// * Can't be the same as an existing blue/green deployment name in the same account and Amazon Web Services Region.
    /// This member is required.
    public var blueGreenDeploymentName: Swift.String?
    /// The Amazon Resource Name (ARN) of the source production database. Specify the database that you want to clone. The blue/green deployment creates this database in the green environment. You can make updates to the database in the green environment, such as an engine version upgrade. When you are ready, you can switch the database in the green environment to be the production database.
    /// This member is required.
    public var source: Swift.String?
    /// Tags to assign to the blue/green deployment.
    public var tags: [RDSClientTypes.Tag]?
    /// The DB cluster parameter group associated with the Aurora DB cluster in the green environment. To test parameter changes, specify a DB cluster parameter group that is different from the one associated with the source DB cluster.
    public var targetDBClusterParameterGroupName: Swift.String?
    /// Specify the DB instance class for the databases in the green environment. This parameter only applies to RDS DB instances, because DB instances within an Aurora DB cluster can have multiple different instance classes. If you're creating a blue/green deployment from an Aurora DB cluster, don't specify this parameter. After the green environment is created, you can individually modify the instance classes of the DB instances within the green DB cluster.
    public var targetDBInstanceClass: Swift.String?
    /// The DB parameter group associated with the DB instance in the green environment. To test parameter changes, specify a DB parameter group that is different from the one associated with the source DB instance.
    public var targetDBParameterGroupName: Swift.String?
    /// The engine version of the database in the green environment. Specify the engine version to upgrade to in the green environment.
    public var targetEngineVersion: Swift.String?
    /// Whether to upgrade the storage file system configuration on the green database. This option migrates the green DB instance from the older 32-bit file system to the preferred configuration. For more information, see [Upgrading the storage file system for a DB instance](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_PIOPS.StorageTypes.html#USER_PIOPS.UpgradeFileSystem).
    public var upgradeTargetStorageConfig: Swift.Bool?

    public init(
        blueGreenDeploymentName: Swift.String? = nil,
        source: Swift.String? = nil,
        tags: [RDSClientTypes.Tag]? = nil,
        targetDBClusterParameterGroupName: Swift.String? = nil,
        targetDBInstanceClass: Swift.String? = nil,
        targetDBParameterGroupName: Swift.String? = nil,
        targetEngineVersion: Swift.String? = nil,
        upgradeTargetStorageConfig: Swift.Bool? = nil
    )
    {
        self.blueGreenDeploymentName = blueGreenDeploymentName
        self.source = source
        self.tags = tags
        self.targetDBClusterParameterGroupName = targetDBClusterParameterGroupName
        self.targetDBInstanceClass = targetDBInstanceClass
        self.targetDBParameterGroupName = targetDBParameterGroupName
        self.targetEngineVersion = targetEngineVersion
        self.upgradeTargetStorageConfig = upgradeTargetStorageConfig
    }
}

extension CreateBlueGreenDeploymentOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<CreateBlueGreenDeploymentOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["CreateBlueGreenDeploymentResult"]
            var value = CreateBlueGreenDeploymentOutput()
            value.blueGreenDeployment = try reader["BlueGreenDeployment"].readIfPresent(readingClosure: RDSClientTypes.BlueGreenDeployment.readingClosure)
            return value
        }
    }
}

public struct CreateBlueGreenDeploymentOutput: Swift.Equatable {
    /// Details about a blue/green deployment. For more information, see [Using Amazon RDS Blue/Green Deployments for database updates](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/blue-green-deployments.html) in the Amazon RDS User Guide and [Using Amazon RDS Blue/Green Deployments for database updates](https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/blue-green-deployments.html) in the Amazon Aurora User Guide.
    public var blueGreenDeployment: RDSClientTypes.BlueGreenDeployment?

    public init(
        blueGreenDeployment: RDSClientTypes.BlueGreenDeployment? = nil
    )
    {
        self.blueGreenDeployment = blueGreenDeployment
    }
}

enum CreateBlueGreenDeploymentOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "BlueGreenDeploymentAlreadyExistsFault": return try await BlueGreenDeploymentAlreadyExistsFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "DBClusterNotFoundFault": return try await DBClusterNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "DBClusterParameterGroupNotFound": return try await DBClusterParameterGroupNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "DBClusterQuotaExceededFault": return try await DBClusterQuotaExceededFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "DBInstanceNotFound": return try await DBInstanceNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "DBParameterGroupNotFound": return try await DBParameterGroupNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "InstanceQuotaExceeded": return try await InstanceQuotaExceededFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "InvalidDBClusterStateFault": return try await InvalidDBClusterStateFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "InvalidDBInstanceState": return try await InvalidDBInstanceStateFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "SourceClusterNotSupportedFault": return try await SourceClusterNotSupportedFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "SourceDatabaseNotSupportedFault": return try await SourceDatabaseNotSupportedFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension CreateCustomDBEngineVersionFault {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = CreateCustomDBEngineVersionFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// An error occurred while trying to create the CEV.
public struct CreateCustomDBEngineVersionFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "CreateCustomDBEngineVersionFault" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension CreateCustomDBEngineVersionInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case databaseInstallationFilesS3BucketName = "DatabaseInstallationFilesS3BucketName"
        case databaseInstallationFilesS3Prefix = "DatabaseInstallationFilesS3Prefix"
        case description = "Description"
        case engine = "Engine"
        case engineVersion = "EngineVersion"
        case imageId = "ImageId"
        case kmsKeyId = "KMSKeyId"
        case manifest = "Manifest"
        case sourceCustomDbEngineVersionIdentifier = "SourceCustomDbEngineVersionIdentifier"
        case tags = "Tags"
        case useAwsProvidedLatestImage = "UseAwsProvidedLatestImage"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let databaseInstallationFilesS3BucketName = databaseInstallationFilesS3BucketName {
            try container.encode(databaseInstallationFilesS3BucketName, forKey: ClientRuntime.Key("DatabaseInstallationFilesS3BucketName"))
        }
        if let databaseInstallationFilesS3Prefix = databaseInstallationFilesS3Prefix {
            try container.encode(databaseInstallationFilesS3Prefix, forKey: ClientRuntime.Key("DatabaseInstallationFilesS3Prefix"))
        }
        if let description = description {
            try container.encode(description, forKey: ClientRuntime.Key("Description"))
        }
        if let engine = engine {
            try container.encode(engine, forKey: ClientRuntime.Key("Engine"))
        }
        if let engineVersion = engineVersion {
            try container.encode(engineVersion, forKey: ClientRuntime.Key("EngineVersion"))
        }
        if let imageId = imageId {
            try container.encode(imageId, forKey: ClientRuntime.Key("ImageId"))
        }
        if let kmsKeyId = kmsKeyId {
            try container.encode(kmsKeyId, forKey: ClientRuntime.Key("KMSKeyId"))
        }
        if let manifest = manifest {
            try container.encode(manifest, forKey: ClientRuntime.Key("Manifest"))
        }
        if let sourceCustomDbEngineVersionIdentifier = sourceCustomDbEngineVersionIdentifier {
            try container.encode(sourceCustomDbEngineVersionIdentifier, forKey: ClientRuntime.Key("SourceCustomDbEngineVersionIdentifier"))
        }
        if let tags = tags {
            if !tags.isEmpty {
                var tagsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Tags"))
                for (index0, tag0) in tags.enumerated() {
                    try tagsContainer.encode(tag0, forKey: ClientRuntime.Key("Tag.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var tagsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Tags"))
                try tagsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let useAwsProvidedLatestImage = useAwsProvidedLatestImage {
            try container.encode(useAwsProvidedLatestImage, forKey: ClientRuntime.Key("UseAwsProvidedLatestImage"))
        }
        try container.encode("CreateCustomDBEngineVersion", forKey:ClientRuntime.Key("Action"))
        try container.encode("2014-10-31", forKey:ClientRuntime.Key("Version"))
    }
}

extension CreateCustomDBEngineVersionInput {

    static func urlPathProvider(_ value: CreateCustomDBEngineVersionInput) -> Swift.String? {
        return "/"
    }
}

public struct CreateCustomDBEngineVersionInput: Swift.Equatable {
    /// The name of an Amazon S3 bucket that contains database installation files for your CEV. For example, a valid bucket name is my-custom-installation-files.
    public var databaseInstallationFilesS3BucketName: Swift.String?
    /// The Amazon S3 directory that contains the database installation files for your CEV. For example, a valid bucket name is 123456789012/cev1. If this setting isn't specified, no prefix is assumed.
    public var databaseInstallationFilesS3Prefix: Swift.String?
    /// An optional description of your CEV.
    public var description: Swift.String?
    /// The database engine to use for your custom engine version (CEV). The only supported value is custom-oracle-ee.
    /// This member is required.
    public var engine: Swift.String?
    /// The name of your CEV. The name format is 19.customized_string. For example, a valid CEV name is 19.my_cev1. This setting is required for RDS Custom for Oracle, but optional for Amazon RDS. The combination of Engine and EngineVersion is unique per customer per Region.
    /// This member is required.
    public var engineVersion: Swift.String?
    /// The ID of the Amazon Machine Image (AMI). For RDS Custom for SQL Server, an AMI ID is required to create a CEV. For RDS Custom for Oracle, the default is the most recent AMI available, but you can specify an AMI ID that was used in a different Oracle CEV. Find the AMIs used by your CEVs by calling the [DescribeDBEngineVersions](https://docs.aws.amazon.com/AmazonRDS/latest/APIReference/API_DescribeDBEngineVersions.html) operation.
    public var imageId: Swift.String?
    /// The Amazon Web Services KMS key identifier for an encrypted CEV. A symmetric encryption KMS key is required for RDS Custom, but optional for Amazon RDS. If you have an existing symmetric encryption KMS key in your account, you can use it with RDS Custom. No further action is necessary. If you don't already have a symmetric encryption KMS key in your account, follow the instructions in [ Creating a symmetric encryption KMS key](https://docs.aws.amazon.com/kms/latest/developerguide/create-keys.html#create-symmetric-cmk) in the Amazon Web Services Key Management Service Developer Guide. You can choose the same symmetric encryption key when you create a CEV and a DB instance, or choose different keys.
    public var kmsKeyId: Swift.String?
    /// The CEV manifest, which is a JSON document that describes the installation .zip files stored in Amazon S3. Specify the name/value pairs in a file or a quoted string. RDS Custom applies the patches in the order in which they are listed. The following JSON fields are valid: MediaImportTemplateVersion Version of the CEV manifest. The date is in the format YYYY-MM-DD. databaseInstallationFileNames Ordered list of installation files for the CEV. opatchFileNames Ordered list of OPatch installers used for the Oracle DB engine. psuRuPatchFileNames The PSU and RU patches for this CEV. OtherPatchFileNames The patches that are not in the list of PSU and RU patches. Amazon RDS applies these patches after applying the PSU and RU patches. For more information, see [ Creating the CEV manifest](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/custom-cev.html#custom-cev.preparing.manifest) in the Amazon RDS User Guide.
    public var manifest: Swift.String?
    /// The ARN of a CEV to use as a source for creating a new CEV. You can specify a different Amazon Machine Imagine (AMI) by using either Source or UseAwsProvidedLatestImage. You can't specify a different JSON manifest when you specify SourceCustomDbEngineVersionIdentifier.
    public var sourceCustomDbEngineVersionIdentifier: Swift.String?
    /// A list of tags. For more information, see [Tagging Amazon RDS Resources](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html) in the Amazon RDS User Guide.
    public var tags: [RDSClientTypes.Tag]?
    /// Specifies whether to use the latest service-provided Amazon Machine Image (AMI) for the CEV. If you specify UseAwsProvidedLatestImage, you can't also specify ImageId.
    public var useAwsProvidedLatestImage: Swift.Bool?

    public init(
        databaseInstallationFilesS3BucketName: Swift.String? = nil,
        databaseInstallationFilesS3Prefix: Swift.String? = nil,
        description: Swift.String? = nil,
        engine: Swift.String? = nil,
        engineVersion: Swift.String? = nil,
        imageId: Swift.String? = nil,
        kmsKeyId: Swift.String? = nil,
        manifest: Swift.String? = nil,
        sourceCustomDbEngineVersionIdentifier: Swift.String? = nil,
        tags: [RDSClientTypes.Tag]? = nil,
        useAwsProvidedLatestImage: Swift.Bool? = nil
    )
    {
        self.databaseInstallationFilesS3BucketName = databaseInstallationFilesS3BucketName
        self.databaseInstallationFilesS3Prefix = databaseInstallationFilesS3Prefix
        self.description = description
        self.engine = engine
        self.engineVersion = engineVersion
        self.imageId = imageId
        self.kmsKeyId = kmsKeyId
        self.manifest = manifest
        self.sourceCustomDbEngineVersionIdentifier = sourceCustomDbEngineVersionIdentifier
        self.tags = tags
        self.useAwsProvidedLatestImage = useAwsProvidedLatestImage
    }
}

extension CreateCustomDBEngineVersionOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<CreateCustomDBEngineVersionOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["CreateCustomDBEngineVersionResult"]
            var value = CreateCustomDBEngineVersionOutput()
            value.createTime = try reader["CreateTime"].readTimestampIfPresent(format: .dateTime)
            value.customDBEngineVersionManifest = try reader["CustomDBEngineVersionManifest"].readIfPresent()
            value.dbEngineDescription = try reader["DBEngineDescription"].readIfPresent()
            value.dbEngineMediaType = try reader["DBEngineMediaType"].readIfPresent()
            value.dbEngineVersionArn = try reader["DBEngineVersionArn"].readIfPresent()
            value.dbEngineVersionDescription = try reader["DBEngineVersionDescription"].readIfPresent()
            value.dbParameterGroupFamily = try reader["DBParameterGroupFamily"].readIfPresent()
            value.databaseInstallationFilesS3BucketName = try reader["DatabaseInstallationFilesS3BucketName"].readIfPresent()
            value.databaseInstallationFilesS3Prefix = try reader["DatabaseInstallationFilesS3Prefix"].readIfPresent()
            value.defaultCharacterSet = try reader["DefaultCharacterSet"].readIfPresent(readingClosure: RDSClientTypes.CharacterSet.readingClosure)
            value.engine = try reader["Engine"].readIfPresent()
            value.engineVersion = try reader["EngineVersion"].readIfPresent()
            value.exportableLogTypes = try reader["ExportableLogTypes"].readListIfPresent(memberReadingClosure: Swift.String.readingClosure, memberNodeInfo: "member", isFlattened: false)
            value.image = try reader["Image"].readIfPresent(readingClosure: RDSClientTypes.CustomDBEngineVersionAMI.readingClosure)
            value.kmsKeyId = try reader["KMSKeyId"].readIfPresent()
            value.majorEngineVersion = try reader["MajorEngineVersion"].readIfPresent()
            value.status = try reader["Status"].readIfPresent()
            value.supportedCACertificateIdentifiers = try reader["SupportedCACertificateIdentifiers"].readListIfPresent(memberReadingClosure: Swift.String.readingClosure, memberNodeInfo: "member", isFlattened: false)
            value.supportedCharacterSets = try reader["SupportedCharacterSets"].readListIfPresent(memberReadingClosure: RDSClientTypes.CharacterSet.readingClosure, memberNodeInfo: "CharacterSet", isFlattened: false)
            value.supportedEngineModes = try reader["SupportedEngineModes"].readListIfPresent(memberReadingClosure: Swift.String.readingClosure, memberNodeInfo: "member", isFlattened: false)
            value.supportedFeatureNames = try reader["SupportedFeatureNames"].readListIfPresent(memberReadingClosure: Swift.String.readingClosure, memberNodeInfo: "member", isFlattened: false)
            value.supportedNcharCharacterSets = try reader["SupportedNcharCharacterSets"].readListIfPresent(memberReadingClosure: RDSClientTypes.CharacterSet.readingClosure, memberNodeInfo: "CharacterSet", isFlattened: false)
            value.supportedTimezones = try reader["SupportedTimezones"].readListIfPresent(memberReadingClosure: RDSClientTypes.Timezone.readingClosure, memberNodeInfo: "Timezone", isFlattened: false)
            value.supportsBabelfish = try reader["SupportsBabelfish"].readIfPresent()
            value.supportsCertificateRotationWithoutRestart = try reader["SupportsCertificateRotationWithoutRestart"].readIfPresent()
            value.supportsGlobalDatabases = try reader["SupportsGlobalDatabases"].readIfPresent()
            value.supportsIntegrations = try reader["SupportsIntegrations"].readIfPresent()
            value.supportsLocalWriteForwarding = try reader["SupportsLocalWriteForwarding"].readIfPresent()
            value.supportsLogExportsToCloudwatchLogs = try reader["SupportsLogExportsToCloudwatchLogs"].readIfPresent()
            value.supportsParallelQuery = try reader["SupportsParallelQuery"].readIfPresent()
            value.supportsReadReplica = try reader["SupportsReadReplica"].readIfPresent()
            value.tagList = try reader["TagList"].readListIfPresent(memberReadingClosure: RDSClientTypes.Tag.readingClosure, memberNodeInfo: "Tag", isFlattened: false)
            value.validUpgradeTarget = try reader["ValidUpgradeTarget"].readListIfPresent(memberReadingClosure: RDSClientTypes.UpgradeTarget.readingClosure, memberNodeInfo: "UpgradeTarget", isFlattened: false)
            return value
        }
    }
}

/// This data type is used as a response element in the action DescribeDBEngineVersions.
public struct CreateCustomDBEngineVersionOutput: Swift.Equatable {
    /// The creation time of the DB engine version.
    public var createTime: ClientRuntime.Date?
    /// JSON string that lists the installation files and parameters that RDS Custom uses to create a custom engine version (CEV). RDS Custom applies the patches in the order in which they're listed in the manifest. You can set the Oracle home, Oracle base, and UNIX/Linux user and group using the installation parameters. For more information, see [JSON fields in the CEV manifest](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/custom-cev.preparing.html#custom-cev.preparing.manifest.fields) in the Amazon RDS User Guide.
    public var customDBEngineVersionManifest: Swift.String?
    /// The name of the Amazon S3 bucket that contains your database installation files.
    public var databaseInstallationFilesS3BucketName: Swift.String?
    /// The Amazon S3 directory that contains the database installation files. If not specified, then no prefix is assumed.
    public var databaseInstallationFilesS3Prefix: Swift.String?
    /// The description of the database engine.
    public var dbEngineDescription: Swift.String?
    /// A value that indicates the source media provider of the AMI based on the usage operation. Applicable for RDS Custom for SQL Server.
    public var dbEngineMediaType: Swift.String?
    /// The ARN of the custom engine version.
    public var dbEngineVersionArn: Swift.String?
    /// The description of the database engine version.
    public var dbEngineVersionDescription: Swift.String?
    /// The name of the DB parameter group family for the database engine.
    public var dbParameterGroupFamily: Swift.String?
    /// The default character set for new instances of this engine version, if the CharacterSetName parameter of the CreateDBInstance API isn't specified.
    public var defaultCharacterSet: RDSClientTypes.CharacterSet?
    /// The name of the database engine.
    public var engine: Swift.String?
    /// The version number of the database engine.
    public var engineVersion: Swift.String?
    /// The types of logs that the database engine has available for export to CloudWatch Logs.
    public var exportableLogTypes: [Swift.String]?
    /// The EC2 image
    public var image: RDSClientTypes.CustomDBEngineVersionAMI?
    /// The Amazon Web Services KMS key identifier for an encrypted CEV. This parameter is required for RDS Custom, but optional for Amazon RDS.
    public var kmsKeyId: Swift.String?
    /// The major engine version of the CEV.
    public var majorEngineVersion: Swift.String?
    /// The status of the DB engine version, either available or deprecated.
    public var status: Swift.String?
    /// A list of the supported CA certificate identifiers. For more information, see [Using SSL/TLS to encrypt a connection to a DB instance](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.SSL.html) in the Amazon RDS User Guide and [ Using SSL/TLS to encrypt a connection to a DB cluster](https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/UsingWithRDS.SSL.html) in the Amazon Aurora User Guide.
    public var supportedCACertificateIdentifiers: [Swift.String]?
    /// A list of the character sets supported by this engine for the CharacterSetName parameter of the CreateDBInstance operation.
    public var supportedCharacterSets: [RDSClientTypes.CharacterSet]?
    /// A list of the supported DB engine modes.
    public var supportedEngineModes: [Swift.String]?
    /// A list of features supported by the DB engine. The supported features vary by DB engine and DB engine version. To determine the supported features for a specific DB engine and DB engine version using the CLI, use the following command: aws rds describe-db-engine-versions --engine --engine-version  For example, to determine the supported features for RDS for PostgreSQL version 13.3 using the CLI, use the following command: aws rds describe-db-engine-versions --engine postgres --engine-version 13.3 The supported features are listed under SupportedFeatureNames in the output.
    public var supportedFeatureNames: [Swift.String]?
    /// A list of the character sets supported by the Oracle DB engine for the NcharCharacterSetName parameter of the CreateDBInstance operation.
    public var supportedNcharCharacterSets: [RDSClientTypes.CharacterSet]?
    /// A list of the time zones supported by this engine for the Timezone parameter of the CreateDBInstance action.
    public var supportedTimezones: [RDSClientTypes.Timezone]?
    /// Indicates whether the engine version supports Babelfish for Aurora PostgreSQL.
    public var supportsBabelfish: Swift.Bool?
    /// Indicates whether the engine version supports rotating the server certificate without rebooting the DB instance.
    public var supportsCertificateRotationWithoutRestart: Swift.Bool?
    /// Indicates whether you can use Aurora global databases with a specific DB engine version.
    public var supportsGlobalDatabases: Swift.Bool?
    /// Indicates whether the DB engine version supports zero-ETL integrations with Amazon Redshift.
    public var supportsIntegrations: Swift.Bool?
    /// Indicates whether the DB engine version supports forwarding write operations from reader DB instances to the writer DB instance in the DB cluster. By default, write operations aren't allowed on reader DB instances. Valid for: Aurora DB clusters only
    public var supportsLocalWriteForwarding: Swift.Bool?
    /// Indicates whether the engine version supports exporting the log types specified by ExportableLogTypes to CloudWatch Logs.
    public var supportsLogExportsToCloudwatchLogs: Swift.Bool?
    /// Indicates whether you can use Aurora parallel query with a specific DB engine version.
    public var supportsParallelQuery: Swift.Bool?
    /// Indicates whether the database engine version supports read replicas.
    public var supportsReadReplica: Swift.Bool?
    /// A list of tags. For more information, see [Tagging Amazon RDS Resources](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html) in the Amazon RDS User Guide.
    public var tagList: [RDSClientTypes.Tag]?
    /// A list of engine versions that this database engine version can be upgraded to.
    public var validUpgradeTarget: [RDSClientTypes.UpgradeTarget]?

    public init(
        createTime: ClientRuntime.Date? = nil,
        customDBEngineVersionManifest: Swift.String? = nil,
        databaseInstallationFilesS3BucketName: Swift.String? = nil,
        databaseInstallationFilesS3Prefix: Swift.String? = nil,
        dbEngineDescription: Swift.String? = nil,
        dbEngineMediaType: Swift.String? = nil,
        dbEngineVersionArn: Swift.String? = nil,
        dbEngineVersionDescription: Swift.String? = nil,
        dbParameterGroupFamily: Swift.String? = nil,
        defaultCharacterSet: RDSClientTypes.CharacterSet? = nil,
        engine: Swift.String? = nil,
        engineVersion: Swift.String? = nil,
        exportableLogTypes: [Swift.String]? = nil,
        image: RDSClientTypes.CustomDBEngineVersionAMI? = nil,
        kmsKeyId: Swift.String? = nil,
        majorEngineVersion: Swift.String? = nil,
        status: Swift.String? = nil,
        supportedCACertificateIdentifiers: [Swift.String]? = nil,
        supportedCharacterSets: [RDSClientTypes.CharacterSet]? = nil,
        supportedEngineModes: [Swift.String]? = nil,
        supportedFeatureNames: [Swift.String]? = nil,
        supportedNcharCharacterSets: [RDSClientTypes.CharacterSet]? = nil,
        supportedTimezones: [RDSClientTypes.Timezone]? = nil,
        supportsBabelfish: Swift.Bool? = nil,
        supportsCertificateRotationWithoutRestart: Swift.Bool? = nil,
        supportsGlobalDatabases: Swift.Bool? = nil,
        supportsIntegrations: Swift.Bool? = nil,
        supportsLocalWriteForwarding: Swift.Bool? = nil,
        supportsLogExportsToCloudwatchLogs: Swift.Bool? = nil,
        supportsParallelQuery: Swift.Bool? = nil,
        supportsReadReplica: Swift.Bool? = nil,
        tagList: [RDSClientTypes.Tag]? = nil,
        validUpgradeTarget: [RDSClientTypes.UpgradeTarget]? = nil
    )
    {
        self.createTime = createTime
        self.customDBEngineVersionManifest = customDBEngineVersionManifest
        self.databaseInstallationFilesS3BucketName = databaseInstallationFilesS3BucketName
        self.databaseInstallationFilesS3Prefix = databaseInstallationFilesS3Prefix
        self.dbEngineDescription = dbEngineDescription
        self.dbEngineMediaType = dbEngineMediaType
        self.dbEngineVersionArn = dbEngineVersionArn
        self.dbEngineVersionDescription = dbEngineVersionDescription
        self.dbParameterGroupFamily = dbParameterGroupFamily
        self.defaultCharacterSet = defaultCharacterSet
        self.engine = engine
        self.engineVersion = engineVersion
        self.exportableLogTypes = exportableLogTypes
        self.image = image
        self.kmsKeyId = kmsKeyId
        self.majorEngineVersion = majorEngineVersion
        self.status = status
        self.supportedCACertificateIdentifiers = supportedCACertificateIdentifiers
        self.supportedCharacterSets = supportedCharacterSets
        self.supportedEngineModes = supportedEngineModes
        self.supportedFeatureNames = supportedFeatureNames
        self.supportedNcharCharacterSets = supportedNcharCharacterSets
        self.supportedTimezones = supportedTimezones
        self.supportsBabelfish = supportsBabelfish
        self.supportsCertificateRotationWithoutRestart = supportsCertificateRotationWithoutRestart
        self.supportsGlobalDatabases = supportsGlobalDatabases
        self.supportsIntegrations = supportsIntegrations
        self.supportsLocalWriteForwarding = supportsLocalWriteForwarding
        self.supportsLogExportsToCloudwatchLogs = supportsLogExportsToCloudwatchLogs
        self.supportsParallelQuery = supportsParallelQuery
        self.supportsReadReplica = supportsReadReplica
        self.tagList = tagList
        self.validUpgradeTarget = validUpgradeTarget
    }
}

enum CreateCustomDBEngineVersionOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "CreateCustomDBEngineVersionFault": return try await CreateCustomDBEngineVersionFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "CustomDBEngineVersionAlreadyExistsFault": return try await CustomDBEngineVersionAlreadyExistsFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "CustomDBEngineVersionQuotaExceededFault": return try await CustomDBEngineVersionQuotaExceededFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "Ec2ImagePropertiesNotSupportedFault": return try await Ec2ImagePropertiesNotSupportedFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "KMSKeyNotAccessibleFault": return try await KMSKeyNotAccessibleFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension CreateDBClusterEndpointInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dbClusterEndpointIdentifier = "DBClusterEndpointIdentifier"
        case dbClusterIdentifier = "DBClusterIdentifier"
        case endpointType = "EndpointType"
        case excludedMembers = "ExcludedMembers"
        case staticMembers = "StaticMembers"
        case tags = "Tags"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let dbClusterEndpointIdentifier = dbClusterEndpointIdentifier {
            try container.encode(dbClusterEndpointIdentifier, forKey: ClientRuntime.Key("DBClusterEndpointIdentifier"))
        }
        if let dbClusterIdentifier = dbClusterIdentifier {
            try container.encode(dbClusterIdentifier, forKey: ClientRuntime.Key("DBClusterIdentifier"))
        }
        if let endpointType = endpointType {
            try container.encode(endpointType, forKey: ClientRuntime.Key("EndpointType"))
        }
        if let excludedMembers = excludedMembers {
            if !excludedMembers.isEmpty {
                var excludedMembersContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("ExcludedMembers"))
                for (index0, string0) in excludedMembers.enumerated() {
                    try excludedMembersContainer.encode(string0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var excludedMembersContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("ExcludedMembers"))
                try excludedMembersContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let staticMembers = staticMembers {
            if !staticMembers.isEmpty {
                var staticMembersContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("StaticMembers"))
                for (index0, string0) in staticMembers.enumerated() {
                    try staticMembersContainer.encode(string0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var staticMembersContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("StaticMembers"))
                try staticMembersContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let tags = tags {
            if !tags.isEmpty {
                var tagsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Tags"))
                for (index0, tag0) in tags.enumerated() {
                    try tagsContainer.encode(tag0, forKey: ClientRuntime.Key("Tag.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var tagsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Tags"))
                try tagsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        try container.encode("CreateDBClusterEndpoint", forKey:ClientRuntime.Key("Action"))
        try container.encode("2014-10-31", forKey:ClientRuntime.Key("Version"))
    }
}

extension CreateDBClusterEndpointInput {

    static func urlPathProvider(_ value: CreateDBClusterEndpointInput) -> Swift.String? {
        return "/"
    }
}

public struct CreateDBClusterEndpointInput: Swift.Equatable {
    /// The identifier to use for the new endpoint. This parameter is stored as a lowercase string.
    /// This member is required.
    public var dbClusterEndpointIdentifier: Swift.String?
    /// The DB cluster identifier of the DB cluster associated with the endpoint. This parameter is stored as a lowercase string.
    /// This member is required.
    public var dbClusterIdentifier: Swift.String?
    /// The type of the endpoint, one of: READER, WRITER, ANY.
    /// This member is required.
    public var endpointType: Swift.String?
    /// List of DB instance identifiers that aren't part of the custom endpoint group. All other eligible instances are reachable through the custom endpoint. This parameter is relevant only if the list of static members is empty.
    public var excludedMembers: [Swift.String]?
    /// List of DB instance identifiers that are part of the custom endpoint group.
    public var staticMembers: [Swift.String]?
    /// The tags to be assigned to the Amazon RDS resource.
    public var tags: [RDSClientTypes.Tag]?

    public init(
        dbClusterEndpointIdentifier: Swift.String? = nil,
        dbClusterIdentifier: Swift.String? = nil,
        endpointType: Swift.String? = nil,
        excludedMembers: [Swift.String]? = nil,
        staticMembers: [Swift.String]? = nil,
        tags: [RDSClientTypes.Tag]? = nil
    )
    {
        self.dbClusterEndpointIdentifier = dbClusterEndpointIdentifier
        self.dbClusterIdentifier = dbClusterIdentifier
        self.endpointType = endpointType
        self.excludedMembers = excludedMembers
        self.staticMembers = staticMembers
        self.tags = tags
    }
}

extension CreateDBClusterEndpointOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<CreateDBClusterEndpointOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["CreateDBClusterEndpointResult"]
            var value = CreateDBClusterEndpointOutput()
            value.customEndpointType = try reader["CustomEndpointType"].readIfPresent()
            value.dbClusterEndpointArn = try reader["DBClusterEndpointArn"].readIfPresent()
            value.dbClusterEndpointIdentifier = try reader["DBClusterEndpointIdentifier"].readIfPresent()
            value.dbClusterEndpointResourceIdentifier = try reader["DBClusterEndpointResourceIdentifier"].readIfPresent()
            value.dbClusterIdentifier = try reader["DBClusterIdentifier"].readIfPresent()
            value.endpoint = try reader["Endpoint"].readIfPresent()
            value.endpointType = try reader["EndpointType"].readIfPresent()
            value.excludedMembers = try reader["ExcludedMembers"].readListIfPresent(memberReadingClosure: Swift.String.readingClosure, memberNodeInfo: "member", isFlattened: false)
            value.staticMembers = try reader["StaticMembers"].readListIfPresent(memberReadingClosure: Swift.String.readingClosure, memberNodeInfo: "member", isFlattened: false)
            value.status = try reader["Status"].readIfPresent()
            return value
        }
    }
}

/// This data type represents the information you need to connect to an Amazon Aurora DB cluster. This data type is used as a response element in the following actions:
///
/// * CreateDBClusterEndpoint
///
/// * DescribeDBClusterEndpoints
///
/// * ModifyDBClusterEndpoint
///
/// * DeleteDBClusterEndpoint
///
///
/// For the data structure that represents Amazon RDS DB instance endpoints, see Endpoint.
public struct CreateDBClusterEndpointOutput: Swift.Equatable {
    /// The type associated with a custom endpoint. One of: READER, WRITER, ANY.
    public var customEndpointType: Swift.String?
    /// The Amazon Resource Name (ARN) for the endpoint.
    public var dbClusterEndpointArn: Swift.String?
    /// The identifier associated with the endpoint. This parameter is stored as a lowercase string.
    public var dbClusterEndpointIdentifier: Swift.String?
    /// A unique system-generated identifier for an endpoint. It remains the same for the whole life of the endpoint.
    public var dbClusterEndpointResourceIdentifier: Swift.String?
    /// The DB cluster identifier of the DB cluster associated with the endpoint. This parameter is stored as a lowercase string.
    public var dbClusterIdentifier: Swift.String?
    /// The DNS address of the endpoint.
    public var endpoint: Swift.String?
    /// The type of the endpoint. One of: READER, WRITER, CUSTOM.
    public var endpointType: Swift.String?
    /// List of DB instance identifiers that aren't part of the custom endpoint group. All other eligible instances are reachable through the custom endpoint. Only relevant if the list of static members is empty.
    public var excludedMembers: [Swift.String]?
    /// List of DB instance identifiers that are part of the custom endpoint group.
    public var staticMembers: [Swift.String]?
    /// The current status of the endpoint. One of: creating, available, deleting, inactive, modifying. The inactive state applies to an endpoint that can't be used for a certain kind of cluster, such as a writer endpoint for a read-only secondary cluster in a global database.
    public var status: Swift.String?

    public init(
        customEndpointType: Swift.String? = nil,
        dbClusterEndpointArn: Swift.String? = nil,
        dbClusterEndpointIdentifier: Swift.String? = nil,
        dbClusterEndpointResourceIdentifier: Swift.String? = nil,
        dbClusterIdentifier: Swift.String? = nil,
        endpoint: Swift.String? = nil,
        endpointType: Swift.String? = nil,
        excludedMembers: [Swift.String]? = nil,
        staticMembers: [Swift.String]? = nil,
        status: Swift.String? = nil
    )
    {
        self.customEndpointType = customEndpointType
        self.dbClusterEndpointArn = dbClusterEndpointArn
        self.dbClusterEndpointIdentifier = dbClusterEndpointIdentifier
        self.dbClusterEndpointResourceIdentifier = dbClusterEndpointResourceIdentifier
        self.dbClusterIdentifier = dbClusterIdentifier
        self.endpoint = endpoint
        self.endpointType = endpointType
        self.excludedMembers = excludedMembers
        self.staticMembers = staticMembers
        self.status = status
    }
}

enum CreateDBClusterEndpointOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "DBClusterEndpointAlreadyExistsFault": return try await DBClusterEndpointAlreadyExistsFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "DBClusterEndpointQuotaExceededFault": return try await DBClusterEndpointQuotaExceededFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "DBClusterNotFoundFault": return try await DBClusterNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "DBInstanceNotFound": return try await DBInstanceNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "InvalidDBClusterStateFault": return try await InvalidDBClusterStateFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "InvalidDBInstanceState": return try await InvalidDBInstanceStateFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension CreateDBClusterInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case allocatedStorage = "AllocatedStorage"
        case autoMinorVersionUpgrade = "AutoMinorVersionUpgrade"
        case availabilityZones = "AvailabilityZones"
        case backtrackWindow = "BacktrackWindow"
        case backupRetentionPeriod = "BackupRetentionPeriod"
        case characterSetName = "CharacterSetName"
        case copyTagsToSnapshot = "CopyTagsToSnapshot"
        case dbClusterIdentifier = "DBClusterIdentifier"
        case dbClusterInstanceClass = "DBClusterInstanceClass"
        case dbClusterParameterGroupName = "DBClusterParameterGroupName"
        case dbSubnetGroupName = "DBSubnetGroupName"
        case dbSystemId = "DBSystemId"
        case databaseName = "DatabaseName"
        case deletionProtection = "DeletionProtection"
        case domain = "Domain"
        case domainIAMRoleName = "DomainIAMRoleName"
        case enableCloudwatchLogsExports = "EnableCloudwatchLogsExports"
        case enableGlobalWriteForwarding = "EnableGlobalWriteForwarding"
        case enableHttpEndpoint = "EnableHttpEndpoint"
        case enableIAMDatabaseAuthentication = "EnableIAMDatabaseAuthentication"
        case enableLimitlessDatabase = "EnableLimitlessDatabase"
        case enableLocalWriteForwarding = "EnableLocalWriteForwarding"
        case enablePerformanceInsights = "EnablePerformanceInsights"
        case engine = "Engine"
        case engineMode = "EngineMode"
        case engineVersion = "EngineVersion"
        case globalClusterIdentifier = "GlobalClusterIdentifier"
        case iops = "Iops"
        case kmsKeyId = "KmsKeyId"
        case manageMasterUserPassword = "ManageMasterUserPassword"
        case masterUserPassword = "MasterUserPassword"
        case masterUserSecretKmsKeyId = "MasterUserSecretKmsKeyId"
        case masterUsername = "MasterUsername"
        case monitoringInterval = "MonitoringInterval"
        case monitoringRoleArn = "MonitoringRoleArn"
        case networkType = "NetworkType"
        case optionGroupName = "OptionGroupName"
        case performanceInsightsKMSKeyId = "PerformanceInsightsKMSKeyId"
        case performanceInsightsRetentionPeriod = "PerformanceInsightsRetentionPeriod"
        case port = "Port"
        case preSignedUrl = "PreSignedUrl"
        case preferredBackupWindow = "PreferredBackupWindow"
        case preferredMaintenanceWindow = "PreferredMaintenanceWindow"
        case publiclyAccessible = "PubliclyAccessible"
        case rdsCustomClusterConfiguration = "RdsCustomClusterConfiguration"
        case replicationSourceIdentifier = "ReplicationSourceIdentifier"
        case scalingConfiguration = "ScalingConfiguration"
        case serverlessV2ScalingConfiguration = "ServerlessV2ScalingConfiguration"
        case storageEncrypted = "StorageEncrypted"
        case storageType = "StorageType"
        case tags = "Tags"
        case vpcSecurityGroupIds = "VpcSecurityGroupIds"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let allocatedStorage = allocatedStorage {
            try container.encode(allocatedStorage, forKey: ClientRuntime.Key("AllocatedStorage"))
        }
        if let autoMinorVersionUpgrade = autoMinorVersionUpgrade {
            try container.encode(autoMinorVersionUpgrade, forKey: ClientRuntime.Key("AutoMinorVersionUpgrade"))
        }
        if let availabilityZones = availabilityZones {
            if !availabilityZones.isEmpty {
                var availabilityZonesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("AvailabilityZones"))
                for (index0, string0) in availabilityZones.enumerated() {
                    try availabilityZonesContainer.encode(string0, forKey: ClientRuntime.Key("AvailabilityZone.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var availabilityZonesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("AvailabilityZones"))
                try availabilityZonesContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let backtrackWindow = backtrackWindow {
            try container.encode(backtrackWindow, forKey: ClientRuntime.Key("BacktrackWindow"))
        }
        if let backupRetentionPeriod = backupRetentionPeriod {
            try container.encode(backupRetentionPeriod, forKey: ClientRuntime.Key("BackupRetentionPeriod"))
        }
        if let characterSetName = characterSetName {
            try container.encode(characterSetName, forKey: ClientRuntime.Key("CharacterSetName"))
        }
        if let copyTagsToSnapshot = copyTagsToSnapshot {
            try container.encode(copyTagsToSnapshot, forKey: ClientRuntime.Key("CopyTagsToSnapshot"))
        }
        if let dbClusterIdentifier = dbClusterIdentifier {
            try container.encode(dbClusterIdentifier, forKey: ClientRuntime.Key("DBClusterIdentifier"))
        }
        if let dbClusterInstanceClass = dbClusterInstanceClass {
            try container.encode(dbClusterInstanceClass, forKey: ClientRuntime.Key("DBClusterInstanceClass"))
        }
        if let dbClusterParameterGroupName = dbClusterParameterGroupName {
            try container.encode(dbClusterParameterGroupName, forKey: ClientRuntime.Key("DBClusterParameterGroupName"))
        }
        if let dbSubnetGroupName = dbSubnetGroupName {
            try container.encode(dbSubnetGroupName, forKey: ClientRuntime.Key("DBSubnetGroupName"))
        }
        if let dbSystemId = dbSystemId {
            try container.encode(dbSystemId, forKey: ClientRuntime.Key("DBSystemId"))
        }
        if let databaseName = databaseName {
            try container.encode(databaseName, forKey: ClientRuntime.Key("DatabaseName"))
        }
        if let deletionProtection = deletionProtection {
            try container.encode(deletionProtection, forKey: ClientRuntime.Key("DeletionProtection"))
        }
        if let domain = domain {
            try container.encode(domain, forKey: ClientRuntime.Key("Domain"))
        }
        if let domainIAMRoleName = domainIAMRoleName {
            try container.encode(domainIAMRoleName, forKey: ClientRuntime.Key("DomainIAMRoleName"))
        }
        if let enableCloudwatchLogsExports = enableCloudwatchLogsExports {
            if !enableCloudwatchLogsExports.isEmpty {
                var enableCloudwatchLogsExportsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("EnableCloudwatchLogsExports"))
                for (index0, string0) in enableCloudwatchLogsExports.enumerated() {
                    try enableCloudwatchLogsExportsContainer.encode(string0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var enableCloudwatchLogsExportsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("EnableCloudwatchLogsExports"))
                try enableCloudwatchLogsExportsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let enableGlobalWriteForwarding = enableGlobalWriteForwarding {
            try container.encode(enableGlobalWriteForwarding, forKey: ClientRuntime.Key("EnableGlobalWriteForwarding"))
        }
        if let enableHttpEndpoint = enableHttpEndpoint {
            try container.encode(enableHttpEndpoint, forKey: ClientRuntime.Key("EnableHttpEndpoint"))
        }
        if let enableIAMDatabaseAuthentication = enableIAMDatabaseAuthentication {
            try container.encode(enableIAMDatabaseAuthentication, forKey: ClientRuntime.Key("EnableIAMDatabaseAuthentication"))
        }
        if let enableLimitlessDatabase = enableLimitlessDatabase {
            try container.encode(enableLimitlessDatabase, forKey: ClientRuntime.Key("EnableLimitlessDatabase"))
        }
        if let enableLocalWriteForwarding = enableLocalWriteForwarding {
            try container.encode(enableLocalWriteForwarding, forKey: ClientRuntime.Key("EnableLocalWriteForwarding"))
        }
        if let enablePerformanceInsights = enablePerformanceInsights {
            try container.encode(enablePerformanceInsights, forKey: ClientRuntime.Key("EnablePerformanceInsights"))
        }
        if let engine = engine {
            try container.encode(engine, forKey: ClientRuntime.Key("Engine"))
        }
        if let engineMode = engineMode {
            try container.encode(engineMode, forKey: ClientRuntime.Key("EngineMode"))
        }
        if let engineVersion = engineVersion {
            try container.encode(engineVersion, forKey: ClientRuntime.Key("EngineVersion"))
        }
        if let globalClusterIdentifier = globalClusterIdentifier {
            try container.encode(globalClusterIdentifier, forKey: ClientRuntime.Key("GlobalClusterIdentifier"))
        }
        if let iops = iops {
            try container.encode(iops, forKey: ClientRuntime.Key("Iops"))
        }
        if let kmsKeyId = kmsKeyId {
            try container.encode(kmsKeyId, forKey: ClientRuntime.Key("KmsKeyId"))
        }
        if let manageMasterUserPassword = manageMasterUserPassword {
            try container.encode(manageMasterUserPassword, forKey: ClientRuntime.Key("ManageMasterUserPassword"))
        }
        if let masterUserPassword = masterUserPassword {
            try container.encode(masterUserPassword, forKey: ClientRuntime.Key("MasterUserPassword"))
        }
        if let masterUserSecretKmsKeyId = masterUserSecretKmsKeyId {
            try container.encode(masterUserSecretKmsKeyId, forKey: ClientRuntime.Key("MasterUserSecretKmsKeyId"))
        }
        if let masterUsername = masterUsername {
            try container.encode(masterUsername, forKey: ClientRuntime.Key("MasterUsername"))
        }
        if let monitoringInterval = monitoringInterval {
            try container.encode(monitoringInterval, forKey: ClientRuntime.Key("MonitoringInterval"))
        }
        if let monitoringRoleArn = monitoringRoleArn {
            try container.encode(monitoringRoleArn, forKey: ClientRuntime.Key("MonitoringRoleArn"))
        }
        if let networkType = networkType {
            try container.encode(networkType, forKey: ClientRuntime.Key("NetworkType"))
        }
        if let optionGroupName = optionGroupName {
            try container.encode(optionGroupName, forKey: ClientRuntime.Key("OptionGroupName"))
        }
        if let performanceInsightsKMSKeyId = performanceInsightsKMSKeyId {
            try container.encode(performanceInsightsKMSKeyId, forKey: ClientRuntime.Key("PerformanceInsightsKMSKeyId"))
        }
        if let performanceInsightsRetentionPeriod = performanceInsightsRetentionPeriod {
            try container.encode(performanceInsightsRetentionPeriod, forKey: ClientRuntime.Key("PerformanceInsightsRetentionPeriod"))
        }
        if let port = port {
            try container.encode(port, forKey: ClientRuntime.Key("Port"))
        }
        if let preSignedUrl = preSignedUrl {
            try container.encode(preSignedUrl, forKey: ClientRuntime.Key("PreSignedUrl"))
        }
        if let preferredBackupWindow = preferredBackupWindow {
            try container.encode(preferredBackupWindow, forKey: ClientRuntime.Key("PreferredBackupWindow"))
        }
        if let preferredMaintenanceWindow = preferredMaintenanceWindow {
            try container.encode(preferredMaintenanceWindow, forKey: ClientRuntime.Key("PreferredMaintenanceWindow"))
        }
        if let publiclyAccessible = publiclyAccessible {
            try container.encode(publiclyAccessible, forKey: ClientRuntime.Key("PubliclyAccessible"))
        }
        if let rdsCustomClusterConfiguration = rdsCustomClusterConfiguration {
            try container.encode(rdsCustomClusterConfiguration, forKey: ClientRuntime.Key("RdsCustomClusterConfiguration"))
        }
        if let replicationSourceIdentifier = replicationSourceIdentifier {
            try container.encode(replicationSourceIdentifier, forKey: ClientRuntime.Key("ReplicationSourceIdentifier"))
        }
        if let scalingConfiguration = scalingConfiguration {
            try container.encode(scalingConfiguration, forKey: ClientRuntime.Key("ScalingConfiguration"))
        }
        if let serverlessV2ScalingConfiguration = serverlessV2ScalingConfiguration {
            try container.encode(serverlessV2ScalingConfiguration, forKey: ClientRuntime.Key("ServerlessV2ScalingConfiguration"))
        }
        if let storageEncrypted = storageEncrypted {
            try container.encode(storageEncrypted, forKey: ClientRuntime.Key("StorageEncrypted"))
        }
        if let storageType = storageType {
            try container.encode(storageType, forKey: ClientRuntime.Key("StorageType"))
        }
        if let tags = tags {
            if !tags.isEmpty {
                var tagsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Tags"))
                for (index0, tag0) in tags.enumerated() {
                    try tagsContainer.encode(tag0, forKey: ClientRuntime.Key("Tag.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var tagsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Tags"))
                try tagsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let vpcSecurityGroupIds = vpcSecurityGroupIds {
            if !vpcSecurityGroupIds.isEmpty {
                var vpcSecurityGroupIdsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("VpcSecurityGroupIds"))
                for (index0, string0) in vpcSecurityGroupIds.enumerated() {
                    try vpcSecurityGroupIdsContainer.encode(string0, forKey: ClientRuntime.Key("VpcSecurityGroupId.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var vpcSecurityGroupIdsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("VpcSecurityGroupIds"))
                try vpcSecurityGroupIdsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        try container.encode("CreateDBCluster", forKey:ClientRuntime.Key("Action"))
        try container.encode("2014-10-31", forKey:ClientRuntime.Key("Version"))
    }
}

extension CreateDBClusterInput {

    static func urlPathProvider(_ value: CreateDBClusterInput) -> Swift.String? {
        return "/"
    }
}

///
public struct CreateDBClusterInput: Swift.Equatable {
    /// The amount of storage in gibibytes (GiB) to allocate to each DB instance in the Multi-AZ DB cluster. Valid for Cluster Type: Multi-AZ DB clusters only This setting is required to create a Multi-AZ DB cluster.
    public var allocatedStorage: Swift.Int?
    /// Specifies whether minor engine upgrades are applied automatically to the DB cluster during the maintenance window. By default, minor engine upgrades are applied automatically. Valid for Cluster Type: Multi-AZ DB clusters only
    public var autoMinorVersionUpgrade: Swift.Bool?
    /// A list of Availability Zones (AZs) where DB instances in the DB cluster can be created. For information on Amazon Web Services Regions and Availability Zones, see [Choosing the Regions and Availability Zones](https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/Concepts.RegionsAndAvailabilityZones.html) in the Amazon Aurora User Guide. Valid for Cluster Type: Aurora DB clusters only
    public var availabilityZones: [Swift.String]?
    /// The target backtrack window, in seconds. To disable backtracking, set this value to 0. Valid for Cluster Type: Aurora MySQL DB clusters only Default: 0 Constraints:
    ///
    /// * If specified, this value must be set to a number from 0 to 259,200 (72 hours).
    public var backtrackWindow: Swift.Int?
    /// The number of days for which automated backups are retained. Valid for Cluster Type: Aurora DB clusters and Multi-AZ DB clusters Default: 1 Constraints:
    ///
    /// * Must be a value from 1 to 35.
    public var backupRetentionPeriod: Swift.Int?
    /// The name of the character set (CharacterSet) to associate the DB cluster with. Valid for Cluster Type: Aurora DB clusters only
    public var characterSetName: Swift.String?
    /// Specifies whether to copy all tags from the DB cluster to snapshots of the DB cluster. The default is not to copy them. Valid for Cluster Type: Aurora DB clusters and Multi-AZ DB clusters
    public var copyTagsToSnapshot: Swift.Bool?
    /// The name for your database of up to 64 alphanumeric characters. If you don't provide a name, Amazon RDS doesn't create a database in the DB cluster you are creating. Valid for Cluster Type: Aurora DB clusters and Multi-AZ DB clusters
    public var databaseName: Swift.String?
    /// The identifier for this DB cluster. This parameter is stored as a lowercase string. Valid for Cluster Type: Aurora DB clusters and Multi-AZ DB clusters Constraints:
    ///
    /// * Must contain from 1 to 63 letters, numbers, or hyphens.
    ///
    /// * First character must be a letter.
    ///
    /// * Can't end with a hyphen or contain two consecutive hyphens.
    ///
    ///
    /// Example: my-cluster1
    /// This member is required.
    public var dbClusterIdentifier: Swift.String?
    /// The compute and memory capacity of each DB instance in the Multi-AZ DB cluster, for example db.m6gd.xlarge. Not all DB instance classes are available in all Amazon Web Services Regions, or for all database engines. For the full list of DB instance classes and availability for your engine, see [DB instance class](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.DBInstanceClass.html) in the Amazon RDS User Guide. This setting is required to create a Multi-AZ DB cluster. Valid for Cluster Type: Multi-AZ DB clusters only
    public var dbClusterInstanceClass: Swift.String?
    /// The name of the DB cluster parameter group to associate with this DB cluster. If you don't specify a value, then the default DB cluster parameter group for the specified DB engine and version is used. Valid for Cluster Type: Aurora DB clusters and Multi-AZ DB clusters Constraints:
    ///
    /// * If supplied, must match the name of an existing DB cluster parameter group.
    public var dbClusterParameterGroupName: Swift.String?
    /// A DB subnet group to associate with this DB cluster. This setting is required to create a Multi-AZ DB cluster. Valid for Cluster Type: Aurora DB clusters and Multi-AZ DB clusters Constraints:
    ///
    /// * Must match the name of an existing DB subnet group.
    ///
    /// * Must not be default.
    ///
    ///
    /// Example: mydbsubnetgroup
    public var dbSubnetGroupName: Swift.String?
    /// Reserved for future use.
    public var dbSystemId: Swift.String?
    /// Specifies whether the DB cluster has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection isn't enabled. Valid for Cluster Type: Aurora DB clusters and Multi-AZ DB clusters
    public var deletionProtection: Swift.Bool?
    /// The Active Directory directory ID to create the DB cluster in. For Amazon Aurora DB clusters, Amazon RDS can use Kerberos authentication to authenticate users that connect to the DB cluster. For more information, see [Kerberos authentication](https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/kerberos-authentication.html) in the Amazon Aurora User Guide. Valid for Cluster Type: Aurora DB clusters only
    public var domain: Swift.String?
    /// The name of the IAM role to use when making API calls to the Directory Service. Valid for Cluster Type: Aurora DB clusters only
    public var domainIAMRoleName: Swift.String?
    /// The list of log types that need to be enabled for exporting to CloudWatch Logs. Valid for Cluster Type: Aurora DB clusters and Multi-AZ DB clusters The following values are valid for each DB engine:
    ///
    /// * Aurora MySQL - audit | error | general | slowquery
    ///
    /// * Aurora PostgreSQL - postgresql
    ///
    /// * RDS for MySQL - error | general | slowquery
    ///
    /// * RDS for PostgreSQL - postgresql | upgrade
    ///
    ///
    /// For more information about exporting CloudWatch Logs for Amazon RDS, see [Publishing Database Logs to Amazon CloudWatch Logs](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch) in the Amazon RDS User Guide. For more information about exporting CloudWatch Logs for Amazon Aurora, see [Publishing Database Logs to Amazon CloudWatch Logs](https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch) in the Amazon Aurora User Guide.
    public var enableCloudwatchLogsExports: [Swift.String]?
    /// Specifies whether to enable this DB cluster to forward write operations to the primary cluster of a global cluster (Aurora global database). By default, write operations are not allowed on Aurora DB clusters that are secondary clusters in an Aurora global database. You can set this value only on Aurora DB clusters that are members of an Aurora global database. With this parameter enabled, a secondary cluster can forward writes to the current primary cluster, and the resulting changes are replicated back to this cluster. For the primary DB cluster of an Aurora global database, this value is used immediately if the primary is demoted by a global cluster API operation, but it does nothing until then. Valid for Cluster Type: Aurora DB clusters only
    public var enableGlobalWriteForwarding: Swift.Bool?
    /// Specifies whether to enable the HTTP endpoint for the DB cluster. By default, the HTTP endpoint isn't enabled. When enabled, the HTTP endpoint provides a connectionless web service API (RDS Data API) for running SQL queries on the DB cluster. You can also query your database from inside the RDS console with the RDS query editor. RDS Data API is supported with the following DB clusters:
    ///
    /// * Aurora PostgreSQL Serverless v2 and provisioned
    ///
    /// * Aurora PostgreSQL and Aurora MySQL Serverless v1
    ///
    ///
    /// For more information, see [Using RDS Data API](https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/data-api.html) in the Amazon Aurora User Guide. Valid for Cluster Type: Aurora DB clusters only
    public var enableHttpEndpoint: Swift.Bool?
    /// Specifies whether to enable mapping of Amazon Web Services Identity and Access Management (IAM) accounts to database accounts. By default, mapping isn't enabled. For more information, see [ IAM Database Authentication](https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/UsingWithRDS.IAMDBAuth.html) in the Amazon Aurora User Guide. Valid for Cluster Type: Aurora DB clusters only
    public var enableIAMDatabaseAuthentication: Swift.Bool?
    /// Specifies whether to enable Aurora Limitless Database. You must enable Aurora Limitless Database to create a DB shard group. Valid for: Aurora DB clusters only
    public var enableLimitlessDatabase: Swift.Bool?
    /// Specifies whether read replicas can forward write operations to the writer DB instance in the DB cluster. By default, write operations aren't allowed on reader DB instances. Valid for: Aurora DB clusters only
    public var enableLocalWriteForwarding: Swift.Bool?
    /// Specifies whether to turn on Performance Insights for the DB cluster. For more information, see [ Using Amazon Performance Insights](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_PerfInsights.html) in the Amazon RDS User Guide. Valid for Cluster Type: Multi-AZ DB clusters only
    public var enablePerformanceInsights: Swift.Bool?
    /// The database engine to use for this DB cluster. Valid for Cluster Type: Aurora DB clusters and Multi-AZ DB clusters Valid Values: aurora-mysql | aurora-postgresql | mysql | postgres
    /// This member is required.
    public var engine: Swift.String?
    /// The DB engine mode of the DB cluster, either provisioned or serverless. The serverless engine mode only applies for Aurora Serverless v1 DB clusters. For information about limitations and requirements for Serverless DB clusters, see the following sections in the Amazon Aurora User Guide:
    ///
    /// * [Limitations of Aurora Serverless v1](https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html#aurora-serverless.limitations)
    ///
    /// * [Requirements for Aurora Serverless v2](https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless-v2.requirements.html)
    ///
    ///
    /// Valid for Cluster Type: Aurora DB clusters only
    public var engineMode: Swift.String?
    /// The version number of the database engine to use. To list all of the available engine versions for Aurora MySQL version 2 (5.7-compatible) and version 3 (MySQL 8.0-compatible), use the following command: aws rds describe-db-engine-versions --engine aurora-mysql --query "DBEngineVersions[].EngineVersion" You can supply either 5.7 or 8.0 to use the default engine version for Aurora MySQL version 2 or version 3, respectively. To list all of the available engine versions for Aurora PostgreSQL, use the following command: aws rds describe-db-engine-versions --engine aurora-postgresql --query "DBEngineVersions[].EngineVersion" To list all of the available engine versions for RDS for MySQL, use the following command: aws rds describe-db-engine-versions --engine mysql --query "DBEngineVersions[].EngineVersion" To list all of the available engine versions for RDS for PostgreSQL, use the following command: aws rds describe-db-engine-versions --engine postgres --query "DBEngineVersions[].EngineVersion" For information about a specific engine, see the following topics:
    ///
    /// * Aurora MySQL - see [Database engine updates for Amazon Aurora MySQL](https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/AuroraMySQL.Updates.html) in the Amazon Aurora User Guide.
    ///
    /// * Aurora PostgreSQL - see [Amazon Aurora PostgreSQL releases and engine versions](https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/AuroraPostgreSQL.Updates.20180305.html) in the Amazon Aurora User Guide.
    ///
    /// * RDS for MySQL - see [Amazon RDS for MySQL](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_MySQL.html#MySQL.Concepts.VersionMgmt) in the Amazon RDS User Guide.
    ///
    /// * RDS for PostgreSQL - see [Amazon RDS for PostgreSQL](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_PostgreSQL.html#PostgreSQL.Concepts) in the Amazon RDS User Guide.
    ///
    ///
    /// Valid for Cluster Type: Aurora DB clusters and Multi-AZ DB clusters
    public var engineVersion: Swift.String?
    /// The global cluster ID of an Aurora cluster that becomes the primary cluster in the new global database cluster. Valid for Cluster Type: Aurora DB clusters only
    public var globalClusterIdentifier: Swift.String?
    /// The amount of Provisioned IOPS (input/output operations per second) to be initially allocated for each DB instance in the Multi-AZ DB cluster. For information about valid IOPS values, see [Provisioned IOPS storage](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_Storage.html#USER_PIOPS) in the Amazon RDS User Guide. This setting is required to create a Multi-AZ DB cluster. Valid for Cluster Type: Multi-AZ DB clusters only Constraints:
    ///
    /// * Must be a multiple between .5 and 50 of the storage amount for the DB cluster.
    public var iops: Swift.Int?
    /// The Amazon Web Services KMS key identifier for an encrypted DB cluster. The Amazon Web Services KMS key identifier is the key ARN, key ID, alias ARN, or alias name for the KMS key. To use a KMS key in a different Amazon Web Services account, specify the key ARN or alias ARN. When a KMS key isn't specified in KmsKeyId:
    ///
    /// * If ReplicationSourceIdentifier identifies an encrypted source, then Amazon RDS uses the KMS key used to encrypt the source. Otherwise, Amazon RDS uses your default KMS key.
    ///
    /// * If the StorageEncrypted parameter is enabled and ReplicationSourceIdentifier isn't specified, then Amazon RDS uses your default KMS key.
    ///
    ///
    /// There is a default KMS key for your Amazon Web Services account. Your Amazon Web Services account has a different default KMS key for each Amazon Web Services Region. If you create a read replica of an encrypted DB cluster in another Amazon Web Services Region, make sure to set KmsKeyId to a KMS key identifier that is valid in the destination Amazon Web Services Region. This KMS key is used to encrypt the read replica in that Amazon Web Services Region. Valid for Cluster Type: Aurora DB clusters and Multi-AZ DB clusters
    public var kmsKeyId: Swift.String?
    /// Specifies whether to manage the master user password with Amazon Web Services Secrets Manager. For more information, see [Password management with Amazon Web Services Secrets Manager](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/rds-secrets-manager.html) in the Amazon RDS User Guide and [Password management with Amazon Web Services Secrets Manager](https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/rds-secrets-manager.html) in the Amazon Aurora User Guide. Valid for Cluster Type: Aurora DB clusters and Multi-AZ DB clusters Constraints:
    ///
    /// * Can't manage the master user password with Amazon Web Services Secrets Manager if MasterUserPassword is specified.
    public var manageMasterUserPassword: Swift.Bool?
    /// The password for the master database user. Valid for Cluster Type: Aurora DB clusters and Multi-AZ DB clusters Constraints:
    ///
    /// * Must contain from 8 to 41 characters.
    ///
    /// * Can contain any printable ASCII character except "/", """, or "@".
    ///
    /// * Can't be specified if ManageMasterUserPassword is turned on.
    public var masterUserPassword: Swift.String?
    /// The Amazon Web Services KMS key identifier to encrypt a secret that is automatically generated and managed in Amazon Web Services Secrets Manager. This setting is valid only if the master user password is managed by RDS in Amazon Web Services Secrets Manager for the DB cluster. The Amazon Web Services KMS key identifier is the key ARN, key ID, alias ARN, or alias name for the KMS key. To use a KMS key in a different Amazon Web Services account, specify the key ARN or alias ARN. If you don't specify MasterUserSecretKmsKeyId, then the aws/secretsmanager KMS key is used to encrypt the secret. If the secret is in a different Amazon Web Services account, then you can't use the aws/secretsmanager KMS key to encrypt the secret, and you must use a customer managed KMS key. There is a default KMS key for your Amazon Web Services account. Your Amazon Web Services account has a different default KMS key for each Amazon Web Services Region. Valid for Cluster Type: Aurora DB clusters and Multi-AZ DB clusters
    public var masterUserSecretKmsKeyId: Swift.String?
    /// The name of the master user for the DB cluster. Valid for Cluster Type: Aurora DB clusters and Multi-AZ DB clusters Constraints:
    ///
    /// * Must be 1 to 16 letters or numbers.
    ///
    /// * First character must be a letter.
    ///
    /// * Can't be a reserved word for the chosen database engine.
    public var masterUsername: Swift.String?
    /// The interval, in seconds, between points when Enhanced Monitoring metrics are collected for the DB cluster. To turn off collecting Enhanced Monitoring metrics, specify 0. If MonitoringRoleArn is specified, also set MonitoringInterval to a value other than 0. Valid for Cluster Type: Multi-AZ DB clusters only Valid Values: 0 | 1 | 5 | 10 | 15 | 30 | 60 Default: 0
    public var monitoringInterval: Swift.Int?
    /// The Amazon Resource Name (ARN) for the IAM role that permits RDS to send Enhanced Monitoring metrics to Amazon CloudWatch Logs. An example is arn:aws:iam:123456789012:role/emaccess. For information on creating a monitoring role, see [Setting up and enabling Enhanced Monitoring](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Monitoring.OS.html#USER_Monitoring.OS.Enabling) in the Amazon RDS User Guide. If MonitoringInterval is set to a value other than 0, supply a MonitoringRoleArn value. Valid for Cluster Type: Multi-AZ DB clusters only
    public var monitoringRoleArn: Swift.String?
    /// The network type of the DB cluster. The network type is determined by the DBSubnetGroup specified for the DB cluster. A DBSubnetGroup can support only the IPv4 protocol or the IPv4 and the IPv6 protocols (DUAL). For more information, see [ Working with a DB instance in a VPC](https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_VPC.WorkingWithRDSInstanceinaVPC.html) in the Amazon Aurora User Guide. Valid for Cluster Type: Aurora DB clusters only Valid Values: IPV4 | DUAL
    public var networkType: Swift.String?
    /// The option group to associate the DB cluster with. DB clusters are associated with a default option group that can't be modified.
    public var optionGroupName: Swift.String?
    /// The Amazon Web Services KMS key identifier for encryption of Performance Insights data. The Amazon Web Services KMS key identifier is the key ARN, key ID, alias ARN, or alias name for the KMS key. If you don't specify a value for PerformanceInsightsKMSKeyId, then Amazon RDS uses your default KMS key. There is a default KMS key for your Amazon Web Services account. Your Amazon Web Services account has a different default KMS key for each Amazon Web Services Region. Valid for Cluster Type: Multi-AZ DB clusters only
    public var performanceInsightsKMSKeyId: Swift.String?
    /// The number of days to retain Performance Insights data. Valid for Cluster Type: Multi-AZ DB clusters only Valid Values:
    ///
    /// * 7
    ///
    /// * month * 31, where month is a number of months from 1-23. Examples: 93 (3 months * 31), 341 (11 months * 31), 589 (19 months * 31)
    ///
    /// * 731
    ///
    ///
    /// Default: 7 days If you specify a retention period that isn't valid, such as 94, Amazon RDS issues an error.
    public var performanceInsightsRetentionPeriod: Swift.Int?
    /// The port number on which the instances in the DB cluster accept connections. Valid for Cluster Type: Aurora DB clusters and Multi-AZ DB clusters Valid Values: 1150-65535 Default:
    ///
    /// * RDS for MySQL and Aurora MySQL - 3306
    ///
    /// * RDS for PostgreSQL and Aurora PostgreSQL - 5432
    public var port: Swift.Int?
    /// When you are replicating a DB cluster from one Amazon Web Services GovCloud (US) Region to another, an URL that contains a Signature Version 4 signed request for the CreateDBCluster operation to be called in the source Amazon Web Services Region where the DB cluster is replicated from. Specify PreSignedUrl only when you are performing cross-Region replication from an encrypted DB cluster. The presigned URL must be a valid request for the CreateDBCluster API operation that can run in the source Amazon Web Services Region that contains the encrypted DB cluster to copy. The presigned URL request must contain the following parameter values:
    ///
    /// * KmsKeyId - The KMS key identifier for the KMS key to use to encrypt the copy of the DB cluster in the destination Amazon Web Services Region. This should refer to the same KMS key for both the CreateDBCluster operation that is called in the destination Amazon Web Services Region, and the operation contained in the presigned URL.
    ///
    /// * DestinationRegion - The name of the Amazon Web Services Region that Aurora read replica will be created in.
    ///
    /// * ReplicationSourceIdentifier - The DB cluster identifier for the encrypted DB cluster to be copied. This identifier must be in the Amazon Resource Name (ARN) format for the source Amazon Web Services Region. For example, if you are copying an encrypted DB cluster from the us-west-2 Amazon Web Services Region, then your ReplicationSourceIdentifier would look like Example: arn:aws:rds:us-west-2:123456789012:cluster:aurora-cluster1.
    ///
    ///
    /// To learn how to generate a Signature Version 4 signed request, see [ Authenticating Requests: Using Query Parameters (Amazon Web Services Signature Version 4)](https://docs.aws.amazon.com/AmazonS3/latest/API/sigv4-query-string-auth.html) and [ Signature Version 4 Signing Process](https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html). If you are using an Amazon Web Services SDK tool or the CLI, you can specify SourceRegion (or --source-region for the CLI) instead of specifying PreSignedUrl manually. Specifying SourceRegion autogenerates a presigned URL that is a valid request for the operation that can run in the source Amazon Web Services Region. Valid for Cluster Type: Aurora DB clusters only
    public var preSignedUrl: Swift.String?
    /// The daily time range during which automated backups are created if automated backups are enabled using the BackupRetentionPeriod parameter. Valid for Cluster Type: Aurora DB clusters and Multi-AZ DB clusters The default is a 30-minute window selected at random from an 8-hour block of time for each Amazon Web Services Region. To view the time blocks available, see [ Backup window](https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/Aurora.Managing.Backups.html#Aurora.Managing.Backups.BackupWindow) in the Amazon Aurora User Guide. Constraints:
    ///
    /// * Must be in the format hh24:mi-hh24:mi.
    ///
    /// * Must be in Universal Coordinated Time (UTC).
    ///
    /// * Must not conflict with the preferred maintenance window.
    ///
    /// * Must be at least 30 minutes.
    public var preferredBackupWindow: Swift.String?
    /// The weekly time range during which system maintenance can occur. Valid for Cluster Type: Aurora DB clusters and Multi-AZ DB clusters The default is a 30-minute window selected at random from an 8-hour block of time for each Amazon Web Services Region, occurring on a random day of the week. To see the time blocks available, see [ Adjusting the Preferred DB Cluster Maintenance Window](https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_UpgradeDBInstance.Maintenance.html#AdjustingTheMaintenanceWindow.Aurora) in the Amazon Aurora User Guide. Constraints:
    ///
    /// * Must be in the format ddd:hh24:mi-ddd:hh24:mi.
    ///
    /// * Days must be one of Mon | Tue | Wed | Thu | Fri | Sat | Sun.
    ///
    /// * Must be in Universal Coordinated Time (UTC).
    ///
    /// * Must be at least 30 minutes.
    public var preferredMaintenanceWindow: Swift.String?
    /// Specifies whether the DB cluster is publicly accessible. When the DB cluster is publicly accessible, its Domain Name System (DNS) endpoint resolves to the private IP address from within the DB cluster's virtual private cloud (VPC). It resolves to the public IP address from outside of the DB cluster's VPC. Access to the DB cluster is ultimately controlled by the security group it uses. That public access isn't permitted if the security group assigned to the DB cluster doesn't permit it. When the DB cluster isn't publicly accessible, it is an internal DB cluster with a DNS name that resolves to a private IP address. Valid for Cluster Type: Multi-AZ DB clusters only Default: The default behavior varies depending on whether DBSubnetGroupName is specified. If DBSubnetGroupName isn't specified, and PubliclyAccessible isn't specified, the following applies:
    ///
    /// * If the default VPC in the target Region doesn’t have an internet gateway attached to it, the DB cluster is private.
    ///
    /// * If the default VPC in the target Region has an internet gateway attached to it, the DB cluster is public.
    ///
    ///
    /// If DBSubnetGroupName is specified, and PubliclyAccessible isn't specified, the following applies:
    ///
    /// * If the subnets are part of a VPC that doesn’t have an internet gateway attached to it, the DB cluster is private.
    ///
    /// * If the subnets are part of a VPC that has an internet gateway attached to it, the DB cluster is public.
    public var publiclyAccessible: Swift.Bool?
    /// Reserved for future use.
    public var rdsCustomClusterConfiguration: RDSClientTypes.RdsCustomClusterConfiguration?
    /// The Amazon Resource Name (ARN) of the source DB instance or DB cluster if this DB cluster is created as a read replica. Valid for Cluster Type: Aurora DB clusters and Multi-AZ DB clusters
    public var replicationSourceIdentifier: Swift.String?
    /// For DB clusters in serverless DB engine mode, the scaling properties of the DB cluster. Valid for Cluster Type: Aurora DB clusters only
    public var scalingConfiguration: RDSClientTypes.ScalingConfiguration?
    /// Contains the scaling configuration of an Aurora Serverless v2 DB cluster. For more information, see [Using Amazon Aurora Serverless v2](https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless-v2.html) in the Amazon Aurora User Guide.
    public var serverlessV2ScalingConfiguration: RDSClientTypes.ServerlessV2ScalingConfiguration?
    /// Specifies whether the DB cluster is encrypted. Valid for Cluster Type: Aurora DB clusters and Multi-AZ DB clusters
    public var storageEncrypted: Swift.Bool?
    /// The storage type to associate with the DB cluster. For information on storage types for Aurora DB clusters, see [Storage configurations for Amazon Aurora DB clusters](https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/Aurora.Overview.StorageReliability.html#aurora-storage-type). For information on storage types for Multi-AZ DB clusters, see [Settings for creating Multi-AZ DB clusters](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/create-multi-az-db-cluster.html#create-multi-az-db-cluster-settings). This setting is required to create a Multi-AZ DB cluster. When specified for a Multi-AZ DB cluster, a value for the Iops parameter is required. Valid for Cluster Type: Aurora DB clusters and Multi-AZ DB clusters Valid Values:
    ///
    /// * Aurora DB clusters - aurora | aurora-iopt1
    ///
    /// * Multi-AZ DB clusters - io1
    ///
    ///
    /// Default:
    ///
    /// * Aurora DB clusters - aurora
    ///
    /// * Multi-AZ DB clusters - io1
    ///
    ///
    /// When you create an Aurora DB cluster with the storage type set to aurora-iopt1, the storage type is returned in the response. The storage type isn't returned when you set it to aurora.
    public var storageType: Swift.String?
    /// Tags to assign to the DB cluster. Valid for Cluster Type: Aurora DB clusters and Multi-AZ DB clusters
    public var tags: [RDSClientTypes.Tag]?
    /// A list of EC2 VPC security groups to associate with this DB cluster. Valid for Cluster Type: Aurora DB clusters and Multi-AZ DB clusters
    public var vpcSecurityGroupIds: [Swift.String]?

    public init(
        allocatedStorage: Swift.Int? = nil,
        autoMinorVersionUpgrade: Swift.Bool? = nil,
        availabilityZones: [Swift.String]? = nil,
        backtrackWindow: Swift.Int? = nil,
        backupRetentionPeriod: Swift.Int? = nil,
        characterSetName: Swift.String? = nil,
        copyTagsToSnapshot: Swift.Bool? = nil,
        databaseName: Swift.String? = nil,
        dbClusterIdentifier: Swift.String? = nil,
        dbClusterInstanceClass: Swift.String? = nil,
        dbClusterParameterGroupName: Swift.String? = nil,
        dbSubnetGroupName: Swift.String? = nil,
        dbSystemId: Swift.String? = nil,
        deletionProtection: Swift.Bool? = nil,
        domain: Swift.String? = nil,
        domainIAMRoleName: Swift.String? = nil,
        enableCloudwatchLogsExports: [Swift.String]? = nil,
        enableGlobalWriteForwarding: Swift.Bool? = nil,
        enableHttpEndpoint: Swift.Bool? = nil,
        enableIAMDatabaseAuthentication: Swift.Bool? = nil,
        enableLimitlessDatabase: Swift.Bool? = nil,
        enableLocalWriteForwarding: Swift.Bool? = nil,
        enablePerformanceInsights: Swift.Bool? = nil,
        engine: Swift.String? = nil,
        engineMode: Swift.String? = nil,
        engineVersion: Swift.String? = nil,
        globalClusterIdentifier: Swift.String? = nil,
        iops: Swift.Int? = nil,
        kmsKeyId: Swift.String? = nil,
        manageMasterUserPassword: Swift.Bool? = nil,
        masterUserPassword: Swift.String? = nil,
        masterUserSecretKmsKeyId: Swift.String? = nil,
        masterUsername: Swift.String? = nil,
        monitoringInterval: Swift.Int? = nil,
        monitoringRoleArn: Swift.String? = nil,
        networkType: Swift.String? = nil,
        optionGroupName: Swift.String? = nil,
        performanceInsightsKMSKeyId: Swift.String? = nil,
        performanceInsightsRetentionPeriod: Swift.Int? = nil,
        port: Swift.Int? = nil,
        preSignedUrl: Swift.String? = nil,
        preferredBackupWindow: Swift.String? = nil,
        preferredMaintenanceWindow: Swift.String? = nil,
        publiclyAccessible: Swift.Bool? = nil,
        rdsCustomClusterConfiguration: RDSClientTypes.RdsCustomClusterConfiguration? = nil,
        replicationSourceIdentifier: Swift.String? = nil,
        scalingConfiguration: RDSClientTypes.ScalingConfiguration? = nil,
        serverlessV2ScalingConfiguration: RDSClientTypes.ServerlessV2ScalingConfiguration? = nil,
        storageEncrypted: Swift.Bool? = nil,
        storageType: Swift.String? = nil,
        tags: [RDSClientTypes.Tag]? = nil,
        vpcSecurityGroupIds: [Swift.String]? = nil
    )
    {
        self.allocatedStorage = allocatedStorage
        self.autoMinorVersionUpgrade = autoMinorVersionUpgrade
        self.availabilityZones = availabilityZones
        self.backtrackWindow = backtrackWindow
        self.backupRetentionPeriod = backupRetentionPeriod
        self.characterSetName = characterSetName
        self.copyTagsToSnapshot = copyTagsToSnapshot
        self.databaseName = databaseName
        self.dbClusterIdentifier = dbClusterIdentifier
        self.dbClusterInstanceClass = dbClusterInstanceClass
        self.dbClusterParameterGroupName = dbClusterParameterGroupName
        self.dbSubnetGroupName = dbSubnetGroupName
        self.dbSystemId = dbSystemId
        self.deletionProtection = deletionProtection
        self.domain = domain
        self.domainIAMRoleName = domainIAMRoleName
        self.enableCloudwatchLogsExports = enableCloudwatchLogsExports
        self.enableGlobalWriteForwarding = enableGlobalWriteForwarding
        self.enableHttpEndpoint = enableHttpEndpoint
        self.enableIAMDatabaseAuthentication = enableIAMDatabaseAuthentication
        self.enableLimitlessDatabase = enableLimitlessDatabase
        self.enableLocalWriteForwarding = enableLocalWriteForwarding
        self.enablePerformanceInsights = enablePerformanceInsights
        self.engine = engine
        self.engineMode = engineMode
        self.engineVersion = engineVersion
        self.globalClusterIdentifier = globalClusterIdentifier
        self.iops = iops
        self.kmsKeyId = kmsKeyId
        self.manageMasterUserPassword = manageMasterUserPassword
        self.masterUserPassword = masterUserPassword
        self.masterUserSecretKmsKeyId = masterUserSecretKmsKeyId
        self.masterUsername = masterUsername
        self.monitoringInterval = monitoringInterval
        self.monitoringRoleArn = monitoringRoleArn
        self.networkType = networkType
        self.optionGroupName = optionGroupName
        self.performanceInsightsKMSKeyId = performanceInsightsKMSKeyId
        self.performanceInsightsRetentionPeriod = performanceInsightsRetentionPeriod
        self.port = port
        self.preSignedUrl = preSignedUrl
        self.preferredBackupWindow = preferredBackupWindow
        self.preferredMaintenanceWindow = preferredMaintenanceWindow
        self.publiclyAccessible = publiclyAccessible
        self.rdsCustomClusterConfiguration = rdsCustomClusterConfiguration
        self.replicationSourceIdentifier = replicationSourceIdentifier
        self.scalingConfiguration = scalingConfiguration
        self.serverlessV2ScalingConfiguration = serverlessV2ScalingConfiguration
        self.storageEncrypted = storageEncrypted
        self.storageType = storageType
        self.tags = tags
        self.vpcSecurityGroupIds = vpcSecurityGroupIds
    }
}

extension CreateDBClusterOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<CreateDBClusterOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["CreateDBClusterResult"]
            var value = CreateDBClusterOutput()
            value.dbCluster = try reader["DBCluster"].readIfPresent(readingClosure: RDSClientTypes.DBCluster.readingClosure)
            return value
        }
    }
}

public struct CreateDBClusterOutput: Swift.Equatable {
    /// Contains the details of an Amazon Aurora DB cluster or Multi-AZ DB cluster. For an Amazon Aurora DB cluster, this data type is used as a response element in the operations CreateDBCluster, DeleteDBCluster, DescribeDBClusters, FailoverDBCluster, ModifyDBCluster, PromoteReadReplicaDBCluster, RestoreDBClusterFromS3, RestoreDBClusterFromSnapshot, RestoreDBClusterToPointInTime, StartDBCluster, and StopDBCluster. For a Multi-AZ DB cluster, this data type is used as a response element in the operations CreateDBCluster, DeleteDBCluster, DescribeDBClusters, FailoverDBCluster, ModifyDBCluster, RebootDBCluster, RestoreDBClusterFromSnapshot, and RestoreDBClusterToPointInTime. For more information on Amazon Aurora DB clusters, see [ What is Amazon Aurora?](https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html) in the Amazon Aurora User Guide. For more information on Multi-AZ DB clusters, see [ Multi-AZ deployments with two readable standby DB instances](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/multi-az-db-clusters-concepts.html) in the Amazon RDS User Guide.
    public var dbCluster: RDSClientTypes.DBCluster?

    public init(
        dbCluster: RDSClientTypes.DBCluster? = nil
    )
    {
        self.dbCluster = dbCluster
    }
}

enum CreateDBClusterOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "DBClusterAlreadyExistsFault": return try await DBClusterAlreadyExistsFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "DBClusterNotFoundFault": return try await DBClusterNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "DBClusterParameterGroupNotFound": return try await DBClusterParameterGroupNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "DBClusterQuotaExceededFault": return try await DBClusterQuotaExceededFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "DBInstanceNotFound": return try await DBInstanceNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "DBSubnetGroupDoesNotCoverEnoughAZs": return try await DBSubnetGroupDoesNotCoverEnoughAZs.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "DBSubnetGroupNotFoundFault": return try await DBSubnetGroupNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "DomainNotFoundFault": return try await DomainNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "GlobalClusterNotFoundFault": return try await GlobalClusterNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "InsufficientDBInstanceCapacity": return try await InsufficientDBInstanceCapacityFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "InsufficientStorageClusterCapacity": return try await InsufficientStorageClusterCapacityFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "InvalidDBClusterStateFault": return try await InvalidDBClusterStateFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "InvalidDBInstanceState": return try await InvalidDBInstanceStateFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "InvalidDBSubnetGroupFault": return try await InvalidDBSubnetGroupFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "InvalidDBSubnetGroupStateFault": return try await InvalidDBSubnetGroupStateFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "InvalidGlobalClusterStateFault": return try await InvalidGlobalClusterStateFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "InvalidSubnet": return try await InvalidSubnet.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "InvalidVPCNetworkStateFault": return try await InvalidVPCNetworkStateFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "KMSKeyNotAccessibleFault": return try await KMSKeyNotAccessibleFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "OptionGroupNotFoundFault": return try await OptionGroupNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "StorageQuotaExceeded": return try await StorageQuotaExceededFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension CreateDBClusterParameterGroupInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dbClusterParameterGroupName = "DBClusterParameterGroupName"
        case dbParameterGroupFamily = "DBParameterGroupFamily"
        case description = "Description"
        case tags = "Tags"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let dbClusterParameterGroupName = dbClusterParameterGroupName {
            try container.encode(dbClusterParameterGroupName, forKey: ClientRuntime.Key("DBClusterParameterGroupName"))
        }
        if let dbParameterGroupFamily = dbParameterGroupFamily {
            try container.encode(dbParameterGroupFamily, forKey: ClientRuntime.Key("DBParameterGroupFamily"))
        }
        if let description = description {
            try container.encode(description, forKey: ClientRuntime.Key("Description"))
        }
        if let tags = tags {
            if !tags.isEmpty {
                var tagsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Tags"))
                for (index0, tag0) in tags.enumerated() {
                    try tagsContainer.encode(tag0, forKey: ClientRuntime.Key("Tag.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var tagsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Tags"))
                try tagsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        try container.encode("CreateDBClusterParameterGroup", forKey:ClientRuntime.Key("Action"))
        try container.encode("2014-10-31", forKey:ClientRuntime.Key("Version"))
    }
}

extension CreateDBClusterParameterGroupInput {

    static func urlPathProvider(_ value: CreateDBClusterParameterGroupInput) -> Swift.String? {
        return "/"
    }
}

///
public struct CreateDBClusterParameterGroupInput: Swift.Equatable {
    /// The name of the DB cluster parameter group. Constraints:
    ///
    /// * Must not match the name of an existing DB cluster parameter group.
    ///
    ///
    /// This value is stored as a lowercase string.
    /// This member is required.
    public var dbClusterParameterGroupName: Swift.String?
    /// The DB cluster parameter group family name. A DB cluster parameter group can be associated with one and only one DB cluster parameter group family, and can be applied only to a DB cluster running a database engine and engine version compatible with that DB cluster parameter group family. Aurora MySQL Example: aurora-mysql5.7, aurora-mysql8.0 Aurora PostgreSQL Example: aurora-postgresql14 RDS for MySQL Example: mysql8.0 RDS for PostgreSQL Example: postgres12 To list all of the available parameter group families for a DB engine, use the following command: aws rds describe-db-engine-versions --query "DBEngineVersions[].DBParameterGroupFamily" --engine  For example, to list all of the available parameter group families for the Aurora PostgreSQL DB engine, use the following command: aws rds describe-db-engine-versions --query "DBEngineVersions[].DBParameterGroupFamily" --engine aurora-postgresql The output contains duplicates. The following are the valid DB engine values:
    ///
    /// * aurora-mysql
    ///
    /// * aurora-postgresql
    ///
    /// * mysql
    ///
    /// * postgres
    /// This member is required.
    public var dbParameterGroupFamily: Swift.String?
    /// The description for the DB cluster parameter group.
    /// This member is required.
    public var description: Swift.String?
    /// Tags to assign to the DB cluster parameter group.
    public var tags: [RDSClientTypes.Tag]?

    public init(
        dbClusterParameterGroupName: Swift.String? = nil,
        dbParameterGroupFamily: Swift.String? = nil,
        description: Swift.String? = nil,
        tags: [RDSClientTypes.Tag]? = nil
    )
    {
        self.dbClusterParameterGroupName = dbClusterParameterGroupName
        self.dbParameterGroupFamily = dbParameterGroupFamily
        self.description = description
        self.tags = tags
    }
}

extension CreateDBClusterParameterGroupOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<CreateDBClusterParameterGroupOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["CreateDBClusterParameterGroupResult"]
            var value = CreateDBClusterParameterGroupOutput()
            value.dbClusterParameterGroup = try reader["DBClusterParameterGroup"].readIfPresent(readingClosure: RDSClientTypes.DBClusterParameterGroup.readingClosure)
            return value
        }
    }
}

public struct CreateDBClusterParameterGroupOutput: Swift.Equatable {
    /// Contains the details of an Amazon RDS DB cluster parameter group. This data type is used as a response element in the DescribeDBClusterParameterGroups action.
    public var dbClusterParameterGroup: RDSClientTypes.DBClusterParameterGroup?

    public init(
        dbClusterParameterGroup: RDSClientTypes.DBClusterParameterGroup? = nil
    )
    {
        self.dbClusterParameterGroup = dbClusterParameterGroup
    }
}

enum CreateDBClusterParameterGroupOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "DBParameterGroupAlreadyExists": return try await DBParameterGroupAlreadyExistsFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "DBParameterGroupQuotaExceeded": return try await DBParameterGroupQuotaExceededFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension CreateDBClusterSnapshotInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dbClusterIdentifier = "DBClusterIdentifier"
        case dbClusterSnapshotIdentifier = "DBClusterSnapshotIdentifier"
        case tags = "Tags"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let dbClusterIdentifier = dbClusterIdentifier {
            try container.encode(dbClusterIdentifier, forKey: ClientRuntime.Key("DBClusterIdentifier"))
        }
        if let dbClusterSnapshotIdentifier = dbClusterSnapshotIdentifier {
            try container.encode(dbClusterSnapshotIdentifier, forKey: ClientRuntime.Key("DBClusterSnapshotIdentifier"))
        }
        if let tags = tags {
            if !tags.isEmpty {
                var tagsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Tags"))
                for (index0, tag0) in tags.enumerated() {
                    try tagsContainer.encode(tag0, forKey: ClientRuntime.Key("Tag.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var tagsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Tags"))
                try tagsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        try container.encode("CreateDBClusterSnapshot", forKey:ClientRuntime.Key("Action"))
        try container.encode("2014-10-31", forKey:ClientRuntime.Key("Version"))
    }
}

extension CreateDBClusterSnapshotInput {

    static func urlPathProvider(_ value: CreateDBClusterSnapshotInput) -> Swift.String? {
        return "/"
    }
}

///
public struct CreateDBClusterSnapshotInput: Swift.Equatable {
    /// The identifier of the DB cluster to create a snapshot for. This parameter isn't case-sensitive. Constraints:
    ///
    /// * Must match the identifier of an existing DBCluster.
    ///
    ///
    /// Example: my-cluster1
    /// This member is required.
    public var dbClusterIdentifier: Swift.String?
    /// The identifier of the DB cluster snapshot. This parameter is stored as a lowercase string. Constraints:
    ///
    /// * Must contain from 1 to 63 letters, numbers, or hyphens.
    ///
    /// * First character must be a letter.
    ///
    /// * Can't end with a hyphen or contain two consecutive hyphens.
    ///
    ///
    /// Example: my-cluster1-snapshot1
    /// This member is required.
    public var dbClusterSnapshotIdentifier: Swift.String?
    /// The tags to be assigned to the DB cluster snapshot.
    public var tags: [RDSClientTypes.Tag]?

    public init(
        dbClusterIdentifier: Swift.String? = nil,
        dbClusterSnapshotIdentifier: Swift.String? = nil,
        tags: [RDSClientTypes.Tag]? = nil
    )
    {
        self.dbClusterIdentifier = dbClusterIdentifier
        self.dbClusterSnapshotIdentifier = dbClusterSnapshotIdentifier
        self.tags = tags
    }
}

extension CreateDBClusterSnapshotOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<CreateDBClusterSnapshotOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["CreateDBClusterSnapshotResult"]
            var value = CreateDBClusterSnapshotOutput()
            value.dbClusterSnapshot = try reader["DBClusterSnapshot"].readIfPresent(readingClosure: RDSClientTypes.DBClusterSnapshot.readingClosure)
            return value
        }
    }
}

public struct CreateDBClusterSnapshotOutput: Swift.Equatable {
    /// Contains the details for an Amazon RDS DB cluster snapshot This data type is used as a response element in the DescribeDBClusterSnapshots action.
    public var dbClusterSnapshot: RDSClientTypes.DBClusterSnapshot?

    public init(
        dbClusterSnapshot: RDSClientTypes.DBClusterSnapshot? = nil
    )
    {
        self.dbClusterSnapshot = dbClusterSnapshot
    }
}

enum CreateDBClusterSnapshotOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "DBClusterNotFoundFault": return try await DBClusterNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "DBClusterSnapshotAlreadyExistsFault": return try await DBClusterSnapshotAlreadyExistsFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "InvalidDBClusterSnapshotStateFault": return try await InvalidDBClusterSnapshotStateFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "InvalidDBClusterStateFault": return try await InvalidDBClusterStateFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "SnapshotQuotaExceeded": return try await SnapshotQuotaExceededFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension CreateDBInstanceInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case allocatedStorage = "AllocatedStorage"
        case autoMinorVersionUpgrade = "AutoMinorVersionUpgrade"
        case availabilityZone = "AvailabilityZone"
        case backupRetentionPeriod = "BackupRetentionPeriod"
        case backupTarget = "BackupTarget"
        case caCertificateIdentifier = "CACertificateIdentifier"
        case characterSetName = "CharacterSetName"
        case copyTagsToSnapshot = "CopyTagsToSnapshot"
        case customIamInstanceProfile = "CustomIamInstanceProfile"
        case dbClusterIdentifier = "DBClusterIdentifier"
        case dbInstanceClass = "DBInstanceClass"
        case dbInstanceIdentifier = "DBInstanceIdentifier"
        case dbName = "DBName"
        case dbParameterGroupName = "DBParameterGroupName"
        case dbSecurityGroups = "DBSecurityGroups"
        case dbSubnetGroupName = "DBSubnetGroupName"
        case dbSystemId = "DBSystemId"
        case dedicatedLogVolume = "DedicatedLogVolume"
        case deletionProtection = "DeletionProtection"
        case domain = "Domain"
        case domainAuthSecretArn = "DomainAuthSecretArn"
        case domainDnsIps = "DomainDnsIps"
        case domainFqdn = "DomainFqdn"
        case domainIAMRoleName = "DomainIAMRoleName"
        case domainOu = "DomainOu"
        case enableCloudwatchLogsExports = "EnableCloudwatchLogsExports"
        case enableCustomerOwnedIp = "EnableCustomerOwnedIp"
        case enableIAMDatabaseAuthentication = "EnableIAMDatabaseAuthentication"
        case enablePerformanceInsights = "EnablePerformanceInsights"
        case engine = "Engine"
        case engineVersion = "EngineVersion"
        case iops = "Iops"
        case kmsKeyId = "KmsKeyId"
        case licenseModel = "LicenseModel"
        case manageMasterUserPassword = "ManageMasterUserPassword"
        case masterUserPassword = "MasterUserPassword"
        case masterUserSecretKmsKeyId = "MasterUserSecretKmsKeyId"
        case masterUsername = "MasterUsername"
        case maxAllocatedStorage = "MaxAllocatedStorage"
        case monitoringInterval = "MonitoringInterval"
        case monitoringRoleArn = "MonitoringRoleArn"
        case multiAZ = "MultiAZ"
        case multiTenant = "MultiTenant"
        case ncharCharacterSetName = "NcharCharacterSetName"
        case networkType = "NetworkType"
        case optionGroupName = "OptionGroupName"
        case performanceInsightsKMSKeyId = "PerformanceInsightsKMSKeyId"
        case performanceInsightsRetentionPeriod = "PerformanceInsightsRetentionPeriod"
        case port = "Port"
        case preferredBackupWindow = "PreferredBackupWindow"
        case preferredMaintenanceWindow = "PreferredMaintenanceWindow"
        case processorFeatures = "ProcessorFeatures"
        case promotionTier = "PromotionTier"
        case publiclyAccessible = "PubliclyAccessible"
        case storageEncrypted = "StorageEncrypted"
        case storageThroughput = "StorageThroughput"
        case storageType = "StorageType"
        case tags = "Tags"
        case tdeCredentialArn = "TdeCredentialArn"
        case tdeCredentialPassword = "TdeCredentialPassword"
        case timezone = "Timezone"
        case vpcSecurityGroupIds = "VpcSecurityGroupIds"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let allocatedStorage = allocatedStorage {
            try container.encode(allocatedStorage, forKey: ClientRuntime.Key("AllocatedStorage"))
        }
        if let autoMinorVersionUpgrade = autoMinorVersionUpgrade {
            try container.encode(autoMinorVersionUpgrade, forKey: ClientRuntime.Key("AutoMinorVersionUpgrade"))
        }
        if let availabilityZone = availabilityZone {
            try container.encode(availabilityZone, forKey: ClientRuntime.Key("AvailabilityZone"))
        }
        if let backupRetentionPeriod = backupRetentionPeriod {
            try container.encode(backupRetentionPeriod, forKey: ClientRuntime.Key("BackupRetentionPeriod"))
        }
        if let backupTarget = backupTarget {
            try container.encode(backupTarget, forKey: ClientRuntime.Key("BackupTarget"))
        }
        if let caCertificateIdentifier = caCertificateIdentifier {
            try container.encode(caCertificateIdentifier, forKey: ClientRuntime.Key("CACertificateIdentifier"))
        }
        if let characterSetName = characterSetName {
            try container.encode(characterSetName, forKey: ClientRuntime.Key("CharacterSetName"))
        }
        if let copyTagsToSnapshot = copyTagsToSnapshot {
            try container.encode(copyTagsToSnapshot, forKey: ClientRuntime.Key("CopyTagsToSnapshot"))
        }
        if let customIamInstanceProfile = customIamInstanceProfile {
            try container.encode(customIamInstanceProfile, forKey: ClientRuntime.Key("CustomIamInstanceProfile"))
        }
        if let dbClusterIdentifier = dbClusterIdentifier {
            try container.encode(dbClusterIdentifier, forKey: ClientRuntime.Key("DBClusterIdentifier"))
        }
        if let dbInstanceClass = dbInstanceClass {
            try container.encode(dbInstanceClass, forKey: ClientRuntime.Key("DBInstanceClass"))
        }
        if let dbInstanceIdentifier = dbInstanceIdentifier {
            try container.encode(dbInstanceIdentifier, forKey: ClientRuntime.Key("DBInstanceIdentifier"))
        }
        if let dbName = dbName {
            try container.encode(dbName, forKey: ClientRuntime.Key("DBName"))
        }
        if let dbParameterGroupName = dbParameterGroupName {
            try container.encode(dbParameterGroupName, forKey: ClientRuntime.Key("DBParameterGroupName"))
        }
        if let dbSecurityGroups = dbSecurityGroups {
            if !dbSecurityGroups.isEmpty {
                var dbSecurityGroupsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("DBSecurityGroups"))
                for (index0, string0) in dbSecurityGroups.enumerated() {
                    try dbSecurityGroupsContainer.encode(string0, forKey: ClientRuntime.Key("DBSecurityGroupName.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var dbSecurityGroupsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("DBSecurityGroups"))
                try dbSecurityGroupsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let dbSubnetGroupName = dbSubnetGroupName {
            try container.encode(dbSubnetGroupName, forKey: ClientRuntime.Key("DBSubnetGroupName"))
        }
        if let dbSystemId = dbSystemId {
            try container.encode(dbSystemId, forKey: ClientRuntime.Key("DBSystemId"))
        }
        if let dedicatedLogVolume = dedicatedLogVolume {
            try container.encode(dedicatedLogVolume, forKey: ClientRuntime.Key("DedicatedLogVolume"))
        }
        if let deletionProtection = deletionProtection {
            try container.encode(deletionProtection, forKey: ClientRuntime.Key("DeletionProtection"))
        }
        if let domain = domain {
            try container.encode(domain, forKey: ClientRuntime.Key("Domain"))
        }
        if let domainAuthSecretArn = domainAuthSecretArn {
            try container.encode(domainAuthSecretArn, forKey: ClientRuntime.Key("DomainAuthSecretArn"))
        }
        if let domainDnsIps = domainDnsIps {
            if !domainDnsIps.isEmpty {
                var domainDnsIpsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("DomainDnsIps"))
                for (index0, string0) in domainDnsIps.enumerated() {
                    try domainDnsIpsContainer.encode(string0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var domainDnsIpsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("DomainDnsIps"))
                try domainDnsIpsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let domainFqdn = domainFqdn {
            try container.encode(domainFqdn, forKey: ClientRuntime.Key("DomainFqdn"))
        }
        if let domainIAMRoleName = domainIAMRoleName {
            try container.encode(domainIAMRoleName, forKey: ClientRuntime.Key("DomainIAMRoleName"))
        }
        if let domainOu = domainOu {
            try container.encode(domainOu, forKey: ClientRuntime.Key("DomainOu"))
        }
        if let enableCloudwatchLogsExports = enableCloudwatchLogsExports {
            if !enableCloudwatchLogsExports.isEmpty {
                var enableCloudwatchLogsExportsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("EnableCloudwatchLogsExports"))
                for (index0, string0) in enableCloudwatchLogsExports.enumerated() {
                    try enableCloudwatchLogsExportsContainer.encode(string0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var enableCloudwatchLogsExportsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("EnableCloudwatchLogsExports"))
                try enableCloudwatchLogsExportsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let enableCustomerOwnedIp = enableCustomerOwnedIp {
            try container.encode(enableCustomerOwnedIp, forKey: ClientRuntime.Key("EnableCustomerOwnedIp"))
        }
        if let enableIAMDatabaseAuthentication = enableIAMDatabaseAuthentication {
            try container.encode(enableIAMDatabaseAuthentication, forKey: ClientRuntime.Key("EnableIAMDatabaseAuthentication"))
        }
        if let enablePerformanceInsights = enablePerformanceInsights {
            try container.encode(enablePerformanceInsights, forKey: ClientRuntime.Key("EnablePerformanceInsights"))
        }
        if let engine = engine {
            try container.encode(engine, forKey: ClientRuntime.Key("Engine"))
        }
        if let engineVersion = engineVersion {
            try container.encode(engineVersion, forKey: ClientRuntime.Key("EngineVersion"))
        }
        if let iops = iops {
            try container.encode(iops, forKey: ClientRuntime.Key("Iops"))
        }
        if let kmsKeyId = kmsKeyId {
            try container.encode(kmsKeyId, forKey: ClientRuntime.Key("KmsKeyId"))
        }
        if let licenseModel = licenseModel {
            try container.encode(licenseModel, forKey: ClientRuntime.Key("LicenseModel"))
        }
        if let manageMasterUserPassword = manageMasterUserPassword {
            try container.encode(manageMasterUserPassword, forKey: ClientRuntime.Key("ManageMasterUserPassword"))
        }
        if let masterUserPassword = masterUserPassword {
            try container.encode(masterUserPassword, forKey: ClientRuntime.Key("MasterUserPassword"))
        }
        if let masterUserSecretKmsKeyId = masterUserSecretKmsKeyId {
            try container.encode(masterUserSecretKmsKeyId, forKey: ClientRuntime.Key("MasterUserSecretKmsKeyId"))
        }
        if let masterUsername = masterUsername {
            try container.encode(masterUsername, forKey: ClientRuntime.Key("MasterUsername"))
        }
        if let maxAllocatedStorage = maxAllocatedStorage {
            try container.encode(maxAllocatedStorage, forKey: ClientRuntime.Key("MaxAllocatedStorage"))
        }
        if let monitoringInterval = monitoringInterval {
            try container.encode(monitoringInterval, forKey: ClientRuntime.Key("MonitoringInterval"))
        }
        if let monitoringRoleArn = monitoringRoleArn {
            try container.encode(monitoringRoleArn, forKey: ClientRuntime.Key("MonitoringRoleArn"))
        }
        if let multiAZ = multiAZ {
            try container.encode(multiAZ, forKey: ClientRuntime.Key("MultiAZ"))
        }
        if let multiTenant = multiTenant {
            try container.encode(multiTenant, forKey: ClientRuntime.Key("MultiTenant"))
        }
        if let ncharCharacterSetName = ncharCharacterSetName {
            try container.encode(ncharCharacterSetName, forKey: ClientRuntime.Key("NcharCharacterSetName"))
        }
        if let networkType = networkType {
            try container.encode(networkType, forKey: ClientRuntime.Key("NetworkType"))
        }
        if let optionGroupName = optionGroupName {
            try container.encode(optionGroupName, forKey: ClientRuntime.Key("OptionGroupName"))
        }
        if let performanceInsightsKMSKeyId = performanceInsightsKMSKeyId {
            try container.encode(performanceInsightsKMSKeyId, forKey: ClientRuntime.Key("PerformanceInsightsKMSKeyId"))
        }
        if let performanceInsightsRetentionPeriod = performanceInsightsRetentionPeriod {
            try container.encode(performanceInsightsRetentionPeriod, forKey: ClientRuntime.Key("PerformanceInsightsRetentionPeriod"))
        }
        if let port = port {
            try container.encode(port, forKey: ClientRuntime.Key("Port"))
        }
        if let preferredBackupWindow = preferredBackupWindow {
            try container.encode(preferredBackupWindow, forKey: ClientRuntime.Key("PreferredBackupWindow"))
        }
        if let preferredMaintenanceWindow = preferredMaintenanceWindow {
            try container.encode(preferredMaintenanceWindow, forKey: ClientRuntime.Key("PreferredMaintenanceWindow"))
        }
        if let processorFeatures = processorFeatures {
            if !processorFeatures.isEmpty {
                var processorFeaturesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("ProcessorFeatures"))
                for (index0, processorfeature0) in processorFeatures.enumerated() {
                    try processorFeaturesContainer.encode(processorfeature0, forKey: ClientRuntime.Key("ProcessorFeature.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var processorFeaturesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("ProcessorFeatures"))
                try processorFeaturesContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let promotionTier = promotionTier {
            try container.encode(promotionTier, forKey: ClientRuntime.Key("PromotionTier"))
        }
        if let publiclyAccessible = publiclyAccessible {
            try container.encode(publiclyAccessible, forKey: ClientRuntime.Key("PubliclyAccessible"))
        }
        if let storageEncrypted = storageEncrypted {
            try container.encode(storageEncrypted, forKey: ClientRuntime.Key("StorageEncrypted"))
        }
        if let storageThroughput = storageThroughput {
            try container.encode(storageThroughput, forKey: ClientRuntime.Key("StorageThroughput"))
        }
        if let storageType = storageType {
            try container.encode(storageType, forKey: ClientRuntime.Key("StorageType"))
        }
        if let tags = tags {
            if !tags.isEmpty {
                var tagsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Tags"))
                for (index0, tag0) in tags.enumerated() {
                    try tagsContainer.encode(tag0, forKey: ClientRuntime.Key("Tag.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var tagsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Tags"))
                try tagsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let tdeCredentialArn = tdeCredentialArn {
            try container.encode(tdeCredentialArn, forKey: ClientRuntime.Key("TdeCredentialArn"))
        }
        if let tdeCredentialPassword = tdeCredentialPassword {
            try container.encode(tdeCredentialPassword, forKey: ClientRuntime.Key("TdeCredentialPassword"))
        }
        if let timezone = timezone {
            try container.encode(timezone, forKey: ClientRuntime.Key("Timezone"))
        }
        if let vpcSecurityGroupIds = vpcSecurityGroupIds {
            if !vpcSecurityGroupIds.isEmpty {
                var vpcSecurityGroupIdsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("VpcSecurityGroupIds"))
                for (index0, string0) in vpcSecurityGroupIds.enumerated() {
                    try vpcSecurityGroupIdsContainer.encode(string0, forKey: ClientRuntime.Key("VpcSecurityGroupId.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var vpcSecurityGroupIdsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("VpcSecurityGroupIds"))
                try vpcSecurityGroupIdsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        try container.encode("CreateDBInstance", forKey:ClientRuntime.Key("Action"))
        try container.encode("2014-10-31", forKey:ClientRuntime.Key("Version"))
    }
}

extension CreateDBInstanceInput {

    static func urlPathProvider(_ value: CreateDBInstanceInput) -> Swift.String? {
        return "/"
    }
}

///
public struct CreateDBInstanceInput: Swift.Equatable {
    /// The amount of storage in gibibytes (GiB) to allocate for the DB instance. This setting doesn't apply to Amazon Aurora DB instances. Aurora cluster volumes automatically grow as the amount of data in your database increases, though you are only charged for the space that you use in an Aurora cluster volume. Amazon RDS Custom Constraints to the amount of storage for each storage type are the following:
    ///
    /// * General Purpose (SSD) storage (gp2, gp3): Must be an integer from 40 to 65536 for RDS Custom for Oracle, 16384 for RDS Custom for SQL Server.
    ///
    /// * Provisioned IOPS storage (io1): Must be an integer from 40 to 65536 for RDS Custom for Oracle, 16384 for RDS Custom for SQL Server.
    ///
    ///
    /// RDS for Db2 Constraints to the amount of storage for each storage type are the following:
    ///
    /// * General Purpose (SSD) storage (gp3): Must be an integer from 20 to 64000.
    ///
    /// * Provisioned IOPS storage (io1): Must be an integer from 100 to 64000.
    ///
    ///
    /// RDS for MariaDB Constraints to the amount of storage for each storage type are the following:
    ///
    /// * General Purpose (SSD) storage (gp2, gp3): Must be an integer from 20 to 65536.
    ///
    /// * Provisioned IOPS storage (io1): Must be an integer from 100 to 65536.
    ///
    /// * Magnetic storage (standard): Must be an integer from 5 to 3072.
    ///
    ///
    /// RDS for MySQL Constraints to the amount of storage for each storage type are the following:
    ///
    /// * General Purpose (SSD) storage (gp2, gp3): Must be an integer from 20 to 65536.
    ///
    /// * Provisioned IOPS storage (io1): Must be an integer from 100 to 65536.
    ///
    /// * Magnetic storage (standard): Must be an integer from 5 to 3072.
    ///
    ///
    /// RDS for Oracle Constraints to the amount of storage for each storage type are the following:
    ///
    /// * General Purpose (SSD) storage (gp2, gp3): Must be an integer from 20 to 65536.
    ///
    /// * Provisioned IOPS storage (io1): Must be an integer from 100 to 65536.
    ///
    /// * Magnetic storage (standard): Must be an integer from 10 to 3072.
    ///
    ///
    /// RDS for PostgreSQL Constraints to the amount of storage for each storage type are the following:
    ///
    /// * General Purpose (SSD) storage (gp2, gp3): Must be an integer from 20 to 65536.
    ///
    /// * Provisioned IOPS storage (io1): Must be an integer from 100 to 65536.
    ///
    /// * Magnetic storage (standard): Must be an integer from 5 to 3072.
    ///
    ///
    /// RDS for SQL Server Constraints to the amount of storage for each storage type are the following:
    ///
    /// * General Purpose (SSD) storage (gp2, gp3):
    ///
    /// * Enterprise and Standard editions: Must be an integer from 20 to 16384.
    ///
    /// * Web and Express editions: Must be an integer from 20 to 16384.
    ///
    ///
    ///
    ///
    /// * Provisioned IOPS storage (io1):
    ///
    /// * Enterprise and Standard editions: Must be an integer from 100 to 16384.
    ///
    /// * Web and Express editions: Must be an integer from 100 to 16384.
    ///
    ///
    ///
    ///
    /// * Magnetic storage (standard):
    ///
    /// * Enterprise and Standard editions: Must be an integer from 20 to 1024.
    ///
    /// * Web and Express editions: Must be an integer from 20 to 1024.
    public var allocatedStorage: Swift.Int?
    /// Specifies whether minor engine upgrades are applied automatically to the DB instance during the maintenance window. By default, minor engine upgrades are applied automatically. If you create an RDS Custom DB instance, you must set AutoMinorVersionUpgrade to false.
    public var autoMinorVersionUpgrade: Swift.Bool?
    /// The Availability Zone (AZ) where the database will be created. For information on Amazon Web Services Regions and Availability Zones, see [Regions and Availability Zones](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.RegionsAndAvailabilityZones.html). For Amazon Aurora, each Aurora DB cluster hosts copies of its storage in three separate Availability Zones. Specify one of these Availability Zones. Aurora automatically chooses an appropriate Availability Zone if you don't specify one. Default: A random, system-chosen Availability Zone in the endpoint's Amazon Web Services Region. Constraints:
    ///
    /// * The AvailabilityZone parameter can't be specified if the DB instance is a Multi-AZ deployment.
    ///
    /// * The specified Availability Zone must be in the same Amazon Web Services Region as the current endpoint.
    ///
    ///
    /// Example: us-east-1d
    public var availabilityZone: Swift.String?
    /// The number of days for which automated backups are retained. Setting this parameter to a positive number enables backups. Setting this parameter to 0 disables automated backups. This setting doesn't apply to Amazon Aurora DB instances. The retention period for automated backups is managed by the DB cluster. Default: 1 Constraints:
    ///
    /// * Must be a value from 0 to 35.
    ///
    /// * Can't be set to 0 if the DB instance is a source to read replicas.
    ///
    /// * Can't be set to 0 for an RDS Custom for Oracle DB instance.
    public var backupRetentionPeriod: Swift.Int?
    /// The location for storing automated backups and manual snapshots. Valid Values:
    ///
    /// * outposts (Amazon Web Services Outposts)
    ///
    /// * region (Amazon Web Services Region)
    ///
    ///
    /// Default: region For more information, see [Working with Amazon RDS on Amazon Web Services Outposts](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/rds-on-outposts.html) in the Amazon RDS User Guide.
    public var backupTarget: Swift.String?
    /// The CA certificate identifier to use for the DB instance's server certificate. This setting doesn't apply to RDS Custom DB instances. For more information, see [Using SSL/TLS to encrypt a connection to a DB instance](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.SSL.html) in the Amazon RDS User Guide and [ Using SSL/TLS to encrypt a connection to a DB cluster](https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/UsingWithRDS.SSL.html) in the Amazon Aurora User Guide.
    public var caCertificateIdentifier: Swift.String?
    /// For supported engines, the character set (CharacterSet) to associate the DB instance with. This setting doesn't apply to the following DB instances:
    ///
    /// * Amazon Aurora - The character set is managed by the DB cluster. For more information, see CreateDBCluster.
    ///
    /// * RDS Custom - However, if you need to change the character set, you can change it on the database itself.
    public var characterSetName: Swift.String?
    /// Specifies whether to copy tags from the DB instance to snapshots of the DB instance. By default, tags are not copied. This setting doesn't apply to Amazon Aurora DB instances. Copying tags to snapshots is managed by the DB cluster. Setting this value for an Aurora DB instance has no effect on the DB cluster setting.
    public var copyTagsToSnapshot: Swift.Bool?
    /// The instance profile associated with the underlying Amazon EC2 instance of an RDS Custom DB instance. This setting is required for RDS Custom. Constraints:
    ///
    /// * The profile must exist in your account.
    ///
    /// * The profile must have an IAM role that Amazon EC2 has permissions to assume.
    ///
    /// * The instance profile name and the associated IAM role name must start with the prefix AWSRDSCustom.
    ///
    ///
    /// For the list of permissions required for the IAM role, see [ Configure IAM and your VPC](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/custom-setup-orcl.html#custom-setup-orcl.iam-vpc) in the Amazon RDS User Guide.
    public var customIamInstanceProfile: Swift.String?
    /// The identifier of the DB cluster that this DB instance will belong to. This setting doesn't apply to RDS Custom DB instances.
    public var dbClusterIdentifier: Swift.String?
    /// The compute and memory capacity of the DB instance, for example db.m5.large. Not all DB instance classes are available in all Amazon Web Services Regions, or for all database engines. For the full list of DB instance classes, and availability for your engine, see [DB instance classes](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.DBInstanceClass.html) in the Amazon RDS User Guide or [Aurora DB instance classes](https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/Concepts.DBInstanceClass.html) in the Amazon Aurora User Guide.
    /// This member is required.
    public var dbInstanceClass: Swift.String?
    /// The identifier for this DB instance. This parameter is stored as a lowercase string. Constraints:
    ///
    /// * Must contain from 1 to 63 letters, numbers, or hyphens.
    ///
    /// * First character must be a letter.
    ///
    /// * Can't end with a hyphen or contain two consecutive hyphens.
    ///
    ///
    /// Example: mydbinstance
    /// This member is required.
    public var dbInstanceIdentifier: Swift.String?
    /// The meaning of this parameter differs according to the database engine you use. Amazon Aurora MySQL The name of the database to create when the primary DB instance of the Aurora MySQL DB cluster is created. If this parameter isn't specified for an Aurora MySQL DB cluster, no database is created in the DB cluster. Constraints:
    ///
    /// * Must contain 1 to 64 alphanumeric characters.
    ///
    /// * Can't be a word reserved by the database engine.
    ///
    ///
    /// Amazon Aurora PostgreSQL The name of the database to create when the primary DB instance of the Aurora PostgreSQL DB cluster is created. If this parameter isn't specified for an Aurora PostgreSQL DB cluster, a database named postgres is created in the DB cluster. Constraints:
    ///
    /// * It must contain 1 to 63 alphanumeric characters.
    ///
    /// * Must begin with a letter. Subsequent characters can be letters, underscores, or digits (0 to 9).
    ///
    /// * Can't be a word reserved by the database engine.
    ///
    ///
    /// Amazon RDS Custom for Oracle The Oracle System ID (SID) of the created RDS Custom DB instance. If you don't specify a value, the default value is ORCL for non-CDBs and RDSCDB for CDBs. Default: ORCL Constraints:
    ///
    /// * Must contain 1 to 8 alphanumeric characters.
    ///
    /// * Must contain a letter.
    ///
    /// * Can't be a word reserved by the database engine.
    ///
    ///
    /// Amazon RDS Custom for SQL Server Not applicable. Must be null. RDS for Db2 The name of the database to create when the DB instance is created. If this parameter isn't specified, no database is created in the DB instance. Constraints:
    ///
    /// * Must contain 1 to 64 letters or numbers.
    ///
    /// * Must begin with a letter. Subsequent characters can be letters, underscores, or digits (0-9).
    ///
    /// * Can't be a word reserved by the specified database engine.
    ///
    ///
    /// RDS for MariaDB The name of the database to create when the DB instance is created. If this parameter isn't specified, no database is created in the DB instance. Constraints:
    ///
    /// * Must contain 1 to 64 letters or numbers.
    ///
    /// * Must begin with a letter. Subsequent characters can be letters, underscores, or digits (0-9).
    ///
    /// * Can't be a word reserved by the specified database engine.
    ///
    ///
    /// RDS for MySQL The name of the database to create when the DB instance is created. If this parameter isn't specified, no database is created in the DB instance. Constraints:
    ///
    /// * Must contain 1 to 64 letters or numbers.
    ///
    /// * Must begin with a letter. Subsequent characters can be letters, underscores, or digits (0-9).
    ///
    /// * Can't be a word reserved by the specified database engine.
    ///
    ///
    /// RDS for Oracle The Oracle System ID (SID) of the created DB instance. If you don't specify a value, the default value is ORCL. You can't specify the string null, or any other reserved word, for DBName. Default: ORCL Constraints:
    ///
    /// * Can't be longer than 8 characters.
    ///
    ///
    /// RDS for PostgreSQL The name of the database to create when the DB instance is created. If this parameter isn't specified, a database named postgres is created in the DB instance. Constraints:
    ///
    /// * Must contain 1 to 63 letters, numbers, or underscores.
    ///
    /// * Must begin with a letter. Subsequent characters can be letters, underscores, or digits (0-9).
    ///
    /// * Can't be a word reserved by the specified database engine.
    ///
    ///
    /// RDS for SQL Server Not applicable. Must be null.
    public var dbName: Swift.String?
    /// The name of the DB parameter group to associate with this DB instance. If you don't specify a value, then Amazon RDS uses the default DB parameter group for the specified DB engine and version. This setting doesn't apply to RDS Custom DB instances. Constraints:
    ///
    /// * Must be 1 to 255 letters, numbers, or hyphens.
    ///
    /// * The first character must be a letter.
    ///
    /// * Can't end with a hyphen or contain two consecutive hyphens.
    public var dbParameterGroupName: Swift.String?
    /// A list of DB security groups to associate with this DB instance. This setting applies to the legacy EC2-Classic platform, which is no longer used to create new DB instances. Use the VpcSecurityGroupIds setting instead.
    public var dbSecurityGroups: [Swift.String]?
    /// A DB subnet group to associate with this DB instance. Constraints:
    ///
    /// * Must match the name of an existing DB subnet group.
    ///
    /// * Must not be default.
    ///
    ///
    /// Example: mydbsubnetgroup
    public var dbSubnetGroupName: Swift.String?
    /// The Oracle system identifier (SID), which is the name of the Oracle database instance that manages your database files. In this context, the term "Oracle database instance" refers exclusively to the system global area (SGA) and Oracle background processes. If you don't specify a SID, the value defaults to RDSCDB. The Oracle SID is also the name of your CDB.
    public var dbSystemId: Swift.String?
    /// Indicates whether the DB instance has a dedicated log volume (DLV) enabled.
    public var dedicatedLogVolume: Swift.Bool?
    /// Specifies whether the DB instance has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection isn't enabled. For more information, see [ Deleting a DB Instance](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_DeleteInstance.html). This setting doesn't apply to Amazon Aurora DB instances. You can enable or disable deletion protection for the DB cluster. For more information, see CreateDBCluster. DB instances in a DB cluster can be deleted even when deletion protection is enabled for the DB cluster.
    public var deletionProtection: Swift.Bool?
    /// The Active Directory directory ID to create the DB instance in. Currently, you can create only Db2, MySQL, Microsoft SQL Server, Oracle, and PostgreSQL DB instances in an Active Directory Domain. For more information, see [ Kerberos Authentication](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/kerberos-authentication.html) in the Amazon RDS User Guide. This setting doesn't apply to the following DB instances:
    ///
    /// * Amazon Aurora (The domain is managed by the DB cluster.)
    ///
    /// * RDS Custom
    public var domain: Swift.String?
    /// The ARN for the Secrets Manager secret with the credentials for the user joining the domain. Example: arn:aws:secretsmanager:region:account-number:secret:myselfmanagedADtestsecret-123456
    public var domainAuthSecretArn: Swift.String?
    /// The IPv4 DNS IP addresses of your primary and secondary Active Directory domain controllers. Constraints:
    ///
    /// * Two IP addresses must be provided. If there isn't a secondary domain controller, use the IP address of the primary domain controller for both entries in the list.
    ///
    ///
    /// Example: 123.124.125.126,234.235.236.237
    public var domainDnsIps: [Swift.String]?
    /// The fully qualified domain name (FQDN) of an Active Directory domain. Constraints:
    ///
    /// * Can't be longer than 64 characters.
    ///
    ///
    /// Example: mymanagedADtest.mymanagedAD.mydomain
    public var domainFqdn: Swift.String?
    /// The name of the IAM role to use when making API calls to the Directory Service. This setting doesn't apply to the following DB instances:
    ///
    /// * Amazon Aurora (The domain is managed by the DB cluster.)
    ///
    /// * RDS Custom
    public var domainIAMRoleName: Swift.String?
    /// The Active Directory organizational unit for your DB instance to join. Constraints:
    ///
    /// * Must be in the distinguished name format.
    ///
    /// * Can't be longer than 64 characters.
    ///
    ///
    /// Example: OU=mymanagedADtestOU,DC=mymanagedADtest,DC=mymanagedAD,DC=mydomain
    public var domainOu: Swift.String?
    /// The list of log types to enable for exporting to CloudWatch Logs. For more information, see [ Publishing Database Logs to Amazon CloudWatch Logs](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch) in the Amazon RDS User Guide. This setting doesn't apply to the following DB instances:
    ///
    /// * Amazon Aurora (CloudWatch Logs exports are managed by the DB cluster.)
    ///
    /// * RDS Custom
    ///
    ///
    /// The following values are valid for each DB engine:
    ///
    /// * RDS for Db2 - diag.log | notify.log
    ///
    /// * RDS for MariaDB - audit | error | general | slowquery
    ///
    /// * RDS for Microsoft SQL Server - agent | error
    ///
    /// * RDS for MySQL - audit | error | general | slowquery
    ///
    /// * RDS for Oracle - alert | audit | listener | trace | oemagent
    ///
    /// * RDS for PostgreSQL - postgresql | upgrade
    public var enableCloudwatchLogsExports: [Swift.String]?
    /// Specifies whether to enable a customer-owned IP address (CoIP) for an RDS on Outposts DB instance. A CoIP provides local or external connectivity to resources in your Outpost subnets through your on-premises network. For some use cases, a CoIP can provide lower latency for connections to the DB instance from outside of its virtual private cloud (VPC) on your local network. For more information about RDS on Outposts, see [Working with Amazon RDS on Amazon Web Services Outposts](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/rds-on-outposts.html) in the Amazon RDS User Guide. For more information about CoIPs, see [Customer-owned IP addresses](https://docs.aws.amazon.com/outposts/latest/userguide/routing.html#ip-addressing) in the Amazon Web Services Outposts User Guide.
    public var enableCustomerOwnedIp: Swift.Bool?
    /// Specifies whether to enable mapping of Amazon Web Services Identity and Access Management (IAM) accounts to database accounts. By default, mapping isn't enabled. For more information, see [ IAM Database Authentication for MySQL and PostgreSQL](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.IAMDBAuth.html) in the Amazon RDS User Guide. This setting doesn't apply to the following DB instances:
    ///
    /// * Amazon Aurora (Mapping Amazon Web Services IAM accounts to database accounts is managed by the DB cluster.)
    ///
    /// * RDS Custom
    public var enableIAMDatabaseAuthentication: Swift.Bool?
    /// Specifies whether to enable Performance Insights for the DB instance. For more information, see [Using Amazon Performance Insights](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_PerfInsights.html) in the Amazon RDS User Guide. This setting doesn't apply to RDS Custom DB instances.
    public var enablePerformanceInsights: Swift.Bool?
    /// The database engine to use for this DB instance. Not every database engine is available in every Amazon Web Services Region. Valid Values:
    ///
    /// * aurora-mysql (for Aurora MySQL DB instances)
    ///
    /// * aurora-postgresql (for Aurora PostgreSQL DB instances)
    ///
    /// * custom-oracle-ee (for RDS Custom for Oracle DB instances)
    ///
    /// * custom-oracle-ee-cdb (for RDS Custom for Oracle DB instances)
    ///
    /// * custom-sqlserver-ee (for RDS Custom for SQL Server DB instances)
    ///
    /// * custom-sqlserver-se (for RDS Custom for SQL Server DB instances)
    ///
    /// * custom-sqlserver-web (for RDS Custom for SQL Server DB instances)
    ///
    /// * db2-ae
    ///
    /// * db2-se
    ///
    /// * mariadb
    ///
    /// * mysql
    ///
    /// * oracle-ee
    ///
    /// * oracle-ee-cdb
    ///
    /// * oracle-se2
    ///
    /// * oracle-se2-cdb
    ///
    /// * postgres
    ///
    /// * sqlserver-ee
    ///
    /// * sqlserver-se
    ///
    /// * sqlserver-ex
    ///
    /// * sqlserver-web
    /// This member is required.
    public var engine: Swift.String?
    /// The version number of the database engine to use. This setting doesn't apply to Amazon Aurora DB instances. The version number of the database engine the DB instance uses is managed by the DB cluster. For a list of valid engine versions, use the DescribeDBEngineVersions operation. The following are the database engines and links to information about the major and minor versions that are available with Amazon RDS. Not every database engine is available for every Amazon Web Services Region. Amazon RDS Custom for Oracle A custom engine version (CEV) that you have previously created. This setting is required for RDS Custom for Oracle. The CEV name has the following format: 19.customized_string. A valid CEV name is 19.my_cev1. For more information, see [ Creating an RDS Custom for Oracle DB instance](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/custom-creating.html#custom-creating.create) in the Amazon RDS User Guide. Amazon RDS Custom for SQL Server See [RDS Custom for SQL Server general requirements](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/custom-reqs-limits-MS.html) in the Amazon RDS User Guide. RDS for Db2 For information, see [Db2 on Amazon RDS versions](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_Db2.html#Db2.Concepts.VersionMgmt) in the Amazon RDS User Guide. RDS for MariaDB For information, see [MariaDB on Amazon RDS versions](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_MariaDB.html#MariaDB.Concepts.VersionMgmt) in the Amazon RDS User Guide. RDS for Microsoft SQL Server For information, see [Microsoft SQL Server versions on Amazon RDS](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_SQLServer.html#SQLServer.Concepts.General.VersionSupport) in the Amazon RDS User Guide. RDS for MySQL For information, see [MySQL on Amazon RDS versions](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_MySQL.html#MySQL.Concepts.VersionMgmt) in the Amazon RDS User Guide. RDS for Oracle For information, see [Oracle Database Engine release notes](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Appendix.Oracle.PatchComposition.html) in the Amazon RDS User Guide. RDS for PostgreSQL For information, see [Amazon RDS for PostgreSQL versions and extensions](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_PostgreSQL.html#PostgreSQL.Concepts) in the Amazon RDS User Guide.
    public var engineVersion: Swift.String?
    /// The amount of Provisioned IOPS (input/output operations per second) to initially allocate for the DB instance. For information about valid IOPS values, see [Amazon RDS DB instance storage](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_Storage.html) in the Amazon RDS User Guide. This setting doesn't apply to Amazon Aurora DB instances. Storage is managed by the DB cluster. Constraints:
    ///
    /// * For RDS for Db2, MariaDB, MySQL, Oracle, and PostgreSQL - Must be a multiple between .5 and 50 of the storage amount for the DB instance.
    ///
    /// * For RDS for SQL Server - Must be a multiple between 1 and 50 of the storage amount for the DB instance.
    public var iops: Swift.Int?
    /// The Amazon Web Services KMS key identifier for an encrypted DB instance. The Amazon Web Services KMS key identifier is the key ARN, key ID, alias ARN, or alias name for the KMS key. To use a KMS key in a different Amazon Web Services account, specify the key ARN or alias ARN. This setting doesn't apply to Amazon Aurora DB instances. The Amazon Web Services KMS key identifier is managed by the DB cluster. For more information, see CreateDBCluster. If StorageEncrypted is enabled, and you do not specify a value for the KmsKeyId parameter, then Amazon RDS uses your default KMS key. There is a default KMS key for your Amazon Web Services account. Your Amazon Web Services account has a different default KMS key for each Amazon Web Services Region. For Amazon RDS Custom, a KMS key is required for DB instances. For most RDS engines, if you leave this parameter empty while enabling StorageEncrypted, the engine uses the default KMS key. However, RDS Custom doesn't use the default key when this parameter is empty. You must explicitly specify a key.
    public var kmsKeyId: Swift.String?
    /// The license model information for this DB instance. This setting doesn't apply to Amazon Aurora or RDS Custom DB instances. Valid Values:
    ///
    /// * RDS for Db2 - bring-your-own-license
    ///
    /// * RDS for MariaDB - general-public-license
    ///
    /// * RDS for Microsoft SQL Server - license-included
    ///
    /// * RDS for MySQL - general-public-license
    ///
    /// * RDS for Oracle - bring-your-own-license | license-included
    ///
    /// * RDS for PostgreSQL - postgresql-license
    public var licenseModel: Swift.String?
    /// Specifies whether to manage the master user password with Amazon Web Services Secrets Manager. For more information, see [Password management with Amazon Web Services Secrets Manager](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/rds-secrets-manager.html) in the Amazon RDS User Guide. Constraints:
    ///
    /// * Can't manage the master user password with Amazon Web Services Secrets Manager if MasterUserPassword is specified.
    public var manageMasterUserPassword: Swift.Bool?
    /// The password for the master user. This setting doesn't apply to Amazon Aurora DB instances. The password for the master user is managed by the DB cluster. Constraints:
    ///
    /// * Can't be specified if ManageMasterUserPassword is turned on.
    ///
    /// * Can include any printable ASCII character except "/", """, or "@". For RDS for Oracle, can't include the "&" (ampersand) or the "'" (single quotes) character.
    ///
    ///
    /// Length Constraints:
    ///
    /// * RDS for Db2 - Must contain from 8 to 255 characters.
    ///
    /// * RDS for MariaDB - Must contain from 8 to 41 characters.
    ///
    /// * RDS for Microsoft SQL Server - Must contain from 8 to 128 characters.
    ///
    /// * RDS for MySQL - Must contain from 8 to 41 characters.
    ///
    /// * RDS for Oracle - Must contain from 8 to 30 characters.
    ///
    /// * RDS for PostgreSQL - Must contain from 8 to 128 characters.
    public var masterUserPassword: Swift.String?
    /// The Amazon Web Services KMS key identifier to encrypt a secret that is automatically generated and managed in Amazon Web Services Secrets Manager. This setting is valid only if the master user password is managed by RDS in Amazon Web Services Secrets Manager for the DB instance. The Amazon Web Services KMS key identifier is the key ARN, key ID, alias ARN, or alias name for the KMS key. To use a KMS key in a different Amazon Web Services account, specify the key ARN or alias ARN. If you don't specify MasterUserSecretKmsKeyId, then the aws/secretsmanager KMS key is used to encrypt the secret. If the secret is in a different Amazon Web Services account, then you can't use the aws/secretsmanager KMS key to encrypt the secret, and you must use a customer managed KMS key. There is a default KMS key for your Amazon Web Services account. Your Amazon Web Services account has a different default KMS key for each Amazon Web Services Region.
    public var masterUserSecretKmsKeyId: Swift.String?
    /// The name for the master user. This setting doesn't apply to Amazon Aurora DB instances. The name for the master user is managed by the DB cluster. This setting is required for RDS DB instances. Constraints:
    ///
    /// * Must be 1 to 16 letters, numbers, or underscores.
    ///
    /// * First character must be a letter.
    ///
    /// * Can't be a reserved word for the chosen database engine.
    public var masterUsername: Swift.String?
    /// The upper limit in gibibytes (GiB) to which Amazon RDS can automatically scale the storage of the DB instance. For more information about this setting, including limitations that apply to it, see [ Managing capacity automatically with Amazon RDS storage autoscaling](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_PIOPS.StorageTypes.html#USER_PIOPS.Autoscaling) in the Amazon RDS User Guide. This setting doesn't apply to the following DB instances:
    ///
    /// * Amazon Aurora (Storage is managed by the DB cluster.)
    ///
    /// * RDS Custom
    public var maxAllocatedStorage: Swift.Int?
    /// The interval, in seconds, between points when Enhanced Monitoring metrics are collected for the DB instance. To disable collection of Enhanced Monitoring metrics, specify 0. If MonitoringRoleArn is specified, then you must set MonitoringInterval to a value other than 0. This setting doesn't apply to RDS Custom DB instances. Valid Values: 0 | 1 | 5 | 10 | 15 | 30 | 60 Default: 0
    public var monitoringInterval: Swift.Int?
    /// The ARN for the IAM role that permits RDS to send enhanced monitoring metrics to Amazon CloudWatch Logs. For example, arn:aws:iam:123456789012:role/emaccess. For information on creating a monitoring role, see [Setting Up and Enabling Enhanced Monitoring](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Monitoring.OS.html#USER_Monitoring.OS.Enabling) in the Amazon RDS User Guide. If MonitoringInterval is set to a value other than 0, then you must supply a MonitoringRoleArn value. This setting doesn't apply to RDS Custom DB instances.
    public var monitoringRoleArn: Swift.String?
    /// Specifies whether the DB instance is a Multi-AZ deployment. You can't set the AvailabilityZone parameter if the DB instance is a Multi-AZ deployment. This setting doesn't apply to the following DB instances:
    ///
    /// * Amazon Aurora (DB instance Availability Zones (AZs) are managed by the DB cluster.)
    ///
    /// * RDS Custom
    public var multiAZ: Swift.Bool?
    /// Specifies whether to use the multi-tenant configuration or the single-tenant configuration (default). This parameter only applies to RDS for Oracle container database (CDB) engines. Note the following restrictions:
    ///
    /// * The DB engine that you specify in the request must support the multi-tenant configuration. If you attempt to enable the multi-tenant configuration on a DB engine that doesn't support it, the request fails.
    ///
    /// * If you specify the multi-tenant configuration when you create your DB instance, you can't later modify this DB instance to use the single-tenant configuration.
    public var multiTenant: Swift.Bool?
    /// The name of the NCHAR character set for the Oracle DB instance. This setting doesn't apply to RDS Custom DB instances.
    public var ncharCharacterSetName: Swift.String?
    /// The network type of the DB instance. The network type is determined by the DBSubnetGroup specified for the DB instance. A DBSubnetGroup can support only the IPv4 protocol or the IPv4 and the IPv6 protocols (DUAL). For more information, see [ Working with a DB instance in a VPC](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_VPC.WorkingWithRDSInstanceinaVPC.html) in the Amazon RDS User Guide. Valid Values: IPV4 | DUAL
    public var networkType: Swift.String?
    /// The option group to associate the DB instance with. Permanent options, such as the TDE option for Oracle Advanced Security TDE, can't be removed from an option group. Also, that option group can't be removed from a DB instance after it is associated with a DB instance. This setting doesn't apply to Amazon Aurora or RDS Custom DB instances.
    public var optionGroupName: Swift.String?
    /// The Amazon Web Services KMS key identifier for encryption of Performance Insights data. The Amazon Web Services KMS key identifier is the key ARN, key ID, alias ARN, or alias name for the KMS key. If you don't specify a value for PerformanceInsightsKMSKeyId, then Amazon RDS uses your default KMS key. There is a default KMS key for your Amazon Web Services account. Your Amazon Web Services account has a different default KMS key for each Amazon Web Services Region. This setting doesn't apply to RDS Custom DB instances.
    public var performanceInsightsKMSKeyId: Swift.String?
    /// The number of days to retain Performance Insights data. This setting doesn't apply to RDS Custom DB instances. Valid Values:
    ///
    /// * 7
    ///
    /// * month * 31, where month is a number of months from 1-23. Examples: 93 (3 months * 31), 341 (11 months * 31), 589 (19 months * 31)
    ///
    /// * 731
    ///
    ///
    /// Default: 7 days If you specify a retention period that isn't valid, such as 94, Amazon RDS returns an error.
    public var performanceInsightsRetentionPeriod: Swift.Int?
    /// The port number on which the database accepts connections. This setting doesn't apply to Aurora DB instances. The port number is managed by the cluster. Valid Values: 1150-65535 Default:
    ///
    /// * RDS for Db2 - 50000
    ///
    /// * RDS for MariaDB - 3306
    ///
    /// * RDS for Microsoft SQL Server - 1433
    ///
    /// * RDS for MySQL - 3306
    ///
    /// * RDS for Oracle - 1521
    ///
    /// * RDS for PostgreSQL - 5432
    ///
    ///
    /// Constraints:
    ///
    /// * For RDS for Microsoft SQL Server, the value can't be 1234, 1434, 3260, 3343, 3389, 47001, or 49152-49156.
    public var port: Swift.Int?
    /// The daily time range during which automated backups are created if automated backups are enabled, using the BackupRetentionPeriod parameter. The default is a 30-minute window selected at random from an 8-hour block of time for each Amazon Web Services Region. For more information, see [Backup window](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_WorkingWithAutomatedBackups.html#USER_WorkingWithAutomatedBackups.BackupWindow) in the Amazon RDS User Guide. This setting doesn't apply to Amazon Aurora DB instances. The daily time range for creating automated backups is managed by the DB cluster. Constraints:
    ///
    /// * Must be in the format hh24:mi-hh24:mi.
    ///
    /// * Must be in Universal Coordinated Time (UTC).
    ///
    /// * Must not conflict with the preferred maintenance window.
    ///
    /// * Must be at least 30 minutes.
    public var preferredBackupWindow: Swift.String?
    /// The time range each week during which system maintenance can occur. For more information, see [Amazon RDS Maintenance Window](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_UpgradeDBInstance.Maintenance.html#Concepts.DBMaintenance) in the Amazon RDS User Guide. The default is a 30-minute window selected at random from an 8-hour block of time for each Amazon Web Services Region, occurring on a random day of the week. Constraints:
    ///
    /// * Must be in the format ddd:hh24:mi-ddd:hh24:mi.
    ///
    /// * The day values must be mon | tue | wed | thu | fri | sat | sun.
    ///
    /// * Must be in Universal Coordinated Time (UTC).
    ///
    /// * Must not conflict with the preferred backup window.
    ///
    /// * Must be at least 30 minutes.
    public var preferredMaintenanceWindow: Swift.String?
    /// The number of CPU cores and the number of threads per core for the DB instance class of the DB instance. This setting doesn't apply to Amazon Aurora or RDS Custom DB instances.
    public var processorFeatures: [RDSClientTypes.ProcessorFeature]?
    /// The order of priority in which an Aurora Replica is promoted to the primary instance after a failure of the existing primary instance. For more information, see [ Fault Tolerance for an Aurora DB Cluster](https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/Concepts.AuroraHighAvailability.html#Aurora.Managing.FaultTolerance) in the Amazon Aurora User Guide. This setting doesn't apply to RDS Custom DB instances. Default: 1 Valid Values: 0 - 15
    public var promotionTier: Swift.Int?
    /// Specifies whether the DB instance is publicly accessible. When the DB instance is publicly accessible, its Domain Name System (DNS) endpoint resolves to the private IP address from within the DB instance's virtual private cloud (VPC). It resolves to the public IP address from outside of the DB instance's VPC. Access to the DB instance is ultimately controlled by the security group it uses. That public access is not permitted if the security group assigned to the DB instance doesn't permit it. When the DB instance isn't publicly accessible, it is an internal DB instance with a DNS name that resolves to a private IP address. Default: The default behavior varies depending on whether DBSubnetGroupName is specified. If DBSubnetGroupName isn't specified, and PubliclyAccessible isn't specified, the following applies:
    ///
    /// * If the default VPC in the target Region doesn’t have an internet gateway attached to it, the DB instance is private.
    ///
    /// * If the default VPC in the target Region has an internet gateway attached to it, the DB instance is public.
    ///
    ///
    /// If DBSubnetGroupName is specified, and PubliclyAccessible isn't specified, the following applies:
    ///
    /// * If the subnets are part of a VPC that doesn’t have an internet gateway attached to it, the DB instance is private.
    ///
    /// * If the subnets are part of a VPC that has an internet gateway attached to it, the DB instance is public.
    public var publiclyAccessible: Swift.Bool?
    /// Specifes whether the DB instance is encrypted. By default, it isn't encrypted. For RDS Custom DB instances, either enable this setting or leave it unset. Otherwise, Amazon RDS reports an error. This setting doesn't apply to Amazon Aurora DB instances. The encryption for DB instances is managed by the DB cluster.
    public var storageEncrypted: Swift.Bool?
    /// The storage throughput value for the DB instance. This setting applies only to the gp3 storage type. This setting doesn't apply to Amazon Aurora or RDS Custom DB instances.
    public var storageThroughput: Swift.Int?
    /// The storage type to associate with the DB instance. If you specify io1 or gp3, you must also include a value for the Iops parameter. This setting doesn't apply to Amazon Aurora DB instances. Storage is managed by the DB cluster. Valid Values: gp2 | gp3 | io1 | standard Default: io1, if the Iops parameter is specified. Otherwise, gp2.
    public var storageType: Swift.String?
    /// Tags to assign to the DB instance.
    public var tags: [RDSClientTypes.Tag]?
    /// The ARN from the key store with which to associate the instance for TDE encryption. This setting doesn't apply to Amazon Aurora or RDS Custom DB instances.
    public var tdeCredentialArn: Swift.String?
    /// The password for the given ARN from the key store in order to access the device. This setting doesn't apply to RDS Custom DB instances.
    public var tdeCredentialPassword: Swift.String?
    /// The time zone of the DB instance. The time zone parameter is currently supported only by [Microsoft SQL Server](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_SQLServer.html#SQLServer.Concepts.General.TimeZone).
    public var timezone: Swift.String?
    /// A list of Amazon EC2 VPC security groups to associate with this DB instance. This setting doesn't apply to Amazon Aurora DB instances. The associated list of EC2 VPC security groups is managed by the DB cluster. Default: The default EC2 VPC security group for the DB subnet group's VPC.
    public var vpcSecurityGroupIds: [Swift.String]?

    public init(
        allocatedStorage: Swift.Int? = nil,
        autoMinorVersionUpgrade: Swift.Bool? = nil,
        availabilityZone: Swift.String? = nil,
        backupRetentionPeriod: Swift.Int? = nil,
        backupTarget: Swift.String? = nil,
        caCertificateIdentifier: Swift.String? = nil,
        characterSetName: Swift.String? = nil,
        copyTagsToSnapshot: Swift.Bool? = nil,
        customIamInstanceProfile: Swift.String? = nil,
        dbClusterIdentifier: Swift.String? = nil,
        dbInstanceClass: Swift.String? = nil,
        dbInstanceIdentifier: Swift.String? = nil,
        dbName: Swift.String? = nil,
        dbParameterGroupName: Swift.String? = nil,
        dbSecurityGroups: [Swift.String]? = nil,
        dbSubnetGroupName: Swift.String? = nil,
        dbSystemId: Swift.String? = nil,
        dedicatedLogVolume: Swift.Bool? = nil,
        deletionProtection: Swift.Bool? = nil,
        domain: Swift.String? = nil,
        domainAuthSecretArn: Swift.String? = nil,
        domainDnsIps: [Swift.String]? = nil,
        domainFqdn: Swift.String? = nil,
        domainIAMRoleName: Swift.String? = nil,
        domainOu: Swift.String? = nil,
        enableCloudwatchLogsExports: [Swift.String]? = nil,
        enableCustomerOwnedIp: Swift.Bool? = nil,
        enableIAMDatabaseAuthentication: Swift.Bool? = nil,
        enablePerformanceInsights: Swift.Bool? = nil,
        engine: Swift.String? = nil,
        engineVersion: Swift.String? = nil,
        iops: Swift.Int? = nil,
        kmsKeyId: Swift.String? = nil,
        licenseModel: Swift.String? = nil,
        manageMasterUserPassword: Swift.Bool? = nil,
        masterUserPassword: Swift.String? = nil,
        masterUserSecretKmsKeyId: Swift.String? = nil,
        masterUsername: Swift.String? = nil,
        maxAllocatedStorage: Swift.Int? = nil,
        monitoringInterval: Swift.Int? = nil,
        monitoringRoleArn: Swift.String? = nil,
        multiAZ: Swift.Bool? = nil,
        multiTenant: Swift.Bool? = nil,
        ncharCharacterSetName: Swift.String? = nil,
        networkType: Swift.String? = nil,
        optionGroupName: Swift.String? = nil,
        performanceInsightsKMSKeyId: Swift.String? = nil,
        performanceInsightsRetentionPeriod: Swift.Int? = nil,
        port: Swift.Int? = nil,
        preferredBackupWindow: Swift.String? = nil,
        preferredMaintenanceWindow: Swift.String? = nil,
        processorFeatures: [RDSClientTypes.ProcessorFeature]? = nil,
        promotionTier: Swift.Int? = nil,
        publiclyAccessible: Swift.Bool? = nil,
        storageEncrypted: Swift.Bool? = nil,
        storageThroughput: Swift.Int? = nil,
        storageType: Swift.String? = nil,
        tags: [RDSClientTypes.Tag]? = nil,
        tdeCredentialArn: Swift.String? = nil,
        tdeCredentialPassword: Swift.String? = nil,
        timezone: Swift.String? = nil,
        vpcSecurityGroupIds: [Swift.String]? = nil
    )
    {
        self.allocatedStorage = allocatedStorage
        self.autoMinorVersionUpgrade = autoMinorVersionUpgrade
        self.availabilityZone = availabilityZone
        self.backupRetentionPeriod = backupRetentionPeriod
        self.backupTarget = backupTarget
        self.caCertificateIdentifier = caCertificateIdentifier
        self.characterSetName = characterSetName
        self.copyTagsToSnapshot = copyTagsToSnapshot
        self.customIamInstanceProfile = customIamInstanceProfile
        self.dbClusterIdentifier = dbClusterIdentifier
        self.dbInstanceClass = dbInstanceClass
        self.dbInstanceIdentifier = dbInstanceIdentifier
        self.dbName = dbName
        self.dbParameterGroupName = dbParameterGroupName
        self.dbSecurityGroups = dbSecurityGroups
        self.dbSubnetGroupName = dbSubnetGroupName
        self.dbSystemId = dbSystemId
        self.dedicatedLogVolume = dedicatedLogVolume
        self.deletionProtection = deletionProtection
        self.domain = domain
        self.domainAuthSecretArn = domainAuthSecretArn
        self.domainDnsIps = domainDnsIps
        self.domainFqdn = domainFqdn
        self.domainIAMRoleName = domainIAMRoleName
        self.domainOu = domainOu
        self.enableCloudwatchLogsExports = enableCloudwatchLogsExports
        self.enableCustomerOwnedIp = enableCustomerOwnedIp
        self.enableIAMDatabaseAuthentication = enableIAMDatabaseAuthentication
        self.enablePerformanceInsights = enablePerformanceInsights
        self.engine = engine
        self.engineVersion = engineVersion
        self.iops = iops
        self.kmsKeyId = kmsKeyId
        self.licenseModel = licenseModel
        self.manageMasterUserPassword = manageMasterUserPassword
        self.masterUserPassword = masterUserPassword
        self.masterUserSecretKmsKeyId = masterUserSecretKmsKeyId
        self.masterUsername = masterUsername
        self.maxAllocatedStorage = maxAllocatedStorage
        self.monitoringInterval = monitoringInterval
        self.monitoringRoleArn = monitoringRoleArn
        self.multiAZ = multiAZ
        self.multiTenant = multiTenant
        self.ncharCharacterSetName = ncharCharacterSetName
        self.networkType = networkType
        self.optionGroupName = optionGroupName
        self.performanceInsightsKMSKeyId = performanceInsightsKMSKeyId
        self.performanceInsightsRetentionPeriod = performanceInsightsRetentionPeriod
        self.port = port
        self.preferredBackupWindow = preferredBackupWindow
        self.preferredMaintenanceWindow = preferredMaintenanceWindow
        self.processorFeatures = processorFeatures
        self.promotionTier = promotionTier
        self.publiclyAccessible = publiclyAccessible
        self.storageEncrypted = storageEncrypted
        self.storageThroughput = storageThroughput
        self.storageType = storageType
        self.tags = tags
        self.tdeCredentialArn = tdeCredentialArn
        self.tdeCredentialPassword = tdeCredentialPassword
        self.timezone = timezone
        self.vpcSecurityGroupIds = vpcSecurityGroupIds
    }
}

extension CreateDBInstanceOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<CreateDBInstanceOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["CreateDBInstanceResult"]
            var value = CreateDBInstanceOutput()
            value.dbInstance = try reader["DBInstance"].readIfPresent(readingClosure: RDSClientTypes.DBInstance.readingClosure)
            return value
        }
    }
}

public struct CreateDBInstanceOutput: Swift.Equatable {
    /// Contains the details of an Amazon RDS DB instance. This data type is used as a response element in the operations CreateDBInstance, CreateDBInstanceReadReplica, DeleteDBInstance, DescribeDBInstances, ModifyDBInstance, PromoteReadReplica, RebootDBInstance, RestoreDBInstanceFromDBSnapshot, RestoreDBInstanceFromS3, RestoreDBInstanceToPointInTime, StartDBInstance, and StopDBInstance.
    public var dbInstance: RDSClientTypes.DBInstance?

    public init(
        dbInstance: RDSClientTypes.DBInstance? = nil
    )
    {
        self.dbInstance = dbInstance
    }
}

enum CreateDBInstanceOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "AuthorizationNotFound": return try await AuthorizationNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "BackupPolicyNotFoundFault": return try await BackupPolicyNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "CertificateNotFound": return try await CertificateNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "DBClusterNotFoundFault": return try await DBClusterNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "DBInstanceAlreadyExists": return try await DBInstanceAlreadyExistsFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "DBParameterGroupNotFound": return try await DBParameterGroupNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "DBSecurityGroupNotFound": return try await DBSecurityGroupNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "DBSubnetGroupDoesNotCoverEnoughAZs": return try await DBSubnetGroupDoesNotCoverEnoughAZs.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "DBSubnetGroupNotFoundFault": return try await DBSubnetGroupNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "DomainNotFoundFault": return try await DomainNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "InstanceQuotaExceeded": return try await InstanceQuotaExceededFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "InsufficientDBInstanceCapacity": return try await InsufficientDBInstanceCapacityFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "InvalidDBClusterStateFault": return try await InvalidDBClusterStateFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "InvalidSubnet": return try await InvalidSubnet.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "InvalidVPCNetworkStateFault": return try await InvalidVPCNetworkStateFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "KMSKeyNotAccessibleFault": return try await KMSKeyNotAccessibleFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "NetworkTypeNotSupported": return try await NetworkTypeNotSupported.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "OptionGroupNotFoundFault": return try await OptionGroupNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "ProvisionedIopsNotAvailableInAZFault": return try await ProvisionedIopsNotAvailableInAZFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "StorageQuotaExceeded": return try await StorageQuotaExceededFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "StorageTypeNotSupported": return try await StorageTypeNotSupportedFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "TenantDatabaseQuotaExceeded": return try await TenantDatabaseQuotaExceededFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension CreateDBInstanceReadReplicaInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case allocatedStorage = "AllocatedStorage"
        case autoMinorVersionUpgrade = "AutoMinorVersionUpgrade"
        case availabilityZone = "AvailabilityZone"
        case copyTagsToSnapshot = "CopyTagsToSnapshot"
        case customIamInstanceProfile = "CustomIamInstanceProfile"
        case dbInstanceClass = "DBInstanceClass"
        case dbInstanceIdentifier = "DBInstanceIdentifier"
        case dbParameterGroupName = "DBParameterGroupName"
        case dbSubnetGroupName = "DBSubnetGroupName"
        case dedicatedLogVolume = "DedicatedLogVolume"
        case deletionProtection = "DeletionProtection"
        case domain = "Domain"
        case domainAuthSecretArn = "DomainAuthSecretArn"
        case domainDnsIps = "DomainDnsIps"
        case domainFqdn = "DomainFqdn"
        case domainIAMRoleName = "DomainIAMRoleName"
        case domainOu = "DomainOu"
        case enableCloudwatchLogsExports = "EnableCloudwatchLogsExports"
        case enableCustomerOwnedIp = "EnableCustomerOwnedIp"
        case enableIAMDatabaseAuthentication = "EnableIAMDatabaseAuthentication"
        case enablePerformanceInsights = "EnablePerformanceInsights"
        case iops = "Iops"
        case kmsKeyId = "KmsKeyId"
        case maxAllocatedStorage = "MaxAllocatedStorage"
        case monitoringInterval = "MonitoringInterval"
        case monitoringRoleArn = "MonitoringRoleArn"
        case multiAZ = "MultiAZ"
        case networkType = "NetworkType"
        case optionGroupName = "OptionGroupName"
        case performanceInsightsKMSKeyId = "PerformanceInsightsKMSKeyId"
        case performanceInsightsRetentionPeriod = "PerformanceInsightsRetentionPeriod"
        case port = "Port"
        case preSignedUrl = "PreSignedUrl"
        case processorFeatures = "ProcessorFeatures"
        case publiclyAccessible = "PubliclyAccessible"
        case replicaMode = "ReplicaMode"
        case sourceDBClusterIdentifier = "SourceDBClusterIdentifier"
        case sourceDBInstanceIdentifier = "SourceDBInstanceIdentifier"
        case storageThroughput = "StorageThroughput"
        case storageType = "StorageType"
        case tags = "Tags"
        case upgradeStorageConfig = "UpgradeStorageConfig"
        case useDefaultProcessorFeatures = "UseDefaultProcessorFeatures"
        case vpcSecurityGroupIds = "VpcSecurityGroupIds"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let allocatedStorage = allocatedStorage {
            try container.encode(allocatedStorage, forKey: ClientRuntime.Key("AllocatedStorage"))
        }
        if let autoMinorVersionUpgrade = autoMinorVersionUpgrade {
            try container.encode(autoMinorVersionUpgrade, forKey: ClientRuntime.Key("AutoMinorVersionUpgrade"))
        }
        if let availabilityZone = availabilityZone {
            try container.encode(availabilityZone, forKey: ClientRuntime.Key("AvailabilityZone"))
        }
        if let copyTagsToSnapshot = copyTagsToSnapshot {
            try container.encode(copyTagsToSnapshot, forKey: ClientRuntime.Key("CopyTagsToSnapshot"))
        }
        if let customIamInstanceProfile = customIamInstanceProfile {
            try container.encode(customIamInstanceProfile, forKey: ClientRuntime.Key("CustomIamInstanceProfile"))
        }
        if let dbInstanceClass = dbInstanceClass {
            try container.encode(dbInstanceClass, forKey: ClientRuntime.Key("DBInstanceClass"))
        }
        if let dbInstanceIdentifier = dbInstanceIdentifier {
            try container.encode(dbInstanceIdentifier, forKey: ClientRuntime.Key("DBInstanceIdentifier"))
        }
        if let dbParameterGroupName = dbParameterGroupName {
            try container.encode(dbParameterGroupName, forKey: ClientRuntime.Key("DBParameterGroupName"))
        }
        if let dbSubnetGroupName = dbSubnetGroupName {
            try container.encode(dbSubnetGroupName, forKey: ClientRuntime.Key("DBSubnetGroupName"))
        }
        if let dedicatedLogVolume = dedicatedLogVolume {
            try container.encode(dedicatedLogVolume, forKey: ClientRuntime.Key("DedicatedLogVolume"))
        }
        if let deletionProtection = deletionProtection {
            try container.encode(deletionProtection, forKey: ClientRuntime.Key("DeletionProtection"))
        }
        if let domain = domain {
            try container.encode(domain, forKey: ClientRuntime.Key("Domain"))
        }
        if let domainAuthSecretArn = domainAuthSecretArn {
            try container.encode(domainAuthSecretArn, forKey: ClientRuntime.Key("DomainAuthSecretArn"))
        }
        if let domainDnsIps = domainDnsIps {
            if !domainDnsIps.isEmpty {
                var domainDnsIpsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("DomainDnsIps"))
                for (index0, string0) in domainDnsIps.enumerated() {
                    try domainDnsIpsContainer.encode(string0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var domainDnsIpsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("DomainDnsIps"))
                try domainDnsIpsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let domainFqdn = domainFqdn {
            try container.encode(domainFqdn, forKey: ClientRuntime.Key("DomainFqdn"))
        }
        if let domainIAMRoleName = domainIAMRoleName {
            try container.encode(domainIAMRoleName, forKey: ClientRuntime.Key("DomainIAMRoleName"))
        }
        if let domainOu = domainOu {
            try container.encode(domainOu, forKey: ClientRuntime.Key("DomainOu"))
        }
        if let enableCloudwatchLogsExports = enableCloudwatchLogsExports {
            if !enableCloudwatchLogsExports.isEmpty {
                var enableCloudwatchLogsExportsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("EnableCloudwatchLogsExports"))
                for (index0, string0) in enableCloudwatchLogsExports.enumerated() {
                    try enableCloudwatchLogsExportsContainer.encode(string0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var enableCloudwatchLogsExportsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("EnableCloudwatchLogsExports"))
                try enableCloudwatchLogsExportsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let enableCustomerOwnedIp = enableCustomerOwnedIp {
            try container.encode(enableCustomerOwnedIp, forKey: ClientRuntime.Key("EnableCustomerOwnedIp"))
        }
        if let enableIAMDatabaseAuthentication = enableIAMDatabaseAuthentication {
            try container.encode(enableIAMDatabaseAuthentication, forKey: ClientRuntime.Key("EnableIAMDatabaseAuthentication"))
        }
        if let enablePerformanceInsights = enablePerformanceInsights {
            try container.encode(enablePerformanceInsights, forKey: ClientRuntime.Key("EnablePerformanceInsights"))
        }
        if let iops = iops {
            try container.encode(iops, forKey: ClientRuntime.Key("Iops"))
        }
        if let kmsKeyId = kmsKeyId {
            try container.encode(kmsKeyId, forKey: ClientRuntime.Key("KmsKeyId"))
        }
        if let maxAllocatedStorage = maxAllocatedStorage {
            try container.encode(maxAllocatedStorage, forKey: ClientRuntime.Key("MaxAllocatedStorage"))
        }
        if let monitoringInterval = monitoringInterval {
            try container.encode(monitoringInterval, forKey: ClientRuntime.Key("MonitoringInterval"))
        }
        if let monitoringRoleArn = monitoringRoleArn {
            try container.encode(monitoringRoleArn, forKey: ClientRuntime.Key("MonitoringRoleArn"))
        }
        if let multiAZ = multiAZ {
            try container.encode(multiAZ, forKey: ClientRuntime.Key("MultiAZ"))
        }
        if let networkType = networkType {
            try container.encode(networkType, forKey: ClientRuntime.Key("NetworkType"))
        }
        if let optionGroupName = optionGroupName {
            try container.encode(optionGroupName, forKey: ClientRuntime.Key("OptionGroupName"))
        }
        if let performanceInsightsKMSKeyId = performanceInsightsKMSKeyId {
            try container.encode(performanceInsightsKMSKeyId, forKey: ClientRuntime.Key("PerformanceInsightsKMSKeyId"))
        }
        if let performanceInsightsRetentionPeriod = performanceInsightsRetentionPeriod {
            try container.encode(performanceInsightsRetentionPeriod, forKey: ClientRuntime.Key("PerformanceInsightsRetentionPeriod"))
        }
        if let port = port {
            try container.encode(port, forKey: ClientRuntime.Key("Port"))
        }
        if let preSignedUrl = preSignedUrl {
            try container.encode(preSignedUrl, forKey: ClientRuntime.Key("PreSignedUrl"))
        }
        if let processorFeatures = processorFeatures {
            if !processorFeatures.isEmpty {
                var processorFeaturesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("ProcessorFeatures"))
                for (index0, processorfeature0) in processorFeatures.enumerated() {
                    try processorFeaturesContainer.encode(processorfeature0, forKey: ClientRuntime.Key("ProcessorFeature.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var processorFeaturesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("ProcessorFeatures"))
                try processorFeaturesContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let publiclyAccessible = publiclyAccessible {
            try container.encode(publiclyAccessible, forKey: ClientRuntime.Key("PubliclyAccessible"))
        }
        if let replicaMode = replicaMode {
            try container.encode(replicaMode, forKey: ClientRuntime.Key("ReplicaMode"))
        }
        if let sourceDBClusterIdentifier = sourceDBClusterIdentifier {
            try container.encode(sourceDBClusterIdentifier, forKey: ClientRuntime.Key("SourceDBClusterIdentifier"))
        }
        if let sourceDBInstanceIdentifier = sourceDBInstanceIdentifier {
            try container.encode(sourceDBInstanceIdentifier, forKey: ClientRuntime.Key("SourceDBInstanceIdentifier"))
        }
        if let storageThroughput = storageThroughput {
            try container.encode(storageThroughput, forKey: ClientRuntime.Key("StorageThroughput"))
        }
        if let storageType = storageType {
            try container.encode(storageType, forKey: ClientRuntime.Key("StorageType"))
        }
        if let tags = tags {
            if !tags.isEmpty {
                var tagsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Tags"))
                for (index0, tag0) in tags.enumerated() {
                    try tagsContainer.encode(tag0, forKey: ClientRuntime.Key("Tag.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var tagsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Tags"))
                try tagsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let upgradeStorageConfig = upgradeStorageConfig {
            try container.encode(upgradeStorageConfig, forKey: ClientRuntime.Key("UpgradeStorageConfig"))
        }
        if let useDefaultProcessorFeatures = useDefaultProcessorFeatures {
            try container.encode(useDefaultProcessorFeatures, forKey: ClientRuntime.Key("UseDefaultProcessorFeatures"))
        }
        if let vpcSecurityGroupIds = vpcSecurityGroupIds {
            if !vpcSecurityGroupIds.isEmpty {
                var vpcSecurityGroupIdsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("VpcSecurityGroupIds"))
                for (index0, string0) in vpcSecurityGroupIds.enumerated() {
                    try vpcSecurityGroupIdsContainer.encode(string0, forKey: ClientRuntime.Key("VpcSecurityGroupId.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var vpcSecurityGroupIdsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("VpcSecurityGroupIds"))
                try vpcSecurityGroupIdsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        try container.encode("CreateDBInstanceReadReplica", forKey:ClientRuntime.Key("Action"))
        try container.encode("2014-10-31", forKey:ClientRuntime.Key("Version"))
    }
}

extension CreateDBInstanceReadReplicaInput {

    static func urlPathProvider(_ value: CreateDBInstanceReadReplicaInput) -> Swift.String? {
        return "/"
    }
}

public struct CreateDBInstanceReadReplicaInput: Swift.Equatable {
    /// The amount of storage (in gibibytes) to allocate initially for the read replica. Follow the allocation rules specified in CreateDBInstance. Be sure to allocate enough storage for your read replica so that the create operation can succeed. You can also allocate additional storage for future growth.
    public var allocatedStorage: Swift.Int?
    /// Specifies whether to automatically apply minor engine upgrades to the read replica during the maintenance window. This setting doesn't apply to RDS Custom DB instances. Default: Inherits the value from the source DB instance.
    public var autoMinorVersionUpgrade: Swift.Bool?
    /// The Availability Zone (AZ) where the read replica will be created. Default: A random, system-chosen Availability Zone in the endpoint's Amazon Web Services Region. Example: us-east-1d
    public var availabilityZone: Swift.String?
    /// Specifies whether to copy all tags from the read replica to snapshots of the read replica. By default, tags aren't copied.
    public var copyTagsToSnapshot: Swift.Bool?
    /// The instance profile associated with the underlying Amazon EC2 instance of an RDS Custom DB instance. The instance profile must meet the following requirements:
    ///
    /// * The profile must exist in your account.
    ///
    /// * The profile must have an IAM role that Amazon EC2 has permissions to assume.
    ///
    /// * The instance profile name and the associated IAM role name must start with the prefix AWSRDSCustom.
    ///
    ///
    /// For the list of permissions required for the IAM role, see [ Configure IAM and your VPC](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/custom-setup-orcl.html#custom-setup-orcl.iam-vpc) in the Amazon RDS User Guide. This setting is required for RDS Custom DB instances.
    public var customIamInstanceProfile: Swift.String?
    /// The compute and memory capacity of the read replica, for example db.m4.large. Not all DB instance classes are available in all Amazon Web Services Regions, or for all database engines. For the full list of DB instance classes, and availability for your engine, see [DB Instance Class](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.DBInstanceClass.html) in the Amazon RDS User Guide. Default: Inherits the value from the source DB instance.
    public var dbInstanceClass: Swift.String?
    /// The DB instance identifier of the read replica. This identifier is the unique key that identifies a DB instance. This parameter is stored as a lowercase string.
    /// This member is required.
    public var dbInstanceIdentifier: Swift.String?
    /// The name of the DB parameter group to associate with this DB instance. If you don't specify a value for DBParameterGroupName, then Amazon RDS uses the DBParameterGroup of the source DB instance for a same Region read replica, or the default DBParameterGroup for the specified DB engine for a cross-Region read replica. Specifying a parameter group for this operation is only supported for MySQL DB instances for cross-Region read replicas and for Oracle DB instances. It isn't supported for MySQL DB instances for same Region read replicas or for RDS Custom. Constraints:
    ///
    /// * Must be 1 to 255 letters, numbers, or hyphens.
    ///
    /// * First character must be a letter.
    ///
    /// * Can't end with a hyphen or contain two consecutive hyphens.
    public var dbParameterGroupName: Swift.String?
    /// A DB subnet group for the DB instance. The new DB instance is created in the VPC associated with the DB subnet group. If no DB subnet group is specified, then the new DB instance isn't created in a VPC. Constraints:
    ///
    /// * If supplied, must match the name of an existing DB subnet group.
    ///
    /// * The specified DB subnet group must be in the same Amazon Web Services Region in which the operation is running.
    ///
    /// * All read replicas in one Amazon Web Services Region that are created from the same source DB instance must either:
    ///
    /// * Specify DB subnet groups from the same VPC. All these read replicas are created in the same VPC.
    ///
    /// * Not specify a DB subnet group. All these read replicas are created outside of any VPC.
    ///
    ///
    ///
    ///
    ///
    /// Example: mydbsubnetgroup
    public var dbSubnetGroupName: Swift.String?
    /// Indicates whether the DB instance has a dedicated log volume (DLV) enabled.
    public var dedicatedLogVolume: Swift.Bool?
    /// Specifies whether to enable deletion protection for the DB instance. The database can't be deleted when deletion protection is enabled. By default, deletion protection isn't enabled. For more information, see [ Deleting a DB Instance](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_DeleteInstance.html).
    public var deletionProtection: Swift.Bool?
    /// The Active Directory directory ID to create the DB instance in. Currently, only MySQL, Microsoft SQL Server, Oracle, and PostgreSQL DB instances can be created in an Active Directory Domain. For more information, see [ Kerberos Authentication](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/kerberos-authentication.html) in the Amazon RDS User Guide. This setting doesn't apply to RDS Custom DB instances.
    public var domain: Swift.String?
    /// The ARN for the Secrets Manager secret with the credentials for the user joining the domain. Example: arn:aws:secretsmanager:region:account-number:secret:myselfmanagedADtestsecret-123456
    public var domainAuthSecretArn: Swift.String?
    /// The IPv4 DNS IP addresses of your primary and secondary Active Directory domain controllers. Constraints:
    ///
    /// * Two IP addresses must be provided. If there isn't a secondary domain controller, use the IP address of the primary domain controller for both entries in the list.
    ///
    ///
    /// Example: 123.124.125.126,234.235.236.237
    public var domainDnsIps: [Swift.String]?
    /// The fully qualified domain name (FQDN) of an Active Directory domain. Constraints:
    ///
    /// * Can't be longer than 64 characters.
    ///
    ///
    /// Example: mymanagedADtest.mymanagedAD.mydomain
    public var domainFqdn: Swift.String?
    /// The name of the IAM role to use when making API calls to the Directory Service. This setting doesn't apply to RDS Custom DB instances.
    public var domainIAMRoleName: Swift.String?
    /// The Active Directory organizational unit for your DB instance to join. Constraints:
    ///
    /// * Must be in the distinguished name format.
    ///
    /// * Can't be longer than 64 characters.
    ///
    ///
    /// Example: OU=mymanagedADtestOU,DC=mymanagedADtest,DC=mymanagedAD,DC=mydomain
    public var domainOu: Swift.String?
    /// The list of logs that the new DB instance is to export to CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see [Publishing Database Logs to Amazon CloudWatch Logs ](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch) in the Amazon RDS User Guide. This setting doesn't apply to RDS Custom DB instances.
    public var enableCloudwatchLogsExports: [Swift.String]?
    /// Specifies whether to enable a customer-owned IP address (CoIP) for an RDS on Outposts read replica. A CoIP provides local or external connectivity to resources in your Outpost subnets through your on-premises network. For some use cases, a CoIP can provide lower latency for connections to the read replica from outside of its virtual private cloud (VPC) on your local network. For more information about RDS on Outposts, see [Working with Amazon RDS on Amazon Web Services Outposts](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/rds-on-outposts.html) in the Amazon RDS User Guide. For more information about CoIPs, see [Customer-owned IP addresses](https://docs.aws.amazon.com/outposts/latest/userguide/routing.html#ip-addressing) in the Amazon Web Services Outposts User Guide.
    public var enableCustomerOwnedIp: Swift.Bool?
    /// Specifies whether to enable mapping of Amazon Web Services Identity and Access Management (IAM) accounts to database accounts. By default, mapping isn't enabled. For more information about IAM database authentication, see [ IAM Database Authentication for MySQL and PostgreSQL](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.IAMDBAuth.html) in the Amazon RDS User Guide. This setting doesn't apply to RDS Custom DB instances.
    public var enableIAMDatabaseAuthentication: Swift.Bool?
    /// Specifies whether to enable Performance Insights for the read replica. For more information, see [Using Amazon Performance Insights](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_PerfInsights.html) in the Amazon RDS User Guide. This setting doesn't apply to RDS Custom DB instances.
    public var enablePerformanceInsights: Swift.Bool?
    /// The amount of Provisioned IOPS (input/output operations per second) to initially allocate for the DB instance.
    public var iops: Swift.Int?
    /// The Amazon Web Services KMS key identifier for an encrypted read replica. The Amazon Web Services KMS key identifier is the key ARN, key ID, alias ARN, or alias name for the KMS key. If you create an encrypted read replica in the same Amazon Web Services Region as the source DB instance or Multi-AZ DB cluster, don't specify a value for this parameter. A read replica in the same Amazon Web Services Region is always encrypted with the same KMS key as the source DB instance or cluster. If you create an encrypted read replica in a different Amazon Web Services Region, then you must specify a KMS key identifier for the destination Amazon Web Services Region. KMS keys are specific to the Amazon Web Services Region that they are created in, and you can't use KMS keys from one Amazon Web Services Region in another Amazon Web Services Region. You can't create an encrypted read replica from an unencrypted DB instance or Multi-AZ DB cluster. This setting doesn't apply to RDS Custom, which uses the same KMS key as the primary replica.
    public var kmsKeyId: Swift.String?
    /// The upper limit in gibibytes (GiB) to which Amazon RDS can automatically scale the storage of the DB instance. For more information about this setting, including limitations that apply to it, see [ Managing capacity automatically with Amazon RDS storage autoscaling](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_PIOPS.StorageTypes.html#USER_PIOPS.Autoscaling) in the Amazon RDS User Guide.
    public var maxAllocatedStorage: Swift.Int?
    /// The interval, in seconds, between points when Enhanced Monitoring metrics are collected for the read replica. To disable collection of Enhanced Monitoring metrics, specify 0. The default is 0. If MonitoringRoleArn is specified, then you must set MonitoringInterval to a value other than 0. This setting doesn't apply to RDS Custom DB instances. Valid Values: 0, 1, 5, 10, 15, 30, 60 Default: 0
    public var monitoringInterval: Swift.Int?
    /// The ARN for the IAM role that permits RDS to send enhanced monitoring metrics to Amazon CloudWatch Logs. For example, arn:aws:iam:123456789012:role/emaccess. For information on creating a monitoring role, go to [To create an IAM role for Amazon RDS Enhanced Monitoring](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Monitoring.html#USER_Monitoring.OS.IAMRole) in the Amazon RDS User Guide. If MonitoringInterval is set to a value other than 0, then you must supply a MonitoringRoleArn value. This setting doesn't apply to RDS Custom DB instances.
    public var monitoringRoleArn: Swift.String?
    /// Specifies whether the read replica is in a Multi-AZ deployment. You can create a read replica as a Multi-AZ DB instance. RDS creates a standby of your replica in another Availability Zone for failover support for the replica. Creating your read replica as a Multi-AZ DB instance is independent of whether the source is a Multi-AZ DB instance or a Multi-AZ DB cluster. This setting doesn't apply to RDS Custom DB instances.
    public var multiAZ: Swift.Bool?
    /// The network type of the DB instance. Valid Values:
    ///
    /// * IPV4
    ///
    /// * DUAL
    ///
    ///
    /// The network type is determined by the DBSubnetGroup specified for read replica. A DBSubnetGroup can support only the IPv4 protocol or the IPv4 and the IPv6 protocols (DUAL). For more information, see [ Working with a DB instance in a VPC](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_VPC.WorkingWithRDSInstanceinaVPC.html) in the Amazon RDS User Guide.
    public var networkType: Swift.String?
    /// The option group to associate the DB instance with. If not specified, RDS uses the option group associated with the source DB instance or cluster. For SQL Server, you must use the option group associated with the source. This setting doesn't apply to RDS Custom DB instances.
    public var optionGroupName: Swift.String?
    /// The Amazon Web Services KMS key identifier for encryption of Performance Insights data. The Amazon Web Services KMS key identifier is the key ARN, key ID, alias ARN, or alias name for the KMS key. If you do not specify a value for PerformanceInsightsKMSKeyId, then Amazon RDS uses your default KMS key. There is a default KMS key for your Amazon Web Services account. Your Amazon Web Services account has a different default KMS key for each Amazon Web Services Region. This setting doesn't apply to RDS Custom DB instances.
    public var performanceInsightsKMSKeyId: Swift.String?
    /// The number of days to retain Performance Insights data. This setting doesn't apply to RDS Custom DB instances. Valid Values:
    ///
    /// * 7
    ///
    /// * month * 31, where month is a number of months from 1-23. Examples: 93 (3 months * 31), 341 (11 months * 31), 589 (19 months * 31)
    ///
    /// * 731
    ///
    ///
    /// Default: 7 days If you specify a retention period that isn't valid, such as 94, Amazon RDS returns an error.
    public var performanceInsightsRetentionPeriod: Swift.Int?
    /// The port number that the DB instance uses for connections. Valid Values: 1150-65535 Default: Inherits the value from the source DB instance.
    public var port: Swift.Int?
    /// When you are creating a read replica from one Amazon Web Services GovCloud (US) Region to another or from one China Amazon Web Services Region to another, the URL that contains a Signature Version 4 signed request for the CreateDBInstanceReadReplica API operation in the source Amazon Web Services Region that contains the source DB instance. This setting applies only to Amazon Web Services GovCloud (US) Regions and China Amazon Web Services Regions. It's ignored in other Amazon Web Services Regions. This setting applies only when replicating from a source DB instance. Source DB clusters aren't supported in Amazon Web Services GovCloud (US) Regions and China Amazon Web Services Regions. You must specify this parameter when you create an encrypted read replica from another Amazon Web Services Region by using the Amazon RDS API. Don't specify PreSignedUrl when you are creating an encrypted read replica in the same Amazon Web Services Region. The presigned URL must be a valid request for the CreateDBInstanceReadReplica API operation that can run in the source Amazon Web Services Region that contains the encrypted source DB instance. The presigned URL request must contain the following parameter values:
    ///
    /// * DestinationRegion - The Amazon Web Services Region that the encrypted read replica is created in. This Amazon Web Services Region is the same one where the CreateDBInstanceReadReplica operation is called that contains this presigned URL. For example, if you create an encrypted DB instance in the us-west-1 Amazon Web Services Region, from a source DB instance in the us-east-2 Amazon Web Services Region, then you call the CreateDBInstanceReadReplica operation in the us-east-1 Amazon Web Services Region and provide a presigned URL that contains a call to the CreateDBInstanceReadReplica operation in the us-west-2 Amazon Web Services Region. For this example, the DestinationRegion in the presigned URL must be set to the us-east-1 Amazon Web Services Region.
    ///
    /// * KmsKeyId - The KMS key identifier for the key to use to encrypt the read replica in the destination Amazon Web Services Region. This is the same identifier for both the CreateDBInstanceReadReplica operation that is called in the destination Amazon Web Services Region, and the operation contained in the presigned URL.
    ///
    /// * SourceDBInstanceIdentifier - The DB instance identifier for the encrypted DB instance to be replicated. This identifier must be in the Amazon Resource Name (ARN) format for the source Amazon Web Services Region. For example, if you are creating an encrypted read replica from a DB instance in the us-west-2 Amazon Web Services Region, then your SourceDBInstanceIdentifier looks like the following example: arn:aws:rds:us-west-2:123456789012:instance:mysql-instance1-20161115.
    ///
    ///
    /// To learn how to generate a Signature Version 4 signed request, see [Authenticating Requests: Using Query Parameters (Amazon Web Services Signature Version 4)](https://docs.aws.amazon.com/AmazonS3/latest/API/sigv4-query-string-auth.html) and [Signature Version 4 Signing Process](https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html). If you are using an Amazon Web Services SDK tool or the CLI, you can specify SourceRegion (or --source-region for the CLI) instead of specifying PreSignedUrl manually. Specifying SourceRegion autogenerates a presigned URL that is a valid request for the operation that can run in the source Amazon Web Services Region. SourceRegion isn't supported for SQL Server, because Amazon RDS for SQL Server doesn't support cross-Region read replicas. This setting doesn't apply to RDS Custom DB instances.
    public var preSignedUrl: Swift.String?
    /// The number of CPU cores and the number of threads per core for the DB instance class of the DB instance. This setting doesn't apply to RDS Custom DB instances.
    public var processorFeatures: [RDSClientTypes.ProcessorFeature]?
    /// Specifies whether the DB instance is publicly accessible. When the DB cluster is publicly accessible, its Domain Name System (DNS) endpoint resolves to the private IP address from within the DB cluster's virtual private cloud (VPC). It resolves to the public IP address from outside of the DB cluster's VPC. Access to the DB cluster is ultimately controlled by the security group it uses. That public access isn't permitted if the security group assigned to the DB cluster doesn't permit it. When the DB instance isn't publicly accessible, it is an internal DB instance with a DNS name that resolves to a private IP address. For more information, see [CreateDBInstance].
    public var publiclyAccessible: Swift.Bool?
    /// The open mode of the replica database: mounted or read-only. This parameter is only supported for Oracle DB instances. Mounted DB replicas are included in Oracle Database Enterprise Edition. The main use case for mounted replicas is cross-Region disaster recovery. The primary database doesn't use Active Data Guard to transmit information to the mounted replica. Because it doesn't accept user connections, a mounted replica can't serve a read-only workload. You can create a combination of mounted and read-only DB replicas for the same primary DB instance. For more information, see [Working with Oracle Read Replicas for Amazon RDS](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/oracle-read-replicas.html) in the Amazon RDS User Guide. For RDS Custom, you must specify this parameter and set it to mounted. The value won't be set by default. After replica creation, you can manage the open mode manually.
    public var replicaMode: RDSClientTypes.ReplicaMode?
    /// The identifier of the Multi-AZ DB cluster that will act as the source for the read replica. Each DB cluster can have up to 15 read replicas. Constraints:
    ///
    /// * Must be the identifier of an existing Multi-AZ DB cluster.
    ///
    /// * Can't be specified if the SourceDBInstanceIdentifier parameter is also specified.
    ///
    /// * The specified DB cluster must have automatic backups enabled, that is, its backup retention period must be greater than 0.
    ///
    /// * The source DB cluster must be in the same Amazon Web Services Region as the read replica. Cross-Region replication isn't supported.
    public var sourceDBClusterIdentifier: Swift.String?
    /// The identifier of the DB instance that will act as the source for the read replica. Each DB instance can have up to 15 read replicas, with the exception of Oracle and SQL Server, which can have up to five. Constraints:
    ///
    /// * Must be the identifier of an existing Db2, MariaDB, MySQL, Oracle, PostgreSQL, or SQL Server DB instance.
    ///
    /// * Can't be specified if the SourceDBClusterIdentifier parameter is also specified.
    ///
    /// * For the limitations of Oracle read replicas, see [Version and licensing considerations for RDS for Oracle replicas](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/oracle-read-replicas.limitations.html#oracle-read-replicas.limitations.versions-and-licenses) in the Amazon RDS User Guide.
    ///
    /// * For the limitations of SQL Server read replicas, see [Read replica limitations with SQL Server](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/SQLServer.ReadReplicas.html#SQLServer.ReadReplicas.Limitations) in the Amazon RDS User Guide.
    ///
    /// * The specified DB instance must have automatic backups enabled, that is, its backup retention period must be greater than 0.
    ///
    /// * If the source DB instance is in the same Amazon Web Services Region as the read replica, specify a valid DB instance identifier.
    ///
    /// * If the source DB instance is in a different Amazon Web Services Region from the read replica, specify a valid DB instance ARN. For more information, see [Constructing an ARN for Amazon RDS](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.ARN.html#USER_Tagging.ARN.Constructing) in the Amazon RDS User Guide. This doesn't apply to SQL Server or RDS Custom, which don't support cross-Region replicas.
    public var sourceDBInstanceIdentifier: Swift.String?
    /// Specifies the storage throughput value for the read replica. This setting doesn't apply to RDS Custom or Amazon Aurora DB instances.
    public var storageThroughput: Swift.Int?
    /// The storage type to associate with the read replica. If you specify io1 or gp3, you must also include a value for the Iops parameter. Valid Values: gp2 | gp3 | io1 | standard Default: io1 if the Iops parameter is specified. Otherwise, gp2.
    public var storageType: Swift.String?
    /// A list of tags. For more information, see [Tagging Amazon RDS Resources](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html) in the Amazon RDS User Guide.
    public var tags: [RDSClientTypes.Tag]?
    /// Whether to upgrade the storage file system configuration on the read replica. This option migrates the read replica from the old storage file system layout to the preferred layout.
    public var upgradeStorageConfig: Swift.Bool?
    /// Specifies whether the DB instance class of the DB instance uses its default processor features. This setting doesn't apply to RDS Custom DB instances.
    public var useDefaultProcessorFeatures: Swift.Bool?
    /// A list of Amazon EC2 VPC security groups to associate with the read replica. This setting doesn't apply to RDS Custom DB instances. Default: The default EC2 VPC security group for the DB subnet group's VPC.
    public var vpcSecurityGroupIds: [Swift.String]?

    public init(
        allocatedStorage: Swift.Int? = nil,
        autoMinorVersionUpgrade: Swift.Bool? = nil,
        availabilityZone: Swift.String? = nil,
        copyTagsToSnapshot: Swift.Bool? = nil,
        customIamInstanceProfile: Swift.String? = nil,
        dbInstanceClass: Swift.String? = nil,
        dbInstanceIdentifier: Swift.String? = nil,
        dbParameterGroupName: Swift.String? = nil,
        dbSubnetGroupName: Swift.String? = nil,
        dedicatedLogVolume: Swift.Bool? = nil,
        deletionProtection: Swift.Bool? = nil,
        domain: Swift.String? = nil,
        domainAuthSecretArn: Swift.String? = nil,
        domainDnsIps: [Swift.String]? = nil,
        domainFqdn: Swift.String? = nil,
        domainIAMRoleName: Swift.String? = nil,
        domainOu: Swift.String? = nil,
        enableCloudwatchLogsExports: [Swift.String]? = nil,
        enableCustomerOwnedIp: Swift.Bool? = nil,
        enableIAMDatabaseAuthentication: Swift.Bool? = nil,
        enablePerformanceInsights: Swift.Bool? = nil,
        iops: Swift.Int? = nil,
        kmsKeyId: Swift.String? = nil,
        maxAllocatedStorage: Swift.Int? = nil,
        monitoringInterval: Swift.Int? = nil,
        monitoringRoleArn: Swift.String? = nil,
        multiAZ: Swift.Bool? = nil,
        networkType: Swift.String? = nil,
        optionGroupName: Swift.String? = nil,
        performanceInsightsKMSKeyId: Swift.String? = nil,
        performanceInsightsRetentionPeriod: Swift.Int? = nil,
        port: Swift.Int? = nil,
        preSignedUrl: Swift.String? = nil,
        processorFeatures: [RDSClientTypes.ProcessorFeature]? = nil,
        publiclyAccessible: Swift.Bool? = nil,
        replicaMode: RDSClientTypes.ReplicaMode? = nil,
        sourceDBClusterIdentifier: Swift.String? = nil,
        sourceDBInstanceIdentifier: Swift.String? = nil,
        storageThroughput: Swift.Int? = nil,
        storageType: Swift.String? = nil,
        tags: [RDSClientTypes.Tag]? = nil,
        upgradeStorageConfig: Swift.Bool? = nil,
        useDefaultProcessorFeatures: Swift.Bool? = nil,
        vpcSecurityGroupIds: [Swift.String]? = nil
    )
    {
        self.allocatedStorage = allocatedStorage
        self.autoMinorVersionUpgrade = autoMinorVersionUpgrade
        self.availabilityZone = availabilityZone
        self.copyTagsToSnapshot = copyTagsToSnapshot
        self.customIamInstanceProfile = customIamInstanceProfile
        self.dbInstanceClass = dbInstanceClass
        self.dbInstanceIdentifier = dbInstanceIdentifier
        self.dbParameterGroupName = dbParameterGroupName
        self.dbSubnetGroupName = dbSubnetGroupName
        self.dedicatedLogVolume = dedicatedLogVolume
        self.deletionProtection = deletionProtection
        self.domain = domain
        self.domainAuthSecretArn = domainAuthSecretArn
        self.domainDnsIps = domainDnsIps
        self.domainFqdn = domainFqdn
        self.domainIAMRoleName = domainIAMRoleName
        self.domainOu = domainOu
        self.enableCloudwatchLogsExports = enableCloudwatchLogsExports
        self.enableCustomerOwnedIp = enableCustomerOwnedIp
        self.enableIAMDatabaseAuthentication = enableIAMDatabaseAuthentication
        self.enablePerformanceInsights = enablePerformanceInsights
        self.iops = iops
        self.kmsKeyId = kmsKeyId
        self.maxAllocatedStorage = maxAllocatedStorage
        self.monitoringInterval = monitoringInterval
        self.monitoringRoleArn = monitoringRoleArn
        self.multiAZ = multiAZ
        self.networkType = networkType
        self.optionGroupName = optionGroupName
        self.performanceInsightsKMSKeyId = performanceInsightsKMSKeyId
        self.performanceInsightsRetentionPeriod = performanceInsightsRetentionPeriod
        self.port = port
        self.preSignedUrl = preSignedUrl
        self.processorFeatures = processorFeatures
        self.publiclyAccessible = publiclyAccessible
        self.replicaMode = replicaMode
        self.sourceDBClusterIdentifier = sourceDBClusterIdentifier
        self.sourceDBInstanceIdentifier = sourceDBInstanceIdentifier
        self.storageThroughput = storageThroughput
        self.storageType = storageType
        self.tags = tags
        self.upgradeStorageConfig = upgradeStorageConfig
        self.useDefaultProcessorFeatures = useDefaultProcessorFeatures
        self.vpcSecurityGroupIds = vpcSecurityGroupIds
    }
}

extension CreateDBInstanceReadReplicaOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<CreateDBInstanceReadReplicaOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["CreateDBInstanceReadReplicaResult"]
            var value = CreateDBInstanceReadReplicaOutput()
            value.dbInstance = try reader["DBInstance"].readIfPresent(readingClosure: RDSClientTypes.DBInstance.readingClosure)
            return value
        }
    }
}

public struct CreateDBInstanceReadReplicaOutput: Swift.Equatable {
    /// Contains the details of an Amazon RDS DB instance. This data type is used as a response element in the operations CreateDBInstance, CreateDBInstanceReadReplica, DeleteDBInstance, DescribeDBInstances, ModifyDBInstance, PromoteReadReplica, RebootDBInstance, RestoreDBInstanceFromDBSnapshot, RestoreDBInstanceFromS3, RestoreDBInstanceToPointInTime, StartDBInstance, and StopDBInstance.
    public var dbInstance: RDSClientTypes.DBInstance?

    public init(
        dbInstance: RDSClientTypes.DBInstance? = nil
    )
    {
        self.dbInstance = dbInstance
    }
}

enum CreateDBInstanceReadReplicaOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "DBClusterNotFoundFault": return try await DBClusterNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "DBInstanceAlreadyExists": return try await DBInstanceAlreadyExistsFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "DBInstanceNotFound": return try await DBInstanceNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "DBParameterGroupNotFound": return try await DBParameterGroupNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "DBSecurityGroupNotFound": return try await DBSecurityGroupNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "DBSubnetGroupDoesNotCoverEnoughAZs": return try await DBSubnetGroupDoesNotCoverEnoughAZs.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "DBSubnetGroupNotAllowedFault": return try await DBSubnetGroupNotAllowedFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "DBSubnetGroupNotFoundFault": return try await DBSubnetGroupNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "DomainNotFoundFault": return try await DomainNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "InstanceQuotaExceeded": return try await InstanceQuotaExceededFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "InsufficientDBInstanceCapacity": return try await InsufficientDBInstanceCapacityFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "InvalidDBClusterStateFault": return try await InvalidDBClusterStateFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "InvalidDBInstanceState": return try await InvalidDBInstanceStateFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "InvalidDBSubnetGroupFault": return try await InvalidDBSubnetGroupFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "InvalidSubnet": return try await InvalidSubnet.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "InvalidVPCNetworkStateFault": return try await InvalidVPCNetworkStateFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "KMSKeyNotAccessibleFault": return try await KMSKeyNotAccessibleFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "NetworkTypeNotSupported": return try await NetworkTypeNotSupported.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "OptionGroupNotFoundFault": return try await OptionGroupNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "ProvisionedIopsNotAvailableInAZFault": return try await ProvisionedIopsNotAvailableInAZFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "StorageQuotaExceeded": return try await StorageQuotaExceededFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "StorageTypeNotSupported": return try await StorageTypeNotSupportedFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "TenantDatabaseQuotaExceeded": return try await TenantDatabaseQuotaExceededFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension CreateDBParameterGroupInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dbParameterGroupFamily = "DBParameterGroupFamily"
        case dbParameterGroupName = "DBParameterGroupName"
        case description = "Description"
        case tags = "Tags"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let dbParameterGroupFamily = dbParameterGroupFamily {
            try container.encode(dbParameterGroupFamily, forKey: ClientRuntime.Key("DBParameterGroupFamily"))
        }
        if let dbParameterGroupName = dbParameterGroupName {
            try container.encode(dbParameterGroupName, forKey: ClientRuntime.Key("DBParameterGroupName"))
        }
        if let description = description {
            try container.encode(description, forKey: ClientRuntime.Key("Description"))
        }
        if let tags = tags {
            if !tags.isEmpty {
                var tagsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Tags"))
                for (index0, tag0) in tags.enumerated() {
                    try tagsContainer.encode(tag0, forKey: ClientRuntime.Key("Tag.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var tagsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Tags"))
                try tagsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        try container.encode("CreateDBParameterGroup", forKey:ClientRuntime.Key("Action"))
        try container.encode("2014-10-31", forKey:ClientRuntime.Key("Version"))
    }
}

extension CreateDBParameterGroupInput {

    static func urlPathProvider(_ value: CreateDBParameterGroupInput) -> Swift.String? {
        return "/"
    }
}

///
public struct CreateDBParameterGroupInput: Swift.Equatable {
    /// The DB parameter group family name. A DB parameter group can be associated with one and only one DB parameter group family, and can be applied only to a DB instance running a database engine and engine version compatible with that DB parameter group family. To list all of the available parameter group families for a DB engine, use the following command: aws rds describe-db-engine-versions --query "DBEngineVersions[].DBParameterGroupFamily" --engine  For example, to list all of the available parameter group families for the MySQL DB engine, use the following command: aws rds describe-db-engine-versions --query "DBEngineVersions[].DBParameterGroupFamily" --engine mysql The output contains duplicates. The following are the valid DB engine values:
    ///
    /// * aurora-mysql
    ///
    /// * aurora-postgresql
    ///
    /// * db2-ae
    ///
    /// * db2-se
    ///
    /// * mysql
    ///
    /// * oracle-ee
    ///
    /// * oracle-ee-cdb
    ///
    /// * oracle-se2
    ///
    /// * oracle-se2-cdb
    ///
    /// * postgres
    ///
    /// * sqlserver-ee
    ///
    /// * sqlserver-se
    ///
    /// * sqlserver-ex
    ///
    /// * sqlserver-web
    /// This member is required.
    public var dbParameterGroupFamily: Swift.String?
    /// The name of the DB parameter group. Constraints:
    ///
    /// * Must be 1 to 255 letters, numbers, or hyphens.
    ///
    /// * First character must be a letter
    ///
    /// * Can't end with a hyphen or contain two consecutive hyphens
    ///
    ///
    /// This value is stored as a lowercase string.
    /// This member is required.
    public var dbParameterGroupName: Swift.String?
    /// The description for the DB parameter group.
    /// This member is required.
    public var description: Swift.String?
    /// Tags to assign to the DB parameter group.
    public var tags: [RDSClientTypes.Tag]?

    public init(
        dbParameterGroupFamily: Swift.String? = nil,
        dbParameterGroupName: Swift.String? = nil,
        description: Swift.String? = nil,
        tags: [RDSClientTypes.Tag]? = nil
    )
    {
        self.dbParameterGroupFamily = dbParameterGroupFamily
        self.dbParameterGroupName = dbParameterGroupName
        self.description = description
        self.tags = tags
    }
}

extension CreateDBParameterGroupOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<CreateDBParameterGroupOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["CreateDBParameterGroupResult"]
            var value = CreateDBParameterGroupOutput()
            value.dbParameterGroup = try reader["DBParameterGroup"].readIfPresent(readingClosure: RDSClientTypes.DBParameterGroup.readingClosure)
            return value
        }
    }
}

public struct CreateDBParameterGroupOutput: Swift.Equatable {
    /// Contains the details of an Amazon RDS DB parameter group. This data type is used as a response element in the DescribeDBParameterGroups action.
    public var dbParameterGroup: RDSClientTypes.DBParameterGroup?

    public init(
        dbParameterGroup: RDSClientTypes.DBParameterGroup? = nil
    )
    {
        self.dbParameterGroup = dbParameterGroup
    }
}

enum CreateDBParameterGroupOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "DBParameterGroupAlreadyExists": return try await DBParameterGroupAlreadyExistsFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "DBParameterGroupQuotaExceeded": return try await DBParameterGroupQuotaExceededFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension CreateDBProxyEndpointInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dbProxyEndpointName = "DBProxyEndpointName"
        case dbProxyName = "DBProxyName"
        case tags = "Tags"
        case targetRole = "TargetRole"
        case vpcSecurityGroupIds = "VpcSecurityGroupIds"
        case vpcSubnetIds = "VpcSubnetIds"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let dbProxyEndpointName = dbProxyEndpointName {
            try container.encode(dbProxyEndpointName, forKey: ClientRuntime.Key("DBProxyEndpointName"))
        }
        if let dbProxyName = dbProxyName {
            try container.encode(dbProxyName, forKey: ClientRuntime.Key("DBProxyName"))
        }
        if let tags = tags {
            if !tags.isEmpty {
                var tagsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Tags"))
                for (index0, tag0) in tags.enumerated() {
                    try tagsContainer.encode(tag0, forKey: ClientRuntime.Key("Tag.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var tagsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Tags"))
                try tagsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let targetRole = targetRole {
            try container.encode(targetRole, forKey: ClientRuntime.Key("TargetRole"))
        }
        if let vpcSecurityGroupIds = vpcSecurityGroupIds {
            if !vpcSecurityGroupIds.isEmpty {
                var vpcSecurityGroupIdsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("VpcSecurityGroupIds"))
                for (index0, string0) in vpcSecurityGroupIds.enumerated() {
                    try vpcSecurityGroupIdsContainer.encode(string0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var vpcSecurityGroupIdsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("VpcSecurityGroupIds"))
                try vpcSecurityGroupIdsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let vpcSubnetIds = vpcSubnetIds {
            if !vpcSubnetIds.isEmpty {
                var vpcSubnetIdsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("VpcSubnetIds"))
                for (index0, string0) in vpcSubnetIds.enumerated() {
                    try vpcSubnetIdsContainer.encode(string0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var vpcSubnetIdsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("VpcSubnetIds"))
                try vpcSubnetIdsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        try container.encode("CreateDBProxyEndpoint", forKey:ClientRuntime.Key("Action"))
        try container.encode("2014-10-31", forKey:ClientRuntime.Key("Version"))
    }
}

extension CreateDBProxyEndpointInput {

    static func urlPathProvider(_ value: CreateDBProxyEndpointInput) -> Swift.String? {
        return "/"
    }
}

public struct CreateDBProxyEndpointInput: Swift.Equatable {
    /// The name of the DB proxy endpoint to create.
    /// This member is required.
    public var dbProxyEndpointName: Swift.String?
    /// The name of the DB proxy associated with the DB proxy endpoint that you create.
    /// This member is required.
    public var dbProxyName: Swift.String?
    /// A list of tags. For more information, see [Tagging Amazon RDS Resources](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html) in the Amazon RDS User Guide.
    public var tags: [RDSClientTypes.Tag]?
    /// The role of the DB proxy endpoint. The role determines whether the endpoint can be used for read/write or only read operations. The default is READ_WRITE. The only role that proxies for RDS for Microsoft SQL Server support is READ_WRITE.
    public var targetRole: RDSClientTypes.DBProxyEndpointTargetRole?
    /// The VPC security group IDs for the DB proxy endpoint that you create. You can specify a different set of security group IDs than for the original DB proxy. The default is the default security group for the VPC.
    public var vpcSecurityGroupIds: [Swift.String]?
    /// The VPC subnet IDs for the DB proxy endpoint that you create. You can specify a different set of subnet IDs than for the original DB proxy.
    /// This member is required.
    public var vpcSubnetIds: [Swift.String]?

    public init(
        dbProxyEndpointName: Swift.String? = nil,
        dbProxyName: Swift.String? = nil,
        tags: [RDSClientTypes.Tag]? = nil,
        targetRole: RDSClientTypes.DBProxyEndpointTargetRole? = nil,
        vpcSecurityGroupIds: [Swift.String]? = nil,
        vpcSubnetIds: [Swift.String]? = nil
    )
    {
        self.dbProxyEndpointName = dbProxyEndpointName
        self.dbProxyName = dbProxyName
        self.tags = tags
        self.targetRole = targetRole
        self.vpcSecurityGroupIds = vpcSecurityGroupIds
        self.vpcSubnetIds = vpcSubnetIds
    }
}

extension CreateDBProxyEndpointOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<CreateDBProxyEndpointOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["CreateDBProxyEndpointResult"]
            var value = CreateDBProxyEndpointOutput()
            value.dbProxyEndpoint = try reader["DBProxyEndpoint"].readIfPresent(readingClosure: RDSClientTypes.DBProxyEndpoint.readingClosure)
            return value
        }
    }
}

public struct CreateDBProxyEndpointOutput: Swift.Equatable {
    /// The DBProxyEndpoint object that is created by the API operation. The DB proxy endpoint that you create might provide capabilities such as read/write or read-only operations, or using a different VPC than the proxy's default VPC.
    public var dbProxyEndpoint: RDSClientTypes.DBProxyEndpoint?

    public init(
        dbProxyEndpoint: RDSClientTypes.DBProxyEndpoint? = nil
    )
    {
        self.dbProxyEndpoint = dbProxyEndpoint
    }
}

enum CreateDBProxyEndpointOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "DBProxyEndpointAlreadyExistsFault": return try await DBProxyEndpointAlreadyExistsFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "DBProxyEndpointQuotaExceededFault": return try await DBProxyEndpointQuotaExceededFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "DBProxyNotFoundFault": return try await DBProxyNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "InvalidDBProxyStateFault": return try await InvalidDBProxyStateFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "InvalidSubnet": return try await InvalidSubnet.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension CreateDBProxyInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case auth = "Auth"
        case dbProxyName = "DBProxyName"
        case debugLogging = "DebugLogging"
        case engineFamily = "EngineFamily"
        case idleClientTimeout = "IdleClientTimeout"
        case requireTLS = "RequireTLS"
        case roleArn = "RoleArn"
        case tags = "Tags"
        case vpcSecurityGroupIds = "VpcSecurityGroupIds"
        case vpcSubnetIds = "VpcSubnetIds"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let auth = auth {
            if !auth.isEmpty {
                var authContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Auth"))
                for (index0, userauthconfig0) in auth.enumerated() {
                    try authContainer.encode(userauthconfig0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var authContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Auth"))
                try authContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let dbProxyName = dbProxyName {
            try container.encode(dbProxyName, forKey: ClientRuntime.Key("DBProxyName"))
        }
        if let debugLogging = debugLogging {
            try container.encode(debugLogging, forKey: ClientRuntime.Key("DebugLogging"))
        }
        if let engineFamily = engineFamily {
            try container.encode(engineFamily, forKey: ClientRuntime.Key("EngineFamily"))
        }
        if let idleClientTimeout = idleClientTimeout {
            try container.encode(idleClientTimeout, forKey: ClientRuntime.Key("IdleClientTimeout"))
        }
        if let requireTLS = requireTLS {
            try container.encode(requireTLS, forKey: ClientRuntime.Key("RequireTLS"))
        }
        if let roleArn = roleArn {
            try container.encode(roleArn, forKey: ClientRuntime.Key("RoleArn"))
        }
        if let tags = tags {
            if !tags.isEmpty {
                var tagsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Tags"))
                for (index0, tag0) in tags.enumerated() {
                    try tagsContainer.encode(tag0, forKey: ClientRuntime.Key("Tag.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var tagsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Tags"))
                try tagsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let vpcSecurityGroupIds = vpcSecurityGroupIds {
            if !vpcSecurityGroupIds.isEmpty {
                var vpcSecurityGroupIdsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("VpcSecurityGroupIds"))
                for (index0, string0) in vpcSecurityGroupIds.enumerated() {
                    try vpcSecurityGroupIdsContainer.encode(string0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var vpcSecurityGroupIdsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("VpcSecurityGroupIds"))
                try vpcSecurityGroupIdsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let vpcSubnetIds = vpcSubnetIds {
            if !vpcSubnetIds.isEmpty {
                var vpcSubnetIdsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("VpcSubnetIds"))
                for (index0, string0) in vpcSubnetIds.enumerated() {
                    try vpcSubnetIdsContainer.encode(string0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var vpcSubnetIdsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("VpcSubnetIds"))
                try vpcSubnetIdsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        try container.encode("CreateDBProxy", forKey:ClientRuntime.Key("Action"))
        try container.encode("2014-10-31", forKey:ClientRuntime.Key("Version"))
    }
}

extension CreateDBProxyInput {

    static func urlPathProvider(_ value: CreateDBProxyInput) -> Swift.String? {
        return "/"
    }
}

public struct CreateDBProxyInput: Swift.Equatable {
    /// The authorization mechanism that the proxy uses.
    /// This member is required.
    public var auth: [RDSClientTypes.UserAuthConfig]?
    /// The identifier for the proxy. This name must be unique for all proxies owned by your Amazon Web Services account in the specified Amazon Web Services Region. An identifier must begin with a letter and must contain only ASCII letters, digits, and hyphens; it can't end with a hyphen or contain two consecutive hyphens.
    /// This member is required.
    public var dbProxyName: Swift.String?
    /// Specifies whether the proxy includes detailed information about SQL statements in its logs. This information helps you to debug issues involving SQL behavior or the performance and scalability of the proxy connections. The debug information includes the text of SQL statements that you submit through the proxy. Thus, only enable this setting when needed for debugging, and only when you have security measures in place to safeguard any sensitive information that appears in the logs.
    public var debugLogging: Swift.Bool?
    /// The kinds of databases that the proxy can connect to. This value determines which database network protocol the proxy recognizes when it interprets network traffic to and from the database. For Aurora MySQL, RDS for MariaDB, and RDS for MySQL databases, specify MYSQL. For Aurora PostgreSQL and RDS for PostgreSQL databases, specify POSTGRESQL. For RDS for Microsoft SQL Server, specify SQLSERVER.
    /// This member is required.
    public var engineFamily: RDSClientTypes.EngineFamily?
    /// The number of seconds that a connection to the proxy can be inactive before the proxy disconnects it. You can set this value higher or lower than the connection timeout limit for the associated database.
    public var idleClientTimeout: Swift.Int?
    /// Specifies whether Transport Layer Security (TLS) encryption is required for connections to the proxy. By enabling this setting, you can enforce encrypted TLS connections to the proxy.
    public var requireTLS: Swift.Bool?
    /// The Amazon Resource Name (ARN) of the IAM role that the proxy uses to access secrets in Amazon Web Services Secrets Manager.
    /// This member is required.
    public var roleArn: Swift.String?
    /// An optional set of key-value pairs to associate arbitrary data of your choosing with the proxy.
    public var tags: [RDSClientTypes.Tag]?
    /// One or more VPC security group IDs to associate with the new proxy.
    public var vpcSecurityGroupIds: [Swift.String]?
    /// One or more VPC subnet IDs to associate with the new proxy.
    /// This member is required.
    public var vpcSubnetIds: [Swift.String]?

    public init(
        auth: [RDSClientTypes.UserAuthConfig]? = nil,
        dbProxyName: Swift.String? = nil,
        debugLogging: Swift.Bool? = nil,
        engineFamily: RDSClientTypes.EngineFamily? = nil,
        idleClientTimeout: Swift.Int? = nil,
        requireTLS: Swift.Bool? = nil,
        roleArn: Swift.String? = nil,
        tags: [RDSClientTypes.Tag]? = nil,
        vpcSecurityGroupIds: [Swift.String]? = nil,
        vpcSubnetIds: [Swift.String]? = nil
    )
    {
        self.auth = auth
        self.dbProxyName = dbProxyName
        self.debugLogging = debugLogging
        self.engineFamily = engineFamily
        self.idleClientTimeout = idleClientTimeout
        self.requireTLS = requireTLS
        self.roleArn = roleArn
        self.tags = tags
        self.vpcSecurityGroupIds = vpcSecurityGroupIds
        self.vpcSubnetIds = vpcSubnetIds
    }
}

extension CreateDBProxyOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<CreateDBProxyOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["CreateDBProxyResult"]
            var value = CreateDBProxyOutput()
            value.dbProxy = try reader["DBProxy"].readIfPresent(readingClosure: RDSClientTypes.DBProxy.readingClosure)
            return value
        }
    }
}

public struct CreateDBProxyOutput: Swift.Equatable {
    /// The DBProxy structure corresponding to the new proxy.
    public var dbProxy: RDSClientTypes.DBProxy?

    public init(
        dbProxy: RDSClientTypes.DBProxy? = nil
    )
    {
        self.dbProxy = dbProxy
    }
}

enum CreateDBProxyOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "DBProxyAlreadyExistsFault": return try await DBProxyAlreadyExistsFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "DBProxyQuotaExceededFault": return try await DBProxyQuotaExceededFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "InvalidSubnet": return try await InvalidSubnet.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension CreateDBSecurityGroupInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dbSecurityGroupDescription = "DBSecurityGroupDescription"
        case dbSecurityGroupName = "DBSecurityGroupName"
        case tags = "Tags"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let dbSecurityGroupDescription = dbSecurityGroupDescription {
            try container.encode(dbSecurityGroupDescription, forKey: ClientRuntime.Key("DBSecurityGroupDescription"))
        }
        if let dbSecurityGroupName = dbSecurityGroupName {
            try container.encode(dbSecurityGroupName, forKey: ClientRuntime.Key("DBSecurityGroupName"))
        }
        if let tags = tags {
            if !tags.isEmpty {
                var tagsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Tags"))
                for (index0, tag0) in tags.enumerated() {
                    try tagsContainer.encode(tag0, forKey: ClientRuntime.Key("Tag.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var tagsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Tags"))
                try tagsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        try container.encode("CreateDBSecurityGroup", forKey:ClientRuntime.Key("Action"))
        try container.encode("2014-10-31", forKey:ClientRuntime.Key("Version"))
    }
}

extension CreateDBSecurityGroupInput {

    static func urlPathProvider(_ value: CreateDBSecurityGroupInput) -> Swift.String? {
        return "/"
    }
}

///
public struct CreateDBSecurityGroupInput: Swift.Equatable {
    /// The description for the DB security group.
    /// This member is required.
    public var dbSecurityGroupDescription: Swift.String?
    /// The name for the DB security group. This value is stored as a lowercase string. Constraints:
    ///
    /// * Must be 1 to 255 letters, numbers, or hyphens.
    ///
    /// * First character must be a letter
    ///
    /// * Can't end with a hyphen or contain two consecutive hyphens
    ///
    /// * Must not be "Default"
    ///
    ///
    /// Example: mysecuritygroup
    /// This member is required.
    public var dbSecurityGroupName: Swift.String?
    /// Tags to assign to the DB security group.
    public var tags: [RDSClientTypes.Tag]?

    public init(
        dbSecurityGroupDescription: Swift.String? = nil,
        dbSecurityGroupName: Swift.String? = nil,
        tags: [RDSClientTypes.Tag]? = nil
    )
    {
        self.dbSecurityGroupDescription = dbSecurityGroupDescription
        self.dbSecurityGroupName = dbSecurityGroupName
        self.tags = tags
    }
}

extension CreateDBSecurityGroupOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<CreateDBSecurityGroupOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["CreateDBSecurityGroupResult"]
            var value = CreateDBSecurityGroupOutput()
            value.dbSecurityGroup = try reader["DBSecurityGroup"].readIfPresent(readingClosure: RDSClientTypes.DBSecurityGroup.readingClosure)
            return value
        }
    }
}

public struct CreateDBSecurityGroupOutput: Swift.Equatable {
    /// Contains the details for an Amazon RDS DB security group. This data type is used as a response element in the DescribeDBSecurityGroups action.
    public var dbSecurityGroup: RDSClientTypes.DBSecurityGroup?

    public init(
        dbSecurityGroup: RDSClientTypes.DBSecurityGroup? = nil
    )
    {
        self.dbSecurityGroup = dbSecurityGroup
    }
}

enum CreateDBSecurityGroupOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "DBSecurityGroupAlreadyExists": return try await DBSecurityGroupAlreadyExistsFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "DBSecurityGroupNotSupported": return try await DBSecurityGroupNotSupportedFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "QuotaExceeded.DBSecurityGroup": return try await DBSecurityGroupQuotaExceededFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension CreateDBShardGroupInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case computeRedundancy = "ComputeRedundancy"
        case dbClusterIdentifier = "DBClusterIdentifier"
        case dbShardGroupIdentifier = "DBShardGroupIdentifier"
        case maxACU = "MaxACU"
        case publiclyAccessible = "PubliclyAccessible"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let computeRedundancy = computeRedundancy {
            try container.encode(computeRedundancy, forKey: ClientRuntime.Key("ComputeRedundancy"))
        }
        if let dbClusterIdentifier = dbClusterIdentifier {
            try container.encode(dbClusterIdentifier, forKey: ClientRuntime.Key("DBClusterIdentifier"))
        }
        if let dbShardGroupIdentifier = dbShardGroupIdentifier {
            try container.encode(dbShardGroupIdentifier, forKey: ClientRuntime.Key("DBShardGroupIdentifier"))
        }
        if let maxACU = maxACU {
            try container.encode(maxACU, forKey: ClientRuntime.Key("MaxACU"))
        }
        if let publiclyAccessible = publiclyAccessible {
            try container.encode(publiclyAccessible, forKey: ClientRuntime.Key("PubliclyAccessible"))
        }
        try container.encode("CreateDBShardGroup", forKey:ClientRuntime.Key("Action"))
        try container.encode("2014-10-31", forKey:ClientRuntime.Key("Version"))
    }
}

extension CreateDBShardGroupInput {

    static func urlPathProvider(_ value: CreateDBShardGroupInput) -> Swift.String? {
        return "/"
    }
}

public struct CreateDBShardGroupInput: Swift.Equatable {
    /// Specifies whether to create standby instances for the DB shard group. Valid values are the following:
    ///
    /// * 0 - Creates a single, primary DB instance for each physical shard. This is the default value, and the only one supported for the preview.
    ///
    /// * 1 - Creates a primary DB instance and a standby instance in a different Availability Zone (AZ) for each physical shard.
    ///
    /// * 2 - Creates a primary DB instance and two standby instances in different AZs for each physical shard.
    public var computeRedundancy: Swift.Int?
    /// The name of the primary DB cluster for the DB shard group.
    /// This member is required.
    public var dbClusterIdentifier: Swift.String?
    /// The name of the DB shard group.
    /// This member is required.
    public var dbShardGroupIdentifier: Swift.String?
    /// The maximum capacity of the DB shard group in Aurora capacity units (ACUs).
    /// This member is required.
    public var maxACU: Swift.Double?
    /// Specifies whether the DB shard group is publicly accessible. When the DB shard group is publicly accessible, its Domain Name System (DNS) endpoint resolves to the private IP address from within the DB shard group's virtual private cloud (VPC). It resolves to the public IP address from outside of the DB shard group's VPC. Access to the DB shard group is ultimately controlled by the security group it uses. That public access is not permitted if the security group assigned to the DB shard group doesn't permit it. When the DB shard group isn't publicly accessible, it is an internal DB shard group with a DNS name that resolves to a private IP address. Default: The default behavior varies depending on whether DBSubnetGroupName is specified. If DBSubnetGroupName isn't specified, and PubliclyAccessible isn't specified, the following applies:
    ///
    /// * If the default VPC in the target Region doesn’t have an internet gateway attached to it, the DB shard group is private.
    ///
    /// * If the default VPC in the target Region has an internet gateway attached to it, the DB shard group is public.
    ///
    ///
    /// If DBSubnetGroupName is specified, and PubliclyAccessible isn't specified, the following applies:
    ///
    /// * If the subnets are part of a VPC that doesn’t have an internet gateway attached to it, the DB shard group is private.
    ///
    /// * If the subnets are part of a VPC that has an internet gateway attached to it, the DB shard group is public.
    public var publiclyAccessible: Swift.Bool?

    public init(
        computeRedundancy: Swift.Int? = nil,
        dbClusterIdentifier: Swift.String? = nil,
        dbShardGroupIdentifier: Swift.String? = nil,
        maxACU: Swift.Double? = nil,
        publiclyAccessible: Swift.Bool? = nil
    )
    {
        self.computeRedundancy = computeRedundancy
        self.dbClusterIdentifier = dbClusterIdentifier
        self.dbShardGroupIdentifier = dbShardGroupIdentifier
        self.maxACU = maxACU
        self.publiclyAccessible = publiclyAccessible
    }
}

extension CreateDBShardGroupOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<CreateDBShardGroupOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["CreateDBShardGroupResult"]
            var value = CreateDBShardGroupOutput()
            value.computeRedundancy = try reader["ComputeRedundancy"].readIfPresent()
            value.dbClusterIdentifier = try reader["DBClusterIdentifier"].readIfPresent()
            value.dbShardGroupIdentifier = try reader["DBShardGroupIdentifier"].readIfPresent()
            value.dbShardGroupResourceId = try reader["DBShardGroupResourceId"].readIfPresent()
            value.endpoint = try reader["Endpoint"].readIfPresent()
            value.maxACU = try reader["MaxACU"].readIfPresent()
            value.publiclyAccessible = try reader["PubliclyAccessible"].readIfPresent()
            value.status = try reader["Status"].readIfPresent()
            return value
        }
    }
}

public struct CreateDBShardGroupOutput: Swift.Equatable {
    /// Specifies whether to create standby instances for the DB shard group. Valid values are the following:
    ///
    /// * 0 - Creates a single, primary DB instance for each physical shard. This is the default value, and the only one supported for the preview.
    ///
    /// * 1 - Creates a primary DB instance and a standby instance in a different Availability Zone (AZ) for each physical shard.
    ///
    /// * 2 - Creates a primary DB instance and two standby instances in different AZs for each physical shard.
    public var computeRedundancy: Swift.Int?
    /// The name of the primary DB cluster for the DB shard group.
    public var dbClusterIdentifier: Swift.String?
    /// The name of the DB shard group.
    public var dbShardGroupIdentifier: Swift.String?
    /// The Amazon Web Services Region-unique, immutable identifier for the DB shard group.
    public var dbShardGroupResourceId: Swift.String?
    /// The connection endpoint for the DB shard group.
    public var endpoint: Swift.String?
    /// The maximum capacity of the DB shard group in Aurora capacity units (ACUs).
    public var maxACU: Swift.Double?
    /// Indicates whether the DB shard group is publicly accessible. When the DB shard group is publicly accessible, its Domain Name System (DNS) endpoint resolves to the private IP address from within the DB shard group's virtual private cloud (VPC). It resolves to the public IP address from outside of the DB shard group's VPC. Access to the DB shard group is ultimately controlled by the security group it uses. That public access isn't permitted if the security group assigned to the DB shard group doesn't permit it. When the DB shard group isn't publicly accessible, it is an internal DB shard group with a DNS name that resolves to a private IP address. For more information, see [CreateDBShardGroup]. This setting is only for Aurora Limitless Database.
    public var publiclyAccessible: Swift.Bool?
    /// The status of the DB shard group.
    public var status: Swift.String?

    public init(
        computeRedundancy: Swift.Int? = nil,
        dbClusterIdentifier: Swift.String? = nil,
        dbShardGroupIdentifier: Swift.String? = nil,
        dbShardGroupResourceId: Swift.String? = nil,
        endpoint: Swift.String? = nil,
        maxACU: Swift.Double? = nil,
        publiclyAccessible: Swift.Bool? = nil,
        status: Swift.String? = nil
    )
    {
        self.computeRedundancy = computeRedundancy
        self.dbClusterIdentifier = dbClusterIdentifier
        self.dbShardGroupIdentifier = dbShardGroupIdentifier
        self.dbShardGroupResourceId = dbShardGroupResourceId
        self.endpoint = endpoint
        self.maxACU = maxACU
        self.publiclyAccessible = publiclyAccessible
        self.status = status
    }
}

enum CreateDBShardGroupOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "DBClusterNotFoundFault": return try await DBClusterNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "DBShardGroupAlreadyExists": return try await DBShardGroupAlreadyExistsFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "InvalidDBClusterStateFault": return try await InvalidDBClusterStateFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "InvalidMaxAcu": return try await InvalidMaxAcuFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "InvalidVPCNetworkStateFault": return try await InvalidVPCNetworkStateFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "MaxDBShardGroupLimitReached": return try await MaxDBShardGroupLimitReached.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "UnsupportedDBEngineVersion": return try await UnsupportedDBEngineVersionFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension CreateDBSnapshotInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dbInstanceIdentifier = "DBInstanceIdentifier"
        case dbSnapshotIdentifier = "DBSnapshotIdentifier"
        case tags = "Tags"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let dbInstanceIdentifier = dbInstanceIdentifier {
            try container.encode(dbInstanceIdentifier, forKey: ClientRuntime.Key("DBInstanceIdentifier"))
        }
        if let dbSnapshotIdentifier = dbSnapshotIdentifier {
            try container.encode(dbSnapshotIdentifier, forKey: ClientRuntime.Key("DBSnapshotIdentifier"))
        }
        if let tags = tags {
            if !tags.isEmpty {
                var tagsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Tags"))
                for (index0, tag0) in tags.enumerated() {
                    try tagsContainer.encode(tag0, forKey: ClientRuntime.Key("Tag.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var tagsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Tags"))
                try tagsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        try container.encode("CreateDBSnapshot", forKey:ClientRuntime.Key("Action"))
        try container.encode("2014-10-31", forKey:ClientRuntime.Key("Version"))
    }
}

extension CreateDBSnapshotInput {

    static func urlPathProvider(_ value: CreateDBSnapshotInput) -> Swift.String? {
        return "/"
    }
}

///
public struct CreateDBSnapshotInput: Swift.Equatable {
    /// The identifier of the DB instance that you want to create the snapshot of. Constraints:
    ///
    /// * Must match the identifier of an existing DBInstance.
    /// This member is required.
    public var dbInstanceIdentifier: Swift.String?
    /// The identifier for the DB snapshot. Constraints:
    ///
    /// * Can't be null, empty, or blank
    ///
    /// * Must contain from 1 to 255 letters, numbers, or hyphens
    ///
    /// * First character must be a letter
    ///
    /// * Can't end with a hyphen or contain two consecutive hyphens
    ///
    ///
    /// Example: my-snapshot-id
    /// This member is required.
    public var dbSnapshotIdentifier: Swift.String?
    /// A list of tags. For more information, see [Tagging Amazon RDS Resources](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html) in the Amazon RDS User Guide.
    public var tags: [RDSClientTypes.Tag]?

    public init(
        dbInstanceIdentifier: Swift.String? = nil,
        dbSnapshotIdentifier: Swift.String? = nil,
        tags: [RDSClientTypes.Tag]? = nil
    )
    {
        self.dbInstanceIdentifier = dbInstanceIdentifier
        self.dbSnapshotIdentifier = dbSnapshotIdentifier
        self.tags = tags
    }
}

extension CreateDBSnapshotOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<CreateDBSnapshotOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["CreateDBSnapshotResult"]
            var value = CreateDBSnapshotOutput()
            value.dbSnapshot = try reader["DBSnapshot"].readIfPresent(readingClosure: RDSClientTypes.DBSnapshot.readingClosure)
            return value
        }
    }
}

public struct CreateDBSnapshotOutput: Swift.Equatable {
    /// Contains the details of an Amazon RDS DB snapshot. This data type is used as a response element in the DescribeDBSnapshots action.
    public var dbSnapshot: RDSClientTypes.DBSnapshot?

    public init(
        dbSnapshot: RDSClientTypes.DBSnapshot? = nil
    )
    {
        self.dbSnapshot = dbSnapshot
    }
}

enum CreateDBSnapshotOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "DBInstanceNotFound": return try await DBInstanceNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "DBSnapshotAlreadyExists": return try await DBSnapshotAlreadyExistsFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "InvalidDBInstanceState": return try await InvalidDBInstanceStateFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "SnapshotQuotaExceeded": return try await SnapshotQuotaExceededFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension CreateDBSubnetGroupInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dbSubnetGroupDescription = "DBSubnetGroupDescription"
        case dbSubnetGroupName = "DBSubnetGroupName"
        case subnetIds = "SubnetIds"
        case tags = "Tags"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let dbSubnetGroupDescription = dbSubnetGroupDescription {
            try container.encode(dbSubnetGroupDescription, forKey: ClientRuntime.Key("DBSubnetGroupDescription"))
        }
        if let dbSubnetGroupName = dbSubnetGroupName {
            try container.encode(dbSubnetGroupName, forKey: ClientRuntime.Key("DBSubnetGroupName"))
        }
        if let subnetIds = subnetIds {
            if !subnetIds.isEmpty {
                var subnetIdsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("SubnetIds"))
                for (index0, string0) in subnetIds.enumerated() {
                    try subnetIdsContainer.encode(string0, forKey: ClientRuntime.Key("SubnetIdentifier.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var subnetIdsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("SubnetIds"))
                try subnetIdsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let tags = tags {
            if !tags.isEmpty {
                var tagsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Tags"))
                for (index0, tag0) in tags.enumerated() {
                    try tagsContainer.encode(tag0, forKey: ClientRuntime.Key("Tag.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var tagsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Tags"))
                try tagsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        try container.encode("CreateDBSubnetGroup", forKey:ClientRuntime.Key("Action"))
        try container.encode("2014-10-31", forKey:ClientRuntime.Key("Version"))
    }
}

extension CreateDBSubnetGroupInput {

    static func urlPathProvider(_ value: CreateDBSubnetGroupInput) -> Swift.String? {
        return "/"
    }
}

///
public struct CreateDBSubnetGroupInput: Swift.Equatable {
    /// The description for the DB subnet group.
    /// This member is required.
    public var dbSubnetGroupDescription: Swift.String?
    /// The name for the DB subnet group. This value is stored as a lowercase string. Constraints:
    ///
    /// * Must contain no more than 255 letters, numbers, periods, underscores, spaces, or hyphens.
    ///
    /// * Must not be default.
    ///
    /// * First character must be a letter.
    ///
    ///
    /// Example: mydbsubnetgroup
    /// This member is required.
    public var dbSubnetGroupName: Swift.String?
    /// The EC2 Subnet IDs for the DB subnet group.
    /// This member is required.
    public var subnetIds: [Swift.String]?
    /// Tags to assign to the DB subnet group.
    public var tags: [RDSClientTypes.Tag]?

    public init(
        dbSubnetGroupDescription: Swift.String? = nil,
        dbSubnetGroupName: Swift.String? = nil,
        subnetIds: [Swift.String]? = nil,
        tags: [RDSClientTypes.Tag]? = nil
    )
    {
        self.dbSubnetGroupDescription = dbSubnetGroupDescription
        self.dbSubnetGroupName = dbSubnetGroupName
        self.subnetIds = subnetIds
        self.tags = tags
    }
}

extension CreateDBSubnetGroupOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<CreateDBSubnetGroupOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["CreateDBSubnetGroupResult"]
            var value = CreateDBSubnetGroupOutput()
            value.dbSubnetGroup = try reader["DBSubnetGroup"].readIfPresent(readingClosure: RDSClientTypes.DBSubnetGroup.readingClosure)
            return value
        }
    }
}

public struct CreateDBSubnetGroupOutput: Swift.Equatable {
    /// Contains the details of an Amazon RDS DB subnet group. This data type is used as a response element in the DescribeDBSubnetGroups action.
    public var dbSubnetGroup: RDSClientTypes.DBSubnetGroup?

    public init(
        dbSubnetGroup: RDSClientTypes.DBSubnetGroup? = nil
    )
    {
        self.dbSubnetGroup = dbSubnetGroup
    }
}

enum CreateDBSubnetGroupOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "DBSubnetGroupAlreadyExists": return try await DBSubnetGroupAlreadyExistsFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "DBSubnetGroupDoesNotCoverEnoughAZs": return try await DBSubnetGroupDoesNotCoverEnoughAZs.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "DBSubnetGroupQuotaExceeded": return try await DBSubnetGroupQuotaExceededFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "DBSubnetQuotaExceededFault": return try await DBSubnetQuotaExceededFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "InvalidSubnet": return try await InvalidSubnet.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension CreateEventSubscriptionInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case enabled = "Enabled"
        case eventCategories = "EventCategories"
        case snsTopicArn = "SnsTopicArn"
        case sourceIds = "SourceIds"
        case sourceType = "SourceType"
        case subscriptionName = "SubscriptionName"
        case tags = "Tags"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let enabled = enabled {
            try container.encode(enabled, forKey: ClientRuntime.Key("Enabled"))
        }
        if let eventCategories = eventCategories {
            if !eventCategories.isEmpty {
                var eventCategoriesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("EventCategories"))
                for (index0, string0) in eventCategories.enumerated() {
                    try eventCategoriesContainer.encode(string0, forKey: ClientRuntime.Key("EventCategory.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var eventCategoriesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("EventCategories"))
                try eventCategoriesContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let snsTopicArn = snsTopicArn {
            try container.encode(snsTopicArn, forKey: ClientRuntime.Key("SnsTopicArn"))
        }
        if let sourceIds = sourceIds {
            if !sourceIds.isEmpty {
                var sourceIdsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("SourceIds"))
                for (index0, string0) in sourceIds.enumerated() {
                    try sourceIdsContainer.encode(string0, forKey: ClientRuntime.Key("SourceId.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var sourceIdsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("SourceIds"))
                try sourceIdsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let sourceType = sourceType {
            try container.encode(sourceType, forKey: ClientRuntime.Key("SourceType"))
        }
        if let subscriptionName = subscriptionName {
            try container.encode(subscriptionName, forKey: ClientRuntime.Key("SubscriptionName"))
        }
        if let tags = tags {
            if !tags.isEmpty {
                var tagsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Tags"))
                for (index0, tag0) in tags.enumerated() {
                    try tagsContainer.encode(tag0, forKey: ClientRuntime.Key("Tag.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var tagsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Tags"))
                try tagsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        try container.encode("CreateEventSubscription", forKey:ClientRuntime.Key("Action"))
        try container.encode("2014-10-31", forKey:ClientRuntime.Key("Version"))
    }
}

extension CreateEventSubscriptionInput {

    static func urlPathProvider(_ value: CreateEventSubscriptionInput) -> Swift.String? {
        return "/"
    }
}

///
public struct CreateEventSubscriptionInput: Swift.Equatable {
    /// Specifies whether to activate the subscription. If the event notification subscription isn't activated, the subscription is created but not active.
    public var enabled: Swift.Bool?
    /// A list of event categories for a particular source type (SourceType) that you want to subscribe to. You can see a list of the categories for a given source type in the "Amazon RDS event categories and event messages" section of the [ Amazon RDS User Guide ](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Events.Messages.html) or the [ Amazon Aurora User Guide ](https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_Events.Messages.html). You can also see this list by using the DescribeEventCategories operation.
    public var eventCategories: [Swift.String]?
    /// The Amazon Resource Name (ARN) of the SNS topic created for event notification. SNS automatically creates the ARN when you create a topic and subscribe to it. RDS doesn't support FIFO (first in, first out) topics. For more information, see [Message ordering and deduplication (FIFO topics)](https://docs.aws.amazon.com/sns/latest/dg/sns-fifo-topics.html) in the Amazon Simple Notification Service Developer Guide.
    /// This member is required.
    public var snsTopicArn: Swift.String?
    /// The list of identifiers of the event sources for which events are returned. If not specified, then all sources are included in the response. An identifier must begin with a letter and must contain only ASCII letters, digits, and hyphens. It can't end with a hyphen or contain two consecutive hyphens. Constraints:
    ///
    /// * If SourceIds are supplied, SourceType must also be provided.
    ///
    /// * If the source type is a DB instance, a DBInstanceIdentifier value must be supplied.
    ///
    /// * If the source type is a DB cluster, a DBClusterIdentifier value must be supplied.
    ///
    /// * If the source type is a DB parameter group, a DBParameterGroupName value must be supplied.
    ///
    /// * If the source type is a DB security group, a DBSecurityGroupName value must be supplied.
    ///
    /// * If the source type is a DB snapshot, a DBSnapshotIdentifier value must be supplied.
    ///
    /// * If the source type is a DB cluster snapshot, a DBClusterSnapshotIdentifier value must be supplied.
    ///
    /// * If the source type is an RDS Proxy, a DBProxyName value must be supplied.
    public var sourceIds: [Swift.String]?
    /// The type of source that is generating the events. For example, if you want to be notified of events generated by a DB instance, you set this parameter to db-instance. For RDS Proxy events, specify db-proxy. If this value isn't specified, all events are returned. Valid Values: db-instance | db-cluster | db-parameter-group | db-security-group | db-snapshot | db-cluster-snapshot | db-proxy
    public var sourceType: Swift.String?
    /// The name of the subscription. Constraints: The name must be less than 255 characters.
    /// This member is required.
    public var subscriptionName: Swift.String?
    /// A list of tags. For more information, see [Tagging Amazon RDS Resources](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html) in the Amazon RDS User Guide.
    public var tags: [RDSClientTypes.Tag]?

    public init(
        enabled: Swift.Bool? = nil,
        eventCategories: [Swift.String]? = nil,
        snsTopicArn: Swift.String? = nil,
        sourceIds: [Swift.String]? = nil,
        sourceType: Swift.String? = nil,
        subscriptionName: Swift.String? = nil,
        tags: [RDSClientTypes.Tag]? = nil
    )
    {
        self.enabled = enabled
        self.eventCategories = eventCategories
        self.snsTopicArn = snsTopicArn
        self.sourceIds = sourceIds
        self.sourceType = sourceType
        self.subscriptionName = subscriptionName
        self.tags = tags
    }
}

extension CreateEventSubscriptionOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<CreateEventSubscriptionOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["CreateEventSubscriptionResult"]
            var value = CreateEventSubscriptionOutput()
            value.eventSubscription = try reader["EventSubscription"].readIfPresent(readingClosure: RDSClientTypes.EventSubscription.readingClosure)
            return value
        }
    }
}

public struct CreateEventSubscriptionOutput: Swift.Equatable {
    /// Contains the results of a successful invocation of the DescribeEventSubscriptions action.
    public var eventSubscription: RDSClientTypes.EventSubscription?

    public init(
        eventSubscription: RDSClientTypes.EventSubscription? = nil
    )
    {
        self.eventSubscription = eventSubscription
    }
}

enum CreateEventSubscriptionOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "EventSubscriptionQuotaExceeded": return try await EventSubscriptionQuotaExceededFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "SNSInvalidTopic": return try await SNSInvalidTopicFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "SNSNoAuthorization": return try await SNSNoAuthorizationFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "SNSTopicArnNotFound": return try await SNSTopicArnNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "SourceNotFound": return try await SourceNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "SubscriptionAlreadyExist": return try await SubscriptionAlreadyExistFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "SubscriptionCategoryNotFound": return try await SubscriptionCategoryNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension CreateGlobalClusterInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case databaseName = "DatabaseName"
        case deletionProtection = "DeletionProtection"
        case engine = "Engine"
        case engineVersion = "EngineVersion"
        case globalClusterIdentifier = "GlobalClusterIdentifier"
        case sourceDBClusterIdentifier = "SourceDBClusterIdentifier"
        case storageEncrypted = "StorageEncrypted"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let databaseName = databaseName {
            try container.encode(databaseName, forKey: ClientRuntime.Key("DatabaseName"))
        }
        if let deletionProtection = deletionProtection {
            try container.encode(deletionProtection, forKey: ClientRuntime.Key("DeletionProtection"))
        }
        if let engine = engine {
            try container.encode(engine, forKey: ClientRuntime.Key("Engine"))
        }
        if let engineVersion = engineVersion {
            try container.encode(engineVersion, forKey: ClientRuntime.Key("EngineVersion"))
        }
        if let globalClusterIdentifier = globalClusterIdentifier {
            try container.encode(globalClusterIdentifier, forKey: ClientRuntime.Key("GlobalClusterIdentifier"))
        }
        if let sourceDBClusterIdentifier = sourceDBClusterIdentifier {
            try container.encode(sourceDBClusterIdentifier, forKey: ClientRuntime.Key("SourceDBClusterIdentifier"))
        }
        if let storageEncrypted = storageEncrypted {
            try container.encode(storageEncrypted, forKey: ClientRuntime.Key("StorageEncrypted"))
        }
        try container.encode("CreateGlobalCluster", forKey:ClientRuntime.Key("Action"))
        try container.encode("2014-10-31", forKey:ClientRuntime.Key("Version"))
    }
}

extension CreateGlobalClusterInput {

    static func urlPathProvider(_ value: CreateGlobalClusterInput) -> Swift.String? {
        return "/"
    }
}

public struct CreateGlobalClusterInput: Swift.Equatable {
    /// The name for your database of up to 64 alphanumeric characters. If you don't specify a name, Amazon Aurora doesn't create a database in the global database cluster. Constraints:
    ///
    /// * Can't be specified if SourceDBClusterIdentifier is specified. In this case, Amazon Aurora uses the database name from the source DB cluster.
    public var databaseName: Swift.String?
    /// Specifies whether to enable deletion protection for the new global database cluster. The global database can't be deleted when deletion protection is enabled.
    public var deletionProtection: Swift.Bool?
    /// The database engine to use for this global database cluster. Valid Values: aurora-mysql | aurora-postgresql Constraints:
    ///
    /// * Can't be specified if SourceDBClusterIdentifier is specified. In this case, Amazon Aurora uses the engine of the source DB cluster.
    public var engine: Swift.String?
    /// The engine version to use for this global database cluster. Constraints:
    ///
    /// * Can't be specified if SourceDBClusterIdentifier is specified. In this case, Amazon Aurora uses the engine version of the source DB cluster.
    public var engineVersion: Swift.String?
    /// The cluster identifier for this global database cluster. This parameter is stored as a lowercase string.
    public var globalClusterIdentifier: Swift.String?
    /// The Amazon Resource Name (ARN) to use as the primary cluster of the global database. If you provide a value for this parameter, don't specify values for the following settings because Amazon Aurora uses the values from the specified source DB cluster:
    ///
    /// * DatabaseName
    ///
    /// * Engine
    ///
    /// * EngineVersion
    ///
    /// * StorageEncrypted
    public var sourceDBClusterIdentifier: Swift.String?
    /// Specifies whether to enable storage encryption for the new global database cluster. Constraints:
    ///
    /// * Can't be specified if SourceDBClusterIdentifier is specified. In this case, Amazon Aurora uses the setting from the source DB cluster.
    public var storageEncrypted: Swift.Bool?

    public init(
        databaseName: Swift.String? = nil,
        deletionProtection: Swift.Bool? = nil,
        engine: Swift.String? = nil,
        engineVersion: Swift.String? = nil,
        globalClusterIdentifier: Swift.String? = nil,
        sourceDBClusterIdentifier: Swift.String? = nil,
        storageEncrypted: Swift.Bool? = nil
    )
    {
        self.databaseName = databaseName
        self.deletionProtection = deletionProtection
        self.engine = engine
        self.engineVersion = engineVersion
        self.globalClusterIdentifier = globalClusterIdentifier
        self.sourceDBClusterIdentifier = sourceDBClusterIdentifier
        self.storageEncrypted = storageEncrypted
    }
}

extension CreateGlobalClusterOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<CreateGlobalClusterOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["CreateGlobalClusterResult"]
            var value = CreateGlobalClusterOutput()
            value.globalCluster = try reader["GlobalCluster"].readIfPresent(readingClosure: RDSClientTypes.GlobalCluster.readingClosure)
            return value
        }
    }
}

public struct CreateGlobalClusterOutput: Swift.Equatable {
    /// A data type representing an Aurora global database.
    public var globalCluster: RDSClientTypes.GlobalCluster?

    public init(
        globalCluster: RDSClientTypes.GlobalCluster? = nil
    )
    {
        self.globalCluster = globalCluster
    }
}

enum CreateGlobalClusterOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "DBClusterNotFoundFault": return try await DBClusterNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "GlobalClusterAlreadyExistsFault": return try await GlobalClusterAlreadyExistsFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "GlobalClusterQuotaExceededFault": return try await GlobalClusterQuotaExceededFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "InvalidDBClusterStateFault": return try await InvalidDBClusterStateFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension CreateIntegrationInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case additionalEncryptionContext = "AdditionalEncryptionContext"
        case integrationName = "IntegrationName"
        case kmsKeyId = "KMSKeyId"
        case sourceArn = "SourceArn"
        case tags = "Tags"
        case targetArn = "TargetArn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let additionalEncryptionContext = additionalEncryptionContext {
            var additionalEncryptionContextContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("AdditionalEncryptionContext"))
            for (index0, element0) in additionalEncryptionContext.sorted(by: { $0.key < $1.key }).enumerated() {
                let stringKey0 = element0.key
                let stringValue0 = element0.value
                var entryContainer0 = additionalEncryptionContextContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("entry.\(index0.advanced(by: 1))"))
                var keyContainer0 = entryContainer0.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("key"))
                try keyContainer0.encode(stringKey0, forKey: ClientRuntime.Key(""))
                var valueContainer0 = entryContainer0.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("value"))
                try valueContainer0.encode(stringValue0, forKey: ClientRuntime.Key(""))
            }
        }
        if let integrationName = integrationName {
            try container.encode(integrationName, forKey: ClientRuntime.Key("IntegrationName"))
        }
        if let kmsKeyId = kmsKeyId {
            try container.encode(kmsKeyId, forKey: ClientRuntime.Key("KMSKeyId"))
        }
        if let sourceArn = sourceArn {
            try container.encode(sourceArn, forKey: ClientRuntime.Key("SourceArn"))
        }
        if let tags = tags {
            if !tags.isEmpty {
                var tagsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Tags"))
                for (index0, tag0) in tags.enumerated() {
                    try tagsContainer.encode(tag0, forKey: ClientRuntime.Key("Tag.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var tagsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Tags"))
                try tagsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let targetArn = targetArn {
            try container.encode(targetArn, forKey: ClientRuntime.Key("TargetArn"))
        }
        try container.encode("CreateIntegration", forKey:ClientRuntime.Key("Action"))
        try container.encode("2014-10-31", forKey:ClientRuntime.Key("Version"))
    }
}

extension CreateIntegrationInput {

    static func urlPathProvider(_ value: CreateIntegrationInput) -> Swift.String? {
        return "/"
    }
}

public struct CreateIntegrationInput: Swift.Equatable {
    /// An optional set of non-secret key–value pairs that contains additional contextual information about the data. For more information, see [Encryption context](https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#encrypt_context) in the Amazon Web Services Key Management Service Developer Guide. You can only include this parameter if you specify the KMSKeyId parameter.
    public var additionalEncryptionContext: [Swift.String:Swift.String]?
    /// The name of the integration.
    /// This member is required.
    public var integrationName: Swift.String?
    /// The Amazon Web Services Key Management System (Amazon Web Services KMS) key identifier for the key to use to encrypt the integration. If you don't specify an encryption key, RDS uses a default Amazon Web Services owned key.
    public var kmsKeyId: Swift.String?
    /// The Amazon Resource Name (ARN) of the database to use as the source for replication.
    /// This member is required.
    public var sourceArn: Swift.String?
    /// A list of tags. For more information, see [Tagging Amazon RDS Resources](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html) in the Amazon RDS User Guide.
    public var tags: [RDSClientTypes.Tag]?
    /// The ARN of the Redshift data warehouse to use as the target for replication.
    /// This member is required.
    public var targetArn: Swift.String?

    public init(
        additionalEncryptionContext: [Swift.String:Swift.String]? = nil,
        integrationName: Swift.String? = nil,
        kmsKeyId: Swift.String? = nil,
        sourceArn: Swift.String? = nil,
        tags: [RDSClientTypes.Tag]? = nil,
        targetArn: Swift.String? = nil
    )
    {
        self.additionalEncryptionContext = additionalEncryptionContext
        self.integrationName = integrationName
        self.kmsKeyId = kmsKeyId
        self.sourceArn = sourceArn
        self.tags = tags
        self.targetArn = targetArn
    }
}

extension CreateIntegrationOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<CreateIntegrationOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["CreateIntegrationResult"]
            var value = CreateIntegrationOutput()
            value.additionalEncryptionContext = try reader["AdditionalEncryptionContext"].readMapIfPresent(valueReadingClosure: Swift.String.readingClosure, keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
            value.createTime = try reader["CreateTime"].readTimestampIfPresent(format: .dateTime)
            value.errors = try reader["Errors"].readListIfPresent(memberReadingClosure: RDSClientTypes.IntegrationError.readingClosure, memberNodeInfo: "IntegrationError", isFlattened: false)
            value.integrationArn = try reader["IntegrationArn"].readIfPresent()
            value.integrationName = try reader["IntegrationName"].readIfPresent()
            value.kmsKeyId = try reader["KMSKeyId"].readIfPresent()
            value.sourceArn = try reader["SourceArn"].readIfPresent()
            value.status = try reader["Status"].readIfPresent()
            value.tags = try reader["Tags"].readListIfPresent(memberReadingClosure: RDSClientTypes.Tag.readingClosure, memberNodeInfo: "Tag", isFlattened: false)
            value.targetArn = try reader["TargetArn"].readIfPresent()
            return value
        }
    }
}

/// A zero-ETL integration with Amazon Redshift.
public struct CreateIntegrationOutput: Swift.Equatable {
    /// The encryption context for the integration. For more information, see [Encryption context](https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#encrypt_context) in the Amazon Web Services Key Management Service Developer Guide.
    public var additionalEncryptionContext: [Swift.String:Swift.String]?
    /// The time when the integration was created, in Universal Coordinated Time (UTC).
    public var createTime: ClientRuntime.Date?
    /// Any errors associated with the integration.
    public var errors: [RDSClientTypes.IntegrationError]?
    /// The ARN of the integration.
    public var integrationArn: Swift.String?
    /// The name of the integration.
    public var integrationName: Swift.String?
    /// The Amazon Web Services Key Management System (Amazon Web Services KMS) key identifier for the key used to to encrypt the integration.
    public var kmsKeyId: Swift.String?
    /// The Amazon Resource Name (ARN) of the database used as the source for replication.
    public var sourceArn: Swift.String?
    /// The current status of the integration.
    public var status: RDSClientTypes.IntegrationStatus?
    /// A list of tags. For more information, see [Tagging Amazon RDS Resources](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html) in the Amazon RDS User Guide.
    public var tags: [RDSClientTypes.Tag]?
    /// The ARN of the Redshift data warehouse used as the target for replication.
    public var targetArn: Swift.String?

    public init(
        additionalEncryptionContext: [Swift.String:Swift.String]? = nil,
        createTime: ClientRuntime.Date? = nil,
        errors: [RDSClientTypes.IntegrationError]? = nil,
        integrationArn: Swift.String? = nil,
        integrationName: Swift.String? = nil,
        kmsKeyId: Swift.String? = nil,
        sourceArn: Swift.String? = nil,
        status: RDSClientTypes.IntegrationStatus? = nil,
        tags: [RDSClientTypes.Tag]? = nil,
        targetArn: Swift.String? = nil
    )
    {
        self.additionalEncryptionContext = additionalEncryptionContext
        self.createTime = createTime
        self.errors = errors
        self.integrationArn = integrationArn
        self.integrationName = integrationName
        self.kmsKeyId = kmsKeyId
        self.sourceArn = sourceArn
        self.status = status
        self.tags = tags
        self.targetArn = targetArn
    }
}

enum CreateIntegrationOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "DBClusterNotFoundFault": return try await DBClusterNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "DBInstanceNotFound": return try await DBInstanceNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "IntegrationAlreadyExistsFault": return try await IntegrationAlreadyExistsFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "IntegrationConflictOperationFault": return try await IntegrationConflictOperationFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "IntegrationQuotaExceededFault": return try await IntegrationQuotaExceededFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "KMSKeyNotAccessibleFault": return try await KMSKeyNotAccessibleFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension CreateOptionGroupInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case engineName = "EngineName"
        case majorEngineVersion = "MajorEngineVersion"
        case optionGroupDescription = "OptionGroupDescription"
        case optionGroupName = "OptionGroupName"
        case tags = "Tags"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let engineName = engineName {
            try container.encode(engineName, forKey: ClientRuntime.Key("EngineName"))
        }
        if let majorEngineVersion = majorEngineVersion {
            try container.encode(majorEngineVersion, forKey: ClientRuntime.Key("MajorEngineVersion"))
        }
        if let optionGroupDescription = optionGroupDescription {
            try container.encode(optionGroupDescription, forKey: ClientRuntime.Key("OptionGroupDescription"))
        }
        if let optionGroupName = optionGroupName {
            try container.encode(optionGroupName, forKey: ClientRuntime.Key("OptionGroupName"))
        }
        if let tags = tags {
            if !tags.isEmpty {
                var tagsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Tags"))
                for (index0, tag0) in tags.enumerated() {
                    try tagsContainer.encode(tag0, forKey: ClientRuntime.Key("Tag.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var tagsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Tags"))
                try tagsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        try container.encode("CreateOptionGroup", forKey:ClientRuntime.Key("Action"))
        try container.encode("2014-10-31", forKey:ClientRuntime.Key("Version"))
    }
}

extension CreateOptionGroupInput {

    static func urlPathProvider(_ value: CreateOptionGroupInput) -> Swift.String? {
        return "/"
    }
}

///
public struct CreateOptionGroupInput: Swift.Equatable {
    /// The name of the engine to associate this option group with. Valid Values:
    ///
    /// * db2-ae
    ///
    /// * db2-se
    ///
    /// * mariadb
    ///
    /// * mysql
    ///
    /// * oracle-ee
    ///
    /// * oracle-ee-cdb
    ///
    /// * oracle-se2
    ///
    /// * oracle-se2-cdb
    ///
    /// * postgres
    ///
    /// * sqlserver-ee
    ///
    /// * sqlserver-se
    ///
    /// * sqlserver-ex
    ///
    /// * sqlserver-web
    /// This member is required.
    public var engineName: Swift.String?
    /// Specifies the major version of the engine that this option group should be associated with.
    /// This member is required.
    public var majorEngineVersion: Swift.String?
    /// The description of the option group.
    /// This member is required.
    public var optionGroupDescription: Swift.String?
    /// Specifies the name of the option group to be created. Constraints:
    ///
    /// * Must be 1 to 255 letters, numbers, or hyphens
    ///
    /// * First character must be a letter
    ///
    /// * Can't end with a hyphen or contain two consecutive hyphens
    ///
    ///
    /// Example: myoptiongroup
    /// This member is required.
    public var optionGroupName: Swift.String?
    /// Tags to assign to the option group.
    public var tags: [RDSClientTypes.Tag]?

    public init(
        engineName: Swift.String? = nil,
        majorEngineVersion: Swift.String? = nil,
        optionGroupDescription: Swift.String? = nil,
        optionGroupName: Swift.String? = nil,
        tags: [RDSClientTypes.Tag]? = nil
    )
    {
        self.engineName = engineName
        self.majorEngineVersion = majorEngineVersion
        self.optionGroupDescription = optionGroupDescription
        self.optionGroupName = optionGroupName
        self.tags = tags
    }
}

extension CreateOptionGroupOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<CreateOptionGroupOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["CreateOptionGroupResult"]
            var value = CreateOptionGroupOutput()
            value.optionGroup = try reader["OptionGroup"].readIfPresent(readingClosure: RDSClientTypes.OptionGroup.readingClosure)
            return value
        }
    }
}

public struct CreateOptionGroupOutput: Swift.Equatable {
    ///
    public var optionGroup: RDSClientTypes.OptionGroup?

    public init(
        optionGroup: RDSClientTypes.OptionGroup? = nil
    )
    {
        self.optionGroup = optionGroup
    }
}

enum CreateOptionGroupOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "OptionGroupAlreadyExistsFault": return try await OptionGroupAlreadyExistsFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "OptionGroupQuotaExceededFault": return try await OptionGroupQuotaExceededFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension CreateTenantDatabaseInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateTenantDatabaseInput(characterSetName: \(Swift.String(describing: characterSetName)), dbInstanceIdentifier: \(Swift.String(describing: dbInstanceIdentifier)), masterUsername: \(Swift.String(describing: masterUsername)), ncharCharacterSetName: \(Swift.String(describing: ncharCharacterSetName)), tags: \(Swift.String(describing: tags)), tenantDBName: \(Swift.String(describing: tenantDBName)), masterUserPassword: \"CONTENT_REDACTED\")"}
}

extension CreateTenantDatabaseInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case characterSetName = "CharacterSetName"
        case dbInstanceIdentifier = "DBInstanceIdentifier"
        case masterUserPassword = "MasterUserPassword"
        case masterUsername = "MasterUsername"
        case ncharCharacterSetName = "NcharCharacterSetName"
        case tags = "Tags"
        case tenantDBName = "TenantDBName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let characterSetName = characterSetName {
            try container.encode(characterSetName, forKey: ClientRuntime.Key("CharacterSetName"))
        }
        if let dbInstanceIdentifier = dbInstanceIdentifier {
            try container.encode(dbInstanceIdentifier, forKey: ClientRuntime.Key("DBInstanceIdentifier"))
        }
        if let masterUserPassword = masterUserPassword {
            try container.encode(masterUserPassword, forKey: ClientRuntime.Key("MasterUserPassword"))
        }
        if let masterUsername = masterUsername {
            try container.encode(masterUsername, forKey: ClientRuntime.Key("MasterUsername"))
        }
        if let ncharCharacterSetName = ncharCharacterSetName {
            try container.encode(ncharCharacterSetName, forKey: ClientRuntime.Key("NcharCharacterSetName"))
        }
        if let tags = tags {
            if !tags.isEmpty {
                var tagsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Tags"))
                for (index0, tag0) in tags.enumerated() {
                    try tagsContainer.encode(tag0, forKey: ClientRuntime.Key("Tag.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var tagsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Tags"))
                try tagsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let tenantDBName = tenantDBName {
            try container.encode(tenantDBName, forKey: ClientRuntime.Key("TenantDBName"))
        }
        try container.encode("CreateTenantDatabase", forKey:ClientRuntime.Key("Action"))
        try container.encode("2014-10-31", forKey:ClientRuntime.Key("Version"))
    }
}

extension CreateTenantDatabaseInput {

    static func urlPathProvider(_ value: CreateTenantDatabaseInput) -> Swift.String? {
        return "/"
    }
}

public struct CreateTenantDatabaseInput: Swift.Equatable {
    /// The character set for your tenant database. If you don't specify a value, the character set name defaults to AL32UTF8.
    public var characterSetName: Swift.String?
    /// The user-supplied DB instance identifier. RDS creates your tenant database in this DB instance. This parameter isn't case-sensitive.
    /// This member is required.
    public var dbInstanceIdentifier: Swift.String?
    /// The password for the master user in your tenant database. Constraints:
    ///
    /// * Must be 8 to 30 characters.
    ///
    /// * Can include any printable ASCII character except forward slash (/), double quote ("), at symbol (@), ampersand (&), or single quote (').
    /// This member is required.
    public var masterUserPassword: Swift.String?
    /// The name for the master user account in your tenant database. RDS creates this user account in the tenant database and grants privileges to the master user. This parameter is case-sensitive. Constraints:
    ///
    /// * Must be 1 to 16 letters, numbers, or underscores.
    ///
    /// * First character must be a letter.
    ///
    /// * Can't be a reserved word for the chosen database engine.
    /// This member is required.
    public var masterUsername: Swift.String?
    /// The NCHAR value for the tenant database.
    public var ncharCharacterSetName: Swift.String?
    /// A list of tags. For more information, see [Tagging Amazon RDS Resources](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html) in the Amazon RDS User Guide.
    public var tags: [RDSClientTypes.Tag]?
    /// The user-supplied name of the tenant database that you want to create in your DB instance. This parameter has the same constraints as DBName in CreateDBInstance.
    /// This member is required.
    public var tenantDBName: Swift.String?

    public init(
        characterSetName: Swift.String? = nil,
        dbInstanceIdentifier: Swift.String? = nil,
        masterUserPassword: Swift.String? = nil,
        masterUsername: Swift.String? = nil,
        ncharCharacterSetName: Swift.String? = nil,
        tags: [RDSClientTypes.Tag]? = nil,
        tenantDBName: Swift.String? = nil
    )
    {
        self.characterSetName = characterSetName
        self.dbInstanceIdentifier = dbInstanceIdentifier
        self.masterUserPassword = masterUserPassword
        self.masterUsername = masterUsername
        self.ncharCharacterSetName = ncharCharacterSetName
        self.tags = tags
        self.tenantDBName = tenantDBName
    }
}

extension CreateTenantDatabaseOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<CreateTenantDatabaseOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["CreateTenantDatabaseResult"]
            var value = CreateTenantDatabaseOutput()
            value.tenantDatabase = try reader["TenantDatabase"].readIfPresent(readingClosure: RDSClientTypes.TenantDatabase.readingClosure)
            return value
        }
    }
}

public struct CreateTenantDatabaseOutput: Swift.Equatable {
    /// A tenant database in the DB instance. This data type is an element in the response to the DescribeTenantDatabases action.
    public var tenantDatabase: RDSClientTypes.TenantDatabase?

    public init(
        tenantDatabase: RDSClientTypes.TenantDatabase? = nil
    )
    {
        self.tenantDatabase = tenantDatabase
    }
}

enum CreateTenantDatabaseOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "DBInstanceNotFound": return try await DBInstanceNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "InvalidDBInstanceState": return try await InvalidDBInstanceStateFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "TenantDatabaseAlreadyExists": return try await TenantDatabaseAlreadyExistsFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "TenantDatabaseQuotaExceeded": return try await TenantDatabaseQuotaExceededFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension CustomAvailabilityZoneNotFoundFault {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = CustomAvailabilityZoneNotFoundFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// CustomAvailabilityZoneId doesn't refer to an existing custom Availability Zone identifier.
public struct CustomAvailabilityZoneNotFoundFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "CustomAvailabilityZoneNotFound" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension RDSClientTypes.CustomDBEngineVersionAMI: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case imageId = "ImageId"
        case status = "Status"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let imageId = imageId {
            try container.encode(imageId, forKey: ClientRuntime.Key("ImageId"))
        }
        if let status = status {
            try container.encode(status, forKey: ClientRuntime.Key("Status"))
        }
    }

    static var readingClosure: SmithyReadWrite.ReadingClosure<RDSClientTypes.CustomDBEngineVersionAMI, SmithyXML.Reader> {
        return { reader in
            guard reader.content != nil else { return nil }
            var value = RDSClientTypes.CustomDBEngineVersionAMI()
            value.imageId = try reader["ImageId"].readIfPresent()
            value.status = try reader["Status"].readIfPresent()
            return value
        }
    }
}

extension RDSClientTypes {
    /// A value that indicates the AMI information.
    public struct CustomDBEngineVersionAMI: Swift.Equatable {
        /// A value that indicates the ID of the AMI.
        public var imageId: Swift.String?
        /// A value that indicates the status of a custom engine version (CEV).
        public var status: Swift.String?

        public init(
            imageId: Swift.String? = nil,
            status: Swift.String? = nil
        )
        {
            self.imageId = imageId
            self.status = status
        }
    }

}

extension CustomDBEngineVersionAlreadyExistsFault {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = CustomDBEngineVersionAlreadyExistsFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// A CEV with the specified name already exists.
public struct CustomDBEngineVersionAlreadyExistsFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "CustomDBEngineVersionAlreadyExistsFault" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension CustomDBEngineVersionNotFoundFault {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = CustomDBEngineVersionNotFoundFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// The specified CEV was not found.
public struct CustomDBEngineVersionNotFoundFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "CustomDBEngineVersionNotFoundFault" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension CustomDBEngineVersionQuotaExceededFault {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = CustomDBEngineVersionQuotaExceededFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// You have exceeded your CEV quota.
public struct CustomDBEngineVersionQuotaExceededFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "CustomDBEngineVersionQuotaExceededFault" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension RDSClientTypes {
    public enum CustomEngineVersionStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case available
        case inactive
        case inactiveExceptRestore
        case sdkUnknown(Swift.String)

        public static var allCases: [CustomEngineVersionStatus] {
            return [
                .available,
                .inactive,
                .inactiveExceptRestore,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .available: return "available"
            case .inactive: return "inactive"
            case .inactiveExceptRestore: return "inactive-except-restore"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = CustomEngineVersionStatus(rawValue: rawValue) ?? CustomEngineVersionStatus.sdkUnknown(rawValue)
        }
    }
}

extension RDSClientTypes.DBCluster: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case activityStreamKinesisStreamName = "ActivityStreamKinesisStreamName"
        case activityStreamKmsKeyId = "ActivityStreamKmsKeyId"
        case activityStreamMode = "ActivityStreamMode"
        case activityStreamStatus = "ActivityStreamStatus"
        case allocatedStorage = "AllocatedStorage"
        case associatedRoles = "AssociatedRoles"
        case autoMinorVersionUpgrade = "AutoMinorVersionUpgrade"
        case automaticRestartTime = "AutomaticRestartTime"
        case availabilityZones = "AvailabilityZones"
        case awsBackupRecoveryPointArn = "AwsBackupRecoveryPointArn"
        case backtrackConsumedChangeRecords = "BacktrackConsumedChangeRecords"
        case backtrackWindow = "BacktrackWindow"
        case backupRetentionPeriod = "BackupRetentionPeriod"
        case capacity = "Capacity"
        case characterSetName = "CharacterSetName"
        case cloneGroupId = "CloneGroupId"
        case clusterCreateTime = "ClusterCreateTime"
        case copyTagsToSnapshot = "CopyTagsToSnapshot"
        case crossAccountClone = "CrossAccountClone"
        case customEndpoints = "CustomEndpoints"
        case dbClusterArn = "DBClusterArn"
        case dbClusterIdentifier = "DBClusterIdentifier"
        case dbClusterInstanceClass = "DBClusterInstanceClass"
        case dbClusterMembers = "DBClusterMembers"
        case dbClusterOptionGroupMemberships = "DBClusterOptionGroupMemberships"
        case dbClusterParameterGroup = "DBClusterParameterGroup"
        case dbSubnetGroup = "DBSubnetGroup"
        case dbSystemId = "DBSystemId"
        case databaseName = "DatabaseName"
        case dbClusterResourceId = "DbClusterResourceId"
        case deletionProtection = "DeletionProtection"
        case domainMemberships = "DomainMemberships"
        case earliestBacktrackTime = "EarliestBacktrackTime"
        case earliestRestorableTime = "EarliestRestorableTime"
        case enabledCloudwatchLogsExports = "EnabledCloudwatchLogsExports"
        case endpoint = "Endpoint"
        case engine = "Engine"
        case engineMode = "EngineMode"
        case engineVersion = "EngineVersion"
        case globalWriteForwardingRequested = "GlobalWriteForwardingRequested"
        case globalWriteForwardingStatus = "GlobalWriteForwardingStatus"
        case hostedZoneId = "HostedZoneId"
        case httpEndpointEnabled = "HttpEndpointEnabled"
        case iamDatabaseAuthenticationEnabled = "IAMDatabaseAuthenticationEnabled"
        case ioOptimizedNextAllowedModificationTime = "IOOptimizedNextAllowedModificationTime"
        case iops = "Iops"
        case kmsKeyId = "KmsKeyId"
        case latestRestorableTime = "LatestRestorableTime"
        case limitlessDatabase = "LimitlessDatabase"
        case localWriteForwardingStatus = "LocalWriteForwardingStatus"
        case masterUserSecret = "MasterUserSecret"
        case masterUsername = "MasterUsername"
        case monitoringInterval = "MonitoringInterval"
        case monitoringRoleArn = "MonitoringRoleArn"
        case multiAZ = "MultiAZ"
        case networkType = "NetworkType"
        case pendingModifiedValues = "PendingModifiedValues"
        case percentProgress = "PercentProgress"
        case performanceInsightsEnabled = "PerformanceInsightsEnabled"
        case performanceInsightsKMSKeyId = "PerformanceInsightsKMSKeyId"
        case performanceInsightsRetentionPeriod = "PerformanceInsightsRetentionPeriod"
        case port = "Port"
        case preferredBackupWindow = "PreferredBackupWindow"
        case preferredMaintenanceWindow = "PreferredMaintenanceWindow"
        case publiclyAccessible = "PubliclyAccessible"
        case rdsCustomClusterConfiguration = "RdsCustomClusterConfiguration"
        case readReplicaIdentifiers = "ReadReplicaIdentifiers"
        case readerEndpoint = "ReaderEndpoint"
        case replicationSourceIdentifier = "ReplicationSourceIdentifier"
        case scalingConfigurationInfo = "ScalingConfigurationInfo"
        case serverlessV2ScalingConfiguration = "ServerlessV2ScalingConfiguration"
        case status = "Status"
        case statusInfos = "StatusInfos"
        case storageEncrypted = "StorageEncrypted"
        case storageType = "StorageType"
        case tagList = "TagList"
        case vpcSecurityGroups = "VpcSecurityGroups"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let activityStreamKinesisStreamName = activityStreamKinesisStreamName {
            try container.encode(activityStreamKinesisStreamName, forKey: ClientRuntime.Key("ActivityStreamKinesisStreamName"))
        }
        if let activityStreamKmsKeyId = activityStreamKmsKeyId {
            try container.encode(activityStreamKmsKeyId, forKey: ClientRuntime.Key("ActivityStreamKmsKeyId"))
        }
        if let activityStreamMode = activityStreamMode {
            try container.encode(activityStreamMode, forKey: ClientRuntime.Key("ActivityStreamMode"))
        }
        if let activityStreamStatus = activityStreamStatus {
            try container.encode(activityStreamStatus, forKey: ClientRuntime.Key("ActivityStreamStatus"))
        }
        if let allocatedStorage = allocatedStorage {
            try container.encode(allocatedStorage, forKey: ClientRuntime.Key("AllocatedStorage"))
        }
        if let associatedRoles = associatedRoles {
            if !associatedRoles.isEmpty {
                var associatedRolesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("AssociatedRoles"))
                for (index0, dbclusterrole0) in associatedRoles.enumerated() {
                    try associatedRolesContainer.encode(dbclusterrole0, forKey: ClientRuntime.Key("DBClusterRole.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var associatedRolesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("AssociatedRoles"))
                try associatedRolesContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let autoMinorVersionUpgrade = autoMinorVersionUpgrade {
            try container.encode(autoMinorVersionUpgrade, forKey: ClientRuntime.Key("AutoMinorVersionUpgrade"))
        }
        if let automaticRestartTime = automaticRestartTime {
            try container.encodeTimestamp(automaticRestartTime, format: .dateTime, forKey: ClientRuntime.Key("AutomaticRestartTime"))
        }
        if let availabilityZones = availabilityZones {
            if !availabilityZones.isEmpty {
                var availabilityZonesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("AvailabilityZones"))
                for (index0, string0) in availabilityZones.enumerated() {
                    try availabilityZonesContainer.encode(string0, forKey: ClientRuntime.Key("AvailabilityZone.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var availabilityZonesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("AvailabilityZones"))
                try availabilityZonesContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let awsBackupRecoveryPointArn = awsBackupRecoveryPointArn {
            try container.encode(awsBackupRecoveryPointArn, forKey: ClientRuntime.Key("AwsBackupRecoveryPointArn"))
        }
        if let backtrackConsumedChangeRecords = backtrackConsumedChangeRecords {
            try container.encode(backtrackConsumedChangeRecords, forKey: ClientRuntime.Key("BacktrackConsumedChangeRecords"))
        }
        if let backtrackWindow = backtrackWindow {
            try container.encode(backtrackWindow, forKey: ClientRuntime.Key("BacktrackWindow"))
        }
        if let backupRetentionPeriod = backupRetentionPeriod {
            try container.encode(backupRetentionPeriod, forKey: ClientRuntime.Key("BackupRetentionPeriod"))
        }
        if let capacity = capacity {
            try container.encode(capacity, forKey: ClientRuntime.Key("Capacity"))
        }
        if let characterSetName = characterSetName {
            try container.encode(characterSetName, forKey: ClientRuntime.Key("CharacterSetName"))
        }
        if let cloneGroupId = cloneGroupId {
            try container.encode(cloneGroupId, forKey: ClientRuntime.Key("CloneGroupId"))
        }
        if let clusterCreateTime = clusterCreateTime {
            try container.encodeTimestamp(clusterCreateTime, format: .dateTime, forKey: ClientRuntime.Key("ClusterCreateTime"))
        }
        if let copyTagsToSnapshot = copyTagsToSnapshot {
            try container.encode(copyTagsToSnapshot, forKey: ClientRuntime.Key("CopyTagsToSnapshot"))
        }
        if let crossAccountClone = crossAccountClone {
            try container.encode(crossAccountClone, forKey: ClientRuntime.Key("CrossAccountClone"))
        }
        if let customEndpoints = customEndpoints {
            if !customEndpoints.isEmpty {
                var customEndpointsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("CustomEndpoints"))
                for (index0, string0) in customEndpoints.enumerated() {
                    try customEndpointsContainer.encode(string0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var customEndpointsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("CustomEndpoints"))
                try customEndpointsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let dbClusterArn = dbClusterArn {
            try container.encode(dbClusterArn, forKey: ClientRuntime.Key("DBClusterArn"))
        }
        if let dbClusterIdentifier = dbClusterIdentifier {
            try container.encode(dbClusterIdentifier, forKey: ClientRuntime.Key("DBClusterIdentifier"))
        }
        if let dbClusterInstanceClass = dbClusterInstanceClass {
            try container.encode(dbClusterInstanceClass, forKey: ClientRuntime.Key("DBClusterInstanceClass"))
        }
        if let dbClusterMembers = dbClusterMembers {
            if !dbClusterMembers.isEmpty {
                var dbClusterMembersContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("DBClusterMembers"))
                for (index0, dbclustermember0) in dbClusterMembers.enumerated() {
                    try dbClusterMembersContainer.encode(dbclustermember0, forKey: ClientRuntime.Key("DBClusterMember.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var dbClusterMembersContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("DBClusterMembers"))
                try dbClusterMembersContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let dbClusterOptionGroupMemberships = dbClusterOptionGroupMemberships {
            if !dbClusterOptionGroupMemberships.isEmpty {
                var dbClusterOptionGroupMembershipsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("DBClusterOptionGroupMemberships"))
                for (index0, dbclusteroptiongroupstatus0) in dbClusterOptionGroupMemberships.enumerated() {
                    try dbClusterOptionGroupMembershipsContainer.encode(dbclusteroptiongroupstatus0, forKey: ClientRuntime.Key("DBClusterOptionGroup.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var dbClusterOptionGroupMembershipsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("DBClusterOptionGroupMemberships"))
                try dbClusterOptionGroupMembershipsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let dbClusterParameterGroup = dbClusterParameterGroup {
            try container.encode(dbClusterParameterGroup, forKey: ClientRuntime.Key("DBClusterParameterGroup"))
        }
        if let dbSubnetGroup = dbSubnetGroup {
            try container.encode(dbSubnetGroup, forKey: ClientRuntime.Key("DBSubnetGroup"))
        }
        if let dbSystemId = dbSystemId {
            try container.encode(dbSystemId, forKey: ClientRuntime.Key("DBSystemId"))
        }
        if let databaseName = databaseName {
            try container.encode(databaseName, forKey: ClientRuntime.Key("DatabaseName"))
        }
        if let dbClusterResourceId = dbClusterResourceId {
            try container.encode(dbClusterResourceId, forKey: ClientRuntime.Key("DbClusterResourceId"))
        }
        if let deletionProtection = deletionProtection {
            try container.encode(deletionProtection, forKey: ClientRuntime.Key("DeletionProtection"))
        }
        if let domainMemberships = domainMemberships {
            if !domainMemberships.isEmpty {
                var domainMembershipsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("DomainMemberships"))
                for (index0, domainmembership0) in domainMemberships.enumerated() {
                    try domainMembershipsContainer.encode(domainmembership0, forKey: ClientRuntime.Key("DomainMembership.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var domainMembershipsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("DomainMemberships"))
                try domainMembershipsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let earliestBacktrackTime = earliestBacktrackTime {
            try container.encodeTimestamp(earliestBacktrackTime, format: .dateTime, forKey: ClientRuntime.Key("EarliestBacktrackTime"))
        }
        if let earliestRestorableTime = earliestRestorableTime {
            try container.encodeTimestamp(earliestRestorableTime, format: .dateTime, forKey: ClientRuntime.Key("EarliestRestorableTime"))
        }
        if let enabledCloudwatchLogsExports = enabledCloudwatchLogsExports {
            if !enabledCloudwatchLogsExports.isEmpty {
                var enabledCloudwatchLogsExportsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("EnabledCloudwatchLogsExports"))
                for (index0, string0) in enabledCloudwatchLogsExports.enumerated() {
                    try enabledCloudwatchLogsExportsContainer.encode(string0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var enabledCloudwatchLogsExportsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("EnabledCloudwatchLogsExports"))
                try enabledCloudwatchLogsExportsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let endpoint = endpoint {
            try container.encode(endpoint, forKey: ClientRuntime.Key("Endpoint"))
        }
        if let engine = engine {
            try container.encode(engine, forKey: ClientRuntime.Key("Engine"))
        }
        if let engineMode = engineMode {
            try container.encode(engineMode, forKey: ClientRuntime.Key("EngineMode"))
        }
        if let engineVersion = engineVersion {
            try container.encode(engineVersion, forKey: ClientRuntime.Key("EngineVersion"))
        }
        if let globalWriteForwardingRequested = globalWriteForwardingRequested {
            try container.encode(globalWriteForwardingRequested, forKey: ClientRuntime.Key("GlobalWriteForwardingRequested"))
        }
        if let globalWriteForwardingStatus = globalWriteForwardingStatus {
            try container.encode(globalWriteForwardingStatus, forKey: ClientRuntime.Key("GlobalWriteForwardingStatus"))
        }
        if let hostedZoneId = hostedZoneId {
            try container.encode(hostedZoneId, forKey: ClientRuntime.Key("HostedZoneId"))
        }
        if let httpEndpointEnabled = httpEndpointEnabled {
            try container.encode(httpEndpointEnabled, forKey: ClientRuntime.Key("HttpEndpointEnabled"))
        }
        if let iamDatabaseAuthenticationEnabled = iamDatabaseAuthenticationEnabled {
            try container.encode(iamDatabaseAuthenticationEnabled, forKey: ClientRuntime.Key("IAMDatabaseAuthenticationEnabled"))
        }
        if let ioOptimizedNextAllowedModificationTime = ioOptimizedNextAllowedModificationTime {
            try container.encodeTimestamp(ioOptimizedNextAllowedModificationTime, format: .dateTime, forKey: ClientRuntime.Key("IOOptimizedNextAllowedModificationTime"))
        }
        if let iops = iops {
            try container.encode(iops, forKey: ClientRuntime.Key("Iops"))
        }
        if let kmsKeyId = kmsKeyId {
            try container.encode(kmsKeyId, forKey: ClientRuntime.Key("KmsKeyId"))
        }
        if let latestRestorableTime = latestRestorableTime {
            try container.encodeTimestamp(latestRestorableTime, format: .dateTime, forKey: ClientRuntime.Key("LatestRestorableTime"))
        }
        if let limitlessDatabase = limitlessDatabase {
            try container.encode(limitlessDatabase, forKey: ClientRuntime.Key("LimitlessDatabase"))
        }
        if let localWriteForwardingStatus = localWriteForwardingStatus {
            try container.encode(localWriteForwardingStatus, forKey: ClientRuntime.Key("LocalWriteForwardingStatus"))
        }
        if let masterUserSecret = masterUserSecret {
            try container.encode(masterUserSecret, forKey: ClientRuntime.Key("MasterUserSecret"))
        }
        if let masterUsername = masterUsername {
            try container.encode(masterUsername, forKey: ClientRuntime.Key("MasterUsername"))
        }
        if let monitoringInterval = monitoringInterval {
            try container.encode(monitoringInterval, forKey: ClientRuntime.Key("MonitoringInterval"))
        }
        if let monitoringRoleArn = monitoringRoleArn {
            try container.encode(monitoringRoleArn, forKey: ClientRuntime.Key("MonitoringRoleArn"))
        }
        if let multiAZ = multiAZ {
            try container.encode(multiAZ, forKey: ClientRuntime.Key("MultiAZ"))
        }
        if let networkType = networkType {
            try container.encode(networkType, forKey: ClientRuntime.Key("NetworkType"))
        }
        if let pendingModifiedValues = pendingModifiedValues {
            try container.encode(pendingModifiedValues, forKey: ClientRuntime.Key("PendingModifiedValues"))
        }
        if let percentProgress = percentProgress {
            try container.encode(percentProgress, forKey: ClientRuntime.Key("PercentProgress"))
        }
        if let performanceInsightsEnabled = performanceInsightsEnabled {
            try container.encode(performanceInsightsEnabled, forKey: ClientRuntime.Key("PerformanceInsightsEnabled"))
        }
        if let performanceInsightsKMSKeyId = performanceInsightsKMSKeyId {
            try container.encode(performanceInsightsKMSKeyId, forKey: ClientRuntime.Key("PerformanceInsightsKMSKeyId"))
        }
        if let performanceInsightsRetentionPeriod = performanceInsightsRetentionPeriod {
            try container.encode(performanceInsightsRetentionPeriod, forKey: ClientRuntime.Key("PerformanceInsightsRetentionPeriod"))
        }
        if let port = port {
            try container.encode(port, forKey: ClientRuntime.Key("Port"))
        }
        if let preferredBackupWindow = preferredBackupWindow {
            try container.encode(preferredBackupWindow, forKey: ClientRuntime.Key("PreferredBackupWindow"))
        }
        if let preferredMaintenanceWindow = preferredMaintenanceWindow {
            try container.encode(preferredMaintenanceWindow, forKey: ClientRuntime.Key("PreferredMaintenanceWindow"))
        }
        if let publiclyAccessible = publiclyAccessible {
            try container.encode(publiclyAccessible, forKey: ClientRuntime.Key("PubliclyAccessible"))
        }
        if let rdsCustomClusterConfiguration = rdsCustomClusterConfiguration {
            try container.encode(rdsCustomClusterConfiguration, forKey: ClientRuntime.Key("RdsCustomClusterConfiguration"))
        }
        if let readReplicaIdentifiers = readReplicaIdentifiers {
            if !readReplicaIdentifiers.isEmpty {
                var readReplicaIdentifiersContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("ReadReplicaIdentifiers"))
                for (index0, string0) in readReplicaIdentifiers.enumerated() {
                    try readReplicaIdentifiersContainer.encode(string0, forKey: ClientRuntime.Key("ReadReplicaIdentifier.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var readReplicaIdentifiersContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("ReadReplicaIdentifiers"))
                try readReplicaIdentifiersContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let readerEndpoint = readerEndpoint {
            try container.encode(readerEndpoint, forKey: ClientRuntime.Key("ReaderEndpoint"))
        }
        if let replicationSourceIdentifier = replicationSourceIdentifier {
            try container.encode(replicationSourceIdentifier, forKey: ClientRuntime.Key("ReplicationSourceIdentifier"))
        }
        if let scalingConfigurationInfo = scalingConfigurationInfo {
            try container.encode(scalingConfigurationInfo, forKey: ClientRuntime.Key("ScalingConfigurationInfo"))
        }
        if let serverlessV2ScalingConfiguration = serverlessV2ScalingConfiguration {
            try container.encode(serverlessV2ScalingConfiguration, forKey: ClientRuntime.Key("ServerlessV2ScalingConfiguration"))
        }
        if let status = status {
            try container.encode(status, forKey: ClientRuntime.Key("Status"))
        }
        if let statusInfos = statusInfos {
            if !statusInfos.isEmpty {
                var statusInfosContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("StatusInfos"))
                for (index0, dbclusterstatusinfo0) in statusInfos.enumerated() {
                    try statusInfosContainer.encode(dbclusterstatusinfo0, forKey: ClientRuntime.Key("DBClusterStatusInfo.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var statusInfosContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("StatusInfos"))
                try statusInfosContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let storageEncrypted = storageEncrypted {
            try container.encode(storageEncrypted, forKey: ClientRuntime.Key("StorageEncrypted"))
        }
        if let storageType = storageType {
            try container.encode(storageType, forKey: ClientRuntime.Key("StorageType"))
        }
        if let tagList = tagList {
            if !tagList.isEmpty {
                var tagListContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("TagList"))
                for (index0, tag0) in tagList.enumerated() {
                    try tagListContainer.encode(tag0, forKey: ClientRuntime.Key("Tag.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var tagListContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("TagList"))
                try tagListContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let vpcSecurityGroups = vpcSecurityGroups {
            if !vpcSecurityGroups.isEmpty {
                var vpcSecurityGroupsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("VpcSecurityGroups"))
                for (index0, vpcsecuritygroupmembership0) in vpcSecurityGroups.enumerated() {
                    try vpcSecurityGroupsContainer.encode(vpcsecuritygroupmembership0, forKey: ClientRuntime.Key("VpcSecurityGroupMembership.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var vpcSecurityGroupsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("VpcSecurityGroups"))
                try vpcSecurityGroupsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
    }

    static var readingClosure: SmithyReadWrite.ReadingClosure<RDSClientTypes.DBCluster, SmithyXML.Reader> {
        return { reader in
            guard reader.content != nil else { return nil }
            var value = RDSClientTypes.DBCluster()
            value.allocatedStorage = try reader["AllocatedStorage"].readIfPresent()
            value.availabilityZones = try reader["AvailabilityZones"].readListIfPresent(memberReadingClosure: Swift.String.readingClosure, memberNodeInfo: "AvailabilityZone", isFlattened: false)
            value.backupRetentionPeriod = try reader["BackupRetentionPeriod"].readIfPresent()
            value.characterSetName = try reader["CharacterSetName"].readIfPresent()
            value.databaseName = try reader["DatabaseName"].readIfPresent()
            value.dbClusterIdentifier = try reader["DBClusterIdentifier"].readIfPresent()
            value.dbClusterParameterGroup = try reader["DBClusterParameterGroup"].readIfPresent()
            value.dbSubnetGroup = try reader["DBSubnetGroup"].readIfPresent()
            value.status = try reader["Status"].readIfPresent()
            value.automaticRestartTime = try reader["AutomaticRestartTime"].readTimestampIfPresent(format: .dateTime)
            value.percentProgress = try reader["PercentProgress"].readIfPresent()
            value.earliestRestorableTime = try reader["EarliestRestorableTime"].readTimestampIfPresent(format: .dateTime)
            value.endpoint = try reader["Endpoint"].readIfPresent()
            value.readerEndpoint = try reader["ReaderEndpoint"].readIfPresent()
            value.customEndpoints = try reader["CustomEndpoints"].readListIfPresent(memberReadingClosure: Swift.String.readingClosure, memberNodeInfo: "member", isFlattened: false)
            value.multiAZ = try reader["MultiAZ"].readIfPresent()
            value.engine = try reader["Engine"].readIfPresent()
            value.engineVersion = try reader["EngineVersion"].readIfPresent()
            value.latestRestorableTime = try reader["LatestRestorableTime"].readTimestampIfPresent(format: .dateTime)
            value.port = try reader["Port"].readIfPresent()
            value.masterUsername = try reader["MasterUsername"].readIfPresent()
            value.dbClusterOptionGroupMemberships = try reader["DBClusterOptionGroupMemberships"].readListIfPresent(memberReadingClosure: RDSClientTypes.DBClusterOptionGroupStatus.readingClosure, memberNodeInfo: "DBClusterOptionGroup", isFlattened: false)
            value.preferredBackupWindow = try reader["PreferredBackupWindow"].readIfPresent()
            value.preferredMaintenanceWindow = try reader["PreferredMaintenanceWindow"].readIfPresent()
            value.replicationSourceIdentifier = try reader["ReplicationSourceIdentifier"].readIfPresent()
            value.readReplicaIdentifiers = try reader["ReadReplicaIdentifiers"].readListIfPresent(memberReadingClosure: Swift.String.readingClosure, memberNodeInfo: "ReadReplicaIdentifier", isFlattened: false)
            value.statusInfos = try reader["StatusInfos"].readListIfPresent(memberReadingClosure: RDSClientTypes.DBClusterStatusInfo.readingClosure, memberNodeInfo: "DBClusterStatusInfo", isFlattened: false)
            value.dbClusterMembers = try reader["DBClusterMembers"].readListIfPresent(memberReadingClosure: RDSClientTypes.DBClusterMember.readingClosure, memberNodeInfo: "DBClusterMember", isFlattened: false)
            value.vpcSecurityGroups = try reader["VpcSecurityGroups"].readListIfPresent(memberReadingClosure: RDSClientTypes.VpcSecurityGroupMembership.readingClosure, memberNodeInfo: "VpcSecurityGroupMembership", isFlattened: false)
            value.hostedZoneId = try reader["HostedZoneId"].readIfPresent()
            value.storageEncrypted = try reader["StorageEncrypted"].readIfPresent()
            value.kmsKeyId = try reader["KmsKeyId"].readIfPresent()
            value.dbClusterResourceId = try reader["DbClusterResourceId"].readIfPresent()
            value.dbClusterArn = try reader["DBClusterArn"].readIfPresent()
            value.associatedRoles = try reader["AssociatedRoles"].readListIfPresent(memberReadingClosure: RDSClientTypes.DBClusterRole.readingClosure, memberNodeInfo: "DBClusterRole", isFlattened: false)
            value.iamDatabaseAuthenticationEnabled = try reader["IAMDatabaseAuthenticationEnabled"].readIfPresent()
            value.cloneGroupId = try reader["CloneGroupId"].readIfPresent()
            value.clusterCreateTime = try reader["ClusterCreateTime"].readTimestampIfPresent(format: .dateTime)
            value.earliestBacktrackTime = try reader["EarliestBacktrackTime"].readTimestampIfPresent(format: .dateTime)
            value.backtrackWindow = try reader["BacktrackWindow"].readIfPresent()
            value.backtrackConsumedChangeRecords = try reader["BacktrackConsumedChangeRecords"].readIfPresent()
            value.enabledCloudwatchLogsExports = try reader["EnabledCloudwatchLogsExports"].readListIfPresent(memberReadingClosure: Swift.String.readingClosure, memberNodeInfo: "member", isFlattened: false)
            value.capacity = try reader["Capacity"].readIfPresent()
            value.engineMode = try reader["EngineMode"].readIfPresent()
            value.scalingConfigurationInfo = try reader["ScalingConfigurationInfo"].readIfPresent(readingClosure: RDSClientTypes.ScalingConfigurationInfo.readingClosure)
            value.rdsCustomClusterConfiguration = try reader["RdsCustomClusterConfiguration"].readIfPresent(readingClosure: RDSClientTypes.RdsCustomClusterConfiguration.readingClosure)
            value.deletionProtection = try reader["DeletionProtection"].readIfPresent()
            value.httpEndpointEnabled = try reader["HttpEndpointEnabled"].readIfPresent()
            value.activityStreamMode = try reader["ActivityStreamMode"].readIfPresent()
            value.activityStreamStatus = try reader["ActivityStreamStatus"].readIfPresent()
            value.activityStreamKmsKeyId = try reader["ActivityStreamKmsKeyId"].readIfPresent()
            value.activityStreamKinesisStreamName = try reader["ActivityStreamKinesisStreamName"].readIfPresent()
            value.copyTagsToSnapshot = try reader["CopyTagsToSnapshot"].readIfPresent()
            value.crossAccountClone = try reader["CrossAccountClone"].readIfPresent()
            value.domainMemberships = try reader["DomainMemberships"].readListIfPresent(memberReadingClosure: RDSClientTypes.DomainMembership.readingClosure, memberNodeInfo: "DomainMembership", isFlattened: false)
            value.tagList = try reader["TagList"].readListIfPresent(memberReadingClosure: RDSClientTypes.Tag.readingClosure, memberNodeInfo: "Tag", isFlattened: false)
            value.globalWriteForwardingStatus = try reader["GlobalWriteForwardingStatus"].readIfPresent()
            value.globalWriteForwardingRequested = try reader["GlobalWriteForwardingRequested"].readIfPresent()
            value.pendingModifiedValues = try reader["PendingModifiedValues"].readIfPresent(readingClosure: RDSClientTypes.ClusterPendingModifiedValues.readingClosure)
            value.dbClusterInstanceClass = try reader["DBClusterInstanceClass"].readIfPresent()
            value.storageType = try reader["StorageType"].readIfPresent()
            value.iops = try reader["Iops"].readIfPresent()
            value.publiclyAccessible = try reader["PubliclyAccessible"].readIfPresent()
            value.autoMinorVersionUpgrade = try reader["AutoMinorVersionUpgrade"].readIfPresent()
            value.monitoringInterval = try reader["MonitoringInterval"].readIfPresent()
            value.monitoringRoleArn = try reader["MonitoringRoleArn"].readIfPresent()
            value.performanceInsightsEnabled = try reader["PerformanceInsightsEnabled"].readIfPresent()
            value.performanceInsightsKMSKeyId = try reader["PerformanceInsightsKMSKeyId"].readIfPresent()
            value.performanceInsightsRetentionPeriod = try reader["PerformanceInsightsRetentionPeriod"].readIfPresent()
            value.serverlessV2ScalingConfiguration = try reader["ServerlessV2ScalingConfiguration"].readIfPresent(readingClosure: RDSClientTypes.ServerlessV2ScalingConfigurationInfo.readingClosure)
            value.networkType = try reader["NetworkType"].readIfPresent()
            value.dbSystemId = try reader["DBSystemId"].readIfPresent()
            value.masterUserSecret = try reader["MasterUserSecret"].readIfPresent(readingClosure: RDSClientTypes.MasterUserSecret.readingClosure)
            value.ioOptimizedNextAllowedModificationTime = try reader["IOOptimizedNextAllowedModificationTime"].readTimestampIfPresent(format: .dateTime)
            value.localWriteForwardingStatus = try reader["LocalWriteForwardingStatus"].readIfPresent()
            value.awsBackupRecoveryPointArn = try reader["AwsBackupRecoveryPointArn"].readIfPresent()
            value.limitlessDatabase = try reader["LimitlessDatabase"].readIfPresent(readingClosure: RDSClientTypes.LimitlessDatabase.readingClosure)
            return value
        }
    }
}

extension RDSClientTypes {
    /// Contains the details of an Amazon Aurora DB cluster or Multi-AZ DB cluster. For an Amazon Aurora DB cluster, this data type is used as a response element in the operations CreateDBCluster, DeleteDBCluster, DescribeDBClusters, FailoverDBCluster, ModifyDBCluster, PromoteReadReplicaDBCluster, RestoreDBClusterFromS3, RestoreDBClusterFromSnapshot, RestoreDBClusterToPointInTime, StartDBCluster, and StopDBCluster. For a Multi-AZ DB cluster, this data type is used as a response element in the operations CreateDBCluster, DeleteDBCluster, DescribeDBClusters, FailoverDBCluster, ModifyDBCluster, RebootDBCluster, RestoreDBClusterFromSnapshot, and RestoreDBClusterToPointInTime. For more information on Amazon Aurora DB clusters, see [ What is Amazon Aurora?](https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html) in the Amazon Aurora User Guide. For more information on Multi-AZ DB clusters, see [ Multi-AZ deployments with two readable standby DB instances](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/multi-az-db-clusters-concepts.html) in the Amazon RDS User Guide.
    public struct DBCluster: Swift.Equatable {
        /// The name of the Amazon Kinesis data stream used for the database activity stream.
        public var activityStreamKinesisStreamName: Swift.String?
        /// The Amazon Web Services KMS key identifier used for encrypting messages in the database activity stream. The Amazon Web Services KMS key identifier is the key ARN, key ID, alias ARN, or alias name for the KMS key.
        public var activityStreamKmsKeyId: Swift.String?
        /// The mode of the database activity stream. Database events such as a change or access generate an activity stream event. The database session can handle these events either synchronously or asynchronously.
        public var activityStreamMode: RDSClientTypes.ActivityStreamMode?
        /// The status of the database activity stream.
        public var activityStreamStatus: RDSClientTypes.ActivityStreamStatus?
        /// For all database engines except Amazon Aurora, AllocatedStorage specifies the allocated storage size in gibibytes (GiB). For Aurora, AllocatedStorage always returns 1, because Aurora DB cluster storage size isn't fixed, but instead automatically adjusts as needed.
        public var allocatedStorage: Swift.Int?
        /// A list of the Amazon Web Services Identity and Access Management (IAM) roles that are associated with the DB cluster. IAM roles that are associated with a DB cluster grant permission for the DB cluster to access other Amazon Web Services on your behalf.
        public var associatedRoles: [RDSClientTypes.DBClusterRole]?
        /// Indicates whether minor version patches are applied automatically. This setting is only for non-Aurora Multi-AZ DB clusters.
        public var autoMinorVersionUpgrade: Swift.Bool?
        /// The time when a stopped DB cluster is restarted automatically.
        public var automaticRestartTime: ClientRuntime.Date?
        /// The list of Availability Zones (AZs) where instances in the DB cluster can be created.
        public var availabilityZones: [Swift.String]?
        /// The Amazon Resource Name (ARN) of the recovery point in Amazon Web Services Backup.
        public var awsBackupRecoveryPointArn: Swift.String?
        /// The number of change records stored for Backtrack.
        public var backtrackConsumedChangeRecords: Swift.Int?
        /// The target backtrack window, in seconds. If this value is set to 0, backtracking is disabled for the DB cluster. Otherwise, backtracking is enabled.
        public var backtrackWindow: Swift.Int?
        /// The number of days for which automatic DB snapshots are retained.
        public var backupRetentionPeriod: Swift.Int?
        /// The current capacity of an Aurora Serverless v1 DB cluster. The capacity is 0 (zero) when the cluster is paused. For more information about Aurora Serverless v1, see [Using Amazon Aurora Serverless v1](https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html) in the Amazon Aurora User Guide.
        public var capacity: Swift.Int?
        /// If present, specifies the name of the character set that this cluster is associated with.
        public var characterSetName: Swift.String?
        /// The ID of the clone group with which the DB cluster is associated.
        public var cloneGroupId: Swift.String?
        /// The time when the DB cluster was created, in Universal Coordinated Time (UTC).
        public var clusterCreateTime: ClientRuntime.Date?
        /// Indicates whether tags are copied from the DB cluster to snapshots of the DB cluster.
        public var copyTagsToSnapshot: Swift.Bool?
        /// Indicates whether the DB cluster is a clone of a DB cluster owned by a different Amazon Web Services account.
        public var crossAccountClone: Swift.Bool?
        /// The custom endpoints associated with the DB cluster.
        public var customEndpoints: [Swift.String]?
        /// The name of the initial database that was specified for the DB cluster when it was created, if one was provided. This same name is returned for the life of the DB cluster.
        public var databaseName: Swift.String?
        /// The Amazon Resource Name (ARN) for the DB cluster.
        public var dbClusterArn: Swift.String?
        /// The user-supplied identifier for the DB cluster. This identifier is the unique key that identifies a DB cluster.
        public var dbClusterIdentifier: Swift.String?
        /// The name of the compute and memory capacity class of the DB instance. This setting is only for non-Aurora Multi-AZ DB clusters.
        public var dbClusterInstanceClass: Swift.String?
        /// The list of DB instances that make up the DB cluster.
        public var dbClusterMembers: [RDSClientTypes.DBClusterMember]?
        /// The list of option group memberships for this DB cluster.
        public var dbClusterOptionGroupMemberships: [RDSClientTypes.DBClusterOptionGroupStatus]?
        /// The name of the DB cluster parameter group for the DB cluster.
        public var dbClusterParameterGroup: Swift.String?
        /// The Amazon Web Services Region-unique, immutable identifier for the DB cluster. This identifier is found in Amazon Web Services CloudTrail log entries whenever the KMS key for the DB cluster is accessed.
        public var dbClusterResourceId: Swift.String?
        /// Information about the subnet group associated with the DB cluster, including the name, description, and subnets in the subnet group.
        public var dbSubnetGroup: Swift.String?
        /// Reserved for future use.
        public var dbSystemId: Swift.String?
        /// Indicates whether the DB cluster has deletion protection enabled. The database can't be deleted when deletion protection is enabled.
        public var deletionProtection: Swift.Bool?
        /// The Active Directory Domain membership records associated with the DB cluster.
        public var domainMemberships: [RDSClientTypes.DomainMembership]?
        /// The earliest time to which a DB cluster can be backtracked.
        public var earliestBacktrackTime: ClientRuntime.Date?
        /// The earliest time to which a database can be restored with point-in-time restore.
        public var earliestRestorableTime: ClientRuntime.Date?
        /// A list of log types that this DB cluster is configured to export to CloudWatch Logs. Log types vary by DB engine. For information about the log types for each DB engine, see [Amazon RDS Database Log Files](https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_LogAccess.html) in the Amazon Aurora User Guide.
        public var enabledCloudwatchLogsExports: [Swift.String]?
        /// The connection endpoint for the primary instance of the DB cluster.
        public var endpoint: Swift.String?
        /// The database engine used for this DB cluster.
        public var engine: Swift.String?
        /// The DB engine mode of the DB cluster, either provisioned or serverless. For more information, see [ CreateDBCluster](https://docs.aws.amazon.com/AmazonRDS/latest/APIReference/API_CreateDBCluster.html).
        public var engineMode: Swift.String?
        /// The version of the database engine.
        public var engineVersion: Swift.String?
        /// Indicates whether write forwarding is enabled for a secondary cluster in an Aurora global database. Because write forwarding takes time to enable, check the value of GlobalWriteForwardingStatus to confirm that the request has completed before using the write forwarding feature for this cluster.
        public var globalWriteForwardingRequested: Swift.Bool?
        /// The status of write forwarding for a secondary cluster in an Aurora global database.
        public var globalWriteForwardingStatus: RDSClientTypes.WriteForwardingStatus?
        /// The ID that Amazon Route 53 assigns when you create a hosted zone.
        public var hostedZoneId: Swift.String?
        /// Indicates whether the HTTP endpoint is enabled for an Aurora DB cluster. When enabled, the HTTP endpoint provides a connectionless web service API (RDS Data API) for running SQL queries on the DB cluster. You can also query your database from inside the RDS console with the RDS query editor. For more information, see [Using RDS Data API](https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/data-api.html) in the Amazon Aurora User Guide.
        public var httpEndpointEnabled: Swift.Bool?
        /// Indicates whether the mapping of Amazon Web Services Identity and Access Management (IAM) accounts to database accounts is enabled.
        public var iamDatabaseAuthenticationEnabled: Swift.Bool?
        /// The next time you can modify the DB cluster to use the aurora-iopt1 storage type. This setting is only for Aurora DB clusters.
        public var ioOptimizedNextAllowedModificationTime: ClientRuntime.Date?
        /// The Provisioned IOPS (I/O operations per second) value. This setting is only for non-Aurora Multi-AZ DB clusters.
        public var iops: Swift.Int?
        /// If StorageEncrypted is enabled, the Amazon Web Services KMS key identifier for the encrypted DB cluster. The Amazon Web Services KMS key identifier is the key ARN, key ID, alias ARN, or alias name for the KMS key.
        public var kmsKeyId: Swift.String?
        /// The latest time to which a database can be restored with point-in-time restore.
        public var latestRestorableTime: ClientRuntime.Date?
        /// The details for Aurora Limitless Database.
        public var limitlessDatabase: RDSClientTypes.LimitlessDatabase?
        /// Indicates whether an Aurora DB cluster has in-cluster write forwarding enabled, not enabled, requested, or is in the process of enabling it.
        public var localWriteForwardingStatus: RDSClientTypes.LocalWriteForwardingStatus?
        /// The secret managed by RDS in Amazon Web Services Secrets Manager for the master user password. For more information, see [Password management with Amazon Web Services Secrets Manager](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/rds-secrets-manager.html) in the Amazon RDS User Guide and [Password management with Amazon Web Services Secrets Manager](https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/rds-secrets-manager.html) in the Amazon Aurora User Guide.
        public var masterUserSecret: RDSClientTypes.MasterUserSecret?
        /// The master username for the DB cluster.
        public var masterUsername: Swift.String?
        /// The interval, in seconds, between points when Enhanced Monitoring metrics are collected for the DB cluster. This setting is only for non-Aurora Multi-AZ DB clusters.
        public var monitoringInterval: Swift.Int?
        /// The ARN for the IAM role that permits RDS to send Enhanced Monitoring metrics to Amazon CloudWatch Logs. This setting is only for non-Aurora Multi-AZ DB clusters.
        public var monitoringRoleArn: Swift.String?
        /// Indicates whether the DB cluster has instances in multiple Availability Zones.
        public var multiAZ: Swift.Bool?
        /// The network type of the DB instance. The network type is determined by the DBSubnetGroup specified for the DB cluster. A DBSubnetGroup can support only the IPv4 protocol or the IPv4 and the IPv6 protocols (DUAL). For more information, see [ Working with a DB instance in a VPC](https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_VPC.WorkingWithRDSInstanceinaVPC.html) in the Amazon Aurora User Guide. This setting is only for Aurora DB clusters. Valid Values: IPV4 | DUAL
        public var networkType: Swift.String?
        /// Information about pending changes to the DB cluster. This information is returned only when there are pending changes. Specific changes are identified by subelements.
        public var pendingModifiedValues: RDSClientTypes.ClusterPendingModifiedValues?
        /// The progress of the operation as a percentage.
        public var percentProgress: Swift.String?
        /// Indicates whether Performance Insights is enabled for the DB cluster. This setting is only for non-Aurora Multi-AZ DB clusters.
        public var performanceInsightsEnabled: Swift.Bool?
        /// The Amazon Web Services KMS key identifier for encryption of Performance Insights data. The Amazon Web Services KMS key identifier is the key ARN, key ID, alias ARN, or alias name for the KMS key. This setting is only for non-Aurora Multi-AZ DB clusters.
        public var performanceInsightsKMSKeyId: Swift.String?
        /// The number of days to retain Performance Insights data. This setting is only for non-Aurora Multi-AZ DB clusters. Valid Values:
        ///
        /// * 7
        ///
        /// * month * 31, where month is a number of months from 1-23. Examples: 93 (3 months * 31), 341 (11 months * 31), 589 (19 months * 31)
        ///
        /// * 731
        ///
        ///
        /// Default: 7 days
        public var performanceInsightsRetentionPeriod: Swift.Int?
        /// The port that the database engine is listening on.
        public var port: Swift.Int?
        /// The daily time range during which automated backups are created if automated backups are enabled, as determined by the BackupRetentionPeriod.
        public var preferredBackupWindow: Swift.String?
        /// The weekly time range during which system maintenance can occur, in Universal Coordinated Time (UTC).
        public var preferredMaintenanceWindow: Swift.String?
        /// Indicates whether the DB cluster is publicly accessible. When the DB cluster is publicly accessible, its Domain Name System (DNS) endpoint resolves to the private IP address from within the DB cluster's virtual private cloud (VPC). It resolves to the public IP address from outside of the DB cluster's VPC. Access to the DB cluster is ultimately controlled by the security group it uses. That public access isn't permitted if the security group assigned to the DB cluster doesn't permit it. When the DB cluster isn't publicly accessible, it is an internal DB cluster with a DNS name that resolves to a private IP address. For more information, see [CreateDBCluster]. This setting is only for non-Aurora Multi-AZ DB clusters.
        public var publiclyAccessible: Swift.Bool?
        /// Reserved for future use.
        public var rdsCustomClusterConfiguration: RDSClientTypes.RdsCustomClusterConfiguration?
        /// Contains one or more identifiers of the read replicas associated with this DB cluster.
        public var readReplicaIdentifiers: [Swift.String]?
        /// The reader endpoint for the DB cluster. The reader endpoint for a DB cluster load-balances connections across the Aurora Replicas that are available in a DB cluster. As clients request new connections to the reader endpoint, Aurora distributes the connection requests among the Aurora Replicas in the DB cluster. This functionality can help balance your read workload across multiple Aurora Replicas in your DB cluster. If a failover occurs, and the Aurora Replica that you are connected to is promoted to be the primary instance, your connection is dropped. To continue sending your read workload to other Aurora Replicas in the cluster, you can then reconnect to the reader endpoint.
        public var readerEndpoint: Swift.String?
        /// The identifier of the source DB cluster if this DB cluster is a read replica.
        public var replicationSourceIdentifier: Swift.String?
        /// The scaling configuration for an Aurora DB cluster in serverless DB engine mode. For more information, see [Using Amazon Aurora Serverless v1](https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html) in the Amazon Aurora User Guide.
        public var scalingConfigurationInfo: RDSClientTypes.ScalingConfigurationInfo?
        /// The scaling configuration for an Aurora Serverless v2 DB cluster. For more information, see [Using Amazon Aurora Serverless v2](https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless-v2.html) in the Amazon Aurora User Guide.
        public var serverlessV2ScalingConfiguration: RDSClientTypes.ServerlessV2ScalingConfigurationInfo?
        /// The current state of this DB cluster.
        public var status: Swift.String?
        /// Reserved for future use.
        public var statusInfos: [RDSClientTypes.DBClusterStatusInfo]?
        /// Indicates whether the DB cluster is encrypted.
        public var storageEncrypted: Swift.Bool?
        /// The storage type associated with the DB cluster.
        public var storageType: Swift.String?
        /// A list of tags. For more information, see [Tagging Amazon RDS Resources](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html) in the Amazon RDS User Guide.
        public var tagList: [RDSClientTypes.Tag]?
        /// The list of VPC security groups that the DB cluster belongs to.
        public var vpcSecurityGroups: [RDSClientTypes.VpcSecurityGroupMembership]?

        public init(
            activityStreamKinesisStreamName: Swift.String? = nil,
            activityStreamKmsKeyId: Swift.String? = nil,
            activityStreamMode: RDSClientTypes.ActivityStreamMode? = nil,
            activityStreamStatus: RDSClientTypes.ActivityStreamStatus? = nil,
            allocatedStorage: Swift.Int? = nil,
            associatedRoles: [RDSClientTypes.DBClusterRole]? = nil,
            autoMinorVersionUpgrade: Swift.Bool? = nil,
            automaticRestartTime: ClientRuntime.Date? = nil,
            availabilityZones: [Swift.String]? = nil,
            awsBackupRecoveryPointArn: Swift.String? = nil,
            backtrackConsumedChangeRecords: Swift.Int? = nil,
            backtrackWindow: Swift.Int? = nil,
            backupRetentionPeriod: Swift.Int? = nil,
            capacity: Swift.Int? = nil,
            characterSetName: Swift.String? = nil,
            cloneGroupId: Swift.String? = nil,
            clusterCreateTime: ClientRuntime.Date? = nil,
            copyTagsToSnapshot: Swift.Bool? = nil,
            crossAccountClone: Swift.Bool? = nil,
            customEndpoints: [Swift.String]? = nil,
            databaseName: Swift.String? = nil,
            dbClusterArn: Swift.String? = nil,
            dbClusterIdentifier: Swift.String? = nil,
            dbClusterInstanceClass: Swift.String? = nil,
            dbClusterMembers: [RDSClientTypes.DBClusterMember]? = nil,
            dbClusterOptionGroupMemberships: [RDSClientTypes.DBClusterOptionGroupStatus]? = nil,
            dbClusterParameterGroup: Swift.String? = nil,
            dbClusterResourceId: Swift.String? = nil,
            dbSubnetGroup: Swift.String? = nil,
            dbSystemId: Swift.String? = nil,
            deletionProtection: Swift.Bool? = nil,
            domainMemberships: [RDSClientTypes.DomainMembership]? = nil,
            earliestBacktrackTime: ClientRuntime.Date? = nil,
            earliestRestorableTime: ClientRuntime.Date? = nil,
            enabledCloudwatchLogsExports: [Swift.String]? = nil,
            endpoint: Swift.String? = nil,
            engine: Swift.String? = nil,
            engineMode: Swift.String? = nil,
            engineVersion: Swift.String? = nil,
            globalWriteForwardingRequested: Swift.Bool? = nil,
            globalWriteForwardingStatus: RDSClientTypes.WriteForwardingStatus? = nil,
            hostedZoneId: Swift.String? = nil,
            httpEndpointEnabled: Swift.Bool? = nil,
            iamDatabaseAuthenticationEnabled: Swift.Bool? = nil,
            ioOptimizedNextAllowedModificationTime: ClientRuntime.Date? = nil,
            iops: Swift.Int? = nil,
            kmsKeyId: Swift.String? = nil,
            latestRestorableTime: ClientRuntime.Date? = nil,
            limitlessDatabase: RDSClientTypes.LimitlessDatabase? = nil,
            localWriteForwardingStatus: RDSClientTypes.LocalWriteForwardingStatus? = nil,
            masterUserSecret: RDSClientTypes.MasterUserSecret? = nil,
            masterUsername: Swift.String? = nil,
            monitoringInterval: Swift.Int? = nil,
            monitoringRoleArn: Swift.String? = nil,
            multiAZ: Swift.Bool? = nil,
            networkType: Swift.String? = nil,
            pendingModifiedValues: RDSClientTypes.ClusterPendingModifiedValues? = nil,
            percentProgress: Swift.String? = nil,
            performanceInsightsEnabled: Swift.Bool? = nil,
            performanceInsightsKMSKeyId: Swift.String? = nil,
            performanceInsightsRetentionPeriod: Swift.Int? = nil,
            port: Swift.Int? = nil,
            preferredBackupWindow: Swift.String? = nil,
            preferredMaintenanceWindow: Swift.String? = nil,
            publiclyAccessible: Swift.Bool? = nil,
            rdsCustomClusterConfiguration: RDSClientTypes.RdsCustomClusterConfiguration? = nil,
            readReplicaIdentifiers: [Swift.String]? = nil,
            readerEndpoint: Swift.String? = nil,
            replicationSourceIdentifier: Swift.String? = nil,
            scalingConfigurationInfo: RDSClientTypes.ScalingConfigurationInfo? = nil,
            serverlessV2ScalingConfiguration: RDSClientTypes.ServerlessV2ScalingConfigurationInfo? = nil,
            status: Swift.String? = nil,
            statusInfos: [RDSClientTypes.DBClusterStatusInfo]? = nil,
            storageEncrypted: Swift.Bool? = nil,
            storageType: Swift.String? = nil,
            tagList: [RDSClientTypes.Tag]? = nil,
            vpcSecurityGroups: [RDSClientTypes.VpcSecurityGroupMembership]? = nil
        )
        {
            self.activityStreamKinesisStreamName = activityStreamKinesisStreamName
            self.activityStreamKmsKeyId = activityStreamKmsKeyId
            self.activityStreamMode = activityStreamMode
            self.activityStreamStatus = activityStreamStatus
            self.allocatedStorage = allocatedStorage
            self.associatedRoles = associatedRoles
            self.autoMinorVersionUpgrade = autoMinorVersionUpgrade
            self.automaticRestartTime = automaticRestartTime
            self.availabilityZones = availabilityZones
            self.awsBackupRecoveryPointArn = awsBackupRecoveryPointArn
            self.backtrackConsumedChangeRecords = backtrackConsumedChangeRecords
            self.backtrackWindow = backtrackWindow
            self.backupRetentionPeriod = backupRetentionPeriod
            self.capacity = capacity
            self.characterSetName = characterSetName
            self.cloneGroupId = cloneGroupId
            self.clusterCreateTime = clusterCreateTime
            self.copyTagsToSnapshot = copyTagsToSnapshot
            self.crossAccountClone = crossAccountClone
            self.customEndpoints = customEndpoints
            self.databaseName = databaseName
            self.dbClusterArn = dbClusterArn
            self.dbClusterIdentifier = dbClusterIdentifier
            self.dbClusterInstanceClass = dbClusterInstanceClass
            self.dbClusterMembers = dbClusterMembers
            self.dbClusterOptionGroupMemberships = dbClusterOptionGroupMemberships
            self.dbClusterParameterGroup = dbClusterParameterGroup
            self.dbClusterResourceId = dbClusterResourceId
            self.dbSubnetGroup = dbSubnetGroup
            self.dbSystemId = dbSystemId
            self.deletionProtection = deletionProtection
            self.domainMemberships = domainMemberships
            self.earliestBacktrackTime = earliestBacktrackTime
            self.earliestRestorableTime = earliestRestorableTime
            self.enabledCloudwatchLogsExports = enabledCloudwatchLogsExports
            self.endpoint = endpoint
            self.engine = engine
            self.engineMode = engineMode
            self.engineVersion = engineVersion
            self.globalWriteForwardingRequested = globalWriteForwardingRequested
            self.globalWriteForwardingStatus = globalWriteForwardingStatus
            self.hostedZoneId = hostedZoneId
            self.httpEndpointEnabled = httpEndpointEnabled
            self.iamDatabaseAuthenticationEnabled = iamDatabaseAuthenticationEnabled
            self.ioOptimizedNextAllowedModificationTime = ioOptimizedNextAllowedModificationTime
            self.iops = iops
            self.kmsKeyId = kmsKeyId
            self.latestRestorableTime = latestRestorableTime
            self.limitlessDatabase = limitlessDatabase
            self.localWriteForwardingStatus = localWriteForwardingStatus
            self.masterUserSecret = masterUserSecret
            self.masterUsername = masterUsername
            self.monitoringInterval = monitoringInterval
            self.monitoringRoleArn = monitoringRoleArn
            self.multiAZ = multiAZ
            self.networkType = networkType
            self.pendingModifiedValues = pendingModifiedValues
            self.percentProgress = percentProgress
            self.performanceInsightsEnabled = performanceInsightsEnabled
            self.performanceInsightsKMSKeyId = performanceInsightsKMSKeyId
            self.performanceInsightsRetentionPeriod = performanceInsightsRetentionPeriod
            self.port = port
            self.preferredBackupWindow = preferredBackupWindow
            self.preferredMaintenanceWindow = preferredMaintenanceWindow
            self.publiclyAccessible = publiclyAccessible
            self.rdsCustomClusterConfiguration = rdsCustomClusterConfiguration
            self.readReplicaIdentifiers = readReplicaIdentifiers
            self.readerEndpoint = readerEndpoint
            self.replicationSourceIdentifier = replicationSourceIdentifier
            self.scalingConfigurationInfo = scalingConfigurationInfo
            self.serverlessV2ScalingConfiguration = serverlessV2ScalingConfiguration
            self.status = status
            self.statusInfos = statusInfos
            self.storageEncrypted = storageEncrypted
            self.storageType = storageType
            self.tagList = tagList
            self.vpcSecurityGroups = vpcSecurityGroups
        }
    }

}

extension DBClusterAlreadyExistsFault {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = DBClusterAlreadyExistsFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// The user already has a DB cluster with the given identifier.
public struct DBClusterAlreadyExistsFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "DBClusterAlreadyExistsFault" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension RDSClientTypes.DBClusterAutomatedBackup: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case allocatedStorage = "AllocatedStorage"
        case availabilityZones = "AvailabilityZones"
        case awsBackupRecoveryPointArn = "AwsBackupRecoveryPointArn"
        case backupRetentionPeriod = "BackupRetentionPeriod"
        case clusterCreateTime = "ClusterCreateTime"
        case dbClusterArn = "DBClusterArn"
        case dbClusterAutomatedBackupsArn = "DBClusterAutomatedBackupsArn"
        case dbClusterIdentifier = "DBClusterIdentifier"
        case dbClusterResourceId = "DbClusterResourceId"
        case engine = "Engine"
        case engineMode = "EngineMode"
        case engineVersion = "EngineVersion"
        case iamDatabaseAuthenticationEnabled = "IAMDatabaseAuthenticationEnabled"
        case iops = "Iops"
        case kmsKeyId = "KmsKeyId"
        case licenseModel = "LicenseModel"
        case masterUsername = "MasterUsername"
        case port = "Port"
        case region = "Region"
        case restoreWindow = "RestoreWindow"
        case status = "Status"
        case storageEncrypted = "StorageEncrypted"
        case storageType = "StorageType"
        case vpcId = "VpcId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let allocatedStorage = allocatedStorage {
            try container.encode(allocatedStorage, forKey: ClientRuntime.Key("AllocatedStorage"))
        }
        if let availabilityZones = availabilityZones {
            if !availabilityZones.isEmpty {
                var availabilityZonesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("AvailabilityZones"))
                for (index0, string0) in availabilityZones.enumerated() {
                    try availabilityZonesContainer.encode(string0, forKey: ClientRuntime.Key("AvailabilityZone.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var availabilityZonesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("AvailabilityZones"))
                try availabilityZonesContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let awsBackupRecoveryPointArn = awsBackupRecoveryPointArn {
            try container.encode(awsBackupRecoveryPointArn, forKey: ClientRuntime.Key("AwsBackupRecoveryPointArn"))
        }
        if let backupRetentionPeriod = backupRetentionPeriod {
            try container.encode(backupRetentionPeriod, forKey: ClientRuntime.Key("BackupRetentionPeriod"))
        }
        if let clusterCreateTime = clusterCreateTime {
            try container.encodeTimestamp(clusterCreateTime, format: .dateTime, forKey: ClientRuntime.Key("ClusterCreateTime"))
        }
        if let dbClusterArn = dbClusterArn {
            try container.encode(dbClusterArn, forKey: ClientRuntime.Key("DBClusterArn"))
        }
        if let dbClusterAutomatedBackupsArn = dbClusterAutomatedBackupsArn {
            try container.encode(dbClusterAutomatedBackupsArn, forKey: ClientRuntime.Key("DBClusterAutomatedBackupsArn"))
        }
        if let dbClusterIdentifier = dbClusterIdentifier {
            try container.encode(dbClusterIdentifier, forKey: ClientRuntime.Key("DBClusterIdentifier"))
        }
        if let dbClusterResourceId = dbClusterResourceId {
            try container.encode(dbClusterResourceId, forKey: ClientRuntime.Key("DbClusterResourceId"))
        }
        if let engine = engine {
            try container.encode(engine, forKey: ClientRuntime.Key("Engine"))
        }
        if let engineMode = engineMode {
            try container.encode(engineMode, forKey: ClientRuntime.Key("EngineMode"))
        }
        if let engineVersion = engineVersion {
            try container.encode(engineVersion, forKey: ClientRuntime.Key("EngineVersion"))
        }
        if let iamDatabaseAuthenticationEnabled = iamDatabaseAuthenticationEnabled {
            try container.encode(iamDatabaseAuthenticationEnabled, forKey: ClientRuntime.Key("IAMDatabaseAuthenticationEnabled"))
        }
        if let iops = iops {
            try container.encode(iops, forKey: ClientRuntime.Key("Iops"))
        }
        if let kmsKeyId = kmsKeyId {
            try container.encode(kmsKeyId, forKey: ClientRuntime.Key("KmsKeyId"))
        }
        if let licenseModel = licenseModel {
            try container.encode(licenseModel, forKey: ClientRuntime.Key("LicenseModel"))
        }
        if let masterUsername = masterUsername {
            try container.encode(masterUsername, forKey: ClientRuntime.Key("MasterUsername"))
        }
        if let port = port {
            try container.encode(port, forKey: ClientRuntime.Key("Port"))
        }
        if let region = region {
            try container.encode(region, forKey: ClientRuntime.Key("Region"))
        }
        if let restoreWindow = restoreWindow {
            try container.encode(restoreWindow, forKey: ClientRuntime.Key("RestoreWindow"))
        }
        if let status = status {
            try container.encode(status, forKey: ClientRuntime.Key("Status"))
        }
        if let storageEncrypted = storageEncrypted {
            try container.encode(storageEncrypted, forKey: ClientRuntime.Key("StorageEncrypted"))
        }
        if let storageType = storageType {
            try container.encode(storageType, forKey: ClientRuntime.Key("StorageType"))
        }
        if let vpcId = vpcId {
            try container.encode(vpcId, forKey: ClientRuntime.Key("VpcId"))
        }
    }

    static var readingClosure: SmithyReadWrite.ReadingClosure<RDSClientTypes.DBClusterAutomatedBackup, SmithyXML.Reader> {
        return { reader in
            guard reader.content != nil else { return nil }
            var value = RDSClientTypes.DBClusterAutomatedBackup()
            value.engine = try reader["Engine"].readIfPresent()
            value.vpcId = try reader["VpcId"].readIfPresent()
            value.dbClusterAutomatedBackupsArn = try reader["DBClusterAutomatedBackupsArn"].readIfPresent()
            value.dbClusterIdentifier = try reader["DBClusterIdentifier"].readIfPresent()
            value.restoreWindow = try reader["RestoreWindow"].readIfPresent(readingClosure: RDSClientTypes.RestoreWindow.readingClosure)
            value.masterUsername = try reader["MasterUsername"].readIfPresent()
            value.dbClusterResourceId = try reader["DbClusterResourceId"].readIfPresent()
            value.region = try reader["Region"].readIfPresent()
            value.licenseModel = try reader["LicenseModel"].readIfPresent()
            value.status = try reader["Status"].readIfPresent()
            value.iamDatabaseAuthenticationEnabled = try reader["IAMDatabaseAuthenticationEnabled"].readIfPresent()
            value.clusterCreateTime = try reader["ClusterCreateTime"].readTimestampIfPresent(format: .dateTime)
            value.storageEncrypted = try reader["StorageEncrypted"].readIfPresent()
            value.allocatedStorage = try reader["AllocatedStorage"].readIfPresent()
            value.engineVersion = try reader["EngineVersion"].readIfPresent()
            value.dbClusterArn = try reader["DBClusterArn"].readIfPresent()
            value.backupRetentionPeriod = try reader["BackupRetentionPeriod"].readIfPresent()
            value.engineMode = try reader["EngineMode"].readIfPresent()
            value.availabilityZones = try reader["AvailabilityZones"].readListIfPresent(memberReadingClosure: Swift.String.readingClosure, memberNodeInfo: "AvailabilityZone", isFlattened: false)
            value.port = try reader["Port"].readIfPresent()
            value.kmsKeyId = try reader["KmsKeyId"].readIfPresent()
            value.storageType = try reader["StorageType"].readIfPresent()
            value.iops = try reader["Iops"].readIfPresent()
            value.awsBackupRecoveryPointArn = try reader["AwsBackupRecoveryPointArn"].readIfPresent()
            return value
        }
    }
}

extension RDSClientTypes {
    /// An automated backup of a DB cluster. It consists of system backups, transaction logs, and the database cluster properties that existed at the time you deleted the source cluster.
    public struct DBClusterAutomatedBackup: Swift.Equatable {
        /// For all database engines except Amazon Aurora, AllocatedStorage specifies the allocated storage size in gibibytes (GiB). For Aurora, AllocatedStorage always returns 1, because Aurora DB cluster storage size isn't fixed, but instead automatically adjusts as needed.
        public var allocatedStorage: Swift.Int?
        /// The Availability Zones where instances in the DB cluster can be created. For information on Amazon Web Services Regions and Availability Zones, see [Regions and Availability Zones](https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/Concepts.RegionsAndAvailabilityZones.html).
        public var availabilityZones: [Swift.String]?
        /// The Amazon Resource Name (ARN) of the recovery point in Amazon Web Services Backup.
        public var awsBackupRecoveryPointArn: Swift.String?
        /// The retention period for the automated backups.
        public var backupRetentionPeriod: Swift.Int?
        /// The time when the DB cluster was created, in Universal Coordinated Time (UTC).
        public var clusterCreateTime: ClientRuntime.Date?
        /// The Amazon Resource Name (ARN) for the source DB cluster.
        public var dbClusterArn: Swift.String?
        /// The Amazon Resource Name (ARN) for the automated backups.
        public var dbClusterAutomatedBackupsArn: Swift.String?
        /// The identifier for the source DB cluster, which can't be changed and which is unique to an Amazon Web Services Region.
        public var dbClusterIdentifier: Swift.String?
        /// The resource ID for the source DB cluster, which can't be changed and which is unique to an Amazon Web Services Region.
        public var dbClusterResourceId: Swift.String?
        /// The name of the database engine for this automated backup.
        public var engine: Swift.String?
        /// The engine mode of the database engine for the automated backup.
        public var engineMode: Swift.String?
        /// The version of the database engine for the automated backup.
        public var engineVersion: Swift.String?
        /// Indicates whether mapping of Amazon Web Services Identity and Access Management (IAM) accounts to database accounts is enabled.
        public var iamDatabaseAuthenticationEnabled: Swift.Bool?
        /// The IOPS (I/O operations per second) value for the automated backup. This setting is only for non-Aurora Multi-AZ DB clusters.
        public var iops: Swift.Int?
        /// The Amazon Web Services KMS key ID for an automated backup. The Amazon Web Services KMS key identifier is the key ARN, key ID, alias ARN, or alias name for the KMS key.
        public var kmsKeyId: Swift.String?
        /// The license model information for this DB cluster automated backup.
        public var licenseModel: Swift.String?
        /// The master user name of the automated backup.
        public var masterUsername: Swift.String?
        /// The port number that the automated backup used for connections. Default: Inherits from the source DB cluster Valid Values: 1150-65535
        public var port: Swift.Int?
        /// The Amazon Web Services Region associated with the automated backup.
        public var region: Swift.String?
        /// Earliest and latest time an instance can be restored to:
        public var restoreWindow: RDSClientTypes.RestoreWindow?
        /// A list of status information for an automated backup:
        ///
        /// * retained - Automated backups for deleted clusters.
        public var status: Swift.String?
        /// Indicates whether the source DB cluster is encrypted.
        public var storageEncrypted: Swift.Bool?
        /// The storage type associated with the DB cluster. This setting is only for non-Aurora Multi-AZ DB clusters.
        public var storageType: Swift.String?
        /// The VPC ID associated with the DB cluster.
        public var vpcId: Swift.String?

        public init(
            allocatedStorage: Swift.Int? = nil,
            availabilityZones: [Swift.String]? = nil,
            awsBackupRecoveryPointArn: Swift.String? = nil,
            backupRetentionPeriod: Swift.Int? = nil,
            clusterCreateTime: ClientRuntime.Date? = nil,
            dbClusterArn: Swift.String? = nil,
            dbClusterAutomatedBackupsArn: Swift.String? = nil,
            dbClusterIdentifier: Swift.String? = nil,
            dbClusterResourceId: Swift.String? = nil,
            engine: Swift.String? = nil,
            engineMode: Swift.String? = nil,
            engineVersion: Swift.String? = nil,
            iamDatabaseAuthenticationEnabled: Swift.Bool? = nil,
            iops: Swift.Int? = nil,
            kmsKeyId: Swift.String? = nil,
            licenseModel: Swift.String? = nil,
            masterUsername: Swift.String? = nil,
            port: Swift.Int? = nil,
            region: Swift.String? = nil,
            restoreWindow: RDSClientTypes.RestoreWindow? = nil,
            status: Swift.String? = nil,
            storageEncrypted: Swift.Bool? = nil,
            storageType: Swift.String? = nil,
            vpcId: Swift.String? = nil
        )
        {
            self.allocatedStorage = allocatedStorage
            self.availabilityZones = availabilityZones
            self.awsBackupRecoveryPointArn = awsBackupRecoveryPointArn
            self.backupRetentionPeriod = backupRetentionPeriod
            self.clusterCreateTime = clusterCreateTime
            self.dbClusterArn = dbClusterArn
            self.dbClusterAutomatedBackupsArn = dbClusterAutomatedBackupsArn
            self.dbClusterIdentifier = dbClusterIdentifier
            self.dbClusterResourceId = dbClusterResourceId
            self.engine = engine
            self.engineMode = engineMode
            self.engineVersion = engineVersion
            self.iamDatabaseAuthenticationEnabled = iamDatabaseAuthenticationEnabled
            self.iops = iops
            self.kmsKeyId = kmsKeyId
            self.licenseModel = licenseModel
            self.masterUsername = masterUsername
            self.port = port
            self.region = region
            self.restoreWindow = restoreWindow
            self.status = status
            self.storageEncrypted = storageEncrypted
            self.storageType = storageType
            self.vpcId = vpcId
        }
    }

}

extension DBClusterAutomatedBackupNotFoundFault {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = DBClusterAutomatedBackupNotFoundFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// No automated backup for this DB cluster was found.
public struct DBClusterAutomatedBackupNotFoundFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "DBClusterAutomatedBackupNotFoundFault" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension DBClusterAutomatedBackupQuotaExceededFault {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = DBClusterAutomatedBackupQuotaExceededFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// The quota for retained automated backups was exceeded. This prevents you from retaining any additional automated backups. The retained automated backups quota is the same as your DB cluster quota.
public struct DBClusterAutomatedBackupQuotaExceededFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "DBClusterAutomatedBackupQuotaExceededFault" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension RDSClientTypes.DBClusterBacktrack: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case backtrackIdentifier = "BacktrackIdentifier"
        case backtrackRequestCreationTime = "BacktrackRequestCreationTime"
        case backtrackTo = "BacktrackTo"
        case backtrackedFrom = "BacktrackedFrom"
        case dbClusterIdentifier = "DBClusterIdentifier"
        case status = "Status"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let backtrackIdentifier = backtrackIdentifier {
            try container.encode(backtrackIdentifier, forKey: ClientRuntime.Key("BacktrackIdentifier"))
        }
        if let backtrackRequestCreationTime = backtrackRequestCreationTime {
            try container.encodeTimestamp(backtrackRequestCreationTime, format: .dateTime, forKey: ClientRuntime.Key("BacktrackRequestCreationTime"))
        }
        if let backtrackTo = backtrackTo {
            try container.encodeTimestamp(backtrackTo, format: .dateTime, forKey: ClientRuntime.Key("BacktrackTo"))
        }
        if let backtrackedFrom = backtrackedFrom {
            try container.encodeTimestamp(backtrackedFrom, format: .dateTime, forKey: ClientRuntime.Key("BacktrackedFrom"))
        }
        if let dbClusterIdentifier = dbClusterIdentifier {
            try container.encode(dbClusterIdentifier, forKey: ClientRuntime.Key("DBClusterIdentifier"))
        }
        if let status = status {
            try container.encode(status, forKey: ClientRuntime.Key("Status"))
        }
    }

    static var readingClosure: SmithyReadWrite.ReadingClosure<RDSClientTypes.DBClusterBacktrack, SmithyXML.Reader> {
        return { reader in
            guard reader.content != nil else { return nil }
            var value = RDSClientTypes.DBClusterBacktrack()
            value.dbClusterIdentifier = try reader["DBClusterIdentifier"].readIfPresent()
            value.backtrackIdentifier = try reader["BacktrackIdentifier"].readIfPresent()
            value.backtrackTo = try reader["BacktrackTo"].readTimestampIfPresent(format: .dateTime)
            value.backtrackedFrom = try reader["BacktrackedFrom"].readTimestampIfPresent(format: .dateTime)
            value.backtrackRequestCreationTime = try reader["BacktrackRequestCreationTime"].readTimestampIfPresent(format: .dateTime)
            value.status = try reader["Status"].readIfPresent()
            return value
        }
    }
}

extension RDSClientTypes {
    /// This data type is used as a response element in the DescribeDBClusterBacktracks action.
    public struct DBClusterBacktrack: Swift.Equatable {
        /// Contains the backtrack identifier.
        public var backtrackIdentifier: Swift.String?
        /// The timestamp of the time at which the backtrack was requested.
        public var backtrackRequestCreationTime: ClientRuntime.Date?
        /// The timestamp of the time to which the DB cluster was backtracked.
        public var backtrackTo: ClientRuntime.Date?
        /// The timestamp of the time from which the DB cluster was backtracked.
        public var backtrackedFrom: ClientRuntime.Date?
        /// Contains a user-supplied DB cluster identifier. This identifier is the unique key that identifies a DB cluster.
        public var dbClusterIdentifier: Swift.String?
        /// The status of the backtrack. This property returns one of the following values:
        ///
        /// * applying - The backtrack is currently being applied to or rolled back from the DB cluster.
        ///
        /// * completed - The backtrack has successfully been applied to or rolled back from the DB cluster.
        ///
        /// * failed - An error occurred while the backtrack was applied to or rolled back from the DB cluster.
        ///
        /// * pending - The backtrack is currently pending application to or rollback from the DB cluster.
        public var status: Swift.String?

        public init(
            backtrackIdentifier: Swift.String? = nil,
            backtrackRequestCreationTime: ClientRuntime.Date? = nil,
            backtrackTo: ClientRuntime.Date? = nil,
            backtrackedFrom: ClientRuntime.Date? = nil,
            dbClusterIdentifier: Swift.String? = nil,
            status: Swift.String? = nil
        )
        {
            self.backtrackIdentifier = backtrackIdentifier
            self.backtrackRequestCreationTime = backtrackRequestCreationTime
            self.backtrackTo = backtrackTo
            self.backtrackedFrom = backtrackedFrom
            self.dbClusterIdentifier = dbClusterIdentifier
            self.status = status
        }
    }

}

extension DBClusterBacktrackNotFoundFault {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = DBClusterBacktrackNotFoundFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// BacktrackIdentifier doesn't refer to an existing backtrack.
public struct DBClusterBacktrackNotFoundFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "DBClusterBacktrackNotFoundFault" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension RDSClientTypes.DBClusterEndpoint: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case customEndpointType = "CustomEndpointType"
        case dbClusterEndpointArn = "DBClusterEndpointArn"
        case dbClusterEndpointIdentifier = "DBClusterEndpointIdentifier"
        case dbClusterEndpointResourceIdentifier = "DBClusterEndpointResourceIdentifier"
        case dbClusterIdentifier = "DBClusterIdentifier"
        case endpoint = "Endpoint"
        case endpointType = "EndpointType"
        case excludedMembers = "ExcludedMembers"
        case staticMembers = "StaticMembers"
        case status = "Status"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let customEndpointType = customEndpointType {
            try container.encode(customEndpointType, forKey: ClientRuntime.Key("CustomEndpointType"))
        }
        if let dbClusterEndpointArn = dbClusterEndpointArn {
            try container.encode(dbClusterEndpointArn, forKey: ClientRuntime.Key("DBClusterEndpointArn"))
        }
        if let dbClusterEndpointIdentifier = dbClusterEndpointIdentifier {
            try container.encode(dbClusterEndpointIdentifier, forKey: ClientRuntime.Key("DBClusterEndpointIdentifier"))
        }
        if let dbClusterEndpointResourceIdentifier = dbClusterEndpointResourceIdentifier {
            try container.encode(dbClusterEndpointResourceIdentifier, forKey: ClientRuntime.Key("DBClusterEndpointResourceIdentifier"))
        }
        if let dbClusterIdentifier = dbClusterIdentifier {
            try container.encode(dbClusterIdentifier, forKey: ClientRuntime.Key("DBClusterIdentifier"))
        }
        if let endpoint = endpoint {
            try container.encode(endpoint, forKey: ClientRuntime.Key("Endpoint"))
        }
        if let endpointType = endpointType {
            try container.encode(endpointType, forKey: ClientRuntime.Key("EndpointType"))
        }
        if let excludedMembers = excludedMembers {
            if !excludedMembers.isEmpty {
                var excludedMembersContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("ExcludedMembers"))
                for (index0, string0) in excludedMembers.enumerated() {
                    try excludedMembersContainer.encode(string0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var excludedMembersContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("ExcludedMembers"))
                try excludedMembersContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let staticMembers = staticMembers {
            if !staticMembers.isEmpty {
                var staticMembersContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("StaticMembers"))
                for (index0, string0) in staticMembers.enumerated() {
                    try staticMembersContainer.encode(string0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var staticMembersContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("StaticMembers"))
                try staticMembersContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let status = status {
            try container.encode(status, forKey: ClientRuntime.Key("Status"))
        }
    }

    static var readingClosure: SmithyReadWrite.ReadingClosure<RDSClientTypes.DBClusterEndpoint, SmithyXML.Reader> {
        return { reader in
            guard reader.content != nil else { return nil }
            var value = RDSClientTypes.DBClusterEndpoint()
            value.dbClusterEndpointIdentifier = try reader["DBClusterEndpointIdentifier"].readIfPresent()
            value.dbClusterIdentifier = try reader["DBClusterIdentifier"].readIfPresent()
            value.dbClusterEndpointResourceIdentifier = try reader["DBClusterEndpointResourceIdentifier"].readIfPresent()
            value.endpoint = try reader["Endpoint"].readIfPresent()
            value.status = try reader["Status"].readIfPresent()
            value.endpointType = try reader["EndpointType"].readIfPresent()
            value.customEndpointType = try reader["CustomEndpointType"].readIfPresent()
            value.staticMembers = try reader["StaticMembers"].readListIfPresent(memberReadingClosure: Swift.String.readingClosure, memberNodeInfo: "member", isFlattened: false)
            value.excludedMembers = try reader["ExcludedMembers"].readListIfPresent(memberReadingClosure: Swift.String.readingClosure, memberNodeInfo: "member", isFlattened: false)
            value.dbClusterEndpointArn = try reader["DBClusterEndpointArn"].readIfPresent()
            return value
        }
    }
}

extension RDSClientTypes {
    /// This data type represents the information you need to connect to an Amazon Aurora DB cluster. This data type is used as a response element in the following actions:
    ///
    /// * CreateDBClusterEndpoint
    ///
    /// * DescribeDBClusterEndpoints
    ///
    /// * ModifyDBClusterEndpoint
    ///
    /// * DeleteDBClusterEndpoint
    ///
    ///
    /// For the data structure that represents Amazon RDS DB instance endpoints, see Endpoint.
    public struct DBClusterEndpoint: Swift.Equatable {
        /// The type associated with a custom endpoint. One of: READER, WRITER, ANY.
        public var customEndpointType: Swift.String?
        /// The Amazon Resource Name (ARN) for the endpoint.
        public var dbClusterEndpointArn: Swift.String?
        /// The identifier associated with the endpoint. This parameter is stored as a lowercase string.
        public var dbClusterEndpointIdentifier: Swift.String?
        /// A unique system-generated identifier for an endpoint. It remains the same for the whole life of the endpoint.
        public var dbClusterEndpointResourceIdentifier: Swift.String?
        /// The DB cluster identifier of the DB cluster associated with the endpoint. This parameter is stored as a lowercase string.
        public var dbClusterIdentifier: Swift.String?
        /// The DNS address of the endpoint.
        public var endpoint: Swift.String?
        /// The type of the endpoint. One of: READER, WRITER, CUSTOM.
        public var endpointType: Swift.String?
        /// List of DB instance identifiers that aren't part of the custom endpoint group. All other eligible instances are reachable through the custom endpoint. Only relevant if the list of static members is empty.
        public var excludedMembers: [Swift.String]?
        /// List of DB instance identifiers that are part of the custom endpoint group.
        public var staticMembers: [Swift.String]?
        /// The current status of the endpoint. One of: creating, available, deleting, inactive, modifying. The inactive state applies to an endpoint that can't be used for a certain kind of cluster, such as a writer endpoint for a read-only secondary cluster in a global database.
        public var status: Swift.String?

        public init(
            customEndpointType: Swift.String? = nil,
            dbClusterEndpointArn: Swift.String? = nil,
            dbClusterEndpointIdentifier: Swift.String? = nil,
            dbClusterEndpointResourceIdentifier: Swift.String? = nil,
            dbClusterIdentifier: Swift.String? = nil,
            endpoint: Swift.String? = nil,
            endpointType: Swift.String? = nil,
            excludedMembers: [Swift.String]? = nil,
            staticMembers: [Swift.String]? = nil,
            status: Swift.String? = nil
        )
        {
            self.customEndpointType = customEndpointType
            self.dbClusterEndpointArn = dbClusterEndpointArn
            self.dbClusterEndpointIdentifier = dbClusterEndpointIdentifier
            self.dbClusterEndpointResourceIdentifier = dbClusterEndpointResourceIdentifier
            self.dbClusterIdentifier = dbClusterIdentifier
            self.endpoint = endpoint
            self.endpointType = endpointType
            self.excludedMembers = excludedMembers
            self.staticMembers = staticMembers
            self.status = status
        }
    }

}

extension DBClusterEndpointAlreadyExistsFault {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = DBClusterEndpointAlreadyExistsFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// The specified custom endpoint can't be created because it already exists.
public struct DBClusterEndpointAlreadyExistsFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "DBClusterEndpointAlreadyExistsFault" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension DBClusterEndpointNotFoundFault {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = DBClusterEndpointNotFoundFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// The specified custom endpoint doesn't exist.
public struct DBClusterEndpointNotFoundFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "DBClusterEndpointNotFoundFault" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension DBClusterEndpointQuotaExceededFault {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = DBClusterEndpointQuotaExceededFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// The cluster already has the maximum number of custom endpoints.
public struct DBClusterEndpointQuotaExceededFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "DBClusterEndpointQuotaExceededFault" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension RDSClientTypes.DBClusterMember: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dbClusterParameterGroupStatus = "DBClusterParameterGroupStatus"
        case dbInstanceIdentifier = "DBInstanceIdentifier"
        case isClusterWriter = "IsClusterWriter"
        case promotionTier = "PromotionTier"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let dbClusterParameterGroupStatus = dbClusterParameterGroupStatus {
            try container.encode(dbClusterParameterGroupStatus, forKey: ClientRuntime.Key("DBClusterParameterGroupStatus"))
        }
        if let dbInstanceIdentifier = dbInstanceIdentifier {
            try container.encode(dbInstanceIdentifier, forKey: ClientRuntime.Key("DBInstanceIdentifier"))
        }
        if let isClusterWriter = isClusterWriter {
            try container.encode(isClusterWriter, forKey: ClientRuntime.Key("IsClusterWriter"))
        }
        if let promotionTier = promotionTier {
            try container.encode(promotionTier, forKey: ClientRuntime.Key("PromotionTier"))
        }
    }

    static var readingClosure: SmithyReadWrite.ReadingClosure<RDSClientTypes.DBClusterMember, SmithyXML.Reader> {
        return { reader in
            guard reader.content != nil else { return nil }
            var value = RDSClientTypes.DBClusterMember()
            value.dbInstanceIdentifier = try reader["DBInstanceIdentifier"].readIfPresent()
            value.isClusterWriter = try reader["IsClusterWriter"].readIfPresent()
            value.dbClusterParameterGroupStatus = try reader["DBClusterParameterGroupStatus"].readIfPresent()
            value.promotionTier = try reader["PromotionTier"].readIfPresent()
            return value
        }
    }
}

extension RDSClientTypes {
    /// Contains information about an instance that is part of a DB cluster.
    public struct DBClusterMember: Swift.Equatable {
        /// Specifies the status of the DB cluster parameter group for this member of the DB cluster.
        public var dbClusterParameterGroupStatus: Swift.String?
        /// Specifies the instance identifier for this member of the DB cluster.
        public var dbInstanceIdentifier: Swift.String?
        /// Indicates whether the cluster member is the primary DB instance for the DB cluster.
        public var isClusterWriter: Swift.Bool?
        /// A value that specifies the order in which an Aurora Replica is promoted to the primary instance after a failure of the existing primary instance. For more information, see [ Fault Tolerance for an Aurora DB Cluster](https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/Aurora.Managing.Backups.html#Aurora.Managing.FaultTolerance) in the Amazon Aurora User Guide.
        public var promotionTier: Swift.Int?

        public init(
            dbClusterParameterGroupStatus: Swift.String? = nil,
            dbInstanceIdentifier: Swift.String? = nil,
            isClusterWriter: Swift.Bool? = nil,
            promotionTier: Swift.Int? = nil
        )
        {
            self.dbClusterParameterGroupStatus = dbClusterParameterGroupStatus
            self.dbInstanceIdentifier = dbInstanceIdentifier
            self.isClusterWriter = isClusterWriter
            self.promotionTier = promotionTier
        }
    }

}

extension DBClusterNotFoundFault {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = DBClusterNotFoundFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// DBClusterIdentifier doesn't refer to an existing DB cluster.
public struct DBClusterNotFoundFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "DBClusterNotFoundFault" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension RDSClientTypes.DBClusterOptionGroupStatus: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dbClusterOptionGroupName = "DBClusterOptionGroupName"
        case status = "Status"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let dbClusterOptionGroupName = dbClusterOptionGroupName {
            try container.encode(dbClusterOptionGroupName, forKey: ClientRuntime.Key("DBClusterOptionGroupName"))
        }
        if let status = status {
            try container.encode(status, forKey: ClientRuntime.Key("Status"))
        }
    }

    static var readingClosure: SmithyReadWrite.ReadingClosure<RDSClientTypes.DBClusterOptionGroupStatus, SmithyXML.Reader> {
        return { reader in
            guard reader.content != nil else { return nil }
            var value = RDSClientTypes.DBClusterOptionGroupStatus()
            value.dbClusterOptionGroupName = try reader["DBClusterOptionGroupName"].readIfPresent()
            value.status = try reader["Status"].readIfPresent()
            return value
        }
    }
}

extension RDSClientTypes {
    /// Contains status information for a DB cluster option group.
    public struct DBClusterOptionGroupStatus: Swift.Equatable {
        /// Specifies the name of the DB cluster option group.
        public var dbClusterOptionGroupName: Swift.String?
        /// Specifies the status of the DB cluster option group.
        public var status: Swift.String?

        public init(
            dbClusterOptionGroupName: Swift.String? = nil,
            status: Swift.String? = nil
        )
        {
            self.dbClusterOptionGroupName = dbClusterOptionGroupName
            self.status = status
        }
    }

}

extension RDSClientTypes.DBClusterParameterGroup: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dbClusterParameterGroupArn = "DBClusterParameterGroupArn"
        case dbClusterParameterGroupName = "DBClusterParameterGroupName"
        case dbParameterGroupFamily = "DBParameterGroupFamily"
        case description = "Description"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let dbClusterParameterGroupArn = dbClusterParameterGroupArn {
            try container.encode(dbClusterParameterGroupArn, forKey: ClientRuntime.Key("DBClusterParameterGroupArn"))
        }
        if let dbClusterParameterGroupName = dbClusterParameterGroupName {
            try container.encode(dbClusterParameterGroupName, forKey: ClientRuntime.Key("DBClusterParameterGroupName"))
        }
        if let dbParameterGroupFamily = dbParameterGroupFamily {
            try container.encode(dbParameterGroupFamily, forKey: ClientRuntime.Key("DBParameterGroupFamily"))
        }
        if let description = description {
            try container.encode(description, forKey: ClientRuntime.Key("Description"))
        }
    }

    static var readingClosure: SmithyReadWrite.ReadingClosure<RDSClientTypes.DBClusterParameterGroup, SmithyXML.Reader> {
        return { reader in
            guard reader.content != nil else { return nil }
            var value = RDSClientTypes.DBClusterParameterGroup()
            value.dbClusterParameterGroupName = try reader["DBClusterParameterGroupName"].readIfPresent()
            value.dbParameterGroupFamily = try reader["DBParameterGroupFamily"].readIfPresent()
            value.description = try reader["Description"].readIfPresent()
            value.dbClusterParameterGroupArn = try reader["DBClusterParameterGroupArn"].readIfPresent()
            return value
        }
    }
}

extension RDSClientTypes {
    /// Contains the details of an Amazon RDS DB cluster parameter group. This data type is used as a response element in the DescribeDBClusterParameterGroups action.
    public struct DBClusterParameterGroup: Swift.Equatable {
        /// The Amazon Resource Name (ARN) for the DB cluster parameter group.
        public var dbClusterParameterGroupArn: Swift.String?
        /// The name of the DB cluster parameter group.
        public var dbClusterParameterGroupName: Swift.String?
        /// The name of the DB parameter group family that this DB cluster parameter group is compatible with.
        public var dbParameterGroupFamily: Swift.String?
        /// Provides the customer-specified description for this DB cluster parameter group.
        public var description: Swift.String?

        public init(
            dbClusterParameterGroupArn: Swift.String? = nil,
            dbClusterParameterGroupName: Swift.String? = nil,
            dbParameterGroupFamily: Swift.String? = nil,
            description: Swift.String? = nil
        )
        {
            self.dbClusterParameterGroupArn = dbClusterParameterGroupArn
            self.dbClusterParameterGroupName = dbClusterParameterGroupName
            self.dbParameterGroupFamily = dbParameterGroupFamily
            self.description = description
        }
    }

}

extension DBClusterParameterGroupNotFoundFault {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = DBClusterParameterGroupNotFoundFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// DBClusterParameterGroupName doesn't refer to an existing DB cluster parameter group.
public struct DBClusterParameterGroupNotFoundFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "DBClusterParameterGroupNotFound" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension DBClusterQuotaExceededFault {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = DBClusterQuotaExceededFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// The user attempted to create a new DB cluster and the user has already reached the maximum allowed DB cluster quota.
public struct DBClusterQuotaExceededFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "DBClusterQuotaExceededFault" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension RDSClientTypes.DBClusterRole: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case featureName = "FeatureName"
        case roleArn = "RoleArn"
        case status = "Status"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let featureName = featureName {
            try container.encode(featureName, forKey: ClientRuntime.Key("FeatureName"))
        }
        if let roleArn = roleArn {
            try container.encode(roleArn, forKey: ClientRuntime.Key("RoleArn"))
        }
        if let status = status {
            try container.encode(status, forKey: ClientRuntime.Key("Status"))
        }
    }

    static var readingClosure: SmithyReadWrite.ReadingClosure<RDSClientTypes.DBClusterRole, SmithyXML.Reader> {
        return { reader in
            guard reader.content != nil else { return nil }
            var value = RDSClientTypes.DBClusterRole()
            value.roleArn = try reader["RoleArn"].readIfPresent()
            value.status = try reader["Status"].readIfPresent()
            value.featureName = try reader["FeatureName"].readIfPresent()
            return value
        }
    }
}

extension RDSClientTypes {
    /// Describes an Amazon Web Services Identity and Access Management (IAM) role that is associated with a DB cluster.
    public struct DBClusterRole: Swift.Equatable {
        /// The name of the feature associated with the Amazon Web Services Identity and Access Management (IAM) role. For information about supported feature names, see [DBEngineVersion].
        public var featureName: Swift.String?
        /// The Amazon Resource Name (ARN) of the IAM role that is associated with the DB cluster.
        public var roleArn: Swift.String?
        /// Describes the state of association between the IAM role and the DB cluster. The Status property returns one of the following values:
        ///
        /// * ACTIVE - the IAM role ARN is associated with the DB cluster and can be used to access other Amazon Web Services on your behalf.
        ///
        /// * PENDING - the IAM role ARN is being associated with the DB cluster.
        ///
        /// * INVALID - the IAM role ARN is associated with the DB cluster, but the DB cluster is unable to assume the IAM role in order to access other Amazon Web Services on your behalf.
        public var status: Swift.String?

        public init(
            featureName: Swift.String? = nil,
            roleArn: Swift.String? = nil,
            status: Swift.String? = nil
        )
        {
            self.featureName = featureName
            self.roleArn = roleArn
            self.status = status
        }
    }

}

extension DBClusterRoleAlreadyExistsFault {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = DBClusterRoleAlreadyExistsFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// The specified IAM role Amazon Resource Name (ARN) is already associated with the specified DB cluster.
public struct DBClusterRoleAlreadyExistsFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "DBClusterRoleAlreadyExists" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension DBClusterRoleNotFoundFault {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = DBClusterRoleNotFoundFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// The specified IAM role Amazon Resource Name (ARN) isn't associated with the specified DB cluster.
public struct DBClusterRoleNotFoundFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "DBClusterRoleNotFound" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension DBClusterRoleQuotaExceededFault {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = DBClusterRoleQuotaExceededFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// You have exceeded the maximum number of IAM roles that can be associated with the specified DB cluster.
public struct DBClusterRoleQuotaExceededFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "DBClusterRoleQuotaExceeded" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension RDSClientTypes.DBClusterSnapshot: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case allocatedStorage = "AllocatedStorage"
        case availabilityZones = "AvailabilityZones"
        case clusterCreateTime = "ClusterCreateTime"
        case dbClusterIdentifier = "DBClusterIdentifier"
        case dbClusterSnapshotArn = "DBClusterSnapshotArn"
        case dbClusterSnapshotIdentifier = "DBClusterSnapshotIdentifier"
        case dbSystemId = "DBSystemId"
        case dbClusterResourceId = "DbClusterResourceId"
        case engine = "Engine"
        case engineMode = "EngineMode"
        case engineVersion = "EngineVersion"
        case iamDatabaseAuthenticationEnabled = "IAMDatabaseAuthenticationEnabled"
        case kmsKeyId = "KmsKeyId"
        case licenseModel = "LicenseModel"
        case masterUsername = "MasterUsername"
        case percentProgress = "PercentProgress"
        case port = "Port"
        case snapshotCreateTime = "SnapshotCreateTime"
        case snapshotType = "SnapshotType"
        case sourceDBClusterSnapshotArn = "SourceDBClusterSnapshotArn"
        case status = "Status"
        case storageEncrypted = "StorageEncrypted"
        case storageType = "StorageType"
        case tagList = "TagList"
        case vpcId = "VpcId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let allocatedStorage = allocatedStorage {
            try container.encode(allocatedStorage, forKey: ClientRuntime.Key("AllocatedStorage"))
        }
        if let availabilityZones = availabilityZones {
            if !availabilityZones.isEmpty {
                var availabilityZonesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("AvailabilityZones"))
                for (index0, string0) in availabilityZones.enumerated() {
                    try availabilityZonesContainer.encode(string0, forKey: ClientRuntime.Key("AvailabilityZone.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var availabilityZonesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("AvailabilityZones"))
                try availabilityZonesContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let clusterCreateTime = clusterCreateTime {
            try container.encodeTimestamp(clusterCreateTime, format: .dateTime, forKey: ClientRuntime.Key("ClusterCreateTime"))
        }
        if let dbClusterIdentifier = dbClusterIdentifier {
            try container.encode(dbClusterIdentifier, forKey: ClientRuntime.Key("DBClusterIdentifier"))
        }
        if let dbClusterSnapshotArn = dbClusterSnapshotArn {
            try container.encode(dbClusterSnapshotArn, forKey: ClientRuntime.Key("DBClusterSnapshotArn"))
        }
        if let dbClusterSnapshotIdentifier = dbClusterSnapshotIdentifier {
            try container.encode(dbClusterSnapshotIdentifier, forKey: ClientRuntime.Key("DBClusterSnapshotIdentifier"))
        }
        if let dbSystemId = dbSystemId {
            try container.encode(dbSystemId, forKey: ClientRuntime.Key("DBSystemId"))
        }
        if let dbClusterResourceId = dbClusterResourceId {
            try container.encode(dbClusterResourceId, forKey: ClientRuntime.Key("DbClusterResourceId"))
        }
        if let engine = engine {
            try container.encode(engine, forKey: ClientRuntime.Key("Engine"))
        }
        if let engineMode = engineMode {
            try container.encode(engineMode, forKey: ClientRuntime.Key("EngineMode"))
        }
        if let engineVersion = engineVersion {
            try container.encode(engineVersion, forKey: ClientRuntime.Key("EngineVersion"))
        }
        if let iamDatabaseAuthenticationEnabled = iamDatabaseAuthenticationEnabled {
            try container.encode(iamDatabaseAuthenticationEnabled, forKey: ClientRuntime.Key("IAMDatabaseAuthenticationEnabled"))
        }
        if let kmsKeyId = kmsKeyId {
            try container.encode(kmsKeyId, forKey: ClientRuntime.Key("KmsKeyId"))
        }
        if let licenseModel = licenseModel {
            try container.encode(licenseModel, forKey: ClientRuntime.Key("LicenseModel"))
        }
        if let masterUsername = masterUsername {
            try container.encode(masterUsername, forKey: ClientRuntime.Key("MasterUsername"))
        }
        if let percentProgress = percentProgress {
            try container.encode(percentProgress, forKey: ClientRuntime.Key("PercentProgress"))
        }
        if let port = port {
            try container.encode(port, forKey: ClientRuntime.Key("Port"))
        }
        if let snapshotCreateTime = snapshotCreateTime {
            try container.encodeTimestamp(snapshotCreateTime, format: .dateTime, forKey: ClientRuntime.Key("SnapshotCreateTime"))
        }
        if let snapshotType = snapshotType {
            try container.encode(snapshotType, forKey: ClientRuntime.Key("SnapshotType"))
        }
        if let sourceDBClusterSnapshotArn = sourceDBClusterSnapshotArn {
            try container.encode(sourceDBClusterSnapshotArn, forKey: ClientRuntime.Key("SourceDBClusterSnapshotArn"))
        }
        if let status = status {
            try container.encode(status, forKey: ClientRuntime.Key("Status"))
        }
        if let storageEncrypted = storageEncrypted {
            try container.encode(storageEncrypted, forKey: ClientRuntime.Key("StorageEncrypted"))
        }
        if let storageType = storageType {
            try container.encode(storageType, forKey: ClientRuntime.Key("StorageType"))
        }
        if let tagList = tagList {
            if !tagList.isEmpty {
                var tagListContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("TagList"))
                for (index0, tag0) in tagList.enumerated() {
                    try tagListContainer.encode(tag0, forKey: ClientRuntime.Key("Tag.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var tagListContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("TagList"))
                try tagListContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let vpcId = vpcId {
            try container.encode(vpcId, forKey: ClientRuntime.Key("VpcId"))
        }
    }

    static var readingClosure: SmithyReadWrite.ReadingClosure<RDSClientTypes.DBClusterSnapshot, SmithyXML.Reader> {
        return { reader in
            guard reader.content != nil else { return nil }
            var value = RDSClientTypes.DBClusterSnapshot()
            value.availabilityZones = try reader["AvailabilityZones"].readListIfPresent(memberReadingClosure: Swift.String.readingClosure, memberNodeInfo: "AvailabilityZone", isFlattened: false)
            value.dbClusterSnapshotIdentifier = try reader["DBClusterSnapshotIdentifier"].readIfPresent()
            value.dbClusterIdentifier = try reader["DBClusterIdentifier"].readIfPresent()
            value.snapshotCreateTime = try reader["SnapshotCreateTime"].readTimestampIfPresent(format: .dateTime)
            value.engine = try reader["Engine"].readIfPresent()
            value.engineMode = try reader["EngineMode"].readIfPresent()
            value.allocatedStorage = try reader["AllocatedStorage"].readIfPresent()
            value.status = try reader["Status"].readIfPresent()
            value.port = try reader["Port"].readIfPresent()
            value.vpcId = try reader["VpcId"].readIfPresent()
            value.clusterCreateTime = try reader["ClusterCreateTime"].readTimestampIfPresent(format: .dateTime)
            value.masterUsername = try reader["MasterUsername"].readIfPresent()
            value.engineVersion = try reader["EngineVersion"].readIfPresent()
            value.licenseModel = try reader["LicenseModel"].readIfPresent()
            value.snapshotType = try reader["SnapshotType"].readIfPresent()
            value.percentProgress = try reader["PercentProgress"].readIfPresent()
            value.storageEncrypted = try reader["StorageEncrypted"].readIfPresent()
            value.kmsKeyId = try reader["KmsKeyId"].readIfPresent()
            value.dbClusterSnapshotArn = try reader["DBClusterSnapshotArn"].readIfPresent()
            value.sourceDBClusterSnapshotArn = try reader["SourceDBClusterSnapshotArn"].readIfPresent()
            value.iamDatabaseAuthenticationEnabled = try reader["IAMDatabaseAuthenticationEnabled"].readIfPresent()
            value.tagList = try reader["TagList"].readListIfPresent(memberReadingClosure: RDSClientTypes.Tag.readingClosure, memberNodeInfo: "Tag", isFlattened: false)
            value.dbSystemId = try reader["DBSystemId"].readIfPresent()
            value.storageType = try reader["StorageType"].readIfPresent()
            value.dbClusterResourceId = try reader["DbClusterResourceId"].readIfPresent()
            return value
        }
    }
}

extension RDSClientTypes {
    /// Contains the details for an Amazon RDS DB cluster snapshot This data type is used as a response element in the DescribeDBClusterSnapshots action.
    public struct DBClusterSnapshot: Swift.Equatable {
        /// The allocated storage size of the DB cluster snapshot in gibibytes (GiB).
        public var allocatedStorage: Swift.Int?
        /// The list of Availability Zones (AZs) where instances in the DB cluster snapshot can be restored.
        public var availabilityZones: [Swift.String]?
        /// The time when the DB cluster was created, in Universal Coordinated Time (UTC).
        public var clusterCreateTime: ClientRuntime.Date?
        /// The DB cluster identifier of the DB cluster that this DB cluster snapshot was created from.
        public var dbClusterIdentifier: Swift.String?
        /// The resource ID of the DB cluster that this DB cluster snapshot was created from.
        public var dbClusterResourceId: Swift.String?
        /// The Amazon Resource Name (ARN) for the DB cluster snapshot.
        public var dbClusterSnapshotArn: Swift.String?
        /// The identifier for the DB cluster snapshot.
        public var dbClusterSnapshotIdentifier: Swift.String?
        /// Reserved for future use.
        public var dbSystemId: Swift.String?
        /// The name of the database engine for this DB cluster snapshot.
        public var engine: Swift.String?
        /// The engine mode of the database engine for this DB cluster snapshot.
        public var engineMode: Swift.String?
        /// The version of the database engine for this DB cluster snapshot.
        public var engineVersion: Swift.String?
        /// Indicates whether mapping of Amazon Web Services Identity and Access Management (IAM) accounts to database accounts is enabled.
        public var iamDatabaseAuthenticationEnabled: Swift.Bool?
        /// If StorageEncrypted is true, the Amazon Web Services KMS key identifier for the encrypted DB cluster snapshot. The Amazon Web Services KMS key identifier is the key ARN, key ID, alias ARN, or alias name for the KMS key.
        public var kmsKeyId: Swift.String?
        /// The license model information for this DB cluster snapshot.
        public var licenseModel: Swift.String?
        /// The master username for this DB cluster snapshot.
        public var masterUsername: Swift.String?
        /// The percentage of the estimated data that has been transferred.
        public var percentProgress: Swift.Int?
        /// The port that the DB cluster was listening on at the time of the snapshot.
        public var port: Swift.Int?
        /// The time when the snapshot was taken, in Universal Coordinated Time (UTC).
        public var snapshotCreateTime: ClientRuntime.Date?
        /// The type of the DB cluster snapshot.
        public var snapshotType: Swift.String?
        /// If the DB cluster snapshot was copied from a source DB cluster snapshot, the Amazon Resource Name (ARN) for the source DB cluster snapshot, otherwise, a null value.
        public var sourceDBClusterSnapshotArn: Swift.String?
        /// The status of this DB cluster snapshot. Valid statuses are the following:
        ///
        /// * available
        ///
        /// * copying
        ///
        /// * creating
        public var status: Swift.String?
        /// Indicates whether the DB cluster snapshot is encrypted.
        public var storageEncrypted: Swift.Bool?
        /// The storage type associated with the DB cluster snapshot. This setting is only for Aurora DB clusters.
        public var storageType: Swift.String?
        /// A list of tags. For more information, see [Tagging Amazon RDS Resources](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html) in the Amazon RDS User Guide.
        public var tagList: [RDSClientTypes.Tag]?
        /// The VPC ID associated with the DB cluster snapshot.
        public var vpcId: Swift.String?

        public init(
            allocatedStorage: Swift.Int? = nil,
            availabilityZones: [Swift.String]? = nil,
            clusterCreateTime: ClientRuntime.Date? = nil,
            dbClusterIdentifier: Swift.String? = nil,
            dbClusterResourceId: Swift.String? = nil,
            dbClusterSnapshotArn: Swift.String? = nil,
            dbClusterSnapshotIdentifier: Swift.String? = nil,
            dbSystemId: Swift.String? = nil,
            engine: Swift.String? = nil,
            engineMode: Swift.String? = nil,
            engineVersion: Swift.String? = nil,
            iamDatabaseAuthenticationEnabled: Swift.Bool? = nil,
            kmsKeyId: Swift.String? = nil,
            licenseModel: Swift.String? = nil,
            masterUsername: Swift.String? = nil,
            percentProgress: Swift.Int? = nil,
            port: Swift.Int? = nil,
            snapshotCreateTime: ClientRuntime.Date? = nil,
            snapshotType: Swift.String? = nil,
            sourceDBClusterSnapshotArn: Swift.String? = nil,
            status: Swift.String? = nil,
            storageEncrypted: Swift.Bool? = nil,
            storageType: Swift.String? = nil,
            tagList: [RDSClientTypes.Tag]? = nil,
            vpcId: Swift.String? = nil
        )
        {
            self.allocatedStorage = allocatedStorage
            self.availabilityZones = availabilityZones
            self.clusterCreateTime = clusterCreateTime
            self.dbClusterIdentifier = dbClusterIdentifier
            self.dbClusterResourceId = dbClusterResourceId
            self.dbClusterSnapshotArn = dbClusterSnapshotArn
            self.dbClusterSnapshotIdentifier = dbClusterSnapshotIdentifier
            self.dbSystemId = dbSystemId
            self.engine = engine
            self.engineMode = engineMode
            self.engineVersion = engineVersion
            self.iamDatabaseAuthenticationEnabled = iamDatabaseAuthenticationEnabled
            self.kmsKeyId = kmsKeyId
            self.licenseModel = licenseModel
            self.masterUsername = masterUsername
            self.percentProgress = percentProgress
            self.port = port
            self.snapshotCreateTime = snapshotCreateTime
            self.snapshotType = snapshotType
            self.sourceDBClusterSnapshotArn = sourceDBClusterSnapshotArn
            self.status = status
            self.storageEncrypted = storageEncrypted
            self.storageType = storageType
            self.tagList = tagList
            self.vpcId = vpcId
        }
    }

}

extension DBClusterSnapshotAlreadyExistsFault {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = DBClusterSnapshotAlreadyExistsFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// The user already has a DB cluster snapshot with the given identifier.
public struct DBClusterSnapshotAlreadyExistsFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "DBClusterSnapshotAlreadyExistsFault" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension RDSClientTypes.DBClusterSnapshotAttribute: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case attributeName = "AttributeName"
        case attributeValues = "AttributeValues"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let attributeName = attributeName {
            try container.encode(attributeName, forKey: ClientRuntime.Key("AttributeName"))
        }
        if let attributeValues = attributeValues {
            if !attributeValues.isEmpty {
                var attributeValuesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("AttributeValues"))
                for (index0, string0) in attributeValues.enumerated() {
                    try attributeValuesContainer.encode(string0, forKey: ClientRuntime.Key("AttributeValue.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var attributeValuesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("AttributeValues"))
                try attributeValuesContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
    }

    static var readingClosure: SmithyReadWrite.ReadingClosure<RDSClientTypes.DBClusterSnapshotAttribute, SmithyXML.Reader> {
        return { reader in
            guard reader.content != nil else { return nil }
            var value = RDSClientTypes.DBClusterSnapshotAttribute()
            value.attributeName = try reader["AttributeName"].readIfPresent()
            value.attributeValues = try reader["AttributeValues"].readListIfPresent(memberReadingClosure: Swift.String.readingClosure, memberNodeInfo: "AttributeValue", isFlattened: false)
            return value
        }
    }
}

extension RDSClientTypes {
    /// Contains the name and values of a manual DB cluster snapshot attribute. Manual DB cluster snapshot attributes are used to authorize other Amazon Web Services accounts to restore a manual DB cluster snapshot. For more information, see the ModifyDBClusterSnapshotAttribute API action.
    public struct DBClusterSnapshotAttribute: Swift.Equatable {
        /// The name of the manual DB cluster snapshot attribute. The attribute named restore refers to the list of Amazon Web Services accounts that have permission to copy or restore the manual DB cluster snapshot. For more information, see the ModifyDBClusterSnapshotAttribute API action.
        public var attributeName: Swift.String?
        /// The value(s) for the manual DB cluster snapshot attribute. If the AttributeName field is set to restore, then this element returns a list of IDs of the Amazon Web Services accounts that are authorized to copy or restore the manual DB cluster snapshot. If a value of all is in the list, then the manual DB cluster snapshot is public and available for any Amazon Web Services account to copy or restore.
        public var attributeValues: [Swift.String]?

        public init(
            attributeName: Swift.String? = nil,
            attributeValues: [Swift.String]? = nil
        )
        {
            self.attributeName = attributeName
            self.attributeValues = attributeValues
        }
    }

}

extension RDSClientTypes.DBClusterSnapshotAttributesResult: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dbClusterSnapshotAttributes = "DBClusterSnapshotAttributes"
        case dbClusterSnapshotIdentifier = "DBClusterSnapshotIdentifier"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let dbClusterSnapshotAttributes = dbClusterSnapshotAttributes {
            if !dbClusterSnapshotAttributes.isEmpty {
                var dbClusterSnapshotAttributesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("DBClusterSnapshotAttributes"))
                for (index0, dbclustersnapshotattribute0) in dbClusterSnapshotAttributes.enumerated() {
                    try dbClusterSnapshotAttributesContainer.encode(dbclustersnapshotattribute0, forKey: ClientRuntime.Key("DBClusterSnapshotAttribute.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var dbClusterSnapshotAttributesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("DBClusterSnapshotAttributes"))
                try dbClusterSnapshotAttributesContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let dbClusterSnapshotIdentifier = dbClusterSnapshotIdentifier {
            try container.encode(dbClusterSnapshotIdentifier, forKey: ClientRuntime.Key("DBClusterSnapshotIdentifier"))
        }
    }

    static var readingClosure: SmithyReadWrite.ReadingClosure<RDSClientTypes.DBClusterSnapshotAttributesResult, SmithyXML.Reader> {
        return { reader in
            guard reader.content != nil else { return nil }
            var value = RDSClientTypes.DBClusterSnapshotAttributesResult()
            value.dbClusterSnapshotIdentifier = try reader["DBClusterSnapshotIdentifier"].readIfPresent()
            value.dbClusterSnapshotAttributes = try reader["DBClusterSnapshotAttributes"].readListIfPresent(memberReadingClosure: RDSClientTypes.DBClusterSnapshotAttribute.readingClosure, memberNodeInfo: "DBClusterSnapshotAttribute", isFlattened: false)
            return value
        }
    }
}

extension RDSClientTypes {
    /// Contains the results of a successful call to the DescribeDBClusterSnapshotAttributes API action. Manual DB cluster snapshot attributes are used to authorize other Amazon Web Services accounts to copy or restore a manual DB cluster snapshot. For more information, see the ModifyDBClusterSnapshotAttribute API action.
    public struct DBClusterSnapshotAttributesResult: Swift.Equatable {
        /// The list of attributes and values for the manual DB cluster snapshot.
        public var dbClusterSnapshotAttributes: [RDSClientTypes.DBClusterSnapshotAttribute]?
        /// The identifier of the manual DB cluster snapshot that the attributes apply to.
        public var dbClusterSnapshotIdentifier: Swift.String?

        public init(
            dbClusterSnapshotAttributes: [RDSClientTypes.DBClusterSnapshotAttribute]? = nil,
            dbClusterSnapshotIdentifier: Swift.String? = nil
        )
        {
            self.dbClusterSnapshotAttributes = dbClusterSnapshotAttributes
            self.dbClusterSnapshotIdentifier = dbClusterSnapshotIdentifier
        }
    }

}

extension DBClusterSnapshotNotFoundFault {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = DBClusterSnapshotNotFoundFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// DBClusterSnapshotIdentifier doesn't refer to an existing DB cluster snapshot.
public struct DBClusterSnapshotNotFoundFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "DBClusterSnapshotNotFoundFault" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension RDSClientTypes.DBClusterStatusInfo: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
        case normal = "Normal"
        case status = "Status"
        case statusType = "StatusType"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let message = message {
            try container.encode(message, forKey: ClientRuntime.Key("Message"))
        }
        if let normal = normal {
            try container.encode(normal, forKey: ClientRuntime.Key("Normal"))
        }
        if let status = status {
            try container.encode(status, forKey: ClientRuntime.Key("Status"))
        }
        if let statusType = statusType {
            try container.encode(statusType, forKey: ClientRuntime.Key("StatusType"))
        }
    }

    static var readingClosure: SmithyReadWrite.ReadingClosure<RDSClientTypes.DBClusterStatusInfo, SmithyXML.Reader> {
        return { reader in
            guard reader.content != nil else { return nil }
            var value = RDSClientTypes.DBClusterStatusInfo()
            value.statusType = try reader["StatusType"].readIfPresent()
            value.normal = try reader["Normal"].readIfPresent()
            value.status = try reader["Status"].readIfPresent()
            value.message = try reader["Message"].readIfPresent()
            return value
        }
    }
}

extension RDSClientTypes {
    /// Reserved for future use.
    public struct DBClusterStatusInfo: Swift.Equatable {
        /// Reserved for future use.
        public var message: Swift.String?
        /// Reserved for future use.
        public var normal: Swift.Bool?
        /// Reserved for future use.
        public var status: Swift.String?
        /// Reserved for future use.
        public var statusType: Swift.String?

        public init(
            message: Swift.String? = nil,
            normal: Swift.Bool? = nil,
            status: Swift.String? = nil,
            statusType: Swift.String? = nil
        )
        {
            self.message = message
            self.normal = normal
            self.status = status
            self.statusType = statusType
        }
    }

}

extension RDSClientTypes.DBEngineVersion: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case createTime = "CreateTime"
        case customDBEngineVersionManifest = "CustomDBEngineVersionManifest"
        case dbEngineDescription = "DBEngineDescription"
        case dbEngineMediaType = "DBEngineMediaType"
        case dbEngineVersionArn = "DBEngineVersionArn"
        case dbEngineVersionDescription = "DBEngineVersionDescription"
        case dbParameterGroupFamily = "DBParameterGroupFamily"
        case databaseInstallationFilesS3BucketName = "DatabaseInstallationFilesS3BucketName"
        case databaseInstallationFilesS3Prefix = "DatabaseInstallationFilesS3Prefix"
        case defaultCharacterSet = "DefaultCharacterSet"
        case engine = "Engine"
        case engineVersion = "EngineVersion"
        case exportableLogTypes = "ExportableLogTypes"
        case image = "Image"
        case kmsKeyId = "KMSKeyId"
        case majorEngineVersion = "MajorEngineVersion"
        case status = "Status"
        case supportedCACertificateIdentifiers = "SupportedCACertificateIdentifiers"
        case supportedCharacterSets = "SupportedCharacterSets"
        case supportedEngineModes = "SupportedEngineModes"
        case supportedFeatureNames = "SupportedFeatureNames"
        case supportedNcharCharacterSets = "SupportedNcharCharacterSets"
        case supportedTimezones = "SupportedTimezones"
        case supportsBabelfish = "SupportsBabelfish"
        case supportsCertificateRotationWithoutRestart = "SupportsCertificateRotationWithoutRestart"
        case supportsGlobalDatabases = "SupportsGlobalDatabases"
        case supportsIntegrations = "SupportsIntegrations"
        case supportsLocalWriteForwarding = "SupportsLocalWriteForwarding"
        case supportsLogExportsToCloudwatchLogs = "SupportsLogExportsToCloudwatchLogs"
        case supportsParallelQuery = "SupportsParallelQuery"
        case supportsReadReplica = "SupportsReadReplica"
        case tagList = "TagList"
        case validUpgradeTarget = "ValidUpgradeTarget"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let createTime = createTime {
            try container.encodeTimestamp(createTime, format: .dateTime, forKey: ClientRuntime.Key("CreateTime"))
        }
        if let customDBEngineVersionManifest = customDBEngineVersionManifest {
            try container.encode(customDBEngineVersionManifest, forKey: ClientRuntime.Key("CustomDBEngineVersionManifest"))
        }
        if let dbEngineDescription = dbEngineDescription {
            try container.encode(dbEngineDescription, forKey: ClientRuntime.Key("DBEngineDescription"))
        }
        if let dbEngineMediaType = dbEngineMediaType {
            try container.encode(dbEngineMediaType, forKey: ClientRuntime.Key("DBEngineMediaType"))
        }
        if let dbEngineVersionArn = dbEngineVersionArn {
            try container.encode(dbEngineVersionArn, forKey: ClientRuntime.Key("DBEngineVersionArn"))
        }
        if let dbEngineVersionDescription = dbEngineVersionDescription {
            try container.encode(dbEngineVersionDescription, forKey: ClientRuntime.Key("DBEngineVersionDescription"))
        }
        if let dbParameterGroupFamily = dbParameterGroupFamily {
            try container.encode(dbParameterGroupFamily, forKey: ClientRuntime.Key("DBParameterGroupFamily"))
        }
        if let databaseInstallationFilesS3BucketName = databaseInstallationFilesS3BucketName {
            try container.encode(databaseInstallationFilesS3BucketName, forKey: ClientRuntime.Key("DatabaseInstallationFilesS3BucketName"))
        }
        if let databaseInstallationFilesS3Prefix = databaseInstallationFilesS3Prefix {
            try container.encode(databaseInstallationFilesS3Prefix, forKey: ClientRuntime.Key("DatabaseInstallationFilesS3Prefix"))
        }
        if let defaultCharacterSet = defaultCharacterSet {
            try container.encode(defaultCharacterSet, forKey: ClientRuntime.Key("DefaultCharacterSet"))
        }
        if let engine = engine {
            try container.encode(engine, forKey: ClientRuntime.Key("Engine"))
        }
        if let engineVersion = engineVersion {
            try container.encode(engineVersion, forKey: ClientRuntime.Key("EngineVersion"))
        }
        if let exportableLogTypes = exportableLogTypes {
            if !exportableLogTypes.isEmpty {
                var exportableLogTypesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("ExportableLogTypes"))
                for (index0, string0) in exportableLogTypes.enumerated() {
                    try exportableLogTypesContainer.encode(string0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var exportableLogTypesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("ExportableLogTypes"))
                try exportableLogTypesContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let image = image {
            try container.encode(image, forKey: ClientRuntime.Key("Image"))
        }
        if let kmsKeyId = kmsKeyId {
            try container.encode(kmsKeyId, forKey: ClientRuntime.Key("KMSKeyId"))
        }
        if let majorEngineVersion = majorEngineVersion {
            try container.encode(majorEngineVersion, forKey: ClientRuntime.Key("MajorEngineVersion"))
        }
        if let status = status {
            try container.encode(status, forKey: ClientRuntime.Key("Status"))
        }
        if let supportedCACertificateIdentifiers = supportedCACertificateIdentifiers {
            if !supportedCACertificateIdentifiers.isEmpty {
                var supportedCACertificateIdentifiersContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("SupportedCACertificateIdentifiers"))
                for (index0, string0) in supportedCACertificateIdentifiers.enumerated() {
                    try supportedCACertificateIdentifiersContainer.encode(string0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var supportedCACertificateIdentifiersContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("SupportedCACertificateIdentifiers"))
                try supportedCACertificateIdentifiersContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let supportedCharacterSets = supportedCharacterSets {
            if !supportedCharacterSets.isEmpty {
                var supportedCharacterSetsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("SupportedCharacterSets"))
                for (index0, characterset0) in supportedCharacterSets.enumerated() {
                    try supportedCharacterSetsContainer.encode(characterset0, forKey: ClientRuntime.Key("CharacterSet.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var supportedCharacterSetsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("SupportedCharacterSets"))
                try supportedCharacterSetsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let supportedEngineModes = supportedEngineModes {
            if !supportedEngineModes.isEmpty {
                var supportedEngineModesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("SupportedEngineModes"))
                for (index0, string0) in supportedEngineModes.enumerated() {
                    try supportedEngineModesContainer.encode(string0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var supportedEngineModesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("SupportedEngineModes"))
                try supportedEngineModesContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let supportedFeatureNames = supportedFeatureNames {
            if !supportedFeatureNames.isEmpty {
                var supportedFeatureNamesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("SupportedFeatureNames"))
                for (index0, string0) in supportedFeatureNames.enumerated() {
                    try supportedFeatureNamesContainer.encode(string0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var supportedFeatureNamesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("SupportedFeatureNames"))
                try supportedFeatureNamesContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let supportedNcharCharacterSets = supportedNcharCharacterSets {
            if !supportedNcharCharacterSets.isEmpty {
                var supportedNcharCharacterSetsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("SupportedNcharCharacterSets"))
                for (index0, characterset0) in supportedNcharCharacterSets.enumerated() {
                    try supportedNcharCharacterSetsContainer.encode(characterset0, forKey: ClientRuntime.Key("CharacterSet.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var supportedNcharCharacterSetsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("SupportedNcharCharacterSets"))
                try supportedNcharCharacterSetsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let supportedTimezones = supportedTimezones {
            if !supportedTimezones.isEmpty {
                var supportedTimezonesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("SupportedTimezones"))
                for (index0, timezone0) in supportedTimezones.enumerated() {
                    try supportedTimezonesContainer.encode(timezone0, forKey: ClientRuntime.Key("Timezone.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var supportedTimezonesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("SupportedTimezones"))
                try supportedTimezonesContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let supportsBabelfish = supportsBabelfish {
            try container.encode(supportsBabelfish, forKey: ClientRuntime.Key("SupportsBabelfish"))
        }
        if let supportsCertificateRotationWithoutRestart = supportsCertificateRotationWithoutRestart {
            try container.encode(supportsCertificateRotationWithoutRestart, forKey: ClientRuntime.Key("SupportsCertificateRotationWithoutRestart"))
        }
        if let supportsGlobalDatabases = supportsGlobalDatabases {
            try container.encode(supportsGlobalDatabases, forKey: ClientRuntime.Key("SupportsGlobalDatabases"))
        }
        if let supportsIntegrations = supportsIntegrations {
            try container.encode(supportsIntegrations, forKey: ClientRuntime.Key("SupportsIntegrations"))
        }
        if let supportsLocalWriteForwarding = supportsLocalWriteForwarding {
            try container.encode(supportsLocalWriteForwarding, forKey: ClientRuntime.Key("SupportsLocalWriteForwarding"))
        }
        if let supportsLogExportsToCloudwatchLogs = supportsLogExportsToCloudwatchLogs {
            try container.encode(supportsLogExportsToCloudwatchLogs, forKey: ClientRuntime.Key("SupportsLogExportsToCloudwatchLogs"))
        }
        if let supportsParallelQuery = supportsParallelQuery {
            try container.encode(supportsParallelQuery, forKey: ClientRuntime.Key("SupportsParallelQuery"))
        }
        if let supportsReadReplica = supportsReadReplica {
            try container.encode(supportsReadReplica, forKey: ClientRuntime.Key("SupportsReadReplica"))
        }
        if let tagList = tagList {
            if !tagList.isEmpty {
                var tagListContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("TagList"))
                for (index0, tag0) in tagList.enumerated() {
                    try tagListContainer.encode(tag0, forKey: ClientRuntime.Key("Tag.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var tagListContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("TagList"))
                try tagListContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let validUpgradeTarget = validUpgradeTarget {
            if !validUpgradeTarget.isEmpty {
                var validUpgradeTargetContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("ValidUpgradeTarget"))
                for (index0, upgradetarget0) in validUpgradeTarget.enumerated() {
                    try validUpgradeTargetContainer.encode(upgradetarget0, forKey: ClientRuntime.Key("UpgradeTarget.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var validUpgradeTargetContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("ValidUpgradeTarget"))
                try validUpgradeTargetContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
    }

    static var readingClosure: SmithyReadWrite.ReadingClosure<RDSClientTypes.DBEngineVersion, SmithyXML.Reader> {
        return { reader in
            guard reader.content != nil else { return nil }
            var value = RDSClientTypes.DBEngineVersion()
            value.engine = try reader["Engine"].readIfPresent()
            value.engineVersion = try reader["EngineVersion"].readIfPresent()
            value.dbParameterGroupFamily = try reader["DBParameterGroupFamily"].readIfPresent()
            value.dbEngineDescription = try reader["DBEngineDescription"].readIfPresent()
            value.dbEngineVersionDescription = try reader["DBEngineVersionDescription"].readIfPresent()
            value.defaultCharacterSet = try reader["DefaultCharacterSet"].readIfPresent(readingClosure: RDSClientTypes.CharacterSet.readingClosure)
            value.image = try reader["Image"].readIfPresent(readingClosure: RDSClientTypes.CustomDBEngineVersionAMI.readingClosure)
            value.dbEngineMediaType = try reader["DBEngineMediaType"].readIfPresent()
            value.supportedCharacterSets = try reader["SupportedCharacterSets"].readListIfPresent(memberReadingClosure: RDSClientTypes.CharacterSet.readingClosure, memberNodeInfo: "CharacterSet", isFlattened: false)
            value.supportedNcharCharacterSets = try reader["SupportedNcharCharacterSets"].readListIfPresent(memberReadingClosure: RDSClientTypes.CharacterSet.readingClosure, memberNodeInfo: "CharacterSet", isFlattened: false)
            value.validUpgradeTarget = try reader["ValidUpgradeTarget"].readListIfPresent(memberReadingClosure: RDSClientTypes.UpgradeTarget.readingClosure, memberNodeInfo: "UpgradeTarget", isFlattened: false)
            value.supportedTimezones = try reader["SupportedTimezones"].readListIfPresent(memberReadingClosure: RDSClientTypes.Timezone.readingClosure, memberNodeInfo: "Timezone", isFlattened: false)
            value.exportableLogTypes = try reader["ExportableLogTypes"].readListIfPresent(memberReadingClosure: Swift.String.readingClosure, memberNodeInfo: "member", isFlattened: false)
            value.supportsLogExportsToCloudwatchLogs = try reader["SupportsLogExportsToCloudwatchLogs"].readIfPresent()
            value.supportsReadReplica = try reader["SupportsReadReplica"].readIfPresent()
            value.supportedEngineModes = try reader["SupportedEngineModes"].readListIfPresent(memberReadingClosure: Swift.String.readingClosure, memberNodeInfo: "member", isFlattened: false)
            value.supportedFeatureNames = try reader["SupportedFeatureNames"].readListIfPresent(memberReadingClosure: Swift.String.readingClosure, memberNodeInfo: "member", isFlattened: false)
            value.status = try reader["Status"].readIfPresent()
            value.supportsParallelQuery = try reader["SupportsParallelQuery"].readIfPresent()
            value.supportsGlobalDatabases = try reader["SupportsGlobalDatabases"].readIfPresent()
            value.majorEngineVersion = try reader["MajorEngineVersion"].readIfPresent()
            value.databaseInstallationFilesS3BucketName = try reader["DatabaseInstallationFilesS3BucketName"].readIfPresent()
            value.databaseInstallationFilesS3Prefix = try reader["DatabaseInstallationFilesS3Prefix"].readIfPresent()
            value.dbEngineVersionArn = try reader["DBEngineVersionArn"].readIfPresent()
            value.kmsKeyId = try reader["KMSKeyId"].readIfPresent()
            value.createTime = try reader["CreateTime"].readTimestampIfPresent(format: .dateTime)
            value.tagList = try reader["TagList"].readListIfPresent(memberReadingClosure: RDSClientTypes.Tag.readingClosure, memberNodeInfo: "Tag", isFlattened: false)
            value.supportsBabelfish = try reader["SupportsBabelfish"].readIfPresent()
            value.customDBEngineVersionManifest = try reader["CustomDBEngineVersionManifest"].readIfPresent()
            value.supportsCertificateRotationWithoutRestart = try reader["SupportsCertificateRotationWithoutRestart"].readIfPresent()
            value.supportedCACertificateIdentifiers = try reader["SupportedCACertificateIdentifiers"].readListIfPresent(memberReadingClosure: Swift.String.readingClosure, memberNodeInfo: "member", isFlattened: false)
            value.supportsLocalWriteForwarding = try reader["SupportsLocalWriteForwarding"].readIfPresent()
            value.supportsIntegrations = try reader["SupportsIntegrations"].readIfPresent()
            return value
        }
    }
}

extension RDSClientTypes {
    /// This data type is used as a response element in the action DescribeDBEngineVersions.
    public struct DBEngineVersion: Swift.Equatable {
        /// The creation time of the DB engine version.
        public var createTime: ClientRuntime.Date?
        /// JSON string that lists the installation files and parameters that RDS Custom uses to create a custom engine version (CEV). RDS Custom applies the patches in the order in which they're listed in the manifest. You can set the Oracle home, Oracle base, and UNIX/Linux user and group using the installation parameters. For more information, see [JSON fields in the CEV manifest](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/custom-cev.preparing.html#custom-cev.preparing.manifest.fields) in the Amazon RDS User Guide.
        public var customDBEngineVersionManifest: Swift.String?
        /// The name of the Amazon S3 bucket that contains your database installation files.
        public var databaseInstallationFilesS3BucketName: Swift.String?
        /// The Amazon S3 directory that contains the database installation files. If not specified, then no prefix is assumed.
        public var databaseInstallationFilesS3Prefix: Swift.String?
        /// The description of the database engine.
        public var dbEngineDescription: Swift.String?
        /// A value that indicates the source media provider of the AMI based on the usage operation. Applicable for RDS Custom for SQL Server.
        public var dbEngineMediaType: Swift.String?
        /// The ARN of the custom engine version.
        public var dbEngineVersionArn: Swift.String?
        /// The description of the database engine version.
        public var dbEngineVersionDescription: Swift.String?
        /// The name of the DB parameter group family for the database engine.
        public var dbParameterGroupFamily: Swift.String?
        /// The default character set for new instances of this engine version, if the CharacterSetName parameter of the CreateDBInstance API isn't specified.
        public var defaultCharacterSet: RDSClientTypes.CharacterSet?
        /// The name of the database engine.
        public var engine: Swift.String?
        /// The version number of the database engine.
        public var engineVersion: Swift.String?
        /// The types of logs that the database engine has available for export to CloudWatch Logs.
        public var exportableLogTypes: [Swift.String]?
        /// The EC2 image
        public var image: RDSClientTypes.CustomDBEngineVersionAMI?
        /// The Amazon Web Services KMS key identifier for an encrypted CEV. This parameter is required for RDS Custom, but optional for Amazon RDS.
        public var kmsKeyId: Swift.String?
        /// The major engine version of the CEV.
        public var majorEngineVersion: Swift.String?
        /// The status of the DB engine version, either available or deprecated.
        public var status: Swift.String?
        /// A list of the supported CA certificate identifiers. For more information, see [Using SSL/TLS to encrypt a connection to a DB instance](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.SSL.html) in the Amazon RDS User Guide and [ Using SSL/TLS to encrypt a connection to a DB cluster](https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/UsingWithRDS.SSL.html) in the Amazon Aurora User Guide.
        public var supportedCACertificateIdentifiers: [Swift.String]?
        /// A list of the character sets supported by this engine for the CharacterSetName parameter of the CreateDBInstance operation.
        public var supportedCharacterSets: [RDSClientTypes.CharacterSet]?
        /// A list of the supported DB engine modes.
        public var supportedEngineModes: [Swift.String]?
        /// A list of features supported by the DB engine. The supported features vary by DB engine and DB engine version. To determine the supported features for a specific DB engine and DB engine version using the CLI, use the following command: aws rds describe-db-engine-versions --engine --engine-version  For example, to determine the supported features for RDS for PostgreSQL version 13.3 using the CLI, use the following command: aws rds describe-db-engine-versions --engine postgres --engine-version 13.3 The supported features are listed under SupportedFeatureNames in the output.
        public var supportedFeatureNames: [Swift.String]?
        /// A list of the character sets supported by the Oracle DB engine for the NcharCharacterSetName parameter of the CreateDBInstance operation.
        public var supportedNcharCharacterSets: [RDSClientTypes.CharacterSet]?
        /// A list of the time zones supported by this engine for the Timezone parameter of the CreateDBInstance action.
        public var supportedTimezones: [RDSClientTypes.Timezone]?
        /// Indicates whether the engine version supports Babelfish for Aurora PostgreSQL.
        public var supportsBabelfish: Swift.Bool?
        /// Indicates whether the engine version supports rotating the server certificate without rebooting the DB instance.
        public var supportsCertificateRotationWithoutRestart: Swift.Bool?
        /// Indicates whether you can use Aurora global databases with a specific DB engine version.
        public var supportsGlobalDatabases: Swift.Bool?
        /// Indicates whether the DB engine version supports zero-ETL integrations with Amazon Redshift.
        public var supportsIntegrations: Swift.Bool?
        /// Indicates whether the DB engine version supports forwarding write operations from reader DB instances to the writer DB instance in the DB cluster. By default, write operations aren't allowed on reader DB instances. Valid for: Aurora DB clusters only
        public var supportsLocalWriteForwarding: Swift.Bool?
        /// Indicates whether the engine version supports exporting the log types specified by ExportableLogTypes to CloudWatch Logs.
        public var supportsLogExportsToCloudwatchLogs: Swift.Bool?
        /// Indicates whether you can use Aurora parallel query with a specific DB engine version.
        public var supportsParallelQuery: Swift.Bool?
        /// Indicates whether the database engine version supports read replicas.
        public var supportsReadReplica: Swift.Bool?
        /// A list of tags. For more information, see [Tagging Amazon RDS Resources](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html) in the Amazon RDS User Guide.
        public var tagList: [RDSClientTypes.Tag]?
        /// A list of engine versions that this database engine version can be upgraded to.
        public var validUpgradeTarget: [RDSClientTypes.UpgradeTarget]?

        public init(
            createTime: ClientRuntime.Date? = nil,
            customDBEngineVersionManifest: Swift.String? = nil,
            databaseInstallationFilesS3BucketName: Swift.String? = nil,
            databaseInstallationFilesS3Prefix: Swift.String? = nil,
            dbEngineDescription: Swift.String? = nil,
            dbEngineMediaType: Swift.String? = nil,
            dbEngineVersionArn: Swift.String? = nil,
            dbEngineVersionDescription: Swift.String? = nil,
            dbParameterGroupFamily: Swift.String? = nil,
            defaultCharacterSet: RDSClientTypes.CharacterSet? = nil,
            engine: Swift.String? = nil,
            engineVersion: Swift.String? = nil,
            exportableLogTypes: [Swift.String]? = nil,
            image: RDSClientTypes.CustomDBEngineVersionAMI? = nil,
            kmsKeyId: Swift.String? = nil,
            majorEngineVersion: Swift.String? = nil,
            status: Swift.String? = nil,
            supportedCACertificateIdentifiers: [Swift.String]? = nil,
            supportedCharacterSets: [RDSClientTypes.CharacterSet]? = nil,
            supportedEngineModes: [Swift.String]? = nil,
            supportedFeatureNames: [Swift.String]? = nil,
            supportedNcharCharacterSets: [RDSClientTypes.CharacterSet]? = nil,
            supportedTimezones: [RDSClientTypes.Timezone]? = nil,
            supportsBabelfish: Swift.Bool? = nil,
            supportsCertificateRotationWithoutRestart: Swift.Bool? = nil,
            supportsGlobalDatabases: Swift.Bool? = nil,
            supportsIntegrations: Swift.Bool? = nil,
            supportsLocalWriteForwarding: Swift.Bool? = nil,
            supportsLogExportsToCloudwatchLogs: Swift.Bool? = nil,
            supportsParallelQuery: Swift.Bool? = nil,
            supportsReadReplica: Swift.Bool? = nil,
            tagList: [RDSClientTypes.Tag]? = nil,
            validUpgradeTarget: [RDSClientTypes.UpgradeTarget]? = nil
        )
        {
            self.createTime = createTime
            self.customDBEngineVersionManifest = customDBEngineVersionManifest
            self.databaseInstallationFilesS3BucketName = databaseInstallationFilesS3BucketName
            self.databaseInstallationFilesS3Prefix = databaseInstallationFilesS3Prefix
            self.dbEngineDescription = dbEngineDescription
            self.dbEngineMediaType = dbEngineMediaType
            self.dbEngineVersionArn = dbEngineVersionArn
            self.dbEngineVersionDescription = dbEngineVersionDescription
            self.dbParameterGroupFamily = dbParameterGroupFamily
            self.defaultCharacterSet = defaultCharacterSet
            self.engine = engine
            self.engineVersion = engineVersion
            self.exportableLogTypes = exportableLogTypes
            self.image = image
            self.kmsKeyId = kmsKeyId
            self.majorEngineVersion = majorEngineVersion
            self.status = status
            self.supportedCACertificateIdentifiers = supportedCACertificateIdentifiers
            self.supportedCharacterSets = supportedCharacterSets
            self.supportedEngineModes = supportedEngineModes
            self.supportedFeatureNames = supportedFeatureNames
            self.supportedNcharCharacterSets = supportedNcharCharacterSets
            self.supportedTimezones = supportedTimezones
            self.supportsBabelfish = supportsBabelfish
            self.supportsCertificateRotationWithoutRestart = supportsCertificateRotationWithoutRestart
            self.supportsGlobalDatabases = supportsGlobalDatabases
            self.supportsIntegrations = supportsIntegrations
            self.supportsLocalWriteForwarding = supportsLocalWriteForwarding
            self.supportsLogExportsToCloudwatchLogs = supportsLogExportsToCloudwatchLogs
            self.supportsParallelQuery = supportsParallelQuery
            self.supportsReadReplica = supportsReadReplica
            self.tagList = tagList
            self.validUpgradeTarget = validUpgradeTarget
        }
    }

}

extension RDSClientTypes.DBInstance: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case activityStreamEngineNativeAuditFieldsIncluded = "ActivityStreamEngineNativeAuditFieldsIncluded"
        case activityStreamKinesisStreamName = "ActivityStreamKinesisStreamName"
        case activityStreamKmsKeyId = "ActivityStreamKmsKeyId"
        case activityStreamMode = "ActivityStreamMode"
        case activityStreamPolicyStatus = "ActivityStreamPolicyStatus"
        case activityStreamStatus = "ActivityStreamStatus"
        case allocatedStorage = "AllocatedStorage"
        case associatedRoles = "AssociatedRoles"
        case autoMinorVersionUpgrade = "AutoMinorVersionUpgrade"
        case automaticRestartTime = "AutomaticRestartTime"
        case automationMode = "AutomationMode"
        case availabilityZone = "AvailabilityZone"
        case awsBackupRecoveryPointArn = "AwsBackupRecoveryPointArn"
        case backupRetentionPeriod = "BackupRetentionPeriod"
        case backupTarget = "BackupTarget"
        case caCertificateIdentifier = "CACertificateIdentifier"
        case certificateDetails = "CertificateDetails"
        case characterSetName = "CharacterSetName"
        case copyTagsToSnapshot = "CopyTagsToSnapshot"
        case customIamInstanceProfile = "CustomIamInstanceProfile"
        case customerOwnedIpEnabled = "CustomerOwnedIpEnabled"
        case dbClusterIdentifier = "DBClusterIdentifier"
        case dbInstanceArn = "DBInstanceArn"
        case dbInstanceAutomatedBackupsReplications = "DBInstanceAutomatedBackupsReplications"
        case dbInstanceClass = "DBInstanceClass"
        case dbInstanceIdentifier = "DBInstanceIdentifier"
        case dbInstanceStatus = "DBInstanceStatus"
        case dbName = "DBName"
        case dbParameterGroups = "DBParameterGroups"
        case dbSecurityGroups = "DBSecurityGroups"
        case dbSubnetGroup = "DBSubnetGroup"
        case dbSystemId = "DBSystemId"
        case dbInstancePort = "DbInstancePort"
        case dbiResourceId = "DbiResourceId"
        case dedicatedLogVolume = "DedicatedLogVolume"
        case deletionProtection = "DeletionProtection"
        case domainMemberships = "DomainMemberships"
        case enabledCloudwatchLogsExports = "EnabledCloudwatchLogsExports"
        case endpoint = "Endpoint"
        case engine = "Engine"
        case engineVersion = "EngineVersion"
        case enhancedMonitoringResourceArn = "EnhancedMonitoringResourceArn"
        case iamDatabaseAuthenticationEnabled = "IAMDatabaseAuthenticationEnabled"
        case instanceCreateTime = "InstanceCreateTime"
        case iops = "Iops"
        case isStorageConfigUpgradeAvailable = "IsStorageConfigUpgradeAvailable"
        case kmsKeyId = "KmsKeyId"
        case latestRestorableTime = "LatestRestorableTime"
        case licenseModel = "LicenseModel"
        case listenerEndpoint = "ListenerEndpoint"
        case masterUserSecret = "MasterUserSecret"
        case masterUsername = "MasterUsername"
        case maxAllocatedStorage = "MaxAllocatedStorage"
        case monitoringInterval = "MonitoringInterval"
        case monitoringRoleArn = "MonitoringRoleArn"
        case multiAZ = "MultiAZ"
        case multiTenant = "MultiTenant"
        case ncharCharacterSetName = "NcharCharacterSetName"
        case networkType = "NetworkType"
        case optionGroupMemberships = "OptionGroupMemberships"
        case pendingModifiedValues = "PendingModifiedValues"
        case percentProgress = "PercentProgress"
        case performanceInsightsEnabled = "PerformanceInsightsEnabled"
        case performanceInsightsKMSKeyId = "PerformanceInsightsKMSKeyId"
        case performanceInsightsRetentionPeriod = "PerformanceInsightsRetentionPeriod"
        case preferredBackupWindow = "PreferredBackupWindow"
        case preferredMaintenanceWindow = "PreferredMaintenanceWindow"
        case processorFeatures = "ProcessorFeatures"
        case promotionTier = "PromotionTier"
        case publiclyAccessible = "PubliclyAccessible"
        case readReplicaDBClusterIdentifiers = "ReadReplicaDBClusterIdentifiers"
        case readReplicaDBInstanceIdentifiers = "ReadReplicaDBInstanceIdentifiers"
        case readReplicaSourceDBClusterIdentifier = "ReadReplicaSourceDBClusterIdentifier"
        case readReplicaSourceDBInstanceIdentifier = "ReadReplicaSourceDBInstanceIdentifier"
        case replicaMode = "ReplicaMode"
        case resumeFullAutomationModeTime = "ResumeFullAutomationModeTime"
        case secondaryAvailabilityZone = "SecondaryAvailabilityZone"
        case statusInfos = "StatusInfos"
        case storageEncrypted = "StorageEncrypted"
        case storageThroughput = "StorageThroughput"
        case storageType = "StorageType"
        case tagList = "TagList"
        case tdeCredentialArn = "TdeCredentialArn"
        case timezone = "Timezone"
        case vpcSecurityGroups = "VpcSecurityGroups"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let activityStreamEngineNativeAuditFieldsIncluded = activityStreamEngineNativeAuditFieldsIncluded {
            try container.encode(activityStreamEngineNativeAuditFieldsIncluded, forKey: ClientRuntime.Key("ActivityStreamEngineNativeAuditFieldsIncluded"))
        }
        if let activityStreamKinesisStreamName = activityStreamKinesisStreamName {
            try container.encode(activityStreamKinesisStreamName, forKey: ClientRuntime.Key("ActivityStreamKinesisStreamName"))
        }
        if let activityStreamKmsKeyId = activityStreamKmsKeyId {
            try container.encode(activityStreamKmsKeyId, forKey: ClientRuntime.Key("ActivityStreamKmsKeyId"))
        }
        if let activityStreamMode = activityStreamMode {
            try container.encode(activityStreamMode, forKey: ClientRuntime.Key("ActivityStreamMode"))
        }
        if let activityStreamPolicyStatus = activityStreamPolicyStatus {
            try container.encode(activityStreamPolicyStatus, forKey: ClientRuntime.Key("ActivityStreamPolicyStatus"))
        }
        if let activityStreamStatus = activityStreamStatus {
            try container.encode(activityStreamStatus, forKey: ClientRuntime.Key("ActivityStreamStatus"))
        }
        if let allocatedStorage = allocatedStorage {
            try container.encode(allocatedStorage, forKey: ClientRuntime.Key("AllocatedStorage"))
        }
        if let associatedRoles = associatedRoles {
            if !associatedRoles.isEmpty {
                var associatedRolesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("AssociatedRoles"))
                for (index0, dbinstancerole0) in associatedRoles.enumerated() {
                    try associatedRolesContainer.encode(dbinstancerole0, forKey: ClientRuntime.Key("DBInstanceRole.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var associatedRolesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("AssociatedRoles"))
                try associatedRolesContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let autoMinorVersionUpgrade = autoMinorVersionUpgrade {
            try container.encode(autoMinorVersionUpgrade, forKey: ClientRuntime.Key("AutoMinorVersionUpgrade"))
        }
        if let automaticRestartTime = automaticRestartTime {
            try container.encodeTimestamp(automaticRestartTime, format: .dateTime, forKey: ClientRuntime.Key("AutomaticRestartTime"))
        }
        if let automationMode = automationMode {
            try container.encode(automationMode, forKey: ClientRuntime.Key("AutomationMode"))
        }
        if let availabilityZone = availabilityZone {
            try container.encode(availabilityZone, forKey: ClientRuntime.Key("AvailabilityZone"))
        }
        if let awsBackupRecoveryPointArn = awsBackupRecoveryPointArn {
            try container.encode(awsBackupRecoveryPointArn, forKey: ClientRuntime.Key("AwsBackupRecoveryPointArn"))
        }
        if let backupRetentionPeriod = backupRetentionPeriod {
            try container.encode(backupRetentionPeriod, forKey: ClientRuntime.Key("BackupRetentionPeriod"))
        }
        if let backupTarget = backupTarget {
            try container.encode(backupTarget, forKey: ClientRuntime.Key("BackupTarget"))
        }
        if let caCertificateIdentifier = caCertificateIdentifier {
            try container.encode(caCertificateIdentifier, forKey: ClientRuntime.Key("CACertificateIdentifier"))
        }
        if let certificateDetails = certificateDetails {
            try container.encode(certificateDetails, forKey: ClientRuntime.Key("CertificateDetails"))
        }
        if let characterSetName = characterSetName {
            try container.encode(characterSetName, forKey: ClientRuntime.Key("CharacterSetName"))
        }
        if let copyTagsToSnapshot = copyTagsToSnapshot {
            try container.encode(copyTagsToSnapshot, forKey: ClientRuntime.Key("CopyTagsToSnapshot"))
        }
        if let customIamInstanceProfile = customIamInstanceProfile {
            try container.encode(customIamInstanceProfile, forKey: ClientRuntime.Key("CustomIamInstanceProfile"))
        }
        if let customerOwnedIpEnabled = customerOwnedIpEnabled {
            try container.encode(customerOwnedIpEnabled, forKey: ClientRuntime.Key("CustomerOwnedIpEnabled"))
        }
        if let dbClusterIdentifier = dbClusterIdentifier {
            try container.encode(dbClusterIdentifier, forKey: ClientRuntime.Key("DBClusterIdentifier"))
        }
        if let dbInstanceArn = dbInstanceArn {
            try container.encode(dbInstanceArn, forKey: ClientRuntime.Key("DBInstanceArn"))
        }
        if let dbInstanceAutomatedBackupsReplications = dbInstanceAutomatedBackupsReplications {
            if !dbInstanceAutomatedBackupsReplications.isEmpty {
                var dbInstanceAutomatedBackupsReplicationsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("DBInstanceAutomatedBackupsReplications"))
                for (index0, dbinstanceautomatedbackupsreplication0) in dbInstanceAutomatedBackupsReplications.enumerated() {
                    try dbInstanceAutomatedBackupsReplicationsContainer.encode(dbinstanceautomatedbackupsreplication0, forKey: ClientRuntime.Key("DBInstanceAutomatedBackupsReplication.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var dbInstanceAutomatedBackupsReplicationsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("DBInstanceAutomatedBackupsReplications"))
                try dbInstanceAutomatedBackupsReplicationsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let dbInstanceClass = dbInstanceClass {
            try container.encode(dbInstanceClass, forKey: ClientRuntime.Key("DBInstanceClass"))
        }
        if let dbInstanceIdentifier = dbInstanceIdentifier {
            try container.encode(dbInstanceIdentifier, forKey: ClientRuntime.Key("DBInstanceIdentifier"))
        }
        if let dbInstanceStatus = dbInstanceStatus {
            try container.encode(dbInstanceStatus, forKey: ClientRuntime.Key("DBInstanceStatus"))
        }
        if let dbName = dbName {
            try container.encode(dbName, forKey: ClientRuntime.Key("DBName"))
        }
        if let dbParameterGroups = dbParameterGroups {
            if !dbParameterGroups.isEmpty {
                var dbParameterGroupsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("DBParameterGroups"))
                for (index0, dbparametergroupstatus0) in dbParameterGroups.enumerated() {
                    try dbParameterGroupsContainer.encode(dbparametergroupstatus0, forKey: ClientRuntime.Key("DBParameterGroup.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var dbParameterGroupsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("DBParameterGroups"))
                try dbParameterGroupsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let dbSecurityGroups = dbSecurityGroups {
            if !dbSecurityGroups.isEmpty {
                var dbSecurityGroupsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("DBSecurityGroups"))
                for (index0, dbsecuritygroupmembership0) in dbSecurityGroups.enumerated() {
                    try dbSecurityGroupsContainer.encode(dbsecuritygroupmembership0, forKey: ClientRuntime.Key("DBSecurityGroup.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var dbSecurityGroupsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("DBSecurityGroups"))
                try dbSecurityGroupsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let dbSubnetGroup = dbSubnetGroup {
            try container.encode(dbSubnetGroup, forKey: ClientRuntime.Key("DBSubnetGroup"))
        }
        if let dbSystemId = dbSystemId {
            try container.encode(dbSystemId, forKey: ClientRuntime.Key("DBSystemId"))
        }
        if let dbInstancePort = dbInstancePort {
            try container.encode(dbInstancePort, forKey: ClientRuntime.Key("DbInstancePort"))
        }
        if let dbiResourceId = dbiResourceId {
            try container.encode(dbiResourceId, forKey: ClientRuntime.Key("DbiResourceId"))
        }
        if let dedicatedLogVolume = dedicatedLogVolume {
            try container.encode(dedicatedLogVolume, forKey: ClientRuntime.Key("DedicatedLogVolume"))
        }
        if let deletionProtection = deletionProtection {
            try container.encode(deletionProtection, forKey: ClientRuntime.Key("DeletionProtection"))
        }
        if let domainMemberships = domainMemberships {
            if !domainMemberships.isEmpty {
                var domainMembershipsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("DomainMemberships"))
                for (index0, domainmembership0) in domainMemberships.enumerated() {
                    try domainMembershipsContainer.encode(domainmembership0, forKey: ClientRuntime.Key("DomainMembership.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var domainMembershipsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("DomainMemberships"))
                try domainMembershipsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let enabledCloudwatchLogsExports = enabledCloudwatchLogsExports {
            if !enabledCloudwatchLogsExports.isEmpty {
                var enabledCloudwatchLogsExportsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("EnabledCloudwatchLogsExports"))
                for (index0, string0) in enabledCloudwatchLogsExports.enumerated() {
                    try enabledCloudwatchLogsExportsContainer.encode(string0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var enabledCloudwatchLogsExportsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("EnabledCloudwatchLogsExports"))
                try enabledCloudwatchLogsExportsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let endpoint = endpoint {
            try container.encode(endpoint, forKey: ClientRuntime.Key("Endpoint"))
        }
        if let engine = engine {
            try container.encode(engine, forKey: ClientRuntime.Key("Engine"))
        }
        if let engineVersion = engineVersion {
            try container.encode(engineVersion, forKey: ClientRuntime.Key("EngineVersion"))
        }
        if let enhancedMonitoringResourceArn = enhancedMonitoringResourceArn {
            try container.encode(enhancedMonitoringResourceArn, forKey: ClientRuntime.Key("EnhancedMonitoringResourceArn"))
        }
        if let iamDatabaseAuthenticationEnabled = iamDatabaseAuthenticationEnabled {
            try container.encode(iamDatabaseAuthenticationEnabled, forKey: ClientRuntime.Key("IAMDatabaseAuthenticationEnabled"))
        }
        if let instanceCreateTime = instanceCreateTime {
            try container.encodeTimestamp(instanceCreateTime, format: .dateTime, forKey: ClientRuntime.Key("InstanceCreateTime"))
        }
        if let iops = iops {
            try container.encode(iops, forKey: ClientRuntime.Key("Iops"))
        }
        if let isStorageConfigUpgradeAvailable = isStorageConfigUpgradeAvailable {
            try container.encode(isStorageConfigUpgradeAvailable, forKey: ClientRuntime.Key("IsStorageConfigUpgradeAvailable"))
        }
        if let kmsKeyId = kmsKeyId {
            try container.encode(kmsKeyId, forKey: ClientRuntime.Key("KmsKeyId"))
        }
        if let latestRestorableTime = latestRestorableTime {
            try container.encodeTimestamp(latestRestorableTime, format: .dateTime, forKey: ClientRuntime.Key("LatestRestorableTime"))
        }
        if let licenseModel = licenseModel {
            try container.encode(licenseModel, forKey: ClientRuntime.Key("LicenseModel"))
        }
        if let listenerEndpoint = listenerEndpoint {
            try container.encode(listenerEndpoint, forKey: ClientRuntime.Key("ListenerEndpoint"))
        }
        if let masterUserSecret = masterUserSecret {
            try container.encode(masterUserSecret, forKey: ClientRuntime.Key("MasterUserSecret"))
        }
        if let masterUsername = masterUsername {
            try container.encode(masterUsername, forKey: ClientRuntime.Key("MasterUsername"))
        }
        if let maxAllocatedStorage = maxAllocatedStorage {
            try container.encode(maxAllocatedStorage, forKey: ClientRuntime.Key("MaxAllocatedStorage"))
        }
        if let monitoringInterval = monitoringInterval {
            try container.encode(monitoringInterval, forKey: ClientRuntime.Key("MonitoringInterval"))
        }
        if let monitoringRoleArn = monitoringRoleArn {
            try container.encode(monitoringRoleArn, forKey: ClientRuntime.Key("MonitoringRoleArn"))
        }
        if let multiAZ = multiAZ {
            try container.encode(multiAZ, forKey: ClientRuntime.Key("MultiAZ"))
        }
        if let multiTenant = multiTenant {
            try container.encode(multiTenant, forKey: ClientRuntime.Key("MultiTenant"))
        }
        if let ncharCharacterSetName = ncharCharacterSetName {
            try container.encode(ncharCharacterSetName, forKey: ClientRuntime.Key("NcharCharacterSetName"))
        }
        if let networkType = networkType {
            try container.encode(networkType, forKey: ClientRuntime.Key("NetworkType"))
        }
        if let optionGroupMemberships = optionGroupMemberships {
            if !optionGroupMemberships.isEmpty {
                var optionGroupMembershipsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("OptionGroupMemberships"))
                for (index0, optiongroupmembership0) in optionGroupMemberships.enumerated() {
                    try optionGroupMembershipsContainer.encode(optiongroupmembership0, forKey: ClientRuntime.Key("OptionGroupMembership.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var optionGroupMembershipsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("OptionGroupMemberships"))
                try optionGroupMembershipsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let pendingModifiedValues = pendingModifiedValues {
            try container.encode(pendingModifiedValues, forKey: ClientRuntime.Key("PendingModifiedValues"))
        }
        if let percentProgress = percentProgress {
            try container.encode(percentProgress, forKey: ClientRuntime.Key("PercentProgress"))
        }
        if let performanceInsightsEnabled = performanceInsightsEnabled {
            try container.encode(performanceInsightsEnabled, forKey: ClientRuntime.Key("PerformanceInsightsEnabled"))
        }
        if let performanceInsightsKMSKeyId = performanceInsightsKMSKeyId {
            try container.encode(performanceInsightsKMSKeyId, forKey: ClientRuntime.Key("PerformanceInsightsKMSKeyId"))
        }
        if let performanceInsightsRetentionPeriod = performanceInsightsRetentionPeriod {
            try container.encode(performanceInsightsRetentionPeriod, forKey: ClientRuntime.Key("PerformanceInsightsRetentionPeriod"))
        }
        if let preferredBackupWindow = preferredBackupWindow {
            try container.encode(preferredBackupWindow, forKey: ClientRuntime.Key("PreferredBackupWindow"))
        }
        if let preferredMaintenanceWindow = preferredMaintenanceWindow {
            try container.encode(preferredMaintenanceWindow, forKey: ClientRuntime.Key("PreferredMaintenanceWindow"))
        }
        if let processorFeatures = processorFeatures {
            if !processorFeatures.isEmpty {
                var processorFeaturesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("ProcessorFeatures"))
                for (index0, processorfeature0) in processorFeatures.enumerated() {
                    try processorFeaturesContainer.encode(processorfeature0, forKey: ClientRuntime.Key("ProcessorFeature.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var processorFeaturesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("ProcessorFeatures"))
                try processorFeaturesContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let promotionTier = promotionTier {
            try container.encode(promotionTier, forKey: ClientRuntime.Key("PromotionTier"))
        }
        if let publiclyAccessible = publiclyAccessible {
            try container.encode(publiclyAccessible, forKey: ClientRuntime.Key("PubliclyAccessible"))
        }
        if let readReplicaDBClusterIdentifiers = readReplicaDBClusterIdentifiers {
            if !readReplicaDBClusterIdentifiers.isEmpty {
                var readReplicaDBClusterIdentifiersContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("ReadReplicaDBClusterIdentifiers"))
                for (index0, string0) in readReplicaDBClusterIdentifiers.enumerated() {
                    try readReplicaDBClusterIdentifiersContainer.encode(string0, forKey: ClientRuntime.Key("ReadReplicaDBClusterIdentifier.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var readReplicaDBClusterIdentifiersContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("ReadReplicaDBClusterIdentifiers"))
                try readReplicaDBClusterIdentifiersContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let readReplicaDBInstanceIdentifiers = readReplicaDBInstanceIdentifiers {
            if !readReplicaDBInstanceIdentifiers.isEmpty {
                var readReplicaDBInstanceIdentifiersContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("ReadReplicaDBInstanceIdentifiers"))
                for (index0, string0) in readReplicaDBInstanceIdentifiers.enumerated() {
                    try readReplicaDBInstanceIdentifiersContainer.encode(string0, forKey: ClientRuntime.Key("ReadReplicaDBInstanceIdentifier.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var readReplicaDBInstanceIdentifiersContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("ReadReplicaDBInstanceIdentifiers"))
                try readReplicaDBInstanceIdentifiersContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let readReplicaSourceDBClusterIdentifier = readReplicaSourceDBClusterIdentifier {
            try container.encode(readReplicaSourceDBClusterIdentifier, forKey: ClientRuntime.Key("ReadReplicaSourceDBClusterIdentifier"))
        }
        if let readReplicaSourceDBInstanceIdentifier = readReplicaSourceDBInstanceIdentifier {
            try container.encode(readReplicaSourceDBInstanceIdentifier, forKey: ClientRuntime.Key("ReadReplicaSourceDBInstanceIdentifier"))
        }
        if let replicaMode = replicaMode {
            try container.encode(replicaMode, forKey: ClientRuntime.Key("ReplicaMode"))
        }
        if let resumeFullAutomationModeTime = resumeFullAutomationModeTime {
            try container.encodeTimestamp(resumeFullAutomationModeTime, format: .dateTime, forKey: ClientRuntime.Key("ResumeFullAutomationModeTime"))
        }
        if let secondaryAvailabilityZone = secondaryAvailabilityZone {
            try container.encode(secondaryAvailabilityZone, forKey: ClientRuntime.Key("SecondaryAvailabilityZone"))
        }
        if let statusInfos = statusInfos {
            if !statusInfos.isEmpty {
                var statusInfosContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("StatusInfos"))
                for (index0, dbinstancestatusinfo0) in statusInfos.enumerated() {
                    try statusInfosContainer.encode(dbinstancestatusinfo0, forKey: ClientRuntime.Key("DBInstanceStatusInfo.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var statusInfosContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("StatusInfos"))
                try statusInfosContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let storageEncrypted = storageEncrypted {
            try container.encode(storageEncrypted, forKey: ClientRuntime.Key("StorageEncrypted"))
        }
        if let storageThroughput = storageThroughput {
            try container.encode(storageThroughput, forKey: ClientRuntime.Key("StorageThroughput"))
        }
        if let storageType = storageType {
            try container.encode(storageType, forKey: ClientRuntime.Key("StorageType"))
        }
        if let tagList = tagList {
            if !tagList.isEmpty {
                var tagListContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("TagList"))
                for (index0, tag0) in tagList.enumerated() {
                    try tagListContainer.encode(tag0, forKey: ClientRuntime.Key("Tag.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var tagListContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("TagList"))
                try tagListContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let tdeCredentialArn = tdeCredentialArn {
            try container.encode(tdeCredentialArn, forKey: ClientRuntime.Key("TdeCredentialArn"))
        }
        if let timezone = timezone {
            try container.encode(timezone, forKey: ClientRuntime.Key("Timezone"))
        }
        if let vpcSecurityGroups = vpcSecurityGroups {
            if !vpcSecurityGroups.isEmpty {
                var vpcSecurityGroupsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("VpcSecurityGroups"))
                for (index0, vpcsecuritygroupmembership0) in vpcSecurityGroups.enumerated() {
                    try vpcSecurityGroupsContainer.encode(vpcsecuritygroupmembership0, forKey: ClientRuntime.Key("VpcSecurityGroupMembership.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var vpcSecurityGroupsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("VpcSecurityGroups"))
                try vpcSecurityGroupsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
    }

    static var readingClosure: SmithyReadWrite.ReadingClosure<RDSClientTypes.DBInstance, SmithyXML.Reader> {
        return { reader in
            guard reader.content != nil else { return nil }
            var value = RDSClientTypes.DBInstance()
            value.dbInstanceIdentifier = try reader["DBInstanceIdentifier"].readIfPresent()
            value.dbInstanceClass = try reader["DBInstanceClass"].readIfPresent()
            value.engine = try reader["Engine"].readIfPresent()
            value.dbInstanceStatus = try reader["DBInstanceStatus"].readIfPresent()
            value.automaticRestartTime = try reader["AutomaticRestartTime"].readTimestampIfPresent(format: .dateTime)
            value.masterUsername = try reader["MasterUsername"].readIfPresent()
            value.dbName = try reader["DBName"].readIfPresent()
            value.endpoint = try reader["Endpoint"].readIfPresent(readingClosure: RDSClientTypes.Endpoint.readingClosure)
            value.allocatedStorage = try reader["AllocatedStorage"].readIfPresent()
            value.instanceCreateTime = try reader["InstanceCreateTime"].readTimestampIfPresent(format: .dateTime)
            value.preferredBackupWindow = try reader["PreferredBackupWindow"].readIfPresent()
            value.backupRetentionPeriod = try reader["BackupRetentionPeriod"].readIfPresent()
            value.dbSecurityGroups = try reader["DBSecurityGroups"].readListIfPresent(memberReadingClosure: RDSClientTypes.DBSecurityGroupMembership.readingClosure, memberNodeInfo: "DBSecurityGroup", isFlattened: false)
            value.vpcSecurityGroups = try reader["VpcSecurityGroups"].readListIfPresent(memberReadingClosure: RDSClientTypes.VpcSecurityGroupMembership.readingClosure, memberNodeInfo: "VpcSecurityGroupMembership", isFlattened: false)
            value.dbParameterGroups = try reader["DBParameterGroups"].readListIfPresent(memberReadingClosure: RDSClientTypes.DBParameterGroupStatus.readingClosure, memberNodeInfo: "DBParameterGroup", isFlattened: false)
            value.availabilityZone = try reader["AvailabilityZone"].readIfPresent()
            value.dbSubnetGroup = try reader["DBSubnetGroup"].readIfPresent(readingClosure: RDSClientTypes.DBSubnetGroup.readingClosure)
            value.preferredMaintenanceWindow = try reader["PreferredMaintenanceWindow"].readIfPresent()
            value.pendingModifiedValues = try reader["PendingModifiedValues"].readIfPresent(readingClosure: RDSClientTypes.PendingModifiedValues.readingClosure)
            value.latestRestorableTime = try reader["LatestRestorableTime"].readTimestampIfPresent(format: .dateTime)
            value.multiAZ = try reader["MultiAZ"].readIfPresent()
            value.engineVersion = try reader["EngineVersion"].readIfPresent()
            value.autoMinorVersionUpgrade = try reader["AutoMinorVersionUpgrade"].readIfPresent()
            value.readReplicaSourceDBInstanceIdentifier = try reader["ReadReplicaSourceDBInstanceIdentifier"].readIfPresent()
            value.readReplicaDBInstanceIdentifiers = try reader["ReadReplicaDBInstanceIdentifiers"].readListIfPresent(memberReadingClosure: Swift.String.readingClosure, memberNodeInfo: "ReadReplicaDBInstanceIdentifier", isFlattened: false)
            value.readReplicaDBClusterIdentifiers = try reader["ReadReplicaDBClusterIdentifiers"].readListIfPresent(memberReadingClosure: Swift.String.readingClosure, memberNodeInfo: "ReadReplicaDBClusterIdentifier", isFlattened: false)
            value.replicaMode = try reader["ReplicaMode"].readIfPresent()
            value.licenseModel = try reader["LicenseModel"].readIfPresent()
            value.iops = try reader["Iops"].readIfPresent()
            value.optionGroupMemberships = try reader["OptionGroupMemberships"].readListIfPresent(memberReadingClosure: RDSClientTypes.OptionGroupMembership.readingClosure, memberNodeInfo: "OptionGroupMembership", isFlattened: false)
            value.characterSetName = try reader["CharacterSetName"].readIfPresent()
            value.ncharCharacterSetName = try reader["NcharCharacterSetName"].readIfPresent()
            value.secondaryAvailabilityZone = try reader["SecondaryAvailabilityZone"].readIfPresent()
            value.publiclyAccessible = try reader["PubliclyAccessible"].readIfPresent()
            value.statusInfos = try reader["StatusInfos"].readListIfPresent(memberReadingClosure: RDSClientTypes.DBInstanceStatusInfo.readingClosure, memberNodeInfo: "DBInstanceStatusInfo", isFlattened: false)
            value.storageType = try reader["StorageType"].readIfPresent()
            value.tdeCredentialArn = try reader["TdeCredentialArn"].readIfPresent()
            value.dbInstancePort = try reader["DbInstancePort"].readIfPresent()
            value.dbClusterIdentifier = try reader["DBClusterIdentifier"].readIfPresent()
            value.storageEncrypted = try reader["StorageEncrypted"].readIfPresent()
            value.kmsKeyId = try reader["KmsKeyId"].readIfPresent()
            value.dbiResourceId = try reader["DbiResourceId"].readIfPresent()
            value.caCertificateIdentifier = try reader["CACertificateIdentifier"].readIfPresent()
            value.domainMemberships = try reader["DomainMemberships"].readListIfPresent(memberReadingClosure: RDSClientTypes.DomainMembership.readingClosure, memberNodeInfo: "DomainMembership", isFlattened: false)
            value.copyTagsToSnapshot = try reader["CopyTagsToSnapshot"].readIfPresent()
            value.monitoringInterval = try reader["MonitoringInterval"].readIfPresent()
            value.enhancedMonitoringResourceArn = try reader["EnhancedMonitoringResourceArn"].readIfPresent()
            value.monitoringRoleArn = try reader["MonitoringRoleArn"].readIfPresent()
            value.promotionTier = try reader["PromotionTier"].readIfPresent()
            value.dbInstanceArn = try reader["DBInstanceArn"].readIfPresent()
            value.timezone = try reader["Timezone"].readIfPresent()
            value.iamDatabaseAuthenticationEnabled = try reader["IAMDatabaseAuthenticationEnabled"].readIfPresent()
            value.performanceInsightsEnabled = try reader["PerformanceInsightsEnabled"].readIfPresent()
            value.performanceInsightsKMSKeyId = try reader["PerformanceInsightsKMSKeyId"].readIfPresent()
            value.performanceInsightsRetentionPeriod = try reader["PerformanceInsightsRetentionPeriod"].readIfPresent()
            value.enabledCloudwatchLogsExports = try reader["EnabledCloudwatchLogsExports"].readListIfPresent(memberReadingClosure: Swift.String.readingClosure, memberNodeInfo: "member", isFlattened: false)
            value.processorFeatures = try reader["ProcessorFeatures"].readListIfPresent(memberReadingClosure: RDSClientTypes.ProcessorFeature.readingClosure, memberNodeInfo: "ProcessorFeature", isFlattened: false)
            value.deletionProtection = try reader["DeletionProtection"].readIfPresent()
            value.associatedRoles = try reader["AssociatedRoles"].readListIfPresent(memberReadingClosure: RDSClientTypes.DBInstanceRole.readingClosure, memberNodeInfo: "DBInstanceRole", isFlattened: false)
            value.listenerEndpoint = try reader["ListenerEndpoint"].readIfPresent(readingClosure: RDSClientTypes.Endpoint.readingClosure)
            value.maxAllocatedStorage = try reader["MaxAllocatedStorage"].readIfPresent()
            value.tagList = try reader["TagList"].readListIfPresent(memberReadingClosure: RDSClientTypes.Tag.readingClosure, memberNodeInfo: "Tag", isFlattened: false)
            value.dbInstanceAutomatedBackupsReplications = try reader["DBInstanceAutomatedBackupsReplications"].readListIfPresent(memberReadingClosure: RDSClientTypes.DBInstanceAutomatedBackupsReplication.readingClosure, memberNodeInfo: "DBInstanceAutomatedBackupsReplication", isFlattened: false)
            value.customerOwnedIpEnabled = try reader["CustomerOwnedIpEnabled"].readIfPresent()
            value.awsBackupRecoveryPointArn = try reader["AwsBackupRecoveryPointArn"].readIfPresent()
            value.activityStreamStatus = try reader["ActivityStreamStatus"].readIfPresent()
            value.activityStreamKmsKeyId = try reader["ActivityStreamKmsKeyId"].readIfPresent()
            value.activityStreamKinesisStreamName = try reader["ActivityStreamKinesisStreamName"].readIfPresent()
            value.activityStreamMode = try reader["ActivityStreamMode"].readIfPresent()
            value.activityStreamEngineNativeAuditFieldsIncluded = try reader["ActivityStreamEngineNativeAuditFieldsIncluded"].readIfPresent()
            value.automationMode = try reader["AutomationMode"].readIfPresent()
            value.resumeFullAutomationModeTime = try reader["ResumeFullAutomationModeTime"].readTimestampIfPresent(format: .dateTime)
            value.customIamInstanceProfile = try reader["CustomIamInstanceProfile"].readIfPresent()
            value.backupTarget = try reader["BackupTarget"].readIfPresent()
            value.networkType = try reader["NetworkType"].readIfPresent()
            value.activityStreamPolicyStatus = try reader["ActivityStreamPolicyStatus"].readIfPresent()
            value.storageThroughput = try reader["StorageThroughput"].readIfPresent()
            value.dbSystemId = try reader["DBSystemId"].readIfPresent()
            value.masterUserSecret = try reader["MasterUserSecret"].readIfPresent(readingClosure: RDSClientTypes.MasterUserSecret.readingClosure)
            value.certificateDetails = try reader["CertificateDetails"].readIfPresent(readingClosure: RDSClientTypes.CertificateDetails.readingClosure)
            value.readReplicaSourceDBClusterIdentifier = try reader["ReadReplicaSourceDBClusterIdentifier"].readIfPresent()
            value.percentProgress = try reader["PercentProgress"].readIfPresent()
            value.dedicatedLogVolume = try reader["DedicatedLogVolume"].readIfPresent()
            value.isStorageConfigUpgradeAvailable = try reader["IsStorageConfigUpgradeAvailable"].readIfPresent()
            value.multiTenant = try reader["MultiTenant"].readIfPresent()
            return value
        }
    }
}

extension RDSClientTypes {
    /// Contains the details of an Amazon RDS DB instance. This data type is used as a response element in the operations CreateDBInstance, CreateDBInstanceReadReplica, DeleteDBInstance, DescribeDBInstances, ModifyDBInstance, PromoteReadReplica, RebootDBInstance, RestoreDBInstanceFromDBSnapshot, RestoreDBInstanceFromS3, RestoreDBInstanceToPointInTime, StartDBInstance, and StopDBInstance.
    public struct DBInstance: Swift.Equatable {
        /// Indicates whether engine-native audit fields are included in the database activity stream.
        public var activityStreamEngineNativeAuditFieldsIncluded: Swift.Bool?
        /// The name of the Amazon Kinesis data stream used for the database activity stream.
        public var activityStreamKinesisStreamName: Swift.String?
        /// The Amazon Web Services KMS key identifier used for encrypting messages in the database activity stream. The Amazon Web Services KMS key identifier is the key ARN, key ID, alias ARN, or alias name for the KMS key.
        public var activityStreamKmsKeyId: Swift.String?
        /// The mode of the database activity stream. Database events such as a change or access generate an activity stream event. RDS for Oracle always handles these events asynchronously.
        public var activityStreamMode: RDSClientTypes.ActivityStreamMode?
        /// The status of the policy state of the activity stream.
        public var activityStreamPolicyStatus: RDSClientTypes.ActivityStreamPolicyStatus?
        /// The status of the database activity stream.
        public var activityStreamStatus: RDSClientTypes.ActivityStreamStatus?
        /// The amount of storage in gibibytes (GiB) allocated for the DB instance.
        public var allocatedStorage: Swift.Int?
        /// The Amazon Web Services Identity and Access Management (IAM) roles associated with the DB instance.
        public var associatedRoles: [RDSClientTypes.DBInstanceRole]?
        /// Indicates whether minor version patches are applied automatically.
        public var autoMinorVersionUpgrade: Swift.Bool?
        /// The time when a stopped DB instance is restarted automatically.
        public var automaticRestartTime: ClientRuntime.Date?
        /// The automation mode of the RDS Custom DB instance: full or all paused. If full, the DB instance automates monitoring and instance recovery. If all paused, the instance pauses automation for the duration set by --resume-full-automation-mode-minutes.
        public var automationMode: RDSClientTypes.AutomationMode?
        /// The name of the Availability Zone where the DB instance is located.
        public var availabilityZone: Swift.String?
        /// The Amazon Resource Name (ARN) of the recovery point in Amazon Web Services Backup.
        public var awsBackupRecoveryPointArn: Swift.String?
        /// The number of days for which automatic DB snapshots are retained.
        public var backupRetentionPeriod: Swift.Int?
        /// The location where automated backups and manual snapshots are stored: Amazon Web Services Outposts or the Amazon Web Services Region.
        public var backupTarget: Swift.String?
        /// The identifier of the CA certificate for this DB instance. For more information, see [Using SSL/TLS to encrypt a connection to a DB instance](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.SSL.html) in the Amazon RDS User Guide and [ Using SSL/TLS to encrypt a connection to a DB cluster](https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/UsingWithRDS.SSL.html) in the Amazon Aurora User Guide.
        public var caCertificateIdentifier: Swift.String?
        /// The details of the DB instance's server certificate.
        public var certificateDetails: RDSClientTypes.CertificateDetails?
        /// If present, specifies the name of the character set that this instance is associated with.
        public var characterSetName: Swift.String?
        /// Indicates whether tags are copied from the DB instance to snapshots of the DB instance. This setting doesn't apply to Amazon Aurora DB instances. Copying tags to snapshots is managed by the DB cluster. Setting this value for an Aurora DB instance has no effect on the DB cluster setting. For more information, see DBCluster.
        public var copyTagsToSnapshot: Swift.Bool?
        /// The instance profile associated with the underlying Amazon EC2 instance of an RDS Custom DB instance. The instance profile must meet the following requirements:
        ///
        /// * The profile must exist in your account.
        ///
        /// * The profile must have an IAM role that Amazon EC2 has permissions to assume.
        ///
        /// * The instance profile name and the associated IAM role name must start with the prefix AWSRDSCustom.
        ///
        ///
        /// For the list of permissions required for the IAM role, see [ Configure IAM and your VPC](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/custom-setup-orcl.html#custom-setup-orcl.iam-vpc) in the Amazon RDS User Guide.
        public var customIamInstanceProfile: Swift.String?
        /// Indicates whether a customer-owned IP address (CoIP) is enabled for an RDS on Outposts DB instance. A CoIP provides local or external connectivity to resources in your Outpost subnets through your on-premises network. For some use cases, a CoIP can provide lower latency for connections to the DB instance from outside of its virtual private cloud (VPC) on your local network. For more information about RDS on Outposts, see [Working with Amazon RDS on Amazon Web Services Outposts](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/rds-on-outposts.html) in the Amazon RDS User Guide. For more information about CoIPs, see [Customer-owned IP addresses](https://docs.aws.amazon.com/outposts/latest/userguide/routing.html#ip-addressing) in the Amazon Web Services Outposts User Guide.
        public var customerOwnedIpEnabled: Swift.Bool?
        /// If the DB instance is a member of a DB cluster, indicates the name of the DB cluster that the DB instance is a member of.
        public var dbClusterIdentifier: Swift.String?
        /// The Amazon Resource Name (ARN) for the DB instance.
        public var dbInstanceArn: Swift.String?
        /// The list of replicated automated backups associated with the DB instance.
        public var dbInstanceAutomatedBackupsReplications: [RDSClientTypes.DBInstanceAutomatedBackupsReplication]?
        /// The name of the compute and memory capacity class of the DB instance.
        public var dbInstanceClass: Swift.String?
        /// The user-supplied database identifier. This identifier is the unique key that identifies a DB instance.
        public var dbInstanceIdentifier: Swift.String?
        /// The port that the DB instance listens on. If the DB instance is part of a DB cluster, this can be a different port than the DB cluster port.
        public var dbInstancePort: Swift.Int?
        /// The current state of this database. For information about DB instance statuses, see [Viewing DB instance status](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/accessing-monitoring.html#Overview.DBInstance.Status) in the Amazon RDS User Guide.
        public var dbInstanceStatus: Swift.String?
        /// The initial database name that you provided (if required) when you created the DB instance. This name is returned for the life of your DB instance. For an RDS for Oracle CDB instance, the name identifies the PDB rather than the CDB.
        public var dbName: Swift.String?
        /// The list of DB parameter groups applied to this DB instance.
        public var dbParameterGroups: [RDSClientTypes.DBParameterGroupStatus]?
        /// A list of DB security group elements containing DBSecurityGroup.Name and DBSecurityGroup.Status subelements.
        public var dbSecurityGroups: [RDSClientTypes.DBSecurityGroupMembership]?
        /// Information about the subnet group associated with the DB instance, including the name, description, and subnets in the subnet group.
        public var dbSubnetGroup: RDSClientTypes.DBSubnetGroup?
        /// The Oracle system ID (Oracle SID) for a container database (CDB). The Oracle SID is also the name of the CDB. This setting is only valid for RDS Custom DB instances.
        public var dbSystemId: Swift.String?
        /// The Amazon Web Services Region-unique, immutable identifier for the DB instance. This identifier is found in Amazon Web Services CloudTrail log entries whenever the Amazon Web Services KMS key for the DB instance is accessed.
        public var dbiResourceId: Swift.String?
        /// Indicates whether the DB instance has a dedicated log volume (DLV) enabled.
        public var dedicatedLogVolume: Swift.Bool?
        /// Indicates whether the DB instance has deletion protection enabled. The database can't be deleted when deletion protection is enabled. For more information, see [ Deleting a DB Instance](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_DeleteInstance.html).
        public var deletionProtection: Swift.Bool?
        /// The Active Directory Domain membership records associated with the DB instance.
        public var domainMemberships: [RDSClientTypes.DomainMembership]?
        /// A list of log types that this DB instance is configured to export to CloudWatch Logs. Log types vary by DB engine. For information about the log types for each DB engine, see [Monitoring Amazon RDS log files](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html) in the Amazon RDS User Guide.
        public var enabledCloudwatchLogsExports: [Swift.String]?
        /// The connection endpoint for the DB instance. The endpoint might not be shown for instances with the status of creating.
        public var endpoint: RDSClientTypes.Endpoint?
        /// The database engine used for this DB instance.
        public var engine: Swift.String?
        /// The version of the database engine.
        public var engineVersion: Swift.String?
        /// The Amazon Resource Name (ARN) of the Amazon CloudWatch Logs log stream that receives the Enhanced Monitoring metrics data for the DB instance.
        public var enhancedMonitoringResourceArn: Swift.String?
        /// Indicates whether mapping of Amazon Web Services Identity and Access Management (IAM) accounts to database accounts is enabled for the DB instance. For a list of engine versions that support IAM database authentication, see [IAM database authentication](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.RDS_Fea_Regions_DB-eng.Feature.IamDatabaseAuthentication.html) in the Amazon RDS User Guide and [IAM database authentication in Aurora](https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/Concepts.Aurora_Fea_Regions_DB-eng.Feature.IAMdbauth.html) in the Amazon Aurora User Guide.
        public var iamDatabaseAuthenticationEnabled: Swift.Bool?
        /// The date and time when the DB instance was created.
        public var instanceCreateTime: ClientRuntime.Date?
        /// The Provisioned IOPS (I/O operations per second) value for the DB instance.
        public var iops: Swift.Int?
        /// Indicates whether an upgrade is recommended for the storage file system configuration on the DB instance. To migrate to the preferred configuration, you can either create a blue/green deployment, or create a read replica from the DB instance. For more information, see [Upgrading the storage file system for a DB instance](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_PIOPS.StorageTypes.html#USER_PIOPS.UpgradeFileSystem).
        public var isStorageConfigUpgradeAvailable: Swift.Bool?
        /// If StorageEncrypted is enabled, the Amazon Web Services KMS key identifier for the encrypted DB instance. The Amazon Web Services KMS key identifier is the key ARN, key ID, alias ARN, or alias name for the KMS key.
        public var kmsKeyId: Swift.String?
        /// The latest time to which a database in this DB instance can be restored with point-in-time restore.
        public var latestRestorableTime: ClientRuntime.Date?
        /// The license model information for this DB instance. This setting doesn't apply to RDS Custom DB instances.
        public var licenseModel: Swift.String?
        /// The listener connection endpoint for SQL Server Always On.
        public var listenerEndpoint: RDSClientTypes.Endpoint?
        /// The secret managed by RDS in Amazon Web Services Secrets Manager for the master user password. For more information, see [Password management with Amazon Web Services Secrets Manager](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/rds-secrets-manager.html) in the Amazon RDS User Guide.
        public var masterUserSecret: RDSClientTypes.MasterUserSecret?
        /// The master username for the DB instance.
        public var masterUsername: Swift.String?
        /// The upper limit in gibibytes (GiB) to which Amazon RDS can automatically scale the storage of the DB instance.
        public var maxAllocatedStorage: Swift.Int?
        /// The interval, in seconds, between points when Enhanced Monitoring metrics are collected for the DB instance.
        public var monitoringInterval: Swift.Int?
        /// The ARN for the IAM role that permits RDS to send Enhanced Monitoring metrics to Amazon CloudWatch Logs.
        public var monitoringRoleArn: Swift.String?
        /// Indicates whether the DB instance is a Multi-AZ deployment. This setting doesn't apply to RDS Custom DB instances.
        public var multiAZ: Swift.Bool?
        /// Specifies whether the DB instance is in the multi-tenant configuration (TRUE) or the single-tenant configuration (FALSE).
        public var multiTenant: Swift.Bool?
        /// The name of the NCHAR character set for the Oracle DB instance. This character set specifies the Unicode encoding for data stored in table columns of type NCHAR, NCLOB, or NVARCHAR2.
        public var ncharCharacterSetName: Swift.String?
        /// The network type of the DB instance. The network type is determined by the DBSubnetGroup specified for the DB instance. A DBSubnetGroup can support only the IPv4 protocol or the IPv4 and the IPv6 protocols (DUAL). For more information, see [ Working with a DB instance in a VPC](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_VPC.WorkingWithRDSInstanceinaVPC.html) in the Amazon RDS User Guide and [ Working with a DB instance in a VPC](https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_VPC.WorkingWithRDSInstanceinaVPC.html) in the Amazon Aurora User Guide. Valid Values: IPV4 | DUAL
        public var networkType: Swift.String?
        /// The list of option group memberships for this DB instance.
        public var optionGroupMemberships: [RDSClientTypes.OptionGroupMembership]?
        /// Information about pending changes to the DB instance. This information is returned only when there are pending changes. Specific changes are identified by subelements.
        public var pendingModifiedValues: RDSClientTypes.PendingModifiedValues?
        /// The progress of the storage optimization operation as a percentage.
        public var percentProgress: Swift.String?
        /// Indicates whether Performance Insights is enabled for the DB instance.
        public var performanceInsightsEnabled: Swift.Bool?
        /// The Amazon Web Services KMS key identifier for encryption of Performance Insights data. The Amazon Web Services KMS key identifier is the key ARN, key ID, alias ARN, or alias name for the KMS key.
        public var performanceInsightsKMSKeyId: Swift.String?
        /// The number of days to retain Performance Insights data. Valid Values:
        ///
        /// * 7
        ///
        /// * month * 31, where month is a number of months from 1-23. Examples: 93 (3 months * 31), 341 (11 months * 31), 589 (19 months * 31)
        ///
        /// * 731
        ///
        ///
        /// Default: 7 days
        public var performanceInsightsRetentionPeriod: Swift.Int?
        /// The daily time range during which automated backups are created if automated backups are enabled, as determined by the BackupRetentionPeriod.
        public var preferredBackupWindow: Swift.String?
        /// The weekly time range during which system maintenance can occur, in Universal Coordinated Time (UTC).
        public var preferredMaintenanceWindow: Swift.String?
        /// The number of CPU cores and the number of threads per core for the DB instance class of the DB instance.
        public var processorFeatures: [RDSClientTypes.ProcessorFeature]?
        /// The order of priority in which an Aurora Replica is promoted to the primary instance after a failure of the existing primary instance. For more information, see [ Fault Tolerance for an Aurora DB Cluster](https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/Concepts.AuroraHighAvailability.html#Aurora.Managing.FaultTolerance) in the Amazon Aurora User Guide.
        public var promotionTier: Swift.Int?
        /// Indicates whether the DB instance is publicly accessible. When the DB cluster is publicly accessible, its Domain Name System (DNS) endpoint resolves to the private IP address from within the DB cluster's virtual private cloud (VPC). It resolves to the public IP address from outside of the DB cluster's VPC. Access to the DB cluster is ultimately controlled by the security group it uses. That public access isn't permitted if the security group assigned to the DB cluster doesn't permit it. When the DB instance isn't publicly accessible, it is an internal DB instance with a DNS name that resolves to a private IP address. For more information, see [CreateDBInstance].
        public var publiclyAccessible: Swift.Bool?
        /// The identifiers of Aurora DB clusters to which the RDS DB instance is replicated as a read replica. For example, when you create an Aurora read replica of an RDS for MySQL DB instance, the Aurora MySQL DB cluster for the Aurora read replica is shown. This output doesn't contain information about cross-Region Aurora read replicas. Currently, each RDS DB instance can have only one Aurora read replica.
        public var readReplicaDBClusterIdentifiers: [Swift.String]?
        /// The identifiers of the read replicas associated with this DB instance.
        public var readReplicaDBInstanceIdentifiers: [Swift.String]?
        /// The identifier of the source DB cluster if this DB instance is a read replica.
        public var readReplicaSourceDBClusterIdentifier: Swift.String?
        /// The identifier of the source DB instance if this DB instance is a read replica.
        public var readReplicaSourceDBInstanceIdentifier: Swift.String?
        /// The open mode of an Oracle read replica. The default is open-read-only. For more information, see [Working with Oracle Read Replicas for Amazon RDS](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/oracle-read-replicas.html) in the Amazon RDS User Guide. This attribute is only supported in RDS for Oracle.
        public var replicaMode: RDSClientTypes.ReplicaMode?
        /// The number of minutes to pause the automation. When the time period ends, RDS Custom resumes full automation. The minimum value is 60 (default). The maximum value is 1,440.
        public var resumeFullAutomationModeTime: ClientRuntime.Date?
        /// If present, specifies the name of the secondary Availability Zone for a DB instance with multi-AZ support.
        public var secondaryAvailabilityZone: Swift.String?
        /// The status of a read replica. If the DB instance isn't a read replica, the value is blank.
        public var statusInfos: [RDSClientTypes.DBInstanceStatusInfo]?
        /// Indicates whether the DB instance is encrypted.
        public var storageEncrypted: Swift.Bool?
        /// The storage throughput for the DB instance. This setting applies only to the gp3 storage type.
        public var storageThroughput: Swift.Int?
        /// The storage type associated with the DB instance.
        public var storageType: Swift.String?
        /// A list of tags. For more information, see [Tagging Amazon RDS Resources](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html) in the Amazon RDS User Guide.
        public var tagList: [RDSClientTypes.Tag]?
        /// The ARN from the key store with which the instance is associated for TDE encryption.
        public var tdeCredentialArn: Swift.String?
        /// The time zone of the DB instance. In most cases, the Timezone element is empty. Timezone content appears only for Microsoft SQL Server DB instances that were created with a time zone specified.
        public var timezone: Swift.String?
        /// The list of Amazon EC2 VPC security groups that the DB instance belongs to.
        public var vpcSecurityGroups: [RDSClientTypes.VpcSecurityGroupMembership]?

        public init(
            activityStreamEngineNativeAuditFieldsIncluded: Swift.Bool? = nil,
            activityStreamKinesisStreamName: Swift.String? = nil,
            activityStreamKmsKeyId: Swift.String? = nil,
            activityStreamMode: RDSClientTypes.ActivityStreamMode? = nil,
            activityStreamPolicyStatus: RDSClientTypes.ActivityStreamPolicyStatus? = nil,
            activityStreamStatus: RDSClientTypes.ActivityStreamStatus? = nil,
            allocatedStorage: Swift.Int? = nil,
            associatedRoles: [RDSClientTypes.DBInstanceRole]? = nil,
            autoMinorVersionUpgrade: Swift.Bool? = nil,
            automaticRestartTime: ClientRuntime.Date? = nil,
            automationMode: RDSClientTypes.AutomationMode? = nil,
            availabilityZone: Swift.String? = nil,
            awsBackupRecoveryPointArn: Swift.String? = nil,
            backupRetentionPeriod: Swift.Int? = nil,
            backupTarget: Swift.String? = nil,
            caCertificateIdentifier: Swift.String? = nil,
            certificateDetails: RDSClientTypes.CertificateDetails? = nil,
            characterSetName: Swift.String? = nil,
            copyTagsToSnapshot: Swift.Bool? = nil,
            customIamInstanceProfile: Swift.String? = nil,
            customerOwnedIpEnabled: Swift.Bool? = nil,
            dbClusterIdentifier: Swift.String? = nil,
            dbInstanceArn: Swift.String? = nil,
            dbInstanceAutomatedBackupsReplications: [RDSClientTypes.DBInstanceAutomatedBackupsReplication]? = nil,
            dbInstanceClass: Swift.String? = nil,
            dbInstanceIdentifier: Swift.String? = nil,
            dbInstancePort: Swift.Int? = nil,
            dbInstanceStatus: Swift.String? = nil,
            dbName: Swift.String? = nil,
            dbParameterGroups: [RDSClientTypes.DBParameterGroupStatus]? = nil,
            dbSecurityGroups: [RDSClientTypes.DBSecurityGroupMembership]? = nil,
            dbSubnetGroup: RDSClientTypes.DBSubnetGroup? = nil,
            dbSystemId: Swift.String? = nil,
            dbiResourceId: Swift.String? = nil,
            dedicatedLogVolume: Swift.Bool? = nil,
            deletionProtection: Swift.Bool? = nil,
            domainMemberships: [RDSClientTypes.DomainMembership]? = nil,
            enabledCloudwatchLogsExports: [Swift.String]? = nil,
            endpoint: RDSClientTypes.Endpoint? = nil,
            engine: Swift.String? = nil,
            engineVersion: Swift.String? = nil,
            enhancedMonitoringResourceArn: Swift.String? = nil,
            iamDatabaseAuthenticationEnabled: Swift.Bool? = nil,
            instanceCreateTime: ClientRuntime.Date? = nil,
            iops: Swift.Int? = nil,
            isStorageConfigUpgradeAvailable: Swift.Bool? = nil,
            kmsKeyId: Swift.String? = nil,
            latestRestorableTime: ClientRuntime.Date? = nil,
            licenseModel: Swift.String? = nil,
            listenerEndpoint: RDSClientTypes.Endpoint? = nil,
            masterUserSecret: RDSClientTypes.MasterUserSecret? = nil,
            masterUsername: Swift.String? = nil,
            maxAllocatedStorage: Swift.Int? = nil,
            monitoringInterval: Swift.Int? = nil,
            monitoringRoleArn: Swift.String? = nil,
            multiAZ: Swift.Bool? = nil,
            multiTenant: Swift.Bool? = nil,
            ncharCharacterSetName: Swift.String? = nil,
            networkType: Swift.String? = nil,
            optionGroupMemberships: [RDSClientTypes.OptionGroupMembership]? = nil,
            pendingModifiedValues: RDSClientTypes.PendingModifiedValues? = nil,
            percentProgress: Swift.String? = nil,
            performanceInsightsEnabled: Swift.Bool? = nil,
            performanceInsightsKMSKeyId: Swift.String? = nil,
            performanceInsightsRetentionPeriod: Swift.Int? = nil,
            preferredBackupWindow: Swift.String? = nil,
            preferredMaintenanceWindow: Swift.String? = nil,
            processorFeatures: [RDSClientTypes.ProcessorFeature]? = nil,
            promotionTier: Swift.Int? = nil,
            publiclyAccessible: Swift.Bool? = nil,
            readReplicaDBClusterIdentifiers: [Swift.String]? = nil,
            readReplicaDBInstanceIdentifiers: [Swift.String]? = nil,
            readReplicaSourceDBClusterIdentifier: Swift.String? = nil,
            readReplicaSourceDBInstanceIdentifier: Swift.String? = nil,
            replicaMode: RDSClientTypes.ReplicaMode? = nil,
            resumeFullAutomationModeTime: ClientRuntime.Date? = nil,
            secondaryAvailabilityZone: Swift.String? = nil,
            statusInfos: [RDSClientTypes.DBInstanceStatusInfo]? = nil,
            storageEncrypted: Swift.Bool? = nil,
            storageThroughput: Swift.Int? = nil,
            storageType: Swift.String? = nil,
            tagList: [RDSClientTypes.Tag]? = nil,
            tdeCredentialArn: Swift.String? = nil,
            timezone: Swift.String? = nil,
            vpcSecurityGroups: [RDSClientTypes.VpcSecurityGroupMembership]? = nil
        )
        {
            self.activityStreamEngineNativeAuditFieldsIncluded = activityStreamEngineNativeAuditFieldsIncluded
            self.activityStreamKinesisStreamName = activityStreamKinesisStreamName
            self.activityStreamKmsKeyId = activityStreamKmsKeyId
            self.activityStreamMode = activityStreamMode
            self.activityStreamPolicyStatus = activityStreamPolicyStatus
            self.activityStreamStatus = activityStreamStatus
            self.allocatedStorage = allocatedStorage
            self.associatedRoles = associatedRoles
            self.autoMinorVersionUpgrade = autoMinorVersionUpgrade
            self.automaticRestartTime = automaticRestartTime
            self.automationMode = automationMode
            self.availabilityZone = availabilityZone
            self.awsBackupRecoveryPointArn = awsBackupRecoveryPointArn
            self.backupRetentionPeriod = backupRetentionPeriod
            self.backupTarget = backupTarget
            self.caCertificateIdentifier = caCertificateIdentifier
            self.certificateDetails = certificateDetails
            self.characterSetName = characterSetName
            self.copyTagsToSnapshot = copyTagsToSnapshot
            self.customIamInstanceProfile = customIamInstanceProfile
            self.customerOwnedIpEnabled = customerOwnedIpEnabled
            self.dbClusterIdentifier = dbClusterIdentifier
            self.dbInstanceArn = dbInstanceArn
            self.dbInstanceAutomatedBackupsReplications = dbInstanceAutomatedBackupsReplications
            self.dbInstanceClass = dbInstanceClass
            self.dbInstanceIdentifier = dbInstanceIdentifier
            self.dbInstancePort = dbInstancePort
            self.dbInstanceStatus = dbInstanceStatus
            self.dbName = dbName
            self.dbParameterGroups = dbParameterGroups
            self.dbSecurityGroups = dbSecurityGroups
            self.dbSubnetGroup = dbSubnetGroup
            self.dbSystemId = dbSystemId
            self.dbiResourceId = dbiResourceId
            self.dedicatedLogVolume = dedicatedLogVolume
            self.deletionProtection = deletionProtection
            self.domainMemberships = domainMemberships
            self.enabledCloudwatchLogsExports = enabledCloudwatchLogsExports
            self.endpoint = endpoint
            self.engine = engine
            self.engineVersion = engineVersion
            self.enhancedMonitoringResourceArn = enhancedMonitoringResourceArn
            self.iamDatabaseAuthenticationEnabled = iamDatabaseAuthenticationEnabled
            self.instanceCreateTime = instanceCreateTime
            self.iops = iops
            self.isStorageConfigUpgradeAvailable = isStorageConfigUpgradeAvailable
            self.kmsKeyId = kmsKeyId
            self.latestRestorableTime = latestRestorableTime
            self.licenseModel = licenseModel
            self.listenerEndpoint = listenerEndpoint
            self.masterUserSecret = masterUserSecret
            self.masterUsername = masterUsername
            self.maxAllocatedStorage = maxAllocatedStorage
            self.monitoringInterval = monitoringInterval
            self.monitoringRoleArn = monitoringRoleArn
            self.multiAZ = multiAZ
            self.multiTenant = multiTenant
            self.ncharCharacterSetName = ncharCharacterSetName
            self.networkType = networkType
            self.optionGroupMemberships = optionGroupMemberships
            self.pendingModifiedValues = pendingModifiedValues
            self.percentProgress = percentProgress
            self.performanceInsightsEnabled = performanceInsightsEnabled
            self.performanceInsightsKMSKeyId = performanceInsightsKMSKeyId
            self.performanceInsightsRetentionPeriod = performanceInsightsRetentionPeriod
            self.preferredBackupWindow = preferredBackupWindow
            self.preferredMaintenanceWindow = preferredMaintenanceWindow
            self.processorFeatures = processorFeatures
            self.promotionTier = promotionTier
            self.publiclyAccessible = publiclyAccessible
            self.readReplicaDBClusterIdentifiers = readReplicaDBClusterIdentifiers
            self.readReplicaDBInstanceIdentifiers = readReplicaDBInstanceIdentifiers
            self.readReplicaSourceDBClusterIdentifier = readReplicaSourceDBClusterIdentifier
            self.readReplicaSourceDBInstanceIdentifier = readReplicaSourceDBInstanceIdentifier
            self.replicaMode = replicaMode
            self.resumeFullAutomationModeTime = resumeFullAutomationModeTime
            self.secondaryAvailabilityZone = secondaryAvailabilityZone
            self.statusInfos = statusInfos
            self.storageEncrypted = storageEncrypted
            self.storageThroughput = storageThroughput
            self.storageType = storageType
            self.tagList = tagList
            self.tdeCredentialArn = tdeCredentialArn
            self.timezone = timezone
            self.vpcSecurityGroups = vpcSecurityGroups
        }
    }

}

extension DBInstanceAlreadyExistsFault {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = DBInstanceAlreadyExistsFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// The user already has a DB instance with the given identifier.
public struct DBInstanceAlreadyExistsFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "DBInstanceAlreadyExists" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension RDSClientTypes.DBInstanceAutomatedBackup: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case allocatedStorage = "AllocatedStorage"
        case availabilityZone = "AvailabilityZone"
        case awsBackupRecoveryPointArn = "AwsBackupRecoveryPointArn"
        case backupRetentionPeriod = "BackupRetentionPeriod"
        case backupTarget = "BackupTarget"
        case dbInstanceArn = "DBInstanceArn"
        case dbInstanceAutomatedBackupsArn = "DBInstanceAutomatedBackupsArn"
        case dbInstanceAutomatedBackupsReplications = "DBInstanceAutomatedBackupsReplications"
        case dbInstanceIdentifier = "DBInstanceIdentifier"
        case dbiResourceId = "DbiResourceId"
        case dedicatedLogVolume = "DedicatedLogVolume"
        case encrypted = "Encrypted"
        case engine = "Engine"
        case engineVersion = "EngineVersion"
        case iamDatabaseAuthenticationEnabled = "IAMDatabaseAuthenticationEnabled"
        case instanceCreateTime = "InstanceCreateTime"
        case iops = "Iops"
        case kmsKeyId = "KmsKeyId"
        case licenseModel = "LicenseModel"
        case masterUsername = "MasterUsername"
        case multiTenant = "MultiTenant"
        case optionGroupName = "OptionGroupName"
        case port = "Port"
        case region = "Region"
        case restoreWindow = "RestoreWindow"
        case status = "Status"
        case storageThroughput = "StorageThroughput"
        case storageType = "StorageType"
        case tdeCredentialArn = "TdeCredentialArn"
        case timezone = "Timezone"
        case vpcId = "VpcId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let allocatedStorage = allocatedStorage {
            try container.encode(allocatedStorage, forKey: ClientRuntime.Key("AllocatedStorage"))
        }
        if let availabilityZone = availabilityZone {
            try container.encode(availabilityZone, forKey: ClientRuntime.Key("AvailabilityZone"))
        }
        if let awsBackupRecoveryPointArn = awsBackupRecoveryPointArn {
            try container.encode(awsBackupRecoveryPointArn, forKey: ClientRuntime.Key("AwsBackupRecoveryPointArn"))
        }
        if let backupRetentionPeriod = backupRetentionPeriod {
            try container.encode(backupRetentionPeriod, forKey: ClientRuntime.Key("BackupRetentionPeriod"))
        }
        if let backupTarget = backupTarget {
            try container.encode(backupTarget, forKey: ClientRuntime.Key("BackupTarget"))
        }
        if let dbInstanceArn = dbInstanceArn {
            try container.encode(dbInstanceArn, forKey: ClientRuntime.Key("DBInstanceArn"))
        }
        if let dbInstanceAutomatedBackupsArn = dbInstanceAutomatedBackupsArn {
            try container.encode(dbInstanceAutomatedBackupsArn, forKey: ClientRuntime.Key("DBInstanceAutomatedBackupsArn"))
        }
        if let dbInstanceAutomatedBackupsReplications = dbInstanceAutomatedBackupsReplications {
            if !dbInstanceAutomatedBackupsReplications.isEmpty {
                var dbInstanceAutomatedBackupsReplicationsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("DBInstanceAutomatedBackupsReplications"))
                for (index0, dbinstanceautomatedbackupsreplication0) in dbInstanceAutomatedBackupsReplications.enumerated() {
                    try dbInstanceAutomatedBackupsReplicationsContainer.encode(dbinstanceautomatedbackupsreplication0, forKey: ClientRuntime.Key("DBInstanceAutomatedBackupsReplication.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var dbInstanceAutomatedBackupsReplicationsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("DBInstanceAutomatedBackupsReplications"))
                try dbInstanceAutomatedBackupsReplicationsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let dbInstanceIdentifier = dbInstanceIdentifier {
            try container.encode(dbInstanceIdentifier, forKey: ClientRuntime.Key("DBInstanceIdentifier"))
        }
        if let dbiResourceId = dbiResourceId {
            try container.encode(dbiResourceId, forKey: ClientRuntime.Key("DbiResourceId"))
        }
        if let dedicatedLogVolume = dedicatedLogVolume {
            try container.encode(dedicatedLogVolume, forKey: ClientRuntime.Key("DedicatedLogVolume"))
        }
        if let encrypted = encrypted {
            try container.encode(encrypted, forKey: ClientRuntime.Key("Encrypted"))
        }
        if let engine = engine {
            try container.encode(engine, forKey: ClientRuntime.Key("Engine"))
        }
        if let engineVersion = engineVersion {
            try container.encode(engineVersion, forKey: ClientRuntime.Key("EngineVersion"))
        }
        if let iamDatabaseAuthenticationEnabled = iamDatabaseAuthenticationEnabled {
            try container.encode(iamDatabaseAuthenticationEnabled, forKey: ClientRuntime.Key("IAMDatabaseAuthenticationEnabled"))
        }
        if let instanceCreateTime = instanceCreateTime {
            try container.encodeTimestamp(instanceCreateTime, format: .dateTime, forKey: ClientRuntime.Key("InstanceCreateTime"))
        }
        if let iops = iops {
            try container.encode(iops, forKey: ClientRuntime.Key("Iops"))
        }
        if let kmsKeyId = kmsKeyId {
            try container.encode(kmsKeyId, forKey: ClientRuntime.Key("KmsKeyId"))
        }
        if let licenseModel = licenseModel {
            try container.encode(licenseModel, forKey: ClientRuntime.Key("LicenseModel"))
        }
        if let masterUsername = masterUsername {
            try container.encode(masterUsername, forKey: ClientRuntime.Key("MasterUsername"))
        }
        if let multiTenant = multiTenant {
            try container.encode(multiTenant, forKey: ClientRuntime.Key("MultiTenant"))
        }
        if let optionGroupName = optionGroupName {
            try container.encode(optionGroupName, forKey: ClientRuntime.Key("OptionGroupName"))
        }
        if let port = port {
            try container.encode(port, forKey: ClientRuntime.Key("Port"))
        }
        if let region = region {
            try container.encode(region, forKey: ClientRuntime.Key("Region"))
        }
        if let restoreWindow = restoreWindow {
            try container.encode(restoreWindow, forKey: ClientRuntime.Key("RestoreWindow"))
        }
        if let status = status {
            try container.encode(status, forKey: ClientRuntime.Key("Status"))
        }
        if let storageThroughput = storageThroughput {
            try container.encode(storageThroughput, forKey: ClientRuntime.Key("StorageThroughput"))
        }
        if let storageType = storageType {
            try container.encode(storageType, forKey: ClientRuntime.Key("StorageType"))
        }
        if let tdeCredentialArn = tdeCredentialArn {
            try container.encode(tdeCredentialArn, forKey: ClientRuntime.Key("TdeCredentialArn"))
        }
        if let timezone = timezone {
            try container.encode(timezone, forKey: ClientRuntime.Key("Timezone"))
        }
        if let vpcId = vpcId {
            try container.encode(vpcId, forKey: ClientRuntime.Key("VpcId"))
        }
    }

    static var readingClosure: SmithyReadWrite.ReadingClosure<RDSClientTypes.DBInstanceAutomatedBackup, SmithyXML.Reader> {
        return { reader in
            guard reader.content != nil else { return nil }
            var value = RDSClientTypes.DBInstanceAutomatedBackup()
            value.dbInstanceArn = try reader["DBInstanceArn"].readIfPresent()
            value.dbiResourceId = try reader["DbiResourceId"].readIfPresent()
            value.region = try reader["Region"].readIfPresent()
            value.dbInstanceIdentifier = try reader["DBInstanceIdentifier"].readIfPresent()
            value.restoreWindow = try reader["RestoreWindow"].readIfPresent(readingClosure: RDSClientTypes.RestoreWindow.readingClosure)
            value.allocatedStorage = try reader["AllocatedStorage"].readIfPresent()
            value.status = try reader["Status"].readIfPresent()
            value.port = try reader["Port"].readIfPresent()
            value.availabilityZone = try reader["AvailabilityZone"].readIfPresent()
            value.vpcId = try reader["VpcId"].readIfPresent()
            value.instanceCreateTime = try reader["InstanceCreateTime"].readTimestampIfPresent(format: .dateTime)
            value.masterUsername = try reader["MasterUsername"].readIfPresent()
            value.engine = try reader["Engine"].readIfPresent()
            value.engineVersion = try reader["EngineVersion"].readIfPresent()
            value.licenseModel = try reader["LicenseModel"].readIfPresent()
            value.iops = try reader["Iops"].readIfPresent()
            value.optionGroupName = try reader["OptionGroupName"].readIfPresent()
            value.tdeCredentialArn = try reader["TdeCredentialArn"].readIfPresent()
            value.encrypted = try reader["Encrypted"].readIfPresent()
            value.storageType = try reader["StorageType"].readIfPresent()
            value.kmsKeyId = try reader["KmsKeyId"].readIfPresent()
            value.timezone = try reader["Timezone"].readIfPresent()
            value.iamDatabaseAuthenticationEnabled = try reader["IAMDatabaseAuthenticationEnabled"].readIfPresent()
            value.backupRetentionPeriod = try reader["BackupRetentionPeriod"].readIfPresent()
            value.dbInstanceAutomatedBackupsArn = try reader["DBInstanceAutomatedBackupsArn"].readIfPresent()
            value.dbInstanceAutomatedBackupsReplications = try reader["DBInstanceAutomatedBackupsReplications"].readListIfPresent(memberReadingClosure: RDSClientTypes.DBInstanceAutomatedBackupsReplication.readingClosure, memberNodeInfo: "DBInstanceAutomatedBackupsReplication", isFlattened: false)
            value.backupTarget = try reader["BackupTarget"].readIfPresent()
            value.storageThroughput = try reader["StorageThroughput"].readIfPresent()
            value.awsBackupRecoveryPointArn = try reader["AwsBackupRecoveryPointArn"].readIfPresent()
            value.dedicatedLogVolume = try reader["DedicatedLogVolume"].readIfPresent()
            value.multiTenant = try reader["MultiTenant"].readIfPresent()
            return value
        }
    }
}

extension RDSClientTypes {
    /// An automated backup of a DB instance. It consists of system backups, transaction logs, and the database instance properties that existed at the time you deleted the source instance.
    public struct DBInstanceAutomatedBackup: Swift.Equatable {
        /// The allocated storage size for the the automated backup in gibibytes (GiB).
        public var allocatedStorage: Swift.Int?
        /// The Availability Zone that the automated backup was created in. For information on Amazon Web Services Regions and Availability Zones, see [Regions and Availability Zones](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.RegionsAndAvailabilityZones.html).
        public var availabilityZone: Swift.String?
        /// The Amazon Resource Name (ARN) of the recovery point in Amazon Web Services Backup.
        public var awsBackupRecoveryPointArn: Swift.String?
        /// The retention period for the automated backups.
        public var backupRetentionPeriod: Swift.Int?
        /// The location where automated backups are stored: Amazon Web Services Outposts or the Amazon Web Services Region.
        public var backupTarget: Swift.String?
        /// The Amazon Resource Name (ARN) for the automated backups.
        public var dbInstanceArn: Swift.String?
        /// The Amazon Resource Name (ARN) for the replicated automated backups.
        public var dbInstanceAutomatedBackupsArn: Swift.String?
        /// The list of replications to different Amazon Web Services Regions associated with the automated backup.
        public var dbInstanceAutomatedBackupsReplications: [RDSClientTypes.DBInstanceAutomatedBackupsReplication]?
        /// The identifier for the source DB instance, which can't be changed and which is unique to an Amazon Web Services Region.
        public var dbInstanceIdentifier: Swift.String?
        /// The resource ID for the source DB instance, which can't be changed and which is unique to an Amazon Web Services Region.
        public var dbiResourceId: Swift.String?
        /// Indicates whether the DB instance has a dedicated log volume (DLV) enabled.
        public var dedicatedLogVolume: Swift.Bool?
        /// Indicates whether the automated backup is encrypted.
        public var encrypted: Swift.Bool?
        /// The name of the database engine for this automated backup.
        public var engine: Swift.String?
        /// The version of the database engine for the automated backup.
        public var engineVersion: Swift.String?
        /// True if mapping of Amazon Web Services Identity and Access Management (IAM) accounts to database accounts is enabled, and otherwise false.
        public var iamDatabaseAuthenticationEnabled: Swift.Bool?
        /// The date and time when the DB instance was created.
        public var instanceCreateTime: ClientRuntime.Date?
        /// The IOPS (I/O operations per second) value for the automated backup.
        public var iops: Swift.Int?
        /// The Amazon Web Services KMS key ID for an automated backup. The Amazon Web Services KMS key identifier is the key ARN, key ID, alias ARN, or alias name for the KMS key.
        public var kmsKeyId: Swift.String?
        /// The license model information for the automated backup.
        public var licenseModel: Swift.String?
        /// The master user name of an automated backup.
        public var masterUsername: Swift.String?
        /// Specifies whether the automatic backup is for a DB instance in the multi-tenant configuration (TRUE) or the single-tenant configuration (FALSE).
        public var multiTenant: Swift.Bool?
        /// The option group the automated backup is associated with. If omitted, the default option group for the engine specified is used.
        public var optionGroupName: Swift.String?
        /// The port number that the automated backup used for connections. Default: Inherits from the source DB instance Valid Values: 1150-65535
        public var port: Swift.Int?
        /// The Amazon Web Services Region associated with the automated backup.
        public var region: Swift.String?
        /// The earliest and latest time a DB instance can be restored to.
        public var restoreWindow: RDSClientTypes.RestoreWindow?
        /// A list of status information for an automated backup:
        ///
        /// * active - Automated backups for current instances.
        ///
        /// * retained - Automated backups for deleted instances.
        ///
        /// * creating - Automated backups that are waiting for the first automated snapshot to be available.
        public var status: Swift.String?
        /// The storage throughput for the automated backup.
        public var storageThroughput: Swift.Int?
        /// The storage type associated with the automated backup.
        public var storageType: Swift.String?
        /// The ARN from the key store with which the automated backup is associated for TDE encryption.
        public var tdeCredentialArn: Swift.String?
        /// The time zone of the automated backup. In most cases, the Timezone element is empty. Timezone content appears only for Microsoft SQL Server DB instances that were created with a time zone specified.
        public var timezone: Swift.String?
        /// The VPC ID associated with the DB instance.
        public var vpcId: Swift.String?

        public init(
            allocatedStorage: Swift.Int? = nil,
            availabilityZone: Swift.String? = nil,
            awsBackupRecoveryPointArn: Swift.String? = nil,
            backupRetentionPeriod: Swift.Int? = nil,
            backupTarget: Swift.String? = nil,
            dbInstanceArn: Swift.String? = nil,
            dbInstanceAutomatedBackupsArn: Swift.String? = nil,
            dbInstanceAutomatedBackupsReplications: [RDSClientTypes.DBInstanceAutomatedBackupsReplication]? = nil,
            dbInstanceIdentifier: Swift.String? = nil,
            dbiResourceId: Swift.String? = nil,
            dedicatedLogVolume: Swift.Bool? = nil,
            encrypted: Swift.Bool? = nil,
            engine: Swift.String? = nil,
            engineVersion: Swift.String? = nil,
            iamDatabaseAuthenticationEnabled: Swift.Bool? = nil,
            instanceCreateTime: ClientRuntime.Date? = nil,
            iops: Swift.Int? = nil,
            kmsKeyId: Swift.String? = nil,
            licenseModel: Swift.String? = nil,
            masterUsername: Swift.String? = nil,
            multiTenant: Swift.Bool? = nil,
            optionGroupName: Swift.String? = nil,
            port: Swift.Int? = nil,
            region: Swift.String? = nil,
            restoreWindow: RDSClientTypes.RestoreWindow? = nil,
            status: Swift.String? = nil,
            storageThroughput: Swift.Int? = nil,
            storageType: Swift.String? = nil,
            tdeCredentialArn: Swift.String? = nil,
            timezone: Swift.String? = nil,
            vpcId: Swift.String? = nil
        )
        {
            self.allocatedStorage = allocatedStorage
            self.availabilityZone = availabilityZone
            self.awsBackupRecoveryPointArn = awsBackupRecoveryPointArn
            self.backupRetentionPeriod = backupRetentionPeriod
            self.backupTarget = backupTarget
            self.dbInstanceArn = dbInstanceArn
            self.dbInstanceAutomatedBackupsArn = dbInstanceAutomatedBackupsArn
            self.dbInstanceAutomatedBackupsReplications = dbInstanceAutomatedBackupsReplications
            self.dbInstanceIdentifier = dbInstanceIdentifier
            self.dbiResourceId = dbiResourceId
            self.dedicatedLogVolume = dedicatedLogVolume
            self.encrypted = encrypted
            self.engine = engine
            self.engineVersion = engineVersion
            self.iamDatabaseAuthenticationEnabled = iamDatabaseAuthenticationEnabled
            self.instanceCreateTime = instanceCreateTime
            self.iops = iops
            self.kmsKeyId = kmsKeyId
            self.licenseModel = licenseModel
            self.masterUsername = masterUsername
            self.multiTenant = multiTenant
            self.optionGroupName = optionGroupName
            self.port = port
            self.region = region
            self.restoreWindow = restoreWindow
            self.status = status
            self.storageThroughput = storageThroughput
            self.storageType = storageType
            self.tdeCredentialArn = tdeCredentialArn
            self.timezone = timezone
            self.vpcId = vpcId
        }
    }

}

extension DBInstanceAutomatedBackupNotFoundFault {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = DBInstanceAutomatedBackupNotFoundFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// No automated backup for this DB instance was found.
public struct DBInstanceAutomatedBackupNotFoundFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "DBInstanceAutomatedBackupNotFound" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension DBInstanceAutomatedBackupQuotaExceededFault {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = DBInstanceAutomatedBackupQuotaExceededFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// The quota for retained automated backups was exceeded. This prevents you from retaining any additional automated backups. The retained automated backups quota is the same as your DB instance quota.
public struct DBInstanceAutomatedBackupQuotaExceededFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "DBInstanceAutomatedBackupQuotaExceeded" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension RDSClientTypes.DBInstanceAutomatedBackupsReplication: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dbInstanceAutomatedBackupsArn = "DBInstanceAutomatedBackupsArn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let dbInstanceAutomatedBackupsArn = dbInstanceAutomatedBackupsArn {
            try container.encode(dbInstanceAutomatedBackupsArn, forKey: ClientRuntime.Key("DBInstanceAutomatedBackupsArn"))
        }
    }

    static var readingClosure: SmithyReadWrite.ReadingClosure<RDSClientTypes.DBInstanceAutomatedBackupsReplication, SmithyXML.Reader> {
        return { reader in
            guard reader.content != nil else { return nil }
            var value = RDSClientTypes.DBInstanceAutomatedBackupsReplication()
            value.dbInstanceAutomatedBackupsArn = try reader["DBInstanceAutomatedBackupsArn"].readIfPresent()
            return value
        }
    }
}

extension RDSClientTypes {
    /// Automated backups of a DB instance replicated to another Amazon Web Services Region. They consist of system backups, transaction logs, and database instance properties.
    public struct DBInstanceAutomatedBackupsReplication: Swift.Equatable {
        /// The Amazon Resource Name (ARN) of the replicated automated backups.
        public var dbInstanceAutomatedBackupsArn: Swift.String?

        public init(
            dbInstanceAutomatedBackupsArn: Swift.String? = nil
        )
        {
            self.dbInstanceAutomatedBackupsArn = dbInstanceAutomatedBackupsArn
        }
    }

}

extension DBInstanceNotFoundFault {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = DBInstanceNotFoundFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// DBInstanceIdentifier doesn't refer to an existing DB instance.
public struct DBInstanceNotFoundFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "DBInstanceNotFound" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension RDSClientTypes.DBInstanceRole: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case featureName = "FeatureName"
        case roleArn = "RoleArn"
        case status = "Status"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let featureName = featureName {
            try container.encode(featureName, forKey: ClientRuntime.Key("FeatureName"))
        }
        if let roleArn = roleArn {
            try container.encode(roleArn, forKey: ClientRuntime.Key("RoleArn"))
        }
        if let status = status {
            try container.encode(status, forKey: ClientRuntime.Key("Status"))
        }
    }

    static var readingClosure: SmithyReadWrite.ReadingClosure<RDSClientTypes.DBInstanceRole, SmithyXML.Reader> {
        return { reader in
            guard reader.content != nil else { return nil }
            var value = RDSClientTypes.DBInstanceRole()
            value.roleArn = try reader["RoleArn"].readIfPresent()
            value.featureName = try reader["FeatureName"].readIfPresent()
            value.status = try reader["Status"].readIfPresent()
            return value
        }
    }
}

extension RDSClientTypes {
    /// Information about an Amazon Web Services Identity and Access Management (IAM) role that is associated with a DB instance.
    public struct DBInstanceRole: Swift.Equatable {
        /// The name of the feature associated with the Amazon Web Services Identity and Access Management (IAM) role. For information about supported feature names, see DBEngineVersion.
        public var featureName: Swift.String?
        /// The Amazon Resource Name (ARN) of the IAM role that is associated with the DB instance.
        public var roleArn: Swift.String?
        /// Information about the state of association between the IAM role and the DB instance. The Status property returns one of the following values:
        ///
        /// * ACTIVE - the IAM role ARN is associated with the DB instance and can be used to access other Amazon Web Services services on your behalf.
        ///
        /// * PENDING - the IAM role ARN is being associated with the DB instance.
        ///
        /// * INVALID - the IAM role ARN is associated with the DB instance, but the DB instance is unable to assume the IAM role in order to access other Amazon Web Services services on your behalf.
        public var status: Swift.String?

        public init(
            featureName: Swift.String? = nil,
            roleArn: Swift.String? = nil,
            status: Swift.String? = nil
        )
        {
            self.featureName = featureName
            self.roleArn = roleArn
            self.status = status
        }
    }

}

extension DBInstanceRoleAlreadyExistsFault {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = DBInstanceRoleAlreadyExistsFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// The specified RoleArn or FeatureName value is already associated with the DB instance.
public struct DBInstanceRoleAlreadyExistsFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "DBInstanceRoleAlreadyExists" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension DBInstanceRoleNotFoundFault {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = DBInstanceRoleNotFoundFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// The specified RoleArn value doesn't match the specified feature for the DB instance.
public struct DBInstanceRoleNotFoundFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "DBInstanceRoleNotFound" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension DBInstanceRoleQuotaExceededFault {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = DBInstanceRoleQuotaExceededFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// You can't associate any more Amazon Web Services Identity and Access Management (IAM) roles with the DB instance because the quota has been reached.
public struct DBInstanceRoleQuotaExceededFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "DBInstanceRoleQuotaExceeded" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension RDSClientTypes.DBInstanceStatusInfo: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
        case normal = "Normal"
        case status = "Status"
        case statusType = "StatusType"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let message = message {
            try container.encode(message, forKey: ClientRuntime.Key("Message"))
        }
        if let normal = normal {
            try container.encode(normal, forKey: ClientRuntime.Key("Normal"))
        }
        if let status = status {
            try container.encode(status, forKey: ClientRuntime.Key("Status"))
        }
        if let statusType = statusType {
            try container.encode(statusType, forKey: ClientRuntime.Key("StatusType"))
        }
    }

    static var readingClosure: SmithyReadWrite.ReadingClosure<RDSClientTypes.DBInstanceStatusInfo, SmithyXML.Reader> {
        return { reader in
            guard reader.content != nil else { return nil }
            var value = RDSClientTypes.DBInstanceStatusInfo()
            value.statusType = try reader["StatusType"].readIfPresent()
            value.normal = try reader["Normal"].readIfPresent()
            value.status = try reader["Status"].readIfPresent()
            value.message = try reader["Message"].readIfPresent()
            return value
        }
    }
}

extension RDSClientTypes {
    /// Provides a list of status information for a DB instance.
    public struct DBInstanceStatusInfo: Swift.Equatable {
        /// Details of the error if there is an error for the instance. If the instance isn't in an error state, this value is blank.
        public var message: Swift.String?
        /// Indicates whether the instance is operating normally (TRUE) or is in an error state (FALSE).
        public var normal: Swift.Bool?
        /// The status of the DB instance. For a StatusType of read replica, the values can be replicating, replication stop point set, replication stop point reached, error, stopped, or terminated.
        public var status: Swift.String?
        /// This value is currently "read replication."
        public var statusType: Swift.String?

        public init(
            message: Swift.String? = nil,
            normal: Swift.Bool? = nil,
            status: Swift.String? = nil,
            statusType: Swift.String? = nil
        )
        {
            self.message = message
            self.normal = normal
            self.status = status
            self.statusType = statusType
        }
    }

}

extension DBLogFileNotFoundFault {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = DBLogFileNotFoundFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// LogFileName doesn't refer to an existing DB log file.
public struct DBLogFileNotFoundFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "DBLogFileNotFoundFault" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension RDSClientTypes.DBParameterGroup: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dbParameterGroupArn = "DBParameterGroupArn"
        case dbParameterGroupFamily = "DBParameterGroupFamily"
        case dbParameterGroupName = "DBParameterGroupName"
        case description = "Description"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let dbParameterGroupArn = dbParameterGroupArn {
            try container.encode(dbParameterGroupArn, forKey: ClientRuntime.Key("DBParameterGroupArn"))
        }
        if let dbParameterGroupFamily = dbParameterGroupFamily {
            try container.encode(dbParameterGroupFamily, forKey: ClientRuntime.Key("DBParameterGroupFamily"))
        }
        if let dbParameterGroupName = dbParameterGroupName {
            try container.encode(dbParameterGroupName, forKey: ClientRuntime.Key("DBParameterGroupName"))
        }
        if let description = description {
            try container.encode(description, forKey: ClientRuntime.Key("Description"))
        }
    }

    static var readingClosure: SmithyReadWrite.ReadingClosure<RDSClientTypes.DBParameterGroup, SmithyXML.Reader> {
        return { reader in
            guard reader.content != nil else { return nil }
            var value = RDSClientTypes.DBParameterGroup()
            value.dbParameterGroupName = try reader["DBParameterGroupName"].readIfPresent()
            value.dbParameterGroupFamily = try reader["DBParameterGroupFamily"].readIfPresent()
            value.description = try reader["Description"].readIfPresent()
            value.dbParameterGroupArn = try reader["DBParameterGroupArn"].readIfPresent()
            return value
        }
    }
}

extension RDSClientTypes {
    /// Contains the details of an Amazon RDS DB parameter group. This data type is used as a response element in the DescribeDBParameterGroups action.
    public struct DBParameterGroup: Swift.Equatable {
        /// The Amazon Resource Name (ARN) for the DB parameter group.
        public var dbParameterGroupArn: Swift.String?
        /// The name of the DB parameter group family that this DB parameter group is compatible with.
        public var dbParameterGroupFamily: Swift.String?
        /// The name of the DB parameter group.
        public var dbParameterGroupName: Swift.String?
        /// Provides the customer-specified description for this DB parameter group.
        public var description: Swift.String?

        public init(
            dbParameterGroupArn: Swift.String? = nil,
            dbParameterGroupFamily: Swift.String? = nil,
            dbParameterGroupName: Swift.String? = nil,
            description: Swift.String? = nil
        )
        {
            self.dbParameterGroupArn = dbParameterGroupArn
            self.dbParameterGroupFamily = dbParameterGroupFamily
            self.dbParameterGroupName = dbParameterGroupName
            self.description = description
        }
    }

}

extension DBParameterGroupAlreadyExistsFault {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = DBParameterGroupAlreadyExistsFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// A DB parameter group with the same name exists.
public struct DBParameterGroupAlreadyExistsFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "DBParameterGroupAlreadyExists" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension DBParameterGroupNotFoundFault {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = DBParameterGroupNotFoundFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// DBParameterGroupName doesn't refer to an existing DB parameter group.
public struct DBParameterGroupNotFoundFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "DBParameterGroupNotFound" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension DBParameterGroupQuotaExceededFault {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = DBParameterGroupQuotaExceededFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// The request would result in the user exceeding the allowed number of DB parameter groups.
public struct DBParameterGroupQuotaExceededFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "DBParameterGroupQuotaExceeded" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension RDSClientTypes.DBParameterGroupStatus: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dbParameterGroupName = "DBParameterGroupName"
        case parameterApplyStatus = "ParameterApplyStatus"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let dbParameterGroupName = dbParameterGroupName {
            try container.encode(dbParameterGroupName, forKey: ClientRuntime.Key("DBParameterGroupName"))
        }
        if let parameterApplyStatus = parameterApplyStatus {
            try container.encode(parameterApplyStatus, forKey: ClientRuntime.Key("ParameterApplyStatus"))
        }
    }

    static var readingClosure: SmithyReadWrite.ReadingClosure<RDSClientTypes.DBParameterGroupStatus, SmithyXML.Reader> {
        return { reader in
            guard reader.content != nil else { return nil }
            var value = RDSClientTypes.DBParameterGroupStatus()
            value.dbParameterGroupName = try reader["DBParameterGroupName"].readIfPresent()
            value.parameterApplyStatus = try reader["ParameterApplyStatus"].readIfPresent()
            return value
        }
    }
}

extension RDSClientTypes {
    /// The status of the DB parameter group. This data type is used as a response element in the following actions:
    ///
    /// * CreateDBInstance
    ///
    /// * CreateDBInstanceReadReplica
    ///
    /// * DeleteDBInstance
    ///
    /// * ModifyDBInstance
    ///
    /// * RebootDBInstance
    ///
    /// * RestoreDBInstanceFromDBSnapshot
    public struct DBParameterGroupStatus: Swift.Equatable {
        /// The name of the DB parameter group.
        public var dbParameterGroupName: Swift.String?
        /// The status of parameter updates.
        public var parameterApplyStatus: Swift.String?

        public init(
            dbParameterGroupName: Swift.String? = nil,
            parameterApplyStatus: Swift.String? = nil
        )
        {
            self.dbParameterGroupName = dbParameterGroupName
            self.parameterApplyStatus = parameterApplyStatus
        }
    }

}

extension RDSClientTypes.DBProxy: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case auth = "Auth"
        case createdDate = "CreatedDate"
        case dbProxyArn = "DBProxyArn"
        case dbProxyName = "DBProxyName"
        case debugLogging = "DebugLogging"
        case endpoint = "Endpoint"
        case engineFamily = "EngineFamily"
        case idleClientTimeout = "IdleClientTimeout"
        case requireTLS = "RequireTLS"
        case roleArn = "RoleArn"
        case status = "Status"
        case updatedDate = "UpdatedDate"
        case vpcId = "VpcId"
        case vpcSecurityGroupIds = "VpcSecurityGroupIds"
        case vpcSubnetIds = "VpcSubnetIds"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let auth = auth {
            if !auth.isEmpty {
                var authContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Auth"))
                for (index0, userauthconfiginfo0) in auth.enumerated() {
                    try authContainer.encode(userauthconfiginfo0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var authContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Auth"))
                try authContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let createdDate = createdDate {
            try container.encodeTimestamp(createdDate, format: .dateTime, forKey: ClientRuntime.Key("CreatedDate"))
        }
        if let dbProxyArn = dbProxyArn {
            try container.encode(dbProxyArn, forKey: ClientRuntime.Key("DBProxyArn"))
        }
        if let dbProxyName = dbProxyName {
            try container.encode(dbProxyName, forKey: ClientRuntime.Key("DBProxyName"))
        }
        if let debugLogging = debugLogging {
            try container.encode(debugLogging, forKey: ClientRuntime.Key("DebugLogging"))
        }
        if let endpoint = endpoint {
            try container.encode(endpoint, forKey: ClientRuntime.Key("Endpoint"))
        }
        if let engineFamily = engineFamily {
            try container.encode(engineFamily, forKey: ClientRuntime.Key("EngineFamily"))
        }
        if let idleClientTimeout = idleClientTimeout {
            try container.encode(idleClientTimeout, forKey: ClientRuntime.Key("IdleClientTimeout"))
        }
        if let requireTLS = requireTLS {
            try container.encode(requireTLS, forKey: ClientRuntime.Key("RequireTLS"))
        }
        if let roleArn = roleArn {
            try container.encode(roleArn, forKey: ClientRuntime.Key("RoleArn"))
        }
        if let status = status {
            try container.encode(status, forKey: ClientRuntime.Key("Status"))
        }
        if let updatedDate = updatedDate {
            try container.encodeTimestamp(updatedDate, format: .dateTime, forKey: ClientRuntime.Key("UpdatedDate"))
        }
        if let vpcId = vpcId {
            try container.encode(vpcId, forKey: ClientRuntime.Key("VpcId"))
        }
        if let vpcSecurityGroupIds = vpcSecurityGroupIds {
            if !vpcSecurityGroupIds.isEmpty {
                var vpcSecurityGroupIdsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("VpcSecurityGroupIds"))
                for (index0, string0) in vpcSecurityGroupIds.enumerated() {
                    try vpcSecurityGroupIdsContainer.encode(string0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var vpcSecurityGroupIdsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("VpcSecurityGroupIds"))
                try vpcSecurityGroupIdsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let vpcSubnetIds = vpcSubnetIds {
            if !vpcSubnetIds.isEmpty {
                var vpcSubnetIdsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("VpcSubnetIds"))
                for (index0, string0) in vpcSubnetIds.enumerated() {
                    try vpcSubnetIdsContainer.encode(string0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var vpcSubnetIdsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("VpcSubnetIds"))
                try vpcSubnetIdsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
    }

    static var readingClosure: SmithyReadWrite.ReadingClosure<RDSClientTypes.DBProxy, SmithyXML.Reader> {
        return { reader in
            guard reader.content != nil else { return nil }
            var value = RDSClientTypes.DBProxy()
            value.dbProxyName = try reader["DBProxyName"].readIfPresent()
            value.dbProxyArn = try reader["DBProxyArn"].readIfPresent()
            value.status = try reader["Status"].readIfPresent()
            value.engineFamily = try reader["EngineFamily"].readIfPresent()
            value.vpcId = try reader["VpcId"].readIfPresent()
            value.vpcSecurityGroupIds = try reader["VpcSecurityGroupIds"].readListIfPresent(memberReadingClosure: Swift.String.readingClosure, memberNodeInfo: "member", isFlattened: false)
            value.vpcSubnetIds = try reader["VpcSubnetIds"].readListIfPresent(memberReadingClosure: Swift.String.readingClosure, memberNodeInfo: "member", isFlattened: false)
            value.auth = try reader["Auth"].readListIfPresent(memberReadingClosure: RDSClientTypes.UserAuthConfigInfo.readingClosure, memberNodeInfo: "member", isFlattened: false)
            value.roleArn = try reader["RoleArn"].readIfPresent()
            value.endpoint = try reader["Endpoint"].readIfPresent()
            value.requireTLS = try reader["RequireTLS"].readIfPresent()
            value.idleClientTimeout = try reader["IdleClientTimeout"].readIfPresent()
            value.debugLogging = try reader["DebugLogging"].readIfPresent()
            value.createdDate = try reader["CreatedDate"].readTimestampIfPresent(format: .dateTime)
            value.updatedDate = try reader["UpdatedDate"].readTimestampIfPresent(format: .dateTime)
            return value
        }
    }
}

extension RDSClientTypes {
    /// The data structure representing a proxy managed by the RDS Proxy. This data type is used as a response element in the DescribeDBProxies action.
    public struct DBProxy: Swift.Equatable {
        /// One or more data structures specifying the authorization mechanism to connect to the associated RDS DB instance or Aurora DB cluster.
        public var auth: [RDSClientTypes.UserAuthConfigInfo]?
        /// The date and time when the proxy was first created.
        public var createdDate: ClientRuntime.Date?
        /// The Amazon Resource Name (ARN) for the proxy.
        public var dbProxyArn: Swift.String?
        /// The identifier for the proxy. This name must be unique for all proxies owned by your Amazon Web Services account in the specified Amazon Web Services Region.
        public var dbProxyName: Swift.String?
        /// Indicates whether the proxy includes detailed information about SQL statements in its logs. This information helps you to debug issues involving SQL behavior or the performance and scalability of the proxy connections. The debug information includes the text of SQL statements that you submit through the proxy. Thus, only enable this setting when needed for debugging, and only when you have security measures in place to safeguard any sensitive information that appears in the logs.
        public var debugLogging: Swift.Bool?
        /// The endpoint that you can use to connect to the DB proxy. You include the endpoint value in the connection string for a database client application.
        public var endpoint: Swift.String?
        /// The kinds of databases that the proxy can connect to. This value determines which database network protocol the proxy recognizes when it interprets network traffic to and from the database. MYSQL supports Aurora MySQL, RDS for MariaDB, and RDS for MySQL databases. POSTGRESQL supports Aurora PostgreSQL and RDS for PostgreSQL databases. SQLSERVER supports RDS for Microsoft SQL Server databases.
        public var engineFamily: Swift.String?
        /// The number of seconds a connection to the proxy can have no activity before the proxy drops the client connection. The proxy keeps the underlying database connection open and puts it back into the connection pool for reuse by later connection requests. Default: 1800 (30 minutes) Constraints: 1 to 28,800
        public var idleClientTimeout: Swift.Int?
        /// Indicates whether Transport Layer Security (TLS) encryption is required for connections to the proxy.
        public var requireTLS: Swift.Bool?
        /// The Amazon Resource Name (ARN) for the IAM role that the proxy uses to access Amazon Secrets Manager.
        public var roleArn: Swift.String?
        /// The current status of this proxy. A status of available means the proxy is ready to handle requests. Other values indicate that you must wait for the proxy to be ready, or take some action to resolve an issue.
        public var status: RDSClientTypes.DBProxyStatus?
        /// The date and time when the proxy was last updated.
        public var updatedDate: ClientRuntime.Date?
        /// Provides the VPC ID of the DB proxy.
        public var vpcId: Swift.String?
        /// Provides a list of VPC security groups that the proxy belongs to.
        public var vpcSecurityGroupIds: [Swift.String]?
        /// The EC2 subnet IDs for the proxy.
        public var vpcSubnetIds: [Swift.String]?

        public init(
            auth: [RDSClientTypes.UserAuthConfigInfo]? = nil,
            createdDate: ClientRuntime.Date? = nil,
            dbProxyArn: Swift.String? = nil,
            dbProxyName: Swift.String? = nil,
            debugLogging: Swift.Bool? = nil,
            endpoint: Swift.String? = nil,
            engineFamily: Swift.String? = nil,
            idleClientTimeout: Swift.Int? = nil,
            requireTLS: Swift.Bool? = nil,
            roleArn: Swift.String? = nil,
            status: RDSClientTypes.DBProxyStatus? = nil,
            updatedDate: ClientRuntime.Date? = nil,
            vpcId: Swift.String? = nil,
            vpcSecurityGroupIds: [Swift.String]? = nil,
            vpcSubnetIds: [Swift.String]? = nil
        )
        {
            self.auth = auth
            self.createdDate = createdDate
            self.dbProxyArn = dbProxyArn
            self.dbProxyName = dbProxyName
            self.debugLogging = debugLogging
            self.endpoint = endpoint
            self.engineFamily = engineFamily
            self.idleClientTimeout = idleClientTimeout
            self.requireTLS = requireTLS
            self.roleArn = roleArn
            self.status = status
            self.updatedDate = updatedDate
            self.vpcId = vpcId
            self.vpcSecurityGroupIds = vpcSecurityGroupIds
            self.vpcSubnetIds = vpcSubnetIds
        }
    }

}

extension DBProxyAlreadyExistsFault {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = DBProxyAlreadyExistsFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// The specified proxy name must be unique for all proxies owned by your Amazon Web Services account in the specified Amazon Web Services Region.
public struct DBProxyAlreadyExistsFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "DBProxyAlreadyExistsFault" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension RDSClientTypes.DBProxyEndpoint: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case createdDate = "CreatedDate"
        case dbProxyEndpointArn = "DBProxyEndpointArn"
        case dbProxyEndpointName = "DBProxyEndpointName"
        case dbProxyName = "DBProxyName"
        case endpoint = "Endpoint"
        case isDefault = "IsDefault"
        case status = "Status"
        case targetRole = "TargetRole"
        case vpcId = "VpcId"
        case vpcSecurityGroupIds = "VpcSecurityGroupIds"
        case vpcSubnetIds = "VpcSubnetIds"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let createdDate = createdDate {
            try container.encodeTimestamp(createdDate, format: .dateTime, forKey: ClientRuntime.Key("CreatedDate"))
        }
        if let dbProxyEndpointArn = dbProxyEndpointArn {
            try container.encode(dbProxyEndpointArn, forKey: ClientRuntime.Key("DBProxyEndpointArn"))
        }
        if let dbProxyEndpointName = dbProxyEndpointName {
            try container.encode(dbProxyEndpointName, forKey: ClientRuntime.Key("DBProxyEndpointName"))
        }
        if let dbProxyName = dbProxyName {
            try container.encode(dbProxyName, forKey: ClientRuntime.Key("DBProxyName"))
        }
        if let endpoint = endpoint {
            try container.encode(endpoint, forKey: ClientRuntime.Key("Endpoint"))
        }
        if let isDefault = isDefault {
            try container.encode(isDefault, forKey: ClientRuntime.Key("IsDefault"))
        }
        if let status = status {
            try container.encode(status, forKey: ClientRuntime.Key("Status"))
        }
        if let targetRole = targetRole {
            try container.encode(targetRole, forKey: ClientRuntime.Key("TargetRole"))
        }
        if let vpcId = vpcId {
            try container.encode(vpcId, forKey: ClientRuntime.Key("VpcId"))
        }
        if let vpcSecurityGroupIds = vpcSecurityGroupIds {
            if !vpcSecurityGroupIds.isEmpty {
                var vpcSecurityGroupIdsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("VpcSecurityGroupIds"))
                for (index0, string0) in vpcSecurityGroupIds.enumerated() {
                    try vpcSecurityGroupIdsContainer.encode(string0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var vpcSecurityGroupIdsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("VpcSecurityGroupIds"))
                try vpcSecurityGroupIdsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let vpcSubnetIds = vpcSubnetIds {
            if !vpcSubnetIds.isEmpty {
                var vpcSubnetIdsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("VpcSubnetIds"))
                for (index0, string0) in vpcSubnetIds.enumerated() {
                    try vpcSubnetIdsContainer.encode(string0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var vpcSubnetIdsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("VpcSubnetIds"))
                try vpcSubnetIdsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
    }

    static var readingClosure: SmithyReadWrite.ReadingClosure<RDSClientTypes.DBProxyEndpoint, SmithyXML.Reader> {
        return { reader in
            guard reader.content != nil else { return nil }
            var value = RDSClientTypes.DBProxyEndpoint()
            value.dbProxyEndpointName = try reader["DBProxyEndpointName"].readIfPresent()
            value.dbProxyEndpointArn = try reader["DBProxyEndpointArn"].readIfPresent()
            value.dbProxyName = try reader["DBProxyName"].readIfPresent()
            value.status = try reader["Status"].readIfPresent()
            value.vpcId = try reader["VpcId"].readIfPresent()
            value.vpcSecurityGroupIds = try reader["VpcSecurityGroupIds"].readListIfPresent(memberReadingClosure: Swift.String.readingClosure, memberNodeInfo: "member", isFlattened: false)
            value.vpcSubnetIds = try reader["VpcSubnetIds"].readListIfPresent(memberReadingClosure: Swift.String.readingClosure, memberNodeInfo: "member", isFlattened: false)
            value.endpoint = try reader["Endpoint"].readIfPresent()
            value.createdDate = try reader["CreatedDate"].readTimestampIfPresent(format: .dateTime)
            value.targetRole = try reader["TargetRole"].readIfPresent()
            value.isDefault = try reader["IsDefault"].readIfPresent()
            return value
        }
    }
}

extension RDSClientTypes {
    /// The data structure representing an endpoint associated with a DB proxy. RDS automatically creates one endpoint for each DB proxy. For Aurora DB clusters, you can associate additional endpoints with the same DB proxy. These endpoints can be read/write or read-only. They can also reside in different VPCs than the associated DB proxy. This data type is used as a response element in the DescribeDBProxyEndpoints operation.
    public struct DBProxyEndpoint: Swift.Equatable {
        /// The date and time when the DB proxy endpoint was first created.
        public var createdDate: ClientRuntime.Date?
        /// The Amazon Resource Name (ARN) for the DB proxy endpoint.
        public var dbProxyEndpointArn: Swift.String?
        /// The name for the DB proxy endpoint. An identifier must begin with a letter and must contain only ASCII letters, digits, and hyphens; it can't end with a hyphen or contain two consecutive hyphens.
        public var dbProxyEndpointName: Swift.String?
        /// The identifier for the DB proxy that is associated with this DB proxy endpoint.
        public var dbProxyName: Swift.String?
        /// The endpoint that you can use to connect to the DB proxy. You include the endpoint value in the connection string for a database client application.
        public var endpoint: Swift.String?
        /// Indicates whether this endpoint is the default endpoint for the associated DB proxy. Default DB proxy endpoints always have read/write capability. Other endpoints that you associate with the DB proxy can be either read/write or read-only.
        public var isDefault: Swift.Bool?
        /// The current status of this DB proxy endpoint. A status of available means the endpoint is ready to handle requests. Other values indicate that you must wait for the endpoint to be ready, or take some action to resolve an issue.
        public var status: RDSClientTypes.DBProxyEndpointStatus?
        /// A value that indicates whether the DB proxy endpoint can be used for read/write or read-only operations.
        public var targetRole: RDSClientTypes.DBProxyEndpointTargetRole?
        /// Provides the VPC ID of the DB proxy endpoint.
        public var vpcId: Swift.String?
        /// Provides a list of VPC security groups that the DB proxy endpoint belongs to.
        public var vpcSecurityGroupIds: [Swift.String]?
        /// The EC2 subnet IDs for the DB proxy endpoint.
        public var vpcSubnetIds: [Swift.String]?

        public init(
            createdDate: ClientRuntime.Date? = nil,
            dbProxyEndpointArn: Swift.String? = nil,
            dbProxyEndpointName: Swift.String? = nil,
            dbProxyName: Swift.String? = nil,
            endpoint: Swift.String? = nil,
            isDefault: Swift.Bool? = nil,
            status: RDSClientTypes.DBProxyEndpointStatus? = nil,
            targetRole: RDSClientTypes.DBProxyEndpointTargetRole? = nil,
            vpcId: Swift.String? = nil,
            vpcSecurityGroupIds: [Swift.String]? = nil,
            vpcSubnetIds: [Swift.String]? = nil
        )
        {
            self.createdDate = createdDate
            self.dbProxyEndpointArn = dbProxyEndpointArn
            self.dbProxyEndpointName = dbProxyEndpointName
            self.dbProxyName = dbProxyName
            self.endpoint = endpoint
            self.isDefault = isDefault
            self.status = status
            self.targetRole = targetRole
            self.vpcId = vpcId
            self.vpcSecurityGroupIds = vpcSecurityGroupIds
            self.vpcSubnetIds = vpcSubnetIds
        }
    }

}

extension DBProxyEndpointAlreadyExistsFault {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = DBProxyEndpointAlreadyExistsFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// The specified DB proxy endpoint name must be unique for all DB proxy endpoints owned by your Amazon Web Services account in the specified Amazon Web Services Region.
public struct DBProxyEndpointAlreadyExistsFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "DBProxyEndpointAlreadyExistsFault" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension DBProxyEndpointNotFoundFault {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = DBProxyEndpointNotFoundFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// The DB proxy endpoint doesn't exist.
public struct DBProxyEndpointNotFoundFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "DBProxyEndpointNotFoundFault" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension DBProxyEndpointQuotaExceededFault {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = DBProxyEndpointQuotaExceededFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// The DB proxy already has the maximum number of endpoints.
public struct DBProxyEndpointQuotaExceededFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "DBProxyEndpointQuotaExceededFault" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension RDSClientTypes {
    public enum DBProxyEndpointStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case available
        case creating
        case deleting
        case incompatibleNetwork
        case insufficientResourceLimits
        case modifying
        case sdkUnknown(Swift.String)

        public static var allCases: [DBProxyEndpointStatus] {
            return [
                .available,
                .creating,
                .deleting,
                .incompatibleNetwork,
                .insufficientResourceLimits,
                .modifying,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .available: return "available"
            case .creating: return "creating"
            case .deleting: return "deleting"
            case .incompatibleNetwork: return "incompatible-network"
            case .insufficientResourceLimits: return "insufficient-resource-limits"
            case .modifying: return "modifying"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = DBProxyEndpointStatus(rawValue: rawValue) ?? DBProxyEndpointStatus.sdkUnknown(rawValue)
        }
    }
}

extension RDSClientTypes {
    public enum DBProxyEndpointTargetRole: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case readOnly
        case readWrite
        case sdkUnknown(Swift.String)

        public static var allCases: [DBProxyEndpointTargetRole] {
            return [
                .readOnly,
                .readWrite,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .readOnly: return "READ_ONLY"
            case .readWrite: return "READ_WRITE"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = DBProxyEndpointTargetRole(rawValue: rawValue) ?? DBProxyEndpointTargetRole.sdkUnknown(rawValue)
        }
    }
}

extension DBProxyNotFoundFault {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = DBProxyNotFoundFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// The specified proxy name doesn't correspond to a proxy owned by your Amazon Web Services account in the specified Amazon Web Services Region.
public struct DBProxyNotFoundFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "DBProxyNotFoundFault" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension DBProxyQuotaExceededFault {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = DBProxyQuotaExceededFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// Your Amazon Web Services account already has the maximum number of proxies in the specified Amazon Web Services Region.
public struct DBProxyQuotaExceededFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "DBProxyQuotaExceededFault" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension RDSClientTypes {
    public enum DBProxyStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case available
        case creating
        case deleting
        case incompatibleNetwork
        case insufficientResourceLimits
        case modifying
        case reactivating
        case suspended
        case suspending
        case sdkUnknown(Swift.String)

        public static var allCases: [DBProxyStatus] {
            return [
                .available,
                .creating,
                .deleting,
                .incompatibleNetwork,
                .insufficientResourceLimits,
                .modifying,
                .reactivating,
                .suspended,
                .suspending,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .available: return "available"
            case .creating: return "creating"
            case .deleting: return "deleting"
            case .incompatibleNetwork: return "incompatible-network"
            case .insufficientResourceLimits: return "insufficient-resource-limits"
            case .modifying: return "modifying"
            case .reactivating: return "reactivating"
            case .suspended: return "suspended"
            case .suspending: return "suspending"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = DBProxyStatus(rawValue: rawValue) ?? DBProxyStatus.sdkUnknown(rawValue)
        }
    }
}

extension RDSClientTypes.DBProxyTarget: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case endpoint = "Endpoint"
        case port = "Port"
        case rdsResourceId = "RdsResourceId"
        case role = "Role"
        case targetArn = "TargetArn"
        case targetHealth = "TargetHealth"
        case trackedClusterId = "TrackedClusterId"
        case type = "Type"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let endpoint = endpoint {
            try container.encode(endpoint, forKey: ClientRuntime.Key("Endpoint"))
        }
        if let port = port {
            try container.encode(port, forKey: ClientRuntime.Key("Port"))
        }
        if let rdsResourceId = rdsResourceId {
            try container.encode(rdsResourceId, forKey: ClientRuntime.Key("RdsResourceId"))
        }
        if let role = role {
            try container.encode(role, forKey: ClientRuntime.Key("Role"))
        }
        if let targetArn = targetArn {
            try container.encode(targetArn, forKey: ClientRuntime.Key("TargetArn"))
        }
        if let targetHealth = targetHealth {
            try container.encode(targetHealth, forKey: ClientRuntime.Key("TargetHealth"))
        }
        if let trackedClusterId = trackedClusterId {
            try container.encode(trackedClusterId, forKey: ClientRuntime.Key("TrackedClusterId"))
        }
        if let type = type {
            try container.encode(type, forKey: ClientRuntime.Key("Type"))
        }
    }

    static var readingClosure: SmithyReadWrite.ReadingClosure<RDSClientTypes.DBProxyTarget, SmithyXML.Reader> {
        return { reader in
            guard reader.content != nil else { return nil }
            var value = RDSClientTypes.DBProxyTarget()
            value.targetArn = try reader["TargetArn"].readIfPresent()
            value.endpoint = try reader["Endpoint"].readIfPresent()
            value.trackedClusterId = try reader["TrackedClusterId"].readIfPresent()
            value.rdsResourceId = try reader["RdsResourceId"].readIfPresent()
            value.port = try reader["Port"].readIfPresent()
            value.type = try reader["Type"].readIfPresent()
            value.role = try reader["Role"].readIfPresent()
            value.targetHealth = try reader["TargetHealth"].readIfPresent(readingClosure: RDSClientTypes.TargetHealth.readingClosure)
            return value
        }
    }
}

extension RDSClientTypes {
    /// Contains the details for an RDS Proxy target. It represents an RDS DB instance or Aurora DB cluster that the proxy can connect to. One or more targets are associated with an RDS Proxy target group. This data type is used as a response element in the DescribeDBProxyTargets action.
    public struct DBProxyTarget: Swift.Equatable {
        /// The writer endpoint for the RDS DB instance or Aurora DB cluster.
        public var endpoint: Swift.String?
        /// The port that the RDS Proxy uses to connect to the target RDS DB instance or Aurora DB cluster.
        public var port: Swift.Int?
        /// The identifier representing the target. It can be the instance identifier for an RDS DB instance, or the cluster identifier for an Aurora DB cluster.
        public var rdsResourceId: Swift.String?
        /// A value that indicates whether the target of the proxy can be used for read/write or read-only operations.
        public var role: RDSClientTypes.TargetRole?
        /// The Amazon Resource Name (ARN) for the RDS DB instance or Aurora DB cluster.
        public var targetArn: Swift.String?
        /// Information about the connection health of the RDS Proxy target.
        public var targetHealth: RDSClientTypes.TargetHealth?
        /// The DB cluster identifier when the target represents an Aurora DB cluster. This field is blank when the target represents an RDS DB instance.
        public var trackedClusterId: Swift.String?
        /// Specifies the kind of database, such as an RDS DB instance or an Aurora DB cluster, that the target represents.
        public var type: RDSClientTypes.TargetType?

        public init(
            endpoint: Swift.String? = nil,
            port: Swift.Int? = nil,
            rdsResourceId: Swift.String? = nil,
            role: RDSClientTypes.TargetRole? = nil,
            targetArn: Swift.String? = nil,
            targetHealth: RDSClientTypes.TargetHealth? = nil,
            trackedClusterId: Swift.String? = nil,
            type: RDSClientTypes.TargetType? = nil
        )
        {
            self.endpoint = endpoint
            self.port = port
            self.rdsResourceId = rdsResourceId
            self.role = role
            self.targetArn = targetArn
            self.targetHealth = targetHealth
            self.trackedClusterId = trackedClusterId
            self.type = type
        }
    }

}

extension DBProxyTargetAlreadyRegisteredFault {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = DBProxyTargetAlreadyRegisteredFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// The proxy is already associated with the specified RDS DB instance or Aurora DB cluster.
public struct DBProxyTargetAlreadyRegisteredFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "DBProxyTargetAlreadyRegisteredFault" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension RDSClientTypes.DBProxyTargetGroup: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case connectionPoolConfig = "ConnectionPoolConfig"
        case createdDate = "CreatedDate"
        case dbProxyName = "DBProxyName"
        case isDefault = "IsDefault"
        case status = "Status"
        case targetGroupArn = "TargetGroupArn"
        case targetGroupName = "TargetGroupName"
        case updatedDate = "UpdatedDate"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let connectionPoolConfig = connectionPoolConfig {
            try container.encode(connectionPoolConfig, forKey: ClientRuntime.Key("ConnectionPoolConfig"))
        }
        if let createdDate = createdDate {
            try container.encodeTimestamp(createdDate, format: .dateTime, forKey: ClientRuntime.Key("CreatedDate"))
        }
        if let dbProxyName = dbProxyName {
            try container.encode(dbProxyName, forKey: ClientRuntime.Key("DBProxyName"))
        }
        if let isDefault = isDefault {
            try container.encode(isDefault, forKey: ClientRuntime.Key("IsDefault"))
        }
        if let status = status {
            try container.encode(status, forKey: ClientRuntime.Key("Status"))
        }
        if let targetGroupArn = targetGroupArn {
            try container.encode(targetGroupArn, forKey: ClientRuntime.Key("TargetGroupArn"))
        }
        if let targetGroupName = targetGroupName {
            try container.encode(targetGroupName, forKey: ClientRuntime.Key("TargetGroupName"))
        }
        if let updatedDate = updatedDate {
            try container.encodeTimestamp(updatedDate, format: .dateTime, forKey: ClientRuntime.Key("UpdatedDate"))
        }
    }

    static var readingClosure: SmithyReadWrite.ReadingClosure<RDSClientTypes.DBProxyTargetGroup, SmithyXML.Reader> {
        return { reader in
            guard reader.content != nil else { return nil }
            var value = RDSClientTypes.DBProxyTargetGroup()
            value.dbProxyName = try reader["DBProxyName"].readIfPresent()
            value.targetGroupName = try reader["TargetGroupName"].readIfPresent()
            value.targetGroupArn = try reader["TargetGroupArn"].readIfPresent()
            value.isDefault = try reader["IsDefault"].readIfPresent()
            value.status = try reader["Status"].readIfPresent()
            value.connectionPoolConfig = try reader["ConnectionPoolConfig"].readIfPresent(readingClosure: RDSClientTypes.ConnectionPoolConfigurationInfo.readingClosure)
            value.createdDate = try reader["CreatedDate"].readTimestampIfPresent(format: .dateTime)
            value.updatedDate = try reader["UpdatedDate"].readTimestampIfPresent(format: .dateTime)
            return value
        }
    }
}

extension RDSClientTypes {
    /// Represents a set of RDS DB instances, Aurora DB clusters, or both that a proxy can connect to. Currently, each target group is associated with exactly one RDS DB instance or Aurora DB cluster. This data type is used as a response element in the DescribeDBProxyTargetGroups action.
    public struct DBProxyTargetGroup: Swift.Equatable {
        /// The settings that determine the size and behavior of the connection pool for the target group.
        public var connectionPoolConfig: RDSClientTypes.ConnectionPoolConfigurationInfo?
        /// The date and time when the target group was first created.
        public var createdDate: ClientRuntime.Date?
        /// The identifier for the RDS proxy associated with this target group.
        public var dbProxyName: Swift.String?
        /// Indicates whether this target group is the first one used for connection requests by the associated proxy. Because each proxy is currently associated with a single target group, currently this setting is always true.
        public var isDefault: Swift.Bool?
        /// The current status of this target group. A status of available means the target group is correctly associated with a database. Other values indicate that you must wait for the target group to be ready, or take some action to resolve an issue.
        public var status: Swift.String?
        /// The Amazon Resource Name (ARN) representing the target group.
        public var targetGroupArn: Swift.String?
        /// The identifier for the target group. This name must be unique for all target groups owned by your Amazon Web Services account in the specified Amazon Web Services Region.
        public var targetGroupName: Swift.String?
        /// The date and time when the target group was last updated.
        public var updatedDate: ClientRuntime.Date?

        public init(
            connectionPoolConfig: RDSClientTypes.ConnectionPoolConfigurationInfo? = nil,
            createdDate: ClientRuntime.Date? = nil,
            dbProxyName: Swift.String? = nil,
            isDefault: Swift.Bool? = nil,
            status: Swift.String? = nil,
            targetGroupArn: Swift.String? = nil,
            targetGroupName: Swift.String? = nil,
            updatedDate: ClientRuntime.Date? = nil
        )
        {
            self.connectionPoolConfig = connectionPoolConfig
            self.createdDate = createdDate
            self.dbProxyName = dbProxyName
            self.isDefault = isDefault
            self.status = status
            self.targetGroupArn = targetGroupArn
            self.targetGroupName = targetGroupName
            self.updatedDate = updatedDate
        }
    }

}

extension DBProxyTargetGroupNotFoundFault {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = DBProxyTargetGroupNotFoundFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// The specified target group isn't available for a proxy owned by your Amazon Web Services account in the specified Amazon Web Services Region.
public struct DBProxyTargetGroupNotFoundFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "DBProxyTargetGroupNotFoundFault" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension DBProxyTargetNotFoundFault {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = DBProxyTargetNotFoundFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// The specified RDS DB instance or Aurora DB cluster isn't available for a proxy owned by your Amazon Web Services account in the specified Amazon Web Services Region.
public struct DBProxyTargetNotFoundFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "DBProxyTargetNotFoundFault" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension RDSClientTypes.DBRecommendation: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case additionalInfo = "AdditionalInfo"
        case category = "Category"
        case createdTime = "CreatedTime"
        case description = "Description"
        case detection = "Detection"
        case impact = "Impact"
        case issueDetails = "IssueDetails"
        case links = "Links"
        case reason = "Reason"
        case recommendation = "Recommendation"
        case recommendationId = "RecommendationId"
        case recommendedActions = "RecommendedActions"
        case resourceArn = "ResourceArn"
        case severity = "Severity"
        case source = "Source"
        case status = "Status"
        case typeDetection = "TypeDetection"
        case typeId = "TypeId"
        case typeRecommendation = "TypeRecommendation"
        case updatedTime = "UpdatedTime"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let additionalInfo = additionalInfo {
            try container.encode(additionalInfo, forKey: ClientRuntime.Key("AdditionalInfo"))
        }
        if let category = category {
            try container.encode(category, forKey: ClientRuntime.Key("Category"))
        }
        if let createdTime = createdTime {
            try container.encodeTimestamp(createdTime, format: .dateTime, forKey: ClientRuntime.Key("CreatedTime"))
        }
        if let description = description {
            try container.encode(description, forKey: ClientRuntime.Key("Description"))
        }
        if let detection = detection {
            try container.encode(detection, forKey: ClientRuntime.Key("Detection"))
        }
        if let impact = impact {
            try container.encode(impact, forKey: ClientRuntime.Key("Impact"))
        }
        if let issueDetails = issueDetails {
            try container.encode(issueDetails, forKey: ClientRuntime.Key("IssueDetails"))
        }
        if let links = links {
            if !links.isEmpty {
                var linksContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Links"))
                for (index0, doclink0) in links.enumerated() {
                    try linksContainer.encode(doclink0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var linksContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Links"))
                try linksContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let reason = reason {
            try container.encode(reason, forKey: ClientRuntime.Key("Reason"))
        }
        if let recommendation = recommendation {
            try container.encode(recommendation, forKey: ClientRuntime.Key("Recommendation"))
        }
        if let recommendationId = recommendationId {
            try container.encode(recommendationId, forKey: ClientRuntime.Key("RecommendationId"))
        }
        if let recommendedActions = recommendedActions {
            if !recommendedActions.isEmpty {
                var recommendedActionsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("RecommendedActions"))
                for (index0, recommendedaction0) in recommendedActions.enumerated() {
                    try recommendedActionsContainer.encode(recommendedaction0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var recommendedActionsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("RecommendedActions"))
                try recommendedActionsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let resourceArn = resourceArn {
            try container.encode(resourceArn, forKey: ClientRuntime.Key("ResourceArn"))
        }
        if let severity = severity {
            try container.encode(severity, forKey: ClientRuntime.Key("Severity"))
        }
        if let source = source {
            try container.encode(source, forKey: ClientRuntime.Key("Source"))
        }
        if let status = status {
            try container.encode(status, forKey: ClientRuntime.Key("Status"))
        }
        if let typeDetection = typeDetection {
            try container.encode(typeDetection, forKey: ClientRuntime.Key("TypeDetection"))
        }
        if let typeId = typeId {
            try container.encode(typeId, forKey: ClientRuntime.Key("TypeId"))
        }
        if let typeRecommendation = typeRecommendation {
            try container.encode(typeRecommendation, forKey: ClientRuntime.Key("TypeRecommendation"))
        }
        if let updatedTime = updatedTime {
            try container.encodeTimestamp(updatedTime, format: .dateTime, forKey: ClientRuntime.Key("UpdatedTime"))
        }
    }

    static var readingClosure: SmithyReadWrite.ReadingClosure<RDSClientTypes.DBRecommendation, SmithyXML.Reader> {
        return { reader in
            guard reader.content != nil else { return nil }
            var value = RDSClientTypes.DBRecommendation()
            value.recommendationId = try reader["RecommendationId"].readIfPresent()
            value.typeId = try reader["TypeId"].readIfPresent()
            value.severity = try reader["Severity"].readIfPresent()
            value.resourceArn = try reader["ResourceArn"].readIfPresent()
            value.status = try reader["Status"].readIfPresent()
            value.createdTime = try reader["CreatedTime"].readTimestampIfPresent(format: .dateTime)
            value.updatedTime = try reader["UpdatedTime"].readTimestampIfPresent(format: .dateTime)
            value.detection = try reader["Detection"].readIfPresent()
            value.recommendation = try reader["Recommendation"].readIfPresent()
            value.description = try reader["Description"].readIfPresent()
            value.reason = try reader["Reason"].readIfPresent()
            value.recommendedActions = try reader["RecommendedActions"].readListIfPresent(memberReadingClosure: RDSClientTypes.RecommendedAction.readingClosure, memberNodeInfo: "member", isFlattened: false)
            value.category = try reader["Category"].readIfPresent()
            value.source = try reader["Source"].readIfPresent()
            value.typeDetection = try reader["TypeDetection"].readIfPresent()
            value.typeRecommendation = try reader["TypeRecommendation"].readIfPresent()
            value.impact = try reader["Impact"].readIfPresent()
            value.additionalInfo = try reader["AdditionalInfo"].readIfPresent()
            value.links = try reader["Links"].readListIfPresent(memberReadingClosure: RDSClientTypes.DocLink.readingClosure, memberNodeInfo: "member", isFlattened: false)
            value.issueDetails = try reader["IssueDetails"].readIfPresent(readingClosure: RDSClientTypes.IssueDetails.readingClosure)
            return value
        }
    }
}

extension RDSClientTypes {
    /// The recommendation for your DB instances, DB clusters, and DB parameter groups.
    public struct DBRecommendation: Swift.Equatable {
        /// Additional information about the recommendation. The information might contain markdown.
        public var additionalInfo: Swift.String?
        /// The category of the recommendation. Valid values:
        ///
        /// * performance efficiency
        ///
        /// * security
        ///
        /// * reliability
        ///
        /// * cost optimization
        ///
        /// * operational excellence
        ///
        /// * sustainability
        public var category: Swift.String?
        /// The time when the recommendation was created. For example, 2023-09-28T01:13:53.931000+00:00.
        public var createdTime: ClientRuntime.Date?
        /// A detailed description of the recommendation. The description might contain markdown.
        public var description: Swift.String?
        /// A short description of the issue identified for this recommendation. The description might contain markdown.
        public var detection: Swift.String?
        /// A short description that explains the possible impact of an issue.
        public var impact: Swift.String?
        /// Details of the issue that caused the recommendation.
        public var issueDetails: RDSClientTypes.IssueDetails?
        /// A link to documentation that provides additional information about the recommendation.
        public var links: [RDSClientTypes.DocLink]?
        /// The reason why this recommendation was created. The information might contain markdown.
        public var reason: Swift.String?
        /// A short description of the recommendation to resolve an issue. The description might contain markdown.
        public var recommendation: Swift.String?
        /// The unique identifier of the recommendation.
        public var recommendationId: Swift.String?
        /// A list of recommended actions.
        public var recommendedActions: [RDSClientTypes.RecommendedAction]?
        /// The Amazon Resource Name (ARN) of the RDS resource associated with the recommendation.
        public var resourceArn: Swift.String?
        /// The severity level of the recommendation. The severity level can help you decide the urgency with which to address the recommendation. Valid values:
        ///
        /// * high
        ///
        /// * medium
        ///
        /// * low
        ///
        /// * informational
        public var severity: Swift.String?
        /// The Amazon Web Services service that generated the recommendations.
        public var source: Swift.String?
        /// The current status of the recommendation. Valid values:
        ///
        /// * active - The recommendations which are ready for you to apply.
        ///
        /// * pending - The applied or scheduled recommendations which are in progress.
        ///
        /// * resolved - The recommendations which are completed.
        ///
        /// * dismissed - The recommendations that you dismissed.
        public var status: Swift.String?
        /// A short description of the recommendation type. The description might contain markdown.
        public var typeDetection: Swift.String?
        /// A value that indicates the type of recommendation. This value determines how the description is rendered.
        public var typeId: Swift.String?
        /// A short description that summarizes the recommendation to fix all the issues of the recommendation type. The description might contain markdown.
        public var typeRecommendation: Swift.String?
        /// The time when the recommendation was last updated.
        public var updatedTime: ClientRuntime.Date?

        public init(
            additionalInfo: Swift.String? = nil,
            category: Swift.String? = nil,
            createdTime: ClientRuntime.Date? = nil,
            description: Swift.String? = nil,
            detection: Swift.String? = nil,
            impact: Swift.String? = nil,
            issueDetails: RDSClientTypes.IssueDetails? = nil,
            links: [RDSClientTypes.DocLink]? = nil,
            reason: Swift.String? = nil,
            recommendation: Swift.String? = nil,
            recommendationId: Swift.String? = nil,
            recommendedActions: [RDSClientTypes.RecommendedAction]? = nil,
            resourceArn: Swift.String? = nil,
            severity: Swift.String? = nil,
            source: Swift.String? = nil,
            status: Swift.String? = nil,
            typeDetection: Swift.String? = nil,
            typeId: Swift.String? = nil,
            typeRecommendation: Swift.String? = nil,
            updatedTime: ClientRuntime.Date? = nil
        )
        {
            self.additionalInfo = additionalInfo
            self.category = category
            self.createdTime = createdTime
            self.description = description
            self.detection = detection
            self.impact = impact
            self.issueDetails = issueDetails
            self.links = links
            self.reason = reason
            self.recommendation = recommendation
            self.recommendationId = recommendationId
            self.recommendedActions = recommendedActions
            self.resourceArn = resourceArn
            self.severity = severity
            self.source = source
            self.status = status
            self.typeDetection = typeDetection
            self.typeId = typeId
            self.typeRecommendation = typeRecommendation
            self.updatedTime = updatedTime
        }
    }

}

extension RDSClientTypes.DBSecurityGroup: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dbSecurityGroupArn = "DBSecurityGroupArn"
        case dbSecurityGroupDescription = "DBSecurityGroupDescription"
        case dbSecurityGroupName = "DBSecurityGroupName"
        case ec2SecurityGroups = "EC2SecurityGroups"
        case ipRanges = "IPRanges"
        case ownerId = "OwnerId"
        case vpcId = "VpcId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let dbSecurityGroupArn = dbSecurityGroupArn {
            try container.encode(dbSecurityGroupArn, forKey: ClientRuntime.Key("DBSecurityGroupArn"))
        }
        if let dbSecurityGroupDescription = dbSecurityGroupDescription {
            try container.encode(dbSecurityGroupDescription, forKey: ClientRuntime.Key("DBSecurityGroupDescription"))
        }
        if let dbSecurityGroupName = dbSecurityGroupName {
            try container.encode(dbSecurityGroupName, forKey: ClientRuntime.Key("DBSecurityGroupName"))
        }
        if let ec2SecurityGroups = ec2SecurityGroups {
            if !ec2SecurityGroups.isEmpty {
                var ec2SecurityGroupsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("EC2SecurityGroups"))
                for (index0, ec2securitygroup0) in ec2SecurityGroups.enumerated() {
                    try ec2SecurityGroupsContainer.encode(ec2securitygroup0, forKey: ClientRuntime.Key("EC2SecurityGroup.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var ec2SecurityGroupsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("EC2SecurityGroups"))
                try ec2SecurityGroupsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let ipRanges = ipRanges {
            if !ipRanges.isEmpty {
                var ipRangesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("IPRanges"))
                for (index0, iprange0) in ipRanges.enumerated() {
                    try ipRangesContainer.encode(iprange0, forKey: ClientRuntime.Key("IPRange.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var ipRangesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("IPRanges"))
                try ipRangesContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let ownerId = ownerId {
            try container.encode(ownerId, forKey: ClientRuntime.Key("OwnerId"))
        }
        if let vpcId = vpcId {
            try container.encode(vpcId, forKey: ClientRuntime.Key("VpcId"))
        }
    }

    static var readingClosure: SmithyReadWrite.ReadingClosure<RDSClientTypes.DBSecurityGroup, SmithyXML.Reader> {
        return { reader in
            guard reader.content != nil else { return nil }
            var value = RDSClientTypes.DBSecurityGroup()
            value.ownerId = try reader["OwnerId"].readIfPresent()
            value.dbSecurityGroupName = try reader["DBSecurityGroupName"].readIfPresent()
            value.dbSecurityGroupDescription = try reader["DBSecurityGroupDescription"].readIfPresent()
            value.vpcId = try reader["VpcId"].readIfPresent()
            value.ec2SecurityGroups = try reader["EC2SecurityGroups"].readListIfPresent(memberReadingClosure: RDSClientTypes.EC2SecurityGroup.readingClosure, memberNodeInfo: "EC2SecurityGroup", isFlattened: false)
            value.ipRanges = try reader["IPRanges"].readListIfPresent(memberReadingClosure: RDSClientTypes.IPRange.readingClosure, memberNodeInfo: "IPRange", isFlattened: false)
            value.dbSecurityGroupArn = try reader["DBSecurityGroupArn"].readIfPresent()
            return value
        }
    }
}

extension RDSClientTypes {
    /// Contains the details for an Amazon RDS DB security group. This data type is used as a response element in the DescribeDBSecurityGroups action.
    public struct DBSecurityGroup: Swift.Equatable {
        /// The Amazon Resource Name (ARN) for the DB security group.
        public var dbSecurityGroupArn: Swift.String?
        /// Provides the description of the DB security group.
        public var dbSecurityGroupDescription: Swift.String?
        /// Specifies the name of the DB security group.
        public var dbSecurityGroupName: Swift.String?
        /// Contains a list of EC2SecurityGroup elements.
        public var ec2SecurityGroups: [RDSClientTypes.EC2SecurityGroup]?
        /// Contains a list of IPRange elements.
        public var ipRanges: [RDSClientTypes.IPRange]?
        /// Provides the Amazon Web Services ID of the owner of a specific DB security group.
        public var ownerId: Swift.String?
        /// Provides the VpcId of the DB security group.
        public var vpcId: Swift.String?

        public init(
            dbSecurityGroupArn: Swift.String? = nil,
            dbSecurityGroupDescription: Swift.String? = nil,
            dbSecurityGroupName: Swift.String? = nil,
            ec2SecurityGroups: [RDSClientTypes.EC2SecurityGroup]? = nil,
            ipRanges: [RDSClientTypes.IPRange]? = nil,
            ownerId: Swift.String? = nil,
            vpcId: Swift.String? = nil
        )
        {
            self.dbSecurityGroupArn = dbSecurityGroupArn
            self.dbSecurityGroupDescription = dbSecurityGroupDescription
            self.dbSecurityGroupName = dbSecurityGroupName
            self.ec2SecurityGroups = ec2SecurityGroups
            self.ipRanges = ipRanges
            self.ownerId = ownerId
            self.vpcId = vpcId
        }
    }

}

extension DBSecurityGroupAlreadyExistsFault {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = DBSecurityGroupAlreadyExistsFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// A DB security group with the name specified in DBSecurityGroupName already exists.
public struct DBSecurityGroupAlreadyExistsFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "DBSecurityGroupAlreadyExists" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension RDSClientTypes.DBSecurityGroupMembership: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dbSecurityGroupName = "DBSecurityGroupName"
        case status = "Status"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let dbSecurityGroupName = dbSecurityGroupName {
            try container.encode(dbSecurityGroupName, forKey: ClientRuntime.Key("DBSecurityGroupName"))
        }
        if let status = status {
            try container.encode(status, forKey: ClientRuntime.Key("Status"))
        }
    }

    static var readingClosure: SmithyReadWrite.ReadingClosure<RDSClientTypes.DBSecurityGroupMembership, SmithyXML.Reader> {
        return { reader in
            guard reader.content != nil else { return nil }
            var value = RDSClientTypes.DBSecurityGroupMembership()
            value.dbSecurityGroupName = try reader["DBSecurityGroupName"].readIfPresent()
            value.status = try reader["Status"].readIfPresent()
            return value
        }
    }
}

extension RDSClientTypes {
    /// This data type is used as a response element in the following actions:
    ///
    /// * ModifyDBInstance
    ///
    /// * RebootDBInstance
    ///
    /// * RestoreDBInstanceFromDBSnapshot
    ///
    /// * RestoreDBInstanceToPointInTime
    public struct DBSecurityGroupMembership: Swift.Equatable {
        /// The name of the DB security group.
        public var dbSecurityGroupName: Swift.String?
        /// The status of the DB security group.
        public var status: Swift.String?

        public init(
            dbSecurityGroupName: Swift.String? = nil,
            status: Swift.String? = nil
        )
        {
            self.dbSecurityGroupName = dbSecurityGroupName
            self.status = status
        }
    }

}

extension DBSecurityGroupNotFoundFault {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = DBSecurityGroupNotFoundFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// DBSecurityGroupName doesn't refer to an existing DB security group.
public struct DBSecurityGroupNotFoundFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "DBSecurityGroupNotFound" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension DBSecurityGroupNotSupportedFault {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = DBSecurityGroupNotSupportedFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// A DB security group isn't allowed for this action.
public struct DBSecurityGroupNotSupportedFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "DBSecurityGroupNotSupported" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension DBSecurityGroupQuotaExceededFault {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = DBSecurityGroupQuotaExceededFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// The request would result in the user exceeding the allowed number of DB security groups.
public struct DBSecurityGroupQuotaExceededFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "QuotaExceeded.DBSecurityGroup" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension RDSClientTypes.DBShardGroup: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case computeRedundancy = "ComputeRedundancy"
        case dbClusterIdentifier = "DBClusterIdentifier"
        case dbShardGroupIdentifier = "DBShardGroupIdentifier"
        case dbShardGroupResourceId = "DBShardGroupResourceId"
        case endpoint = "Endpoint"
        case maxACU = "MaxACU"
        case publiclyAccessible = "PubliclyAccessible"
        case status = "Status"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let computeRedundancy = computeRedundancy {
            try container.encode(computeRedundancy, forKey: ClientRuntime.Key("ComputeRedundancy"))
        }
        if let dbClusterIdentifier = dbClusterIdentifier {
            try container.encode(dbClusterIdentifier, forKey: ClientRuntime.Key("DBClusterIdentifier"))
        }
        if let dbShardGroupIdentifier = dbShardGroupIdentifier {
            try container.encode(dbShardGroupIdentifier, forKey: ClientRuntime.Key("DBShardGroupIdentifier"))
        }
        if let dbShardGroupResourceId = dbShardGroupResourceId {
            try container.encode(dbShardGroupResourceId, forKey: ClientRuntime.Key("DBShardGroupResourceId"))
        }
        if let endpoint = endpoint {
            try container.encode(endpoint, forKey: ClientRuntime.Key("Endpoint"))
        }
        if let maxACU = maxACU {
            try container.encode(maxACU, forKey: ClientRuntime.Key("MaxACU"))
        }
        if let publiclyAccessible = publiclyAccessible {
            try container.encode(publiclyAccessible, forKey: ClientRuntime.Key("PubliclyAccessible"))
        }
        if let status = status {
            try container.encode(status, forKey: ClientRuntime.Key("Status"))
        }
    }

    static var readingClosure: SmithyReadWrite.ReadingClosure<RDSClientTypes.DBShardGroup, SmithyXML.Reader> {
        return { reader in
            guard reader.content != nil else { return nil }
            var value = RDSClientTypes.DBShardGroup()
            value.dbShardGroupResourceId = try reader["DBShardGroupResourceId"].readIfPresent()
            value.dbShardGroupIdentifier = try reader["DBShardGroupIdentifier"].readIfPresent()
            value.dbClusterIdentifier = try reader["DBClusterIdentifier"].readIfPresent()
            value.maxACU = try reader["MaxACU"].readIfPresent()
            value.computeRedundancy = try reader["ComputeRedundancy"].readIfPresent()
            value.status = try reader["Status"].readIfPresent()
            value.publiclyAccessible = try reader["PubliclyAccessible"].readIfPresent()
            value.endpoint = try reader["Endpoint"].readIfPresent()
            return value
        }
    }
}

extension RDSClientTypes {
    public struct DBShardGroup: Swift.Equatable {
        /// Specifies whether to create standby instances for the DB shard group. Valid values are the following:
        ///
        /// * 0 - Creates a single, primary DB instance for each physical shard. This is the default value, and the only one supported for the preview.
        ///
        /// * 1 - Creates a primary DB instance and a standby instance in a different Availability Zone (AZ) for each physical shard.
        ///
        /// * 2 - Creates a primary DB instance and two standby instances in different AZs for each physical shard.
        public var computeRedundancy: Swift.Int?
        /// The name of the primary DB cluster for the DB shard group.
        public var dbClusterIdentifier: Swift.String?
        /// The name of the DB shard group.
        public var dbShardGroupIdentifier: Swift.String?
        /// The Amazon Web Services Region-unique, immutable identifier for the DB shard group.
        public var dbShardGroupResourceId: Swift.String?
        /// The connection endpoint for the DB shard group.
        public var endpoint: Swift.String?
        /// The maximum capacity of the DB shard group in Aurora capacity units (ACUs).
        public var maxACU: Swift.Double?
        /// Indicates whether the DB shard group is publicly accessible. When the DB shard group is publicly accessible, its Domain Name System (DNS) endpoint resolves to the private IP address from within the DB shard group's virtual private cloud (VPC). It resolves to the public IP address from outside of the DB shard group's VPC. Access to the DB shard group is ultimately controlled by the security group it uses. That public access isn't permitted if the security group assigned to the DB shard group doesn't permit it. When the DB shard group isn't publicly accessible, it is an internal DB shard group with a DNS name that resolves to a private IP address. For more information, see [CreateDBShardGroup]. This setting is only for Aurora Limitless Database.
        public var publiclyAccessible: Swift.Bool?
        /// The status of the DB shard group.
        public var status: Swift.String?

        public init(
            computeRedundancy: Swift.Int? = nil,
            dbClusterIdentifier: Swift.String? = nil,
            dbShardGroupIdentifier: Swift.String? = nil,
            dbShardGroupResourceId: Swift.String? = nil,
            endpoint: Swift.String? = nil,
            maxACU: Swift.Double? = nil,
            publiclyAccessible: Swift.Bool? = nil,
            status: Swift.String? = nil
        )
        {
            self.computeRedundancy = computeRedundancy
            self.dbClusterIdentifier = dbClusterIdentifier
            self.dbShardGroupIdentifier = dbShardGroupIdentifier
            self.dbShardGroupResourceId = dbShardGroupResourceId
            self.endpoint = endpoint
            self.maxACU = maxACU
            self.publiclyAccessible = publiclyAccessible
            self.status = status
        }
    }

}

extension DBShardGroupAlreadyExistsFault {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = DBShardGroupAlreadyExistsFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// The specified DB shard group name must be unique in your Amazon Web Services account in the specified Amazon Web Services Region.
public struct DBShardGroupAlreadyExistsFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "DBShardGroupAlreadyExists" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension DBShardGroupNotFoundFault {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = DBShardGroupNotFoundFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// The specified DB shard group name wasn't found.
public struct DBShardGroupNotFoundFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "DBShardGroupNotFound" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension RDSClientTypes.DBSnapshot: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case allocatedStorage = "AllocatedStorage"
        case availabilityZone = "AvailabilityZone"
        case dbInstanceIdentifier = "DBInstanceIdentifier"
        case dbSnapshotArn = "DBSnapshotArn"
        case dbSnapshotIdentifier = "DBSnapshotIdentifier"
        case dbSystemId = "DBSystemId"
        case dbiResourceId = "DbiResourceId"
        case dedicatedLogVolume = "DedicatedLogVolume"
        case encrypted = "Encrypted"
        case engine = "Engine"
        case engineVersion = "EngineVersion"
        case iamDatabaseAuthenticationEnabled = "IAMDatabaseAuthenticationEnabled"
        case instanceCreateTime = "InstanceCreateTime"
        case iops = "Iops"
        case kmsKeyId = "KmsKeyId"
        case licenseModel = "LicenseModel"
        case masterUsername = "MasterUsername"
        case multiTenant = "MultiTenant"
        case optionGroupName = "OptionGroupName"
        case originalSnapshotCreateTime = "OriginalSnapshotCreateTime"
        case percentProgress = "PercentProgress"
        case port = "Port"
        case processorFeatures = "ProcessorFeatures"
        case snapshotCreateTime = "SnapshotCreateTime"
        case snapshotDatabaseTime = "SnapshotDatabaseTime"
        case snapshotTarget = "SnapshotTarget"
        case snapshotType = "SnapshotType"
        case sourceDBSnapshotIdentifier = "SourceDBSnapshotIdentifier"
        case sourceRegion = "SourceRegion"
        case status = "Status"
        case storageThroughput = "StorageThroughput"
        case storageType = "StorageType"
        case tagList = "TagList"
        case tdeCredentialArn = "TdeCredentialArn"
        case timezone = "Timezone"
        case vpcId = "VpcId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let allocatedStorage = allocatedStorage {
            try container.encode(allocatedStorage, forKey: ClientRuntime.Key("AllocatedStorage"))
        }
        if let availabilityZone = availabilityZone {
            try container.encode(availabilityZone, forKey: ClientRuntime.Key("AvailabilityZone"))
        }
        if let dbInstanceIdentifier = dbInstanceIdentifier {
            try container.encode(dbInstanceIdentifier, forKey: ClientRuntime.Key("DBInstanceIdentifier"))
        }
        if let dbSnapshotArn = dbSnapshotArn {
            try container.encode(dbSnapshotArn, forKey: ClientRuntime.Key("DBSnapshotArn"))
        }
        if let dbSnapshotIdentifier = dbSnapshotIdentifier {
            try container.encode(dbSnapshotIdentifier, forKey: ClientRuntime.Key("DBSnapshotIdentifier"))
        }
        if let dbSystemId = dbSystemId {
            try container.encode(dbSystemId, forKey: ClientRuntime.Key("DBSystemId"))
        }
        if let dbiResourceId = dbiResourceId {
            try container.encode(dbiResourceId, forKey: ClientRuntime.Key("DbiResourceId"))
        }
        if let dedicatedLogVolume = dedicatedLogVolume {
            try container.encode(dedicatedLogVolume, forKey: ClientRuntime.Key("DedicatedLogVolume"))
        }
        if let encrypted = encrypted {
            try container.encode(encrypted, forKey: ClientRuntime.Key("Encrypted"))
        }
        if let engine = engine {
            try container.encode(engine, forKey: ClientRuntime.Key("Engine"))
        }
        if let engineVersion = engineVersion {
            try container.encode(engineVersion, forKey: ClientRuntime.Key("EngineVersion"))
        }
        if let iamDatabaseAuthenticationEnabled = iamDatabaseAuthenticationEnabled {
            try container.encode(iamDatabaseAuthenticationEnabled, forKey: ClientRuntime.Key("IAMDatabaseAuthenticationEnabled"))
        }
        if let instanceCreateTime = instanceCreateTime {
            try container.encodeTimestamp(instanceCreateTime, format: .dateTime, forKey: ClientRuntime.Key("InstanceCreateTime"))
        }
        if let iops = iops {
            try container.encode(iops, forKey: ClientRuntime.Key("Iops"))
        }
        if let kmsKeyId = kmsKeyId {
            try container.encode(kmsKeyId, forKey: ClientRuntime.Key("KmsKeyId"))
        }
        if let licenseModel = licenseModel {
            try container.encode(licenseModel, forKey: ClientRuntime.Key("LicenseModel"))
        }
        if let masterUsername = masterUsername {
            try container.encode(masterUsername, forKey: ClientRuntime.Key("MasterUsername"))
        }
        if let multiTenant = multiTenant {
            try container.encode(multiTenant, forKey: ClientRuntime.Key("MultiTenant"))
        }
        if let optionGroupName = optionGroupName {
            try container.encode(optionGroupName, forKey: ClientRuntime.Key("OptionGroupName"))
        }
        if let originalSnapshotCreateTime = originalSnapshotCreateTime {
            try container.encodeTimestamp(originalSnapshotCreateTime, format: .dateTime, forKey: ClientRuntime.Key("OriginalSnapshotCreateTime"))
        }
        if let percentProgress = percentProgress {
            try container.encode(percentProgress, forKey: ClientRuntime.Key("PercentProgress"))
        }
        if let port = port {
            try container.encode(port, forKey: ClientRuntime.Key("Port"))
        }
        if let processorFeatures = processorFeatures {
            if !processorFeatures.isEmpty {
                var processorFeaturesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("ProcessorFeatures"))
                for (index0, processorfeature0) in processorFeatures.enumerated() {
                    try processorFeaturesContainer.encode(processorfeature0, forKey: ClientRuntime.Key("ProcessorFeature.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var processorFeaturesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("ProcessorFeatures"))
                try processorFeaturesContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let snapshotCreateTime = snapshotCreateTime {
            try container.encodeTimestamp(snapshotCreateTime, format: .dateTime, forKey: ClientRuntime.Key("SnapshotCreateTime"))
        }
        if let snapshotDatabaseTime = snapshotDatabaseTime {
            try container.encodeTimestamp(snapshotDatabaseTime, format: .dateTime, forKey: ClientRuntime.Key("SnapshotDatabaseTime"))
        }
        if let snapshotTarget = snapshotTarget {
            try container.encode(snapshotTarget, forKey: ClientRuntime.Key("SnapshotTarget"))
        }
        if let snapshotType = snapshotType {
            try container.encode(snapshotType, forKey: ClientRuntime.Key("SnapshotType"))
        }
        if let sourceDBSnapshotIdentifier = sourceDBSnapshotIdentifier {
            try container.encode(sourceDBSnapshotIdentifier, forKey: ClientRuntime.Key("SourceDBSnapshotIdentifier"))
        }
        if let sourceRegion = sourceRegion {
            try container.encode(sourceRegion, forKey: ClientRuntime.Key("SourceRegion"))
        }
        if let status = status {
            try container.encode(status, forKey: ClientRuntime.Key("Status"))
        }
        if let storageThroughput = storageThroughput {
            try container.encode(storageThroughput, forKey: ClientRuntime.Key("StorageThroughput"))
        }
        if let storageType = storageType {
            try container.encode(storageType, forKey: ClientRuntime.Key("StorageType"))
        }
        if let tagList = tagList {
            if !tagList.isEmpty {
                var tagListContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("TagList"))
                for (index0, tag0) in tagList.enumerated() {
                    try tagListContainer.encode(tag0, forKey: ClientRuntime.Key("Tag.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var tagListContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("TagList"))
                try tagListContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let tdeCredentialArn = tdeCredentialArn {
            try container.encode(tdeCredentialArn, forKey: ClientRuntime.Key("TdeCredentialArn"))
        }
        if let timezone = timezone {
            try container.encode(timezone, forKey: ClientRuntime.Key("Timezone"))
        }
        if let vpcId = vpcId {
            try container.encode(vpcId, forKey: ClientRuntime.Key("VpcId"))
        }
    }

    static var readingClosure: SmithyReadWrite.ReadingClosure<RDSClientTypes.DBSnapshot, SmithyXML.Reader> {
        return { reader in
            guard reader.content != nil else { return nil }
            var value = RDSClientTypes.DBSnapshot()
            value.dbSnapshotIdentifier = try reader["DBSnapshotIdentifier"].readIfPresent()
            value.dbInstanceIdentifier = try reader["DBInstanceIdentifier"].readIfPresent()
            value.snapshotCreateTime = try reader["SnapshotCreateTime"].readTimestampIfPresent(format: .dateTime)
            value.engine = try reader["Engine"].readIfPresent()
            value.allocatedStorage = try reader["AllocatedStorage"].readIfPresent()
            value.status = try reader["Status"].readIfPresent()
            value.port = try reader["Port"].readIfPresent()
            value.availabilityZone = try reader["AvailabilityZone"].readIfPresent()
            value.vpcId = try reader["VpcId"].readIfPresent()
            value.instanceCreateTime = try reader["InstanceCreateTime"].readTimestampIfPresent(format: .dateTime)
            value.masterUsername = try reader["MasterUsername"].readIfPresent()
            value.engineVersion = try reader["EngineVersion"].readIfPresent()
            value.licenseModel = try reader["LicenseModel"].readIfPresent()
            value.snapshotType = try reader["SnapshotType"].readIfPresent()
            value.iops = try reader["Iops"].readIfPresent()
            value.optionGroupName = try reader["OptionGroupName"].readIfPresent()
            value.percentProgress = try reader["PercentProgress"].readIfPresent()
            value.sourceRegion = try reader["SourceRegion"].readIfPresent()
            value.sourceDBSnapshotIdentifier = try reader["SourceDBSnapshotIdentifier"].readIfPresent()
            value.storageType = try reader["StorageType"].readIfPresent()
            value.tdeCredentialArn = try reader["TdeCredentialArn"].readIfPresent()
            value.encrypted = try reader["Encrypted"].readIfPresent()
            value.kmsKeyId = try reader["KmsKeyId"].readIfPresent()
            value.dbSnapshotArn = try reader["DBSnapshotArn"].readIfPresent()
            value.timezone = try reader["Timezone"].readIfPresent()
            value.iamDatabaseAuthenticationEnabled = try reader["IAMDatabaseAuthenticationEnabled"].readIfPresent()
            value.processorFeatures = try reader["ProcessorFeatures"].readListIfPresent(memberReadingClosure: RDSClientTypes.ProcessorFeature.readingClosure, memberNodeInfo: "ProcessorFeature", isFlattened: false)
            value.dbiResourceId = try reader["DbiResourceId"].readIfPresent()
            value.tagList = try reader["TagList"].readListIfPresent(memberReadingClosure: RDSClientTypes.Tag.readingClosure, memberNodeInfo: "Tag", isFlattened: false)
            value.originalSnapshotCreateTime = try reader["OriginalSnapshotCreateTime"].readTimestampIfPresent(format: .dateTime)
            value.snapshotDatabaseTime = try reader["SnapshotDatabaseTime"].readTimestampIfPresent(format: .dateTime)
            value.snapshotTarget = try reader["SnapshotTarget"].readIfPresent()
            value.storageThroughput = try reader["StorageThroughput"].readIfPresent()
            value.dbSystemId = try reader["DBSystemId"].readIfPresent()
            value.dedicatedLogVolume = try reader["DedicatedLogVolume"].readIfPresent()
            value.multiTenant = try reader["MultiTenant"].readIfPresent()
            return value
        }
    }
}

extension RDSClientTypes {
    /// Contains the details of an Amazon RDS DB snapshot. This data type is used as a response element in the DescribeDBSnapshots action.
    public struct DBSnapshot: Swift.Equatable {
        /// Specifies the allocated storage size in gibibytes (GiB).
        public var allocatedStorage: Swift.Int?
        /// Specifies the name of the Availability Zone the DB instance was located in at the time of the DB snapshot.
        public var availabilityZone: Swift.String?
        /// Specifies the DB instance identifier of the DB instance this DB snapshot was created from.
        public var dbInstanceIdentifier: Swift.String?
        /// The Amazon Resource Name (ARN) for the DB snapshot.
        public var dbSnapshotArn: Swift.String?
        /// Specifies the identifier for the DB snapshot.
        public var dbSnapshotIdentifier: Swift.String?
        /// The Oracle system identifier (SID), which is the name of the Oracle database instance that manages your database files. The Oracle SID is also the name of your CDB.
        public var dbSystemId: Swift.String?
        /// The identifier for the source DB instance, which can't be changed and which is unique to an Amazon Web Services Region.
        public var dbiResourceId: Swift.String?
        /// Indicates whether the DB instance has a dedicated log volume (DLV) enabled.
        public var dedicatedLogVolume: Swift.Bool?
        /// Indicates whether the DB snapshot is encrypted.
        public var encrypted: Swift.Bool?
        /// Specifies the name of the database engine.
        public var engine: Swift.String?
        /// Specifies the version of the database engine.
        public var engineVersion: Swift.String?
        /// Indicates whether mapping of Amazon Web Services Identity and Access Management (IAM) accounts to database accounts is enabled.
        public var iamDatabaseAuthenticationEnabled: Swift.Bool?
        /// Specifies the time in Coordinated Universal Time (UTC) when the DB instance, from which the snapshot was taken, was created.
        public var instanceCreateTime: ClientRuntime.Date?
        /// Specifies the Provisioned IOPS (I/O operations per second) value of the DB instance at the time of the snapshot.
        public var iops: Swift.Int?
        /// If Encrypted is true, the Amazon Web Services KMS key identifier for the encrypted DB snapshot. The Amazon Web Services KMS key identifier is the key ARN, key ID, alias ARN, or alias name for the KMS key.
        public var kmsKeyId: Swift.String?
        /// License model information for the restored DB instance.
        public var licenseModel: Swift.String?
        /// Provides the master username for the DB snapshot.
        public var masterUsername: Swift.String?
        /// Indicates whether the snapshot is of a DB instance using the multi-tenant configuration (TRUE) or the single-tenant configuration (FALSE).
        public var multiTenant: Swift.Bool?
        /// Provides the option group name for the DB snapshot.
        public var optionGroupName: Swift.String?
        /// Specifies the time of the CreateDBSnapshot operation in Coordinated Universal Time (UTC). Doesn't change when the snapshot is copied.
        public var originalSnapshotCreateTime: ClientRuntime.Date?
        /// The percentage of the estimated data that has been transferred.
        public var percentProgress: Swift.Int?
        /// Specifies the port that the database engine was listening on at the time of the snapshot.
        public var port: Swift.Int?
        /// The number of CPU cores and the number of threads per core for the DB instance class of the DB instance when the DB snapshot was created.
        public var processorFeatures: [RDSClientTypes.ProcessorFeature]?
        /// Specifies when the snapshot was taken in Coordinated Universal Time (UTC). Changes for the copy when the snapshot is copied.
        public var snapshotCreateTime: ClientRuntime.Date?
        /// The timestamp of the most recent transaction applied to the database that you're backing up. Thus, if you restore a snapshot, SnapshotDatabaseTime is the most recent transaction in the restored DB instance. In contrast, originalSnapshotCreateTime specifies the system time that the snapshot completed. If you back up a read replica, you can determine the replica lag by comparing SnapshotDatabaseTime with originalSnapshotCreateTime. For example, if originalSnapshotCreateTime is two hours later than SnapshotDatabaseTime, then the replica lag is two hours.
        public var snapshotDatabaseTime: ClientRuntime.Date?
        /// Specifies where manual snapshots are stored: Amazon Web Services Outposts or the Amazon Web Services Region.
        public var snapshotTarget: Swift.String?
        /// Provides the type of the DB snapshot.
        public var snapshotType: Swift.String?
        /// The DB snapshot Amazon Resource Name (ARN) that the DB snapshot was copied from. It only has a value in the case of a cross-account or cross-Region copy.
        public var sourceDBSnapshotIdentifier: Swift.String?
        /// The Amazon Web Services Region that the DB snapshot was created in or copied from.
        public var sourceRegion: Swift.String?
        /// Specifies the status of this DB snapshot.
        public var status: Swift.String?
        /// Specifies the storage throughput for the DB snapshot.
        public var storageThroughput: Swift.Int?
        /// Specifies the storage type associated with DB snapshot.
        public var storageType: Swift.String?
        /// A list of tags. For more information, see [Tagging Amazon RDS Resources](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html) in the Amazon RDS User Guide.
        public var tagList: [RDSClientTypes.Tag]?
        /// The ARN from the key store with which to associate the instance for TDE encryption.
        public var tdeCredentialArn: Swift.String?
        /// The time zone of the DB snapshot. In most cases, the Timezone element is empty. Timezone content appears only for snapshots taken from Microsoft SQL Server DB instances that were created with a time zone specified.
        public var timezone: Swift.String?
        /// Provides the VPC ID associated with the DB snapshot.
        public var vpcId: Swift.String?

        public init(
            allocatedStorage: Swift.Int? = nil,
            availabilityZone: Swift.String? = nil,
            dbInstanceIdentifier: Swift.String? = nil,
            dbSnapshotArn: Swift.String? = nil,
            dbSnapshotIdentifier: Swift.String? = nil,
            dbSystemId: Swift.String? = nil,
            dbiResourceId: Swift.String? = nil,
            dedicatedLogVolume: Swift.Bool? = nil,
            encrypted: Swift.Bool? = nil,
            engine: Swift.String? = nil,
            engineVersion: Swift.String? = nil,
            iamDatabaseAuthenticationEnabled: Swift.Bool? = nil,
            instanceCreateTime: ClientRuntime.Date? = nil,
            iops: Swift.Int? = nil,
            kmsKeyId: Swift.String? = nil,
            licenseModel: Swift.String? = nil,
            masterUsername: Swift.String? = nil,
            multiTenant: Swift.Bool? = nil,
            optionGroupName: Swift.String? = nil,
            originalSnapshotCreateTime: ClientRuntime.Date? = nil,
            percentProgress: Swift.Int? = nil,
            port: Swift.Int? = nil,
            processorFeatures: [RDSClientTypes.ProcessorFeature]? = nil,
            snapshotCreateTime: ClientRuntime.Date? = nil,
            snapshotDatabaseTime: ClientRuntime.Date? = nil,
            snapshotTarget: Swift.String? = nil,
            snapshotType: Swift.String? = nil,
            sourceDBSnapshotIdentifier: Swift.String? = nil,
            sourceRegion: Swift.String? = nil,
            status: Swift.String? = nil,
            storageThroughput: Swift.Int? = nil,
            storageType: Swift.String? = nil,
            tagList: [RDSClientTypes.Tag]? = nil,
            tdeCredentialArn: Swift.String? = nil,
            timezone: Swift.String? = nil,
            vpcId: Swift.String? = nil
        )
        {
            self.allocatedStorage = allocatedStorage
            self.availabilityZone = availabilityZone
            self.dbInstanceIdentifier = dbInstanceIdentifier
            self.dbSnapshotArn = dbSnapshotArn
            self.dbSnapshotIdentifier = dbSnapshotIdentifier
            self.dbSystemId = dbSystemId
            self.dbiResourceId = dbiResourceId
            self.dedicatedLogVolume = dedicatedLogVolume
            self.encrypted = encrypted
            self.engine = engine
            self.engineVersion = engineVersion
            self.iamDatabaseAuthenticationEnabled = iamDatabaseAuthenticationEnabled
            self.instanceCreateTime = instanceCreateTime
            self.iops = iops
            self.kmsKeyId = kmsKeyId
            self.licenseModel = licenseModel
            self.masterUsername = masterUsername
            self.multiTenant = multiTenant
            self.optionGroupName = optionGroupName
            self.originalSnapshotCreateTime = originalSnapshotCreateTime
            self.percentProgress = percentProgress
            self.port = port
            self.processorFeatures = processorFeatures
            self.snapshotCreateTime = snapshotCreateTime
            self.snapshotDatabaseTime = snapshotDatabaseTime
            self.snapshotTarget = snapshotTarget
            self.snapshotType = snapshotType
            self.sourceDBSnapshotIdentifier = sourceDBSnapshotIdentifier
            self.sourceRegion = sourceRegion
            self.status = status
            self.storageThroughput = storageThroughput
            self.storageType = storageType
            self.tagList = tagList
            self.tdeCredentialArn = tdeCredentialArn
            self.timezone = timezone
            self.vpcId = vpcId
        }
    }

}

extension DBSnapshotAlreadyExistsFault {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = DBSnapshotAlreadyExistsFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// DBSnapshotIdentifier is already used by an existing snapshot.
public struct DBSnapshotAlreadyExistsFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "DBSnapshotAlreadyExists" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension RDSClientTypes.DBSnapshotAttribute: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case attributeName = "AttributeName"
        case attributeValues = "AttributeValues"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let attributeName = attributeName {
            try container.encode(attributeName, forKey: ClientRuntime.Key("AttributeName"))
        }
        if let attributeValues = attributeValues {
            if !attributeValues.isEmpty {
                var attributeValuesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("AttributeValues"))
                for (index0, string0) in attributeValues.enumerated() {
                    try attributeValuesContainer.encode(string0, forKey: ClientRuntime.Key("AttributeValue.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var attributeValuesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("AttributeValues"))
                try attributeValuesContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
    }

    static var readingClosure: SmithyReadWrite.ReadingClosure<RDSClientTypes.DBSnapshotAttribute, SmithyXML.Reader> {
        return { reader in
            guard reader.content != nil else { return nil }
            var value = RDSClientTypes.DBSnapshotAttribute()
            value.attributeName = try reader["AttributeName"].readIfPresent()
            value.attributeValues = try reader["AttributeValues"].readListIfPresent(memberReadingClosure: Swift.String.readingClosure, memberNodeInfo: "AttributeValue", isFlattened: false)
            return value
        }
    }
}

extension RDSClientTypes {
    /// Contains the name and values of a manual DB snapshot attribute Manual DB snapshot attributes are used to authorize other Amazon Web Services accounts to restore a manual DB snapshot. For more information, see the ModifyDBSnapshotAttribute API.
    public struct DBSnapshotAttribute: Swift.Equatable {
        /// The name of the manual DB snapshot attribute. The attribute named restore refers to the list of Amazon Web Services accounts that have permission to copy or restore the manual DB cluster snapshot. For more information, see the ModifyDBSnapshotAttribute API action.
        public var attributeName: Swift.String?
        /// The value or values for the manual DB snapshot attribute. If the AttributeName field is set to restore, then this element returns a list of IDs of the Amazon Web Services accounts that are authorized to copy or restore the manual DB snapshot. If a value of all is in the list, then the manual DB snapshot is public and available for any Amazon Web Services account to copy or restore.
        public var attributeValues: [Swift.String]?

        public init(
            attributeName: Swift.String? = nil,
            attributeValues: [Swift.String]? = nil
        )
        {
            self.attributeName = attributeName
            self.attributeValues = attributeValues
        }
    }

}

extension RDSClientTypes.DBSnapshotAttributesResult: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dbSnapshotAttributes = "DBSnapshotAttributes"
        case dbSnapshotIdentifier = "DBSnapshotIdentifier"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let dbSnapshotAttributes = dbSnapshotAttributes {
            if !dbSnapshotAttributes.isEmpty {
                var dbSnapshotAttributesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("DBSnapshotAttributes"))
                for (index0, dbsnapshotattribute0) in dbSnapshotAttributes.enumerated() {
                    try dbSnapshotAttributesContainer.encode(dbsnapshotattribute0, forKey: ClientRuntime.Key("DBSnapshotAttribute.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var dbSnapshotAttributesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("DBSnapshotAttributes"))
                try dbSnapshotAttributesContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let dbSnapshotIdentifier = dbSnapshotIdentifier {
            try container.encode(dbSnapshotIdentifier, forKey: ClientRuntime.Key("DBSnapshotIdentifier"))
        }
    }

    static var readingClosure: SmithyReadWrite.ReadingClosure<RDSClientTypes.DBSnapshotAttributesResult, SmithyXML.Reader> {
        return { reader in
            guard reader.content != nil else { return nil }
            var value = RDSClientTypes.DBSnapshotAttributesResult()
            value.dbSnapshotIdentifier = try reader["DBSnapshotIdentifier"].readIfPresent()
            value.dbSnapshotAttributes = try reader["DBSnapshotAttributes"].readListIfPresent(memberReadingClosure: RDSClientTypes.DBSnapshotAttribute.readingClosure, memberNodeInfo: "DBSnapshotAttribute", isFlattened: false)
            return value
        }
    }
}

extension RDSClientTypes {
    /// Contains the results of a successful call to the DescribeDBSnapshotAttributes API action. Manual DB snapshot attributes are used to authorize other Amazon Web Services accounts to copy or restore a manual DB snapshot. For more information, see the ModifyDBSnapshotAttribute API action.
    public struct DBSnapshotAttributesResult: Swift.Equatable {
        /// The list of attributes and values for the manual DB snapshot.
        public var dbSnapshotAttributes: [RDSClientTypes.DBSnapshotAttribute]?
        /// The identifier of the manual DB snapshot that the attributes apply to.
        public var dbSnapshotIdentifier: Swift.String?

        public init(
            dbSnapshotAttributes: [RDSClientTypes.DBSnapshotAttribute]? = nil,
            dbSnapshotIdentifier: Swift.String? = nil
        )
        {
            self.dbSnapshotAttributes = dbSnapshotAttributes
            self.dbSnapshotIdentifier = dbSnapshotIdentifier
        }
    }

}

extension DBSnapshotNotFoundFault {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = DBSnapshotNotFoundFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// DBSnapshotIdentifier doesn't refer to an existing DB snapshot.
public struct DBSnapshotNotFoundFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "DBSnapshotNotFound" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension RDSClientTypes.DBSnapshotTenantDatabase: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case characterSetName = "CharacterSetName"
        case dbInstanceIdentifier = "DBInstanceIdentifier"
        case dbSnapshotIdentifier = "DBSnapshotIdentifier"
        case dbSnapshotTenantDatabaseARN = "DBSnapshotTenantDatabaseARN"
        case dbiResourceId = "DbiResourceId"
        case engineName = "EngineName"
        case masterUsername = "MasterUsername"
        case ncharCharacterSetName = "NcharCharacterSetName"
        case snapshotType = "SnapshotType"
        case tagList = "TagList"
        case tenantDBName = "TenantDBName"
        case tenantDatabaseCreateTime = "TenantDatabaseCreateTime"
        case tenantDatabaseResourceId = "TenantDatabaseResourceId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let characterSetName = characterSetName {
            try container.encode(characterSetName, forKey: ClientRuntime.Key("CharacterSetName"))
        }
        if let dbInstanceIdentifier = dbInstanceIdentifier {
            try container.encode(dbInstanceIdentifier, forKey: ClientRuntime.Key("DBInstanceIdentifier"))
        }
        if let dbSnapshotIdentifier = dbSnapshotIdentifier {
            try container.encode(dbSnapshotIdentifier, forKey: ClientRuntime.Key("DBSnapshotIdentifier"))
        }
        if let dbSnapshotTenantDatabaseARN = dbSnapshotTenantDatabaseARN {
            try container.encode(dbSnapshotTenantDatabaseARN, forKey: ClientRuntime.Key("DBSnapshotTenantDatabaseARN"))
        }
        if let dbiResourceId = dbiResourceId {
            try container.encode(dbiResourceId, forKey: ClientRuntime.Key("DbiResourceId"))
        }
        if let engineName = engineName {
            try container.encode(engineName, forKey: ClientRuntime.Key("EngineName"))
        }
        if let masterUsername = masterUsername {
            try container.encode(masterUsername, forKey: ClientRuntime.Key("MasterUsername"))
        }
        if let ncharCharacterSetName = ncharCharacterSetName {
            try container.encode(ncharCharacterSetName, forKey: ClientRuntime.Key("NcharCharacterSetName"))
        }
        if let snapshotType = snapshotType {
            try container.encode(snapshotType, forKey: ClientRuntime.Key("SnapshotType"))
        }
        if let tagList = tagList {
            if !tagList.isEmpty {
                var tagListContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("TagList"))
                for (index0, tag0) in tagList.enumerated() {
                    try tagListContainer.encode(tag0, forKey: ClientRuntime.Key("Tag.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var tagListContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("TagList"))
                try tagListContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let tenantDBName = tenantDBName {
            try container.encode(tenantDBName, forKey: ClientRuntime.Key("TenantDBName"))
        }
        if let tenantDatabaseCreateTime = tenantDatabaseCreateTime {
            try container.encodeTimestamp(tenantDatabaseCreateTime, format: .dateTime, forKey: ClientRuntime.Key("TenantDatabaseCreateTime"))
        }
        if let tenantDatabaseResourceId = tenantDatabaseResourceId {
            try container.encode(tenantDatabaseResourceId, forKey: ClientRuntime.Key("TenantDatabaseResourceId"))
        }
    }

    static var readingClosure: SmithyReadWrite.ReadingClosure<RDSClientTypes.DBSnapshotTenantDatabase, SmithyXML.Reader> {
        return { reader in
            guard reader.content != nil else { return nil }
            var value = RDSClientTypes.DBSnapshotTenantDatabase()
            value.dbSnapshotIdentifier = try reader["DBSnapshotIdentifier"].readIfPresent()
            value.dbInstanceIdentifier = try reader["DBInstanceIdentifier"].readIfPresent()
            value.dbiResourceId = try reader["DbiResourceId"].readIfPresent()
            value.engineName = try reader["EngineName"].readIfPresent()
            value.snapshotType = try reader["SnapshotType"].readIfPresent()
            value.tenantDatabaseCreateTime = try reader["TenantDatabaseCreateTime"].readTimestampIfPresent(format: .dateTime)
            value.tenantDBName = try reader["TenantDBName"].readIfPresent()
            value.masterUsername = try reader["MasterUsername"].readIfPresent()
            value.tenantDatabaseResourceId = try reader["TenantDatabaseResourceId"].readIfPresent()
            value.characterSetName = try reader["CharacterSetName"].readIfPresent()
            value.dbSnapshotTenantDatabaseARN = try reader["DBSnapshotTenantDatabaseARN"].readIfPresent()
            value.ncharCharacterSetName = try reader["NcharCharacterSetName"].readIfPresent()
            value.tagList = try reader["TagList"].readListIfPresent(memberReadingClosure: RDSClientTypes.Tag.readingClosure, memberNodeInfo: "Tag", isFlattened: false)
            return value
        }
    }
}

extension RDSClientTypes {
    /// Contains the details of a tenant database in a snapshot of a DB instance.
    public struct DBSnapshotTenantDatabase: Swift.Equatable {
        /// The name of the character set of a tenant database.
        public var characterSetName: Swift.String?
        /// The ID for the DB instance that contains the tenant databases.
        public var dbInstanceIdentifier: Swift.String?
        /// The identifier for the snapshot of the DB instance.
        public var dbSnapshotIdentifier: Swift.String?
        /// The Amazon Resource Name (ARN) for the snapshot tenant database.
        public var dbSnapshotTenantDatabaseARN: Swift.String?
        /// The resource identifier of the source CDB instance. This identifier can't be changed and is unique to an Amazon Web Services Region.
        public var dbiResourceId: Swift.String?
        /// The name of the database engine.
        public var engineName: Swift.String?
        /// The master username of the tenant database.
        public var masterUsername: Swift.String?
        /// The NCHAR character set name of the tenant database.
        public var ncharCharacterSetName: Swift.String?
        /// The type of DB snapshot.
        public var snapshotType: Swift.String?
        /// A list of tags. For more information, see [Tagging Amazon RDS Resources](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html) in the Amazon RDS User Guide.
        public var tagList: [RDSClientTypes.Tag]?
        /// The name of the tenant database.
        public var tenantDBName: Swift.String?
        /// The time the DB snapshot was taken, specified in Coordinated Universal Time (UTC). If you copy the snapshot, the creation time changes.
        public var tenantDatabaseCreateTime: ClientRuntime.Date?
        /// The resource ID of the tenant database.
        public var tenantDatabaseResourceId: Swift.String?

        public init(
            characterSetName: Swift.String? = nil,
            dbInstanceIdentifier: Swift.String? = nil,
            dbSnapshotIdentifier: Swift.String? = nil,
            dbSnapshotTenantDatabaseARN: Swift.String? = nil,
            dbiResourceId: Swift.String? = nil,
            engineName: Swift.String? = nil,
            masterUsername: Swift.String? = nil,
            ncharCharacterSetName: Swift.String? = nil,
            snapshotType: Swift.String? = nil,
            tagList: [RDSClientTypes.Tag]? = nil,
            tenantDBName: Swift.String? = nil,
            tenantDatabaseCreateTime: ClientRuntime.Date? = nil,
            tenantDatabaseResourceId: Swift.String? = nil
        )
        {
            self.characterSetName = characterSetName
            self.dbInstanceIdentifier = dbInstanceIdentifier
            self.dbSnapshotIdentifier = dbSnapshotIdentifier
            self.dbSnapshotTenantDatabaseARN = dbSnapshotTenantDatabaseARN
            self.dbiResourceId = dbiResourceId
            self.engineName = engineName
            self.masterUsername = masterUsername
            self.ncharCharacterSetName = ncharCharacterSetName
            self.snapshotType = snapshotType
            self.tagList = tagList
            self.tenantDBName = tenantDBName
            self.tenantDatabaseCreateTime = tenantDatabaseCreateTime
            self.tenantDatabaseResourceId = tenantDatabaseResourceId
        }
    }

}

extension DBSnapshotTenantDatabaseNotFoundFault {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = DBSnapshotTenantDatabaseNotFoundFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// The specified snapshot tenant database wasn't found.
public struct DBSnapshotTenantDatabaseNotFoundFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "DBSnapshotTenantDatabaseNotFoundFault" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension RDSClientTypes.DBSubnetGroup: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dbSubnetGroupArn = "DBSubnetGroupArn"
        case dbSubnetGroupDescription = "DBSubnetGroupDescription"
        case dbSubnetGroupName = "DBSubnetGroupName"
        case subnetGroupStatus = "SubnetGroupStatus"
        case subnets = "Subnets"
        case supportedNetworkTypes = "SupportedNetworkTypes"
        case vpcId = "VpcId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let dbSubnetGroupArn = dbSubnetGroupArn {
            try container.encode(dbSubnetGroupArn, forKey: ClientRuntime.Key("DBSubnetGroupArn"))
        }
        if let dbSubnetGroupDescription = dbSubnetGroupDescription {
            try container.encode(dbSubnetGroupDescription, forKey: ClientRuntime.Key("DBSubnetGroupDescription"))
        }
        if let dbSubnetGroupName = dbSubnetGroupName {
            try container.encode(dbSubnetGroupName, forKey: ClientRuntime.Key("DBSubnetGroupName"))
        }
        if let subnetGroupStatus = subnetGroupStatus {
            try container.encode(subnetGroupStatus, forKey: ClientRuntime.Key("SubnetGroupStatus"))
        }
        if let subnets = subnets {
            if !subnets.isEmpty {
                var subnetsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Subnets"))
                for (index0, subnet0) in subnets.enumerated() {
                    try subnetsContainer.encode(subnet0, forKey: ClientRuntime.Key("Subnet.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var subnetsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Subnets"))
                try subnetsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let supportedNetworkTypes = supportedNetworkTypes {
            if !supportedNetworkTypes.isEmpty {
                var supportedNetworkTypesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("SupportedNetworkTypes"))
                for (index0, string0) in supportedNetworkTypes.enumerated() {
                    try supportedNetworkTypesContainer.encode(string0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var supportedNetworkTypesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("SupportedNetworkTypes"))
                try supportedNetworkTypesContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let vpcId = vpcId {
            try container.encode(vpcId, forKey: ClientRuntime.Key("VpcId"))
        }
    }

    static var readingClosure: SmithyReadWrite.ReadingClosure<RDSClientTypes.DBSubnetGroup, SmithyXML.Reader> {
        return { reader in
            guard reader.content != nil else { return nil }
            var value = RDSClientTypes.DBSubnetGroup()
            value.dbSubnetGroupName = try reader["DBSubnetGroupName"].readIfPresent()
            value.dbSubnetGroupDescription = try reader["DBSubnetGroupDescription"].readIfPresent()
            value.vpcId = try reader["VpcId"].readIfPresent()
            value.subnetGroupStatus = try reader["SubnetGroupStatus"].readIfPresent()
            value.subnets = try reader["Subnets"].readListIfPresent(memberReadingClosure: RDSClientTypes.Subnet.readingClosure, memberNodeInfo: "Subnet", isFlattened: false)
            value.dbSubnetGroupArn = try reader["DBSubnetGroupArn"].readIfPresent()
            value.supportedNetworkTypes = try reader["SupportedNetworkTypes"].readListIfPresent(memberReadingClosure: Swift.String.readingClosure, memberNodeInfo: "member", isFlattened: false)
            return value
        }
    }
}

extension RDSClientTypes {
    /// Contains the details of an Amazon RDS DB subnet group. This data type is used as a response element in the DescribeDBSubnetGroups action.
    public struct DBSubnetGroup: Swift.Equatable {
        /// The Amazon Resource Name (ARN) for the DB subnet group.
        public var dbSubnetGroupArn: Swift.String?
        /// Provides the description of the DB subnet group.
        public var dbSubnetGroupDescription: Swift.String?
        /// The name of the DB subnet group.
        public var dbSubnetGroupName: Swift.String?
        /// Provides the status of the DB subnet group.
        public var subnetGroupStatus: Swift.String?
        /// Contains a list of Subnet elements.
        public var subnets: [RDSClientTypes.Subnet]?
        /// The network type of the DB subnet group. Valid values:
        ///
        /// * IPV4
        ///
        /// * DUAL
        ///
        ///
        /// A DBSubnetGroup can support only the IPv4 protocol or the IPv4 and the IPv6 protocols (DUAL). For more information, see [ Working with a DB instance in a VPC](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_VPC.WorkingWithRDSInstanceinaVPC.html) in the Amazon RDS User Guide.
        public var supportedNetworkTypes: [Swift.String]?
        /// Provides the VpcId of the DB subnet group.
        public var vpcId: Swift.String?

        public init(
            dbSubnetGroupArn: Swift.String? = nil,
            dbSubnetGroupDescription: Swift.String? = nil,
            dbSubnetGroupName: Swift.String? = nil,
            subnetGroupStatus: Swift.String? = nil,
            subnets: [RDSClientTypes.Subnet]? = nil,
            supportedNetworkTypes: [Swift.String]? = nil,
            vpcId: Swift.String? = nil
        )
        {
            self.dbSubnetGroupArn = dbSubnetGroupArn
            self.dbSubnetGroupDescription = dbSubnetGroupDescription
            self.dbSubnetGroupName = dbSubnetGroupName
            self.subnetGroupStatus = subnetGroupStatus
            self.subnets = subnets
            self.supportedNetworkTypes = supportedNetworkTypes
            self.vpcId = vpcId
        }
    }

}

extension DBSubnetGroupAlreadyExistsFault {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = DBSubnetGroupAlreadyExistsFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// DBSubnetGroupName is already used by an existing DB subnet group.
public struct DBSubnetGroupAlreadyExistsFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "DBSubnetGroupAlreadyExists" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension DBSubnetGroupDoesNotCoverEnoughAZs {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = DBSubnetGroupDoesNotCoverEnoughAZs()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// Subnets in the DB subnet group should cover at least two Availability Zones unless there is only one Availability Zone.
public struct DBSubnetGroupDoesNotCoverEnoughAZs: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "DBSubnetGroupDoesNotCoverEnoughAZs" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension DBSubnetGroupNotAllowedFault {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = DBSubnetGroupNotAllowedFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// The DBSubnetGroup shouldn't be specified while creating read replicas that lie in the same region as the source instance.
public struct DBSubnetGroupNotAllowedFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "DBSubnetGroupNotAllowedFault" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension DBSubnetGroupNotFoundFault {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = DBSubnetGroupNotFoundFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// DBSubnetGroupName doesn't refer to an existing DB subnet group.
public struct DBSubnetGroupNotFoundFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "DBSubnetGroupNotFoundFault" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension DBSubnetGroupQuotaExceededFault {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = DBSubnetGroupQuotaExceededFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// The request would result in the user exceeding the allowed number of DB subnet groups.
public struct DBSubnetGroupQuotaExceededFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "DBSubnetGroupQuotaExceeded" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension DBSubnetQuotaExceededFault {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = DBSubnetQuotaExceededFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// The request would result in the user exceeding the allowed number of subnets in a DB subnet groups.
public struct DBSubnetQuotaExceededFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "DBSubnetQuotaExceededFault" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension DBUpgradeDependencyFailureFault {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = DBUpgradeDependencyFailureFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// The DB upgrade failed because a resource the DB depends on can't be modified.
public struct DBUpgradeDependencyFailureFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "DBUpgradeDependencyFailure" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension DeleteBlueGreenDeploymentInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case blueGreenDeploymentIdentifier = "BlueGreenDeploymentIdentifier"
        case deleteTarget = "DeleteTarget"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let blueGreenDeploymentIdentifier = blueGreenDeploymentIdentifier {
            try container.encode(blueGreenDeploymentIdentifier, forKey: ClientRuntime.Key("BlueGreenDeploymentIdentifier"))
        }
        if let deleteTarget = deleteTarget {
            try container.encode(deleteTarget, forKey: ClientRuntime.Key("DeleteTarget"))
        }
        try container.encode("DeleteBlueGreenDeployment", forKey:ClientRuntime.Key("Action"))
        try container.encode("2014-10-31", forKey:ClientRuntime.Key("Version"))
    }
}

extension DeleteBlueGreenDeploymentInput {

    static func urlPathProvider(_ value: DeleteBlueGreenDeploymentInput) -> Swift.String? {
        return "/"
    }
}

public struct DeleteBlueGreenDeploymentInput: Swift.Equatable {
    /// The unique identifier of the blue/green deployment to delete. This parameter isn't case-sensitive. Constraints:
    ///
    /// * Must match an existing blue/green deployment identifier.
    /// This member is required.
    public var blueGreenDeploymentIdentifier: Swift.String?
    /// Specifies whether to delete the resources in the green environment. You can't specify this option if the blue/green deployment [status](https://docs.aws.amazon.com/AmazonRDS/latest/APIReference/API_BlueGreenDeployment.html) is SWITCHOVER_COMPLETED.
    public var deleteTarget: Swift.Bool?

    public init(
        blueGreenDeploymentIdentifier: Swift.String? = nil,
        deleteTarget: Swift.Bool? = nil
    )
    {
        self.blueGreenDeploymentIdentifier = blueGreenDeploymentIdentifier
        self.deleteTarget = deleteTarget
    }
}

extension DeleteBlueGreenDeploymentOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<DeleteBlueGreenDeploymentOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["DeleteBlueGreenDeploymentResult"]
            var value = DeleteBlueGreenDeploymentOutput()
            value.blueGreenDeployment = try reader["BlueGreenDeployment"].readIfPresent(readingClosure: RDSClientTypes.BlueGreenDeployment.readingClosure)
            return value
        }
    }
}

public struct DeleteBlueGreenDeploymentOutput: Swift.Equatable {
    /// Details about a blue/green deployment. For more information, see [Using Amazon RDS Blue/Green Deployments for database updates](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/blue-green-deployments.html) in the Amazon RDS User Guide and [Using Amazon RDS Blue/Green Deployments for database updates](https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/blue-green-deployments.html) in the Amazon Aurora User Guide.
    public var blueGreenDeployment: RDSClientTypes.BlueGreenDeployment?

    public init(
        blueGreenDeployment: RDSClientTypes.BlueGreenDeployment? = nil
    )
    {
        self.blueGreenDeployment = blueGreenDeployment
    }
}

enum DeleteBlueGreenDeploymentOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "BlueGreenDeploymentNotFoundFault": return try await BlueGreenDeploymentNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "InvalidBlueGreenDeploymentStateFault": return try await InvalidBlueGreenDeploymentStateFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension DeleteCustomDBEngineVersionInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case engine = "Engine"
        case engineVersion = "EngineVersion"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let engine = engine {
            try container.encode(engine, forKey: ClientRuntime.Key("Engine"))
        }
        if let engineVersion = engineVersion {
            try container.encode(engineVersion, forKey: ClientRuntime.Key("EngineVersion"))
        }
        try container.encode("DeleteCustomDBEngineVersion", forKey:ClientRuntime.Key("Action"))
        try container.encode("2014-10-31", forKey:ClientRuntime.Key("Version"))
    }
}

extension DeleteCustomDBEngineVersionInput {

    static func urlPathProvider(_ value: DeleteCustomDBEngineVersionInput) -> Swift.String? {
        return "/"
    }
}

public struct DeleteCustomDBEngineVersionInput: Swift.Equatable {
    /// The database engine. The only supported engines are custom-oracle-ee and custom-oracle-ee-cdb.
    /// This member is required.
    public var engine: Swift.String?
    /// The custom engine version (CEV) for your DB instance. This option is required for RDS Custom, but optional for Amazon RDS. The combination of Engine and EngineVersion is unique per customer per Amazon Web Services Region.
    /// This member is required.
    public var engineVersion: Swift.String?

    public init(
        engine: Swift.String? = nil,
        engineVersion: Swift.String? = nil
    )
    {
        self.engine = engine
        self.engineVersion = engineVersion
    }
}

extension DeleteCustomDBEngineVersionOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<DeleteCustomDBEngineVersionOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["DeleteCustomDBEngineVersionResult"]
            var value = DeleteCustomDBEngineVersionOutput()
            value.createTime = try reader["CreateTime"].readTimestampIfPresent(format: .dateTime)
            value.customDBEngineVersionManifest = try reader["CustomDBEngineVersionManifest"].readIfPresent()
            value.dbEngineDescription = try reader["DBEngineDescription"].readIfPresent()
            value.dbEngineMediaType = try reader["DBEngineMediaType"].readIfPresent()
            value.dbEngineVersionArn = try reader["DBEngineVersionArn"].readIfPresent()
            value.dbEngineVersionDescription = try reader["DBEngineVersionDescription"].readIfPresent()
            value.dbParameterGroupFamily = try reader["DBParameterGroupFamily"].readIfPresent()
            value.databaseInstallationFilesS3BucketName = try reader["DatabaseInstallationFilesS3BucketName"].readIfPresent()
            value.databaseInstallationFilesS3Prefix = try reader["DatabaseInstallationFilesS3Prefix"].readIfPresent()
            value.defaultCharacterSet = try reader["DefaultCharacterSet"].readIfPresent(readingClosure: RDSClientTypes.CharacterSet.readingClosure)
            value.engine = try reader["Engine"].readIfPresent()
            value.engineVersion = try reader["EngineVersion"].readIfPresent()
            value.exportableLogTypes = try reader["ExportableLogTypes"].readListIfPresent(memberReadingClosure: Swift.String.readingClosure, memberNodeInfo: "member", isFlattened: false)
            value.image = try reader["Image"].readIfPresent(readingClosure: RDSClientTypes.CustomDBEngineVersionAMI.readingClosure)
            value.kmsKeyId = try reader["KMSKeyId"].readIfPresent()
            value.majorEngineVersion = try reader["MajorEngineVersion"].readIfPresent()
            value.status = try reader["Status"].readIfPresent()
            value.supportedCACertificateIdentifiers = try reader["SupportedCACertificateIdentifiers"].readListIfPresent(memberReadingClosure: Swift.String.readingClosure, memberNodeInfo: "member", isFlattened: false)
            value.supportedCharacterSets = try reader["SupportedCharacterSets"].readListIfPresent(memberReadingClosure: RDSClientTypes.CharacterSet.readingClosure, memberNodeInfo: "CharacterSet", isFlattened: false)
            value.supportedEngineModes = try reader["SupportedEngineModes"].readListIfPresent(memberReadingClosure: Swift.String.readingClosure, memberNodeInfo: "member", isFlattened: false)
            value.supportedFeatureNames = try reader["SupportedFeatureNames"].readListIfPresent(memberReadingClosure: Swift.String.readingClosure, memberNodeInfo: "member", isFlattened: false)
            value.supportedNcharCharacterSets = try reader["SupportedNcharCharacterSets"].readListIfPresent(memberReadingClosure: RDSClientTypes.CharacterSet.readingClosure, memberNodeInfo: "CharacterSet", isFlattened: false)
            value.supportedTimezones = try reader["SupportedTimezones"].readListIfPresent(memberReadingClosure: RDSClientTypes.Timezone.readingClosure, memberNodeInfo: "Timezone", isFlattened: false)
            value.supportsBabelfish = try reader["SupportsBabelfish"].readIfPresent()
            value.supportsCertificateRotationWithoutRestart = try reader["SupportsCertificateRotationWithoutRestart"].readIfPresent()
            value.supportsGlobalDatabases = try reader["SupportsGlobalDatabases"].readIfPresent()
            value.supportsIntegrations = try reader["SupportsIntegrations"].readIfPresent()
            value.supportsLocalWriteForwarding = try reader["SupportsLocalWriteForwarding"].readIfPresent()
            value.supportsLogExportsToCloudwatchLogs = try reader["SupportsLogExportsToCloudwatchLogs"].readIfPresent()
            value.supportsParallelQuery = try reader["SupportsParallelQuery"].readIfPresent()
            value.supportsReadReplica = try reader["SupportsReadReplica"].readIfPresent()
            value.tagList = try reader["TagList"].readListIfPresent(memberReadingClosure: RDSClientTypes.Tag.readingClosure, memberNodeInfo: "Tag", isFlattened: false)
            value.validUpgradeTarget = try reader["ValidUpgradeTarget"].readListIfPresent(memberReadingClosure: RDSClientTypes.UpgradeTarget.readingClosure, memberNodeInfo: "UpgradeTarget", isFlattened: false)
            return value
        }
    }
}

/// This data type is used as a response element in the action DescribeDBEngineVersions.
public struct DeleteCustomDBEngineVersionOutput: Swift.Equatable {
    /// The creation time of the DB engine version.
    public var createTime: ClientRuntime.Date?
    /// JSON string that lists the installation files and parameters that RDS Custom uses to create a custom engine version (CEV). RDS Custom applies the patches in the order in which they're listed in the manifest. You can set the Oracle home, Oracle base, and UNIX/Linux user and group using the installation parameters. For more information, see [JSON fields in the CEV manifest](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/custom-cev.preparing.html#custom-cev.preparing.manifest.fields) in the Amazon RDS User Guide.
    public var customDBEngineVersionManifest: Swift.String?
    /// The name of the Amazon S3 bucket that contains your database installation files.
    public var databaseInstallationFilesS3BucketName: Swift.String?
    /// The Amazon S3 directory that contains the database installation files. If not specified, then no prefix is assumed.
    public var databaseInstallationFilesS3Prefix: Swift.String?
    /// The description of the database engine.
    public var dbEngineDescription: Swift.String?
    /// A value that indicates the source media provider of the AMI based on the usage operation. Applicable for RDS Custom for SQL Server.
    public var dbEngineMediaType: Swift.String?
    /// The ARN of the custom engine version.
    public var dbEngineVersionArn: Swift.String?
    /// The description of the database engine version.
    public var dbEngineVersionDescription: Swift.String?
    /// The name of the DB parameter group family for the database engine.
    public var dbParameterGroupFamily: Swift.String?
    /// The default character set for new instances of this engine version, if the CharacterSetName parameter of the CreateDBInstance API isn't specified.
    public var defaultCharacterSet: RDSClientTypes.CharacterSet?
    /// The name of the database engine.
    public var engine: Swift.String?
    /// The version number of the database engine.
    public var engineVersion: Swift.String?
    /// The types of logs that the database engine has available for export to CloudWatch Logs.
    public var exportableLogTypes: [Swift.String]?
    /// The EC2 image
    public var image: RDSClientTypes.CustomDBEngineVersionAMI?
    /// The Amazon Web Services KMS key identifier for an encrypted CEV. This parameter is required for RDS Custom, but optional for Amazon RDS.
    public var kmsKeyId: Swift.String?
    /// The major engine version of the CEV.
    public var majorEngineVersion: Swift.String?
    /// The status of the DB engine version, either available or deprecated.
    public var status: Swift.String?
    /// A list of the supported CA certificate identifiers. For more information, see [Using SSL/TLS to encrypt a connection to a DB instance](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.SSL.html) in the Amazon RDS User Guide and [ Using SSL/TLS to encrypt a connection to a DB cluster](https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/UsingWithRDS.SSL.html) in the Amazon Aurora User Guide.
    public var supportedCACertificateIdentifiers: [Swift.String]?
    /// A list of the character sets supported by this engine for the CharacterSetName parameter of the CreateDBInstance operation.
    public var supportedCharacterSets: [RDSClientTypes.CharacterSet]?
    /// A list of the supported DB engine modes.
    public var supportedEngineModes: [Swift.String]?
    /// A list of features supported by the DB engine. The supported features vary by DB engine and DB engine version. To determine the supported features for a specific DB engine and DB engine version using the CLI, use the following command: aws rds describe-db-engine-versions --engine --engine-version  For example, to determine the supported features for RDS for PostgreSQL version 13.3 using the CLI, use the following command: aws rds describe-db-engine-versions --engine postgres --engine-version 13.3 The supported features are listed under SupportedFeatureNames in the output.
    public var supportedFeatureNames: [Swift.String]?
    /// A list of the character sets supported by the Oracle DB engine for the NcharCharacterSetName parameter of the CreateDBInstance operation.
    public var supportedNcharCharacterSets: [RDSClientTypes.CharacterSet]?
    /// A list of the time zones supported by this engine for the Timezone parameter of the CreateDBInstance action.
    public var supportedTimezones: [RDSClientTypes.Timezone]?
    /// Indicates whether the engine version supports Babelfish for Aurora PostgreSQL.
    public var supportsBabelfish: Swift.Bool?
    /// Indicates whether the engine version supports rotating the server certificate without rebooting the DB instance.
    public var supportsCertificateRotationWithoutRestart: Swift.Bool?
    /// Indicates whether you can use Aurora global databases with a specific DB engine version.
    public var supportsGlobalDatabases: Swift.Bool?
    /// Indicates whether the DB engine version supports zero-ETL integrations with Amazon Redshift.
    public var supportsIntegrations: Swift.Bool?
    /// Indicates whether the DB engine version supports forwarding write operations from reader DB instances to the writer DB instance in the DB cluster. By default, write operations aren't allowed on reader DB instances. Valid for: Aurora DB clusters only
    public var supportsLocalWriteForwarding: Swift.Bool?
    /// Indicates whether the engine version supports exporting the log types specified by ExportableLogTypes to CloudWatch Logs.
    public var supportsLogExportsToCloudwatchLogs: Swift.Bool?
    /// Indicates whether you can use Aurora parallel query with a specific DB engine version.
    public var supportsParallelQuery: Swift.Bool?
    /// Indicates whether the database engine version supports read replicas.
    public var supportsReadReplica: Swift.Bool?
    /// A list of tags. For more information, see [Tagging Amazon RDS Resources](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html) in the Amazon RDS User Guide.
    public var tagList: [RDSClientTypes.Tag]?
    /// A list of engine versions that this database engine version can be upgraded to.
    public var validUpgradeTarget: [RDSClientTypes.UpgradeTarget]?

    public init(
        createTime: ClientRuntime.Date? = nil,
        customDBEngineVersionManifest: Swift.String? = nil,
        databaseInstallationFilesS3BucketName: Swift.String? = nil,
        databaseInstallationFilesS3Prefix: Swift.String? = nil,
        dbEngineDescription: Swift.String? = nil,
        dbEngineMediaType: Swift.String? = nil,
        dbEngineVersionArn: Swift.String? = nil,
        dbEngineVersionDescription: Swift.String? = nil,
        dbParameterGroupFamily: Swift.String? = nil,
        defaultCharacterSet: RDSClientTypes.CharacterSet? = nil,
        engine: Swift.String? = nil,
        engineVersion: Swift.String? = nil,
        exportableLogTypes: [Swift.String]? = nil,
        image: RDSClientTypes.CustomDBEngineVersionAMI? = nil,
        kmsKeyId: Swift.String? = nil,
        majorEngineVersion: Swift.String? = nil,
        status: Swift.String? = nil,
        supportedCACertificateIdentifiers: [Swift.String]? = nil,
        supportedCharacterSets: [RDSClientTypes.CharacterSet]? = nil,
        supportedEngineModes: [Swift.String]? = nil,
        supportedFeatureNames: [Swift.String]? = nil,
        supportedNcharCharacterSets: [RDSClientTypes.CharacterSet]? = nil,
        supportedTimezones: [RDSClientTypes.Timezone]? = nil,
        supportsBabelfish: Swift.Bool? = nil,
        supportsCertificateRotationWithoutRestart: Swift.Bool? = nil,
        supportsGlobalDatabases: Swift.Bool? = nil,
        supportsIntegrations: Swift.Bool? = nil,
        supportsLocalWriteForwarding: Swift.Bool? = nil,
        supportsLogExportsToCloudwatchLogs: Swift.Bool? = nil,
        supportsParallelQuery: Swift.Bool? = nil,
        supportsReadReplica: Swift.Bool? = nil,
        tagList: [RDSClientTypes.Tag]? = nil,
        validUpgradeTarget: [RDSClientTypes.UpgradeTarget]? = nil
    )
    {
        self.createTime = createTime
        self.customDBEngineVersionManifest = customDBEngineVersionManifest
        self.databaseInstallationFilesS3BucketName = databaseInstallationFilesS3BucketName
        self.databaseInstallationFilesS3Prefix = databaseInstallationFilesS3Prefix
        self.dbEngineDescription = dbEngineDescription
        self.dbEngineMediaType = dbEngineMediaType
        self.dbEngineVersionArn = dbEngineVersionArn
        self.dbEngineVersionDescription = dbEngineVersionDescription
        self.dbParameterGroupFamily = dbParameterGroupFamily
        self.defaultCharacterSet = defaultCharacterSet
        self.engine = engine
        self.engineVersion = engineVersion
        self.exportableLogTypes = exportableLogTypes
        self.image = image
        self.kmsKeyId = kmsKeyId
        self.majorEngineVersion = majorEngineVersion
        self.status = status
        self.supportedCACertificateIdentifiers = supportedCACertificateIdentifiers
        self.supportedCharacterSets = supportedCharacterSets
        self.supportedEngineModes = supportedEngineModes
        self.supportedFeatureNames = supportedFeatureNames
        self.supportedNcharCharacterSets = supportedNcharCharacterSets
        self.supportedTimezones = supportedTimezones
        self.supportsBabelfish = supportsBabelfish
        self.supportsCertificateRotationWithoutRestart = supportsCertificateRotationWithoutRestart
        self.supportsGlobalDatabases = supportsGlobalDatabases
        self.supportsIntegrations = supportsIntegrations
        self.supportsLocalWriteForwarding = supportsLocalWriteForwarding
        self.supportsLogExportsToCloudwatchLogs = supportsLogExportsToCloudwatchLogs
        self.supportsParallelQuery = supportsParallelQuery
        self.supportsReadReplica = supportsReadReplica
        self.tagList = tagList
        self.validUpgradeTarget = validUpgradeTarget
    }
}

enum DeleteCustomDBEngineVersionOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "CustomDBEngineVersionNotFoundFault": return try await CustomDBEngineVersionNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "InvalidCustomDBEngineVersionStateFault": return try await InvalidCustomDBEngineVersionStateFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension DeleteDBClusterAutomatedBackupInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dbClusterResourceId = "DbClusterResourceId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let dbClusterResourceId = dbClusterResourceId {
            try container.encode(dbClusterResourceId, forKey: ClientRuntime.Key("DbClusterResourceId"))
        }
        try container.encode("DeleteDBClusterAutomatedBackup", forKey:ClientRuntime.Key("Action"))
        try container.encode("2014-10-31", forKey:ClientRuntime.Key("Version"))
    }
}

extension DeleteDBClusterAutomatedBackupInput {

    static func urlPathProvider(_ value: DeleteDBClusterAutomatedBackupInput) -> Swift.String? {
        return "/"
    }
}

public struct DeleteDBClusterAutomatedBackupInput: Swift.Equatable {
    /// The identifier for the source DB cluster, which can't be changed and which is unique to an Amazon Web Services Region.
    /// This member is required.
    public var dbClusterResourceId: Swift.String?

    public init(
        dbClusterResourceId: Swift.String? = nil
    )
    {
        self.dbClusterResourceId = dbClusterResourceId
    }
}

extension DeleteDBClusterAutomatedBackupOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<DeleteDBClusterAutomatedBackupOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["DeleteDBClusterAutomatedBackupResult"]
            var value = DeleteDBClusterAutomatedBackupOutput()
            value.dbClusterAutomatedBackup = try reader["DBClusterAutomatedBackup"].readIfPresent(readingClosure: RDSClientTypes.DBClusterAutomatedBackup.readingClosure)
            return value
        }
    }
}

public struct DeleteDBClusterAutomatedBackupOutput: Swift.Equatable {
    /// An automated backup of a DB cluster. It consists of system backups, transaction logs, and the database cluster properties that existed at the time you deleted the source cluster.
    public var dbClusterAutomatedBackup: RDSClientTypes.DBClusterAutomatedBackup?

    public init(
        dbClusterAutomatedBackup: RDSClientTypes.DBClusterAutomatedBackup? = nil
    )
    {
        self.dbClusterAutomatedBackup = dbClusterAutomatedBackup
    }
}

enum DeleteDBClusterAutomatedBackupOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "DBClusterAutomatedBackupNotFoundFault": return try await DBClusterAutomatedBackupNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "InvalidDBClusterAutomatedBackupStateFault": return try await InvalidDBClusterAutomatedBackupStateFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension DeleteDBClusterEndpointInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dbClusterEndpointIdentifier = "DBClusterEndpointIdentifier"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let dbClusterEndpointIdentifier = dbClusterEndpointIdentifier {
            try container.encode(dbClusterEndpointIdentifier, forKey: ClientRuntime.Key("DBClusterEndpointIdentifier"))
        }
        try container.encode("DeleteDBClusterEndpoint", forKey:ClientRuntime.Key("Action"))
        try container.encode("2014-10-31", forKey:ClientRuntime.Key("Version"))
    }
}

extension DeleteDBClusterEndpointInput {

    static func urlPathProvider(_ value: DeleteDBClusterEndpointInput) -> Swift.String? {
        return "/"
    }
}

public struct DeleteDBClusterEndpointInput: Swift.Equatable {
    /// The identifier associated with the custom endpoint. This parameter is stored as a lowercase string.
    /// This member is required.
    public var dbClusterEndpointIdentifier: Swift.String?

    public init(
        dbClusterEndpointIdentifier: Swift.String? = nil
    )
    {
        self.dbClusterEndpointIdentifier = dbClusterEndpointIdentifier
    }
}

extension DeleteDBClusterEndpointOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<DeleteDBClusterEndpointOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["DeleteDBClusterEndpointResult"]
            var value = DeleteDBClusterEndpointOutput()
            value.customEndpointType = try reader["CustomEndpointType"].readIfPresent()
            value.dbClusterEndpointArn = try reader["DBClusterEndpointArn"].readIfPresent()
            value.dbClusterEndpointIdentifier = try reader["DBClusterEndpointIdentifier"].readIfPresent()
            value.dbClusterEndpointResourceIdentifier = try reader["DBClusterEndpointResourceIdentifier"].readIfPresent()
            value.dbClusterIdentifier = try reader["DBClusterIdentifier"].readIfPresent()
            value.endpoint = try reader["Endpoint"].readIfPresent()
            value.endpointType = try reader["EndpointType"].readIfPresent()
            value.excludedMembers = try reader["ExcludedMembers"].readListIfPresent(memberReadingClosure: Swift.String.readingClosure, memberNodeInfo: "member", isFlattened: false)
            value.staticMembers = try reader["StaticMembers"].readListIfPresent(memberReadingClosure: Swift.String.readingClosure, memberNodeInfo: "member", isFlattened: false)
            value.status = try reader["Status"].readIfPresent()
            return value
        }
    }
}

/// This data type represents the information you need to connect to an Amazon Aurora DB cluster. This data type is used as a response element in the following actions:
///
/// * CreateDBClusterEndpoint
///
/// * DescribeDBClusterEndpoints
///
/// * ModifyDBClusterEndpoint
///
/// * DeleteDBClusterEndpoint
///
///
/// For the data structure that represents Amazon RDS DB instance endpoints, see Endpoint.
public struct DeleteDBClusterEndpointOutput: Swift.Equatable {
    /// The type associated with a custom endpoint. One of: READER, WRITER, ANY.
    public var customEndpointType: Swift.String?
    /// The Amazon Resource Name (ARN) for the endpoint.
    public var dbClusterEndpointArn: Swift.String?
    /// The identifier associated with the endpoint. This parameter is stored as a lowercase string.
    public var dbClusterEndpointIdentifier: Swift.String?
    /// A unique system-generated identifier for an endpoint. It remains the same for the whole life of the endpoint.
    public var dbClusterEndpointResourceIdentifier: Swift.String?
    /// The DB cluster identifier of the DB cluster associated with the endpoint. This parameter is stored as a lowercase string.
    public var dbClusterIdentifier: Swift.String?
    /// The DNS address of the endpoint.
    public var endpoint: Swift.String?
    /// The type of the endpoint. One of: READER, WRITER, CUSTOM.
    public var endpointType: Swift.String?
    /// List of DB instance identifiers that aren't part of the custom endpoint group. All other eligible instances are reachable through the custom endpoint. Only relevant if the list of static members is empty.
    public var excludedMembers: [Swift.String]?
    /// List of DB instance identifiers that are part of the custom endpoint group.
    public var staticMembers: [Swift.String]?
    /// The current status of the endpoint. One of: creating, available, deleting, inactive, modifying. The inactive state applies to an endpoint that can't be used for a certain kind of cluster, such as a writer endpoint for a read-only secondary cluster in a global database.
    public var status: Swift.String?

    public init(
        customEndpointType: Swift.String? = nil,
        dbClusterEndpointArn: Swift.String? = nil,
        dbClusterEndpointIdentifier: Swift.String? = nil,
        dbClusterEndpointResourceIdentifier: Swift.String? = nil,
        dbClusterIdentifier: Swift.String? = nil,
        endpoint: Swift.String? = nil,
        endpointType: Swift.String? = nil,
        excludedMembers: [Swift.String]? = nil,
        staticMembers: [Swift.String]? = nil,
        status: Swift.String? = nil
    )
    {
        self.customEndpointType = customEndpointType
        self.dbClusterEndpointArn = dbClusterEndpointArn
        self.dbClusterEndpointIdentifier = dbClusterEndpointIdentifier
        self.dbClusterEndpointResourceIdentifier = dbClusterEndpointResourceIdentifier
        self.dbClusterIdentifier = dbClusterIdentifier
        self.endpoint = endpoint
        self.endpointType = endpointType
        self.excludedMembers = excludedMembers
        self.staticMembers = staticMembers
        self.status = status
    }
}

enum DeleteDBClusterEndpointOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "DBClusterEndpointNotFoundFault": return try await DBClusterEndpointNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "InvalidDBClusterEndpointStateFault": return try await InvalidDBClusterEndpointStateFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "InvalidDBClusterStateFault": return try await InvalidDBClusterStateFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension DeleteDBClusterInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dbClusterIdentifier = "DBClusterIdentifier"
        case deleteAutomatedBackups = "DeleteAutomatedBackups"
        case finalDBSnapshotIdentifier = "FinalDBSnapshotIdentifier"
        case skipFinalSnapshot = "SkipFinalSnapshot"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let dbClusterIdentifier = dbClusterIdentifier {
            try container.encode(dbClusterIdentifier, forKey: ClientRuntime.Key("DBClusterIdentifier"))
        }
        if let deleteAutomatedBackups = deleteAutomatedBackups {
            try container.encode(deleteAutomatedBackups, forKey: ClientRuntime.Key("DeleteAutomatedBackups"))
        }
        if let finalDBSnapshotIdentifier = finalDBSnapshotIdentifier {
            try container.encode(finalDBSnapshotIdentifier, forKey: ClientRuntime.Key("FinalDBSnapshotIdentifier"))
        }
        if let skipFinalSnapshot = skipFinalSnapshot {
            try container.encode(skipFinalSnapshot, forKey: ClientRuntime.Key("SkipFinalSnapshot"))
        }
        try container.encode("DeleteDBCluster", forKey:ClientRuntime.Key("Action"))
        try container.encode("2014-10-31", forKey:ClientRuntime.Key("Version"))
    }
}

extension DeleteDBClusterInput {

    static func urlPathProvider(_ value: DeleteDBClusterInput) -> Swift.String? {
        return "/"
    }
}

///
public struct DeleteDBClusterInput: Swift.Equatable {
    /// The DB cluster identifier for the DB cluster to be deleted. This parameter isn't case-sensitive. Constraints:
    ///
    /// * Must match an existing DBClusterIdentifier.
    /// This member is required.
    public var dbClusterIdentifier: Swift.String?
    /// Specifies whether to remove automated backups immediately after the DB cluster is deleted. This parameter isn't case-sensitive. The default is to remove automated backups immediately after the DB cluster is deleted.
    public var deleteAutomatedBackups: Swift.Bool?
    /// The DB cluster snapshot identifier of the new DB cluster snapshot created when SkipFinalSnapshot is disabled. Specifying this parameter and also skipping the creation of a final DB cluster snapshot with the SkipFinalShapshot parameter results in an error. Constraints:
    ///
    /// * Must be 1 to 255 letters, numbers, or hyphens.
    ///
    /// * First character must be a letter
    ///
    /// * Can't end with a hyphen or contain two consecutive hyphens
    public var finalDBSnapshotIdentifier: Swift.String?
    /// Specifies whether to skip the creation of a final DB cluster snapshot before the DB cluster is deleted. If skip is specified, no DB cluster snapshot is created. If skip isn't specified, a DB cluster snapshot is created before the DB cluster is deleted. By default, skip isn't specified, and the DB cluster snapshot is created. By default, this parameter is disabled. You must specify a FinalDBSnapshotIdentifier parameter if SkipFinalSnapshot is disabled.
    public var skipFinalSnapshot: Swift.Bool?

    public init(
        dbClusterIdentifier: Swift.String? = nil,
        deleteAutomatedBackups: Swift.Bool? = nil,
        finalDBSnapshotIdentifier: Swift.String? = nil,
        skipFinalSnapshot: Swift.Bool? = nil
    )
    {
        self.dbClusterIdentifier = dbClusterIdentifier
        self.deleteAutomatedBackups = deleteAutomatedBackups
        self.finalDBSnapshotIdentifier = finalDBSnapshotIdentifier
        self.skipFinalSnapshot = skipFinalSnapshot
    }
}

extension DeleteDBClusterOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<DeleteDBClusterOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["DeleteDBClusterResult"]
            var value = DeleteDBClusterOutput()
            value.dbCluster = try reader["DBCluster"].readIfPresent(readingClosure: RDSClientTypes.DBCluster.readingClosure)
            return value
        }
    }
}

public struct DeleteDBClusterOutput: Swift.Equatable {
    /// Contains the details of an Amazon Aurora DB cluster or Multi-AZ DB cluster. For an Amazon Aurora DB cluster, this data type is used as a response element in the operations CreateDBCluster, DeleteDBCluster, DescribeDBClusters, FailoverDBCluster, ModifyDBCluster, PromoteReadReplicaDBCluster, RestoreDBClusterFromS3, RestoreDBClusterFromSnapshot, RestoreDBClusterToPointInTime, StartDBCluster, and StopDBCluster. For a Multi-AZ DB cluster, this data type is used as a response element in the operations CreateDBCluster, DeleteDBCluster, DescribeDBClusters, FailoverDBCluster, ModifyDBCluster, RebootDBCluster, RestoreDBClusterFromSnapshot, and RestoreDBClusterToPointInTime. For more information on Amazon Aurora DB clusters, see [ What is Amazon Aurora?](https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html) in the Amazon Aurora User Guide. For more information on Multi-AZ DB clusters, see [ Multi-AZ deployments with two readable standby DB instances](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/multi-az-db-clusters-concepts.html) in the Amazon RDS User Guide.
    public var dbCluster: RDSClientTypes.DBCluster?

    public init(
        dbCluster: RDSClientTypes.DBCluster? = nil
    )
    {
        self.dbCluster = dbCluster
    }
}

enum DeleteDBClusterOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "DBClusterAutomatedBackupQuotaExceededFault": return try await DBClusterAutomatedBackupQuotaExceededFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "DBClusterNotFoundFault": return try await DBClusterNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "DBClusterSnapshotAlreadyExistsFault": return try await DBClusterSnapshotAlreadyExistsFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "InvalidDBClusterSnapshotStateFault": return try await InvalidDBClusterSnapshotStateFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "InvalidDBClusterStateFault": return try await InvalidDBClusterStateFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "SnapshotQuotaExceeded": return try await SnapshotQuotaExceededFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension DeleteDBClusterParameterGroupInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dbClusterParameterGroupName = "DBClusterParameterGroupName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let dbClusterParameterGroupName = dbClusterParameterGroupName {
            try container.encode(dbClusterParameterGroupName, forKey: ClientRuntime.Key("DBClusterParameterGroupName"))
        }
        try container.encode("DeleteDBClusterParameterGroup", forKey:ClientRuntime.Key("Action"))
        try container.encode("2014-10-31", forKey:ClientRuntime.Key("Version"))
    }
}

extension DeleteDBClusterParameterGroupInput {

    static func urlPathProvider(_ value: DeleteDBClusterParameterGroupInput) -> Swift.String? {
        return "/"
    }
}

///
public struct DeleteDBClusterParameterGroupInput: Swift.Equatable {
    /// The name of the DB cluster parameter group. Constraints:
    ///
    /// * Must be the name of an existing DB cluster parameter group.
    ///
    /// * You can't delete a default DB cluster parameter group.
    ///
    /// * Can't be associated with any DB clusters.
    /// This member is required.
    public var dbClusterParameterGroupName: Swift.String?

    public init(
        dbClusterParameterGroupName: Swift.String? = nil
    )
    {
        self.dbClusterParameterGroupName = dbClusterParameterGroupName
    }
}

extension DeleteDBClusterParameterGroupOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<DeleteDBClusterParameterGroupOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            return DeleteDBClusterParameterGroupOutput()
        }
    }
}

public struct DeleteDBClusterParameterGroupOutput: Swift.Equatable {

    public init() { }
}

enum DeleteDBClusterParameterGroupOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "DBParameterGroupNotFound": return try await DBParameterGroupNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "InvalidDBParameterGroupState": return try await InvalidDBParameterGroupStateFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension DeleteDBClusterSnapshotInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dbClusterSnapshotIdentifier = "DBClusterSnapshotIdentifier"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let dbClusterSnapshotIdentifier = dbClusterSnapshotIdentifier {
            try container.encode(dbClusterSnapshotIdentifier, forKey: ClientRuntime.Key("DBClusterSnapshotIdentifier"))
        }
        try container.encode("DeleteDBClusterSnapshot", forKey:ClientRuntime.Key("Action"))
        try container.encode("2014-10-31", forKey:ClientRuntime.Key("Version"))
    }
}

extension DeleteDBClusterSnapshotInput {

    static func urlPathProvider(_ value: DeleteDBClusterSnapshotInput) -> Swift.String? {
        return "/"
    }
}

///
public struct DeleteDBClusterSnapshotInput: Swift.Equatable {
    /// The identifier of the DB cluster snapshot to delete. Constraints: Must be the name of an existing DB cluster snapshot in the available state.
    /// This member is required.
    public var dbClusterSnapshotIdentifier: Swift.String?

    public init(
        dbClusterSnapshotIdentifier: Swift.String? = nil
    )
    {
        self.dbClusterSnapshotIdentifier = dbClusterSnapshotIdentifier
    }
}

extension DeleteDBClusterSnapshotOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<DeleteDBClusterSnapshotOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["DeleteDBClusterSnapshotResult"]
            var value = DeleteDBClusterSnapshotOutput()
            value.dbClusterSnapshot = try reader["DBClusterSnapshot"].readIfPresent(readingClosure: RDSClientTypes.DBClusterSnapshot.readingClosure)
            return value
        }
    }
}

public struct DeleteDBClusterSnapshotOutput: Swift.Equatable {
    /// Contains the details for an Amazon RDS DB cluster snapshot This data type is used as a response element in the DescribeDBClusterSnapshots action.
    public var dbClusterSnapshot: RDSClientTypes.DBClusterSnapshot?

    public init(
        dbClusterSnapshot: RDSClientTypes.DBClusterSnapshot? = nil
    )
    {
        self.dbClusterSnapshot = dbClusterSnapshot
    }
}

enum DeleteDBClusterSnapshotOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "DBClusterSnapshotNotFoundFault": return try await DBClusterSnapshotNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "InvalidDBClusterSnapshotStateFault": return try await InvalidDBClusterSnapshotStateFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension DeleteDBInstanceAutomatedBackupInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dbInstanceAutomatedBackupsArn = "DBInstanceAutomatedBackupsArn"
        case dbiResourceId = "DbiResourceId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let dbInstanceAutomatedBackupsArn = dbInstanceAutomatedBackupsArn {
            try container.encode(dbInstanceAutomatedBackupsArn, forKey: ClientRuntime.Key("DBInstanceAutomatedBackupsArn"))
        }
        if let dbiResourceId = dbiResourceId {
            try container.encode(dbiResourceId, forKey: ClientRuntime.Key("DbiResourceId"))
        }
        try container.encode("DeleteDBInstanceAutomatedBackup", forKey:ClientRuntime.Key("Action"))
        try container.encode("2014-10-31", forKey:ClientRuntime.Key("Version"))
    }
}

extension DeleteDBInstanceAutomatedBackupInput {

    static func urlPathProvider(_ value: DeleteDBInstanceAutomatedBackupInput) -> Swift.String? {
        return "/"
    }
}

/// Parameter input for the DeleteDBInstanceAutomatedBackup operation.
public struct DeleteDBInstanceAutomatedBackupInput: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the automated backups to delete, for example, arn:aws:rds:us-east-1:123456789012:auto-backup:ab-L2IJCEXJP7XQ7HOJ4SIEXAMPLE. This setting doesn't apply to RDS Custom.
    public var dbInstanceAutomatedBackupsArn: Swift.String?
    /// The identifier for the source DB instance, which can't be changed and which is unique to an Amazon Web Services Region.
    public var dbiResourceId: Swift.String?

    public init(
        dbInstanceAutomatedBackupsArn: Swift.String? = nil,
        dbiResourceId: Swift.String? = nil
    )
    {
        self.dbInstanceAutomatedBackupsArn = dbInstanceAutomatedBackupsArn
        self.dbiResourceId = dbiResourceId
    }
}

extension DeleteDBInstanceAutomatedBackupOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<DeleteDBInstanceAutomatedBackupOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["DeleteDBInstanceAutomatedBackupResult"]
            var value = DeleteDBInstanceAutomatedBackupOutput()
            value.dbInstanceAutomatedBackup = try reader["DBInstanceAutomatedBackup"].readIfPresent(readingClosure: RDSClientTypes.DBInstanceAutomatedBackup.readingClosure)
            return value
        }
    }
}

public struct DeleteDBInstanceAutomatedBackupOutput: Swift.Equatable {
    /// An automated backup of a DB instance. It consists of system backups, transaction logs, and the database instance properties that existed at the time you deleted the source instance.
    public var dbInstanceAutomatedBackup: RDSClientTypes.DBInstanceAutomatedBackup?

    public init(
        dbInstanceAutomatedBackup: RDSClientTypes.DBInstanceAutomatedBackup? = nil
    )
    {
        self.dbInstanceAutomatedBackup = dbInstanceAutomatedBackup
    }
}

enum DeleteDBInstanceAutomatedBackupOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "DBInstanceAutomatedBackupNotFound": return try await DBInstanceAutomatedBackupNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "InvalidDBInstanceAutomatedBackupState": return try await InvalidDBInstanceAutomatedBackupStateFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension DeleteDBInstanceInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dbInstanceIdentifier = "DBInstanceIdentifier"
        case deleteAutomatedBackups = "DeleteAutomatedBackups"
        case finalDBSnapshotIdentifier = "FinalDBSnapshotIdentifier"
        case skipFinalSnapshot = "SkipFinalSnapshot"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let dbInstanceIdentifier = dbInstanceIdentifier {
            try container.encode(dbInstanceIdentifier, forKey: ClientRuntime.Key("DBInstanceIdentifier"))
        }
        if let deleteAutomatedBackups = deleteAutomatedBackups {
            try container.encode(deleteAutomatedBackups, forKey: ClientRuntime.Key("DeleteAutomatedBackups"))
        }
        if let finalDBSnapshotIdentifier = finalDBSnapshotIdentifier {
            try container.encode(finalDBSnapshotIdentifier, forKey: ClientRuntime.Key("FinalDBSnapshotIdentifier"))
        }
        if let skipFinalSnapshot = skipFinalSnapshot {
            try container.encode(skipFinalSnapshot, forKey: ClientRuntime.Key("SkipFinalSnapshot"))
        }
        try container.encode("DeleteDBInstance", forKey:ClientRuntime.Key("Action"))
        try container.encode("2014-10-31", forKey:ClientRuntime.Key("Version"))
    }
}

extension DeleteDBInstanceInput {

    static func urlPathProvider(_ value: DeleteDBInstanceInput) -> Swift.String? {
        return "/"
    }
}

///
public struct DeleteDBInstanceInput: Swift.Equatable {
    /// The DB instance identifier for the DB instance to be deleted. This parameter isn't case-sensitive. Constraints:
    ///
    /// * Must match the name of an existing DB instance.
    /// This member is required.
    public var dbInstanceIdentifier: Swift.String?
    /// Specifies whether to remove automated backups immediately after the DB instance is deleted. This parameter isn't case-sensitive. The default is to remove automated backups immediately after the DB instance is deleted.
    public var deleteAutomatedBackups: Swift.Bool?
    /// The DBSnapshotIdentifier of the new DBSnapshot created when the SkipFinalSnapshot parameter is disabled. If you enable this parameter and also enable SkipFinalShapshot, the command results in an error. This setting doesn't apply to RDS Custom. Constraints:
    ///
    /// * Must be 1 to 255 letters or numbers.
    ///
    /// * First character must be a letter.
    ///
    /// * Can't end with a hyphen or contain two consecutive hyphens.
    ///
    /// * Can't be specified when deleting a read replica.
    public var finalDBSnapshotIdentifier: Swift.String?
    /// Specifies whether to skip the creation of a final DB snapshot before deleting the instance. If you enable this parameter, RDS doesn't create a DB snapshot. If you don't enable this parameter, RDS creates a DB snapshot before the DB instance is deleted. By default, skip isn't enabled, and the DB snapshot is created. If you don't enable this parameter, you must specify the FinalDBSnapshotIdentifier parameter. When a DB instance is in a failure state and has a status of failed, incompatible-restore, or incompatible-network, RDS can delete the instance only if you enable this parameter. If you delete a read replica or an RDS Custom instance, you must enable this setting. This setting is required for RDS Custom.
    public var skipFinalSnapshot: Swift.Bool?

    public init(
        dbInstanceIdentifier: Swift.String? = nil,
        deleteAutomatedBackups: Swift.Bool? = nil,
        finalDBSnapshotIdentifier: Swift.String? = nil,
        skipFinalSnapshot: Swift.Bool? = nil
    )
    {
        self.dbInstanceIdentifier = dbInstanceIdentifier
        self.deleteAutomatedBackups = deleteAutomatedBackups
        self.finalDBSnapshotIdentifier = finalDBSnapshotIdentifier
        self.skipFinalSnapshot = skipFinalSnapshot
    }
}

extension DeleteDBInstanceOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<DeleteDBInstanceOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["DeleteDBInstanceResult"]
            var value = DeleteDBInstanceOutput()
            value.dbInstance = try reader["DBInstance"].readIfPresent(readingClosure: RDSClientTypes.DBInstance.readingClosure)
            return value
        }
    }
}

public struct DeleteDBInstanceOutput: Swift.Equatable {
    /// Contains the details of an Amazon RDS DB instance. This data type is used as a response element in the operations CreateDBInstance, CreateDBInstanceReadReplica, DeleteDBInstance, DescribeDBInstances, ModifyDBInstance, PromoteReadReplica, RebootDBInstance, RestoreDBInstanceFromDBSnapshot, RestoreDBInstanceFromS3, RestoreDBInstanceToPointInTime, StartDBInstance, and StopDBInstance.
    public var dbInstance: RDSClientTypes.DBInstance?

    public init(
        dbInstance: RDSClientTypes.DBInstance? = nil
    )
    {
        self.dbInstance = dbInstance
    }
}

enum DeleteDBInstanceOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "DBInstanceAutomatedBackupQuotaExceeded": return try await DBInstanceAutomatedBackupQuotaExceededFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "DBInstanceNotFound": return try await DBInstanceNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "DBSnapshotAlreadyExists": return try await DBSnapshotAlreadyExistsFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "InvalidDBClusterStateFault": return try await InvalidDBClusterStateFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "InvalidDBInstanceState": return try await InvalidDBInstanceStateFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "SnapshotQuotaExceeded": return try await SnapshotQuotaExceededFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension DeleteDBParameterGroupInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dbParameterGroupName = "DBParameterGroupName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let dbParameterGroupName = dbParameterGroupName {
            try container.encode(dbParameterGroupName, forKey: ClientRuntime.Key("DBParameterGroupName"))
        }
        try container.encode("DeleteDBParameterGroup", forKey:ClientRuntime.Key("Action"))
        try container.encode("2014-10-31", forKey:ClientRuntime.Key("Version"))
    }
}

extension DeleteDBParameterGroupInput {

    static func urlPathProvider(_ value: DeleteDBParameterGroupInput) -> Swift.String? {
        return "/"
    }
}

///
public struct DeleteDBParameterGroupInput: Swift.Equatable {
    /// The name of the DB parameter group. Constraints:
    ///
    /// * Must be the name of an existing DB parameter group
    ///
    /// * You can't delete a default DB parameter group
    ///
    /// * Can't be associated with any DB instances
    /// This member is required.
    public var dbParameterGroupName: Swift.String?

    public init(
        dbParameterGroupName: Swift.String? = nil
    )
    {
        self.dbParameterGroupName = dbParameterGroupName
    }
}

extension DeleteDBParameterGroupOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<DeleteDBParameterGroupOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            return DeleteDBParameterGroupOutput()
        }
    }
}

public struct DeleteDBParameterGroupOutput: Swift.Equatable {

    public init() { }
}

enum DeleteDBParameterGroupOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "DBParameterGroupNotFound": return try await DBParameterGroupNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "InvalidDBParameterGroupState": return try await InvalidDBParameterGroupStateFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension DeleteDBProxyEndpointInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dbProxyEndpointName = "DBProxyEndpointName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let dbProxyEndpointName = dbProxyEndpointName {
            try container.encode(dbProxyEndpointName, forKey: ClientRuntime.Key("DBProxyEndpointName"))
        }
        try container.encode("DeleteDBProxyEndpoint", forKey:ClientRuntime.Key("Action"))
        try container.encode("2014-10-31", forKey:ClientRuntime.Key("Version"))
    }
}

extension DeleteDBProxyEndpointInput {

    static func urlPathProvider(_ value: DeleteDBProxyEndpointInput) -> Swift.String? {
        return "/"
    }
}

public struct DeleteDBProxyEndpointInput: Swift.Equatable {
    /// The name of the DB proxy endpoint to delete.
    /// This member is required.
    public var dbProxyEndpointName: Swift.String?

    public init(
        dbProxyEndpointName: Swift.String? = nil
    )
    {
        self.dbProxyEndpointName = dbProxyEndpointName
    }
}

extension DeleteDBProxyEndpointOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<DeleteDBProxyEndpointOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["DeleteDBProxyEndpointResult"]
            var value = DeleteDBProxyEndpointOutput()
            value.dbProxyEndpoint = try reader["DBProxyEndpoint"].readIfPresent(readingClosure: RDSClientTypes.DBProxyEndpoint.readingClosure)
            return value
        }
    }
}

public struct DeleteDBProxyEndpointOutput: Swift.Equatable {
    /// The data structure representing the details of the DB proxy endpoint that you delete.
    public var dbProxyEndpoint: RDSClientTypes.DBProxyEndpoint?

    public init(
        dbProxyEndpoint: RDSClientTypes.DBProxyEndpoint? = nil
    )
    {
        self.dbProxyEndpoint = dbProxyEndpoint
    }
}

enum DeleteDBProxyEndpointOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "DBProxyEndpointNotFoundFault": return try await DBProxyEndpointNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "InvalidDBProxyEndpointStateFault": return try await InvalidDBProxyEndpointStateFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension DeleteDBProxyInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dbProxyName = "DBProxyName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let dbProxyName = dbProxyName {
            try container.encode(dbProxyName, forKey: ClientRuntime.Key("DBProxyName"))
        }
        try container.encode("DeleteDBProxy", forKey:ClientRuntime.Key("Action"))
        try container.encode("2014-10-31", forKey:ClientRuntime.Key("Version"))
    }
}

extension DeleteDBProxyInput {

    static func urlPathProvider(_ value: DeleteDBProxyInput) -> Swift.String? {
        return "/"
    }
}

public struct DeleteDBProxyInput: Swift.Equatable {
    /// The name of the DB proxy to delete.
    /// This member is required.
    public var dbProxyName: Swift.String?

    public init(
        dbProxyName: Swift.String? = nil
    )
    {
        self.dbProxyName = dbProxyName
    }
}

extension DeleteDBProxyOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<DeleteDBProxyOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["DeleteDBProxyResult"]
            var value = DeleteDBProxyOutput()
            value.dbProxy = try reader["DBProxy"].readIfPresent(readingClosure: RDSClientTypes.DBProxy.readingClosure)
            return value
        }
    }
}

public struct DeleteDBProxyOutput: Swift.Equatable {
    /// The data structure representing the details of the DB proxy that you delete.
    public var dbProxy: RDSClientTypes.DBProxy?

    public init(
        dbProxy: RDSClientTypes.DBProxy? = nil
    )
    {
        self.dbProxy = dbProxy
    }
}

enum DeleteDBProxyOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "DBProxyNotFoundFault": return try await DBProxyNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "InvalidDBProxyStateFault": return try await InvalidDBProxyStateFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension DeleteDBSecurityGroupInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dbSecurityGroupName = "DBSecurityGroupName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let dbSecurityGroupName = dbSecurityGroupName {
            try container.encode(dbSecurityGroupName, forKey: ClientRuntime.Key("DBSecurityGroupName"))
        }
        try container.encode("DeleteDBSecurityGroup", forKey:ClientRuntime.Key("Action"))
        try container.encode("2014-10-31", forKey:ClientRuntime.Key("Version"))
    }
}

extension DeleteDBSecurityGroupInput {

    static func urlPathProvider(_ value: DeleteDBSecurityGroupInput) -> Swift.String? {
        return "/"
    }
}

///
public struct DeleteDBSecurityGroupInput: Swift.Equatable {
    /// The name of the DB security group to delete. You can't delete the default DB security group. Constraints:
    ///
    /// * Must be 1 to 255 letters, numbers, or hyphens.
    ///
    /// * First character must be a letter
    ///
    /// * Can't end with a hyphen or contain two consecutive hyphens
    ///
    /// * Must not be "Default"
    /// This member is required.
    public var dbSecurityGroupName: Swift.String?

    public init(
        dbSecurityGroupName: Swift.String? = nil
    )
    {
        self.dbSecurityGroupName = dbSecurityGroupName
    }
}

extension DeleteDBSecurityGroupOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<DeleteDBSecurityGroupOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            return DeleteDBSecurityGroupOutput()
        }
    }
}

public struct DeleteDBSecurityGroupOutput: Swift.Equatable {

    public init() { }
}

enum DeleteDBSecurityGroupOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "DBSecurityGroupNotFound": return try await DBSecurityGroupNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "InvalidDBSecurityGroupState": return try await InvalidDBSecurityGroupStateFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension DeleteDBShardGroupInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dbShardGroupIdentifier = "DBShardGroupIdentifier"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let dbShardGroupIdentifier = dbShardGroupIdentifier {
            try container.encode(dbShardGroupIdentifier, forKey: ClientRuntime.Key("DBShardGroupIdentifier"))
        }
        try container.encode("DeleteDBShardGroup", forKey:ClientRuntime.Key("Action"))
        try container.encode("2014-10-31", forKey:ClientRuntime.Key("Version"))
    }
}

extension DeleteDBShardGroupInput {

    static func urlPathProvider(_ value: DeleteDBShardGroupInput) -> Swift.String? {
        return "/"
    }
}

public struct DeleteDBShardGroupInput: Swift.Equatable {
    /// Teh name of the DB shard group to delete.
    /// This member is required.
    public var dbShardGroupIdentifier: Swift.String?

    public init(
        dbShardGroupIdentifier: Swift.String? = nil
    )
    {
        self.dbShardGroupIdentifier = dbShardGroupIdentifier
    }
}

extension DeleteDBShardGroupOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<DeleteDBShardGroupOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["DeleteDBShardGroupResult"]
            var value = DeleteDBShardGroupOutput()
            value.computeRedundancy = try reader["ComputeRedundancy"].readIfPresent()
            value.dbClusterIdentifier = try reader["DBClusterIdentifier"].readIfPresent()
            value.dbShardGroupIdentifier = try reader["DBShardGroupIdentifier"].readIfPresent()
            value.dbShardGroupResourceId = try reader["DBShardGroupResourceId"].readIfPresent()
            value.endpoint = try reader["Endpoint"].readIfPresent()
            value.maxACU = try reader["MaxACU"].readIfPresent()
            value.publiclyAccessible = try reader["PubliclyAccessible"].readIfPresent()
            value.status = try reader["Status"].readIfPresent()
            return value
        }
    }
}

public struct DeleteDBShardGroupOutput: Swift.Equatable {
    /// Specifies whether to create standby instances for the DB shard group. Valid values are the following:
    ///
    /// * 0 - Creates a single, primary DB instance for each physical shard. This is the default value, and the only one supported for the preview.
    ///
    /// * 1 - Creates a primary DB instance and a standby instance in a different Availability Zone (AZ) for each physical shard.
    ///
    /// * 2 - Creates a primary DB instance and two standby instances in different AZs for each physical shard.
    public var computeRedundancy: Swift.Int?
    /// The name of the primary DB cluster for the DB shard group.
    public var dbClusterIdentifier: Swift.String?
    /// The name of the DB shard group.
    public var dbShardGroupIdentifier: Swift.String?
    /// The Amazon Web Services Region-unique, immutable identifier for the DB shard group.
    public var dbShardGroupResourceId: Swift.String?
    /// The connection endpoint for the DB shard group.
    public var endpoint: Swift.String?
    /// The maximum capacity of the DB shard group in Aurora capacity units (ACUs).
    public var maxACU: Swift.Double?
    /// Indicates whether the DB shard group is publicly accessible. When the DB shard group is publicly accessible, its Domain Name System (DNS) endpoint resolves to the private IP address from within the DB shard group's virtual private cloud (VPC). It resolves to the public IP address from outside of the DB shard group's VPC. Access to the DB shard group is ultimately controlled by the security group it uses. That public access isn't permitted if the security group assigned to the DB shard group doesn't permit it. When the DB shard group isn't publicly accessible, it is an internal DB shard group with a DNS name that resolves to a private IP address. For more information, see [CreateDBShardGroup]. This setting is only for Aurora Limitless Database.
    public var publiclyAccessible: Swift.Bool?
    /// The status of the DB shard group.
    public var status: Swift.String?

    public init(
        computeRedundancy: Swift.Int? = nil,
        dbClusterIdentifier: Swift.String? = nil,
        dbShardGroupIdentifier: Swift.String? = nil,
        dbShardGroupResourceId: Swift.String? = nil,
        endpoint: Swift.String? = nil,
        maxACU: Swift.Double? = nil,
        publiclyAccessible: Swift.Bool? = nil,
        status: Swift.String? = nil
    )
    {
        self.computeRedundancy = computeRedundancy
        self.dbClusterIdentifier = dbClusterIdentifier
        self.dbShardGroupIdentifier = dbShardGroupIdentifier
        self.dbShardGroupResourceId = dbShardGroupResourceId
        self.endpoint = endpoint
        self.maxACU = maxACU
        self.publiclyAccessible = publiclyAccessible
        self.status = status
    }
}

enum DeleteDBShardGroupOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "DBShardGroupNotFound": return try await DBShardGroupNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "InvalidDBClusterStateFault": return try await InvalidDBClusterStateFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "InvalidDBShardGroupState": return try await InvalidDBShardGroupStateFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension DeleteDBSnapshotInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dbSnapshotIdentifier = "DBSnapshotIdentifier"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let dbSnapshotIdentifier = dbSnapshotIdentifier {
            try container.encode(dbSnapshotIdentifier, forKey: ClientRuntime.Key("DBSnapshotIdentifier"))
        }
        try container.encode("DeleteDBSnapshot", forKey:ClientRuntime.Key("Action"))
        try container.encode("2014-10-31", forKey:ClientRuntime.Key("Version"))
    }
}

extension DeleteDBSnapshotInput {

    static func urlPathProvider(_ value: DeleteDBSnapshotInput) -> Swift.String? {
        return "/"
    }
}

///
public struct DeleteDBSnapshotInput: Swift.Equatable {
    /// The DB snapshot identifier. Constraints: Must be the name of an existing DB snapshot in the available state.
    /// This member is required.
    public var dbSnapshotIdentifier: Swift.String?

    public init(
        dbSnapshotIdentifier: Swift.String? = nil
    )
    {
        self.dbSnapshotIdentifier = dbSnapshotIdentifier
    }
}

extension DeleteDBSnapshotOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<DeleteDBSnapshotOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["DeleteDBSnapshotResult"]
            var value = DeleteDBSnapshotOutput()
            value.dbSnapshot = try reader["DBSnapshot"].readIfPresent(readingClosure: RDSClientTypes.DBSnapshot.readingClosure)
            return value
        }
    }
}

public struct DeleteDBSnapshotOutput: Swift.Equatable {
    /// Contains the details of an Amazon RDS DB snapshot. This data type is used as a response element in the DescribeDBSnapshots action.
    public var dbSnapshot: RDSClientTypes.DBSnapshot?

    public init(
        dbSnapshot: RDSClientTypes.DBSnapshot? = nil
    )
    {
        self.dbSnapshot = dbSnapshot
    }
}

enum DeleteDBSnapshotOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "DBSnapshotNotFound": return try await DBSnapshotNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "InvalidDBSnapshotState": return try await InvalidDBSnapshotStateFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension DeleteDBSubnetGroupInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dbSubnetGroupName = "DBSubnetGroupName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let dbSubnetGroupName = dbSubnetGroupName {
            try container.encode(dbSubnetGroupName, forKey: ClientRuntime.Key("DBSubnetGroupName"))
        }
        try container.encode("DeleteDBSubnetGroup", forKey:ClientRuntime.Key("Action"))
        try container.encode("2014-10-31", forKey:ClientRuntime.Key("Version"))
    }
}

extension DeleteDBSubnetGroupInput {

    static func urlPathProvider(_ value: DeleteDBSubnetGroupInput) -> Swift.String? {
        return "/"
    }
}

///
public struct DeleteDBSubnetGroupInput: Swift.Equatable {
    /// The name of the database subnet group to delete. You can't delete the default subnet group. Constraints: Must match the name of an existing DBSubnetGroup. Must not be default. Example: mydbsubnetgroup
    /// This member is required.
    public var dbSubnetGroupName: Swift.String?

    public init(
        dbSubnetGroupName: Swift.String? = nil
    )
    {
        self.dbSubnetGroupName = dbSubnetGroupName
    }
}

extension DeleteDBSubnetGroupOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<DeleteDBSubnetGroupOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            return DeleteDBSubnetGroupOutput()
        }
    }
}

public struct DeleteDBSubnetGroupOutput: Swift.Equatable {

    public init() { }
}

enum DeleteDBSubnetGroupOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "DBSubnetGroupNotFoundFault": return try await DBSubnetGroupNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "InvalidDBSubnetGroupStateFault": return try await InvalidDBSubnetGroupStateFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "InvalidDBSubnetStateFault": return try await InvalidDBSubnetStateFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension DeleteEventSubscriptionInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case subscriptionName = "SubscriptionName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let subscriptionName = subscriptionName {
            try container.encode(subscriptionName, forKey: ClientRuntime.Key("SubscriptionName"))
        }
        try container.encode("DeleteEventSubscription", forKey:ClientRuntime.Key("Action"))
        try container.encode("2014-10-31", forKey:ClientRuntime.Key("Version"))
    }
}

extension DeleteEventSubscriptionInput {

    static func urlPathProvider(_ value: DeleteEventSubscriptionInput) -> Swift.String? {
        return "/"
    }
}

///
public struct DeleteEventSubscriptionInput: Swift.Equatable {
    /// The name of the RDS event notification subscription you want to delete.
    /// This member is required.
    public var subscriptionName: Swift.String?

    public init(
        subscriptionName: Swift.String? = nil
    )
    {
        self.subscriptionName = subscriptionName
    }
}

extension DeleteEventSubscriptionOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<DeleteEventSubscriptionOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["DeleteEventSubscriptionResult"]
            var value = DeleteEventSubscriptionOutput()
            value.eventSubscription = try reader["EventSubscription"].readIfPresent(readingClosure: RDSClientTypes.EventSubscription.readingClosure)
            return value
        }
    }
}

public struct DeleteEventSubscriptionOutput: Swift.Equatable {
    /// Contains the results of a successful invocation of the DescribeEventSubscriptions action.
    public var eventSubscription: RDSClientTypes.EventSubscription?

    public init(
        eventSubscription: RDSClientTypes.EventSubscription? = nil
    )
    {
        self.eventSubscription = eventSubscription
    }
}

enum DeleteEventSubscriptionOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "InvalidEventSubscriptionState": return try await InvalidEventSubscriptionStateFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "SubscriptionNotFound": return try await SubscriptionNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension DeleteGlobalClusterInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case globalClusterIdentifier = "GlobalClusterIdentifier"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let globalClusterIdentifier = globalClusterIdentifier {
            try container.encode(globalClusterIdentifier, forKey: ClientRuntime.Key("GlobalClusterIdentifier"))
        }
        try container.encode("DeleteGlobalCluster", forKey:ClientRuntime.Key("Action"))
        try container.encode("2014-10-31", forKey:ClientRuntime.Key("Version"))
    }
}

extension DeleteGlobalClusterInput {

    static func urlPathProvider(_ value: DeleteGlobalClusterInput) -> Swift.String? {
        return "/"
    }
}

public struct DeleteGlobalClusterInput: Swift.Equatable {
    /// The cluster identifier of the global database cluster being deleted.
    /// This member is required.
    public var globalClusterIdentifier: Swift.String?

    public init(
        globalClusterIdentifier: Swift.String? = nil
    )
    {
        self.globalClusterIdentifier = globalClusterIdentifier
    }
}

extension DeleteGlobalClusterOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<DeleteGlobalClusterOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["DeleteGlobalClusterResult"]
            var value = DeleteGlobalClusterOutput()
            value.globalCluster = try reader["GlobalCluster"].readIfPresent(readingClosure: RDSClientTypes.GlobalCluster.readingClosure)
            return value
        }
    }
}

public struct DeleteGlobalClusterOutput: Swift.Equatable {
    /// A data type representing an Aurora global database.
    public var globalCluster: RDSClientTypes.GlobalCluster?

    public init(
        globalCluster: RDSClientTypes.GlobalCluster? = nil
    )
    {
        self.globalCluster = globalCluster
    }
}

enum DeleteGlobalClusterOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "GlobalClusterNotFoundFault": return try await GlobalClusterNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "InvalidGlobalClusterStateFault": return try await InvalidGlobalClusterStateFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension DeleteIntegrationInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case integrationIdentifier = "IntegrationIdentifier"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let integrationIdentifier = integrationIdentifier {
            try container.encode(integrationIdentifier, forKey: ClientRuntime.Key("IntegrationIdentifier"))
        }
        try container.encode("DeleteIntegration", forKey:ClientRuntime.Key("Action"))
        try container.encode("2014-10-31", forKey:ClientRuntime.Key("Version"))
    }
}

extension DeleteIntegrationInput {

    static func urlPathProvider(_ value: DeleteIntegrationInput) -> Swift.String? {
        return "/"
    }
}

public struct DeleteIntegrationInput: Swift.Equatable {
    /// The unique identifier of the integration.
    /// This member is required.
    public var integrationIdentifier: Swift.String?

    public init(
        integrationIdentifier: Swift.String? = nil
    )
    {
        self.integrationIdentifier = integrationIdentifier
    }
}

extension DeleteIntegrationOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<DeleteIntegrationOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["DeleteIntegrationResult"]
            var value = DeleteIntegrationOutput()
            value.additionalEncryptionContext = try reader["AdditionalEncryptionContext"].readMapIfPresent(valueReadingClosure: Swift.String.readingClosure, keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
            value.createTime = try reader["CreateTime"].readTimestampIfPresent(format: .dateTime)
            value.errors = try reader["Errors"].readListIfPresent(memberReadingClosure: RDSClientTypes.IntegrationError.readingClosure, memberNodeInfo: "IntegrationError", isFlattened: false)
            value.integrationArn = try reader["IntegrationArn"].readIfPresent()
            value.integrationName = try reader["IntegrationName"].readIfPresent()
            value.kmsKeyId = try reader["KMSKeyId"].readIfPresent()
            value.sourceArn = try reader["SourceArn"].readIfPresent()
            value.status = try reader["Status"].readIfPresent()
            value.tags = try reader["Tags"].readListIfPresent(memberReadingClosure: RDSClientTypes.Tag.readingClosure, memberNodeInfo: "Tag", isFlattened: false)
            value.targetArn = try reader["TargetArn"].readIfPresent()
            return value
        }
    }
}

/// A zero-ETL integration with Amazon Redshift.
public struct DeleteIntegrationOutput: Swift.Equatable {
    /// The encryption context for the integration. For more information, see [Encryption context](https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#encrypt_context) in the Amazon Web Services Key Management Service Developer Guide.
    public var additionalEncryptionContext: [Swift.String:Swift.String]?
    /// The time when the integration was created, in Universal Coordinated Time (UTC).
    public var createTime: ClientRuntime.Date?
    /// Any errors associated with the integration.
    public var errors: [RDSClientTypes.IntegrationError]?
    /// The ARN of the integration.
    public var integrationArn: Swift.String?
    /// The name of the integration.
    public var integrationName: Swift.String?
    /// The Amazon Web Services Key Management System (Amazon Web Services KMS) key identifier for the key used to to encrypt the integration.
    public var kmsKeyId: Swift.String?
    /// The Amazon Resource Name (ARN) of the database used as the source for replication.
    public var sourceArn: Swift.String?
    /// The current status of the integration.
    public var status: RDSClientTypes.IntegrationStatus?
    /// A list of tags. For more information, see [Tagging Amazon RDS Resources](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html) in the Amazon RDS User Guide.
    public var tags: [RDSClientTypes.Tag]?
    /// The ARN of the Redshift data warehouse used as the target for replication.
    public var targetArn: Swift.String?

    public init(
        additionalEncryptionContext: [Swift.String:Swift.String]? = nil,
        createTime: ClientRuntime.Date? = nil,
        errors: [RDSClientTypes.IntegrationError]? = nil,
        integrationArn: Swift.String? = nil,
        integrationName: Swift.String? = nil,
        kmsKeyId: Swift.String? = nil,
        sourceArn: Swift.String? = nil,
        status: RDSClientTypes.IntegrationStatus? = nil,
        tags: [RDSClientTypes.Tag]? = nil,
        targetArn: Swift.String? = nil
    )
    {
        self.additionalEncryptionContext = additionalEncryptionContext
        self.createTime = createTime
        self.errors = errors
        self.integrationArn = integrationArn
        self.integrationName = integrationName
        self.kmsKeyId = kmsKeyId
        self.sourceArn = sourceArn
        self.status = status
        self.tags = tags
        self.targetArn = targetArn
    }
}

enum DeleteIntegrationOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "IntegrationConflictOperationFault": return try await IntegrationConflictOperationFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "IntegrationNotFoundFault": return try await IntegrationNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "InvalidIntegrationStateFault": return try await InvalidIntegrationStateFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension DeleteOptionGroupInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case optionGroupName = "OptionGroupName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let optionGroupName = optionGroupName {
            try container.encode(optionGroupName, forKey: ClientRuntime.Key("OptionGroupName"))
        }
        try container.encode("DeleteOptionGroup", forKey:ClientRuntime.Key("Action"))
        try container.encode("2014-10-31", forKey:ClientRuntime.Key("Version"))
    }
}

extension DeleteOptionGroupInput {

    static func urlPathProvider(_ value: DeleteOptionGroupInput) -> Swift.String? {
        return "/"
    }
}

///
public struct DeleteOptionGroupInput: Swift.Equatable {
    /// The name of the option group to be deleted. You can't delete default option groups.
    /// This member is required.
    public var optionGroupName: Swift.String?

    public init(
        optionGroupName: Swift.String? = nil
    )
    {
        self.optionGroupName = optionGroupName
    }
}

extension DeleteOptionGroupOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<DeleteOptionGroupOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            return DeleteOptionGroupOutput()
        }
    }
}

public struct DeleteOptionGroupOutput: Swift.Equatable {

    public init() { }
}

enum DeleteOptionGroupOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "InvalidOptionGroupStateFault": return try await InvalidOptionGroupStateFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "OptionGroupNotFoundFault": return try await OptionGroupNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension DeleteTenantDatabaseInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dbInstanceIdentifier = "DBInstanceIdentifier"
        case finalDBSnapshotIdentifier = "FinalDBSnapshotIdentifier"
        case skipFinalSnapshot = "SkipFinalSnapshot"
        case tenantDBName = "TenantDBName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let dbInstanceIdentifier = dbInstanceIdentifier {
            try container.encode(dbInstanceIdentifier, forKey: ClientRuntime.Key("DBInstanceIdentifier"))
        }
        if let finalDBSnapshotIdentifier = finalDBSnapshotIdentifier {
            try container.encode(finalDBSnapshotIdentifier, forKey: ClientRuntime.Key("FinalDBSnapshotIdentifier"))
        }
        if let skipFinalSnapshot = skipFinalSnapshot {
            try container.encode(skipFinalSnapshot, forKey: ClientRuntime.Key("SkipFinalSnapshot"))
        }
        if let tenantDBName = tenantDBName {
            try container.encode(tenantDBName, forKey: ClientRuntime.Key("TenantDBName"))
        }
        try container.encode("DeleteTenantDatabase", forKey:ClientRuntime.Key("Action"))
        try container.encode("2014-10-31", forKey:ClientRuntime.Key("Version"))
    }
}

extension DeleteTenantDatabaseInput {

    static func urlPathProvider(_ value: DeleteTenantDatabaseInput) -> Swift.String? {
        return "/"
    }
}

public struct DeleteTenantDatabaseInput: Swift.Equatable {
    /// The user-supplied identifier for the DB instance that contains the tenant database that you want to delete.
    /// This member is required.
    public var dbInstanceIdentifier: Swift.String?
    /// The DBSnapshotIdentifier of the new DBSnapshot created when the SkipFinalSnapshot parameter is disabled. If you enable this parameter and also enable SkipFinalShapshot, the command results in an error.
    public var finalDBSnapshotIdentifier: Swift.String?
    /// Specifies whether to skip the creation of a final DB snapshot before removing the tenant database from your DB instance. If you enable this parameter, RDS doesn't create a DB snapshot. If you don't enable this parameter, RDS creates a DB snapshot before it deletes the tenant database. By default, RDS doesn't skip the final snapshot. If you don't enable this parameter, you must specify the FinalDBSnapshotIdentifier parameter.
    public var skipFinalSnapshot: Swift.Bool?
    /// The user-supplied name of the tenant database that you want to remove from your DB instance. Amazon RDS deletes the tenant database with this name. This parameter isn’t case-sensitive.
    /// This member is required.
    public var tenantDBName: Swift.String?

    public init(
        dbInstanceIdentifier: Swift.String? = nil,
        finalDBSnapshotIdentifier: Swift.String? = nil,
        skipFinalSnapshot: Swift.Bool? = nil,
        tenantDBName: Swift.String? = nil
    )
    {
        self.dbInstanceIdentifier = dbInstanceIdentifier
        self.finalDBSnapshotIdentifier = finalDBSnapshotIdentifier
        self.skipFinalSnapshot = skipFinalSnapshot
        self.tenantDBName = tenantDBName
    }
}

extension DeleteTenantDatabaseOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<DeleteTenantDatabaseOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["DeleteTenantDatabaseResult"]
            var value = DeleteTenantDatabaseOutput()
            value.tenantDatabase = try reader["TenantDatabase"].readIfPresent(readingClosure: RDSClientTypes.TenantDatabase.readingClosure)
            return value
        }
    }
}

public struct DeleteTenantDatabaseOutput: Swift.Equatable {
    /// A tenant database in the DB instance. This data type is an element in the response to the DescribeTenantDatabases action.
    public var tenantDatabase: RDSClientTypes.TenantDatabase?

    public init(
        tenantDatabase: RDSClientTypes.TenantDatabase? = nil
    )
    {
        self.tenantDatabase = tenantDatabase
    }
}

enum DeleteTenantDatabaseOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "DBInstanceNotFound": return try await DBInstanceNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "InvalidDBInstanceState": return try await InvalidDBInstanceStateFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "TenantDatabaseNotFound": return try await TenantDatabaseNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension DeregisterDBProxyTargetsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dbClusterIdentifiers = "DBClusterIdentifiers"
        case dbInstanceIdentifiers = "DBInstanceIdentifiers"
        case dbProxyName = "DBProxyName"
        case targetGroupName = "TargetGroupName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let dbClusterIdentifiers = dbClusterIdentifiers {
            if !dbClusterIdentifiers.isEmpty {
                var dbClusterIdentifiersContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("DBClusterIdentifiers"))
                for (index0, string0) in dbClusterIdentifiers.enumerated() {
                    try dbClusterIdentifiersContainer.encode(string0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var dbClusterIdentifiersContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("DBClusterIdentifiers"))
                try dbClusterIdentifiersContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let dbInstanceIdentifiers = dbInstanceIdentifiers {
            if !dbInstanceIdentifiers.isEmpty {
                var dbInstanceIdentifiersContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("DBInstanceIdentifiers"))
                for (index0, string0) in dbInstanceIdentifiers.enumerated() {
                    try dbInstanceIdentifiersContainer.encode(string0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var dbInstanceIdentifiersContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("DBInstanceIdentifiers"))
                try dbInstanceIdentifiersContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let dbProxyName = dbProxyName {
            try container.encode(dbProxyName, forKey: ClientRuntime.Key("DBProxyName"))
        }
        if let targetGroupName = targetGroupName {
            try container.encode(targetGroupName, forKey: ClientRuntime.Key("TargetGroupName"))
        }
        try container.encode("DeregisterDBProxyTargets", forKey:ClientRuntime.Key("Action"))
        try container.encode("2014-10-31", forKey:ClientRuntime.Key("Version"))
    }
}

extension DeregisterDBProxyTargetsInput {

    static func urlPathProvider(_ value: DeregisterDBProxyTargetsInput) -> Swift.String? {
        return "/"
    }
}

public struct DeregisterDBProxyTargetsInput: Swift.Equatable {
    /// One or more DB cluster identifiers.
    public var dbClusterIdentifiers: [Swift.String]?
    /// One or more DB instance identifiers.
    public var dbInstanceIdentifiers: [Swift.String]?
    /// The identifier of the DBProxy that is associated with the DBProxyTargetGroup.
    /// This member is required.
    public var dbProxyName: Swift.String?
    /// The identifier of the DBProxyTargetGroup.
    public var targetGroupName: Swift.String?

    public init(
        dbClusterIdentifiers: [Swift.String]? = nil,
        dbInstanceIdentifiers: [Swift.String]? = nil,
        dbProxyName: Swift.String? = nil,
        targetGroupName: Swift.String? = nil
    )
    {
        self.dbClusterIdentifiers = dbClusterIdentifiers
        self.dbInstanceIdentifiers = dbInstanceIdentifiers
        self.dbProxyName = dbProxyName
        self.targetGroupName = targetGroupName
    }
}

extension DeregisterDBProxyTargetsOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<DeregisterDBProxyTargetsOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            return DeregisterDBProxyTargetsOutput()
        }
    }
}

public struct DeregisterDBProxyTargetsOutput: Swift.Equatable {

    public init() { }
}

enum DeregisterDBProxyTargetsOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "DBProxyNotFoundFault": return try await DBProxyNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "DBProxyTargetGroupNotFoundFault": return try await DBProxyTargetGroupNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "DBProxyTargetNotFoundFault": return try await DBProxyTargetNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "InvalidDBProxyStateFault": return try await InvalidDBProxyStateFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension DescribeAccountAttributesInput: Swift.Encodable {

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        try container.encode("DescribeAccountAttributes", forKey:ClientRuntime.Key("Action"))
        try container.encode("2014-10-31", forKey:ClientRuntime.Key("Version"))
    }
}

extension DescribeAccountAttributesInput {

    static func urlPathProvider(_ value: DescribeAccountAttributesInput) -> Swift.String? {
        return "/"
    }
}

///
public struct DescribeAccountAttributesInput: Swift.Equatable {

    public init() { }
}

extension DescribeAccountAttributesOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<DescribeAccountAttributesOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["DescribeAccountAttributesResult"]
            var value = DescribeAccountAttributesOutput()
            value.accountQuotas = try reader["AccountQuotas"].readListIfPresent(memberReadingClosure: RDSClientTypes.AccountQuota.readingClosure, memberNodeInfo: "AccountQuota", isFlattened: false)
            return value
        }
    }
}

/// Data returned by the DescribeAccountAttributes action.
public struct DescribeAccountAttributesOutput: Swift.Equatable {
    /// A list of AccountQuota objects. Within this list, each quota has a name, a count of usage toward the quota maximum, and a maximum value for the quota.
    public var accountQuotas: [RDSClientTypes.AccountQuota]?

    public init(
        accountQuotas: [RDSClientTypes.AccountQuota]? = nil
    )
    {
        self.accountQuotas = accountQuotas
    }
}

enum DescribeAccountAttributesOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension DescribeBlueGreenDeploymentsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case blueGreenDeploymentIdentifier = "BlueGreenDeploymentIdentifier"
        case filters = "Filters"
        case marker = "Marker"
        case maxRecords = "MaxRecords"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let blueGreenDeploymentIdentifier = blueGreenDeploymentIdentifier {
            try container.encode(blueGreenDeploymentIdentifier, forKey: ClientRuntime.Key("BlueGreenDeploymentIdentifier"))
        }
        if let filters = filters {
            if !filters.isEmpty {
                var filtersContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Filters"))
                for (index0, filter0) in filters.enumerated() {
                    try filtersContainer.encode(filter0, forKey: ClientRuntime.Key("Filter.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var filtersContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Filters"))
                try filtersContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let marker = marker {
            try container.encode(marker, forKey: ClientRuntime.Key("Marker"))
        }
        if let maxRecords = maxRecords {
            try container.encode(maxRecords, forKey: ClientRuntime.Key("MaxRecords"))
        }
        try container.encode("DescribeBlueGreenDeployments", forKey:ClientRuntime.Key("Action"))
        try container.encode("2014-10-31", forKey:ClientRuntime.Key("Version"))
    }
}

extension DescribeBlueGreenDeploymentsInput {

    static func urlPathProvider(_ value: DescribeBlueGreenDeploymentsInput) -> Swift.String? {
        return "/"
    }
}

public struct DescribeBlueGreenDeploymentsInput: Swift.Equatable {
    /// The blue/green deployment identifier. If you specify this parameter, the response only includes information about the specific blue/green deployment. This parameter isn't case-sensitive. Constraints:
    ///
    /// * Must match an existing blue/green deployment identifier.
    public var blueGreenDeploymentIdentifier: Swift.String?
    /// A filter that specifies one or more blue/green deployments to describe. Valid Values:
    ///
    /// * blue-green-deployment-identifier - Accepts system-generated identifiers for blue/green deployments. The results list only includes information about the blue/green deployments with the specified identifiers.
    ///
    /// * blue-green-deployment-name - Accepts user-supplied names for blue/green deployments. The results list only includes information about the blue/green deployments with the specified names.
    ///
    /// * source - Accepts source databases for a blue/green deployment. The results list only includes information about the blue/green deployments with the specified source databases.
    ///
    /// * target - Accepts target databases for a blue/green deployment. The results list only includes information about the blue/green deployments with the specified target databases.
    public var filters: [RDSClientTypes.Filter]?
    /// An optional pagination token provided by a previous DescribeBlueGreenDeployments request. If you specify this parameter, the response only includes records beyond the marker, up to the value specified by MaxRecords.
    public var marker: Swift.String?
    /// The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a pagination token called a marker is included in the response so you can retrieve the remaining results. Default: 100 Constraints:
    ///
    /// * Must be a minimum of 20.
    ///
    /// * Can't exceed 100.
    public var maxRecords: Swift.Int?

    public init(
        blueGreenDeploymentIdentifier: Swift.String? = nil,
        filters: [RDSClientTypes.Filter]? = nil,
        marker: Swift.String? = nil,
        maxRecords: Swift.Int? = nil
    )
    {
        self.blueGreenDeploymentIdentifier = blueGreenDeploymentIdentifier
        self.filters = filters
        self.marker = marker
        self.maxRecords = maxRecords
    }
}

extension DescribeBlueGreenDeploymentsOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<DescribeBlueGreenDeploymentsOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["DescribeBlueGreenDeploymentsResult"]
            var value = DescribeBlueGreenDeploymentsOutput()
            value.blueGreenDeployments = try reader["BlueGreenDeployments"].readListIfPresent(memberReadingClosure: RDSClientTypes.BlueGreenDeployment.readingClosure, memberNodeInfo: "member", isFlattened: false)
            value.marker = try reader["Marker"].readIfPresent()
            return value
        }
    }
}

public struct DescribeBlueGreenDeploymentsOutput: Swift.Equatable {
    /// A list of blue/green deployments in the current account and Amazon Web Services Region.
    public var blueGreenDeployments: [RDSClientTypes.BlueGreenDeployment]?
    /// A pagination token that can be used in a later DescribeBlueGreenDeployments request.
    public var marker: Swift.String?

    public init(
        blueGreenDeployments: [RDSClientTypes.BlueGreenDeployment]? = nil,
        marker: Swift.String? = nil
    )
    {
        self.blueGreenDeployments = blueGreenDeployments
        self.marker = marker
    }
}

enum DescribeBlueGreenDeploymentsOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "BlueGreenDeploymentNotFoundFault": return try await BlueGreenDeploymentNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension DescribeCertificatesInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case certificateIdentifier = "CertificateIdentifier"
        case filters = "Filters"
        case marker = "Marker"
        case maxRecords = "MaxRecords"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let certificateIdentifier = certificateIdentifier {
            try container.encode(certificateIdentifier, forKey: ClientRuntime.Key("CertificateIdentifier"))
        }
        if let filters = filters {
            if !filters.isEmpty {
                var filtersContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Filters"))
                for (index0, filter0) in filters.enumerated() {
                    try filtersContainer.encode(filter0, forKey: ClientRuntime.Key("Filter.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var filtersContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Filters"))
                try filtersContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let marker = marker {
            try container.encode(marker, forKey: ClientRuntime.Key("Marker"))
        }
        if let maxRecords = maxRecords {
            try container.encode(maxRecords, forKey: ClientRuntime.Key("MaxRecords"))
        }
        try container.encode("DescribeCertificates", forKey:ClientRuntime.Key("Action"))
        try container.encode("2014-10-31", forKey:ClientRuntime.Key("Version"))
    }
}

extension DescribeCertificatesInput {

    static func urlPathProvider(_ value: DescribeCertificatesInput) -> Swift.String? {
        return "/"
    }
}

///
public struct DescribeCertificatesInput: Swift.Equatable {
    /// The user-supplied certificate identifier. If this parameter is specified, information for only the identified certificate is returned. This parameter isn't case-sensitive. Constraints:
    ///
    /// * Must match an existing CertificateIdentifier.
    public var certificateIdentifier: Swift.String?
    /// This parameter isn't currently supported.
    public var filters: [RDSClientTypes.Filter]?
    /// An optional pagination token provided by a previous DescribeCertificates request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords.
    public var marker: Swift.String?
    /// The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a pagination token called a marker is included in the response so you can retrieve the remaining results. Default: 100 Constraints: Minimum 20, maximum 100.
    public var maxRecords: Swift.Int?

    public init(
        certificateIdentifier: Swift.String? = nil,
        filters: [RDSClientTypes.Filter]? = nil,
        marker: Swift.String? = nil,
        maxRecords: Swift.Int? = nil
    )
    {
        self.certificateIdentifier = certificateIdentifier
        self.filters = filters
        self.marker = marker
        self.maxRecords = maxRecords
    }
}

extension DescribeCertificatesOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<DescribeCertificatesOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["DescribeCertificatesResult"]
            var value = DescribeCertificatesOutput()
            value.certificates = try reader["Certificates"].readListIfPresent(memberReadingClosure: RDSClientTypes.Certificate.readingClosure, memberNodeInfo: "Certificate", isFlattened: false)
            value.defaultCertificateForNewLaunches = try reader["DefaultCertificateForNewLaunches"].readIfPresent()
            value.marker = try reader["Marker"].readIfPresent()
            return value
        }
    }
}

/// Data returned by the DescribeCertificates action.
public struct DescribeCertificatesOutput: Swift.Equatable {
    /// The list of Certificate objects for the Amazon Web Services account.
    public var certificates: [RDSClientTypes.Certificate]?
    /// The default root CA for new databases created by your Amazon Web Services account. This is either the root CA override set on your Amazon Web Services account or the system default CA for the Region if no override exists. To override the default CA, use the ModifyCertificates operation.
    public var defaultCertificateForNewLaunches: Swift.String?
    /// An optional pagination token provided by a previous DescribeCertificates request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords .
    public var marker: Swift.String?

    public init(
        certificates: [RDSClientTypes.Certificate]? = nil,
        defaultCertificateForNewLaunches: Swift.String? = nil,
        marker: Swift.String? = nil
    )
    {
        self.certificates = certificates
        self.defaultCertificateForNewLaunches = defaultCertificateForNewLaunches
        self.marker = marker
    }
}

enum DescribeCertificatesOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "CertificateNotFound": return try await CertificateNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension DescribeDBClusterAutomatedBackupsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dbClusterIdentifier = "DBClusterIdentifier"
        case dbClusterResourceId = "DbClusterResourceId"
        case filters = "Filters"
        case marker = "Marker"
        case maxRecords = "MaxRecords"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let dbClusterIdentifier = dbClusterIdentifier {
            try container.encode(dbClusterIdentifier, forKey: ClientRuntime.Key("DBClusterIdentifier"))
        }
        if let dbClusterResourceId = dbClusterResourceId {
            try container.encode(dbClusterResourceId, forKey: ClientRuntime.Key("DbClusterResourceId"))
        }
        if let filters = filters {
            if !filters.isEmpty {
                var filtersContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Filters"))
                for (index0, filter0) in filters.enumerated() {
                    try filtersContainer.encode(filter0, forKey: ClientRuntime.Key("Filter.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var filtersContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Filters"))
                try filtersContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let marker = marker {
            try container.encode(marker, forKey: ClientRuntime.Key("Marker"))
        }
        if let maxRecords = maxRecords {
            try container.encode(maxRecords, forKey: ClientRuntime.Key("MaxRecords"))
        }
        try container.encode("DescribeDBClusterAutomatedBackups", forKey:ClientRuntime.Key("Action"))
        try container.encode("2014-10-31", forKey:ClientRuntime.Key("Version"))
    }
}

extension DescribeDBClusterAutomatedBackupsInput {

    static func urlPathProvider(_ value: DescribeDBClusterAutomatedBackupsInput) -> Swift.String? {
        return "/"
    }
}

public struct DescribeDBClusterAutomatedBackupsInput: Swift.Equatable {
    /// (Optional) The user-supplied DB cluster identifier. If this parameter is specified, it must match the identifier of an existing DB cluster. It returns information from the specific DB cluster's automated backup. This parameter isn't case-sensitive.
    public var dbClusterIdentifier: Swift.String?
    /// The resource ID of the DB cluster that is the source of the automated backup. This parameter isn't case-sensitive.
    public var dbClusterResourceId: Swift.String?
    /// A filter that specifies which resources to return based on status. Supported filters are the following:
    ///
    /// * status
    ///
    /// * retained - Automated backups for deleted clusters and after backup replication is stopped.
    ///
    ///
    ///
    ///
    /// * db-cluster-id - Accepts DB cluster identifiers and Amazon Resource Names (ARNs). The results list includes only information about the DB cluster automated backups identified by these ARNs.
    ///
    /// * db-cluster-resource-id - Accepts DB resource identifiers and Amazon Resource Names (ARNs). The results list includes only information about the DB cluster resources identified by these ARNs.
    ///
    ///
    /// Returns all resources by default. The status for each resource is specified in the response.
    public var filters: [RDSClientTypes.Filter]?
    /// The pagination token provided in the previous request. If this parameter is specified the response includes only records beyond the marker, up to MaxRecords.
    public var marker: Swift.String?
    /// The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a pagination token called a marker is included in the response so that you can retrieve the remaining results.
    public var maxRecords: Swift.Int?

    public init(
        dbClusterIdentifier: Swift.String? = nil,
        dbClusterResourceId: Swift.String? = nil,
        filters: [RDSClientTypes.Filter]? = nil,
        marker: Swift.String? = nil,
        maxRecords: Swift.Int? = nil
    )
    {
        self.dbClusterIdentifier = dbClusterIdentifier
        self.dbClusterResourceId = dbClusterResourceId
        self.filters = filters
        self.marker = marker
        self.maxRecords = maxRecords
    }
}

extension DescribeDBClusterAutomatedBackupsOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<DescribeDBClusterAutomatedBackupsOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["DescribeDBClusterAutomatedBackupsResult"]
            var value = DescribeDBClusterAutomatedBackupsOutput()
            value.dbClusterAutomatedBackups = try reader["DBClusterAutomatedBackups"].readListIfPresent(memberReadingClosure: RDSClientTypes.DBClusterAutomatedBackup.readingClosure, memberNodeInfo: "DBClusterAutomatedBackup", isFlattened: false)
            value.marker = try reader["Marker"].readIfPresent()
            return value
        }
    }
}

public struct DescribeDBClusterAutomatedBackupsOutput: Swift.Equatable {
    /// A list of DBClusterAutomatedBackup backups.
    public var dbClusterAutomatedBackups: [RDSClientTypes.DBClusterAutomatedBackup]?
    /// The pagination token provided in the previous request. If this parameter is specified the response includes only records beyond the marker, up to MaxRecords.
    public var marker: Swift.String?

    public init(
        dbClusterAutomatedBackups: [RDSClientTypes.DBClusterAutomatedBackup]? = nil,
        marker: Swift.String? = nil
    )
    {
        self.dbClusterAutomatedBackups = dbClusterAutomatedBackups
        self.marker = marker
    }
}

enum DescribeDBClusterAutomatedBackupsOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "DBClusterAutomatedBackupNotFoundFault": return try await DBClusterAutomatedBackupNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension DescribeDBClusterBacktracksInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case backtrackIdentifier = "BacktrackIdentifier"
        case dbClusterIdentifier = "DBClusterIdentifier"
        case filters = "Filters"
        case marker = "Marker"
        case maxRecords = "MaxRecords"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let backtrackIdentifier = backtrackIdentifier {
            try container.encode(backtrackIdentifier, forKey: ClientRuntime.Key("BacktrackIdentifier"))
        }
        if let dbClusterIdentifier = dbClusterIdentifier {
            try container.encode(dbClusterIdentifier, forKey: ClientRuntime.Key("DBClusterIdentifier"))
        }
        if let filters = filters {
            if !filters.isEmpty {
                var filtersContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Filters"))
                for (index0, filter0) in filters.enumerated() {
                    try filtersContainer.encode(filter0, forKey: ClientRuntime.Key("Filter.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var filtersContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Filters"))
                try filtersContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let marker = marker {
            try container.encode(marker, forKey: ClientRuntime.Key("Marker"))
        }
        if let maxRecords = maxRecords {
            try container.encode(maxRecords, forKey: ClientRuntime.Key("MaxRecords"))
        }
        try container.encode("DescribeDBClusterBacktracks", forKey:ClientRuntime.Key("Action"))
        try container.encode("2014-10-31", forKey:ClientRuntime.Key("Version"))
    }
}

extension DescribeDBClusterBacktracksInput {

    static func urlPathProvider(_ value: DescribeDBClusterBacktracksInput) -> Swift.String? {
        return "/"
    }
}

///
public struct DescribeDBClusterBacktracksInput: Swift.Equatable {
    /// If specified, this value is the backtrack identifier of the backtrack to be described. Constraints:
    ///
    /// * Must contain a valid universally unique identifier (UUID). For more information about UUIDs, see [Universally unique identifier](https://en.wikipedia.org/wiki/Universally_unique_identifier).
    ///
    ///
    /// Example: 123e4567-e89b-12d3-a456-426655440000
    public var backtrackIdentifier: Swift.String?
    /// The DB cluster identifier of the DB cluster to be described. This parameter is stored as a lowercase string. Constraints:
    ///
    /// * Must contain from 1 to 63 alphanumeric characters or hyphens.
    ///
    /// * First character must be a letter.
    ///
    /// * Can't end with a hyphen or contain two consecutive hyphens.
    ///
    ///
    /// Example: my-cluster1
    /// This member is required.
    public var dbClusterIdentifier: Swift.String?
    /// A filter that specifies one or more DB clusters to describe. Supported filters include the following:
    ///
    /// * db-cluster-backtrack-id - Accepts backtrack identifiers. The results list includes information about only the backtracks identified by these identifiers.
    ///
    /// * db-cluster-backtrack-status - Accepts any of the following backtrack status values:
    ///
    /// * applying
    ///
    /// * completed
    ///
    /// * failed
    ///
    /// * pending
    ///
    ///
    /// The results list includes information about only the backtracks identified by these values.
    public var filters: [RDSClientTypes.Filter]?
    /// An optional pagination token provided by a previous DescribeDBClusterBacktracks request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords.
    public var marker: Swift.String?
    /// The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a pagination token called a marker is included in the response so you can retrieve the remaining results. Default: 100 Constraints: Minimum 20, maximum 100.
    public var maxRecords: Swift.Int?

    public init(
        backtrackIdentifier: Swift.String? = nil,
        dbClusterIdentifier: Swift.String? = nil,
        filters: [RDSClientTypes.Filter]? = nil,
        marker: Swift.String? = nil,
        maxRecords: Swift.Int? = nil
    )
    {
        self.backtrackIdentifier = backtrackIdentifier
        self.dbClusterIdentifier = dbClusterIdentifier
        self.filters = filters
        self.marker = marker
        self.maxRecords = maxRecords
    }
}

extension DescribeDBClusterBacktracksOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<DescribeDBClusterBacktracksOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["DescribeDBClusterBacktracksResult"]
            var value = DescribeDBClusterBacktracksOutput()
            value.dbClusterBacktracks = try reader["DBClusterBacktracks"].readListIfPresent(memberReadingClosure: RDSClientTypes.DBClusterBacktrack.readingClosure, memberNodeInfo: "DBClusterBacktrack", isFlattened: false)
            value.marker = try reader["Marker"].readIfPresent()
            return value
        }
    }
}

/// Contains the result of a successful invocation of the DescribeDBClusterBacktracks action.
public struct DescribeDBClusterBacktracksOutput: Swift.Equatable {
    /// Contains a list of backtracks for the user.
    public var dbClusterBacktracks: [RDSClientTypes.DBClusterBacktrack]?
    /// A pagination token that can be used in a later DescribeDBClusterBacktracks request.
    public var marker: Swift.String?

    public init(
        dbClusterBacktracks: [RDSClientTypes.DBClusterBacktrack]? = nil,
        marker: Swift.String? = nil
    )
    {
        self.dbClusterBacktracks = dbClusterBacktracks
        self.marker = marker
    }
}

enum DescribeDBClusterBacktracksOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "DBClusterBacktrackNotFoundFault": return try await DBClusterBacktrackNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "DBClusterNotFoundFault": return try await DBClusterNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension DescribeDBClusterEndpointsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dbClusterEndpointIdentifier = "DBClusterEndpointIdentifier"
        case dbClusterIdentifier = "DBClusterIdentifier"
        case filters = "Filters"
        case marker = "Marker"
        case maxRecords = "MaxRecords"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let dbClusterEndpointIdentifier = dbClusterEndpointIdentifier {
            try container.encode(dbClusterEndpointIdentifier, forKey: ClientRuntime.Key("DBClusterEndpointIdentifier"))
        }
        if let dbClusterIdentifier = dbClusterIdentifier {
            try container.encode(dbClusterIdentifier, forKey: ClientRuntime.Key("DBClusterIdentifier"))
        }
        if let filters = filters {
            if !filters.isEmpty {
                var filtersContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Filters"))
                for (index0, filter0) in filters.enumerated() {
                    try filtersContainer.encode(filter0, forKey: ClientRuntime.Key("Filter.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var filtersContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Filters"))
                try filtersContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let marker = marker {
            try container.encode(marker, forKey: ClientRuntime.Key("Marker"))
        }
        if let maxRecords = maxRecords {
            try container.encode(maxRecords, forKey: ClientRuntime.Key("MaxRecords"))
        }
        try container.encode("DescribeDBClusterEndpoints", forKey:ClientRuntime.Key("Action"))
        try container.encode("2014-10-31", forKey:ClientRuntime.Key("Version"))
    }
}

extension DescribeDBClusterEndpointsInput {

    static func urlPathProvider(_ value: DescribeDBClusterEndpointsInput) -> Swift.String? {
        return "/"
    }
}

public struct DescribeDBClusterEndpointsInput: Swift.Equatable {
    /// The identifier of the endpoint to describe. This parameter is stored as a lowercase string.
    public var dbClusterEndpointIdentifier: Swift.String?
    /// The DB cluster identifier of the DB cluster associated with the endpoint. This parameter is stored as a lowercase string.
    public var dbClusterIdentifier: Swift.String?
    /// A set of name-value pairs that define which endpoints to include in the output. The filters are specified as name-value pairs, in the format Name=endpoint_type,Values=endpoint_type1,endpoint_type2,.... Name can be one of: db-cluster-endpoint-type, db-cluster-endpoint-custom-type, db-cluster-endpoint-id, db-cluster-endpoint-status. Values for the  db-cluster-endpoint-type filter can be one or more of: reader, writer, custom. Values for the db-cluster-endpoint-custom-type filter can be one or more of: reader, any. Values for the db-cluster-endpoint-status filter can be one or more of: available, creating, deleting, inactive, modifying.
    public var filters: [RDSClientTypes.Filter]?
    /// An optional pagination token provided by a previous DescribeDBClusterEndpoints request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords.
    public var marker: Swift.String?
    /// The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a pagination token called a marker is included in the response so you can retrieve the remaining results. Default: 100 Constraints: Minimum 20, maximum 100.
    public var maxRecords: Swift.Int?

    public init(
        dbClusterEndpointIdentifier: Swift.String? = nil,
        dbClusterIdentifier: Swift.String? = nil,
        filters: [RDSClientTypes.Filter]? = nil,
        marker: Swift.String? = nil,
        maxRecords: Swift.Int? = nil
    )
    {
        self.dbClusterEndpointIdentifier = dbClusterEndpointIdentifier
        self.dbClusterIdentifier = dbClusterIdentifier
        self.filters = filters
        self.marker = marker
        self.maxRecords = maxRecords
    }
}

extension DescribeDBClusterEndpointsOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<DescribeDBClusterEndpointsOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["DescribeDBClusterEndpointsResult"]
            var value = DescribeDBClusterEndpointsOutput()
            value.dbClusterEndpoints = try reader["DBClusterEndpoints"].readListIfPresent(memberReadingClosure: RDSClientTypes.DBClusterEndpoint.readingClosure, memberNodeInfo: "DBClusterEndpointList", isFlattened: false)
            value.marker = try reader["Marker"].readIfPresent()
            return value
        }
    }
}

public struct DescribeDBClusterEndpointsOutput: Swift.Equatable {
    /// Contains the details of the endpoints associated with the cluster and matching any filter conditions.
    public var dbClusterEndpoints: [RDSClientTypes.DBClusterEndpoint]?
    /// An optional pagination token provided by a previous DescribeDBClusterEndpoints request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords.
    public var marker: Swift.String?

    public init(
        dbClusterEndpoints: [RDSClientTypes.DBClusterEndpoint]? = nil,
        marker: Swift.String? = nil
    )
    {
        self.dbClusterEndpoints = dbClusterEndpoints
        self.marker = marker
    }
}

enum DescribeDBClusterEndpointsOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "DBClusterNotFoundFault": return try await DBClusterNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension DescribeDBClusterParameterGroupsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dbClusterParameterGroupName = "DBClusterParameterGroupName"
        case filters = "Filters"
        case marker = "Marker"
        case maxRecords = "MaxRecords"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let dbClusterParameterGroupName = dbClusterParameterGroupName {
            try container.encode(dbClusterParameterGroupName, forKey: ClientRuntime.Key("DBClusterParameterGroupName"))
        }
        if let filters = filters {
            if !filters.isEmpty {
                var filtersContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Filters"))
                for (index0, filter0) in filters.enumerated() {
                    try filtersContainer.encode(filter0, forKey: ClientRuntime.Key("Filter.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var filtersContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Filters"))
                try filtersContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let marker = marker {
            try container.encode(marker, forKey: ClientRuntime.Key("Marker"))
        }
        if let maxRecords = maxRecords {
            try container.encode(maxRecords, forKey: ClientRuntime.Key("MaxRecords"))
        }
        try container.encode("DescribeDBClusterParameterGroups", forKey:ClientRuntime.Key("Action"))
        try container.encode("2014-10-31", forKey:ClientRuntime.Key("Version"))
    }
}

extension DescribeDBClusterParameterGroupsInput {

    static func urlPathProvider(_ value: DescribeDBClusterParameterGroupsInput) -> Swift.String? {
        return "/"
    }
}

///
public struct DescribeDBClusterParameterGroupsInput: Swift.Equatable {
    /// The name of a specific DB cluster parameter group to return details for. Constraints:
    ///
    /// * If supplied, must match the name of an existing DBClusterParameterGroup.
    public var dbClusterParameterGroupName: Swift.String?
    /// This parameter isn't currently supported.
    public var filters: [RDSClientTypes.Filter]?
    /// An optional pagination token provided by a previous DescribeDBClusterParameterGroups request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords.
    public var marker: Swift.String?
    /// The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a pagination token called a marker is included in the response so you can retrieve the remaining results. Default: 100 Constraints: Minimum 20, maximum 100.
    public var maxRecords: Swift.Int?

    public init(
        dbClusterParameterGroupName: Swift.String? = nil,
        filters: [RDSClientTypes.Filter]? = nil,
        marker: Swift.String? = nil,
        maxRecords: Swift.Int? = nil
    )
    {
        self.dbClusterParameterGroupName = dbClusterParameterGroupName
        self.filters = filters
        self.marker = marker
        self.maxRecords = maxRecords
    }
}

extension DescribeDBClusterParameterGroupsOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<DescribeDBClusterParameterGroupsOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["DescribeDBClusterParameterGroupsResult"]
            var value = DescribeDBClusterParameterGroupsOutput()
            value.dbClusterParameterGroups = try reader["DBClusterParameterGroups"].readListIfPresent(memberReadingClosure: RDSClientTypes.DBClusterParameterGroup.readingClosure, memberNodeInfo: "DBClusterParameterGroup", isFlattened: false)
            value.marker = try reader["Marker"].readIfPresent()
            return value
        }
    }
}

///
public struct DescribeDBClusterParameterGroupsOutput: Swift.Equatable {
    /// A list of DB cluster parameter groups.
    public var dbClusterParameterGroups: [RDSClientTypes.DBClusterParameterGroup]?
    /// An optional pagination token provided by a previous DescribeDBClusterParameterGroups request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords.
    public var marker: Swift.String?

    public init(
        dbClusterParameterGroups: [RDSClientTypes.DBClusterParameterGroup]? = nil,
        marker: Swift.String? = nil
    )
    {
        self.dbClusterParameterGroups = dbClusterParameterGroups
        self.marker = marker
    }
}

enum DescribeDBClusterParameterGroupsOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "DBParameterGroupNotFound": return try await DBParameterGroupNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension DescribeDBClusterParametersInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dbClusterParameterGroupName = "DBClusterParameterGroupName"
        case filters = "Filters"
        case marker = "Marker"
        case maxRecords = "MaxRecords"
        case source = "Source"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let dbClusterParameterGroupName = dbClusterParameterGroupName {
            try container.encode(dbClusterParameterGroupName, forKey: ClientRuntime.Key("DBClusterParameterGroupName"))
        }
        if let filters = filters {
            if !filters.isEmpty {
                var filtersContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Filters"))
                for (index0, filter0) in filters.enumerated() {
                    try filtersContainer.encode(filter0, forKey: ClientRuntime.Key("Filter.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var filtersContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Filters"))
                try filtersContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let marker = marker {
            try container.encode(marker, forKey: ClientRuntime.Key("Marker"))
        }
        if let maxRecords = maxRecords {
            try container.encode(maxRecords, forKey: ClientRuntime.Key("MaxRecords"))
        }
        if let source = source {
            try container.encode(source, forKey: ClientRuntime.Key("Source"))
        }
        try container.encode("DescribeDBClusterParameters", forKey:ClientRuntime.Key("Action"))
        try container.encode("2014-10-31", forKey:ClientRuntime.Key("Version"))
    }
}

extension DescribeDBClusterParametersInput {

    static func urlPathProvider(_ value: DescribeDBClusterParametersInput) -> Swift.String? {
        return "/"
    }
}

///
public struct DescribeDBClusterParametersInput: Swift.Equatable {
    /// The name of a specific DB cluster parameter group to return parameter details for. Constraints:
    ///
    /// * If supplied, must match the name of an existing DBClusterParameterGroup.
    /// This member is required.
    public var dbClusterParameterGroupName: Swift.String?
    /// This parameter isn't currently supported.
    public var filters: [RDSClientTypes.Filter]?
    /// An optional pagination token provided by a previous DescribeDBClusterParameters request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords.
    public var marker: Swift.String?
    /// The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a pagination token called a marker is included in the response so you can retrieve the remaining results. Default: 100 Constraints: Minimum 20, maximum 100.
    public var maxRecords: Swift.Int?
    /// A specific source to return parameters for. Valid Values:
    ///
    /// * customer
    ///
    /// * engine
    ///
    /// * service
    public var source: Swift.String?

    public init(
        dbClusterParameterGroupName: Swift.String? = nil,
        filters: [RDSClientTypes.Filter]? = nil,
        marker: Swift.String? = nil,
        maxRecords: Swift.Int? = nil,
        source: Swift.String? = nil
    )
    {
        self.dbClusterParameterGroupName = dbClusterParameterGroupName
        self.filters = filters
        self.marker = marker
        self.maxRecords = maxRecords
        self.source = source
    }
}

extension DescribeDBClusterParametersOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<DescribeDBClusterParametersOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["DescribeDBClusterParametersResult"]
            var value = DescribeDBClusterParametersOutput()
            value.marker = try reader["Marker"].readIfPresent()
            value.parameters = try reader["Parameters"].readListIfPresent(memberReadingClosure: RDSClientTypes.Parameter.readingClosure, memberNodeInfo: "Parameter", isFlattened: false)
            return value
        }
    }
}

/// Provides details about a DB cluster parameter group including the parameters in the DB cluster parameter group.
public struct DescribeDBClusterParametersOutput: Swift.Equatable {
    /// An optional pagination token provided by a previous DescribeDBClusterParameters request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords.
    public var marker: Swift.String?
    /// Provides a list of parameters for the DB cluster parameter group.
    public var parameters: [RDSClientTypes.Parameter]?

    public init(
        marker: Swift.String? = nil,
        parameters: [RDSClientTypes.Parameter]? = nil
    )
    {
        self.marker = marker
        self.parameters = parameters
    }
}

enum DescribeDBClusterParametersOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "DBParameterGroupNotFound": return try await DBParameterGroupNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension DescribeDBClusterSnapshotAttributesInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dbClusterSnapshotIdentifier = "DBClusterSnapshotIdentifier"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let dbClusterSnapshotIdentifier = dbClusterSnapshotIdentifier {
            try container.encode(dbClusterSnapshotIdentifier, forKey: ClientRuntime.Key("DBClusterSnapshotIdentifier"))
        }
        try container.encode("DescribeDBClusterSnapshotAttributes", forKey:ClientRuntime.Key("Action"))
        try container.encode("2014-10-31", forKey:ClientRuntime.Key("Version"))
    }
}

extension DescribeDBClusterSnapshotAttributesInput {

    static func urlPathProvider(_ value: DescribeDBClusterSnapshotAttributesInput) -> Swift.String? {
        return "/"
    }
}

///
public struct DescribeDBClusterSnapshotAttributesInput: Swift.Equatable {
    /// The identifier for the DB cluster snapshot to describe the attributes for.
    /// This member is required.
    public var dbClusterSnapshotIdentifier: Swift.String?

    public init(
        dbClusterSnapshotIdentifier: Swift.String? = nil
    )
    {
        self.dbClusterSnapshotIdentifier = dbClusterSnapshotIdentifier
    }
}

extension DescribeDBClusterSnapshotAttributesOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<DescribeDBClusterSnapshotAttributesOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["DescribeDBClusterSnapshotAttributesResult"]
            var value = DescribeDBClusterSnapshotAttributesOutput()
            value.dbClusterSnapshotAttributesResult = try reader["DBClusterSnapshotAttributesResult"].readIfPresent(readingClosure: RDSClientTypes.DBClusterSnapshotAttributesResult.readingClosure)
            return value
        }
    }
}

public struct DescribeDBClusterSnapshotAttributesOutput: Swift.Equatable {
    /// Contains the results of a successful call to the DescribeDBClusterSnapshotAttributes API action. Manual DB cluster snapshot attributes are used to authorize other Amazon Web Services accounts to copy or restore a manual DB cluster snapshot. For more information, see the ModifyDBClusterSnapshotAttribute API action.
    public var dbClusterSnapshotAttributesResult: RDSClientTypes.DBClusterSnapshotAttributesResult?

    public init(
        dbClusterSnapshotAttributesResult: RDSClientTypes.DBClusterSnapshotAttributesResult? = nil
    )
    {
        self.dbClusterSnapshotAttributesResult = dbClusterSnapshotAttributesResult
    }
}

enum DescribeDBClusterSnapshotAttributesOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "DBClusterSnapshotNotFoundFault": return try await DBClusterSnapshotNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension DescribeDBClusterSnapshotsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dbClusterIdentifier = "DBClusterIdentifier"
        case dbClusterSnapshotIdentifier = "DBClusterSnapshotIdentifier"
        case dbClusterResourceId = "DbClusterResourceId"
        case filters = "Filters"
        case includePublic = "IncludePublic"
        case includeShared = "IncludeShared"
        case marker = "Marker"
        case maxRecords = "MaxRecords"
        case snapshotType = "SnapshotType"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let dbClusterIdentifier = dbClusterIdentifier {
            try container.encode(dbClusterIdentifier, forKey: ClientRuntime.Key("DBClusterIdentifier"))
        }
        if let dbClusterSnapshotIdentifier = dbClusterSnapshotIdentifier {
            try container.encode(dbClusterSnapshotIdentifier, forKey: ClientRuntime.Key("DBClusterSnapshotIdentifier"))
        }
        if let dbClusterResourceId = dbClusterResourceId {
            try container.encode(dbClusterResourceId, forKey: ClientRuntime.Key("DbClusterResourceId"))
        }
        if let filters = filters {
            if !filters.isEmpty {
                var filtersContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Filters"))
                for (index0, filter0) in filters.enumerated() {
                    try filtersContainer.encode(filter0, forKey: ClientRuntime.Key("Filter.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var filtersContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Filters"))
                try filtersContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let includePublic = includePublic {
            try container.encode(includePublic, forKey: ClientRuntime.Key("IncludePublic"))
        }
        if let includeShared = includeShared {
            try container.encode(includeShared, forKey: ClientRuntime.Key("IncludeShared"))
        }
        if let marker = marker {
            try container.encode(marker, forKey: ClientRuntime.Key("Marker"))
        }
        if let maxRecords = maxRecords {
            try container.encode(maxRecords, forKey: ClientRuntime.Key("MaxRecords"))
        }
        if let snapshotType = snapshotType {
            try container.encode(snapshotType, forKey: ClientRuntime.Key("SnapshotType"))
        }
        try container.encode("DescribeDBClusterSnapshots", forKey:ClientRuntime.Key("Action"))
        try container.encode("2014-10-31", forKey:ClientRuntime.Key("Version"))
    }
}

extension DescribeDBClusterSnapshotsInput {

    static func urlPathProvider(_ value: DescribeDBClusterSnapshotsInput) -> Swift.String? {
        return "/"
    }
}

///
public struct DescribeDBClusterSnapshotsInput: Swift.Equatable {
    /// The ID of the DB cluster to retrieve the list of DB cluster snapshots for. This parameter can't be used in conjunction with the DBClusterSnapshotIdentifier parameter. This parameter isn't case-sensitive. Constraints:
    ///
    /// * If supplied, must match the identifier of an existing DBCluster.
    public var dbClusterIdentifier: Swift.String?
    /// A specific DB cluster resource ID to describe.
    public var dbClusterResourceId: Swift.String?
    /// A specific DB cluster snapshot identifier to describe. This parameter can't be used in conjunction with the DBClusterIdentifier parameter. This value is stored as a lowercase string. Constraints:
    ///
    /// * If supplied, must match the identifier of an existing DBClusterSnapshot.
    ///
    /// * If this identifier is for an automated snapshot, the SnapshotType parameter must also be specified.
    public var dbClusterSnapshotIdentifier: Swift.String?
    /// A filter that specifies one or more DB cluster snapshots to describe. Supported filters:
    ///
    /// * db-cluster-id - Accepts DB cluster identifiers and DB cluster Amazon Resource Names (ARNs).
    ///
    /// * db-cluster-snapshot-id - Accepts DB cluster snapshot identifiers.
    ///
    /// * snapshot-type - Accepts types of DB cluster snapshots.
    ///
    /// * engine - Accepts names of database engines.
    public var filters: [RDSClientTypes.Filter]?
    /// Specifies whether to include manual DB cluster snapshots that are public and can be copied or restored by any Amazon Web Services account. By default, the public snapshots are not included. You can share a manual DB cluster snapshot as public by using the [ModifyDBClusterSnapshotAttribute] API action.
    public var includePublic: Swift.Bool?
    /// Specifies whether to include shared manual DB cluster snapshots from other Amazon Web Services accounts that this Amazon Web Services account has been given permission to copy or restore. By default, these snapshots are not included. You can give an Amazon Web Services account permission to restore a manual DB cluster snapshot from another Amazon Web Services account by the ModifyDBClusterSnapshotAttribute API action.
    public var includeShared: Swift.Bool?
    /// An optional pagination token provided by a previous DescribeDBClusterSnapshots request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords.
    public var marker: Swift.String?
    /// The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a pagination token called a marker is included in the response so you can retrieve the remaining results. Default: 100 Constraints: Minimum 20, maximum 100.
    public var maxRecords: Swift.Int?
    /// The type of DB cluster snapshots to be returned. You can specify one of the following values:
    ///
    /// * automated - Return all DB cluster snapshots that have been automatically taken by Amazon RDS for my Amazon Web Services account.
    ///
    /// * manual - Return all DB cluster snapshots that have been taken by my Amazon Web Services account.
    ///
    /// * shared - Return all manual DB cluster snapshots that have been shared to my Amazon Web Services account.
    ///
    /// * public - Return all DB cluster snapshots that have been marked as public.
    ///
    ///
    /// If you don't specify a SnapshotType value, then both automated and manual DB cluster snapshots are returned. You can include shared DB cluster snapshots with these results by enabling the IncludeShared parameter. You can include public DB cluster snapshots with these results by enabling the IncludePublic parameter. The IncludeShared and IncludePublic parameters don't apply for SnapshotType values of manual or automated. The IncludePublic parameter doesn't apply when SnapshotType is set to shared. The IncludeShared parameter doesn't apply when SnapshotType is set to public.
    public var snapshotType: Swift.String?

    public init(
        dbClusterIdentifier: Swift.String? = nil,
        dbClusterResourceId: Swift.String? = nil,
        dbClusterSnapshotIdentifier: Swift.String? = nil,
        filters: [RDSClientTypes.Filter]? = nil,
        includePublic: Swift.Bool? = nil,
        includeShared: Swift.Bool? = nil,
        marker: Swift.String? = nil,
        maxRecords: Swift.Int? = nil,
        snapshotType: Swift.String? = nil
    )
    {
        self.dbClusterIdentifier = dbClusterIdentifier
        self.dbClusterResourceId = dbClusterResourceId
        self.dbClusterSnapshotIdentifier = dbClusterSnapshotIdentifier
        self.filters = filters
        self.includePublic = includePublic
        self.includeShared = includeShared
        self.marker = marker
        self.maxRecords = maxRecords
        self.snapshotType = snapshotType
    }
}

extension DescribeDBClusterSnapshotsOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<DescribeDBClusterSnapshotsOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["DescribeDBClusterSnapshotsResult"]
            var value = DescribeDBClusterSnapshotsOutput()
            value.dbClusterSnapshots = try reader["DBClusterSnapshots"].readListIfPresent(memberReadingClosure: RDSClientTypes.DBClusterSnapshot.readingClosure, memberNodeInfo: "DBClusterSnapshot", isFlattened: false)
            value.marker = try reader["Marker"].readIfPresent()
            return value
        }
    }
}

/// Provides a list of DB cluster snapshots for the user as the result of a call to the DescribeDBClusterSnapshots action.
public struct DescribeDBClusterSnapshotsOutput: Swift.Equatable {
    /// Provides a list of DB cluster snapshots for the user.
    public var dbClusterSnapshots: [RDSClientTypes.DBClusterSnapshot]?
    /// An optional pagination token provided by a previous DescribeDBClusterSnapshots request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords.
    public var marker: Swift.String?

    public init(
        dbClusterSnapshots: [RDSClientTypes.DBClusterSnapshot]? = nil,
        marker: Swift.String? = nil
    )
    {
        self.dbClusterSnapshots = dbClusterSnapshots
        self.marker = marker
    }
}

enum DescribeDBClusterSnapshotsOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "DBClusterSnapshotNotFoundFault": return try await DBClusterSnapshotNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension DescribeDBClustersInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dbClusterIdentifier = "DBClusterIdentifier"
        case filters = "Filters"
        case includeShared = "IncludeShared"
        case marker = "Marker"
        case maxRecords = "MaxRecords"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let dbClusterIdentifier = dbClusterIdentifier {
            try container.encode(dbClusterIdentifier, forKey: ClientRuntime.Key("DBClusterIdentifier"))
        }
        if let filters = filters {
            if !filters.isEmpty {
                var filtersContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Filters"))
                for (index0, filter0) in filters.enumerated() {
                    try filtersContainer.encode(filter0, forKey: ClientRuntime.Key("Filter.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var filtersContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Filters"))
                try filtersContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let includeShared = includeShared {
            try container.encode(includeShared, forKey: ClientRuntime.Key("IncludeShared"))
        }
        if let marker = marker {
            try container.encode(marker, forKey: ClientRuntime.Key("Marker"))
        }
        if let maxRecords = maxRecords {
            try container.encode(maxRecords, forKey: ClientRuntime.Key("MaxRecords"))
        }
        try container.encode("DescribeDBClusters", forKey:ClientRuntime.Key("Action"))
        try container.encode("2014-10-31", forKey:ClientRuntime.Key("Version"))
    }
}

extension DescribeDBClustersInput {

    static func urlPathProvider(_ value: DescribeDBClustersInput) -> Swift.String? {
        return "/"
    }
}

///
public struct DescribeDBClustersInput: Swift.Equatable {
    /// The user-supplied DB cluster identifier or the Amazon Resource Name (ARN) of the DB cluster. If this parameter is specified, information for only the specific DB cluster is returned. This parameter isn't case-sensitive. Constraints:
    ///
    /// * If supplied, must match an existing DB cluster identifier.
    public var dbClusterIdentifier: Swift.String?
    /// A filter that specifies one or more DB clusters to describe. Supported Filters:
    ///
    /// * clone-group-id - Accepts clone group identifiers. The results list only includes information about the DB clusters associated with these clone groups.
    ///
    /// * db-cluster-id - Accepts DB cluster identifiers and DB cluster Amazon Resource Names (ARNs). The results list only includes information about the DB clusters identified by these ARNs.
    ///
    /// * db-cluster-resource-id - Accepts DB cluster resource identifiers. The results list will only include information about the DB clusters identified by these DB cluster resource identifiers.
    ///
    /// * domain - Accepts Active Directory directory IDs. The results list only includes information about the DB clusters associated with these domains.
    ///
    /// * engine - Accepts engine names. The results list only includes information about the DB clusters for these engines.
    public var filters: [RDSClientTypes.Filter]?
    /// Specifies whether the output includes information about clusters shared from other Amazon Web Services accounts.
    public var includeShared: Swift.Bool?
    /// An optional pagination token provided by a previous DescribeDBClusters request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords.
    public var marker: Swift.String?
    /// The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a pagination token called a marker is included in the response so you can retrieve the remaining results. Default: 100 Constraints: Minimum 20, maximum 100
    public var maxRecords: Swift.Int?

    public init(
        dbClusterIdentifier: Swift.String? = nil,
        filters: [RDSClientTypes.Filter]? = nil,
        includeShared: Swift.Bool? = nil,
        marker: Swift.String? = nil,
        maxRecords: Swift.Int? = nil
    )
    {
        self.dbClusterIdentifier = dbClusterIdentifier
        self.filters = filters
        self.includeShared = includeShared
        self.marker = marker
        self.maxRecords = maxRecords
    }
}

extension DescribeDBClustersOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<DescribeDBClustersOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["DescribeDBClustersResult"]
            var value = DescribeDBClustersOutput()
            value.dbClusters = try reader["DBClusters"].readListIfPresent(memberReadingClosure: RDSClientTypes.DBCluster.readingClosure, memberNodeInfo: "DBCluster", isFlattened: false)
            value.marker = try reader["Marker"].readIfPresent()
            return value
        }
    }
}

/// Contains the result of a successful invocation of the DescribeDBClusters action.
public struct DescribeDBClustersOutput: Swift.Equatable {
    /// Contains a list of DB clusters for the user.
    public var dbClusters: [RDSClientTypes.DBCluster]?
    /// A pagination token that can be used in a later DescribeDBClusters request.
    public var marker: Swift.String?

    public init(
        dbClusters: [RDSClientTypes.DBCluster]? = nil,
        marker: Swift.String? = nil
    )
    {
        self.dbClusters = dbClusters
        self.marker = marker
    }
}

enum DescribeDBClustersOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "DBClusterNotFoundFault": return try await DBClusterNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension DescribeDBEngineVersionsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dbParameterGroupFamily = "DBParameterGroupFamily"
        case defaultOnly = "DefaultOnly"
        case engine = "Engine"
        case engineVersion = "EngineVersion"
        case filters = "Filters"
        case includeAll = "IncludeAll"
        case listSupportedCharacterSets = "ListSupportedCharacterSets"
        case listSupportedTimezones = "ListSupportedTimezones"
        case marker = "Marker"
        case maxRecords = "MaxRecords"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let dbParameterGroupFamily = dbParameterGroupFamily {
            try container.encode(dbParameterGroupFamily, forKey: ClientRuntime.Key("DBParameterGroupFamily"))
        }
        if let defaultOnly = defaultOnly {
            try container.encode(defaultOnly, forKey: ClientRuntime.Key("DefaultOnly"))
        }
        if let engine = engine {
            try container.encode(engine, forKey: ClientRuntime.Key("Engine"))
        }
        if let engineVersion = engineVersion {
            try container.encode(engineVersion, forKey: ClientRuntime.Key("EngineVersion"))
        }
        if let filters = filters {
            if !filters.isEmpty {
                var filtersContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Filters"))
                for (index0, filter0) in filters.enumerated() {
                    try filtersContainer.encode(filter0, forKey: ClientRuntime.Key("Filter.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var filtersContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Filters"))
                try filtersContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let includeAll = includeAll {
            try container.encode(includeAll, forKey: ClientRuntime.Key("IncludeAll"))
        }
        if let listSupportedCharacterSets = listSupportedCharacterSets {
            try container.encode(listSupportedCharacterSets, forKey: ClientRuntime.Key("ListSupportedCharacterSets"))
        }
        if let listSupportedTimezones = listSupportedTimezones {
            try container.encode(listSupportedTimezones, forKey: ClientRuntime.Key("ListSupportedTimezones"))
        }
        if let marker = marker {
            try container.encode(marker, forKey: ClientRuntime.Key("Marker"))
        }
        if let maxRecords = maxRecords {
            try container.encode(maxRecords, forKey: ClientRuntime.Key("MaxRecords"))
        }
        try container.encode("DescribeDBEngineVersions", forKey:ClientRuntime.Key("Action"))
        try container.encode("2014-10-31", forKey:ClientRuntime.Key("Version"))
    }
}

extension DescribeDBEngineVersionsInput {

    static func urlPathProvider(_ value: DescribeDBEngineVersionsInput) -> Swift.String? {
        return "/"
    }
}

public struct DescribeDBEngineVersionsInput: Swift.Equatable {
    /// The name of a specific DB parameter group family to return details for. Constraints:
    ///
    /// * If supplied, must match an existing DB parameter group family.
    public var dbParameterGroupFamily: Swift.String?
    /// Specifies whether to return only the default version of the specified engine or the engine and major version combination.
    public var defaultOnly: Swift.Bool?
    /// The database engine to return version details for. Valid Values:
    ///
    /// * aurora-mysql
    ///
    /// * aurora-postgresql
    ///
    /// * custom-oracle-ee
    ///
    /// * db2-ae
    ///
    /// * db2-se
    ///
    /// * mariadb
    ///
    /// * mysql
    ///
    /// * oracle-ee
    ///
    /// * oracle-ee-cdb
    ///
    /// * oracle-se2
    ///
    /// * oracle-se2-cdb
    ///
    /// * postgres
    ///
    /// * sqlserver-ee
    ///
    /// * sqlserver-se
    ///
    /// * sqlserver-ex
    ///
    /// * sqlserver-web
    public var engine: Swift.String?
    /// A specific database engine version to return details for. Example: 5.1.49
    public var engineVersion: Swift.String?
    /// A filter that specifies one or more DB engine versions to describe. Supported filters:
    ///
    /// * db-parameter-group-family - Accepts parameter groups family names. The results list only includes information about the DB engine versions for these parameter group families.
    ///
    /// * engine - Accepts engine names. The results list only includes information about the DB engine versions for these engines.
    ///
    /// * engine-mode - Accepts DB engine modes. The results list only includes information about the DB engine versions for these engine modes. Valid DB engine modes are the following:
    ///
    /// * global
    ///
    /// * multimaster
    ///
    /// * parallelquery
    ///
    /// * provisioned
    ///
    /// * serverless
    ///
    ///
    ///
    ///
    /// * engine-version - Accepts engine versions. The results list only includes information about the DB engine versions for these engine versions.
    ///
    /// * status - Accepts engine version statuses. The results list only includes information about the DB engine versions for these statuses. Valid statuses are the following:
    ///
    /// * available
    ///
    /// * deprecated
    public var filters: [RDSClientTypes.Filter]?
    /// Specifies whether to also list the engine versions that aren't available. The default is to list only available engine versions.
    public var includeAll: Swift.Bool?
    /// Specifies whether to list the supported character sets for each engine version. If this parameter is enabled and the requested engine supports the CharacterSetName parameter for CreateDBInstance, the response includes a list of supported character sets for each engine version. For RDS Custom, the default is not to list supported character sets. If you enable this parameter, RDS Custom returns no results.
    public var listSupportedCharacterSets: Swift.Bool?
    /// Specifies whether to list the supported time zones for each engine version. If this parameter is enabled and the requested engine supports the TimeZone parameter for CreateDBInstance, the response includes a list of supported time zones for each engine version. For RDS Custom, the default is not to list supported time zones. If you enable this parameter, RDS Custom returns no results.
    public var listSupportedTimezones: Swift.Bool?
    /// An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords.
    public var marker: Swift.String?
    /// The maximum number of records to include in the response. If more than the MaxRecords value is available, a pagination token called a marker is included in the response so you can retrieve the remaining results. Default: 100 Constraints: Minimum 20, maximum 100.
    public var maxRecords: Swift.Int?

    public init(
        dbParameterGroupFamily: Swift.String? = nil,
        defaultOnly: Swift.Bool? = nil,
        engine: Swift.String? = nil,
        engineVersion: Swift.String? = nil,
        filters: [RDSClientTypes.Filter]? = nil,
        includeAll: Swift.Bool? = nil,
        listSupportedCharacterSets: Swift.Bool? = nil,
        listSupportedTimezones: Swift.Bool? = nil,
        marker: Swift.String? = nil,
        maxRecords: Swift.Int? = nil
    )
    {
        self.dbParameterGroupFamily = dbParameterGroupFamily
        self.defaultOnly = defaultOnly
        self.engine = engine
        self.engineVersion = engineVersion
        self.filters = filters
        self.includeAll = includeAll
        self.listSupportedCharacterSets = listSupportedCharacterSets
        self.listSupportedTimezones = listSupportedTimezones
        self.marker = marker
        self.maxRecords = maxRecords
    }
}

extension DescribeDBEngineVersionsOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<DescribeDBEngineVersionsOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["DescribeDBEngineVersionsResult"]
            var value = DescribeDBEngineVersionsOutput()
            value.dbEngineVersions = try reader["DBEngineVersions"].readListIfPresent(memberReadingClosure: RDSClientTypes.DBEngineVersion.readingClosure, memberNodeInfo: "DBEngineVersion", isFlattened: false)
            value.marker = try reader["Marker"].readIfPresent()
            return value
        }
    }
}

/// Contains the result of a successful invocation of the DescribeDBEngineVersions action.
public struct DescribeDBEngineVersionsOutput: Swift.Equatable {
    /// A list of DBEngineVersion elements.
    public var dbEngineVersions: [RDSClientTypes.DBEngineVersion]?
    /// An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords.
    public var marker: Swift.String?

    public init(
        dbEngineVersions: [RDSClientTypes.DBEngineVersion]? = nil,
        marker: Swift.String? = nil
    )
    {
        self.dbEngineVersions = dbEngineVersions
        self.marker = marker
    }
}

enum DescribeDBEngineVersionsOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension DescribeDBInstanceAutomatedBackupsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dbInstanceAutomatedBackupsArn = "DBInstanceAutomatedBackupsArn"
        case dbInstanceIdentifier = "DBInstanceIdentifier"
        case dbiResourceId = "DbiResourceId"
        case filters = "Filters"
        case marker = "Marker"
        case maxRecords = "MaxRecords"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let dbInstanceAutomatedBackupsArn = dbInstanceAutomatedBackupsArn {
            try container.encode(dbInstanceAutomatedBackupsArn, forKey: ClientRuntime.Key("DBInstanceAutomatedBackupsArn"))
        }
        if let dbInstanceIdentifier = dbInstanceIdentifier {
            try container.encode(dbInstanceIdentifier, forKey: ClientRuntime.Key("DBInstanceIdentifier"))
        }
        if let dbiResourceId = dbiResourceId {
            try container.encode(dbiResourceId, forKey: ClientRuntime.Key("DbiResourceId"))
        }
        if let filters = filters {
            if !filters.isEmpty {
                var filtersContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Filters"))
                for (index0, filter0) in filters.enumerated() {
                    try filtersContainer.encode(filter0, forKey: ClientRuntime.Key("Filter.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var filtersContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Filters"))
                try filtersContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let marker = marker {
            try container.encode(marker, forKey: ClientRuntime.Key("Marker"))
        }
        if let maxRecords = maxRecords {
            try container.encode(maxRecords, forKey: ClientRuntime.Key("MaxRecords"))
        }
        try container.encode("DescribeDBInstanceAutomatedBackups", forKey:ClientRuntime.Key("Action"))
        try container.encode("2014-10-31", forKey:ClientRuntime.Key("Version"))
    }
}

extension DescribeDBInstanceAutomatedBackupsInput {

    static func urlPathProvider(_ value: DescribeDBInstanceAutomatedBackupsInput) -> Swift.String? {
        return "/"
    }
}

/// Parameter input for DescribeDBInstanceAutomatedBackups.
public struct DescribeDBInstanceAutomatedBackupsInput: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the replicated automated backups, for example, arn:aws:rds:us-east-1:123456789012:auto-backup:ab-L2IJCEXJP7XQ7HOJ4SIEXAMPLE. This setting doesn't apply to RDS Custom.
    public var dbInstanceAutomatedBackupsArn: Swift.String?
    /// (Optional) The user-supplied instance identifier. If this parameter is specified, it must match the identifier of an existing DB instance. It returns information from the specific DB instance's automated backup. This parameter isn't case-sensitive.
    public var dbInstanceIdentifier: Swift.String?
    /// The resource ID of the DB instance that is the source of the automated backup. This parameter isn't case-sensitive.
    public var dbiResourceId: Swift.String?
    /// A filter that specifies which resources to return based on status. Supported filters are the following:
    ///
    /// * status
    ///
    /// * active - Automated backups for current instances.
    ///
    /// * creating - Automated backups that are waiting for the first automated snapshot to be available.
    ///
    /// * retained - Automated backups for deleted instances and after backup replication is stopped.
    ///
    ///
    ///
    ///
    /// * db-instance-id - Accepts DB instance identifiers and Amazon Resource Names (ARNs). The results list includes only information about the DB instance automated backups identified by these ARNs.
    ///
    /// * dbi-resource-id - Accepts DB resource identifiers and Amazon Resource Names (ARNs). The results list includes only information about the DB instance resources identified by these ARNs.
    ///
    ///
    /// Returns all resources by default. The status for each resource is specified in the response.
    public var filters: [RDSClientTypes.Filter]?
    /// The pagination token provided in the previous request. If this parameter is specified the response includes only records beyond the marker, up to MaxRecords.
    public var marker: Swift.String?
    /// The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a pagination token called a marker is included in the response so that you can retrieve the remaining results.
    public var maxRecords: Swift.Int?

    public init(
        dbInstanceAutomatedBackupsArn: Swift.String? = nil,
        dbInstanceIdentifier: Swift.String? = nil,
        dbiResourceId: Swift.String? = nil,
        filters: [RDSClientTypes.Filter]? = nil,
        marker: Swift.String? = nil,
        maxRecords: Swift.Int? = nil
    )
    {
        self.dbInstanceAutomatedBackupsArn = dbInstanceAutomatedBackupsArn
        self.dbInstanceIdentifier = dbInstanceIdentifier
        self.dbiResourceId = dbiResourceId
        self.filters = filters
        self.marker = marker
        self.maxRecords = maxRecords
    }
}

extension DescribeDBInstanceAutomatedBackupsOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<DescribeDBInstanceAutomatedBackupsOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["DescribeDBInstanceAutomatedBackupsResult"]
            var value = DescribeDBInstanceAutomatedBackupsOutput()
            value.dbInstanceAutomatedBackups = try reader["DBInstanceAutomatedBackups"].readListIfPresent(memberReadingClosure: RDSClientTypes.DBInstanceAutomatedBackup.readingClosure, memberNodeInfo: "DBInstanceAutomatedBackup", isFlattened: false)
            value.marker = try reader["Marker"].readIfPresent()
            return value
        }
    }
}

/// Contains the result of a successful invocation of the DescribeDBInstanceAutomatedBackups action.
public struct DescribeDBInstanceAutomatedBackupsOutput: Swift.Equatable {
    /// A list of DBInstanceAutomatedBackup instances.
    public var dbInstanceAutomatedBackups: [RDSClientTypes.DBInstanceAutomatedBackup]?
    /// An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords.
    public var marker: Swift.String?

    public init(
        dbInstanceAutomatedBackups: [RDSClientTypes.DBInstanceAutomatedBackup]? = nil,
        marker: Swift.String? = nil
    )
    {
        self.dbInstanceAutomatedBackups = dbInstanceAutomatedBackups
        self.marker = marker
    }
}

enum DescribeDBInstanceAutomatedBackupsOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "DBInstanceAutomatedBackupNotFound": return try await DBInstanceAutomatedBackupNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension DescribeDBInstancesInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dbInstanceIdentifier = "DBInstanceIdentifier"
        case filters = "Filters"
        case marker = "Marker"
        case maxRecords = "MaxRecords"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let dbInstanceIdentifier = dbInstanceIdentifier {
            try container.encode(dbInstanceIdentifier, forKey: ClientRuntime.Key("DBInstanceIdentifier"))
        }
        if let filters = filters {
            if !filters.isEmpty {
                var filtersContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Filters"))
                for (index0, filter0) in filters.enumerated() {
                    try filtersContainer.encode(filter0, forKey: ClientRuntime.Key("Filter.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var filtersContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Filters"))
                try filtersContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let marker = marker {
            try container.encode(marker, forKey: ClientRuntime.Key("Marker"))
        }
        if let maxRecords = maxRecords {
            try container.encode(maxRecords, forKey: ClientRuntime.Key("MaxRecords"))
        }
        try container.encode("DescribeDBInstances", forKey:ClientRuntime.Key("Action"))
        try container.encode("2014-10-31", forKey:ClientRuntime.Key("Version"))
    }
}

extension DescribeDBInstancesInput {

    static func urlPathProvider(_ value: DescribeDBInstancesInput) -> Swift.String? {
        return "/"
    }
}

///
public struct DescribeDBInstancesInput: Swift.Equatable {
    /// The user-supplied instance identifier or the Amazon Resource Name (ARN) of the DB instance. If this parameter is specified, information from only the specific DB instance is returned. This parameter isn't case-sensitive. Constraints:
    ///
    /// * If supplied, must match the identifier of an existing DB instance.
    public var dbInstanceIdentifier: Swift.String?
    /// A filter that specifies one or more DB instances to describe. Supported Filters:
    ///
    /// * db-cluster-id - Accepts DB cluster identifiers and DB cluster Amazon Resource Names (ARNs). The results list only includes information about the DB instances associated with the DB clusters identified by these ARNs.
    ///
    /// * db-instance-id - Accepts DB instance identifiers and DB instance Amazon Resource Names (ARNs). The results list only includes information about the DB instances identified by these ARNs.
    ///
    /// * dbi-resource-id - Accepts DB instance resource identifiers. The results list only includes information about the DB instances identified by these DB instance resource identifiers.
    ///
    /// * domain - Accepts Active Directory directory IDs. The results list only includes information about the DB instances associated with these domains.
    ///
    /// * engine - Accepts engine names. The results list only includes information about the DB instances for these engines.
    public var filters: [RDSClientTypes.Filter]?
    /// An optional pagination token provided by a previous DescribeDBInstances request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords.
    public var marker: Swift.String?
    /// The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. Default: 100 Constraints: Minimum 20, maximum 100.
    public var maxRecords: Swift.Int?

    public init(
        dbInstanceIdentifier: Swift.String? = nil,
        filters: [RDSClientTypes.Filter]? = nil,
        marker: Swift.String? = nil,
        maxRecords: Swift.Int? = nil
    )
    {
        self.dbInstanceIdentifier = dbInstanceIdentifier
        self.filters = filters
        self.marker = marker
        self.maxRecords = maxRecords
    }
}

extension DescribeDBInstancesOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<DescribeDBInstancesOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["DescribeDBInstancesResult"]
            var value = DescribeDBInstancesOutput()
            value.dbInstances = try reader["DBInstances"].readListIfPresent(memberReadingClosure: RDSClientTypes.DBInstance.readingClosure, memberNodeInfo: "DBInstance", isFlattened: false)
            value.marker = try reader["Marker"].readIfPresent()
            return value
        }
    }
}

/// Contains the result of a successful invocation of the DescribeDBInstances action.
public struct DescribeDBInstancesOutput: Swift.Equatable {
    /// A list of DBInstance instances.
    public var dbInstances: [RDSClientTypes.DBInstance]?
    /// An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords .
    public var marker: Swift.String?

    public init(
        dbInstances: [RDSClientTypes.DBInstance]? = nil,
        marker: Swift.String? = nil
    )
    {
        self.dbInstances = dbInstances
        self.marker = marker
    }
}

enum DescribeDBInstancesOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "DBInstanceNotFound": return try await DBInstanceNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension RDSClientTypes.DescribeDBLogFilesDetails: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case lastWritten = "LastWritten"
        case logFileName = "LogFileName"
        case size = "Size"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let lastWritten = lastWritten {
            try container.encode(lastWritten, forKey: ClientRuntime.Key("LastWritten"))
        }
        if let logFileName = logFileName {
            try container.encode(logFileName, forKey: ClientRuntime.Key("LogFileName"))
        }
        if let size = size {
            try container.encode(size, forKey: ClientRuntime.Key("Size"))
        }
    }

    static var readingClosure: SmithyReadWrite.ReadingClosure<RDSClientTypes.DescribeDBLogFilesDetails, SmithyXML.Reader> {
        return { reader in
            guard reader.content != nil else { return nil }
            var value = RDSClientTypes.DescribeDBLogFilesDetails()
            value.logFileName = try reader["LogFileName"].readIfPresent()
            value.lastWritten = try reader["LastWritten"].readIfPresent()
            value.size = try reader["Size"].readIfPresent()
            return value
        }
    }
}

extension RDSClientTypes {
    /// This data type is used as a response element to DescribeDBLogFiles.
    public struct DescribeDBLogFilesDetails: Swift.Equatable {
        /// A POSIX timestamp when the last log entry was written.
        public var lastWritten: Swift.Int?
        /// The name of the log file for the specified DB instance.
        public var logFileName: Swift.String?
        /// The size, in bytes, of the log file for the specified DB instance.
        public var size: Swift.Int?

        public init(
            lastWritten: Swift.Int? = nil,
            logFileName: Swift.String? = nil,
            size: Swift.Int? = nil
        )
        {
            self.lastWritten = lastWritten
            self.logFileName = logFileName
            self.size = size
        }
    }

}

extension DescribeDBLogFilesInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dbInstanceIdentifier = "DBInstanceIdentifier"
        case fileLastWritten = "FileLastWritten"
        case fileSize = "FileSize"
        case filenameContains = "FilenameContains"
        case filters = "Filters"
        case marker = "Marker"
        case maxRecords = "MaxRecords"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let dbInstanceIdentifier = dbInstanceIdentifier {
            try container.encode(dbInstanceIdentifier, forKey: ClientRuntime.Key("DBInstanceIdentifier"))
        }
        if let fileLastWritten = fileLastWritten {
            try container.encode(fileLastWritten, forKey: ClientRuntime.Key("FileLastWritten"))
        }
        if let fileSize = fileSize {
            try container.encode(fileSize, forKey: ClientRuntime.Key("FileSize"))
        }
        if let filenameContains = filenameContains {
            try container.encode(filenameContains, forKey: ClientRuntime.Key("FilenameContains"))
        }
        if let filters = filters {
            if !filters.isEmpty {
                var filtersContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Filters"))
                for (index0, filter0) in filters.enumerated() {
                    try filtersContainer.encode(filter0, forKey: ClientRuntime.Key("Filter.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var filtersContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Filters"))
                try filtersContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let marker = marker {
            try container.encode(marker, forKey: ClientRuntime.Key("Marker"))
        }
        if let maxRecords = maxRecords {
            try container.encode(maxRecords, forKey: ClientRuntime.Key("MaxRecords"))
        }
        try container.encode("DescribeDBLogFiles", forKey:ClientRuntime.Key("Action"))
        try container.encode("2014-10-31", forKey:ClientRuntime.Key("Version"))
    }
}

extension DescribeDBLogFilesInput {

    static func urlPathProvider(_ value: DescribeDBLogFilesInput) -> Swift.String? {
        return "/"
    }
}

///
public struct DescribeDBLogFilesInput: Swift.Equatable {
    /// The customer-assigned name of the DB instance that contains the log files you want to list. Constraints:
    ///
    /// * Must match the identifier of an existing DBInstance.
    /// This member is required.
    public var dbInstanceIdentifier: Swift.String?
    /// Filters the available log files for files written since the specified date, in POSIX timestamp format with milliseconds.
    public var fileLastWritten: Swift.Int?
    /// Filters the available log files for files larger than the specified size.
    public var fileSize: Swift.Int?
    /// Filters the available log files for log file names that contain the specified string.
    public var filenameContains: Swift.String?
    /// This parameter isn't currently supported.
    public var filters: [RDSClientTypes.Filter]?
    /// The pagination token provided in the previous request. If this parameter is specified the response includes only records beyond the marker, up to MaxRecords.
    public var marker: Swift.String?
    /// The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a pagination token called a marker is included in the response so you can retrieve the remaining results.
    public var maxRecords: Swift.Int?

    public init(
        dbInstanceIdentifier: Swift.String? = nil,
        fileLastWritten: Swift.Int? = nil,
        fileSize: Swift.Int? = nil,
        filenameContains: Swift.String? = nil,
        filters: [RDSClientTypes.Filter]? = nil,
        marker: Swift.String? = nil,
        maxRecords: Swift.Int? = nil
    )
    {
        self.dbInstanceIdentifier = dbInstanceIdentifier
        self.fileLastWritten = fileLastWritten
        self.fileSize = fileSize
        self.filenameContains = filenameContains
        self.filters = filters
        self.marker = marker
        self.maxRecords = maxRecords
    }
}

extension DescribeDBLogFilesOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<DescribeDBLogFilesOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["DescribeDBLogFilesResult"]
            var value = DescribeDBLogFilesOutput()
            value.describeDBLogFiles = try reader["DescribeDBLogFiles"].readListIfPresent(memberReadingClosure: RDSClientTypes.DescribeDBLogFilesDetails.readingClosure, memberNodeInfo: "DescribeDBLogFilesDetails", isFlattened: false)
            value.marker = try reader["Marker"].readIfPresent()
            return value
        }
    }
}

/// The response from a call to DescribeDBLogFiles.
public struct DescribeDBLogFilesOutput: Swift.Equatable {
    /// The DB log files returned.
    public var describeDBLogFiles: [RDSClientTypes.DescribeDBLogFilesDetails]?
    /// A pagination token that can be used in a later DescribeDBLogFiles request.
    public var marker: Swift.String?

    public init(
        describeDBLogFiles: [RDSClientTypes.DescribeDBLogFilesDetails]? = nil,
        marker: Swift.String? = nil
    )
    {
        self.describeDBLogFiles = describeDBLogFiles
        self.marker = marker
    }
}

enum DescribeDBLogFilesOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "DBInstanceNotFound": return try await DBInstanceNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension DescribeDBParameterGroupsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dbParameterGroupName = "DBParameterGroupName"
        case filters = "Filters"
        case marker = "Marker"
        case maxRecords = "MaxRecords"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let dbParameterGroupName = dbParameterGroupName {
            try container.encode(dbParameterGroupName, forKey: ClientRuntime.Key("DBParameterGroupName"))
        }
        if let filters = filters {
            if !filters.isEmpty {
                var filtersContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Filters"))
                for (index0, filter0) in filters.enumerated() {
                    try filtersContainer.encode(filter0, forKey: ClientRuntime.Key("Filter.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var filtersContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Filters"))
                try filtersContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let marker = marker {
            try container.encode(marker, forKey: ClientRuntime.Key("Marker"))
        }
        if let maxRecords = maxRecords {
            try container.encode(maxRecords, forKey: ClientRuntime.Key("MaxRecords"))
        }
        try container.encode("DescribeDBParameterGroups", forKey:ClientRuntime.Key("Action"))
        try container.encode("2014-10-31", forKey:ClientRuntime.Key("Version"))
    }
}

extension DescribeDBParameterGroupsInput {

    static func urlPathProvider(_ value: DescribeDBParameterGroupsInput) -> Swift.String? {
        return "/"
    }
}

///
public struct DescribeDBParameterGroupsInput: Swift.Equatable {
    /// The name of a specific DB parameter group to return details for. Constraints:
    ///
    /// * If supplied, must match the name of an existing DBClusterParameterGroup.
    public var dbParameterGroupName: Swift.String?
    /// This parameter isn't currently supported.
    public var filters: [RDSClientTypes.Filter]?
    /// An optional pagination token provided by a previous DescribeDBParameterGroups request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords.
    public var marker: Swift.String?
    /// The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. Default: 100 Constraints: Minimum 20, maximum 100.
    public var maxRecords: Swift.Int?

    public init(
        dbParameterGroupName: Swift.String? = nil,
        filters: [RDSClientTypes.Filter]? = nil,
        marker: Swift.String? = nil,
        maxRecords: Swift.Int? = nil
    )
    {
        self.dbParameterGroupName = dbParameterGroupName
        self.filters = filters
        self.marker = marker
        self.maxRecords = maxRecords
    }
}

extension DescribeDBParameterGroupsOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<DescribeDBParameterGroupsOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["DescribeDBParameterGroupsResult"]
            var value = DescribeDBParameterGroupsOutput()
            value.dbParameterGroups = try reader["DBParameterGroups"].readListIfPresent(memberReadingClosure: RDSClientTypes.DBParameterGroup.readingClosure, memberNodeInfo: "DBParameterGroup", isFlattened: false)
            value.marker = try reader["Marker"].readIfPresent()
            return value
        }
    }
}

/// Contains the result of a successful invocation of the DescribeDBParameterGroups action.
public struct DescribeDBParameterGroupsOutput: Swift.Equatable {
    /// A list of DBParameterGroup instances.
    public var dbParameterGroups: [RDSClientTypes.DBParameterGroup]?
    /// An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords.
    public var marker: Swift.String?

    public init(
        dbParameterGroups: [RDSClientTypes.DBParameterGroup]? = nil,
        marker: Swift.String? = nil
    )
    {
        self.dbParameterGroups = dbParameterGroups
        self.marker = marker
    }
}

enum DescribeDBParameterGroupsOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "DBParameterGroupNotFound": return try await DBParameterGroupNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension DescribeDBParametersInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dbParameterGroupName = "DBParameterGroupName"
        case filters = "Filters"
        case marker = "Marker"
        case maxRecords = "MaxRecords"
        case source = "Source"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let dbParameterGroupName = dbParameterGroupName {
            try container.encode(dbParameterGroupName, forKey: ClientRuntime.Key("DBParameterGroupName"))
        }
        if let filters = filters {
            if !filters.isEmpty {
                var filtersContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Filters"))
                for (index0, filter0) in filters.enumerated() {
                    try filtersContainer.encode(filter0, forKey: ClientRuntime.Key("Filter.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var filtersContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Filters"))
                try filtersContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let marker = marker {
            try container.encode(marker, forKey: ClientRuntime.Key("Marker"))
        }
        if let maxRecords = maxRecords {
            try container.encode(maxRecords, forKey: ClientRuntime.Key("MaxRecords"))
        }
        if let source = source {
            try container.encode(source, forKey: ClientRuntime.Key("Source"))
        }
        try container.encode("DescribeDBParameters", forKey:ClientRuntime.Key("Action"))
        try container.encode("2014-10-31", forKey:ClientRuntime.Key("Version"))
    }
}

extension DescribeDBParametersInput {

    static func urlPathProvider(_ value: DescribeDBParametersInput) -> Swift.String? {
        return "/"
    }
}

public struct DescribeDBParametersInput: Swift.Equatable {
    /// The name of a specific DB parameter group to return details for. Constraints:
    ///
    /// * If supplied, must match the name of an existing DBParameterGroup.
    /// This member is required.
    public var dbParameterGroupName: Swift.String?
    /// This parameter isn't currently supported.
    public var filters: [RDSClientTypes.Filter]?
    /// An optional pagination token provided by a previous DescribeDBParameters request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords.
    public var marker: Swift.String?
    /// The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. Default: 100 Constraints: Minimum 20, maximum 100.
    public var maxRecords: Swift.Int?
    /// The parameter types to return. Default: All parameter types returned Valid Values: user | system | engine-default
    public var source: Swift.String?

    public init(
        dbParameterGroupName: Swift.String? = nil,
        filters: [RDSClientTypes.Filter]? = nil,
        marker: Swift.String? = nil,
        maxRecords: Swift.Int? = nil,
        source: Swift.String? = nil
    )
    {
        self.dbParameterGroupName = dbParameterGroupName
        self.filters = filters
        self.marker = marker
        self.maxRecords = maxRecords
        self.source = source
    }
}

extension DescribeDBParametersOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<DescribeDBParametersOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["DescribeDBParametersResult"]
            var value = DescribeDBParametersOutput()
            value.marker = try reader["Marker"].readIfPresent()
            value.parameters = try reader["Parameters"].readListIfPresent(memberReadingClosure: RDSClientTypes.Parameter.readingClosure, memberNodeInfo: "Parameter", isFlattened: false)
            return value
        }
    }
}

/// Contains the result of a successful invocation of the DescribeDBParameters action.
public struct DescribeDBParametersOutput: Swift.Equatable {
    /// An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords.
    public var marker: Swift.String?
    /// A list of Parameter values.
    public var parameters: [RDSClientTypes.Parameter]?

    public init(
        marker: Swift.String? = nil,
        parameters: [RDSClientTypes.Parameter]? = nil
    )
    {
        self.marker = marker
        self.parameters = parameters
    }
}

enum DescribeDBParametersOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "DBParameterGroupNotFound": return try await DBParameterGroupNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension DescribeDBProxiesInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dbProxyName = "DBProxyName"
        case filters = "Filters"
        case marker = "Marker"
        case maxRecords = "MaxRecords"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let dbProxyName = dbProxyName {
            try container.encode(dbProxyName, forKey: ClientRuntime.Key("DBProxyName"))
        }
        if let filters = filters {
            if !filters.isEmpty {
                var filtersContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Filters"))
                for (index0, filter0) in filters.enumerated() {
                    try filtersContainer.encode(filter0, forKey: ClientRuntime.Key("Filter.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var filtersContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Filters"))
                try filtersContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let marker = marker {
            try container.encode(marker, forKey: ClientRuntime.Key("Marker"))
        }
        if let maxRecords = maxRecords {
            try container.encode(maxRecords, forKey: ClientRuntime.Key("MaxRecords"))
        }
        try container.encode("DescribeDBProxies", forKey:ClientRuntime.Key("Action"))
        try container.encode("2014-10-31", forKey:ClientRuntime.Key("Version"))
    }
}

extension DescribeDBProxiesInput {

    static func urlPathProvider(_ value: DescribeDBProxiesInput) -> Swift.String? {
        return "/"
    }
}

public struct DescribeDBProxiesInput: Swift.Equatable {
    /// The name of the DB proxy. If you omit this parameter, the output includes information about all DB proxies owned by your Amazon Web Services account ID.
    public var dbProxyName: Swift.String?
    /// This parameter is not currently supported.
    public var filters: [RDSClientTypes.Filter]?
    /// An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords.
    public var marker: Swift.String?
    /// The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. Default: 100 Constraints: Minimum 20, maximum 100.
    public var maxRecords: Swift.Int?

    public init(
        dbProxyName: Swift.String? = nil,
        filters: [RDSClientTypes.Filter]? = nil,
        marker: Swift.String? = nil,
        maxRecords: Swift.Int? = nil
    )
    {
        self.dbProxyName = dbProxyName
        self.filters = filters
        self.marker = marker
        self.maxRecords = maxRecords
    }
}

extension DescribeDBProxiesOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<DescribeDBProxiesOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["DescribeDBProxiesResult"]
            var value = DescribeDBProxiesOutput()
            value.dbProxies = try reader["DBProxies"].readListIfPresent(memberReadingClosure: RDSClientTypes.DBProxy.readingClosure, memberNodeInfo: "member", isFlattened: false)
            value.marker = try reader["Marker"].readIfPresent()
            return value
        }
    }
}

public struct DescribeDBProxiesOutput: Swift.Equatable {
    /// A return value representing an arbitrary number of DBProxy data structures.
    public var dbProxies: [RDSClientTypes.DBProxy]?
    /// An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords.
    public var marker: Swift.String?

    public init(
        dbProxies: [RDSClientTypes.DBProxy]? = nil,
        marker: Swift.String? = nil
    )
    {
        self.dbProxies = dbProxies
        self.marker = marker
    }
}

enum DescribeDBProxiesOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "DBProxyNotFoundFault": return try await DBProxyNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension DescribeDBProxyEndpointsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dbProxyEndpointName = "DBProxyEndpointName"
        case dbProxyName = "DBProxyName"
        case filters = "Filters"
        case marker = "Marker"
        case maxRecords = "MaxRecords"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let dbProxyEndpointName = dbProxyEndpointName {
            try container.encode(dbProxyEndpointName, forKey: ClientRuntime.Key("DBProxyEndpointName"))
        }
        if let dbProxyName = dbProxyName {
            try container.encode(dbProxyName, forKey: ClientRuntime.Key("DBProxyName"))
        }
        if let filters = filters {
            if !filters.isEmpty {
                var filtersContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Filters"))
                for (index0, filter0) in filters.enumerated() {
                    try filtersContainer.encode(filter0, forKey: ClientRuntime.Key("Filter.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var filtersContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Filters"))
                try filtersContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let marker = marker {
            try container.encode(marker, forKey: ClientRuntime.Key("Marker"))
        }
        if let maxRecords = maxRecords {
            try container.encode(maxRecords, forKey: ClientRuntime.Key("MaxRecords"))
        }
        try container.encode("DescribeDBProxyEndpoints", forKey:ClientRuntime.Key("Action"))
        try container.encode("2014-10-31", forKey:ClientRuntime.Key("Version"))
    }
}

extension DescribeDBProxyEndpointsInput {

    static func urlPathProvider(_ value: DescribeDBProxyEndpointsInput) -> Swift.String? {
        return "/"
    }
}

public struct DescribeDBProxyEndpointsInput: Swift.Equatable {
    /// The name of a DB proxy endpoint to describe. If you omit this parameter, the output includes information about all DB proxy endpoints associated with the specified proxy.
    public var dbProxyEndpointName: Swift.String?
    /// The name of the DB proxy whose endpoints you want to describe. If you omit this parameter, the output includes information about all DB proxy endpoints associated with all your DB proxies.
    public var dbProxyName: Swift.String?
    /// This parameter is not currently supported.
    public var filters: [RDSClientTypes.Filter]?
    /// An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords.
    public var marker: Swift.String?
    /// The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. Default: 100 Constraints: Minimum 20, maximum 100.
    public var maxRecords: Swift.Int?

    public init(
        dbProxyEndpointName: Swift.String? = nil,
        dbProxyName: Swift.String? = nil,
        filters: [RDSClientTypes.Filter]? = nil,
        marker: Swift.String? = nil,
        maxRecords: Swift.Int? = nil
    )
    {
        self.dbProxyEndpointName = dbProxyEndpointName
        self.dbProxyName = dbProxyName
        self.filters = filters
        self.marker = marker
        self.maxRecords = maxRecords
    }
}

extension DescribeDBProxyEndpointsOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<DescribeDBProxyEndpointsOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["DescribeDBProxyEndpointsResult"]
            var value = DescribeDBProxyEndpointsOutput()
            value.dbProxyEndpoints = try reader["DBProxyEndpoints"].readListIfPresent(memberReadingClosure: RDSClientTypes.DBProxyEndpoint.readingClosure, memberNodeInfo: "member", isFlattened: false)
            value.marker = try reader["Marker"].readIfPresent()
            return value
        }
    }
}

public struct DescribeDBProxyEndpointsOutput: Swift.Equatable {
    /// The list of ProxyEndpoint objects returned by the API operation.
    public var dbProxyEndpoints: [RDSClientTypes.DBProxyEndpoint]?
    /// An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords.
    public var marker: Swift.String?

    public init(
        dbProxyEndpoints: [RDSClientTypes.DBProxyEndpoint]? = nil,
        marker: Swift.String? = nil
    )
    {
        self.dbProxyEndpoints = dbProxyEndpoints
        self.marker = marker
    }
}

enum DescribeDBProxyEndpointsOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "DBProxyEndpointNotFoundFault": return try await DBProxyEndpointNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "DBProxyNotFoundFault": return try await DBProxyNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension DescribeDBProxyTargetGroupsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dbProxyName = "DBProxyName"
        case filters = "Filters"
        case marker = "Marker"
        case maxRecords = "MaxRecords"
        case targetGroupName = "TargetGroupName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let dbProxyName = dbProxyName {
            try container.encode(dbProxyName, forKey: ClientRuntime.Key("DBProxyName"))
        }
        if let filters = filters {
            if !filters.isEmpty {
                var filtersContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Filters"))
                for (index0, filter0) in filters.enumerated() {
                    try filtersContainer.encode(filter0, forKey: ClientRuntime.Key("Filter.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var filtersContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Filters"))
                try filtersContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let marker = marker {
            try container.encode(marker, forKey: ClientRuntime.Key("Marker"))
        }
        if let maxRecords = maxRecords {
            try container.encode(maxRecords, forKey: ClientRuntime.Key("MaxRecords"))
        }
        if let targetGroupName = targetGroupName {
            try container.encode(targetGroupName, forKey: ClientRuntime.Key("TargetGroupName"))
        }
        try container.encode("DescribeDBProxyTargetGroups", forKey:ClientRuntime.Key("Action"))
        try container.encode("2014-10-31", forKey:ClientRuntime.Key("Version"))
    }
}

extension DescribeDBProxyTargetGroupsInput {

    static func urlPathProvider(_ value: DescribeDBProxyTargetGroupsInput) -> Swift.String? {
        return "/"
    }
}

public struct DescribeDBProxyTargetGroupsInput: Swift.Equatable {
    /// The identifier of the DBProxy associated with the target group.
    /// This member is required.
    public var dbProxyName: Swift.String?
    /// This parameter is not currently supported.
    public var filters: [RDSClientTypes.Filter]?
    /// An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords.
    public var marker: Swift.String?
    /// The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. Default: 100 Constraints: Minimum 20, maximum 100.
    public var maxRecords: Swift.Int?
    /// The identifier of the DBProxyTargetGroup to describe.
    public var targetGroupName: Swift.String?

    public init(
        dbProxyName: Swift.String? = nil,
        filters: [RDSClientTypes.Filter]? = nil,
        marker: Swift.String? = nil,
        maxRecords: Swift.Int? = nil,
        targetGroupName: Swift.String? = nil
    )
    {
        self.dbProxyName = dbProxyName
        self.filters = filters
        self.marker = marker
        self.maxRecords = maxRecords
        self.targetGroupName = targetGroupName
    }
}

extension DescribeDBProxyTargetGroupsOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<DescribeDBProxyTargetGroupsOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["DescribeDBProxyTargetGroupsResult"]
            var value = DescribeDBProxyTargetGroupsOutput()
            value.marker = try reader["Marker"].readIfPresent()
            value.targetGroups = try reader["TargetGroups"].readListIfPresent(memberReadingClosure: RDSClientTypes.DBProxyTargetGroup.readingClosure, memberNodeInfo: "member", isFlattened: false)
            return value
        }
    }
}

public struct DescribeDBProxyTargetGroupsOutput: Swift.Equatable {
    /// An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords.
    public var marker: Swift.String?
    /// An arbitrary number of DBProxyTargetGroup objects, containing details of the corresponding target groups.
    public var targetGroups: [RDSClientTypes.DBProxyTargetGroup]?

    public init(
        marker: Swift.String? = nil,
        targetGroups: [RDSClientTypes.DBProxyTargetGroup]? = nil
    )
    {
        self.marker = marker
        self.targetGroups = targetGroups
    }
}

enum DescribeDBProxyTargetGroupsOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "DBProxyNotFoundFault": return try await DBProxyNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "DBProxyTargetGroupNotFoundFault": return try await DBProxyTargetGroupNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "InvalidDBProxyStateFault": return try await InvalidDBProxyStateFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension DescribeDBProxyTargetsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dbProxyName = "DBProxyName"
        case filters = "Filters"
        case marker = "Marker"
        case maxRecords = "MaxRecords"
        case targetGroupName = "TargetGroupName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let dbProxyName = dbProxyName {
            try container.encode(dbProxyName, forKey: ClientRuntime.Key("DBProxyName"))
        }
        if let filters = filters {
            if !filters.isEmpty {
                var filtersContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Filters"))
                for (index0, filter0) in filters.enumerated() {
                    try filtersContainer.encode(filter0, forKey: ClientRuntime.Key("Filter.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var filtersContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Filters"))
                try filtersContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let marker = marker {
            try container.encode(marker, forKey: ClientRuntime.Key("Marker"))
        }
        if let maxRecords = maxRecords {
            try container.encode(maxRecords, forKey: ClientRuntime.Key("MaxRecords"))
        }
        if let targetGroupName = targetGroupName {
            try container.encode(targetGroupName, forKey: ClientRuntime.Key("TargetGroupName"))
        }
        try container.encode("DescribeDBProxyTargets", forKey:ClientRuntime.Key("Action"))
        try container.encode("2014-10-31", forKey:ClientRuntime.Key("Version"))
    }
}

extension DescribeDBProxyTargetsInput {

    static func urlPathProvider(_ value: DescribeDBProxyTargetsInput) -> Swift.String? {
        return "/"
    }
}

public struct DescribeDBProxyTargetsInput: Swift.Equatable {
    /// The identifier of the DBProxyTarget to describe.
    /// This member is required.
    public var dbProxyName: Swift.String?
    /// This parameter is not currently supported.
    public var filters: [RDSClientTypes.Filter]?
    /// An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords.
    public var marker: Swift.String?
    /// The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. Default: 100 Constraints: Minimum 20, maximum 100.
    public var maxRecords: Swift.Int?
    /// The identifier of the DBProxyTargetGroup to describe.
    public var targetGroupName: Swift.String?

    public init(
        dbProxyName: Swift.String? = nil,
        filters: [RDSClientTypes.Filter]? = nil,
        marker: Swift.String? = nil,
        maxRecords: Swift.Int? = nil,
        targetGroupName: Swift.String? = nil
    )
    {
        self.dbProxyName = dbProxyName
        self.filters = filters
        self.marker = marker
        self.maxRecords = maxRecords
        self.targetGroupName = targetGroupName
    }
}

extension DescribeDBProxyTargetsOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<DescribeDBProxyTargetsOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["DescribeDBProxyTargetsResult"]
            var value = DescribeDBProxyTargetsOutput()
            value.marker = try reader["Marker"].readIfPresent()
            value.targets = try reader["Targets"].readListIfPresent(memberReadingClosure: RDSClientTypes.DBProxyTarget.readingClosure, memberNodeInfo: "member", isFlattened: false)
            return value
        }
    }
}

public struct DescribeDBProxyTargetsOutput: Swift.Equatable {
    /// An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords.
    public var marker: Swift.String?
    /// An arbitrary number of DBProxyTarget objects, containing details of the corresponding targets.
    public var targets: [RDSClientTypes.DBProxyTarget]?

    public init(
        marker: Swift.String? = nil,
        targets: [RDSClientTypes.DBProxyTarget]? = nil
    )
    {
        self.marker = marker
        self.targets = targets
    }
}

enum DescribeDBProxyTargetsOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "DBProxyNotFoundFault": return try await DBProxyNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "DBProxyTargetGroupNotFoundFault": return try await DBProxyTargetGroupNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "DBProxyTargetNotFoundFault": return try await DBProxyTargetNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "InvalidDBProxyStateFault": return try await InvalidDBProxyStateFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension DescribeDBRecommendationsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case filters = "Filters"
        case lastUpdatedAfter = "LastUpdatedAfter"
        case lastUpdatedBefore = "LastUpdatedBefore"
        case locale = "Locale"
        case marker = "Marker"
        case maxRecords = "MaxRecords"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let filters = filters {
            if !filters.isEmpty {
                var filtersContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Filters"))
                for (index0, filter0) in filters.enumerated() {
                    try filtersContainer.encode(filter0, forKey: ClientRuntime.Key("Filter.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var filtersContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Filters"))
                try filtersContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let lastUpdatedAfter = lastUpdatedAfter {
            try container.encodeTimestamp(lastUpdatedAfter, format: .dateTime, forKey: ClientRuntime.Key("LastUpdatedAfter"))
        }
        if let lastUpdatedBefore = lastUpdatedBefore {
            try container.encodeTimestamp(lastUpdatedBefore, format: .dateTime, forKey: ClientRuntime.Key("LastUpdatedBefore"))
        }
        if let locale = locale {
            try container.encode(locale, forKey: ClientRuntime.Key("Locale"))
        }
        if let marker = marker {
            try container.encode(marker, forKey: ClientRuntime.Key("Marker"))
        }
        if let maxRecords = maxRecords {
            try container.encode(maxRecords, forKey: ClientRuntime.Key("MaxRecords"))
        }
        try container.encode("DescribeDBRecommendations", forKey:ClientRuntime.Key("Action"))
        try container.encode("2014-10-31", forKey:ClientRuntime.Key("Version"))
    }
}

extension DescribeDBRecommendationsInput {

    static func urlPathProvider(_ value: DescribeDBRecommendationsInput) -> Swift.String? {
        return "/"
    }
}

public struct DescribeDBRecommendationsInput: Swift.Equatable {
    /// A filter that specifies one or more recommendations to describe. Supported Filters:
    ///
    /// * recommendation-id - Accepts a list of recommendation identifiers. The results list only includes the recommendations whose identifier is one of the specified filter values.
    ///
    /// * status - Accepts a list of recommendation statuses. Valid values:
    ///
    /// * active - The recommendations which are ready for you to apply.
    ///
    /// * pending - The applied or scheduled recommendations which are in progress.
    ///
    /// * resolved - The recommendations which are completed.
    ///
    /// * dismissed - The recommendations that you dismissed.
    ///
    ///
    /// The results list only includes the recommendations whose status is one of the specified filter values.
    ///
    /// * severity - Accepts a list of recommendation severities. The results list only includes the recommendations whose severity is one of the specified filter values. Valid values:
    ///
    /// * high
    ///
    /// * medium
    ///
    /// * low
    ///
    /// * informational
    ///
    ///
    ///
    ///
    /// * type-id - Accepts a list of recommendation type identifiers. The results list only includes the recommendations whose type is one of the specified filter values.
    ///
    /// * dbi-resource-id - Accepts a list of database resource identifiers. The results list only includes the recommendations that generated for the specified databases.
    ///
    /// * cluster-resource-id - Accepts a list of cluster resource identifiers. The results list only includes the recommendations that generated for the specified clusters.
    ///
    /// * pg-arn - Accepts a list of parameter group ARNs. The results list only includes the recommendations that generated for the specified parameter groups.
    ///
    /// * cluster-pg-arn - Accepts a list of cluster parameter group ARNs. The results list only includes the recommendations that generated for the specified cluster parameter groups.
    public var filters: [RDSClientTypes.Filter]?
    /// A filter to include only the recommendations that were updated after this specified time.
    public var lastUpdatedAfter: ClientRuntime.Date?
    /// A filter to include only the recommendations that were updated before this specified time.
    public var lastUpdatedBefore: ClientRuntime.Date?
    /// The language that you choose to return the list of recommendations. Valid values:
    ///
    /// * en
    ///
    /// * en_UK
    ///
    /// * de
    ///
    /// * es
    ///
    /// * fr
    ///
    /// * id
    ///
    /// * it
    ///
    /// * ja
    ///
    /// * ko
    ///
    /// * pt_BR
    ///
    /// * zh_TW
    ///
    /// * zh_CN
    public var locale: Swift.String?
    /// An optional pagination token provided by a previous DescribeDBRecommendations request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords.
    public var marker: Swift.String?
    /// The maximum number of recommendations to include in the response. If more records exist than the specified MaxRecords value, a pagination token called a marker is included in the response so that you can retrieve the remaining results.
    public var maxRecords: Swift.Int?

    public init(
        filters: [RDSClientTypes.Filter]? = nil,
        lastUpdatedAfter: ClientRuntime.Date? = nil,
        lastUpdatedBefore: ClientRuntime.Date? = nil,
        locale: Swift.String? = nil,
        marker: Swift.String? = nil,
        maxRecords: Swift.Int? = nil
    )
    {
        self.filters = filters
        self.lastUpdatedAfter = lastUpdatedAfter
        self.lastUpdatedBefore = lastUpdatedBefore
        self.locale = locale
        self.marker = marker
        self.maxRecords = maxRecords
    }
}

extension DescribeDBRecommendationsOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<DescribeDBRecommendationsOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["DescribeDBRecommendationsResult"]
            var value = DescribeDBRecommendationsOutput()
            value.dbRecommendations = try reader["DBRecommendations"].readListIfPresent(memberReadingClosure: RDSClientTypes.DBRecommendation.readingClosure, memberNodeInfo: "member", isFlattened: false)
            value.marker = try reader["Marker"].readIfPresent()
            return value
        }
    }
}

public struct DescribeDBRecommendationsOutput: Swift.Equatable {
    /// A list of recommendations which is returned from DescribeDBRecommendations API request.
    public var dbRecommendations: [RDSClientTypes.DBRecommendation]?
    /// An optional pagination token provided by a previous DBRecommendationsMessage request. This token can be used later in a DescribeDBRecomendations request.
    public var marker: Swift.String?

    public init(
        dbRecommendations: [RDSClientTypes.DBRecommendation]? = nil,
        marker: Swift.String? = nil
    )
    {
        self.dbRecommendations = dbRecommendations
        self.marker = marker
    }
}

enum DescribeDBRecommendationsOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension DescribeDBSecurityGroupsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dbSecurityGroupName = "DBSecurityGroupName"
        case filters = "Filters"
        case marker = "Marker"
        case maxRecords = "MaxRecords"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let dbSecurityGroupName = dbSecurityGroupName {
            try container.encode(dbSecurityGroupName, forKey: ClientRuntime.Key("DBSecurityGroupName"))
        }
        if let filters = filters {
            if !filters.isEmpty {
                var filtersContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Filters"))
                for (index0, filter0) in filters.enumerated() {
                    try filtersContainer.encode(filter0, forKey: ClientRuntime.Key("Filter.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var filtersContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Filters"))
                try filtersContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let marker = marker {
            try container.encode(marker, forKey: ClientRuntime.Key("Marker"))
        }
        if let maxRecords = maxRecords {
            try container.encode(maxRecords, forKey: ClientRuntime.Key("MaxRecords"))
        }
        try container.encode("DescribeDBSecurityGroups", forKey:ClientRuntime.Key("Action"))
        try container.encode("2014-10-31", forKey:ClientRuntime.Key("Version"))
    }
}

extension DescribeDBSecurityGroupsInput {

    static func urlPathProvider(_ value: DescribeDBSecurityGroupsInput) -> Swift.String? {
        return "/"
    }
}

///
public struct DescribeDBSecurityGroupsInput: Swift.Equatable {
    /// The name of the DB security group to return details for.
    public var dbSecurityGroupName: Swift.String?
    /// This parameter isn't currently supported.
    public var filters: [RDSClientTypes.Filter]?
    /// An optional pagination token provided by a previous DescribeDBSecurityGroups request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords.
    public var marker: Swift.String?
    /// The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. Default: 100 Constraints: Minimum 20, maximum 100.
    public var maxRecords: Swift.Int?

    public init(
        dbSecurityGroupName: Swift.String? = nil,
        filters: [RDSClientTypes.Filter]? = nil,
        marker: Swift.String? = nil,
        maxRecords: Swift.Int? = nil
    )
    {
        self.dbSecurityGroupName = dbSecurityGroupName
        self.filters = filters
        self.marker = marker
        self.maxRecords = maxRecords
    }
}

extension DescribeDBSecurityGroupsOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<DescribeDBSecurityGroupsOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["DescribeDBSecurityGroupsResult"]
            var value = DescribeDBSecurityGroupsOutput()
            value.dbSecurityGroups = try reader["DBSecurityGroups"].readListIfPresent(memberReadingClosure: RDSClientTypes.DBSecurityGroup.readingClosure, memberNodeInfo: "DBSecurityGroup", isFlattened: false)
            value.marker = try reader["Marker"].readIfPresent()
            return value
        }
    }
}

/// Contains the result of a successful invocation of the DescribeDBSecurityGroups action.
public struct DescribeDBSecurityGroupsOutput: Swift.Equatable {
    /// A list of DBSecurityGroup instances.
    public var dbSecurityGroups: [RDSClientTypes.DBSecurityGroup]?
    /// An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords.
    public var marker: Swift.String?

    public init(
        dbSecurityGroups: [RDSClientTypes.DBSecurityGroup]? = nil,
        marker: Swift.String? = nil
    )
    {
        self.dbSecurityGroups = dbSecurityGroups
        self.marker = marker
    }
}

enum DescribeDBSecurityGroupsOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "DBSecurityGroupNotFound": return try await DBSecurityGroupNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension DescribeDBShardGroupsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dbShardGroupIdentifier = "DBShardGroupIdentifier"
        case filters = "Filters"
        case marker = "Marker"
        case maxRecords = "MaxRecords"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let dbShardGroupIdentifier = dbShardGroupIdentifier {
            try container.encode(dbShardGroupIdentifier, forKey: ClientRuntime.Key("DBShardGroupIdentifier"))
        }
        if let filters = filters {
            if !filters.isEmpty {
                var filtersContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Filters"))
                for (index0, filter0) in filters.enumerated() {
                    try filtersContainer.encode(filter0, forKey: ClientRuntime.Key("Filter.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var filtersContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Filters"))
                try filtersContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let marker = marker {
            try container.encode(marker, forKey: ClientRuntime.Key("Marker"))
        }
        if let maxRecords = maxRecords {
            try container.encode(maxRecords, forKey: ClientRuntime.Key("MaxRecords"))
        }
        try container.encode("DescribeDBShardGroups", forKey:ClientRuntime.Key("Action"))
        try container.encode("2014-10-31", forKey:ClientRuntime.Key("Version"))
    }
}

extension DescribeDBShardGroupsInput {

    static func urlPathProvider(_ value: DescribeDBShardGroupsInput) -> Swift.String? {
        return "/"
    }
}

public struct DescribeDBShardGroupsInput: Swift.Equatable {
    /// The user-supplied DB shard group identifier or the Amazon Resource Name (ARN) of the DB shard group. If this parameter is specified, information for only the specific DB shard group is returned. This parameter isn't case-sensitive. Constraints:
    ///
    /// * If supplied, must match an existing DB shard group identifier.
    public var dbShardGroupIdentifier: Swift.String?
    /// A filter that specifies one or more DB shard groups to describe.
    public var filters: [RDSClientTypes.Filter]?
    /// An optional pagination token provided by a previous DescribeDBShardGroups request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords.
    public var marker: Swift.String?
    /// The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a pagination token called a marker is included in the response so you can retrieve the remaining results. Default: 100 Constraints: Minimum 20, maximum 100
    public var maxRecords: Swift.Int?

    public init(
        dbShardGroupIdentifier: Swift.String? = nil,
        filters: [RDSClientTypes.Filter]? = nil,
        marker: Swift.String? = nil,
        maxRecords: Swift.Int? = nil
    )
    {
        self.dbShardGroupIdentifier = dbShardGroupIdentifier
        self.filters = filters
        self.marker = marker
        self.maxRecords = maxRecords
    }
}

extension DescribeDBShardGroupsOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<DescribeDBShardGroupsOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["DescribeDBShardGroupsResult"]
            var value = DescribeDBShardGroupsOutput()
            value.dbShardGroups = try reader["DBShardGroups"].readListIfPresent(memberReadingClosure: RDSClientTypes.DBShardGroup.readingClosure, memberNodeInfo: "DBShardGroup", isFlattened: false)
            value.marker = try reader["Marker"].readIfPresent()
            return value
        }
    }
}

public struct DescribeDBShardGroupsOutput: Swift.Equatable {
    /// Contains a list of DB shard groups for the user.
    public var dbShardGroups: [RDSClientTypes.DBShardGroup]?
    /// A pagination token that can be used in a later DescribeDBClusters request.
    public var marker: Swift.String?

    public init(
        dbShardGroups: [RDSClientTypes.DBShardGroup]? = nil,
        marker: Swift.String? = nil
    )
    {
        self.dbShardGroups = dbShardGroups
        self.marker = marker
    }
}

enum DescribeDBShardGroupsOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "DBClusterNotFoundFault": return try await DBClusterNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "DBShardGroupNotFound": return try await DBShardGroupNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension DescribeDBSnapshotAttributesInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dbSnapshotIdentifier = "DBSnapshotIdentifier"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let dbSnapshotIdentifier = dbSnapshotIdentifier {
            try container.encode(dbSnapshotIdentifier, forKey: ClientRuntime.Key("DBSnapshotIdentifier"))
        }
        try container.encode("DescribeDBSnapshotAttributes", forKey:ClientRuntime.Key("Action"))
        try container.encode("2014-10-31", forKey:ClientRuntime.Key("Version"))
    }
}

extension DescribeDBSnapshotAttributesInput {

    static func urlPathProvider(_ value: DescribeDBSnapshotAttributesInput) -> Swift.String? {
        return "/"
    }
}

///
public struct DescribeDBSnapshotAttributesInput: Swift.Equatable {
    /// The identifier for the DB snapshot to describe the attributes for.
    /// This member is required.
    public var dbSnapshotIdentifier: Swift.String?

    public init(
        dbSnapshotIdentifier: Swift.String? = nil
    )
    {
        self.dbSnapshotIdentifier = dbSnapshotIdentifier
    }
}

extension DescribeDBSnapshotAttributesOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<DescribeDBSnapshotAttributesOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["DescribeDBSnapshotAttributesResult"]
            var value = DescribeDBSnapshotAttributesOutput()
            value.dbSnapshotAttributesResult = try reader["DBSnapshotAttributesResult"].readIfPresent(readingClosure: RDSClientTypes.DBSnapshotAttributesResult.readingClosure)
            return value
        }
    }
}

public struct DescribeDBSnapshotAttributesOutput: Swift.Equatable {
    /// Contains the results of a successful call to the DescribeDBSnapshotAttributes API action. Manual DB snapshot attributes are used to authorize other Amazon Web Services accounts to copy or restore a manual DB snapshot. For more information, see the ModifyDBSnapshotAttribute API action.
    public var dbSnapshotAttributesResult: RDSClientTypes.DBSnapshotAttributesResult?

    public init(
        dbSnapshotAttributesResult: RDSClientTypes.DBSnapshotAttributesResult? = nil
    )
    {
        self.dbSnapshotAttributesResult = dbSnapshotAttributesResult
    }
}

enum DescribeDBSnapshotAttributesOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "DBSnapshotNotFound": return try await DBSnapshotNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension DescribeDBSnapshotTenantDatabasesInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dbInstanceIdentifier = "DBInstanceIdentifier"
        case dbSnapshotIdentifier = "DBSnapshotIdentifier"
        case dbiResourceId = "DbiResourceId"
        case filters = "Filters"
        case marker = "Marker"
        case maxRecords = "MaxRecords"
        case snapshotType = "SnapshotType"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let dbInstanceIdentifier = dbInstanceIdentifier {
            try container.encode(dbInstanceIdentifier, forKey: ClientRuntime.Key("DBInstanceIdentifier"))
        }
        if let dbSnapshotIdentifier = dbSnapshotIdentifier {
            try container.encode(dbSnapshotIdentifier, forKey: ClientRuntime.Key("DBSnapshotIdentifier"))
        }
        if let dbiResourceId = dbiResourceId {
            try container.encode(dbiResourceId, forKey: ClientRuntime.Key("DbiResourceId"))
        }
        if let filters = filters {
            if !filters.isEmpty {
                var filtersContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Filters"))
                for (index0, filter0) in filters.enumerated() {
                    try filtersContainer.encode(filter0, forKey: ClientRuntime.Key("Filter.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var filtersContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Filters"))
                try filtersContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let marker = marker {
            try container.encode(marker, forKey: ClientRuntime.Key("Marker"))
        }
        if let maxRecords = maxRecords {
            try container.encode(maxRecords, forKey: ClientRuntime.Key("MaxRecords"))
        }
        if let snapshotType = snapshotType {
            try container.encode(snapshotType, forKey: ClientRuntime.Key("SnapshotType"))
        }
        try container.encode("DescribeDBSnapshotTenantDatabases", forKey:ClientRuntime.Key("Action"))
        try container.encode("2014-10-31", forKey:ClientRuntime.Key("Version"))
    }
}

extension DescribeDBSnapshotTenantDatabasesInput {

    static func urlPathProvider(_ value: DescribeDBSnapshotTenantDatabasesInput) -> Swift.String? {
        return "/"
    }
}

public struct DescribeDBSnapshotTenantDatabasesInput: Swift.Equatable {
    /// The ID of the DB instance used to create the DB snapshots. This parameter isn't case-sensitive. Constraints:
    ///
    /// * If supplied, must match the identifier of an existing DBInstance.
    public var dbInstanceIdentifier: Swift.String?
    /// The ID of a DB snapshot that contains the tenant databases to describe. This value is stored as a lowercase string. Constraints:
    ///
    /// * If you specify this parameter, the value must match the ID of an existing DB snapshot.
    ///
    /// * If you specify an automatic snapshot, you must also specify SnapshotType.
    public var dbSnapshotIdentifier: Swift.String?
    /// A specific DB resource identifier to describe.
    public var dbiResourceId: Swift.String?
    /// A filter that specifies one or more tenant databases to describe. Supported filters:
    ///
    /// * tenant-db-name - Tenant database names. The results list only includes information about the tenant databases that match these tenant DB names.
    ///
    /// * tenant-database-resource-id - Tenant database resource identifiers. The results list only includes information about the tenant databases contained within the DB snapshots.
    ///
    /// * dbi-resource-id - DB instance resource identifiers. The results list only includes information about snapshots containing tenant databases contained within the DB instances identified by these resource identifiers.
    ///
    /// * db-instance-id - Accepts DB instance identifiers and DB instance Amazon Resource Names (ARNs).
    ///
    /// * db-snapshot-id - Accepts DB snapshot identifiers.
    ///
    /// * snapshot-type - Accepts types of DB snapshots.
    public var filters: [RDSClientTypes.Filter]?
    /// An optional pagination token provided by a previous DescribeDBSnapshotTenantDatabases request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords.
    public var marker: Swift.String?
    /// The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a pagination token called a marker is included in the response so that you can retrieve the remaining results.
    public var maxRecords: Swift.Int?
    /// The type of DB snapshots to be returned. You can specify one of the following values:
    ///
    /// * automated – All DB snapshots that have been automatically taken by Amazon RDS for my Amazon Web Services account.
    ///
    /// * manual – All DB snapshots that have been taken by my Amazon Web Services account.
    ///
    /// * shared – All manual DB snapshots that have been shared to my Amazon Web Services account.
    ///
    /// * public – All DB snapshots that have been marked as public.
    ///
    /// * awsbackup – All DB snapshots managed by the Amazon Web Services Backup service.
    public var snapshotType: Swift.String?

    public init(
        dbInstanceIdentifier: Swift.String? = nil,
        dbSnapshotIdentifier: Swift.String? = nil,
        dbiResourceId: Swift.String? = nil,
        filters: [RDSClientTypes.Filter]? = nil,
        marker: Swift.String? = nil,
        maxRecords: Swift.Int? = nil,
        snapshotType: Swift.String? = nil
    )
    {
        self.dbInstanceIdentifier = dbInstanceIdentifier
        self.dbSnapshotIdentifier = dbSnapshotIdentifier
        self.dbiResourceId = dbiResourceId
        self.filters = filters
        self.marker = marker
        self.maxRecords = maxRecords
        self.snapshotType = snapshotType
    }
}

extension DescribeDBSnapshotTenantDatabasesOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<DescribeDBSnapshotTenantDatabasesOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["DescribeDBSnapshotTenantDatabasesResult"]
            var value = DescribeDBSnapshotTenantDatabasesOutput()
            value.dbSnapshotTenantDatabases = try reader["DBSnapshotTenantDatabases"].readListIfPresent(memberReadingClosure: RDSClientTypes.DBSnapshotTenantDatabase.readingClosure, memberNodeInfo: "DBSnapshotTenantDatabase", isFlattened: false)
            value.marker = try reader["Marker"].readIfPresent()
            return value
        }
    }
}

public struct DescribeDBSnapshotTenantDatabasesOutput: Swift.Equatable {
    /// A list of DB snapshot tenant databases.
    public var dbSnapshotTenantDatabases: [RDSClientTypes.DBSnapshotTenantDatabase]?
    /// An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords.
    public var marker: Swift.String?

    public init(
        dbSnapshotTenantDatabases: [RDSClientTypes.DBSnapshotTenantDatabase]? = nil,
        marker: Swift.String? = nil
    )
    {
        self.dbSnapshotTenantDatabases = dbSnapshotTenantDatabases
        self.marker = marker
    }
}

enum DescribeDBSnapshotTenantDatabasesOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "DBSnapshotNotFound": return try await DBSnapshotNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension DescribeDBSnapshotsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dbInstanceIdentifier = "DBInstanceIdentifier"
        case dbSnapshotIdentifier = "DBSnapshotIdentifier"
        case dbiResourceId = "DbiResourceId"
        case filters = "Filters"
        case includePublic = "IncludePublic"
        case includeShared = "IncludeShared"
        case marker = "Marker"
        case maxRecords = "MaxRecords"
        case snapshotType = "SnapshotType"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let dbInstanceIdentifier = dbInstanceIdentifier {
            try container.encode(dbInstanceIdentifier, forKey: ClientRuntime.Key("DBInstanceIdentifier"))
        }
        if let dbSnapshotIdentifier = dbSnapshotIdentifier {
            try container.encode(dbSnapshotIdentifier, forKey: ClientRuntime.Key("DBSnapshotIdentifier"))
        }
        if let dbiResourceId = dbiResourceId {
            try container.encode(dbiResourceId, forKey: ClientRuntime.Key("DbiResourceId"))
        }
        if let filters = filters {
            if !filters.isEmpty {
                var filtersContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Filters"))
                for (index0, filter0) in filters.enumerated() {
                    try filtersContainer.encode(filter0, forKey: ClientRuntime.Key("Filter.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var filtersContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Filters"))
                try filtersContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let includePublic = includePublic {
            try container.encode(includePublic, forKey: ClientRuntime.Key("IncludePublic"))
        }
        if let includeShared = includeShared {
            try container.encode(includeShared, forKey: ClientRuntime.Key("IncludeShared"))
        }
        if let marker = marker {
            try container.encode(marker, forKey: ClientRuntime.Key("Marker"))
        }
        if let maxRecords = maxRecords {
            try container.encode(maxRecords, forKey: ClientRuntime.Key("MaxRecords"))
        }
        if let snapshotType = snapshotType {
            try container.encode(snapshotType, forKey: ClientRuntime.Key("SnapshotType"))
        }
        try container.encode("DescribeDBSnapshots", forKey:ClientRuntime.Key("Action"))
        try container.encode("2014-10-31", forKey:ClientRuntime.Key("Version"))
    }
}

extension DescribeDBSnapshotsInput {

    static func urlPathProvider(_ value: DescribeDBSnapshotsInput) -> Swift.String? {
        return "/"
    }
}

///
public struct DescribeDBSnapshotsInput: Swift.Equatable {
    /// The ID of the DB instance to retrieve the list of DB snapshots for. This parameter isn't case-sensitive. Constraints:
    ///
    /// * If supplied, must match the identifier of an existing DBInstance.
    public var dbInstanceIdentifier: Swift.String?
    /// A specific DB snapshot identifier to describe. This value is stored as a lowercase string. Constraints:
    ///
    /// * If supplied, must match the identifier of an existing DBSnapshot.
    ///
    /// * If this identifier is for an automated snapshot, the SnapshotType parameter must also be specified.
    public var dbSnapshotIdentifier: Swift.String?
    /// A specific DB resource ID to describe.
    public var dbiResourceId: Swift.String?
    /// A filter that specifies one or more DB snapshots to describe. Supported filters:
    ///
    /// * db-instance-id - Accepts DB instance identifiers and DB instance Amazon Resource Names (ARNs).
    ///
    /// * db-snapshot-id - Accepts DB snapshot identifiers.
    ///
    /// * dbi-resource-id - Accepts identifiers of source DB instances.
    ///
    /// * snapshot-type - Accepts types of DB snapshots.
    ///
    /// * engine - Accepts names of database engines.
    public var filters: [RDSClientTypes.Filter]?
    /// Specifies whether to include manual DB cluster snapshots that are public and can be copied or restored by any Amazon Web Services account. By default, the public snapshots are not included. You can share a manual DB snapshot as public by using the [ModifyDBSnapshotAttribute] API. This setting doesn't apply to RDS Custom.
    public var includePublic: Swift.Bool?
    /// Specifies whether to include shared manual DB cluster snapshots from other Amazon Web Services accounts that this Amazon Web Services account has been given permission to copy or restore. By default, these snapshots are not included. You can give an Amazon Web Services account permission to restore a manual DB snapshot from another Amazon Web Services account by using the ModifyDBSnapshotAttribute API action. This setting doesn't apply to RDS Custom.
    public var includeShared: Swift.Bool?
    /// An optional pagination token provided by a previous DescribeDBSnapshots request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords.
    public var marker: Swift.String?
    /// The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. Default: 100 Constraints: Minimum 20, maximum 100.
    public var maxRecords: Swift.Int?
    /// The type of snapshots to be returned. You can specify one of the following values:
    ///
    /// * automated - Return all DB snapshots that have been automatically taken by Amazon RDS for my Amazon Web Services account.
    ///
    /// * manual - Return all DB snapshots that have been taken by my Amazon Web Services account.
    ///
    /// * shared - Return all manual DB snapshots that have been shared to my Amazon Web Services account.
    ///
    /// * public - Return all DB snapshots that have been marked as public.
    ///
    /// * awsbackup - Return the DB snapshots managed by the Amazon Web Services Backup service. For information about Amazon Web Services Backup, see the [ Amazon Web Services Backup Developer Guide. ](https://docs.aws.amazon.com/aws-backup/latest/devguide/whatisbackup.html) The awsbackup type does not apply to Aurora.
    ///
    ///
    /// If you don't specify a SnapshotType value, then both automated and manual snapshots are returned. Shared and public DB snapshots are not included in the returned results by default. You can include shared snapshots with these results by enabling the IncludeShared parameter. You can include public snapshots with these results by enabling the IncludePublic parameter. The IncludeShared and IncludePublic parameters don't apply for SnapshotType values of manual or automated. The IncludePublic parameter doesn't apply when SnapshotType is set to shared. The IncludeShared parameter doesn't apply when SnapshotType is set to public.
    public var snapshotType: Swift.String?

    public init(
        dbInstanceIdentifier: Swift.String? = nil,
        dbSnapshotIdentifier: Swift.String? = nil,
        dbiResourceId: Swift.String? = nil,
        filters: [RDSClientTypes.Filter]? = nil,
        includePublic: Swift.Bool? = nil,
        includeShared: Swift.Bool? = nil,
        marker: Swift.String? = nil,
        maxRecords: Swift.Int? = nil,
        snapshotType: Swift.String? = nil
    )
    {
        self.dbInstanceIdentifier = dbInstanceIdentifier
        self.dbSnapshotIdentifier = dbSnapshotIdentifier
        self.dbiResourceId = dbiResourceId
        self.filters = filters
        self.includePublic = includePublic
        self.includeShared = includeShared
        self.marker = marker
        self.maxRecords = maxRecords
        self.snapshotType = snapshotType
    }
}

extension DescribeDBSnapshotsOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<DescribeDBSnapshotsOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["DescribeDBSnapshotsResult"]
            var value = DescribeDBSnapshotsOutput()
            value.dbSnapshots = try reader["DBSnapshots"].readListIfPresent(memberReadingClosure: RDSClientTypes.DBSnapshot.readingClosure, memberNodeInfo: "DBSnapshot", isFlattened: false)
            value.marker = try reader["Marker"].readIfPresent()
            return value
        }
    }
}

/// Contains the result of a successful invocation of the DescribeDBSnapshots action.
public struct DescribeDBSnapshotsOutput: Swift.Equatable {
    /// A list of DBSnapshot instances.
    public var dbSnapshots: [RDSClientTypes.DBSnapshot]?
    /// An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords.
    public var marker: Swift.String?

    public init(
        dbSnapshots: [RDSClientTypes.DBSnapshot]? = nil,
        marker: Swift.String? = nil
    )
    {
        self.dbSnapshots = dbSnapshots
        self.marker = marker
    }
}

enum DescribeDBSnapshotsOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "DBSnapshotNotFound": return try await DBSnapshotNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension DescribeDBSubnetGroupsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dbSubnetGroupName = "DBSubnetGroupName"
        case filters = "Filters"
        case marker = "Marker"
        case maxRecords = "MaxRecords"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let dbSubnetGroupName = dbSubnetGroupName {
            try container.encode(dbSubnetGroupName, forKey: ClientRuntime.Key("DBSubnetGroupName"))
        }
        if let filters = filters {
            if !filters.isEmpty {
                var filtersContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Filters"))
                for (index0, filter0) in filters.enumerated() {
                    try filtersContainer.encode(filter0, forKey: ClientRuntime.Key("Filter.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var filtersContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Filters"))
                try filtersContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let marker = marker {
            try container.encode(marker, forKey: ClientRuntime.Key("Marker"))
        }
        if let maxRecords = maxRecords {
            try container.encode(maxRecords, forKey: ClientRuntime.Key("MaxRecords"))
        }
        try container.encode("DescribeDBSubnetGroups", forKey:ClientRuntime.Key("Action"))
        try container.encode("2014-10-31", forKey:ClientRuntime.Key("Version"))
    }
}

extension DescribeDBSubnetGroupsInput {

    static func urlPathProvider(_ value: DescribeDBSubnetGroupsInput) -> Swift.String? {
        return "/"
    }
}

///
public struct DescribeDBSubnetGroupsInput: Swift.Equatable {
    /// The name of the DB subnet group to return details for.
    public var dbSubnetGroupName: Swift.String?
    /// This parameter isn't currently supported.
    public var filters: [RDSClientTypes.Filter]?
    /// An optional pagination token provided by a previous DescribeDBSubnetGroups request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords.
    public var marker: Swift.String?
    /// The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. Default: 100 Constraints: Minimum 20, maximum 100.
    public var maxRecords: Swift.Int?

    public init(
        dbSubnetGroupName: Swift.String? = nil,
        filters: [RDSClientTypes.Filter]? = nil,
        marker: Swift.String? = nil,
        maxRecords: Swift.Int? = nil
    )
    {
        self.dbSubnetGroupName = dbSubnetGroupName
        self.filters = filters
        self.marker = marker
        self.maxRecords = maxRecords
    }
}

extension DescribeDBSubnetGroupsOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<DescribeDBSubnetGroupsOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["DescribeDBSubnetGroupsResult"]
            var value = DescribeDBSubnetGroupsOutput()
            value.dbSubnetGroups = try reader["DBSubnetGroups"].readListIfPresent(memberReadingClosure: RDSClientTypes.DBSubnetGroup.readingClosure, memberNodeInfo: "DBSubnetGroup", isFlattened: false)
            value.marker = try reader["Marker"].readIfPresent()
            return value
        }
    }
}

/// Contains the result of a successful invocation of the DescribeDBSubnetGroups action.
public struct DescribeDBSubnetGroupsOutput: Swift.Equatable {
    /// A list of DBSubnetGroup instances.
    public var dbSubnetGroups: [RDSClientTypes.DBSubnetGroup]?
    /// An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords.
    public var marker: Swift.String?

    public init(
        dbSubnetGroups: [RDSClientTypes.DBSubnetGroup]? = nil,
        marker: Swift.String? = nil
    )
    {
        self.dbSubnetGroups = dbSubnetGroups
        self.marker = marker
    }
}

enum DescribeDBSubnetGroupsOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "DBSubnetGroupNotFoundFault": return try await DBSubnetGroupNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension DescribeEngineDefaultClusterParametersInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dbParameterGroupFamily = "DBParameterGroupFamily"
        case filters = "Filters"
        case marker = "Marker"
        case maxRecords = "MaxRecords"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let dbParameterGroupFamily = dbParameterGroupFamily {
            try container.encode(dbParameterGroupFamily, forKey: ClientRuntime.Key("DBParameterGroupFamily"))
        }
        if let filters = filters {
            if !filters.isEmpty {
                var filtersContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Filters"))
                for (index0, filter0) in filters.enumerated() {
                    try filtersContainer.encode(filter0, forKey: ClientRuntime.Key("Filter.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var filtersContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Filters"))
                try filtersContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let marker = marker {
            try container.encode(marker, forKey: ClientRuntime.Key("Marker"))
        }
        if let maxRecords = maxRecords {
            try container.encode(maxRecords, forKey: ClientRuntime.Key("MaxRecords"))
        }
        try container.encode("DescribeEngineDefaultClusterParameters", forKey:ClientRuntime.Key("Action"))
        try container.encode("2014-10-31", forKey:ClientRuntime.Key("Version"))
    }
}

extension DescribeEngineDefaultClusterParametersInput {

    static func urlPathProvider(_ value: DescribeEngineDefaultClusterParametersInput) -> Swift.String? {
        return "/"
    }
}

///
public struct DescribeEngineDefaultClusterParametersInput: Swift.Equatable {
    /// The name of the DB cluster parameter group family to return engine parameter information for.
    /// This member is required.
    public var dbParameterGroupFamily: Swift.String?
    /// This parameter isn't currently supported.
    public var filters: [RDSClientTypes.Filter]?
    /// An optional pagination token provided by a previous DescribeEngineDefaultClusterParameters request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords.
    public var marker: Swift.String?
    /// The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a pagination token called a marker is included in the response so you can retrieve the remaining results. Default: 100 Constraints: Minimum 20, maximum 100.
    public var maxRecords: Swift.Int?

    public init(
        dbParameterGroupFamily: Swift.String? = nil,
        filters: [RDSClientTypes.Filter]? = nil,
        marker: Swift.String? = nil,
        maxRecords: Swift.Int? = nil
    )
    {
        self.dbParameterGroupFamily = dbParameterGroupFamily
        self.filters = filters
        self.marker = marker
        self.maxRecords = maxRecords
    }
}

extension DescribeEngineDefaultClusterParametersOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<DescribeEngineDefaultClusterParametersOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["DescribeEngineDefaultClusterParametersResult"]
            var value = DescribeEngineDefaultClusterParametersOutput()
            value.engineDefaults = try reader["EngineDefaults"].readIfPresent(readingClosure: RDSClientTypes.EngineDefaults.readingClosure)
            return value
        }
    }
}

public struct DescribeEngineDefaultClusterParametersOutput: Swift.Equatable {
    /// Contains the result of a successful invocation of the DescribeEngineDefaultParameters action.
    public var engineDefaults: RDSClientTypes.EngineDefaults?

    public init(
        engineDefaults: RDSClientTypes.EngineDefaults? = nil
    )
    {
        self.engineDefaults = engineDefaults
    }
}

enum DescribeEngineDefaultClusterParametersOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension DescribeEngineDefaultParametersInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dbParameterGroupFamily = "DBParameterGroupFamily"
        case filters = "Filters"
        case marker = "Marker"
        case maxRecords = "MaxRecords"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let dbParameterGroupFamily = dbParameterGroupFamily {
            try container.encode(dbParameterGroupFamily, forKey: ClientRuntime.Key("DBParameterGroupFamily"))
        }
        if let filters = filters {
            if !filters.isEmpty {
                var filtersContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Filters"))
                for (index0, filter0) in filters.enumerated() {
                    try filtersContainer.encode(filter0, forKey: ClientRuntime.Key("Filter.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var filtersContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Filters"))
                try filtersContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let marker = marker {
            try container.encode(marker, forKey: ClientRuntime.Key("Marker"))
        }
        if let maxRecords = maxRecords {
            try container.encode(maxRecords, forKey: ClientRuntime.Key("MaxRecords"))
        }
        try container.encode("DescribeEngineDefaultParameters", forKey:ClientRuntime.Key("Action"))
        try container.encode("2014-10-31", forKey:ClientRuntime.Key("Version"))
    }
}

extension DescribeEngineDefaultParametersInput {

    static func urlPathProvider(_ value: DescribeEngineDefaultParametersInput) -> Swift.String? {
        return "/"
    }
}

///
public struct DescribeEngineDefaultParametersInput: Swift.Equatable {
    /// The name of the DB parameter group family. Valid Values:
    ///
    /// * aurora-mysql5.7
    ///
    /// * aurora-mysql8.0
    ///
    /// * aurora-postgresql10
    ///
    /// * aurora-postgresql11
    ///
    /// * aurora-postgresql12
    ///
    /// * aurora-postgresql13
    ///
    /// * aurora-postgresql14
    ///
    /// * custom-oracle-ee-19
    ///
    /// * db2-ae
    ///
    /// * db2-se
    ///
    /// * mariadb10.2
    ///
    /// * mariadb10.3
    ///
    /// * mariadb10.4
    ///
    /// * mariadb10.5
    ///
    /// * mariadb10.6
    ///
    /// * mysql5.7
    ///
    /// * mysql8.0
    ///
    /// * oracle-ee-19
    ///
    /// * oracle-ee-cdb-19
    ///
    /// * oracle-ee-cdb-21
    ///
    /// * oracle-se2-19
    ///
    /// * oracle-se2-cdb-19
    ///
    /// * oracle-se2-cdb-21
    ///
    /// * postgres10
    ///
    /// * postgres11
    ///
    /// * postgres12
    ///
    /// * postgres13
    ///
    /// * postgres14
    ///
    /// * sqlserver-ee-11.0
    ///
    /// * sqlserver-ee-12.0
    ///
    /// * sqlserver-ee-13.0
    ///
    /// * sqlserver-ee-14.0
    ///
    /// * sqlserver-ee-15.0
    ///
    /// * sqlserver-ex-11.0
    ///
    /// * sqlserver-ex-12.0
    ///
    /// * sqlserver-ex-13.0
    ///
    /// * sqlserver-ex-14.0
    ///
    /// * sqlserver-ex-15.0
    ///
    /// * sqlserver-se-11.0
    ///
    /// * sqlserver-se-12.0
    ///
    /// * sqlserver-se-13.0
    ///
    /// * sqlserver-se-14.0
    ///
    /// * sqlserver-se-15.0
    ///
    /// * sqlserver-web-11.0
    ///
    /// * sqlserver-web-12.0
    ///
    /// * sqlserver-web-13.0
    ///
    /// * sqlserver-web-14.0
    ///
    /// * sqlserver-web-15.0
    /// This member is required.
    public var dbParameterGroupFamily: Swift.String?
    /// This parameter isn't currently supported.
    public var filters: [RDSClientTypes.Filter]?
    /// An optional pagination token provided by a previous DescribeEngineDefaultParameters request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords.
    public var marker: Swift.String?
    /// The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a pagination token called a marker is included in the response so you can retrieve the remaining results. Default: 100 Constraints: Minimum 20, maximum 100.
    public var maxRecords: Swift.Int?

    public init(
        dbParameterGroupFamily: Swift.String? = nil,
        filters: [RDSClientTypes.Filter]? = nil,
        marker: Swift.String? = nil,
        maxRecords: Swift.Int? = nil
    )
    {
        self.dbParameterGroupFamily = dbParameterGroupFamily
        self.filters = filters
        self.marker = marker
        self.maxRecords = maxRecords
    }
}

extension DescribeEngineDefaultParametersOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<DescribeEngineDefaultParametersOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["DescribeEngineDefaultParametersResult"]
            var value = DescribeEngineDefaultParametersOutput()
            value.engineDefaults = try reader["EngineDefaults"].readIfPresent(readingClosure: RDSClientTypes.EngineDefaults.readingClosure)
            return value
        }
    }
}

public struct DescribeEngineDefaultParametersOutput: Swift.Equatable {
    /// Contains the result of a successful invocation of the DescribeEngineDefaultParameters action.
    public var engineDefaults: RDSClientTypes.EngineDefaults?

    public init(
        engineDefaults: RDSClientTypes.EngineDefaults? = nil
    )
    {
        self.engineDefaults = engineDefaults
    }
}

enum DescribeEngineDefaultParametersOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension DescribeEventCategoriesInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case filters = "Filters"
        case sourceType = "SourceType"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let filters = filters {
            if !filters.isEmpty {
                var filtersContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Filters"))
                for (index0, filter0) in filters.enumerated() {
                    try filtersContainer.encode(filter0, forKey: ClientRuntime.Key("Filter.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var filtersContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Filters"))
                try filtersContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let sourceType = sourceType {
            try container.encode(sourceType, forKey: ClientRuntime.Key("SourceType"))
        }
        try container.encode("DescribeEventCategories", forKey:ClientRuntime.Key("Action"))
        try container.encode("2014-10-31", forKey:ClientRuntime.Key("Version"))
    }
}

extension DescribeEventCategoriesInput {

    static func urlPathProvider(_ value: DescribeEventCategoriesInput) -> Swift.String? {
        return "/"
    }
}

///
public struct DescribeEventCategoriesInput: Swift.Equatable {
    /// This parameter isn't currently supported.
    public var filters: [RDSClientTypes.Filter]?
    /// The type of source that is generating the events. For RDS Proxy events, specify db-proxy. Valid Values: db-instance | db-cluster | db-parameter-group | db-security-group | db-snapshot | db-cluster-snapshot | db-proxy
    public var sourceType: Swift.String?

    public init(
        filters: [RDSClientTypes.Filter]? = nil,
        sourceType: Swift.String? = nil
    )
    {
        self.filters = filters
        self.sourceType = sourceType
    }
}

extension DescribeEventCategoriesOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<DescribeEventCategoriesOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["DescribeEventCategoriesResult"]
            var value = DescribeEventCategoriesOutput()
            value.eventCategoriesMapList = try reader["EventCategoriesMapList"].readListIfPresent(memberReadingClosure: RDSClientTypes.EventCategoriesMap.readingClosure, memberNodeInfo: "EventCategoriesMap", isFlattened: false)
            return value
        }
    }
}

/// Data returned from the DescribeEventCategories operation.
public struct DescribeEventCategoriesOutput: Swift.Equatable {
    /// A list of EventCategoriesMap data types.
    public var eventCategoriesMapList: [RDSClientTypes.EventCategoriesMap]?

    public init(
        eventCategoriesMapList: [RDSClientTypes.EventCategoriesMap]? = nil
    )
    {
        self.eventCategoriesMapList = eventCategoriesMapList
    }
}

enum DescribeEventCategoriesOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension DescribeEventSubscriptionsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case filters = "Filters"
        case marker = "Marker"
        case maxRecords = "MaxRecords"
        case subscriptionName = "SubscriptionName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let filters = filters {
            if !filters.isEmpty {
                var filtersContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Filters"))
                for (index0, filter0) in filters.enumerated() {
                    try filtersContainer.encode(filter0, forKey: ClientRuntime.Key("Filter.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var filtersContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Filters"))
                try filtersContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let marker = marker {
            try container.encode(marker, forKey: ClientRuntime.Key("Marker"))
        }
        if let maxRecords = maxRecords {
            try container.encode(maxRecords, forKey: ClientRuntime.Key("MaxRecords"))
        }
        if let subscriptionName = subscriptionName {
            try container.encode(subscriptionName, forKey: ClientRuntime.Key("SubscriptionName"))
        }
        try container.encode("DescribeEventSubscriptions", forKey:ClientRuntime.Key("Action"))
        try container.encode("2014-10-31", forKey:ClientRuntime.Key("Version"))
    }
}

extension DescribeEventSubscriptionsInput {

    static func urlPathProvider(_ value: DescribeEventSubscriptionsInput) -> Swift.String? {
        return "/"
    }
}

///
public struct DescribeEventSubscriptionsInput: Swift.Equatable {
    /// This parameter isn't currently supported.
    public var filters: [RDSClientTypes.Filter]?
    /// An optional pagination token provided by a previous DescribeOrderableDBInstanceOptions request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords .
    public var marker: Swift.String?
    /// The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. Default: 100 Constraints: Minimum 20, maximum 100.
    public var maxRecords: Swift.Int?
    /// The name of the RDS event notification subscription you want to describe.
    public var subscriptionName: Swift.String?

    public init(
        filters: [RDSClientTypes.Filter]? = nil,
        marker: Swift.String? = nil,
        maxRecords: Swift.Int? = nil,
        subscriptionName: Swift.String? = nil
    )
    {
        self.filters = filters
        self.marker = marker
        self.maxRecords = maxRecords
        self.subscriptionName = subscriptionName
    }
}

extension DescribeEventSubscriptionsOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<DescribeEventSubscriptionsOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["DescribeEventSubscriptionsResult"]
            var value = DescribeEventSubscriptionsOutput()
            value.eventSubscriptionsList = try reader["EventSubscriptionsList"].readListIfPresent(memberReadingClosure: RDSClientTypes.EventSubscription.readingClosure, memberNodeInfo: "EventSubscription", isFlattened: false)
            value.marker = try reader["Marker"].readIfPresent()
            return value
        }
    }
}

/// Data returned by the DescribeEventSubscriptions action.
public struct DescribeEventSubscriptionsOutput: Swift.Equatable {
    /// A list of EventSubscriptions data types.
    public var eventSubscriptionsList: [RDSClientTypes.EventSubscription]?
    /// An optional pagination token provided by a previous DescribeOrderableDBInstanceOptions request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords.
    public var marker: Swift.String?

    public init(
        eventSubscriptionsList: [RDSClientTypes.EventSubscription]? = nil,
        marker: Swift.String? = nil
    )
    {
        self.eventSubscriptionsList = eventSubscriptionsList
        self.marker = marker
    }
}

enum DescribeEventSubscriptionsOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "SubscriptionNotFound": return try await SubscriptionNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension DescribeEventsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case duration = "Duration"
        case endTime = "EndTime"
        case eventCategories = "EventCategories"
        case filters = "Filters"
        case marker = "Marker"
        case maxRecords = "MaxRecords"
        case sourceIdentifier = "SourceIdentifier"
        case sourceType = "SourceType"
        case startTime = "StartTime"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let duration = duration {
            try container.encode(duration, forKey: ClientRuntime.Key("Duration"))
        }
        if let endTime = endTime {
            try container.encodeTimestamp(endTime, format: .dateTime, forKey: ClientRuntime.Key("EndTime"))
        }
        if let eventCategories = eventCategories {
            if !eventCategories.isEmpty {
                var eventCategoriesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("EventCategories"))
                for (index0, string0) in eventCategories.enumerated() {
                    try eventCategoriesContainer.encode(string0, forKey: ClientRuntime.Key("EventCategory.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var eventCategoriesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("EventCategories"))
                try eventCategoriesContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let filters = filters {
            if !filters.isEmpty {
                var filtersContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Filters"))
                for (index0, filter0) in filters.enumerated() {
                    try filtersContainer.encode(filter0, forKey: ClientRuntime.Key("Filter.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var filtersContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Filters"))
                try filtersContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let marker = marker {
            try container.encode(marker, forKey: ClientRuntime.Key("Marker"))
        }
        if let maxRecords = maxRecords {
            try container.encode(maxRecords, forKey: ClientRuntime.Key("MaxRecords"))
        }
        if let sourceIdentifier = sourceIdentifier {
            try container.encode(sourceIdentifier, forKey: ClientRuntime.Key("SourceIdentifier"))
        }
        if let sourceType = sourceType {
            try container.encode(sourceType, forKey: ClientRuntime.Key("SourceType"))
        }
        if let startTime = startTime {
            try container.encodeTimestamp(startTime, format: .dateTime, forKey: ClientRuntime.Key("StartTime"))
        }
        try container.encode("DescribeEvents", forKey:ClientRuntime.Key("Action"))
        try container.encode("2014-10-31", forKey:ClientRuntime.Key("Version"))
    }
}

extension DescribeEventsInput {

    static func urlPathProvider(_ value: DescribeEventsInput) -> Swift.String? {
        return "/"
    }
}

///
public struct DescribeEventsInput: Swift.Equatable {
    /// The number of minutes to retrieve events for. Default: 60
    public var duration: Swift.Int?
    /// The end of the time interval for which to retrieve events, specified in ISO 8601 format. For more information about ISO 8601, go to the [ISO8601 Wikipedia page.](http://en.wikipedia.org/wiki/ISO_8601) Example: 2009-07-08T18:00Z
    public var endTime: ClientRuntime.Date?
    /// A list of event categories that trigger notifications for a event notification subscription.
    public var eventCategories: [Swift.String]?
    /// This parameter isn't currently supported.
    public var filters: [RDSClientTypes.Filter]?
    /// An optional pagination token provided by a previous DescribeEvents request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords.
    public var marker: Swift.String?
    /// The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. Default: 100 Constraints: Minimum 20, maximum 100.
    public var maxRecords: Swift.Int?
    /// The identifier of the event source for which events are returned. If not specified, then all sources are included in the response. Constraints:
    ///
    /// * If SourceIdentifier is supplied, SourceType must also be provided.
    ///
    /// * If the source type is a DB instance, a DBInstanceIdentifier value must be supplied.
    ///
    /// * If the source type is a DB cluster, a DBClusterIdentifier value must be supplied.
    ///
    /// * If the source type is a DB parameter group, a DBParameterGroupName value must be supplied.
    ///
    /// * If the source type is a DB security group, a DBSecurityGroupName value must be supplied.
    ///
    /// * If the source type is a DB snapshot, a DBSnapshotIdentifier value must be supplied.
    ///
    /// * If the source type is a DB cluster snapshot, a DBClusterSnapshotIdentifier value must be supplied.
    ///
    /// * If the source type is an RDS Proxy, a DBProxyName value must be supplied.
    ///
    /// * Can't end with a hyphen or contain two consecutive hyphens.
    public var sourceIdentifier: Swift.String?
    /// The event source to retrieve events for. If no value is specified, all events are returned.
    public var sourceType: RDSClientTypes.SourceType?
    /// The beginning of the time interval to retrieve events for, specified in ISO 8601 format. For more information about ISO 8601, go to the [ISO8601 Wikipedia page.](http://en.wikipedia.org/wiki/ISO_8601) Example: 2009-07-08T18:00Z
    public var startTime: ClientRuntime.Date?

    public init(
        duration: Swift.Int? = nil,
        endTime: ClientRuntime.Date? = nil,
        eventCategories: [Swift.String]? = nil,
        filters: [RDSClientTypes.Filter]? = nil,
        marker: Swift.String? = nil,
        maxRecords: Swift.Int? = nil,
        sourceIdentifier: Swift.String? = nil,
        sourceType: RDSClientTypes.SourceType? = nil,
        startTime: ClientRuntime.Date? = nil
    )
    {
        self.duration = duration
        self.endTime = endTime
        self.eventCategories = eventCategories
        self.filters = filters
        self.marker = marker
        self.maxRecords = maxRecords
        self.sourceIdentifier = sourceIdentifier
        self.sourceType = sourceType
        self.startTime = startTime
    }
}

extension DescribeEventsOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<DescribeEventsOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["DescribeEventsResult"]
            var value = DescribeEventsOutput()
            value.events = try reader["Events"].readListIfPresent(memberReadingClosure: RDSClientTypes.Event.readingClosure, memberNodeInfo: "Event", isFlattened: false)
            value.marker = try reader["Marker"].readIfPresent()
            return value
        }
    }
}

/// Contains the result of a successful invocation of the DescribeEvents action.
public struct DescribeEventsOutput: Swift.Equatable {
    /// A list of Event instances.
    public var events: [RDSClientTypes.Event]?
    /// An optional pagination token provided by a previous Events request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords.
    public var marker: Swift.String?

    public init(
        events: [RDSClientTypes.Event]? = nil,
        marker: Swift.String? = nil
    )
    {
        self.events = events
        self.marker = marker
    }
}

enum DescribeEventsOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension DescribeExportTasksInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case exportTaskIdentifier = "ExportTaskIdentifier"
        case filters = "Filters"
        case marker = "Marker"
        case maxRecords = "MaxRecords"
        case sourceArn = "SourceArn"
        case sourceType = "SourceType"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let exportTaskIdentifier = exportTaskIdentifier {
            try container.encode(exportTaskIdentifier, forKey: ClientRuntime.Key("ExportTaskIdentifier"))
        }
        if let filters = filters {
            if !filters.isEmpty {
                var filtersContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Filters"))
                for (index0, filter0) in filters.enumerated() {
                    try filtersContainer.encode(filter0, forKey: ClientRuntime.Key("Filter.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var filtersContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Filters"))
                try filtersContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let marker = marker {
            try container.encode(marker, forKey: ClientRuntime.Key("Marker"))
        }
        if let maxRecords = maxRecords {
            try container.encode(maxRecords, forKey: ClientRuntime.Key("MaxRecords"))
        }
        if let sourceArn = sourceArn {
            try container.encode(sourceArn, forKey: ClientRuntime.Key("SourceArn"))
        }
        if let sourceType = sourceType {
            try container.encode(sourceType, forKey: ClientRuntime.Key("SourceType"))
        }
        try container.encode("DescribeExportTasks", forKey:ClientRuntime.Key("Action"))
        try container.encode("2014-10-31", forKey:ClientRuntime.Key("Version"))
    }
}

extension DescribeExportTasksInput {

    static func urlPathProvider(_ value: DescribeExportTasksInput) -> Swift.String? {
        return "/"
    }
}

public struct DescribeExportTasksInput: Swift.Equatable {
    /// The identifier of the snapshot or cluster export task to be described.
    public var exportTaskIdentifier: Swift.String?
    /// Filters specify one or more snapshot or cluster exports to describe. The filters are specified as name-value pairs that define what to include in the output. Filter names and values are case-sensitive. Supported filters include the following:
    ///
    /// * export-task-identifier - An identifier for the snapshot or cluster export task.
    ///
    /// * s3-bucket - The Amazon S3 bucket the data is exported to.
    ///
    /// * source-arn - The Amazon Resource Name (ARN) of the snapshot or cluster exported to Amazon S3.
    ///
    /// * status - The status of the export task. Must be lowercase. Valid statuses are the following:
    ///
    /// * canceled
    ///
    /// * canceling
    ///
    /// * complete
    ///
    /// * failed
    ///
    /// * in_progress
    ///
    /// * starting
    public var filters: [RDSClientTypes.Filter]?
    /// An optional pagination token provided by a previous DescribeExportTasks request. If you specify this parameter, the response includes only records beyond the marker, up to the value specified by the MaxRecords parameter.
    public var marker: Swift.String?
    /// The maximum number of records to include in the response. If more records exist than the specified value, a pagination token called a marker is included in the response. You can use the marker in a later DescribeExportTasks request to retrieve the remaining results. Default: 100 Constraints: Minimum 20, maximum 100.
    public var maxRecords: Swift.Int?
    /// The Amazon Resource Name (ARN) of the snapshot or cluster exported to Amazon S3.
    public var sourceArn: Swift.String?
    /// The type of source for the export.
    public var sourceType: RDSClientTypes.ExportSourceType?

    public init(
        exportTaskIdentifier: Swift.String? = nil,
        filters: [RDSClientTypes.Filter]? = nil,
        marker: Swift.String? = nil,
        maxRecords: Swift.Int? = nil,
        sourceArn: Swift.String? = nil,
        sourceType: RDSClientTypes.ExportSourceType? = nil
    )
    {
        self.exportTaskIdentifier = exportTaskIdentifier
        self.filters = filters
        self.marker = marker
        self.maxRecords = maxRecords
        self.sourceArn = sourceArn
        self.sourceType = sourceType
    }
}

extension DescribeExportTasksOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<DescribeExportTasksOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["DescribeExportTasksResult"]
            var value = DescribeExportTasksOutput()
            value.exportTasks = try reader["ExportTasks"].readListIfPresent(memberReadingClosure: RDSClientTypes.ExportTask.readingClosure, memberNodeInfo: "ExportTask", isFlattened: false)
            value.marker = try reader["Marker"].readIfPresent()
            return value
        }
    }
}

public struct DescribeExportTasksOutput: Swift.Equatable {
    /// Information about an export of a snapshot or cluster to Amazon S3.
    public var exportTasks: [RDSClientTypes.ExportTask]?
    /// A pagination token that can be used in a later DescribeExportTasks request. A marker is used for pagination to identify the location to begin output for the next response of DescribeExportTasks.
    public var marker: Swift.String?

    public init(
        exportTasks: [RDSClientTypes.ExportTask]? = nil,
        marker: Swift.String? = nil
    )
    {
        self.exportTasks = exportTasks
        self.marker = marker
    }
}

enum DescribeExportTasksOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "ExportTaskNotFound": return try await ExportTaskNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension DescribeGlobalClustersInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case filters = "Filters"
        case globalClusterIdentifier = "GlobalClusterIdentifier"
        case marker = "Marker"
        case maxRecords = "MaxRecords"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let filters = filters {
            if !filters.isEmpty {
                var filtersContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Filters"))
                for (index0, filter0) in filters.enumerated() {
                    try filtersContainer.encode(filter0, forKey: ClientRuntime.Key("Filter.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var filtersContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Filters"))
                try filtersContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let globalClusterIdentifier = globalClusterIdentifier {
            try container.encode(globalClusterIdentifier, forKey: ClientRuntime.Key("GlobalClusterIdentifier"))
        }
        if let marker = marker {
            try container.encode(marker, forKey: ClientRuntime.Key("Marker"))
        }
        if let maxRecords = maxRecords {
            try container.encode(maxRecords, forKey: ClientRuntime.Key("MaxRecords"))
        }
        try container.encode("DescribeGlobalClusters", forKey:ClientRuntime.Key("Action"))
        try container.encode("2014-10-31", forKey:ClientRuntime.Key("Version"))
    }
}

extension DescribeGlobalClustersInput {

    static func urlPathProvider(_ value: DescribeGlobalClustersInput) -> Swift.String? {
        return "/"
    }
}

public struct DescribeGlobalClustersInput: Swift.Equatable {
    /// This parameter isn't currently supported.
    public var filters: [RDSClientTypes.Filter]?
    /// The user-supplied DB cluster identifier. If this parameter is specified, information from only the specific DB cluster is returned. This parameter isn't case-sensitive. Constraints:
    ///
    /// * If supplied, must match an existing DBClusterIdentifier.
    public var globalClusterIdentifier: Swift.String?
    /// An optional pagination token provided by a previous DescribeGlobalClusters request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords.
    public var marker: Swift.String?
    /// The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. Default: 100 Constraints: Minimum 20, maximum 100.
    public var maxRecords: Swift.Int?

    public init(
        filters: [RDSClientTypes.Filter]? = nil,
        globalClusterIdentifier: Swift.String? = nil,
        marker: Swift.String? = nil,
        maxRecords: Swift.Int? = nil
    )
    {
        self.filters = filters
        self.globalClusterIdentifier = globalClusterIdentifier
        self.marker = marker
        self.maxRecords = maxRecords
    }
}

extension DescribeGlobalClustersOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<DescribeGlobalClustersOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["DescribeGlobalClustersResult"]
            var value = DescribeGlobalClustersOutput()
            value.globalClusters = try reader["GlobalClusters"].readListIfPresent(memberReadingClosure: RDSClientTypes.GlobalCluster.readingClosure, memberNodeInfo: "GlobalClusterMember", isFlattened: false)
            value.marker = try reader["Marker"].readIfPresent()
            return value
        }
    }
}

public struct DescribeGlobalClustersOutput: Swift.Equatable {
    /// The list of global clusters returned by this request.
    public var globalClusters: [RDSClientTypes.GlobalCluster]?
    /// An optional pagination token provided by a previous DescribeGlobalClusters request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords.
    public var marker: Swift.String?

    public init(
        globalClusters: [RDSClientTypes.GlobalCluster]? = nil,
        marker: Swift.String? = nil
    )
    {
        self.globalClusters = globalClusters
        self.marker = marker
    }
}

enum DescribeGlobalClustersOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "GlobalClusterNotFoundFault": return try await GlobalClusterNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension DescribeIntegrationsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case filters = "Filters"
        case integrationIdentifier = "IntegrationIdentifier"
        case marker = "Marker"
        case maxRecords = "MaxRecords"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let filters = filters {
            if !filters.isEmpty {
                var filtersContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Filters"))
                for (index0, filter0) in filters.enumerated() {
                    try filtersContainer.encode(filter0, forKey: ClientRuntime.Key("Filter.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var filtersContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Filters"))
                try filtersContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let integrationIdentifier = integrationIdentifier {
            try container.encode(integrationIdentifier, forKey: ClientRuntime.Key("IntegrationIdentifier"))
        }
        if let marker = marker {
            try container.encode(marker, forKey: ClientRuntime.Key("Marker"))
        }
        if let maxRecords = maxRecords {
            try container.encode(maxRecords, forKey: ClientRuntime.Key("MaxRecords"))
        }
        try container.encode("DescribeIntegrations", forKey:ClientRuntime.Key("Action"))
        try container.encode("2014-10-31", forKey:ClientRuntime.Key("Version"))
    }
}

extension DescribeIntegrationsInput {

    static func urlPathProvider(_ value: DescribeIntegrationsInput) -> Swift.String? {
        return "/"
    }
}

public struct DescribeIntegrationsInput: Swift.Equatable {
    /// A filter that specifies one or more resources to return.
    public var filters: [RDSClientTypes.Filter]?
    /// The unique identifier of the integration.
    public var integrationIdentifier: Swift.String?
    /// An optional pagination token provided by a previous DescribeIntegrations request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords.
    public var marker: Swift.String?
    /// The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. Default: 100 Constraints: Minimum 20, maximum 100.
    public var maxRecords: Swift.Int?

    public init(
        filters: [RDSClientTypes.Filter]? = nil,
        integrationIdentifier: Swift.String? = nil,
        marker: Swift.String? = nil,
        maxRecords: Swift.Int? = nil
    )
    {
        self.filters = filters
        self.integrationIdentifier = integrationIdentifier
        self.marker = marker
        self.maxRecords = maxRecords
    }
}

extension DescribeIntegrationsOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<DescribeIntegrationsOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["DescribeIntegrationsResult"]
            var value = DescribeIntegrationsOutput()
            value.integrations = try reader["Integrations"].readListIfPresent(memberReadingClosure: RDSClientTypes.Integration.readingClosure, memberNodeInfo: "Integration", isFlattened: false)
            value.marker = try reader["Marker"].readIfPresent()
            return value
        }
    }
}

public struct DescribeIntegrationsOutput: Swift.Equatable {
    /// A list of integrations.
    public var integrations: [RDSClientTypes.Integration]?
    /// A pagination token that can be used in a later DescribeIntegrations request.
    public var marker: Swift.String?

    public init(
        integrations: [RDSClientTypes.Integration]? = nil,
        marker: Swift.String? = nil
    )
    {
        self.integrations = integrations
        self.marker = marker
    }
}

enum DescribeIntegrationsOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "IntegrationNotFoundFault": return try await IntegrationNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension DescribeOptionGroupOptionsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case engineName = "EngineName"
        case filters = "Filters"
        case majorEngineVersion = "MajorEngineVersion"
        case marker = "Marker"
        case maxRecords = "MaxRecords"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let engineName = engineName {
            try container.encode(engineName, forKey: ClientRuntime.Key("EngineName"))
        }
        if let filters = filters {
            if !filters.isEmpty {
                var filtersContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Filters"))
                for (index0, filter0) in filters.enumerated() {
                    try filtersContainer.encode(filter0, forKey: ClientRuntime.Key("Filter.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var filtersContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Filters"))
                try filtersContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let majorEngineVersion = majorEngineVersion {
            try container.encode(majorEngineVersion, forKey: ClientRuntime.Key("MajorEngineVersion"))
        }
        if let marker = marker {
            try container.encode(marker, forKey: ClientRuntime.Key("Marker"))
        }
        if let maxRecords = maxRecords {
            try container.encode(maxRecords, forKey: ClientRuntime.Key("MaxRecords"))
        }
        try container.encode("DescribeOptionGroupOptions", forKey:ClientRuntime.Key("Action"))
        try container.encode("2014-10-31", forKey:ClientRuntime.Key("Version"))
    }
}

extension DescribeOptionGroupOptionsInput {

    static func urlPathProvider(_ value: DescribeOptionGroupOptionsInput) -> Swift.String? {
        return "/"
    }
}

///
public struct DescribeOptionGroupOptionsInput: Swift.Equatable {
    /// The name of the engine to describe options for. Valid Values:
    ///
    /// * db2-ae
    ///
    /// * db2-se
    ///
    /// * mariadb
    ///
    /// * mysql
    ///
    /// * oracle-ee
    ///
    /// * oracle-ee-cdb
    ///
    /// * oracle-se2
    ///
    /// * oracle-se2-cdb
    ///
    /// * postgres
    ///
    /// * sqlserver-ee
    ///
    /// * sqlserver-se
    ///
    /// * sqlserver-ex
    ///
    /// * sqlserver-web
    /// This member is required.
    public var engineName: Swift.String?
    /// This parameter isn't currently supported.
    public var filters: [RDSClientTypes.Filter]?
    /// If specified, filters the results to include only options for the specified major engine version.
    public var majorEngineVersion: Swift.String?
    /// An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords.
    public var marker: Swift.String?
    /// The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. Default: 100 Constraints: Minimum 20, maximum 100.
    public var maxRecords: Swift.Int?

    public init(
        engineName: Swift.String? = nil,
        filters: [RDSClientTypes.Filter]? = nil,
        majorEngineVersion: Swift.String? = nil,
        marker: Swift.String? = nil,
        maxRecords: Swift.Int? = nil
    )
    {
        self.engineName = engineName
        self.filters = filters
        self.majorEngineVersion = majorEngineVersion
        self.marker = marker
        self.maxRecords = maxRecords
    }
}

extension DescribeOptionGroupOptionsOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<DescribeOptionGroupOptionsOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["DescribeOptionGroupOptionsResult"]
            var value = DescribeOptionGroupOptionsOutput()
            value.marker = try reader["Marker"].readIfPresent()
            value.optionGroupOptions = try reader["OptionGroupOptions"].readListIfPresent(memberReadingClosure: RDSClientTypes.OptionGroupOption.readingClosure, memberNodeInfo: "OptionGroupOption", isFlattened: false)
            return value
        }
    }
}

///
public struct DescribeOptionGroupOptionsOutput: Swift.Equatable {
    /// An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords.
    public var marker: Swift.String?
    /// List of available option group options.
    public var optionGroupOptions: [RDSClientTypes.OptionGroupOption]?

    public init(
        marker: Swift.String? = nil,
        optionGroupOptions: [RDSClientTypes.OptionGroupOption]? = nil
    )
    {
        self.marker = marker
        self.optionGroupOptions = optionGroupOptions
    }
}

enum DescribeOptionGroupOptionsOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension DescribeOptionGroupsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case engineName = "EngineName"
        case filters = "Filters"
        case majorEngineVersion = "MajorEngineVersion"
        case marker = "Marker"
        case maxRecords = "MaxRecords"
        case optionGroupName = "OptionGroupName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let engineName = engineName {
            try container.encode(engineName, forKey: ClientRuntime.Key("EngineName"))
        }
        if let filters = filters {
            if !filters.isEmpty {
                var filtersContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Filters"))
                for (index0, filter0) in filters.enumerated() {
                    try filtersContainer.encode(filter0, forKey: ClientRuntime.Key("Filter.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var filtersContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Filters"))
                try filtersContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let majorEngineVersion = majorEngineVersion {
            try container.encode(majorEngineVersion, forKey: ClientRuntime.Key("MajorEngineVersion"))
        }
        if let marker = marker {
            try container.encode(marker, forKey: ClientRuntime.Key("Marker"))
        }
        if let maxRecords = maxRecords {
            try container.encode(maxRecords, forKey: ClientRuntime.Key("MaxRecords"))
        }
        if let optionGroupName = optionGroupName {
            try container.encode(optionGroupName, forKey: ClientRuntime.Key("OptionGroupName"))
        }
        try container.encode("DescribeOptionGroups", forKey:ClientRuntime.Key("Action"))
        try container.encode("2014-10-31", forKey:ClientRuntime.Key("Version"))
    }
}

extension DescribeOptionGroupsInput {

    static func urlPathProvider(_ value: DescribeOptionGroupsInput) -> Swift.String? {
        return "/"
    }
}

///
public struct DescribeOptionGroupsInput: Swift.Equatable {
    /// A filter to only include option groups associated with this database engine. Valid Values:
    ///
    /// * db2-ae
    ///
    /// * db2-se
    ///
    /// * mariadb
    ///
    /// * mysql
    ///
    /// * oracle-ee
    ///
    /// * oracle-ee-cdb
    ///
    /// * oracle-se2
    ///
    /// * oracle-se2-cdb
    ///
    /// * postgres
    ///
    /// * sqlserver-ee
    ///
    /// * sqlserver-se
    ///
    /// * sqlserver-ex
    ///
    /// * sqlserver-web
    public var engineName: Swift.String?
    /// This parameter isn't currently supported.
    public var filters: [RDSClientTypes.Filter]?
    /// Filters the list of option groups to only include groups associated with a specific database engine version. If specified, then EngineName must also be specified.
    public var majorEngineVersion: Swift.String?
    /// An optional pagination token provided by a previous DescribeOptionGroups request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords.
    public var marker: Swift.String?
    /// The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. Default: 100 Constraints: Minimum 20, maximum 100.
    public var maxRecords: Swift.Int?
    /// The name of the option group to describe. Can't be supplied together with EngineName or MajorEngineVersion.
    public var optionGroupName: Swift.String?

    public init(
        engineName: Swift.String? = nil,
        filters: [RDSClientTypes.Filter]? = nil,
        majorEngineVersion: Swift.String? = nil,
        marker: Swift.String? = nil,
        maxRecords: Swift.Int? = nil,
        optionGroupName: Swift.String? = nil
    )
    {
        self.engineName = engineName
        self.filters = filters
        self.majorEngineVersion = majorEngineVersion
        self.marker = marker
        self.maxRecords = maxRecords
        self.optionGroupName = optionGroupName
    }
}

extension DescribeOptionGroupsOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<DescribeOptionGroupsOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["DescribeOptionGroupsResult"]
            var value = DescribeOptionGroupsOutput()
            value.marker = try reader["Marker"].readIfPresent()
            value.optionGroupsList = try reader["OptionGroupsList"].readListIfPresent(memberReadingClosure: RDSClientTypes.OptionGroup.readingClosure, memberNodeInfo: "OptionGroup", isFlattened: false)
            return value
        }
    }
}

/// List of option groups.
public struct DescribeOptionGroupsOutput: Swift.Equatable {
    /// An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords.
    public var marker: Swift.String?
    /// List of option groups.
    public var optionGroupsList: [RDSClientTypes.OptionGroup]?

    public init(
        marker: Swift.String? = nil,
        optionGroupsList: [RDSClientTypes.OptionGroup]? = nil
    )
    {
        self.marker = marker
        self.optionGroupsList = optionGroupsList
    }
}

enum DescribeOptionGroupsOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "OptionGroupNotFoundFault": return try await OptionGroupNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension DescribeOrderableDBInstanceOptionsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case availabilityZoneGroup = "AvailabilityZoneGroup"
        case dbInstanceClass = "DBInstanceClass"
        case engine = "Engine"
        case engineVersion = "EngineVersion"
        case filters = "Filters"
        case licenseModel = "LicenseModel"
        case marker = "Marker"
        case maxRecords = "MaxRecords"
        case vpc = "Vpc"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let availabilityZoneGroup = availabilityZoneGroup {
            try container.encode(availabilityZoneGroup, forKey: ClientRuntime.Key("AvailabilityZoneGroup"))
        }
        if let dbInstanceClass = dbInstanceClass {
            try container.encode(dbInstanceClass, forKey: ClientRuntime.Key("DBInstanceClass"))
        }
        if let engine = engine {
            try container.encode(engine, forKey: ClientRuntime.Key("Engine"))
        }
        if let engineVersion = engineVersion {
            try container.encode(engineVersion, forKey: ClientRuntime.Key("EngineVersion"))
        }
        if let filters = filters {
            if !filters.isEmpty {
                var filtersContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Filters"))
                for (index0, filter0) in filters.enumerated() {
                    try filtersContainer.encode(filter0, forKey: ClientRuntime.Key("Filter.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var filtersContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Filters"))
                try filtersContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let licenseModel = licenseModel {
            try container.encode(licenseModel, forKey: ClientRuntime.Key("LicenseModel"))
        }
        if let marker = marker {
            try container.encode(marker, forKey: ClientRuntime.Key("Marker"))
        }
        if let maxRecords = maxRecords {
            try container.encode(maxRecords, forKey: ClientRuntime.Key("MaxRecords"))
        }
        if let vpc = vpc {
            try container.encode(vpc, forKey: ClientRuntime.Key("Vpc"))
        }
        try container.encode("DescribeOrderableDBInstanceOptions", forKey:ClientRuntime.Key("Action"))
        try container.encode("2014-10-31", forKey:ClientRuntime.Key("Version"))
    }
}

extension DescribeOrderableDBInstanceOptionsInput {

    static func urlPathProvider(_ value: DescribeOrderableDBInstanceOptionsInput) -> Swift.String? {
        return "/"
    }
}

///
public struct DescribeOrderableDBInstanceOptionsInput: Swift.Equatable {
    /// The Availability Zone group associated with a Local Zone. Specify this parameter to retrieve available options for the Local Zones in the group. Omit this parameter to show the available options in the specified Amazon Web Services Region. This setting doesn't apply to RDS Custom DB instances.
    public var availabilityZoneGroup: Swift.String?
    /// A filter to include only the available options for the specified DB instance class.
    public var dbInstanceClass: Swift.String?
    /// The name of the engine to describe DB instance options for. Valid Values:
    ///
    /// * aurora-mysql
    ///
    /// * aurora-postgresql
    ///
    /// * custom-oracle-ee
    ///
    /// * db2-ae
    ///
    /// * db2-se
    ///
    /// * mariadb
    ///
    /// * mysql
    ///
    /// * oracle-ee
    ///
    /// * oracle-ee-cdb
    ///
    /// * oracle-se2
    ///
    /// * oracle-se2-cdb
    ///
    /// * postgres
    ///
    /// * sqlserver-ee
    ///
    /// * sqlserver-se
    ///
    /// * sqlserver-ex
    ///
    /// * sqlserver-web
    /// This member is required.
    public var engine: Swift.String?
    /// A filter to include only the available options for the specified engine version.
    public var engineVersion: Swift.String?
    /// This parameter isn't currently supported.
    public var filters: [RDSClientTypes.Filter]?
    /// A filter to include only the available options for the specified license model. RDS Custom supports only the BYOL licensing model.
    public var licenseModel: Swift.String?
    /// An optional pagination token provided by a previous DescribeOrderableDBInstanceOptions request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords.
    public var marker: Swift.String?
    /// The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. Default: 100 Constraints: Minimum 20, maximum 10000.
    public var maxRecords: Swift.Int?
    /// Specifies whether to show only VPC or non-VPC offerings. RDS Custom supports only VPC offerings. RDS Custom supports only VPC offerings. If you describe non-VPC offerings for RDS Custom, the output shows VPC offerings.
    public var vpc: Swift.Bool?

    public init(
        availabilityZoneGroup: Swift.String? = nil,
        dbInstanceClass: Swift.String? = nil,
        engine: Swift.String? = nil,
        engineVersion: Swift.String? = nil,
        filters: [RDSClientTypes.Filter]? = nil,
        licenseModel: Swift.String? = nil,
        marker: Swift.String? = nil,
        maxRecords: Swift.Int? = nil,
        vpc: Swift.Bool? = nil
    )
    {
        self.availabilityZoneGroup = availabilityZoneGroup
        self.dbInstanceClass = dbInstanceClass
        self.engine = engine
        self.engineVersion = engineVersion
        self.filters = filters
        self.licenseModel = licenseModel
        self.marker = marker
        self.maxRecords = maxRecords
        self.vpc = vpc
    }
}

extension DescribeOrderableDBInstanceOptionsOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<DescribeOrderableDBInstanceOptionsOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["DescribeOrderableDBInstanceOptionsResult"]
            var value = DescribeOrderableDBInstanceOptionsOutput()
            value.marker = try reader["Marker"].readIfPresent()
            value.orderableDBInstanceOptions = try reader["OrderableDBInstanceOptions"].readListIfPresent(memberReadingClosure: RDSClientTypes.OrderableDBInstanceOption.readingClosure, memberNodeInfo: "OrderableDBInstanceOption", isFlattened: false)
            return value
        }
    }
}

/// Contains the result of a successful invocation of the DescribeOrderableDBInstanceOptions action.
public struct DescribeOrderableDBInstanceOptionsOutput: Swift.Equatable {
    /// An optional pagination token provided by a previous OrderableDBInstanceOptions request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords.
    public var marker: Swift.String?
    /// An OrderableDBInstanceOption structure containing information about orderable options for the DB instance.
    public var orderableDBInstanceOptions: [RDSClientTypes.OrderableDBInstanceOption]?

    public init(
        marker: Swift.String? = nil,
        orderableDBInstanceOptions: [RDSClientTypes.OrderableDBInstanceOption]? = nil
    )
    {
        self.marker = marker
        self.orderableDBInstanceOptions = orderableDBInstanceOptions
    }
}

enum DescribeOrderableDBInstanceOptionsOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension DescribePendingMaintenanceActionsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case filters = "Filters"
        case marker = "Marker"
        case maxRecords = "MaxRecords"
        case resourceIdentifier = "ResourceIdentifier"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let filters = filters {
            if !filters.isEmpty {
                var filtersContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Filters"))
                for (index0, filter0) in filters.enumerated() {
                    try filtersContainer.encode(filter0, forKey: ClientRuntime.Key("Filter.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var filtersContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Filters"))
                try filtersContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let marker = marker {
            try container.encode(marker, forKey: ClientRuntime.Key("Marker"))
        }
        if let maxRecords = maxRecords {
            try container.encode(maxRecords, forKey: ClientRuntime.Key("MaxRecords"))
        }
        if let resourceIdentifier = resourceIdentifier {
            try container.encode(resourceIdentifier, forKey: ClientRuntime.Key("ResourceIdentifier"))
        }
        try container.encode("DescribePendingMaintenanceActions", forKey:ClientRuntime.Key("Action"))
        try container.encode("2014-10-31", forKey:ClientRuntime.Key("Version"))
    }
}

extension DescribePendingMaintenanceActionsInput {

    static func urlPathProvider(_ value: DescribePendingMaintenanceActionsInput) -> Swift.String? {
        return "/"
    }
}

///
public struct DescribePendingMaintenanceActionsInput: Swift.Equatable {
    /// A filter that specifies one or more resources to return pending maintenance actions for. Supported filters:
    ///
    /// * db-cluster-id - Accepts DB cluster identifiers and DB cluster Amazon Resource Names (ARNs). The results list only includes pending maintenance actions for the DB clusters identified by these ARNs.
    ///
    /// * db-instance-id - Accepts DB instance identifiers and DB instance ARNs. The results list only includes pending maintenance actions for the DB instances identified by these ARNs.
    public var filters: [RDSClientTypes.Filter]?
    /// An optional pagination token provided by a previous DescribePendingMaintenanceActions request. If this parameter is specified, the response includes only records beyond the marker, up to a number of records specified by MaxRecords.
    public var marker: Swift.String?
    /// The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. Default: 100 Constraints: Minimum 20, maximum 100.
    public var maxRecords: Swift.Int?
    /// The ARN of a resource to return pending maintenance actions for.
    public var resourceIdentifier: Swift.String?

    public init(
        filters: [RDSClientTypes.Filter]? = nil,
        marker: Swift.String? = nil,
        maxRecords: Swift.Int? = nil,
        resourceIdentifier: Swift.String? = nil
    )
    {
        self.filters = filters
        self.marker = marker
        self.maxRecords = maxRecords
        self.resourceIdentifier = resourceIdentifier
    }
}

extension DescribePendingMaintenanceActionsOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<DescribePendingMaintenanceActionsOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["DescribePendingMaintenanceActionsResult"]
            var value = DescribePendingMaintenanceActionsOutput()
            value.marker = try reader["Marker"].readIfPresent()
            value.pendingMaintenanceActions = try reader["PendingMaintenanceActions"].readListIfPresent(memberReadingClosure: RDSClientTypes.ResourcePendingMaintenanceActions.readingClosure, memberNodeInfo: "ResourcePendingMaintenanceActions", isFlattened: false)
            return value
        }
    }
}

/// Data returned from the DescribePendingMaintenanceActions action.
public struct DescribePendingMaintenanceActionsOutput: Swift.Equatable {
    /// An optional pagination token provided by a previous DescribePendingMaintenanceActions request. If this parameter is specified, the response includes only records beyond the marker, up to a number of records specified by MaxRecords.
    public var marker: Swift.String?
    /// A list of the pending maintenance actions for the resource.
    public var pendingMaintenanceActions: [RDSClientTypes.ResourcePendingMaintenanceActions]?

    public init(
        marker: Swift.String? = nil,
        pendingMaintenanceActions: [RDSClientTypes.ResourcePendingMaintenanceActions]? = nil
    )
    {
        self.marker = marker
        self.pendingMaintenanceActions = pendingMaintenanceActions
    }
}

enum DescribePendingMaintenanceActionsOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "ResourceNotFoundFault": return try await ResourceNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension DescribeReservedDBInstancesInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dbInstanceClass = "DBInstanceClass"
        case duration = "Duration"
        case filters = "Filters"
        case leaseId = "LeaseId"
        case marker = "Marker"
        case maxRecords = "MaxRecords"
        case multiAZ = "MultiAZ"
        case offeringType = "OfferingType"
        case productDescription = "ProductDescription"
        case reservedDBInstanceId = "ReservedDBInstanceId"
        case reservedDBInstancesOfferingId = "ReservedDBInstancesOfferingId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let dbInstanceClass = dbInstanceClass {
            try container.encode(dbInstanceClass, forKey: ClientRuntime.Key("DBInstanceClass"))
        }
        if let duration = duration {
            try container.encode(duration, forKey: ClientRuntime.Key("Duration"))
        }
        if let filters = filters {
            if !filters.isEmpty {
                var filtersContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Filters"))
                for (index0, filter0) in filters.enumerated() {
                    try filtersContainer.encode(filter0, forKey: ClientRuntime.Key("Filter.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var filtersContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Filters"))
                try filtersContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let leaseId = leaseId {
            try container.encode(leaseId, forKey: ClientRuntime.Key("LeaseId"))
        }
        if let marker = marker {
            try container.encode(marker, forKey: ClientRuntime.Key("Marker"))
        }
        if let maxRecords = maxRecords {
            try container.encode(maxRecords, forKey: ClientRuntime.Key("MaxRecords"))
        }
        if let multiAZ = multiAZ {
            try container.encode(multiAZ, forKey: ClientRuntime.Key("MultiAZ"))
        }
        if let offeringType = offeringType {
            try container.encode(offeringType, forKey: ClientRuntime.Key("OfferingType"))
        }
        if let productDescription = productDescription {
            try container.encode(productDescription, forKey: ClientRuntime.Key("ProductDescription"))
        }
        if let reservedDBInstanceId = reservedDBInstanceId {
            try container.encode(reservedDBInstanceId, forKey: ClientRuntime.Key("ReservedDBInstanceId"))
        }
        if let reservedDBInstancesOfferingId = reservedDBInstancesOfferingId {
            try container.encode(reservedDBInstancesOfferingId, forKey: ClientRuntime.Key("ReservedDBInstancesOfferingId"))
        }
        try container.encode("DescribeReservedDBInstances", forKey:ClientRuntime.Key("Action"))
        try container.encode("2014-10-31", forKey:ClientRuntime.Key("Version"))
    }
}

extension DescribeReservedDBInstancesInput {

    static func urlPathProvider(_ value: DescribeReservedDBInstancesInput) -> Swift.String? {
        return "/"
    }
}

///
public struct DescribeReservedDBInstancesInput: Swift.Equatable {
    /// The DB instance class filter value. Specify this parameter to show only those reservations matching the specified DB instances class.
    public var dbInstanceClass: Swift.String?
    /// The duration filter value, specified in years or seconds. Specify this parameter to show only reservations for this duration. Valid Values: 1 | 3 | 31536000 | 94608000
    public var duration: Swift.String?
    /// This parameter isn't currently supported.
    public var filters: [RDSClientTypes.Filter]?
    /// The lease identifier filter value. Specify this parameter to show only the reservation that matches the specified lease ID. Amazon Web Services Support might request the lease ID for an issue related to a reserved DB instance.
    public var leaseId: Swift.String?
    /// An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords.
    public var marker: Swift.String?
    /// The maximum number of records to include in the response. If more than the MaxRecords value is available, a pagination token called a marker is included in the response so you can retrieve the remaining results. Default: 100 Constraints: Minimum 20, maximum 100.
    public var maxRecords: Swift.Int?
    /// Specifies whether to show only those reservations that support Multi-AZ.
    public var multiAZ: Swift.Bool?
    /// The offering type filter value. Specify this parameter to show only the available offerings matching the specified offering type. Valid Values: "Partial Upfront" | "All Upfront" | "No Upfront"
    public var offeringType: Swift.String?
    /// The product description filter value. Specify this parameter to show only those reservations matching the specified product description.
    public var productDescription: Swift.String?
    /// The reserved DB instance identifier filter value. Specify this parameter to show only the reservation that matches the specified reservation ID.
    public var reservedDBInstanceId: Swift.String?
    /// The offering identifier filter value. Specify this parameter to show only purchased reservations matching the specified offering identifier.
    public var reservedDBInstancesOfferingId: Swift.String?

    public init(
        dbInstanceClass: Swift.String? = nil,
        duration: Swift.String? = nil,
        filters: [RDSClientTypes.Filter]? = nil,
        leaseId: Swift.String? = nil,
        marker: Swift.String? = nil,
        maxRecords: Swift.Int? = nil,
        multiAZ: Swift.Bool? = nil,
        offeringType: Swift.String? = nil,
        productDescription: Swift.String? = nil,
        reservedDBInstanceId: Swift.String? = nil,
        reservedDBInstancesOfferingId: Swift.String? = nil
    )
    {
        self.dbInstanceClass = dbInstanceClass
        self.duration = duration
        self.filters = filters
        self.leaseId = leaseId
        self.marker = marker
        self.maxRecords = maxRecords
        self.multiAZ = multiAZ
        self.offeringType = offeringType
        self.productDescription = productDescription
        self.reservedDBInstanceId = reservedDBInstanceId
        self.reservedDBInstancesOfferingId = reservedDBInstancesOfferingId
    }
}

extension DescribeReservedDBInstancesOfferingsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dbInstanceClass = "DBInstanceClass"
        case duration = "Duration"
        case filters = "Filters"
        case marker = "Marker"
        case maxRecords = "MaxRecords"
        case multiAZ = "MultiAZ"
        case offeringType = "OfferingType"
        case productDescription = "ProductDescription"
        case reservedDBInstancesOfferingId = "ReservedDBInstancesOfferingId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let dbInstanceClass = dbInstanceClass {
            try container.encode(dbInstanceClass, forKey: ClientRuntime.Key("DBInstanceClass"))
        }
        if let duration = duration {
            try container.encode(duration, forKey: ClientRuntime.Key("Duration"))
        }
        if let filters = filters {
            if !filters.isEmpty {
                var filtersContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Filters"))
                for (index0, filter0) in filters.enumerated() {
                    try filtersContainer.encode(filter0, forKey: ClientRuntime.Key("Filter.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var filtersContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Filters"))
                try filtersContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let marker = marker {
            try container.encode(marker, forKey: ClientRuntime.Key("Marker"))
        }
        if let maxRecords = maxRecords {
            try container.encode(maxRecords, forKey: ClientRuntime.Key("MaxRecords"))
        }
        if let multiAZ = multiAZ {
            try container.encode(multiAZ, forKey: ClientRuntime.Key("MultiAZ"))
        }
        if let offeringType = offeringType {
            try container.encode(offeringType, forKey: ClientRuntime.Key("OfferingType"))
        }
        if let productDescription = productDescription {
            try container.encode(productDescription, forKey: ClientRuntime.Key("ProductDescription"))
        }
        if let reservedDBInstancesOfferingId = reservedDBInstancesOfferingId {
            try container.encode(reservedDBInstancesOfferingId, forKey: ClientRuntime.Key("ReservedDBInstancesOfferingId"))
        }
        try container.encode("DescribeReservedDBInstancesOfferings", forKey:ClientRuntime.Key("Action"))
        try container.encode("2014-10-31", forKey:ClientRuntime.Key("Version"))
    }
}

extension DescribeReservedDBInstancesOfferingsInput {

    static func urlPathProvider(_ value: DescribeReservedDBInstancesOfferingsInput) -> Swift.String? {
        return "/"
    }
}

///
public struct DescribeReservedDBInstancesOfferingsInput: Swift.Equatable {
    /// The DB instance class filter value. Specify this parameter to show only the available offerings matching the specified DB instance class.
    public var dbInstanceClass: Swift.String?
    /// Duration filter value, specified in years or seconds. Specify this parameter to show only reservations for this duration. Valid Values: 1 | 3 | 31536000 | 94608000
    public var duration: Swift.String?
    /// This parameter isn't currently supported.
    public var filters: [RDSClientTypes.Filter]?
    /// An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords.
    public var marker: Swift.String?
    /// The maximum number of records to include in the response. If more than the MaxRecords value is available, a pagination token called a marker is included in the response so you can retrieve the remaining results. Default: 100 Constraints: Minimum 20, maximum 100.
    public var maxRecords: Swift.Int?
    /// Specifies whether to show only those reservations that support Multi-AZ.
    public var multiAZ: Swift.Bool?
    /// The offering type filter value. Specify this parameter to show only the available offerings matching the specified offering type. Valid Values: "Partial Upfront" | "All Upfront" | "No Upfront"
    public var offeringType: Swift.String?
    /// Product description filter value. Specify this parameter to show only the available offerings that contain the specified product description. The results show offerings that partially match the filter value.
    public var productDescription: Swift.String?
    /// The offering identifier filter value. Specify this parameter to show only the available offering that matches the specified reservation identifier. Example: 438012d3-4052-4cc7-b2e3-8d3372e0e706
    public var reservedDBInstancesOfferingId: Swift.String?

    public init(
        dbInstanceClass: Swift.String? = nil,
        duration: Swift.String? = nil,
        filters: [RDSClientTypes.Filter]? = nil,
        marker: Swift.String? = nil,
        maxRecords: Swift.Int? = nil,
        multiAZ: Swift.Bool? = nil,
        offeringType: Swift.String? = nil,
        productDescription: Swift.String? = nil,
        reservedDBInstancesOfferingId: Swift.String? = nil
    )
    {
        self.dbInstanceClass = dbInstanceClass
        self.duration = duration
        self.filters = filters
        self.marker = marker
        self.maxRecords = maxRecords
        self.multiAZ = multiAZ
        self.offeringType = offeringType
        self.productDescription = productDescription
        self.reservedDBInstancesOfferingId = reservedDBInstancesOfferingId
    }
}

extension DescribeReservedDBInstancesOfferingsOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<DescribeReservedDBInstancesOfferingsOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["DescribeReservedDBInstancesOfferingsResult"]
            var value = DescribeReservedDBInstancesOfferingsOutput()
            value.marker = try reader["Marker"].readIfPresent()
            value.reservedDBInstancesOfferings = try reader["ReservedDBInstancesOfferings"].readListIfPresent(memberReadingClosure: RDSClientTypes.ReservedDBInstancesOffering.readingClosure, memberNodeInfo: "ReservedDBInstancesOffering", isFlattened: false)
            return value
        }
    }
}

/// Contains the result of a successful invocation of the DescribeReservedDBInstancesOfferings action.
public struct DescribeReservedDBInstancesOfferingsOutput: Swift.Equatable {
    /// An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords.
    public var marker: Swift.String?
    /// A list of reserved DB instance offerings.
    public var reservedDBInstancesOfferings: [RDSClientTypes.ReservedDBInstancesOffering]?

    public init(
        marker: Swift.String? = nil,
        reservedDBInstancesOfferings: [RDSClientTypes.ReservedDBInstancesOffering]? = nil
    )
    {
        self.marker = marker
        self.reservedDBInstancesOfferings = reservedDBInstancesOfferings
    }
}

enum DescribeReservedDBInstancesOfferingsOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "ReservedDBInstancesOfferingNotFound": return try await ReservedDBInstancesOfferingNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension DescribeReservedDBInstancesOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<DescribeReservedDBInstancesOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["DescribeReservedDBInstancesResult"]
            var value = DescribeReservedDBInstancesOutput()
            value.marker = try reader["Marker"].readIfPresent()
            value.reservedDBInstances = try reader["ReservedDBInstances"].readListIfPresent(memberReadingClosure: RDSClientTypes.ReservedDBInstance.readingClosure, memberNodeInfo: "ReservedDBInstance", isFlattened: false)
            return value
        }
    }
}

/// Contains the result of a successful invocation of the DescribeReservedDBInstances action.
public struct DescribeReservedDBInstancesOutput: Swift.Equatable {
    /// An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords.
    public var marker: Swift.String?
    /// A list of reserved DB instances.
    public var reservedDBInstances: [RDSClientTypes.ReservedDBInstance]?

    public init(
        marker: Swift.String? = nil,
        reservedDBInstances: [RDSClientTypes.ReservedDBInstance]? = nil
    )
    {
        self.marker = marker
        self.reservedDBInstances = reservedDBInstances
    }
}

enum DescribeReservedDBInstancesOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "ReservedDBInstanceNotFound": return try await ReservedDBInstanceNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension DescribeSourceRegionsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case filters = "Filters"
        case marker = "Marker"
        case maxRecords = "MaxRecords"
        case regionName = "RegionName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let filters = filters {
            if !filters.isEmpty {
                var filtersContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Filters"))
                for (index0, filter0) in filters.enumerated() {
                    try filtersContainer.encode(filter0, forKey: ClientRuntime.Key("Filter.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var filtersContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Filters"))
                try filtersContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let marker = marker {
            try container.encode(marker, forKey: ClientRuntime.Key("Marker"))
        }
        if let maxRecords = maxRecords {
            try container.encode(maxRecords, forKey: ClientRuntime.Key("MaxRecords"))
        }
        if let regionName = regionName {
            try container.encode(regionName, forKey: ClientRuntime.Key("RegionName"))
        }
        try container.encode("DescribeSourceRegions", forKey:ClientRuntime.Key("Action"))
        try container.encode("2014-10-31", forKey:ClientRuntime.Key("Version"))
    }
}

extension DescribeSourceRegionsInput {

    static func urlPathProvider(_ value: DescribeSourceRegionsInput) -> Swift.String? {
        return "/"
    }
}

///
public struct DescribeSourceRegionsInput: Swift.Equatable {
    /// This parameter isn't currently supported.
    public var filters: [RDSClientTypes.Filter]?
    /// An optional pagination token provided by a previous DescribeSourceRegions request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords.
    public var marker: Swift.String?
    /// The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a pagination token called a marker is included in the response so you can retrieve the remaining results. Default: 100 Constraints: Minimum 20, maximum 100.
    public var maxRecords: Swift.Int?
    /// The source Amazon Web Services Region name. For example, us-east-1. Constraints:
    ///
    /// * Must specify a valid Amazon Web Services Region name.
    public var regionName: Swift.String?

    public init(
        filters: [RDSClientTypes.Filter]? = nil,
        marker: Swift.String? = nil,
        maxRecords: Swift.Int? = nil,
        regionName: Swift.String? = nil
    )
    {
        self.filters = filters
        self.marker = marker
        self.maxRecords = maxRecords
        self.regionName = regionName
    }
}

extension DescribeSourceRegionsOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<DescribeSourceRegionsOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["DescribeSourceRegionsResult"]
            var value = DescribeSourceRegionsOutput()
            value.marker = try reader["Marker"].readIfPresent()
            value.sourceRegions = try reader["SourceRegions"].readListIfPresent(memberReadingClosure: RDSClientTypes.SourceRegion.readingClosure, memberNodeInfo: "SourceRegion", isFlattened: false)
            return value
        }
    }
}

/// Contains the result of a successful invocation of the DescribeSourceRegions action.
public struct DescribeSourceRegionsOutput: Swift.Equatable {
    /// An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords.
    public var marker: Swift.String?
    /// A list of SourceRegion instances that contains each source Amazon Web Services Region that the current Amazon Web Services Region can get a read replica or a DB snapshot from.
    public var sourceRegions: [RDSClientTypes.SourceRegion]?

    public init(
        marker: Swift.String? = nil,
        sourceRegions: [RDSClientTypes.SourceRegion]? = nil
    )
    {
        self.marker = marker
        self.sourceRegions = sourceRegions
    }
}

enum DescribeSourceRegionsOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension DescribeTenantDatabasesInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dbInstanceIdentifier = "DBInstanceIdentifier"
        case filters = "Filters"
        case marker = "Marker"
        case maxRecords = "MaxRecords"
        case tenantDBName = "TenantDBName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let dbInstanceIdentifier = dbInstanceIdentifier {
            try container.encode(dbInstanceIdentifier, forKey: ClientRuntime.Key("DBInstanceIdentifier"))
        }
        if let filters = filters {
            if !filters.isEmpty {
                var filtersContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Filters"))
                for (index0, filter0) in filters.enumerated() {
                    try filtersContainer.encode(filter0, forKey: ClientRuntime.Key("Filter.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var filtersContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Filters"))
                try filtersContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let marker = marker {
            try container.encode(marker, forKey: ClientRuntime.Key("Marker"))
        }
        if let maxRecords = maxRecords {
            try container.encode(maxRecords, forKey: ClientRuntime.Key("MaxRecords"))
        }
        if let tenantDBName = tenantDBName {
            try container.encode(tenantDBName, forKey: ClientRuntime.Key("TenantDBName"))
        }
        try container.encode("DescribeTenantDatabases", forKey:ClientRuntime.Key("Action"))
        try container.encode("2014-10-31", forKey:ClientRuntime.Key("Version"))
    }
}

extension DescribeTenantDatabasesInput {

    static func urlPathProvider(_ value: DescribeTenantDatabasesInput) -> Swift.String? {
        return "/"
    }
}

public struct DescribeTenantDatabasesInput: Swift.Equatable {
    /// The user-supplied DB instance identifier, which must match the identifier of an existing instance owned by the Amazon Web Services account. This parameter isn't case-sensitive.
    public var dbInstanceIdentifier: Swift.String?
    /// A filter that specifies one or more database tenants to describe. Supported filters:
    ///
    /// * tenant-db-name - Tenant database names. The results list only includes information about the tenant databases that match these tenant DB names.
    ///
    /// * tenant-database-resource-id - Tenant database resource identifiers.
    ///
    /// * dbi-resource-id - DB instance resource identifiers. The results list only includes information about the tenants contained within the DB instances identified by these resource identifiers.
    public var filters: [RDSClientTypes.Filter]?
    /// An optional pagination token provided by a previous DescribeTenantDatabases request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords.
    public var marker: Swift.String?
    /// The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a pagination token called a marker is included in the response so that you can retrieve the remaining results.
    public var maxRecords: Swift.Int?
    /// The user-supplied tenant database name, which must match the name of an existing tenant database on the specified DB instance owned by your Amazon Web Services account. This parameter isn’t case-sensitive.
    public var tenantDBName: Swift.String?

    public init(
        dbInstanceIdentifier: Swift.String? = nil,
        filters: [RDSClientTypes.Filter]? = nil,
        marker: Swift.String? = nil,
        maxRecords: Swift.Int? = nil,
        tenantDBName: Swift.String? = nil
    )
    {
        self.dbInstanceIdentifier = dbInstanceIdentifier
        self.filters = filters
        self.marker = marker
        self.maxRecords = maxRecords
        self.tenantDBName = tenantDBName
    }
}

extension DescribeTenantDatabasesOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<DescribeTenantDatabasesOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["DescribeTenantDatabasesResult"]
            var value = DescribeTenantDatabasesOutput()
            value.marker = try reader["Marker"].readIfPresent()
            value.tenantDatabases = try reader["TenantDatabases"].readListIfPresent(memberReadingClosure: RDSClientTypes.TenantDatabase.readingClosure, memberNodeInfo: "TenantDatabase", isFlattened: false)
            return value
        }
    }
}

public struct DescribeTenantDatabasesOutput: Swift.Equatable {
    /// An optional pagination token provided by a previous DescribeTenantDatabases request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords.
    public var marker: Swift.String?
    /// An array of the tenant databases requested by the DescribeTenantDatabases operation.
    public var tenantDatabases: [RDSClientTypes.TenantDatabase]?

    public init(
        marker: Swift.String? = nil,
        tenantDatabases: [RDSClientTypes.TenantDatabase]? = nil
    )
    {
        self.marker = marker
        self.tenantDatabases = tenantDatabases
    }
}

enum DescribeTenantDatabasesOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "DBInstanceNotFound": return try await DBInstanceNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension DescribeValidDBInstanceModificationsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dbInstanceIdentifier = "DBInstanceIdentifier"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let dbInstanceIdentifier = dbInstanceIdentifier {
            try container.encode(dbInstanceIdentifier, forKey: ClientRuntime.Key("DBInstanceIdentifier"))
        }
        try container.encode("DescribeValidDBInstanceModifications", forKey:ClientRuntime.Key("Action"))
        try container.encode("2014-10-31", forKey:ClientRuntime.Key("Version"))
    }
}

extension DescribeValidDBInstanceModificationsInput {

    static func urlPathProvider(_ value: DescribeValidDBInstanceModificationsInput) -> Swift.String? {
        return "/"
    }
}

///
public struct DescribeValidDBInstanceModificationsInput: Swift.Equatable {
    /// The customer identifier or the ARN of your DB instance.
    /// This member is required.
    public var dbInstanceIdentifier: Swift.String?

    public init(
        dbInstanceIdentifier: Swift.String? = nil
    )
    {
        self.dbInstanceIdentifier = dbInstanceIdentifier
    }
}

extension DescribeValidDBInstanceModificationsOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<DescribeValidDBInstanceModificationsOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["DescribeValidDBInstanceModificationsResult"]
            var value = DescribeValidDBInstanceModificationsOutput()
            value.validDBInstanceModificationsMessage = try reader["ValidDBInstanceModificationsMessage"].readIfPresent(readingClosure: RDSClientTypes.ValidDBInstanceModificationsMessage.readingClosure)
            return value
        }
    }
}

public struct DescribeValidDBInstanceModificationsOutput: Swift.Equatable {
    /// Information about valid modifications that you can make to your DB instance. Contains the result of a successful call to the DescribeValidDBInstanceModifications action. You can use this information when you call ModifyDBInstance.
    public var validDBInstanceModificationsMessage: RDSClientTypes.ValidDBInstanceModificationsMessage?

    public init(
        validDBInstanceModificationsMessage: RDSClientTypes.ValidDBInstanceModificationsMessage? = nil
    )
    {
        self.validDBInstanceModificationsMessage = validDBInstanceModificationsMessage
    }
}

enum DescribeValidDBInstanceModificationsOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "DBInstanceNotFound": return try await DBInstanceNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "InvalidDBInstanceState": return try await InvalidDBInstanceStateFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension DisableHttpEndpointInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case resourceArn = "ResourceArn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let resourceArn = resourceArn {
            try container.encode(resourceArn, forKey: ClientRuntime.Key("ResourceArn"))
        }
        try container.encode("DisableHttpEndpoint", forKey:ClientRuntime.Key("Action"))
        try container.encode("2014-10-31", forKey:ClientRuntime.Key("Version"))
    }
}

extension DisableHttpEndpointInput {

    static func urlPathProvider(_ value: DisableHttpEndpointInput) -> Swift.String? {
        return "/"
    }
}

public struct DisableHttpEndpointInput: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the DB cluster.
    /// This member is required.
    public var resourceArn: Swift.String?

    public init(
        resourceArn: Swift.String? = nil
    )
    {
        self.resourceArn = resourceArn
    }
}

extension DisableHttpEndpointOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<DisableHttpEndpointOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["DisableHttpEndpointResult"]
            var value = DisableHttpEndpointOutput()
            value.httpEndpointEnabled = try reader["HttpEndpointEnabled"].readIfPresent()
            value.resourceArn = try reader["ResourceArn"].readIfPresent()
            return value
        }
    }
}

public struct DisableHttpEndpointOutput: Swift.Equatable {
    /// Indicates whether the HTTP endpoint is enabled or disabled for the DB cluster.
    public var httpEndpointEnabled: Swift.Bool?
    /// The ARN of the DB cluster.
    public var resourceArn: Swift.String?

    public init(
        httpEndpointEnabled: Swift.Bool? = nil,
        resourceArn: Swift.String? = nil
    )
    {
        self.httpEndpointEnabled = httpEndpointEnabled
        self.resourceArn = resourceArn
    }
}

enum DisableHttpEndpointOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "InvalidResourceStateFault": return try await InvalidResourceStateFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "ResourceNotFoundFault": return try await ResourceNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension RDSClientTypes.DocLink: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case text = "Text"
        case url = "Url"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let text = text {
            try container.encode(text, forKey: ClientRuntime.Key("Text"))
        }
        if let url = url {
            try container.encode(url, forKey: ClientRuntime.Key("Url"))
        }
    }

    static var readingClosure: SmithyReadWrite.ReadingClosure<RDSClientTypes.DocLink, SmithyXML.Reader> {
        return { reader in
            guard reader.content != nil else { return nil }
            var value = RDSClientTypes.DocLink()
            value.text = try reader["Text"].readIfPresent()
            value.url = try reader["Url"].readIfPresent()
            return value
        }
    }
}

extension RDSClientTypes {
    /// A link to documentation that provides additional information for a recommendation.
    public struct DocLink: Swift.Equatable {
        /// The text with the link to documentation for the recommendation.
        public var text: Swift.String?
        /// The URL for the documentation for the recommendation.
        public var url: Swift.String?

        public init(
            text: Swift.String? = nil,
            url: Swift.String? = nil
        )
        {
            self.text = text
            self.url = url
        }
    }

}

extension RDSClientTypes.DomainMembership: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case authSecretArn = "AuthSecretArn"
        case dnsIps = "DnsIps"
        case domain = "Domain"
        case fqdn = "FQDN"
        case iamRoleName = "IAMRoleName"
        case ou = "OU"
        case status = "Status"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let authSecretArn = authSecretArn {
            try container.encode(authSecretArn, forKey: ClientRuntime.Key("AuthSecretArn"))
        }
        if let dnsIps = dnsIps {
            if !dnsIps.isEmpty {
                var dnsIpsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("DnsIps"))
                for (index0, string0) in dnsIps.enumerated() {
                    try dnsIpsContainer.encode(string0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var dnsIpsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("DnsIps"))
                try dnsIpsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let domain = domain {
            try container.encode(domain, forKey: ClientRuntime.Key("Domain"))
        }
        if let fqdn = fqdn {
            try container.encode(fqdn, forKey: ClientRuntime.Key("FQDN"))
        }
        if let iamRoleName = iamRoleName {
            try container.encode(iamRoleName, forKey: ClientRuntime.Key("IAMRoleName"))
        }
        if let ou = ou {
            try container.encode(ou, forKey: ClientRuntime.Key("OU"))
        }
        if let status = status {
            try container.encode(status, forKey: ClientRuntime.Key("Status"))
        }
    }

    static var readingClosure: SmithyReadWrite.ReadingClosure<RDSClientTypes.DomainMembership, SmithyXML.Reader> {
        return { reader in
            guard reader.content != nil else { return nil }
            var value = RDSClientTypes.DomainMembership()
            value.domain = try reader["Domain"].readIfPresent()
            value.status = try reader["Status"].readIfPresent()
            value.fqdn = try reader["FQDN"].readIfPresent()
            value.iamRoleName = try reader["IAMRoleName"].readIfPresent()
            value.ou = try reader["OU"].readIfPresent()
            value.authSecretArn = try reader["AuthSecretArn"].readIfPresent()
            value.dnsIps = try reader["DnsIps"].readListIfPresent(memberReadingClosure: Swift.String.readingClosure, memberNodeInfo: "member", isFlattened: false)
            return value
        }
    }
}

extension RDSClientTypes {
    /// An Active Directory Domain membership record associated with the DB instance or cluster.
    public struct DomainMembership: Swift.Equatable {
        /// The ARN for the Secrets Manager secret with the credentials for the user that's a member of the domain.
        public var authSecretArn: Swift.String?
        /// The IPv4 DNS IP addresses of the primary and secondary Active Directory domain controllers.
        public var dnsIps: [Swift.String]?
        /// The identifier of the Active Directory Domain.
        public var domain: Swift.String?
        /// The fully qualified domain name (FQDN) of the Active Directory Domain.
        public var fqdn: Swift.String?
        /// The name of the IAM role used when making API calls to the Directory Service.
        public var iamRoleName: Swift.String?
        /// The Active Directory organizational unit for the DB instance or cluster.
        public var ou: Swift.String?
        /// The status of the Active Directory Domain membership for the DB instance or cluster. Values include joined, pending-join, failed, and so on.
        public var status: Swift.String?

        public init(
            authSecretArn: Swift.String? = nil,
            dnsIps: [Swift.String]? = nil,
            domain: Swift.String? = nil,
            fqdn: Swift.String? = nil,
            iamRoleName: Swift.String? = nil,
            ou: Swift.String? = nil,
            status: Swift.String? = nil
        )
        {
            self.authSecretArn = authSecretArn
            self.dnsIps = dnsIps
            self.domain = domain
            self.fqdn = fqdn
            self.iamRoleName = iamRoleName
            self.ou = ou
            self.status = status
        }
    }

}

extension DomainNotFoundFault {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = DomainNotFoundFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// Domain doesn't refer to an existing Active Directory domain.
public struct DomainNotFoundFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "DomainNotFoundFault" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension RDSClientTypes.DoubleRange: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case from = "From"
        case to = "To"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let from = from {
            try container.encode(from, forKey: ClientRuntime.Key("From"))
        }
        if let to = to {
            try container.encode(to, forKey: ClientRuntime.Key("To"))
        }
    }

    static var readingClosure: SmithyReadWrite.ReadingClosure<RDSClientTypes.DoubleRange, SmithyXML.Reader> {
        return { reader in
            guard reader.content != nil else { return nil }
            var value = RDSClientTypes.DoubleRange()
            value.from = try reader["From"].readIfPresent()
            value.to = try reader["To"].readIfPresent()
            return value
        }
    }
}

extension RDSClientTypes {
    /// A range of double values.
    public struct DoubleRange: Swift.Equatable {
        /// The minimum value in the range.
        public var from: Swift.Double?
        /// The maximum value in the range.
        public var to: Swift.Double?

        public init(
            from: Swift.Double? = nil,
            to: Swift.Double? = nil
        )
        {
            self.from = from
            self.to = to
        }
    }

}

extension DownloadDBLogFilePortionInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dbInstanceIdentifier = "DBInstanceIdentifier"
        case logFileName = "LogFileName"
        case marker = "Marker"
        case numberOfLines = "NumberOfLines"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let dbInstanceIdentifier = dbInstanceIdentifier {
            try container.encode(dbInstanceIdentifier, forKey: ClientRuntime.Key("DBInstanceIdentifier"))
        }
        if let logFileName = logFileName {
            try container.encode(logFileName, forKey: ClientRuntime.Key("LogFileName"))
        }
        if let marker = marker {
            try container.encode(marker, forKey: ClientRuntime.Key("Marker"))
        }
        if let numberOfLines = numberOfLines {
            try container.encode(numberOfLines, forKey: ClientRuntime.Key("NumberOfLines"))
        }
        try container.encode("DownloadDBLogFilePortion", forKey:ClientRuntime.Key("Action"))
        try container.encode("2014-10-31", forKey:ClientRuntime.Key("Version"))
    }
}

extension DownloadDBLogFilePortionInput {

    static func urlPathProvider(_ value: DownloadDBLogFilePortionInput) -> Swift.String? {
        return "/"
    }
}

///
public struct DownloadDBLogFilePortionInput: Swift.Equatable {
    /// The customer-assigned name of the DB instance that contains the log files you want to list. Constraints:
    ///
    /// * Must match the identifier of an existing DBInstance.
    /// This member is required.
    public var dbInstanceIdentifier: Swift.String?
    /// The name of the log file to be downloaded.
    /// This member is required.
    public var logFileName: Swift.String?
    /// The pagination token provided in the previous request or "0". If the Marker parameter is specified the response includes only records beyond the marker until the end of the file or up to NumberOfLines.
    public var marker: Swift.String?
    /// The number of lines to download. If the number of lines specified results in a file over 1 MB in size, the file is truncated at 1 MB in size. If the NumberOfLines parameter is specified, then the block of lines returned can be from the beginning or the end of the log file, depending on the value of the Marker parameter.
    ///
    /// * If neither Marker or NumberOfLines are specified, the entire log file is returned up to a maximum of 10000 lines, starting with the most recent log entries first.
    ///
    /// * If NumberOfLines is specified and Marker isn't specified, then the most recent lines from the end of the log file are returned.
    ///
    /// * If Marker is specified as "0", then the specified number of lines from the beginning of the log file are returned.
    ///
    /// * You can download the log file in blocks of lines by specifying the size of the block using the NumberOfLines parameter, and by specifying a value of "0" for the Marker parameter in your first request. Include the Marker value returned in the response as the Marker value for the next request, continuing until the AdditionalDataPending response element returns false.
    public var numberOfLines: Swift.Int?

    public init(
        dbInstanceIdentifier: Swift.String? = nil,
        logFileName: Swift.String? = nil,
        marker: Swift.String? = nil,
        numberOfLines: Swift.Int? = nil
    )
    {
        self.dbInstanceIdentifier = dbInstanceIdentifier
        self.logFileName = logFileName
        self.marker = marker
        self.numberOfLines = numberOfLines
    }
}

extension DownloadDBLogFilePortionOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<DownloadDBLogFilePortionOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["DownloadDBLogFilePortionResult"]
            var value = DownloadDBLogFilePortionOutput()
            value.additionalDataPending = try reader["AdditionalDataPending"].readIfPresent()
            value.logFileData = try reader["LogFileData"].readIfPresent()
            value.marker = try reader["Marker"].readIfPresent()
            return value
        }
    }
}

/// This data type is used as a response element to DownloadDBLogFilePortion.
public struct DownloadDBLogFilePortionOutput: Swift.Equatable {
    /// A Boolean value that, if true, indicates there is more data to be downloaded.
    public var additionalDataPending: Swift.Bool?
    /// Entries from the specified log file.
    public var logFileData: Swift.String?
    /// A pagination token that can be used in a later DownloadDBLogFilePortion request.
    public var marker: Swift.String?

    public init(
        additionalDataPending: Swift.Bool? = nil,
        logFileData: Swift.String? = nil,
        marker: Swift.String? = nil
    )
    {
        self.additionalDataPending = additionalDataPending
        self.logFileData = logFileData
        self.marker = marker
    }
}

enum DownloadDBLogFilePortionOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "DBInstanceNotFound": return try await DBInstanceNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "DBLogFileNotFoundFault": return try await DBLogFileNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension RDSClientTypes.EC2SecurityGroup: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case ec2SecurityGroupId = "EC2SecurityGroupId"
        case ec2SecurityGroupName = "EC2SecurityGroupName"
        case ec2SecurityGroupOwnerId = "EC2SecurityGroupOwnerId"
        case status = "Status"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let ec2SecurityGroupId = ec2SecurityGroupId {
            try container.encode(ec2SecurityGroupId, forKey: ClientRuntime.Key("EC2SecurityGroupId"))
        }
        if let ec2SecurityGroupName = ec2SecurityGroupName {
            try container.encode(ec2SecurityGroupName, forKey: ClientRuntime.Key("EC2SecurityGroupName"))
        }
        if let ec2SecurityGroupOwnerId = ec2SecurityGroupOwnerId {
            try container.encode(ec2SecurityGroupOwnerId, forKey: ClientRuntime.Key("EC2SecurityGroupOwnerId"))
        }
        if let status = status {
            try container.encode(status, forKey: ClientRuntime.Key("Status"))
        }
    }

    static var readingClosure: SmithyReadWrite.ReadingClosure<RDSClientTypes.EC2SecurityGroup, SmithyXML.Reader> {
        return { reader in
            guard reader.content != nil else { return nil }
            var value = RDSClientTypes.EC2SecurityGroup()
            value.status = try reader["Status"].readIfPresent()
            value.ec2SecurityGroupName = try reader["EC2SecurityGroupName"].readIfPresent()
            value.ec2SecurityGroupId = try reader["EC2SecurityGroupId"].readIfPresent()
            value.ec2SecurityGroupOwnerId = try reader["EC2SecurityGroupOwnerId"].readIfPresent()
            return value
        }
    }
}

extension RDSClientTypes {
    /// This data type is used as a response element in the following actions:
    ///
    /// * AuthorizeDBSecurityGroupIngress
    ///
    /// * DescribeDBSecurityGroups
    ///
    /// * RevokeDBSecurityGroupIngress
    public struct EC2SecurityGroup: Swift.Equatable {
        /// Specifies the id of the EC2 security group.
        public var ec2SecurityGroupId: Swift.String?
        /// Specifies the name of the EC2 security group.
        public var ec2SecurityGroupName: Swift.String?
        /// Specifies the Amazon Web Services ID of the owner of the EC2 security group specified in the EC2SecurityGroupName field.
        public var ec2SecurityGroupOwnerId: Swift.String?
        /// Provides the status of the EC2 security group. Status can be "authorizing", "authorized", "revoking", and "revoked".
        public var status: Swift.String?

        public init(
            ec2SecurityGroupId: Swift.String? = nil,
            ec2SecurityGroupName: Swift.String? = nil,
            ec2SecurityGroupOwnerId: Swift.String? = nil,
            status: Swift.String? = nil
        )
        {
            self.ec2SecurityGroupId = ec2SecurityGroupId
            self.ec2SecurityGroupName = ec2SecurityGroupName
            self.ec2SecurityGroupOwnerId = ec2SecurityGroupOwnerId
            self.status = status
        }
    }

}

extension Ec2ImagePropertiesNotSupportedFault {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = Ec2ImagePropertiesNotSupportedFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// The AMI configuration prerequisite has not been met.
public struct Ec2ImagePropertiesNotSupportedFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "Ec2ImagePropertiesNotSupportedFault" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension EnableHttpEndpointInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case resourceArn = "ResourceArn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let resourceArn = resourceArn {
            try container.encode(resourceArn, forKey: ClientRuntime.Key("ResourceArn"))
        }
        try container.encode("EnableHttpEndpoint", forKey:ClientRuntime.Key("Action"))
        try container.encode("2014-10-31", forKey:ClientRuntime.Key("Version"))
    }
}

extension EnableHttpEndpointInput {

    static func urlPathProvider(_ value: EnableHttpEndpointInput) -> Swift.String? {
        return "/"
    }
}

public struct EnableHttpEndpointInput: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the DB cluster.
    /// This member is required.
    public var resourceArn: Swift.String?

    public init(
        resourceArn: Swift.String? = nil
    )
    {
        self.resourceArn = resourceArn
    }
}

extension EnableHttpEndpointOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<EnableHttpEndpointOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["EnableHttpEndpointResult"]
            var value = EnableHttpEndpointOutput()
            value.httpEndpointEnabled = try reader["HttpEndpointEnabled"].readIfPresent()
            value.resourceArn = try reader["ResourceArn"].readIfPresent()
            return value
        }
    }
}

public struct EnableHttpEndpointOutput: Swift.Equatable {
    /// Indicates whether the HTTP endpoint is enabled or disabled for the DB cluster.
    public var httpEndpointEnabled: Swift.Bool?
    /// The ARN of the DB cluster.
    public var resourceArn: Swift.String?

    public init(
        httpEndpointEnabled: Swift.Bool? = nil,
        resourceArn: Swift.String? = nil
    )
    {
        self.httpEndpointEnabled = httpEndpointEnabled
        self.resourceArn = resourceArn
    }
}

enum EnableHttpEndpointOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "InvalidResourceStateFault": return try await InvalidResourceStateFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "ResourceNotFoundFault": return try await ResourceNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension RDSClientTypes.Endpoint: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case address = "Address"
        case hostedZoneId = "HostedZoneId"
        case port = "Port"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let address = address {
            try container.encode(address, forKey: ClientRuntime.Key("Address"))
        }
        if let hostedZoneId = hostedZoneId {
            try container.encode(hostedZoneId, forKey: ClientRuntime.Key("HostedZoneId"))
        }
        if let port = port {
            try container.encode(port, forKey: ClientRuntime.Key("Port"))
        }
    }

    static var readingClosure: SmithyReadWrite.ReadingClosure<RDSClientTypes.Endpoint, SmithyXML.Reader> {
        return { reader in
            guard reader.content != nil else { return nil }
            var value = RDSClientTypes.Endpoint()
            value.address = try reader["Address"].readIfPresent()
            value.port = try reader["Port"].readIfPresent()
            value.hostedZoneId = try reader["HostedZoneId"].readIfPresent()
            return value
        }
    }
}

extension RDSClientTypes {
    /// This data type represents the information you need to connect to an Amazon RDS DB instance. This data type is used as a response element in the following actions:
    ///
    /// * CreateDBInstance
    ///
    /// * DescribeDBInstances
    ///
    /// * DeleteDBInstance
    ///
    ///
    /// For the data structure that represents Amazon Aurora DB cluster endpoints, see DBClusterEndpoint.
    public struct Endpoint: Swift.Equatable {
        /// Specifies the DNS address of the DB instance.
        public var address: Swift.String?
        /// Specifies the ID that Amazon Route 53 assigns when you create a hosted zone.
        public var hostedZoneId: Swift.String?
        /// Specifies the port that the database engine is listening on.
        public var port: Swift.Int?

        public init(
            address: Swift.String? = nil,
            hostedZoneId: Swift.String? = nil,
            port: Swift.Int? = nil
        )
        {
            self.address = address
            self.hostedZoneId = hostedZoneId
            self.port = port
        }
    }

}

extension RDSClientTypes.EngineDefaults: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dbParameterGroupFamily = "DBParameterGroupFamily"
        case marker = "Marker"
        case parameters = "Parameters"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let dbParameterGroupFamily = dbParameterGroupFamily {
            try container.encode(dbParameterGroupFamily, forKey: ClientRuntime.Key("DBParameterGroupFamily"))
        }
        if let marker = marker {
            try container.encode(marker, forKey: ClientRuntime.Key("Marker"))
        }
        if let parameters = parameters {
            if !parameters.isEmpty {
                var parametersContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Parameters"))
                for (index0, parameter0) in parameters.enumerated() {
                    try parametersContainer.encode(parameter0, forKey: ClientRuntime.Key("Parameter.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var parametersContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Parameters"))
                try parametersContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
    }

    static var readingClosure: SmithyReadWrite.ReadingClosure<RDSClientTypes.EngineDefaults, SmithyXML.Reader> {
        return { reader in
            guard reader.content != nil else { return nil }
            var value = RDSClientTypes.EngineDefaults()
            value.dbParameterGroupFamily = try reader["DBParameterGroupFamily"].readIfPresent()
            value.marker = try reader["Marker"].readIfPresent()
            value.parameters = try reader["Parameters"].readListIfPresent(memberReadingClosure: RDSClientTypes.Parameter.readingClosure, memberNodeInfo: "Parameter", isFlattened: false)
            return value
        }
    }
}

extension RDSClientTypes {
    /// Contains the result of a successful invocation of the DescribeEngineDefaultParameters action.
    public struct EngineDefaults: Swift.Equatable {
        /// Specifies the name of the DB parameter group family that the engine default parameters apply to.
        public var dbParameterGroupFamily: Swift.String?
        /// An optional pagination token provided by a previous EngineDefaults request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords .
        public var marker: Swift.String?
        /// Contains a list of engine default parameters.
        public var parameters: [RDSClientTypes.Parameter]?

        public init(
            dbParameterGroupFamily: Swift.String? = nil,
            marker: Swift.String? = nil,
            parameters: [RDSClientTypes.Parameter]? = nil
        )
        {
            self.dbParameterGroupFamily = dbParameterGroupFamily
            self.marker = marker
            self.parameters = parameters
        }
    }

}

extension RDSClientTypes {
    public enum EngineFamily: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case mysql
        case postgresql
        case sqlserver
        case sdkUnknown(Swift.String)

        public static var allCases: [EngineFamily] {
            return [
                .mysql,
                .postgresql,
                .sqlserver,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .mysql: return "MYSQL"
            case .postgresql: return "POSTGRESQL"
            case .sqlserver: return "SQLSERVER"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = EngineFamily(rawValue: rawValue) ?? EngineFamily.sdkUnknown(rawValue)
        }
    }
}

extension RDSClientTypes.Event: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case date = "Date"
        case eventCategories = "EventCategories"
        case message = "Message"
        case sourceArn = "SourceArn"
        case sourceIdentifier = "SourceIdentifier"
        case sourceType = "SourceType"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let date = date {
            try container.encodeTimestamp(date, format: .dateTime, forKey: ClientRuntime.Key("Date"))
        }
        if let eventCategories = eventCategories {
            if !eventCategories.isEmpty {
                var eventCategoriesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("EventCategories"))
                for (index0, string0) in eventCategories.enumerated() {
                    try eventCategoriesContainer.encode(string0, forKey: ClientRuntime.Key("EventCategory.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var eventCategoriesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("EventCategories"))
                try eventCategoriesContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let message = message {
            try container.encode(message, forKey: ClientRuntime.Key("Message"))
        }
        if let sourceArn = sourceArn {
            try container.encode(sourceArn, forKey: ClientRuntime.Key("SourceArn"))
        }
        if let sourceIdentifier = sourceIdentifier {
            try container.encode(sourceIdentifier, forKey: ClientRuntime.Key("SourceIdentifier"))
        }
        if let sourceType = sourceType {
            try container.encode(sourceType, forKey: ClientRuntime.Key("SourceType"))
        }
    }

    static var readingClosure: SmithyReadWrite.ReadingClosure<RDSClientTypes.Event, SmithyXML.Reader> {
        return { reader in
            guard reader.content != nil else { return nil }
            var value = RDSClientTypes.Event()
            value.sourceIdentifier = try reader["SourceIdentifier"].readIfPresent()
            value.sourceType = try reader["SourceType"].readIfPresent()
            value.message = try reader["Message"].readIfPresent()
            value.eventCategories = try reader["EventCategories"].readListIfPresent(memberReadingClosure: Swift.String.readingClosure, memberNodeInfo: "EventCategory", isFlattened: false)
            value.date = try reader["Date"].readTimestampIfPresent(format: .dateTime)
            value.sourceArn = try reader["SourceArn"].readIfPresent()
            return value
        }
    }
}

extension RDSClientTypes {
    /// This data type is used as a response element in the [DescribeEvents](https://docs.aws.amazon.com/AmazonRDS/latest/APIReference/API_DescribeEvents.html) action.
    public struct Event: Swift.Equatable {
        /// Specifies the date and time of the event.
        public var date: ClientRuntime.Date?
        /// Specifies the category for the event.
        public var eventCategories: [Swift.String]?
        /// Provides the text of this event.
        public var message: Swift.String?
        /// The Amazon Resource Name (ARN) for the event.
        public var sourceArn: Swift.String?
        /// Provides the identifier for the source of the event.
        public var sourceIdentifier: Swift.String?
        /// Specifies the source type for this event.
        public var sourceType: RDSClientTypes.SourceType?

        public init(
            date: ClientRuntime.Date? = nil,
            eventCategories: [Swift.String]? = nil,
            message: Swift.String? = nil,
            sourceArn: Swift.String? = nil,
            sourceIdentifier: Swift.String? = nil,
            sourceType: RDSClientTypes.SourceType? = nil
        )
        {
            self.date = date
            self.eventCategories = eventCategories
            self.message = message
            self.sourceArn = sourceArn
            self.sourceIdentifier = sourceIdentifier
            self.sourceType = sourceType
        }
    }

}

extension RDSClientTypes.EventCategoriesMap: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case eventCategories = "EventCategories"
        case sourceType = "SourceType"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let eventCategories = eventCategories {
            if !eventCategories.isEmpty {
                var eventCategoriesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("EventCategories"))
                for (index0, string0) in eventCategories.enumerated() {
                    try eventCategoriesContainer.encode(string0, forKey: ClientRuntime.Key("EventCategory.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var eventCategoriesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("EventCategories"))
                try eventCategoriesContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let sourceType = sourceType {
            try container.encode(sourceType, forKey: ClientRuntime.Key("SourceType"))
        }
    }

    static var readingClosure: SmithyReadWrite.ReadingClosure<RDSClientTypes.EventCategoriesMap, SmithyXML.Reader> {
        return { reader in
            guard reader.content != nil else { return nil }
            var value = RDSClientTypes.EventCategoriesMap()
            value.sourceType = try reader["SourceType"].readIfPresent()
            value.eventCategories = try reader["EventCategories"].readListIfPresent(memberReadingClosure: Swift.String.readingClosure, memberNodeInfo: "EventCategory", isFlattened: false)
            return value
        }
    }
}

extension RDSClientTypes {
    /// Contains the results of a successful invocation of the [DescribeEventCategories](https://docs.aws.amazon.com/AmazonRDS/latest/APIReference/API_DescribeEventCategories.html) operation.
    public struct EventCategoriesMap: Swift.Equatable {
        /// The event categories for the specified source type
        public var eventCategories: [Swift.String]?
        /// The source type that the returned categories belong to
        public var sourceType: Swift.String?

        public init(
            eventCategories: [Swift.String]? = nil,
            sourceType: Swift.String? = nil
        )
        {
            self.eventCategories = eventCategories
            self.sourceType = sourceType
        }
    }

}

extension RDSClientTypes.EventSubscription: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case custSubscriptionId = "CustSubscriptionId"
        case customerAwsId = "CustomerAwsId"
        case enabled = "Enabled"
        case eventCategoriesList = "EventCategoriesList"
        case eventSubscriptionArn = "EventSubscriptionArn"
        case snsTopicArn = "SnsTopicArn"
        case sourceIdsList = "SourceIdsList"
        case sourceType = "SourceType"
        case status = "Status"
        case subscriptionCreationTime = "SubscriptionCreationTime"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let custSubscriptionId = custSubscriptionId {
            try container.encode(custSubscriptionId, forKey: ClientRuntime.Key("CustSubscriptionId"))
        }
        if let customerAwsId = customerAwsId {
            try container.encode(customerAwsId, forKey: ClientRuntime.Key("CustomerAwsId"))
        }
        if let enabled = enabled {
            try container.encode(enabled, forKey: ClientRuntime.Key("Enabled"))
        }
        if let eventCategoriesList = eventCategoriesList {
            if !eventCategoriesList.isEmpty {
                var eventCategoriesListContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("EventCategoriesList"))
                for (index0, string0) in eventCategoriesList.enumerated() {
                    try eventCategoriesListContainer.encode(string0, forKey: ClientRuntime.Key("EventCategory.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var eventCategoriesListContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("EventCategoriesList"))
                try eventCategoriesListContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let eventSubscriptionArn = eventSubscriptionArn {
            try container.encode(eventSubscriptionArn, forKey: ClientRuntime.Key("EventSubscriptionArn"))
        }
        if let snsTopicArn = snsTopicArn {
            try container.encode(snsTopicArn, forKey: ClientRuntime.Key("SnsTopicArn"))
        }
        if let sourceIdsList = sourceIdsList {
            if !sourceIdsList.isEmpty {
                var sourceIdsListContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("SourceIdsList"))
                for (index0, string0) in sourceIdsList.enumerated() {
                    try sourceIdsListContainer.encode(string0, forKey: ClientRuntime.Key("SourceId.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var sourceIdsListContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("SourceIdsList"))
                try sourceIdsListContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let sourceType = sourceType {
            try container.encode(sourceType, forKey: ClientRuntime.Key("SourceType"))
        }
        if let status = status {
            try container.encode(status, forKey: ClientRuntime.Key("Status"))
        }
        if let subscriptionCreationTime = subscriptionCreationTime {
            try container.encode(subscriptionCreationTime, forKey: ClientRuntime.Key("SubscriptionCreationTime"))
        }
    }

    static var readingClosure: SmithyReadWrite.ReadingClosure<RDSClientTypes.EventSubscription, SmithyXML.Reader> {
        return { reader in
            guard reader.content != nil else { return nil }
            var value = RDSClientTypes.EventSubscription()
            value.customerAwsId = try reader["CustomerAwsId"].readIfPresent()
            value.custSubscriptionId = try reader["CustSubscriptionId"].readIfPresent()
            value.snsTopicArn = try reader["SnsTopicArn"].readIfPresent()
            value.status = try reader["Status"].readIfPresent()
            value.subscriptionCreationTime = try reader["SubscriptionCreationTime"].readIfPresent()
            value.sourceType = try reader["SourceType"].readIfPresent()
            value.sourceIdsList = try reader["SourceIdsList"].readListIfPresent(memberReadingClosure: Swift.String.readingClosure, memberNodeInfo: "SourceId", isFlattened: false)
            value.eventCategoriesList = try reader["EventCategoriesList"].readListIfPresent(memberReadingClosure: Swift.String.readingClosure, memberNodeInfo: "EventCategory", isFlattened: false)
            value.enabled = try reader["Enabled"].readIfPresent()
            value.eventSubscriptionArn = try reader["EventSubscriptionArn"].readIfPresent()
            return value
        }
    }
}

extension RDSClientTypes {
    /// Contains the results of a successful invocation of the DescribeEventSubscriptions action.
    public struct EventSubscription: Swift.Equatable {
        /// The RDS event notification subscription Id.
        public var custSubscriptionId: Swift.String?
        /// The Amazon Web Services customer account associated with the RDS event notification subscription.
        public var customerAwsId: Swift.String?
        /// Specifies whether the subscription is enabled. True indicates the subscription is enabled.
        public var enabled: Swift.Bool?
        /// A list of event categories for the RDS event notification subscription.
        public var eventCategoriesList: [Swift.String]?
        /// The Amazon Resource Name (ARN) for the event subscription.
        public var eventSubscriptionArn: Swift.String?
        /// The topic ARN of the RDS event notification subscription.
        public var snsTopicArn: Swift.String?
        /// A list of source IDs for the RDS event notification subscription.
        public var sourceIdsList: [Swift.String]?
        /// The source type for the RDS event notification subscription.
        public var sourceType: Swift.String?
        /// The status of the RDS event notification subscription. Constraints: Can be one of the following: creating | modifying | deleting | active | no-permission | topic-not-exist The status "no-permission" indicates that RDS no longer has permission to post to the SNS topic. The status "topic-not-exist" indicates that the topic was deleted after the subscription was created.
        public var status: Swift.String?
        /// The time the RDS event notification subscription was created.
        public var subscriptionCreationTime: Swift.String?

        public init(
            custSubscriptionId: Swift.String? = nil,
            customerAwsId: Swift.String? = nil,
            enabled: Swift.Bool? = nil,
            eventCategoriesList: [Swift.String]? = nil,
            eventSubscriptionArn: Swift.String? = nil,
            snsTopicArn: Swift.String? = nil,
            sourceIdsList: [Swift.String]? = nil,
            sourceType: Swift.String? = nil,
            status: Swift.String? = nil,
            subscriptionCreationTime: Swift.String? = nil
        )
        {
            self.custSubscriptionId = custSubscriptionId
            self.customerAwsId = customerAwsId
            self.enabled = enabled
            self.eventCategoriesList = eventCategoriesList
            self.eventSubscriptionArn = eventSubscriptionArn
            self.snsTopicArn = snsTopicArn
            self.sourceIdsList = sourceIdsList
            self.sourceType = sourceType
            self.status = status
            self.subscriptionCreationTime = subscriptionCreationTime
        }
    }

}

extension EventSubscriptionQuotaExceededFault {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = EventSubscriptionQuotaExceededFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// You have reached the maximum number of event subscriptions.
public struct EventSubscriptionQuotaExceededFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "EventSubscriptionQuotaExceeded" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension RDSClientTypes {
    public enum ExportSourceType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case cluster
        case snapshot
        case sdkUnknown(Swift.String)

        public static var allCases: [ExportSourceType] {
            return [
                .cluster,
                .snapshot,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .cluster: return "CLUSTER"
            case .snapshot: return "SNAPSHOT"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ExportSourceType(rawValue: rawValue) ?? ExportSourceType.sdkUnknown(rawValue)
        }
    }
}

extension RDSClientTypes.ExportTask: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case exportOnly = "ExportOnly"
        case exportTaskIdentifier = "ExportTaskIdentifier"
        case failureCause = "FailureCause"
        case iamRoleArn = "IamRoleArn"
        case kmsKeyId = "KmsKeyId"
        case percentProgress = "PercentProgress"
        case s3Bucket = "S3Bucket"
        case s3Prefix = "S3Prefix"
        case snapshotTime = "SnapshotTime"
        case sourceArn = "SourceArn"
        case sourceType = "SourceType"
        case status = "Status"
        case taskEndTime = "TaskEndTime"
        case taskStartTime = "TaskStartTime"
        case totalExtractedDataInGB = "TotalExtractedDataInGB"
        case warningMessage = "WarningMessage"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let exportOnly = exportOnly {
            if !exportOnly.isEmpty {
                var exportOnlyContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("ExportOnly"))
                for (index0, string0) in exportOnly.enumerated() {
                    try exportOnlyContainer.encode(string0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var exportOnlyContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("ExportOnly"))
                try exportOnlyContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let exportTaskIdentifier = exportTaskIdentifier {
            try container.encode(exportTaskIdentifier, forKey: ClientRuntime.Key("ExportTaskIdentifier"))
        }
        if let failureCause = failureCause {
            try container.encode(failureCause, forKey: ClientRuntime.Key("FailureCause"))
        }
        if let iamRoleArn = iamRoleArn {
            try container.encode(iamRoleArn, forKey: ClientRuntime.Key("IamRoleArn"))
        }
        if let kmsKeyId = kmsKeyId {
            try container.encode(kmsKeyId, forKey: ClientRuntime.Key("KmsKeyId"))
        }
        if let percentProgress = percentProgress {
            try container.encode(percentProgress, forKey: ClientRuntime.Key("PercentProgress"))
        }
        if let s3Bucket = s3Bucket {
            try container.encode(s3Bucket, forKey: ClientRuntime.Key("S3Bucket"))
        }
        if let s3Prefix = s3Prefix {
            try container.encode(s3Prefix, forKey: ClientRuntime.Key("S3Prefix"))
        }
        if let snapshotTime = snapshotTime {
            try container.encodeTimestamp(snapshotTime, format: .dateTime, forKey: ClientRuntime.Key("SnapshotTime"))
        }
        if let sourceArn = sourceArn {
            try container.encode(sourceArn, forKey: ClientRuntime.Key("SourceArn"))
        }
        if let sourceType = sourceType {
            try container.encode(sourceType, forKey: ClientRuntime.Key("SourceType"))
        }
        if let status = status {
            try container.encode(status, forKey: ClientRuntime.Key("Status"))
        }
        if let taskEndTime = taskEndTime {
            try container.encodeTimestamp(taskEndTime, format: .dateTime, forKey: ClientRuntime.Key("TaskEndTime"))
        }
        if let taskStartTime = taskStartTime {
            try container.encodeTimestamp(taskStartTime, format: .dateTime, forKey: ClientRuntime.Key("TaskStartTime"))
        }
        if let totalExtractedDataInGB = totalExtractedDataInGB {
            try container.encode(totalExtractedDataInGB, forKey: ClientRuntime.Key("TotalExtractedDataInGB"))
        }
        if let warningMessage = warningMessage {
            try container.encode(warningMessage, forKey: ClientRuntime.Key("WarningMessage"))
        }
    }

    static var readingClosure: SmithyReadWrite.ReadingClosure<RDSClientTypes.ExportTask, SmithyXML.Reader> {
        return { reader in
            guard reader.content != nil else { return nil }
            var value = RDSClientTypes.ExportTask()
            value.exportTaskIdentifier = try reader["ExportTaskIdentifier"].readIfPresent()
            value.sourceArn = try reader["SourceArn"].readIfPresent()
            value.exportOnly = try reader["ExportOnly"].readListIfPresent(memberReadingClosure: Swift.String.readingClosure, memberNodeInfo: "member", isFlattened: false)
            value.snapshotTime = try reader["SnapshotTime"].readTimestampIfPresent(format: .dateTime)
            value.taskStartTime = try reader["TaskStartTime"].readTimestampIfPresent(format: .dateTime)
            value.taskEndTime = try reader["TaskEndTime"].readTimestampIfPresent(format: .dateTime)
            value.s3Bucket = try reader["S3Bucket"].readIfPresent()
            value.s3Prefix = try reader["S3Prefix"].readIfPresent()
            value.iamRoleArn = try reader["IamRoleArn"].readIfPresent()
            value.kmsKeyId = try reader["KmsKeyId"].readIfPresent()
            value.status = try reader["Status"].readIfPresent()
            value.percentProgress = try reader["PercentProgress"].readIfPresent()
            value.totalExtractedDataInGB = try reader["TotalExtractedDataInGB"].readIfPresent()
            value.failureCause = try reader["FailureCause"].readIfPresent()
            value.warningMessage = try reader["WarningMessage"].readIfPresent()
            value.sourceType = try reader["SourceType"].readIfPresent()
            return value
        }
    }
}

extension RDSClientTypes {
    /// Contains the details of a snapshot or cluster export to Amazon S3. This data type is used as a response element in the DescribeExportTasks operation.
    public struct ExportTask: Swift.Equatable {
        /// The data exported from the snapshot or cluster. Valid Values:
        ///
        /// * database - Export all the data from a specified database.
        ///
        /// * database.table table-name - Export a table of the snapshot or cluster. This format is valid only for RDS for MySQL, RDS for MariaDB, and Aurora MySQL.
        ///
        /// * database.schema schema-name - Export a database schema of the snapshot or cluster. This format is valid only for RDS for PostgreSQL and Aurora PostgreSQL.
        ///
        /// * database.schema.table table-name - Export a table of the database schema. This format is valid only for RDS for PostgreSQL and Aurora PostgreSQL.
        public var exportOnly: [Swift.String]?
        /// A unique identifier for the snapshot or cluster export task. This ID isn't an identifier for the Amazon S3 bucket where the data is exported.
        public var exportTaskIdentifier: Swift.String?
        /// The reason the export failed, if it failed.
        public var failureCause: Swift.String?
        /// The name of the IAM role that is used to write to Amazon S3 when exporting a snapshot or cluster.
        public var iamRoleArn: Swift.String?
        /// The key identifier of the Amazon Web Services KMS key that is used to encrypt the data when it's exported to Amazon S3. The KMS key identifier is its key ARN, key ID, alias ARN, or alias name. The IAM role used for the export must have encryption and decryption permissions to use this KMS key.
        public var kmsKeyId: Swift.String?
        /// The progress of the snapshot or cluster export task as a percentage.
        public var percentProgress: Swift.Int?
        /// The Amazon S3 bucket where the snapshot or cluster is exported to.
        public var s3Bucket: Swift.String?
        /// The Amazon S3 bucket prefix that is the file name and path of the exported data.
        public var s3Prefix: Swift.String?
        /// The time when the snapshot was created.
        public var snapshotTime: ClientRuntime.Date?
        /// The Amazon Resource Name (ARN) of the snapshot or cluster exported to Amazon S3.
        public var sourceArn: Swift.String?
        /// The type of source for the export.
        public var sourceType: RDSClientTypes.ExportSourceType?
        /// The progress status of the export task. The status can be one of the following:
        ///
        /// * CANCELED
        ///
        /// * CANCELING
        ///
        /// * COMPLETE
        ///
        /// * FAILED
        ///
        /// * IN_PROGRESS
        ///
        /// * STARTING
        public var status: Swift.String?
        /// The time when the snapshot or cluster export task ended.
        public var taskEndTime: ClientRuntime.Date?
        /// The time when the snapshot or cluster export task started.
        public var taskStartTime: ClientRuntime.Date?
        /// The total amount of data exported, in gigabytes.
        public var totalExtractedDataInGB: Swift.Int?
        /// A warning about the snapshot or cluster export task.
        public var warningMessage: Swift.String?

        public init(
            exportOnly: [Swift.String]? = nil,
            exportTaskIdentifier: Swift.String? = nil,
            failureCause: Swift.String? = nil,
            iamRoleArn: Swift.String? = nil,
            kmsKeyId: Swift.String? = nil,
            percentProgress: Swift.Int? = nil,
            s3Bucket: Swift.String? = nil,
            s3Prefix: Swift.String? = nil,
            snapshotTime: ClientRuntime.Date? = nil,
            sourceArn: Swift.String? = nil,
            sourceType: RDSClientTypes.ExportSourceType? = nil,
            status: Swift.String? = nil,
            taskEndTime: ClientRuntime.Date? = nil,
            taskStartTime: ClientRuntime.Date? = nil,
            totalExtractedDataInGB: Swift.Int? = nil,
            warningMessage: Swift.String? = nil
        )
        {
            self.exportOnly = exportOnly
            self.exportTaskIdentifier = exportTaskIdentifier
            self.failureCause = failureCause
            self.iamRoleArn = iamRoleArn
            self.kmsKeyId = kmsKeyId
            self.percentProgress = percentProgress
            self.s3Bucket = s3Bucket
            self.s3Prefix = s3Prefix
            self.snapshotTime = snapshotTime
            self.sourceArn = sourceArn
            self.sourceType = sourceType
            self.status = status
            self.taskEndTime = taskEndTime
            self.taskStartTime = taskStartTime
            self.totalExtractedDataInGB = totalExtractedDataInGB
            self.warningMessage = warningMessage
        }
    }

}

extension ExportTaskAlreadyExistsFault {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = ExportTaskAlreadyExistsFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// You can't start an export task that's already running.
public struct ExportTaskAlreadyExistsFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ExportTaskAlreadyExists" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension ExportTaskNotFoundFault {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = ExportTaskNotFoundFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// The export task doesn't exist.
public struct ExportTaskNotFoundFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ExportTaskNotFound" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension FailoverDBClusterInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dbClusterIdentifier = "DBClusterIdentifier"
        case targetDBInstanceIdentifier = "TargetDBInstanceIdentifier"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let dbClusterIdentifier = dbClusterIdentifier {
            try container.encode(dbClusterIdentifier, forKey: ClientRuntime.Key("DBClusterIdentifier"))
        }
        if let targetDBInstanceIdentifier = targetDBInstanceIdentifier {
            try container.encode(targetDBInstanceIdentifier, forKey: ClientRuntime.Key("TargetDBInstanceIdentifier"))
        }
        try container.encode("FailoverDBCluster", forKey:ClientRuntime.Key("Action"))
        try container.encode("2014-10-31", forKey:ClientRuntime.Key("Version"))
    }
}

extension FailoverDBClusterInput {

    static func urlPathProvider(_ value: FailoverDBClusterInput) -> Swift.String? {
        return "/"
    }
}

///
public struct FailoverDBClusterInput: Swift.Equatable {
    /// The identifier of the DB cluster to force a failover for. This parameter isn't case-sensitive. Constraints:
    ///
    /// * Must match the identifier of an existing DB cluster.
    /// This member is required.
    public var dbClusterIdentifier: Swift.String?
    /// The name of the DB instance to promote to the primary DB instance. Specify the DB instance identifier for an Aurora Replica or a Multi-AZ readable standby in the DB cluster, for example mydbcluster-replica1. This setting isn't supported for RDS for MySQL Multi-AZ DB clusters.
    public var targetDBInstanceIdentifier: Swift.String?

    public init(
        dbClusterIdentifier: Swift.String? = nil,
        targetDBInstanceIdentifier: Swift.String? = nil
    )
    {
        self.dbClusterIdentifier = dbClusterIdentifier
        self.targetDBInstanceIdentifier = targetDBInstanceIdentifier
    }
}

extension FailoverDBClusterOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<FailoverDBClusterOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["FailoverDBClusterResult"]
            var value = FailoverDBClusterOutput()
            value.dbCluster = try reader["DBCluster"].readIfPresent(readingClosure: RDSClientTypes.DBCluster.readingClosure)
            return value
        }
    }
}

public struct FailoverDBClusterOutput: Swift.Equatable {
    /// Contains the details of an Amazon Aurora DB cluster or Multi-AZ DB cluster. For an Amazon Aurora DB cluster, this data type is used as a response element in the operations CreateDBCluster, DeleteDBCluster, DescribeDBClusters, FailoverDBCluster, ModifyDBCluster, PromoteReadReplicaDBCluster, RestoreDBClusterFromS3, RestoreDBClusterFromSnapshot, RestoreDBClusterToPointInTime, StartDBCluster, and StopDBCluster. For a Multi-AZ DB cluster, this data type is used as a response element in the operations CreateDBCluster, DeleteDBCluster, DescribeDBClusters, FailoverDBCluster, ModifyDBCluster, RebootDBCluster, RestoreDBClusterFromSnapshot, and RestoreDBClusterToPointInTime. For more information on Amazon Aurora DB clusters, see [ What is Amazon Aurora?](https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html) in the Amazon Aurora User Guide. For more information on Multi-AZ DB clusters, see [ Multi-AZ deployments with two readable standby DB instances](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/multi-az-db-clusters-concepts.html) in the Amazon RDS User Guide.
    public var dbCluster: RDSClientTypes.DBCluster?

    public init(
        dbCluster: RDSClientTypes.DBCluster? = nil
    )
    {
        self.dbCluster = dbCluster
    }
}

enum FailoverDBClusterOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "DBClusterNotFoundFault": return try await DBClusterNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "InvalidDBClusterStateFault": return try await InvalidDBClusterStateFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "InvalidDBInstanceState": return try await InvalidDBInstanceStateFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension FailoverGlobalClusterInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case allowDataLoss = "AllowDataLoss"
        case globalClusterIdentifier = "GlobalClusterIdentifier"
        case switchover = "Switchover"
        case targetDbClusterIdentifier = "TargetDbClusterIdentifier"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let allowDataLoss = allowDataLoss {
            try container.encode(allowDataLoss, forKey: ClientRuntime.Key("AllowDataLoss"))
        }
        if let globalClusterIdentifier = globalClusterIdentifier {
            try container.encode(globalClusterIdentifier, forKey: ClientRuntime.Key("GlobalClusterIdentifier"))
        }
        if let switchover = switchover {
            try container.encode(switchover, forKey: ClientRuntime.Key("Switchover"))
        }
        if let targetDbClusterIdentifier = targetDbClusterIdentifier {
            try container.encode(targetDbClusterIdentifier, forKey: ClientRuntime.Key("TargetDbClusterIdentifier"))
        }
        try container.encode("FailoverGlobalCluster", forKey:ClientRuntime.Key("Action"))
        try container.encode("2014-10-31", forKey:ClientRuntime.Key("Version"))
    }
}

extension FailoverGlobalClusterInput {

    static func urlPathProvider(_ value: FailoverGlobalClusterInput) -> Swift.String? {
        return "/"
    }
}

public struct FailoverGlobalClusterInput: Swift.Equatable {
    /// Specifies whether to allow data loss for this global database cluster operation. Allowing data loss triggers a global failover operation. If you don't specify AllowDataLoss, the global database cluster operation defaults to a switchover. Constraints:
    ///
    /// * Can't be specified together with the Switchover parameter.
    public var allowDataLoss: Swift.Bool?
    /// The identifier of the global database cluster (Aurora global database) this operation should apply to. The identifier is the unique key assigned by the user when the Aurora global database is created. In other words, it's the name of the Aurora global database. Constraints:
    ///
    /// * Must match the identifier of an existing global database cluster.
    /// This member is required.
    public var globalClusterIdentifier: Swift.String?
    /// Specifies whether to switch over this global database cluster. Constraints:
    ///
    /// * Can't be specified together with the AllowDataLoss parameter.
    public var switchover: Swift.Bool?
    /// The identifier of the secondary Aurora DB cluster that you want to promote to the primary for the global database cluster. Use the Amazon Resource Name (ARN) for the identifier so that Aurora can locate the cluster in its Amazon Web Services Region.
    /// This member is required.
    public var targetDbClusterIdentifier: Swift.String?

    public init(
        allowDataLoss: Swift.Bool? = nil,
        globalClusterIdentifier: Swift.String? = nil,
        switchover: Swift.Bool? = nil,
        targetDbClusterIdentifier: Swift.String? = nil
    )
    {
        self.allowDataLoss = allowDataLoss
        self.globalClusterIdentifier = globalClusterIdentifier
        self.switchover = switchover
        self.targetDbClusterIdentifier = targetDbClusterIdentifier
    }
}

extension FailoverGlobalClusterOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<FailoverGlobalClusterOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["FailoverGlobalClusterResult"]
            var value = FailoverGlobalClusterOutput()
            value.globalCluster = try reader["GlobalCluster"].readIfPresent(readingClosure: RDSClientTypes.GlobalCluster.readingClosure)
            return value
        }
    }
}

public struct FailoverGlobalClusterOutput: Swift.Equatable {
    /// A data type representing an Aurora global database.
    public var globalCluster: RDSClientTypes.GlobalCluster?

    public init(
        globalCluster: RDSClientTypes.GlobalCluster? = nil
    )
    {
        self.globalCluster = globalCluster
    }
}

enum FailoverGlobalClusterOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "DBClusterNotFoundFault": return try await DBClusterNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "GlobalClusterNotFoundFault": return try await GlobalClusterNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "InvalidDBClusterStateFault": return try await InvalidDBClusterStateFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "InvalidGlobalClusterStateFault": return try await InvalidGlobalClusterStateFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension RDSClientTypes.FailoverState: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case fromDbClusterArn = "FromDbClusterArn"
        case isDataLossAllowed = "IsDataLossAllowed"
        case status = "Status"
        case toDbClusterArn = "ToDbClusterArn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let fromDbClusterArn = fromDbClusterArn {
            try container.encode(fromDbClusterArn, forKey: ClientRuntime.Key("FromDbClusterArn"))
        }
        if let isDataLossAllowed = isDataLossAllowed {
            try container.encode(isDataLossAllowed, forKey: ClientRuntime.Key("IsDataLossAllowed"))
        }
        if let status = status {
            try container.encode(status, forKey: ClientRuntime.Key("Status"))
        }
        if let toDbClusterArn = toDbClusterArn {
            try container.encode(toDbClusterArn, forKey: ClientRuntime.Key("ToDbClusterArn"))
        }
    }

    static var readingClosure: SmithyReadWrite.ReadingClosure<RDSClientTypes.FailoverState, SmithyXML.Reader> {
        return { reader in
            guard reader.content != nil else { return nil }
            var value = RDSClientTypes.FailoverState()
            value.status = try reader["Status"].readIfPresent()
            value.fromDbClusterArn = try reader["FromDbClusterArn"].readIfPresent()
            value.toDbClusterArn = try reader["ToDbClusterArn"].readIfPresent()
            value.isDataLossAllowed = try reader["IsDataLossAllowed"].readIfPresent()
            return value
        }
    }
}

extension RDSClientTypes {
    /// Contains the state of scheduled or in-process operations on a global cluster (Aurora global database). This data type is empty unless a switchover or failover operation is scheduled or is in progress on the Aurora global database.
    public struct FailoverState: Swift.Equatable {
        /// The Amazon Resource Name (ARN) of the Aurora DB cluster that is currently being demoted, and which is associated with this state.
        public var fromDbClusterArn: Swift.String?
        /// Indicates whether the operation is a global switchover or a global failover. If data loss is allowed, then the operation is a global failover. Otherwise, it's a switchover.
        public var isDataLossAllowed: Swift.Bool?
        /// The current status of the global cluster. Possible values are as follows:
        ///
        /// * pending  The service received a request to switch over or fail over the global cluster. The global cluster's primary DB cluster and the specified secondary DB cluster are being verified before the operation starts.
        ///
        /// * failing-over  Aurora is promoting the chosen secondary Aurora DB cluster to become the new primary DB cluster to fail over the global cluster.
        ///
        /// * cancelling  The request to switch over or fail over the global cluster was cancelled and the primary Aurora DB cluster and the selected secondary Aurora DB cluster are returning to their previous states.
        ///
        /// * switching-over  This status covers the range of Aurora internal operations that take place during the switchover process, such as demoting the primary Aurora DB cluster, promoting the secondary Aurora DB cluster, and synchronizing replicas.
        public var status: RDSClientTypes.FailoverStatus?
        /// The Amazon Resource Name (ARN) of the Aurora DB cluster that is currently being promoted, and which is associated with this state.
        public var toDbClusterArn: Swift.String?

        public init(
            fromDbClusterArn: Swift.String? = nil,
            isDataLossAllowed: Swift.Bool? = nil,
            status: RDSClientTypes.FailoverStatus? = nil,
            toDbClusterArn: Swift.String? = nil
        )
        {
            self.fromDbClusterArn = fromDbClusterArn
            self.isDataLossAllowed = isDataLossAllowed
            self.status = status
            self.toDbClusterArn = toDbClusterArn
        }
    }

}

extension RDSClientTypes {
    public enum FailoverStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case cancelling
        case failingOver
        case pending
        case sdkUnknown(Swift.String)

        public static var allCases: [FailoverStatus] {
            return [
                .cancelling,
                .failingOver,
                .pending,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .cancelling: return "cancelling"
            case .failingOver: return "failing-over"
            case .pending: return "pending"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = FailoverStatus(rawValue: rawValue) ?? FailoverStatus.sdkUnknown(rawValue)
        }
    }
}

extension RDSClientTypes.Filter: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name = "Name"
        case values = "Values"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let name = name {
            try container.encode(name, forKey: ClientRuntime.Key("Name"))
        }
        if let values = values {
            if !values.isEmpty {
                var valuesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Values"))
                for (index0, string0) in values.enumerated() {
                    try valuesContainer.encode(string0, forKey: ClientRuntime.Key("Value.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var valuesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Values"))
                try valuesContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
    }

    static var readingClosure: SmithyReadWrite.ReadingClosure<RDSClientTypes.Filter, SmithyXML.Reader> {
        return { reader in
            guard reader.content != nil else { return nil }
            var value = RDSClientTypes.Filter()
            value.name = try reader["Name"].readIfPresent()
            value.values = try reader["Values"].readListIfPresent(memberReadingClosure: Swift.String.readingClosure, memberNodeInfo: "Value", isFlattened: false)
            return value
        }
    }
}

extension RDSClientTypes {
    /// A filter name and value pair that is used to return a more specific list of results from a describe operation. Filters can be used to match a set of resources by specific criteria, such as IDs. The filters supported by a describe operation are documented with the describe operation. Currently, wildcards are not supported in filters. The following actions can be filtered:
    ///
    /// * DescribeDBClusterBacktracks
    ///
    /// * DescribeDBClusterEndpoints
    ///
    /// * DescribeDBClusters
    ///
    /// * DescribeDBInstances
    ///
    /// * DescribeDBRecommendations
    ///
    /// * DescribePendingMaintenanceActions
    public struct Filter: Swift.Equatable {
        /// The name of the filter. Filter names are case-sensitive.
        /// This member is required.
        public var name: Swift.String?
        /// One or more filter values. Filter values are case-sensitive.
        /// This member is required.
        public var values: [Swift.String]?

        public init(
            name: Swift.String? = nil,
            values: [Swift.String]? = nil
        )
        {
            self.name = name
            self.values = values
        }
    }

}

extension RDSClientTypes.GlobalCluster: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case databaseName = "DatabaseName"
        case deletionProtection = "DeletionProtection"
        case engine = "Engine"
        case engineVersion = "EngineVersion"
        case failoverState = "FailoverState"
        case globalClusterArn = "GlobalClusterArn"
        case globalClusterIdentifier = "GlobalClusterIdentifier"
        case globalClusterMembers = "GlobalClusterMembers"
        case globalClusterResourceId = "GlobalClusterResourceId"
        case status = "Status"
        case storageEncrypted = "StorageEncrypted"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let databaseName = databaseName {
            try container.encode(databaseName, forKey: ClientRuntime.Key("DatabaseName"))
        }
        if let deletionProtection = deletionProtection {
            try container.encode(deletionProtection, forKey: ClientRuntime.Key("DeletionProtection"))
        }
        if let engine = engine {
            try container.encode(engine, forKey: ClientRuntime.Key("Engine"))
        }
        if let engineVersion = engineVersion {
            try container.encode(engineVersion, forKey: ClientRuntime.Key("EngineVersion"))
        }
        if let failoverState = failoverState {
            try container.encode(failoverState, forKey: ClientRuntime.Key("FailoverState"))
        }
        if let globalClusterArn = globalClusterArn {
            try container.encode(globalClusterArn, forKey: ClientRuntime.Key("GlobalClusterArn"))
        }
        if let globalClusterIdentifier = globalClusterIdentifier {
            try container.encode(globalClusterIdentifier, forKey: ClientRuntime.Key("GlobalClusterIdentifier"))
        }
        if let globalClusterMembers = globalClusterMembers {
            if !globalClusterMembers.isEmpty {
                var globalClusterMembersContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("GlobalClusterMembers"))
                for (index0, globalclustermember0) in globalClusterMembers.enumerated() {
                    try globalClusterMembersContainer.encode(globalclustermember0, forKey: ClientRuntime.Key("GlobalClusterMember.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var globalClusterMembersContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("GlobalClusterMembers"))
                try globalClusterMembersContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let globalClusterResourceId = globalClusterResourceId {
            try container.encode(globalClusterResourceId, forKey: ClientRuntime.Key("GlobalClusterResourceId"))
        }
        if let status = status {
            try container.encode(status, forKey: ClientRuntime.Key("Status"))
        }
        if let storageEncrypted = storageEncrypted {
            try container.encode(storageEncrypted, forKey: ClientRuntime.Key("StorageEncrypted"))
        }
    }

    static var readingClosure: SmithyReadWrite.ReadingClosure<RDSClientTypes.GlobalCluster, SmithyXML.Reader> {
        return { reader in
            guard reader.content != nil else { return nil }
            var value = RDSClientTypes.GlobalCluster()
            value.globalClusterIdentifier = try reader["GlobalClusterIdentifier"].readIfPresent()
            value.globalClusterResourceId = try reader["GlobalClusterResourceId"].readIfPresent()
            value.globalClusterArn = try reader["GlobalClusterArn"].readIfPresent()
            value.status = try reader["Status"].readIfPresent()
            value.engine = try reader["Engine"].readIfPresent()
            value.engineVersion = try reader["EngineVersion"].readIfPresent()
            value.databaseName = try reader["DatabaseName"].readIfPresent()
            value.storageEncrypted = try reader["StorageEncrypted"].readIfPresent()
            value.deletionProtection = try reader["DeletionProtection"].readIfPresent()
            value.globalClusterMembers = try reader["GlobalClusterMembers"].readListIfPresent(memberReadingClosure: RDSClientTypes.GlobalClusterMember.readingClosure, memberNodeInfo: "GlobalClusterMember", isFlattened: false)
            value.failoverState = try reader["FailoverState"].readIfPresent(readingClosure: RDSClientTypes.FailoverState.readingClosure)
            return value
        }
    }
}

extension RDSClientTypes {
    /// A data type representing an Aurora global database.
    public struct GlobalCluster: Swift.Equatable {
        /// The default database name within the new global database cluster.
        public var databaseName: Swift.String?
        /// The deletion protection setting for the new global database cluster.
        public var deletionProtection: Swift.Bool?
        /// The Aurora database engine used by the global database cluster.
        public var engine: Swift.String?
        /// Indicates the database engine version.
        public var engineVersion: Swift.String?
        /// A data object containing all properties for the current state of an in-process or pending switchover or failover process for this global cluster (Aurora global database). This object is empty unless the SwitchoverGlobalCluster or FailoverGlobalCluster operation was called on this global cluster.
        public var failoverState: RDSClientTypes.FailoverState?
        /// The Amazon Resource Name (ARN) for the global database cluster.
        public var globalClusterArn: Swift.String?
        /// Contains a user-supplied global database cluster identifier. This identifier is the unique key that identifies a global database cluster.
        public var globalClusterIdentifier: Swift.String?
        /// The list of primary and secondary clusters within the global database cluster.
        public var globalClusterMembers: [RDSClientTypes.GlobalClusterMember]?
        /// The Amazon Web Services Region-unique, immutable identifier for the global database cluster. This identifier is found in Amazon Web Services CloudTrail log entries whenever the Amazon Web Services KMS key for the DB cluster is accessed.
        public var globalClusterResourceId: Swift.String?
        /// Specifies the current state of this global database cluster.
        public var status: Swift.String?
        /// The storage encryption setting for the global database cluster.
        public var storageEncrypted: Swift.Bool?

        public init(
            databaseName: Swift.String? = nil,
            deletionProtection: Swift.Bool? = nil,
            engine: Swift.String? = nil,
            engineVersion: Swift.String? = nil,
            failoverState: RDSClientTypes.FailoverState? = nil,
            globalClusterArn: Swift.String? = nil,
            globalClusterIdentifier: Swift.String? = nil,
            globalClusterMembers: [RDSClientTypes.GlobalClusterMember]? = nil,
            globalClusterResourceId: Swift.String? = nil,
            status: Swift.String? = nil,
            storageEncrypted: Swift.Bool? = nil
        )
        {
            self.databaseName = databaseName
            self.deletionProtection = deletionProtection
            self.engine = engine
            self.engineVersion = engineVersion
            self.failoverState = failoverState
            self.globalClusterArn = globalClusterArn
            self.globalClusterIdentifier = globalClusterIdentifier
            self.globalClusterMembers = globalClusterMembers
            self.globalClusterResourceId = globalClusterResourceId
            self.status = status
            self.storageEncrypted = storageEncrypted
        }
    }

}

extension GlobalClusterAlreadyExistsFault {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = GlobalClusterAlreadyExistsFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// The GlobalClusterIdentifier already exists. Choose a new global database identifier (unique name) to create a new global database cluster.
public struct GlobalClusterAlreadyExistsFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "GlobalClusterAlreadyExistsFault" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension RDSClientTypes.GlobalClusterMember: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dbClusterArn = "DBClusterArn"
        case globalWriteForwardingStatus = "GlobalWriteForwardingStatus"
        case isWriter = "IsWriter"
        case readers = "Readers"
        case synchronizationStatus = "SynchronizationStatus"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let dbClusterArn = dbClusterArn {
            try container.encode(dbClusterArn, forKey: ClientRuntime.Key("DBClusterArn"))
        }
        if let globalWriteForwardingStatus = globalWriteForwardingStatus {
            try container.encode(globalWriteForwardingStatus, forKey: ClientRuntime.Key("GlobalWriteForwardingStatus"))
        }
        if let isWriter = isWriter {
            try container.encode(isWriter, forKey: ClientRuntime.Key("IsWriter"))
        }
        if let readers = readers {
            if !readers.isEmpty {
                var readersContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Readers"))
                for (index0, string0) in readers.enumerated() {
                    try readersContainer.encode(string0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var readersContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Readers"))
                try readersContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let synchronizationStatus = synchronizationStatus {
            try container.encode(synchronizationStatus, forKey: ClientRuntime.Key("SynchronizationStatus"))
        }
    }

    static var readingClosure: SmithyReadWrite.ReadingClosure<RDSClientTypes.GlobalClusterMember, SmithyXML.Reader> {
        return { reader in
            guard reader.content != nil else { return nil }
            var value = RDSClientTypes.GlobalClusterMember()
            value.dbClusterArn = try reader["DBClusterArn"].readIfPresent()
            value.readers = try reader["Readers"].readListIfPresent(memberReadingClosure: Swift.String.readingClosure, memberNodeInfo: "member", isFlattened: false)
            value.isWriter = try reader["IsWriter"].readIfPresent()
            value.globalWriteForwardingStatus = try reader["GlobalWriteForwardingStatus"].readIfPresent()
            value.synchronizationStatus = try reader["SynchronizationStatus"].readIfPresent()
            return value
        }
    }
}

extension RDSClientTypes {
    /// A data structure with information about any primary and secondary clusters associated with a global cluster (Aurora global database).
    public struct GlobalClusterMember: Swift.Equatable {
        /// The Amazon Resource Name (ARN) for each Aurora DB cluster in the global cluster.
        public var dbClusterArn: Swift.String?
        /// The status of write forwarding for a secondary cluster in the global cluster.
        public var globalWriteForwardingStatus: RDSClientTypes.WriteForwardingStatus?
        /// Indicates whether the Aurora DB cluster is the primary cluster (that is, has read-write capability) for the global cluster with which it is associated.
        public var isWriter: Swift.Bool?
        /// The Amazon Resource Name (ARN) for each read-only secondary cluster associated with the global cluster.
        public var readers: [Swift.String]?
        /// The status of synchronization of each Aurora DB cluster in the global cluster.
        public var synchronizationStatus: RDSClientTypes.GlobalClusterMemberSynchronizationStatus?

        public init(
            dbClusterArn: Swift.String? = nil,
            globalWriteForwardingStatus: RDSClientTypes.WriteForwardingStatus? = nil,
            isWriter: Swift.Bool? = nil,
            readers: [Swift.String]? = nil,
            synchronizationStatus: RDSClientTypes.GlobalClusterMemberSynchronizationStatus? = nil
        )
        {
            self.dbClusterArn = dbClusterArn
            self.globalWriteForwardingStatus = globalWriteForwardingStatus
            self.isWriter = isWriter
            self.readers = readers
            self.synchronizationStatus = synchronizationStatus
        }
    }

}

extension RDSClientTypes {
    public enum GlobalClusterMemberSynchronizationStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case connected
        case pendingResync
        case sdkUnknown(Swift.String)

        public static var allCases: [GlobalClusterMemberSynchronizationStatus] {
            return [
                .connected,
                .pendingResync,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .connected: return "connected"
            case .pendingResync: return "pending-resync"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = GlobalClusterMemberSynchronizationStatus(rawValue: rawValue) ?? GlobalClusterMemberSynchronizationStatus.sdkUnknown(rawValue)
        }
    }
}

extension GlobalClusterNotFoundFault {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = GlobalClusterNotFoundFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// The GlobalClusterIdentifier doesn't refer to an existing global database cluster.
public struct GlobalClusterNotFoundFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "GlobalClusterNotFoundFault" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension GlobalClusterQuotaExceededFault {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = GlobalClusterQuotaExceededFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// The number of global database clusters for this account is already at the maximum allowed.
public struct GlobalClusterQuotaExceededFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "GlobalClusterQuotaExceededFault" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension RDSClientTypes {
    public enum IAMAuthMode: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case disabled
        case enabled
        case `required`
        case sdkUnknown(Swift.String)

        public static var allCases: [IAMAuthMode] {
            return [
                .disabled,
                .enabled,
                .required,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .disabled: return "DISABLED"
            case .enabled: return "ENABLED"
            case .required: return "REQUIRED"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = IAMAuthMode(rawValue: rawValue) ?? IAMAuthMode.sdkUnknown(rawValue)
        }
    }
}

extension RDSClientTypes.IPRange: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case cidrip = "CIDRIP"
        case status = "Status"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let cidrip = cidrip {
            try container.encode(cidrip, forKey: ClientRuntime.Key("CIDRIP"))
        }
        if let status = status {
            try container.encode(status, forKey: ClientRuntime.Key("Status"))
        }
    }

    static var readingClosure: SmithyReadWrite.ReadingClosure<RDSClientTypes.IPRange, SmithyXML.Reader> {
        return { reader in
            guard reader.content != nil else { return nil }
            var value = RDSClientTypes.IPRange()
            value.status = try reader["Status"].readIfPresent()
            value.cidrip = try reader["CIDRIP"].readIfPresent()
            return value
        }
    }
}

extension RDSClientTypes {
    /// This data type is used as a response element in the DescribeDBSecurityGroups action.
    public struct IPRange: Swift.Equatable {
        /// The IP range.
        public var cidrip: Swift.String?
        /// The status of the IP range. Status can be "authorizing", "authorized", "revoking", and "revoked".
        public var status: Swift.String?

        public init(
            cidrip: Swift.String? = nil,
            status: Swift.String? = nil
        )
        {
            self.cidrip = cidrip
            self.status = status
        }
    }

}

extension IamRoleMissingPermissionsFault {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = IamRoleMissingPermissionsFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// The IAM role requires additional permissions to export to an Amazon S3 bucket.
public struct IamRoleMissingPermissionsFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "IamRoleMissingPermissions" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension IamRoleNotFoundFault {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = IamRoleNotFoundFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// The IAM role is missing for exporting to an Amazon S3 bucket.
public struct IamRoleNotFoundFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "IamRoleNotFound" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension InstanceQuotaExceededFault {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = InstanceQuotaExceededFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// The request would result in the user exceeding the allowed number of DB instances.
public struct InstanceQuotaExceededFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InstanceQuotaExceeded" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension InsufficientAvailableIPsInSubnetFault {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = InsufficientAvailableIPsInSubnetFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// The requested operation can't be performed because there aren't enough available IP addresses in the proxy's subnets. Add more CIDR blocks to the VPC or remove IP address that aren't required from the subnets.
public struct InsufficientAvailableIPsInSubnetFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InsufficientAvailableIPsInSubnetFault" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension InsufficientDBClusterCapacityFault {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = InsufficientDBClusterCapacityFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// The DB cluster doesn't have enough capacity for the current operation.
public struct InsufficientDBClusterCapacityFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InsufficientDBClusterCapacityFault" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension InsufficientDBInstanceCapacityFault {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = InsufficientDBInstanceCapacityFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// The specified DB instance class isn't available in the specified Availability Zone.
public struct InsufficientDBInstanceCapacityFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InsufficientDBInstanceCapacity" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension InsufficientStorageClusterCapacityFault {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = InsufficientStorageClusterCapacityFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// There is insufficient storage available for the current action. You might be able to resolve this error by updating your subnet group to use different Availability Zones that have more storage available.
public struct InsufficientStorageClusterCapacityFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InsufficientStorageClusterCapacity" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension RDSClientTypes.Integration: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case additionalEncryptionContext = "AdditionalEncryptionContext"
        case createTime = "CreateTime"
        case errors = "Errors"
        case integrationArn = "IntegrationArn"
        case integrationName = "IntegrationName"
        case kmsKeyId = "KMSKeyId"
        case sourceArn = "SourceArn"
        case status = "Status"
        case tags = "Tags"
        case targetArn = "TargetArn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let additionalEncryptionContext = additionalEncryptionContext {
            var additionalEncryptionContextContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("AdditionalEncryptionContext"))
            for (index0, element0) in additionalEncryptionContext.sorted(by: { $0.key < $1.key }).enumerated() {
                let stringKey0 = element0.key
                let stringValue0 = element0.value
                var entryContainer0 = additionalEncryptionContextContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("entry.\(index0.advanced(by: 1))"))
                var keyContainer0 = entryContainer0.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("key"))
                try keyContainer0.encode(stringKey0, forKey: ClientRuntime.Key(""))
                var valueContainer0 = entryContainer0.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("value"))
                try valueContainer0.encode(stringValue0, forKey: ClientRuntime.Key(""))
            }
        }
        if let createTime = createTime {
            try container.encodeTimestamp(createTime, format: .dateTime, forKey: ClientRuntime.Key("CreateTime"))
        }
        if let errors = errors {
            if !errors.isEmpty {
                var errorsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Errors"))
                for (index0, integrationerror0) in errors.enumerated() {
                    try errorsContainer.encode(integrationerror0, forKey: ClientRuntime.Key("IntegrationError.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var errorsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Errors"))
                try errorsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let integrationArn = integrationArn {
            try container.encode(integrationArn, forKey: ClientRuntime.Key("IntegrationArn"))
        }
        if let integrationName = integrationName {
            try container.encode(integrationName, forKey: ClientRuntime.Key("IntegrationName"))
        }
        if let kmsKeyId = kmsKeyId {
            try container.encode(kmsKeyId, forKey: ClientRuntime.Key("KMSKeyId"))
        }
        if let sourceArn = sourceArn {
            try container.encode(sourceArn, forKey: ClientRuntime.Key("SourceArn"))
        }
        if let status = status {
            try container.encode(status, forKey: ClientRuntime.Key("Status"))
        }
        if let tags = tags {
            if !tags.isEmpty {
                var tagsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Tags"))
                for (index0, tag0) in tags.enumerated() {
                    try tagsContainer.encode(tag0, forKey: ClientRuntime.Key("Tag.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var tagsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Tags"))
                try tagsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let targetArn = targetArn {
            try container.encode(targetArn, forKey: ClientRuntime.Key("TargetArn"))
        }
    }

    static var readingClosure: SmithyReadWrite.ReadingClosure<RDSClientTypes.Integration, SmithyXML.Reader> {
        return { reader in
            guard reader.content != nil else { return nil }
            var value = RDSClientTypes.Integration()
            value.sourceArn = try reader["SourceArn"].readIfPresent()
            value.targetArn = try reader["TargetArn"].readIfPresent()
            value.integrationName = try reader["IntegrationName"].readIfPresent()
            value.integrationArn = try reader["IntegrationArn"].readIfPresent()
            value.kmsKeyId = try reader["KMSKeyId"].readIfPresent()
            value.additionalEncryptionContext = try reader["AdditionalEncryptionContext"].readMapIfPresent(valueReadingClosure: Swift.String.readingClosure, keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
            value.status = try reader["Status"].readIfPresent()
            value.tags = try reader["Tags"].readListIfPresent(memberReadingClosure: RDSClientTypes.Tag.readingClosure, memberNodeInfo: "Tag", isFlattened: false)
            value.createTime = try reader["CreateTime"].readTimestampIfPresent(format: .dateTime)
            value.errors = try reader["Errors"].readListIfPresent(memberReadingClosure: RDSClientTypes.IntegrationError.readingClosure, memberNodeInfo: "IntegrationError", isFlattened: false)
            return value
        }
    }
}

extension RDSClientTypes {
    /// A zero-ETL integration with Amazon Redshift.
    public struct Integration: Swift.Equatable {
        /// The encryption context for the integration. For more information, see [Encryption context](https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#encrypt_context) in the Amazon Web Services Key Management Service Developer Guide.
        public var additionalEncryptionContext: [Swift.String:Swift.String]?
        /// The time when the integration was created, in Universal Coordinated Time (UTC).
        public var createTime: ClientRuntime.Date?
        /// Any errors associated with the integration.
        public var errors: [RDSClientTypes.IntegrationError]?
        /// The ARN of the integration.
        public var integrationArn: Swift.String?
        /// The name of the integration.
        public var integrationName: Swift.String?
        /// The Amazon Web Services Key Management System (Amazon Web Services KMS) key identifier for the key used to to encrypt the integration.
        public var kmsKeyId: Swift.String?
        /// The Amazon Resource Name (ARN) of the database used as the source for replication.
        public var sourceArn: Swift.String?
        /// The current status of the integration.
        public var status: RDSClientTypes.IntegrationStatus?
        /// A list of tags. For more information, see [Tagging Amazon RDS Resources](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html) in the Amazon RDS User Guide.
        public var tags: [RDSClientTypes.Tag]?
        /// The ARN of the Redshift data warehouse used as the target for replication.
        public var targetArn: Swift.String?

        public init(
            additionalEncryptionContext: [Swift.String:Swift.String]? = nil,
            createTime: ClientRuntime.Date? = nil,
            errors: [RDSClientTypes.IntegrationError]? = nil,
            integrationArn: Swift.String? = nil,
            integrationName: Swift.String? = nil,
            kmsKeyId: Swift.String? = nil,
            sourceArn: Swift.String? = nil,
            status: RDSClientTypes.IntegrationStatus? = nil,
            tags: [RDSClientTypes.Tag]? = nil,
            targetArn: Swift.String? = nil
        )
        {
            self.additionalEncryptionContext = additionalEncryptionContext
            self.createTime = createTime
            self.errors = errors
            self.integrationArn = integrationArn
            self.integrationName = integrationName
            self.kmsKeyId = kmsKeyId
            self.sourceArn = sourceArn
            self.status = status
            self.tags = tags
            self.targetArn = targetArn
        }
    }

}

extension IntegrationAlreadyExistsFault {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = IntegrationAlreadyExistsFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// The integration you are trying to create already exists.
public struct IntegrationAlreadyExistsFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "IntegrationAlreadyExistsFault" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension IntegrationConflictOperationFault {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = IntegrationConflictOperationFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// A conflicting conditional operation is currently in progress against this resource. Typically occurs when there are multiple requests being made to the same resource at the same time, and these requests conflict with each other.
public struct IntegrationConflictOperationFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "IntegrationConflictOperationFault" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension RDSClientTypes.IntegrationError: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case errorCode = "ErrorCode"
        case errorMessage = "ErrorMessage"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let errorCode = errorCode {
            try container.encode(errorCode, forKey: ClientRuntime.Key("ErrorCode"))
        }
        if let errorMessage = errorMessage {
            try container.encode(errorMessage, forKey: ClientRuntime.Key("ErrorMessage"))
        }
    }

    static var readingClosure: SmithyReadWrite.ReadingClosure<RDSClientTypes.IntegrationError, SmithyXML.Reader> {
        return { reader in
            guard reader.content != nil else { return nil }
            var value = RDSClientTypes.IntegrationError()
            value.errorCode = try reader["ErrorCode"].readIfPresent()
            value.errorMessage = try reader["ErrorMessage"].readIfPresent()
            return value
        }
    }
}

extension RDSClientTypes {
    /// An error associated with a zero-ETL integration with Amazon Redshift.
    public struct IntegrationError: Swift.Equatable {
        /// The error code associated with the integration.
        /// This member is required.
        public var errorCode: Swift.String?
        /// A message explaining the error.
        public var errorMessage: Swift.String?

        public init(
            errorCode: Swift.String? = nil,
            errorMessage: Swift.String? = nil
        )
        {
            self.errorCode = errorCode
            self.errorMessage = errorMessage
        }
    }

}

extension IntegrationNotFoundFault {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = IntegrationNotFoundFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// The specified integration could not be found.
public struct IntegrationNotFoundFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "IntegrationNotFoundFault" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension IntegrationQuotaExceededFault {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = IntegrationQuotaExceededFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// You can't crate any more zero-ETL integrations because the quota has been reached.
public struct IntegrationQuotaExceededFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "IntegrationQuotaExceededFault" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension RDSClientTypes {
    public enum IntegrationStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case active
        case creating
        case deleting
        case failed
        case modifying
        case needsAttention
        case syncing
        case sdkUnknown(Swift.String)

        public static var allCases: [IntegrationStatus] {
            return [
                .active,
                .creating,
                .deleting,
                .failed,
                .modifying,
                .needsAttention,
                .syncing,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .active: return "active"
            case .creating: return "creating"
            case .deleting: return "deleting"
            case .failed: return "failed"
            case .modifying: return "modifying"
            case .needsAttention: return "needs_attention"
            case .syncing: return "syncing"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = IntegrationStatus(rawValue: rawValue) ?? IntegrationStatus.sdkUnknown(rawValue)
        }
    }
}

extension InvalidBlueGreenDeploymentStateFault {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = InvalidBlueGreenDeploymentStateFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// The blue/green deployment can't be switched over or deleted because there is an invalid configuration in the green environment.
public struct InvalidBlueGreenDeploymentStateFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidBlueGreenDeploymentStateFault" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension InvalidCustomDBEngineVersionStateFault {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = InvalidCustomDBEngineVersionStateFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// You can't delete the CEV.
public struct InvalidCustomDBEngineVersionStateFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidCustomDBEngineVersionStateFault" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension InvalidDBClusterAutomatedBackupStateFault {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = InvalidDBClusterAutomatedBackupStateFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// The automated backup is in an invalid state. For example, this automated backup is associated with an active cluster.
public struct InvalidDBClusterAutomatedBackupStateFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidDBClusterAutomatedBackupStateFault" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension InvalidDBClusterCapacityFault {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = InvalidDBClusterCapacityFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// Capacity isn't a valid Aurora Serverless DB cluster capacity. Valid capacity values are 2, 4, 8, 16, 32, 64, 128, and 256.
public struct InvalidDBClusterCapacityFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidDBClusterCapacityFault" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension InvalidDBClusterEndpointStateFault {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = InvalidDBClusterEndpointStateFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// The requested operation can't be performed on the endpoint while the endpoint is in this state.
public struct InvalidDBClusterEndpointStateFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidDBClusterEndpointStateFault" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension InvalidDBClusterSnapshotStateFault {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = InvalidDBClusterSnapshotStateFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// The supplied value isn't a valid DB cluster snapshot state.
public struct InvalidDBClusterSnapshotStateFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidDBClusterSnapshotStateFault" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension InvalidDBClusterStateFault {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = InvalidDBClusterStateFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// The requested operation can't be performed while the cluster is in this state.
public struct InvalidDBClusterStateFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidDBClusterStateFault" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension InvalidDBInstanceAutomatedBackupStateFault {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = InvalidDBInstanceAutomatedBackupStateFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// The automated backup is in an invalid state. For example, this automated backup is associated with an active instance.
public struct InvalidDBInstanceAutomatedBackupStateFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidDBInstanceAutomatedBackupState" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension InvalidDBInstanceStateFault {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = InvalidDBInstanceStateFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// The DB instance isn't in a valid state.
public struct InvalidDBInstanceStateFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidDBInstanceState" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension InvalidDBParameterGroupStateFault {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = InvalidDBParameterGroupStateFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// The DB parameter group is in use or is in an invalid state. If you are attempting to delete the parameter group, you can't delete it when the parameter group is in this state.
public struct InvalidDBParameterGroupStateFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidDBParameterGroupState" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension InvalidDBProxyEndpointStateFault {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = InvalidDBProxyEndpointStateFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// You can't perform this operation while the DB proxy endpoint is in a particular state.
public struct InvalidDBProxyEndpointStateFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidDBProxyEndpointStateFault" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension InvalidDBProxyStateFault {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = InvalidDBProxyStateFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// The requested operation can't be performed while the proxy is in this state.
public struct InvalidDBProxyStateFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidDBProxyStateFault" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension InvalidDBSecurityGroupStateFault {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = InvalidDBSecurityGroupStateFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// The state of the DB security group doesn't allow deletion.
public struct InvalidDBSecurityGroupStateFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidDBSecurityGroupState" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension InvalidDBShardGroupStateFault {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = InvalidDBShardGroupStateFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// The DB shard group must be in the available state.
public struct InvalidDBShardGroupStateFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidDBShardGroupState" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension InvalidDBSnapshotStateFault {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = InvalidDBSnapshotStateFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// The state of the DB snapshot doesn't allow deletion.
public struct InvalidDBSnapshotStateFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidDBSnapshotState" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension InvalidDBSubnetGroupFault {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = InvalidDBSubnetGroupFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// The DBSubnetGroup doesn't belong to the same VPC as that of an existing cross-region read replica of the same source instance.
public struct InvalidDBSubnetGroupFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidDBSubnetGroupFault" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension InvalidDBSubnetGroupStateFault {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = InvalidDBSubnetGroupStateFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// The DB subnet group cannot be deleted because it's in use.
public struct InvalidDBSubnetGroupStateFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidDBSubnetGroupStateFault" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension InvalidDBSubnetStateFault {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = InvalidDBSubnetStateFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// The DB subnet isn't in the available state.
public struct InvalidDBSubnetStateFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidDBSubnetStateFault" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension InvalidEventSubscriptionStateFault {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = InvalidEventSubscriptionStateFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// This error can occur if someone else is modifying a subscription. You should retry the action.
public struct InvalidEventSubscriptionStateFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidEventSubscriptionState" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension InvalidExportOnlyFault {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = InvalidExportOnlyFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// The export is invalid for exporting to an Amazon S3 bucket.
public struct InvalidExportOnlyFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidExportOnly" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension InvalidExportSourceStateFault {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = InvalidExportSourceStateFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// The state of the export snapshot is invalid for exporting to an Amazon S3 bucket.
public struct InvalidExportSourceStateFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidExportSourceState" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension InvalidExportTaskStateFault {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = InvalidExportTaskStateFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// You can't cancel an export task that has completed.
public struct InvalidExportTaskStateFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidExportTaskStateFault" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension InvalidGlobalClusterStateFault {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = InvalidGlobalClusterStateFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// The global cluster is in an invalid state and can't perform the requested operation.
public struct InvalidGlobalClusterStateFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidGlobalClusterStateFault" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension InvalidIntegrationStateFault {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = InvalidIntegrationStateFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// The integration is in an invalid state and can't perform the requested operation.
public struct InvalidIntegrationStateFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidIntegrationStateFault" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension InvalidMaxAcuFault {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = InvalidMaxAcuFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// The maximum capacity of the DB shard group must be 48-7168 Aurora capacity units (ACUs).
public struct InvalidMaxAcuFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidMaxAcu" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension InvalidOptionGroupStateFault {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = InvalidOptionGroupStateFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// The option group isn't in the available state.
public struct InvalidOptionGroupStateFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidOptionGroupStateFault" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension InvalidResourceStateFault {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = InvalidResourceStateFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// The operation can't be performed because another operation is in progress.
public struct InvalidResourceStateFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidResourceStateFault" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension InvalidRestoreFault {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = InvalidRestoreFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// Cannot restore from VPC backup to non-VPC DB instance.
public struct InvalidRestoreFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidRestoreFault" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension InvalidS3BucketFault {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = InvalidS3BucketFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// The specified Amazon S3 bucket name can't be found or Amazon RDS isn't authorized to access the specified Amazon S3 bucket. Verify the SourceS3BucketName and S3IngestionRoleArn values and try again.
public struct InvalidS3BucketFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidS3BucketFault" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension InvalidSubnet {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = InvalidSubnet()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// The requested subnet is invalid, or multiple subnets were requested that are not all in a common VPC.
public struct InvalidSubnet: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidSubnet" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension InvalidVPCNetworkStateFault {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = InvalidVPCNetworkStateFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// The DB subnet group doesn't cover all Availability Zones after it's created because of users' change.
public struct InvalidVPCNetworkStateFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidVPCNetworkStateFault" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension RDSClientTypes.IssueDetails: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case performanceIssueDetails = "PerformanceIssueDetails"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let performanceIssueDetails = performanceIssueDetails {
            try container.encode(performanceIssueDetails, forKey: ClientRuntime.Key("PerformanceIssueDetails"))
        }
    }

    static var readingClosure: SmithyReadWrite.ReadingClosure<RDSClientTypes.IssueDetails, SmithyXML.Reader> {
        return { reader in
            guard reader.content != nil else { return nil }
            var value = RDSClientTypes.IssueDetails()
            value.performanceIssueDetails = try reader["PerformanceIssueDetails"].readIfPresent(readingClosure: RDSClientTypes.PerformanceIssueDetails.readingClosure)
            return value
        }
    }
}

extension RDSClientTypes {
    /// The details of an issue with your DB instances, DB clusters, and DB parameter groups.
    public struct IssueDetails: Swift.Equatable {
        /// A detailed description of the issue when the recommendation category is performance.
        public var performanceIssueDetails: RDSClientTypes.PerformanceIssueDetails?

        public init(
            performanceIssueDetails: RDSClientTypes.PerformanceIssueDetails? = nil
        )
        {
            self.performanceIssueDetails = performanceIssueDetails
        }
    }

}

extension KMSKeyNotAccessibleFault {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = KMSKeyNotAccessibleFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// An error occurred accessing an Amazon Web Services KMS key.
public struct KMSKeyNotAccessibleFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "KMSKeyNotAccessibleFault" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension RDSClientTypes.LimitlessDatabase: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case minRequiredACU = "MinRequiredACU"
        case status = "Status"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let minRequiredACU = minRequiredACU {
            try container.encode(minRequiredACU, forKey: ClientRuntime.Key("MinRequiredACU"))
        }
        if let status = status {
            try container.encode(status, forKey: ClientRuntime.Key("Status"))
        }
    }

    static var readingClosure: SmithyReadWrite.ReadingClosure<RDSClientTypes.LimitlessDatabase, SmithyXML.Reader> {
        return { reader in
            guard reader.content != nil else { return nil }
            var value = RDSClientTypes.LimitlessDatabase()
            value.status = try reader["Status"].readIfPresent()
            value.minRequiredACU = try reader["MinRequiredACU"].readIfPresent()
            return value
        }
    }
}

extension RDSClientTypes {
    /// Contains details for Aurora Limitless Database.
    public struct LimitlessDatabase: Swift.Equatable {
        /// The minimum required capacity for Aurora Limitless Database in Aurora capacity units (ACUs).
        public var minRequiredACU: Swift.Double?
        /// The status of Aurora Limitless Database.
        public var status: RDSClientTypes.LimitlessDatabaseStatus?

        public init(
            minRequiredACU: Swift.Double? = nil,
            status: RDSClientTypes.LimitlessDatabaseStatus? = nil
        )
        {
            self.minRequiredACU = minRequiredACU
            self.status = status
        }
    }

}

extension RDSClientTypes {
    public enum LimitlessDatabaseStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case active
        case disabled
        case disabling
        case enabled
        case enabling
        case error
        case modifyingMaxCapacity
        case notInUse
        case sdkUnknown(Swift.String)

        public static var allCases: [LimitlessDatabaseStatus] {
            return [
                .active,
                .disabled,
                .disabling,
                .enabled,
                .enabling,
                .error,
                .modifyingMaxCapacity,
                .notInUse,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .active: return "active"
            case .disabled: return "disabled"
            case .disabling: return "disabling"
            case .enabled: return "enabled"
            case .enabling: return "enabling"
            case .error: return "error"
            case .modifyingMaxCapacity: return "modifying-max-capacity"
            case .notInUse: return "not-in-use"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = LimitlessDatabaseStatus(rawValue: rawValue) ?? LimitlessDatabaseStatus.sdkUnknown(rawValue)
        }
    }
}

extension ListTagsForResourceInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case filters = "Filters"
        case resourceName = "ResourceName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let filters = filters {
            if !filters.isEmpty {
                var filtersContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Filters"))
                for (index0, filter0) in filters.enumerated() {
                    try filtersContainer.encode(filter0, forKey: ClientRuntime.Key("Filter.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var filtersContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Filters"))
                try filtersContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let resourceName = resourceName {
            try container.encode(resourceName, forKey: ClientRuntime.Key("ResourceName"))
        }
        try container.encode("ListTagsForResource", forKey:ClientRuntime.Key("Action"))
        try container.encode("2014-10-31", forKey:ClientRuntime.Key("Version"))
    }
}

extension ListTagsForResourceInput {

    static func urlPathProvider(_ value: ListTagsForResourceInput) -> Swift.String? {
        return "/"
    }
}

///
public struct ListTagsForResourceInput: Swift.Equatable {
    /// This parameter isn't currently supported.
    public var filters: [RDSClientTypes.Filter]?
    /// The Amazon RDS resource with tags to be listed. This value is an Amazon Resource Name (ARN). For information about creating an ARN, see [ Constructing an ARN for Amazon RDS](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.ARN.html#USER_Tagging.ARN.Constructing) in the Amazon RDS User Guide.
    /// This member is required.
    public var resourceName: Swift.String?

    public init(
        filters: [RDSClientTypes.Filter]? = nil,
        resourceName: Swift.String? = nil
    )
    {
        self.filters = filters
        self.resourceName = resourceName
    }
}

extension ListTagsForResourceOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<ListTagsForResourceOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["ListTagsForResourceResult"]
            var value = ListTagsForResourceOutput()
            value.tagList = try reader["TagList"].readListIfPresent(memberReadingClosure: RDSClientTypes.Tag.readingClosure, memberNodeInfo: "Tag", isFlattened: false)
            return value
        }
    }
}

///
public struct ListTagsForResourceOutput: Swift.Equatable {
    /// List of tags returned by the ListTagsForResource operation.
    public var tagList: [RDSClientTypes.Tag]?

    public init(
        tagList: [RDSClientTypes.Tag]? = nil
    )
    {
        self.tagList = tagList
    }
}

enum ListTagsForResourceOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "BlueGreenDeploymentNotFoundFault": return try await BlueGreenDeploymentNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "DBClusterNotFoundFault": return try await DBClusterNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "DBInstanceNotFound": return try await DBInstanceNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "DBProxyNotFoundFault": return try await DBProxyNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "DBProxyTargetGroupNotFoundFault": return try await DBProxyTargetGroupNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "DBSnapshotNotFound": return try await DBSnapshotNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "DBSnapshotTenantDatabaseNotFoundFault": return try await DBSnapshotTenantDatabaseNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "IntegrationNotFoundFault": return try await IntegrationNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "TenantDatabaseNotFound": return try await TenantDatabaseNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension RDSClientTypes {
    public enum LocalWriteForwardingStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case disabled
        case disabling
        case enabled
        case enabling
        case requested
        case sdkUnknown(Swift.String)

        public static var allCases: [LocalWriteForwardingStatus] {
            return [
                .disabled,
                .disabling,
                .enabled,
                .enabling,
                .requested,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .disabled: return "disabled"
            case .disabling: return "disabling"
            case .enabled: return "enabled"
            case .enabling: return "enabling"
            case .requested: return "requested"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = LocalWriteForwardingStatus(rawValue: rawValue) ?? LocalWriteForwardingStatus.sdkUnknown(rawValue)
        }
    }
}

extension RDSClientTypes.MasterUserSecret: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case kmsKeyId = "KmsKeyId"
        case secretArn = "SecretArn"
        case secretStatus = "SecretStatus"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let kmsKeyId = kmsKeyId {
            try container.encode(kmsKeyId, forKey: ClientRuntime.Key("KmsKeyId"))
        }
        if let secretArn = secretArn {
            try container.encode(secretArn, forKey: ClientRuntime.Key("SecretArn"))
        }
        if let secretStatus = secretStatus {
            try container.encode(secretStatus, forKey: ClientRuntime.Key("SecretStatus"))
        }
    }

    static var readingClosure: SmithyReadWrite.ReadingClosure<RDSClientTypes.MasterUserSecret, SmithyXML.Reader> {
        return { reader in
            guard reader.content != nil else { return nil }
            var value = RDSClientTypes.MasterUserSecret()
            value.secretArn = try reader["SecretArn"].readIfPresent()
            value.secretStatus = try reader["SecretStatus"].readIfPresent()
            value.kmsKeyId = try reader["KmsKeyId"].readIfPresent()
            return value
        }
    }
}

extension RDSClientTypes {
    /// Contains the secret managed by RDS in Amazon Web Services Secrets Manager for the master user password. For more information, see [Password management with Amazon Web Services Secrets Manager](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/rds-secrets-manager.html) in the Amazon RDS User Guide and [Password management with Amazon Web Services Secrets Manager](https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/rds-secrets-manager.html) in the Amazon Aurora User Guide.
    public struct MasterUserSecret: Swift.Equatable {
        /// The Amazon Web Services KMS key identifier that is used to encrypt the secret.
        public var kmsKeyId: Swift.String?
        /// The Amazon Resource Name (ARN) of the secret.
        public var secretArn: Swift.String?
        /// The status of the secret. The possible status values include the following:
        ///
        /// * creating - The secret is being created.
        ///
        /// * active - The secret is available for normal use and rotation.
        ///
        /// * rotating - The secret is being rotated.
        ///
        /// * impaired - The secret can be used to access database credentials, but it can't be rotated. A secret might have this status if, for example, permissions are changed so that RDS can no longer access either the secret or the KMS key for the secret. When a secret has this status, you can correct the condition that caused the status. Alternatively, modify the DB instance to turn off automatic management of database credentials, and then modify the DB instance again to turn on automatic management of database credentials.
        public var secretStatus: Swift.String?

        public init(
            kmsKeyId: Swift.String? = nil,
            secretArn: Swift.String? = nil,
            secretStatus: Swift.String? = nil
        )
        {
            self.kmsKeyId = kmsKeyId
            self.secretArn = secretArn
            self.secretStatus = secretStatus
        }
    }

}

extension MaxDBShardGroupLimitReached {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = MaxDBShardGroupLimitReached()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// The maximum number of DB shard groups for your Amazon Web Services account in the specified Amazon Web Services Region has been reached.
public struct MaxDBShardGroupLimitReached: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "MaxDBShardGroupLimitReached" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension RDSClientTypes.Metric: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case metricQuery = "MetricQuery"
        case name = "Name"
        case references = "References"
        case statisticsDetails = "StatisticsDetails"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let metricQuery = metricQuery {
            try container.encode(metricQuery, forKey: ClientRuntime.Key("MetricQuery"))
        }
        if let name = name {
            try container.encode(name, forKey: ClientRuntime.Key("Name"))
        }
        if let references = references {
            if !references.isEmpty {
                var referencesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("References"))
                for (index0, metricreference0) in references.enumerated() {
                    try referencesContainer.encode(metricreference0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var referencesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("References"))
                try referencesContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let statisticsDetails = statisticsDetails {
            try container.encode(statisticsDetails, forKey: ClientRuntime.Key("StatisticsDetails"))
        }
    }

    static var readingClosure: SmithyReadWrite.ReadingClosure<RDSClientTypes.Metric, SmithyXML.Reader> {
        return { reader in
            guard reader.content != nil else { return nil }
            var value = RDSClientTypes.Metric()
            value.name = try reader["Name"].readIfPresent()
            value.references = try reader["References"].readListIfPresent(memberReadingClosure: RDSClientTypes.MetricReference.readingClosure, memberNodeInfo: "member", isFlattened: false)
            value.statisticsDetails = try reader["StatisticsDetails"].readIfPresent()
            value.metricQuery = try reader["MetricQuery"].readIfPresent(readingClosure: RDSClientTypes.MetricQuery.readingClosure)
            return value
        }
    }
}

extension RDSClientTypes {
    /// The representation of a metric.
    public struct Metric: Swift.Equatable {
        /// The query to retrieve metric data points.
        public var metricQuery: RDSClientTypes.MetricQuery?
        /// The name of a metric.
        public var name: Swift.String?
        /// A list of metric references (thresholds).
        public var references: [RDSClientTypes.MetricReference]?
        /// The details of different statistics for a metric. The description might contain markdown.
        public var statisticsDetails: Swift.String?

        public init(
            metricQuery: RDSClientTypes.MetricQuery? = nil,
            name: Swift.String? = nil,
            references: [RDSClientTypes.MetricReference]? = nil,
            statisticsDetails: Swift.String? = nil
        )
        {
            self.metricQuery = metricQuery
            self.name = name
            self.references = references
            self.statisticsDetails = statisticsDetails
        }
    }

}

extension RDSClientTypes.MetricQuery: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case performanceInsightsMetricQuery = "PerformanceInsightsMetricQuery"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let performanceInsightsMetricQuery = performanceInsightsMetricQuery {
            try container.encode(performanceInsightsMetricQuery, forKey: ClientRuntime.Key("PerformanceInsightsMetricQuery"))
        }
    }

    static var readingClosure: SmithyReadWrite.ReadingClosure<RDSClientTypes.MetricQuery, SmithyXML.Reader> {
        return { reader in
            guard reader.content != nil else { return nil }
            var value = RDSClientTypes.MetricQuery()
            value.performanceInsightsMetricQuery = try reader["PerformanceInsightsMetricQuery"].readIfPresent(readingClosure: RDSClientTypes.PerformanceInsightsMetricQuery.readingClosure)
            return value
        }
    }
}

extension RDSClientTypes {
    /// The query to retrieve metric data points.
    public struct MetricQuery: Swift.Equatable {
        /// The Performance Insights query that you can use to retrieve Performance Insights metric data points.
        public var performanceInsightsMetricQuery: RDSClientTypes.PerformanceInsightsMetricQuery?

        public init(
            performanceInsightsMetricQuery: RDSClientTypes.PerformanceInsightsMetricQuery? = nil
        )
        {
            self.performanceInsightsMetricQuery = performanceInsightsMetricQuery
        }
    }

}

extension RDSClientTypes.MetricReference: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name = "Name"
        case referenceDetails = "ReferenceDetails"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let name = name {
            try container.encode(name, forKey: ClientRuntime.Key("Name"))
        }
        if let referenceDetails = referenceDetails {
            try container.encode(referenceDetails, forKey: ClientRuntime.Key("ReferenceDetails"))
        }
    }

    static var readingClosure: SmithyReadWrite.ReadingClosure<RDSClientTypes.MetricReference, SmithyXML.Reader> {
        return { reader in
            guard reader.content != nil else { return nil }
            var value = RDSClientTypes.MetricReference()
            value.name = try reader["Name"].readIfPresent()
            value.referenceDetails = try reader["ReferenceDetails"].readIfPresent(readingClosure: RDSClientTypes.ReferenceDetails.readingClosure)
            return value
        }
    }
}

extension RDSClientTypes {
    /// The reference (threshold) for a metric.
    public struct MetricReference: Swift.Equatable {
        /// The name of the metric reference.
        public var name: Swift.String?
        /// The details of a performance issue.
        public var referenceDetails: RDSClientTypes.ReferenceDetails?

        public init(
            name: Swift.String? = nil,
            referenceDetails: RDSClientTypes.ReferenceDetails? = nil
        )
        {
            self.name = name
            self.referenceDetails = referenceDetails
        }
    }

}

extension RDSClientTypes.MinimumEngineVersionPerAllowedValue: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case allowedValue = "AllowedValue"
        case minimumEngineVersion = "MinimumEngineVersion"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let allowedValue = allowedValue {
            try container.encode(allowedValue, forKey: ClientRuntime.Key("AllowedValue"))
        }
        if let minimumEngineVersion = minimumEngineVersion {
            try container.encode(minimumEngineVersion, forKey: ClientRuntime.Key("MinimumEngineVersion"))
        }
    }

    static var readingClosure: SmithyReadWrite.ReadingClosure<RDSClientTypes.MinimumEngineVersionPerAllowedValue, SmithyXML.Reader> {
        return { reader in
            guard reader.content != nil else { return nil }
            var value = RDSClientTypes.MinimumEngineVersionPerAllowedValue()
            value.allowedValue = try reader["AllowedValue"].readIfPresent()
            value.minimumEngineVersion = try reader["MinimumEngineVersion"].readIfPresent()
            return value
        }
    }
}

extension RDSClientTypes {
    /// The minimum DB engine version required for each corresponding allowed value for an option setting.
    public struct MinimumEngineVersionPerAllowedValue: Swift.Equatable {
        /// The allowed value for an option setting.
        public var allowedValue: Swift.String?
        /// The minimum DB engine version required for the allowed value.
        public var minimumEngineVersion: Swift.String?

        public init(
            allowedValue: Swift.String? = nil,
            minimumEngineVersion: Swift.String? = nil
        )
        {
            self.allowedValue = allowedValue
            self.minimumEngineVersion = minimumEngineVersion
        }
    }

}

extension ModifyActivityStreamInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case auditPolicyState = "AuditPolicyState"
        case resourceArn = "ResourceArn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let auditPolicyState = auditPolicyState {
            try container.encode(auditPolicyState, forKey: ClientRuntime.Key("AuditPolicyState"))
        }
        if let resourceArn = resourceArn {
            try container.encode(resourceArn, forKey: ClientRuntime.Key("ResourceArn"))
        }
        try container.encode("ModifyActivityStream", forKey:ClientRuntime.Key("Action"))
        try container.encode("2014-10-31", forKey:ClientRuntime.Key("Version"))
    }
}

extension ModifyActivityStreamInput {

    static func urlPathProvider(_ value: ModifyActivityStreamInput) -> Swift.String? {
        return "/"
    }
}

public struct ModifyActivityStreamInput: Swift.Equatable {
    /// The audit policy state. When a policy is unlocked, it is read/write. When it is locked, it is read-only. You can edit your audit policy only when the activity stream is unlocked or stopped.
    public var auditPolicyState: RDSClientTypes.AuditPolicyState?
    /// The Amazon Resource Name (ARN) of the RDS for Oracle or Microsoft SQL Server DB instance. For example, arn:aws:rds:us-east-1:12345667890:instance:my-orcl-db.
    public var resourceArn: Swift.String?

    public init(
        auditPolicyState: RDSClientTypes.AuditPolicyState? = nil,
        resourceArn: Swift.String? = nil
    )
    {
        self.auditPolicyState = auditPolicyState
        self.resourceArn = resourceArn
    }
}

extension ModifyActivityStreamOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<ModifyActivityStreamOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["ModifyActivityStreamResult"]
            var value = ModifyActivityStreamOutput()
            value.engineNativeAuditFieldsIncluded = try reader["EngineNativeAuditFieldsIncluded"].readIfPresent()
            value.kinesisStreamName = try reader["KinesisStreamName"].readIfPresent()
            value.kmsKeyId = try reader["KmsKeyId"].readIfPresent()
            value.mode = try reader["Mode"].readIfPresent()
            value.policyStatus = try reader["PolicyStatus"].readIfPresent()
            value.status = try reader["Status"].readIfPresent()
            return value
        }
    }
}

public struct ModifyActivityStreamOutput: Swift.Equatable {
    /// Indicates whether engine-native audit fields are included in the database activity stream.
    public var engineNativeAuditFieldsIncluded: Swift.Bool?
    /// The name of the Amazon Kinesis data stream to be used for the database activity stream.
    public var kinesisStreamName: Swift.String?
    /// The Amazon Web Services KMS key identifier for encryption of messages in the database activity stream.
    public var kmsKeyId: Swift.String?
    /// The mode of the database activity stream.
    public var mode: RDSClientTypes.ActivityStreamMode?
    /// The status of the modification to the policy state of the database activity stream.
    public var policyStatus: RDSClientTypes.ActivityStreamPolicyStatus?
    /// The status of the modification to the database activity stream.
    public var status: RDSClientTypes.ActivityStreamStatus?

    public init(
        engineNativeAuditFieldsIncluded: Swift.Bool? = nil,
        kinesisStreamName: Swift.String? = nil,
        kmsKeyId: Swift.String? = nil,
        mode: RDSClientTypes.ActivityStreamMode? = nil,
        policyStatus: RDSClientTypes.ActivityStreamPolicyStatus? = nil,
        status: RDSClientTypes.ActivityStreamStatus? = nil
    )
    {
        self.engineNativeAuditFieldsIncluded = engineNativeAuditFieldsIncluded
        self.kinesisStreamName = kinesisStreamName
        self.kmsKeyId = kmsKeyId
        self.mode = mode
        self.policyStatus = policyStatus
        self.status = status
    }
}

enum ModifyActivityStreamOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "DBInstanceNotFound": return try await DBInstanceNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "InvalidDBInstanceState": return try await InvalidDBInstanceStateFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "ResourceNotFoundFault": return try await ResourceNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension ModifyCertificatesInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case certificateIdentifier = "CertificateIdentifier"
        case removeCustomerOverride = "RemoveCustomerOverride"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let certificateIdentifier = certificateIdentifier {
            try container.encode(certificateIdentifier, forKey: ClientRuntime.Key("CertificateIdentifier"))
        }
        if let removeCustomerOverride = removeCustomerOverride {
            try container.encode(removeCustomerOverride, forKey: ClientRuntime.Key("RemoveCustomerOverride"))
        }
        try container.encode("ModifyCertificates", forKey:ClientRuntime.Key("Action"))
        try container.encode("2014-10-31", forKey:ClientRuntime.Key("Version"))
    }
}

extension ModifyCertificatesInput {

    static func urlPathProvider(_ value: ModifyCertificatesInput) -> Swift.String? {
        return "/"
    }
}

public struct ModifyCertificatesInput: Swift.Equatable {
    /// The new default certificate identifier to override the current one with. To determine the valid values, use the describe-certificates CLI command or the DescribeCertificates API operation.
    public var certificateIdentifier: Swift.String?
    /// Specifies whether to remove the override for the default certificate. If the override is removed, the default certificate is the system default.
    public var removeCustomerOverride: Swift.Bool?

    public init(
        certificateIdentifier: Swift.String? = nil,
        removeCustomerOverride: Swift.Bool? = nil
    )
    {
        self.certificateIdentifier = certificateIdentifier
        self.removeCustomerOverride = removeCustomerOverride
    }
}

extension ModifyCertificatesOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<ModifyCertificatesOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["ModifyCertificatesResult"]
            var value = ModifyCertificatesOutput()
            value.certificate = try reader["Certificate"].readIfPresent(readingClosure: RDSClientTypes.Certificate.readingClosure)
            return value
        }
    }
}

public struct ModifyCertificatesOutput: Swift.Equatable {
    /// A CA certificate for an Amazon Web Services account. For more information, see [Using SSL/TLS to encrypt a connection to a DB instance](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.SSL.html) in the Amazon RDS User Guide and [ Using SSL/TLS to encrypt a connection to a DB cluster](https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/UsingWithRDS.SSL.html) in the Amazon Aurora User Guide.
    public var certificate: RDSClientTypes.Certificate?

    public init(
        certificate: RDSClientTypes.Certificate? = nil
    )
    {
        self.certificate = certificate
    }
}

enum ModifyCertificatesOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "CertificateNotFound": return try await CertificateNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension ModifyCurrentDBClusterCapacityInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case capacity = "Capacity"
        case dbClusterIdentifier = "DBClusterIdentifier"
        case secondsBeforeTimeout = "SecondsBeforeTimeout"
        case timeoutAction = "TimeoutAction"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let capacity = capacity {
            try container.encode(capacity, forKey: ClientRuntime.Key("Capacity"))
        }
        if let dbClusterIdentifier = dbClusterIdentifier {
            try container.encode(dbClusterIdentifier, forKey: ClientRuntime.Key("DBClusterIdentifier"))
        }
        if let secondsBeforeTimeout = secondsBeforeTimeout {
            try container.encode(secondsBeforeTimeout, forKey: ClientRuntime.Key("SecondsBeforeTimeout"))
        }
        if let timeoutAction = timeoutAction {
            try container.encode(timeoutAction, forKey: ClientRuntime.Key("TimeoutAction"))
        }
        try container.encode("ModifyCurrentDBClusterCapacity", forKey:ClientRuntime.Key("Action"))
        try container.encode("2014-10-31", forKey:ClientRuntime.Key("Version"))
    }
}

extension ModifyCurrentDBClusterCapacityInput {

    static func urlPathProvider(_ value: ModifyCurrentDBClusterCapacityInput) -> Swift.String? {
        return "/"
    }
}

public struct ModifyCurrentDBClusterCapacityInput: Swift.Equatable {
    /// The DB cluster capacity. When you change the capacity of a paused Aurora Serverless v1 DB cluster, it automatically resumes. Constraints:
    ///
    /// * For Aurora MySQL, valid capacity values are 1, 2, 4, 8, 16, 32, 64, 128, and 256.
    ///
    /// * For Aurora PostgreSQL, valid capacity values are 2, 4, 8, 16, 32, 64, 192, and 384.
    public var capacity: Swift.Int?
    /// The DB cluster identifier for the cluster being modified. This parameter isn't case-sensitive. Constraints:
    ///
    /// * Must match the identifier of an existing DB cluster.
    /// This member is required.
    public var dbClusterIdentifier: Swift.String?
    /// The amount of time, in seconds, that Aurora Serverless v1 tries to find a scaling point to perform seamless scaling before enforcing the timeout action. The default is 300. Specify a value between 10 and 600 seconds.
    public var secondsBeforeTimeout: Swift.Int?
    /// The action to take when the timeout is reached, either ForceApplyCapacityChange or RollbackCapacityChange. ForceApplyCapacityChange, the default, sets the capacity to the specified value as soon as possible. RollbackCapacityChange ignores the capacity change if a scaling point isn't found in the timeout period.
    public var timeoutAction: Swift.String?

    public init(
        capacity: Swift.Int? = nil,
        dbClusterIdentifier: Swift.String? = nil,
        secondsBeforeTimeout: Swift.Int? = nil,
        timeoutAction: Swift.String? = nil
    )
    {
        self.capacity = capacity
        self.dbClusterIdentifier = dbClusterIdentifier
        self.secondsBeforeTimeout = secondsBeforeTimeout
        self.timeoutAction = timeoutAction
    }
}

extension ModifyCurrentDBClusterCapacityOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<ModifyCurrentDBClusterCapacityOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["ModifyCurrentDBClusterCapacityResult"]
            var value = ModifyCurrentDBClusterCapacityOutput()
            value.currentCapacity = try reader["CurrentCapacity"].readIfPresent()
            value.dbClusterIdentifier = try reader["DBClusterIdentifier"].readIfPresent()
            value.pendingCapacity = try reader["PendingCapacity"].readIfPresent()
            value.secondsBeforeTimeout = try reader["SecondsBeforeTimeout"].readIfPresent()
            value.timeoutAction = try reader["TimeoutAction"].readIfPresent()
            return value
        }
    }
}

public struct ModifyCurrentDBClusterCapacityOutput: Swift.Equatable {
    /// The current capacity of the DB cluster.
    public var currentCapacity: Swift.Int?
    /// A user-supplied DB cluster identifier. This identifier is the unique key that identifies a DB cluster.
    public var dbClusterIdentifier: Swift.String?
    /// A value that specifies the capacity that the DB cluster scales to next.
    public var pendingCapacity: Swift.Int?
    /// The number of seconds before a call to ModifyCurrentDBClusterCapacity times out.
    public var secondsBeforeTimeout: Swift.Int?
    /// The timeout action of a call to ModifyCurrentDBClusterCapacity, either ForceApplyCapacityChange or RollbackCapacityChange.
    public var timeoutAction: Swift.String?

    public init(
        currentCapacity: Swift.Int? = nil,
        dbClusterIdentifier: Swift.String? = nil,
        pendingCapacity: Swift.Int? = nil,
        secondsBeforeTimeout: Swift.Int? = nil,
        timeoutAction: Swift.String? = nil
    )
    {
        self.currentCapacity = currentCapacity
        self.dbClusterIdentifier = dbClusterIdentifier
        self.pendingCapacity = pendingCapacity
        self.secondsBeforeTimeout = secondsBeforeTimeout
        self.timeoutAction = timeoutAction
    }
}

enum ModifyCurrentDBClusterCapacityOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "DBClusterNotFoundFault": return try await DBClusterNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "InvalidDBClusterCapacityFault": return try await InvalidDBClusterCapacityFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "InvalidDBClusterStateFault": return try await InvalidDBClusterStateFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension ModifyCustomDBEngineVersionInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case description = "Description"
        case engine = "Engine"
        case engineVersion = "EngineVersion"
        case status = "Status"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let description = description {
            try container.encode(description, forKey: ClientRuntime.Key("Description"))
        }
        if let engine = engine {
            try container.encode(engine, forKey: ClientRuntime.Key("Engine"))
        }
        if let engineVersion = engineVersion {
            try container.encode(engineVersion, forKey: ClientRuntime.Key("EngineVersion"))
        }
        if let status = status {
            try container.encode(status, forKey: ClientRuntime.Key("Status"))
        }
        try container.encode("ModifyCustomDBEngineVersion", forKey:ClientRuntime.Key("Action"))
        try container.encode("2014-10-31", forKey:ClientRuntime.Key("Version"))
    }
}

extension ModifyCustomDBEngineVersionInput {

    static func urlPathProvider(_ value: ModifyCustomDBEngineVersionInput) -> Swift.String? {
        return "/"
    }
}

public struct ModifyCustomDBEngineVersionInput: Swift.Equatable {
    /// An optional description of your CEV.
    public var description: Swift.String?
    /// The DB engine. The only supported values are custom-oracle-ee and custom-oracle-ee-cdb.
    /// This member is required.
    public var engine: Swift.String?
    /// The custom engine version (CEV) that you want to modify. This option is required for RDS Custom for Oracle, but optional for Amazon RDS. The combination of Engine and EngineVersion is unique per customer per Amazon Web Services Region.
    /// This member is required.
    public var engineVersion: Swift.String?
    /// The availability status to be assigned to the CEV. Valid values are as follows: available You can use this CEV to create a new RDS Custom DB instance. inactive You can create a new RDS Custom instance by restoring a DB snapshot with this CEV. You can't patch or create new instances with this CEV. You can change any status to any status. A typical reason to change status is to prevent the accidental use of a CEV, or to make a deprecated CEV eligible for use again. For example, you might change the status of your CEV from available to inactive, and from inactive back to available. To change the availability status of the CEV, it must not currently be in use by an RDS Custom instance, snapshot, or automated backup.
    public var status: RDSClientTypes.CustomEngineVersionStatus?

    public init(
        description: Swift.String? = nil,
        engine: Swift.String? = nil,
        engineVersion: Swift.String? = nil,
        status: RDSClientTypes.CustomEngineVersionStatus? = nil
    )
    {
        self.description = description
        self.engine = engine
        self.engineVersion = engineVersion
        self.status = status
    }
}

extension ModifyCustomDBEngineVersionOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<ModifyCustomDBEngineVersionOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["ModifyCustomDBEngineVersionResult"]
            var value = ModifyCustomDBEngineVersionOutput()
            value.createTime = try reader["CreateTime"].readTimestampIfPresent(format: .dateTime)
            value.customDBEngineVersionManifest = try reader["CustomDBEngineVersionManifest"].readIfPresent()
            value.dbEngineDescription = try reader["DBEngineDescription"].readIfPresent()
            value.dbEngineMediaType = try reader["DBEngineMediaType"].readIfPresent()
            value.dbEngineVersionArn = try reader["DBEngineVersionArn"].readIfPresent()
            value.dbEngineVersionDescription = try reader["DBEngineVersionDescription"].readIfPresent()
            value.dbParameterGroupFamily = try reader["DBParameterGroupFamily"].readIfPresent()
            value.databaseInstallationFilesS3BucketName = try reader["DatabaseInstallationFilesS3BucketName"].readIfPresent()
            value.databaseInstallationFilesS3Prefix = try reader["DatabaseInstallationFilesS3Prefix"].readIfPresent()
            value.defaultCharacterSet = try reader["DefaultCharacterSet"].readIfPresent(readingClosure: RDSClientTypes.CharacterSet.readingClosure)
            value.engine = try reader["Engine"].readIfPresent()
            value.engineVersion = try reader["EngineVersion"].readIfPresent()
            value.exportableLogTypes = try reader["ExportableLogTypes"].readListIfPresent(memberReadingClosure: Swift.String.readingClosure, memberNodeInfo: "member", isFlattened: false)
            value.image = try reader["Image"].readIfPresent(readingClosure: RDSClientTypes.CustomDBEngineVersionAMI.readingClosure)
            value.kmsKeyId = try reader["KMSKeyId"].readIfPresent()
            value.majorEngineVersion = try reader["MajorEngineVersion"].readIfPresent()
            value.status = try reader["Status"].readIfPresent()
            value.supportedCACertificateIdentifiers = try reader["SupportedCACertificateIdentifiers"].readListIfPresent(memberReadingClosure: Swift.String.readingClosure, memberNodeInfo: "member", isFlattened: false)
            value.supportedCharacterSets = try reader["SupportedCharacterSets"].readListIfPresent(memberReadingClosure: RDSClientTypes.CharacterSet.readingClosure, memberNodeInfo: "CharacterSet", isFlattened: false)
            value.supportedEngineModes = try reader["SupportedEngineModes"].readListIfPresent(memberReadingClosure: Swift.String.readingClosure, memberNodeInfo: "member", isFlattened: false)
            value.supportedFeatureNames = try reader["SupportedFeatureNames"].readListIfPresent(memberReadingClosure: Swift.String.readingClosure, memberNodeInfo: "member", isFlattened: false)
            value.supportedNcharCharacterSets = try reader["SupportedNcharCharacterSets"].readListIfPresent(memberReadingClosure: RDSClientTypes.CharacterSet.readingClosure, memberNodeInfo: "CharacterSet", isFlattened: false)
            value.supportedTimezones = try reader["SupportedTimezones"].readListIfPresent(memberReadingClosure: RDSClientTypes.Timezone.readingClosure, memberNodeInfo: "Timezone", isFlattened: false)
            value.supportsBabelfish = try reader["SupportsBabelfish"].readIfPresent()
            value.supportsCertificateRotationWithoutRestart = try reader["SupportsCertificateRotationWithoutRestart"].readIfPresent()
            value.supportsGlobalDatabases = try reader["SupportsGlobalDatabases"].readIfPresent()
            value.supportsIntegrations = try reader["SupportsIntegrations"].readIfPresent()
            value.supportsLocalWriteForwarding = try reader["SupportsLocalWriteForwarding"].readIfPresent()
            value.supportsLogExportsToCloudwatchLogs = try reader["SupportsLogExportsToCloudwatchLogs"].readIfPresent()
            value.supportsParallelQuery = try reader["SupportsParallelQuery"].readIfPresent()
            value.supportsReadReplica = try reader["SupportsReadReplica"].readIfPresent()
            value.tagList = try reader["TagList"].readListIfPresent(memberReadingClosure: RDSClientTypes.Tag.readingClosure, memberNodeInfo: "Tag", isFlattened: false)
            value.validUpgradeTarget = try reader["ValidUpgradeTarget"].readListIfPresent(memberReadingClosure: RDSClientTypes.UpgradeTarget.readingClosure, memberNodeInfo: "UpgradeTarget", isFlattened: false)
            return value
        }
    }
}

/// This data type is used as a response element in the action DescribeDBEngineVersions.
public struct ModifyCustomDBEngineVersionOutput: Swift.Equatable {
    /// The creation time of the DB engine version.
    public var createTime: ClientRuntime.Date?
    /// JSON string that lists the installation files and parameters that RDS Custom uses to create a custom engine version (CEV). RDS Custom applies the patches in the order in which they're listed in the manifest. You can set the Oracle home, Oracle base, and UNIX/Linux user and group using the installation parameters. For more information, see [JSON fields in the CEV manifest](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/custom-cev.preparing.html#custom-cev.preparing.manifest.fields) in the Amazon RDS User Guide.
    public var customDBEngineVersionManifest: Swift.String?
    /// The name of the Amazon S3 bucket that contains your database installation files.
    public var databaseInstallationFilesS3BucketName: Swift.String?
    /// The Amazon S3 directory that contains the database installation files. If not specified, then no prefix is assumed.
    public var databaseInstallationFilesS3Prefix: Swift.String?
    /// The description of the database engine.
    public var dbEngineDescription: Swift.String?
    /// A value that indicates the source media provider of the AMI based on the usage operation. Applicable for RDS Custom for SQL Server.
    public var dbEngineMediaType: Swift.String?
    /// The ARN of the custom engine version.
    public var dbEngineVersionArn: Swift.String?
    /// The description of the database engine version.
    public var dbEngineVersionDescription: Swift.String?
    /// The name of the DB parameter group family for the database engine.
    public var dbParameterGroupFamily: Swift.String?
    /// The default character set for new instances of this engine version, if the CharacterSetName parameter of the CreateDBInstance API isn't specified.
    public var defaultCharacterSet: RDSClientTypes.CharacterSet?
    /// The name of the database engine.
    public var engine: Swift.String?
    /// The version number of the database engine.
    public var engineVersion: Swift.String?
    /// The types of logs that the database engine has available for export to CloudWatch Logs.
    public var exportableLogTypes: [Swift.String]?
    /// The EC2 image
    public var image: RDSClientTypes.CustomDBEngineVersionAMI?
    /// The Amazon Web Services KMS key identifier for an encrypted CEV. This parameter is required for RDS Custom, but optional for Amazon RDS.
    public var kmsKeyId: Swift.String?
    /// The major engine version of the CEV.
    public var majorEngineVersion: Swift.String?
    /// The status of the DB engine version, either available or deprecated.
    public var status: Swift.String?
    /// A list of the supported CA certificate identifiers. For more information, see [Using SSL/TLS to encrypt a connection to a DB instance](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.SSL.html) in the Amazon RDS User Guide and [ Using SSL/TLS to encrypt a connection to a DB cluster](https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/UsingWithRDS.SSL.html) in the Amazon Aurora User Guide.
    public var supportedCACertificateIdentifiers: [Swift.String]?
    /// A list of the character sets supported by this engine for the CharacterSetName parameter of the CreateDBInstance operation.
    public var supportedCharacterSets: [RDSClientTypes.CharacterSet]?
    /// A list of the supported DB engine modes.
    public var supportedEngineModes: [Swift.String]?
    /// A list of features supported by the DB engine. The supported features vary by DB engine and DB engine version. To determine the supported features for a specific DB engine and DB engine version using the CLI, use the following command: aws rds describe-db-engine-versions --engine --engine-version  For example, to determine the supported features for RDS for PostgreSQL version 13.3 using the CLI, use the following command: aws rds describe-db-engine-versions --engine postgres --engine-version 13.3 The supported features are listed under SupportedFeatureNames in the output.
    public var supportedFeatureNames: [Swift.String]?
    /// A list of the character sets supported by the Oracle DB engine for the NcharCharacterSetName parameter of the CreateDBInstance operation.
    public var supportedNcharCharacterSets: [RDSClientTypes.CharacterSet]?
    /// A list of the time zones supported by this engine for the Timezone parameter of the CreateDBInstance action.
    public var supportedTimezones: [RDSClientTypes.Timezone]?
    /// Indicates whether the engine version supports Babelfish for Aurora PostgreSQL.
    public var supportsBabelfish: Swift.Bool?
    /// Indicates whether the engine version supports rotating the server certificate without rebooting the DB instance.
    public var supportsCertificateRotationWithoutRestart: Swift.Bool?
    /// Indicates whether you can use Aurora global databases with a specific DB engine version.
    public var supportsGlobalDatabases: Swift.Bool?
    /// Indicates whether the DB engine version supports zero-ETL integrations with Amazon Redshift.
    public var supportsIntegrations: Swift.Bool?
    /// Indicates whether the DB engine version supports forwarding write operations from reader DB instances to the writer DB instance in the DB cluster. By default, write operations aren't allowed on reader DB instances. Valid for: Aurora DB clusters only
    public var supportsLocalWriteForwarding: Swift.Bool?
    /// Indicates whether the engine version supports exporting the log types specified by ExportableLogTypes to CloudWatch Logs.
    public var supportsLogExportsToCloudwatchLogs: Swift.Bool?
    /// Indicates whether you can use Aurora parallel query with a specific DB engine version.
    public var supportsParallelQuery: Swift.Bool?
    /// Indicates whether the database engine version supports read replicas.
    public var supportsReadReplica: Swift.Bool?
    /// A list of tags. For more information, see [Tagging Amazon RDS Resources](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html) in the Amazon RDS User Guide.
    public var tagList: [RDSClientTypes.Tag]?
    /// A list of engine versions that this database engine version can be upgraded to.
    public var validUpgradeTarget: [RDSClientTypes.UpgradeTarget]?

    public init(
        createTime: ClientRuntime.Date? = nil,
        customDBEngineVersionManifest: Swift.String? = nil,
        databaseInstallationFilesS3BucketName: Swift.String? = nil,
        databaseInstallationFilesS3Prefix: Swift.String? = nil,
        dbEngineDescription: Swift.String? = nil,
        dbEngineMediaType: Swift.String? = nil,
        dbEngineVersionArn: Swift.String? = nil,
        dbEngineVersionDescription: Swift.String? = nil,
        dbParameterGroupFamily: Swift.String? = nil,
        defaultCharacterSet: RDSClientTypes.CharacterSet? = nil,
        engine: Swift.String? = nil,
        engineVersion: Swift.String? = nil,
        exportableLogTypes: [Swift.String]? = nil,
        image: RDSClientTypes.CustomDBEngineVersionAMI? = nil,
        kmsKeyId: Swift.String? = nil,
        majorEngineVersion: Swift.String? = nil,
        status: Swift.String? = nil,
        supportedCACertificateIdentifiers: [Swift.String]? = nil,
        supportedCharacterSets: [RDSClientTypes.CharacterSet]? = nil,
        supportedEngineModes: [Swift.String]? = nil,
        supportedFeatureNames: [Swift.String]? = nil,
        supportedNcharCharacterSets: [RDSClientTypes.CharacterSet]? = nil,
        supportedTimezones: [RDSClientTypes.Timezone]? = nil,
        supportsBabelfish: Swift.Bool? = nil,
        supportsCertificateRotationWithoutRestart: Swift.Bool? = nil,
        supportsGlobalDatabases: Swift.Bool? = nil,
        supportsIntegrations: Swift.Bool? = nil,
        supportsLocalWriteForwarding: Swift.Bool? = nil,
        supportsLogExportsToCloudwatchLogs: Swift.Bool? = nil,
        supportsParallelQuery: Swift.Bool? = nil,
        supportsReadReplica: Swift.Bool? = nil,
        tagList: [RDSClientTypes.Tag]? = nil,
        validUpgradeTarget: [RDSClientTypes.UpgradeTarget]? = nil
    )
    {
        self.createTime = createTime
        self.customDBEngineVersionManifest = customDBEngineVersionManifest
        self.databaseInstallationFilesS3BucketName = databaseInstallationFilesS3BucketName
        self.databaseInstallationFilesS3Prefix = databaseInstallationFilesS3Prefix
        self.dbEngineDescription = dbEngineDescription
        self.dbEngineMediaType = dbEngineMediaType
        self.dbEngineVersionArn = dbEngineVersionArn
        self.dbEngineVersionDescription = dbEngineVersionDescription
        self.dbParameterGroupFamily = dbParameterGroupFamily
        self.defaultCharacterSet = defaultCharacterSet
        self.engine = engine
        self.engineVersion = engineVersion
        self.exportableLogTypes = exportableLogTypes
        self.image = image
        self.kmsKeyId = kmsKeyId
        self.majorEngineVersion = majorEngineVersion
        self.status = status
        self.supportedCACertificateIdentifiers = supportedCACertificateIdentifiers
        self.supportedCharacterSets = supportedCharacterSets
        self.supportedEngineModes = supportedEngineModes
        self.supportedFeatureNames = supportedFeatureNames
        self.supportedNcharCharacterSets = supportedNcharCharacterSets
        self.supportedTimezones = supportedTimezones
        self.supportsBabelfish = supportsBabelfish
        self.supportsCertificateRotationWithoutRestart = supportsCertificateRotationWithoutRestart
        self.supportsGlobalDatabases = supportsGlobalDatabases
        self.supportsIntegrations = supportsIntegrations
        self.supportsLocalWriteForwarding = supportsLocalWriteForwarding
        self.supportsLogExportsToCloudwatchLogs = supportsLogExportsToCloudwatchLogs
        self.supportsParallelQuery = supportsParallelQuery
        self.supportsReadReplica = supportsReadReplica
        self.tagList = tagList
        self.validUpgradeTarget = validUpgradeTarget
    }
}

enum ModifyCustomDBEngineVersionOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "CustomDBEngineVersionNotFoundFault": return try await CustomDBEngineVersionNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "InvalidCustomDBEngineVersionStateFault": return try await InvalidCustomDBEngineVersionStateFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension ModifyDBClusterEndpointInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dbClusterEndpointIdentifier = "DBClusterEndpointIdentifier"
        case endpointType = "EndpointType"
        case excludedMembers = "ExcludedMembers"
        case staticMembers = "StaticMembers"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let dbClusterEndpointIdentifier = dbClusterEndpointIdentifier {
            try container.encode(dbClusterEndpointIdentifier, forKey: ClientRuntime.Key("DBClusterEndpointIdentifier"))
        }
        if let endpointType = endpointType {
            try container.encode(endpointType, forKey: ClientRuntime.Key("EndpointType"))
        }
        if let excludedMembers = excludedMembers {
            if !excludedMembers.isEmpty {
                var excludedMembersContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("ExcludedMembers"))
                for (index0, string0) in excludedMembers.enumerated() {
                    try excludedMembersContainer.encode(string0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var excludedMembersContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("ExcludedMembers"))
                try excludedMembersContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let staticMembers = staticMembers {
            if !staticMembers.isEmpty {
                var staticMembersContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("StaticMembers"))
                for (index0, string0) in staticMembers.enumerated() {
                    try staticMembersContainer.encode(string0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var staticMembersContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("StaticMembers"))
                try staticMembersContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        try container.encode("ModifyDBClusterEndpoint", forKey:ClientRuntime.Key("Action"))
        try container.encode("2014-10-31", forKey:ClientRuntime.Key("Version"))
    }
}

extension ModifyDBClusterEndpointInput {

    static func urlPathProvider(_ value: ModifyDBClusterEndpointInput) -> Swift.String? {
        return "/"
    }
}

public struct ModifyDBClusterEndpointInput: Swift.Equatable {
    /// The identifier of the endpoint to modify. This parameter is stored as a lowercase string.
    /// This member is required.
    public var dbClusterEndpointIdentifier: Swift.String?
    /// The type of the endpoint. One of: READER, WRITER, ANY.
    public var endpointType: Swift.String?
    /// List of DB instance identifiers that aren't part of the custom endpoint group. All other eligible instances are reachable through the custom endpoint. Only relevant if the list of static members is empty.
    public var excludedMembers: [Swift.String]?
    /// List of DB instance identifiers that are part of the custom endpoint group.
    public var staticMembers: [Swift.String]?

    public init(
        dbClusterEndpointIdentifier: Swift.String? = nil,
        endpointType: Swift.String? = nil,
        excludedMembers: [Swift.String]? = nil,
        staticMembers: [Swift.String]? = nil
    )
    {
        self.dbClusterEndpointIdentifier = dbClusterEndpointIdentifier
        self.endpointType = endpointType
        self.excludedMembers = excludedMembers
        self.staticMembers = staticMembers
    }
}

extension ModifyDBClusterEndpointOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<ModifyDBClusterEndpointOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["ModifyDBClusterEndpointResult"]
            var value = ModifyDBClusterEndpointOutput()
            value.customEndpointType = try reader["CustomEndpointType"].readIfPresent()
            value.dbClusterEndpointArn = try reader["DBClusterEndpointArn"].readIfPresent()
            value.dbClusterEndpointIdentifier = try reader["DBClusterEndpointIdentifier"].readIfPresent()
            value.dbClusterEndpointResourceIdentifier = try reader["DBClusterEndpointResourceIdentifier"].readIfPresent()
            value.dbClusterIdentifier = try reader["DBClusterIdentifier"].readIfPresent()
            value.endpoint = try reader["Endpoint"].readIfPresent()
            value.endpointType = try reader["EndpointType"].readIfPresent()
            value.excludedMembers = try reader["ExcludedMembers"].readListIfPresent(memberReadingClosure: Swift.String.readingClosure, memberNodeInfo: "member", isFlattened: false)
            value.staticMembers = try reader["StaticMembers"].readListIfPresent(memberReadingClosure: Swift.String.readingClosure, memberNodeInfo: "member", isFlattened: false)
            value.status = try reader["Status"].readIfPresent()
            return value
        }
    }
}

/// This data type represents the information you need to connect to an Amazon Aurora DB cluster. This data type is used as a response element in the following actions:
///
/// * CreateDBClusterEndpoint
///
/// * DescribeDBClusterEndpoints
///
/// * ModifyDBClusterEndpoint
///
/// * DeleteDBClusterEndpoint
///
///
/// For the data structure that represents Amazon RDS DB instance endpoints, see Endpoint.
public struct ModifyDBClusterEndpointOutput: Swift.Equatable {
    /// The type associated with a custom endpoint. One of: READER, WRITER, ANY.
    public var customEndpointType: Swift.String?
    /// The Amazon Resource Name (ARN) for the endpoint.
    public var dbClusterEndpointArn: Swift.String?
    /// The identifier associated with the endpoint. This parameter is stored as a lowercase string.
    public var dbClusterEndpointIdentifier: Swift.String?
    /// A unique system-generated identifier for an endpoint. It remains the same for the whole life of the endpoint.
    public var dbClusterEndpointResourceIdentifier: Swift.String?
    /// The DB cluster identifier of the DB cluster associated with the endpoint. This parameter is stored as a lowercase string.
    public var dbClusterIdentifier: Swift.String?
    /// The DNS address of the endpoint.
    public var endpoint: Swift.String?
    /// The type of the endpoint. One of: READER, WRITER, CUSTOM.
    public var endpointType: Swift.String?
    /// List of DB instance identifiers that aren't part of the custom endpoint group. All other eligible instances are reachable through the custom endpoint. Only relevant if the list of static members is empty.
    public var excludedMembers: [Swift.String]?
    /// List of DB instance identifiers that are part of the custom endpoint group.
    public var staticMembers: [Swift.String]?
    /// The current status of the endpoint. One of: creating, available, deleting, inactive, modifying. The inactive state applies to an endpoint that can't be used for a certain kind of cluster, such as a writer endpoint for a read-only secondary cluster in a global database.
    public var status: Swift.String?

    public init(
        customEndpointType: Swift.String? = nil,
        dbClusterEndpointArn: Swift.String? = nil,
        dbClusterEndpointIdentifier: Swift.String? = nil,
        dbClusterEndpointResourceIdentifier: Swift.String? = nil,
        dbClusterIdentifier: Swift.String? = nil,
        endpoint: Swift.String? = nil,
        endpointType: Swift.String? = nil,
        excludedMembers: [Swift.String]? = nil,
        staticMembers: [Swift.String]? = nil,
        status: Swift.String? = nil
    )
    {
        self.customEndpointType = customEndpointType
        self.dbClusterEndpointArn = dbClusterEndpointArn
        self.dbClusterEndpointIdentifier = dbClusterEndpointIdentifier
        self.dbClusterEndpointResourceIdentifier = dbClusterEndpointResourceIdentifier
        self.dbClusterIdentifier = dbClusterIdentifier
        self.endpoint = endpoint
        self.endpointType = endpointType
        self.excludedMembers = excludedMembers
        self.staticMembers = staticMembers
        self.status = status
    }
}

enum ModifyDBClusterEndpointOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "DBClusterEndpointNotFoundFault": return try await DBClusterEndpointNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "DBInstanceNotFound": return try await DBInstanceNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "InvalidDBClusterEndpointStateFault": return try await InvalidDBClusterEndpointStateFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "InvalidDBClusterStateFault": return try await InvalidDBClusterStateFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "InvalidDBInstanceState": return try await InvalidDBInstanceStateFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension ModifyDBClusterInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case allocatedStorage = "AllocatedStorage"
        case allowEngineModeChange = "AllowEngineModeChange"
        case allowMajorVersionUpgrade = "AllowMajorVersionUpgrade"
        case applyImmediately = "ApplyImmediately"
        case autoMinorVersionUpgrade = "AutoMinorVersionUpgrade"
        case awsBackupRecoveryPointArn = "AwsBackupRecoveryPointArn"
        case backtrackWindow = "BacktrackWindow"
        case backupRetentionPeriod = "BackupRetentionPeriod"
        case cloudwatchLogsExportConfiguration = "CloudwatchLogsExportConfiguration"
        case copyTagsToSnapshot = "CopyTagsToSnapshot"
        case dbClusterIdentifier = "DBClusterIdentifier"
        case dbClusterInstanceClass = "DBClusterInstanceClass"
        case dbClusterParameterGroupName = "DBClusterParameterGroupName"
        case dbInstanceParameterGroupName = "DBInstanceParameterGroupName"
        case deletionProtection = "DeletionProtection"
        case domain = "Domain"
        case domainIAMRoleName = "DomainIAMRoleName"
        case enableGlobalWriteForwarding = "EnableGlobalWriteForwarding"
        case enableHttpEndpoint = "EnableHttpEndpoint"
        case enableIAMDatabaseAuthentication = "EnableIAMDatabaseAuthentication"
        case enableLimitlessDatabase = "EnableLimitlessDatabase"
        case enableLocalWriteForwarding = "EnableLocalWriteForwarding"
        case enablePerformanceInsights = "EnablePerformanceInsights"
        case engineMode = "EngineMode"
        case engineVersion = "EngineVersion"
        case iops = "Iops"
        case manageMasterUserPassword = "ManageMasterUserPassword"
        case masterUserPassword = "MasterUserPassword"
        case masterUserSecretKmsKeyId = "MasterUserSecretKmsKeyId"
        case monitoringInterval = "MonitoringInterval"
        case monitoringRoleArn = "MonitoringRoleArn"
        case networkType = "NetworkType"
        case newDBClusterIdentifier = "NewDBClusterIdentifier"
        case optionGroupName = "OptionGroupName"
        case performanceInsightsKMSKeyId = "PerformanceInsightsKMSKeyId"
        case performanceInsightsRetentionPeriod = "PerformanceInsightsRetentionPeriod"
        case port = "Port"
        case preferredBackupWindow = "PreferredBackupWindow"
        case preferredMaintenanceWindow = "PreferredMaintenanceWindow"
        case rotateMasterUserPassword = "RotateMasterUserPassword"
        case scalingConfiguration = "ScalingConfiguration"
        case serverlessV2ScalingConfiguration = "ServerlessV2ScalingConfiguration"
        case storageType = "StorageType"
        case vpcSecurityGroupIds = "VpcSecurityGroupIds"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let allocatedStorage = allocatedStorage {
            try container.encode(allocatedStorage, forKey: ClientRuntime.Key("AllocatedStorage"))
        }
        if let allowEngineModeChange = allowEngineModeChange {
            try container.encode(allowEngineModeChange, forKey: ClientRuntime.Key("AllowEngineModeChange"))
        }
        if let allowMajorVersionUpgrade = allowMajorVersionUpgrade {
            try container.encode(allowMajorVersionUpgrade, forKey: ClientRuntime.Key("AllowMajorVersionUpgrade"))
        }
        if let applyImmediately = applyImmediately {
            try container.encode(applyImmediately, forKey: ClientRuntime.Key("ApplyImmediately"))
        }
        if let autoMinorVersionUpgrade = autoMinorVersionUpgrade {
            try container.encode(autoMinorVersionUpgrade, forKey: ClientRuntime.Key("AutoMinorVersionUpgrade"))
        }
        if let awsBackupRecoveryPointArn = awsBackupRecoveryPointArn {
            try container.encode(awsBackupRecoveryPointArn, forKey: ClientRuntime.Key("AwsBackupRecoveryPointArn"))
        }
        if let backtrackWindow = backtrackWindow {
            try container.encode(backtrackWindow, forKey: ClientRuntime.Key("BacktrackWindow"))
        }
        if let backupRetentionPeriod = backupRetentionPeriod {
            try container.encode(backupRetentionPeriod, forKey: ClientRuntime.Key("BackupRetentionPeriod"))
        }
        if let cloudwatchLogsExportConfiguration = cloudwatchLogsExportConfiguration {
            try container.encode(cloudwatchLogsExportConfiguration, forKey: ClientRuntime.Key("CloudwatchLogsExportConfiguration"))
        }
        if let copyTagsToSnapshot = copyTagsToSnapshot {
            try container.encode(copyTagsToSnapshot, forKey: ClientRuntime.Key("CopyTagsToSnapshot"))
        }
        if let dbClusterIdentifier = dbClusterIdentifier {
            try container.encode(dbClusterIdentifier, forKey: ClientRuntime.Key("DBClusterIdentifier"))
        }
        if let dbClusterInstanceClass = dbClusterInstanceClass {
            try container.encode(dbClusterInstanceClass, forKey: ClientRuntime.Key("DBClusterInstanceClass"))
        }
        if let dbClusterParameterGroupName = dbClusterParameterGroupName {
            try container.encode(dbClusterParameterGroupName, forKey: ClientRuntime.Key("DBClusterParameterGroupName"))
        }
        if let dbInstanceParameterGroupName = dbInstanceParameterGroupName {
            try container.encode(dbInstanceParameterGroupName, forKey: ClientRuntime.Key("DBInstanceParameterGroupName"))
        }
        if let deletionProtection = deletionProtection {
            try container.encode(deletionProtection, forKey: ClientRuntime.Key("DeletionProtection"))
        }
        if let domain = domain {
            try container.encode(domain, forKey: ClientRuntime.Key("Domain"))
        }
        if let domainIAMRoleName = domainIAMRoleName {
            try container.encode(domainIAMRoleName, forKey: ClientRuntime.Key("DomainIAMRoleName"))
        }
        if let enableGlobalWriteForwarding = enableGlobalWriteForwarding {
            try container.encode(enableGlobalWriteForwarding, forKey: ClientRuntime.Key("EnableGlobalWriteForwarding"))
        }
        if let enableHttpEndpoint = enableHttpEndpoint {
            try container.encode(enableHttpEndpoint, forKey: ClientRuntime.Key("EnableHttpEndpoint"))
        }
        if let enableIAMDatabaseAuthentication = enableIAMDatabaseAuthentication {
            try container.encode(enableIAMDatabaseAuthentication, forKey: ClientRuntime.Key("EnableIAMDatabaseAuthentication"))
        }
        if let enableLimitlessDatabase = enableLimitlessDatabase {
            try container.encode(enableLimitlessDatabase, forKey: ClientRuntime.Key("EnableLimitlessDatabase"))
        }
        if let enableLocalWriteForwarding = enableLocalWriteForwarding {
            try container.encode(enableLocalWriteForwarding, forKey: ClientRuntime.Key("EnableLocalWriteForwarding"))
        }
        if let enablePerformanceInsights = enablePerformanceInsights {
            try container.encode(enablePerformanceInsights, forKey: ClientRuntime.Key("EnablePerformanceInsights"))
        }
        if let engineMode = engineMode {
            try container.encode(engineMode, forKey: ClientRuntime.Key("EngineMode"))
        }
        if let engineVersion = engineVersion {
            try container.encode(engineVersion, forKey: ClientRuntime.Key("EngineVersion"))
        }
        if let iops = iops {
            try container.encode(iops, forKey: ClientRuntime.Key("Iops"))
        }
        if let manageMasterUserPassword = manageMasterUserPassword {
            try container.encode(manageMasterUserPassword, forKey: ClientRuntime.Key("ManageMasterUserPassword"))
        }
        if let masterUserPassword = masterUserPassword {
            try container.encode(masterUserPassword, forKey: ClientRuntime.Key("MasterUserPassword"))
        }
        if let masterUserSecretKmsKeyId = masterUserSecretKmsKeyId {
            try container.encode(masterUserSecretKmsKeyId, forKey: ClientRuntime.Key("MasterUserSecretKmsKeyId"))
        }
        if let monitoringInterval = monitoringInterval {
            try container.encode(monitoringInterval, forKey: ClientRuntime.Key("MonitoringInterval"))
        }
        if let monitoringRoleArn = monitoringRoleArn {
            try container.encode(monitoringRoleArn, forKey: ClientRuntime.Key("MonitoringRoleArn"))
        }
        if let networkType = networkType {
            try container.encode(networkType, forKey: ClientRuntime.Key("NetworkType"))
        }
        if let newDBClusterIdentifier = newDBClusterIdentifier {
            try container.encode(newDBClusterIdentifier, forKey: ClientRuntime.Key("NewDBClusterIdentifier"))
        }
        if let optionGroupName = optionGroupName {
            try container.encode(optionGroupName, forKey: ClientRuntime.Key("OptionGroupName"))
        }
        if let performanceInsightsKMSKeyId = performanceInsightsKMSKeyId {
            try container.encode(performanceInsightsKMSKeyId, forKey: ClientRuntime.Key("PerformanceInsightsKMSKeyId"))
        }
        if let performanceInsightsRetentionPeriod = performanceInsightsRetentionPeriod {
            try container.encode(performanceInsightsRetentionPeriod, forKey: ClientRuntime.Key("PerformanceInsightsRetentionPeriod"))
        }
        if let port = port {
            try container.encode(port, forKey: ClientRuntime.Key("Port"))
        }
        if let preferredBackupWindow = preferredBackupWindow {
            try container.encode(preferredBackupWindow, forKey: ClientRuntime.Key("PreferredBackupWindow"))
        }
        if let preferredMaintenanceWindow = preferredMaintenanceWindow {
            try container.encode(preferredMaintenanceWindow, forKey: ClientRuntime.Key("PreferredMaintenanceWindow"))
        }
        if let rotateMasterUserPassword = rotateMasterUserPassword {
            try container.encode(rotateMasterUserPassword, forKey: ClientRuntime.Key("RotateMasterUserPassword"))
        }
        if let scalingConfiguration = scalingConfiguration {
            try container.encode(scalingConfiguration, forKey: ClientRuntime.Key("ScalingConfiguration"))
        }
        if let serverlessV2ScalingConfiguration = serverlessV2ScalingConfiguration {
            try container.encode(serverlessV2ScalingConfiguration, forKey: ClientRuntime.Key("ServerlessV2ScalingConfiguration"))
        }
        if let storageType = storageType {
            try container.encode(storageType, forKey: ClientRuntime.Key("StorageType"))
        }
        if let vpcSecurityGroupIds = vpcSecurityGroupIds {
            if !vpcSecurityGroupIds.isEmpty {
                var vpcSecurityGroupIdsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("VpcSecurityGroupIds"))
                for (index0, string0) in vpcSecurityGroupIds.enumerated() {
                    try vpcSecurityGroupIdsContainer.encode(string0, forKey: ClientRuntime.Key("VpcSecurityGroupId.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var vpcSecurityGroupIdsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("VpcSecurityGroupIds"))
                try vpcSecurityGroupIdsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        try container.encode("ModifyDBCluster", forKey:ClientRuntime.Key("Action"))
        try container.encode("2014-10-31", forKey:ClientRuntime.Key("Version"))
    }
}

extension ModifyDBClusterInput {

    static func urlPathProvider(_ value: ModifyDBClusterInput) -> Swift.String? {
        return "/"
    }
}

///
public struct ModifyDBClusterInput: Swift.Equatable {
    /// The amount of storage in gibibytes (GiB) to allocate to each DB instance in the Multi-AZ DB cluster. Valid for Cluster Type: Multi-AZ DB clusters only
    public var allocatedStorage: Swift.Int?
    /// Specifies whether engine mode changes from serverless to provisioned are allowed. Valid for Cluster Type: Aurora Serverless v1 DB clusters only Constraints:
    ///
    /// * You must allow engine mode changes when specifying a different value for the EngineMode parameter from the DB cluster's current engine mode.
    public var allowEngineModeChange: Swift.Bool?
    /// Specifies whether major version upgrades are allowed. Valid for Cluster Type: Aurora DB clusters and Multi-AZ DB clusters Constraints:
    ///
    /// * You must allow major version upgrades when specifying a value for the EngineVersion parameter that is a different major version than the DB cluster's current version.
    public var allowMajorVersionUpgrade: Swift.Bool?
    /// Specifies whether the modifications in this request and any pending modifications are asynchronously applied as soon as possible, regardless of the PreferredMaintenanceWindow setting for the DB cluster. If this parameter is disabled, changes to the DB cluster are applied during the next maintenance window. Most modifications can be applied immediately or during the next scheduled maintenance window. Some modifications, such as turning on deletion protection and changing the master password, are applied immediately—regardless of when you choose to apply them. By default, this parameter is disabled. Valid for Cluster Type: Aurora DB clusters and Multi-AZ DB clusters
    public var applyImmediately: Swift.Bool?
    /// Specifies whether minor engine upgrades are applied automatically to the DB cluster during the maintenance window. By default, minor engine upgrades are applied automatically. Valid for Cluster Type: Multi-AZ DB clusters only
    public var autoMinorVersionUpgrade: Swift.Bool?
    /// The Amazon Resource Name (ARN) of the recovery point in Amazon Web Services Backup.
    public var awsBackupRecoveryPointArn: Swift.String?
    /// The target backtrack window, in seconds. To disable backtracking, set this value to 0. Valid for Cluster Type: Aurora MySQL DB clusters only Default: 0 Constraints:
    ///
    /// * If specified, this value must be set to a number from 0 to 259,200 (72 hours).
    public var backtrackWindow: Swift.Int?
    /// The number of days for which automated backups are retained. Specify a minimum value of 1. Valid for Cluster Type: Aurora DB clusters and Multi-AZ DB clusters Default: 1 Constraints:
    ///
    /// * Must be a value from 1 to 35.
    public var backupRetentionPeriod: Swift.Int?
    /// The configuration setting for the log types to be enabled for export to CloudWatch Logs for a specific DB cluster. Valid for Cluster Type: Aurora DB clusters and Multi-AZ DB clusters The following values are valid for each DB engine:
    ///
    /// * Aurora MySQL - audit | error | general | slowquery
    ///
    /// * Aurora PostgreSQL - postgresql
    ///
    /// * RDS for MySQL - error | general | slowquery
    ///
    /// * RDS for PostgreSQL - postgresql | upgrade
    ///
    ///
    /// For more information about exporting CloudWatch Logs for Amazon RDS, see [ Publishing Database Logs to Amazon CloudWatch Logs](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch) in the Amazon RDS User Guide. For more information about exporting CloudWatch Logs for Amazon Aurora, see [Publishing Database Logs to Amazon CloudWatch Logs](https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch) in the Amazon Aurora User Guide.
    public var cloudwatchLogsExportConfiguration: RDSClientTypes.CloudwatchLogsExportConfiguration?
    /// Specifies whether to copy all tags from the DB cluster to snapshots of the DB cluster. The default is not to copy them. Valid for Cluster Type: Aurora DB clusters and Multi-AZ DB clusters
    public var copyTagsToSnapshot: Swift.Bool?
    /// The DB cluster identifier for the cluster being modified. This parameter isn't case-sensitive. Valid for Cluster Type: Aurora DB clusters and Multi-AZ DB clusters Constraints:
    ///
    /// * Must match the identifier of an existing DB cluster.
    /// This member is required.
    public var dbClusterIdentifier: Swift.String?
    /// The compute and memory capacity of each DB instance in the Multi-AZ DB cluster, for example db.m6gd.xlarge. Not all DB instance classes are available in all Amazon Web Services Regions, or for all database engines. For the full list of DB instance classes and availability for your engine, see [ DB Instance Class](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.DBInstanceClass.html) in the Amazon RDS User Guide. Valid for Cluster Type: Multi-AZ DB clusters only
    public var dbClusterInstanceClass: Swift.String?
    /// The name of the DB cluster parameter group to use for the DB cluster. Valid for Cluster Type: Aurora DB clusters and Multi-AZ DB clusters
    public var dbClusterParameterGroupName: Swift.String?
    /// The name of the DB parameter group to apply to all instances of the DB cluster. When you apply a parameter group using the DBInstanceParameterGroupName parameter, the DB cluster isn't rebooted automatically. Also, parameter changes are applied immediately rather than during the next maintenance window. Valid for Cluster Type: Aurora DB clusters only Default: The existing name setting Constraints:
    ///
    /// * The DB parameter group must be in the same DB parameter group family as this DB cluster.
    ///
    /// * The DBInstanceParameterGroupName parameter is valid in combination with the AllowMajorVersionUpgrade parameter for a major version upgrade only.
    public var dbInstanceParameterGroupName: Swift.String?
    /// Specifies whether the DB cluster has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection isn't enabled. Valid for Cluster Type: Aurora DB clusters and Multi-AZ DB clusters
    public var deletionProtection: Swift.Bool?
    /// The Active Directory directory ID to move the DB cluster to. Specify none to remove the cluster from its current domain. The domain must be created prior to this operation. For more information, see [Kerberos Authentication](https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/kerberos-authentication.html) in the Amazon Aurora User Guide. Valid for Cluster Type: Aurora DB clusters only
    public var domain: Swift.String?
    /// The name of the IAM role to use when making API calls to the Directory Service. Valid for Cluster Type: Aurora DB clusters only
    public var domainIAMRoleName: Swift.String?
    /// Specifies whether to enable this DB cluster to forward write operations to the primary cluster of a global cluster (Aurora global database). By default, write operations are not allowed on Aurora DB clusters that are secondary clusters in an Aurora global database. You can set this value only on Aurora DB clusters that are members of an Aurora global database. With this parameter enabled, a secondary cluster can forward writes to the current primary cluster, and the resulting changes are replicated back to this cluster. For the primary DB cluster of an Aurora global database, this value is used immediately if the primary is demoted by a global cluster API operation, but it does nothing until then. Valid for Cluster Type: Aurora DB clusters only
    public var enableGlobalWriteForwarding: Swift.Bool?
    /// Specifies whether to enable the HTTP endpoint for an Aurora Serverless v1 DB cluster. By default, the HTTP endpoint isn't enabled. When enabled, the HTTP endpoint provides a connectionless web service API (RDS Data API) for running SQL queries on the Aurora Serverless v1 DB cluster. You can also query your database from inside the RDS console with the RDS query editor. For more information, see [Using RDS Data API](https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/data-api.html) in the Amazon Aurora User Guide. This parameter applies only to Aurora Serverless v1 DB clusters. To enable or disable the HTTP endpoint for an Aurora PostgreSQL Serverless v2 or provisioned DB cluster, use the EnableHttpEndpoint and DisableHttpEndpoint operations. Valid for Cluster Type: Aurora DB clusters only
    public var enableHttpEndpoint: Swift.Bool?
    /// Specifies whether to enable mapping of Amazon Web Services Identity and Access Management (IAM) accounts to database accounts. By default, mapping isn't enabled. For more information, see [ IAM Database Authentication](https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/UsingWithRDS.IAMDBAuth.html) in the Amazon Aurora User Guide. Valid for Cluster Type: Aurora DB clusters only
    public var enableIAMDatabaseAuthentication: Swift.Bool?
    /// Specifies whether to enable Aurora Limitless Database. You must enable Aurora Limitless Database to create a DB shard group. Valid for: Aurora DB clusters only
    public var enableLimitlessDatabase: Swift.Bool?
    /// Specifies whether read replicas can forward write operations to the writer DB instance in the DB cluster. By default, write operations aren't allowed on reader DB instances. Valid for: Aurora DB clusters only
    public var enableLocalWriteForwarding: Swift.Bool?
    /// Specifies whether to turn on Performance Insights for the DB cluster. For more information, see [ Using Amazon Performance Insights](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_PerfInsights.html) in the Amazon RDS User Guide. Valid for Cluster Type: Multi-AZ DB clusters only
    public var enablePerformanceInsights: Swift.Bool?
    /// The DB engine mode of the DB cluster, either provisioned or serverless. The DB engine mode can be modified only from serverless to provisioned. For more information, see [ CreateDBCluster](https://docs.aws.amazon.com/AmazonRDS/latest/APIReference/API_CreateDBCluster.html). Valid for Cluster Type: Aurora DB clusters only
    public var engineMode: Swift.String?
    /// The version number of the database engine to which you want to upgrade. Changing this parameter results in an outage. The change is applied during the next maintenance window unless ApplyImmediately is enabled. If the cluster that you're modifying has one or more read replicas, all replicas must be running an engine version that's the same or later than the version you specify. To list all of the available engine versions for Aurora MySQL, use the following command: aws rds describe-db-engine-versions --engine aurora-mysql --query "DBEngineVersions[].EngineVersion" To list all of the available engine versions for Aurora PostgreSQL, use the following command: aws rds describe-db-engine-versions --engine aurora-postgresql --query "DBEngineVersions[].EngineVersion" To list all of the available engine versions for RDS for MySQL, use the following command: aws rds describe-db-engine-versions --engine mysql --query "DBEngineVersions[].EngineVersion" To list all of the available engine versions for RDS for PostgreSQL, use the following command: aws rds describe-db-engine-versions --engine postgres --query "DBEngineVersions[].EngineVersion" Valid for Cluster Type: Aurora DB clusters and Multi-AZ DB clusters
    public var engineVersion: Swift.String?
    /// The amount of Provisioned IOPS (input/output operations per second) to be initially allocated for each DB instance in the Multi-AZ DB cluster. For information about valid IOPS values, see [Amazon RDS Provisioned IOPS storage](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_Storage.html#USER_PIOPS) in the Amazon RDS User Guide. Valid for Cluster Type: Multi-AZ DB clusters only Constraints:
    ///
    /// * Must be a multiple between .5 and 50 of the storage amount for the DB cluster.
    public var iops: Swift.Int?
    /// Specifies whether to manage the master user password with Amazon Web Services Secrets Manager. If the DB cluster doesn't manage the master user password with Amazon Web Services Secrets Manager, you can turn on this management. In this case, you can't specify MasterUserPassword. If the DB cluster already manages the master user password with Amazon Web Services Secrets Manager, and you specify that the master user password is not managed with Amazon Web Services Secrets Manager, then you must specify MasterUserPassword. In this case, RDS deletes the secret and uses the new password for the master user specified by MasterUserPassword. For more information, see [Password management with Amazon Web Services Secrets Manager](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/rds-secrets-manager.html) in the Amazon RDS User Guide and [Password management with Amazon Web Services Secrets Manager](https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/rds-secrets-manager.html) in the Amazon Aurora User Guide. Valid for Cluster Type: Aurora DB clusters and Multi-AZ DB clusters
    public var manageMasterUserPassword: Swift.Bool?
    /// The new password for the master database user. Valid for Cluster Type: Aurora DB clusters and Multi-AZ DB clusters Constraints:
    ///
    /// * Must contain from 8 to 41 characters.
    ///
    /// * Can contain any printable ASCII character except "/", """, or "@".
    ///
    /// * Can't be specified if ManageMasterUserPassword is turned on.
    public var masterUserPassword: Swift.String?
    /// The Amazon Web Services KMS key identifier to encrypt a secret that is automatically generated and managed in Amazon Web Services Secrets Manager. This setting is valid only if both of the following conditions are met:
    ///
    /// * The DB cluster doesn't manage the master user password in Amazon Web Services Secrets Manager. If the DB cluster already manages the master user password in Amazon Web Services Secrets Manager, you can't change the KMS key that is used to encrypt the secret.
    ///
    /// * You are turning on ManageMasterUserPassword to manage the master user password in Amazon Web Services Secrets Manager. If you are turning on ManageMasterUserPassword and don't specify MasterUserSecretKmsKeyId, then the aws/secretsmanager KMS key is used to encrypt the secret. If the secret is in a different Amazon Web Services account, then you can't use the aws/secretsmanager KMS key to encrypt the secret, and you must use a customer managed KMS key.
    ///
    ///
    /// The Amazon Web Services KMS key identifier is the key ARN, key ID, alias ARN, or alias name for the KMS key. To use a KMS key in a different Amazon Web Services account, specify the key ARN or alias ARN. There is a default KMS key for your Amazon Web Services account. Your Amazon Web Services account has a different default KMS key for each Amazon Web Services Region. Valid for Cluster Type: Aurora DB clusters and Multi-AZ DB clusters
    public var masterUserSecretKmsKeyId: Swift.String?
    /// The interval, in seconds, between points when Enhanced Monitoring metrics are collected for the DB cluster. To turn off collecting Enhanced Monitoring metrics, specify 0. If MonitoringRoleArn is specified, also set MonitoringInterval to a value other than 0. Valid for Cluster Type: Multi-AZ DB clusters only Valid Values: 0 | 1 | 5 | 10 | 15 | 30 | 60 Default: 0
    public var monitoringInterval: Swift.Int?
    /// The Amazon Resource Name (ARN) for the IAM role that permits RDS to send Enhanced Monitoring metrics to Amazon CloudWatch Logs. An example is arn:aws:iam:123456789012:role/emaccess. For information on creating a monitoring role, see [To create an IAM role for Amazon RDS Enhanced Monitoring](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Monitoring.html#USER_Monitoring.OS.IAMRole) in the Amazon RDS User Guide. If MonitoringInterval is set to a value other than 0, supply a MonitoringRoleArn value. Valid for Cluster Type: Multi-AZ DB clusters only
    public var monitoringRoleArn: Swift.String?
    /// The network type of the DB cluster. The network type is determined by the DBSubnetGroup specified for the DB cluster. A DBSubnetGroup can support only the IPv4 protocol or the IPv4 and the IPv6 protocols (DUAL). For more information, see [ Working with a DB instance in a VPC](https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_VPC.WorkingWithRDSInstanceinaVPC.html) in the Amazon Aurora User Guide. Valid for Cluster Type: Aurora DB clusters only Valid Values: IPV4 | DUAL
    public var networkType: Swift.String?
    /// The new DB cluster identifier for the DB cluster when renaming a DB cluster. This value is stored as a lowercase string. Valid for Cluster Type: Aurora DB clusters and Multi-AZ DB clusters Constraints:
    ///
    /// * Must contain from 1 to 63 letters, numbers, or hyphens.
    ///
    /// * The first character must be a letter.
    ///
    /// * Can't end with a hyphen or contain two consecutive hyphens.
    ///
    ///
    /// Example: my-cluster2
    public var newDBClusterIdentifier: Swift.String?
    /// The option group to associate the DB cluster with. DB clusters are associated with a default option group that can't be modified.
    public var optionGroupName: Swift.String?
    /// The Amazon Web Services KMS key identifier for encryption of Performance Insights data. The Amazon Web Services KMS key identifier is the key ARN, key ID, alias ARN, or alias name for the KMS key. If you don't specify a value for PerformanceInsightsKMSKeyId, then Amazon RDS uses your default KMS key. There is a default KMS key for your Amazon Web Services account. Your Amazon Web Services account has a different default KMS key for each Amazon Web Services Region. Valid for Cluster Type: Multi-AZ DB clusters only
    public var performanceInsightsKMSKeyId: Swift.String?
    /// The number of days to retain Performance Insights data. Valid for Cluster Type: Multi-AZ DB clusters only Valid Values:
    ///
    /// * 7
    ///
    /// * month * 31, where month is a number of months from 1-23. Examples: 93 (3 months * 31), 341 (11 months * 31), 589 (19 months * 31)
    ///
    /// * 731
    ///
    ///
    /// Default: 7 days If you specify a retention period that isn't valid, such as 94, Amazon RDS issues an error.
    public var performanceInsightsRetentionPeriod: Swift.Int?
    /// The port number on which the DB cluster accepts connections. Valid for Cluster Type: Aurora DB clusters only Valid Values: 1150-65535 Default: The same port as the original DB cluster.
    public var port: Swift.Int?
    /// The daily time range during which automated backups are created if automated backups are enabled, using the BackupRetentionPeriod parameter. The default is a 30-minute window selected at random from an 8-hour block of time for each Amazon Web Services Region. To view the time blocks available, see [ Backup window](https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/Aurora.Managing.Backups.html#Aurora.Managing.Backups.BackupWindow) in the Amazon Aurora User Guide. Valid for Cluster Type: Aurora DB clusters and Multi-AZ DB clusters Constraints:
    ///
    /// * Must be in the format hh24:mi-hh24:mi.
    ///
    /// * Must be in Universal Coordinated Time (UTC).
    ///
    /// * Must not conflict with the preferred maintenance window.
    ///
    /// * Must be at least 30 minutes.
    public var preferredBackupWindow: Swift.String?
    /// The weekly time range during which system maintenance can occur, in Universal Coordinated Time (UTC). Valid for Cluster Type: Aurora DB clusters and Multi-AZ DB clusters The default is a 30-minute window selected at random from an 8-hour block of time for each Amazon Web Services Region, occurring on a random day of the week. To see the time blocks available, see [ Adjusting the Preferred DB Cluster Maintenance Window](https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_UpgradeDBInstance.Maintenance.html#AdjustingTheMaintenanceWindow.Aurora) in the Amazon Aurora User Guide. Constraints:
    ///
    /// * Must be in the format ddd:hh24:mi-ddd:hh24:mi.
    ///
    /// * Days must be one of Mon | Tue | Wed | Thu | Fri | Sat | Sun.
    ///
    /// * Must be in Universal Coordinated Time (UTC).
    ///
    /// * Must be at least 30 minutes.
    public var preferredMaintenanceWindow: Swift.String?
    /// Specifies whether to rotate the secret managed by Amazon Web Services Secrets Manager for the master user password. This setting is valid only if the master user password is managed by RDS in Amazon Web Services Secrets Manager for the DB cluster. The secret value contains the updated password. For more information, see [Password management with Amazon Web Services Secrets Manager](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/rds-secrets-manager.html) in the Amazon RDS User Guide and [Password management with Amazon Web Services Secrets Manager](https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/rds-secrets-manager.html) in the Amazon Aurora User Guide. Valid for Cluster Type: Aurora DB clusters and Multi-AZ DB clusters Constraints:
    ///
    /// * You must apply the change immediately when rotating the master user password.
    public var rotateMasterUserPassword: Swift.Bool?
    /// The scaling properties of the DB cluster. You can only modify scaling properties for DB clusters in serverless DB engine mode. Valid for Cluster Type: Aurora DB clusters only
    public var scalingConfiguration: RDSClientTypes.ScalingConfiguration?
    /// Contains the scaling configuration of an Aurora Serverless v2 DB cluster. For more information, see [Using Amazon Aurora Serverless v2](https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless-v2.html) in the Amazon Aurora User Guide.
    public var serverlessV2ScalingConfiguration: RDSClientTypes.ServerlessV2ScalingConfiguration?
    /// The storage type to associate with the DB cluster. For information on storage types for Aurora DB clusters, see [Storage configurations for Amazon Aurora DB clusters](https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/Aurora.Overview.StorageReliability.html#aurora-storage-type). For information on storage types for Multi-AZ DB clusters, see [Settings for creating Multi-AZ DB clusters](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/create-multi-az-db-cluster.html#create-multi-az-db-cluster-settings). When specified for a Multi-AZ DB cluster, a value for the Iops parameter is required. Valid for Cluster Type: Aurora DB clusters and Multi-AZ DB clusters Valid Values:
    ///
    /// * Aurora DB clusters - aurora | aurora-iopt1
    ///
    /// * Multi-AZ DB clusters - io1
    ///
    ///
    /// Default:
    ///
    /// * Aurora DB clusters - aurora
    ///
    /// * Multi-AZ DB clusters - io1
    public var storageType: Swift.String?
    /// A list of EC2 VPC security groups to associate with this DB cluster. Valid for Cluster Type: Aurora DB clusters and Multi-AZ DB clusters
    public var vpcSecurityGroupIds: [Swift.String]?

    public init(
        allocatedStorage: Swift.Int? = nil,
        allowEngineModeChange: Swift.Bool? = nil,
        allowMajorVersionUpgrade: Swift.Bool? = nil,
        applyImmediately: Swift.Bool? = nil,
        autoMinorVersionUpgrade: Swift.Bool? = nil,
        awsBackupRecoveryPointArn: Swift.String? = nil,
        backtrackWindow: Swift.Int? = nil,
        backupRetentionPeriod: Swift.Int? = nil,
        cloudwatchLogsExportConfiguration: RDSClientTypes.CloudwatchLogsExportConfiguration? = nil,
        copyTagsToSnapshot: Swift.Bool? = nil,
        dbClusterIdentifier: Swift.String? = nil,
        dbClusterInstanceClass: Swift.String? = nil,
        dbClusterParameterGroupName: Swift.String? = nil,
        dbInstanceParameterGroupName: Swift.String? = nil,
        deletionProtection: Swift.Bool? = nil,
        domain: Swift.String? = nil,
        domainIAMRoleName: Swift.String? = nil,
        enableGlobalWriteForwarding: Swift.Bool? = nil,
        enableHttpEndpoint: Swift.Bool? = nil,
        enableIAMDatabaseAuthentication: Swift.Bool? = nil,
        enableLimitlessDatabase: Swift.Bool? = nil,
        enableLocalWriteForwarding: Swift.Bool? = nil,
        enablePerformanceInsights: Swift.Bool? = nil,
        engineMode: Swift.String? = nil,
        engineVersion: Swift.String? = nil,
        iops: Swift.Int? = nil,
        manageMasterUserPassword: Swift.Bool? = nil,
        masterUserPassword: Swift.String? = nil,
        masterUserSecretKmsKeyId: Swift.String? = nil,
        monitoringInterval: Swift.Int? = nil,
        monitoringRoleArn: Swift.String? = nil,
        networkType: Swift.String? = nil,
        newDBClusterIdentifier: Swift.String? = nil,
        optionGroupName: Swift.String? = nil,
        performanceInsightsKMSKeyId: Swift.String? = nil,
        performanceInsightsRetentionPeriod: Swift.Int? = nil,
        port: Swift.Int? = nil,
        preferredBackupWindow: Swift.String? = nil,
        preferredMaintenanceWindow: Swift.String? = nil,
        rotateMasterUserPassword: Swift.Bool? = nil,
        scalingConfiguration: RDSClientTypes.ScalingConfiguration? = nil,
        serverlessV2ScalingConfiguration: RDSClientTypes.ServerlessV2ScalingConfiguration? = nil,
        storageType: Swift.String? = nil,
        vpcSecurityGroupIds: [Swift.String]? = nil
    )
    {
        self.allocatedStorage = allocatedStorage
        self.allowEngineModeChange = allowEngineModeChange
        self.allowMajorVersionUpgrade = allowMajorVersionUpgrade
        self.applyImmediately = applyImmediately
        self.autoMinorVersionUpgrade = autoMinorVersionUpgrade
        self.awsBackupRecoveryPointArn = awsBackupRecoveryPointArn
        self.backtrackWindow = backtrackWindow
        self.backupRetentionPeriod = backupRetentionPeriod
        self.cloudwatchLogsExportConfiguration = cloudwatchLogsExportConfiguration
        self.copyTagsToSnapshot = copyTagsToSnapshot
        self.dbClusterIdentifier = dbClusterIdentifier
        self.dbClusterInstanceClass = dbClusterInstanceClass
        self.dbClusterParameterGroupName = dbClusterParameterGroupName
        self.dbInstanceParameterGroupName = dbInstanceParameterGroupName
        self.deletionProtection = deletionProtection
        self.domain = domain
        self.domainIAMRoleName = domainIAMRoleName
        self.enableGlobalWriteForwarding = enableGlobalWriteForwarding
        self.enableHttpEndpoint = enableHttpEndpoint
        self.enableIAMDatabaseAuthentication = enableIAMDatabaseAuthentication
        self.enableLimitlessDatabase = enableLimitlessDatabase
        self.enableLocalWriteForwarding = enableLocalWriteForwarding
        self.enablePerformanceInsights = enablePerformanceInsights
        self.engineMode = engineMode
        self.engineVersion = engineVersion
        self.iops = iops
        self.manageMasterUserPassword = manageMasterUserPassword
        self.masterUserPassword = masterUserPassword
        self.masterUserSecretKmsKeyId = masterUserSecretKmsKeyId
        self.monitoringInterval = monitoringInterval
        self.monitoringRoleArn = monitoringRoleArn
        self.networkType = networkType
        self.newDBClusterIdentifier = newDBClusterIdentifier
        self.optionGroupName = optionGroupName
        self.performanceInsightsKMSKeyId = performanceInsightsKMSKeyId
        self.performanceInsightsRetentionPeriod = performanceInsightsRetentionPeriod
        self.port = port
        self.preferredBackupWindow = preferredBackupWindow
        self.preferredMaintenanceWindow = preferredMaintenanceWindow
        self.rotateMasterUserPassword = rotateMasterUserPassword
        self.scalingConfiguration = scalingConfiguration
        self.serverlessV2ScalingConfiguration = serverlessV2ScalingConfiguration
        self.storageType = storageType
        self.vpcSecurityGroupIds = vpcSecurityGroupIds
    }
}

extension ModifyDBClusterOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<ModifyDBClusterOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["ModifyDBClusterResult"]
            var value = ModifyDBClusterOutput()
            value.dbCluster = try reader["DBCluster"].readIfPresent(readingClosure: RDSClientTypes.DBCluster.readingClosure)
            return value
        }
    }
}

public struct ModifyDBClusterOutput: Swift.Equatable {
    /// Contains the details of an Amazon Aurora DB cluster or Multi-AZ DB cluster. For an Amazon Aurora DB cluster, this data type is used as a response element in the operations CreateDBCluster, DeleteDBCluster, DescribeDBClusters, FailoverDBCluster, ModifyDBCluster, PromoteReadReplicaDBCluster, RestoreDBClusterFromS3, RestoreDBClusterFromSnapshot, RestoreDBClusterToPointInTime, StartDBCluster, and StopDBCluster. For a Multi-AZ DB cluster, this data type is used as a response element in the operations CreateDBCluster, DeleteDBCluster, DescribeDBClusters, FailoverDBCluster, ModifyDBCluster, RebootDBCluster, RestoreDBClusterFromSnapshot, and RestoreDBClusterToPointInTime. For more information on Amazon Aurora DB clusters, see [ What is Amazon Aurora?](https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html) in the Amazon Aurora User Guide. For more information on Multi-AZ DB clusters, see [ Multi-AZ deployments with two readable standby DB instances](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/multi-az-db-clusters-concepts.html) in the Amazon RDS User Guide.
    public var dbCluster: RDSClientTypes.DBCluster?

    public init(
        dbCluster: RDSClientTypes.DBCluster? = nil
    )
    {
        self.dbCluster = dbCluster
    }
}

enum ModifyDBClusterOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "DBClusterAlreadyExistsFault": return try await DBClusterAlreadyExistsFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "DBClusterNotFoundFault": return try await DBClusterNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "DBClusterParameterGroupNotFound": return try await DBClusterParameterGroupNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "DBInstanceAlreadyExists": return try await DBInstanceAlreadyExistsFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "DBSubnetGroupNotFoundFault": return try await DBSubnetGroupNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "DomainNotFoundFault": return try await DomainNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "InvalidDBClusterStateFault": return try await InvalidDBClusterStateFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "InvalidDBInstanceState": return try await InvalidDBInstanceStateFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "InvalidDBSecurityGroupState": return try await InvalidDBSecurityGroupStateFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "InvalidDBSubnetGroupStateFault": return try await InvalidDBSubnetGroupStateFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "InvalidSubnet": return try await InvalidSubnet.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "InvalidVPCNetworkStateFault": return try await InvalidVPCNetworkStateFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "OptionGroupNotFoundFault": return try await OptionGroupNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "StorageQuotaExceeded": return try await StorageQuotaExceededFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "StorageTypeNotAvailableFault": return try await StorageTypeNotAvailableFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension ModifyDBClusterParameterGroupInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dbClusterParameterGroupName = "DBClusterParameterGroupName"
        case parameters = "Parameters"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let dbClusterParameterGroupName = dbClusterParameterGroupName {
            try container.encode(dbClusterParameterGroupName, forKey: ClientRuntime.Key("DBClusterParameterGroupName"))
        }
        if let parameters = parameters {
            if !parameters.isEmpty {
                var parametersContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Parameters"))
                for (index0, parameter0) in parameters.enumerated() {
                    try parametersContainer.encode(parameter0, forKey: ClientRuntime.Key("Parameter.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var parametersContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Parameters"))
                try parametersContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        try container.encode("ModifyDBClusterParameterGroup", forKey:ClientRuntime.Key("Action"))
        try container.encode("2014-10-31", forKey:ClientRuntime.Key("Version"))
    }
}

extension ModifyDBClusterParameterGroupInput {

    static func urlPathProvider(_ value: ModifyDBClusterParameterGroupInput) -> Swift.String? {
        return "/"
    }
}

///
public struct ModifyDBClusterParameterGroupInput: Swift.Equatable {
    /// The name of the DB cluster parameter group to modify.
    /// This member is required.
    public var dbClusterParameterGroupName: Swift.String?
    /// A list of parameters in the DB cluster parameter group to modify. Valid Values (for the application method): immediate | pending-reboot You can use the immediate value with dynamic parameters only. You can use the pending-reboot value for both dynamic and static parameters. When the application method is immediate, changes to dynamic parameters are applied immediately to the DB clusters associated with the parameter group. When the application method is pending-reboot, changes to dynamic and static parameters are applied after a reboot without failover to the DB clusters associated with the parameter group.
    /// This member is required.
    public var parameters: [RDSClientTypes.Parameter]?

    public init(
        dbClusterParameterGroupName: Swift.String? = nil,
        parameters: [RDSClientTypes.Parameter]? = nil
    )
    {
        self.dbClusterParameterGroupName = dbClusterParameterGroupName
        self.parameters = parameters
    }
}

extension ModifyDBClusterParameterGroupOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<ModifyDBClusterParameterGroupOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["ModifyDBClusterParameterGroupResult"]
            var value = ModifyDBClusterParameterGroupOutput()
            value.dbClusterParameterGroupName = try reader["DBClusterParameterGroupName"].readIfPresent()
            return value
        }
    }
}

///
public struct ModifyDBClusterParameterGroupOutput: Swift.Equatable {
    /// The name of the DB cluster parameter group. Constraints:
    ///
    /// * Must be 1 to 255 letters or numbers.
    ///
    /// * First character must be a letter
    ///
    /// * Can't end with a hyphen or contain two consecutive hyphens
    ///
    ///
    /// This value is stored as a lowercase string.
    public var dbClusterParameterGroupName: Swift.String?

    public init(
        dbClusterParameterGroupName: Swift.String? = nil
    )
    {
        self.dbClusterParameterGroupName = dbClusterParameterGroupName
    }
}

enum ModifyDBClusterParameterGroupOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "DBParameterGroupNotFound": return try await DBParameterGroupNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "InvalidDBParameterGroupState": return try await InvalidDBParameterGroupStateFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension ModifyDBClusterSnapshotAttributeInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case attributeName = "AttributeName"
        case dbClusterSnapshotIdentifier = "DBClusterSnapshotIdentifier"
        case valuesToAdd = "ValuesToAdd"
        case valuesToRemove = "ValuesToRemove"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let attributeName = attributeName {
            try container.encode(attributeName, forKey: ClientRuntime.Key("AttributeName"))
        }
        if let dbClusterSnapshotIdentifier = dbClusterSnapshotIdentifier {
            try container.encode(dbClusterSnapshotIdentifier, forKey: ClientRuntime.Key("DBClusterSnapshotIdentifier"))
        }
        if let valuesToAdd = valuesToAdd {
            if !valuesToAdd.isEmpty {
                var valuesToAddContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("ValuesToAdd"))
                for (index0, string0) in valuesToAdd.enumerated() {
                    try valuesToAddContainer.encode(string0, forKey: ClientRuntime.Key("AttributeValue.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var valuesToAddContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("ValuesToAdd"))
                try valuesToAddContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let valuesToRemove = valuesToRemove {
            if !valuesToRemove.isEmpty {
                var valuesToRemoveContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("ValuesToRemove"))
                for (index0, string0) in valuesToRemove.enumerated() {
                    try valuesToRemoveContainer.encode(string0, forKey: ClientRuntime.Key("AttributeValue.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var valuesToRemoveContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("ValuesToRemove"))
                try valuesToRemoveContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        try container.encode("ModifyDBClusterSnapshotAttribute", forKey:ClientRuntime.Key("Action"))
        try container.encode("2014-10-31", forKey:ClientRuntime.Key("Version"))
    }
}

extension ModifyDBClusterSnapshotAttributeInput {

    static func urlPathProvider(_ value: ModifyDBClusterSnapshotAttributeInput) -> Swift.String? {
        return "/"
    }
}

///
public struct ModifyDBClusterSnapshotAttributeInput: Swift.Equatable {
    /// The name of the DB cluster snapshot attribute to modify. To manage authorization for other Amazon Web Services accounts to copy or restore a manual DB cluster snapshot, set this value to restore. To view the list of attributes available to modify, use the [DescribeDBClusterSnapshotAttributes] API operation.
    /// This member is required.
    public var attributeName: Swift.String?
    /// The identifier for the DB cluster snapshot to modify the attributes for.
    /// This member is required.
    public var dbClusterSnapshotIdentifier: Swift.String?
    /// A list of DB cluster snapshot attributes to add to the attribute specified by AttributeName. To authorize other Amazon Web Services accounts to copy or restore a manual DB cluster snapshot, set this list to include one or more Amazon Web Services account IDs, or all to make the manual DB cluster snapshot restorable by any Amazon Web Services account. Do not add the all value for any manual DB cluster snapshots that contain private information that you don't want available to all Amazon Web Services accounts.
    public var valuesToAdd: [Swift.String]?
    /// A list of DB cluster snapshot attributes to remove from the attribute specified by AttributeName. To remove authorization for other Amazon Web Services accounts to copy or restore a manual DB cluster snapshot, set this list to include one or more Amazon Web Services account identifiers, or all to remove authorization for any Amazon Web Services account to copy or restore the DB cluster snapshot. If you specify all, an Amazon Web Services account whose account ID is explicitly added to the restore attribute can still copy or restore a manual DB cluster snapshot.
    public var valuesToRemove: [Swift.String]?

    public init(
        attributeName: Swift.String? = nil,
        dbClusterSnapshotIdentifier: Swift.String? = nil,
        valuesToAdd: [Swift.String]? = nil,
        valuesToRemove: [Swift.String]? = nil
    )
    {
        self.attributeName = attributeName
        self.dbClusterSnapshotIdentifier = dbClusterSnapshotIdentifier
        self.valuesToAdd = valuesToAdd
        self.valuesToRemove = valuesToRemove
    }
}

extension ModifyDBClusterSnapshotAttributeOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<ModifyDBClusterSnapshotAttributeOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["ModifyDBClusterSnapshotAttributeResult"]
            var value = ModifyDBClusterSnapshotAttributeOutput()
            value.dbClusterSnapshotAttributesResult = try reader["DBClusterSnapshotAttributesResult"].readIfPresent(readingClosure: RDSClientTypes.DBClusterSnapshotAttributesResult.readingClosure)
            return value
        }
    }
}

public struct ModifyDBClusterSnapshotAttributeOutput: Swift.Equatable {
    /// Contains the results of a successful call to the DescribeDBClusterSnapshotAttributes API action. Manual DB cluster snapshot attributes are used to authorize other Amazon Web Services accounts to copy or restore a manual DB cluster snapshot. For more information, see the ModifyDBClusterSnapshotAttribute API action.
    public var dbClusterSnapshotAttributesResult: RDSClientTypes.DBClusterSnapshotAttributesResult?

    public init(
        dbClusterSnapshotAttributesResult: RDSClientTypes.DBClusterSnapshotAttributesResult? = nil
    )
    {
        self.dbClusterSnapshotAttributesResult = dbClusterSnapshotAttributesResult
    }
}

enum ModifyDBClusterSnapshotAttributeOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "DBClusterSnapshotNotFoundFault": return try await DBClusterSnapshotNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "InvalidDBClusterSnapshotStateFault": return try await InvalidDBClusterSnapshotStateFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "SharedSnapshotQuotaExceeded": return try await SharedSnapshotQuotaExceededFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension ModifyDBInstanceInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case allocatedStorage = "AllocatedStorage"
        case allowMajorVersionUpgrade = "AllowMajorVersionUpgrade"
        case applyImmediately = "ApplyImmediately"
        case autoMinorVersionUpgrade = "AutoMinorVersionUpgrade"
        case automationMode = "AutomationMode"
        case awsBackupRecoveryPointArn = "AwsBackupRecoveryPointArn"
        case backupRetentionPeriod = "BackupRetentionPeriod"
        case caCertificateIdentifier = "CACertificateIdentifier"
        case certificateRotationRestart = "CertificateRotationRestart"
        case cloudwatchLogsExportConfiguration = "CloudwatchLogsExportConfiguration"
        case copyTagsToSnapshot = "CopyTagsToSnapshot"
        case dbInstanceClass = "DBInstanceClass"
        case dbInstanceIdentifier = "DBInstanceIdentifier"
        case dbParameterGroupName = "DBParameterGroupName"
        case dbPortNumber = "DBPortNumber"
        case dbSecurityGroups = "DBSecurityGroups"
        case dbSubnetGroupName = "DBSubnetGroupName"
        case dedicatedLogVolume = "DedicatedLogVolume"
        case deletionProtection = "DeletionProtection"
        case disableDomain = "DisableDomain"
        case domain = "Domain"
        case domainAuthSecretArn = "DomainAuthSecretArn"
        case domainDnsIps = "DomainDnsIps"
        case domainFqdn = "DomainFqdn"
        case domainIAMRoleName = "DomainIAMRoleName"
        case domainOu = "DomainOu"
        case enableCustomerOwnedIp = "EnableCustomerOwnedIp"
        case enableIAMDatabaseAuthentication = "EnableIAMDatabaseAuthentication"
        case enablePerformanceInsights = "EnablePerformanceInsights"
        case engine = "Engine"
        case engineVersion = "EngineVersion"
        case iops = "Iops"
        case licenseModel = "LicenseModel"
        case manageMasterUserPassword = "ManageMasterUserPassword"
        case masterUserPassword = "MasterUserPassword"
        case masterUserSecretKmsKeyId = "MasterUserSecretKmsKeyId"
        case maxAllocatedStorage = "MaxAllocatedStorage"
        case monitoringInterval = "MonitoringInterval"
        case monitoringRoleArn = "MonitoringRoleArn"
        case multiAZ = "MultiAZ"
        case multiTenant = "MultiTenant"
        case networkType = "NetworkType"
        case newDBInstanceIdentifier = "NewDBInstanceIdentifier"
        case optionGroupName = "OptionGroupName"
        case performanceInsightsKMSKeyId = "PerformanceInsightsKMSKeyId"
        case performanceInsightsRetentionPeriod = "PerformanceInsightsRetentionPeriod"
        case preferredBackupWindow = "PreferredBackupWindow"
        case preferredMaintenanceWindow = "PreferredMaintenanceWindow"
        case processorFeatures = "ProcessorFeatures"
        case promotionTier = "PromotionTier"
        case publiclyAccessible = "PubliclyAccessible"
        case replicaMode = "ReplicaMode"
        case resumeFullAutomationModeMinutes = "ResumeFullAutomationModeMinutes"
        case rotateMasterUserPassword = "RotateMasterUserPassword"
        case storageThroughput = "StorageThroughput"
        case storageType = "StorageType"
        case tdeCredentialArn = "TdeCredentialArn"
        case tdeCredentialPassword = "TdeCredentialPassword"
        case useDefaultProcessorFeatures = "UseDefaultProcessorFeatures"
        case vpcSecurityGroupIds = "VpcSecurityGroupIds"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let allocatedStorage = allocatedStorage {
            try container.encode(allocatedStorage, forKey: ClientRuntime.Key("AllocatedStorage"))
        }
        if let allowMajorVersionUpgrade = allowMajorVersionUpgrade {
            try container.encode(allowMajorVersionUpgrade, forKey: ClientRuntime.Key("AllowMajorVersionUpgrade"))
        }
        if let applyImmediately = applyImmediately {
            try container.encode(applyImmediately, forKey: ClientRuntime.Key("ApplyImmediately"))
        }
        if let autoMinorVersionUpgrade = autoMinorVersionUpgrade {
            try container.encode(autoMinorVersionUpgrade, forKey: ClientRuntime.Key("AutoMinorVersionUpgrade"))
        }
        if let automationMode = automationMode {
            try container.encode(automationMode, forKey: ClientRuntime.Key("AutomationMode"))
        }
        if let awsBackupRecoveryPointArn = awsBackupRecoveryPointArn {
            try container.encode(awsBackupRecoveryPointArn, forKey: ClientRuntime.Key("AwsBackupRecoveryPointArn"))
        }
        if let backupRetentionPeriod = backupRetentionPeriod {
            try container.encode(backupRetentionPeriod, forKey: ClientRuntime.Key("BackupRetentionPeriod"))
        }
        if let caCertificateIdentifier = caCertificateIdentifier {
            try container.encode(caCertificateIdentifier, forKey: ClientRuntime.Key("CACertificateIdentifier"))
        }
        if let certificateRotationRestart = certificateRotationRestart {
            try container.encode(certificateRotationRestart, forKey: ClientRuntime.Key("CertificateRotationRestart"))
        }
        if let cloudwatchLogsExportConfiguration = cloudwatchLogsExportConfiguration {
            try container.encode(cloudwatchLogsExportConfiguration, forKey: ClientRuntime.Key("CloudwatchLogsExportConfiguration"))
        }
        if let copyTagsToSnapshot = copyTagsToSnapshot {
            try container.encode(copyTagsToSnapshot, forKey: ClientRuntime.Key("CopyTagsToSnapshot"))
        }
        if let dbInstanceClass = dbInstanceClass {
            try container.encode(dbInstanceClass, forKey: ClientRuntime.Key("DBInstanceClass"))
        }
        if let dbInstanceIdentifier = dbInstanceIdentifier {
            try container.encode(dbInstanceIdentifier, forKey: ClientRuntime.Key("DBInstanceIdentifier"))
        }
        if let dbParameterGroupName = dbParameterGroupName {
            try container.encode(dbParameterGroupName, forKey: ClientRuntime.Key("DBParameterGroupName"))
        }
        if let dbPortNumber = dbPortNumber {
            try container.encode(dbPortNumber, forKey: ClientRuntime.Key("DBPortNumber"))
        }
        if let dbSecurityGroups = dbSecurityGroups {
            if !dbSecurityGroups.isEmpty {
                var dbSecurityGroupsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("DBSecurityGroups"))
                for (index0, string0) in dbSecurityGroups.enumerated() {
                    try dbSecurityGroupsContainer.encode(string0, forKey: ClientRuntime.Key("DBSecurityGroupName.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var dbSecurityGroupsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("DBSecurityGroups"))
                try dbSecurityGroupsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let dbSubnetGroupName = dbSubnetGroupName {
            try container.encode(dbSubnetGroupName, forKey: ClientRuntime.Key("DBSubnetGroupName"))
        }
        if let dedicatedLogVolume = dedicatedLogVolume {
            try container.encode(dedicatedLogVolume, forKey: ClientRuntime.Key("DedicatedLogVolume"))
        }
        if let deletionProtection = deletionProtection {
            try container.encode(deletionProtection, forKey: ClientRuntime.Key("DeletionProtection"))
        }
        if let disableDomain = disableDomain {
            try container.encode(disableDomain, forKey: ClientRuntime.Key("DisableDomain"))
        }
        if let domain = domain {
            try container.encode(domain, forKey: ClientRuntime.Key("Domain"))
        }
        if let domainAuthSecretArn = domainAuthSecretArn {
            try container.encode(domainAuthSecretArn, forKey: ClientRuntime.Key("DomainAuthSecretArn"))
        }
        if let domainDnsIps = domainDnsIps {
            if !domainDnsIps.isEmpty {
                var domainDnsIpsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("DomainDnsIps"))
                for (index0, string0) in domainDnsIps.enumerated() {
                    try domainDnsIpsContainer.encode(string0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var domainDnsIpsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("DomainDnsIps"))
                try domainDnsIpsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let domainFqdn = domainFqdn {
            try container.encode(domainFqdn, forKey: ClientRuntime.Key("DomainFqdn"))
        }
        if let domainIAMRoleName = domainIAMRoleName {
            try container.encode(domainIAMRoleName, forKey: ClientRuntime.Key("DomainIAMRoleName"))
        }
        if let domainOu = domainOu {
            try container.encode(domainOu, forKey: ClientRuntime.Key("DomainOu"))
        }
        if let enableCustomerOwnedIp = enableCustomerOwnedIp {
            try container.encode(enableCustomerOwnedIp, forKey: ClientRuntime.Key("EnableCustomerOwnedIp"))
        }
        if let enableIAMDatabaseAuthentication = enableIAMDatabaseAuthentication {
            try container.encode(enableIAMDatabaseAuthentication, forKey: ClientRuntime.Key("EnableIAMDatabaseAuthentication"))
        }
        if let enablePerformanceInsights = enablePerformanceInsights {
            try container.encode(enablePerformanceInsights, forKey: ClientRuntime.Key("EnablePerformanceInsights"))
        }
        if let engine = engine {
            try container.encode(engine, forKey: ClientRuntime.Key("Engine"))
        }
        if let engineVersion = engineVersion {
            try container.encode(engineVersion, forKey: ClientRuntime.Key("EngineVersion"))
        }
        if let iops = iops {
            try container.encode(iops, forKey: ClientRuntime.Key("Iops"))
        }
        if let licenseModel = licenseModel {
            try container.encode(licenseModel, forKey: ClientRuntime.Key("LicenseModel"))
        }
        if let manageMasterUserPassword = manageMasterUserPassword {
            try container.encode(manageMasterUserPassword, forKey: ClientRuntime.Key("ManageMasterUserPassword"))
        }
        if let masterUserPassword = masterUserPassword {
            try container.encode(masterUserPassword, forKey: ClientRuntime.Key("MasterUserPassword"))
        }
        if let masterUserSecretKmsKeyId = masterUserSecretKmsKeyId {
            try container.encode(masterUserSecretKmsKeyId, forKey: ClientRuntime.Key("MasterUserSecretKmsKeyId"))
        }
        if let maxAllocatedStorage = maxAllocatedStorage {
            try container.encode(maxAllocatedStorage, forKey: ClientRuntime.Key("MaxAllocatedStorage"))
        }
        if let monitoringInterval = monitoringInterval {
            try container.encode(monitoringInterval, forKey: ClientRuntime.Key("MonitoringInterval"))
        }
        if let monitoringRoleArn = monitoringRoleArn {
            try container.encode(monitoringRoleArn, forKey: ClientRuntime.Key("MonitoringRoleArn"))
        }
        if let multiAZ = multiAZ {
            try container.encode(multiAZ, forKey: ClientRuntime.Key("MultiAZ"))
        }
        if let multiTenant = multiTenant {
            try container.encode(multiTenant, forKey: ClientRuntime.Key("MultiTenant"))
        }
        if let networkType = networkType {
            try container.encode(networkType, forKey: ClientRuntime.Key("NetworkType"))
        }
        if let newDBInstanceIdentifier = newDBInstanceIdentifier {
            try container.encode(newDBInstanceIdentifier, forKey: ClientRuntime.Key("NewDBInstanceIdentifier"))
        }
        if let optionGroupName = optionGroupName {
            try container.encode(optionGroupName, forKey: ClientRuntime.Key("OptionGroupName"))
        }
        if let performanceInsightsKMSKeyId = performanceInsightsKMSKeyId {
            try container.encode(performanceInsightsKMSKeyId, forKey: ClientRuntime.Key("PerformanceInsightsKMSKeyId"))
        }
        if let performanceInsightsRetentionPeriod = performanceInsightsRetentionPeriod {
            try container.encode(performanceInsightsRetentionPeriod, forKey: ClientRuntime.Key("PerformanceInsightsRetentionPeriod"))
        }
        if let preferredBackupWindow = preferredBackupWindow {
            try container.encode(preferredBackupWindow, forKey: ClientRuntime.Key("PreferredBackupWindow"))
        }
        if let preferredMaintenanceWindow = preferredMaintenanceWindow {
            try container.encode(preferredMaintenanceWindow, forKey: ClientRuntime.Key("PreferredMaintenanceWindow"))
        }
        if let processorFeatures = processorFeatures {
            if !processorFeatures.isEmpty {
                var processorFeaturesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("ProcessorFeatures"))
                for (index0, processorfeature0) in processorFeatures.enumerated() {
                    try processorFeaturesContainer.encode(processorfeature0, forKey: ClientRuntime.Key("ProcessorFeature.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var processorFeaturesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("ProcessorFeatures"))
                try processorFeaturesContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let promotionTier = promotionTier {
            try container.encode(promotionTier, forKey: ClientRuntime.Key("PromotionTier"))
        }
        if let publiclyAccessible = publiclyAccessible {
            try container.encode(publiclyAccessible, forKey: ClientRuntime.Key("PubliclyAccessible"))
        }
        if let replicaMode = replicaMode {
            try container.encode(replicaMode, forKey: ClientRuntime.Key("ReplicaMode"))
        }
        if let resumeFullAutomationModeMinutes = resumeFullAutomationModeMinutes {
            try container.encode(resumeFullAutomationModeMinutes, forKey: ClientRuntime.Key("ResumeFullAutomationModeMinutes"))
        }
        if let rotateMasterUserPassword = rotateMasterUserPassword {
            try container.encode(rotateMasterUserPassword, forKey: ClientRuntime.Key("RotateMasterUserPassword"))
        }
        if let storageThroughput = storageThroughput {
            try container.encode(storageThroughput, forKey: ClientRuntime.Key("StorageThroughput"))
        }
        if let storageType = storageType {
            try container.encode(storageType, forKey: ClientRuntime.Key("StorageType"))
        }
        if let tdeCredentialArn = tdeCredentialArn {
            try container.encode(tdeCredentialArn, forKey: ClientRuntime.Key("TdeCredentialArn"))
        }
        if let tdeCredentialPassword = tdeCredentialPassword {
            try container.encode(tdeCredentialPassword, forKey: ClientRuntime.Key("TdeCredentialPassword"))
        }
        if let useDefaultProcessorFeatures = useDefaultProcessorFeatures {
            try container.encode(useDefaultProcessorFeatures, forKey: ClientRuntime.Key("UseDefaultProcessorFeatures"))
        }
        if let vpcSecurityGroupIds = vpcSecurityGroupIds {
            if !vpcSecurityGroupIds.isEmpty {
                var vpcSecurityGroupIdsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("VpcSecurityGroupIds"))
                for (index0, string0) in vpcSecurityGroupIds.enumerated() {
                    try vpcSecurityGroupIdsContainer.encode(string0, forKey: ClientRuntime.Key("VpcSecurityGroupId.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var vpcSecurityGroupIdsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("VpcSecurityGroupIds"))
                try vpcSecurityGroupIdsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        try container.encode("ModifyDBInstance", forKey:ClientRuntime.Key("Action"))
        try container.encode("2014-10-31", forKey:ClientRuntime.Key("Version"))
    }
}

extension ModifyDBInstanceInput {

    static func urlPathProvider(_ value: ModifyDBInstanceInput) -> Swift.String? {
        return "/"
    }
}

///
public struct ModifyDBInstanceInput: Swift.Equatable {
    /// The new amount of storage in gibibytes (GiB) to allocate for the DB instance. For RDS for Db2, MariaDB, RDS for MySQL, RDS for Oracle, and RDS for PostgreSQL, the value supplied must be at least 10% greater than the current value. Values that are not at least 10% greater than the existing value are rounded up so that they are 10% greater than the current value. For the valid values for allocated storage for each engine, see CreateDBInstance.
    public var allocatedStorage: Swift.Int?
    /// Specifies whether major version upgrades are allowed. Changing this parameter doesn't result in an outage and the change is asynchronously applied as soon as possible. This setting doesn't apply to RDS Custom DB instances. Constraints:
    ///
    /// * Major version upgrades must be allowed when specifying a value for the EngineVersion parameter that's a different major version than the DB instance's current version.
    public var allowMajorVersionUpgrade: Swift.Bool?
    /// Specifies whether the modifications in this request and any pending modifications are asynchronously applied as soon as possible, regardless of the PreferredMaintenanceWindow setting for the DB instance. By default, this parameter is disabled. If this parameter is disabled, changes to the DB instance are applied during the next maintenance window. Some parameter changes can cause an outage and are applied on the next call to [RebootDBInstance], or the next failure reboot. Review the table of parameters in [Modifying a DB Instance](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Overview.DBInstance.Modifying.html) in the Amazon RDS User Guide to see the impact of enabling or disabling ApplyImmediately for each modified parameter and to determine when the changes are applied.
    public var applyImmediately: Swift.Bool?
    /// Specifies whether minor version upgrades are applied automatically to the DB instance during the maintenance window. An outage occurs when all the following conditions are met:
    ///
    /// * The automatic upgrade is enabled for the maintenance window.
    ///
    /// * A newer minor version is available.
    ///
    /// * RDS has enabled automatic patching for the engine version.
    ///
    ///
    /// If any of the preceding conditions isn't met, Amazon RDS applies the change as soon as possible and doesn't cause an outage. For an RDS Custom DB instance, don't enable this setting. Otherwise, the operation returns an error.
    public var autoMinorVersionUpgrade: Swift.Bool?
    /// The automation mode of the RDS Custom DB instance. If full, the DB instance automates monitoring and instance recovery. If all paused, the instance pauses automation for the duration set by ResumeFullAutomationModeMinutes.
    public var automationMode: RDSClientTypes.AutomationMode?
    /// The Amazon Resource Name (ARN) of the recovery point in Amazon Web Services Backup. This setting doesn't apply to RDS Custom DB instances.
    public var awsBackupRecoveryPointArn: Swift.String?
    /// The number of days to retain automated backups. Setting this parameter to a positive number enables backups. Setting this parameter to 0 disables automated backups. Enabling and disabling backups can result in a brief I/O suspension that lasts from a few seconds to a few minutes, depending on the size and class of your DB instance. These changes are applied during the next maintenance window unless the ApplyImmediately parameter is enabled for this request. If you change the parameter from one non-zero value to another non-zero value, the change is asynchronously applied as soon as possible. This setting doesn't apply to Amazon Aurora DB instances. The retention period for automated backups is managed by the DB cluster. For more information, see ModifyDBCluster. Default: Uses existing setting Constraints:
    ///
    /// * Must be a value from 0 to 35.
    ///
    /// * Can't be set to 0 if the DB instance is a source to read replicas.
    ///
    /// * Can't be set to 0 for an RDS Custom for Oracle DB instance.
    public var backupRetentionPeriod: Swift.Int?
    /// The CA certificate identifier to use for the DB instance's server certificate. This setting doesn't apply to RDS Custom DB instances. For more information, see [Using SSL/TLS to encrypt a connection to a DB instance](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.SSL.html) in the Amazon RDS User Guide and [ Using SSL/TLS to encrypt a connection to a DB cluster](https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/UsingWithRDS.SSL.html) in the Amazon Aurora User Guide.
    public var caCertificateIdentifier: Swift.String?
    /// Specifies whether the DB instance is restarted when you rotate your SSL/TLS certificate. By default, the DB instance is restarted when you rotate your SSL/TLS certificate. The certificate is not updated until the DB instance is restarted. Set this parameter only if you are not using SSL/TLS to connect to the DB instance. If you are using SSL/TLS to connect to the DB instance, follow the appropriate instructions for your DB engine to rotate your SSL/TLS certificate:
    ///
    /// * For more information about rotating your SSL/TLS certificate for RDS DB engines, see [ Rotating Your SSL/TLS Certificate.](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.SSL-certificate-rotation.html) in the Amazon RDS User Guide.
    ///
    /// * For more information about rotating your SSL/TLS certificate for Aurora DB engines, see [ Rotating Your SSL/TLS Certificate](https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/UsingWithRDS.SSL-certificate-rotation.html) in the Amazon Aurora User Guide.
    ///
    ///
    /// This setting doesn't apply to RDS Custom DB instances.
    public var certificateRotationRestart: Swift.Bool?
    /// The log types to be enabled for export to CloudWatch Logs for a specific DB instance. A change to the CloudwatchLogsExportConfiguration parameter is always applied to the DB instance immediately. Therefore, the ApplyImmediately parameter has no effect. This setting doesn't apply to RDS Custom DB instances.
    public var cloudwatchLogsExportConfiguration: RDSClientTypes.CloudwatchLogsExportConfiguration?
    /// Specifies whether to copy all tags from the DB instance to snapshots of the DB instance. By default, tags aren't copied. This setting doesn't apply to Amazon Aurora DB instances. Copying tags to snapshots is managed by the DB cluster. Setting this value for an Aurora DB instance has no effect on the DB cluster setting. For more information, see ModifyDBCluster.
    public var copyTagsToSnapshot: Swift.Bool?
    /// The new compute and memory capacity of the DB instance, for example db.m4.large. Not all DB instance classes are available in all Amazon Web Services Regions, or for all database engines. For the full list of DB instance classes, and availability for your engine, see [DB Instance Class](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.DBInstanceClass.html) in the Amazon RDS User Guide or [Aurora DB instance classes](https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/Concepts.DBInstanceClass.html) in the Amazon Aurora User Guide. For RDS Custom, see [DB instance class support for RDS Custom for Oracle](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/custom-reqs-limits.html#custom-reqs-limits.instances) and [ DB instance class support for RDS Custom for SQL Server](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/custom-reqs-limits-MS.html#custom-reqs-limits.instancesMS). If you modify the DB instance class, an outage occurs during the change. The change is applied during the next maintenance window, unless you specify ApplyImmediately in your request. Default: Uses existing setting Constraints:
    ///
    /// * If you are modifying the DB instance class and upgrading the engine version at the same time, the currently running engine version must be supported on the specified DB instance class. Otherwise, the operation returns an error. In this case, first run the operation to upgrade the engine version, and then run it again to modify the DB instance class.
    public var dbInstanceClass: Swift.String?
    /// The identifier of DB instance to modify. This value is stored as a lowercase string. Constraints:
    ///
    /// * Must match the identifier of an existing DB instance.
    /// This member is required.
    public var dbInstanceIdentifier: Swift.String?
    /// The name of the DB parameter group to apply to the DB instance. Changing this setting doesn't result in an outage. The parameter group name itself is changed immediately, but the actual parameter changes are not applied until you reboot the instance without failover. In this case, the DB instance isn't rebooted automatically, and the parameter changes aren't applied during the next maintenance window. However, if you modify dynamic parameters in the newly associated DB parameter group, these changes are applied immediately without a reboot. This setting doesn't apply to RDS Custom DB instances. Default: Uses existing setting Constraints:
    ///
    /// * Must be in the same DB parameter group family as the DB instance.
    public var dbParameterGroupName: Swift.String?
    /// The port number on which the database accepts connections. The value of the DBPortNumber parameter must not match any of the port values specified for options in the option group for the DB instance. If you change the DBPortNumber value, your database restarts regardless of the value of the ApplyImmediately parameter. This setting doesn't apply to RDS Custom DB instances. Valid Values: 1150-65535 Default:
    ///
    /// * Amazon Aurora - 3306
    ///
    /// * RDS for Db2 - 50000
    ///
    /// * RDS for MariaDB - 3306
    ///
    /// * RDS for Microsoft SQL Server - 1433
    ///
    /// * RDS for MySQL - 3306
    ///
    /// * RDS for Oracle - 1521
    ///
    /// * RDS for PostgreSQL - 5432
    ///
    ///
    /// Constraints:
    ///
    /// * For RDS for Microsoft SQL Server, the value can't be 1234, 1434, 3260, 3343, 3389, 47001, or 49152-49156.
    public var dbPortNumber: Swift.Int?
    /// A list of DB security groups to authorize on this DB instance. Changing this setting doesn't result in an outage and the change is asynchronously applied as soon as possible. This setting doesn't apply to RDS Custom DB instances. Constraints:
    ///
    /// * If supplied, must match existing DB security groups.
    public var dbSecurityGroups: [Swift.String]?
    /// The new DB subnet group for the DB instance. You can use this parameter to move your DB instance to a different VPC. If your DB instance isn't in a VPC, you can also use this parameter to move your DB instance into a VPC. For more information, see [Working with a DB instance in a VPC](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_VPC.WorkingWithRDSInstanceinaVPC.html#USER_VPC.Non-VPC2VPC) in the Amazon RDS User Guide. Changing the subnet group causes an outage during the change. The change is applied during the next maintenance window, unless you enable ApplyImmediately. This parameter doesn't apply to RDS Custom DB instances. Constraints:
    ///
    /// * If supplied, must match existing DB subnet group.
    ///
    ///
    /// Example: mydbsubnetgroup
    public var dbSubnetGroupName: Swift.String?
    /// Indicates whether the DB instance has a dedicated log volume (DLV) enabled.
    public var dedicatedLogVolume: Swift.Bool?
    /// Specifies whether the DB instance has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection isn't enabled. For more information, see [ Deleting a DB Instance](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_DeleteInstance.html).
    public var deletionProtection: Swift.Bool?
    /// Specifies whether to remove the DB instance from the Active Directory domain.
    public var disableDomain: Swift.Bool?
    /// The Active Directory directory ID to move the DB instance to. Specify none to remove the instance from its current domain. You must create the domain before this operation. Currently, you can create only Db2, MySQL, Microsoft SQL Server, Oracle, and PostgreSQL DB instances in an Active Directory Domain. For more information, see [ Kerberos Authentication](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/kerberos-authentication.html) in the Amazon RDS User Guide. This setting doesn't apply to RDS Custom DB instances.
    public var domain: Swift.String?
    /// The ARN for the Secrets Manager secret with the credentials for the user joining the domain. Example: arn:aws:secretsmanager:region:account-number:secret:myselfmanagedADtestsecret-123456
    public var domainAuthSecretArn: Swift.String?
    /// The IPv4 DNS IP addresses of your primary and secondary Active Directory domain controllers. Constraints:
    ///
    /// * Two IP addresses must be provided. If there isn't a secondary domain controller, use the IP address of the primary domain controller for both entries in the list.
    ///
    ///
    /// Example: 123.124.125.126,234.235.236.237
    public var domainDnsIps: [Swift.String]?
    /// The fully qualified domain name (FQDN) of an Active Directory domain. Constraints:
    ///
    /// * Can't be longer than 64 characters.
    ///
    ///
    /// Example: mymanagedADtest.mymanagedAD.mydomain
    public var domainFqdn: Swift.String?
    /// The name of the IAM role to use when making API calls to the Directory Service. This setting doesn't apply to RDS Custom DB instances.
    public var domainIAMRoleName: Swift.String?
    /// The Active Directory organizational unit for your DB instance to join. Constraints:
    ///
    /// * Must be in the distinguished name format.
    ///
    /// * Can't be longer than 64 characters.
    ///
    ///
    /// Example: OU=mymanagedADtestOU,DC=mymanagedADtest,DC=mymanagedAD,DC=mydomain
    public var domainOu: Swift.String?
    /// Specifies whether to enable a customer-owned IP address (CoIP) for an RDS on Outposts DB instance. A CoIP provides local or external connectivity to resources in your Outpost subnets through your on-premises network. For some use cases, a CoIP can provide lower latency for connections to the DB instance from outside of its virtual private cloud (VPC) on your local network. For more information about RDS on Outposts, see [Working with Amazon RDS on Amazon Web Services Outposts](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/rds-on-outposts.html) in the Amazon RDS User Guide. For more information about CoIPs, see [Customer-owned IP addresses](https://docs.aws.amazon.com/outposts/latest/userguide/routing.html#ip-addressing) in the Amazon Web Services Outposts User Guide.
    public var enableCustomerOwnedIp: Swift.Bool?
    /// Specifies whether to enable mapping of Amazon Web Services Identity and Access Management (IAM) accounts to database accounts. By default, mapping isn't enabled. This setting doesn't apply to Amazon Aurora. Mapping Amazon Web Services IAM accounts to database accounts is managed by the DB cluster. For more information about IAM database authentication, see [ IAM Database Authentication for MySQL and PostgreSQL](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.IAMDBAuth.html) in the Amazon RDS User Guide. This setting doesn't apply to RDS Custom DB instances.
    public var enableIAMDatabaseAuthentication: Swift.Bool?
    /// Specifies whether to enable Performance Insights for the DB instance. For more information, see [Using Amazon Performance Insights](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_PerfInsights.html) in the Amazon RDS User Guide. This setting doesn't apply to RDS Custom DB instances.
    public var enablePerformanceInsights: Swift.Bool?
    /// The target Oracle DB engine when you convert a non-CDB to a CDB. This intermediate step is necessary to upgrade an Oracle Database 19c non-CDB to an Oracle Database 21c CDB. Note the following requirements:
    ///
    /// * Make sure that you specify oracle-ee-cdb or oracle-se2-cdb.
    ///
    /// * Make sure that your DB engine runs Oracle Database 19c with an April 2021 or later RU.
    ///
    ///
    /// Note the following limitations:
    ///
    /// * You can't convert a CDB to a non-CDB.
    ///
    /// * You can't convert a replica database.
    ///
    /// * You can't convert a non-CDB to a CDB and upgrade the engine version in the same command.
    ///
    /// * You can't convert the existing custom parameter or option group when it has options or parameters that are permanent or persistent. In this situation, the DB instance reverts to the default option and parameter group. To avoid reverting to the default, specify a new parameter group with --db-parameter-group-name and a new option group with --option-group-name.
    public var engine: Swift.String?
    /// The version number of the database engine to upgrade to. Changing this parameter results in an outage and the change is applied during the next maintenance window unless the ApplyImmediately parameter is enabled for this request. For major version upgrades, if a nondefault DB parameter group is currently in use, a new DB parameter group in the DB parameter group family for the new engine version must be specified. The new DB parameter group can be the default for that DB parameter group family. If you specify only a major version, Amazon RDS updates the DB instance to the default minor version if the current minor version is lower. For information about valid engine versions, see CreateDBInstance, or call DescribeDBEngineVersions. If the instance that you're modifying is acting as a read replica, the engine version that you specify must be the same or higher than the version that the source DB instance or cluster is running. In RDS Custom for Oracle, this parameter is supported for read replicas only if they are in the PATCH_DB_FAILURE lifecycle. Constraints:
    ///
    /// * If you are upgrading the engine version and modifying the DB instance class at the same time, the currently running engine version must be supported on the specified DB instance class. Otherwise, the operation returns an error. In this case, first run the operation to upgrade the engine version, and then run it again to modify the DB instance class.
    public var engineVersion: Swift.String?
    /// The new Provisioned IOPS (I/O operations per second) value for the RDS instance. Changing this setting doesn't result in an outage and the change is applied during the next maintenance window unless the ApplyImmediately parameter is enabled for this request. If you are migrating from Provisioned IOPS to standard storage, set this value to 0. The DB instance will require a reboot for the change in storage type to take effect. If you choose to migrate your DB instance from using standard storage to using Provisioned IOPS, or from using Provisioned IOPS to using standard storage, the process can take time. The duration of the migration depends on several factors such as database load, storage size, storage type (standard or Provisioned IOPS), amount of IOPS provisioned (if any), and the number of prior scale storage operations. Typical migration times are under 24 hours, but the process can take up to several days in some cases. During the migration, the DB instance is available for use, but might experience performance degradation. While the migration takes place, nightly backups for the instance are suspended. No other Amazon RDS operations can take place for the instance, including modifying the instance, rebooting the instance, deleting the instance, creating a read replica for the instance, and creating a DB snapshot of the instance. Constraints:
    ///
    /// * For RDS for MariaDB, RDS for MySQL, RDS for Oracle, and RDS for PostgreSQL - The value supplied must be at least 10% greater than the current value. Values that are not at least 10% greater than the existing value are rounded up so that they are 10% greater than the current value.
    ///
    ///
    /// Default: Uses existing setting
    public var iops: Swift.Int?
    /// The license model for the DB instance. This setting doesn't apply to Amazon Aurora or RDS Custom DB instances. Valid Values:
    ///
    /// * RDS for Db2 - bring-your-own-license
    ///
    /// * RDS for MariaDB - general-public-license
    ///
    /// * RDS for Microsoft SQL Server - license-included
    ///
    /// * RDS for MySQL - general-public-license
    ///
    /// * RDS for Oracle - bring-your-own-license | license-included
    ///
    /// * RDS for PostgreSQL - postgresql-license
    public var licenseModel: Swift.String?
    /// Specifies whether to manage the master user password with Amazon Web Services Secrets Manager. If the DB instance doesn't manage the master user password with Amazon Web Services Secrets Manager, you can turn on this management. In this case, you can't specify MasterUserPassword. If the DB instance already manages the master user password with Amazon Web Services Secrets Manager, and you specify that the master user password is not managed with Amazon Web Services Secrets Manager, then you must specify MasterUserPassword. In this case, Amazon RDS deletes the secret and uses the new password for the master user specified by MasterUserPassword. For more information, see [Password management with Amazon Web Services Secrets Manager](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/rds-secrets-manager.html) in the Amazon RDS User Guide. Constraints:
    ///
    /// * Can't manage the master user password with Amazon Web Services Secrets Manager if MasterUserPassword is specified.
    public var manageMasterUserPassword: Swift.Bool?
    /// The new password for the master user. Changing this parameter doesn't result in an outage and the change is asynchronously applied as soon as possible. Between the time of the request and the completion of the request, the MasterUserPassword element exists in the PendingModifiedValues element of the operation response. Amazon RDS API operations never return the password, so this operation provides a way to regain access to a primary instance user if the password is lost. This includes restoring privileges that might have been accidentally revoked. This setting doesn't apply to the following DB instances:
    ///
    /// * Amazon Aurora (The password for the master user is managed by the DB cluster. For more information, see ModifyDBCluster.)
    ///
    /// * RDS Custom
    ///
    ///
    /// Default: Uses existing setting Constraints:
    ///
    /// * Can't be specified if ManageMasterUserPassword is turned on.
    ///
    /// * Can include any printable ASCII character except "/", """, or "@". For RDS for Oracle, can't include the "&" (ampersand) or the "'" (single quotes) character.
    ///
    ///
    /// Length Constraints:
    ///
    /// * RDS for Db2 - Must contain from 8 to 255 characters.
    ///
    /// * RDS for MariaDB - Must contain from 8 to 41 characters.
    ///
    /// * RDS for Microsoft SQL Server - Must contain from 8 to 128 characters.
    ///
    /// * RDS for MySQL - Must contain from 8 to 41 characters.
    ///
    /// * RDS for Oracle - Must contain from 8 to 30 characters.
    ///
    /// * RDS for PostgreSQL - Must contain from 8 to 128 characters.
    public var masterUserPassword: Swift.String?
    /// The Amazon Web Services KMS key identifier to encrypt a secret that is automatically generated and managed in Amazon Web Services Secrets Manager. This setting is valid only if both of the following conditions are met:
    ///
    /// * The DB instance doesn't manage the master user password in Amazon Web Services Secrets Manager. If the DB instance already manages the master user password in Amazon Web Services Secrets Manager, you can't change the KMS key used to encrypt the secret.
    ///
    /// * You are turning on ManageMasterUserPassword to manage the master user password in Amazon Web Services Secrets Manager. If you are turning on ManageMasterUserPassword and don't specify MasterUserSecretKmsKeyId, then the aws/secretsmanager KMS key is used to encrypt the secret. If the secret is in a different Amazon Web Services account, then you can't use the aws/secretsmanager KMS key to encrypt the secret, and you must use a customer managed KMS key.
    ///
    ///
    /// The Amazon Web Services KMS key identifier is the key ARN, key ID, alias ARN, or alias name for the KMS key. To use a KMS key in a different Amazon Web Services account, specify the key ARN or alias ARN. There is a default KMS key for your Amazon Web Services account. Your Amazon Web Services account has a different default KMS key for each Amazon Web Services Region.
    public var masterUserSecretKmsKeyId: Swift.String?
    /// The upper limit in gibibytes (GiB) to which Amazon RDS can automatically scale the storage of the DB instance. For more information about this setting, including limitations that apply to it, see [ Managing capacity automatically with Amazon RDS storage autoscaling](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_PIOPS.StorageTypes.html#USER_PIOPS.Autoscaling) in the Amazon RDS User Guide. This setting doesn't apply to RDS Custom DB instances.
    public var maxAllocatedStorage: Swift.Int?
    /// The interval, in seconds, between points when Enhanced Monitoring metrics are collected for the DB instance. To disable collection of Enhanced Monitoring metrics, specify 0. If MonitoringRoleArn is specified, set MonitoringInterval to a value other than 0. This setting doesn't apply to RDS Custom DB instances. Valid Values: 0 | 1 | 5 | 10 | 15 | 30 | 60 Default: 0
    public var monitoringInterval: Swift.Int?
    /// The ARN for the IAM role that permits RDS to send enhanced monitoring metrics to Amazon CloudWatch Logs. For example, arn:aws:iam:123456789012:role/emaccess. For information on creating a monitoring role, see [To create an IAM role for Amazon RDS Enhanced Monitoring](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Monitoring.html#USER_Monitoring.OS.IAMRole) in the Amazon RDS User Guide. If MonitoringInterval is set to a value other than 0, supply a MonitoringRoleArn value. This setting doesn't apply to RDS Custom DB instances.
    public var monitoringRoleArn: Swift.String?
    /// Specifies whether the DB instance is a Multi-AZ deployment. Changing this parameter doesn't result in an outage. The change is applied during the next maintenance window unless the ApplyImmediately parameter is enabled for this request. This setting doesn't apply to RDS Custom DB instances.
    public var multiAZ: Swift.Bool?
    /// Specifies whether the to convert your DB instance from the single-tenant conﬁguration to the multi-tenant conﬁguration. This parameter is supported only for RDS for Oracle CDB instances. During the conversion, RDS creates an initial tenant database and associates the DB name, master user name, character set, and national character set metadata with this database. The tags associated with the instance also propagate to the initial tenant database. You can add more tenant databases to your DB instance by using the CreateTenantDatabase operation. The conversion to the multi-tenant configuration is permanent and irreversible, so you can't later convert back to the single-tenant configuration. When you specify this parameter, you must also specify ApplyImmediately.
    public var multiTenant: Swift.Bool?
    /// The network type of the DB instance. The network type is determined by the DBSubnetGroup specified for the DB instance. A DBSubnetGroup can support only the IPv4 protocol or the IPv4 and the IPv6 protocols (DUAL). For more information, see [ Working with a DB instance in a VPC](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_VPC.WorkingWithRDSInstanceinaVPC.html) in the Amazon RDS User Guide. Valid Values: IPV4 | DUAL
    public var networkType: Swift.String?
    /// The new identifier for the DB instance when renaming a DB instance. When you change the DB instance identifier, an instance reboot occurs immediately if you enable ApplyImmediately, or will occur during the next maintenance window if you disable ApplyImmediately. This value is stored as a lowercase string. This setting doesn't apply to RDS Custom DB instances. Constraints:
    ///
    /// * Must contain from 1 to 63 letters, numbers, or hyphens.
    ///
    /// * The first character must be a letter.
    ///
    /// * Can't end with a hyphen or contain two consecutive hyphens.
    ///
    ///
    /// Example: mydbinstance
    public var newDBInstanceIdentifier: Swift.String?
    /// The option group to associate the DB instance with. Changing this parameter doesn't result in an outage, with one exception. If the parameter change results in an option group that enables OEM, it can cause a brief period, lasting less than a second, during which new connections are rejected but existing connections aren't interrupted. The change is applied during the next maintenance window unless the ApplyImmediately parameter is enabled for this request. Permanent options, such as the TDE option for Oracle Advanced Security TDE, can't be removed from an option group, and that option group can't be removed from a DB instance after it is associated with a DB instance. This setting doesn't apply to RDS Custom DB instances.
    public var optionGroupName: Swift.String?
    /// The Amazon Web Services KMS key identifier for encryption of Performance Insights data. The Amazon Web Services KMS key identifier is the key ARN, key ID, alias ARN, or alias name for the KMS key. If you don't specify a value for PerformanceInsightsKMSKeyId, then Amazon RDS uses your default KMS key. There is a default KMS key for your Amazon Web Services account. Your Amazon Web Services account has a different default KMS key for each Amazon Web Services Region. This setting doesn't apply to RDS Custom DB instances.
    public var performanceInsightsKMSKeyId: Swift.String?
    /// The number of days to retain Performance Insights data. This setting doesn't apply to RDS Custom DB instances. Valid Values:
    ///
    /// * 7
    ///
    /// * month * 31, where month is a number of months from 1-23. Examples: 93 (3 months * 31), 341 (11 months * 31), 589 (19 months * 31)
    ///
    /// * 731
    ///
    ///
    /// Default: 7 days If you specify a retention period that isn't valid, such as 94, Amazon RDS returns an error.
    public var performanceInsightsRetentionPeriod: Swift.Int?
    /// The daily time range during which automated backups are created if automated backups are enabled, as determined by the BackupRetentionPeriod parameter. Changing this parameter doesn't result in an outage and the change is asynchronously applied as soon as possible. The default is a 30-minute window selected at random from an 8-hour block of time for each Amazon Web Services Region. For more information, see [Backup window](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_WorkingWithAutomatedBackups.html#USER_WorkingWithAutomatedBackups.BackupWindow) in the Amazon RDS User Guide. This setting doesn't apply to Amazon Aurora DB instances. The daily time range for creating automated backups is managed by the DB cluster. For more information, see ModifyDBCluster. Constraints:
    ///
    /// * Must be in the format hh24:mi-hh24:mi.
    ///
    /// * Must be in Universal Coordinated Time (UTC).
    ///
    /// * Must not conflict with the preferred maintenance window.
    ///
    /// * Must be at least 30 minutes.
    public var preferredBackupWindow: Swift.String?
    /// The weekly time range during which system maintenance can occur, which might result in an outage. Changing this parameter doesn't result in an outage, except in the following situation, and the change is asynchronously applied as soon as possible. If there are pending actions that cause a reboot, and the maintenance window is changed to include the current time, then changing this parameter causes a reboot of the DB instance. If you change this window to the current time, there must be at least 30 minutes between the current time and end of the window to ensure pending changes are applied. For more information, see [Amazon RDS Maintenance Window](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_UpgradeDBInstance.Maintenance.html#Concepts.DBMaintenance) in the Amazon RDS User Guide. Default: Uses existing setting Constraints:
    ///
    /// * Must be in the format ddd:hh24:mi-ddd:hh24:mi.
    ///
    /// * The day values must be mon | tue | wed | thu | fri | sat | sun.
    ///
    /// * Must be in Universal Coordinated Time (UTC).
    ///
    /// * Must not conflict with the preferred backup window.
    ///
    /// * Must be at least 30 minutes.
    public var preferredMaintenanceWindow: Swift.String?
    /// The number of CPU cores and the number of threads per core for the DB instance class of the DB instance. This setting doesn't apply to RDS Custom DB instances.
    public var processorFeatures: [RDSClientTypes.ProcessorFeature]?
    /// The order of priority in which an Aurora Replica is promoted to the primary instance after a failure of the existing primary instance. For more information, see [ Fault Tolerance for an Aurora DB Cluster](https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/Concepts.AuroraHighAvailability.html#Aurora.Managing.FaultTolerance) in the Amazon Aurora User Guide. This setting doesn't apply to RDS Custom DB instances. Default: 1 Valid Values: 0 - 15
    public var promotionTier: Swift.Int?
    /// Specifies whether the DB instance is publicly accessible. When the DB cluster is publicly accessible, its Domain Name System (DNS) endpoint resolves to the private IP address from within the DB cluster's virtual private cloud (VPC). It resolves to the public IP address from outside of the DB cluster's VPC. Access to the DB cluster is ultimately controlled by the security group it uses. That public access isn't permitted if the security group assigned to the DB cluster doesn't permit it. When the DB instance isn't publicly accessible, it is an internal DB instance with a DNS name that resolves to a private IP address. PubliclyAccessible only applies to DB instances in a VPC. The DB instance must be part of a public subnet and PubliclyAccessible must be enabled for it to be publicly accessible. Changes to the PubliclyAccessible parameter are applied immediately regardless of the value of the ApplyImmediately parameter.
    public var publiclyAccessible: Swift.Bool?
    /// A value that sets the open mode of a replica database to either mounted or read-only. Currently, this parameter is only supported for Oracle DB instances. Mounted DB replicas are included in Oracle Enterprise Edition. The main use case for mounted replicas is cross-Region disaster recovery. The primary database doesn't use Active Data Guard to transmit information to the mounted replica. Because it doesn't accept user connections, a mounted replica can't serve a read-only workload. For more information, see [Working with Oracle Read Replicas for Amazon RDS](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/oracle-read-replicas.html) in the Amazon RDS User Guide. This setting doesn't apply to RDS Custom DB instances.
    public var replicaMode: RDSClientTypes.ReplicaMode?
    /// The number of minutes to pause the automation. When the time period ends, RDS Custom resumes full automation. Default: 60 Constraints:
    ///
    /// * Must be at least 60.
    ///
    /// * Must be no more than 1,440.
    public var resumeFullAutomationModeMinutes: Swift.Int?
    /// Specifies whether to rotate the secret managed by Amazon Web Services Secrets Manager for the master user password. This setting is valid only if the master user password is managed by RDS in Amazon Web Services Secrets Manager for the DB cluster. The secret value contains the updated password. For more information, see [Password management with Amazon Web Services Secrets Manager](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/rds-secrets-manager.html) in the Amazon RDS User Guide. Constraints:
    ///
    /// * You must apply the change immediately when rotating the master user password.
    public var rotateMasterUserPassword: Swift.Bool?
    /// The storage throughput value for the DB instance. This setting applies only to the gp3 storage type. This setting doesn't apply to Amazon Aurora or RDS Custom DB instances.
    public var storageThroughput: Swift.Int?
    /// The storage type to associate with the DB instance. If you specify Provisioned IOPS (io1), you must also include a value for the Iops parameter. If you choose to migrate your DB instance from using standard storage to using Provisioned IOPS, or from using Provisioned IOPS to using standard storage, the process can take time. The duration of the migration depends on several factors such as database load, storage size, storage type (standard or Provisioned IOPS), amount of IOPS provisioned (if any), and the number of prior scale storage operations. Typical migration times are under 24 hours, but the process can take up to several days in some cases. During the migration, the DB instance is available for use, but might experience performance degradation. While the migration takes place, nightly backups for the instance are suspended. No other Amazon RDS operations can take place for the instance, including modifying the instance, rebooting the instance, deleting the instance, creating a read replica for the instance, and creating a DB snapshot of the instance. Valid Values: gp2 | gp3 | io1 | standard Default: io1, if the Iops parameter is specified. Otherwise, gp2.
    public var storageType: Swift.String?
    /// The ARN from the key store with which to associate the instance for TDE encryption. This setting doesn't apply to RDS Custom DB instances.
    public var tdeCredentialArn: Swift.String?
    /// The password for the given ARN from the key store in order to access the device. This setting doesn't apply to RDS Custom DB instances.
    public var tdeCredentialPassword: Swift.String?
    /// Specifies whether the DB instance class of the DB instance uses its default processor features. This setting doesn't apply to RDS Custom DB instances.
    public var useDefaultProcessorFeatures: Swift.Bool?
    /// A list of Amazon EC2 VPC security groups to associate with this DB instance. This change is asynchronously applied as soon as possible. This setting doesn't apply to the following DB instances:
    ///
    /// * Amazon Aurora (The associated list of EC2 VPC security groups is managed by the DB cluster. For more information, see ModifyDBCluster.)
    ///
    /// * RDS Custom
    ///
    ///
    /// Constraints:
    ///
    /// * If supplied, must match existing VPC security group IDs.
    public var vpcSecurityGroupIds: [Swift.String]?

    public init(
        allocatedStorage: Swift.Int? = nil,
        allowMajorVersionUpgrade: Swift.Bool? = nil,
        applyImmediately: Swift.Bool? = nil,
        autoMinorVersionUpgrade: Swift.Bool? = nil,
        automationMode: RDSClientTypes.AutomationMode? = nil,
        awsBackupRecoveryPointArn: Swift.String? = nil,
        backupRetentionPeriod: Swift.Int? = nil,
        caCertificateIdentifier: Swift.String? = nil,
        certificateRotationRestart: Swift.Bool? = nil,
        cloudwatchLogsExportConfiguration: RDSClientTypes.CloudwatchLogsExportConfiguration? = nil,
        copyTagsToSnapshot: Swift.Bool? = nil,
        dbInstanceClass: Swift.String? = nil,
        dbInstanceIdentifier: Swift.String? = nil,
        dbParameterGroupName: Swift.String? = nil,
        dbPortNumber: Swift.Int? = nil,
        dbSecurityGroups: [Swift.String]? = nil,
        dbSubnetGroupName: Swift.String? = nil,
        dedicatedLogVolume: Swift.Bool? = nil,
        deletionProtection: Swift.Bool? = nil,
        disableDomain: Swift.Bool? = nil,
        domain: Swift.String? = nil,
        domainAuthSecretArn: Swift.String? = nil,
        domainDnsIps: [Swift.String]? = nil,
        domainFqdn: Swift.String? = nil,
        domainIAMRoleName: Swift.String? = nil,
        domainOu: Swift.String? = nil,
        enableCustomerOwnedIp: Swift.Bool? = nil,
        enableIAMDatabaseAuthentication: Swift.Bool? = nil,
        enablePerformanceInsights: Swift.Bool? = nil,
        engine: Swift.String? = nil,
        engineVersion: Swift.String? = nil,
        iops: Swift.Int? = nil,
        licenseModel: Swift.String? = nil,
        manageMasterUserPassword: Swift.Bool? = nil,
        masterUserPassword: Swift.String? = nil,
        masterUserSecretKmsKeyId: Swift.String? = nil,
        maxAllocatedStorage: Swift.Int? = nil,
        monitoringInterval: Swift.Int? = nil,
        monitoringRoleArn: Swift.String? = nil,
        multiAZ: Swift.Bool? = nil,
        multiTenant: Swift.Bool? = nil,
        networkType: Swift.String? = nil,
        newDBInstanceIdentifier: Swift.String? = nil,
        optionGroupName: Swift.String? = nil,
        performanceInsightsKMSKeyId: Swift.String? = nil,
        performanceInsightsRetentionPeriod: Swift.Int? = nil,
        preferredBackupWindow: Swift.String? = nil,
        preferredMaintenanceWindow: Swift.String? = nil,
        processorFeatures: [RDSClientTypes.ProcessorFeature]? = nil,
        promotionTier: Swift.Int? = nil,
        publiclyAccessible: Swift.Bool? = nil,
        replicaMode: RDSClientTypes.ReplicaMode? = nil,
        resumeFullAutomationModeMinutes: Swift.Int? = nil,
        rotateMasterUserPassword: Swift.Bool? = nil,
        storageThroughput: Swift.Int? = nil,
        storageType: Swift.String? = nil,
        tdeCredentialArn: Swift.String? = nil,
        tdeCredentialPassword: Swift.String? = nil,
        useDefaultProcessorFeatures: Swift.Bool? = nil,
        vpcSecurityGroupIds: [Swift.String]? = nil
    )
    {
        self.allocatedStorage = allocatedStorage
        self.allowMajorVersionUpgrade = allowMajorVersionUpgrade
        self.applyImmediately = applyImmediately
        self.autoMinorVersionUpgrade = autoMinorVersionUpgrade
        self.automationMode = automationMode
        self.awsBackupRecoveryPointArn = awsBackupRecoveryPointArn
        self.backupRetentionPeriod = backupRetentionPeriod
        self.caCertificateIdentifier = caCertificateIdentifier
        self.certificateRotationRestart = certificateRotationRestart
        self.cloudwatchLogsExportConfiguration = cloudwatchLogsExportConfiguration
        self.copyTagsToSnapshot = copyTagsToSnapshot
        self.dbInstanceClass = dbInstanceClass
        self.dbInstanceIdentifier = dbInstanceIdentifier
        self.dbParameterGroupName = dbParameterGroupName
        self.dbPortNumber = dbPortNumber
        self.dbSecurityGroups = dbSecurityGroups
        self.dbSubnetGroupName = dbSubnetGroupName
        self.dedicatedLogVolume = dedicatedLogVolume
        self.deletionProtection = deletionProtection
        self.disableDomain = disableDomain
        self.domain = domain
        self.domainAuthSecretArn = domainAuthSecretArn
        self.domainDnsIps = domainDnsIps
        self.domainFqdn = domainFqdn
        self.domainIAMRoleName = domainIAMRoleName
        self.domainOu = domainOu
        self.enableCustomerOwnedIp = enableCustomerOwnedIp
        self.enableIAMDatabaseAuthentication = enableIAMDatabaseAuthentication
        self.enablePerformanceInsights = enablePerformanceInsights
        self.engine = engine
        self.engineVersion = engineVersion
        self.iops = iops
        self.licenseModel = licenseModel
        self.manageMasterUserPassword = manageMasterUserPassword
        self.masterUserPassword = masterUserPassword
        self.masterUserSecretKmsKeyId = masterUserSecretKmsKeyId
        self.maxAllocatedStorage = maxAllocatedStorage
        self.monitoringInterval = monitoringInterval
        self.monitoringRoleArn = monitoringRoleArn
        self.multiAZ = multiAZ
        self.multiTenant = multiTenant
        self.networkType = networkType
        self.newDBInstanceIdentifier = newDBInstanceIdentifier
        self.optionGroupName = optionGroupName
        self.performanceInsightsKMSKeyId = performanceInsightsKMSKeyId
        self.performanceInsightsRetentionPeriod = performanceInsightsRetentionPeriod
        self.preferredBackupWindow = preferredBackupWindow
        self.preferredMaintenanceWindow = preferredMaintenanceWindow
        self.processorFeatures = processorFeatures
        self.promotionTier = promotionTier
        self.publiclyAccessible = publiclyAccessible
        self.replicaMode = replicaMode
        self.resumeFullAutomationModeMinutes = resumeFullAutomationModeMinutes
        self.rotateMasterUserPassword = rotateMasterUserPassword
        self.storageThroughput = storageThroughput
        self.storageType = storageType
        self.tdeCredentialArn = tdeCredentialArn
        self.tdeCredentialPassword = tdeCredentialPassword
        self.useDefaultProcessorFeatures = useDefaultProcessorFeatures
        self.vpcSecurityGroupIds = vpcSecurityGroupIds
    }
}

extension ModifyDBInstanceOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<ModifyDBInstanceOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["ModifyDBInstanceResult"]
            var value = ModifyDBInstanceOutput()
            value.dbInstance = try reader["DBInstance"].readIfPresent(readingClosure: RDSClientTypes.DBInstance.readingClosure)
            return value
        }
    }
}

public struct ModifyDBInstanceOutput: Swift.Equatable {
    /// Contains the details of an Amazon RDS DB instance. This data type is used as a response element in the operations CreateDBInstance, CreateDBInstanceReadReplica, DeleteDBInstance, DescribeDBInstances, ModifyDBInstance, PromoteReadReplica, RebootDBInstance, RestoreDBInstanceFromDBSnapshot, RestoreDBInstanceFromS3, RestoreDBInstanceToPointInTime, StartDBInstance, and StopDBInstance.
    public var dbInstance: RDSClientTypes.DBInstance?

    public init(
        dbInstance: RDSClientTypes.DBInstance? = nil
    )
    {
        self.dbInstance = dbInstance
    }
}

enum ModifyDBInstanceOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "AuthorizationNotFound": return try await AuthorizationNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "BackupPolicyNotFoundFault": return try await BackupPolicyNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "CertificateNotFound": return try await CertificateNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "DBInstanceAlreadyExists": return try await DBInstanceAlreadyExistsFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "DBInstanceNotFound": return try await DBInstanceNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "DBParameterGroupNotFound": return try await DBParameterGroupNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "DBSecurityGroupNotFound": return try await DBSecurityGroupNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "DBUpgradeDependencyFailure": return try await DBUpgradeDependencyFailureFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "DomainNotFoundFault": return try await DomainNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "InsufficientDBInstanceCapacity": return try await InsufficientDBInstanceCapacityFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "InvalidDBClusterStateFault": return try await InvalidDBClusterStateFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "InvalidDBInstanceState": return try await InvalidDBInstanceStateFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "InvalidDBSecurityGroupState": return try await InvalidDBSecurityGroupStateFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "InvalidVPCNetworkStateFault": return try await InvalidVPCNetworkStateFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "KMSKeyNotAccessibleFault": return try await KMSKeyNotAccessibleFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "NetworkTypeNotSupported": return try await NetworkTypeNotSupported.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "OptionGroupNotFoundFault": return try await OptionGroupNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "ProvisionedIopsNotAvailableInAZFault": return try await ProvisionedIopsNotAvailableInAZFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "StorageQuotaExceeded": return try await StorageQuotaExceededFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "StorageTypeNotSupported": return try await StorageTypeNotSupportedFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "TenantDatabaseQuotaExceeded": return try await TenantDatabaseQuotaExceededFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension ModifyDBParameterGroupInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dbParameterGroupName = "DBParameterGroupName"
        case parameters = "Parameters"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let dbParameterGroupName = dbParameterGroupName {
            try container.encode(dbParameterGroupName, forKey: ClientRuntime.Key("DBParameterGroupName"))
        }
        if let parameters = parameters {
            if !parameters.isEmpty {
                var parametersContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Parameters"))
                for (index0, parameter0) in parameters.enumerated() {
                    try parametersContainer.encode(parameter0, forKey: ClientRuntime.Key("Parameter.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var parametersContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Parameters"))
                try parametersContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        try container.encode("ModifyDBParameterGroup", forKey:ClientRuntime.Key("Action"))
        try container.encode("2014-10-31", forKey:ClientRuntime.Key("Version"))
    }
}

extension ModifyDBParameterGroupInput {

    static func urlPathProvider(_ value: ModifyDBParameterGroupInput) -> Swift.String? {
        return "/"
    }
}

///
public struct ModifyDBParameterGroupInput: Swift.Equatable {
    /// The name of the DB parameter group. Constraints:
    ///
    /// * If supplied, must match the name of an existing DBParameterGroup.
    /// This member is required.
    public var dbParameterGroupName: Swift.String?
    /// An array of parameter names, values, and the application methods for the parameter update. At least one parameter name, value, and application method must be supplied; later arguments are optional. A maximum of 20 parameters can be modified in a single request. Valid Values (for the application method): immediate | pending-reboot You can use the immediate value with dynamic parameters only. You can use the pending-reboot value for both dynamic and static parameters. When the application method is immediate, changes to dynamic parameters are applied immediately to the DB instances associated with the parameter group. When the application method is pending-reboot, changes to dynamic and static parameters are applied after a reboot without failover to the DB instances associated with the parameter group. You can't use pending-reboot with dynamic parameters on RDS for SQL Server DB instances. Use immediate. For more information on modifying DB parameters, see [Working with DB parameter groups](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_WorkingWithParamGroups.html) in the Amazon RDS User Guide.
    /// This member is required.
    public var parameters: [RDSClientTypes.Parameter]?

    public init(
        dbParameterGroupName: Swift.String? = nil,
        parameters: [RDSClientTypes.Parameter]? = nil
    )
    {
        self.dbParameterGroupName = dbParameterGroupName
        self.parameters = parameters
    }
}

extension ModifyDBParameterGroupOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<ModifyDBParameterGroupOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["ModifyDBParameterGroupResult"]
            var value = ModifyDBParameterGroupOutput()
            value.dbParameterGroupName = try reader["DBParameterGroupName"].readIfPresent()
            return value
        }
    }
}

/// Contains the result of a successful invocation of the ModifyDBParameterGroup or ResetDBParameterGroup operation.
public struct ModifyDBParameterGroupOutput: Swift.Equatable {
    /// The name of the DB parameter group.
    public var dbParameterGroupName: Swift.String?

    public init(
        dbParameterGroupName: Swift.String? = nil
    )
    {
        self.dbParameterGroupName = dbParameterGroupName
    }
}

enum ModifyDBParameterGroupOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "DBParameterGroupNotFound": return try await DBParameterGroupNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "InvalidDBParameterGroupState": return try await InvalidDBParameterGroupStateFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension ModifyDBProxyEndpointInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dbProxyEndpointName = "DBProxyEndpointName"
        case newDBProxyEndpointName = "NewDBProxyEndpointName"
        case vpcSecurityGroupIds = "VpcSecurityGroupIds"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let dbProxyEndpointName = dbProxyEndpointName {
            try container.encode(dbProxyEndpointName, forKey: ClientRuntime.Key("DBProxyEndpointName"))
        }
        if let newDBProxyEndpointName = newDBProxyEndpointName {
            try container.encode(newDBProxyEndpointName, forKey: ClientRuntime.Key("NewDBProxyEndpointName"))
        }
        if let vpcSecurityGroupIds = vpcSecurityGroupIds {
            if !vpcSecurityGroupIds.isEmpty {
                var vpcSecurityGroupIdsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("VpcSecurityGroupIds"))
                for (index0, string0) in vpcSecurityGroupIds.enumerated() {
                    try vpcSecurityGroupIdsContainer.encode(string0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var vpcSecurityGroupIdsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("VpcSecurityGroupIds"))
                try vpcSecurityGroupIdsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        try container.encode("ModifyDBProxyEndpoint", forKey:ClientRuntime.Key("Action"))
        try container.encode("2014-10-31", forKey:ClientRuntime.Key("Version"))
    }
}

extension ModifyDBProxyEndpointInput {

    static func urlPathProvider(_ value: ModifyDBProxyEndpointInput) -> Swift.String? {
        return "/"
    }
}

public struct ModifyDBProxyEndpointInput: Swift.Equatable {
    /// The name of the DB proxy sociated with the DB proxy endpoint that you want to modify.
    /// This member is required.
    public var dbProxyEndpointName: Swift.String?
    /// The new identifier for the DBProxyEndpoint. An identifier must begin with a letter and must contain only ASCII letters, digits, and hyphens; it can't end with a hyphen or contain two consecutive hyphens.
    public var newDBProxyEndpointName: Swift.String?
    /// The VPC security group IDs for the DB proxy endpoint. When the DB proxy endpoint uses a different VPC than the original proxy, you also specify a different set of security group IDs than for the original proxy.
    public var vpcSecurityGroupIds: [Swift.String]?

    public init(
        dbProxyEndpointName: Swift.String? = nil,
        newDBProxyEndpointName: Swift.String? = nil,
        vpcSecurityGroupIds: [Swift.String]? = nil
    )
    {
        self.dbProxyEndpointName = dbProxyEndpointName
        self.newDBProxyEndpointName = newDBProxyEndpointName
        self.vpcSecurityGroupIds = vpcSecurityGroupIds
    }
}

extension ModifyDBProxyEndpointOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<ModifyDBProxyEndpointOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["ModifyDBProxyEndpointResult"]
            var value = ModifyDBProxyEndpointOutput()
            value.dbProxyEndpoint = try reader["DBProxyEndpoint"].readIfPresent(readingClosure: RDSClientTypes.DBProxyEndpoint.readingClosure)
            return value
        }
    }
}

public struct ModifyDBProxyEndpointOutput: Swift.Equatable {
    /// The DBProxyEndpoint object representing the new settings for the DB proxy endpoint.
    public var dbProxyEndpoint: RDSClientTypes.DBProxyEndpoint?

    public init(
        dbProxyEndpoint: RDSClientTypes.DBProxyEndpoint? = nil
    )
    {
        self.dbProxyEndpoint = dbProxyEndpoint
    }
}

enum ModifyDBProxyEndpointOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "DBProxyEndpointAlreadyExistsFault": return try await DBProxyEndpointAlreadyExistsFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "DBProxyEndpointNotFoundFault": return try await DBProxyEndpointNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "InvalidDBProxyEndpointStateFault": return try await InvalidDBProxyEndpointStateFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "InvalidDBProxyStateFault": return try await InvalidDBProxyStateFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension ModifyDBProxyInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case auth = "Auth"
        case dbProxyName = "DBProxyName"
        case debugLogging = "DebugLogging"
        case idleClientTimeout = "IdleClientTimeout"
        case newDBProxyName = "NewDBProxyName"
        case requireTLS = "RequireTLS"
        case roleArn = "RoleArn"
        case securityGroups = "SecurityGroups"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let auth = auth {
            if !auth.isEmpty {
                var authContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Auth"))
                for (index0, userauthconfig0) in auth.enumerated() {
                    try authContainer.encode(userauthconfig0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var authContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Auth"))
                try authContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let dbProxyName = dbProxyName {
            try container.encode(dbProxyName, forKey: ClientRuntime.Key("DBProxyName"))
        }
        if let debugLogging = debugLogging {
            try container.encode(debugLogging, forKey: ClientRuntime.Key("DebugLogging"))
        }
        if let idleClientTimeout = idleClientTimeout {
            try container.encode(idleClientTimeout, forKey: ClientRuntime.Key("IdleClientTimeout"))
        }
        if let newDBProxyName = newDBProxyName {
            try container.encode(newDBProxyName, forKey: ClientRuntime.Key("NewDBProxyName"))
        }
        if let requireTLS = requireTLS {
            try container.encode(requireTLS, forKey: ClientRuntime.Key("RequireTLS"))
        }
        if let roleArn = roleArn {
            try container.encode(roleArn, forKey: ClientRuntime.Key("RoleArn"))
        }
        if let securityGroups = securityGroups {
            if !securityGroups.isEmpty {
                var securityGroupsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("SecurityGroups"))
                for (index0, string0) in securityGroups.enumerated() {
                    try securityGroupsContainer.encode(string0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var securityGroupsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("SecurityGroups"))
                try securityGroupsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        try container.encode("ModifyDBProxy", forKey:ClientRuntime.Key("Action"))
        try container.encode("2014-10-31", forKey:ClientRuntime.Key("Version"))
    }
}

extension ModifyDBProxyInput {

    static func urlPathProvider(_ value: ModifyDBProxyInput) -> Swift.String? {
        return "/"
    }
}

public struct ModifyDBProxyInput: Swift.Equatable {
    /// The new authentication settings for the DBProxy.
    public var auth: [RDSClientTypes.UserAuthConfig]?
    /// The identifier for the DBProxy to modify.
    /// This member is required.
    public var dbProxyName: Swift.String?
    /// Whether the proxy includes detailed information about SQL statements in its logs. This information helps you to debug issues involving SQL behavior or the performance and scalability of the proxy connections. The debug information includes the text of SQL statements that you submit through the proxy. Thus, only enable this setting when needed for debugging, and only when you have security measures in place to safeguard any sensitive information that appears in the logs.
    public var debugLogging: Swift.Bool?
    /// The number of seconds that a connection to the proxy can be inactive before the proxy disconnects it. You can set this value higher or lower than the connection timeout limit for the associated database.
    public var idleClientTimeout: Swift.Int?
    /// The new identifier for the DBProxy. An identifier must begin with a letter and must contain only ASCII letters, digits, and hyphens; it can't end with a hyphen or contain two consecutive hyphens.
    public var newDBProxyName: Swift.String?
    /// Whether Transport Layer Security (TLS) encryption is required for connections to the proxy. By enabling this setting, you can enforce encrypted TLS connections to the proxy, even if the associated database doesn't use TLS.
    public var requireTLS: Swift.Bool?
    /// The Amazon Resource Name (ARN) of the IAM role that the proxy uses to access secrets in Amazon Web Services Secrets Manager.
    public var roleArn: Swift.String?
    /// The new list of security groups for the DBProxy.
    public var securityGroups: [Swift.String]?

    public init(
        auth: [RDSClientTypes.UserAuthConfig]? = nil,
        dbProxyName: Swift.String? = nil,
        debugLogging: Swift.Bool? = nil,
        idleClientTimeout: Swift.Int? = nil,
        newDBProxyName: Swift.String? = nil,
        requireTLS: Swift.Bool? = nil,
        roleArn: Swift.String? = nil,
        securityGroups: [Swift.String]? = nil
    )
    {
        self.auth = auth
        self.dbProxyName = dbProxyName
        self.debugLogging = debugLogging
        self.idleClientTimeout = idleClientTimeout
        self.newDBProxyName = newDBProxyName
        self.requireTLS = requireTLS
        self.roleArn = roleArn
        self.securityGroups = securityGroups
    }
}

extension ModifyDBProxyOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<ModifyDBProxyOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["ModifyDBProxyResult"]
            var value = ModifyDBProxyOutput()
            value.dbProxy = try reader["DBProxy"].readIfPresent(readingClosure: RDSClientTypes.DBProxy.readingClosure)
            return value
        }
    }
}

public struct ModifyDBProxyOutput: Swift.Equatable {
    /// The DBProxy object representing the new settings for the proxy.
    public var dbProxy: RDSClientTypes.DBProxy?

    public init(
        dbProxy: RDSClientTypes.DBProxy? = nil
    )
    {
        self.dbProxy = dbProxy
    }
}

enum ModifyDBProxyOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "DBProxyAlreadyExistsFault": return try await DBProxyAlreadyExistsFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "DBProxyNotFoundFault": return try await DBProxyNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "InvalidDBProxyStateFault": return try await InvalidDBProxyStateFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension ModifyDBProxyTargetGroupInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case connectionPoolConfig = "ConnectionPoolConfig"
        case dbProxyName = "DBProxyName"
        case newName = "NewName"
        case targetGroupName = "TargetGroupName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let connectionPoolConfig = connectionPoolConfig {
            try container.encode(connectionPoolConfig, forKey: ClientRuntime.Key("ConnectionPoolConfig"))
        }
        if let dbProxyName = dbProxyName {
            try container.encode(dbProxyName, forKey: ClientRuntime.Key("DBProxyName"))
        }
        if let newName = newName {
            try container.encode(newName, forKey: ClientRuntime.Key("NewName"))
        }
        if let targetGroupName = targetGroupName {
            try container.encode(targetGroupName, forKey: ClientRuntime.Key("TargetGroupName"))
        }
        try container.encode("ModifyDBProxyTargetGroup", forKey:ClientRuntime.Key("Action"))
        try container.encode("2014-10-31", forKey:ClientRuntime.Key("Version"))
    }
}

extension ModifyDBProxyTargetGroupInput {

    static func urlPathProvider(_ value: ModifyDBProxyTargetGroupInput) -> Swift.String? {
        return "/"
    }
}

public struct ModifyDBProxyTargetGroupInput: Swift.Equatable {
    /// The settings that determine the size and behavior of the connection pool for the target group.
    public var connectionPoolConfig: RDSClientTypes.ConnectionPoolConfiguration?
    /// The name of the proxy.
    /// This member is required.
    public var dbProxyName: Swift.String?
    /// The new name for the modified DBProxyTarget. An identifier must begin with a letter and must contain only ASCII letters, digits, and hyphens; it can't end with a hyphen or contain two consecutive hyphens.
    public var newName: Swift.String?
    /// The name of the target group to modify.
    /// This member is required.
    public var targetGroupName: Swift.String?

    public init(
        connectionPoolConfig: RDSClientTypes.ConnectionPoolConfiguration? = nil,
        dbProxyName: Swift.String? = nil,
        newName: Swift.String? = nil,
        targetGroupName: Swift.String? = nil
    )
    {
        self.connectionPoolConfig = connectionPoolConfig
        self.dbProxyName = dbProxyName
        self.newName = newName
        self.targetGroupName = targetGroupName
    }
}

extension ModifyDBProxyTargetGroupOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<ModifyDBProxyTargetGroupOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["ModifyDBProxyTargetGroupResult"]
            var value = ModifyDBProxyTargetGroupOutput()
            value.dbProxyTargetGroup = try reader["DBProxyTargetGroup"].readIfPresent(readingClosure: RDSClientTypes.DBProxyTargetGroup.readingClosure)
            return value
        }
    }
}

public struct ModifyDBProxyTargetGroupOutput: Swift.Equatable {
    /// The settings of the modified DBProxyTarget.
    public var dbProxyTargetGroup: RDSClientTypes.DBProxyTargetGroup?

    public init(
        dbProxyTargetGroup: RDSClientTypes.DBProxyTargetGroup? = nil
    )
    {
        self.dbProxyTargetGroup = dbProxyTargetGroup
    }
}

enum ModifyDBProxyTargetGroupOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "DBProxyNotFoundFault": return try await DBProxyNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "DBProxyTargetGroupNotFoundFault": return try await DBProxyTargetGroupNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "InvalidDBProxyStateFault": return try await InvalidDBProxyStateFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension ModifyDBRecommendationInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case locale = "Locale"
        case recommendationId = "RecommendationId"
        case recommendedActionUpdates = "RecommendedActionUpdates"
        case status = "Status"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let locale = locale {
            try container.encode(locale, forKey: ClientRuntime.Key("Locale"))
        }
        if let recommendationId = recommendationId {
            try container.encode(recommendationId, forKey: ClientRuntime.Key("RecommendationId"))
        }
        if let recommendedActionUpdates = recommendedActionUpdates {
            if !recommendedActionUpdates.isEmpty {
                var recommendedActionUpdatesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("RecommendedActionUpdates"))
                for (index0, recommendedactionupdate0) in recommendedActionUpdates.enumerated() {
                    try recommendedActionUpdatesContainer.encode(recommendedactionupdate0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var recommendedActionUpdatesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("RecommendedActionUpdates"))
                try recommendedActionUpdatesContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let status = status {
            try container.encode(status, forKey: ClientRuntime.Key("Status"))
        }
        try container.encode("ModifyDBRecommendation", forKey:ClientRuntime.Key("Action"))
        try container.encode("2014-10-31", forKey:ClientRuntime.Key("Version"))
    }
}

extension ModifyDBRecommendationInput {

    static func urlPathProvider(_ value: ModifyDBRecommendationInput) -> Swift.String? {
        return "/"
    }
}

public struct ModifyDBRecommendationInput: Swift.Equatable {
    /// The language of the modified recommendation.
    public var locale: Swift.String?
    /// The identifier of the recommendation to update.
    /// This member is required.
    public var recommendationId: Swift.String?
    /// The list of recommended action status to update. You can update multiple recommended actions at one time.
    public var recommendedActionUpdates: [RDSClientTypes.RecommendedActionUpdate]?
    /// The recommendation status to update. Valid values:
    ///
    /// * active
    ///
    /// * dismissed
    public var status: Swift.String?

    public init(
        locale: Swift.String? = nil,
        recommendationId: Swift.String? = nil,
        recommendedActionUpdates: [RDSClientTypes.RecommendedActionUpdate]? = nil,
        status: Swift.String? = nil
    )
    {
        self.locale = locale
        self.recommendationId = recommendationId
        self.recommendedActionUpdates = recommendedActionUpdates
        self.status = status
    }
}

extension ModifyDBRecommendationOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<ModifyDBRecommendationOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["ModifyDBRecommendationResult"]
            var value = ModifyDBRecommendationOutput()
            value.dbRecommendation = try reader["DBRecommendation"].readIfPresent(readingClosure: RDSClientTypes.DBRecommendation.readingClosure)
            return value
        }
    }
}

public struct ModifyDBRecommendationOutput: Swift.Equatable {
    /// The recommendation for your DB instances, DB clusters, and DB parameter groups.
    public var dbRecommendation: RDSClientTypes.DBRecommendation?

    public init(
        dbRecommendation: RDSClientTypes.DBRecommendation? = nil
    )
    {
        self.dbRecommendation = dbRecommendation
    }
}

enum ModifyDBRecommendationOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension ModifyDBShardGroupInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dbShardGroupIdentifier = "DBShardGroupIdentifier"
        case maxACU = "MaxACU"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let dbShardGroupIdentifier = dbShardGroupIdentifier {
            try container.encode(dbShardGroupIdentifier, forKey: ClientRuntime.Key("DBShardGroupIdentifier"))
        }
        if let maxACU = maxACU {
            try container.encode(maxACU, forKey: ClientRuntime.Key("MaxACU"))
        }
        try container.encode("ModifyDBShardGroup", forKey:ClientRuntime.Key("Action"))
        try container.encode("2014-10-31", forKey:ClientRuntime.Key("Version"))
    }
}

extension ModifyDBShardGroupInput {

    static func urlPathProvider(_ value: ModifyDBShardGroupInput) -> Swift.String? {
        return "/"
    }
}

public struct ModifyDBShardGroupInput: Swift.Equatable {
    /// The name of the DB shard group to modify.
    /// This member is required.
    public var dbShardGroupIdentifier: Swift.String?
    /// The maximum capacity of the DB shard group in Aurora capacity units (ACUs).
    public var maxACU: Swift.Double?

    public init(
        dbShardGroupIdentifier: Swift.String? = nil,
        maxACU: Swift.Double? = nil
    )
    {
        self.dbShardGroupIdentifier = dbShardGroupIdentifier
        self.maxACU = maxACU
    }
}

extension ModifyDBShardGroupOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<ModifyDBShardGroupOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["ModifyDBShardGroupResult"]
            var value = ModifyDBShardGroupOutput()
            value.computeRedundancy = try reader["ComputeRedundancy"].readIfPresent()
            value.dbClusterIdentifier = try reader["DBClusterIdentifier"].readIfPresent()
            value.dbShardGroupIdentifier = try reader["DBShardGroupIdentifier"].readIfPresent()
            value.dbShardGroupResourceId = try reader["DBShardGroupResourceId"].readIfPresent()
            value.endpoint = try reader["Endpoint"].readIfPresent()
            value.maxACU = try reader["MaxACU"].readIfPresent()
            value.publiclyAccessible = try reader["PubliclyAccessible"].readIfPresent()
            value.status = try reader["Status"].readIfPresent()
            return value
        }
    }
}

public struct ModifyDBShardGroupOutput: Swift.Equatable {
    /// Specifies whether to create standby instances for the DB shard group. Valid values are the following:
    ///
    /// * 0 - Creates a single, primary DB instance for each physical shard. This is the default value, and the only one supported for the preview.
    ///
    /// * 1 - Creates a primary DB instance and a standby instance in a different Availability Zone (AZ) for each physical shard.
    ///
    /// * 2 - Creates a primary DB instance and two standby instances in different AZs for each physical shard.
    public var computeRedundancy: Swift.Int?
    /// The name of the primary DB cluster for the DB shard group.
    public var dbClusterIdentifier: Swift.String?
    /// The name of the DB shard group.
    public var dbShardGroupIdentifier: Swift.String?
    /// The Amazon Web Services Region-unique, immutable identifier for the DB shard group.
    public var dbShardGroupResourceId: Swift.String?
    /// The connection endpoint for the DB shard group.
    public var endpoint: Swift.String?
    /// The maximum capacity of the DB shard group in Aurora capacity units (ACUs).
    public var maxACU: Swift.Double?
    /// Indicates whether the DB shard group is publicly accessible. When the DB shard group is publicly accessible, its Domain Name System (DNS) endpoint resolves to the private IP address from within the DB shard group's virtual private cloud (VPC). It resolves to the public IP address from outside of the DB shard group's VPC. Access to the DB shard group is ultimately controlled by the security group it uses. That public access isn't permitted if the security group assigned to the DB shard group doesn't permit it. When the DB shard group isn't publicly accessible, it is an internal DB shard group with a DNS name that resolves to a private IP address. For more information, see [CreateDBShardGroup]. This setting is only for Aurora Limitless Database.
    public var publiclyAccessible: Swift.Bool?
    /// The status of the DB shard group.
    public var status: Swift.String?

    public init(
        computeRedundancy: Swift.Int? = nil,
        dbClusterIdentifier: Swift.String? = nil,
        dbShardGroupIdentifier: Swift.String? = nil,
        dbShardGroupResourceId: Swift.String? = nil,
        endpoint: Swift.String? = nil,
        maxACU: Swift.Double? = nil,
        publiclyAccessible: Swift.Bool? = nil,
        status: Swift.String? = nil
    )
    {
        self.computeRedundancy = computeRedundancy
        self.dbClusterIdentifier = dbClusterIdentifier
        self.dbShardGroupIdentifier = dbShardGroupIdentifier
        self.dbShardGroupResourceId = dbShardGroupResourceId
        self.endpoint = endpoint
        self.maxACU = maxACU
        self.publiclyAccessible = publiclyAccessible
        self.status = status
    }
}

enum ModifyDBShardGroupOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "DBShardGroupAlreadyExists": return try await DBShardGroupAlreadyExistsFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "DBShardGroupNotFound": return try await DBShardGroupNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "InvalidDBClusterStateFault": return try await InvalidDBClusterStateFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "InvalidMaxAcu": return try await InvalidMaxAcuFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension ModifyDBSnapshotAttributeInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case attributeName = "AttributeName"
        case dbSnapshotIdentifier = "DBSnapshotIdentifier"
        case valuesToAdd = "ValuesToAdd"
        case valuesToRemove = "ValuesToRemove"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let attributeName = attributeName {
            try container.encode(attributeName, forKey: ClientRuntime.Key("AttributeName"))
        }
        if let dbSnapshotIdentifier = dbSnapshotIdentifier {
            try container.encode(dbSnapshotIdentifier, forKey: ClientRuntime.Key("DBSnapshotIdentifier"))
        }
        if let valuesToAdd = valuesToAdd {
            if !valuesToAdd.isEmpty {
                var valuesToAddContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("ValuesToAdd"))
                for (index0, string0) in valuesToAdd.enumerated() {
                    try valuesToAddContainer.encode(string0, forKey: ClientRuntime.Key("AttributeValue.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var valuesToAddContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("ValuesToAdd"))
                try valuesToAddContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let valuesToRemove = valuesToRemove {
            if !valuesToRemove.isEmpty {
                var valuesToRemoveContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("ValuesToRemove"))
                for (index0, string0) in valuesToRemove.enumerated() {
                    try valuesToRemoveContainer.encode(string0, forKey: ClientRuntime.Key("AttributeValue.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var valuesToRemoveContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("ValuesToRemove"))
                try valuesToRemoveContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        try container.encode("ModifyDBSnapshotAttribute", forKey:ClientRuntime.Key("Action"))
        try container.encode("2014-10-31", forKey:ClientRuntime.Key("Version"))
    }
}

extension ModifyDBSnapshotAttributeInput {

    static func urlPathProvider(_ value: ModifyDBSnapshotAttributeInput) -> Swift.String? {
        return "/"
    }
}

///
public struct ModifyDBSnapshotAttributeInput: Swift.Equatable {
    /// The name of the DB snapshot attribute to modify. To manage authorization for other Amazon Web Services accounts to copy or restore a manual DB snapshot, set this value to restore. To view the list of attributes available to modify, use the [DescribeDBSnapshotAttributes] API operation.
    /// This member is required.
    public var attributeName: Swift.String?
    /// The identifier for the DB snapshot to modify the attributes for.
    /// This member is required.
    public var dbSnapshotIdentifier: Swift.String?
    /// A list of DB snapshot attributes to add to the attribute specified by AttributeName. To authorize other Amazon Web Services accounts to copy or restore a manual snapshot, set this list to include one or more Amazon Web Services account IDs, or all to make the manual DB snapshot restorable by any Amazon Web Services account. Do not add the all value for any manual DB snapshots that contain private information that you don't want available to all Amazon Web Services accounts.
    public var valuesToAdd: [Swift.String]?
    /// A list of DB snapshot attributes to remove from the attribute specified by AttributeName. To remove authorization for other Amazon Web Services accounts to copy or restore a manual snapshot, set this list to include one or more Amazon Web Services account identifiers, or all to remove authorization for any Amazon Web Services account to copy or restore the DB snapshot. If you specify all, an Amazon Web Services account whose account ID is explicitly added to the restore attribute can still copy or restore the manual DB snapshot.
    public var valuesToRemove: [Swift.String]?

    public init(
        attributeName: Swift.String? = nil,
        dbSnapshotIdentifier: Swift.String? = nil,
        valuesToAdd: [Swift.String]? = nil,
        valuesToRemove: [Swift.String]? = nil
    )
    {
        self.attributeName = attributeName
        self.dbSnapshotIdentifier = dbSnapshotIdentifier
        self.valuesToAdd = valuesToAdd
        self.valuesToRemove = valuesToRemove
    }
}

extension ModifyDBSnapshotAttributeOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<ModifyDBSnapshotAttributeOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["ModifyDBSnapshotAttributeResult"]
            var value = ModifyDBSnapshotAttributeOutput()
            value.dbSnapshotAttributesResult = try reader["DBSnapshotAttributesResult"].readIfPresent(readingClosure: RDSClientTypes.DBSnapshotAttributesResult.readingClosure)
            return value
        }
    }
}

public struct ModifyDBSnapshotAttributeOutput: Swift.Equatable {
    /// Contains the results of a successful call to the DescribeDBSnapshotAttributes API action. Manual DB snapshot attributes are used to authorize other Amazon Web Services accounts to copy or restore a manual DB snapshot. For more information, see the ModifyDBSnapshotAttribute API action.
    public var dbSnapshotAttributesResult: RDSClientTypes.DBSnapshotAttributesResult?

    public init(
        dbSnapshotAttributesResult: RDSClientTypes.DBSnapshotAttributesResult? = nil
    )
    {
        self.dbSnapshotAttributesResult = dbSnapshotAttributesResult
    }
}

enum ModifyDBSnapshotAttributeOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "DBSnapshotNotFound": return try await DBSnapshotNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "InvalidDBSnapshotState": return try await InvalidDBSnapshotStateFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "SharedSnapshotQuotaExceeded": return try await SharedSnapshotQuotaExceededFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension ModifyDBSnapshotInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dbSnapshotIdentifier = "DBSnapshotIdentifier"
        case engineVersion = "EngineVersion"
        case optionGroupName = "OptionGroupName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let dbSnapshotIdentifier = dbSnapshotIdentifier {
            try container.encode(dbSnapshotIdentifier, forKey: ClientRuntime.Key("DBSnapshotIdentifier"))
        }
        if let engineVersion = engineVersion {
            try container.encode(engineVersion, forKey: ClientRuntime.Key("EngineVersion"))
        }
        if let optionGroupName = optionGroupName {
            try container.encode(optionGroupName, forKey: ClientRuntime.Key("OptionGroupName"))
        }
        try container.encode("ModifyDBSnapshot", forKey:ClientRuntime.Key("Action"))
        try container.encode("2014-10-31", forKey:ClientRuntime.Key("Version"))
    }
}

extension ModifyDBSnapshotInput {

    static func urlPathProvider(_ value: ModifyDBSnapshotInput) -> Swift.String? {
        return "/"
    }
}

public struct ModifyDBSnapshotInput: Swift.Equatable {
    /// The identifier of the DB snapshot to modify.
    /// This member is required.
    public var dbSnapshotIdentifier: Swift.String?
    /// The engine version to upgrade the DB snapshot to. The following are the database engines and engine versions that are available when you upgrade a DB snapshot. MySQL For the list of engine versions that are available for upgrading a DB snapshot, see [ Upgrading a MySQL DB snapshot engine version](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/mysql-upgrade-snapshot.html) in the Amazon RDS User Guide. Oracle
    ///
    /// * 19.0.0.0.ru-2022-01.rur-2022-01.r1 (supported for 12.2.0.1 DB snapshots)
    ///
    /// * 19.0.0.0.ru-2022-07.rur-2022-07.r1 (supported for 12.1.0.2 DB snapshots)
    ///
    /// * 12.1.0.2.v8 (supported for 12.1.0.1 DB snapshots)
    ///
    /// * 11.2.0.4.v12 (supported for 11.2.0.2 DB snapshots)
    ///
    /// * 11.2.0.4.v11 (supported for 11.2.0.3 DB snapshots)
    ///
    ///
    /// PostgreSQL For the list of engine versions that are available for upgrading a DB snapshot, see [ Upgrading a PostgreSQL DB snapshot engine version](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_UpgradeDBSnapshot.PostgreSQL.html) in the Amazon RDS User Guide.
    public var engineVersion: Swift.String?
    /// The option group to identify with the upgraded DB snapshot. You can specify this parameter when you upgrade an Oracle DB snapshot. The same option group considerations apply when upgrading a DB snapshot as when upgrading a DB instance. For more information, see [Option group considerations](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_UpgradeDBInstance.Oracle.html#USER_UpgradeDBInstance.Oracle.OGPG.OG) in the Amazon RDS User Guide.
    public var optionGroupName: Swift.String?

    public init(
        dbSnapshotIdentifier: Swift.String? = nil,
        engineVersion: Swift.String? = nil,
        optionGroupName: Swift.String? = nil
    )
    {
        self.dbSnapshotIdentifier = dbSnapshotIdentifier
        self.engineVersion = engineVersion
        self.optionGroupName = optionGroupName
    }
}

extension ModifyDBSnapshotOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<ModifyDBSnapshotOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["ModifyDBSnapshotResult"]
            var value = ModifyDBSnapshotOutput()
            value.dbSnapshot = try reader["DBSnapshot"].readIfPresent(readingClosure: RDSClientTypes.DBSnapshot.readingClosure)
            return value
        }
    }
}

public struct ModifyDBSnapshotOutput: Swift.Equatable {
    /// Contains the details of an Amazon RDS DB snapshot. This data type is used as a response element in the DescribeDBSnapshots action.
    public var dbSnapshot: RDSClientTypes.DBSnapshot?

    public init(
        dbSnapshot: RDSClientTypes.DBSnapshot? = nil
    )
    {
        self.dbSnapshot = dbSnapshot
    }
}

enum ModifyDBSnapshotOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "DBSnapshotNotFound": return try await DBSnapshotNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension ModifyDBSubnetGroupInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dbSubnetGroupDescription = "DBSubnetGroupDescription"
        case dbSubnetGroupName = "DBSubnetGroupName"
        case subnetIds = "SubnetIds"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let dbSubnetGroupDescription = dbSubnetGroupDescription {
            try container.encode(dbSubnetGroupDescription, forKey: ClientRuntime.Key("DBSubnetGroupDescription"))
        }
        if let dbSubnetGroupName = dbSubnetGroupName {
            try container.encode(dbSubnetGroupName, forKey: ClientRuntime.Key("DBSubnetGroupName"))
        }
        if let subnetIds = subnetIds {
            if !subnetIds.isEmpty {
                var subnetIdsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("SubnetIds"))
                for (index0, string0) in subnetIds.enumerated() {
                    try subnetIdsContainer.encode(string0, forKey: ClientRuntime.Key("SubnetIdentifier.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var subnetIdsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("SubnetIds"))
                try subnetIdsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        try container.encode("ModifyDBSubnetGroup", forKey:ClientRuntime.Key("Action"))
        try container.encode("2014-10-31", forKey:ClientRuntime.Key("Version"))
    }
}

extension ModifyDBSubnetGroupInput {

    static func urlPathProvider(_ value: ModifyDBSubnetGroupInput) -> Swift.String? {
        return "/"
    }
}

///
public struct ModifyDBSubnetGroupInput: Swift.Equatable {
    /// The description for the DB subnet group.
    public var dbSubnetGroupDescription: Swift.String?
    /// The name for the DB subnet group. This value is stored as a lowercase string. You can't modify the default subnet group. Constraints: Must match the name of an existing DBSubnetGroup. Must not be default. Example: mydbsubnetgroup
    /// This member is required.
    public var dbSubnetGroupName: Swift.String?
    /// The EC2 subnet IDs for the DB subnet group.
    /// This member is required.
    public var subnetIds: [Swift.String]?

    public init(
        dbSubnetGroupDescription: Swift.String? = nil,
        dbSubnetGroupName: Swift.String? = nil,
        subnetIds: [Swift.String]? = nil
    )
    {
        self.dbSubnetGroupDescription = dbSubnetGroupDescription
        self.dbSubnetGroupName = dbSubnetGroupName
        self.subnetIds = subnetIds
    }
}

extension ModifyDBSubnetGroupOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<ModifyDBSubnetGroupOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["ModifyDBSubnetGroupResult"]
            var value = ModifyDBSubnetGroupOutput()
            value.dbSubnetGroup = try reader["DBSubnetGroup"].readIfPresent(readingClosure: RDSClientTypes.DBSubnetGroup.readingClosure)
            return value
        }
    }
}

public struct ModifyDBSubnetGroupOutput: Swift.Equatable {
    /// Contains the details of an Amazon RDS DB subnet group. This data type is used as a response element in the DescribeDBSubnetGroups action.
    public var dbSubnetGroup: RDSClientTypes.DBSubnetGroup?

    public init(
        dbSubnetGroup: RDSClientTypes.DBSubnetGroup? = nil
    )
    {
        self.dbSubnetGroup = dbSubnetGroup
    }
}

enum ModifyDBSubnetGroupOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "DBSubnetGroupDoesNotCoverEnoughAZs": return try await DBSubnetGroupDoesNotCoverEnoughAZs.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "DBSubnetGroupNotFoundFault": return try await DBSubnetGroupNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "DBSubnetQuotaExceededFault": return try await DBSubnetQuotaExceededFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "InvalidSubnet": return try await InvalidSubnet.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "SubnetAlreadyInUse": return try await SubnetAlreadyInUse.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension ModifyEventSubscriptionInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case enabled = "Enabled"
        case eventCategories = "EventCategories"
        case snsTopicArn = "SnsTopicArn"
        case sourceType = "SourceType"
        case subscriptionName = "SubscriptionName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let enabled = enabled {
            try container.encode(enabled, forKey: ClientRuntime.Key("Enabled"))
        }
        if let eventCategories = eventCategories {
            if !eventCategories.isEmpty {
                var eventCategoriesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("EventCategories"))
                for (index0, string0) in eventCategories.enumerated() {
                    try eventCategoriesContainer.encode(string0, forKey: ClientRuntime.Key("EventCategory.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var eventCategoriesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("EventCategories"))
                try eventCategoriesContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let snsTopicArn = snsTopicArn {
            try container.encode(snsTopicArn, forKey: ClientRuntime.Key("SnsTopicArn"))
        }
        if let sourceType = sourceType {
            try container.encode(sourceType, forKey: ClientRuntime.Key("SourceType"))
        }
        if let subscriptionName = subscriptionName {
            try container.encode(subscriptionName, forKey: ClientRuntime.Key("SubscriptionName"))
        }
        try container.encode("ModifyEventSubscription", forKey:ClientRuntime.Key("Action"))
        try container.encode("2014-10-31", forKey:ClientRuntime.Key("Version"))
    }
}

extension ModifyEventSubscriptionInput {

    static func urlPathProvider(_ value: ModifyEventSubscriptionInput) -> Swift.String? {
        return "/"
    }
}

///
public struct ModifyEventSubscriptionInput: Swift.Equatable {
    /// Specifies whether to activate the subscription.
    public var enabled: Swift.Bool?
    /// A list of event categories for a source type (SourceType) that you want to subscribe to. You can see a list of the categories for a given source type in [Events](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Events.html) in the Amazon RDS User Guide or by using the DescribeEventCategories operation.
    public var eventCategories: [Swift.String]?
    /// The Amazon Resource Name (ARN) of the SNS topic created for event notification. The ARN is created by Amazon SNS when you create a topic and subscribe to it.
    public var snsTopicArn: Swift.String?
    /// The type of source that is generating the events. For example, if you want to be notified of events generated by a DB instance, you would set this parameter to db-instance. For RDS Proxy events, specify db-proxy. If this value isn't specified, all events are returned. Valid Values: db-instance | db-cluster | db-parameter-group | db-security-group | db-snapshot | db-cluster-snapshot | db-proxy
    public var sourceType: Swift.String?
    /// The name of the RDS event notification subscription.
    /// This member is required.
    public var subscriptionName: Swift.String?

    public init(
        enabled: Swift.Bool? = nil,
        eventCategories: [Swift.String]? = nil,
        snsTopicArn: Swift.String? = nil,
        sourceType: Swift.String? = nil,
        subscriptionName: Swift.String? = nil
    )
    {
        self.enabled = enabled
        self.eventCategories = eventCategories
        self.snsTopicArn = snsTopicArn
        self.sourceType = sourceType
        self.subscriptionName = subscriptionName
    }
}

extension ModifyEventSubscriptionOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<ModifyEventSubscriptionOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["ModifyEventSubscriptionResult"]
            var value = ModifyEventSubscriptionOutput()
            value.eventSubscription = try reader["EventSubscription"].readIfPresent(readingClosure: RDSClientTypes.EventSubscription.readingClosure)
            return value
        }
    }
}

public struct ModifyEventSubscriptionOutput: Swift.Equatable {
    /// Contains the results of a successful invocation of the DescribeEventSubscriptions action.
    public var eventSubscription: RDSClientTypes.EventSubscription?

    public init(
        eventSubscription: RDSClientTypes.EventSubscription? = nil
    )
    {
        self.eventSubscription = eventSubscription
    }
}

enum ModifyEventSubscriptionOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "EventSubscriptionQuotaExceeded": return try await EventSubscriptionQuotaExceededFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "SNSInvalidTopic": return try await SNSInvalidTopicFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "SNSNoAuthorization": return try await SNSNoAuthorizationFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "SNSTopicArnNotFound": return try await SNSTopicArnNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "SubscriptionCategoryNotFound": return try await SubscriptionCategoryNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "SubscriptionNotFound": return try await SubscriptionNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension ModifyGlobalClusterInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case allowMajorVersionUpgrade = "AllowMajorVersionUpgrade"
        case deletionProtection = "DeletionProtection"
        case engineVersion = "EngineVersion"
        case globalClusterIdentifier = "GlobalClusterIdentifier"
        case newGlobalClusterIdentifier = "NewGlobalClusterIdentifier"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let allowMajorVersionUpgrade = allowMajorVersionUpgrade {
            try container.encode(allowMajorVersionUpgrade, forKey: ClientRuntime.Key("AllowMajorVersionUpgrade"))
        }
        if let deletionProtection = deletionProtection {
            try container.encode(deletionProtection, forKey: ClientRuntime.Key("DeletionProtection"))
        }
        if let engineVersion = engineVersion {
            try container.encode(engineVersion, forKey: ClientRuntime.Key("EngineVersion"))
        }
        if let globalClusterIdentifier = globalClusterIdentifier {
            try container.encode(globalClusterIdentifier, forKey: ClientRuntime.Key("GlobalClusterIdentifier"))
        }
        if let newGlobalClusterIdentifier = newGlobalClusterIdentifier {
            try container.encode(newGlobalClusterIdentifier, forKey: ClientRuntime.Key("NewGlobalClusterIdentifier"))
        }
        try container.encode("ModifyGlobalCluster", forKey:ClientRuntime.Key("Action"))
        try container.encode("2014-10-31", forKey:ClientRuntime.Key("Version"))
    }
}

extension ModifyGlobalClusterInput {

    static func urlPathProvider(_ value: ModifyGlobalClusterInput) -> Swift.String? {
        return "/"
    }
}

public struct ModifyGlobalClusterInput: Swift.Equatable {
    /// Specifies whether to allow major version upgrades. Constraints: Must be enabled if you specify a value for the EngineVersion parameter that's a different major version than the global cluster's current version. If you upgrade the major version of a global database, the cluster and DB instance parameter groups are set to the default parameter groups for the new version. Apply any custom parameter groups after completing the upgrade.
    public var allowMajorVersionUpgrade: Swift.Bool?
    /// Specifies whether to enable deletion protection for the global database cluster. The global database cluster can't be deleted when deletion protection is enabled.
    public var deletionProtection: Swift.Bool?
    /// The version number of the database engine to which you want to upgrade. To list all of the available engine versions for aurora-mysql (for MySQL-based Aurora global databases), use the following command: aws rds describe-db-engine-versions --engine aurora-mysql --query '*[]|[?SupportsGlobalDatabases == `true`].[EngineVersion]' To list all of the available engine versions for aurora-postgresql (for PostgreSQL-based Aurora global databases), use the following command: aws rds describe-db-engine-versions --engine aurora-postgresql --query '*[]|[?SupportsGlobalDatabases == `true`].[EngineVersion]'
    public var engineVersion: Swift.String?
    /// The cluster identifier for the global cluster to modify. This parameter isn't case-sensitive. Constraints:
    ///
    /// * Must match the identifier of an existing global database cluster.
    public var globalClusterIdentifier: Swift.String?
    /// The new cluster identifier for the global database cluster. This value is stored as a lowercase string. Constraints:
    ///
    /// * Must contain from 1 to 63 letters, numbers, or hyphens.
    ///
    /// * The first character must be a letter.
    ///
    /// * Can't end with a hyphen or contain two consecutive hyphens.
    ///
    ///
    /// Example: my-cluster2
    public var newGlobalClusterIdentifier: Swift.String?

    public init(
        allowMajorVersionUpgrade: Swift.Bool? = nil,
        deletionProtection: Swift.Bool? = nil,
        engineVersion: Swift.String? = nil,
        globalClusterIdentifier: Swift.String? = nil,
        newGlobalClusterIdentifier: Swift.String? = nil
    )
    {
        self.allowMajorVersionUpgrade = allowMajorVersionUpgrade
        self.deletionProtection = deletionProtection
        self.engineVersion = engineVersion
        self.globalClusterIdentifier = globalClusterIdentifier
        self.newGlobalClusterIdentifier = newGlobalClusterIdentifier
    }
}

extension ModifyGlobalClusterOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<ModifyGlobalClusterOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["ModifyGlobalClusterResult"]
            var value = ModifyGlobalClusterOutput()
            value.globalCluster = try reader["GlobalCluster"].readIfPresent(readingClosure: RDSClientTypes.GlobalCluster.readingClosure)
            return value
        }
    }
}

public struct ModifyGlobalClusterOutput: Swift.Equatable {
    /// A data type representing an Aurora global database.
    public var globalCluster: RDSClientTypes.GlobalCluster?

    public init(
        globalCluster: RDSClientTypes.GlobalCluster? = nil
    )
    {
        self.globalCluster = globalCluster
    }
}

enum ModifyGlobalClusterOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "GlobalClusterNotFoundFault": return try await GlobalClusterNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "InvalidDBClusterStateFault": return try await InvalidDBClusterStateFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "InvalidDBInstanceState": return try await InvalidDBInstanceStateFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "InvalidGlobalClusterStateFault": return try await InvalidGlobalClusterStateFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension ModifyOptionGroupInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case applyImmediately = "ApplyImmediately"
        case optionGroupName = "OptionGroupName"
        case optionsToInclude = "OptionsToInclude"
        case optionsToRemove = "OptionsToRemove"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let applyImmediately = applyImmediately {
            try container.encode(applyImmediately, forKey: ClientRuntime.Key("ApplyImmediately"))
        }
        if let optionGroupName = optionGroupName {
            try container.encode(optionGroupName, forKey: ClientRuntime.Key("OptionGroupName"))
        }
        if let optionsToInclude = optionsToInclude {
            if !optionsToInclude.isEmpty {
                var optionsToIncludeContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("OptionsToInclude"))
                for (index0, optionconfiguration0) in optionsToInclude.enumerated() {
                    try optionsToIncludeContainer.encode(optionconfiguration0, forKey: ClientRuntime.Key("OptionConfiguration.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var optionsToIncludeContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("OptionsToInclude"))
                try optionsToIncludeContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let optionsToRemove = optionsToRemove {
            if !optionsToRemove.isEmpty {
                var optionsToRemoveContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("OptionsToRemove"))
                for (index0, string0) in optionsToRemove.enumerated() {
                    try optionsToRemoveContainer.encode(string0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var optionsToRemoveContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("OptionsToRemove"))
                try optionsToRemoveContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        try container.encode("ModifyOptionGroup", forKey:ClientRuntime.Key("Action"))
        try container.encode("2014-10-31", forKey:ClientRuntime.Key("Version"))
    }
}

extension ModifyOptionGroupInput {

    static func urlPathProvider(_ value: ModifyOptionGroupInput) -> Swift.String? {
        return "/"
    }
}

///
public struct ModifyOptionGroupInput: Swift.Equatable {
    /// Specifies whether to apply the change immediately or during the next maintenance window for each instance associated with the option group.
    public var applyImmediately: Swift.Bool?
    /// The name of the option group to be modified. Permanent options, such as the TDE option for Oracle Advanced Security TDE, can't be removed from an option group, and that option group can't be removed from a DB instance once it is associated with a DB instance
    /// This member is required.
    public var optionGroupName: Swift.String?
    /// Options in this list are added to the option group or, if already present, the specified configuration is used to update the existing configuration.
    public var optionsToInclude: [RDSClientTypes.OptionConfiguration]?
    /// Options in this list are removed from the option group.
    public var optionsToRemove: [Swift.String]?

    public init(
        applyImmediately: Swift.Bool? = nil,
        optionGroupName: Swift.String? = nil,
        optionsToInclude: [RDSClientTypes.OptionConfiguration]? = nil,
        optionsToRemove: [Swift.String]? = nil
    )
    {
        self.applyImmediately = applyImmediately
        self.optionGroupName = optionGroupName
        self.optionsToInclude = optionsToInclude
        self.optionsToRemove = optionsToRemove
    }
}

extension ModifyOptionGroupOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<ModifyOptionGroupOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["ModifyOptionGroupResult"]
            var value = ModifyOptionGroupOutput()
            value.optionGroup = try reader["OptionGroup"].readIfPresent(readingClosure: RDSClientTypes.OptionGroup.readingClosure)
            return value
        }
    }
}

public struct ModifyOptionGroupOutput: Swift.Equatable {
    ///
    public var optionGroup: RDSClientTypes.OptionGroup?

    public init(
        optionGroup: RDSClientTypes.OptionGroup? = nil
    )
    {
        self.optionGroup = optionGroup
    }
}

enum ModifyOptionGroupOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "InvalidOptionGroupStateFault": return try await InvalidOptionGroupStateFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "OptionGroupNotFoundFault": return try await OptionGroupNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension ModifyTenantDatabaseInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ModifyTenantDatabaseInput(dbInstanceIdentifier: \(Swift.String(describing: dbInstanceIdentifier)), newTenantDBName: \(Swift.String(describing: newTenantDBName)), tenantDBName: \(Swift.String(describing: tenantDBName)), masterUserPassword: \"CONTENT_REDACTED\")"}
}

extension ModifyTenantDatabaseInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dbInstanceIdentifier = "DBInstanceIdentifier"
        case masterUserPassword = "MasterUserPassword"
        case newTenantDBName = "NewTenantDBName"
        case tenantDBName = "TenantDBName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let dbInstanceIdentifier = dbInstanceIdentifier {
            try container.encode(dbInstanceIdentifier, forKey: ClientRuntime.Key("DBInstanceIdentifier"))
        }
        if let masterUserPassword = masterUserPassword {
            try container.encode(masterUserPassword, forKey: ClientRuntime.Key("MasterUserPassword"))
        }
        if let newTenantDBName = newTenantDBName {
            try container.encode(newTenantDBName, forKey: ClientRuntime.Key("NewTenantDBName"))
        }
        if let tenantDBName = tenantDBName {
            try container.encode(tenantDBName, forKey: ClientRuntime.Key("TenantDBName"))
        }
        try container.encode("ModifyTenantDatabase", forKey:ClientRuntime.Key("Action"))
        try container.encode("2014-10-31", forKey:ClientRuntime.Key("Version"))
    }
}

extension ModifyTenantDatabaseInput {

    static func urlPathProvider(_ value: ModifyTenantDatabaseInput) -> Swift.String? {
        return "/"
    }
}

public struct ModifyTenantDatabaseInput: Swift.Equatable {
    /// The identifier of the DB instance that contains the tenant database that you are modifying. This parameter isn't case-sensitive. Constraints:
    ///
    /// * Must match the identifier of an existing DB instance.
    /// This member is required.
    public var dbInstanceIdentifier: Swift.String?
    /// The new password for the master user of the specified tenant database in your DB instance. Amazon RDS operations never return the password, so this action provides a way to regain access to a tenant database user if the password is lost. This includes restoring privileges that might have been accidentally revoked. Constraints:
    ///
    /// * Can include any printable ASCII character except /, " (double quote), @, & (ampersand), and ' (single quote).
    ///
    ///
    /// Length constraints:
    ///
    /// * Must contain between 8 and 30 characters.
    public var masterUserPassword: Swift.String?
    /// The new name of the tenant database when renaming a tenant database. This parameter isn’t case-sensitive. Constraints:
    ///
    /// * Can't be the string null or any other reserved word.
    ///
    /// * Can't be longer than 8 characters.
    public var newTenantDBName: Swift.String?
    /// The user-supplied name of the tenant database that you want to modify. This parameter isn’t case-sensitive. Constraints:
    ///
    /// * Must match the identifier of an existing tenant database.
    /// This member is required.
    public var tenantDBName: Swift.String?

    public init(
        dbInstanceIdentifier: Swift.String? = nil,
        masterUserPassword: Swift.String? = nil,
        newTenantDBName: Swift.String? = nil,
        tenantDBName: Swift.String? = nil
    )
    {
        self.dbInstanceIdentifier = dbInstanceIdentifier
        self.masterUserPassword = masterUserPassword
        self.newTenantDBName = newTenantDBName
        self.tenantDBName = tenantDBName
    }
}

extension ModifyTenantDatabaseOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<ModifyTenantDatabaseOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["ModifyTenantDatabaseResult"]
            var value = ModifyTenantDatabaseOutput()
            value.tenantDatabase = try reader["TenantDatabase"].readIfPresent(readingClosure: RDSClientTypes.TenantDatabase.readingClosure)
            return value
        }
    }
}

public struct ModifyTenantDatabaseOutput: Swift.Equatable {
    /// A tenant database in the DB instance. This data type is an element in the response to the DescribeTenantDatabases action.
    public var tenantDatabase: RDSClientTypes.TenantDatabase?

    public init(
        tenantDatabase: RDSClientTypes.TenantDatabase? = nil
    )
    {
        self.tenantDatabase = tenantDatabase
    }
}

enum ModifyTenantDatabaseOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "DBInstanceNotFound": return try await DBInstanceNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "InvalidDBInstanceState": return try await InvalidDBInstanceStateFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "TenantDatabaseAlreadyExists": return try await TenantDatabaseAlreadyExistsFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "TenantDatabaseNotFound": return try await TenantDatabaseNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension NetworkTypeNotSupported {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = NetworkTypeNotSupported()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// The network type is invalid for the DB instance. Valid nework type values are IPV4 and DUAL.
public struct NetworkTypeNotSupported: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "NetworkTypeNotSupported" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension RDSClientTypes.Option: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dbSecurityGroupMemberships = "DBSecurityGroupMemberships"
        case optionDescription = "OptionDescription"
        case optionName = "OptionName"
        case optionSettings = "OptionSettings"
        case optionVersion = "OptionVersion"
        case permanent = "Permanent"
        case persistent = "Persistent"
        case port = "Port"
        case vpcSecurityGroupMemberships = "VpcSecurityGroupMemberships"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let dbSecurityGroupMemberships = dbSecurityGroupMemberships {
            if !dbSecurityGroupMemberships.isEmpty {
                var dbSecurityGroupMembershipsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("DBSecurityGroupMemberships"))
                for (index0, dbsecuritygroupmembership0) in dbSecurityGroupMemberships.enumerated() {
                    try dbSecurityGroupMembershipsContainer.encode(dbsecuritygroupmembership0, forKey: ClientRuntime.Key("DBSecurityGroup.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var dbSecurityGroupMembershipsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("DBSecurityGroupMemberships"))
                try dbSecurityGroupMembershipsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let optionDescription = optionDescription {
            try container.encode(optionDescription, forKey: ClientRuntime.Key("OptionDescription"))
        }
        if let optionName = optionName {
            try container.encode(optionName, forKey: ClientRuntime.Key("OptionName"))
        }
        if let optionSettings = optionSettings {
            if !optionSettings.isEmpty {
                var optionSettingsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("OptionSettings"))
                for (index0, optionsetting0) in optionSettings.enumerated() {
                    try optionSettingsContainer.encode(optionsetting0, forKey: ClientRuntime.Key("OptionSetting.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var optionSettingsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("OptionSettings"))
                try optionSettingsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let optionVersion = optionVersion {
            try container.encode(optionVersion, forKey: ClientRuntime.Key("OptionVersion"))
        }
        if let permanent = permanent {
            try container.encode(permanent, forKey: ClientRuntime.Key("Permanent"))
        }
        if let persistent = persistent {
            try container.encode(persistent, forKey: ClientRuntime.Key("Persistent"))
        }
        if let port = port {
            try container.encode(port, forKey: ClientRuntime.Key("Port"))
        }
        if let vpcSecurityGroupMemberships = vpcSecurityGroupMemberships {
            if !vpcSecurityGroupMemberships.isEmpty {
                var vpcSecurityGroupMembershipsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("VpcSecurityGroupMemberships"))
                for (index0, vpcsecuritygroupmembership0) in vpcSecurityGroupMemberships.enumerated() {
                    try vpcSecurityGroupMembershipsContainer.encode(vpcsecuritygroupmembership0, forKey: ClientRuntime.Key("VpcSecurityGroupMembership.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var vpcSecurityGroupMembershipsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("VpcSecurityGroupMemberships"))
                try vpcSecurityGroupMembershipsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
    }

    static var readingClosure: SmithyReadWrite.ReadingClosure<RDSClientTypes.Option, SmithyXML.Reader> {
        return { reader in
            guard reader.content != nil else { return nil }
            var value = RDSClientTypes.Option()
            value.optionName = try reader["OptionName"].readIfPresent()
            value.optionDescription = try reader["OptionDescription"].readIfPresent()
            value.persistent = try reader["Persistent"].readIfPresent()
            value.permanent = try reader["Permanent"].readIfPresent()
            value.port = try reader["Port"].readIfPresent()
            value.optionVersion = try reader["OptionVersion"].readIfPresent()
            value.optionSettings = try reader["OptionSettings"].readListIfPresent(memberReadingClosure: RDSClientTypes.OptionSetting.readingClosure, memberNodeInfo: "OptionSetting", isFlattened: false)
            value.dbSecurityGroupMemberships = try reader["DBSecurityGroupMemberships"].readListIfPresent(memberReadingClosure: RDSClientTypes.DBSecurityGroupMembership.readingClosure, memberNodeInfo: "DBSecurityGroup", isFlattened: false)
            value.vpcSecurityGroupMemberships = try reader["VpcSecurityGroupMemberships"].readListIfPresent(memberReadingClosure: RDSClientTypes.VpcSecurityGroupMembership.readingClosure, memberNodeInfo: "VpcSecurityGroupMembership", isFlattened: false)
            return value
        }
    }
}

extension RDSClientTypes {
    /// The details of an option.
    public struct Option: Swift.Equatable {
        /// If the option requires access to a port, then this DB security group allows access to the port.
        public var dbSecurityGroupMemberships: [RDSClientTypes.DBSecurityGroupMembership]?
        /// The description of the option.
        public var optionDescription: Swift.String?
        /// The name of the option.
        public var optionName: Swift.String?
        /// The option settings for this option.
        public var optionSettings: [RDSClientTypes.OptionSetting]?
        /// The version of the option.
        public var optionVersion: Swift.String?
        /// Indicates whether this option is permanent.
        public var permanent: Swift.Bool?
        /// Indicates whether this option is persistent.
        public var persistent: Swift.Bool?
        /// If required, the port configured for this option to use.
        public var port: Swift.Int?
        /// If the option requires access to a port, then this VPC security group allows access to the port.
        public var vpcSecurityGroupMemberships: [RDSClientTypes.VpcSecurityGroupMembership]?

        public init(
            dbSecurityGroupMemberships: [RDSClientTypes.DBSecurityGroupMembership]? = nil,
            optionDescription: Swift.String? = nil,
            optionName: Swift.String? = nil,
            optionSettings: [RDSClientTypes.OptionSetting]? = nil,
            optionVersion: Swift.String? = nil,
            permanent: Swift.Bool? = nil,
            persistent: Swift.Bool? = nil,
            port: Swift.Int? = nil,
            vpcSecurityGroupMemberships: [RDSClientTypes.VpcSecurityGroupMembership]? = nil
        )
        {
            self.dbSecurityGroupMemberships = dbSecurityGroupMemberships
            self.optionDescription = optionDescription
            self.optionName = optionName
            self.optionSettings = optionSettings
            self.optionVersion = optionVersion
            self.permanent = permanent
            self.persistent = persistent
            self.port = port
            self.vpcSecurityGroupMemberships = vpcSecurityGroupMemberships
        }
    }

}

extension RDSClientTypes.OptionConfiguration: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dbSecurityGroupMemberships = "DBSecurityGroupMemberships"
        case optionName = "OptionName"
        case optionSettings = "OptionSettings"
        case optionVersion = "OptionVersion"
        case port = "Port"
        case vpcSecurityGroupMemberships = "VpcSecurityGroupMemberships"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let dbSecurityGroupMemberships = dbSecurityGroupMemberships {
            if !dbSecurityGroupMemberships.isEmpty {
                var dbSecurityGroupMembershipsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("DBSecurityGroupMemberships"))
                for (index0, string0) in dbSecurityGroupMemberships.enumerated() {
                    try dbSecurityGroupMembershipsContainer.encode(string0, forKey: ClientRuntime.Key("DBSecurityGroupName.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var dbSecurityGroupMembershipsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("DBSecurityGroupMemberships"))
                try dbSecurityGroupMembershipsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let optionName = optionName {
            try container.encode(optionName, forKey: ClientRuntime.Key("OptionName"))
        }
        if let optionSettings = optionSettings {
            if !optionSettings.isEmpty {
                var optionSettingsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("OptionSettings"))
                for (index0, optionsetting0) in optionSettings.enumerated() {
                    try optionSettingsContainer.encode(optionsetting0, forKey: ClientRuntime.Key("OptionSetting.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var optionSettingsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("OptionSettings"))
                try optionSettingsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let optionVersion = optionVersion {
            try container.encode(optionVersion, forKey: ClientRuntime.Key("OptionVersion"))
        }
        if let port = port {
            try container.encode(port, forKey: ClientRuntime.Key("Port"))
        }
        if let vpcSecurityGroupMemberships = vpcSecurityGroupMemberships {
            if !vpcSecurityGroupMemberships.isEmpty {
                var vpcSecurityGroupMembershipsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("VpcSecurityGroupMemberships"))
                for (index0, string0) in vpcSecurityGroupMemberships.enumerated() {
                    try vpcSecurityGroupMembershipsContainer.encode(string0, forKey: ClientRuntime.Key("VpcSecurityGroupId.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var vpcSecurityGroupMembershipsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("VpcSecurityGroupMemberships"))
                try vpcSecurityGroupMembershipsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
    }

    static var readingClosure: SmithyReadWrite.ReadingClosure<RDSClientTypes.OptionConfiguration, SmithyXML.Reader> {
        return { reader in
            guard reader.content != nil else { return nil }
            var value = RDSClientTypes.OptionConfiguration()
            value.optionName = try reader["OptionName"].readIfPresent()
            value.port = try reader["Port"].readIfPresent()
            value.optionVersion = try reader["OptionVersion"].readIfPresent()
            value.dbSecurityGroupMemberships = try reader["DBSecurityGroupMemberships"].readListIfPresent(memberReadingClosure: Swift.String.readingClosure, memberNodeInfo: "DBSecurityGroupName", isFlattened: false)
            value.vpcSecurityGroupMemberships = try reader["VpcSecurityGroupMemberships"].readListIfPresent(memberReadingClosure: Swift.String.readingClosure, memberNodeInfo: "VpcSecurityGroupId", isFlattened: false)
            value.optionSettings = try reader["OptionSettings"].readListIfPresent(memberReadingClosure: RDSClientTypes.OptionSetting.readingClosure, memberNodeInfo: "OptionSetting", isFlattened: false)
            return value
        }
    }
}

extension RDSClientTypes {
    /// A list of all available options
    public struct OptionConfiguration: Swift.Equatable {
        /// A list of DBSecurityGroupMembership name strings used for this option.
        public var dbSecurityGroupMemberships: [Swift.String]?
        /// The configuration of options to include in a group.
        /// This member is required.
        public var optionName: Swift.String?
        /// The option settings to include in an option group.
        public var optionSettings: [RDSClientTypes.OptionSetting]?
        /// The version for the option.
        public var optionVersion: Swift.String?
        /// The optional port for the option.
        public var port: Swift.Int?
        /// A list of VpcSecurityGroupMembership name strings used for this option.
        public var vpcSecurityGroupMemberships: [Swift.String]?

        public init(
            dbSecurityGroupMemberships: [Swift.String]? = nil,
            optionName: Swift.String? = nil,
            optionSettings: [RDSClientTypes.OptionSetting]? = nil,
            optionVersion: Swift.String? = nil,
            port: Swift.Int? = nil,
            vpcSecurityGroupMemberships: [Swift.String]? = nil
        )
        {
            self.dbSecurityGroupMemberships = dbSecurityGroupMemberships
            self.optionName = optionName
            self.optionSettings = optionSettings
            self.optionVersion = optionVersion
            self.port = port
            self.vpcSecurityGroupMemberships = vpcSecurityGroupMemberships
        }
    }

}

extension RDSClientTypes.OptionGroup: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case allowsVpcAndNonVpcInstanceMemberships = "AllowsVpcAndNonVpcInstanceMemberships"
        case copyTimestamp = "CopyTimestamp"
        case engineName = "EngineName"
        case majorEngineVersion = "MajorEngineVersion"
        case optionGroupArn = "OptionGroupArn"
        case optionGroupDescription = "OptionGroupDescription"
        case optionGroupName = "OptionGroupName"
        case options = "Options"
        case sourceAccountId = "SourceAccountId"
        case sourceOptionGroup = "SourceOptionGroup"
        case vpcId = "VpcId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let allowsVpcAndNonVpcInstanceMemberships = allowsVpcAndNonVpcInstanceMemberships {
            try container.encode(allowsVpcAndNonVpcInstanceMemberships, forKey: ClientRuntime.Key("AllowsVpcAndNonVpcInstanceMemberships"))
        }
        if let copyTimestamp = copyTimestamp {
            try container.encodeTimestamp(copyTimestamp, format: .dateTime, forKey: ClientRuntime.Key("CopyTimestamp"))
        }
        if let engineName = engineName {
            try container.encode(engineName, forKey: ClientRuntime.Key("EngineName"))
        }
        if let majorEngineVersion = majorEngineVersion {
            try container.encode(majorEngineVersion, forKey: ClientRuntime.Key("MajorEngineVersion"))
        }
        if let optionGroupArn = optionGroupArn {
            try container.encode(optionGroupArn, forKey: ClientRuntime.Key("OptionGroupArn"))
        }
        if let optionGroupDescription = optionGroupDescription {
            try container.encode(optionGroupDescription, forKey: ClientRuntime.Key("OptionGroupDescription"))
        }
        if let optionGroupName = optionGroupName {
            try container.encode(optionGroupName, forKey: ClientRuntime.Key("OptionGroupName"))
        }
        if let options = options {
            if !options.isEmpty {
                var optionsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Options"))
                for (index0, option0) in options.enumerated() {
                    try optionsContainer.encode(option0, forKey: ClientRuntime.Key("Option.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var optionsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Options"))
                try optionsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let sourceAccountId = sourceAccountId {
            try container.encode(sourceAccountId, forKey: ClientRuntime.Key("SourceAccountId"))
        }
        if let sourceOptionGroup = sourceOptionGroup {
            try container.encode(sourceOptionGroup, forKey: ClientRuntime.Key("SourceOptionGroup"))
        }
        if let vpcId = vpcId {
            try container.encode(vpcId, forKey: ClientRuntime.Key("VpcId"))
        }
    }

    static var readingClosure: SmithyReadWrite.ReadingClosure<RDSClientTypes.OptionGroup, SmithyXML.Reader> {
        return { reader in
            guard reader.content != nil else { return nil }
            var value = RDSClientTypes.OptionGroup()
            value.optionGroupName = try reader["OptionGroupName"].readIfPresent()
            value.optionGroupDescription = try reader["OptionGroupDescription"].readIfPresent()
            value.engineName = try reader["EngineName"].readIfPresent()
            value.majorEngineVersion = try reader["MajorEngineVersion"].readIfPresent()
            value.options = try reader["Options"].readListIfPresent(memberReadingClosure: RDSClientTypes.Option.readingClosure, memberNodeInfo: "Option", isFlattened: false)
            value.allowsVpcAndNonVpcInstanceMemberships = try reader["AllowsVpcAndNonVpcInstanceMemberships"].readIfPresent()
            value.vpcId = try reader["VpcId"].readIfPresent()
            value.optionGroupArn = try reader["OptionGroupArn"].readIfPresent()
            value.sourceOptionGroup = try reader["SourceOptionGroup"].readIfPresent()
            value.sourceAccountId = try reader["SourceAccountId"].readIfPresent()
            value.copyTimestamp = try reader["CopyTimestamp"].readTimestampIfPresent(format: .dateTime)
            return value
        }
    }
}

extension RDSClientTypes {
    ///
    public struct OptionGroup: Swift.Equatable {
        /// Indicates whether this option group can be applied to both VPC and non-VPC instances. The value true indicates the option group can be applied to both VPC and non-VPC instances.
        public var allowsVpcAndNonVpcInstanceMemberships: Swift.Bool?
        /// Indicates when the option group was copied.
        public var copyTimestamp: ClientRuntime.Date?
        /// Indicates the name of the engine that this option group can be applied to.
        public var engineName: Swift.String?
        /// Indicates the major engine version associated with this option group.
        public var majorEngineVersion: Swift.String?
        /// Specifies the Amazon Resource Name (ARN) for the option group.
        public var optionGroupArn: Swift.String?
        /// Provides a description of the option group.
        public var optionGroupDescription: Swift.String?
        /// Specifies the name of the option group.
        public var optionGroupName: Swift.String?
        /// Indicates what options are available in the option group.
        public var options: [RDSClientTypes.Option]?
        /// Specifies the Amazon Web Services account ID for the option group from which this option group is copied.
        public var sourceAccountId: Swift.String?
        /// Specifies the name of the option group from which this option group is copied.
        public var sourceOptionGroup: Swift.String?
        /// If AllowsVpcAndNonVpcInstanceMemberships is false, this field is blank. If AllowsVpcAndNonVpcInstanceMemberships is true and this field is blank, then this option group can be applied to both VPC and non-VPC instances. If this field contains a value, then this option group can only be applied to instances that are in the VPC indicated by this field.
        public var vpcId: Swift.String?

        public init(
            allowsVpcAndNonVpcInstanceMemberships: Swift.Bool? = nil,
            copyTimestamp: ClientRuntime.Date? = nil,
            engineName: Swift.String? = nil,
            majorEngineVersion: Swift.String? = nil,
            optionGroupArn: Swift.String? = nil,
            optionGroupDescription: Swift.String? = nil,
            optionGroupName: Swift.String? = nil,
            options: [RDSClientTypes.Option]? = nil,
            sourceAccountId: Swift.String? = nil,
            sourceOptionGroup: Swift.String? = nil,
            vpcId: Swift.String? = nil
        )
        {
            self.allowsVpcAndNonVpcInstanceMemberships = allowsVpcAndNonVpcInstanceMemberships
            self.copyTimestamp = copyTimestamp
            self.engineName = engineName
            self.majorEngineVersion = majorEngineVersion
            self.optionGroupArn = optionGroupArn
            self.optionGroupDescription = optionGroupDescription
            self.optionGroupName = optionGroupName
            self.options = options
            self.sourceAccountId = sourceAccountId
            self.sourceOptionGroup = sourceOptionGroup
            self.vpcId = vpcId
        }
    }

}

extension OptionGroupAlreadyExistsFault {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = OptionGroupAlreadyExistsFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// The option group you are trying to create already exists.
public struct OptionGroupAlreadyExistsFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "OptionGroupAlreadyExistsFault" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension RDSClientTypes.OptionGroupMembership: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case optionGroupName = "OptionGroupName"
        case status = "Status"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let optionGroupName = optionGroupName {
            try container.encode(optionGroupName, forKey: ClientRuntime.Key("OptionGroupName"))
        }
        if let status = status {
            try container.encode(status, forKey: ClientRuntime.Key("Status"))
        }
    }

    static var readingClosure: SmithyReadWrite.ReadingClosure<RDSClientTypes.OptionGroupMembership, SmithyXML.Reader> {
        return { reader in
            guard reader.content != nil else { return nil }
            var value = RDSClientTypes.OptionGroupMembership()
            value.optionGroupName = try reader["OptionGroupName"].readIfPresent()
            value.status = try reader["Status"].readIfPresent()
            return value
        }
    }
}

extension RDSClientTypes {
    /// Provides information on the option groups the DB instance is a member of.
    public struct OptionGroupMembership: Swift.Equatable {
        /// The name of the option group that the instance belongs to.
        public var optionGroupName: Swift.String?
        /// The status of the DB instance's option group membership. Valid values are: in-sync, pending-apply, pending-removal, pending-maintenance-apply, pending-maintenance-removal, applying, removing, and failed.
        public var status: Swift.String?

        public init(
            optionGroupName: Swift.String? = nil,
            status: Swift.String? = nil
        )
        {
            self.optionGroupName = optionGroupName
            self.status = status
        }
    }

}

extension OptionGroupNotFoundFault {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = OptionGroupNotFoundFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// The specified option group could not be found.
public struct OptionGroupNotFoundFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "OptionGroupNotFoundFault" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension RDSClientTypes.OptionGroupOption: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case copyableCrossAccount = "CopyableCrossAccount"
        case defaultPort = "DefaultPort"
        case description = "Description"
        case engineName = "EngineName"
        case majorEngineVersion = "MajorEngineVersion"
        case minimumRequiredMinorEngineVersion = "MinimumRequiredMinorEngineVersion"
        case name = "Name"
        case optionGroupOptionSettings = "OptionGroupOptionSettings"
        case optionGroupOptionVersions = "OptionGroupOptionVersions"
        case optionsConflictsWith = "OptionsConflictsWith"
        case optionsDependedOn = "OptionsDependedOn"
        case permanent = "Permanent"
        case persistent = "Persistent"
        case portRequired = "PortRequired"
        case requiresAutoMinorEngineVersionUpgrade = "RequiresAutoMinorEngineVersionUpgrade"
        case supportsOptionVersionDowngrade = "SupportsOptionVersionDowngrade"
        case vpcOnly = "VpcOnly"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let copyableCrossAccount = copyableCrossAccount {
            try container.encode(copyableCrossAccount, forKey: ClientRuntime.Key("CopyableCrossAccount"))
        }
        if let defaultPort = defaultPort {
            try container.encode(defaultPort, forKey: ClientRuntime.Key("DefaultPort"))
        }
        if let description = description {
            try container.encode(description, forKey: ClientRuntime.Key("Description"))
        }
        if let engineName = engineName {
            try container.encode(engineName, forKey: ClientRuntime.Key("EngineName"))
        }
        if let majorEngineVersion = majorEngineVersion {
            try container.encode(majorEngineVersion, forKey: ClientRuntime.Key("MajorEngineVersion"))
        }
        if let minimumRequiredMinorEngineVersion = minimumRequiredMinorEngineVersion {
            try container.encode(minimumRequiredMinorEngineVersion, forKey: ClientRuntime.Key("MinimumRequiredMinorEngineVersion"))
        }
        if let name = name {
            try container.encode(name, forKey: ClientRuntime.Key("Name"))
        }
        if let optionGroupOptionSettings = optionGroupOptionSettings {
            if !optionGroupOptionSettings.isEmpty {
                var optionGroupOptionSettingsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("OptionGroupOptionSettings"))
                for (index0, optiongroupoptionsetting0) in optionGroupOptionSettings.enumerated() {
                    try optionGroupOptionSettingsContainer.encode(optiongroupoptionsetting0, forKey: ClientRuntime.Key("OptionGroupOptionSetting.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var optionGroupOptionSettingsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("OptionGroupOptionSettings"))
                try optionGroupOptionSettingsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let optionGroupOptionVersions = optionGroupOptionVersions {
            if !optionGroupOptionVersions.isEmpty {
                var optionGroupOptionVersionsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("OptionGroupOptionVersions"))
                for (index0, optionversion0) in optionGroupOptionVersions.enumerated() {
                    try optionGroupOptionVersionsContainer.encode(optionversion0, forKey: ClientRuntime.Key("OptionVersion.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var optionGroupOptionVersionsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("OptionGroupOptionVersions"))
                try optionGroupOptionVersionsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let optionsConflictsWith = optionsConflictsWith {
            if !optionsConflictsWith.isEmpty {
                var optionsConflictsWithContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("OptionsConflictsWith"))
                for (index0, string0) in optionsConflictsWith.enumerated() {
                    try optionsConflictsWithContainer.encode(string0, forKey: ClientRuntime.Key("OptionConflictName.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var optionsConflictsWithContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("OptionsConflictsWith"))
                try optionsConflictsWithContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let optionsDependedOn = optionsDependedOn {
            if !optionsDependedOn.isEmpty {
                var optionsDependedOnContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("OptionsDependedOn"))
                for (index0, string0) in optionsDependedOn.enumerated() {
                    try optionsDependedOnContainer.encode(string0, forKey: ClientRuntime.Key("OptionName.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var optionsDependedOnContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("OptionsDependedOn"))
                try optionsDependedOnContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let permanent = permanent {
            try container.encode(permanent, forKey: ClientRuntime.Key("Permanent"))
        }
        if let persistent = persistent {
            try container.encode(persistent, forKey: ClientRuntime.Key("Persistent"))
        }
        if let portRequired = portRequired {
            try container.encode(portRequired, forKey: ClientRuntime.Key("PortRequired"))
        }
        if let requiresAutoMinorEngineVersionUpgrade = requiresAutoMinorEngineVersionUpgrade {
            try container.encode(requiresAutoMinorEngineVersionUpgrade, forKey: ClientRuntime.Key("RequiresAutoMinorEngineVersionUpgrade"))
        }
        if let supportsOptionVersionDowngrade = supportsOptionVersionDowngrade {
            try container.encode(supportsOptionVersionDowngrade, forKey: ClientRuntime.Key("SupportsOptionVersionDowngrade"))
        }
        if let vpcOnly = vpcOnly {
            try container.encode(vpcOnly, forKey: ClientRuntime.Key("VpcOnly"))
        }
    }

    static var readingClosure: SmithyReadWrite.ReadingClosure<RDSClientTypes.OptionGroupOption, SmithyXML.Reader> {
        return { reader in
            guard reader.content != nil else { return nil }
            var value = RDSClientTypes.OptionGroupOption()
            value.name = try reader["Name"].readIfPresent()
            value.description = try reader["Description"].readIfPresent()
            value.engineName = try reader["EngineName"].readIfPresent()
            value.majorEngineVersion = try reader["MajorEngineVersion"].readIfPresent()
            value.minimumRequiredMinorEngineVersion = try reader["MinimumRequiredMinorEngineVersion"].readIfPresent()
            value.portRequired = try reader["PortRequired"].readIfPresent()
            value.defaultPort = try reader["DefaultPort"].readIfPresent()
            value.optionsDependedOn = try reader["OptionsDependedOn"].readListIfPresent(memberReadingClosure: Swift.String.readingClosure, memberNodeInfo: "OptionName", isFlattened: false)
            value.optionsConflictsWith = try reader["OptionsConflictsWith"].readListIfPresent(memberReadingClosure: Swift.String.readingClosure, memberNodeInfo: "OptionConflictName", isFlattened: false)
            value.persistent = try reader["Persistent"].readIfPresent()
            value.permanent = try reader["Permanent"].readIfPresent()
            value.requiresAutoMinorEngineVersionUpgrade = try reader["RequiresAutoMinorEngineVersionUpgrade"].readIfPresent()
            value.vpcOnly = try reader["VpcOnly"].readIfPresent()
            value.supportsOptionVersionDowngrade = try reader["SupportsOptionVersionDowngrade"].readIfPresent()
            value.optionGroupOptionSettings = try reader["OptionGroupOptionSettings"].readListIfPresent(memberReadingClosure: RDSClientTypes.OptionGroupOptionSetting.readingClosure, memberNodeInfo: "OptionGroupOptionSetting", isFlattened: false)
            value.optionGroupOptionVersions = try reader["OptionGroupOptionVersions"].readListIfPresent(memberReadingClosure: RDSClientTypes.OptionVersion.readingClosure, memberNodeInfo: "OptionVersion", isFlattened: false)
            value.copyableCrossAccount = try reader["CopyableCrossAccount"].readIfPresent()
            return value
        }
    }
}

extension RDSClientTypes {
    /// Available option.
    public struct OptionGroupOption: Swift.Equatable {
        /// Indicates whether the option can be copied across Amazon Web Services accounts.
        public var copyableCrossAccount: Swift.Bool?
        /// If the option requires a port, specifies the default port for the option.
        public var defaultPort: Swift.Int?
        /// The description of the option.
        public var description: Swift.String?
        /// The name of the engine that this option can be applied to.
        public var engineName: Swift.String?
        /// Indicates the major engine version that the option is available for.
        public var majorEngineVersion: Swift.String?
        /// The minimum required engine version for the option to be applied.
        public var minimumRequiredMinorEngineVersion: Swift.String?
        /// The name of the option.
        public var name: Swift.String?
        /// The option settings that are available (and the default value) for each option in an option group.
        public var optionGroupOptionSettings: [RDSClientTypes.OptionGroupOptionSetting]?
        /// The versions that are available for the option.
        public var optionGroupOptionVersions: [RDSClientTypes.OptionVersion]?
        /// The options that conflict with this option.
        public var optionsConflictsWith: [Swift.String]?
        /// The options that are prerequisites for this option.
        public var optionsDependedOn: [Swift.String]?
        /// Permanent options can never be removed from an option group. An option group containing a permanent option can't be removed from a DB instance.
        public var permanent: Swift.Bool?
        /// Persistent options can't be removed from an option group while DB instances are associated with the option group. If you disassociate all DB instances from the option group, your can remove the persistent option from the option group.
        public var persistent: Swift.Bool?
        /// Indicates whether the option requires a port.
        public var portRequired: Swift.Bool?
        /// If true, you must enable the Auto Minor Version Upgrade setting for your DB instance before you can use this option. You can enable Auto Minor Version Upgrade when you first create your DB instance, or by modifying your DB instance later.
        public var requiresAutoMinorEngineVersionUpgrade: Swift.Bool?
        /// If true, you can change the option to an earlier version of the option. This only applies to options that have different versions available.
        public var supportsOptionVersionDowngrade: Swift.Bool?
        /// If true, you can only use this option with a DB instance that is in a VPC.
        public var vpcOnly: Swift.Bool?

        public init(
            copyableCrossAccount: Swift.Bool? = nil,
            defaultPort: Swift.Int? = nil,
            description: Swift.String? = nil,
            engineName: Swift.String? = nil,
            majorEngineVersion: Swift.String? = nil,
            minimumRequiredMinorEngineVersion: Swift.String? = nil,
            name: Swift.String? = nil,
            optionGroupOptionSettings: [RDSClientTypes.OptionGroupOptionSetting]? = nil,
            optionGroupOptionVersions: [RDSClientTypes.OptionVersion]? = nil,
            optionsConflictsWith: [Swift.String]? = nil,
            optionsDependedOn: [Swift.String]? = nil,
            permanent: Swift.Bool? = nil,
            persistent: Swift.Bool? = nil,
            portRequired: Swift.Bool? = nil,
            requiresAutoMinorEngineVersionUpgrade: Swift.Bool? = nil,
            supportsOptionVersionDowngrade: Swift.Bool? = nil,
            vpcOnly: Swift.Bool? = nil
        )
        {
            self.copyableCrossAccount = copyableCrossAccount
            self.defaultPort = defaultPort
            self.description = description
            self.engineName = engineName
            self.majorEngineVersion = majorEngineVersion
            self.minimumRequiredMinorEngineVersion = minimumRequiredMinorEngineVersion
            self.name = name
            self.optionGroupOptionSettings = optionGroupOptionSettings
            self.optionGroupOptionVersions = optionGroupOptionVersions
            self.optionsConflictsWith = optionsConflictsWith
            self.optionsDependedOn = optionsDependedOn
            self.permanent = permanent
            self.persistent = persistent
            self.portRequired = portRequired
            self.requiresAutoMinorEngineVersionUpgrade = requiresAutoMinorEngineVersionUpgrade
            self.supportsOptionVersionDowngrade = supportsOptionVersionDowngrade
            self.vpcOnly = vpcOnly
        }
    }

}

extension RDSClientTypes.OptionGroupOptionSetting: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case allowedValues = "AllowedValues"
        case applyType = "ApplyType"
        case defaultValue = "DefaultValue"
        case isModifiable = "IsModifiable"
        case isRequired = "IsRequired"
        case minimumEngineVersionPerAllowedValue = "MinimumEngineVersionPerAllowedValue"
        case settingDescription = "SettingDescription"
        case settingName = "SettingName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let allowedValues = allowedValues {
            try container.encode(allowedValues, forKey: ClientRuntime.Key("AllowedValues"))
        }
        if let applyType = applyType {
            try container.encode(applyType, forKey: ClientRuntime.Key("ApplyType"))
        }
        if let defaultValue = defaultValue {
            try container.encode(defaultValue, forKey: ClientRuntime.Key("DefaultValue"))
        }
        if let isModifiable = isModifiable {
            try container.encode(isModifiable, forKey: ClientRuntime.Key("IsModifiable"))
        }
        if let isRequired = isRequired {
            try container.encode(isRequired, forKey: ClientRuntime.Key("IsRequired"))
        }
        if let minimumEngineVersionPerAllowedValue = minimumEngineVersionPerAllowedValue {
            if !minimumEngineVersionPerAllowedValue.isEmpty {
                var minimumEngineVersionPerAllowedValueContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("MinimumEngineVersionPerAllowedValue"))
                for (index0, minimumengineversionperallowedvalue0) in minimumEngineVersionPerAllowedValue.enumerated() {
                    try minimumEngineVersionPerAllowedValueContainer.encode(minimumengineversionperallowedvalue0, forKey: ClientRuntime.Key("MinimumEngineVersionPerAllowedValue.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var minimumEngineVersionPerAllowedValueContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("MinimumEngineVersionPerAllowedValue"))
                try minimumEngineVersionPerAllowedValueContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let settingDescription = settingDescription {
            try container.encode(settingDescription, forKey: ClientRuntime.Key("SettingDescription"))
        }
        if let settingName = settingName {
            try container.encode(settingName, forKey: ClientRuntime.Key("SettingName"))
        }
    }

    static var readingClosure: SmithyReadWrite.ReadingClosure<RDSClientTypes.OptionGroupOptionSetting, SmithyXML.Reader> {
        return { reader in
            guard reader.content != nil else { return nil }
            var value = RDSClientTypes.OptionGroupOptionSetting()
            value.settingName = try reader["SettingName"].readIfPresent()
            value.settingDescription = try reader["SettingDescription"].readIfPresent()
            value.defaultValue = try reader["DefaultValue"].readIfPresent()
            value.applyType = try reader["ApplyType"].readIfPresent()
            value.allowedValues = try reader["AllowedValues"].readIfPresent()
            value.isModifiable = try reader["IsModifiable"].readIfPresent()
            value.isRequired = try reader["IsRequired"].readIfPresent()
            value.minimumEngineVersionPerAllowedValue = try reader["MinimumEngineVersionPerAllowedValue"].readListIfPresent(memberReadingClosure: RDSClientTypes.MinimumEngineVersionPerAllowedValue.readingClosure, memberNodeInfo: "MinimumEngineVersionPerAllowedValue", isFlattened: false)
            return value
        }
    }
}

extension RDSClientTypes {
    /// Option group option settings are used to display settings available for each option with their default values and other information. These values are used with the DescribeOptionGroupOptions action.
    public struct OptionGroupOptionSetting: Swift.Equatable {
        /// Indicates the acceptable values for the option group option.
        public var allowedValues: Swift.String?
        /// The DB engine specific parameter type for the option group option.
        public var applyType: Swift.String?
        /// The default value for the option group option.
        public var defaultValue: Swift.String?
        /// Indicates whether this option group option can be changed from the default value.
        public var isModifiable: Swift.Bool?
        /// Indicates whether a value must be specified for this option setting of the option group option.
        public var isRequired: Swift.Bool?
        /// The minimum DB engine version required for the corresponding allowed value for this option setting.
        public var minimumEngineVersionPerAllowedValue: [RDSClientTypes.MinimumEngineVersionPerAllowedValue]?
        /// The description of the option group option.
        public var settingDescription: Swift.String?
        /// The name of the option group option.
        public var settingName: Swift.String?

        public init(
            allowedValues: Swift.String? = nil,
            applyType: Swift.String? = nil,
            defaultValue: Swift.String? = nil,
            isModifiable: Swift.Bool? = nil,
            isRequired: Swift.Bool? = nil,
            minimumEngineVersionPerAllowedValue: [RDSClientTypes.MinimumEngineVersionPerAllowedValue]? = nil,
            settingDescription: Swift.String? = nil,
            settingName: Swift.String? = nil
        )
        {
            self.allowedValues = allowedValues
            self.applyType = applyType
            self.defaultValue = defaultValue
            self.isModifiable = isModifiable
            self.isRequired = isRequired
            self.minimumEngineVersionPerAllowedValue = minimumEngineVersionPerAllowedValue
            self.settingDescription = settingDescription
            self.settingName = settingName
        }
    }

}

extension OptionGroupQuotaExceededFault {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = OptionGroupQuotaExceededFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// The quota of 20 option groups was exceeded for this Amazon Web Services account.
public struct OptionGroupQuotaExceededFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "OptionGroupQuotaExceededFault" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension RDSClientTypes.OptionSetting: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case allowedValues = "AllowedValues"
        case applyType = "ApplyType"
        case dataType = "DataType"
        case defaultValue = "DefaultValue"
        case description = "Description"
        case isCollection = "IsCollection"
        case isModifiable = "IsModifiable"
        case name = "Name"
        case value = "Value"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let allowedValues = allowedValues {
            try container.encode(allowedValues, forKey: ClientRuntime.Key("AllowedValues"))
        }
        if let applyType = applyType {
            try container.encode(applyType, forKey: ClientRuntime.Key("ApplyType"))
        }
        if let dataType = dataType {
            try container.encode(dataType, forKey: ClientRuntime.Key("DataType"))
        }
        if let defaultValue = defaultValue {
            try container.encode(defaultValue, forKey: ClientRuntime.Key("DefaultValue"))
        }
        if let description = description {
            try container.encode(description, forKey: ClientRuntime.Key("Description"))
        }
        if let isCollection = isCollection {
            try container.encode(isCollection, forKey: ClientRuntime.Key("IsCollection"))
        }
        if let isModifiable = isModifiable {
            try container.encode(isModifiable, forKey: ClientRuntime.Key("IsModifiable"))
        }
        if let name = name {
            try container.encode(name, forKey: ClientRuntime.Key("Name"))
        }
        if let value = value {
            try container.encode(value, forKey: ClientRuntime.Key("Value"))
        }
    }

    static var readingClosure: SmithyReadWrite.ReadingClosure<RDSClientTypes.OptionSetting, SmithyXML.Reader> {
        return { reader in
            guard reader.content != nil else { return nil }
            var value = RDSClientTypes.OptionSetting()
            value.name = try reader["Name"].readIfPresent()
            value.value = try reader["Value"].readIfPresent()
            value.defaultValue = try reader["DefaultValue"].readIfPresent()
            value.description = try reader["Description"].readIfPresent()
            value.applyType = try reader["ApplyType"].readIfPresent()
            value.dataType = try reader["DataType"].readIfPresent()
            value.allowedValues = try reader["AllowedValues"].readIfPresent()
            value.isModifiable = try reader["IsModifiable"].readIfPresent()
            value.isCollection = try reader["IsCollection"].readIfPresent()
            return value
        }
    }
}

extension RDSClientTypes {
    /// Option settings are the actual settings being applied or configured for that option. It is used when you modify an option group or describe option groups. For example, the NATIVE_NETWORK_ENCRYPTION option has a setting called SQLNET.ENCRYPTION_SERVER that can have several different values.
    public struct OptionSetting: Swift.Equatable {
        /// The allowed values of the option setting.
        public var allowedValues: Swift.String?
        /// The DB engine specific parameter type.
        public var applyType: Swift.String?
        /// The data type of the option setting.
        public var dataType: Swift.String?
        /// The default value of the option setting.
        public var defaultValue: Swift.String?
        /// The description of the option setting.
        public var description: Swift.String?
        /// Indicates whether the option setting is part of a collection.
        public var isCollection: Swift.Bool?
        /// Indicates whether the option setting can be modified from the default.
        public var isModifiable: Swift.Bool?
        /// The name of the option that has settings that you can set.
        public var name: Swift.String?
        /// The current value of the option setting.
        public var value: Swift.String?

        public init(
            allowedValues: Swift.String? = nil,
            applyType: Swift.String? = nil,
            dataType: Swift.String? = nil,
            defaultValue: Swift.String? = nil,
            description: Swift.String? = nil,
            isCollection: Swift.Bool? = nil,
            isModifiable: Swift.Bool? = nil,
            name: Swift.String? = nil,
            value: Swift.String? = nil
        )
        {
            self.allowedValues = allowedValues
            self.applyType = applyType
            self.dataType = dataType
            self.defaultValue = defaultValue
            self.description = description
            self.isCollection = isCollection
            self.isModifiable = isModifiable
            self.name = name
            self.value = value
        }
    }

}

extension RDSClientTypes.OptionVersion: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case isDefault = "IsDefault"
        case version = "Version"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let isDefault = isDefault {
            try container.encode(isDefault, forKey: ClientRuntime.Key("IsDefault"))
        }
        if let version = version {
            try container.encode(version, forKey: ClientRuntime.Key("Version"))
        }
    }

    static var readingClosure: SmithyReadWrite.ReadingClosure<RDSClientTypes.OptionVersion, SmithyXML.Reader> {
        return { reader in
            guard reader.content != nil else { return nil }
            var value = RDSClientTypes.OptionVersion()
            value.version = try reader["Version"].readIfPresent()
            value.isDefault = try reader["IsDefault"].readIfPresent()
            return value
        }
    }
}

extension RDSClientTypes {
    /// The version for an option. Option group option versions are returned by the DescribeOptionGroupOptions action.
    public struct OptionVersion: Swift.Equatable {
        /// Indicates whether the version is the default version of the option.
        public var isDefault: Swift.Bool?
        /// The version of the option.
        public var version: Swift.String?

        public init(
            isDefault: Swift.Bool? = nil,
            version: Swift.String? = nil
        )
        {
            self.isDefault = isDefault
            self.version = version
        }
    }

}

extension RDSClientTypes.OrderableDBInstanceOption: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case availabilityZoneGroup = "AvailabilityZoneGroup"
        case availabilityZones = "AvailabilityZones"
        case availableProcessorFeatures = "AvailableProcessorFeatures"
        case dbInstanceClass = "DBInstanceClass"
        case engine = "Engine"
        case engineVersion = "EngineVersion"
        case licenseModel = "LicenseModel"
        case maxIopsPerDbInstance = "MaxIopsPerDbInstance"
        case maxIopsPerGib = "MaxIopsPerGib"
        case maxStorageSize = "MaxStorageSize"
        case maxStorageThroughputPerDbInstance = "MaxStorageThroughputPerDbInstance"
        case maxStorageThroughputPerIops = "MaxStorageThroughputPerIops"
        case minIopsPerDbInstance = "MinIopsPerDbInstance"
        case minIopsPerGib = "MinIopsPerGib"
        case minStorageSize = "MinStorageSize"
        case minStorageThroughputPerDbInstance = "MinStorageThroughputPerDbInstance"
        case minStorageThroughputPerIops = "MinStorageThroughputPerIops"
        case multiAZCapable = "MultiAZCapable"
        case outpostCapable = "OutpostCapable"
        case readReplicaCapable = "ReadReplicaCapable"
        case storageType = "StorageType"
        case supportedActivityStreamModes = "SupportedActivityStreamModes"
        case supportedEngineModes = "SupportedEngineModes"
        case supportedNetworkTypes = "SupportedNetworkTypes"
        case supportsClusters = "SupportsClusters"
        case supportsDedicatedLogVolume = "SupportsDedicatedLogVolume"
        case supportsEnhancedMonitoring = "SupportsEnhancedMonitoring"
        case supportsGlobalDatabases = "SupportsGlobalDatabases"
        case supportsIAMDatabaseAuthentication = "SupportsIAMDatabaseAuthentication"
        case supportsIops = "SupportsIops"
        case supportsKerberosAuthentication = "SupportsKerberosAuthentication"
        case supportsPerformanceInsights = "SupportsPerformanceInsights"
        case supportsStorageAutoscaling = "SupportsStorageAutoscaling"
        case supportsStorageEncryption = "SupportsStorageEncryption"
        case supportsStorageThroughput = "SupportsStorageThroughput"
        case vpc = "Vpc"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let availabilityZoneGroup = availabilityZoneGroup {
            try container.encode(availabilityZoneGroup, forKey: ClientRuntime.Key("AvailabilityZoneGroup"))
        }
        if let availabilityZones = availabilityZones {
            if !availabilityZones.isEmpty {
                var availabilityZonesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("AvailabilityZones"))
                for (index0, availabilityzone0) in availabilityZones.enumerated() {
                    try availabilityZonesContainer.encode(availabilityzone0, forKey: ClientRuntime.Key("AvailabilityZone.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var availabilityZonesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("AvailabilityZones"))
                try availabilityZonesContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let availableProcessorFeatures = availableProcessorFeatures {
            if !availableProcessorFeatures.isEmpty {
                var availableProcessorFeaturesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("AvailableProcessorFeatures"))
                for (index0, availableprocessorfeature0) in availableProcessorFeatures.enumerated() {
                    try availableProcessorFeaturesContainer.encode(availableprocessorfeature0, forKey: ClientRuntime.Key("AvailableProcessorFeature.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var availableProcessorFeaturesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("AvailableProcessorFeatures"))
                try availableProcessorFeaturesContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let dbInstanceClass = dbInstanceClass {
            try container.encode(dbInstanceClass, forKey: ClientRuntime.Key("DBInstanceClass"))
        }
        if let engine = engine {
            try container.encode(engine, forKey: ClientRuntime.Key("Engine"))
        }
        if let engineVersion = engineVersion {
            try container.encode(engineVersion, forKey: ClientRuntime.Key("EngineVersion"))
        }
        if let licenseModel = licenseModel {
            try container.encode(licenseModel, forKey: ClientRuntime.Key("LicenseModel"))
        }
        if let maxIopsPerDbInstance = maxIopsPerDbInstance {
            try container.encode(maxIopsPerDbInstance, forKey: ClientRuntime.Key("MaxIopsPerDbInstance"))
        }
        if let maxIopsPerGib = maxIopsPerGib {
            try container.encode(maxIopsPerGib, forKey: ClientRuntime.Key("MaxIopsPerGib"))
        }
        if let maxStorageSize = maxStorageSize {
            try container.encode(maxStorageSize, forKey: ClientRuntime.Key("MaxStorageSize"))
        }
        if let maxStorageThroughputPerDbInstance = maxStorageThroughputPerDbInstance {
            try container.encode(maxStorageThroughputPerDbInstance, forKey: ClientRuntime.Key("MaxStorageThroughputPerDbInstance"))
        }
        if let maxStorageThroughputPerIops = maxStorageThroughputPerIops {
            try container.encode(maxStorageThroughputPerIops, forKey: ClientRuntime.Key("MaxStorageThroughputPerIops"))
        }
        if let minIopsPerDbInstance = minIopsPerDbInstance {
            try container.encode(minIopsPerDbInstance, forKey: ClientRuntime.Key("MinIopsPerDbInstance"))
        }
        if let minIopsPerGib = minIopsPerGib {
            try container.encode(minIopsPerGib, forKey: ClientRuntime.Key("MinIopsPerGib"))
        }
        if let minStorageSize = minStorageSize {
            try container.encode(minStorageSize, forKey: ClientRuntime.Key("MinStorageSize"))
        }
        if let minStorageThroughputPerDbInstance = minStorageThroughputPerDbInstance {
            try container.encode(minStorageThroughputPerDbInstance, forKey: ClientRuntime.Key("MinStorageThroughputPerDbInstance"))
        }
        if let minStorageThroughputPerIops = minStorageThroughputPerIops {
            try container.encode(minStorageThroughputPerIops, forKey: ClientRuntime.Key("MinStorageThroughputPerIops"))
        }
        if let multiAZCapable = multiAZCapable {
            try container.encode(multiAZCapable, forKey: ClientRuntime.Key("MultiAZCapable"))
        }
        if let outpostCapable = outpostCapable {
            try container.encode(outpostCapable, forKey: ClientRuntime.Key("OutpostCapable"))
        }
        if let readReplicaCapable = readReplicaCapable {
            try container.encode(readReplicaCapable, forKey: ClientRuntime.Key("ReadReplicaCapable"))
        }
        if let storageType = storageType {
            try container.encode(storageType, forKey: ClientRuntime.Key("StorageType"))
        }
        if let supportedActivityStreamModes = supportedActivityStreamModes {
            if !supportedActivityStreamModes.isEmpty {
                var supportedActivityStreamModesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("SupportedActivityStreamModes"))
                for (index0, string0) in supportedActivityStreamModes.enumerated() {
                    try supportedActivityStreamModesContainer.encode(string0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var supportedActivityStreamModesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("SupportedActivityStreamModes"))
                try supportedActivityStreamModesContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let supportedEngineModes = supportedEngineModes {
            if !supportedEngineModes.isEmpty {
                var supportedEngineModesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("SupportedEngineModes"))
                for (index0, string0) in supportedEngineModes.enumerated() {
                    try supportedEngineModesContainer.encode(string0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var supportedEngineModesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("SupportedEngineModes"))
                try supportedEngineModesContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let supportedNetworkTypes = supportedNetworkTypes {
            if !supportedNetworkTypes.isEmpty {
                var supportedNetworkTypesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("SupportedNetworkTypes"))
                for (index0, string0) in supportedNetworkTypes.enumerated() {
                    try supportedNetworkTypesContainer.encode(string0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var supportedNetworkTypesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("SupportedNetworkTypes"))
                try supportedNetworkTypesContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let supportsClusters = supportsClusters {
            try container.encode(supportsClusters, forKey: ClientRuntime.Key("SupportsClusters"))
        }
        if let supportsDedicatedLogVolume = supportsDedicatedLogVolume {
            try container.encode(supportsDedicatedLogVolume, forKey: ClientRuntime.Key("SupportsDedicatedLogVolume"))
        }
        if let supportsEnhancedMonitoring = supportsEnhancedMonitoring {
            try container.encode(supportsEnhancedMonitoring, forKey: ClientRuntime.Key("SupportsEnhancedMonitoring"))
        }
        if let supportsGlobalDatabases = supportsGlobalDatabases {
            try container.encode(supportsGlobalDatabases, forKey: ClientRuntime.Key("SupportsGlobalDatabases"))
        }
        if let supportsIAMDatabaseAuthentication = supportsIAMDatabaseAuthentication {
            try container.encode(supportsIAMDatabaseAuthentication, forKey: ClientRuntime.Key("SupportsIAMDatabaseAuthentication"))
        }
        if let supportsIops = supportsIops {
            try container.encode(supportsIops, forKey: ClientRuntime.Key("SupportsIops"))
        }
        if let supportsKerberosAuthentication = supportsKerberosAuthentication {
            try container.encode(supportsKerberosAuthentication, forKey: ClientRuntime.Key("SupportsKerberosAuthentication"))
        }
        if let supportsPerformanceInsights = supportsPerformanceInsights {
            try container.encode(supportsPerformanceInsights, forKey: ClientRuntime.Key("SupportsPerformanceInsights"))
        }
        if let supportsStorageAutoscaling = supportsStorageAutoscaling {
            try container.encode(supportsStorageAutoscaling, forKey: ClientRuntime.Key("SupportsStorageAutoscaling"))
        }
        if let supportsStorageEncryption = supportsStorageEncryption {
            try container.encode(supportsStorageEncryption, forKey: ClientRuntime.Key("SupportsStorageEncryption"))
        }
        if let supportsStorageThroughput = supportsStorageThroughput {
            try container.encode(supportsStorageThroughput, forKey: ClientRuntime.Key("SupportsStorageThroughput"))
        }
        if let vpc = vpc {
            try container.encode(vpc, forKey: ClientRuntime.Key("Vpc"))
        }
    }

    static var readingClosure: SmithyReadWrite.ReadingClosure<RDSClientTypes.OrderableDBInstanceOption, SmithyXML.Reader> {
        return { reader in
            guard reader.content != nil else { return nil }
            var value = RDSClientTypes.OrderableDBInstanceOption()
            value.engine = try reader["Engine"].readIfPresent()
            value.engineVersion = try reader["EngineVersion"].readIfPresent()
            value.dbInstanceClass = try reader["DBInstanceClass"].readIfPresent()
            value.licenseModel = try reader["LicenseModel"].readIfPresent()
            value.availabilityZoneGroup = try reader["AvailabilityZoneGroup"].readIfPresent()
            value.availabilityZones = try reader["AvailabilityZones"].readListIfPresent(memberReadingClosure: RDSClientTypes.AvailabilityZone.readingClosure, memberNodeInfo: "AvailabilityZone", isFlattened: false)
            value.multiAZCapable = try reader["MultiAZCapable"].readIfPresent()
            value.readReplicaCapable = try reader["ReadReplicaCapable"].readIfPresent()
            value.vpc = try reader["Vpc"].readIfPresent()
            value.supportsStorageEncryption = try reader["SupportsStorageEncryption"].readIfPresent()
            value.storageType = try reader["StorageType"].readIfPresent()
            value.supportsIops = try reader["SupportsIops"].readIfPresent()
            value.supportsEnhancedMonitoring = try reader["SupportsEnhancedMonitoring"].readIfPresent()
            value.supportsIAMDatabaseAuthentication = try reader["SupportsIAMDatabaseAuthentication"].readIfPresent()
            value.supportsPerformanceInsights = try reader["SupportsPerformanceInsights"].readIfPresent()
            value.minStorageSize = try reader["MinStorageSize"].readIfPresent()
            value.maxStorageSize = try reader["MaxStorageSize"].readIfPresent()
            value.minIopsPerDbInstance = try reader["MinIopsPerDbInstance"].readIfPresent()
            value.maxIopsPerDbInstance = try reader["MaxIopsPerDbInstance"].readIfPresent()
            value.minIopsPerGib = try reader["MinIopsPerGib"].readIfPresent()
            value.maxIopsPerGib = try reader["MaxIopsPerGib"].readIfPresent()
            value.availableProcessorFeatures = try reader["AvailableProcessorFeatures"].readListIfPresent(memberReadingClosure: RDSClientTypes.AvailableProcessorFeature.readingClosure, memberNodeInfo: "AvailableProcessorFeature", isFlattened: false)
            value.supportedEngineModes = try reader["SupportedEngineModes"].readListIfPresent(memberReadingClosure: Swift.String.readingClosure, memberNodeInfo: "member", isFlattened: false)
            value.supportsStorageAutoscaling = try reader["SupportsStorageAutoscaling"].readIfPresent()
            value.supportsKerberosAuthentication = try reader["SupportsKerberosAuthentication"].readIfPresent()
            value.outpostCapable = try reader["OutpostCapable"].readIfPresent()
            value.supportedActivityStreamModes = try reader["SupportedActivityStreamModes"].readListIfPresent(memberReadingClosure: Swift.String.readingClosure, memberNodeInfo: "member", isFlattened: false)
            value.supportsGlobalDatabases = try reader["SupportsGlobalDatabases"].readIfPresent()
            value.supportsClusters = try reader["SupportsClusters"].readIfPresent()
            value.supportedNetworkTypes = try reader["SupportedNetworkTypes"].readListIfPresent(memberReadingClosure: Swift.String.readingClosure, memberNodeInfo: "member", isFlattened: false)
            value.supportsStorageThroughput = try reader["SupportsStorageThroughput"].readIfPresent()
            value.minStorageThroughputPerDbInstance = try reader["MinStorageThroughputPerDbInstance"].readIfPresent()
            value.maxStorageThroughputPerDbInstance = try reader["MaxStorageThroughputPerDbInstance"].readIfPresent()
            value.minStorageThroughputPerIops = try reader["MinStorageThroughputPerIops"].readIfPresent()
            value.maxStorageThroughputPerIops = try reader["MaxStorageThroughputPerIops"].readIfPresent()
            value.supportsDedicatedLogVolume = try reader["SupportsDedicatedLogVolume"].readIfPresent()
            return value
        }
    }
}

extension RDSClientTypes {
    /// Contains a list of available options for a DB instance. This data type is used as a response element in the DescribeOrderableDBInstanceOptions action.
    public struct OrderableDBInstanceOption: Swift.Equatable {
        /// The Availability Zone group for a DB instance.
        public var availabilityZoneGroup: Swift.String?
        /// A list of Availability Zones for a DB instance.
        public var availabilityZones: [RDSClientTypes.AvailabilityZone]?
        /// A list of the available processor features for the DB instance class of a DB instance.
        public var availableProcessorFeatures: [RDSClientTypes.AvailableProcessorFeature]?
        /// The DB instance class for a DB instance.
        public var dbInstanceClass: Swift.String?
        /// The engine type of a DB instance.
        public var engine: Swift.String?
        /// The engine version of a DB instance.
        public var engineVersion: Swift.String?
        /// The license model for a DB instance.
        public var licenseModel: Swift.String?
        /// Maximum total provisioned IOPS for a DB instance.
        public var maxIopsPerDbInstance: Swift.Int?
        /// Maximum provisioned IOPS per GiB for a DB instance.
        public var maxIopsPerGib: Swift.Double?
        /// Maximum storage size for a DB instance.
        public var maxStorageSize: Swift.Int?
        /// Maximum storage throughput for a DB instance.
        public var maxStorageThroughputPerDbInstance: Swift.Int?
        /// Maximum storage throughput to provisioned IOPS ratio for a DB instance.
        public var maxStorageThroughputPerIops: Swift.Double?
        /// Minimum total provisioned IOPS for a DB instance.
        public var minIopsPerDbInstance: Swift.Int?
        /// Minimum provisioned IOPS per GiB for a DB instance.
        public var minIopsPerGib: Swift.Double?
        /// Minimum storage size for a DB instance.
        public var minStorageSize: Swift.Int?
        /// Minimum storage throughput for a DB instance.
        public var minStorageThroughputPerDbInstance: Swift.Int?
        /// Minimum storage throughput to provisioned IOPS ratio for a DB instance.
        public var minStorageThroughputPerIops: Swift.Double?
        /// Indicates whether a DB instance is Multi-AZ capable.
        public var multiAZCapable: Swift.Bool?
        /// Indicates whether a DB instance supports RDS on Outposts. For more information about RDS on Outposts, see [Amazon RDS on Amazon Web Services Outposts](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/rds-on-outposts.html) in the Amazon RDS User Guide.
        public var outpostCapable: Swift.Bool?
        /// Indicates whether a DB instance can have a read replica.
        public var readReplicaCapable: Swift.Bool?
        /// The storage type for a DB instance.
        public var storageType: Swift.String?
        /// The list of supported modes for Database Activity Streams. Aurora PostgreSQL returns the value [sync, async]. Aurora MySQL and RDS for Oracle return [async] only. If Database Activity Streams isn't supported, the return value is an empty list.
        public var supportedActivityStreamModes: [Swift.String]?
        /// A list of the supported DB engine modes.
        public var supportedEngineModes: [Swift.String]?
        /// The network types supported by the DB instance (IPV4 or DUAL). A DB instance can support only the IPv4 protocol or the IPv4 and the IPv6 protocols (DUAL). For more information, see [ Working with a DB instance in a VPC](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_VPC.WorkingWithRDSInstanceinaVPC.html) in the Amazon RDS User Guide.
        public var supportedNetworkTypes: [Swift.String]?
        /// Indicates whether DB instances can be configured as a Multi-AZ DB cluster. For more information on Multi-AZ DB clusters, see [ Multi-AZ deployments with two readable standby DB instances](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/multi-az-db-clusters-concepts.html) in the Amazon RDS User Guide.
        public var supportsClusters: Swift.Bool?
        /// Indicates whether a DB instance supports using a dedicated log volume (DLV).
        public var supportsDedicatedLogVolume: Swift.Bool?
        /// Indicates whether a DB instance supports Enhanced Monitoring at intervals from 1 to 60 seconds.
        public var supportsEnhancedMonitoring: Swift.Bool?
        /// Indicates whether you can use Aurora global databases with a specific combination of other DB engine attributes.
        public var supportsGlobalDatabases: Swift.Bool?
        /// Indicates whether a DB instance supports IAM database authentication.
        public var supportsIAMDatabaseAuthentication: Swift.Bool?
        /// Indicates whether a DB instance supports provisioned IOPS.
        public var supportsIops: Swift.Bool?
        /// Indicates whether a DB instance supports Kerberos Authentication.
        public var supportsKerberosAuthentication: Swift.Bool?
        /// Indicates whether a DB instance supports Performance Insights.
        public var supportsPerformanceInsights: Swift.Bool?
        /// Indicates whether Amazon RDS can automatically scale storage for DB instances that use the specified DB instance class.
        public var supportsStorageAutoscaling: Swift.Bool?
        /// Indicates whether a DB instance supports encrypted storage.
        public var supportsStorageEncryption: Swift.Bool?
        /// Indicates whether a DB instance supports storage throughput.
        public var supportsStorageThroughput: Swift.Bool?
        /// Indicates whether a DB instance is in a VPC.
        public var vpc: Swift.Bool?

        public init(
            availabilityZoneGroup: Swift.String? = nil,
            availabilityZones: [RDSClientTypes.AvailabilityZone]? = nil,
            availableProcessorFeatures: [RDSClientTypes.AvailableProcessorFeature]? = nil,
            dbInstanceClass: Swift.String? = nil,
            engine: Swift.String? = nil,
            engineVersion: Swift.String? = nil,
            licenseModel: Swift.String? = nil,
            maxIopsPerDbInstance: Swift.Int? = nil,
            maxIopsPerGib: Swift.Double? = nil,
            maxStorageSize: Swift.Int? = nil,
            maxStorageThroughputPerDbInstance: Swift.Int? = nil,
            maxStorageThroughputPerIops: Swift.Double? = nil,
            minIopsPerDbInstance: Swift.Int? = nil,
            minIopsPerGib: Swift.Double? = nil,
            minStorageSize: Swift.Int? = nil,
            minStorageThroughputPerDbInstance: Swift.Int? = nil,
            minStorageThroughputPerIops: Swift.Double? = nil,
            multiAZCapable: Swift.Bool? = nil,
            outpostCapable: Swift.Bool? = nil,
            readReplicaCapable: Swift.Bool? = nil,
            storageType: Swift.String? = nil,
            supportedActivityStreamModes: [Swift.String]? = nil,
            supportedEngineModes: [Swift.String]? = nil,
            supportedNetworkTypes: [Swift.String]? = nil,
            supportsClusters: Swift.Bool? = nil,
            supportsDedicatedLogVolume: Swift.Bool? = nil,
            supportsEnhancedMonitoring: Swift.Bool? = nil,
            supportsGlobalDatabases: Swift.Bool? = nil,
            supportsIAMDatabaseAuthentication: Swift.Bool? = nil,
            supportsIops: Swift.Bool? = nil,
            supportsKerberosAuthentication: Swift.Bool? = nil,
            supportsPerformanceInsights: Swift.Bool? = nil,
            supportsStorageAutoscaling: Swift.Bool? = nil,
            supportsStorageEncryption: Swift.Bool? = nil,
            supportsStorageThroughput: Swift.Bool? = nil,
            vpc: Swift.Bool? = nil
        )
        {
            self.availabilityZoneGroup = availabilityZoneGroup
            self.availabilityZones = availabilityZones
            self.availableProcessorFeatures = availableProcessorFeatures
            self.dbInstanceClass = dbInstanceClass
            self.engine = engine
            self.engineVersion = engineVersion
            self.licenseModel = licenseModel
            self.maxIopsPerDbInstance = maxIopsPerDbInstance
            self.maxIopsPerGib = maxIopsPerGib
            self.maxStorageSize = maxStorageSize
            self.maxStorageThroughputPerDbInstance = maxStorageThroughputPerDbInstance
            self.maxStorageThroughputPerIops = maxStorageThroughputPerIops
            self.minIopsPerDbInstance = minIopsPerDbInstance
            self.minIopsPerGib = minIopsPerGib
            self.minStorageSize = minStorageSize
            self.minStorageThroughputPerDbInstance = minStorageThroughputPerDbInstance
            self.minStorageThroughputPerIops = minStorageThroughputPerIops
            self.multiAZCapable = multiAZCapable
            self.outpostCapable = outpostCapable
            self.readReplicaCapable = readReplicaCapable
            self.storageType = storageType
            self.supportedActivityStreamModes = supportedActivityStreamModes
            self.supportedEngineModes = supportedEngineModes
            self.supportedNetworkTypes = supportedNetworkTypes
            self.supportsClusters = supportsClusters
            self.supportsDedicatedLogVolume = supportsDedicatedLogVolume
            self.supportsEnhancedMonitoring = supportsEnhancedMonitoring
            self.supportsGlobalDatabases = supportsGlobalDatabases
            self.supportsIAMDatabaseAuthentication = supportsIAMDatabaseAuthentication
            self.supportsIops = supportsIops
            self.supportsKerberosAuthentication = supportsKerberosAuthentication
            self.supportsPerformanceInsights = supportsPerformanceInsights
            self.supportsStorageAutoscaling = supportsStorageAutoscaling
            self.supportsStorageEncryption = supportsStorageEncryption
            self.supportsStorageThroughput = supportsStorageThroughput
            self.vpc = vpc
        }
    }

}

extension RDSClientTypes.Outpost: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case arn = "Arn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let arn = arn {
            try container.encode(arn, forKey: ClientRuntime.Key("Arn"))
        }
    }

    static var readingClosure: SmithyReadWrite.ReadingClosure<RDSClientTypes.Outpost, SmithyXML.Reader> {
        return { reader in
            guard reader.content != nil else { return nil }
            var value = RDSClientTypes.Outpost()
            value.arn = try reader["Arn"].readIfPresent()
            return value
        }
    }
}

extension RDSClientTypes {
    /// A data type that represents an Outpost. For more information about RDS on Outposts, see [Amazon RDS on Amazon Web Services Outposts](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/rds-on-outposts.html) in the Amazon RDS User Guide.
    public struct Outpost: Swift.Equatable {
        /// The Amazon Resource Name (ARN) of the Outpost.
        public var arn: Swift.String?

        public init(
            arn: Swift.String? = nil
        )
        {
            self.arn = arn
        }
    }

}

extension RDSClientTypes.Parameter: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case allowedValues = "AllowedValues"
        case applyMethod = "ApplyMethod"
        case applyType = "ApplyType"
        case dataType = "DataType"
        case description = "Description"
        case isModifiable = "IsModifiable"
        case minimumEngineVersion = "MinimumEngineVersion"
        case parameterName = "ParameterName"
        case parameterValue = "ParameterValue"
        case source = "Source"
        case supportedEngineModes = "SupportedEngineModes"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let allowedValues = allowedValues {
            try container.encode(allowedValues, forKey: ClientRuntime.Key("AllowedValues"))
        }
        if let applyMethod = applyMethod {
            try container.encode(applyMethod, forKey: ClientRuntime.Key("ApplyMethod"))
        }
        if let applyType = applyType {
            try container.encode(applyType, forKey: ClientRuntime.Key("ApplyType"))
        }
        if let dataType = dataType {
            try container.encode(dataType, forKey: ClientRuntime.Key("DataType"))
        }
        if let description = description {
            try container.encode(description, forKey: ClientRuntime.Key("Description"))
        }
        if let isModifiable = isModifiable {
            try container.encode(isModifiable, forKey: ClientRuntime.Key("IsModifiable"))
        }
        if let minimumEngineVersion = minimumEngineVersion {
            try container.encode(minimumEngineVersion, forKey: ClientRuntime.Key("MinimumEngineVersion"))
        }
        if let parameterName = parameterName {
            try container.encode(parameterName, forKey: ClientRuntime.Key("ParameterName"))
        }
        if let parameterValue = parameterValue {
            try container.encode(parameterValue, forKey: ClientRuntime.Key("ParameterValue"))
        }
        if let source = source {
            try container.encode(source, forKey: ClientRuntime.Key("Source"))
        }
        if let supportedEngineModes = supportedEngineModes {
            if !supportedEngineModes.isEmpty {
                var supportedEngineModesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("SupportedEngineModes"))
                for (index0, string0) in supportedEngineModes.enumerated() {
                    try supportedEngineModesContainer.encode(string0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var supportedEngineModesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("SupportedEngineModes"))
                try supportedEngineModesContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
    }

    static var readingClosure: SmithyReadWrite.ReadingClosure<RDSClientTypes.Parameter, SmithyXML.Reader> {
        return { reader in
            guard reader.content != nil else { return nil }
            var value = RDSClientTypes.Parameter()
            value.parameterName = try reader["ParameterName"].readIfPresent()
            value.parameterValue = try reader["ParameterValue"].readIfPresent()
            value.description = try reader["Description"].readIfPresent()
            value.source = try reader["Source"].readIfPresent()
            value.applyType = try reader["ApplyType"].readIfPresent()
            value.dataType = try reader["DataType"].readIfPresent()
            value.allowedValues = try reader["AllowedValues"].readIfPresent()
            value.isModifiable = try reader["IsModifiable"].readIfPresent()
            value.minimumEngineVersion = try reader["MinimumEngineVersion"].readIfPresent()
            value.applyMethod = try reader["ApplyMethod"].readIfPresent()
            value.supportedEngineModes = try reader["SupportedEngineModes"].readListIfPresent(memberReadingClosure: Swift.String.readingClosure, memberNodeInfo: "member", isFlattened: false)
            return value
        }
    }
}

extension RDSClientTypes {
    /// This data type is used as a request parameter in the ModifyDBParameterGroup and ResetDBParameterGroup actions. This data type is used as a response element in the DescribeEngineDefaultParameters and DescribeDBParameters actions.
    public struct Parameter: Swift.Equatable {
        /// Specifies the valid range of values for the parameter.
        public var allowedValues: Swift.String?
        /// Indicates when to apply parameter updates.
        public var applyMethod: RDSClientTypes.ApplyMethod?
        /// Specifies the engine specific parameters type.
        public var applyType: Swift.String?
        /// Specifies the valid data type for the parameter.
        public var dataType: Swift.String?
        /// Provides a description of the parameter.
        public var description: Swift.String?
        /// Indicates whether (true) or not (false) the parameter can be modified. Some parameters have security or operational implications that prevent them from being changed.
        public var isModifiable: Swift.Bool?
        /// The earliest engine version to which the parameter can apply.
        public var minimumEngineVersion: Swift.String?
        /// The name of the parameter.
        public var parameterName: Swift.String?
        /// The value of the parameter.
        public var parameterValue: Swift.String?
        /// The source of the parameter value.
        public var source: Swift.String?
        /// The valid DB engine modes.
        public var supportedEngineModes: [Swift.String]?

        public init(
            allowedValues: Swift.String? = nil,
            applyMethod: RDSClientTypes.ApplyMethod? = nil,
            applyType: Swift.String? = nil,
            dataType: Swift.String? = nil,
            description: Swift.String? = nil,
            isModifiable: Swift.Bool? = nil,
            minimumEngineVersion: Swift.String? = nil,
            parameterName: Swift.String? = nil,
            parameterValue: Swift.String? = nil,
            source: Swift.String? = nil,
            supportedEngineModes: [Swift.String]? = nil
        )
        {
            self.allowedValues = allowedValues
            self.applyMethod = applyMethod
            self.applyType = applyType
            self.dataType = dataType
            self.description = description
            self.isModifiable = isModifiable
            self.minimumEngineVersion = minimumEngineVersion
            self.parameterName = parameterName
            self.parameterValue = parameterValue
            self.source = source
            self.supportedEngineModes = supportedEngineModes
        }
    }

}

extension RDSClientTypes.PendingCloudwatchLogsExports: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case logTypesToDisable = "LogTypesToDisable"
        case logTypesToEnable = "LogTypesToEnable"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let logTypesToDisable = logTypesToDisable {
            if !logTypesToDisable.isEmpty {
                var logTypesToDisableContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("LogTypesToDisable"))
                for (index0, string0) in logTypesToDisable.enumerated() {
                    try logTypesToDisableContainer.encode(string0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var logTypesToDisableContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("LogTypesToDisable"))
                try logTypesToDisableContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let logTypesToEnable = logTypesToEnable {
            if !logTypesToEnable.isEmpty {
                var logTypesToEnableContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("LogTypesToEnable"))
                for (index0, string0) in logTypesToEnable.enumerated() {
                    try logTypesToEnableContainer.encode(string0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var logTypesToEnableContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("LogTypesToEnable"))
                try logTypesToEnableContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
    }

    static var readingClosure: SmithyReadWrite.ReadingClosure<RDSClientTypes.PendingCloudwatchLogsExports, SmithyXML.Reader> {
        return { reader in
            guard reader.content != nil else { return nil }
            var value = RDSClientTypes.PendingCloudwatchLogsExports()
            value.logTypesToEnable = try reader["LogTypesToEnable"].readListIfPresent(memberReadingClosure: Swift.String.readingClosure, memberNodeInfo: "member", isFlattened: false)
            value.logTypesToDisable = try reader["LogTypesToDisable"].readListIfPresent(memberReadingClosure: Swift.String.readingClosure, memberNodeInfo: "member", isFlattened: false)
            return value
        }
    }
}

extension RDSClientTypes {
    /// A list of the log types whose configuration is still pending. In other words, these log types are in the process of being activated or deactivated.
    public struct PendingCloudwatchLogsExports: Swift.Equatable {
        /// Log types that are in the process of being enabled. After they are enabled, these log types are exported to CloudWatch Logs.
        public var logTypesToDisable: [Swift.String]?
        /// Log types that are in the process of being deactivated. After they are deactivated, these log types aren't exported to CloudWatch Logs.
        public var logTypesToEnable: [Swift.String]?

        public init(
            logTypesToDisable: [Swift.String]? = nil,
            logTypesToEnable: [Swift.String]? = nil
        )
        {
            self.logTypesToDisable = logTypesToDisable
            self.logTypesToEnable = logTypesToEnable
        }
    }

}

extension RDSClientTypes.PendingMaintenanceAction: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case action = "Action"
        case autoAppliedAfterDate = "AutoAppliedAfterDate"
        case currentApplyDate = "CurrentApplyDate"
        case description = "Description"
        case forcedApplyDate = "ForcedApplyDate"
        case optInStatus = "OptInStatus"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let action = action {
            try container.encode(action, forKey: ClientRuntime.Key("Action"))
        }
        if let autoAppliedAfterDate = autoAppliedAfterDate {
            try container.encodeTimestamp(autoAppliedAfterDate, format: .dateTime, forKey: ClientRuntime.Key("AutoAppliedAfterDate"))
        }
        if let currentApplyDate = currentApplyDate {
            try container.encodeTimestamp(currentApplyDate, format: .dateTime, forKey: ClientRuntime.Key("CurrentApplyDate"))
        }
        if let description = description {
            try container.encode(description, forKey: ClientRuntime.Key("Description"))
        }
        if let forcedApplyDate = forcedApplyDate {
            try container.encodeTimestamp(forcedApplyDate, format: .dateTime, forKey: ClientRuntime.Key("ForcedApplyDate"))
        }
        if let optInStatus = optInStatus {
            try container.encode(optInStatus, forKey: ClientRuntime.Key("OptInStatus"))
        }
    }

    static var readingClosure: SmithyReadWrite.ReadingClosure<RDSClientTypes.PendingMaintenanceAction, SmithyXML.Reader> {
        return { reader in
            guard reader.content != nil else { return nil }
            var value = RDSClientTypes.PendingMaintenanceAction()
            value.action = try reader["Action"].readIfPresent()
            value.autoAppliedAfterDate = try reader["AutoAppliedAfterDate"].readTimestampIfPresent(format: .dateTime)
            value.forcedApplyDate = try reader["ForcedApplyDate"].readTimestampIfPresent(format: .dateTime)
            value.optInStatus = try reader["OptInStatus"].readIfPresent()
            value.currentApplyDate = try reader["CurrentApplyDate"].readTimestampIfPresent(format: .dateTime)
            value.description = try reader["Description"].readIfPresent()
            return value
        }
    }
}

extension RDSClientTypes {
    /// Provides information about a pending maintenance action for a resource.
    public struct PendingMaintenanceAction: Swift.Equatable {
        /// The type of pending maintenance action that is available for the resource. Valid actions are system-update, db-upgrade, hardware-maintenance, and ca-certificate-rotation.
        public var action: Swift.String?
        /// The date of the maintenance window when the action is applied. The maintenance action is applied to the resource during its first maintenance window after this date.
        public var autoAppliedAfterDate: ClientRuntime.Date?
        /// The effective date when the pending maintenance action is applied to the resource. This date takes into account opt-in requests received from the ApplyPendingMaintenanceAction API, the AutoAppliedAfterDate, and the ForcedApplyDate. This value is blank if an opt-in request has not been received and nothing has been specified as AutoAppliedAfterDate or ForcedApplyDate.
        public var currentApplyDate: ClientRuntime.Date?
        /// A description providing more detail about the maintenance action.
        public var description: Swift.String?
        /// The date when the maintenance action is automatically applied. On this date, the maintenance action is applied to the resource as soon as possible, regardless of the maintenance window for the resource. There might be a delay of one or more days from this date before the maintenance action is applied.
        public var forcedApplyDate: ClientRuntime.Date?
        /// Indicates the type of opt-in request that has been received for the resource.
        public var optInStatus: Swift.String?

        public init(
            action: Swift.String? = nil,
            autoAppliedAfterDate: ClientRuntime.Date? = nil,
            currentApplyDate: ClientRuntime.Date? = nil,
            description: Swift.String? = nil,
            forcedApplyDate: ClientRuntime.Date? = nil,
            optInStatus: Swift.String? = nil
        )
        {
            self.action = action
            self.autoAppliedAfterDate = autoAppliedAfterDate
            self.currentApplyDate = currentApplyDate
            self.description = description
            self.forcedApplyDate = forcedApplyDate
            self.optInStatus = optInStatus
        }
    }

}

extension RDSClientTypes.PendingModifiedValues: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case allocatedStorage = "AllocatedStorage"
        case automationMode = "AutomationMode"
        case backupRetentionPeriod = "BackupRetentionPeriod"
        case caCertificateIdentifier = "CACertificateIdentifier"
        case dbInstanceClass = "DBInstanceClass"
        case dbInstanceIdentifier = "DBInstanceIdentifier"
        case dbSubnetGroupName = "DBSubnetGroupName"
        case dedicatedLogVolume = "DedicatedLogVolume"
        case engine = "Engine"
        case engineVersion = "EngineVersion"
        case iamDatabaseAuthenticationEnabled = "IAMDatabaseAuthenticationEnabled"
        case iops = "Iops"
        case licenseModel = "LicenseModel"
        case masterUserPassword = "MasterUserPassword"
        case multiAZ = "MultiAZ"
        case multiTenant = "MultiTenant"
        case pendingCloudwatchLogsExports = "PendingCloudwatchLogsExports"
        case port = "Port"
        case processorFeatures = "ProcessorFeatures"
        case resumeFullAutomationModeTime = "ResumeFullAutomationModeTime"
        case storageThroughput = "StorageThroughput"
        case storageType = "StorageType"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let allocatedStorage = allocatedStorage {
            try container.encode(allocatedStorage, forKey: ClientRuntime.Key("AllocatedStorage"))
        }
        if let automationMode = automationMode {
            try container.encode(automationMode, forKey: ClientRuntime.Key("AutomationMode"))
        }
        if let backupRetentionPeriod = backupRetentionPeriod {
            try container.encode(backupRetentionPeriod, forKey: ClientRuntime.Key("BackupRetentionPeriod"))
        }
        if let caCertificateIdentifier = caCertificateIdentifier {
            try container.encode(caCertificateIdentifier, forKey: ClientRuntime.Key("CACertificateIdentifier"))
        }
        if let dbInstanceClass = dbInstanceClass {
            try container.encode(dbInstanceClass, forKey: ClientRuntime.Key("DBInstanceClass"))
        }
        if let dbInstanceIdentifier = dbInstanceIdentifier {
            try container.encode(dbInstanceIdentifier, forKey: ClientRuntime.Key("DBInstanceIdentifier"))
        }
        if let dbSubnetGroupName = dbSubnetGroupName {
            try container.encode(dbSubnetGroupName, forKey: ClientRuntime.Key("DBSubnetGroupName"))
        }
        if let dedicatedLogVolume = dedicatedLogVolume {
            try container.encode(dedicatedLogVolume, forKey: ClientRuntime.Key("DedicatedLogVolume"))
        }
        if let engine = engine {
            try container.encode(engine, forKey: ClientRuntime.Key("Engine"))
        }
        if let engineVersion = engineVersion {
            try container.encode(engineVersion, forKey: ClientRuntime.Key("EngineVersion"))
        }
        if let iamDatabaseAuthenticationEnabled = iamDatabaseAuthenticationEnabled {
            try container.encode(iamDatabaseAuthenticationEnabled, forKey: ClientRuntime.Key("IAMDatabaseAuthenticationEnabled"))
        }
        if let iops = iops {
            try container.encode(iops, forKey: ClientRuntime.Key("Iops"))
        }
        if let licenseModel = licenseModel {
            try container.encode(licenseModel, forKey: ClientRuntime.Key("LicenseModel"))
        }
        if let masterUserPassword = masterUserPassword {
            try container.encode(masterUserPassword, forKey: ClientRuntime.Key("MasterUserPassword"))
        }
        if let multiAZ = multiAZ {
            try container.encode(multiAZ, forKey: ClientRuntime.Key("MultiAZ"))
        }
        if let multiTenant = multiTenant {
            try container.encode(multiTenant, forKey: ClientRuntime.Key("MultiTenant"))
        }
        if let pendingCloudwatchLogsExports = pendingCloudwatchLogsExports {
            try container.encode(pendingCloudwatchLogsExports, forKey: ClientRuntime.Key("PendingCloudwatchLogsExports"))
        }
        if let port = port {
            try container.encode(port, forKey: ClientRuntime.Key("Port"))
        }
        if let processorFeatures = processorFeatures {
            if !processorFeatures.isEmpty {
                var processorFeaturesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("ProcessorFeatures"))
                for (index0, processorfeature0) in processorFeatures.enumerated() {
                    try processorFeaturesContainer.encode(processorfeature0, forKey: ClientRuntime.Key("ProcessorFeature.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var processorFeaturesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("ProcessorFeatures"))
                try processorFeaturesContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let resumeFullAutomationModeTime = resumeFullAutomationModeTime {
            try container.encodeTimestamp(resumeFullAutomationModeTime, format: .dateTime, forKey: ClientRuntime.Key("ResumeFullAutomationModeTime"))
        }
        if let storageThroughput = storageThroughput {
            try container.encode(storageThroughput, forKey: ClientRuntime.Key("StorageThroughput"))
        }
        if let storageType = storageType {
            try container.encode(storageType, forKey: ClientRuntime.Key("StorageType"))
        }
    }

    static var readingClosure: SmithyReadWrite.ReadingClosure<RDSClientTypes.PendingModifiedValues, SmithyXML.Reader> {
        return { reader in
            guard reader.content != nil else { return nil }
            var value = RDSClientTypes.PendingModifiedValues()
            value.dbInstanceClass = try reader["DBInstanceClass"].readIfPresent()
            value.allocatedStorage = try reader["AllocatedStorage"].readIfPresent()
            value.masterUserPassword = try reader["MasterUserPassword"].readIfPresent()
            value.port = try reader["Port"].readIfPresent()
            value.backupRetentionPeriod = try reader["BackupRetentionPeriod"].readIfPresent()
            value.multiAZ = try reader["MultiAZ"].readIfPresent()
            value.engineVersion = try reader["EngineVersion"].readIfPresent()
            value.licenseModel = try reader["LicenseModel"].readIfPresent()
            value.iops = try reader["Iops"].readIfPresent()
            value.dbInstanceIdentifier = try reader["DBInstanceIdentifier"].readIfPresent()
            value.storageType = try reader["StorageType"].readIfPresent()
            value.caCertificateIdentifier = try reader["CACertificateIdentifier"].readIfPresent()
            value.dbSubnetGroupName = try reader["DBSubnetGroupName"].readIfPresent()
            value.pendingCloudwatchLogsExports = try reader["PendingCloudwatchLogsExports"].readIfPresent(readingClosure: RDSClientTypes.PendingCloudwatchLogsExports.readingClosure)
            value.processorFeatures = try reader["ProcessorFeatures"].readListIfPresent(memberReadingClosure: RDSClientTypes.ProcessorFeature.readingClosure, memberNodeInfo: "ProcessorFeature", isFlattened: false)
            value.iamDatabaseAuthenticationEnabled = try reader["IAMDatabaseAuthenticationEnabled"].readIfPresent()
            value.automationMode = try reader["AutomationMode"].readIfPresent()
            value.resumeFullAutomationModeTime = try reader["ResumeFullAutomationModeTime"].readTimestampIfPresent(format: .dateTime)
            value.storageThroughput = try reader["StorageThroughput"].readIfPresent()
            value.engine = try reader["Engine"].readIfPresent()
            value.dedicatedLogVolume = try reader["DedicatedLogVolume"].readIfPresent()
            value.multiTenant = try reader["MultiTenant"].readIfPresent()
            return value
        }
    }
}

extension RDSClientTypes {
    /// This data type is used as a response element in the ModifyDBInstance operation and contains changes that will be applied during the next maintenance window.
    public struct PendingModifiedValues: Swift.Equatable {
        /// The allocated storage size for the DB instance specified in gibibytes (GiB).
        public var allocatedStorage: Swift.Int?
        /// The automation mode of the RDS Custom DB instance: full or all-paused. If full, the DB instance automates monitoring and instance recovery. If all-paused, the instance pauses automation for the duration set by --resume-full-automation-mode-minutes.
        public var automationMode: RDSClientTypes.AutomationMode?
        /// The number of days for which automated backups are retained.
        public var backupRetentionPeriod: Swift.Int?
        /// The identifier of the CA certificate for the DB instance. For more information, see [Using SSL/TLS to encrypt a connection to a DB instance](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.SSL.html) in the Amazon RDS User Guide and [ Using SSL/TLS to encrypt a connection to a DB cluster](https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/UsingWithRDS.SSL.html) in the Amazon Aurora User Guide.
        public var caCertificateIdentifier: Swift.String?
        /// The name of the compute and memory capacity class for the DB instance.
        public var dbInstanceClass: Swift.String?
        /// The database identifier for the DB instance.
        public var dbInstanceIdentifier: Swift.String?
        /// The DB subnet group for the DB instance.
        public var dbSubnetGroupName: Swift.String?
        /// Indicates whether the DB instance has a dedicated log volume (DLV) enabled.>
        public var dedicatedLogVolume: Swift.Bool?
        /// The database engine of the DB instance.
        public var engine: Swift.String?
        /// The database engine version.
        public var engineVersion: Swift.String?
        /// Indicates whether mapping of Amazon Web Services Identity and Access Management (IAM) accounts to database accounts is enabled.
        public var iamDatabaseAuthenticationEnabled: Swift.Bool?
        /// The Provisioned IOPS value for the DB instance.
        public var iops: Swift.Int?
        /// The license model for the DB instance. Valid values: license-included | bring-your-own-license | general-public-license
        public var licenseModel: Swift.String?
        /// The master credentials for the DB instance.
        public var masterUserPassword: Swift.String?
        /// Indicates whether the Single-AZ DB instance will change to a Multi-AZ deployment.
        public var multiAZ: Swift.Bool?
        /// Indicates whether the DB instance will change to the multi-tenant configuration (TRUE) or the single-tenant configuration (FALSE).
        public var multiTenant: Swift.Bool?
        /// A list of the log types whose configuration is still pending. In other words, these log types are in the process of being activated or deactivated.
        public var pendingCloudwatchLogsExports: RDSClientTypes.PendingCloudwatchLogsExports?
        /// The port for the DB instance.
        public var port: Swift.Int?
        /// The number of CPU cores and the number of threads per core for the DB instance class of the DB instance.
        public var processorFeatures: [RDSClientTypes.ProcessorFeature]?
        /// The number of minutes to pause the automation. When the time period ends, RDS Custom resumes full automation. The minimum value is 60 (default). The maximum value is 1,440.
        public var resumeFullAutomationModeTime: ClientRuntime.Date?
        /// The storage throughput of the DB instance.
        public var storageThroughput: Swift.Int?
        /// The storage type of the DB instance.
        public var storageType: Swift.String?

        public init(
            allocatedStorage: Swift.Int? = nil,
            automationMode: RDSClientTypes.AutomationMode? = nil,
            backupRetentionPeriod: Swift.Int? = nil,
            caCertificateIdentifier: Swift.String? = nil,
            dbInstanceClass: Swift.String? = nil,
            dbInstanceIdentifier: Swift.String? = nil,
            dbSubnetGroupName: Swift.String? = nil,
            dedicatedLogVolume: Swift.Bool? = nil,
            engine: Swift.String? = nil,
            engineVersion: Swift.String? = nil,
            iamDatabaseAuthenticationEnabled: Swift.Bool? = nil,
            iops: Swift.Int? = nil,
            licenseModel: Swift.String? = nil,
            masterUserPassword: Swift.String? = nil,
            multiAZ: Swift.Bool? = nil,
            multiTenant: Swift.Bool? = nil,
            pendingCloudwatchLogsExports: RDSClientTypes.PendingCloudwatchLogsExports? = nil,
            port: Swift.Int? = nil,
            processorFeatures: [RDSClientTypes.ProcessorFeature]? = nil,
            resumeFullAutomationModeTime: ClientRuntime.Date? = nil,
            storageThroughput: Swift.Int? = nil,
            storageType: Swift.String? = nil
        )
        {
            self.allocatedStorage = allocatedStorage
            self.automationMode = automationMode
            self.backupRetentionPeriod = backupRetentionPeriod
            self.caCertificateIdentifier = caCertificateIdentifier
            self.dbInstanceClass = dbInstanceClass
            self.dbInstanceIdentifier = dbInstanceIdentifier
            self.dbSubnetGroupName = dbSubnetGroupName
            self.dedicatedLogVolume = dedicatedLogVolume
            self.engine = engine
            self.engineVersion = engineVersion
            self.iamDatabaseAuthenticationEnabled = iamDatabaseAuthenticationEnabled
            self.iops = iops
            self.licenseModel = licenseModel
            self.masterUserPassword = masterUserPassword
            self.multiAZ = multiAZ
            self.multiTenant = multiTenant
            self.pendingCloudwatchLogsExports = pendingCloudwatchLogsExports
            self.port = port
            self.processorFeatures = processorFeatures
            self.resumeFullAutomationModeTime = resumeFullAutomationModeTime
            self.storageThroughput = storageThroughput
            self.storageType = storageType
        }
    }

}

extension RDSClientTypes.PerformanceInsightsMetricDimensionGroup: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dimensions = "Dimensions"
        case group = "Group"
        case limit = "Limit"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let dimensions = dimensions {
            if !dimensions.isEmpty {
                var dimensionsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Dimensions"))
                for (index0, string0) in dimensions.enumerated() {
                    try dimensionsContainer.encode(string0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var dimensionsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Dimensions"))
                try dimensionsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let group = group {
            try container.encode(group, forKey: ClientRuntime.Key("Group"))
        }
        if let limit = limit {
            try container.encode(limit, forKey: ClientRuntime.Key("Limit"))
        }
    }

    static var readingClosure: SmithyReadWrite.ReadingClosure<RDSClientTypes.PerformanceInsightsMetricDimensionGroup, SmithyXML.Reader> {
        return { reader in
            guard reader.content != nil else { return nil }
            var value = RDSClientTypes.PerformanceInsightsMetricDimensionGroup()
            value.dimensions = try reader["Dimensions"].readListIfPresent(memberReadingClosure: Swift.String.readingClosure, memberNodeInfo: "member", isFlattened: false)
            value.group = try reader["Group"].readIfPresent()
            value.limit = try reader["Limit"].readIfPresent()
            return value
        }
    }
}

extension RDSClientTypes {
    /// A logical grouping of Performance Insights metrics for a related subject area. For example, the db.sql dimension group consists of the following dimensions:
    ///
    /// * db.sql.id - The hash of a running SQL statement, generated by Performance Insights.
    ///
    /// * db.sql.db_id - Either the SQL ID generated by the database engine, or a value generated by Performance Insights that begins with pi-.
    ///
    /// * db.sql.statement - The full text of the SQL statement that is running, for example, SELECT * FROM employees.
    ///
    /// * db.sql_tokenized.id - The hash of the SQL digest generated by Performance Insights.
    ///
    ///
    /// Each response element returns a maximum of 500 bytes. For larger elements, such as SQL statements, only the first 500 bytes are returned.
    public struct PerformanceInsightsMetricDimensionGroup: Swift.Equatable {
        /// A list of specific dimensions from a dimension group. If this list isn't included, then all of the dimensions in the group were requested, or are present in the response.
        public var dimensions: [Swift.String]?
        /// The available dimension groups for Performance Insights metric type.
        public var group: Swift.String?
        /// The maximum number of items to fetch for this dimension group.
        public var limit: Swift.Int?

        public init(
            dimensions: [Swift.String]? = nil,
            group: Swift.String? = nil,
            limit: Swift.Int? = nil
        )
        {
            self.dimensions = dimensions
            self.group = group
            self.limit = limit
        }
    }

}

extension RDSClientTypes.PerformanceInsightsMetricQuery: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case groupBy = "GroupBy"
        case metric = "Metric"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let groupBy = groupBy {
            try container.encode(groupBy, forKey: ClientRuntime.Key("GroupBy"))
        }
        if let metric = metric {
            try container.encode(metric, forKey: ClientRuntime.Key("Metric"))
        }
    }

    static var readingClosure: SmithyReadWrite.ReadingClosure<RDSClientTypes.PerformanceInsightsMetricQuery, SmithyXML.Reader> {
        return { reader in
            guard reader.content != nil else { return nil }
            var value = RDSClientTypes.PerformanceInsightsMetricQuery()
            value.groupBy = try reader["GroupBy"].readIfPresent(readingClosure: RDSClientTypes.PerformanceInsightsMetricDimensionGroup.readingClosure)
            value.metric = try reader["Metric"].readIfPresent()
            return value
        }
    }
}

extension RDSClientTypes {
    /// A single Performance Insights metric query to process. You must provide the metric to the query. If other parameters aren't specified, Performance Insights returns all data points for the specified metric. Optionally, you can request the data points to be aggregated by dimension group (GroupBy) and return only those data points that match your criteria (Filter). Constraints:
    ///
    /// * Must be a valid Performance Insights query.
    public struct PerformanceInsightsMetricQuery: Swift.Equatable {
        /// A specification for how to aggregate the data points from a query result. You must specify a valid dimension group. Performance Insights will return all of the dimensions within that group, unless you provide the names of specific dimensions within that group. You can also request that Performance Insights return a limited number of values for a dimension.
        public var groupBy: RDSClientTypes.PerformanceInsightsMetricDimensionGroup?
        /// The name of a Performance Insights metric to be measured. Valid Values:
        ///
        /// * db.load.avg - A scaled representation of the number of active sessions for the database engine.
        ///
        /// * db.sampledload.avg - The raw number of active sessions for the database engine.
        ///
        /// * The counter metrics listed in [Performance Insights operating system counters](https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_PerfInsights_Counters.html#USER_PerfInsights_Counters.OS) in the Amazon Aurora User Guide.
        ///
        ///
        /// If the number of active sessions is less than an internal Performance Insights threshold, db.load.avg and db.sampledload.avg are the same value. If the number of active sessions is greater than the internal threshold, Performance Insights samples the active sessions, with db.load.avg showing the scaled values, db.sampledload.avg showing the raw values, and db.sampledload.avg less than db.load.avg. For most use cases, you can query db.load.avg only.
        public var metric: Swift.String?

        public init(
            groupBy: RDSClientTypes.PerformanceInsightsMetricDimensionGroup? = nil,
            metric: Swift.String? = nil
        )
        {
            self.groupBy = groupBy
            self.metric = metric
        }
    }

}

extension RDSClientTypes.PerformanceIssueDetails: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case analysis = "Analysis"
        case endTime = "EndTime"
        case metrics = "Metrics"
        case startTime = "StartTime"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let analysis = analysis {
            try container.encode(analysis, forKey: ClientRuntime.Key("Analysis"))
        }
        if let endTime = endTime {
            try container.encodeTimestamp(endTime, format: .dateTime, forKey: ClientRuntime.Key("EndTime"))
        }
        if let metrics = metrics {
            if !metrics.isEmpty {
                var metricsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Metrics"))
                for (index0, metric0) in metrics.enumerated() {
                    try metricsContainer.encode(metric0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var metricsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Metrics"))
                try metricsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let startTime = startTime {
            try container.encodeTimestamp(startTime, format: .dateTime, forKey: ClientRuntime.Key("StartTime"))
        }
    }

    static var readingClosure: SmithyReadWrite.ReadingClosure<RDSClientTypes.PerformanceIssueDetails, SmithyXML.Reader> {
        return { reader in
            guard reader.content != nil else { return nil }
            var value = RDSClientTypes.PerformanceIssueDetails()
            value.startTime = try reader["StartTime"].readTimestampIfPresent(format: .dateTime)
            value.endTime = try reader["EndTime"].readTimestampIfPresent(format: .dateTime)
            value.metrics = try reader["Metrics"].readListIfPresent(memberReadingClosure: RDSClientTypes.Metric.readingClosure, memberNodeInfo: "member", isFlattened: false)
            value.analysis = try reader["Analysis"].readIfPresent()
            return value
        }
    }
}

extension RDSClientTypes {
    /// Details of the performance issue.
    public struct PerformanceIssueDetails: Swift.Equatable {
        /// The analysis of the performance issue. The information might contain markdown.
        public var analysis: Swift.String?
        /// The time when the performance issue stopped.
        public var endTime: ClientRuntime.Date?
        /// The metrics that are relevant to the performance issue.
        public var metrics: [RDSClientTypes.Metric]?
        /// The time when the performance issue started.
        public var startTime: ClientRuntime.Date?

        public init(
            analysis: Swift.String? = nil,
            endTime: ClientRuntime.Date? = nil,
            metrics: [RDSClientTypes.Metric]? = nil,
            startTime: ClientRuntime.Date? = nil
        )
        {
            self.analysis = analysis
            self.endTime = endTime
            self.metrics = metrics
            self.startTime = startTime
        }
    }

}

extension PointInTimeRestoreNotEnabledFault {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = PointInTimeRestoreNotEnabledFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// SourceDBInstanceIdentifier refers to a DB instance with BackupRetentionPeriod equal to 0.
public struct PointInTimeRestoreNotEnabledFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "PointInTimeRestoreNotEnabled" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension RDSClientTypes.ProcessorFeature: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name = "Name"
        case value = "Value"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let name = name {
            try container.encode(name, forKey: ClientRuntime.Key("Name"))
        }
        if let value = value {
            try container.encode(value, forKey: ClientRuntime.Key("Value"))
        }
    }

    static var readingClosure: SmithyReadWrite.ReadingClosure<RDSClientTypes.ProcessorFeature, SmithyXML.Reader> {
        return { reader in
            guard reader.content != nil else { return nil }
            var value = RDSClientTypes.ProcessorFeature()
            value.name = try reader["Name"].readIfPresent()
            value.value = try reader["Value"].readIfPresent()
            return value
        }
    }
}

extension RDSClientTypes {
    /// Contains the processor features of a DB instance class. To specify the number of CPU cores, use the coreCount feature name for the Name parameter. To specify the number of threads per core, use the threadsPerCore feature name for the Name parameter. You can set the processor features of the DB instance class for a DB instance when you call one of the following actions:
    ///
    /// * CreateDBInstance
    ///
    /// * ModifyDBInstance
    ///
    /// * RestoreDBInstanceFromDBSnapshot
    ///
    /// * RestoreDBInstanceFromS3
    ///
    /// * RestoreDBInstanceToPointInTime
    ///
    ///
    /// You can view the valid processor values for a particular instance class by calling the DescribeOrderableDBInstanceOptions action and specifying the instance class for the DBInstanceClass parameter. In addition, you can use the following actions for DB instance class processor information:
    ///
    /// * DescribeDBInstances
    ///
    /// * DescribeDBSnapshots
    ///
    /// * DescribeValidDBInstanceModifications
    ///
    ///
    /// If you call DescribeDBInstances, ProcessorFeature returns non-null values only if the following conditions are met:
    ///
    /// * You are accessing an Oracle DB instance.
    ///
    /// * Your Oracle DB instance class supports configuring the number of CPU cores and threads per core.
    ///
    /// * The current number CPU cores and threads is set to a non-default value.
    ///
    ///
    /// For more information, see [Configuring the Processor of the DB Instance Class](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.DBInstanceClass.html#USER_ConfigureProcessor) in the Amazon RDS User Guide.
    public struct ProcessorFeature: Swift.Equatable {
        /// The name of the processor feature. Valid names are coreCount and threadsPerCore.
        public var name: Swift.String?
        /// The value of a processor feature name.
        public var value: Swift.String?

        public init(
            name: Swift.String? = nil,
            value: Swift.String? = nil
        )
        {
            self.name = name
            self.value = value
        }
    }

}

extension PromoteReadReplicaDBClusterInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dbClusterIdentifier = "DBClusterIdentifier"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let dbClusterIdentifier = dbClusterIdentifier {
            try container.encode(dbClusterIdentifier, forKey: ClientRuntime.Key("DBClusterIdentifier"))
        }
        try container.encode("PromoteReadReplicaDBCluster", forKey:ClientRuntime.Key("Action"))
        try container.encode("2014-10-31", forKey:ClientRuntime.Key("Version"))
    }
}

extension PromoteReadReplicaDBClusterInput {

    static func urlPathProvider(_ value: PromoteReadReplicaDBClusterInput) -> Swift.String? {
        return "/"
    }
}

///
public struct PromoteReadReplicaDBClusterInput: Swift.Equatable {
    /// The identifier of the DB cluster read replica to promote. This parameter isn't case-sensitive. Constraints:
    ///
    /// * Must match the identifier of an existing DB cluster read replica.
    ///
    ///
    /// Example: my-cluster-replica1
    /// This member is required.
    public var dbClusterIdentifier: Swift.String?

    public init(
        dbClusterIdentifier: Swift.String? = nil
    )
    {
        self.dbClusterIdentifier = dbClusterIdentifier
    }
}

extension PromoteReadReplicaDBClusterOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<PromoteReadReplicaDBClusterOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["PromoteReadReplicaDBClusterResult"]
            var value = PromoteReadReplicaDBClusterOutput()
            value.dbCluster = try reader["DBCluster"].readIfPresent(readingClosure: RDSClientTypes.DBCluster.readingClosure)
            return value
        }
    }
}

public struct PromoteReadReplicaDBClusterOutput: Swift.Equatable {
    /// Contains the details of an Amazon Aurora DB cluster or Multi-AZ DB cluster. For an Amazon Aurora DB cluster, this data type is used as a response element in the operations CreateDBCluster, DeleteDBCluster, DescribeDBClusters, FailoverDBCluster, ModifyDBCluster, PromoteReadReplicaDBCluster, RestoreDBClusterFromS3, RestoreDBClusterFromSnapshot, RestoreDBClusterToPointInTime, StartDBCluster, and StopDBCluster. For a Multi-AZ DB cluster, this data type is used as a response element in the operations CreateDBCluster, DeleteDBCluster, DescribeDBClusters, FailoverDBCluster, ModifyDBCluster, RebootDBCluster, RestoreDBClusterFromSnapshot, and RestoreDBClusterToPointInTime. For more information on Amazon Aurora DB clusters, see [ What is Amazon Aurora?](https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html) in the Amazon Aurora User Guide. For more information on Multi-AZ DB clusters, see [ Multi-AZ deployments with two readable standby DB instances](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/multi-az-db-clusters-concepts.html) in the Amazon RDS User Guide.
    public var dbCluster: RDSClientTypes.DBCluster?

    public init(
        dbCluster: RDSClientTypes.DBCluster? = nil
    )
    {
        self.dbCluster = dbCluster
    }
}

enum PromoteReadReplicaDBClusterOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "DBClusterNotFoundFault": return try await DBClusterNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "InvalidDBClusterStateFault": return try await InvalidDBClusterStateFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension PromoteReadReplicaInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case backupRetentionPeriod = "BackupRetentionPeriod"
        case dbInstanceIdentifier = "DBInstanceIdentifier"
        case preferredBackupWindow = "PreferredBackupWindow"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let backupRetentionPeriod = backupRetentionPeriod {
            try container.encode(backupRetentionPeriod, forKey: ClientRuntime.Key("BackupRetentionPeriod"))
        }
        if let dbInstanceIdentifier = dbInstanceIdentifier {
            try container.encode(dbInstanceIdentifier, forKey: ClientRuntime.Key("DBInstanceIdentifier"))
        }
        if let preferredBackupWindow = preferredBackupWindow {
            try container.encode(preferredBackupWindow, forKey: ClientRuntime.Key("PreferredBackupWindow"))
        }
        try container.encode("PromoteReadReplica", forKey:ClientRuntime.Key("Action"))
        try container.encode("2014-10-31", forKey:ClientRuntime.Key("Version"))
    }
}

extension PromoteReadReplicaInput {

    static func urlPathProvider(_ value: PromoteReadReplicaInput) -> Swift.String? {
        return "/"
    }
}

///
public struct PromoteReadReplicaInput: Swift.Equatable {
    /// The number of days for which automated backups are retained. Setting this parameter to a positive number enables backups. Setting this parameter to 0 disables automated backups. Default: 1 Constraints:
    ///
    /// * Must be a value from 0 to 35.
    ///
    /// * Can't be set to 0 if the DB instance is a source to read replicas.
    public var backupRetentionPeriod: Swift.Int?
    /// The DB instance identifier. This value is stored as a lowercase string. Constraints:
    ///
    /// * Must match the identifier of an existing read replica DB instance.
    ///
    ///
    /// Example: mydbinstance
    /// This member is required.
    public var dbInstanceIdentifier: Swift.String?
    /// The daily time range during which automated backups are created if automated backups are enabled, using the BackupRetentionPeriod parameter. The default is a 30-minute window selected at random from an 8-hour block of time for each Amazon Web Services Region. To see the time blocks available, see [ Adjusting the Preferred Maintenance Window](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/AdjustingTheMaintenanceWindow.html) in the Amazon RDS User Guide. Constraints:
    ///
    /// * Must be in the format hh24:mi-hh24:mi.
    ///
    /// * Must be in Universal Coordinated Time (UTC).
    ///
    /// * Must not conflict with the preferred maintenance window.
    ///
    /// * Must be at least 30 minutes.
    public var preferredBackupWindow: Swift.String?

    public init(
        backupRetentionPeriod: Swift.Int? = nil,
        dbInstanceIdentifier: Swift.String? = nil,
        preferredBackupWindow: Swift.String? = nil
    )
    {
        self.backupRetentionPeriod = backupRetentionPeriod
        self.dbInstanceIdentifier = dbInstanceIdentifier
        self.preferredBackupWindow = preferredBackupWindow
    }
}

extension PromoteReadReplicaOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<PromoteReadReplicaOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["PromoteReadReplicaResult"]
            var value = PromoteReadReplicaOutput()
            value.dbInstance = try reader["DBInstance"].readIfPresent(readingClosure: RDSClientTypes.DBInstance.readingClosure)
            return value
        }
    }
}

public struct PromoteReadReplicaOutput: Swift.Equatable {
    /// Contains the details of an Amazon RDS DB instance. This data type is used as a response element in the operations CreateDBInstance, CreateDBInstanceReadReplica, DeleteDBInstance, DescribeDBInstances, ModifyDBInstance, PromoteReadReplica, RebootDBInstance, RestoreDBInstanceFromDBSnapshot, RestoreDBInstanceFromS3, RestoreDBInstanceToPointInTime, StartDBInstance, and StopDBInstance.
    public var dbInstance: RDSClientTypes.DBInstance?

    public init(
        dbInstance: RDSClientTypes.DBInstance? = nil
    )
    {
        self.dbInstance = dbInstance
    }
}

enum PromoteReadReplicaOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "DBInstanceNotFound": return try await DBInstanceNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "InvalidDBInstanceState": return try await InvalidDBInstanceStateFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension ProvisionedIopsNotAvailableInAZFault {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = ProvisionedIopsNotAvailableInAZFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// Provisioned IOPS not available in the specified Availability Zone.
public struct ProvisionedIopsNotAvailableInAZFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ProvisionedIopsNotAvailableInAZFault" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension PurchaseReservedDBInstancesOfferingInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dbInstanceCount = "DBInstanceCount"
        case reservedDBInstanceId = "ReservedDBInstanceId"
        case reservedDBInstancesOfferingId = "ReservedDBInstancesOfferingId"
        case tags = "Tags"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let dbInstanceCount = dbInstanceCount {
            try container.encode(dbInstanceCount, forKey: ClientRuntime.Key("DBInstanceCount"))
        }
        if let reservedDBInstanceId = reservedDBInstanceId {
            try container.encode(reservedDBInstanceId, forKey: ClientRuntime.Key("ReservedDBInstanceId"))
        }
        if let reservedDBInstancesOfferingId = reservedDBInstancesOfferingId {
            try container.encode(reservedDBInstancesOfferingId, forKey: ClientRuntime.Key("ReservedDBInstancesOfferingId"))
        }
        if let tags = tags {
            if !tags.isEmpty {
                var tagsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Tags"))
                for (index0, tag0) in tags.enumerated() {
                    try tagsContainer.encode(tag0, forKey: ClientRuntime.Key("Tag.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var tagsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Tags"))
                try tagsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        try container.encode("PurchaseReservedDBInstancesOffering", forKey:ClientRuntime.Key("Action"))
        try container.encode("2014-10-31", forKey:ClientRuntime.Key("Version"))
    }
}

extension PurchaseReservedDBInstancesOfferingInput {

    static func urlPathProvider(_ value: PurchaseReservedDBInstancesOfferingInput) -> Swift.String? {
        return "/"
    }
}

///
public struct PurchaseReservedDBInstancesOfferingInput: Swift.Equatable {
    /// The number of instances to reserve. Default: 1
    public var dbInstanceCount: Swift.Int?
    /// Customer-specified identifier to track this reservation. Example: myreservationID
    public var reservedDBInstanceId: Swift.String?
    /// The ID of the Reserved DB instance offering to purchase. Example: 438012d3-4052-4cc7-b2e3-8d3372e0e706
    /// This member is required.
    public var reservedDBInstancesOfferingId: Swift.String?
    /// A list of tags. For more information, see [Tagging Amazon RDS Resources](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html) in the Amazon RDS User Guide.
    public var tags: [RDSClientTypes.Tag]?

    public init(
        dbInstanceCount: Swift.Int? = nil,
        reservedDBInstanceId: Swift.String? = nil,
        reservedDBInstancesOfferingId: Swift.String? = nil,
        tags: [RDSClientTypes.Tag]? = nil
    )
    {
        self.dbInstanceCount = dbInstanceCount
        self.reservedDBInstanceId = reservedDBInstanceId
        self.reservedDBInstancesOfferingId = reservedDBInstancesOfferingId
        self.tags = tags
    }
}

extension PurchaseReservedDBInstancesOfferingOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<PurchaseReservedDBInstancesOfferingOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["PurchaseReservedDBInstancesOfferingResult"]
            var value = PurchaseReservedDBInstancesOfferingOutput()
            value.reservedDBInstance = try reader["ReservedDBInstance"].readIfPresent(readingClosure: RDSClientTypes.ReservedDBInstance.readingClosure)
            return value
        }
    }
}

public struct PurchaseReservedDBInstancesOfferingOutput: Swift.Equatable {
    /// This data type is used as a response element in the DescribeReservedDBInstances and PurchaseReservedDBInstancesOffering actions.
    public var reservedDBInstance: RDSClientTypes.ReservedDBInstance?

    public init(
        reservedDBInstance: RDSClientTypes.ReservedDBInstance? = nil
    )
    {
        self.reservedDBInstance = reservedDBInstance
    }
}

enum PurchaseReservedDBInstancesOfferingOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "ReservedDBInstanceAlreadyExists": return try await ReservedDBInstanceAlreadyExistsFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "ReservedDBInstanceQuotaExceeded": return try await ReservedDBInstanceQuotaExceededFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "ReservedDBInstancesOfferingNotFound": return try await ReservedDBInstancesOfferingNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension RDSClientTypes.Range: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case from = "From"
        case step = "Step"
        case to = "To"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let from = from {
            try container.encode(from, forKey: ClientRuntime.Key("From"))
        }
        if let step = step {
            try container.encode(step, forKey: ClientRuntime.Key("Step"))
        }
        if let to = to {
            try container.encode(to, forKey: ClientRuntime.Key("To"))
        }
    }

    static var readingClosure: SmithyReadWrite.ReadingClosure<RDSClientTypes.Range, SmithyXML.Reader> {
        return { reader in
            guard reader.content != nil else { return nil }
            var value = RDSClientTypes.Range()
            value.from = try reader["From"].readIfPresent()
            value.to = try reader["To"].readIfPresent()
            value.step = try reader["Step"].readIfPresent()
            return value
        }
    }
}

extension RDSClientTypes {
    /// A range of integer values.
    public struct Range: Swift.Equatable {
        /// The minimum value in the range.
        public var from: Swift.Int?
        /// The step value for the range. For example, if you have a range of 5,000 to 10,000, with a step value of 1,000, the valid values start at 5,000 and step up by 1,000. Even though 7,500 is within the range, it isn't a valid value for the range. The valid values are 5,000, 6,000, 7,000, 8,000...
        public var step: Swift.Int?
        /// The maximum value in the range.
        public var to: Swift.Int?

        public init(
            from: Swift.Int? = nil,
            step: Swift.Int? = nil,
            to: Swift.Int? = nil
        )
        {
            self.from = from
            self.step = step
            self.to = to
        }
    }

}

extension RDSClientTypes.RdsCustomClusterConfiguration: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case interconnectSubnetId = "InterconnectSubnetId"
        case replicaMode = "ReplicaMode"
        case transitGatewayMulticastDomainId = "TransitGatewayMulticastDomainId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let interconnectSubnetId = interconnectSubnetId {
            try container.encode(interconnectSubnetId, forKey: ClientRuntime.Key("InterconnectSubnetId"))
        }
        if let replicaMode = replicaMode {
            try container.encode(replicaMode, forKey: ClientRuntime.Key("ReplicaMode"))
        }
        if let transitGatewayMulticastDomainId = transitGatewayMulticastDomainId {
            try container.encode(transitGatewayMulticastDomainId, forKey: ClientRuntime.Key("TransitGatewayMulticastDomainId"))
        }
    }

    static var readingClosure: SmithyReadWrite.ReadingClosure<RDSClientTypes.RdsCustomClusterConfiguration, SmithyXML.Reader> {
        return { reader in
            guard reader.content != nil else { return nil }
            var value = RDSClientTypes.RdsCustomClusterConfiguration()
            value.interconnectSubnetId = try reader["InterconnectSubnetId"].readIfPresent()
            value.transitGatewayMulticastDomainId = try reader["TransitGatewayMulticastDomainId"].readIfPresent()
            value.replicaMode = try reader["ReplicaMode"].readIfPresent()
            return value
        }
    }
}

extension RDSClientTypes {
    /// Reserved for future use.
    public struct RdsCustomClusterConfiguration: Swift.Equatable {
        /// Reserved for future use.
        public var interconnectSubnetId: Swift.String?
        /// Reserved for future use.
        public var replicaMode: RDSClientTypes.ReplicaMode?
        /// Reserved for future use.
        public var transitGatewayMulticastDomainId: Swift.String?

        public init(
            interconnectSubnetId: Swift.String? = nil,
            replicaMode: RDSClientTypes.ReplicaMode? = nil,
            transitGatewayMulticastDomainId: Swift.String? = nil
        )
        {
            self.interconnectSubnetId = interconnectSubnetId
            self.replicaMode = replicaMode
            self.transitGatewayMulticastDomainId = transitGatewayMulticastDomainId
        }
    }

}

extension RebootDBClusterInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dbClusterIdentifier = "DBClusterIdentifier"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let dbClusterIdentifier = dbClusterIdentifier {
            try container.encode(dbClusterIdentifier, forKey: ClientRuntime.Key("DBClusterIdentifier"))
        }
        try container.encode("RebootDBCluster", forKey:ClientRuntime.Key("Action"))
        try container.encode("2014-10-31", forKey:ClientRuntime.Key("Version"))
    }
}

extension RebootDBClusterInput {

    static func urlPathProvider(_ value: RebootDBClusterInput) -> Swift.String? {
        return "/"
    }
}

public struct RebootDBClusterInput: Swift.Equatable {
    /// The DB cluster identifier. This parameter is stored as a lowercase string. Constraints:
    ///
    /// * Must match the identifier of an existing DBCluster.
    /// This member is required.
    public var dbClusterIdentifier: Swift.String?

    public init(
        dbClusterIdentifier: Swift.String? = nil
    )
    {
        self.dbClusterIdentifier = dbClusterIdentifier
    }
}

extension RebootDBClusterOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<RebootDBClusterOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["RebootDBClusterResult"]
            var value = RebootDBClusterOutput()
            value.dbCluster = try reader["DBCluster"].readIfPresent(readingClosure: RDSClientTypes.DBCluster.readingClosure)
            return value
        }
    }
}

public struct RebootDBClusterOutput: Swift.Equatable {
    /// Contains the details of an Amazon Aurora DB cluster or Multi-AZ DB cluster. For an Amazon Aurora DB cluster, this data type is used as a response element in the operations CreateDBCluster, DeleteDBCluster, DescribeDBClusters, FailoverDBCluster, ModifyDBCluster, PromoteReadReplicaDBCluster, RestoreDBClusterFromS3, RestoreDBClusterFromSnapshot, RestoreDBClusterToPointInTime, StartDBCluster, and StopDBCluster. For a Multi-AZ DB cluster, this data type is used as a response element in the operations CreateDBCluster, DeleteDBCluster, DescribeDBClusters, FailoverDBCluster, ModifyDBCluster, RebootDBCluster, RestoreDBClusterFromSnapshot, and RestoreDBClusterToPointInTime. For more information on Amazon Aurora DB clusters, see [ What is Amazon Aurora?](https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html) in the Amazon Aurora User Guide. For more information on Multi-AZ DB clusters, see [ Multi-AZ deployments with two readable standby DB instances](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/multi-az-db-clusters-concepts.html) in the Amazon RDS User Guide.
    public var dbCluster: RDSClientTypes.DBCluster?

    public init(
        dbCluster: RDSClientTypes.DBCluster? = nil
    )
    {
        self.dbCluster = dbCluster
    }
}

enum RebootDBClusterOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "DBClusterNotFoundFault": return try await DBClusterNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "InvalidDBClusterStateFault": return try await InvalidDBClusterStateFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "InvalidDBInstanceState": return try await InvalidDBInstanceStateFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension RebootDBInstanceInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dbInstanceIdentifier = "DBInstanceIdentifier"
        case forceFailover = "ForceFailover"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let dbInstanceIdentifier = dbInstanceIdentifier {
            try container.encode(dbInstanceIdentifier, forKey: ClientRuntime.Key("DBInstanceIdentifier"))
        }
        if let forceFailover = forceFailover {
            try container.encode(forceFailover, forKey: ClientRuntime.Key("ForceFailover"))
        }
        try container.encode("RebootDBInstance", forKey:ClientRuntime.Key("Action"))
        try container.encode("2014-10-31", forKey:ClientRuntime.Key("Version"))
    }
}

extension RebootDBInstanceInput {

    static func urlPathProvider(_ value: RebootDBInstanceInput) -> Swift.String? {
        return "/"
    }
}

///
public struct RebootDBInstanceInput: Swift.Equatable {
    /// The DB instance identifier. This parameter is stored as a lowercase string. Constraints:
    ///
    /// * Must match the identifier of an existing DBInstance.
    /// This member is required.
    public var dbInstanceIdentifier: Swift.String?
    /// Specifies whether the reboot is conducted through a Multi-AZ failover. Constraint: You can't enable force failover if the instance isn't configured for Multi-AZ.
    public var forceFailover: Swift.Bool?

    public init(
        dbInstanceIdentifier: Swift.String? = nil,
        forceFailover: Swift.Bool? = nil
    )
    {
        self.dbInstanceIdentifier = dbInstanceIdentifier
        self.forceFailover = forceFailover
    }
}

extension RebootDBInstanceOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<RebootDBInstanceOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["RebootDBInstanceResult"]
            var value = RebootDBInstanceOutput()
            value.dbInstance = try reader["DBInstance"].readIfPresent(readingClosure: RDSClientTypes.DBInstance.readingClosure)
            return value
        }
    }
}

public struct RebootDBInstanceOutput: Swift.Equatable {
    /// Contains the details of an Amazon RDS DB instance. This data type is used as a response element in the operations CreateDBInstance, CreateDBInstanceReadReplica, DeleteDBInstance, DescribeDBInstances, ModifyDBInstance, PromoteReadReplica, RebootDBInstance, RestoreDBInstanceFromDBSnapshot, RestoreDBInstanceFromS3, RestoreDBInstanceToPointInTime, StartDBInstance, and StopDBInstance.
    public var dbInstance: RDSClientTypes.DBInstance?

    public init(
        dbInstance: RDSClientTypes.DBInstance? = nil
    )
    {
        self.dbInstance = dbInstance
    }
}

enum RebootDBInstanceOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "DBInstanceNotFound": return try await DBInstanceNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "InvalidDBInstanceState": return try await InvalidDBInstanceStateFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension RebootDBShardGroupInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dbShardGroupIdentifier = "DBShardGroupIdentifier"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let dbShardGroupIdentifier = dbShardGroupIdentifier {
            try container.encode(dbShardGroupIdentifier, forKey: ClientRuntime.Key("DBShardGroupIdentifier"))
        }
        try container.encode("RebootDBShardGroup", forKey:ClientRuntime.Key("Action"))
        try container.encode("2014-10-31", forKey:ClientRuntime.Key("Version"))
    }
}

extension RebootDBShardGroupInput {

    static func urlPathProvider(_ value: RebootDBShardGroupInput) -> Swift.String? {
        return "/"
    }
}

public struct RebootDBShardGroupInput: Swift.Equatable {
    /// The name of the DB shard group to reboot.
    /// This member is required.
    public var dbShardGroupIdentifier: Swift.String?

    public init(
        dbShardGroupIdentifier: Swift.String? = nil
    )
    {
        self.dbShardGroupIdentifier = dbShardGroupIdentifier
    }
}

extension RebootDBShardGroupOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<RebootDBShardGroupOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["RebootDBShardGroupResult"]
            var value = RebootDBShardGroupOutput()
            value.computeRedundancy = try reader["ComputeRedundancy"].readIfPresent()
            value.dbClusterIdentifier = try reader["DBClusterIdentifier"].readIfPresent()
            value.dbShardGroupIdentifier = try reader["DBShardGroupIdentifier"].readIfPresent()
            value.dbShardGroupResourceId = try reader["DBShardGroupResourceId"].readIfPresent()
            value.endpoint = try reader["Endpoint"].readIfPresent()
            value.maxACU = try reader["MaxACU"].readIfPresent()
            value.publiclyAccessible = try reader["PubliclyAccessible"].readIfPresent()
            value.status = try reader["Status"].readIfPresent()
            return value
        }
    }
}

public struct RebootDBShardGroupOutput: Swift.Equatable {
    /// Specifies whether to create standby instances for the DB shard group. Valid values are the following:
    ///
    /// * 0 - Creates a single, primary DB instance for each physical shard. This is the default value, and the only one supported for the preview.
    ///
    /// * 1 - Creates a primary DB instance and a standby instance in a different Availability Zone (AZ) for each physical shard.
    ///
    /// * 2 - Creates a primary DB instance and two standby instances in different AZs for each physical shard.
    public var computeRedundancy: Swift.Int?
    /// The name of the primary DB cluster for the DB shard group.
    public var dbClusterIdentifier: Swift.String?
    /// The name of the DB shard group.
    public var dbShardGroupIdentifier: Swift.String?
    /// The Amazon Web Services Region-unique, immutable identifier for the DB shard group.
    public var dbShardGroupResourceId: Swift.String?
    /// The connection endpoint for the DB shard group.
    public var endpoint: Swift.String?
    /// The maximum capacity of the DB shard group in Aurora capacity units (ACUs).
    public var maxACU: Swift.Double?
    /// Indicates whether the DB shard group is publicly accessible. When the DB shard group is publicly accessible, its Domain Name System (DNS) endpoint resolves to the private IP address from within the DB shard group's virtual private cloud (VPC). It resolves to the public IP address from outside of the DB shard group's VPC. Access to the DB shard group is ultimately controlled by the security group it uses. That public access isn't permitted if the security group assigned to the DB shard group doesn't permit it. When the DB shard group isn't publicly accessible, it is an internal DB shard group with a DNS name that resolves to a private IP address. For more information, see [CreateDBShardGroup]. This setting is only for Aurora Limitless Database.
    public var publiclyAccessible: Swift.Bool?
    /// The status of the DB shard group.
    public var status: Swift.String?

    public init(
        computeRedundancy: Swift.Int? = nil,
        dbClusterIdentifier: Swift.String? = nil,
        dbShardGroupIdentifier: Swift.String? = nil,
        dbShardGroupResourceId: Swift.String? = nil,
        endpoint: Swift.String? = nil,
        maxACU: Swift.Double? = nil,
        publiclyAccessible: Swift.Bool? = nil,
        status: Swift.String? = nil
    )
    {
        self.computeRedundancy = computeRedundancy
        self.dbClusterIdentifier = dbClusterIdentifier
        self.dbShardGroupIdentifier = dbShardGroupIdentifier
        self.dbShardGroupResourceId = dbShardGroupResourceId
        self.endpoint = endpoint
        self.maxACU = maxACU
        self.publiclyAccessible = publiclyAccessible
        self.status = status
    }
}

enum RebootDBShardGroupOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "DBShardGroupNotFound": return try await DBShardGroupNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "InvalidDBShardGroupState": return try await InvalidDBShardGroupStateFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension RDSClientTypes.RecommendedAction: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case actionId = "ActionId"
        case applyModes = "ApplyModes"
        case contextAttributes = "ContextAttributes"
        case description = "Description"
        case issueDetails = "IssueDetails"
        case operation = "Operation"
        case parameters = "Parameters"
        case status = "Status"
        case title = "Title"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let actionId = actionId {
            try container.encode(actionId, forKey: ClientRuntime.Key("ActionId"))
        }
        if let applyModes = applyModes {
            if !applyModes.isEmpty {
                var applyModesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("ApplyModes"))
                for (index0, string0) in applyModes.enumerated() {
                    try applyModesContainer.encode(string0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var applyModesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("ApplyModes"))
                try applyModesContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let contextAttributes = contextAttributes {
            if !contextAttributes.isEmpty {
                var contextAttributesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("ContextAttributes"))
                for (index0, contextattribute0) in contextAttributes.enumerated() {
                    try contextAttributesContainer.encode(contextattribute0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var contextAttributesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("ContextAttributes"))
                try contextAttributesContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let description = description {
            try container.encode(description, forKey: ClientRuntime.Key("Description"))
        }
        if let issueDetails = issueDetails {
            try container.encode(issueDetails, forKey: ClientRuntime.Key("IssueDetails"))
        }
        if let operation = operation {
            try container.encode(operation, forKey: ClientRuntime.Key("Operation"))
        }
        if let parameters = parameters {
            if !parameters.isEmpty {
                var parametersContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Parameters"))
                for (index0, recommendedactionparameter0) in parameters.enumerated() {
                    try parametersContainer.encode(recommendedactionparameter0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var parametersContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Parameters"))
                try parametersContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let status = status {
            try container.encode(status, forKey: ClientRuntime.Key("Status"))
        }
        if let title = title {
            try container.encode(title, forKey: ClientRuntime.Key("Title"))
        }
    }

    static var readingClosure: SmithyReadWrite.ReadingClosure<RDSClientTypes.RecommendedAction, SmithyXML.Reader> {
        return { reader in
            guard reader.content != nil else { return nil }
            var value = RDSClientTypes.RecommendedAction()
            value.actionId = try reader["ActionId"].readIfPresent()
            value.title = try reader["Title"].readIfPresent()
            value.description = try reader["Description"].readIfPresent()
            value.operation = try reader["Operation"].readIfPresent()
            value.parameters = try reader["Parameters"].readListIfPresent(memberReadingClosure: RDSClientTypes.RecommendedActionParameter.readingClosure, memberNodeInfo: "member", isFlattened: false)
            value.applyModes = try reader["ApplyModes"].readListIfPresent(memberReadingClosure: Swift.String.readingClosure, memberNodeInfo: "member", isFlattened: false)
            value.status = try reader["Status"].readIfPresent()
            value.issueDetails = try reader["IssueDetails"].readIfPresent(readingClosure: RDSClientTypes.IssueDetails.readingClosure)
            value.contextAttributes = try reader["ContextAttributes"].readListIfPresent(memberReadingClosure: RDSClientTypes.ContextAttribute.readingClosure, memberNodeInfo: "member", isFlattened: false)
            return value
        }
    }
}

extension RDSClientTypes {
    /// The recommended actions to apply to resolve the issues associated with your DB instances, DB clusters, and DB parameter groups.
    public struct RecommendedAction: Swift.Equatable {
        /// The unique identifier of the recommended action.
        public var actionId: Swift.String?
        /// The methods to apply the recommended action. Valid values:
        ///
        /// * manual - The action requires you to resolve the recommendation manually.
        ///
        /// * immediately - The action is applied immediately.
        ///
        /// * next-maintainance-window - The action is applied during the next scheduled maintainance.
        public var applyModes: [Swift.String]?
        /// The supporting attributes to explain the recommended action.
        public var contextAttributes: [RDSClientTypes.ContextAttribute]?
        /// A detailed description of the action. The description might contain markdown.
        public var description: Swift.String?
        /// The details of the issue.
        public var issueDetails: RDSClientTypes.IssueDetails?
        /// An API operation for the action.
        public var operation: Swift.String?
        /// The parameters for the API operation.
        public var parameters: [RDSClientTypes.RecommendedActionParameter]?
        /// The status of the action.
        ///
        /// * ready
        ///
        /// * applied
        ///
        /// * scheduled
        ///
        /// * resolved
        public var status: Swift.String?
        /// A short description to summarize the action. The description might contain markdown.
        public var title: Swift.String?

        public init(
            actionId: Swift.String? = nil,
            applyModes: [Swift.String]? = nil,
            contextAttributes: [RDSClientTypes.ContextAttribute]? = nil,
            description: Swift.String? = nil,
            issueDetails: RDSClientTypes.IssueDetails? = nil,
            operation: Swift.String? = nil,
            parameters: [RDSClientTypes.RecommendedActionParameter]? = nil,
            status: Swift.String? = nil,
            title: Swift.String? = nil
        )
        {
            self.actionId = actionId
            self.applyModes = applyModes
            self.contextAttributes = contextAttributes
            self.description = description
            self.issueDetails = issueDetails
            self.operation = operation
            self.parameters = parameters
            self.status = status
            self.title = title
        }
    }

}

extension RDSClientTypes.RecommendedActionParameter: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case key = "Key"
        case value = "Value"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let key = key {
            try container.encode(key, forKey: ClientRuntime.Key("Key"))
        }
        if let value = value {
            try container.encode(value, forKey: ClientRuntime.Key("Value"))
        }
    }

    static var readingClosure: SmithyReadWrite.ReadingClosure<RDSClientTypes.RecommendedActionParameter, SmithyXML.Reader> {
        return { reader in
            guard reader.content != nil else { return nil }
            var value = RDSClientTypes.RecommendedActionParameter()
            value.key = try reader["Key"].readIfPresent()
            value.value = try reader["Value"].readIfPresent()
            return value
        }
    }
}

extension RDSClientTypes {
    /// A single parameter to use with the RecommendedAction API operation to apply the action.
    public struct RecommendedActionParameter: Swift.Equatable {
        /// The key of the parameter to use with the RecommendedAction API operation.
        public var key: Swift.String?
        /// The value of the parameter to use with the RecommendedAction API operation.
        public var value: Swift.String?

        public init(
            key: Swift.String? = nil,
            value: Swift.String? = nil
        )
        {
            self.key = key
            self.value = value
        }
    }

}

extension RDSClientTypes.RecommendedActionUpdate: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case actionId = "ActionId"
        case status = "Status"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let actionId = actionId {
            try container.encode(actionId, forKey: ClientRuntime.Key("ActionId"))
        }
        if let status = status {
            try container.encode(status, forKey: ClientRuntime.Key("Status"))
        }
    }

    static var readingClosure: SmithyReadWrite.ReadingClosure<RDSClientTypes.RecommendedActionUpdate, SmithyXML.Reader> {
        return { reader in
            guard reader.content != nil else { return nil }
            var value = RDSClientTypes.RecommendedActionUpdate()
            value.actionId = try reader["ActionId"].readIfPresent()
            value.status = try reader["Status"].readIfPresent()
            return value
        }
    }
}

extension RDSClientTypes {
    /// The recommended status to update for the specified recommendation action ID.
    public struct RecommendedActionUpdate: Swift.Equatable {
        /// A unique identifier of the updated recommendation action.
        /// This member is required.
        public var actionId: Swift.String?
        /// The status of the updated recommendation action.
        ///
        /// * applied
        ///
        /// * scheduled
        /// This member is required.
        public var status: Swift.String?

        public init(
            actionId: Swift.String? = nil,
            status: Swift.String? = nil
        )
        {
            self.actionId = actionId
            self.status = status
        }
    }

}

extension RDSClientTypes.RecurringCharge: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case recurringChargeAmount = "RecurringChargeAmount"
        case recurringChargeFrequency = "RecurringChargeFrequency"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let recurringChargeAmount = recurringChargeAmount {
            try container.encode(recurringChargeAmount, forKey: ClientRuntime.Key("RecurringChargeAmount"))
        }
        if let recurringChargeFrequency = recurringChargeFrequency {
            try container.encode(recurringChargeFrequency, forKey: ClientRuntime.Key("RecurringChargeFrequency"))
        }
    }

    static var readingClosure: SmithyReadWrite.ReadingClosure<RDSClientTypes.RecurringCharge, SmithyXML.Reader> {
        return { reader in
            guard reader.content != nil else { return nil }
            var value = RDSClientTypes.RecurringCharge()
            value.recurringChargeAmount = try reader["RecurringChargeAmount"].readIfPresent()
            value.recurringChargeFrequency = try reader["RecurringChargeFrequency"].readIfPresent()
            return value
        }
    }
}

extension RDSClientTypes {
    /// This data type is used as a response element in the DescribeReservedDBInstances and DescribeReservedDBInstancesOfferings actions.
    public struct RecurringCharge: Swift.Equatable {
        /// The amount of the recurring charge.
        public var recurringChargeAmount: Swift.Double?
        /// The frequency of the recurring charge.
        public var recurringChargeFrequency: Swift.String?

        public init(
            recurringChargeAmount: Swift.Double? = nil,
            recurringChargeFrequency: Swift.String? = nil
        )
        {
            self.recurringChargeAmount = recurringChargeAmount
            self.recurringChargeFrequency = recurringChargeFrequency
        }
    }

}

extension RDSClientTypes.ReferenceDetails: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case scalarReferenceDetails = "ScalarReferenceDetails"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let scalarReferenceDetails = scalarReferenceDetails {
            try container.encode(scalarReferenceDetails, forKey: ClientRuntime.Key("ScalarReferenceDetails"))
        }
    }

    static var readingClosure: SmithyReadWrite.ReadingClosure<RDSClientTypes.ReferenceDetails, SmithyXML.Reader> {
        return { reader in
            guard reader.content != nil else { return nil }
            var value = RDSClientTypes.ReferenceDetails()
            value.scalarReferenceDetails = try reader["ScalarReferenceDetails"].readIfPresent(readingClosure: RDSClientTypes.ScalarReferenceDetails.readingClosure)
            return value
        }
    }
}

extension RDSClientTypes {
    /// The reference details of a metric.
    public struct ReferenceDetails: Swift.Equatable {
        /// The metric reference details when the reference is a scalar.
        public var scalarReferenceDetails: RDSClientTypes.ScalarReferenceDetails?

        public init(
            scalarReferenceDetails: RDSClientTypes.ScalarReferenceDetails? = nil
        )
        {
            self.scalarReferenceDetails = scalarReferenceDetails
        }
    }

}

extension RegisterDBProxyTargetsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dbClusterIdentifiers = "DBClusterIdentifiers"
        case dbInstanceIdentifiers = "DBInstanceIdentifiers"
        case dbProxyName = "DBProxyName"
        case targetGroupName = "TargetGroupName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let dbClusterIdentifiers = dbClusterIdentifiers {
            if !dbClusterIdentifiers.isEmpty {
                var dbClusterIdentifiersContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("DBClusterIdentifiers"))
                for (index0, string0) in dbClusterIdentifiers.enumerated() {
                    try dbClusterIdentifiersContainer.encode(string0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var dbClusterIdentifiersContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("DBClusterIdentifiers"))
                try dbClusterIdentifiersContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let dbInstanceIdentifiers = dbInstanceIdentifiers {
            if !dbInstanceIdentifiers.isEmpty {
                var dbInstanceIdentifiersContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("DBInstanceIdentifiers"))
                for (index0, string0) in dbInstanceIdentifiers.enumerated() {
                    try dbInstanceIdentifiersContainer.encode(string0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var dbInstanceIdentifiersContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("DBInstanceIdentifiers"))
                try dbInstanceIdentifiersContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let dbProxyName = dbProxyName {
            try container.encode(dbProxyName, forKey: ClientRuntime.Key("DBProxyName"))
        }
        if let targetGroupName = targetGroupName {
            try container.encode(targetGroupName, forKey: ClientRuntime.Key("TargetGroupName"))
        }
        try container.encode("RegisterDBProxyTargets", forKey:ClientRuntime.Key("Action"))
        try container.encode("2014-10-31", forKey:ClientRuntime.Key("Version"))
    }
}

extension RegisterDBProxyTargetsInput {

    static func urlPathProvider(_ value: RegisterDBProxyTargetsInput) -> Swift.String? {
        return "/"
    }
}

public struct RegisterDBProxyTargetsInput: Swift.Equatable {
    /// One or more DB cluster identifiers.
    public var dbClusterIdentifiers: [Swift.String]?
    /// One or more DB instance identifiers.
    public var dbInstanceIdentifiers: [Swift.String]?
    /// The identifier of the DBProxy that is associated with the DBProxyTargetGroup.
    /// This member is required.
    public var dbProxyName: Swift.String?
    /// The identifier of the DBProxyTargetGroup.
    public var targetGroupName: Swift.String?

    public init(
        dbClusterIdentifiers: [Swift.String]? = nil,
        dbInstanceIdentifiers: [Swift.String]? = nil,
        dbProxyName: Swift.String? = nil,
        targetGroupName: Swift.String? = nil
    )
    {
        self.dbClusterIdentifiers = dbClusterIdentifiers
        self.dbInstanceIdentifiers = dbInstanceIdentifiers
        self.dbProxyName = dbProxyName
        self.targetGroupName = targetGroupName
    }
}

extension RegisterDBProxyTargetsOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<RegisterDBProxyTargetsOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["RegisterDBProxyTargetsResult"]
            var value = RegisterDBProxyTargetsOutput()
            value.dbProxyTargets = try reader["DBProxyTargets"].readListIfPresent(memberReadingClosure: RDSClientTypes.DBProxyTarget.readingClosure, memberNodeInfo: "member", isFlattened: false)
            return value
        }
    }
}

public struct RegisterDBProxyTargetsOutput: Swift.Equatable {
    /// One or more DBProxyTarget objects that are created when you register targets with a target group.
    public var dbProxyTargets: [RDSClientTypes.DBProxyTarget]?

    public init(
        dbProxyTargets: [RDSClientTypes.DBProxyTarget]? = nil
    )
    {
        self.dbProxyTargets = dbProxyTargets
    }
}

enum RegisterDBProxyTargetsOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "DBClusterNotFoundFault": return try await DBClusterNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "DBInstanceNotFound": return try await DBInstanceNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "DBProxyNotFoundFault": return try await DBProxyNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "DBProxyTargetAlreadyRegisteredFault": return try await DBProxyTargetAlreadyRegisteredFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "DBProxyTargetGroupNotFoundFault": return try await DBProxyTargetGroupNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "InsufficientAvailableIPsInSubnetFault": return try await InsufficientAvailableIPsInSubnetFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "InvalidDBClusterStateFault": return try await InvalidDBClusterStateFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "InvalidDBInstanceState": return try await InvalidDBInstanceStateFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "InvalidDBProxyStateFault": return try await InvalidDBProxyStateFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension RemoveFromGlobalClusterInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dbClusterIdentifier = "DbClusterIdentifier"
        case globalClusterIdentifier = "GlobalClusterIdentifier"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let dbClusterIdentifier = dbClusterIdentifier {
            try container.encode(dbClusterIdentifier, forKey: ClientRuntime.Key("DbClusterIdentifier"))
        }
        if let globalClusterIdentifier = globalClusterIdentifier {
            try container.encode(globalClusterIdentifier, forKey: ClientRuntime.Key("GlobalClusterIdentifier"))
        }
        try container.encode("RemoveFromGlobalCluster", forKey:ClientRuntime.Key("Action"))
        try container.encode("2014-10-31", forKey:ClientRuntime.Key("Version"))
    }
}

extension RemoveFromGlobalClusterInput {

    static func urlPathProvider(_ value: RemoveFromGlobalClusterInput) -> Swift.String? {
        return "/"
    }
}

public struct RemoveFromGlobalClusterInput: Swift.Equatable {
    /// The Amazon Resource Name (ARN) identifying the cluster that was detached from the Aurora global database cluster.
    public var dbClusterIdentifier: Swift.String?
    /// The cluster identifier to detach from the Aurora global database cluster.
    public var globalClusterIdentifier: Swift.String?

    public init(
        dbClusterIdentifier: Swift.String? = nil,
        globalClusterIdentifier: Swift.String? = nil
    )
    {
        self.dbClusterIdentifier = dbClusterIdentifier
        self.globalClusterIdentifier = globalClusterIdentifier
    }
}

extension RemoveFromGlobalClusterOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<RemoveFromGlobalClusterOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["RemoveFromGlobalClusterResult"]
            var value = RemoveFromGlobalClusterOutput()
            value.globalCluster = try reader["GlobalCluster"].readIfPresent(readingClosure: RDSClientTypes.GlobalCluster.readingClosure)
            return value
        }
    }
}

public struct RemoveFromGlobalClusterOutput: Swift.Equatable {
    /// A data type representing an Aurora global database.
    public var globalCluster: RDSClientTypes.GlobalCluster?

    public init(
        globalCluster: RDSClientTypes.GlobalCluster? = nil
    )
    {
        self.globalCluster = globalCluster
    }
}

enum RemoveFromGlobalClusterOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "DBClusterNotFoundFault": return try await DBClusterNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "GlobalClusterNotFoundFault": return try await GlobalClusterNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "InvalidGlobalClusterStateFault": return try await InvalidGlobalClusterStateFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension RemoveRoleFromDBClusterInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dbClusterIdentifier = "DBClusterIdentifier"
        case featureName = "FeatureName"
        case roleArn = "RoleArn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let dbClusterIdentifier = dbClusterIdentifier {
            try container.encode(dbClusterIdentifier, forKey: ClientRuntime.Key("DBClusterIdentifier"))
        }
        if let featureName = featureName {
            try container.encode(featureName, forKey: ClientRuntime.Key("FeatureName"))
        }
        if let roleArn = roleArn {
            try container.encode(roleArn, forKey: ClientRuntime.Key("RoleArn"))
        }
        try container.encode("RemoveRoleFromDBCluster", forKey:ClientRuntime.Key("Action"))
        try container.encode("2014-10-31", forKey:ClientRuntime.Key("Version"))
    }
}

extension RemoveRoleFromDBClusterInput {

    static func urlPathProvider(_ value: RemoveRoleFromDBClusterInput) -> Swift.String? {
        return "/"
    }
}

public struct RemoveRoleFromDBClusterInput: Swift.Equatable {
    /// The name of the DB cluster to disassociate the IAM role from.
    /// This member is required.
    public var dbClusterIdentifier: Swift.String?
    /// The name of the feature for the DB cluster that the IAM role is to be disassociated from. For information about supported feature names, see [DBEngineVersion].
    public var featureName: Swift.String?
    /// The Amazon Resource Name (ARN) of the IAM role to disassociate from the Aurora DB cluster, for example arn:aws:iam::123456789012:role/AuroraAccessRole.
    /// This member is required.
    public var roleArn: Swift.String?

    public init(
        dbClusterIdentifier: Swift.String? = nil,
        featureName: Swift.String? = nil,
        roleArn: Swift.String? = nil
    )
    {
        self.dbClusterIdentifier = dbClusterIdentifier
        self.featureName = featureName
        self.roleArn = roleArn
    }
}

extension RemoveRoleFromDBClusterOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<RemoveRoleFromDBClusterOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            return RemoveRoleFromDBClusterOutput()
        }
    }
}

public struct RemoveRoleFromDBClusterOutput: Swift.Equatable {

    public init() { }
}

enum RemoveRoleFromDBClusterOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "DBClusterNotFoundFault": return try await DBClusterNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "DBClusterRoleNotFound": return try await DBClusterRoleNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "InvalidDBClusterStateFault": return try await InvalidDBClusterStateFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension RemoveRoleFromDBInstanceInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dbInstanceIdentifier = "DBInstanceIdentifier"
        case featureName = "FeatureName"
        case roleArn = "RoleArn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let dbInstanceIdentifier = dbInstanceIdentifier {
            try container.encode(dbInstanceIdentifier, forKey: ClientRuntime.Key("DBInstanceIdentifier"))
        }
        if let featureName = featureName {
            try container.encode(featureName, forKey: ClientRuntime.Key("FeatureName"))
        }
        if let roleArn = roleArn {
            try container.encode(roleArn, forKey: ClientRuntime.Key("RoleArn"))
        }
        try container.encode("RemoveRoleFromDBInstance", forKey:ClientRuntime.Key("Action"))
        try container.encode("2014-10-31", forKey:ClientRuntime.Key("Version"))
    }
}

extension RemoveRoleFromDBInstanceInput {

    static func urlPathProvider(_ value: RemoveRoleFromDBInstanceInput) -> Swift.String? {
        return "/"
    }
}

public struct RemoveRoleFromDBInstanceInput: Swift.Equatable {
    /// The name of the DB instance to disassociate the IAM role from.
    /// This member is required.
    public var dbInstanceIdentifier: Swift.String?
    /// The name of the feature for the DB instance that the IAM role is to be disassociated from. For information about supported feature names, see DBEngineVersion.
    /// This member is required.
    public var featureName: Swift.String?
    /// The Amazon Resource Name (ARN) of the IAM role to disassociate from the DB instance, for example, arn:aws:iam::123456789012:role/AccessRole.
    /// This member is required.
    public var roleArn: Swift.String?

    public init(
        dbInstanceIdentifier: Swift.String? = nil,
        featureName: Swift.String? = nil,
        roleArn: Swift.String? = nil
    )
    {
        self.dbInstanceIdentifier = dbInstanceIdentifier
        self.featureName = featureName
        self.roleArn = roleArn
    }
}

extension RemoveRoleFromDBInstanceOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<RemoveRoleFromDBInstanceOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            return RemoveRoleFromDBInstanceOutput()
        }
    }
}

public struct RemoveRoleFromDBInstanceOutput: Swift.Equatable {

    public init() { }
}

enum RemoveRoleFromDBInstanceOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "DBInstanceNotFound": return try await DBInstanceNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "DBInstanceRoleNotFound": return try await DBInstanceRoleNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "InvalidDBInstanceState": return try await InvalidDBInstanceStateFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension RemoveSourceIdentifierFromSubscriptionInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case sourceIdentifier = "SourceIdentifier"
        case subscriptionName = "SubscriptionName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let sourceIdentifier = sourceIdentifier {
            try container.encode(sourceIdentifier, forKey: ClientRuntime.Key("SourceIdentifier"))
        }
        if let subscriptionName = subscriptionName {
            try container.encode(subscriptionName, forKey: ClientRuntime.Key("SubscriptionName"))
        }
        try container.encode("RemoveSourceIdentifierFromSubscription", forKey:ClientRuntime.Key("Action"))
        try container.encode("2014-10-31", forKey:ClientRuntime.Key("Version"))
    }
}

extension RemoveSourceIdentifierFromSubscriptionInput {

    static func urlPathProvider(_ value: RemoveSourceIdentifierFromSubscriptionInput) -> Swift.String? {
        return "/"
    }
}

///
public struct RemoveSourceIdentifierFromSubscriptionInput: Swift.Equatable {
    /// The source identifier to be removed from the subscription, such as the DB instance identifier for a DB instance or the name of a security group.
    /// This member is required.
    public var sourceIdentifier: Swift.String?
    /// The name of the RDS event notification subscription you want to remove a source identifier from.
    /// This member is required.
    public var subscriptionName: Swift.String?

    public init(
        sourceIdentifier: Swift.String? = nil,
        subscriptionName: Swift.String? = nil
    )
    {
        self.sourceIdentifier = sourceIdentifier
        self.subscriptionName = subscriptionName
    }
}

extension RemoveSourceIdentifierFromSubscriptionOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<RemoveSourceIdentifierFromSubscriptionOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["RemoveSourceIdentifierFromSubscriptionResult"]
            var value = RemoveSourceIdentifierFromSubscriptionOutput()
            value.eventSubscription = try reader["EventSubscription"].readIfPresent(readingClosure: RDSClientTypes.EventSubscription.readingClosure)
            return value
        }
    }
}

public struct RemoveSourceIdentifierFromSubscriptionOutput: Swift.Equatable {
    /// Contains the results of a successful invocation of the DescribeEventSubscriptions action.
    public var eventSubscription: RDSClientTypes.EventSubscription?

    public init(
        eventSubscription: RDSClientTypes.EventSubscription? = nil
    )
    {
        self.eventSubscription = eventSubscription
    }
}

enum RemoveSourceIdentifierFromSubscriptionOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "SourceNotFound": return try await SourceNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "SubscriptionNotFound": return try await SubscriptionNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension RemoveTagsFromResourceInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case resourceName = "ResourceName"
        case tagKeys = "TagKeys"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let resourceName = resourceName {
            try container.encode(resourceName, forKey: ClientRuntime.Key("ResourceName"))
        }
        if let tagKeys = tagKeys {
            if !tagKeys.isEmpty {
                var tagKeysContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("TagKeys"))
                for (index0, string0) in tagKeys.enumerated() {
                    try tagKeysContainer.encode(string0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var tagKeysContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("TagKeys"))
                try tagKeysContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        try container.encode("RemoveTagsFromResource", forKey:ClientRuntime.Key("Action"))
        try container.encode("2014-10-31", forKey:ClientRuntime.Key("Version"))
    }
}

extension RemoveTagsFromResourceInput {

    static func urlPathProvider(_ value: RemoveTagsFromResourceInput) -> Swift.String? {
        return "/"
    }
}

///
public struct RemoveTagsFromResourceInput: Swift.Equatable {
    /// The Amazon RDS resource that the tags are removed from. This value is an Amazon Resource Name (ARN). For information about creating an ARN, see [ Constructing an ARN for Amazon RDS](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.ARN.html#USER_Tagging.ARN.Constructing) in the Amazon RDS User Guide.
    /// This member is required.
    public var resourceName: Swift.String?
    /// The tag key (name) of the tag to be removed.
    /// This member is required.
    public var tagKeys: [Swift.String]?

    public init(
        resourceName: Swift.String? = nil,
        tagKeys: [Swift.String]? = nil
    )
    {
        self.resourceName = resourceName
        self.tagKeys = tagKeys
    }
}

extension RemoveTagsFromResourceOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<RemoveTagsFromResourceOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            return RemoveTagsFromResourceOutput()
        }
    }
}

public struct RemoveTagsFromResourceOutput: Swift.Equatable {

    public init() { }
}

enum RemoveTagsFromResourceOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "BlueGreenDeploymentNotFoundFault": return try await BlueGreenDeploymentNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "DBClusterNotFoundFault": return try await DBClusterNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "DBInstanceNotFound": return try await DBInstanceNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "DBProxyNotFoundFault": return try await DBProxyNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "DBProxyTargetGroupNotFoundFault": return try await DBProxyTargetGroupNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "DBSnapshotNotFound": return try await DBSnapshotNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "DBSnapshotTenantDatabaseNotFoundFault": return try await DBSnapshotTenantDatabaseNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "IntegrationNotFoundFault": return try await IntegrationNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "TenantDatabaseNotFound": return try await TenantDatabaseNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension RDSClientTypes {
    public enum ReplicaMode: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case mounted
        case openReadOnly
        case sdkUnknown(Swift.String)

        public static var allCases: [ReplicaMode] {
            return [
                .mounted,
                .openReadOnly,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .mounted: return "mounted"
            case .openReadOnly: return "open-read-only"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ReplicaMode(rawValue: rawValue) ?? ReplicaMode.sdkUnknown(rawValue)
        }
    }
}

extension RDSClientTypes.ReservedDBInstance: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case currencyCode = "CurrencyCode"
        case dbInstanceClass = "DBInstanceClass"
        case dbInstanceCount = "DBInstanceCount"
        case duration = "Duration"
        case fixedPrice = "FixedPrice"
        case leaseId = "LeaseId"
        case multiAZ = "MultiAZ"
        case offeringType = "OfferingType"
        case productDescription = "ProductDescription"
        case recurringCharges = "RecurringCharges"
        case reservedDBInstanceArn = "ReservedDBInstanceArn"
        case reservedDBInstanceId = "ReservedDBInstanceId"
        case reservedDBInstancesOfferingId = "ReservedDBInstancesOfferingId"
        case startTime = "StartTime"
        case state = "State"
        case usagePrice = "UsagePrice"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let currencyCode = currencyCode {
            try container.encode(currencyCode, forKey: ClientRuntime.Key("CurrencyCode"))
        }
        if let dbInstanceClass = dbInstanceClass {
            try container.encode(dbInstanceClass, forKey: ClientRuntime.Key("DBInstanceClass"))
        }
        if let dbInstanceCount = dbInstanceCount {
            try container.encode(dbInstanceCount, forKey: ClientRuntime.Key("DBInstanceCount"))
        }
        if let duration = duration {
            try container.encode(duration, forKey: ClientRuntime.Key("Duration"))
        }
        if let fixedPrice = fixedPrice {
            try container.encode(fixedPrice, forKey: ClientRuntime.Key("FixedPrice"))
        }
        if let leaseId = leaseId {
            try container.encode(leaseId, forKey: ClientRuntime.Key("LeaseId"))
        }
        if let multiAZ = multiAZ {
            try container.encode(multiAZ, forKey: ClientRuntime.Key("MultiAZ"))
        }
        if let offeringType = offeringType {
            try container.encode(offeringType, forKey: ClientRuntime.Key("OfferingType"))
        }
        if let productDescription = productDescription {
            try container.encode(productDescription, forKey: ClientRuntime.Key("ProductDescription"))
        }
        if let recurringCharges = recurringCharges {
            if !recurringCharges.isEmpty {
                var recurringChargesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("RecurringCharges"))
                for (index0, recurringcharge0) in recurringCharges.enumerated() {
                    try recurringChargesContainer.encode(recurringcharge0, forKey: ClientRuntime.Key("RecurringCharge.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var recurringChargesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("RecurringCharges"))
                try recurringChargesContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let reservedDBInstanceArn = reservedDBInstanceArn {
            try container.encode(reservedDBInstanceArn, forKey: ClientRuntime.Key("ReservedDBInstanceArn"))
        }
        if let reservedDBInstanceId = reservedDBInstanceId {
            try container.encode(reservedDBInstanceId, forKey: ClientRuntime.Key("ReservedDBInstanceId"))
        }
        if let reservedDBInstancesOfferingId = reservedDBInstancesOfferingId {
            try container.encode(reservedDBInstancesOfferingId, forKey: ClientRuntime.Key("ReservedDBInstancesOfferingId"))
        }
        if let startTime = startTime {
            try container.encodeTimestamp(startTime, format: .dateTime, forKey: ClientRuntime.Key("StartTime"))
        }
        if let state = state {
            try container.encode(state, forKey: ClientRuntime.Key("State"))
        }
        if let usagePrice = usagePrice {
            try container.encode(usagePrice, forKey: ClientRuntime.Key("UsagePrice"))
        }
    }

    static var readingClosure: SmithyReadWrite.ReadingClosure<RDSClientTypes.ReservedDBInstance, SmithyXML.Reader> {
        return { reader in
            guard reader.content != nil else { return nil }
            var value = RDSClientTypes.ReservedDBInstance()
            value.reservedDBInstanceId = try reader["ReservedDBInstanceId"].readIfPresent()
            value.reservedDBInstancesOfferingId = try reader["ReservedDBInstancesOfferingId"].readIfPresent()
            value.dbInstanceClass = try reader["DBInstanceClass"].readIfPresent()
            value.startTime = try reader["StartTime"].readTimestampIfPresent(format: .dateTime)
            value.duration = try reader["Duration"].readIfPresent()
            value.fixedPrice = try reader["FixedPrice"].readIfPresent()
            value.usagePrice = try reader["UsagePrice"].readIfPresent()
            value.currencyCode = try reader["CurrencyCode"].readIfPresent()
            value.dbInstanceCount = try reader["DBInstanceCount"].readIfPresent()
            value.productDescription = try reader["ProductDescription"].readIfPresent()
            value.offeringType = try reader["OfferingType"].readIfPresent()
            value.multiAZ = try reader["MultiAZ"].readIfPresent()
            value.state = try reader["State"].readIfPresent()
            value.recurringCharges = try reader["RecurringCharges"].readListIfPresent(memberReadingClosure: RDSClientTypes.RecurringCharge.readingClosure, memberNodeInfo: "RecurringCharge", isFlattened: false)
            value.reservedDBInstanceArn = try reader["ReservedDBInstanceArn"].readIfPresent()
            value.leaseId = try reader["LeaseId"].readIfPresent()
            return value
        }
    }
}

extension RDSClientTypes {
    /// This data type is used as a response element in the DescribeReservedDBInstances and PurchaseReservedDBInstancesOffering actions.
    public struct ReservedDBInstance: Swift.Equatable {
        /// The currency code for the reserved DB instance.
        public var currencyCode: Swift.String?
        /// The DB instance class for the reserved DB instance.
        public var dbInstanceClass: Swift.String?
        /// The number of reserved DB instances.
        public var dbInstanceCount: Swift.Int?
        /// The duration of the reservation in seconds.
        public var duration: Swift.Int?
        /// The fixed price charged for this reserved DB instance.
        public var fixedPrice: Swift.Double?
        /// The unique identifier for the lease associated with the reserved DB instance. Amazon Web Services Support might request the lease ID for an issue related to a reserved DB instance.
        public var leaseId: Swift.String?
        /// Indicates whether the reservation applies to Multi-AZ deployments.
        public var multiAZ: Swift.Bool?
        /// The offering type of this reserved DB instance.
        public var offeringType: Swift.String?
        /// The description of the reserved DB instance.
        public var productDescription: Swift.String?
        /// The recurring price charged to run this reserved DB instance.
        public var recurringCharges: [RDSClientTypes.RecurringCharge]?
        /// The Amazon Resource Name (ARN) for the reserved DB instance.
        public var reservedDBInstanceArn: Swift.String?
        /// The unique identifier for the reservation.
        public var reservedDBInstanceId: Swift.String?
        /// The offering identifier.
        public var reservedDBInstancesOfferingId: Swift.String?
        /// The time the reservation started.
        public var startTime: ClientRuntime.Date?
        /// The state of the reserved DB instance.
        public var state: Swift.String?
        /// The hourly price charged for this reserved DB instance.
        public var usagePrice: Swift.Double?

        public init(
            currencyCode: Swift.String? = nil,
            dbInstanceClass: Swift.String? = nil,
            dbInstanceCount: Swift.Int? = nil,
            duration: Swift.Int? = nil,
            fixedPrice: Swift.Double? = nil,
            leaseId: Swift.String? = nil,
            multiAZ: Swift.Bool? = nil,
            offeringType: Swift.String? = nil,
            productDescription: Swift.String? = nil,
            recurringCharges: [RDSClientTypes.RecurringCharge]? = nil,
            reservedDBInstanceArn: Swift.String? = nil,
            reservedDBInstanceId: Swift.String? = nil,
            reservedDBInstancesOfferingId: Swift.String? = nil,
            startTime: ClientRuntime.Date? = nil,
            state: Swift.String? = nil,
            usagePrice: Swift.Double? = nil
        )
        {
            self.currencyCode = currencyCode
            self.dbInstanceClass = dbInstanceClass
            self.dbInstanceCount = dbInstanceCount
            self.duration = duration
            self.fixedPrice = fixedPrice
            self.leaseId = leaseId
            self.multiAZ = multiAZ
            self.offeringType = offeringType
            self.productDescription = productDescription
            self.recurringCharges = recurringCharges
            self.reservedDBInstanceArn = reservedDBInstanceArn
            self.reservedDBInstanceId = reservedDBInstanceId
            self.reservedDBInstancesOfferingId = reservedDBInstancesOfferingId
            self.startTime = startTime
            self.state = state
            self.usagePrice = usagePrice
        }
    }

}

extension ReservedDBInstanceAlreadyExistsFault {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = ReservedDBInstanceAlreadyExistsFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// User already has a reservation with the given identifier.
public struct ReservedDBInstanceAlreadyExistsFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ReservedDBInstanceAlreadyExists" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension ReservedDBInstanceNotFoundFault {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = ReservedDBInstanceNotFoundFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// The specified reserved DB Instance not found.
public struct ReservedDBInstanceNotFoundFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ReservedDBInstanceNotFound" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension ReservedDBInstanceQuotaExceededFault {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = ReservedDBInstanceQuotaExceededFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// Request would exceed the user's DB Instance quota.
public struct ReservedDBInstanceQuotaExceededFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ReservedDBInstanceQuotaExceeded" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension RDSClientTypes.ReservedDBInstancesOffering: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case currencyCode = "CurrencyCode"
        case dbInstanceClass = "DBInstanceClass"
        case duration = "Duration"
        case fixedPrice = "FixedPrice"
        case multiAZ = "MultiAZ"
        case offeringType = "OfferingType"
        case productDescription = "ProductDescription"
        case recurringCharges = "RecurringCharges"
        case reservedDBInstancesOfferingId = "ReservedDBInstancesOfferingId"
        case usagePrice = "UsagePrice"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let currencyCode = currencyCode {
            try container.encode(currencyCode, forKey: ClientRuntime.Key("CurrencyCode"))
        }
        if let dbInstanceClass = dbInstanceClass {
            try container.encode(dbInstanceClass, forKey: ClientRuntime.Key("DBInstanceClass"))
        }
        if let duration = duration {
            try container.encode(duration, forKey: ClientRuntime.Key("Duration"))
        }
        if let fixedPrice = fixedPrice {
            try container.encode(fixedPrice, forKey: ClientRuntime.Key("FixedPrice"))
        }
        if let multiAZ = multiAZ {
            try container.encode(multiAZ, forKey: ClientRuntime.Key("MultiAZ"))
        }
        if let offeringType = offeringType {
            try container.encode(offeringType, forKey: ClientRuntime.Key("OfferingType"))
        }
        if let productDescription = productDescription {
            try container.encode(productDescription, forKey: ClientRuntime.Key("ProductDescription"))
        }
        if let recurringCharges = recurringCharges {
            if !recurringCharges.isEmpty {
                var recurringChargesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("RecurringCharges"))
                for (index0, recurringcharge0) in recurringCharges.enumerated() {
                    try recurringChargesContainer.encode(recurringcharge0, forKey: ClientRuntime.Key("RecurringCharge.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var recurringChargesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("RecurringCharges"))
                try recurringChargesContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let reservedDBInstancesOfferingId = reservedDBInstancesOfferingId {
            try container.encode(reservedDBInstancesOfferingId, forKey: ClientRuntime.Key("ReservedDBInstancesOfferingId"))
        }
        if let usagePrice = usagePrice {
            try container.encode(usagePrice, forKey: ClientRuntime.Key("UsagePrice"))
        }
    }

    static var readingClosure: SmithyReadWrite.ReadingClosure<RDSClientTypes.ReservedDBInstancesOffering, SmithyXML.Reader> {
        return { reader in
            guard reader.content != nil else { return nil }
            var value = RDSClientTypes.ReservedDBInstancesOffering()
            value.reservedDBInstancesOfferingId = try reader["ReservedDBInstancesOfferingId"].readIfPresent()
            value.dbInstanceClass = try reader["DBInstanceClass"].readIfPresent()
            value.duration = try reader["Duration"].readIfPresent()
            value.fixedPrice = try reader["FixedPrice"].readIfPresent()
            value.usagePrice = try reader["UsagePrice"].readIfPresent()
            value.currencyCode = try reader["CurrencyCode"].readIfPresent()
            value.productDescription = try reader["ProductDescription"].readIfPresent()
            value.offeringType = try reader["OfferingType"].readIfPresent()
            value.multiAZ = try reader["MultiAZ"].readIfPresent()
            value.recurringCharges = try reader["RecurringCharges"].readListIfPresent(memberReadingClosure: RDSClientTypes.RecurringCharge.readingClosure, memberNodeInfo: "RecurringCharge", isFlattened: false)
            return value
        }
    }
}

extension RDSClientTypes {
    /// This data type is used as a response element in the DescribeReservedDBInstancesOfferings action.
    public struct ReservedDBInstancesOffering: Swift.Equatable {
        /// The currency code for the reserved DB instance offering.
        public var currencyCode: Swift.String?
        /// The DB instance class for the reserved DB instance.
        public var dbInstanceClass: Swift.String?
        /// The duration of the offering in seconds.
        public var duration: Swift.Int?
        /// The fixed price charged for this offering.
        public var fixedPrice: Swift.Double?
        /// Indicates whether the offering applies to Multi-AZ deployments.
        public var multiAZ: Swift.Bool?
        /// The offering type.
        public var offeringType: Swift.String?
        /// The database engine used by the offering.
        public var productDescription: Swift.String?
        /// The recurring price charged to run this reserved DB instance.
        public var recurringCharges: [RDSClientTypes.RecurringCharge]?
        /// The offering identifier.
        public var reservedDBInstancesOfferingId: Swift.String?
        /// The hourly price charged for this offering.
        public var usagePrice: Swift.Double?

        public init(
            currencyCode: Swift.String? = nil,
            dbInstanceClass: Swift.String? = nil,
            duration: Swift.Int? = nil,
            fixedPrice: Swift.Double? = nil,
            multiAZ: Swift.Bool? = nil,
            offeringType: Swift.String? = nil,
            productDescription: Swift.String? = nil,
            recurringCharges: [RDSClientTypes.RecurringCharge]? = nil,
            reservedDBInstancesOfferingId: Swift.String? = nil,
            usagePrice: Swift.Double? = nil
        )
        {
            self.currencyCode = currencyCode
            self.dbInstanceClass = dbInstanceClass
            self.duration = duration
            self.fixedPrice = fixedPrice
            self.multiAZ = multiAZ
            self.offeringType = offeringType
            self.productDescription = productDescription
            self.recurringCharges = recurringCharges
            self.reservedDBInstancesOfferingId = reservedDBInstancesOfferingId
            self.usagePrice = usagePrice
        }
    }

}

extension ReservedDBInstancesOfferingNotFoundFault {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = ReservedDBInstancesOfferingNotFoundFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// Specified offering does not exist.
public struct ReservedDBInstancesOfferingNotFoundFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ReservedDBInstancesOfferingNotFound" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension ResetDBClusterParameterGroupInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dbClusterParameterGroupName = "DBClusterParameterGroupName"
        case parameters = "Parameters"
        case resetAllParameters = "ResetAllParameters"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let dbClusterParameterGroupName = dbClusterParameterGroupName {
            try container.encode(dbClusterParameterGroupName, forKey: ClientRuntime.Key("DBClusterParameterGroupName"))
        }
        if let parameters = parameters {
            if !parameters.isEmpty {
                var parametersContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Parameters"))
                for (index0, parameter0) in parameters.enumerated() {
                    try parametersContainer.encode(parameter0, forKey: ClientRuntime.Key("Parameter.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var parametersContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Parameters"))
                try parametersContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let resetAllParameters = resetAllParameters {
            try container.encode(resetAllParameters, forKey: ClientRuntime.Key("ResetAllParameters"))
        }
        try container.encode("ResetDBClusterParameterGroup", forKey:ClientRuntime.Key("Action"))
        try container.encode("2014-10-31", forKey:ClientRuntime.Key("Version"))
    }
}

extension ResetDBClusterParameterGroupInput {

    static func urlPathProvider(_ value: ResetDBClusterParameterGroupInput) -> Swift.String? {
        return "/"
    }
}

///
public struct ResetDBClusterParameterGroupInput: Swift.Equatable {
    /// The name of the DB cluster parameter group to reset.
    /// This member is required.
    public var dbClusterParameterGroupName: Swift.String?
    /// A list of parameter names in the DB cluster parameter group to reset to the default values. You can't use this parameter if the ResetAllParameters parameter is enabled.
    public var parameters: [RDSClientTypes.Parameter]?
    /// Specifies whether to reset all parameters in the DB cluster parameter group to their default values. You can't use this parameter if there is a list of parameter names specified for the Parameters parameter.
    public var resetAllParameters: Swift.Bool?

    public init(
        dbClusterParameterGroupName: Swift.String? = nil,
        parameters: [RDSClientTypes.Parameter]? = nil,
        resetAllParameters: Swift.Bool? = nil
    )
    {
        self.dbClusterParameterGroupName = dbClusterParameterGroupName
        self.parameters = parameters
        self.resetAllParameters = resetAllParameters
    }
}

extension ResetDBClusterParameterGroupOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<ResetDBClusterParameterGroupOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["ResetDBClusterParameterGroupResult"]
            var value = ResetDBClusterParameterGroupOutput()
            value.dbClusterParameterGroupName = try reader["DBClusterParameterGroupName"].readIfPresent()
            return value
        }
    }
}

///
public struct ResetDBClusterParameterGroupOutput: Swift.Equatable {
    /// The name of the DB cluster parameter group. Constraints:
    ///
    /// * Must be 1 to 255 letters or numbers.
    ///
    /// * First character must be a letter
    ///
    /// * Can't end with a hyphen or contain two consecutive hyphens
    ///
    ///
    /// This value is stored as a lowercase string.
    public var dbClusterParameterGroupName: Swift.String?

    public init(
        dbClusterParameterGroupName: Swift.String? = nil
    )
    {
        self.dbClusterParameterGroupName = dbClusterParameterGroupName
    }
}

enum ResetDBClusterParameterGroupOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "DBParameterGroupNotFound": return try await DBParameterGroupNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "InvalidDBParameterGroupState": return try await InvalidDBParameterGroupStateFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension ResetDBParameterGroupInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dbParameterGroupName = "DBParameterGroupName"
        case parameters = "Parameters"
        case resetAllParameters = "ResetAllParameters"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let dbParameterGroupName = dbParameterGroupName {
            try container.encode(dbParameterGroupName, forKey: ClientRuntime.Key("DBParameterGroupName"))
        }
        if let parameters = parameters {
            if !parameters.isEmpty {
                var parametersContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Parameters"))
                for (index0, parameter0) in parameters.enumerated() {
                    try parametersContainer.encode(parameter0, forKey: ClientRuntime.Key("Parameter.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var parametersContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Parameters"))
                try parametersContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let resetAllParameters = resetAllParameters {
            try container.encode(resetAllParameters, forKey: ClientRuntime.Key("ResetAllParameters"))
        }
        try container.encode("ResetDBParameterGroup", forKey:ClientRuntime.Key("Action"))
        try container.encode("2014-10-31", forKey:ClientRuntime.Key("Version"))
    }
}

extension ResetDBParameterGroupInput {

    static func urlPathProvider(_ value: ResetDBParameterGroupInput) -> Swift.String? {
        return "/"
    }
}

///
public struct ResetDBParameterGroupInput: Swift.Equatable {
    /// The name of the DB parameter group. Constraints:
    ///
    /// * Must match the name of an existing DBParameterGroup.
    /// This member is required.
    public var dbParameterGroupName: Swift.String?
    /// To reset the entire DB parameter group, specify the DBParameterGroup name and ResetAllParameters parameters. To reset specific parameters, provide a list of the following: ParameterName and ApplyMethod. A maximum of 20 parameters can be modified in a single request. MySQL Valid Values (for Apply method): immediate | pending-reboot You can use the immediate value with dynamic parameters only. You can use the pending-reboot value for both dynamic and static parameters, and changes are applied when DB instance reboots. MariaDB Valid Values (for Apply method): immediate | pending-reboot You can use the immediate value with dynamic parameters only. You can use the pending-reboot value for both dynamic and static parameters, and changes are applied when DB instance reboots. Oracle Valid Values (for Apply method): pending-reboot
    public var parameters: [RDSClientTypes.Parameter]?
    /// Specifies whether to reset all parameters in the DB parameter group to default values. By default, all parameters in the DB parameter group are reset to default values.
    public var resetAllParameters: Swift.Bool?

    public init(
        dbParameterGroupName: Swift.String? = nil,
        parameters: [RDSClientTypes.Parameter]? = nil,
        resetAllParameters: Swift.Bool? = nil
    )
    {
        self.dbParameterGroupName = dbParameterGroupName
        self.parameters = parameters
        self.resetAllParameters = resetAllParameters
    }
}

extension ResetDBParameterGroupOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<ResetDBParameterGroupOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["ResetDBParameterGroupResult"]
            var value = ResetDBParameterGroupOutput()
            value.dbParameterGroupName = try reader["DBParameterGroupName"].readIfPresent()
            return value
        }
    }
}

/// Contains the result of a successful invocation of the ModifyDBParameterGroup or ResetDBParameterGroup operation.
public struct ResetDBParameterGroupOutput: Swift.Equatable {
    /// The name of the DB parameter group.
    public var dbParameterGroupName: Swift.String?

    public init(
        dbParameterGroupName: Swift.String? = nil
    )
    {
        self.dbParameterGroupName = dbParameterGroupName
    }
}

enum ResetDBParameterGroupOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "DBParameterGroupNotFound": return try await DBParameterGroupNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "InvalidDBParameterGroupState": return try await InvalidDBParameterGroupStateFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension ResourceNotFoundFault {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = ResourceNotFoundFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// The specified resource ID was not found.
public struct ResourceNotFoundFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ResourceNotFoundFault" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension RDSClientTypes.ResourcePendingMaintenanceActions: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case pendingMaintenanceActionDetails = "PendingMaintenanceActionDetails"
        case resourceIdentifier = "ResourceIdentifier"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let pendingMaintenanceActionDetails = pendingMaintenanceActionDetails {
            if !pendingMaintenanceActionDetails.isEmpty {
                var pendingMaintenanceActionDetailsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("PendingMaintenanceActionDetails"))
                for (index0, pendingmaintenanceaction0) in pendingMaintenanceActionDetails.enumerated() {
                    try pendingMaintenanceActionDetailsContainer.encode(pendingmaintenanceaction0, forKey: ClientRuntime.Key("PendingMaintenanceAction.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var pendingMaintenanceActionDetailsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("PendingMaintenanceActionDetails"))
                try pendingMaintenanceActionDetailsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let resourceIdentifier = resourceIdentifier {
            try container.encode(resourceIdentifier, forKey: ClientRuntime.Key("ResourceIdentifier"))
        }
    }

    static var readingClosure: SmithyReadWrite.ReadingClosure<RDSClientTypes.ResourcePendingMaintenanceActions, SmithyXML.Reader> {
        return { reader in
            guard reader.content != nil else { return nil }
            var value = RDSClientTypes.ResourcePendingMaintenanceActions()
            value.resourceIdentifier = try reader["ResourceIdentifier"].readIfPresent()
            value.pendingMaintenanceActionDetails = try reader["PendingMaintenanceActionDetails"].readListIfPresent(memberReadingClosure: RDSClientTypes.PendingMaintenanceAction.readingClosure, memberNodeInfo: "PendingMaintenanceAction", isFlattened: false)
            return value
        }
    }
}

extension RDSClientTypes {
    /// Describes the pending maintenance actions for a resource.
    public struct ResourcePendingMaintenanceActions: Swift.Equatable {
        /// A list that provides details about the pending maintenance actions for the resource.
        public var pendingMaintenanceActionDetails: [RDSClientTypes.PendingMaintenanceAction]?
        /// The ARN of the resource that has pending maintenance actions.
        public var resourceIdentifier: Swift.String?

        public init(
            pendingMaintenanceActionDetails: [RDSClientTypes.PendingMaintenanceAction]? = nil,
            resourceIdentifier: Swift.String? = nil
        )
        {
            self.pendingMaintenanceActionDetails = pendingMaintenanceActionDetails
            self.resourceIdentifier = resourceIdentifier
        }
    }

}

extension RestoreDBClusterFromS3Input: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case availabilityZones = "AvailabilityZones"
        case backtrackWindow = "BacktrackWindow"
        case backupRetentionPeriod = "BackupRetentionPeriod"
        case characterSetName = "CharacterSetName"
        case copyTagsToSnapshot = "CopyTagsToSnapshot"
        case dbClusterIdentifier = "DBClusterIdentifier"
        case dbClusterParameterGroupName = "DBClusterParameterGroupName"
        case dbSubnetGroupName = "DBSubnetGroupName"
        case databaseName = "DatabaseName"
        case deletionProtection = "DeletionProtection"
        case domain = "Domain"
        case domainIAMRoleName = "DomainIAMRoleName"
        case enableCloudwatchLogsExports = "EnableCloudwatchLogsExports"
        case enableIAMDatabaseAuthentication = "EnableIAMDatabaseAuthentication"
        case engine = "Engine"
        case engineVersion = "EngineVersion"
        case kmsKeyId = "KmsKeyId"
        case manageMasterUserPassword = "ManageMasterUserPassword"
        case masterUserPassword = "MasterUserPassword"
        case masterUserSecretKmsKeyId = "MasterUserSecretKmsKeyId"
        case masterUsername = "MasterUsername"
        case networkType = "NetworkType"
        case optionGroupName = "OptionGroupName"
        case port = "Port"
        case preferredBackupWindow = "PreferredBackupWindow"
        case preferredMaintenanceWindow = "PreferredMaintenanceWindow"
        case s3BucketName = "S3BucketName"
        case s3IngestionRoleArn = "S3IngestionRoleArn"
        case s3Prefix = "S3Prefix"
        case serverlessV2ScalingConfiguration = "ServerlessV2ScalingConfiguration"
        case sourceEngine = "SourceEngine"
        case sourceEngineVersion = "SourceEngineVersion"
        case storageEncrypted = "StorageEncrypted"
        case storageType = "StorageType"
        case tags = "Tags"
        case vpcSecurityGroupIds = "VpcSecurityGroupIds"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let availabilityZones = availabilityZones {
            if !availabilityZones.isEmpty {
                var availabilityZonesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("AvailabilityZones"))
                for (index0, string0) in availabilityZones.enumerated() {
                    try availabilityZonesContainer.encode(string0, forKey: ClientRuntime.Key("AvailabilityZone.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var availabilityZonesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("AvailabilityZones"))
                try availabilityZonesContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let backtrackWindow = backtrackWindow {
            try container.encode(backtrackWindow, forKey: ClientRuntime.Key("BacktrackWindow"))
        }
        if let backupRetentionPeriod = backupRetentionPeriod {
            try container.encode(backupRetentionPeriod, forKey: ClientRuntime.Key("BackupRetentionPeriod"))
        }
        if let characterSetName = characterSetName {
            try container.encode(characterSetName, forKey: ClientRuntime.Key("CharacterSetName"))
        }
        if let copyTagsToSnapshot = copyTagsToSnapshot {
            try container.encode(copyTagsToSnapshot, forKey: ClientRuntime.Key("CopyTagsToSnapshot"))
        }
        if let dbClusterIdentifier = dbClusterIdentifier {
            try container.encode(dbClusterIdentifier, forKey: ClientRuntime.Key("DBClusterIdentifier"))
        }
        if let dbClusterParameterGroupName = dbClusterParameterGroupName {
            try container.encode(dbClusterParameterGroupName, forKey: ClientRuntime.Key("DBClusterParameterGroupName"))
        }
        if let dbSubnetGroupName = dbSubnetGroupName {
            try container.encode(dbSubnetGroupName, forKey: ClientRuntime.Key("DBSubnetGroupName"))
        }
        if let databaseName = databaseName {
            try container.encode(databaseName, forKey: ClientRuntime.Key("DatabaseName"))
        }
        if let deletionProtection = deletionProtection {
            try container.encode(deletionProtection, forKey: ClientRuntime.Key("DeletionProtection"))
        }
        if let domain = domain {
            try container.encode(domain, forKey: ClientRuntime.Key("Domain"))
        }
        if let domainIAMRoleName = domainIAMRoleName {
            try container.encode(domainIAMRoleName, forKey: ClientRuntime.Key("DomainIAMRoleName"))
        }
        if let enableCloudwatchLogsExports = enableCloudwatchLogsExports {
            if !enableCloudwatchLogsExports.isEmpty {
                var enableCloudwatchLogsExportsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("EnableCloudwatchLogsExports"))
                for (index0, string0) in enableCloudwatchLogsExports.enumerated() {
                    try enableCloudwatchLogsExportsContainer.encode(string0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var enableCloudwatchLogsExportsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("EnableCloudwatchLogsExports"))
                try enableCloudwatchLogsExportsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let enableIAMDatabaseAuthentication = enableIAMDatabaseAuthentication {
            try container.encode(enableIAMDatabaseAuthentication, forKey: ClientRuntime.Key("EnableIAMDatabaseAuthentication"))
        }
        if let engine = engine {
            try container.encode(engine, forKey: ClientRuntime.Key("Engine"))
        }
        if let engineVersion = engineVersion {
            try container.encode(engineVersion, forKey: ClientRuntime.Key("EngineVersion"))
        }
        if let kmsKeyId = kmsKeyId {
            try container.encode(kmsKeyId, forKey: ClientRuntime.Key("KmsKeyId"))
        }
        if let manageMasterUserPassword = manageMasterUserPassword {
            try container.encode(manageMasterUserPassword, forKey: ClientRuntime.Key("ManageMasterUserPassword"))
        }
        if let masterUserPassword = masterUserPassword {
            try container.encode(masterUserPassword, forKey: ClientRuntime.Key("MasterUserPassword"))
        }
        if let masterUserSecretKmsKeyId = masterUserSecretKmsKeyId {
            try container.encode(masterUserSecretKmsKeyId, forKey: ClientRuntime.Key("MasterUserSecretKmsKeyId"))
        }
        if let masterUsername = masterUsername {
            try container.encode(masterUsername, forKey: ClientRuntime.Key("MasterUsername"))
        }
        if let networkType = networkType {
            try container.encode(networkType, forKey: ClientRuntime.Key("NetworkType"))
        }
        if let optionGroupName = optionGroupName {
            try container.encode(optionGroupName, forKey: ClientRuntime.Key("OptionGroupName"))
        }
        if let port = port {
            try container.encode(port, forKey: ClientRuntime.Key("Port"))
        }
        if let preferredBackupWindow = preferredBackupWindow {
            try container.encode(preferredBackupWindow, forKey: ClientRuntime.Key("PreferredBackupWindow"))
        }
        if let preferredMaintenanceWindow = preferredMaintenanceWindow {
            try container.encode(preferredMaintenanceWindow, forKey: ClientRuntime.Key("PreferredMaintenanceWindow"))
        }
        if let s3BucketName = s3BucketName {
            try container.encode(s3BucketName, forKey: ClientRuntime.Key("S3BucketName"))
        }
        if let s3IngestionRoleArn = s3IngestionRoleArn {
            try container.encode(s3IngestionRoleArn, forKey: ClientRuntime.Key("S3IngestionRoleArn"))
        }
        if let s3Prefix = s3Prefix {
            try container.encode(s3Prefix, forKey: ClientRuntime.Key("S3Prefix"))
        }
        if let serverlessV2ScalingConfiguration = serverlessV2ScalingConfiguration {
            try container.encode(serverlessV2ScalingConfiguration, forKey: ClientRuntime.Key("ServerlessV2ScalingConfiguration"))
        }
        if let sourceEngine = sourceEngine {
            try container.encode(sourceEngine, forKey: ClientRuntime.Key("SourceEngine"))
        }
        if let sourceEngineVersion = sourceEngineVersion {
            try container.encode(sourceEngineVersion, forKey: ClientRuntime.Key("SourceEngineVersion"))
        }
        if let storageEncrypted = storageEncrypted {
            try container.encode(storageEncrypted, forKey: ClientRuntime.Key("StorageEncrypted"))
        }
        if let storageType = storageType {
            try container.encode(storageType, forKey: ClientRuntime.Key("StorageType"))
        }
        if let tags = tags {
            if !tags.isEmpty {
                var tagsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Tags"))
                for (index0, tag0) in tags.enumerated() {
                    try tagsContainer.encode(tag0, forKey: ClientRuntime.Key("Tag.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var tagsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Tags"))
                try tagsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let vpcSecurityGroupIds = vpcSecurityGroupIds {
            if !vpcSecurityGroupIds.isEmpty {
                var vpcSecurityGroupIdsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("VpcSecurityGroupIds"))
                for (index0, string0) in vpcSecurityGroupIds.enumerated() {
                    try vpcSecurityGroupIdsContainer.encode(string0, forKey: ClientRuntime.Key("VpcSecurityGroupId.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var vpcSecurityGroupIdsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("VpcSecurityGroupIds"))
                try vpcSecurityGroupIdsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        try container.encode("RestoreDBClusterFromS3", forKey:ClientRuntime.Key("Action"))
        try container.encode("2014-10-31", forKey:ClientRuntime.Key("Version"))
    }
}

extension RestoreDBClusterFromS3Input {

    static func urlPathProvider(_ value: RestoreDBClusterFromS3Input) -> Swift.String? {
        return "/"
    }
}

public struct RestoreDBClusterFromS3Input: Swift.Equatable {
    /// A list of Availability Zones (AZs) where instances in the restored DB cluster can be created.
    public var availabilityZones: [Swift.String]?
    /// The target backtrack window, in seconds. To disable backtracking, set this value to 0. Currently, Backtrack is only supported for Aurora MySQL DB clusters. Default: 0 Constraints:
    ///
    /// * If specified, this value must be set to a number from 0 to 259,200 (72 hours).
    public var backtrackWindow: Swift.Int?
    /// The number of days for which automated backups of the restored DB cluster are retained. You must specify a minimum value of 1. Default: 1 Constraints:
    ///
    /// * Must be a value from 1 to 35
    public var backupRetentionPeriod: Swift.Int?
    /// A value that indicates that the restored DB cluster should be associated with the specified CharacterSet.
    public var characterSetName: Swift.String?
    /// Specifies whether to copy all tags from the restored DB cluster to snapshots of the restored DB cluster. The default is not to copy them.
    public var copyTagsToSnapshot: Swift.Bool?
    /// The database name for the restored DB cluster.
    public var databaseName: Swift.String?
    /// The name of the DB cluster to create from the source data in the Amazon S3 bucket. This parameter isn't case-sensitive. Constraints:
    ///
    /// * Must contain from 1 to 63 letters, numbers, or hyphens.
    ///
    /// * First character must be a letter.
    ///
    /// * Can't end with a hyphen or contain two consecutive hyphens.
    ///
    ///
    /// Example: my-cluster1
    /// This member is required.
    public var dbClusterIdentifier: Swift.String?
    /// The name of the DB cluster parameter group to associate with the restored DB cluster. If this argument is omitted, the default parameter group for the engine version is used. Constraints:
    ///
    /// * If supplied, must match the name of an existing DBClusterParameterGroup.
    public var dbClusterParameterGroupName: Swift.String?
    /// A DB subnet group to associate with the restored DB cluster. Constraints: If supplied, must match the name of an existing DBSubnetGroup. Example: mydbsubnetgroup
    public var dbSubnetGroupName: Swift.String?
    /// Specifies whether to enable deletion protection for the DB cluster. The database can't be deleted when deletion protection is enabled. By default, deletion protection isn't enabled.
    public var deletionProtection: Swift.Bool?
    /// Specify the Active Directory directory ID to restore the DB cluster in. The domain must be created prior to this operation. For Amazon Aurora DB clusters, Amazon RDS can use Kerberos Authentication to authenticate users that connect to the DB cluster. For more information, see [Kerberos Authentication](https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/kerberos-authentication.html) in the Amazon Aurora User Guide.
    public var domain: Swift.String?
    /// Specify the name of the IAM role to be used when making API calls to the Directory Service.
    public var domainIAMRoleName: Swift.String?
    /// The list of logs that the restored DB cluster is to export to CloudWatch Logs. The values in the list depend on the DB engine being used. Aurora MySQL Possible values are audit, error, general, and slowquery. For more information about exporting CloudWatch Logs for Amazon Aurora, see [Publishing Database Logs to Amazon CloudWatch Logs](https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch) in the Amazon Aurora User Guide.
    public var enableCloudwatchLogsExports: [Swift.String]?
    /// Specifies whether to enable mapping of Amazon Web Services Identity and Access Management (IAM) accounts to database accounts. By default, mapping isn't enabled. For more information, see [ IAM Database Authentication](https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/UsingWithRDS.IAMDBAuth.html) in the Amazon Aurora User Guide.
    public var enableIAMDatabaseAuthentication: Swift.Bool?
    /// The name of the database engine to be used for this DB cluster. Valid Values: aurora-mysql (for Aurora MySQL)
    /// This member is required.
    public var engine: Swift.String?
    /// The version number of the database engine to use. To list all of the available engine versions for aurora-mysql (Aurora MySQL), use the following command: aws rds describe-db-engine-versions --engine aurora-mysql --query "DBEngineVersions[].EngineVersion" Aurora MySQL Examples: 5.7.mysql_aurora.2.12.0, 8.0.mysql_aurora.3.04.0
    public var engineVersion: Swift.String?
    /// The Amazon Web Services KMS key identifier for an encrypted DB cluster. The Amazon Web Services KMS key identifier is the key ARN, key ID, alias ARN, or alias name for the KMS key. To use a KMS key in a different Amazon Web Services account, specify the key ARN or alias ARN. If the StorageEncrypted parameter is enabled, and you do not specify a value for the KmsKeyId parameter, then Amazon RDS will use your default KMS key. There is a default KMS key for your Amazon Web Services account. Your Amazon Web Services account has a different default KMS key for each Amazon Web Services Region.
    public var kmsKeyId: Swift.String?
    /// Specifies whether to manage the master user password with Amazon Web Services Secrets Manager. For more information, see [Password management with Amazon Web Services Secrets Manager](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/rds-secrets-manager.html) in the Amazon RDS User Guide and [Password management with Amazon Web Services Secrets Manager](https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/rds-secrets-manager.html) in the Amazon Aurora User Guide. Constraints:
    ///
    /// * Can't manage the master user password with Amazon Web Services Secrets Manager if MasterUserPassword is specified.
    public var manageMasterUserPassword: Swift.Bool?
    /// The password for the master database user. This password can contain any printable ASCII character except "/", """, or "@". Constraints:
    ///
    /// * Must contain from 8 to 41 characters.
    ///
    /// * Can't be specified if ManageMasterUserPassword is turned on.
    public var masterUserPassword: Swift.String?
    /// The Amazon Web Services KMS key identifier to encrypt a secret that is automatically generated and managed in Amazon Web Services Secrets Manager. This setting is valid only if the master user password is managed by RDS in Amazon Web Services Secrets Manager for the DB cluster. The Amazon Web Services KMS key identifier is the key ARN, key ID, alias ARN, or alias name for the KMS key. To use a KMS key in a different Amazon Web Services account, specify the key ARN or alias ARN. If you don't specify MasterUserSecretKmsKeyId, then the aws/secretsmanager KMS key is used to encrypt the secret. If the secret is in a different Amazon Web Services account, then you can't use the aws/secretsmanager KMS key to encrypt the secret, and you must use a customer managed KMS key. There is a default KMS key for your Amazon Web Services account. Your Amazon Web Services account has a different default KMS key for each Amazon Web Services Region.
    public var masterUserSecretKmsKeyId: Swift.String?
    /// The name of the master user for the restored DB cluster. Constraints:
    ///
    /// * Must be 1 to 16 letters or numbers.
    ///
    /// * First character must be a letter.
    ///
    /// * Can't be a reserved word for the chosen database engine.
    /// This member is required.
    public var masterUsername: Swift.String?
    /// The network type of the DB cluster. Valid Values:
    ///
    /// * IPV4
    ///
    /// * DUAL
    ///
    ///
    /// The network type is determined by the DBSubnetGroup specified for the DB cluster. A DBSubnetGroup can support only the IPv4 protocol or the IPv4 and the IPv6 protocols (DUAL). For more information, see [ Working with a DB instance in a VPC](https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_VPC.WorkingWithRDSInstanceinaVPC.html) in the Amazon Aurora User Guide.
    public var networkType: Swift.String?
    /// A value that indicates that the restored DB cluster should be associated with the specified option group. Permanent options can't be removed from an option group. An option group can't be removed from a DB cluster once it is associated with a DB cluster.
    public var optionGroupName: Swift.String?
    /// The port number on which the instances in the restored DB cluster accept connections. Default: 3306
    public var port: Swift.Int?
    /// The daily time range during which automated backups are created if automated backups are enabled using the BackupRetentionPeriod parameter. The default is a 30-minute window selected at random from an 8-hour block of time for each Amazon Web Services Region. To view the time blocks available, see [ Backup window](https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/Aurora.Managing.Backups.html#Aurora.Managing.Backups.BackupWindow) in the Amazon Aurora User Guide. Constraints:
    ///
    /// * Must be in the format hh24:mi-hh24:mi.
    ///
    /// * Must be in Universal Coordinated Time (UTC).
    ///
    /// * Must not conflict with the preferred maintenance window.
    ///
    /// * Must be at least 30 minutes.
    public var preferredBackupWindow: Swift.String?
    /// The weekly time range during which system maintenance can occur, in Universal Coordinated Time (UTC). Format: ddd:hh24:mi-ddd:hh24:mi The default is a 30-minute window selected at random from an 8-hour block of time for each Amazon Web Services Region, occurring on a random day of the week. To see the time blocks available, see [ Adjusting the Preferred Maintenance Window](https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_UpgradeDBInstance.Maintenance.html#AdjustingTheMaintenanceWindow.Aurora) in the Amazon Aurora User Guide. Valid Days: Mon, Tue, Wed, Thu, Fri, Sat, Sun. Constraints: Minimum 30-minute window.
    public var preferredMaintenanceWindow: Swift.String?
    /// The name of the Amazon S3 bucket that contains the data used to create the Amazon Aurora DB cluster.
    /// This member is required.
    public var s3BucketName: Swift.String?
    /// The Amazon Resource Name (ARN) of the Amazon Web Services Identity and Access Management (IAM) role that authorizes Amazon RDS to access the Amazon S3 bucket on your behalf.
    /// This member is required.
    public var s3IngestionRoleArn: Swift.String?
    /// The prefix for all of the file names that contain the data used to create the Amazon Aurora DB cluster. If you do not specify a SourceS3Prefix value, then the Amazon Aurora DB cluster is created by using all of the files in the Amazon S3 bucket.
    public var s3Prefix: Swift.String?
    /// Contains the scaling configuration of an Aurora Serverless v2 DB cluster. For more information, see [Using Amazon Aurora Serverless v2](https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless-v2.html) in the Amazon Aurora User Guide.
    public var serverlessV2ScalingConfiguration: RDSClientTypes.ServerlessV2ScalingConfiguration?
    /// The identifier for the database engine that was backed up to create the files stored in the Amazon S3 bucket. Valid Values: mysql
    /// This member is required.
    public var sourceEngine: Swift.String?
    /// The version of the database that the backup files were created from. MySQL versions 5.7 and 8.0 are supported. Example: 5.7.40, 8.0.28
    /// This member is required.
    public var sourceEngineVersion: Swift.String?
    /// Specifies whether the restored DB cluster is encrypted.
    public var storageEncrypted: Swift.Bool?
    /// Specifies the storage type to be associated with the DB cluster. Valid Values: aurora, aurora-iopt1 Default: aurora Valid for: Aurora DB clusters only
    public var storageType: Swift.String?
    /// A list of tags. For more information, see [Tagging Amazon RDS Resources](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html) in the Amazon RDS User Guide.
    public var tags: [RDSClientTypes.Tag]?
    /// A list of EC2 VPC security groups to associate with the restored DB cluster.
    public var vpcSecurityGroupIds: [Swift.String]?

    public init(
        availabilityZones: [Swift.String]? = nil,
        backtrackWindow: Swift.Int? = nil,
        backupRetentionPeriod: Swift.Int? = nil,
        characterSetName: Swift.String? = nil,
        copyTagsToSnapshot: Swift.Bool? = nil,
        databaseName: Swift.String? = nil,
        dbClusterIdentifier: Swift.String? = nil,
        dbClusterParameterGroupName: Swift.String? = nil,
        dbSubnetGroupName: Swift.String? = nil,
        deletionProtection: Swift.Bool? = nil,
        domain: Swift.String? = nil,
        domainIAMRoleName: Swift.String? = nil,
        enableCloudwatchLogsExports: [Swift.String]? = nil,
        enableIAMDatabaseAuthentication: Swift.Bool? = nil,
        engine: Swift.String? = nil,
        engineVersion: Swift.String? = nil,
        kmsKeyId: Swift.String? = nil,
        manageMasterUserPassword: Swift.Bool? = nil,
        masterUserPassword: Swift.String? = nil,
        masterUserSecretKmsKeyId: Swift.String? = nil,
        masterUsername: Swift.String? = nil,
        networkType: Swift.String? = nil,
        optionGroupName: Swift.String? = nil,
        port: Swift.Int? = nil,
        preferredBackupWindow: Swift.String? = nil,
        preferredMaintenanceWindow: Swift.String? = nil,
        s3BucketName: Swift.String? = nil,
        s3IngestionRoleArn: Swift.String? = nil,
        s3Prefix: Swift.String? = nil,
        serverlessV2ScalingConfiguration: RDSClientTypes.ServerlessV2ScalingConfiguration? = nil,
        sourceEngine: Swift.String? = nil,
        sourceEngineVersion: Swift.String? = nil,
        storageEncrypted: Swift.Bool? = nil,
        storageType: Swift.String? = nil,
        tags: [RDSClientTypes.Tag]? = nil,
        vpcSecurityGroupIds: [Swift.String]? = nil
    )
    {
        self.availabilityZones = availabilityZones
        self.backtrackWindow = backtrackWindow
        self.backupRetentionPeriod = backupRetentionPeriod
        self.characterSetName = characterSetName
        self.copyTagsToSnapshot = copyTagsToSnapshot
        self.databaseName = databaseName
        self.dbClusterIdentifier = dbClusterIdentifier
        self.dbClusterParameterGroupName = dbClusterParameterGroupName
        self.dbSubnetGroupName = dbSubnetGroupName
        self.deletionProtection = deletionProtection
        self.domain = domain
        self.domainIAMRoleName = domainIAMRoleName
        self.enableCloudwatchLogsExports = enableCloudwatchLogsExports
        self.enableIAMDatabaseAuthentication = enableIAMDatabaseAuthentication
        self.engine = engine
        self.engineVersion = engineVersion
        self.kmsKeyId = kmsKeyId
        self.manageMasterUserPassword = manageMasterUserPassword
        self.masterUserPassword = masterUserPassword
        self.masterUserSecretKmsKeyId = masterUserSecretKmsKeyId
        self.masterUsername = masterUsername
        self.networkType = networkType
        self.optionGroupName = optionGroupName
        self.port = port
        self.preferredBackupWindow = preferredBackupWindow
        self.preferredMaintenanceWindow = preferredMaintenanceWindow
        self.s3BucketName = s3BucketName
        self.s3IngestionRoleArn = s3IngestionRoleArn
        self.s3Prefix = s3Prefix
        self.serverlessV2ScalingConfiguration = serverlessV2ScalingConfiguration
        self.sourceEngine = sourceEngine
        self.sourceEngineVersion = sourceEngineVersion
        self.storageEncrypted = storageEncrypted
        self.storageType = storageType
        self.tags = tags
        self.vpcSecurityGroupIds = vpcSecurityGroupIds
    }
}

extension RestoreDBClusterFromS3Output {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<RestoreDBClusterFromS3Output, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["RestoreDBClusterFromS3Result"]
            var value = RestoreDBClusterFromS3Output()
            value.dbCluster = try reader["DBCluster"].readIfPresent(readingClosure: RDSClientTypes.DBCluster.readingClosure)
            return value
        }
    }
}

public struct RestoreDBClusterFromS3Output: Swift.Equatable {
    /// Contains the details of an Amazon Aurora DB cluster or Multi-AZ DB cluster. For an Amazon Aurora DB cluster, this data type is used as a response element in the operations CreateDBCluster, DeleteDBCluster, DescribeDBClusters, FailoverDBCluster, ModifyDBCluster, PromoteReadReplicaDBCluster, RestoreDBClusterFromS3, RestoreDBClusterFromSnapshot, RestoreDBClusterToPointInTime, StartDBCluster, and StopDBCluster. For a Multi-AZ DB cluster, this data type is used as a response element in the operations CreateDBCluster, DeleteDBCluster, DescribeDBClusters, FailoverDBCluster, ModifyDBCluster, RebootDBCluster, RestoreDBClusterFromSnapshot, and RestoreDBClusterToPointInTime. For more information on Amazon Aurora DB clusters, see [ What is Amazon Aurora?](https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html) in the Amazon Aurora User Guide. For more information on Multi-AZ DB clusters, see [ Multi-AZ deployments with two readable standby DB instances](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/multi-az-db-clusters-concepts.html) in the Amazon RDS User Guide.
    public var dbCluster: RDSClientTypes.DBCluster?

    public init(
        dbCluster: RDSClientTypes.DBCluster? = nil
    )
    {
        self.dbCluster = dbCluster
    }
}

enum RestoreDBClusterFromS3OutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "DBClusterAlreadyExistsFault": return try await DBClusterAlreadyExistsFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "DBClusterNotFoundFault": return try await DBClusterNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "DBClusterParameterGroupNotFound": return try await DBClusterParameterGroupNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "DBClusterQuotaExceededFault": return try await DBClusterQuotaExceededFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "DBSubnetGroupNotFoundFault": return try await DBSubnetGroupNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "DomainNotFoundFault": return try await DomainNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "InsufficientStorageClusterCapacity": return try await InsufficientStorageClusterCapacityFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "InvalidDBClusterStateFault": return try await InvalidDBClusterStateFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "InvalidDBSubnetGroupStateFault": return try await InvalidDBSubnetGroupStateFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "InvalidS3BucketFault": return try await InvalidS3BucketFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "InvalidSubnet": return try await InvalidSubnet.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "InvalidVPCNetworkStateFault": return try await InvalidVPCNetworkStateFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "KMSKeyNotAccessibleFault": return try await KMSKeyNotAccessibleFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "StorageQuotaExceeded": return try await StorageQuotaExceededFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "StorageTypeNotSupported": return try await StorageTypeNotSupportedFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension RestoreDBClusterFromSnapshotInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case availabilityZones = "AvailabilityZones"
        case backtrackWindow = "BacktrackWindow"
        case copyTagsToSnapshot = "CopyTagsToSnapshot"
        case dbClusterIdentifier = "DBClusterIdentifier"
        case dbClusterInstanceClass = "DBClusterInstanceClass"
        case dbClusterParameterGroupName = "DBClusterParameterGroupName"
        case dbSubnetGroupName = "DBSubnetGroupName"
        case databaseName = "DatabaseName"
        case deletionProtection = "DeletionProtection"
        case domain = "Domain"
        case domainIAMRoleName = "DomainIAMRoleName"
        case enableCloudwatchLogsExports = "EnableCloudwatchLogsExports"
        case enableIAMDatabaseAuthentication = "EnableIAMDatabaseAuthentication"
        case engine = "Engine"
        case engineMode = "EngineMode"
        case engineVersion = "EngineVersion"
        case iops = "Iops"
        case kmsKeyId = "KmsKeyId"
        case networkType = "NetworkType"
        case optionGroupName = "OptionGroupName"
        case port = "Port"
        case publiclyAccessible = "PubliclyAccessible"
        case rdsCustomClusterConfiguration = "RdsCustomClusterConfiguration"
        case scalingConfiguration = "ScalingConfiguration"
        case serverlessV2ScalingConfiguration = "ServerlessV2ScalingConfiguration"
        case snapshotIdentifier = "SnapshotIdentifier"
        case storageType = "StorageType"
        case tags = "Tags"
        case vpcSecurityGroupIds = "VpcSecurityGroupIds"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let availabilityZones = availabilityZones {
            if !availabilityZones.isEmpty {
                var availabilityZonesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("AvailabilityZones"))
                for (index0, string0) in availabilityZones.enumerated() {
                    try availabilityZonesContainer.encode(string0, forKey: ClientRuntime.Key("AvailabilityZone.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var availabilityZonesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("AvailabilityZones"))
                try availabilityZonesContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let backtrackWindow = backtrackWindow {
            try container.encode(backtrackWindow, forKey: ClientRuntime.Key("BacktrackWindow"))
        }
        if let copyTagsToSnapshot = copyTagsToSnapshot {
            try container.encode(copyTagsToSnapshot, forKey: ClientRuntime.Key("CopyTagsToSnapshot"))
        }
        if let dbClusterIdentifier = dbClusterIdentifier {
            try container.encode(dbClusterIdentifier, forKey: ClientRuntime.Key("DBClusterIdentifier"))
        }
        if let dbClusterInstanceClass = dbClusterInstanceClass {
            try container.encode(dbClusterInstanceClass, forKey: ClientRuntime.Key("DBClusterInstanceClass"))
        }
        if let dbClusterParameterGroupName = dbClusterParameterGroupName {
            try container.encode(dbClusterParameterGroupName, forKey: ClientRuntime.Key("DBClusterParameterGroupName"))
        }
        if let dbSubnetGroupName = dbSubnetGroupName {
            try container.encode(dbSubnetGroupName, forKey: ClientRuntime.Key("DBSubnetGroupName"))
        }
        if let databaseName = databaseName {
            try container.encode(databaseName, forKey: ClientRuntime.Key("DatabaseName"))
        }
        if let deletionProtection = deletionProtection {
            try container.encode(deletionProtection, forKey: ClientRuntime.Key("DeletionProtection"))
        }
        if let domain = domain {
            try container.encode(domain, forKey: ClientRuntime.Key("Domain"))
        }
        if let domainIAMRoleName = domainIAMRoleName {
            try container.encode(domainIAMRoleName, forKey: ClientRuntime.Key("DomainIAMRoleName"))
        }
        if let enableCloudwatchLogsExports = enableCloudwatchLogsExports {
            if !enableCloudwatchLogsExports.isEmpty {
                var enableCloudwatchLogsExportsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("EnableCloudwatchLogsExports"))
                for (index0, string0) in enableCloudwatchLogsExports.enumerated() {
                    try enableCloudwatchLogsExportsContainer.encode(string0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var enableCloudwatchLogsExportsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("EnableCloudwatchLogsExports"))
                try enableCloudwatchLogsExportsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let enableIAMDatabaseAuthentication = enableIAMDatabaseAuthentication {
            try container.encode(enableIAMDatabaseAuthentication, forKey: ClientRuntime.Key("EnableIAMDatabaseAuthentication"))
        }
        if let engine = engine {
            try container.encode(engine, forKey: ClientRuntime.Key("Engine"))
        }
        if let engineMode = engineMode {
            try container.encode(engineMode, forKey: ClientRuntime.Key("EngineMode"))
        }
        if let engineVersion = engineVersion {
            try container.encode(engineVersion, forKey: ClientRuntime.Key("EngineVersion"))
        }
        if let iops = iops {
            try container.encode(iops, forKey: ClientRuntime.Key("Iops"))
        }
        if let kmsKeyId = kmsKeyId {
            try container.encode(kmsKeyId, forKey: ClientRuntime.Key("KmsKeyId"))
        }
        if let networkType = networkType {
            try container.encode(networkType, forKey: ClientRuntime.Key("NetworkType"))
        }
        if let optionGroupName = optionGroupName {
            try container.encode(optionGroupName, forKey: ClientRuntime.Key("OptionGroupName"))
        }
        if let port = port {
            try container.encode(port, forKey: ClientRuntime.Key("Port"))
        }
        if let publiclyAccessible = publiclyAccessible {
            try container.encode(publiclyAccessible, forKey: ClientRuntime.Key("PubliclyAccessible"))
        }
        if let rdsCustomClusterConfiguration = rdsCustomClusterConfiguration {
            try container.encode(rdsCustomClusterConfiguration, forKey: ClientRuntime.Key("RdsCustomClusterConfiguration"))
        }
        if let scalingConfiguration = scalingConfiguration {
            try container.encode(scalingConfiguration, forKey: ClientRuntime.Key("ScalingConfiguration"))
        }
        if let serverlessV2ScalingConfiguration = serverlessV2ScalingConfiguration {
            try container.encode(serverlessV2ScalingConfiguration, forKey: ClientRuntime.Key("ServerlessV2ScalingConfiguration"))
        }
        if let snapshotIdentifier = snapshotIdentifier {
            try container.encode(snapshotIdentifier, forKey: ClientRuntime.Key("SnapshotIdentifier"))
        }
        if let storageType = storageType {
            try container.encode(storageType, forKey: ClientRuntime.Key("StorageType"))
        }
        if let tags = tags {
            if !tags.isEmpty {
                var tagsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Tags"))
                for (index0, tag0) in tags.enumerated() {
                    try tagsContainer.encode(tag0, forKey: ClientRuntime.Key("Tag.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var tagsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Tags"))
                try tagsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let vpcSecurityGroupIds = vpcSecurityGroupIds {
            if !vpcSecurityGroupIds.isEmpty {
                var vpcSecurityGroupIdsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("VpcSecurityGroupIds"))
                for (index0, string0) in vpcSecurityGroupIds.enumerated() {
                    try vpcSecurityGroupIdsContainer.encode(string0, forKey: ClientRuntime.Key("VpcSecurityGroupId.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var vpcSecurityGroupIdsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("VpcSecurityGroupIds"))
                try vpcSecurityGroupIdsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        try container.encode("RestoreDBClusterFromSnapshot", forKey:ClientRuntime.Key("Action"))
        try container.encode("2014-10-31", forKey:ClientRuntime.Key("Version"))
    }
}

extension RestoreDBClusterFromSnapshotInput {

    static func urlPathProvider(_ value: RestoreDBClusterFromSnapshotInput) -> Swift.String? {
        return "/"
    }
}

///
public struct RestoreDBClusterFromSnapshotInput: Swift.Equatable {
    /// Provides the list of Availability Zones (AZs) where instances in the restored DB cluster can be created. Valid for: Aurora DB clusters only
    public var availabilityZones: [Swift.String]?
    /// The target backtrack window, in seconds. To disable backtracking, set this value to 0. Currently, Backtrack is only supported for Aurora MySQL DB clusters. Default: 0 Constraints:
    ///
    /// * If specified, this value must be set to a number from 0 to 259,200 (72 hours).
    ///
    ///
    /// Valid for: Aurora DB clusters only
    public var backtrackWindow: Swift.Int?
    /// Specifies whether to copy all tags from the restored DB cluster to snapshots of the restored DB cluster. The default is not to copy them. Valid for: Aurora DB clusters and Multi-AZ DB clusters
    public var copyTagsToSnapshot: Swift.Bool?
    /// The database name for the restored DB cluster. Valid for: Aurora DB clusters and Multi-AZ DB clusters
    public var databaseName: Swift.String?
    /// The name of the DB cluster to create from the DB snapshot or DB cluster snapshot. This parameter isn't case-sensitive. Constraints:
    ///
    /// * Must contain from 1 to 63 letters, numbers, or hyphens
    ///
    /// * First character must be a letter
    ///
    /// * Can't end with a hyphen or contain two consecutive hyphens
    ///
    ///
    /// Example: my-snapshot-id Valid for: Aurora DB clusters and Multi-AZ DB clusters
    /// This member is required.
    public var dbClusterIdentifier: Swift.String?
    /// The compute and memory capacity of the each DB instance in the Multi-AZ DB cluster, for example db.m6gd.xlarge. Not all DB instance classes are available in all Amazon Web Services Regions, or for all database engines. For the full list of DB instance classes, and availability for your engine, see [DB Instance Class](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.DBInstanceClass.html) in the Amazon RDS User Guide. Valid for: Multi-AZ DB clusters only
    public var dbClusterInstanceClass: Swift.String?
    /// The name of the DB cluster parameter group to associate with this DB cluster. If this argument is omitted, the default DB cluster parameter group for the specified engine is used. Constraints:
    ///
    /// * If supplied, must match the name of an existing default DB cluster parameter group.
    ///
    /// * Must be 1 to 255 letters, numbers, or hyphens.
    ///
    /// * First character must be a letter.
    ///
    /// * Can't end with a hyphen or contain two consecutive hyphens.
    ///
    ///
    /// Valid for: Aurora DB clusters and Multi-AZ DB clusters
    public var dbClusterParameterGroupName: Swift.String?
    /// The name of the DB subnet group to use for the new DB cluster. Constraints: If supplied, must match the name of an existing DB subnet group. Example: mydbsubnetgroup Valid for: Aurora DB clusters and Multi-AZ DB clusters
    public var dbSubnetGroupName: Swift.String?
    /// Specifies whether to enable deletion protection for the DB cluster. The database can't be deleted when deletion protection is enabled. By default, deletion protection isn't enabled. Valid for: Aurora DB clusters and Multi-AZ DB clusters
    public var deletionProtection: Swift.Bool?
    /// The Active Directory directory ID to restore the DB cluster in. The domain must be created prior to this operation. Currently, only MySQL, Microsoft SQL Server, Oracle, and PostgreSQL DB instances can be created in an Active Directory Domain. For more information, see [ Kerberos Authentication](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/kerberos-authentication.html) in the Amazon RDS User Guide. Valid for: Aurora DB clusters only
    public var domain: Swift.String?
    /// The name of the IAM role to be used when making API calls to the Directory Service. Valid for: Aurora DB clusters only
    public var domainIAMRoleName: Swift.String?
    /// The list of logs that the restored DB cluster is to export to Amazon CloudWatch Logs. The values in the list depend on the DB engine being used. RDS for MySQL Possible values are error, general, and slowquery. RDS for PostgreSQL Possible values are postgresql and upgrade. Aurora MySQL Possible values are audit, error, general, and slowquery. Aurora PostgreSQL Possible value is postgresql. For more information about exporting CloudWatch Logs for Amazon RDS, see [Publishing Database Logs to Amazon CloudWatch Logs](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch) in the Amazon RDS User Guide. For more information about exporting CloudWatch Logs for Amazon Aurora, see [Publishing Database Logs to Amazon CloudWatch Logs](https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch) in the Amazon Aurora User Guide. Valid for: Aurora DB clusters and Multi-AZ DB clusters
    public var enableCloudwatchLogsExports: [Swift.String]?
    /// Specifies whether to enable mapping of Amazon Web Services Identity and Access Management (IAM) accounts to database accounts. By default, mapping isn't enabled. For more information, see [ IAM Database Authentication](https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/UsingWithRDS.IAMDBAuth.html) in the Amazon Aurora User Guide. Valid for: Aurora DB clusters only
    public var enableIAMDatabaseAuthentication: Swift.Bool?
    /// The database engine to use for the new DB cluster. Default: The same as source Constraint: Must be compatible with the engine of the source Valid for: Aurora DB clusters and Multi-AZ DB clusters
    /// This member is required.
    public var engine: Swift.String?
    /// The DB engine mode of the DB cluster, either provisioned or serverless. For more information, see [ CreateDBCluster](https://docs.aws.amazon.com/AmazonRDS/latest/APIReference/API_CreateDBCluster.html). Valid for: Aurora DB clusters only
    public var engineMode: Swift.String?
    /// The version of the database engine to use for the new DB cluster. If you don't specify an engine version, the default version for the database engine in the Amazon Web Services Region is used. To list all of the available engine versions for Aurora MySQL, use the following command: aws rds describe-db-engine-versions --engine aurora-mysql --query "DBEngineVersions[].EngineVersion" To list all of the available engine versions for Aurora PostgreSQL, use the following command: aws rds describe-db-engine-versions --engine aurora-postgresql --query "DBEngineVersions[].EngineVersion" To list all of the available engine versions for RDS for MySQL, use the following command: aws rds describe-db-engine-versions --engine mysql --query "DBEngineVersions[].EngineVersion" To list all of the available engine versions for RDS for PostgreSQL, use the following command: aws rds describe-db-engine-versions --engine postgres --query "DBEngineVersions[].EngineVersion" Aurora MySQL See [Database engine updates for Amazon Aurora MySQL](https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/AuroraMySQL.Updates.html) in the Amazon Aurora User Guide. Aurora PostgreSQL See [Amazon Aurora PostgreSQL releases and engine versions](https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/AuroraPostgreSQL.Updates.20180305.html) in the Amazon Aurora User Guide. MySQL See [Amazon RDS for MySQL](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_MySQL.html#MySQL.Concepts.VersionMgmt) in the Amazon RDS User Guide. PostgreSQL See [Amazon RDS for PostgreSQL versions and extensions](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_PostgreSQL.html#PostgreSQL.Concepts) in the Amazon RDS User Guide. Valid for: Aurora DB clusters and Multi-AZ DB clusters
    public var engineVersion: Swift.String?
    /// The amount of Provisioned IOPS (input/output operations per second) to be initially allocated for each DB instance in the Multi-AZ DB cluster. For information about valid IOPS values, see [Amazon RDS Provisioned IOPS storage](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_Storage.html#USER_PIOPS) in the Amazon RDS User Guide. Constraints: Must be a multiple between .5 and 50 of the storage amount for the DB instance. Valid for: Aurora DB clusters and Multi-AZ DB clusters
    public var iops: Swift.Int?
    /// The Amazon Web Services KMS key identifier to use when restoring an encrypted DB cluster from a DB snapshot or DB cluster snapshot. The Amazon Web Services KMS key identifier is the key ARN, key ID, alias ARN, or alias name for the KMS key. To use a KMS key in a different Amazon Web Services account, specify the key ARN or alias ARN. When you don't specify a value for the KmsKeyId parameter, then the following occurs:
    ///
    /// * If the DB snapshot or DB cluster snapshot in SnapshotIdentifier is encrypted, then the restored DB cluster is encrypted using the KMS key that was used to encrypt the DB snapshot or DB cluster snapshot.
    ///
    /// * If the DB snapshot or DB cluster snapshot in SnapshotIdentifier isn't encrypted, then the restored DB cluster isn't encrypted.
    ///
    ///
    /// Valid for: Aurora DB clusters and Multi-AZ DB clusters
    public var kmsKeyId: Swift.String?
    /// The network type of the DB cluster. Valid Values:
    ///
    /// * IPV4
    ///
    /// * DUAL
    ///
    ///
    /// The network type is determined by the DBSubnetGroup specified for the DB cluster. A DBSubnetGroup can support only the IPv4 protocol or the IPv4 and the IPv6 protocols (DUAL). For more information, see [ Working with a DB instance in a VPC](https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_VPC.WorkingWithRDSInstanceinaVPC.html) in the Amazon Aurora User Guide. Valid for: Aurora DB clusters only
    public var networkType: Swift.String?
    /// The name of the option group to use for the restored DB cluster. DB clusters are associated with a default option group that can't be modified.
    public var optionGroupName: Swift.String?
    /// The port number on which the new DB cluster accepts connections. Constraints: This value must be 1150-65535 Default: The same port as the original DB cluster. Valid for: Aurora DB clusters and Multi-AZ DB clusters
    public var port: Swift.Int?
    /// Specifies whether the DB cluster is publicly accessible. When the DB cluster is publicly accessible, its Domain Name System (DNS) endpoint resolves to the private IP address from within the DB cluster's virtual private cloud (VPC). It resolves to the public IP address from outside of the DB cluster's VPC. Access to the DB cluster is ultimately controlled by the security group it uses. That public access is not permitted if the security group assigned to the DB cluster doesn't permit it. When the DB cluster isn't publicly accessible, it is an internal DB cluster with a DNS name that resolves to a private IP address. Default: The default behavior varies depending on whether DBSubnetGroupName is specified. If DBSubnetGroupName isn't specified, and PubliclyAccessible isn't specified, the following applies:
    ///
    /// * If the default VPC in the target Region doesn’t have an internet gateway attached to it, the DB cluster is private.
    ///
    /// * If the default VPC in the target Region has an internet gateway attached to it, the DB cluster is public.
    ///
    ///
    /// If DBSubnetGroupName is specified, and PubliclyAccessible isn't specified, the following applies:
    ///
    /// * If the subnets are part of a VPC that doesn’t have an internet gateway attached to it, the DB cluster is private.
    ///
    /// * If the subnets are part of a VPC that has an internet gateway attached to it, the DB cluster is public.
    ///
    ///
    /// Valid for: Aurora DB clusters and Multi-AZ DB clusters
    public var publiclyAccessible: Swift.Bool?
    /// Reserved for future use.
    public var rdsCustomClusterConfiguration: RDSClientTypes.RdsCustomClusterConfiguration?
    /// For DB clusters in serverless DB engine mode, the scaling properties of the DB cluster. Valid for: Aurora DB clusters only
    public var scalingConfiguration: RDSClientTypes.ScalingConfiguration?
    /// Contains the scaling configuration of an Aurora Serverless v2 DB cluster. For more information, see [Using Amazon Aurora Serverless v2](https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless-v2.html) in the Amazon Aurora User Guide.
    public var serverlessV2ScalingConfiguration: RDSClientTypes.ServerlessV2ScalingConfiguration?
    /// The identifier for the DB snapshot or DB cluster snapshot to restore from. You can use either the name or the Amazon Resource Name (ARN) to specify a DB cluster snapshot. However, you can use only the ARN to specify a DB snapshot. Constraints:
    ///
    /// * Must match the identifier of an existing Snapshot.
    ///
    ///
    /// Valid for: Aurora DB clusters and Multi-AZ DB clusters
    /// This member is required.
    public var snapshotIdentifier: Swift.String?
    /// Specifies the storage type to be associated with the DB cluster. When specified for a Multi-AZ DB cluster, a value for the Iops parameter is required. Valid Values: aurora, aurora-iopt1 (Aurora DB clusters); io1 (Multi-AZ DB clusters) Default: aurora (Aurora DB clusters); io1 (Multi-AZ DB clusters) Valid for: Aurora DB clusters and Multi-AZ DB clusters
    public var storageType: Swift.String?
    /// The tags to be assigned to the restored DB cluster. Valid for: Aurora DB clusters and Multi-AZ DB clusters
    public var tags: [RDSClientTypes.Tag]?
    /// A list of VPC security groups that the new DB cluster will belong to. Valid for: Aurora DB clusters and Multi-AZ DB clusters
    public var vpcSecurityGroupIds: [Swift.String]?

    public init(
        availabilityZones: [Swift.String]? = nil,
        backtrackWindow: Swift.Int? = nil,
        copyTagsToSnapshot: Swift.Bool? = nil,
        databaseName: Swift.String? = nil,
        dbClusterIdentifier: Swift.String? = nil,
        dbClusterInstanceClass: Swift.String? = nil,
        dbClusterParameterGroupName: Swift.String? = nil,
        dbSubnetGroupName: Swift.String? = nil,
        deletionProtection: Swift.Bool? = nil,
        domain: Swift.String? = nil,
        domainIAMRoleName: Swift.String? = nil,
        enableCloudwatchLogsExports: [Swift.String]? = nil,
        enableIAMDatabaseAuthentication: Swift.Bool? = nil,
        engine: Swift.String? = nil,
        engineMode: Swift.String? = nil,
        engineVersion: Swift.String? = nil,
        iops: Swift.Int? = nil,
        kmsKeyId: Swift.String? = nil,
        networkType: Swift.String? = nil,
        optionGroupName: Swift.String? = nil,
        port: Swift.Int? = nil,
        publiclyAccessible: Swift.Bool? = nil,
        rdsCustomClusterConfiguration: RDSClientTypes.RdsCustomClusterConfiguration? = nil,
        scalingConfiguration: RDSClientTypes.ScalingConfiguration? = nil,
        serverlessV2ScalingConfiguration: RDSClientTypes.ServerlessV2ScalingConfiguration? = nil,
        snapshotIdentifier: Swift.String? = nil,
        storageType: Swift.String? = nil,
        tags: [RDSClientTypes.Tag]? = nil,
        vpcSecurityGroupIds: [Swift.String]? = nil
    )
    {
        self.availabilityZones = availabilityZones
        self.backtrackWindow = backtrackWindow
        self.copyTagsToSnapshot = copyTagsToSnapshot
        self.databaseName = databaseName
        self.dbClusterIdentifier = dbClusterIdentifier
        self.dbClusterInstanceClass = dbClusterInstanceClass
        self.dbClusterParameterGroupName = dbClusterParameterGroupName
        self.dbSubnetGroupName = dbSubnetGroupName
        self.deletionProtection = deletionProtection
        self.domain = domain
        self.domainIAMRoleName = domainIAMRoleName
        self.enableCloudwatchLogsExports = enableCloudwatchLogsExports
        self.enableIAMDatabaseAuthentication = enableIAMDatabaseAuthentication
        self.engine = engine
        self.engineMode = engineMode
        self.engineVersion = engineVersion
        self.iops = iops
        self.kmsKeyId = kmsKeyId
        self.networkType = networkType
        self.optionGroupName = optionGroupName
        self.port = port
        self.publiclyAccessible = publiclyAccessible
        self.rdsCustomClusterConfiguration = rdsCustomClusterConfiguration
        self.scalingConfiguration = scalingConfiguration
        self.serverlessV2ScalingConfiguration = serverlessV2ScalingConfiguration
        self.snapshotIdentifier = snapshotIdentifier
        self.storageType = storageType
        self.tags = tags
        self.vpcSecurityGroupIds = vpcSecurityGroupIds
    }
}

extension RestoreDBClusterFromSnapshotOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<RestoreDBClusterFromSnapshotOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["RestoreDBClusterFromSnapshotResult"]
            var value = RestoreDBClusterFromSnapshotOutput()
            value.dbCluster = try reader["DBCluster"].readIfPresent(readingClosure: RDSClientTypes.DBCluster.readingClosure)
            return value
        }
    }
}

public struct RestoreDBClusterFromSnapshotOutput: Swift.Equatable {
    /// Contains the details of an Amazon Aurora DB cluster or Multi-AZ DB cluster. For an Amazon Aurora DB cluster, this data type is used as a response element in the operations CreateDBCluster, DeleteDBCluster, DescribeDBClusters, FailoverDBCluster, ModifyDBCluster, PromoteReadReplicaDBCluster, RestoreDBClusterFromS3, RestoreDBClusterFromSnapshot, RestoreDBClusterToPointInTime, StartDBCluster, and StopDBCluster. For a Multi-AZ DB cluster, this data type is used as a response element in the operations CreateDBCluster, DeleteDBCluster, DescribeDBClusters, FailoverDBCluster, ModifyDBCluster, RebootDBCluster, RestoreDBClusterFromSnapshot, and RestoreDBClusterToPointInTime. For more information on Amazon Aurora DB clusters, see [ What is Amazon Aurora?](https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html) in the Amazon Aurora User Guide. For more information on Multi-AZ DB clusters, see [ Multi-AZ deployments with two readable standby DB instances](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/multi-az-db-clusters-concepts.html) in the Amazon RDS User Guide.
    public var dbCluster: RDSClientTypes.DBCluster?

    public init(
        dbCluster: RDSClientTypes.DBCluster? = nil
    )
    {
        self.dbCluster = dbCluster
    }
}

enum RestoreDBClusterFromSnapshotOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "DBClusterAlreadyExistsFault": return try await DBClusterAlreadyExistsFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "DBClusterParameterGroupNotFound": return try await DBClusterParameterGroupNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "DBClusterQuotaExceededFault": return try await DBClusterQuotaExceededFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "DBClusterSnapshotNotFoundFault": return try await DBClusterSnapshotNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "DBSnapshotNotFound": return try await DBSnapshotNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "DBSubnetGroupDoesNotCoverEnoughAZs": return try await DBSubnetGroupDoesNotCoverEnoughAZs.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "DBSubnetGroupNotFoundFault": return try await DBSubnetGroupNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "DomainNotFoundFault": return try await DomainNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "InsufficientDBClusterCapacityFault": return try await InsufficientDBClusterCapacityFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "InsufficientDBInstanceCapacity": return try await InsufficientDBInstanceCapacityFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "InsufficientStorageClusterCapacity": return try await InsufficientStorageClusterCapacityFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "InvalidDBClusterSnapshotStateFault": return try await InvalidDBClusterSnapshotStateFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "InvalidDBInstanceState": return try await InvalidDBInstanceStateFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "InvalidDBSnapshotState": return try await InvalidDBSnapshotStateFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "InvalidRestoreFault": return try await InvalidRestoreFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "InvalidSubnet": return try await InvalidSubnet.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "InvalidVPCNetworkStateFault": return try await InvalidVPCNetworkStateFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "KMSKeyNotAccessibleFault": return try await KMSKeyNotAccessibleFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "OptionGroupNotFoundFault": return try await OptionGroupNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "StorageQuotaExceeded": return try await StorageQuotaExceededFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension RestoreDBClusterToPointInTimeInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case backtrackWindow = "BacktrackWindow"
        case copyTagsToSnapshot = "CopyTagsToSnapshot"
        case dbClusterIdentifier = "DBClusterIdentifier"
        case dbClusterInstanceClass = "DBClusterInstanceClass"
        case dbClusterParameterGroupName = "DBClusterParameterGroupName"
        case dbSubnetGroupName = "DBSubnetGroupName"
        case deletionProtection = "DeletionProtection"
        case domain = "Domain"
        case domainIAMRoleName = "DomainIAMRoleName"
        case enableCloudwatchLogsExports = "EnableCloudwatchLogsExports"
        case enableIAMDatabaseAuthentication = "EnableIAMDatabaseAuthentication"
        case engineMode = "EngineMode"
        case iops = "Iops"
        case kmsKeyId = "KmsKeyId"
        case networkType = "NetworkType"
        case optionGroupName = "OptionGroupName"
        case port = "Port"
        case publiclyAccessible = "PubliclyAccessible"
        case rdsCustomClusterConfiguration = "RdsCustomClusterConfiguration"
        case restoreToTime = "RestoreToTime"
        case restoreType = "RestoreType"
        case scalingConfiguration = "ScalingConfiguration"
        case serverlessV2ScalingConfiguration = "ServerlessV2ScalingConfiguration"
        case sourceDBClusterIdentifier = "SourceDBClusterIdentifier"
        case sourceDbClusterResourceId = "SourceDbClusterResourceId"
        case storageType = "StorageType"
        case tags = "Tags"
        case useLatestRestorableTime = "UseLatestRestorableTime"
        case vpcSecurityGroupIds = "VpcSecurityGroupIds"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let backtrackWindow = backtrackWindow {
            try container.encode(backtrackWindow, forKey: ClientRuntime.Key("BacktrackWindow"))
        }
        if let copyTagsToSnapshot = copyTagsToSnapshot {
            try container.encode(copyTagsToSnapshot, forKey: ClientRuntime.Key("CopyTagsToSnapshot"))
        }
        if let dbClusterIdentifier = dbClusterIdentifier {
            try container.encode(dbClusterIdentifier, forKey: ClientRuntime.Key("DBClusterIdentifier"))
        }
        if let dbClusterInstanceClass = dbClusterInstanceClass {
            try container.encode(dbClusterInstanceClass, forKey: ClientRuntime.Key("DBClusterInstanceClass"))
        }
        if let dbClusterParameterGroupName = dbClusterParameterGroupName {
            try container.encode(dbClusterParameterGroupName, forKey: ClientRuntime.Key("DBClusterParameterGroupName"))
        }
        if let dbSubnetGroupName = dbSubnetGroupName {
            try container.encode(dbSubnetGroupName, forKey: ClientRuntime.Key("DBSubnetGroupName"))
        }
        if let deletionProtection = deletionProtection {
            try container.encode(deletionProtection, forKey: ClientRuntime.Key("DeletionProtection"))
        }
        if let domain = domain {
            try container.encode(domain, forKey: ClientRuntime.Key("Domain"))
        }
        if let domainIAMRoleName = domainIAMRoleName {
            try container.encode(domainIAMRoleName, forKey: ClientRuntime.Key("DomainIAMRoleName"))
        }
        if let enableCloudwatchLogsExports = enableCloudwatchLogsExports {
            if !enableCloudwatchLogsExports.isEmpty {
                var enableCloudwatchLogsExportsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("EnableCloudwatchLogsExports"))
                for (index0, string0) in enableCloudwatchLogsExports.enumerated() {
                    try enableCloudwatchLogsExportsContainer.encode(string0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var enableCloudwatchLogsExportsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("EnableCloudwatchLogsExports"))
                try enableCloudwatchLogsExportsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let enableIAMDatabaseAuthentication = enableIAMDatabaseAuthentication {
            try container.encode(enableIAMDatabaseAuthentication, forKey: ClientRuntime.Key("EnableIAMDatabaseAuthentication"))
        }
        if let engineMode = engineMode {
            try container.encode(engineMode, forKey: ClientRuntime.Key("EngineMode"))
        }
        if let iops = iops {
            try container.encode(iops, forKey: ClientRuntime.Key("Iops"))
        }
        if let kmsKeyId = kmsKeyId {
            try container.encode(kmsKeyId, forKey: ClientRuntime.Key("KmsKeyId"))
        }
        if let networkType = networkType {
            try container.encode(networkType, forKey: ClientRuntime.Key("NetworkType"))
        }
        if let optionGroupName = optionGroupName {
            try container.encode(optionGroupName, forKey: ClientRuntime.Key("OptionGroupName"))
        }
        if let port = port {
            try container.encode(port, forKey: ClientRuntime.Key("Port"))
        }
        if let publiclyAccessible = publiclyAccessible {
            try container.encode(publiclyAccessible, forKey: ClientRuntime.Key("PubliclyAccessible"))
        }
        if let rdsCustomClusterConfiguration = rdsCustomClusterConfiguration {
            try container.encode(rdsCustomClusterConfiguration, forKey: ClientRuntime.Key("RdsCustomClusterConfiguration"))
        }
        if let restoreToTime = restoreToTime {
            try container.encodeTimestamp(restoreToTime, format: .dateTime, forKey: ClientRuntime.Key("RestoreToTime"))
        }
        if let restoreType = restoreType {
            try container.encode(restoreType, forKey: ClientRuntime.Key("RestoreType"))
        }
        if let scalingConfiguration = scalingConfiguration {
            try container.encode(scalingConfiguration, forKey: ClientRuntime.Key("ScalingConfiguration"))
        }
        if let serverlessV2ScalingConfiguration = serverlessV2ScalingConfiguration {
            try container.encode(serverlessV2ScalingConfiguration, forKey: ClientRuntime.Key("ServerlessV2ScalingConfiguration"))
        }
        if let sourceDBClusterIdentifier = sourceDBClusterIdentifier {
            try container.encode(sourceDBClusterIdentifier, forKey: ClientRuntime.Key("SourceDBClusterIdentifier"))
        }
        if let sourceDbClusterResourceId = sourceDbClusterResourceId {
            try container.encode(sourceDbClusterResourceId, forKey: ClientRuntime.Key("SourceDbClusterResourceId"))
        }
        if let storageType = storageType {
            try container.encode(storageType, forKey: ClientRuntime.Key("StorageType"))
        }
        if let tags = tags {
            if !tags.isEmpty {
                var tagsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Tags"))
                for (index0, tag0) in tags.enumerated() {
                    try tagsContainer.encode(tag0, forKey: ClientRuntime.Key("Tag.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var tagsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Tags"))
                try tagsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let useLatestRestorableTime = useLatestRestorableTime {
            try container.encode(useLatestRestorableTime, forKey: ClientRuntime.Key("UseLatestRestorableTime"))
        }
        if let vpcSecurityGroupIds = vpcSecurityGroupIds {
            if !vpcSecurityGroupIds.isEmpty {
                var vpcSecurityGroupIdsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("VpcSecurityGroupIds"))
                for (index0, string0) in vpcSecurityGroupIds.enumerated() {
                    try vpcSecurityGroupIdsContainer.encode(string0, forKey: ClientRuntime.Key("VpcSecurityGroupId.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var vpcSecurityGroupIdsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("VpcSecurityGroupIds"))
                try vpcSecurityGroupIdsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        try container.encode("RestoreDBClusterToPointInTime", forKey:ClientRuntime.Key("Action"))
        try container.encode("2014-10-31", forKey:ClientRuntime.Key("Version"))
    }
}

extension RestoreDBClusterToPointInTimeInput {

    static func urlPathProvider(_ value: RestoreDBClusterToPointInTimeInput) -> Swift.String? {
        return "/"
    }
}

///
public struct RestoreDBClusterToPointInTimeInput: Swift.Equatable {
    /// The target backtrack window, in seconds. To disable backtracking, set this value to 0. Default: 0 Constraints:
    ///
    /// * If specified, this value must be set to a number from 0 to 259,200 (72 hours).
    ///
    ///
    /// Valid for: Aurora MySQL DB clusters only
    public var backtrackWindow: Swift.Int?
    /// Specifies whether to copy all tags from the restored DB cluster to snapshots of the restored DB cluster. The default is not to copy them. Valid for: Aurora DB clusters and Multi-AZ DB clusters
    public var copyTagsToSnapshot: Swift.Bool?
    /// The name of the new DB cluster to be created. Constraints:
    ///
    /// * Must contain from 1 to 63 letters, numbers, or hyphens
    ///
    /// * First character must be a letter
    ///
    /// * Can't end with a hyphen or contain two consecutive hyphens
    ///
    ///
    /// Valid for: Aurora DB clusters and Multi-AZ DB clusters
    /// This member is required.
    public var dbClusterIdentifier: Swift.String?
    /// The compute and memory capacity of the each DB instance in the Multi-AZ DB cluster, for example db.m6gd.xlarge. Not all DB instance classes are available in all Amazon Web Services Regions, or for all database engines. For the full list of DB instance classes, and availability for your engine, see [DB instance class](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.DBInstanceClass.html) in the Amazon RDS User Guide. Valid for: Multi-AZ DB clusters only
    public var dbClusterInstanceClass: Swift.String?
    /// The name of the custom DB cluster parameter group to associate with this DB cluster. If the DBClusterParameterGroupName parameter is omitted, the default DB cluster parameter group for the specified engine is used. Constraints:
    ///
    /// * If supplied, must match the name of an existing DB cluster parameter group.
    ///
    /// * Must be 1 to 255 letters, numbers, or hyphens.
    ///
    /// * First character must be a letter.
    ///
    /// * Can't end with a hyphen or contain two consecutive hyphens.
    ///
    ///
    /// Valid for: Aurora DB clusters and Multi-AZ DB clusters
    public var dbClusterParameterGroupName: Swift.String?
    /// The DB subnet group name to use for the new DB cluster. Constraints: If supplied, must match the name of an existing DBSubnetGroup. Example: mydbsubnetgroup Valid for: Aurora DB clusters and Multi-AZ DB clusters
    public var dbSubnetGroupName: Swift.String?
    /// Specifies whether to enable deletion protection for the DB cluster. The database can't be deleted when deletion protection is enabled. By default, deletion protection isn't enabled. Valid for: Aurora DB clusters and Multi-AZ DB clusters
    public var deletionProtection: Swift.Bool?
    /// The Active Directory directory ID to restore the DB cluster in. The domain must be created prior to this operation. For Amazon Aurora DB clusters, Amazon RDS can use Kerberos Authentication to authenticate users that connect to the DB cluster. For more information, see [Kerberos Authentication](https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/kerberos-authentication.html) in the Amazon Aurora User Guide. Valid for: Aurora DB clusters only
    public var domain: Swift.String?
    /// The name of the IAM role to be used when making API calls to the Directory Service. Valid for: Aurora DB clusters only
    public var domainIAMRoleName: Swift.String?
    /// The list of logs that the restored DB cluster is to export to CloudWatch Logs. The values in the list depend on the DB engine being used. RDS for MySQL Possible values are error, general, and slowquery. RDS for PostgreSQL Possible values are postgresql and upgrade. Aurora MySQL Possible values are audit, error, general, and slowquery. Aurora PostgreSQL Possible value is postgresql. For more information about exporting CloudWatch Logs for Amazon RDS, see [Publishing Database Logs to Amazon CloudWatch Logs](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch) in the Amazon RDS User Guide. For more information about exporting CloudWatch Logs for Amazon Aurora, see [Publishing Database Logs to Amazon CloudWatch Logs](https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch) in the Amazon Aurora User Guide. Valid for: Aurora DB clusters and Multi-AZ DB clusters
    public var enableCloudwatchLogsExports: [Swift.String]?
    /// Specifies whether to enable mapping of Amazon Web Services Identity and Access Management (IAM) accounts to database accounts. By default, mapping isn't enabled. For more information, see [ IAM Database Authentication](https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/UsingWithRDS.IAMDBAuth.html) in the Amazon Aurora User Guide. Valid for: Aurora DB clusters only
    public var enableIAMDatabaseAuthentication: Swift.Bool?
    /// The engine mode of the new cluster. Specify provisioned or serverless, depending on the type of the cluster you are creating. You can create an Aurora Serverless v1 clone from a provisioned cluster, or a provisioned clone from an Aurora Serverless v1 cluster. To create a clone that is an Aurora Serverless v1 cluster, the original cluster must be an Aurora Serverless v1 cluster or an encrypted provisioned cluster. Valid for: Aurora DB clusters only
    public var engineMode: Swift.String?
    /// The amount of Provisioned IOPS (input/output operations per second) to be initially allocated for each DB instance in the Multi-AZ DB cluster. For information about valid IOPS values, see [Amazon RDS Provisioned IOPS storage](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_Storage.html#USER_PIOPS) in the Amazon RDS User Guide. Constraints: Must be a multiple between .5 and 50 of the storage amount for the DB instance. Valid for: Multi-AZ DB clusters only
    public var iops: Swift.Int?
    /// The Amazon Web Services KMS key identifier to use when restoring an encrypted DB cluster from an encrypted DB cluster. The Amazon Web Services KMS key identifier is the key ARN, key ID, alias ARN, or alias name for the KMS key. To use a KMS key in a different Amazon Web Services account, specify the key ARN or alias ARN. You can restore to a new DB cluster and encrypt the new DB cluster with a KMS key that is different from the KMS key used to encrypt the source DB cluster. The new DB cluster is encrypted with the KMS key identified by the KmsKeyId parameter. If you don't specify a value for the KmsKeyId parameter, then the following occurs:
    ///
    /// * If the DB cluster is encrypted, then the restored DB cluster is encrypted using the KMS key that was used to encrypt the source DB cluster.
    ///
    /// * If the DB cluster isn't encrypted, then the restored DB cluster isn't encrypted.
    ///
    ///
    /// If DBClusterIdentifier refers to a DB cluster that isn't encrypted, then the restore request is rejected. Valid for: Aurora DB clusters and Multi-AZ DB clusters
    public var kmsKeyId: Swift.String?
    /// The network type of the DB cluster. Valid Values:
    ///
    /// * IPV4
    ///
    /// * DUAL
    ///
    ///
    /// The network type is determined by the DBSubnetGroup specified for the DB cluster. A DBSubnetGroup can support only the IPv4 protocol or the IPv4 and the IPv6 protocols (DUAL). For more information, see [ Working with a DB instance in a VPC](https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_VPC.WorkingWithRDSInstanceinaVPC.html) in the Amazon Aurora User Guide. Valid for: Aurora DB clusters only
    public var networkType: Swift.String?
    /// The name of the option group for the new DB cluster. DB clusters are associated with a default option group that can't be modified.
    public var optionGroupName: Swift.String?
    /// The port number on which the new DB cluster accepts connections. Constraints: A value from 1150-65535. Default: The default port for the engine. Valid for: Aurora DB clusters and Multi-AZ DB clusters
    public var port: Swift.Int?
    /// Specifies whether the DB cluster is publicly accessible. When the DB cluster is publicly accessible, its Domain Name System (DNS) endpoint resolves to the private IP address from within the DB cluster's virtual private cloud (VPC). It resolves to the public IP address from outside of the DB cluster's VPC. Access to the DB cluster is ultimately controlled by the security group it uses. That public access is not permitted if the security group assigned to the DB cluster doesn't permit it. When the DB cluster isn't publicly accessible, it is an internal DB cluster with a DNS name that resolves to a private IP address. Default: The default behavior varies depending on whether DBSubnetGroupName is specified. If DBSubnetGroupName isn't specified, and PubliclyAccessible isn't specified, the following applies:
    ///
    /// * If the default VPC in the target Region doesn’t have an internet gateway attached to it, the DB cluster is private.
    ///
    /// * If the default VPC in the target Region has an internet gateway attached to it, the DB cluster is public.
    ///
    ///
    /// If DBSubnetGroupName is specified, and PubliclyAccessible isn't specified, the following applies:
    ///
    /// * If the subnets are part of a VPC that doesn’t have an internet gateway attached to it, the DB cluster is private.
    ///
    /// * If the subnets are part of a VPC that has an internet gateway attached to it, the DB cluster is public.
    ///
    ///
    /// Valid for: Multi-AZ DB clusters only
    public var publiclyAccessible: Swift.Bool?
    /// Reserved for future use.
    public var rdsCustomClusterConfiguration: RDSClientTypes.RdsCustomClusterConfiguration?
    /// The date and time to restore the DB cluster to. Valid Values: Value must be a time in Universal Coordinated Time (UTC) format Constraints:
    ///
    /// * Must be before the latest restorable time for the DB instance
    ///
    /// * Must be specified if UseLatestRestorableTime parameter isn't provided
    ///
    /// * Can't be specified if the UseLatestRestorableTime parameter is enabled
    ///
    /// * Can't be specified if the RestoreType parameter is copy-on-write
    ///
    ///
    /// Example: 2015-03-07T23:45:00Z Valid for: Aurora DB clusters and Multi-AZ DB clusters
    public var restoreToTime: ClientRuntime.Date?
    /// The type of restore to be performed. You can specify one of the following values:
    ///
    /// * full-copy - The new DB cluster is restored as a full copy of the source DB cluster.
    ///
    /// * copy-on-write - The new DB cluster is restored as a clone of the source DB cluster.
    ///
    ///
    /// If you don't specify a RestoreType value, then the new DB cluster is restored as a full copy of the source DB cluster. Valid for: Aurora DB clusters and Multi-AZ DB clusters
    public var restoreType: Swift.String?
    /// For DB clusters in serverless DB engine mode, the scaling properties of the DB cluster. Valid for: Aurora DB clusters only
    public var scalingConfiguration: RDSClientTypes.ScalingConfiguration?
    /// Contains the scaling configuration of an Aurora Serverless v2 DB cluster. For more information, see [Using Amazon Aurora Serverless v2](https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless-v2.html) in the Amazon Aurora User Guide.
    public var serverlessV2ScalingConfiguration: RDSClientTypes.ServerlessV2ScalingConfiguration?
    /// The identifier of the source DB cluster from which to restore. Constraints:
    ///
    /// * Must match the identifier of an existing DBCluster.
    ///
    ///
    /// Valid for: Aurora DB clusters and Multi-AZ DB clusters
    public var sourceDBClusterIdentifier: Swift.String?
    /// The resource ID of the source DB cluster from which to restore.
    public var sourceDbClusterResourceId: Swift.String?
    /// Specifies the storage type to be associated with the DB cluster. When specified for a Multi-AZ DB cluster, a value for the Iops parameter is required. Valid Values: aurora, aurora-iopt1 (Aurora DB clusters); io1 (Multi-AZ DB clusters) Default: aurora (Aurora DB clusters); io1 (Multi-AZ DB clusters) Valid for: Aurora DB clusters and Multi-AZ DB clusters
    public var storageType: Swift.String?
    /// A list of tags. For more information, see [Tagging Amazon RDS Resources](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html) in the Amazon RDS User Guide.
    public var tags: [RDSClientTypes.Tag]?
    /// Specifies whether to restore the DB cluster to the latest restorable backup time. By default, the DB cluster isn't restored to the latest restorable backup time. Constraints: Can't be specified if RestoreToTime parameter is provided. Valid for: Aurora DB clusters and Multi-AZ DB clusters
    public var useLatestRestorableTime: Swift.Bool?
    /// A list of VPC security groups that the new DB cluster belongs to. Valid for: Aurora DB clusters and Multi-AZ DB clusters
    public var vpcSecurityGroupIds: [Swift.String]?

    public init(
        backtrackWindow: Swift.Int? = nil,
        copyTagsToSnapshot: Swift.Bool? = nil,
        dbClusterIdentifier: Swift.String? = nil,
        dbClusterInstanceClass: Swift.String? = nil,
        dbClusterParameterGroupName: Swift.String? = nil,
        dbSubnetGroupName: Swift.String? = nil,
        deletionProtection: Swift.Bool? = nil,
        domain: Swift.String? = nil,
        domainIAMRoleName: Swift.String? = nil,
        enableCloudwatchLogsExports: [Swift.String]? = nil,
        enableIAMDatabaseAuthentication: Swift.Bool? = nil,
        engineMode: Swift.String? = nil,
        iops: Swift.Int? = nil,
        kmsKeyId: Swift.String? = nil,
        networkType: Swift.String? = nil,
        optionGroupName: Swift.String? = nil,
        port: Swift.Int? = nil,
        publiclyAccessible: Swift.Bool? = nil,
        rdsCustomClusterConfiguration: RDSClientTypes.RdsCustomClusterConfiguration? = nil,
        restoreToTime: ClientRuntime.Date? = nil,
        restoreType: Swift.String? = nil,
        scalingConfiguration: RDSClientTypes.ScalingConfiguration? = nil,
        serverlessV2ScalingConfiguration: RDSClientTypes.ServerlessV2ScalingConfiguration? = nil,
        sourceDBClusterIdentifier: Swift.String? = nil,
        sourceDbClusterResourceId: Swift.String? = nil,
        storageType: Swift.String? = nil,
        tags: [RDSClientTypes.Tag]? = nil,
        useLatestRestorableTime: Swift.Bool? = nil,
        vpcSecurityGroupIds: [Swift.String]? = nil
    )
    {
        self.backtrackWindow = backtrackWindow
        self.copyTagsToSnapshot = copyTagsToSnapshot
        self.dbClusterIdentifier = dbClusterIdentifier
        self.dbClusterInstanceClass = dbClusterInstanceClass
        self.dbClusterParameterGroupName = dbClusterParameterGroupName
        self.dbSubnetGroupName = dbSubnetGroupName
        self.deletionProtection = deletionProtection
        self.domain = domain
        self.domainIAMRoleName = domainIAMRoleName
        self.enableCloudwatchLogsExports = enableCloudwatchLogsExports
        self.enableIAMDatabaseAuthentication = enableIAMDatabaseAuthentication
        self.engineMode = engineMode
        self.iops = iops
        self.kmsKeyId = kmsKeyId
        self.networkType = networkType
        self.optionGroupName = optionGroupName
        self.port = port
        self.publiclyAccessible = publiclyAccessible
        self.rdsCustomClusterConfiguration = rdsCustomClusterConfiguration
        self.restoreToTime = restoreToTime
        self.restoreType = restoreType
        self.scalingConfiguration = scalingConfiguration
        self.serverlessV2ScalingConfiguration = serverlessV2ScalingConfiguration
        self.sourceDBClusterIdentifier = sourceDBClusterIdentifier
        self.sourceDbClusterResourceId = sourceDbClusterResourceId
        self.storageType = storageType
        self.tags = tags
        self.useLatestRestorableTime = useLatestRestorableTime
        self.vpcSecurityGroupIds = vpcSecurityGroupIds
    }
}

extension RestoreDBClusterToPointInTimeOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<RestoreDBClusterToPointInTimeOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["RestoreDBClusterToPointInTimeResult"]
            var value = RestoreDBClusterToPointInTimeOutput()
            value.dbCluster = try reader["DBCluster"].readIfPresent(readingClosure: RDSClientTypes.DBCluster.readingClosure)
            return value
        }
    }
}

public struct RestoreDBClusterToPointInTimeOutput: Swift.Equatable {
    /// Contains the details of an Amazon Aurora DB cluster or Multi-AZ DB cluster. For an Amazon Aurora DB cluster, this data type is used as a response element in the operations CreateDBCluster, DeleteDBCluster, DescribeDBClusters, FailoverDBCluster, ModifyDBCluster, PromoteReadReplicaDBCluster, RestoreDBClusterFromS3, RestoreDBClusterFromSnapshot, RestoreDBClusterToPointInTime, StartDBCluster, and StopDBCluster. For a Multi-AZ DB cluster, this data type is used as a response element in the operations CreateDBCluster, DeleteDBCluster, DescribeDBClusters, FailoverDBCluster, ModifyDBCluster, RebootDBCluster, RestoreDBClusterFromSnapshot, and RestoreDBClusterToPointInTime. For more information on Amazon Aurora DB clusters, see [ What is Amazon Aurora?](https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html) in the Amazon Aurora User Guide. For more information on Multi-AZ DB clusters, see [ Multi-AZ deployments with two readable standby DB instances](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/multi-az-db-clusters-concepts.html) in the Amazon RDS User Guide.
    public var dbCluster: RDSClientTypes.DBCluster?

    public init(
        dbCluster: RDSClientTypes.DBCluster? = nil
    )
    {
        self.dbCluster = dbCluster
    }
}

enum RestoreDBClusterToPointInTimeOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "DBClusterAlreadyExistsFault": return try await DBClusterAlreadyExistsFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "DBClusterAutomatedBackupNotFoundFault": return try await DBClusterAutomatedBackupNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "DBClusterNotFoundFault": return try await DBClusterNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "DBClusterParameterGroupNotFound": return try await DBClusterParameterGroupNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "DBClusterQuotaExceededFault": return try await DBClusterQuotaExceededFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "DBClusterSnapshotNotFoundFault": return try await DBClusterSnapshotNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "DBSubnetGroupNotFoundFault": return try await DBSubnetGroupNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "DomainNotFoundFault": return try await DomainNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "InsufficientDBClusterCapacityFault": return try await InsufficientDBClusterCapacityFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "InsufficientDBInstanceCapacity": return try await InsufficientDBInstanceCapacityFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "InsufficientStorageClusterCapacity": return try await InsufficientStorageClusterCapacityFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "InvalidDBClusterSnapshotStateFault": return try await InvalidDBClusterSnapshotStateFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "InvalidDBClusterStateFault": return try await InvalidDBClusterStateFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "InvalidDBSnapshotState": return try await InvalidDBSnapshotStateFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "InvalidRestoreFault": return try await InvalidRestoreFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "InvalidSubnet": return try await InvalidSubnet.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "InvalidVPCNetworkStateFault": return try await InvalidVPCNetworkStateFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "KMSKeyNotAccessibleFault": return try await KMSKeyNotAccessibleFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "OptionGroupNotFoundFault": return try await OptionGroupNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "StorageQuotaExceeded": return try await StorageQuotaExceededFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension RestoreDBInstanceFromDBSnapshotInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case allocatedStorage = "AllocatedStorage"
        case autoMinorVersionUpgrade = "AutoMinorVersionUpgrade"
        case availabilityZone = "AvailabilityZone"
        case backupTarget = "BackupTarget"
        case copyTagsToSnapshot = "CopyTagsToSnapshot"
        case customIamInstanceProfile = "CustomIamInstanceProfile"
        case dbClusterSnapshotIdentifier = "DBClusterSnapshotIdentifier"
        case dbInstanceClass = "DBInstanceClass"
        case dbInstanceIdentifier = "DBInstanceIdentifier"
        case dbName = "DBName"
        case dbParameterGroupName = "DBParameterGroupName"
        case dbSnapshotIdentifier = "DBSnapshotIdentifier"
        case dbSubnetGroupName = "DBSubnetGroupName"
        case dedicatedLogVolume = "DedicatedLogVolume"
        case deletionProtection = "DeletionProtection"
        case domain = "Domain"
        case domainAuthSecretArn = "DomainAuthSecretArn"
        case domainDnsIps = "DomainDnsIps"
        case domainFqdn = "DomainFqdn"
        case domainIAMRoleName = "DomainIAMRoleName"
        case domainOu = "DomainOu"
        case enableCloudwatchLogsExports = "EnableCloudwatchLogsExports"
        case enableCustomerOwnedIp = "EnableCustomerOwnedIp"
        case enableIAMDatabaseAuthentication = "EnableIAMDatabaseAuthentication"
        case engine = "Engine"
        case iops = "Iops"
        case licenseModel = "LicenseModel"
        case multiAZ = "MultiAZ"
        case networkType = "NetworkType"
        case optionGroupName = "OptionGroupName"
        case port = "Port"
        case processorFeatures = "ProcessorFeatures"
        case publiclyAccessible = "PubliclyAccessible"
        case storageThroughput = "StorageThroughput"
        case storageType = "StorageType"
        case tags = "Tags"
        case tdeCredentialArn = "TdeCredentialArn"
        case tdeCredentialPassword = "TdeCredentialPassword"
        case useDefaultProcessorFeatures = "UseDefaultProcessorFeatures"
        case vpcSecurityGroupIds = "VpcSecurityGroupIds"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let allocatedStorage = allocatedStorage {
            try container.encode(allocatedStorage, forKey: ClientRuntime.Key("AllocatedStorage"))
        }
        if let autoMinorVersionUpgrade = autoMinorVersionUpgrade {
            try container.encode(autoMinorVersionUpgrade, forKey: ClientRuntime.Key("AutoMinorVersionUpgrade"))
        }
        if let availabilityZone = availabilityZone {
            try container.encode(availabilityZone, forKey: ClientRuntime.Key("AvailabilityZone"))
        }
        if let backupTarget = backupTarget {
            try container.encode(backupTarget, forKey: ClientRuntime.Key("BackupTarget"))
        }
        if let copyTagsToSnapshot = copyTagsToSnapshot {
            try container.encode(copyTagsToSnapshot, forKey: ClientRuntime.Key("CopyTagsToSnapshot"))
        }
        if let customIamInstanceProfile = customIamInstanceProfile {
            try container.encode(customIamInstanceProfile, forKey: ClientRuntime.Key("CustomIamInstanceProfile"))
        }
        if let dbClusterSnapshotIdentifier = dbClusterSnapshotIdentifier {
            try container.encode(dbClusterSnapshotIdentifier, forKey: ClientRuntime.Key("DBClusterSnapshotIdentifier"))
        }
        if let dbInstanceClass = dbInstanceClass {
            try container.encode(dbInstanceClass, forKey: ClientRuntime.Key("DBInstanceClass"))
        }
        if let dbInstanceIdentifier = dbInstanceIdentifier {
            try container.encode(dbInstanceIdentifier, forKey: ClientRuntime.Key("DBInstanceIdentifier"))
        }
        if let dbName = dbName {
            try container.encode(dbName, forKey: ClientRuntime.Key("DBName"))
        }
        if let dbParameterGroupName = dbParameterGroupName {
            try container.encode(dbParameterGroupName, forKey: ClientRuntime.Key("DBParameterGroupName"))
        }
        if let dbSnapshotIdentifier = dbSnapshotIdentifier {
            try container.encode(dbSnapshotIdentifier, forKey: ClientRuntime.Key("DBSnapshotIdentifier"))
        }
        if let dbSubnetGroupName = dbSubnetGroupName {
            try container.encode(dbSubnetGroupName, forKey: ClientRuntime.Key("DBSubnetGroupName"))
        }
        if let dedicatedLogVolume = dedicatedLogVolume {
            try container.encode(dedicatedLogVolume, forKey: ClientRuntime.Key("DedicatedLogVolume"))
        }
        if let deletionProtection = deletionProtection {
            try container.encode(deletionProtection, forKey: ClientRuntime.Key("DeletionProtection"))
        }
        if let domain = domain {
            try container.encode(domain, forKey: ClientRuntime.Key("Domain"))
        }
        if let domainAuthSecretArn = domainAuthSecretArn {
            try container.encode(domainAuthSecretArn, forKey: ClientRuntime.Key("DomainAuthSecretArn"))
        }
        if let domainDnsIps = domainDnsIps {
            if !domainDnsIps.isEmpty {
                var domainDnsIpsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("DomainDnsIps"))
                for (index0, string0) in domainDnsIps.enumerated() {
                    try domainDnsIpsContainer.encode(string0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var domainDnsIpsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("DomainDnsIps"))
                try domainDnsIpsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let domainFqdn = domainFqdn {
            try container.encode(domainFqdn, forKey: ClientRuntime.Key("DomainFqdn"))
        }
        if let domainIAMRoleName = domainIAMRoleName {
            try container.encode(domainIAMRoleName, forKey: ClientRuntime.Key("DomainIAMRoleName"))
        }
        if let domainOu = domainOu {
            try container.encode(domainOu, forKey: ClientRuntime.Key("DomainOu"))
        }
        if let enableCloudwatchLogsExports = enableCloudwatchLogsExports {
            if !enableCloudwatchLogsExports.isEmpty {
                var enableCloudwatchLogsExportsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("EnableCloudwatchLogsExports"))
                for (index0, string0) in enableCloudwatchLogsExports.enumerated() {
                    try enableCloudwatchLogsExportsContainer.encode(string0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var enableCloudwatchLogsExportsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("EnableCloudwatchLogsExports"))
                try enableCloudwatchLogsExportsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let enableCustomerOwnedIp = enableCustomerOwnedIp {
            try container.encode(enableCustomerOwnedIp, forKey: ClientRuntime.Key("EnableCustomerOwnedIp"))
        }
        if let enableIAMDatabaseAuthentication = enableIAMDatabaseAuthentication {
            try container.encode(enableIAMDatabaseAuthentication, forKey: ClientRuntime.Key("EnableIAMDatabaseAuthentication"))
        }
        if let engine = engine {
            try container.encode(engine, forKey: ClientRuntime.Key("Engine"))
        }
        if let iops = iops {
            try container.encode(iops, forKey: ClientRuntime.Key("Iops"))
        }
        if let licenseModel = licenseModel {
            try container.encode(licenseModel, forKey: ClientRuntime.Key("LicenseModel"))
        }
        if let multiAZ = multiAZ {
            try container.encode(multiAZ, forKey: ClientRuntime.Key("MultiAZ"))
        }
        if let networkType = networkType {
            try container.encode(networkType, forKey: ClientRuntime.Key("NetworkType"))
        }
        if let optionGroupName = optionGroupName {
            try container.encode(optionGroupName, forKey: ClientRuntime.Key("OptionGroupName"))
        }
        if let port = port {
            try container.encode(port, forKey: ClientRuntime.Key("Port"))
        }
        if let processorFeatures = processorFeatures {
            if !processorFeatures.isEmpty {
                var processorFeaturesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("ProcessorFeatures"))
                for (index0, processorfeature0) in processorFeatures.enumerated() {
                    try processorFeaturesContainer.encode(processorfeature0, forKey: ClientRuntime.Key("ProcessorFeature.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var processorFeaturesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("ProcessorFeatures"))
                try processorFeaturesContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let publiclyAccessible = publiclyAccessible {
            try container.encode(publiclyAccessible, forKey: ClientRuntime.Key("PubliclyAccessible"))
        }
        if let storageThroughput = storageThroughput {
            try container.encode(storageThroughput, forKey: ClientRuntime.Key("StorageThroughput"))
        }
        if let storageType = storageType {
            try container.encode(storageType, forKey: ClientRuntime.Key("StorageType"))
        }
        if let tags = tags {
            if !tags.isEmpty {
                var tagsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Tags"))
                for (index0, tag0) in tags.enumerated() {
                    try tagsContainer.encode(tag0, forKey: ClientRuntime.Key("Tag.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var tagsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Tags"))
                try tagsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let tdeCredentialArn = tdeCredentialArn {
            try container.encode(tdeCredentialArn, forKey: ClientRuntime.Key("TdeCredentialArn"))
        }
        if let tdeCredentialPassword = tdeCredentialPassword {
            try container.encode(tdeCredentialPassword, forKey: ClientRuntime.Key("TdeCredentialPassword"))
        }
        if let useDefaultProcessorFeatures = useDefaultProcessorFeatures {
            try container.encode(useDefaultProcessorFeatures, forKey: ClientRuntime.Key("UseDefaultProcessorFeatures"))
        }
        if let vpcSecurityGroupIds = vpcSecurityGroupIds {
            if !vpcSecurityGroupIds.isEmpty {
                var vpcSecurityGroupIdsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("VpcSecurityGroupIds"))
                for (index0, string0) in vpcSecurityGroupIds.enumerated() {
                    try vpcSecurityGroupIdsContainer.encode(string0, forKey: ClientRuntime.Key("VpcSecurityGroupId.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var vpcSecurityGroupIdsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("VpcSecurityGroupIds"))
                try vpcSecurityGroupIdsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        try container.encode("RestoreDBInstanceFromDBSnapshot", forKey:ClientRuntime.Key("Action"))
        try container.encode("2014-10-31", forKey:ClientRuntime.Key("Version"))
    }
}

extension RestoreDBInstanceFromDBSnapshotInput {

    static func urlPathProvider(_ value: RestoreDBInstanceFromDBSnapshotInput) -> Swift.String? {
        return "/"
    }
}

///
public struct RestoreDBInstanceFromDBSnapshotInput: Swift.Equatable {
    /// The amount of storage (in gibibytes) to allocate initially for the DB instance. Follow the allocation rules specified in CreateDBInstance. Be sure to allocate enough storage for your new DB instance so that the restore operation can succeed. You can also allocate additional storage for future growth.
    public var allocatedStorage: Swift.Int?
    /// Specifies whether to automatically apply minor version upgrades to the DB instance during the maintenance window. If you restore an RDS Custom DB instance, you must disable this parameter.
    public var autoMinorVersionUpgrade: Swift.Bool?
    /// The Availability Zone (AZ) where the DB instance will be created. Default: A random, system-chosen Availability Zone. Constraint: You can't specify the AvailabilityZone parameter if the DB instance is a Multi-AZ deployment. Example: us-east-1a
    public var availabilityZone: Swift.String?
    /// Specifies where automated backups and manual snapshots are stored for the restored DB instance. Possible values are outposts (Amazon Web Services Outposts) and region (Amazon Web Services Region). The default is region. For more information, see [Working with Amazon RDS on Amazon Web Services Outposts](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/rds-on-outposts.html) in the Amazon RDS User Guide.
    public var backupTarget: Swift.String?
    /// Specifies whether to copy all tags from the restored DB instance to snapshots of the DB instance. In most cases, tags aren't copied by default. However, when you restore a DB instance from a DB snapshot, RDS checks whether you specify new tags. If yes, the new tags are added to the restored DB instance. If there are no new tags, RDS looks for the tags from the source DB instance for the DB snapshot, and then adds those tags to the restored DB instance. For more information, see [ Copying tags to DB instance snapshots](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html#USER_Tagging.CopyTags) in the Amazon RDS User Guide.
    public var copyTagsToSnapshot: Swift.Bool?
    /// The instance profile associated with the underlying Amazon EC2 instance of an RDS Custom DB instance. The instance profile must meet the following requirements:
    ///
    /// * The profile must exist in your account.
    ///
    /// * The profile must have an IAM role that Amazon EC2 has permissions to assume.
    ///
    /// * The instance profile name and the associated IAM role name must start with the prefix AWSRDSCustom.
    ///
    ///
    /// For the list of permissions required for the IAM role, see [ Configure IAM and your VPC](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/custom-setup-orcl.html#custom-setup-orcl.iam-vpc) in the Amazon RDS User Guide. This setting is required for RDS Custom.
    public var customIamInstanceProfile: Swift.String?
    /// The identifier for the RDS for MySQL Multi-AZ DB cluster snapshot to restore from. For more information on Multi-AZ DB clusters, see [ Multi-AZ DB cluster deployments](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/multi-az-db-clusters-concepts.html) in the Amazon RDS User Guide. Constraints:
    ///
    /// * Must match the identifier of an existing Multi-AZ DB cluster snapshot.
    ///
    /// * Can't be specified when DBSnapshotIdentifier is specified.
    ///
    /// * Must be specified when DBSnapshotIdentifier isn't specified.
    ///
    /// * If you are restoring from a shared manual Multi-AZ DB cluster snapshot, the DBClusterSnapshotIdentifier must be the ARN of the shared snapshot.
    ///
    /// * Can't be the identifier of an Aurora DB cluster snapshot.
    ///
    /// * Can't be the identifier of an RDS for PostgreSQL Multi-AZ DB cluster snapshot.
    public var dbClusterSnapshotIdentifier: Swift.String?
    /// The compute and memory capacity of the Amazon RDS DB instance, for example db.m4.large. Not all DB instance classes are available in all Amazon Web Services Regions, or for all database engines. For the full list of DB instance classes, and availability for your engine, see [DB Instance Class](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.DBInstanceClass.html) in the Amazon RDS User Guide. Default: The same DBInstanceClass as the original DB instance.
    public var dbInstanceClass: Swift.String?
    /// The name of the DB instance to create from the DB snapshot. This parameter isn't case-sensitive. Constraints:
    ///
    /// * Must contain from 1 to 63 numbers, letters, or hyphens.
    ///
    /// * First character must be a letter.
    ///
    /// * Can't end with a hyphen or contain two consecutive hyphens.
    ///
    ///
    /// Example: my-snapshot-id
    /// This member is required.
    public var dbInstanceIdentifier: Swift.String?
    /// The name of the database for the restored DB instance. This parameter only applies to RDS for Oracle and RDS for SQL Server DB instances. It doesn't apply to the other engines or to RDS Custom DB instances.
    public var dbName: Swift.String?
    /// The name of the DB parameter group to associate with this DB instance. If you don't specify a value for DBParameterGroupName, then RDS uses the default DBParameterGroup for the specified DB engine. This setting doesn't apply to RDS Custom. Constraints:
    ///
    /// * If supplied, must match the name of an existing DB parameter group.
    ///
    /// * Must be 1 to 255 letters, numbers, or hyphens.
    ///
    /// * First character must be a letter.
    ///
    /// * Can't end with a hyphen or contain two consecutive hyphens.
    public var dbParameterGroupName: Swift.String?
    /// The identifier for the DB snapshot to restore from. Constraints:
    ///
    /// * Must match the identifier of an existing DB snapshot.
    ///
    /// * Can't be specified when DBClusterSnapshotIdentifier is specified.
    ///
    /// * Must be specified when DBClusterSnapshotIdentifier isn't specified.
    ///
    /// * If you are restoring from a shared manual DB snapshot, the DBSnapshotIdentifier must be the ARN of the shared DB snapshot.
    public var dbSnapshotIdentifier: Swift.String?
    /// The name of the DB subnet group to use for the new instance. Constraints:
    ///
    /// * If supplied, must match the name of an existing DB subnet group.
    ///
    ///
    /// Example: mydbsubnetgroup
    public var dbSubnetGroupName: Swift.String?
    /// Specifies whether to enable a dedicated log volume (DLV) for the DB instance.
    public var dedicatedLogVolume: Swift.Bool?
    /// Specifies whether to enable deletion protection for the DB instance. The database can't be deleted when deletion protection is enabled. By default, deletion protection isn't enabled. For more information, see [ Deleting a DB Instance](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_DeleteInstance.html).
    public var deletionProtection: Swift.Bool?
    /// The Active Directory directory ID to restore the DB instance in. The domain/ must be created prior to this operation. Currently, you can create only Db2, MySQL, Microsoft SQL Server, Oracle, and PostgreSQL DB instances in an Active Directory Domain. For more information, see [ Kerberos Authentication](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/kerberos-authentication.html) in the Amazon RDS User Guide. This setting doesn't apply to RDS Custom.
    public var domain: Swift.String?
    /// The ARN for the Secrets Manager secret with the credentials for the user joining the domain. Constraints:
    ///
    /// * Can't be longer than 64 characters.
    ///
    ///
    /// Example: arn:aws:secretsmanager:region:account-number:secret:myselfmanagedADtestsecret-123456
    public var domainAuthSecretArn: Swift.String?
    /// The IPv4 DNS IP addresses of your primary and secondary Active Directory domain controllers. Constraints:
    ///
    /// * Two IP addresses must be provided. If there isn't a secondary domain controller, use the IP address of the primary domain controller for both entries in the list.
    ///
    ///
    /// Example: 123.124.125.126,234.235.236.237
    public var domainDnsIps: [Swift.String]?
    /// The fully qualified domain name (FQDN) of an Active Directory domain. Constraints:
    ///
    /// * Can't be longer than 64 characters.
    ///
    ///
    /// Example: mymanagedADtest.mymanagedAD.mydomain
    public var domainFqdn: Swift.String?
    /// The name of the IAM role to use when making API calls to the Directory Service. This setting doesn't apply to RDS Custom DB instances.
    public var domainIAMRoleName: Swift.String?
    /// The Active Directory organizational unit for your DB instance to join. Constraints:
    ///
    /// * Must be in the distinguished name format.
    ///
    /// * Can't be longer than 64 characters.
    ///
    ///
    /// Example: OU=mymanagedADtestOU,DC=mymanagedADtest,DC=mymanagedAD,DC=mydomain
    public var domainOu: Swift.String?
    /// The list of logs for the restored DB instance to export to CloudWatch Logs. The values in the list depend on the DB engine. For more information, see [Publishing Database Logs to Amazon CloudWatch Logs](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch) in the Amazon RDS User Guide. This setting doesn't apply to RDS Custom.
    public var enableCloudwatchLogsExports: [Swift.String]?
    /// Specifies whether to enable a customer-owned IP address (CoIP) for an RDS on Outposts DB instance. A CoIP provides local or external connectivity to resources in your Outpost subnets through your on-premises network. For some use cases, a CoIP can provide lower latency for connections to the DB instance from outside of its virtual private cloud (VPC) on your local network. This setting doesn't apply to RDS Custom. For more information about RDS on Outposts, see [Working with Amazon RDS on Amazon Web Services Outposts](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/rds-on-outposts.html) in the Amazon RDS User Guide. For more information about CoIPs, see [Customer-owned IP addresses](https://docs.aws.amazon.com/outposts/latest/userguide/routing.html#ip-addressing) in the Amazon Web Services Outposts User Guide.
    public var enableCustomerOwnedIp: Swift.Bool?
    /// Specifies whether to enable mapping of Amazon Web Services Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled. For more information about IAM database authentication, see [ IAM Database Authentication for MySQL and PostgreSQL](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.IAMDBAuth.html) in the Amazon RDS User Guide. This setting doesn't apply to RDS Custom.
    public var enableIAMDatabaseAuthentication: Swift.Bool?
    /// The database engine to use for the new instance. This setting doesn't apply to RDS Custom. Default: The same as source Constraint: Must be compatible with the engine of the source. For example, you can restore a MariaDB 10.1 DB instance from a MySQL 5.6 snapshot. Valid Values:
    ///
    /// * db2-ae
    ///
    /// * db2-se
    ///
    /// * mariadb
    ///
    /// * mysql
    ///
    /// * oracle-ee
    ///
    /// * oracle-ee-cdb
    ///
    /// * oracle-se2
    ///
    /// * oracle-se2-cdb
    ///
    /// * postgres
    ///
    /// * sqlserver-ee
    ///
    /// * sqlserver-se
    ///
    /// * sqlserver-ex
    ///
    /// * sqlserver-web
    public var engine: Swift.String?
    /// Specifies the amount of provisioned IOPS for the DB instance, expressed in I/O operations per second. If this parameter isn't specified, the IOPS value is taken from the backup. If this parameter is set to 0, the new instance is converted to a non-PIOPS instance. The conversion takes additional time, though your DB instance is available for connections before the conversion starts. The provisioned IOPS value must follow the requirements for your database engine. For more information, see [Amazon RDS Provisioned IOPS storage](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_Storage.html#USER_PIOPS) in the Amazon RDS User Guide. Constraints: Must be an integer greater than 1000.
    public var iops: Swift.Int?
    /// License model information for the restored DB instance. This setting doesn't apply to RDS Custom. Default: Same as source. Valid Values: license-included | bring-your-own-license | general-public-license
    public var licenseModel: Swift.String?
    /// Specifies whether the DB instance is a Multi-AZ deployment. This setting doesn't apply to RDS Custom. Constraint: You can't specify the AvailabilityZone parameter if the DB instance is a Multi-AZ deployment.
    public var multiAZ: Swift.Bool?
    /// The network type of the DB instance. Valid Values:
    ///
    /// * IPV4
    ///
    /// * DUAL
    ///
    ///
    /// The network type is determined by the DBSubnetGroup specified for the DB instance. A DBSubnetGroup can support only the IPv4 protocol or the IPv4 and the IPv6 protocols (DUAL). For more information, see [ Working with a DB instance in a VPC](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_VPC.WorkingWithRDSInstanceinaVPC.html) in the Amazon RDS User Guide.
    public var networkType: Swift.String?
    /// The name of the option group to be used for the restored DB instance. Permanent options, such as the TDE option for Oracle Advanced Security TDE, can't be removed from an option group, and that option group can't be removed from a DB instance after it is associated with a DB instance. This setting doesn't apply to RDS Custom.
    public var optionGroupName: Swift.String?
    /// The port number on which the database accepts connections. Default: The same port as the original DB instance Constraints: Value must be 1150-65535
    public var port: Swift.Int?
    /// The number of CPU cores and the number of threads per core for the DB instance class of the DB instance. This setting doesn't apply to RDS Custom.
    public var processorFeatures: [RDSClientTypes.ProcessorFeature]?
    /// Specifies whether the DB instance is publicly accessible. When the DB instance is publicly accessible, its Domain Name System (DNS) endpoint resolves to the private IP address from within the DB instance's virtual private cloud (VPC). It resolves to the public IP address from outside of the DB instance's VPC. Access to the DB instance is ultimately controlled by the security group it uses. That public access is not permitted if the security group assigned to the DB instance doesn't permit it. When the DB instance isn't publicly accessible, it is an internal DB instance with a DNS name that resolves to a private IP address. For more information, see [CreateDBInstance].
    public var publiclyAccessible: Swift.Bool?
    /// Specifies the storage throughput value for the DB instance. This setting doesn't apply to RDS Custom or Amazon Aurora.
    public var storageThroughput: Swift.Int?
    /// Specifies the storage type to be associated with the DB instance. Valid Values: gp2 | gp3 | io1 | standard If you specify io1 or gp3, you must also include a value for the Iops parameter. Default: io1 if the Iops parameter is specified, otherwise gp2
    public var storageType: Swift.String?
    /// A list of tags. For more information, see [Tagging Amazon RDS Resources](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html) in the Amazon RDS User Guide.
    public var tags: [RDSClientTypes.Tag]?
    /// The ARN from the key store with which to associate the instance for TDE encryption. This setting doesn't apply to RDS Custom.
    public var tdeCredentialArn: Swift.String?
    /// The password for the given ARN from the key store in order to access the device. This setting doesn't apply to RDS Custom.
    public var tdeCredentialPassword: Swift.String?
    /// Specifies whether the DB instance class of the DB instance uses its default processor features. This setting doesn't apply to RDS Custom.
    public var useDefaultProcessorFeatures: Swift.Bool?
    /// A list of EC2 VPC security groups to associate with this DB instance. Default: The default EC2 VPC security group for the DB subnet group's VPC.
    public var vpcSecurityGroupIds: [Swift.String]?

    public init(
        allocatedStorage: Swift.Int? = nil,
        autoMinorVersionUpgrade: Swift.Bool? = nil,
        availabilityZone: Swift.String? = nil,
        backupTarget: Swift.String? = nil,
        copyTagsToSnapshot: Swift.Bool? = nil,
        customIamInstanceProfile: Swift.String? = nil,
        dbClusterSnapshotIdentifier: Swift.String? = nil,
        dbInstanceClass: Swift.String? = nil,
        dbInstanceIdentifier: Swift.String? = nil,
        dbName: Swift.String? = nil,
        dbParameterGroupName: Swift.String? = nil,
        dbSnapshotIdentifier: Swift.String? = nil,
        dbSubnetGroupName: Swift.String? = nil,
        dedicatedLogVolume: Swift.Bool? = nil,
        deletionProtection: Swift.Bool? = nil,
        domain: Swift.String? = nil,
        domainAuthSecretArn: Swift.String? = nil,
        domainDnsIps: [Swift.String]? = nil,
        domainFqdn: Swift.String? = nil,
        domainIAMRoleName: Swift.String? = nil,
        domainOu: Swift.String? = nil,
        enableCloudwatchLogsExports: [Swift.String]? = nil,
        enableCustomerOwnedIp: Swift.Bool? = nil,
        enableIAMDatabaseAuthentication: Swift.Bool? = nil,
        engine: Swift.String? = nil,
        iops: Swift.Int? = nil,
        licenseModel: Swift.String? = nil,
        multiAZ: Swift.Bool? = nil,
        networkType: Swift.String? = nil,
        optionGroupName: Swift.String? = nil,
        port: Swift.Int? = nil,
        processorFeatures: [RDSClientTypes.ProcessorFeature]? = nil,
        publiclyAccessible: Swift.Bool? = nil,
        storageThroughput: Swift.Int? = nil,
        storageType: Swift.String? = nil,
        tags: [RDSClientTypes.Tag]? = nil,
        tdeCredentialArn: Swift.String? = nil,
        tdeCredentialPassword: Swift.String? = nil,
        useDefaultProcessorFeatures: Swift.Bool? = nil,
        vpcSecurityGroupIds: [Swift.String]? = nil
    )
    {
        self.allocatedStorage = allocatedStorage
        self.autoMinorVersionUpgrade = autoMinorVersionUpgrade
        self.availabilityZone = availabilityZone
        self.backupTarget = backupTarget
        self.copyTagsToSnapshot = copyTagsToSnapshot
        self.customIamInstanceProfile = customIamInstanceProfile
        self.dbClusterSnapshotIdentifier = dbClusterSnapshotIdentifier
        self.dbInstanceClass = dbInstanceClass
        self.dbInstanceIdentifier = dbInstanceIdentifier
        self.dbName = dbName
        self.dbParameterGroupName = dbParameterGroupName
        self.dbSnapshotIdentifier = dbSnapshotIdentifier
        self.dbSubnetGroupName = dbSubnetGroupName
        self.dedicatedLogVolume = dedicatedLogVolume
        self.deletionProtection = deletionProtection
        self.domain = domain
        self.domainAuthSecretArn = domainAuthSecretArn
        self.domainDnsIps = domainDnsIps
        self.domainFqdn = domainFqdn
        self.domainIAMRoleName = domainIAMRoleName
        self.domainOu = domainOu
        self.enableCloudwatchLogsExports = enableCloudwatchLogsExports
        self.enableCustomerOwnedIp = enableCustomerOwnedIp
        self.enableIAMDatabaseAuthentication = enableIAMDatabaseAuthentication
        self.engine = engine
        self.iops = iops
        self.licenseModel = licenseModel
        self.multiAZ = multiAZ
        self.networkType = networkType
        self.optionGroupName = optionGroupName
        self.port = port
        self.processorFeatures = processorFeatures
        self.publiclyAccessible = publiclyAccessible
        self.storageThroughput = storageThroughput
        self.storageType = storageType
        self.tags = tags
        self.tdeCredentialArn = tdeCredentialArn
        self.tdeCredentialPassword = tdeCredentialPassword
        self.useDefaultProcessorFeatures = useDefaultProcessorFeatures
        self.vpcSecurityGroupIds = vpcSecurityGroupIds
    }
}

extension RestoreDBInstanceFromDBSnapshotOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<RestoreDBInstanceFromDBSnapshotOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["RestoreDBInstanceFromDBSnapshotResult"]
            var value = RestoreDBInstanceFromDBSnapshotOutput()
            value.dbInstance = try reader["DBInstance"].readIfPresent(readingClosure: RDSClientTypes.DBInstance.readingClosure)
            return value
        }
    }
}

public struct RestoreDBInstanceFromDBSnapshotOutput: Swift.Equatable {
    /// Contains the details of an Amazon RDS DB instance. This data type is used as a response element in the operations CreateDBInstance, CreateDBInstanceReadReplica, DeleteDBInstance, DescribeDBInstances, ModifyDBInstance, PromoteReadReplica, RebootDBInstance, RestoreDBInstanceFromDBSnapshot, RestoreDBInstanceFromS3, RestoreDBInstanceToPointInTime, StartDBInstance, and StopDBInstance.
    public var dbInstance: RDSClientTypes.DBInstance?

    public init(
        dbInstance: RDSClientTypes.DBInstance? = nil
    )
    {
        self.dbInstance = dbInstance
    }
}

enum RestoreDBInstanceFromDBSnapshotOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "AuthorizationNotFound": return try await AuthorizationNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "BackupPolicyNotFoundFault": return try await BackupPolicyNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "DBClusterSnapshotNotFoundFault": return try await DBClusterSnapshotNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "DBInstanceAlreadyExists": return try await DBInstanceAlreadyExistsFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "DBParameterGroupNotFound": return try await DBParameterGroupNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "DBSecurityGroupNotFound": return try await DBSecurityGroupNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "DBSnapshotNotFound": return try await DBSnapshotNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "DBSubnetGroupDoesNotCoverEnoughAZs": return try await DBSubnetGroupDoesNotCoverEnoughAZs.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "DBSubnetGroupNotFoundFault": return try await DBSubnetGroupNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "DomainNotFoundFault": return try await DomainNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "InstanceQuotaExceeded": return try await InstanceQuotaExceededFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "InsufficientDBInstanceCapacity": return try await InsufficientDBInstanceCapacityFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "InvalidDBSnapshotState": return try await InvalidDBSnapshotStateFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "InvalidRestoreFault": return try await InvalidRestoreFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "InvalidSubnet": return try await InvalidSubnet.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "InvalidVPCNetworkStateFault": return try await InvalidVPCNetworkStateFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "KMSKeyNotAccessibleFault": return try await KMSKeyNotAccessibleFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "NetworkTypeNotSupported": return try await NetworkTypeNotSupported.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "OptionGroupNotFoundFault": return try await OptionGroupNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "ProvisionedIopsNotAvailableInAZFault": return try await ProvisionedIopsNotAvailableInAZFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "StorageQuotaExceeded": return try await StorageQuotaExceededFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "StorageTypeNotSupported": return try await StorageTypeNotSupportedFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "TenantDatabaseQuotaExceeded": return try await TenantDatabaseQuotaExceededFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension RestoreDBInstanceFromS3Input: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case allocatedStorage = "AllocatedStorage"
        case autoMinorVersionUpgrade = "AutoMinorVersionUpgrade"
        case availabilityZone = "AvailabilityZone"
        case backupRetentionPeriod = "BackupRetentionPeriod"
        case copyTagsToSnapshot = "CopyTagsToSnapshot"
        case dbInstanceClass = "DBInstanceClass"
        case dbInstanceIdentifier = "DBInstanceIdentifier"
        case dbName = "DBName"
        case dbParameterGroupName = "DBParameterGroupName"
        case dbSecurityGroups = "DBSecurityGroups"
        case dbSubnetGroupName = "DBSubnetGroupName"
        case dedicatedLogVolume = "DedicatedLogVolume"
        case deletionProtection = "DeletionProtection"
        case enableCloudwatchLogsExports = "EnableCloudwatchLogsExports"
        case enableIAMDatabaseAuthentication = "EnableIAMDatabaseAuthentication"
        case enablePerformanceInsights = "EnablePerformanceInsights"
        case engine = "Engine"
        case engineVersion = "EngineVersion"
        case iops = "Iops"
        case kmsKeyId = "KmsKeyId"
        case licenseModel = "LicenseModel"
        case manageMasterUserPassword = "ManageMasterUserPassword"
        case masterUserPassword = "MasterUserPassword"
        case masterUserSecretKmsKeyId = "MasterUserSecretKmsKeyId"
        case masterUsername = "MasterUsername"
        case maxAllocatedStorage = "MaxAllocatedStorage"
        case monitoringInterval = "MonitoringInterval"
        case monitoringRoleArn = "MonitoringRoleArn"
        case multiAZ = "MultiAZ"
        case networkType = "NetworkType"
        case optionGroupName = "OptionGroupName"
        case performanceInsightsKMSKeyId = "PerformanceInsightsKMSKeyId"
        case performanceInsightsRetentionPeriod = "PerformanceInsightsRetentionPeriod"
        case port = "Port"
        case preferredBackupWindow = "PreferredBackupWindow"
        case preferredMaintenanceWindow = "PreferredMaintenanceWindow"
        case processorFeatures = "ProcessorFeatures"
        case publiclyAccessible = "PubliclyAccessible"
        case s3BucketName = "S3BucketName"
        case s3IngestionRoleArn = "S3IngestionRoleArn"
        case s3Prefix = "S3Prefix"
        case sourceEngine = "SourceEngine"
        case sourceEngineVersion = "SourceEngineVersion"
        case storageEncrypted = "StorageEncrypted"
        case storageThroughput = "StorageThroughput"
        case storageType = "StorageType"
        case tags = "Tags"
        case useDefaultProcessorFeatures = "UseDefaultProcessorFeatures"
        case vpcSecurityGroupIds = "VpcSecurityGroupIds"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let allocatedStorage = allocatedStorage {
            try container.encode(allocatedStorage, forKey: ClientRuntime.Key("AllocatedStorage"))
        }
        if let autoMinorVersionUpgrade = autoMinorVersionUpgrade {
            try container.encode(autoMinorVersionUpgrade, forKey: ClientRuntime.Key("AutoMinorVersionUpgrade"))
        }
        if let availabilityZone = availabilityZone {
            try container.encode(availabilityZone, forKey: ClientRuntime.Key("AvailabilityZone"))
        }
        if let backupRetentionPeriod = backupRetentionPeriod {
            try container.encode(backupRetentionPeriod, forKey: ClientRuntime.Key("BackupRetentionPeriod"))
        }
        if let copyTagsToSnapshot = copyTagsToSnapshot {
            try container.encode(copyTagsToSnapshot, forKey: ClientRuntime.Key("CopyTagsToSnapshot"))
        }
        if let dbInstanceClass = dbInstanceClass {
            try container.encode(dbInstanceClass, forKey: ClientRuntime.Key("DBInstanceClass"))
        }
        if let dbInstanceIdentifier = dbInstanceIdentifier {
            try container.encode(dbInstanceIdentifier, forKey: ClientRuntime.Key("DBInstanceIdentifier"))
        }
        if let dbName = dbName {
            try container.encode(dbName, forKey: ClientRuntime.Key("DBName"))
        }
        if let dbParameterGroupName = dbParameterGroupName {
            try container.encode(dbParameterGroupName, forKey: ClientRuntime.Key("DBParameterGroupName"))
        }
        if let dbSecurityGroups = dbSecurityGroups {
            if !dbSecurityGroups.isEmpty {
                var dbSecurityGroupsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("DBSecurityGroups"))
                for (index0, string0) in dbSecurityGroups.enumerated() {
                    try dbSecurityGroupsContainer.encode(string0, forKey: ClientRuntime.Key("DBSecurityGroupName.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var dbSecurityGroupsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("DBSecurityGroups"))
                try dbSecurityGroupsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let dbSubnetGroupName = dbSubnetGroupName {
            try container.encode(dbSubnetGroupName, forKey: ClientRuntime.Key("DBSubnetGroupName"))
        }
        if let dedicatedLogVolume = dedicatedLogVolume {
            try container.encode(dedicatedLogVolume, forKey: ClientRuntime.Key("DedicatedLogVolume"))
        }
        if let deletionProtection = deletionProtection {
            try container.encode(deletionProtection, forKey: ClientRuntime.Key("DeletionProtection"))
        }
        if let enableCloudwatchLogsExports = enableCloudwatchLogsExports {
            if !enableCloudwatchLogsExports.isEmpty {
                var enableCloudwatchLogsExportsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("EnableCloudwatchLogsExports"))
                for (index0, string0) in enableCloudwatchLogsExports.enumerated() {
                    try enableCloudwatchLogsExportsContainer.encode(string0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var enableCloudwatchLogsExportsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("EnableCloudwatchLogsExports"))
                try enableCloudwatchLogsExportsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let enableIAMDatabaseAuthentication = enableIAMDatabaseAuthentication {
            try container.encode(enableIAMDatabaseAuthentication, forKey: ClientRuntime.Key("EnableIAMDatabaseAuthentication"))
        }
        if let enablePerformanceInsights = enablePerformanceInsights {
            try container.encode(enablePerformanceInsights, forKey: ClientRuntime.Key("EnablePerformanceInsights"))
        }
        if let engine = engine {
            try container.encode(engine, forKey: ClientRuntime.Key("Engine"))
        }
        if let engineVersion = engineVersion {
            try container.encode(engineVersion, forKey: ClientRuntime.Key("EngineVersion"))
        }
        if let iops = iops {
            try container.encode(iops, forKey: ClientRuntime.Key("Iops"))
        }
        if let kmsKeyId = kmsKeyId {
            try container.encode(kmsKeyId, forKey: ClientRuntime.Key("KmsKeyId"))
        }
        if let licenseModel = licenseModel {
            try container.encode(licenseModel, forKey: ClientRuntime.Key("LicenseModel"))
        }
        if let manageMasterUserPassword = manageMasterUserPassword {
            try container.encode(manageMasterUserPassword, forKey: ClientRuntime.Key("ManageMasterUserPassword"))
        }
        if let masterUserPassword = masterUserPassword {
            try container.encode(masterUserPassword, forKey: ClientRuntime.Key("MasterUserPassword"))
        }
        if let masterUserSecretKmsKeyId = masterUserSecretKmsKeyId {
            try container.encode(masterUserSecretKmsKeyId, forKey: ClientRuntime.Key("MasterUserSecretKmsKeyId"))
        }
        if let masterUsername = masterUsername {
            try container.encode(masterUsername, forKey: ClientRuntime.Key("MasterUsername"))
        }
        if let maxAllocatedStorage = maxAllocatedStorage {
            try container.encode(maxAllocatedStorage, forKey: ClientRuntime.Key("MaxAllocatedStorage"))
        }
        if let monitoringInterval = monitoringInterval {
            try container.encode(monitoringInterval, forKey: ClientRuntime.Key("MonitoringInterval"))
        }
        if let monitoringRoleArn = monitoringRoleArn {
            try container.encode(monitoringRoleArn, forKey: ClientRuntime.Key("MonitoringRoleArn"))
        }
        if let multiAZ = multiAZ {
            try container.encode(multiAZ, forKey: ClientRuntime.Key("MultiAZ"))
        }
        if let networkType = networkType {
            try container.encode(networkType, forKey: ClientRuntime.Key("NetworkType"))
        }
        if let optionGroupName = optionGroupName {
            try container.encode(optionGroupName, forKey: ClientRuntime.Key("OptionGroupName"))
        }
        if let performanceInsightsKMSKeyId = performanceInsightsKMSKeyId {
            try container.encode(performanceInsightsKMSKeyId, forKey: ClientRuntime.Key("PerformanceInsightsKMSKeyId"))
        }
        if let performanceInsightsRetentionPeriod = performanceInsightsRetentionPeriod {
            try container.encode(performanceInsightsRetentionPeriod, forKey: ClientRuntime.Key("PerformanceInsightsRetentionPeriod"))
        }
        if let port = port {
            try container.encode(port, forKey: ClientRuntime.Key("Port"))
        }
        if let preferredBackupWindow = preferredBackupWindow {
            try container.encode(preferredBackupWindow, forKey: ClientRuntime.Key("PreferredBackupWindow"))
        }
        if let preferredMaintenanceWindow = preferredMaintenanceWindow {
            try container.encode(preferredMaintenanceWindow, forKey: ClientRuntime.Key("PreferredMaintenanceWindow"))
        }
        if let processorFeatures = processorFeatures {
            if !processorFeatures.isEmpty {
                var processorFeaturesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("ProcessorFeatures"))
                for (index0, processorfeature0) in processorFeatures.enumerated() {
                    try processorFeaturesContainer.encode(processorfeature0, forKey: ClientRuntime.Key("ProcessorFeature.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var processorFeaturesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("ProcessorFeatures"))
                try processorFeaturesContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let publiclyAccessible = publiclyAccessible {
            try container.encode(publiclyAccessible, forKey: ClientRuntime.Key("PubliclyAccessible"))
        }
        if let s3BucketName = s3BucketName {
            try container.encode(s3BucketName, forKey: ClientRuntime.Key("S3BucketName"))
        }
        if let s3IngestionRoleArn = s3IngestionRoleArn {
            try container.encode(s3IngestionRoleArn, forKey: ClientRuntime.Key("S3IngestionRoleArn"))
        }
        if let s3Prefix = s3Prefix {
            try container.encode(s3Prefix, forKey: ClientRuntime.Key("S3Prefix"))
        }
        if let sourceEngine = sourceEngine {
            try container.encode(sourceEngine, forKey: ClientRuntime.Key("SourceEngine"))
        }
        if let sourceEngineVersion = sourceEngineVersion {
            try container.encode(sourceEngineVersion, forKey: ClientRuntime.Key("SourceEngineVersion"))
        }
        if let storageEncrypted = storageEncrypted {
            try container.encode(storageEncrypted, forKey: ClientRuntime.Key("StorageEncrypted"))
        }
        if let storageThroughput = storageThroughput {
            try container.encode(storageThroughput, forKey: ClientRuntime.Key("StorageThroughput"))
        }
        if let storageType = storageType {
            try container.encode(storageType, forKey: ClientRuntime.Key("StorageType"))
        }
        if let tags = tags {
            if !tags.isEmpty {
                var tagsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Tags"))
                for (index0, tag0) in tags.enumerated() {
                    try tagsContainer.encode(tag0, forKey: ClientRuntime.Key("Tag.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var tagsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Tags"))
                try tagsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let useDefaultProcessorFeatures = useDefaultProcessorFeatures {
            try container.encode(useDefaultProcessorFeatures, forKey: ClientRuntime.Key("UseDefaultProcessorFeatures"))
        }
        if let vpcSecurityGroupIds = vpcSecurityGroupIds {
            if !vpcSecurityGroupIds.isEmpty {
                var vpcSecurityGroupIdsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("VpcSecurityGroupIds"))
                for (index0, string0) in vpcSecurityGroupIds.enumerated() {
                    try vpcSecurityGroupIdsContainer.encode(string0, forKey: ClientRuntime.Key("VpcSecurityGroupId.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var vpcSecurityGroupIdsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("VpcSecurityGroupIds"))
                try vpcSecurityGroupIdsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        try container.encode("RestoreDBInstanceFromS3", forKey:ClientRuntime.Key("Action"))
        try container.encode("2014-10-31", forKey:ClientRuntime.Key("Version"))
    }
}

extension RestoreDBInstanceFromS3Input {

    static func urlPathProvider(_ value: RestoreDBInstanceFromS3Input) -> Swift.String? {
        return "/"
    }
}

public struct RestoreDBInstanceFromS3Input: Swift.Equatable {
    /// The amount of storage (in gibibytes) to allocate initially for the DB instance. Follow the allocation rules specified in CreateDBInstance. Be sure to allocate enough storage for your new DB instance so that the restore operation can succeed. You can also allocate additional storage for future growth.
    public var allocatedStorage: Swift.Int?
    /// Specifies whether to automatically apply minor engine upgrades to the DB instance during the maintenance window. By default, minor engine upgrades are not applied automatically.
    public var autoMinorVersionUpgrade: Swift.Bool?
    /// The Availability Zone that the DB instance is created in. For information about Amazon Web Services Regions and Availability Zones, see [Regions and Availability Zones](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.RegionsAndAvailabilityZones.html) in the Amazon RDS User Guide. Default: A random, system-chosen Availability Zone in the endpoint's Amazon Web Services Region. Example: us-east-1d Constraint: The AvailabilityZone parameter can't be specified if the DB instance is a Multi-AZ deployment. The specified Availability Zone must be in the same Amazon Web Services Region as the current endpoint.
    public var availabilityZone: Swift.String?
    /// The number of days for which automated backups are retained. Setting this parameter to a positive number enables backups. For more information, see CreateDBInstance.
    public var backupRetentionPeriod: Swift.Int?
    /// Specifies whether to copy all tags from the DB instance to snapshots of the DB instance. By default, tags are not copied.
    public var copyTagsToSnapshot: Swift.Bool?
    /// The compute and memory capacity of the DB instance, for example db.m4.large. Not all DB instance classes are available in all Amazon Web Services Regions, or for all database engines. For the full list of DB instance classes, and availability for your engine, see [DB Instance Class](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.DBInstanceClass.html) in the Amazon RDS User Guide. Importing from Amazon S3 isn't supported on the db.t2.micro DB instance class.
    /// This member is required.
    public var dbInstanceClass: Swift.String?
    /// The DB instance identifier. This parameter is stored as a lowercase string. Constraints:
    ///
    /// * Must contain from 1 to 63 letters, numbers, or hyphens.
    ///
    /// * First character must be a letter.
    ///
    /// * Can't end with a hyphen or contain two consecutive hyphens.
    ///
    ///
    /// Example: mydbinstance
    /// This member is required.
    public var dbInstanceIdentifier: Swift.String?
    /// The name of the database to create when the DB instance is created. Follow the naming rules specified in CreateDBInstance.
    public var dbName: Swift.String?
    /// The name of the DB parameter group to associate with this DB instance. If you do not specify a value for DBParameterGroupName, then the default DBParameterGroup for the specified DB engine is used.
    public var dbParameterGroupName: Swift.String?
    /// A list of DB security groups to associate with this DB instance. Default: The default DB security group for the database engine.
    public var dbSecurityGroups: [Swift.String]?
    /// A DB subnet group to associate with this DB instance. Constraints: If supplied, must match the name of an existing DBSubnetGroup. Example: mydbsubnetgroup
    public var dbSubnetGroupName: Swift.String?
    /// Specifies whether to enable a dedicated log volume (DLV) for the DB instance.
    public var dedicatedLogVolume: Swift.Bool?
    /// Specifies whether to enable deletion protection for the DB instance. The database can't be deleted when deletion protection is enabled. By default, deletion protection isn't enabled. For more information, see [ Deleting a DB Instance](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_DeleteInstance.html).
    public var deletionProtection: Swift.Bool?
    /// The list of logs that the restored DB instance is to export to CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see [Publishing Database Logs to Amazon CloudWatch Logs](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch) in the Amazon RDS User Guide.
    public var enableCloudwatchLogsExports: [Swift.String]?
    /// Specifies whether to enable mapping of Amazon Web Services Identity and Access Management (IAM) accounts to database accounts. By default, mapping isn't enabled. For more information about IAM database authentication, see [ IAM Database Authentication for MySQL and PostgreSQL](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.IAMDBAuth.html) in the Amazon RDS User Guide.
    public var enableIAMDatabaseAuthentication: Swift.Bool?
    /// Specifies whether to enable Performance Insights for the DB instance. For more information, see [Using Amazon Performance Insights](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_PerfInsights.html) in the Amazon RDS User Guide.
    public var enablePerformanceInsights: Swift.Bool?
    /// The name of the database engine to be used for this instance. Valid Values: mysql
    /// This member is required.
    public var engine: Swift.String?
    /// The version number of the database engine to use. Choose the latest minor version of your database engine. For information about engine versions, see CreateDBInstance, or call DescribeDBEngineVersions.
    public var engineVersion: Swift.String?
    /// The amount of Provisioned IOPS (input/output operations per second) to allocate initially for the DB instance. For information about valid IOPS values, see [Amazon RDS Provisioned IOPS storage](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_Storage.html#USER_PIOPS) in the Amazon RDS User Guide.
    public var iops: Swift.Int?
    /// The Amazon Web Services KMS key identifier for an encrypted DB instance. The Amazon Web Services KMS key identifier is the key ARN, key ID, alias ARN, or alias name for the KMS key. To use a KMS key in a different Amazon Web Services account, specify the key ARN or alias ARN. If the StorageEncrypted parameter is enabled, and you do not specify a value for the KmsKeyId parameter, then Amazon RDS will use your default KMS key. There is a default KMS key for your Amazon Web Services account. Your Amazon Web Services account has a different default KMS key for each Amazon Web Services Region.
    public var kmsKeyId: Swift.String?
    /// The license model for this DB instance. Use general-public-license.
    public var licenseModel: Swift.String?
    /// Specifies whether to manage the master user password with Amazon Web Services Secrets Manager. For more information, see [Password management with Amazon Web Services Secrets Manager](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/rds-secrets-manager.html) in the Amazon RDS User Guide. Constraints:
    ///
    /// * Can't manage the master user password with Amazon Web Services Secrets Manager if MasterUserPassword is specified.
    public var manageMasterUserPassword: Swift.Bool?
    /// The password for the master user. Constraints:
    ///
    /// * Can't be specified if ManageMasterUserPassword is turned on.
    ///
    /// * Can include any printable ASCII character except "/", """, or "@". For RDS for Oracle, can't include the "&" (ampersand) or the "'" (single quotes) character.
    ///
    ///
    /// Length Constraints:
    ///
    /// * RDS for Db2 - Must contain from 8 to 128 characters.
    ///
    /// * RDS for MariaDB - Must contain from 8 to 41 characters.
    ///
    /// * RDS for Microsoft SQL Server - Must contain from 8 to 128 characters.
    ///
    /// * RDS for MySQL - Must contain from 8 to 41 characters.
    ///
    /// * RDS for Oracle - Must contain from 8 to 30 characters.
    ///
    /// * RDS for PostgreSQL - Must contain from 8 to 128 characters.
    public var masterUserPassword: Swift.String?
    /// The Amazon Web Services KMS key identifier to encrypt a secret that is automatically generated and managed in Amazon Web Services Secrets Manager. This setting is valid only if the master user password is managed by RDS in Amazon Web Services Secrets Manager for the DB instance. The Amazon Web Services KMS key identifier is the key ARN, key ID, alias ARN, or alias name for the KMS key. To use a KMS key in a different Amazon Web Services account, specify the key ARN or alias ARN. If you don't specify MasterUserSecretKmsKeyId, then the aws/secretsmanager KMS key is used to encrypt the secret. If the secret is in a different Amazon Web Services account, then you can't use the aws/secretsmanager KMS key to encrypt the secret, and you must use a customer managed KMS key. There is a default KMS key for your Amazon Web Services account. Your Amazon Web Services account has a different default KMS key for each Amazon Web Services Region.
    public var masterUserSecretKmsKeyId: Swift.String?
    /// The name for the master user. Constraints:
    ///
    /// * Must be 1 to 16 letters or numbers.
    ///
    /// * First character must be a letter.
    ///
    /// * Can't be a reserved word for the chosen database engine.
    public var masterUsername: Swift.String?
    /// The upper limit in gibibytes (GiB) to which Amazon RDS can automatically scale the storage of the DB instance. For more information about this setting, including limitations that apply to it, see [ Managing capacity automatically with Amazon RDS storage autoscaling](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_PIOPS.StorageTypes.html#USER_PIOPS.Autoscaling) in the Amazon RDS User Guide.
    public var maxAllocatedStorage: Swift.Int?
    /// The interval, in seconds, between points when Enhanced Monitoring metrics are collected for the DB instance. To disable collecting Enhanced Monitoring metrics, specify 0. If MonitoringRoleArn is specified, then you must also set MonitoringInterval to a value other than 0. Valid Values: 0, 1, 5, 10, 15, 30, 60 Default: 0
    public var monitoringInterval: Swift.Int?
    /// The ARN for the IAM role that permits RDS to send enhanced monitoring metrics to Amazon CloudWatch Logs. For example, arn:aws:iam:123456789012:role/emaccess. For information on creating a monitoring role, see [Setting Up and Enabling Enhanced Monitoring](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Monitoring.OS.html#USER_Monitoring.OS.Enabling) in the Amazon RDS User Guide. If MonitoringInterval is set to a value other than 0, then you must supply a MonitoringRoleArn value.
    public var monitoringRoleArn: Swift.String?
    /// Specifies whether the DB instance is a Multi-AZ deployment. If the DB instance is a Multi-AZ deployment, you can't set the AvailabilityZone parameter.
    public var multiAZ: Swift.Bool?
    /// The network type of the DB instance. Valid Values:
    ///
    /// * IPV4
    ///
    /// * DUAL
    ///
    ///
    /// The network type is determined by the DBSubnetGroup specified for the DB instance. A DBSubnetGroup can support only the IPv4 protocol or the IPv4 and the IPv6 protocols (DUAL). For more information, see [ Working with a DB instance in a VPC](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_VPC.WorkingWithRDSInstanceinaVPC.html) in the Amazon RDS User Guide.
    public var networkType: Swift.String?
    /// The name of the option group to associate with this DB instance. If this argument is omitted, the default option group for the specified engine is used.
    public var optionGroupName: Swift.String?
    /// The Amazon Web Services KMS key identifier for encryption of Performance Insights data. The Amazon Web Services KMS key identifier is the key ARN, key ID, alias ARN, or alias name for the KMS key. If you do not specify a value for PerformanceInsightsKMSKeyId, then Amazon RDS uses your default KMS key. There is a default KMS key for your Amazon Web Services account. Your Amazon Web Services account has a different default KMS key for each Amazon Web Services Region.
    public var performanceInsightsKMSKeyId: Swift.String?
    /// The number of days to retain Performance Insights data. The default is 7 days. The following values are valid:
    ///
    /// * 7
    ///
    /// * month * 31, where month is a number of months from 1-23
    ///
    /// * 731
    ///
    ///
    /// For example, the following values are valid:
    ///
    /// * 93 (3 months * 31)
    ///
    /// * 341 (11 months * 31)
    ///
    /// * 589 (19 months * 31)
    ///
    /// * 731
    ///
    ///
    /// If you specify a retention period such as 94, which isn't a valid value, RDS issues an error.
    public var performanceInsightsRetentionPeriod: Swift.Int?
    /// The port number on which the database accepts connections. Type: Integer Valid Values: 1150-65535 Default: 3306
    public var port: Swift.Int?
    /// The time range each day during which automated backups are created if automated backups are enabled. For more information, see [Backup window](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_WorkingWithAutomatedBackups.html#USER_WorkingWithAutomatedBackups.BackupWindow) in the Amazon RDS User Guide. Constraints:
    ///
    /// * Must be in the format hh24:mi-hh24:mi.
    ///
    /// * Must be in Universal Coordinated Time (UTC).
    ///
    /// * Must not conflict with the preferred maintenance window.
    ///
    /// * Must be at least 30 minutes.
    public var preferredBackupWindow: Swift.String?
    /// The time range each week during which system maintenance can occur, in Universal Coordinated Time (UTC). For more information, see [Amazon RDS Maintenance Window](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_UpgradeDBInstance.Maintenance.html#Concepts.DBMaintenance) in the Amazon RDS User Guide. Constraints:
    ///
    /// * Must be in the format ddd:hh24:mi-ddd:hh24:mi.
    ///
    /// * Valid Days: Mon, Tue, Wed, Thu, Fri, Sat, Sun.
    ///
    /// * Must be in Universal Coordinated Time (UTC).
    ///
    /// * Must not conflict with the preferred backup window.
    ///
    /// * Must be at least 30 minutes.
    public var preferredMaintenanceWindow: Swift.String?
    /// The number of CPU cores and the number of threads per core for the DB instance class of the DB instance.
    public var processorFeatures: [RDSClientTypes.ProcessorFeature]?
    /// Specifies whether the DB instance is publicly accessible. When the DB instance is publicly accessible, its Domain Name System (DNS) endpoint resolves to the private IP address from within the DB instance's virtual private cloud (VPC). It resolves to the public IP address from outside of the DB instance's VPC. Access to the DB instance is ultimately controlled by the security group it uses. That public access is not permitted if the security group assigned to the DB instance doesn't permit it. When the DB instance isn't publicly accessible, it is an internal DB instance with a DNS name that resolves to a private IP address. For more information, see [CreateDBInstance].
    public var publiclyAccessible: Swift.Bool?
    /// The name of your Amazon S3 bucket that contains your database backup file.
    /// This member is required.
    public var s3BucketName: Swift.String?
    /// An Amazon Web Services Identity and Access Management (IAM) role to allow Amazon RDS to access your Amazon S3 bucket.
    /// This member is required.
    public var s3IngestionRoleArn: Swift.String?
    /// The prefix of your Amazon S3 bucket.
    public var s3Prefix: Swift.String?
    /// The name of the engine of your source database. Valid Values: mysql
    /// This member is required.
    public var sourceEngine: Swift.String?
    /// The version of the database that the backup files were created from. MySQL versions 5.6 and 5.7 are supported. Example: 5.6.40
    /// This member is required.
    public var sourceEngineVersion: Swift.String?
    /// Specifies whether the new DB instance is encrypted or not.
    public var storageEncrypted: Swift.Bool?
    /// Specifies the storage throughput value for the DB instance. This setting doesn't apply to RDS Custom or Amazon Aurora.
    public var storageThroughput: Swift.Int?
    /// Specifies the storage type to be associated with the DB instance. Valid Values: gp2 | gp3 | io1 | standard If you specify io1 or gp3, you must also include a value for the Iops parameter. Default: io1 if the Iops parameter is specified; otherwise gp2
    public var storageType: Swift.String?
    /// A list of tags to associate with this DB instance. For more information, see [Tagging Amazon RDS Resources](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html) in the Amazon RDS User Guide.
    public var tags: [RDSClientTypes.Tag]?
    /// Specifies whether the DB instance class of the DB instance uses its default processor features.
    public var useDefaultProcessorFeatures: Swift.Bool?
    /// A list of VPC security groups to associate with this DB instance.
    public var vpcSecurityGroupIds: [Swift.String]?

    public init(
        allocatedStorage: Swift.Int? = nil,
        autoMinorVersionUpgrade: Swift.Bool? = nil,
        availabilityZone: Swift.String? = nil,
        backupRetentionPeriod: Swift.Int? = nil,
        copyTagsToSnapshot: Swift.Bool? = nil,
        dbInstanceClass: Swift.String? = nil,
        dbInstanceIdentifier: Swift.String? = nil,
        dbName: Swift.String? = nil,
        dbParameterGroupName: Swift.String? = nil,
        dbSecurityGroups: [Swift.String]? = nil,
        dbSubnetGroupName: Swift.String? = nil,
        dedicatedLogVolume: Swift.Bool? = nil,
        deletionProtection: Swift.Bool? = nil,
        enableCloudwatchLogsExports: [Swift.String]? = nil,
        enableIAMDatabaseAuthentication: Swift.Bool? = nil,
        enablePerformanceInsights: Swift.Bool? = nil,
        engine: Swift.String? = nil,
        engineVersion: Swift.String? = nil,
        iops: Swift.Int? = nil,
        kmsKeyId: Swift.String? = nil,
        licenseModel: Swift.String? = nil,
        manageMasterUserPassword: Swift.Bool? = nil,
        masterUserPassword: Swift.String? = nil,
        masterUserSecretKmsKeyId: Swift.String? = nil,
        masterUsername: Swift.String? = nil,
        maxAllocatedStorage: Swift.Int? = nil,
        monitoringInterval: Swift.Int? = nil,
        monitoringRoleArn: Swift.String? = nil,
        multiAZ: Swift.Bool? = nil,
        networkType: Swift.String? = nil,
        optionGroupName: Swift.String? = nil,
        performanceInsightsKMSKeyId: Swift.String? = nil,
        performanceInsightsRetentionPeriod: Swift.Int? = nil,
        port: Swift.Int? = nil,
        preferredBackupWindow: Swift.String? = nil,
        preferredMaintenanceWindow: Swift.String? = nil,
        processorFeatures: [RDSClientTypes.ProcessorFeature]? = nil,
        publiclyAccessible: Swift.Bool? = nil,
        s3BucketName: Swift.String? = nil,
        s3IngestionRoleArn: Swift.String? = nil,
        s3Prefix: Swift.String? = nil,
        sourceEngine: Swift.String? = nil,
        sourceEngineVersion: Swift.String? = nil,
        storageEncrypted: Swift.Bool? = nil,
        storageThroughput: Swift.Int? = nil,
        storageType: Swift.String? = nil,
        tags: [RDSClientTypes.Tag]? = nil,
        useDefaultProcessorFeatures: Swift.Bool? = nil,
        vpcSecurityGroupIds: [Swift.String]? = nil
    )
    {
        self.allocatedStorage = allocatedStorage
        self.autoMinorVersionUpgrade = autoMinorVersionUpgrade
        self.availabilityZone = availabilityZone
        self.backupRetentionPeriod = backupRetentionPeriod
        self.copyTagsToSnapshot = copyTagsToSnapshot
        self.dbInstanceClass = dbInstanceClass
        self.dbInstanceIdentifier = dbInstanceIdentifier
        self.dbName = dbName
        self.dbParameterGroupName = dbParameterGroupName
        self.dbSecurityGroups = dbSecurityGroups
        self.dbSubnetGroupName = dbSubnetGroupName
        self.dedicatedLogVolume = dedicatedLogVolume
        self.deletionProtection = deletionProtection
        self.enableCloudwatchLogsExports = enableCloudwatchLogsExports
        self.enableIAMDatabaseAuthentication = enableIAMDatabaseAuthentication
        self.enablePerformanceInsights = enablePerformanceInsights
        self.engine = engine
        self.engineVersion = engineVersion
        self.iops = iops
        self.kmsKeyId = kmsKeyId
        self.licenseModel = licenseModel
        self.manageMasterUserPassword = manageMasterUserPassword
        self.masterUserPassword = masterUserPassword
        self.masterUserSecretKmsKeyId = masterUserSecretKmsKeyId
        self.masterUsername = masterUsername
        self.maxAllocatedStorage = maxAllocatedStorage
        self.monitoringInterval = monitoringInterval
        self.monitoringRoleArn = monitoringRoleArn
        self.multiAZ = multiAZ
        self.networkType = networkType
        self.optionGroupName = optionGroupName
        self.performanceInsightsKMSKeyId = performanceInsightsKMSKeyId
        self.performanceInsightsRetentionPeriod = performanceInsightsRetentionPeriod
        self.port = port
        self.preferredBackupWindow = preferredBackupWindow
        self.preferredMaintenanceWindow = preferredMaintenanceWindow
        self.processorFeatures = processorFeatures
        self.publiclyAccessible = publiclyAccessible
        self.s3BucketName = s3BucketName
        self.s3IngestionRoleArn = s3IngestionRoleArn
        self.s3Prefix = s3Prefix
        self.sourceEngine = sourceEngine
        self.sourceEngineVersion = sourceEngineVersion
        self.storageEncrypted = storageEncrypted
        self.storageThroughput = storageThroughput
        self.storageType = storageType
        self.tags = tags
        self.useDefaultProcessorFeatures = useDefaultProcessorFeatures
        self.vpcSecurityGroupIds = vpcSecurityGroupIds
    }
}

extension RestoreDBInstanceFromS3Output {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<RestoreDBInstanceFromS3Output, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["RestoreDBInstanceFromS3Result"]
            var value = RestoreDBInstanceFromS3Output()
            value.dbInstance = try reader["DBInstance"].readIfPresent(readingClosure: RDSClientTypes.DBInstance.readingClosure)
            return value
        }
    }
}

public struct RestoreDBInstanceFromS3Output: Swift.Equatable {
    /// Contains the details of an Amazon RDS DB instance. This data type is used as a response element in the operations CreateDBInstance, CreateDBInstanceReadReplica, DeleteDBInstance, DescribeDBInstances, ModifyDBInstance, PromoteReadReplica, RebootDBInstance, RestoreDBInstanceFromDBSnapshot, RestoreDBInstanceFromS3, RestoreDBInstanceToPointInTime, StartDBInstance, and StopDBInstance.
    public var dbInstance: RDSClientTypes.DBInstance?

    public init(
        dbInstance: RDSClientTypes.DBInstance? = nil
    )
    {
        self.dbInstance = dbInstance
    }
}

enum RestoreDBInstanceFromS3OutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "AuthorizationNotFound": return try await AuthorizationNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "BackupPolicyNotFoundFault": return try await BackupPolicyNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "DBInstanceAlreadyExists": return try await DBInstanceAlreadyExistsFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "DBParameterGroupNotFound": return try await DBParameterGroupNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "DBSecurityGroupNotFound": return try await DBSecurityGroupNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "DBSubnetGroupDoesNotCoverEnoughAZs": return try await DBSubnetGroupDoesNotCoverEnoughAZs.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "DBSubnetGroupNotFoundFault": return try await DBSubnetGroupNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "InstanceQuotaExceeded": return try await InstanceQuotaExceededFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "InsufficientDBInstanceCapacity": return try await InsufficientDBInstanceCapacityFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "InvalidS3BucketFault": return try await InvalidS3BucketFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "InvalidSubnet": return try await InvalidSubnet.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "InvalidVPCNetworkStateFault": return try await InvalidVPCNetworkStateFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "KMSKeyNotAccessibleFault": return try await KMSKeyNotAccessibleFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "NetworkTypeNotSupported": return try await NetworkTypeNotSupported.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "OptionGroupNotFoundFault": return try await OptionGroupNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "ProvisionedIopsNotAvailableInAZFault": return try await ProvisionedIopsNotAvailableInAZFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "StorageQuotaExceeded": return try await StorageQuotaExceededFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "StorageTypeNotSupported": return try await StorageTypeNotSupportedFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension RestoreDBInstanceToPointInTimeInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case allocatedStorage = "AllocatedStorage"
        case autoMinorVersionUpgrade = "AutoMinorVersionUpgrade"
        case availabilityZone = "AvailabilityZone"
        case backupTarget = "BackupTarget"
        case copyTagsToSnapshot = "CopyTagsToSnapshot"
        case customIamInstanceProfile = "CustomIamInstanceProfile"
        case dbInstanceClass = "DBInstanceClass"
        case dbName = "DBName"
        case dbParameterGroupName = "DBParameterGroupName"
        case dbSubnetGroupName = "DBSubnetGroupName"
        case dedicatedLogVolume = "DedicatedLogVolume"
        case deletionProtection = "DeletionProtection"
        case domain = "Domain"
        case domainAuthSecretArn = "DomainAuthSecretArn"
        case domainDnsIps = "DomainDnsIps"
        case domainFqdn = "DomainFqdn"
        case domainIAMRoleName = "DomainIAMRoleName"
        case domainOu = "DomainOu"
        case enableCloudwatchLogsExports = "EnableCloudwatchLogsExports"
        case enableCustomerOwnedIp = "EnableCustomerOwnedIp"
        case enableIAMDatabaseAuthentication = "EnableIAMDatabaseAuthentication"
        case engine = "Engine"
        case iops = "Iops"
        case licenseModel = "LicenseModel"
        case maxAllocatedStorage = "MaxAllocatedStorage"
        case multiAZ = "MultiAZ"
        case networkType = "NetworkType"
        case optionGroupName = "OptionGroupName"
        case port = "Port"
        case processorFeatures = "ProcessorFeatures"
        case publiclyAccessible = "PubliclyAccessible"
        case restoreTime = "RestoreTime"
        case sourceDBInstanceAutomatedBackupsArn = "SourceDBInstanceAutomatedBackupsArn"
        case sourceDBInstanceIdentifier = "SourceDBInstanceIdentifier"
        case sourceDbiResourceId = "SourceDbiResourceId"
        case storageThroughput = "StorageThroughput"
        case storageType = "StorageType"
        case tags = "Tags"
        case targetDBInstanceIdentifier = "TargetDBInstanceIdentifier"
        case tdeCredentialArn = "TdeCredentialArn"
        case tdeCredentialPassword = "TdeCredentialPassword"
        case useDefaultProcessorFeatures = "UseDefaultProcessorFeatures"
        case useLatestRestorableTime = "UseLatestRestorableTime"
        case vpcSecurityGroupIds = "VpcSecurityGroupIds"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let allocatedStorage = allocatedStorage {
            try container.encode(allocatedStorage, forKey: ClientRuntime.Key("AllocatedStorage"))
        }
        if let autoMinorVersionUpgrade = autoMinorVersionUpgrade {
            try container.encode(autoMinorVersionUpgrade, forKey: ClientRuntime.Key("AutoMinorVersionUpgrade"))
        }
        if let availabilityZone = availabilityZone {
            try container.encode(availabilityZone, forKey: ClientRuntime.Key("AvailabilityZone"))
        }
        if let backupTarget = backupTarget {
            try container.encode(backupTarget, forKey: ClientRuntime.Key("BackupTarget"))
        }
        if let copyTagsToSnapshot = copyTagsToSnapshot {
            try container.encode(copyTagsToSnapshot, forKey: ClientRuntime.Key("CopyTagsToSnapshot"))
        }
        if let customIamInstanceProfile = customIamInstanceProfile {
            try container.encode(customIamInstanceProfile, forKey: ClientRuntime.Key("CustomIamInstanceProfile"))
        }
        if let dbInstanceClass = dbInstanceClass {
            try container.encode(dbInstanceClass, forKey: ClientRuntime.Key("DBInstanceClass"))
        }
        if let dbName = dbName {
            try container.encode(dbName, forKey: ClientRuntime.Key("DBName"))
        }
        if let dbParameterGroupName = dbParameterGroupName {
            try container.encode(dbParameterGroupName, forKey: ClientRuntime.Key("DBParameterGroupName"))
        }
        if let dbSubnetGroupName = dbSubnetGroupName {
            try container.encode(dbSubnetGroupName, forKey: ClientRuntime.Key("DBSubnetGroupName"))
        }
        if let dedicatedLogVolume = dedicatedLogVolume {
            try container.encode(dedicatedLogVolume, forKey: ClientRuntime.Key("DedicatedLogVolume"))
        }
        if let deletionProtection = deletionProtection {
            try container.encode(deletionProtection, forKey: ClientRuntime.Key("DeletionProtection"))
        }
        if let domain = domain {
            try container.encode(domain, forKey: ClientRuntime.Key("Domain"))
        }
        if let domainAuthSecretArn = domainAuthSecretArn {
            try container.encode(domainAuthSecretArn, forKey: ClientRuntime.Key("DomainAuthSecretArn"))
        }
        if let domainDnsIps = domainDnsIps {
            if !domainDnsIps.isEmpty {
                var domainDnsIpsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("DomainDnsIps"))
                for (index0, string0) in domainDnsIps.enumerated() {
                    try domainDnsIpsContainer.encode(string0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var domainDnsIpsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("DomainDnsIps"))
                try domainDnsIpsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let domainFqdn = domainFqdn {
            try container.encode(domainFqdn, forKey: ClientRuntime.Key("DomainFqdn"))
        }
        if let domainIAMRoleName = domainIAMRoleName {
            try container.encode(domainIAMRoleName, forKey: ClientRuntime.Key("DomainIAMRoleName"))
        }
        if let domainOu = domainOu {
            try container.encode(domainOu, forKey: ClientRuntime.Key("DomainOu"))
        }
        if let enableCloudwatchLogsExports = enableCloudwatchLogsExports {
            if !enableCloudwatchLogsExports.isEmpty {
                var enableCloudwatchLogsExportsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("EnableCloudwatchLogsExports"))
                for (index0, string0) in enableCloudwatchLogsExports.enumerated() {
                    try enableCloudwatchLogsExportsContainer.encode(string0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var enableCloudwatchLogsExportsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("EnableCloudwatchLogsExports"))
                try enableCloudwatchLogsExportsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let enableCustomerOwnedIp = enableCustomerOwnedIp {
            try container.encode(enableCustomerOwnedIp, forKey: ClientRuntime.Key("EnableCustomerOwnedIp"))
        }
        if let enableIAMDatabaseAuthentication = enableIAMDatabaseAuthentication {
            try container.encode(enableIAMDatabaseAuthentication, forKey: ClientRuntime.Key("EnableIAMDatabaseAuthentication"))
        }
        if let engine = engine {
            try container.encode(engine, forKey: ClientRuntime.Key("Engine"))
        }
        if let iops = iops {
            try container.encode(iops, forKey: ClientRuntime.Key("Iops"))
        }
        if let licenseModel = licenseModel {
            try container.encode(licenseModel, forKey: ClientRuntime.Key("LicenseModel"))
        }
        if let maxAllocatedStorage = maxAllocatedStorage {
            try container.encode(maxAllocatedStorage, forKey: ClientRuntime.Key("MaxAllocatedStorage"))
        }
        if let multiAZ = multiAZ {
            try container.encode(multiAZ, forKey: ClientRuntime.Key("MultiAZ"))
        }
        if let networkType = networkType {
            try container.encode(networkType, forKey: ClientRuntime.Key("NetworkType"))
        }
        if let optionGroupName = optionGroupName {
            try container.encode(optionGroupName, forKey: ClientRuntime.Key("OptionGroupName"))
        }
        if let port = port {
            try container.encode(port, forKey: ClientRuntime.Key("Port"))
        }
        if let processorFeatures = processorFeatures {
            if !processorFeatures.isEmpty {
                var processorFeaturesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("ProcessorFeatures"))
                for (index0, processorfeature0) in processorFeatures.enumerated() {
                    try processorFeaturesContainer.encode(processorfeature0, forKey: ClientRuntime.Key("ProcessorFeature.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var processorFeaturesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("ProcessorFeatures"))
                try processorFeaturesContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let publiclyAccessible = publiclyAccessible {
            try container.encode(publiclyAccessible, forKey: ClientRuntime.Key("PubliclyAccessible"))
        }
        if let restoreTime = restoreTime {
            try container.encodeTimestamp(restoreTime, format: .dateTime, forKey: ClientRuntime.Key("RestoreTime"))
        }
        if let sourceDBInstanceAutomatedBackupsArn = sourceDBInstanceAutomatedBackupsArn {
            try container.encode(sourceDBInstanceAutomatedBackupsArn, forKey: ClientRuntime.Key("SourceDBInstanceAutomatedBackupsArn"))
        }
        if let sourceDBInstanceIdentifier = sourceDBInstanceIdentifier {
            try container.encode(sourceDBInstanceIdentifier, forKey: ClientRuntime.Key("SourceDBInstanceIdentifier"))
        }
        if let sourceDbiResourceId = sourceDbiResourceId {
            try container.encode(sourceDbiResourceId, forKey: ClientRuntime.Key("SourceDbiResourceId"))
        }
        if let storageThroughput = storageThroughput {
            try container.encode(storageThroughput, forKey: ClientRuntime.Key("StorageThroughput"))
        }
        if let storageType = storageType {
            try container.encode(storageType, forKey: ClientRuntime.Key("StorageType"))
        }
        if let tags = tags {
            if !tags.isEmpty {
                var tagsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Tags"))
                for (index0, tag0) in tags.enumerated() {
                    try tagsContainer.encode(tag0, forKey: ClientRuntime.Key("Tag.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var tagsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Tags"))
                try tagsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let targetDBInstanceIdentifier = targetDBInstanceIdentifier {
            try container.encode(targetDBInstanceIdentifier, forKey: ClientRuntime.Key("TargetDBInstanceIdentifier"))
        }
        if let tdeCredentialArn = tdeCredentialArn {
            try container.encode(tdeCredentialArn, forKey: ClientRuntime.Key("TdeCredentialArn"))
        }
        if let tdeCredentialPassword = tdeCredentialPassword {
            try container.encode(tdeCredentialPassword, forKey: ClientRuntime.Key("TdeCredentialPassword"))
        }
        if let useDefaultProcessorFeatures = useDefaultProcessorFeatures {
            try container.encode(useDefaultProcessorFeatures, forKey: ClientRuntime.Key("UseDefaultProcessorFeatures"))
        }
        if let useLatestRestorableTime = useLatestRestorableTime {
            try container.encode(useLatestRestorableTime, forKey: ClientRuntime.Key("UseLatestRestorableTime"))
        }
        if let vpcSecurityGroupIds = vpcSecurityGroupIds {
            if !vpcSecurityGroupIds.isEmpty {
                var vpcSecurityGroupIdsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("VpcSecurityGroupIds"))
                for (index0, string0) in vpcSecurityGroupIds.enumerated() {
                    try vpcSecurityGroupIdsContainer.encode(string0, forKey: ClientRuntime.Key("VpcSecurityGroupId.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var vpcSecurityGroupIdsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("VpcSecurityGroupIds"))
                try vpcSecurityGroupIdsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        try container.encode("RestoreDBInstanceToPointInTime", forKey:ClientRuntime.Key("Action"))
        try container.encode("2014-10-31", forKey:ClientRuntime.Key("Version"))
    }
}

extension RestoreDBInstanceToPointInTimeInput {

    static func urlPathProvider(_ value: RestoreDBInstanceToPointInTimeInput) -> Swift.String? {
        return "/"
    }
}

///
public struct RestoreDBInstanceToPointInTimeInput: Swift.Equatable {
    /// The amount of storage (in gibibytes) to allocate initially for the DB instance. Follow the allocation rules specified in CreateDBInstance. Be sure to allocate enough storage for your new DB instance so that the restore operation can succeed. You can also allocate additional storage for future growth.
    public var allocatedStorage: Swift.Int?
    /// Specifies whether minor version upgrades are applied automatically to the DB instance during the maintenance window. This setting doesn't apply to RDS Custom.
    public var autoMinorVersionUpgrade: Swift.Bool?
    /// The Availability Zone (AZ) where the DB instance will be created. Default: A random, system-chosen Availability Zone. Constraints:
    ///
    /// * You can't specify the AvailabilityZone parameter if the DB instance is a Multi-AZ deployment.
    ///
    ///
    /// Example: us-east-1a
    public var availabilityZone: Swift.String?
    /// The location for storing automated backups and manual snapshots for the restored DB instance. Valid Values:
    ///
    /// * outposts (Amazon Web Services Outposts)
    ///
    /// * region (Amazon Web Services Region)
    ///
    ///
    /// Default: region For more information, see [Working with Amazon RDS on Amazon Web Services Outposts](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/rds-on-outposts.html) in the Amazon RDS User Guide.
    public var backupTarget: Swift.String?
    /// Specifies whether to copy all tags from the restored DB instance to snapshots of the DB instance. By default, tags are not copied.
    public var copyTagsToSnapshot: Swift.Bool?
    /// The instance profile associated with the underlying Amazon EC2 instance of an RDS Custom DB instance. The instance profile must meet the following requirements:
    ///
    /// * The profile must exist in your account.
    ///
    /// * The profile must have an IAM role that Amazon EC2 has permissions to assume.
    ///
    /// * The instance profile name and the associated IAM role name must start with the prefix AWSRDSCustom.
    ///
    ///
    /// For the list of permissions required for the IAM role, see [ Configure IAM and your VPC](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/custom-setup-orcl.html#custom-setup-orcl.iam-vpc) in the Amazon RDS User Guide. This setting is required for RDS Custom.
    public var customIamInstanceProfile: Swift.String?
    /// The compute and memory capacity of the Amazon RDS DB instance, for example db.m4.large. Not all DB instance classes are available in all Amazon Web Services Regions, or for all database engines. For the full list of DB instance classes, and availability for your engine, see [DB Instance Class](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.DBInstanceClass.html) in the Amazon RDS User Guide. Default: The same DB instance class as the original DB instance.
    public var dbInstanceClass: Swift.String?
    /// The database name for the restored DB instance. This parameter doesn't apply to the following DB instances:
    ///
    /// * RDS Custom
    ///
    /// * RDS for Db2
    ///
    /// * RDS for MariaDB
    ///
    /// * RDS for MySQL
    public var dbName: Swift.String?
    /// The name of the DB parameter group to associate with this DB instance. If you do not specify a value for DBParameterGroupName, then the default DBParameterGroup for the specified DB engine is used. This setting doesn't apply to RDS Custom. Constraints:
    ///
    /// * If supplied, must match the name of an existing DB parameter group.
    ///
    /// * Must be 1 to 255 letters, numbers, or hyphens.
    ///
    /// * First character must be a letter.
    ///
    /// * Can't end with a hyphen or contain two consecutive hyphens.
    public var dbParameterGroupName: Swift.String?
    /// The DB subnet group name to use for the new instance. Constraints:
    ///
    /// * If supplied, must match the name of an existing DB subnet group.
    ///
    ///
    /// Example: mydbsubnetgroup
    public var dbSubnetGroupName: Swift.String?
    /// Specifies whether to enable a dedicated log volume (DLV) for the DB instance.
    public var dedicatedLogVolume: Swift.Bool?
    /// Specifies whether the DB instance has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection isn't enabled. For more information, see [ Deleting a DB Instance](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_DeleteInstance.html).
    public var deletionProtection: Swift.Bool?
    /// The Active Directory directory ID to restore the DB instance in. Create the domain before running this command. Currently, you can create only the MySQL, Microsoft SQL Server, Oracle, and PostgreSQL DB instances in an Active Directory Domain. This setting doesn't apply to RDS Custom. For more information, see [ Kerberos Authentication](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/kerberos-authentication.html) in the Amazon RDS User Guide.
    public var domain: Swift.String?
    /// The ARN for the Secrets Manager secret with the credentials for the user joining the domain. Constraints:
    ///
    /// * Can't be longer than 64 characters.
    ///
    ///
    /// Example: arn:aws:secretsmanager:region:account-number:secret:myselfmanagedADtestsecret-123456
    public var domainAuthSecretArn: Swift.String?
    /// The IPv4 DNS IP addresses of your primary and secondary Active Directory domain controllers. Constraints:
    ///
    /// * Two IP addresses must be provided. If there isn't a secondary domain controller, use the IP address of the primary domain controller for both entries in the list.
    ///
    ///
    /// Example: 123.124.125.126,234.235.236.237
    public var domainDnsIps: [Swift.String]?
    /// The fully qualified domain name (FQDN) of an Active Directory domain. Constraints:
    ///
    /// * Can't be longer than 64 characters.
    ///
    ///
    /// Example: mymanagedADtest.mymanagedAD.mydomain
    public var domainFqdn: Swift.String?
    /// The name of the IAM role to use when making API calls to the Directory Service. This setting doesn't apply to RDS Custom DB instances.
    public var domainIAMRoleName: Swift.String?
    /// The Active Directory organizational unit for your DB instance to join. Constraints:
    ///
    /// * Must be in the distinguished name format.
    ///
    /// * Can't be longer than 64 characters.
    ///
    ///
    /// Example: OU=mymanagedADtestOU,DC=mymanagedADtest,DC=mymanagedAD,DC=mydomain
    public var domainOu: Swift.String?
    /// The list of logs that the restored DB instance is to export to CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see [Publishing Database Logs to Amazon CloudWatch Logs](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch) in the Amazon RDS User Guide. This setting doesn't apply to RDS Custom.
    public var enableCloudwatchLogsExports: [Swift.String]?
    /// Specifies whether to enable a customer-owned IP address (CoIP) for an RDS on Outposts DB instance. A CoIP provides local or external connectivity to resources in your Outpost subnets through your on-premises network. For some use cases, a CoIP can provide lower latency for connections to the DB instance from outside of its virtual private cloud (VPC) on your local network. This setting doesn't apply to RDS Custom. For more information about RDS on Outposts, see [Working with Amazon RDS on Amazon Web Services Outposts](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/rds-on-outposts.html) in the Amazon RDS User Guide. For more information about CoIPs, see [Customer-owned IP addresses](https://docs.aws.amazon.com/outposts/latest/userguide/routing.html#ip-addressing) in the Amazon Web Services Outposts User Guide.
    public var enableCustomerOwnedIp: Swift.Bool?
    /// Specifies whether to enable mapping of Amazon Web Services Identity and Access Management (IAM) accounts to database accounts. By default, mapping isn't enabled. This setting doesn't apply to RDS Custom. For more information about IAM database authentication, see [ IAM Database Authentication for MySQL and PostgreSQL](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.IAMDBAuth.html) in the Amazon RDS User Guide.
    public var enableIAMDatabaseAuthentication: Swift.Bool?
    /// The database engine to use for the new instance. This setting doesn't apply to RDS Custom. Valid Values:
    ///
    /// * db2-ae
    ///
    /// * db2-se
    ///
    /// * mariadb
    ///
    /// * mysql
    ///
    /// * oracle-ee
    ///
    /// * oracle-ee-cdb
    ///
    /// * oracle-se2
    ///
    /// * oracle-se2-cdb
    ///
    /// * postgres
    ///
    /// * sqlserver-ee
    ///
    /// * sqlserver-se
    ///
    /// * sqlserver-ex
    ///
    /// * sqlserver-web
    ///
    ///
    /// Default: The same as source Constraints:
    ///
    /// * Must be compatible with the engine of the source.
    public var engine: Swift.String?
    /// The amount of Provisioned IOPS (input/output operations per second) to initially allocate for the DB instance. This setting doesn't apply to SQL Server. Constraints:
    ///
    /// * Must be an integer greater than 1000.
    public var iops: Swift.Int?
    /// The license model information for the restored DB instance. This setting doesn't apply to RDS Custom. Valid Values: license-included | bring-your-own-license | general-public-license Default: Same as the source.
    public var licenseModel: Swift.String?
    /// The upper limit in gibibytes (GiB) to which Amazon RDS can automatically scale the storage of the DB instance. For more information about this setting, including limitations that apply to it, see [ Managing capacity automatically with Amazon RDS storage autoscaling](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_PIOPS.StorageTypes.html#USER_PIOPS.Autoscaling) in the Amazon RDS User Guide. This setting doesn't apply to RDS Custom.
    public var maxAllocatedStorage: Swift.Int?
    /// Secifies whether the DB instance is a Multi-AZ deployment. This setting doesn't apply to RDS Custom. Constraints:
    ///
    /// * You can't specify the AvailabilityZone parameter if the DB instance is a Multi-AZ deployment.
    public var multiAZ: Swift.Bool?
    /// The network type of the DB instance. The network type is determined by the DBSubnetGroup specified for the DB instance. A DBSubnetGroup can support only the IPv4 protocol or the IPv4 and the IPv6 protocols (DUAL). For more information, see [ Working with a DB instance in a VPC](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_VPC.WorkingWithRDSInstanceinaVPC.html) in the Amazon RDS User Guide. Valid Values:
    ///
    /// * IPV4
    ///
    /// * DUAL
    public var networkType: Swift.String?
    /// The name of the option group to use for the restored DB instance. Permanent options, such as the TDE option for Oracle Advanced Security TDE, can't be removed from an option group, and that option group can't be removed from a DB instance after it is associated with a DB instance This setting doesn't apply to RDS Custom.
    public var optionGroupName: Swift.String?
    /// The port number on which the database accepts connections. Default: The same port as the original DB instance. Constraints:
    ///
    /// * The value must be 1150-65535.
    public var port: Swift.Int?
    /// The number of CPU cores and the number of threads per core for the DB instance class of the DB instance. This setting doesn't apply to RDS Custom.
    public var processorFeatures: [RDSClientTypes.ProcessorFeature]?
    /// Specifies whether the DB instance is publicly accessible. When the DB cluster is publicly accessible, its Domain Name System (DNS) endpoint resolves to the private IP address from within the DB cluster's virtual private cloud (VPC). It resolves to the public IP address from outside of the DB cluster's VPC. Access to the DB cluster is ultimately controlled by the security group it uses. That public access isn't permitted if the security group assigned to the DB cluster doesn't permit it. When the DB instance isn't publicly accessible, it is an internal DB instance with a DNS name that resolves to a private IP address. For more information, see [CreateDBInstance].
    public var publiclyAccessible: Swift.Bool?
    /// The date and time to restore from. Constraints:
    ///
    /// * Must be a time in Universal Coordinated Time (UTC) format.
    ///
    /// * Must be before the latest restorable time for the DB instance.
    ///
    /// * Can't be specified if the UseLatestRestorableTime parameter is enabled.
    ///
    ///
    /// Example: 2009-09-07T23:45:00Z
    public var restoreTime: ClientRuntime.Date?
    /// The Amazon Resource Name (ARN) of the replicated automated backups from which to restore, for example, arn:aws:rds:us-east-1:123456789012:auto-backup:ab-L2IJCEXJP7XQ7HOJ4SIEXAMPLE. This setting doesn't apply to RDS Custom.
    public var sourceDBInstanceAutomatedBackupsArn: Swift.String?
    /// The identifier of the source DB instance from which to restore. Constraints:
    ///
    /// * Must match the identifier of an existing DB instance.
    public var sourceDBInstanceIdentifier: Swift.String?
    /// The resource ID of the source DB instance from which to restore.
    public var sourceDbiResourceId: Swift.String?
    /// The storage throughput value for the DB instance. This setting doesn't apply to RDS Custom or Amazon Aurora.
    public var storageThroughput: Swift.Int?
    /// The storage type to associate with the DB instance. Valid Values: gp2 | gp3 | io1 | standard Default: io1, if the Iops parameter is specified. Otherwise, gp2. Constraints:
    ///
    /// * If you specify io1 or gp3, you must also include a value for the Iops parameter.
    public var storageType: Swift.String?
    /// A list of tags. For more information, see [Tagging Amazon RDS Resources](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html) in the Amazon RDS User Guide.
    public var tags: [RDSClientTypes.Tag]?
    /// The name of the new DB instance to create. Constraints:
    ///
    /// * Must contain from 1 to 63 letters, numbers, or hyphens.
    ///
    /// * First character must be a letter.
    ///
    /// * Can't end with a hyphen or contain two consecutive hyphens.
    /// This member is required.
    public var targetDBInstanceIdentifier: Swift.String?
    /// The ARN from the key store with which to associate the instance for TDE encryption. This setting doesn't apply to RDS Custom.
    public var tdeCredentialArn: Swift.String?
    /// The password for the given ARN from the key store in order to access the device. This setting doesn't apply to RDS Custom.
    public var tdeCredentialPassword: Swift.String?
    /// Specifies whether the DB instance class of the DB instance uses its default processor features. This setting doesn't apply to RDS Custom.
    public var useDefaultProcessorFeatures: Swift.Bool?
    /// Specifies whether the DB instance is restored from the latest backup time. By default, the DB instance isn't restored from the latest backup time. Constraints:
    ///
    /// * Can't be specified if the RestoreTime parameter is provided.
    public var useLatestRestorableTime: Swift.Bool?
    /// A list of EC2 VPC security groups to associate with this DB instance. Default: The default EC2 VPC security group for the DB subnet group's VPC.
    public var vpcSecurityGroupIds: [Swift.String]?

    public init(
        allocatedStorage: Swift.Int? = nil,
        autoMinorVersionUpgrade: Swift.Bool? = nil,
        availabilityZone: Swift.String? = nil,
        backupTarget: Swift.String? = nil,
        copyTagsToSnapshot: Swift.Bool? = nil,
        customIamInstanceProfile: Swift.String? = nil,
        dbInstanceClass: Swift.String? = nil,
        dbName: Swift.String? = nil,
        dbParameterGroupName: Swift.String? = nil,
        dbSubnetGroupName: Swift.String? = nil,
        dedicatedLogVolume: Swift.Bool? = nil,
        deletionProtection: Swift.Bool? = nil,
        domain: Swift.String? = nil,
        domainAuthSecretArn: Swift.String? = nil,
        domainDnsIps: [Swift.String]? = nil,
        domainFqdn: Swift.String? = nil,
        domainIAMRoleName: Swift.String? = nil,
        domainOu: Swift.String? = nil,
        enableCloudwatchLogsExports: [Swift.String]? = nil,
        enableCustomerOwnedIp: Swift.Bool? = nil,
        enableIAMDatabaseAuthentication: Swift.Bool? = nil,
        engine: Swift.String? = nil,
        iops: Swift.Int? = nil,
        licenseModel: Swift.String? = nil,
        maxAllocatedStorage: Swift.Int? = nil,
        multiAZ: Swift.Bool? = nil,
        networkType: Swift.String? = nil,
        optionGroupName: Swift.String? = nil,
        port: Swift.Int? = nil,
        processorFeatures: [RDSClientTypes.ProcessorFeature]? = nil,
        publiclyAccessible: Swift.Bool? = nil,
        restoreTime: ClientRuntime.Date? = nil,
        sourceDBInstanceAutomatedBackupsArn: Swift.String? = nil,
        sourceDBInstanceIdentifier: Swift.String? = nil,
        sourceDbiResourceId: Swift.String? = nil,
        storageThroughput: Swift.Int? = nil,
        storageType: Swift.String? = nil,
        tags: [RDSClientTypes.Tag]? = nil,
        targetDBInstanceIdentifier: Swift.String? = nil,
        tdeCredentialArn: Swift.String? = nil,
        tdeCredentialPassword: Swift.String? = nil,
        useDefaultProcessorFeatures: Swift.Bool? = nil,
        useLatestRestorableTime: Swift.Bool? = nil,
        vpcSecurityGroupIds: [Swift.String]? = nil
    )
    {
        self.allocatedStorage = allocatedStorage
        self.autoMinorVersionUpgrade = autoMinorVersionUpgrade
        self.availabilityZone = availabilityZone
        self.backupTarget = backupTarget
        self.copyTagsToSnapshot = copyTagsToSnapshot
        self.customIamInstanceProfile = customIamInstanceProfile
        self.dbInstanceClass = dbInstanceClass
        self.dbName = dbName
        self.dbParameterGroupName = dbParameterGroupName
        self.dbSubnetGroupName = dbSubnetGroupName
        self.dedicatedLogVolume = dedicatedLogVolume
        self.deletionProtection = deletionProtection
        self.domain = domain
        self.domainAuthSecretArn = domainAuthSecretArn
        self.domainDnsIps = domainDnsIps
        self.domainFqdn = domainFqdn
        self.domainIAMRoleName = domainIAMRoleName
        self.domainOu = domainOu
        self.enableCloudwatchLogsExports = enableCloudwatchLogsExports
        self.enableCustomerOwnedIp = enableCustomerOwnedIp
        self.enableIAMDatabaseAuthentication = enableIAMDatabaseAuthentication
        self.engine = engine
        self.iops = iops
        self.licenseModel = licenseModel
        self.maxAllocatedStorage = maxAllocatedStorage
        self.multiAZ = multiAZ
        self.networkType = networkType
        self.optionGroupName = optionGroupName
        self.port = port
        self.processorFeatures = processorFeatures
        self.publiclyAccessible = publiclyAccessible
        self.restoreTime = restoreTime
        self.sourceDBInstanceAutomatedBackupsArn = sourceDBInstanceAutomatedBackupsArn
        self.sourceDBInstanceIdentifier = sourceDBInstanceIdentifier
        self.sourceDbiResourceId = sourceDbiResourceId
        self.storageThroughput = storageThroughput
        self.storageType = storageType
        self.tags = tags
        self.targetDBInstanceIdentifier = targetDBInstanceIdentifier
        self.tdeCredentialArn = tdeCredentialArn
        self.tdeCredentialPassword = tdeCredentialPassword
        self.useDefaultProcessorFeatures = useDefaultProcessorFeatures
        self.useLatestRestorableTime = useLatestRestorableTime
        self.vpcSecurityGroupIds = vpcSecurityGroupIds
    }
}

extension RestoreDBInstanceToPointInTimeOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<RestoreDBInstanceToPointInTimeOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["RestoreDBInstanceToPointInTimeResult"]
            var value = RestoreDBInstanceToPointInTimeOutput()
            value.dbInstance = try reader["DBInstance"].readIfPresent(readingClosure: RDSClientTypes.DBInstance.readingClosure)
            return value
        }
    }
}

public struct RestoreDBInstanceToPointInTimeOutput: Swift.Equatable {
    /// Contains the details of an Amazon RDS DB instance. This data type is used as a response element in the operations CreateDBInstance, CreateDBInstanceReadReplica, DeleteDBInstance, DescribeDBInstances, ModifyDBInstance, PromoteReadReplica, RebootDBInstance, RestoreDBInstanceFromDBSnapshot, RestoreDBInstanceFromS3, RestoreDBInstanceToPointInTime, StartDBInstance, and StopDBInstance.
    public var dbInstance: RDSClientTypes.DBInstance?

    public init(
        dbInstance: RDSClientTypes.DBInstance? = nil
    )
    {
        self.dbInstance = dbInstance
    }
}

enum RestoreDBInstanceToPointInTimeOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "AuthorizationNotFound": return try await AuthorizationNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "BackupPolicyNotFoundFault": return try await BackupPolicyNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "DBInstanceAlreadyExists": return try await DBInstanceAlreadyExistsFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "DBInstanceAutomatedBackupNotFound": return try await DBInstanceAutomatedBackupNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "DBInstanceNotFound": return try await DBInstanceNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "DBParameterGroupNotFound": return try await DBParameterGroupNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "DBSecurityGroupNotFound": return try await DBSecurityGroupNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "DBSubnetGroupDoesNotCoverEnoughAZs": return try await DBSubnetGroupDoesNotCoverEnoughAZs.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "DBSubnetGroupNotFoundFault": return try await DBSubnetGroupNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "DomainNotFoundFault": return try await DomainNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "InstanceQuotaExceeded": return try await InstanceQuotaExceededFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "InsufficientDBInstanceCapacity": return try await InsufficientDBInstanceCapacityFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "InvalidDBInstanceState": return try await InvalidDBInstanceStateFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "InvalidRestoreFault": return try await InvalidRestoreFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "InvalidSubnet": return try await InvalidSubnet.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "InvalidVPCNetworkStateFault": return try await InvalidVPCNetworkStateFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "KMSKeyNotAccessibleFault": return try await KMSKeyNotAccessibleFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "NetworkTypeNotSupported": return try await NetworkTypeNotSupported.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "OptionGroupNotFoundFault": return try await OptionGroupNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "PointInTimeRestoreNotEnabled": return try await PointInTimeRestoreNotEnabledFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "ProvisionedIopsNotAvailableInAZFault": return try await ProvisionedIopsNotAvailableInAZFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "StorageQuotaExceeded": return try await StorageQuotaExceededFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "StorageTypeNotSupported": return try await StorageTypeNotSupportedFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "TenantDatabaseQuotaExceeded": return try await TenantDatabaseQuotaExceededFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension RDSClientTypes.RestoreWindow: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case earliestTime = "EarliestTime"
        case latestTime = "LatestTime"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let earliestTime = earliestTime {
            try container.encodeTimestamp(earliestTime, format: .dateTime, forKey: ClientRuntime.Key("EarliestTime"))
        }
        if let latestTime = latestTime {
            try container.encodeTimestamp(latestTime, format: .dateTime, forKey: ClientRuntime.Key("LatestTime"))
        }
    }

    static var readingClosure: SmithyReadWrite.ReadingClosure<RDSClientTypes.RestoreWindow, SmithyXML.Reader> {
        return { reader in
            guard reader.content != nil else { return nil }
            var value = RDSClientTypes.RestoreWindow()
            value.earliestTime = try reader["EarliestTime"].readTimestampIfPresent(format: .dateTime)
            value.latestTime = try reader["LatestTime"].readTimestampIfPresent(format: .dateTime)
            return value
        }
    }
}

extension RDSClientTypes {
    /// Earliest and latest time an instance can be restored to:
    public struct RestoreWindow: Swift.Equatable {
        /// The earliest time you can restore an instance to.
        public var earliestTime: ClientRuntime.Date?
        /// The latest time you can restore an instance to.
        public var latestTime: ClientRuntime.Date?

        public init(
            earliestTime: ClientRuntime.Date? = nil,
            latestTime: ClientRuntime.Date? = nil
        )
        {
            self.earliestTime = earliestTime
            self.latestTime = latestTime
        }
    }

}

extension RevokeDBSecurityGroupIngressInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case cidrip = "CIDRIP"
        case dbSecurityGroupName = "DBSecurityGroupName"
        case ec2SecurityGroupId = "EC2SecurityGroupId"
        case ec2SecurityGroupName = "EC2SecurityGroupName"
        case ec2SecurityGroupOwnerId = "EC2SecurityGroupOwnerId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let cidrip = cidrip {
            try container.encode(cidrip, forKey: ClientRuntime.Key("CIDRIP"))
        }
        if let dbSecurityGroupName = dbSecurityGroupName {
            try container.encode(dbSecurityGroupName, forKey: ClientRuntime.Key("DBSecurityGroupName"))
        }
        if let ec2SecurityGroupId = ec2SecurityGroupId {
            try container.encode(ec2SecurityGroupId, forKey: ClientRuntime.Key("EC2SecurityGroupId"))
        }
        if let ec2SecurityGroupName = ec2SecurityGroupName {
            try container.encode(ec2SecurityGroupName, forKey: ClientRuntime.Key("EC2SecurityGroupName"))
        }
        if let ec2SecurityGroupOwnerId = ec2SecurityGroupOwnerId {
            try container.encode(ec2SecurityGroupOwnerId, forKey: ClientRuntime.Key("EC2SecurityGroupOwnerId"))
        }
        try container.encode("RevokeDBSecurityGroupIngress", forKey:ClientRuntime.Key("Action"))
        try container.encode("2014-10-31", forKey:ClientRuntime.Key("Version"))
    }
}

extension RevokeDBSecurityGroupIngressInput {

    static func urlPathProvider(_ value: RevokeDBSecurityGroupIngressInput) -> Swift.String? {
        return "/"
    }
}

///
public struct RevokeDBSecurityGroupIngressInput: Swift.Equatable {
    /// The IP range to revoke access from. Must be a valid CIDR range. If CIDRIP is specified, EC2SecurityGroupName, EC2SecurityGroupId and EC2SecurityGroupOwnerId can't be provided.
    public var cidrip: Swift.String?
    /// The name of the DB security group to revoke ingress from.
    /// This member is required.
    public var dbSecurityGroupName: Swift.String?
    /// The id of the EC2 security group to revoke access from. For VPC DB security groups, EC2SecurityGroupId must be provided. Otherwise, EC2SecurityGroupOwnerId and either EC2SecurityGroupName or EC2SecurityGroupId must be provided.
    public var ec2SecurityGroupId: Swift.String?
    /// The name of the EC2 security group to revoke access from. For VPC DB security groups, EC2SecurityGroupId must be provided. Otherwise, EC2SecurityGroupOwnerId and either EC2SecurityGroupName or EC2SecurityGroupId must be provided.
    public var ec2SecurityGroupName: Swift.String?
    /// The Amazon Web Services account number of the owner of the EC2 security group specified in the EC2SecurityGroupName parameter. The Amazon Web Services access key ID isn't an acceptable value. For VPC DB security groups, EC2SecurityGroupId must be provided. Otherwise, EC2SecurityGroupOwnerId and either EC2SecurityGroupName or EC2SecurityGroupId must be provided.
    public var ec2SecurityGroupOwnerId: Swift.String?

    public init(
        cidrip: Swift.String? = nil,
        dbSecurityGroupName: Swift.String? = nil,
        ec2SecurityGroupId: Swift.String? = nil,
        ec2SecurityGroupName: Swift.String? = nil,
        ec2SecurityGroupOwnerId: Swift.String? = nil
    )
    {
        self.cidrip = cidrip
        self.dbSecurityGroupName = dbSecurityGroupName
        self.ec2SecurityGroupId = ec2SecurityGroupId
        self.ec2SecurityGroupName = ec2SecurityGroupName
        self.ec2SecurityGroupOwnerId = ec2SecurityGroupOwnerId
    }
}

extension RevokeDBSecurityGroupIngressOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<RevokeDBSecurityGroupIngressOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["RevokeDBSecurityGroupIngressResult"]
            var value = RevokeDBSecurityGroupIngressOutput()
            value.dbSecurityGroup = try reader["DBSecurityGroup"].readIfPresent(readingClosure: RDSClientTypes.DBSecurityGroup.readingClosure)
            return value
        }
    }
}

public struct RevokeDBSecurityGroupIngressOutput: Swift.Equatable {
    /// Contains the details for an Amazon RDS DB security group. This data type is used as a response element in the DescribeDBSecurityGroups action.
    public var dbSecurityGroup: RDSClientTypes.DBSecurityGroup?

    public init(
        dbSecurityGroup: RDSClientTypes.DBSecurityGroup? = nil
    )
    {
        self.dbSecurityGroup = dbSecurityGroup
    }
}

enum RevokeDBSecurityGroupIngressOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "AuthorizationNotFound": return try await AuthorizationNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "DBSecurityGroupNotFound": return try await DBSecurityGroupNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "InvalidDBSecurityGroupState": return try await InvalidDBSecurityGroupStateFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension SNSInvalidTopicFault {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = SNSInvalidTopicFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// SNS has responded that there is a problem with the SNS topic specified.
public struct SNSInvalidTopicFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "SNSInvalidTopic" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension SNSNoAuthorizationFault {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = SNSNoAuthorizationFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// You do not have permission to publish to the SNS topic ARN.
public struct SNSNoAuthorizationFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "SNSNoAuthorization" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension SNSTopicArnNotFoundFault {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = SNSTopicArnNotFoundFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// The SNS topic ARN does not exist.
public struct SNSTopicArnNotFoundFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "SNSTopicArnNotFound" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension RDSClientTypes.ScalarReferenceDetails: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case value = "Value"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let value = value {
            try container.encode(value, forKey: ClientRuntime.Key("Value"))
        }
    }

    static var readingClosure: SmithyReadWrite.ReadingClosure<RDSClientTypes.ScalarReferenceDetails, SmithyXML.Reader> {
        return { reader in
            guard reader.content != nil else { return nil }
            var value = RDSClientTypes.ScalarReferenceDetails()
            value.value = try reader["Value"].readIfPresent()
            return value
        }
    }
}

extension RDSClientTypes {
    /// The metric reference details when the reference is a scalar.
    public struct ScalarReferenceDetails: Swift.Equatable {
        /// The value of a scalar reference.
        public var value: Swift.Double?

        public init(
            value: Swift.Double? = nil
        )
        {
            self.value = value
        }
    }

}

extension RDSClientTypes.ScalingConfiguration: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case autoPause = "AutoPause"
        case maxCapacity = "MaxCapacity"
        case minCapacity = "MinCapacity"
        case secondsBeforeTimeout = "SecondsBeforeTimeout"
        case secondsUntilAutoPause = "SecondsUntilAutoPause"
        case timeoutAction = "TimeoutAction"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let autoPause = autoPause {
            try container.encode(autoPause, forKey: ClientRuntime.Key("AutoPause"))
        }
        if let maxCapacity = maxCapacity {
            try container.encode(maxCapacity, forKey: ClientRuntime.Key("MaxCapacity"))
        }
        if let minCapacity = minCapacity {
            try container.encode(minCapacity, forKey: ClientRuntime.Key("MinCapacity"))
        }
        if let secondsBeforeTimeout = secondsBeforeTimeout {
            try container.encode(secondsBeforeTimeout, forKey: ClientRuntime.Key("SecondsBeforeTimeout"))
        }
        if let secondsUntilAutoPause = secondsUntilAutoPause {
            try container.encode(secondsUntilAutoPause, forKey: ClientRuntime.Key("SecondsUntilAutoPause"))
        }
        if let timeoutAction = timeoutAction {
            try container.encode(timeoutAction, forKey: ClientRuntime.Key("TimeoutAction"))
        }
    }

    static var readingClosure: SmithyReadWrite.ReadingClosure<RDSClientTypes.ScalingConfiguration, SmithyXML.Reader> {
        return { reader in
            guard reader.content != nil else { return nil }
            var value = RDSClientTypes.ScalingConfiguration()
            value.minCapacity = try reader["MinCapacity"].readIfPresent()
            value.maxCapacity = try reader["MaxCapacity"].readIfPresent()
            value.autoPause = try reader["AutoPause"].readIfPresent()
            value.secondsUntilAutoPause = try reader["SecondsUntilAutoPause"].readIfPresent()
            value.timeoutAction = try reader["TimeoutAction"].readIfPresent()
            value.secondsBeforeTimeout = try reader["SecondsBeforeTimeout"].readIfPresent()
            return value
        }
    }
}

extension RDSClientTypes {
    /// Contains the scaling configuration of an Aurora Serverless v1 DB cluster. For more information, see [Using Amazon Aurora Serverless v1](https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html) in the Amazon Aurora User Guide.
    public struct ScalingConfiguration: Swift.Equatable {
        /// Indicates whether to allow or disallow automatic pause for an Aurora DB cluster in serverless DB engine mode. A DB cluster can be paused only when it's idle (it has no connections). If a DB cluster is paused for more than seven days, the DB cluster might be backed up with a snapshot. In this case, the DB cluster is restored when there is a request to connect to it.
        public var autoPause: Swift.Bool?
        /// The maximum capacity for an Aurora DB cluster in serverless DB engine mode. For Aurora MySQL, valid capacity values are 1, 2, 4, 8, 16, 32, 64, 128, and 256. For Aurora PostgreSQL, valid capacity values are 2, 4, 8, 16, 32, 64, 192, and 384. The maximum capacity must be greater than or equal to the minimum capacity.
        public var maxCapacity: Swift.Int?
        /// The minimum capacity for an Aurora DB cluster in serverless DB engine mode. For Aurora MySQL, valid capacity values are 1, 2, 4, 8, 16, 32, 64, 128, and 256. For Aurora PostgreSQL, valid capacity values are 2, 4, 8, 16, 32, 64, 192, and 384. The minimum capacity must be less than or equal to the maximum capacity.
        public var minCapacity: Swift.Int?
        /// The amount of time, in seconds, that Aurora Serverless v1 tries to find a scaling point to perform seamless scaling before enforcing the timeout action. The default is 300. Specify a value between 60 and 600 seconds.
        public var secondsBeforeTimeout: Swift.Int?
        /// The time, in seconds, before an Aurora DB cluster in serverless mode is paused. Specify a value between 300 and 86,400 seconds.
        public var secondsUntilAutoPause: Swift.Int?
        /// The action to take when the timeout is reached, either ForceApplyCapacityChange or RollbackCapacityChange. ForceApplyCapacityChange sets the capacity to the specified value as soon as possible. RollbackCapacityChange, the default, ignores the capacity change if a scaling point isn't found in the timeout period. If you specify ForceApplyCapacityChange, connections that prevent Aurora Serverless v1 from finding a scaling point might be dropped. For more information, see [ Autoscaling for Aurora Serverless v1](https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.how-it-works.html#aurora-serverless.how-it-works.auto-scaling) in the Amazon Aurora User Guide.
        public var timeoutAction: Swift.String?

        public init(
            autoPause: Swift.Bool? = nil,
            maxCapacity: Swift.Int? = nil,
            minCapacity: Swift.Int? = nil,
            secondsBeforeTimeout: Swift.Int? = nil,
            secondsUntilAutoPause: Swift.Int? = nil,
            timeoutAction: Swift.String? = nil
        )
        {
            self.autoPause = autoPause
            self.maxCapacity = maxCapacity
            self.minCapacity = minCapacity
            self.secondsBeforeTimeout = secondsBeforeTimeout
            self.secondsUntilAutoPause = secondsUntilAutoPause
            self.timeoutAction = timeoutAction
        }
    }

}

extension RDSClientTypes.ScalingConfigurationInfo: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case autoPause = "AutoPause"
        case maxCapacity = "MaxCapacity"
        case minCapacity = "MinCapacity"
        case secondsBeforeTimeout = "SecondsBeforeTimeout"
        case secondsUntilAutoPause = "SecondsUntilAutoPause"
        case timeoutAction = "TimeoutAction"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let autoPause = autoPause {
            try container.encode(autoPause, forKey: ClientRuntime.Key("AutoPause"))
        }
        if let maxCapacity = maxCapacity {
            try container.encode(maxCapacity, forKey: ClientRuntime.Key("MaxCapacity"))
        }
        if let minCapacity = minCapacity {
            try container.encode(minCapacity, forKey: ClientRuntime.Key("MinCapacity"))
        }
        if let secondsBeforeTimeout = secondsBeforeTimeout {
            try container.encode(secondsBeforeTimeout, forKey: ClientRuntime.Key("SecondsBeforeTimeout"))
        }
        if let secondsUntilAutoPause = secondsUntilAutoPause {
            try container.encode(secondsUntilAutoPause, forKey: ClientRuntime.Key("SecondsUntilAutoPause"))
        }
        if let timeoutAction = timeoutAction {
            try container.encode(timeoutAction, forKey: ClientRuntime.Key("TimeoutAction"))
        }
    }

    static var readingClosure: SmithyReadWrite.ReadingClosure<RDSClientTypes.ScalingConfigurationInfo, SmithyXML.Reader> {
        return { reader in
            guard reader.content != nil else { return nil }
            var value = RDSClientTypes.ScalingConfigurationInfo()
            value.minCapacity = try reader["MinCapacity"].readIfPresent()
            value.maxCapacity = try reader["MaxCapacity"].readIfPresent()
            value.autoPause = try reader["AutoPause"].readIfPresent()
            value.secondsUntilAutoPause = try reader["SecondsUntilAutoPause"].readIfPresent()
            value.timeoutAction = try reader["TimeoutAction"].readIfPresent()
            value.secondsBeforeTimeout = try reader["SecondsBeforeTimeout"].readIfPresent()
            return value
        }
    }
}

extension RDSClientTypes {
    /// The scaling configuration for an Aurora DB cluster in serverless DB engine mode. For more information, see [Using Amazon Aurora Serverless v1](https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html) in the Amazon Aurora User Guide.
    public struct ScalingConfigurationInfo: Swift.Equatable {
        /// Indicates whether automatic pause is allowed for the Aurora DB cluster in serverless DB engine mode. When the value is set to false for an Aurora Serverless v1 DB cluster, the DB cluster automatically resumes.
        public var autoPause: Swift.Bool?
        /// The maximum capacity for an Aurora DB cluster in serverless DB engine mode.
        public var maxCapacity: Swift.Int?
        /// The minimum capacity for an Aurora DB cluster in serverless DB engine mode.
        public var minCapacity: Swift.Int?
        /// The number of seconds before scaling times out. What happens when an attempted scaling action times out is determined by the TimeoutAction setting.
        public var secondsBeforeTimeout: Swift.Int?
        /// The remaining amount of time, in seconds, before the Aurora DB cluster in serverless mode is paused. A DB cluster can be paused only when it's idle (it has no connections).
        public var secondsUntilAutoPause: Swift.Int?
        /// The action that occurs when Aurora times out while attempting to change the capacity of an Aurora Serverless v1 cluster. The value is either ForceApplyCapacityChange or RollbackCapacityChange. ForceApplyCapacityChange, the default, sets the capacity to the specified value as soon as possible. RollbackCapacityChange ignores the capacity change if a scaling point isn't found in the timeout period.
        public var timeoutAction: Swift.String?

        public init(
            autoPause: Swift.Bool? = nil,
            maxCapacity: Swift.Int? = nil,
            minCapacity: Swift.Int? = nil,
            secondsBeforeTimeout: Swift.Int? = nil,
            secondsUntilAutoPause: Swift.Int? = nil,
            timeoutAction: Swift.String? = nil
        )
        {
            self.autoPause = autoPause
            self.maxCapacity = maxCapacity
            self.minCapacity = minCapacity
            self.secondsBeforeTimeout = secondsBeforeTimeout
            self.secondsUntilAutoPause = secondsUntilAutoPause
            self.timeoutAction = timeoutAction
        }
    }

}

extension RDSClientTypes.ServerlessV2ScalingConfiguration: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case maxCapacity = "MaxCapacity"
        case minCapacity = "MinCapacity"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let maxCapacity = maxCapacity {
            try container.encode(maxCapacity, forKey: ClientRuntime.Key("MaxCapacity"))
        }
        if let minCapacity = minCapacity {
            try container.encode(minCapacity, forKey: ClientRuntime.Key("MinCapacity"))
        }
    }

    static var readingClosure: SmithyReadWrite.ReadingClosure<RDSClientTypes.ServerlessV2ScalingConfiguration, SmithyXML.Reader> {
        return { reader in
            guard reader.content != nil else { return nil }
            var value = RDSClientTypes.ServerlessV2ScalingConfiguration()
            value.minCapacity = try reader["MinCapacity"].readIfPresent()
            value.maxCapacity = try reader["MaxCapacity"].readIfPresent()
            return value
        }
    }
}

extension RDSClientTypes {
    /// Contains the scaling configuration of an Aurora Serverless v2 DB cluster. For more information, see [Using Amazon Aurora Serverless v2](https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless-v2.html) in the Amazon Aurora User Guide.
    public struct ServerlessV2ScalingConfiguration: Swift.Equatable {
        /// The maximum number of Aurora capacity units (ACUs) for a DB instance in an Aurora Serverless v2 cluster. You can specify ACU values in half-step increments, such as 40, 40.5, 41, and so on. The largest value that you can use is 128.
        public var maxCapacity: Swift.Double?
        /// The minimum number of Aurora capacity units (ACUs) for a DB instance in an Aurora Serverless v2 cluster. You can specify ACU values in half-step increments, such as 8, 8.5, 9, and so on. The smallest value that you can use is 0.5.
        public var minCapacity: Swift.Double?

        public init(
            maxCapacity: Swift.Double? = nil,
            minCapacity: Swift.Double? = nil
        )
        {
            self.maxCapacity = maxCapacity
            self.minCapacity = minCapacity
        }
    }

}

extension RDSClientTypes.ServerlessV2ScalingConfigurationInfo: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case maxCapacity = "MaxCapacity"
        case minCapacity = "MinCapacity"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let maxCapacity = maxCapacity {
            try container.encode(maxCapacity, forKey: ClientRuntime.Key("MaxCapacity"))
        }
        if let minCapacity = minCapacity {
            try container.encode(minCapacity, forKey: ClientRuntime.Key("MinCapacity"))
        }
    }

    static var readingClosure: SmithyReadWrite.ReadingClosure<RDSClientTypes.ServerlessV2ScalingConfigurationInfo, SmithyXML.Reader> {
        return { reader in
            guard reader.content != nil else { return nil }
            var value = RDSClientTypes.ServerlessV2ScalingConfigurationInfo()
            value.minCapacity = try reader["MinCapacity"].readIfPresent()
            value.maxCapacity = try reader["MaxCapacity"].readIfPresent()
            return value
        }
    }
}

extension RDSClientTypes {
    /// The scaling configuration for an Aurora Serverless v2 DB cluster. For more information, see [Using Amazon Aurora Serverless v2](https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless-v2.html) in the Amazon Aurora User Guide.
    public struct ServerlessV2ScalingConfigurationInfo: Swift.Equatable {
        /// The maximum number of Aurora capacity units (ACUs) for a DB instance in an Aurora Serverless v2 cluster. You can specify ACU values in half-step increments, such as 40, 40.5, 41, and so on. The largest value that you can use is 128.
        public var maxCapacity: Swift.Double?
        /// The minimum number of Aurora capacity units (ACUs) for a DB instance in an Aurora Serverless v2 cluster. You can specify ACU values in half-step increments, such as 8, 8.5, 9, and so on. The smallest value that you can use is 0.5.
        public var minCapacity: Swift.Double?

        public init(
            maxCapacity: Swift.Double? = nil,
            minCapacity: Swift.Double? = nil
        )
        {
            self.maxCapacity = maxCapacity
            self.minCapacity = minCapacity
        }
    }

}

extension SharedSnapshotQuotaExceededFault {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = SharedSnapshotQuotaExceededFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// You have exceeded the maximum number of accounts that you can share a manual DB snapshot with.
public struct SharedSnapshotQuotaExceededFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "SharedSnapshotQuotaExceeded" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension SnapshotQuotaExceededFault {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = SnapshotQuotaExceededFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// The request would result in the user exceeding the allowed number of DB snapshots.
public struct SnapshotQuotaExceededFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "SnapshotQuotaExceeded" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension SourceClusterNotSupportedFault {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = SourceClusterNotSupportedFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// The source DB cluster isn't supported for a blue/green deployment.
public struct SourceClusterNotSupportedFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "SourceClusterNotSupportedFault" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension SourceDatabaseNotSupportedFault {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = SourceDatabaseNotSupportedFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// The source DB instance isn't supported for a blue/green deployment.
public struct SourceDatabaseNotSupportedFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "SourceDatabaseNotSupportedFault" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension SourceNotFoundFault {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = SourceNotFoundFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// The requested source could not be found.
public struct SourceNotFoundFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "SourceNotFound" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension RDSClientTypes.SourceRegion: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case endpoint = "Endpoint"
        case regionName = "RegionName"
        case status = "Status"
        case supportsDBInstanceAutomatedBackupsReplication = "SupportsDBInstanceAutomatedBackupsReplication"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let endpoint = endpoint {
            try container.encode(endpoint, forKey: ClientRuntime.Key("Endpoint"))
        }
        if let regionName = regionName {
            try container.encode(regionName, forKey: ClientRuntime.Key("RegionName"))
        }
        if let status = status {
            try container.encode(status, forKey: ClientRuntime.Key("Status"))
        }
        if let supportsDBInstanceAutomatedBackupsReplication = supportsDBInstanceAutomatedBackupsReplication {
            try container.encode(supportsDBInstanceAutomatedBackupsReplication, forKey: ClientRuntime.Key("SupportsDBInstanceAutomatedBackupsReplication"))
        }
    }

    static var readingClosure: SmithyReadWrite.ReadingClosure<RDSClientTypes.SourceRegion, SmithyXML.Reader> {
        return { reader in
            guard reader.content != nil else { return nil }
            var value = RDSClientTypes.SourceRegion()
            value.regionName = try reader["RegionName"].readIfPresent()
            value.endpoint = try reader["Endpoint"].readIfPresent()
            value.status = try reader["Status"].readIfPresent()
            value.supportsDBInstanceAutomatedBackupsReplication = try reader["SupportsDBInstanceAutomatedBackupsReplication"].readIfPresent()
            return value
        }
    }
}

extension RDSClientTypes {
    /// Contains an Amazon Web Services Region name as the result of a successful call to the DescribeSourceRegions action.
    public struct SourceRegion: Swift.Equatable {
        /// The endpoint for the source Amazon Web Services Region endpoint.
        public var endpoint: Swift.String?
        /// The name of the source Amazon Web Services Region.
        public var regionName: Swift.String?
        /// The status of the source Amazon Web Services Region.
        public var status: Swift.String?
        /// Indicates whether the source Amazon Web Services Region supports replicating automated backups to the current Amazon Web Services Region.
        public var supportsDBInstanceAutomatedBackupsReplication: Swift.Bool?

        public init(
            endpoint: Swift.String? = nil,
            regionName: Swift.String? = nil,
            status: Swift.String? = nil,
            supportsDBInstanceAutomatedBackupsReplication: Swift.Bool? = nil
        )
        {
            self.endpoint = endpoint
            self.regionName = regionName
            self.status = status
            self.supportsDBInstanceAutomatedBackupsReplication = supportsDBInstanceAutomatedBackupsReplication
        }
    }

}

extension RDSClientTypes {
    public enum SourceType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case blueGreenDeployment
        case customEngineVersion
        case dbCluster
        case dbClusterSnapshot
        case dbInstance
        case dbParameterGroup
        case dbProxy
        case dbSecurityGroup
        case dbSnapshot
        case sdkUnknown(Swift.String)

        public static var allCases: [SourceType] {
            return [
                .blueGreenDeployment,
                .customEngineVersion,
                .dbCluster,
                .dbClusterSnapshot,
                .dbInstance,
                .dbParameterGroup,
                .dbProxy,
                .dbSecurityGroup,
                .dbSnapshot,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .blueGreenDeployment: return "blue-green-deployment"
            case .customEngineVersion: return "custom-engine-version"
            case .dbCluster: return "db-cluster"
            case .dbClusterSnapshot: return "db-cluster-snapshot"
            case .dbInstance: return "db-instance"
            case .dbParameterGroup: return "db-parameter-group"
            case .dbProxy: return "db-proxy"
            case .dbSecurityGroup: return "db-security-group"
            case .dbSnapshot: return "db-snapshot"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = SourceType(rawValue: rawValue) ?? SourceType.sdkUnknown(rawValue)
        }
    }
}

extension StartActivityStreamInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case applyImmediately = "ApplyImmediately"
        case engineNativeAuditFieldsIncluded = "EngineNativeAuditFieldsIncluded"
        case kmsKeyId = "KmsKeyId"
        case mode = "Mode"
        case resourceArn = "ResourceArn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let applyImmediately = applyImmediately {
            try container.encode(applyImmediately, forKey: ClientRuntime.Key("ApplyImmediately"))
        }
        if let engineNativeAuditFieldsIncluded = engineNativeAuditFieldsIncluded {
            try container.encode(engineNativeAuditFieldsIncluded, forKey: ClientRuntime.Key("EngineNativeAuditFieldsIncluded"))
        }
        if let kmsKeyId = kmsKeyId {
            try container.encode(kmsKeyId, forKey: ClientRuntime.Key("KmsKeyId"))
        }
        if let mode = mode {
            try container.encode(mode, forKey: ClientRuntime.Key("Mode"))
        }
        if let resourceArn = resourceArn {
            try container.encode(resourceArn, forKey: ClientRuntime.Key("ResourceArn"))
        }
        try container.encode("StartActivityStream", forKey:ClientRuntime.Key("Action"))
        try container.encode("2014-10-31", forKey:ClientRuntime.Key("Version"))
    }
}

extension StartActivityStreamInput {

    static func urlPathProvider(_ value: StartActivityStreamInput) -> Swift.String? {
        return "/"
    }
}

public struct StartActivityStreamInput: Swift.Equatable {
    /// Specifies whether or not the database activity stream is to start as soon as possible, regardless of the maintenance window for the database.
    public var applyImmediately: Swift.Bool?
    /// Specifies whether the database activity stream includes engine-native audit fields. This option applies to an Oracle or Microsoft SQL Server DB instance. By default, no engine-native audit fields are included.
    public var engineNativeAuditFieldsIncluded: Swift.Bool?
    /// The Amazon Web Services KMS key identifier for encrypting messages in the database activity stream. The Amazon Web Services KMS key identifier is the key ARN, key ID, alias ARN, or alias name for the KMS key.
    /// This member is required.
    public var kmsKeyId: Swift.String?
    /// Specifies the mode of the database activity stream. Database events such as a change or access generate an activity stream event. The database session can handle these events either synchronously or asynchronously.
    /// This member is required.
    public var mode: RDSClientTypes.ActivityStreamMode?
    /// The Amazon Resource Name (ARN) of the DB cluster, for example, arn:aws:rds:us-east-1:12345667890:cluster:das-cluster.
    /// This member is required.
    public var resourceArn: Swift.String?

    public init(
        applyImmediately: Swift.Bool? = nil,
        engineNativeAuditFieldsIncluded: Swift.Bool? = nil,
        kmsKeyId: Swift.String? = nil,
        mode: RDSClientTypes.ActivityStreamMode? = nil,
        resourceArn: Swift.String? = nil
    )
    {
        self.applyImmediately = applyImmediately
        self.engineNativeAuditFieldsIncluded = engineNativeAuditFieldsIncluded
        self.kmsKeyId = kmsKeyId
        self.mode = mode
        self.resourceArn = resourceArn
    }
}

extension StartActivityStreamOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<StartActivityStreamOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["StartActivityStreamResult"]
            var value = StartActivityStreamOutput()
            value.applyImmediately = try reader["ApplyImmediately"].readIfPresent()
            value.engineNativeAuditFieldsIncluded = try reader["EngineNativeAuditFieldsIncluded"].readIfPresent()
            value.kinesisStreamName = try reader["KinesisStreamName"].readIfPresent()
            value.kmsKeyId = try reader["KmsKeyId"].readIfPresent()
            value.mode = try reader["Mode"].readIfPresent()
            value.status = try reader["Status"].readIfPresent()
            return value
        }
    }
}

public struct StartActivityStreamOutput: Swift.Equatable {
    /// Indicates whether or not the database activity stream will start as soon as possible, regardless of the maintenance window for the database.
    public var applyImmediately: Swift.Bool?
    /// Indicates whether engine-native audit fields are included in the database activity stream.
    public var engineNativeAuditFieldsIncluded: Swift.Bool?
    /// The name of the Amazon Kinesis data stream to be used for the database activity stream.
    public var kinesisStreamName: Swift.String?
    /// The Amazon Web Services KMS key identifier for encryption of messages in the database activity stream.
    public var kmsKeyId: Swift.String?
    /// The mode of the database activity stream.
    public var mode: RDSClientTypes.ActivityStreamMode?
    /// The status of the database activity stream.
    public var status: RDSClientTypes.ActivityStreamStatus?

    public init(
        applyImmediately: Swift.Bool? = nil,
        engineNativeAuditFieldsIncluded: Swift.Bool? = nil,
        kinesisStreamName: Swift.String? = nil,
        kmsKeyId: Swift.String? = nil,
        mode: RDSClientTypes.ActivityStreamMode? = nil,
        status: RDSClientTypes.ActivityStreamStatus? = nil
    )
    {
        self.applyImmediately = applyImmediately
        self.engineNativeAuditFieldsIncluded = engineNativeAuditFieldsIncluded
        self.kinesisStreamName = kinesisStreamName
        self.kmsKeyId = kmsKeyId
        self.mode = mode
        self.status = status
    }
}

enum StartActivityStreamOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "DBClusterNotFoundFault": return try await DBClusterNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "DBInstanceNotFound": return try await DBInstanceNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "InvalidDBClusterStateFault": return try await InvalidDBClusterStateFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "InvalidDBInstanceState": return try await InvalidDBInstanceStateFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "KMSKeyNotAccessibleFault": return try await KMSKeyNotAccessibleFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "ResourceNotFoundFault": return try await ResourceNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension StartDBClusterInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dbClusterIdentifier = "DBClusterIdentifier"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let dbClusterIdentifier = dbClusterIdentifier {
            try container.encode(dbClusterIdentifier, forKey: ClientRuntime.Key("DBClusterIdentifier"))
        }
        try container.encode("StartDBCluster", forKey:ClientRuntime.Key("Action"))
        try container.encode("2014-10-31", forKey:ClientRuntime.Key("Version"))
    }
}

extension StartDBClusterInput {

    static func urlPathProvider(_ value: StartDBClusterInput) -> Swift.String? {
        return "/"
    }
}

public struct StartDBClusterInput: Swift.Equatable {
    /// The DB cluster identifier of the Amazon Aurora DB cluster to be started. This parameter is stored as a lowercase string.
    /// This member is required.
    public var dbClusterIdentifier: Swift.String?

    public init(
        dbClusterIdentifier: Swift.String? = nil
    )
    {
        self.dbClusterIdentifier = dbClusterIdentifier
    }
}

extension StartDBClusterOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<StartDBClusterOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["StartDBClusterResult"]
            var value = StartDBClusterOutput()
            value.dbCluster = try reader["DBCluster"].readIfPresent(readingClosure: RDSClientTypes.DBCluster.readingClosure)
            return value
        }
    }
}

public struct StartDBClusterOutput: Swift.Equatable {
    /// Contains the details of an Amazon Aurora DB cluster or Multi-AZ DB cluster. For an Amazon Aurora DB cluster, this data type is used as a response element in the operations CreateDBCluster, DeleteDBCluster, DescribeDBClusters, FailoverDBCluster, ModifyDBCluster, PromoteReadReplicaDBCluster, RestoreDBClusterFromS3, RestoreDBClusterFromSnapshot, RestoreDBClusterToPointInTime, StartDBCluster, and StopDBCluster. For a Multi-AZ DB cluster, this data type is used as a response element in the operations CreateDBCluster, DeleteDBCluster, DescribeDBClusters, FailoverDBCluster, ModifyDBCluster, RebootDBCluster, RestoreDBClusterFromSnapshot, and RestoreDBClusterToPointInTime. For more information on Amazon Aurora DB clusters, see [ What is Amazon Aurora?](https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html) in the Amazon Aurora User Guide. For more information on Multi-AZ DB clusters, see [ Multi-AZ deployments with two readable standby DB instances](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/multi-az-db-clusters-concepts.html) in the Amazon RDS User Guide.
    public var dbCluster: RDSClientTypes.DBCluster?

    public init(
        dbCluster: RDSClientTypes.DBCluster? = nil
    )
    {
        self.dbCluster = dbCluster
    }
}

enum StartDBClusterOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "DBClusterNotFoundFault": return try await DBClusterNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "InvalidDBClusterStateFault": return try await InvalidDBClusterStateFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "InvalidDBInstanceState": return try await InvalidDBInstanceStateFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension StartDBInstanceAutomatedBackupsReplicationInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case backupRetentionPeriod = "BackupRetentionPeriod"
        case kmsKeyId = "KmsKeyId"
        case preSignedUrl = "PreSignedUrl"
        case sourceDBInstanceArn = "SourceDBInstanceArn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let backupRetentionPeriod = backupRetentionPeriod {
            try container.encode(backupRetentionPeriod, forKey: ClientRuntime.Key("BackupRetentionPeriod"))
        }
        if let kmsKeyId = kmsKeyId {
            try container.encode(kmsKeyId, forKey: ClientRuntime.Key("KmsKeyId"))
        }
        if let preSignedUrl = preSignedUrl {
            try container.encode(preSignedUrl, forKey: ClientRuntime.Key("PreSignedUrl"))
        }
        if let sourceDBInstanceArn = sourceDBInstanceArn {
            try container.encode(sourceDBInstanceArn, forKey: ClientRuntime.Key("SourceDBInstanceArn"))
        }
        try container.encode("StartDBInstanceAutomatedBackupsReplication", forKey:ClientRuntime.Key("Action"))
        try container.encode("2014-10-31", forKey:ClientRuntime.Key("Version"))
    }
}

extension StartDBInstanceAutomatedBackupsReplicationInput {

    static func urlPathProvider(_ value: StartDBInstanceAutomatedBackupsReplicationInput) -> Swift.String? {
        return "/"
    }
}

public struct StartDBInstanceAutomatedBackupsReplicationInput: Swift.Equatable {
    /// The retention period for the replicated automated backups.
    public var backupRetentionPeriod: Swift.Int?
    /// The Amazon Web Services KMS key identifier for encryption of the replicated automated backups. The KMS key ID is the Amazon Resource Name (ARN) for the KMS encryption key in the destination Amazon Web Services Region, for example, arn:aws:kms:us-east-1:123456789012:key/AKIAIOSFODNN7EXAMPLE.
    public var kmsKeyId: Swift.String?
    /// In an Amazon Web Services GovCloud (US) Region, an URL that contains a Signature Version 4 signed request for the StartDBInstanceAutomatedBackupsReplication operation to call in the Amazon Web Services Region of the source DB instance. The presigned URL must be a valid request for the StartDBInstanceAutomatedBackupsReplication API operation that can run in the Amazon Web Services Region that contains the source DB instance. This setting applies only to Amazon Web Services GovCloud (US) Regions. It's ignored in other Amazon Web Services Regions. To learn how to generate a Signature Version 4 signed request, see [ Authenticating Requests: Using Query Parameters (Amazon Web Services Signature Version 4)](https://docs.aws.amazon.com/AmazonS3/latest/API/sigv4-query-string-auth.html) and [ Signature Version 4 Signing Process](https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html). If you are using an Amazon Web Services SDK tool or the CLI, you can specify SourceRegion (or --source-region for the CLI) instead of specifying PreSignedUrl manually. Specifying SourceRegion autogenerates a presigned URL that is a valid request for the operation that can run in the source Amazon Web Services Region.
    public var preSignedUrl: Swift.String?
    /// The Amazon Resource Name (ARN) of the source DB instance for the replicated automated backups, for example, arn:aws:rds:us-west-2:123456789012:db:mydatabase.
    /// This member is required.
    public var sourceDBInstanceArn: Swift.String?

    public init(
        backupRetentionPeriod: Swift.Int? = nil,
        kmsKeyId: Swift.String? = nil,
        preSignedUrl: Swift.String? = nil,
        sourceDBInstanceArn: Swift.String? = nil
    )
    {
        self.backupRetentionPeriod = backupRetentionPeriod
        self.kmsKeyId = kmsKeyId
        self.preSignedUrl = preSignedUrl
        self.sourceDBInstanceArn = sourceDBInstanceArn
    }
}

extension StartDBInstanceAutomatedBackupsReplicationOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<StartDBInstanceAutomatedBackupsReplicationOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["StartDBInstanceAutomatedBackupsReplicationResult"]
            var value = StartDBInstanceAutomatedBackupsReplicationOutput()
            value.dbInstanceAutomatedBackup = try reader["DBInstanceAutomatedBackup"].readIfPresent(readingClosure: RDSClientTypes.DBInstanceAutomatedBackup.readingClosure)
            return value
        }
    }
}

public struct StartDBInstanceAutomatedBackupsReplicationOutput: Swift.Equatable {
    /// An automated backup of a DB instance. It consists of system backups, transaction logs, and the database instance properties that existed at the time you deleted the source instance.
    public var dbInstanceAutomatedBackup: RDSClientTypes.DBInstanceAutomatedBackup?

    public init(
        dbInstanceAutomatedBackup: RDSClientTypes.DBInstanceAutomatedBackup? = nil
    )
    {
        self.dbInstanceAutomatedBackup = dbInstanceAutomatedBackup
    }
}

enum StartDBInstanceAutomatedBackupsReplicationOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "DBInstanceAutomatedBackupQuotaExceeded": return try await DBInstanceAutomatedBackupQuotaExceededFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "DBInstanceNotFound": return try await DBInstanceNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "InvalidDBInstanceState": return try await InvalidDBInstanceStateFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "KMSKeyNotAccessibleFault": return try await KMSKeyNotAccessibleFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "StorageTypeNotSupported": return try await StorageTypeNotSupportedFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension StartDBInstanceInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dbInstanceIdentifier = "DBInstanceIdentifier"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let dbInstanceIdentifier = dbInstanceIdentifier {
            try container.encode(dbInstanceIdentifier, forKey: ClientRuntime.Key("DBInstanceIdentifier"))
        }
        try container.encode("StartDBInstance", forKey:ClientRuntime.Key("Action"))
        try container.encode("2014-10-31", forKey:ClientRuntime.Key("Version"))
    }
}

extension StartDBInstanceInput {

    static func urlPathProvider(_ value: StartDBInstanceInput) -> Swift.String? {
        return "/"
    }
}

public struct StartDBInstanceInput: Swift.Equatable {
    /// The user-supplied instance identifier.
    /// This member is required.
    public var dbInstanceIdentifier: Swift.String?

    public init(
        dbInstanceIdentifier: Swift.String? = nil
    )
    {
        self.dbInstanceIdentifier = dbInstanceIdentifier
    }
}

extension StartDBInstanceOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<StartDBInstanceOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["StartDBInstanceResult"]
            var value = StartDBInstanceOutput()
            value.dbInstance = try reader["DBInstance"].readIfPresent(readingClosure: RDSClientTypes.DBInstance.readingClosure)
            return value
        }
    }
}

public struct StartDBInstanceOutput: Swift.Equatable {
    /// Contains the details of an Amazon RDS DB instance. This data type is used as a response element in the operations CreateDBInstance, CreateDBInstanceReadReplica, DeleteDBInstance, DescribeDBInstances, ModifyDBInstance, PromoteReadReplica, RebootDBInstance, RestoreDBInstanceFromDBSnapshot, RestoreDBInstanceFromS3, RestoreDBInstanceToPointInTime, StartDBInstance, and StopDBInstance.
    public var dbInstance: RDSClientTypes.DBInstance?

    public init(
        dbInstance: RDSClientTypes.DBInstance? = nil
    )
    {
        self.dbInstance = dbInstance
    }
}

enum StartDBInstanceOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "AuthorizationNotFound": return try await AuthorizationNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "DBClusterNotFoundFault": return try await DBClusterNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "DBInstanceNotFound": return try await DBInstanceNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "DBSubnetGroupDoesNotCoverEnoughAZs": return try await DBSubnetGroupDoesNotCoverEnoughAZs.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "DBSubnetGroupNotFoundFault": return try await DBSubnetGroupNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "InsufficientDBInstanceCapacity": return try await InsufficientDBInstanceCapacityFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "InvalidDBClusterStateFault": return try await InvalidDBClusterStateFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "InvalidDBInstanceState": return try await InvalidDBInstanceStateFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "InvalidSubnet": return try await InvalidSubnet.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "InvalidVPCNetworkStateFault": return try await InvalidVPCNetworkStateFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "KMSKeyNotAccessibleFault": return try await KMSKeyNotAccessibleFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension StartExportTaskInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case exportOnly = "ExportOnly"
        case exportTaskIdentifier = "ExportTaskIdentifier"
        case iamRoleArn = "IamRoleArn"
        case kmsKeyId = "KmsKeyId"
        case s3BucketName = "S3BucketName"
        case s3Prefix = "S3Prefix"
        case sourceArn = "SourceArn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let exportOnly = exportOnly {
            if !exportOnly.isEmpty {
                var exportOnlyContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("ExportOnly"))
                for (index0, string0) in exportOnly.enumerated() {
                    try exportOnlyContainer.encode(string0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var exportOnlyContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("ExportOnly"))
                try exportOnlyContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let exportTaskIdentifier = exportTaskIdentifier {
            try container.encode(exportTaskIdentifier, forKey: ClientRuntime.Key("ExportTaskIdentifier"))
        }
        if let iamRoleArn = iamRoleArn {
            try container.encode(iamRoleArn, forKey: ClientRuntime.Key("IamRoleArn"))
        }
        if let kmsKeyId = kmsKeyId {
            try container.encode(kmsKeyId, forKey: ClientRuntime.Key("KmsKeyId"))
        }
        if let s3BucketName = s3BucketName {
            try container.encode(s3BucketName, forKey: ClientRuntime.Key("S3BucketName"))
        }
        if let s3Prefix = s3Prefix {
            try container.encode(s3Prefix, forKey: ClientRuntime.Key("S3Prefix"))
        }
        if let sourceArn = sourceArn {
            try container.encode(sourceArn, forKey: ClientRuntime.Key("SourceArn"))
        }
        try container.encode("StartExportTask", forKey:ClientRuntime.Key("Action"))
        try container.encode("2014-10-31", forKey:ClientRuntime.Key("Version"))
    }
}

extension StartExportTaskInput {

    static func urlPathProvider(_ value: StartExportTaskInput) -> Swift.String? {
        return "/"
    }
}

public struct StartExportTaskInput: Swift.Equatable {
    /// The data to be exported from the snapshot or cluster. If this parameter isn't provided, all of the data is exported. Valid Values:
    ///
    /// * database - Export all the data from a specified database.
    ///
    /// * database.table table-name - Export a table of the snapshot or cluster. This format is valid only for RDS for MySQL, RDS for MariaDB, and Aurora MySQL.
    ///
    /// * database.schema schema-name - Export a database schema of the snapshot or cluster. This format is valid only for RDS for PostgreSQL and Aurora PostgreSQL.
    ///
    /// * database.schema.table table-name - Export a table of the database schema. This format is valid only for RDS for PostgreSQL and Aurora PostgreSQL.
    public var exportOnly: [Swift.String]?
    /// A unique identifier for the export task. This ID isn't an identifier for the Amazon S3 bucket where the data is to be exported.
    /// This member is required.
    public var exportTaskIdentifier: Swift.String?
    /// The name of the IAM role to use for writing to the Amazon S3 bucket when exporting a snapshot or cluster. In the IAM policy attached to your IAM role, include the following required actions to allow the transfer of files from Amazon RDS or Amazon Aurora to an S3 bucket:
    ///
    /// * s3:PutObject*
    ///
    /// * s3:GetObject*
    ///
    /// * s3:ListBucket
    ///
    /// * s3:DeleteObject*
    ///
    /// * s3:GetBucketLocation
    ///
    ///
    /// In the policy, include the resources to identify the S3 bucket and objects in the bucket. The following list of resources shows the Amazon Resource Name (ARN) format for accessing S3:
    ///
    /// * arn:aws:s3:::your-s3-bucket
    ///
    /// * arn:aws:s3:::your-s3-bucket/*
    /// This member is required.
    public var iamRoleArn: Swift.String?
    /// The ID of the Amazon Web Services KMS key to use to encrypt the data exported to Amazon S3. The Amazon Web Services KMS key identifier is the key ARN, key ID, alias ARN, or alias name for the KMS key. The caller of this operation must be authorized to run the following operations. These can be set in the Amazon Web Services KMS key policy:
    ///
    /// * kms:Encrypt
    ///
    /// * kms:Decrypt
    ///
    /// * kms:GenerateDataKey
    ///
    /// * kms:GenerateDataKeyWithoutPlaintext
    ///
    /// * kms:ReEncryptFrom
    ///
    /// * kms:ReEncryptTo
    ///
    /// * kms:CreateGrant
    ///
    /// * kms:DescribeKey
    ///
    /// * kms:RetireGrant
    /// This member is required.
    public var kmsKeyId: Swift.String?
    /// The name of the Amazon S3 bucket to export the snapshot or cluster data to.
    /// This member is required.
    public var s3BucketName: Swift.String?
    /// The Amazon S3 bucket prefix to use as the file name and path of the exported data.
    public var s3Prefix: Swift.String?
    /// The Amazon Resource Name (ARN) of the snapshot or cluster to export to Amazon S3.
    /// This member is required.
    public var sourceArn: Swift.String?

    public init(
        exportOnly: [Swift.String]? = nil,
        exportTaskIdentifier: Swift.String? = nil,
        iamRoleArn: Swift.String? = nil,
        kmsKeyId: Swift.String? = nil,
        s3BucketName: Swift.String? = nil,
        s3Prefix: Swift.String? = nil,
        sourceArn: Swift.String? = nil
    )
    {
        self.exportOnly = exportOnly
        self.exportTaskIdentifier = exportTaskIdentifier
        self.iamRoleArn = iamRoleArn
        self.kmsKeyId = kmsKeyId
        self.s3BucketName = s3BucketName
        self.s3Prefix = s3Prefix
        self.sourceArn = sourceArn
    }
}

extension StartExportTaskOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<StartExportTaskOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["StartExportTaskResult"]
            var value = StartExportTaskOutput()
            value.exportOnly = try reader["ExportOnly"].readListIfPresent(memberReadingClosure: Swift.String.readingClosure, memberNodeInfo: "member", isFlattened: false)
            value.exportTaskIdentifier = try reader["ExportTaskIdentifier"].readIfPresent()
            value.failureCause = try reader["FailureCause"].readIfPresent()
            value.iamRoleArn = try reader["IamRoleArn"].readIfPresent()
            value.kmsKeyId = try reader["KmsKeyId"].readIfPresent()
            value.percentProgress = try reader["PercentProgress"].readIfPresent()
            value.s3Bucket = try reader["S3Bucket"].readIfPresent()
            value.s3Prefix = try reader["S3Prefix"].readIfPresent()
            value.snapshotTime = try reader["SnapshotTime"].readTimestampIfPresent(format: .dateTime)
            value.sourceArn = try reader["SourceArn"].readIfPresent()
            value.sourceType = try reader["SourceType"].readIfPresent()
            value.status = try reader["Status"].readIfPresent()
            value.taskEndTime = try reader["TaskEndTime"].readTimestampIfPresent(format: .dateTime)
            value.taskStartTime = try reader["TaskStartTime"].readTimestampIfPresent(format: .dateTime)
            value.totalExtractedDataInGB = try reader["TotalExtractedDataInGB"].readIfPresent()
            value.warningMessage = try reader["WarningMessage"].readIfPresent()
            return value
        }
    }
}

/// Contains the details of a snapshot or cluster export to Amazon S3. This data type is used as a response element in the DescribeExportTasks operation.
public struct StartExportTaskOutput: Swift.Equatable {
    /// The data exported from the snapshot or cluster. Valid Values:
    ///
    /// * database - Export all the data from a specified database.
    ///
    /// * database.table table-name - Export a table of the snapshot or cluster. This format is valid only for RDS for MySQL, RDS for MariaDB, and Aurora MySQL.
    ///
    /// * database.schema schema-name - Export a database schema of the snapshot or cluster. This format is valid only for RDS for PostgreSQL and Aurora PostgreSQL.
    ///
    /// * database.schema.table table-name - Export a table of the database schema. This format is valid only for RDS for PostgreSQL and Aurora PostgreSQL.
    public var exportOnly: [Swift.String]?
    /// A unique identifier for the snapshot or cluster export task. This ID isn't an identifier for the Amazon S3 bucket where the data is exported.
    public var exportTaskIdentifier: Swift.String?
    /// The reason the export failed, if it failed.
    public var failureCause: Swift.String?
    /// The name of the IAM role that is used to write to Amazon S3 when exporting a snapshot or cluster.
    public var iamRoleArn: Swift.String?
    /// The key identifier of the Amazon Web Services KMS key that is used to encrypt the data when it's exported to Amazon S3. The KMS key identifier is its key ARN, key ID, alias ARN, or alias name. The IAM role used for the export must have encryption and decryption permissions to use this KMS key.
    public var kmsKeyId: Swift.String?
    /// The progress of the snapshot or cluster export task as a percentage.
    public var percentProgress: Swift.Int?
    /// The Amazon S3 bucket where the snapshot or cluster is exported to.
    public var s3Bucket: Swift.String?
    /// The Amazon S3 bucket prefix that is the file name and path of the exported data.
    public var s3Prefix: Swift.String?
    /// The time when the snapshot was created.
    public var snapshotTime: ClientRuntime.Date?
    /// The Amazon Resource Name (ARN) of the snapshot or cluster exported to Amazon S3.
    public var sourceArn: Swift.String?
    /// The type of source for the export.
    public var sourceType: RDSClientTypes.ExportSourceType?
    /// The progress status of the export task. The status can be one of the following:
    ///
    /// * CANCELED
    ///
    /// * CANCELING
    ///
    /// * COMPLETE
    ///
    /// * FAILED
    ///
    /// * IN_PROGRESS
    ///
    /// * STARTING
    public var status: Swift.String?
    /// The time when the snapshot or cluster export task ended.
    public var taskEndTime: ClientRuntime.Date?
    /// The time when the snapshot or cluster export task started.
    public var taskStartTime: ClientRuntime.Date?
    /// The total amount of data exported, in gigabytes.
    public var totalExtractedDataInGB: Swift.Int?
    /// A warning about the snapshot or cluster export task.
    public var warningMessage: Swift.String?

    public init(
        exportOnly: [Swift.String]? = nil,
        exportTaskIdentifier: Swift.String? = nil,
        failureCause: Swift.String? = nil,
        iamRoleArn: Swift.String? = nil,
        kmsKeyId: Swift.String? = nil,
        percentProgress: Swift.Int? = nil,
        s3Bucket: Swift.String? = nil,
        s3Prefix: Swift.String? = nil,
        snapshotTime: ClientRuntime.Date? = nil,
        sourceArn: Swift.String? = nil,
        sourceType: RDSClientTypes.ExportSourceType? = nil,
        status: Swift.String? = nil,
        taskEndTime: ClientRuntime.Date? = nil,
        taskStartTime: ClientRuntime.Date? = nil,
        totalExtractedDataInGB: Swift.Int? = nil,
        warningMessage: Swift.String? = nil
    )
    {
        self.exportOnly = exportOnly
        self.exportTaskIdentifier = exportTaskIdentifier
        self.failureCause = failureCause
        self.iamRoleArn = iamRoleArn
        self.kmsKeyId = kmsKeyId
        self.percentProgress = percentProgress
        self.s3Bucket = s3Bucket
        self.s3Prefix = s3Prefix
        self.snapshotTime = snapshotTime
        self.sourceArn = sourceArn
        self.sourceType = sourceType
        self.status = status
        self.taskEndTime = taskEndTime
        self.taskStartTime = taskStartTime
        self.totalExtractedDataInGB = totalExtractedDataInGB
        self.warningMessage = warningMessage
    }
}

enum StartExportTaskOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "DBClusterNotFoundFault": return try await DBClusterNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "DBClusterSnapshotNotFoundFault": return try await DBClusterSnapshotNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "DBSnapshotNotFound": return try await DBSnapshotNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "ExportTaskAlreadyExists": return try await ExportTaskAlreadyExistsFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "IamRoleMissingPermissions": return try await IamRoleMissingPermissionsFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "IamRoleNotFound": return try await IamRoleNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "InvalidExportOnly": return try await InvalidExportOnlyFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "InvalidExportSourceState": return try await InvalidExportSourceStateFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "InvalidS3BucketFault": return try await InvalidS3BucketFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "KMSKeyNotAccessibleFault": return try await KMSKeyNotAccessibleFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension StopActivityStreamInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case applyImmediately = "ApplyImmediately"
        case resourceArn = "ResourceArn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let applyImmediately = applyImmediately {
            try container.encode(applyImmediately, forKey: ClientRuntime.Key("ApplyImmediately"))
        }
        if let resourceArn = resourceArn {
            try container.encode(resourceArn, forKey: ClientRuntime.Key("ResourceArn"))
        }
        try container.encode("StopActivityStream", forKey:ClientRuntime.Key("Action"))
        try container.encode("2014-10-31", forKey:ClientRuntime.Key("Version"))
    }
}

extension StopActivityStreamInput {

    static func urlPathProvider(_ value: StopActivityStreamInput) -> Swift.String? {
        return "/"
    }
}

public struct StopActivityStreamInput: Swift.Equatable {
    /// Specifies whether or not the database activity stream is to stop as soon as possible, regardless of the maintenance window for the database.
    public var applyImmediately: Swift.Bool?
    /// The Amazon Resource Name (ARN) of the DB cluster for the database activity stream. For example, arn:aws:rds:us-east-1:12345667890:cluster:das-cluster.
    /// This member is required.
    public var resourceArn: Swift.String?

    public init(
        applyImmediately: Swift.Bool? = nil,
        resourceArn: Swift.String? = nil
    )
    {
        self.applyImmediately = applyImmediately
        self.resourceArn = resourceArn
    }
}

extension StopActivityStreamOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<StopActivityStreamOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["StopActivityStreamResult"]
            var value = StopActivityStreamOutput()
            value.kinesisStreamName = try reader["KinesisStreamName"].readIfPresent()
            value.kmsKeyId = try reader["KmsKeyId"].readIfPresent()
            value.status = try reader["Status"].readIfPresent()
            return value
        }
    }
}

public struct StopActivityStreamOutput: Swift.Equatable {
    /// The name of the Amazon Kinesis data stream used for the database activity stream.
    public var kinesisStreamName: Swift.String?
    /// The Amazon Web Services KMS key identifier used for encrypting messages in the database activity stream. The Amazon Web Services KMS key identifier is the key ARN, key ID, alias ARN, or alias name for the KMS key.
    public var kmsKeyId: Swift.String?
    /// The status of the database activity stream.
    public var status: RDSClientTypes.ActivityStreamStatus?

    public init(
        kinesisStreamName: Swift.String? = nil,
        kmsKeyId: Swift.String? = nil,
        status: RDSClientTypes.ActivityStreamStatus? = nil
    )
    {
        self.kinesisStreamName = kinesisStreamName
        self.kmsKeyId = kmsKeyId
        self.status = status
    }
}

enum StopActivityStreamOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "DBClusterNotFoundFault": return try await DBClusterNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "DBInstanceNotFound": return try await DBInstanceNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "InvalidDBClusterStateFault": return try await InvalidDBClusterStateFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "InvalidDBInstanceState": return try await InvalidDBInstanceStateFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "ResourceNotFoundFault": return try await ResourceNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension StopDBClusterInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dbClusterIdentifier = "DBClusterIdentifier"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let dbClusterIdentifier = dbClusterIdentifier {
            try container.encode(dbClusterIdentifier, forKey: ClientRuntime.Key("DBClusterIdentifier"))
        }
        try container.encode("StopDBCluster", forKey:ClientRuntime.Key("Action"))
        try container.encode("2014-10-31", forKey:ClientRuntime.Key("Version"))
    }
}

extension StopDBClusterInput {

    static func urlPathProvider(_ value: StopDBClusterInput) -> Swift.String? {
        return "/"
    }
}

public struct StopDBClusterInput: Swift.Equatable {
    /// The DB cluster identifier of the Amazon Aurora DB cluster to be stopped. This parameter is stored as a lowercase string.
    /// This member is required.
    public var dbClusterIdentifier: Swift.String?

    public init(
        dbClusterIdentifier: Swift.String? = nil
    )
    {
        self.dbClusterIdentifier = dbClusterIdentifier
    }
}

extension StopDBClusterOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<StopDBClusterOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["StopDBClusterResult"]
            var value = StopDBClusterOutput()
            value.dbCluster = try reader["DBCluster"].readIfPresent(readingClosure: RDSClientTypes.DBCluster.readingClosure)
            return value
        }
    }
}

public struct StopDBClusterOutput: Swift.Equatable {
    /// Contains the details of an Amazon Aurora DB cluster or Multi-AZ DB cluster. For an Amazon Aurora DB cluster, this data type is used as a response element in the operations CreateDBCluster, DeleteDBCluster, DescribeDBClusters, FailoverDBCluster, ModifyDBCluster, PromoteReadReplicaDBCluster, RestoreDBClusterFromS3, RestoreDBClusterFromSnapshot, RestoreDBClusterToPointInTime, StartDBCluster, and StopDBCluster. For a Multi-AZ DB cluster, this data type is used as a response element in the operations CreateDBCluster, DeleteDBCluster, DescribeDBClusters, FailoverDBCluster, ModifyDBCluster, RebootDBCluster, RestoreDBClusterFromSnapshot, and RestoreDBClusterToPointInTime. For more information on Amazon Aurora DB clusters, see [ What is Amazon Aurora?](https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html) in the Amazon Aurora User Guide. For more information on Multi-AZ DB clusters, see [ Multi-AZ deployments with two readable standby DB instances](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/multi-az-db-clusters-concepts.html) in the Amazon RDS User Guide.
    public var dbCluster: RDSClientTypes.DBCluster?

    public init(
        dbCluster: RDSClientTypes.DBCluster? = nil
    )
    {
        self.dbCluster = dbCluster
    }
}

enum StopDBClusterOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "DBClusterNotFoundFault": return try await DBClusterNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "InvalidDBClusterStateFault": return try await InvalidDBClusterStateFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "InvalidDBInstanceState": return try await InvalidDBInstanceStateFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension StopDBInstanceAutomatedBackupsReplicationInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case sourceDBInstanceArn = "SourceDBInstanceArn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let sourceDBInstanceArn = sourceDBInstanceArn {
            try container.encode(sourceDBInstanceArn, forKey: ClientRuntime.Key("SourceDBInstanceArn"))
        }
        try container.encode("StopDBInstanceAutomatedBackupsReplication", forKey:ClientRuntime.Key("Action"))
        try container.encode("2014-10-31", forKey:ClientRuntime.Key("Version"))
    }
}

extension StopDBInstanceAutomatedBackupsReplicationInput {

    static func urlPathProvider(_ value: StopDBInstanceAutomatedBackupsReplicationInput) -> Swift.String? {
        return "/"
    }
}

public struct StopDBInstanceAutomatedBackupsReplicationInput: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the source DB instance for which to stop replicating automate backups, for example, arn:aws:rds:us-west-2:123456789012:db:mydatabase.
    /// This member is required.
    public var sourceDBInstanceArn: Swift.String?

    public init(
        sourceDBInstanceArn: Swift.String? = nil
    )
    {
        self.sourceDBInstanceArn = sourceDBInstanceArn
    }
}

extension StopDBInstanceAutomatedBackupsReplicationOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<StopDBInstanceAutomatedBackupsReplicationOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["StopDBInstanceAutomatedBackupsReplicationResult"]
            var value = StopDBInstanceAutomatedBackupsReplicationOutput()
            value.dbInstanceAutomatedBackup = try reader["DBInstanceAutomatedBackup"].readIfPresent(readingClosure: RDSClientTypes.DBInstanceAutomatedBackup.readingClosure)
            return value
        }
    }
}

public struct StopDBInstanceAutomatedBackupsReplicationOutput: Swift.Equatable {
    /// An automated backup of a DB instance. It consists of system backups, transaction logs, and the database instance properties that existed at the time you deleted the source instance.
    public var dbInstanceAutomatedBackup: RDSClientTypes.DBInstanceAutomatedBackup?

    public init(
        dbInstanceAutomatedBackup: RDSClientTypes.DBInstanceAutomatedBackup? = nil
    )
    {
        self.dbInstanceAutomatedBackup = dbInstanceAutomatedBackup
    }
}

enum StopDBInstanceAutomatedBackupsReplicationOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "DBInstanceNotFound": return try await DBInstanceNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "InvalidDBInstanceState": return try await InvalidDBInstanceStateFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension StopDBInstanceInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dbInstanceIdentifier = "DBInstanceIdentifier"
        case dbSnapshotIdentifier = "DBSnapshotIdentifier"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let dbInstanceIdentifier = dbInstanceIdentifier {
            try container.encode(dbInstanceIdentifier, forKey: ClientRuntime.Key("DBInstanceIdentifier"))
        }
        if let dbSnapshotIdentifier = dbSnapshotIdentifier {
            try container.encode(dbSnapshotIdentifier, forKey: ClientRuntime.Key("DBSnapshotIdentifier"))
        }
        try container.encode("StopDBInstance", forKey:ClientRuntime.Key("Action"))
        try container.encode("2014-10-31", forKey:ClientRuntime.Key("Version"))
    }
}

extension StopDBInstanceInput {

    static func urlPathProvider(_ value: StopDBInstanceInput) -> Swift.String? {
        return "/"
    }
}

public struct StopDBInstanceInput: Swift.Equatable {
    /// The user-supplied instance identifier.
    /// This member is required.
    public var dbInstanceIdentifier: Swift.String?
    /// The user-supplied instance identifier of the DB Snapshot created immediately before the DB instance is stopped.
    public var dbSnapshotIdentifier: Swift.String?

    public init(
        dbInstanceIdentifier: Swift.String? = nil,
        dbSnapshotIdentifier: Swift.String? = nil
    )
    {
        self.dbInstanceIdentifier = dbInstanceIdentifier
        self.dbSnapshotIdentifier = dbSnapshotIdentifier
    }
}

extension StopDBInstanceOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<StopDBInstanceOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["StopDBInstanceResult"]
            var value = StopDBInstanceOutput()
            value.dbInstance = try reader["DBInstance"].readIfPresent(readingClosure: RDSClientTypes.DBInstance.readingClosure)
            return value
        }
    }
}

public struct StopDBInstanceOutput: Swift.Equatable {
    /// Contains the details of an Amazon RDS DB instance. This data type is used as a response element in the operations CreateDBInstance, CreateDBInstanceReadReplica, DeleteDBInstance, DescribeDBInstances, ModifyDBInstance, PromoteReadReplica, RebootDBInstance, RestoreDBInstanceFromDBSnapshot, RestoreDBInstanceFromS3, RestoreDBInstanceToPointInTime, StartDBInstance, and StopDBInstance.
    public var dbInstance: RDSClientTypes.DBInstance?

    public init(
        dbInstance: RDSClientTypes.DBInstance? = nil
    )
    {
        self.dbInstance = dbInstance
    }
}

enum StopDBInstanceOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "DBInstanceNotFound": return try await DBInstanceNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "DBSnapshotAlreadyExists": return try await DBSnapshotAlreadyExistsFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "InvalidDBClusterStateFault": return try await InvalidDBClusterStateFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "InvalidDBInstanceState": return try await InvalidDBInstanceStateFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "SnapshotQuotaExceeded": return try await SnapshotQuotaExceededFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension StorageQuotaExceededFault {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = StorageQuotaExceededFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// The request would result in the user exceeding the allowed amount of storage available across all DB instances.
public struct StorageQuotaExceededFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "StorageQuotaExceeded" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension StorageTypeNotAvailableFault {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = StorageTypeNotAvailableFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// The aurora-iopt1 storage type isn't available, because you modified the DB cluster to use this storage type less than one month ago.
public struct StorageTypeNotAvailableFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "StorageTypeNotAvailableFault" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension StorageTypeNotSupportedFault {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = StorageTypeNotSupportedFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// The specified StorageType can't be associated with the DB instance.
public struct StorageTypeNotSupportedFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "StorageTypeNotSupported" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension RDSClientTypes.Subnet: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case subnetAvailabilityZone = "SubnetAvailabilityZone"
        case subnetIdentifier = "SubnetIdentifier"
        case subnetOutpost = "SubnetOutpost"
        case subnetStatus = "SubnetStatus"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let subnetAvailabilityZone = subnetAvailabilityZone {
            try container.encode(subnetAvailabilityZone, forKey: ClientRuntime.Key("SubnetAvailabilityZone"))
        }
        if let subnetIdentifier = subnetIdentifier {
            try container.encode(subnetIdentifier, forKey: ClientRuntime.Key("SubnetIdentifier"))
        }
        if let subnetOutpost = subnetOutpost {
            try container.encode(subnetOutpost, forKey: ClientRuntime.Key("SubnetOutpost"))
        }
        if let subnetStatus = subnetStatus {
            try container.encode(subnetStatus, forKey: ClientRuntime.Key("SubnetStatus"))
        }
    }

    static var readingClosure: SmithyReadWrite.ReadingClosure<RDSClientTypes.Subnet, SmithyXML.Reader> {
        return { reader in
            guard reader.content != nil else { return nil }
            var value = RDSClientTypes.Subnet()
            value.subnetIdentifier = try reader["SubnetIdentifier"].readIfPresent()
            value.subnetAvailabilityZone = try reader["SubnetAvailabilityZone"].readIfPresent(readingClosure: RDSClientTypes.AvailabilityZone.readingClosure)
            value.subnetOutpost = try reader["SubnetOutpost"].readIfPresent(readingClosure: RDSClientTypes.Outpost.readingClosure)
            value.subnetStatus = try reader["SubnetStatus"].readIfPresent()
            return value
        }
    }
}

extension RDSClientTypes {
    /// This data type is used as a response element for the DescribeDBSubnetGroups operation.
    public struct Subnet: Swift.Equatable {
        /// Contains Availability Zone information. This data type is used as an element in the OrderableDBInstanceOption data type.
        public var subnetAvailabilityZone: RDSClientTypes.AvailabilityZone?
        /// The identifier of the subnet.
        public var subnetIdentifier: Swift.String?
        /// If the subnet is associated with an Outpost, this value specifies the Outpost. For more information about RDS on Outposts, see [Amazon RDS on Amazon Web Services Outposts](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/rds-on-outposts.html) in the Amazon RDS User Guide.
        public var subnetOutpost: RDSClientTypes.Outpost?
        /// The status of the subnet.
        public var subnetStatus: Swift.String?

        public init(
            subnetAvailabilityZone: RDSClientTypes.AvailabilityZone? = nil,
            subnetIdentifier: Swift.String? = nil,
            subnetOutpost: RDSClientTypes.Outpost? = nil,
            subnetStatus: Swift.String? = nil
        )
        {
            self.subnetAvailabilityZone = subnetAvailabilityZone
            self.subnetIdentifier = subnetIdentifier
            self.subnetOutpost = subnetOutpost
            self.subnetStatus = subnetStatus
        }
    }

}

extension SubnetAlreadyInUse {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = SubnetAlreadyInUse()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// The DB subnet is already in use in the Availability Zone.
public struct SubnetAlreadyInUse: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "SubnetAlreadyInUse" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension SubscriptionAlreadyExistFault {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = SubscriptionAlreadyExistFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// The supplied subscription name already exists.
public struct SubscriptionAlreadyExistFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "SubscriptionAlreadyExist" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension SubscriptionCategoryNotFoundFault {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = SubscriptionCategoryNotFoundFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// The supplied category does not exist.
public struct SubscriptionCategoryNotFoundFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "SubscriptionCategoryNotFound" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension SubscriptionNotFoundFault {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = SubscriptionNotFoundFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// The subscription name does not exist.
public struct SubscriptionNotFoundFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "SubscriptionNotFound" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension SwitchoverBlueGreenDeploymentInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case blueGreenDeploymentIdentifier = "BlueGreenDeploymentIdentifier"
        case switchoverTimeout = "SwitchoverTimeout"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let blueGreenDeploymentIdentifier = blueGreenDeploymentIdentifier {
            try container.encode(blueGreenDeploymentIdentifier, forKey: ClientRuntime.Key("BlueGreenDeploymentIdentifier"))
        }
        if let switchoverTimeout = switchoverTimeout {
            try container.encode(switchoverTimeout, forKey: ClientRuntime.Key("SwitchoverTimeout"))
        }
        try container.encode("SwitchoverBlueGreenDeployment", forKey:ClientRuntime.Key("Action"))
        try container.encode("2014-10-31", forKey:ClientRuntime.Key("Version"))
    }
}

extension SwitchoverBlueGreenDeploymentInput {

    static func urlPathProvider(_ value: SwitchoverBlueGreenDeploymentInput) -> Swift.String? {
        return "/"
    }
}

public struct SwitchoverBlueGreenDeploymentInput: Swift.Equatable {
    /// The unique identifier of the blue/green deployment. Constraints:
    ///
    /// * Must match an existing blue/green deployment identifier.
    /// This member is required.
    public var blueGreenDeploymentIdentifier: Swift.String?
    /// The amount of time, in seconds, for the switchover to complete. Default: 300 If the switchover takes longer than the specified duration, then any changes are rolled back, and no changes are made to the environments.
    public var switchoverTimeout: Swift.Int?

    public init(
        blueGreenDeploymentIdentifier: Swift.String? = nil,
        switchoverTimeout: Swift.Int? = nil
    )
    {
        self.blueGreenDeploymentIdentifier = blueGreenDeploymentIdentifier
        self.switchoverTimeout = switchoverTimeout
    }
}

extension SwitchoverBlueGreenDeploymentOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<SwitchoverBlueGreenDeploymentOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["SwitchoverBlueGreenDeploymentResult"]
            var value = SwitchoverBlueGreenDeploymentOutput()
            value.blueGreenDeployment = try reader["BlueGreenDeployment"].readIfPresent(readingClosure: RDSClientTypes.BlueGreenDeployment.readingClosure)
            return value
        }
    }
}

public struct SwitchoverBlueGreenDeploymentOutput: Swift.Equatable {
    /// Details about a blue/green deployment. For more information, see [Using Amazon RDS Blue/Green Deployments for database updates](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/blue-green-deployments.html) in the Amazon RDS User Guide and [Using Amazon RDS Blue/Green Deployments for database updates](https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/blue-green-deployments.html) in the Amazon Aurora User Guide.
    public var blueGreenDeployment: RDSClientTypes.BlueGreenDeployment?

    public init(
        blueGreenDeployment: RDSClientTypes.BlueGreenDeployment? = nil
    )
    {
        self.blueGreenDeployment = blueGreenDeployment
    }
}

enum SwitchoverBlueGreenDeploymentOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "BlueGreenDeploymentNotFoundFault": return try await BlueGreenDeploymentNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "InvalidBlueGreenDeploymentStateFault": return try await InvalidBlueGreenDeploymentStateFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension RDSClientTypes.SwitchoverDetail: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case sourceMember = "SourceMember"
        case status = "Status"
        case targetMember = "TargetMember"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let sourceMember = sourceMember {
            try container.encode(sourceMember, forKey: ClientRuntime.Key("SourceMember"))
        }
        if let status = status {
            try container.encode(status, forKey: ClientRuntime.Key("Status"))
        }
        if let targetMember = targetMember {
            try container.encode(targetMember, forKey: ClientRuntime.Key("TargetMember"))
        }
    }

    static var readingClosure: SmithyReadWrite.ReadingClosure<RDSClientTypes.SwitchoverDetail, SmithyXML.Reader> {
        return { reader in
            guard reader.content != nil else { return nil }
            var value = RDSClientTypes.SwitchoverDetail()
            value.sourceMember = try reader["SourceMember"].readIfPresent()
            value.targetMember = try reader["TargetMember"].readIfPresent()
            value.status = try reader["Status"].readIfPresent()
            return value
        }
    }
}

extension RDSClientTypes {
    /// Contains the details about a blue/green deployment. For more information, see [Using Amazon RDS Blue/Green Deployments for database updates](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/blue-green-deployments.html) in the Amazon RDS User Guide and [Using Amazon RDS Blue/Green Deployments for database updates](https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/blue-green-deployments.html) in the Amazon Aurora User Guide.
    public struct SwitchoverDetail: Swift.Equatable {
        /// The Amazon Resource Name (ARN) of a resource in the blue environment.
        public var sourceMember: Swift.String?
        /// The switchover status of a resource in a blue/green deployment. Values:
        ///
        /// * PROVISIONING - The resource is being prepared to switch over.
        ///
        /// * AVAILABLE - The resource is ready to switch over.
        ///
        /// * SWITCHOVER_IN_PROGRESS - The resource is being switched over.
        ///
        /// * SWITCHOVER_COMPLETED - The resource has been switched over.
        ///
        /// * SWITCHOVER_FAILED - The resource attempted to switch over but failed.
        ///
        /// * MISSING_SOURCE - The source resource has been deleted.
        ///
        /// * MISSING_TARGET - The target resource has been deleted.
        public var status: Swift.String?
        /// The Amazon Resource Name (ARN) of a resource in the green environment.
        public var targetMember: Swift.String?

        public init(
            sourceMember: Swift.String? = nil,
            status: Swift.String? = nil,
            targetMember: Swift.String? = nil
        )
        {
            self.sourceMember = sourceMember
            self.status = status
            self.targetMember = targetMember
        }
    }

}

extension SwitchoverGlobalClusterInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case globalClusterIdentifier = "GlobalClusterIdentifier"
        case targetDbClusterIdentifier = "TargetDbClusterIdentifier"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let globalClusterIdentifier = globalClusterIdentifier {
            try container.encode(globalClusterIdentifier, forKey: ClientRuntime.Key("GlobalClusterIdentifier"))
        }
        if let targetDbClusterIdentifier = targetDbClusterIdentifier {
            try container.encode(targetDbClusterIdentifier, forKey: ClientRuntime.Key("TargetDbClusterIdentifier"))
        }
        try container.encode("SwitchoverGlobalCluster", forKey:ClientRuntime.Key("Action"))
        try container.encode("2014-10-31", forKey:ClientRuntime.Key("Version"))
    }
}

extension SwitchoverGlobalClusterInput {

    static func urlPathProvider(_ value: SwitchoverGlobalClusterInput) -> Swift.String? {
        return "/"
    }
}

public struct SwitchoverGlobalClusterInput: Swift.Equatable {
    /// The identifier of the global database cluster to switch over. This parameter isn't case-sensitive. Constraints:
    ///
    /// * Must match the identifier of an existing global database cluster (Aurora global database).
    /// This member is required.
    public var globalClusterIdentifier: Swift.String?
    /// The identifier of the secondary Aurora DB cluster to promote to the new primary for the global database cluster. Use the Amazon Resource Name (ARN) for the identifier so that Aurora can locate the cluster in its Amazon Web Services Region.
    /// This member is required.
    public var targetDbClusterIdentifier: Swift.String?

    public init(
        globalClusterIdentifier: Swift.String? = nil,
        targetDbClusterIdentifier: Swift.String? = nil
    )
    {
        self.globalClusterIdentifier = globalClusterIdentifier
        self.targetDbClusterIdentifier = targetDbClusterIdentifier
    }
}

extension SwitchoverGlobalClusterOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<SwitchoverGlobalClusterOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["SwitchoverGlobalClusterResult"]
            var value = SwitchoverGlobalClusterOutput()
            value.globalCluster = try reader["GlobalCluster"].readIfPresent(readingClosure: RDSClientTypes.GlobalCluster.readingClosure)
            return value
        }
    }
}

public struct SwitchoverGlobalClusterOutput: Swift.Equatable {
    /// A data type representing an Aurora global database.
    public var globalCluster: RDSClientTypes.GlobalCluster?

    public init(
        globalCluster: RDSClientTypes.GlobalCluster? = nil
    )
    {
        self.globalCluster = globalCluster
    }
}

enum SwitchoverGlobalClusterOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "DBClusterNotFoundFault": return try await DBClusterNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "GlobalClusterNotFoundFault": return try await GlobalClusterNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "InvalidDBClusterStateFault": return try await InvalidDBClusterStateFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "InvalidGlobalClusterStateFault": return try await InvalidGlobalClusterStateFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension SwitchoverReadReplicaInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dbInstanceIdentifier = "DBInstanceIdentifier"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let dbInstanceIdentifier = dbInstanceIdentifier {
            try container.encode(dbInstanceIdentifier, forKey: ClientRuntime.Key("DBInstanceIdentifier"))
        }
        try container.encode("SwitchoverReadReplica", forKey:ClientRuntime.Key("Action"))
        try container.encode("2014-10-31", forKey:ClientRuntime.Key("Version"))
    }
}

extension SwitchoverReadReplicaInput {

    static func urlPathProvider(_ value: SwitchoverReadReplicaInput) -> Swift.String? {
        return "/"
    }
}

public struct SwitchoverReadReplicaInput: Swift.Equatable {
    /// The DB instance identifier of the current standby database. This value is stored as a lowercase string. Constraints:
    ///
    /// * Must match the identiﬁer of an existing Oracle read replica DB instance.
    /// This member is required.
    public var dbInstanceIdentifier: Swift.String?

    public init(
        dbInstanceIdentifier: Swift.String? = nil
    )
    {
        self.dbInstanceIdentifier = dbInstanceIdentifier
    }
}

extension SwitchoverReadReplicaOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<SwitchoverReadReplicaOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["SwitchoverReadReplicaResult"]
            var value = SwitchoverReadReplicaOutput()
            value.dbInstance = try reader["DBInstance"].readIfPresent(readingClosure: RDSClientTypes.DBInstance.readingClosure)
            return value
        }
    }
}

public struct SwitchoverReadReplicaOutput: Swift.Equatable {
    /// Contains the details of an Amazon RDS DB instance. This data type is used as a response element in the operations CreateDBInstance, CreateDBInstanceReadReplica, DeleteDBInstance, DescribeDBInstances, ModifyDBInstance, PromoteReadReplica, RebootDBInstance, RestoreDBInstanceFromDBSnapshot, RestoreDBInstanceFromS3, RestoreDBInstanceToPointInTime, StartDBInstance, and StopDBInstance.
    public var dbInstance: RDSClientTypes.DBInstance?

    public init(
        dbInstance: RDSClientTypes.DBInstance? = nil
    )
    {
        self.dbInstance = dbInstance
    }
}

enum SwitchoverReadReplicaOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "DBInstanceNotFound": return try await DBInstanceNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "InvalidDBInstanceState": return try await InvalidDBInstanceStateFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension RDSClientTypes.Tag: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case key = "Key"
        case value = "Value"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let key = key {
            try container.encode(key, forKey: ClientRuntime.Key("Key"))
        }
        if let value = value {
            try container.encode(value, forKey: ClientRuntime.Key("Value"))
        }
    }

    static var readingClosure: SmithyReadWrite.ReadingClosure<RDSClientTypes.Tag, SmithyXML.Reader> {
        return { reader in
            guard reader.content != nil else { return nil }
            var value = RDSClientTypes.Tag()
            value.key = try reader["Key"].readIfPresent()
            value.value = try reader["Value"].readIfPresent()
            return value
        }
    }
}

extension RDSClientTypes {
    /// Metadata assigned to an Amazon RDS resource consisting of a key-value pair. For more information, see [Tagging Amazon RDS Resources](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html) in the Amazon RDS User Guide.
    public struct Tag: Swift.Equatable {
        /// A key is the required name of the tag. The string value can be from 1 to 128 Unicode characters in length and can't be prefixed with aws: or rds:. The string can only contain only the set of Unicode letters, digits, white-space, '_', '.', ':', '/', '=', '+', '-', '@' (Java regex: "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-@]*)$").
        public var key: Swift.String?
        /// A value is the optional value of the tag. The string value can be from 1 to 256 Unicode characters in length and can't be prefixed with aws: or rds:. The string can only contain only the set of Unicode letters, digits, white-space, '_', '.', ':', '/', '=', '+', '-', '@' (Java regex: "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-@]*)$").
        public var value: Swift.String?

        public init(
            key: Swift.String? = nil,
            value: Swift.String? = nil
        )
        {
            self.key = key
            self.value = value
        }
    }

}

extension RDSClientTypes.TargetHealth: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case description = "Description"
        case reason = "Reason"
        case state = "State"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let description = description {
            try container.encode(description, forKey: ClientRuntime.Key("Description"))
        }
        if let reason = reason {
            try container.encode(reason, forKey: ClientRuntime.Key("Reason"))
        }
        if let state = state {
            try container.encode(state, forKey: ClientRuntime.Key("State"))
        }
    }

    static var readingClosure: SmithyReadWrite.ReadingClosure<RDSClientTypes.TargetHealth, SmithyXML.Reader> {
        return { reader in
            guard reader.content != nil else { return nil }
            var value = RDSClientTypes.TargetHealth()
            value.state = try reader["State"].readIfPresent()
            value.reason = try reader["Reason"].readIfPresent()
            value.description = try reader["Description"].readIfPresent()
            return value
        }
    }
}

extension RDSClientTypes {
    /// Information about the connection health of an RDS Proxy target.
    public struct TargetHealth: Swift.Equatable {
        /// A description of the health of the RDS Proxy target. If the State is AVAILABLE, a description is not included.
        public var description: Swift.String?
        /// The reason for the current health State of the RDS Proxy target.
        public var reason: RDSClientTypes.TargetHealthReason?
        /// The current state of the connection health lifecycle for the RDS Proxy target. The following is a typical lifecycle example for the states of an RDS Proxy target: registering > unavailable > available > unavailable > available
        public var state: RDSClientTypes.TargetState?

        public init(
            description: Swift.String? = nil,
            reason: RDSClientTypes.TargetHealthReason? = nil,
            state: RDSClientTypes.TargetState? = nil
        )
        {
            self.description = description
            self.reason = reason
            self.state = state
        }
    }

}

extension RDSClientTypes {
    public enum TargetHealthReason: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case authFailure
        case connectionFailed
        case invalidReplicationState
        case pendingProxyCapacity
        case unreachable
        case sdkUnknown(Swift.String)

        public static var allCases: [TargetHealthReason] {
            return [
                .authFailure,
                .connectionFailed,
                .invalidReplicationState,
                .pendingProxyCapacity,
                .unreachable,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .authFailure: return "AUTH_FAILURE"
            case .connectionFailed: return "CONNECTION_FAILED"
            case .invalidReplicationState: return "INVALID_REPLICATION_STATE"
            case .pendingProxyCapacity: return "PENDING_PROXY_CAPACITY"
            case .unreachable: return "UNREACHABLE"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = TargetHealthReason(rawValue: rawValue) ?? TargetHealthReason.sdkUnknown(rawValue)
        }
    }
}

extension RDSClientTypes {
    public enum TargetRole: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case readOnly
        case readWrite
        case unknown
        case sdkUnknown(Swift.String)

        public static var allCases: [TargetRole] {
            return [
                .readOnly,
                .readWrite,
                .unknown,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .readOnly: return "READ_ONLY"
            case .readWrite: return "READ_WRITE"
            case .unknown: return "UNKNOWN"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = TargetRole(rawValue: rawValue) ?? TargetRole.sdkUnknown(rawValue)
        }
    }
}

extension RDSClientTypes {
    public enum TargetState: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case available
        case registering
        case unavailable
        case sdkUnknown(Swift.String)

        public static var allCases: [TargetState] {
            return [
                .available,
                .registering,
                .unavailable,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .available: return "AVAILABLE"
            case .registering: return "REGISTERING"
            case .unavailable: return "UNAVAILABLE"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = TargetState(rawValue: rawValue) ?? TargetState.sdkUnknown(rawValue)
        }
    }
}

extension RDSClientTypes {
    public enum TargetType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case rdsInstance
        case rdsServerlessEndpoint
        case trackedCluster
        case sdkUnknown(Swift.String)

        public static var allCases: [TargetType] {
            return [
                .rdsInstance,
                .rdsServerlessEndpoint,
                .trackedCluster,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .rdsInstance: return "RDS_INSTANCE"
            case .rdsServerlessEndpoint: return "RDS_SERVERLESS_ENDPOINT"
            case .trackedCluster: return "TRACKED_CLUSTER"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = TargetType(rawValue: rawValue) ?? TargetType.sdkUnknown(rawValue)
        }
    }
}

extension RDSClientTypes.TenantDatabase: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case characterSetName = "CharacterSetName"
        case dbInstanceIdentifier = "DBInstanceIdentifier"
        case dbiResourceId = "DbiResourceId"
        case deletionProtection = "DeletionProtection"
        case masterUsername = "MasterUsername"
        case ncharCharacterSetName = "NcharCharacterSetName"
        case pendingModifiedValues = "PendingModifiedValues"
        case status = "Status"
        case tagList = "TagList"
        case tenantDBName = "TenantDBName"
        case tenantDatabaseARN = "TenantDatabaseARN"
        case tenantDatabaseCreateTime = "TenantDatabaseCreateTime"
        case tenantDatabaseResourceId = "TenantDatabaseResourceId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let characterSetName = characterSetName {
            try container.encode(characterSetName, forKey: ClientRuntime.Key("CharacterSetName"))
        }
        if let dbInstanceIdentifier = dbInstanceIdentifier {
            try container.encode(dbInstanceIdentifier, forKey: ClientRuntime.Key("DBInstanceIdentifier"))
        }
        if let dbiResourceId = dbiResourceId {
            try container.encode(dbiResourceId, forKey: ClientRuntime.Key("DbiResourceId"))
        }
        if let deletionProtection = deletionProtection {
            try container.encode(deletionProtection, forKey: ClientRuntime.Key("DeletionProtection"))
        }
        if let masterUsername = masterUsername {
            try container.encode(masterUsername, forKey: ClientRuntime.Key("MasterUsername"))
        }
        if let ncharCharacterSetName = ncharCharacterSetName {
            try container.encode(ncharCharacterSetName, forKey: ClientRuntime.Key("NcharCharacterSetName"))
        }
        if let pendingModifiedValues = pendingModifiedValues {
            try container.encode(pendingModifiedValues, forKey: ClientRuntime.Key("PendingModifiedValues"))
        }
        if let status = status {
            try container.encode(status, forKey: ClientRuntime.Key("Status"))
        }
        if let tagList = tagList {
            if !tagList.isEmpty {
                var tagListContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("TagList"))
                for (index0, tag0) in tagList.enumerated() {
                    try tagListContainer.encode(tag0, forKey: ClientRuntime.Key("Tag.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var tagListContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("TagList"))
                try tagListContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let tenantDBName = tenantDBName {
            try container.encode(tenantDBName, forKey: ClientRuntime.Key("TenantDBName"))
        }
        if let tenantDatabaseARN = tenantDatabaseARN {
            try container.encode(tenantDatabaseARN, forKey: ClientRuntime.Key("TenantDatabaseARN"))
        }
        if let tenantDatabaseCreateTime = tenantDatabaseCreateTime {
            try container.encodeTimestamp(tenantDatabaseCreateTime, format: .dateTime, forKey: ClientRuntime.Key("TenantDatabaseCreateTime"))
        }
        if let tenantDatabaseResourceId = tenantDatabaseResourceId {
            try container.encode(tenantDatabaseResourceId, forKey: ClientRuntime.Key("TenantDatabaseResourceId"))
        }
    }

    static var readingClosure: SmithyReadWrite.ReadingClosure<RDSClientTypes.TenantDatabase, SmithyXML.Reader> {
        return { reader in
            guard reader.content != nil else { return nil }
            var value = RDSClientTypes.TenantDatabase()
            value.tenantDatabaseCreateTime = try reader["TenantDatabaseCreateTime"].readTimestampIfPresent(format: .dateTime)
            value.dbInstanceIdentifier = try reader["DBInstanceIdentifier"].readIfPresent()
            value.tenantDBName = try reader["TenantDBName"].readIfPresent()
            value.status = try reader["Status"].readIfPresent()
            value.masterUsername = try reader["MasterUsername"].readIfPresent()
            value.dbiResourceId = try reader["DbiResourceId"].readIfPresent()
            value.tenantDatabaseResourceId = try reader["TenantDatabaseResourceId"].readIfPresent()
            value.tenantDatabaseARN = try reader["TenantDatabaseARN"].readIfPresent()
            value.characterSetName = try reader["CharacterSetName"].readIfPresent()
            value.ncharCharacterSetName = try reader["NcharCharacterSetName"].readIfPresent()
            value.deletionProtection = try reader["DeletionProtection"].readIfPresent()
            value.pendingModifiedValues = try reader["PendingModifiedValues"].readIfPresent(readingClosure: RDSClientTypes.TenantDatabasePendingModifiedValues.readingClosure)
            value.tagList = try reader["TagList"].readListIfPresent(memberReadingClosure: RDSClientTypes.Tag.readingClosure, memberNodeInfo: "Tag", isFlattened: false)
            return value
        }
    }
}

extension RDSClientTypes {
    /// A tenant database in the DB instance. This data type is an element in the response to the DescribeTenantDatabases action.
    public struct TenantDatabase: Swift.Equatable {
        /// The character set of the tenant database.
        public var characterSetName: Swift.String?
        /// The ID of the DB instance that contains the tenant database.
        public var dbInstanceIdentifier: Swift.String?
        /// The Amazon Web Services Region-unique, immutable identifier for the DB instance.
        public var dbiResourceId: Swift.String?
        /// Specifies whether deletion protection is enabled for the DB instance.
        public var deletionProtection: Swift.Bool?
        /// The master username of the tenant database.
        public var masterUsername: Swift.String?
        /// The NCHAR character set name of the tenant database.
        public var ncharCharacterSetName: Swift.String?
        /// Information about pending changes for a tenant database.
        public var pendingModifiedValues: RDSClientTypes.TenantDatabasePendingModifiedValues?
        /// The status of the tenant database.
        public var status: Swift.String?
        /// A list of tags. For more information, see [Tagging Amazon RDS Resources](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html) in the Amazon RDS User Guide.
        public var tagList: [RDSClientTypes.Tag]?
        /// The database name of the tenant database.
        public var tenantDBName: Swift.String?
        /// The Amazon Resource Name (ARN) for the tenant database.
        public var tenantDatabaseARN: Swift.String?
        /// The creation time of the tenant database.
        public var tenantDatabaseCreateTime: ClientRuntime.Date?
        /// The Amazon Web Services Region-unique, immutable identifier for the tenant database.
        public var tenantDatabaseResourceId: Swift.String?

        public init(
            characterSetName: Swift.String? = nil,
            dbInstanceIdentifier: Swift.String? = nil,
            dbiResourceId: Swift.String? = nil,
            deletionProtection: Swift.Bool? = nil,
            masterUsername: Swift.String? = nil,
            ncharCharacterSetName: Swift.String? = nil,
            pendingModifiedValues: RDSClientTypes.TenantDatabasePendingModifiedValues? = nil,
            status: Swift.String? = nil,
            tagList: [RDSClientTypes.Tag]? = nil,
            tenantDBName: Swift.String? = nil,
            tenantDatabaseARN: Swift.String? = nil,
            tenantDatabaseCreateTime: ClientRuntime.Date? = nil,
            tenantDatabaseResourceId: Swift.String? = nil
        )
        {
            self.characterSetName = characterSetName
            self.dbInstanceIdentifier = dbInstanceIdentifier
            self.dbiResourceId = dbiResourceId
            self.deletionProtection = deletionProtection
            self.masterUsername = masterUsername
            self.ncharCharacterSetName = ncharCharacterSetName
            self.pendingModifiedValues = pendingModifiedValues
            self.status = status
            self.tagList = tagList
            self.tenantDBName = tenantDBName
            self.tenantDatabaseARN = tenantDatabaseARN
            self.tenantDatabaseCreateTime = tenantDatabaseCreateTime
            self.tenantDatabaseResourceId = tenantDatabaseResourceId
        }
    }

}

extension TenantDatabaseAlreadyExistsFault {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = TenantDatabaseAlreadyExistsFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// You attempted to either create a tenant database that already exists or modify a tenant database to use the name of an existing tenant database.
public struct TenantDatabaseAlreadyExistsFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "TenantDatabaseAlreadyExists" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension TenantDatabaseNotFoundFault {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = TenantDatabaseNotFoundFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// The specified tenant database wasn't found in the DB instance.
public struct TenantDatabaseNotFoundFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "TenantDatabaseNotFound" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension RDSClientTypes.TenantDatabasePendingModifiedValues: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case masterUserPassword = "MasterUserPassword"
        case tenantDBName = "TenantDBName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let masterUserPassword = masterUserPassword {
            try container.encode(masterUserPassword, forKey: ClientRuntime.Key("MasterUserPassword"))
        }
        if let tenantDBName = tenantDBName {
            try container.encode(tenantDBName, forKey: ClientRuntime.Key("TenantDBName"))
        }
    }

    static var readingClosure: SmithyReadWrite.ReadingClosure<RDSClientTypes.TenantDatabasePendingModifiedValues, SmithyXML.Reader> {
        return { reader in
            guard reader.content != nil else { return nil }
            var value = RDSClientTypes.TenantDatabasePendingModifiedValues()
            value.masterUserPassword = try reader["MasterUserPassword"].readIfPresent()
            value.tenantDBName = try reader["TenantDBName"].readIfPresent()
            return value
        }
    }
}

extension RDSClientTypes.TenantDatabasePendingModifiedValues: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "TenantDatabasePendingModifiedValues(tenantDBName: \(Swift.String(describing: tenantDBName)), masterUserPassword: \"CONTENT_REDACTED\")"}
}

extension RDSClientTypes {
    /// A response element in the ModifyTenantDatabase operation that describes changes that will be applied. Specific changes are identified by subelements.
    public struct TenantDatabasePendingModifiedValues: Swift.Equatable {
        /// The master password for the tenant database.
        public var masterUserPassword: Swift.String?
        /// The name of the tenant database.
        public var tenantDBName: Swift.String?

        public init(
            masterUserPassword: Swift.String? = nil,
            tenantDBName: Swift.String? = nil
        )
        {
            self.masterUserPassword = masterUserPassword
            self.tenantDBName = tenantDBName
        }
    }

}

extension TenantDatabaseQuotaExceededFault {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = TenantDatabaseQuotaExceededFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// You attempted to create more tenant databases than are permitted in your Amazon Web Services account.
public struct TenantDatabaseQuotaExceededFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "TenantDatabaseQuotaExceeded" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension RDSClientTypes.Timezone: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case timezoneName = "TimezoneName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let timezoneName = timezoneName {
            try container.encode(timezoneName, forKey: ClientRuntime.Key("TimezoneName"))
        }
    }

    static var readingClosure: SmithyReadWrite.ReadingClosure<RDSClientTypes.Timezone, SmithyXML.Reader> {
        return { reader in
            guard reader.content != nil else { return nil }
            var value = RDSClientTypes.Timezone()
            value.timezoneName = try reader["TimezoneName"].readIfPresent()
            return value
        }
    }
}

extension RDSClientTypes {
    /// A time zone associated with a DBInstance or a DBSnapshot. This data type is an element in the response to the DescribeDBInstances, the DescribeDBSnapshots, and the DescribeDBEngineVersions actions.
    public struct Timezone: Swift.Equatable {
        /// The name of the time zone.
        public var timezoneName: Swift.String?

        public init(
            timezoneName: Swift.String? = nil
        )
        {
            self.timezoneName = timezoneName
        }
    }

}

extension UnsupportedDBEngineVersionFault {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = UnsupportedDBEngineVersionFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// The specified DB engine version isn't supported for Aurora Limitless Database.
public struct UnsupportedDBEngineVersionFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "UnsupportedDBEngineVersion" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension RDSClientTypes.UpgradeTarget: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case autoUpgrade = "AutoUpgrade"
        case description = "Description"
        case engine = "Engine"
        case engineVersion = "EngineVersion"
        case isMajorVersionUpgrade = "IsMajorVersionUpgrade"
        case supportedEngineModes = "SupportedEngineModes"
        case supportsBabelfish = "SupportsBabelfish"
        case supportsGlobalDatabases = "SupportsGlobalDatabases"
        case supportsIntegrations = "SupportsIntegrations"
        case supportsLocalWriteForwarding = "SupportsLocalWriteForwarding"
        case supportsParallelQuery = "SupportsParallelQuery"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let autoUpgrade = autoUpgrade {
            try container.encode(autoUpgrade, forKey: ClientRuntime.Key("AutoUpgrade"))
        }
        if let description = description {
            try container.encode(description, forKey: ClientRuntime.Key("Description"))
        }
        if let engine = engine {
            try container.encode(engine, forKey: ClientRuntime.Key("Engine"))
        }
        if let engineVersion = engineVersion {
            try container.encode(engineVersion, forKey: ClientRuntime.Key("EngineVersion"))
        }
        if let isMajorVersionUpgrade = isMajorVersionUpgrade {
            try container.encode(isMajorVersionUpgrade, forKey: ClientRuntime.Key("IsMajorVersionUpgrade"))
        }
        if let supportedEngineModes = supportedEngineModes {
            if !supportedEngineModes.isEmpty {
                var supportedEngineModesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("SupportedEngineModes"))
                for (index0, string0) in supportedEngineModes.enumerated() {
                    try supportedEngineModesContainer.encode(string0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var supportedEngineModesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("SupportedEngineModes"))
                try supportedEngineModesContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let supportsBabelfish = supportsBabelfish {
            try container.encode(supportsBabelfish, forKey: ClientRuntime.Key("SupportsBabelfish"))
        }
        if let supportsGlobalDatabases = supportsGlobalDatabases {
            try container.encode(supportsGlobalDatabases, forKey: ClientRuntime.Key("SupportsGlobalDatabases"))
        }
        if let supportsIntegrations = supportsIntegrations {
            try container.encode(supportsIntegrations, forKey: ClientRuntime.Key("SupportsIntegrations"))
        }
        if let supportsLocalWriteForwarding = supportsLocalWriteForwarding {
            try container.encode(supportsLocalWriteForwarding, forKey: ClientRuntime.Key("SupportsLocalWriteForwarding"))
        }
        if let supportsParallelQuery = supportsParallelQuery {
            try container.encode(supportsParallelQuery, forKey: ClientRuntime.Key("SupportsParallelQuery"))
        }
    }

    static var readingClosure: SmithyReadWrite.ReadingClosure<RDSClientTypes.UpgradeTarget, SmithyXML.Reader> {
        return { reader in
            guard reader.content != nil else { return nil }
            var value = RDSClientTypes.UpgradeTarget()
            value.engine = try reader["Engine"].readIfPresent()
            value.engineVersion = try reader["EngineVersion"].readIfPresent()
            value.description = try reader["Description"].readIfPresent()
            value.autoUpgrade = try reader["AutoUpgrade"].readIfPresent()
            value.isMajorVersionUpgrade = try reader["IsMajorVersionUpgrade"].readIfPresent()
            value.supportedEngineModes = try reader["SupportedEngineModes"].readListIfPresent(memberReadingClosure: Swift.String.readingClosure, memberNodeInfo: "member", isFlattened: false)
            value.supportsParallelQuery = try reader["SupportsParallelQuery"].readIfPresent()
            value.supportsGlobalDatabases = try reader["SupportsGlobalDatabases"].readIfPresent()
            value.supportsBabelfish = try reader["SupportsBabelfish"].readIfPresent()
            value.supportsLocalWriteForwarding = try reader["SupportsLocalWriteForwarding"].readIfPresent()
            value.supportsIntegrations = try reader["SupportsIntegrations"].readIfPresent()
            return value
        }
    }
}

extension RDSClientTypes {
    /// The version of the database engine that a DB instance can be upgraded to.
    public struct UpgradeTarget: Swift.Equatable {
        /// Indicates whether the target version is applied to any source DB instances that have AutoMinorVersionUpgrade set to true.
        public var autoUpgrade: Swift.Bool?
        /// The version of the database engine that a DB instance can be upgraded to.
        public var description: Swift.String?
        /// The name of the upgrade target database engine.
        public var engine: Swift.String?
        /// The version number of the upgrade target database engine.
        public var engineVersion: Swift.String?
        /// Indicates whether upgrading to the target version requires upgrading the major version of the database engine.
        public var isMajorVersionUpgrade: Swift.Bool?
        /// A list of the supported DB engine modes for the target engine version.
        public var supportedEngineModes: [Swift.String]?
        /// Indicates whether you can use Babelfish for Aurora PostgreSQL with the target engine version.
        public var supportsBabelfish: Swift.Bool?
        /// Indicates whether you can use Aurora global databases with the target engine version.
        public var supportsGlobalDatabases: Swift.Bool?
        /// Indicates whether the DB engine version supports zero-ETL integrations with Amazon Redshift.
        public var supportsIntegrations: Swift.Bool?
        /// Indicates whether the target engine version supports forwarding write operations from reader DB instances to the writer DB instance in the DB cluster. By default, write operations aren't allowed on reader DB instances. Valid for: Aurora DB clusters only
        public var supportsLocalWriteForwarding: Swift.Bool?
        /// Indicates whether you can use Aurora parallel query with the target engine version.
        public var supportsParallelQuery: Swift.Bool?

        public init(
            autoUpgrade: Swift.Bool? = nil,
            description: Swift.String? = nil,
            engine: Swift.String? = nil,
            engineVersion: Swift.String? = nil,
            isMajorVersionUpgrade: Swift.Bool? = nil,
            supportedEngineModes: [Swift.String]? = nil,
            supportsBabelfish: Swift.Bool? = nil,
            supportsGlobalDatabases: Swift.Bool? = nil,
            supportsIntegrations: Swift.Bool? = nil,
            supportsLocalWriteForwarding: Swift.Bool? = nil,
            supportsParallelQuery: Swift.Bool? = nil
        )
        {
            self.autoUpgrade = autoUpgrade
            self.description = description
            self.engine = engine
            self.engineVersion = engineVersion
            self.isMajorVersionUpgrade = isMajorVersionUpgrade
            self.supportedEngineModes = supportedEngineModes
            self.supportsBabelfish = supportsBabelfish
            self.supportsGlobalDatabases = supportsGlobalDatabases
            self.supportsIntegrations = supportsIntegrations
            self.supportsLocalWriteForwarding = supportsLocalWriteForwarding
            self.supportsParallelQuery = supportsParallelQuery
        }
    }

}

extension RDSClientTypes.UserAuthConfig: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case authScheme = "AuthScheme"
        case clientPasswordAuthType = "ClientPasswordAuthType"
        case description = "Description"
        case iamAuth = "IAMAuth"
        case secretArn = "SecretArn"
        case userName = "UserName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let authScheme = authScheme {
            try container.encode(authScheme, forKey: ClientRuntime.Key("AuthScheme"))
        }
        if let clientPasswordAuthType = clientPasswordAuthType {
            try container.encode(clientPasswordAuthType, forKey: ClientRuntime.Key("ClientPasswordAuthType"))
        }
        if let description = description {
            try container.encode(description, forKey: ClientRuntime.Key("Description"))
        }
        if let iamAuth = iamAuth {
            try container.encode(iamAuth, forKey: ClientRuntime.Key("IAMAuth"))
        }
        if let secretArn = secretArn {
            try container.encode(secretArn, forKey: ClientRuntime.Key("SecretArn"))
        }
        if let userName = userName {
            try container.encode(userName, forKey: ClientRuntime.Key("UserName"))
        }
    }

    static var readingClosure: SmithyReadWrite.ReadingClosure<RDSClientTypes.UserAuthConfig, SmithyXML.Reader> {
        return { reader in
            guard reader.content != nil else { return nil }
            var value = RDSClientTypes.UserAuthConfig()
            value.description = try reader["Description"].readIfPresent()
            value.userName = try reader["UserName"].readIfPresent()
            value.authScheme = try reader["AuthScheme"].readIfPresent()
            value.secretArn = try reader["SecretArn"].readIfPresent()
            value.iamAuth = try reader["IAMAuth"].readIfPresent()
            value.clientPasswordAuthType = try reader["ClientPasswordAuthType"].readIfPresent()
            return value
        }
    }
}

extension RDSClientTypes {
    /// Specifies the details of authentication used by a proxy to log in as a specific database user.
    public struct UserAuthConfig: Swift.Equatable {
        /// The type of authentication that the proxy uses for connections from the proxy to the underlying database.
        public var authScheme: RDSClientTypes.AuthScheme?
        /// The type of authentication the proxy uses for connections from clients.
        public var clientPasswordAuthType: RDSClientTypes.ClientPasswordAuthType?
        /// A user-specified description about the authentication used by a proxy to log in as a specific database user.
        public var description: Swift.String?
        /// A value that indicates whether to require or disallow Amazon Web Services Identity and Access Management (IAM) authentication for connections to the proxy. The ENABLED value is valid only for proxies with RDS for Microsoft SQL Server.
        public var iamAuth: RDSClientTypes.IAMAuthMode?
        /// The Amazon Resource Name (ARN) representing the secret that the proxy uses to authenticate to the RDS DB instance or Aurora DB cluster. These secrets are stored within Amazon Secrets Manager.
        public var secretArn: Swift.String?
        /// The name of the database user to which the proxy connects.
        public var userName: Swift.String?

        public init(
            authScheme: RDSClientTypes.AuthScheme? = nil,
            clientPasswordAuthType: RDSClientTypes.ClientPasswordAuthType? = nil,
            description: Swift.String? = nil,
            iamAuth: RDSClientTypes.IAMAuthMode? = nil,
            secretArn: Swift.String? = nil,
            userName: Swift.String? = nil
        )
        {
            self.authScheme = authScheme
            self.clientPasswordAuthType = clientPasswordAuthType
            self.description = description
            self.iamAuth = iamAuth
            self.secretArn = secretArn
            self.userName = userName
        }
    }

}

extension RDSClientTypes.UserAuthConfigInfo: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case authScheme = "AuthScheme"
        case clientPasswordAuthType = "ClientPasswordAuthType"
        case description = "Description"
        case iamAuth = "IAMAuth"
        case secretArn = "SecretArn"
        case userName = "UserName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let authScheme = authScheme {
            try container.encode(authScheme, forKey: ClientRuntime.Key("AuthScheme"))
        }
        if let clientPasswordAuthType = clientPasswordAuthType {
            try container.encode(clientPasswordAuthType, forKey: ClientRuntime.Key("ClientPasswordAuthType"))
        }
        if let description = description {
            try container.encode(description, forKey: ClientRuntime.Key("Description"))
        }
        if let iamAuth = iamAuth {
            try container.encode(iamAuth, forKey: ClientRuntime.Key("IAMAuth"))
        }
        if let secretArn = secretArn {
            try container.encode(secretArn, forKey: ClientRuntime.Key("SecretArn"))
        }
        if let userName = userName {
            try container.encode(userName, forKey: ClientRuntime.Key("UserName"))
        }
    }

    static var readingClosure: SmithyReadWrite.ReadingClosure<RDSClientTypes.UserAuthConfigInfo, SmithyXML.Reader> {
        return { reader in
            guard reader.content != nil else { return nil }
            var value = RDSClientTypes.UserAuthConfigInfo()
            value.description = try reader["Description"].readIfPresent()
            value.userName = try reader["UserName"].readIfPresent()
            value.authScheme = try reader["AuthScheme"].readIfPresent()
            value.secretArn = try reader["SecretArn"].readIfPresent()
            value.iamAuth = try reader["IAMAuth"].readIfPresent()
            value.clientPasswordAuthType = try reader["ClientPasswordAuthType"].readIfPresent()
            return value
        }
    }
}

extension RDSClientTypes {
    /// Returns the details of authentication used by a proxy to log in as a specific database user.
    public struct UserAuthConfigInfo: Swift.Equatable {
        /// The type of authentication that the proxy uses for connections from the proxy to the underlying database.
        public var authScheme: RDSClientTypes.AuthScheme?
        /// The type of authentication the proxy uses for connections from clients.
        public var clientPasswordAuthType: RDSClientTypes.ClientPasswordAuthType?
        /// A user-specified description about the authentication used by a proxy to log in as a specific database user.
        public var description: Swift.String?
        /// Whether to require or disallow Amazon Web Services Identity and Access Management (IAM) authentication for connections to the proxy. The ENABLED value is valid only for proxies with RDS for Microsoft SQL Server.
        public var iamAuth: RDSClientTypes.IAMAuthMode?
        /// The Amazon Resource Name (ARN) representing the secret that the proxy uses to authenticate to the RDS DB instance or Aurora DB cluster. These secrets are stored within Amazon Secrets Manager.
        public var secretArn: Swift.String?
        /// The name of the database user to which the proxy connects.
        public var userName: Swift.String?

        public init(
            authScheme: RDSClientTypes.AuthScheme? = nil,
            clientPasswordAuthType: RDSClientTypes.ClientPasswordAuthType? = nil,
            description: Swift.String? = nil,
            iamAuth: RDSClientTypes.IAMAuthMode? = nil,
            secretArn: Swift.String? = nil,
            userName: Swift.String? = nil
        )
        {
            self.authScheme = authScheme
            self.clientPasswordAuthType = clientPasswordAuthType
            self.description = description
            self.iamAuth = iamAuth
            self.secretArn = secretArn
            self.userName = userName
        }
    }

}

extension RDSClientTypes.ValidDBInstanceModificationsMessage: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case storage = "Storage"
        case supportsDedicatedLogVolume = "SupportsDedicatedLogVolume"
        case validProcessorFeatures = "ValidProcessorFeatures"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let storage = storage {
            if !storage.isEmpty {
                var storageContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Storage"))
                for (index0, validstorageoptions0) in storage.enumerated() {
                    try storageContainer.encode(validstorageoptions0, forKey: ClientRuntime.Key("ValidStorageOptions.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var storageContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Storage"))
                try storageContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let supportsDedicatedLogVolume = supportsDedicatedLogVolume {
            try container.encode(supportsDedicatedLogVolume, forKey: ClientRuntime.Key("SupportsDedicatedLogVolume"))
        }
        if let validProcessorFeatures = validProcessorFeatures {
            if !validProcessorFeatures.isEmpty {
                var validProcessorFeaturesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("ValidProcessorFeatures"))
                for (index0, availableprocessorfeature0) in validProcessorFeatures.enumerated() {
                    try validProcessorFeaturesContainer.encode(availableprocessorfeature0, forKey: ClientRuntime.Key("AvailableProcessorFeature.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var validProcessorFeaturesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("ValidProcessorFeatures"))
                try validProcessorFeaturesContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
    }

    static var readingClosure: SmithyReadWrite.ReadingClosure<RDSClientTypes.ValidDBInstanceModificationsMessage, SmithyXML.Reader> {
        return { reader in
            guard reader.content != nil else { return nil }
            var value = RDSClientTypes.ValidDBInstanceModificationsMessage()
            value.storage = try reader["Storage"].readListIfPresent(memberReadingClosure: RDSClientTypes.ValidStorageOptions.readingClosure, memberNodeInfo: "ValidStorageOptions", isFlattened: false)
            value.validProcessorFeatures = try reader["ValidProcessorFeatures"].readListIfPresent(memberReadingClosure: RDSClientTypes.AvailableProcessorFeature.readingClosure, memberNodeInfo: "AvailableProcessorFeature", isFlattened: false)
            value.supportsDedicatedLogVolume = try reader["SupportsDedicatedLogVolume"].readIfPresent()
            return value
        }
    }
}

extension RDSClientTypes {
    /// Information about valid modifications that you can make to your DB instance. Contains the result of a successful call to the DescribeValidDBInstanceModifications action. You can use this information when you call ModifyDBInstance.
    public struct ValidDBInstanceModificationsMessage: Swift.Equatable {
        /// Valid storage options for your DB instance.
        public var storage: [RDSClientTypes.ValidStorageOptions]?
        /// Indicates whether a DB instance supports using a dedicated log volume (DLV).
        public var supportsDedicatedLogVolume: Swift.Bool?
        /// Valid processor features for your DB instance.
        public var validProcessorFeatures: [RDSClientTypes.AvailableProcessorFeature]?

        public init(
            storage: [RDSClientTypes.ValidStorageOptions]? = nil,
            supportsDedicatedLogVolume: Swift.Bool? = nil,
            validProcessorFeatures: [RDSClientTypes.AvailableProcessorFeature]? = nil
        )
        {
            self.storage = storage
            self.supportsDedicatedLogVolume = supportsDedicatedLogVolume
            self.validProcessorFeatures = validProcessorFeatures
        }
    }

}

extension RDSClientTypes.ValidStorageOptions: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case iopsToStorageRatio = "IopsToStorageRatio"
        case provisionedIops = "ProvisionedIops"
        case provisionedStorageThroughput = "ProvisionedStorageThroughput"
        case storageSize = "StorageSize"
        case storageThroughputToIopsRatio = "StorageThroughputToIopsRatio"
        case storageType = "StorageType"
        case supportsStorageAutoscaling = "SupportsStorageAutoscaling"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let iopsToStorageRatio = iopsToStorageRatio {
            if !iopsToStorageRatio.isEmpty {
                var iopsToStorageRatioContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("IopsToStorageRatio"))
                for (index0, doublerange0) in iopsToStorageRatio.enumerated() {
                    try iopsToStorageRatioContainer.encode(doublerange0, forKey: ClientRuntime.Key("DoubleRange.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var iopsToStorageRatioContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("IopsToStorageRatio"))
                try iopsToStorageRatioContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let provisionedIops = provisionedIops {
            if !provisionedIops.isEmpty {
                var provisionedIopsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("ProvisionedIops"))
                for (index0, range0) in provisionedIops.enumerated() {
                    try provisionedIopsContainer.encode(range0, forKey: ClientRuntime.Key("Range.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var provisionedIopsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("ProvisionedIops"))
                try provisionedIopsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let provisionedStorageThroughput = provisionedStorageThroughput {
            if !provisionedStorageThroughput.isEmpty {
                var provisionedStorageThroughputContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("ProvisionedStorageThroughput"))
                for (index0, range0) in provisionedStorageThroughput.enumerated() {
                    try provisionedStorageThroughputContainer.encode(range0, forKey: ClientRuntime.Key("Range.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var provisionedStorageThroughputContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("ProvisionedStorageThroughput"))
                try provisionedStorageThroughputContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let storageSize = storageSize {
            if !storageSize.isEmpty {
                var storageSizeContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("StorageSize"))
                for (index0, range0) in storageSize.enumerated() {
                    try storageSizeContainer.encode(range0, forKey: ClientRuntime.Key("Range.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var storageSizeContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("StorageSize"))
                try storageSizeContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let storageThroughputToIopsRatio = storageThroughputToIopsRatio {
            if !storageThroughputToIopsRatio.isEmpty {
                var storageThroughputToIopsRatioContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("StorageThroughputToIopsRatio"))
                for (index0, doublerange0) in storageThroughputToIopsRatio.enumerated() {
                    try storageThroughputToIopsRatioContainer.encode(doublerange0, forKey: ClientRuntime.Key("DoubleRange.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var storageThroughputToIopsRatioContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("StorageThroughputToIopsRatio"))
                try storageThroughputToIopsRatioContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let storageType = storageType {
            try container.encode(storageType, forKey: ClientRuntime.Key("StorageType"))
        }
        if let supportsStorageAutoscaling = supportsStorageAutoscaling {
            try container.encode(supportsStorageAutoscaling, forKey: ClientRuntime.Key("SupportsStorageAutoscaling"))
        }
    }

    static var readingClosure: SmithyReadWrite.ReadingClosure<RDSClientTypes.ValidStorageOptions, SmithyXML.Reader> {
        return { reader in
            guard reader.content != nil else { return nil }
            var value = RDSClientTypes.ValidStorageOptions()
            value.storageType = try reader["StorageType"].readIfPresent()
            value.storageSize = try reader["StorageSize"].readListIfPresent(memberReadingClosure: RDSClientTypes.Range.readingClosure, memberNodeInfo: "Range", isFlattened: false)
            value.provisionedIops = try reader["ProvisionedIops"].readListIfPresent(memberReadingClosure: RDSClientTypes.Range.readingClosure, memberNodeInfo: "Range", isFlattened: false)
            value.iopsToStorageRatio = try reader["IopsToStorageRatio"].readListIfPresent(memberReadingClosure: RDSClientTypes.DoubleRange.readingClosure, memberNodeInfo: "DoubleRange", isFlattened: false)
            value.supportsStorageAutoscaling = try reader["SupportsStorageAutoscaling"].readIfPresent()
            value.provisionedStorageThroughput = try reader["ProvisionedStorageThroughput"].readListIfPresent(memberReadingClosure: RDSClientTypes.Range.readingClosure, memberNodeInfo: "Range", isFlattened: false)
            value.storageThroughputToIopsRatio = try reader["StorageThroughputToIopsRatio"].readListIfPresent(memberReadingClosure: RDSClientTypes.DoubleRange.readingClosure, memberNodeInfo: "DoubleRange", isFlattened: false)
            return value
        }
    }
}

extension RDSClientTypes {
    /// Information about valid modifications that you can make to your DB instance. Contains the result of a successful call to the DescribeValidDBInstanceModifications action.
    public struct ValidStorageOptions: Swift.Equatable {
        /// The valid range of Provisioned IOPS to gibibytes of storage multiplier. For example, 3-10, which means that provisioned IOPS can be between 3 and 10 times storage.
        public var iopsToStorageRatio: [RDSClientTypes.DoubleRange]?
        /// The valid range of provisioned IOPS. For example, 1000-256,000.
        public var provisionedIops: [RDSClientTypes.Range]?
        /// The valid range of provisioned storage throughput. For example, 500-4,000 mebibytes per second (MiBps).
        public var provisionedStorageThroughput: [RDSClientTypes.Range]?
        /// The valid range of storage in gibibytes (GiB). For example, 100 to 16,384.
        public var storageSize: [RDSClientTypes.Range]?
        /// The valid range of storage throughput to provisioned IOPS ratios. For example, 0-0.25.
        public var storageThroughputToIopsRatio: [RDSClientTypes.DoubleRange]?
        /// The valid storage types for your DB instance. For example: gp2, gp3, io1.
        public var storageType: Swift.String?
        /// Indicates whether or not Amazon RDS can automatically scale storage for DB instances that use the new instance class.
        public var supportsStorageAutoscaling: Swift.Bool?

        public init(
            iopsToStorageRatio: [RDSClientTypes.DoubleRange]? = nil,
            provisionedIops: [RDSClientTypes.Range]? = nil,
            provisionedStorageThroughput: [RDSClientTypes.Range]? = nil,
            storageSize: [RDSClientTypes.Range]? = nil,
            storageThroughputToIopsRatio: [RDSClientTypes.DoubleRange]? = nil,
            storageType: Swift.String? = nil,
            supportsStorageAutoscaling: Swift.Bool? = nil
        )
        {
            self.iopsToStorageRatio = iopsToStorageRatio
            self.provisionedIops = provisionedIops
            self.provisionedStorageThroughput = provisionedStorageThroughput
            self.storageSize = storageSize
            self.storageThroughputToIopsRatio = storageThroughputToIopsRatio
            self.storageType = storageType
            self.supportsStorageAutoscaling = supportsStorageAutoscaling
        }
    }

}

extension RDSClientTypes.VpcSecurityGroupMembership: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case status = "Status"
        case vpcSecurityGroupId = "VpcSecurityGroupId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let status = status {
            try container.encode(status, forKey: ClientRuntime.Key("Status"))
        }
        if let vpcSecurityGroupId = vpcSecurityGroupId {
            try container.encode(vpcSecurityGroupId, forKey: ClientRuntime.Key("VpcSecurityGroupId"))
        }
    }

    static var readingClosure: SmithyReadWrite.ReadingClosure<RDSClientTypes.VpcSecurityGroupMembership, SmithyXML.Reader> {
        return { reader in
            guard reader.content != nil else { return nil }
            var value = RDSClientTypes.VpcSecurityGroupMembership()
            value.vpcSecurityGroupId = try reader["VpcSecurityGroupId"].readIfPresent()
            value.status = try reader["Status"].readIfPresent()
            return value
        }
    }
}

extension RDSClientTypes {
    /// This data type is used as a response element for queries on VPC security group membership.
    public struct VpcSecurityGroupMembership: Swift.Equatable {
        /// The membership status of the VPC security group. Currently, the only valid status is active.
        public var status: Swift.String?
        /// The name of the VPC security group.
        public var vpcSecurityGroupId: Swift.String?

        public init(
            status: Swift.String? = nil,
            vpcSecurityGroupId: Swift.String? = nil
        )
        {
            self.status = status
            self.vpcSecurityGroupId = vpcSecurityGroupId
        }
    }

}

extension RDSClientTypes {
    public enum WriteForwardingStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case disabled
        case disabling
        case enabled
        case enabling
        case unknown
        case sdkUnknown(Swift.String)

        public static var allCases: [WriteForwardingStatus] {
            return [
                .disabled,
                .disabling,
                .enabled,
                .enabling,
                .unknown,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .disabled: return "disabled"
            case .disabling: return "disabling"
            case .enabled: return "enabled"
            case .enabling: return "enabling"
            case .unknown: return "unknown"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = WriteForwardingStatus(rawValue: rawValue) ?? WriteForwardingStatus.sdkUnknown(rawValue)
        }
    }
}
