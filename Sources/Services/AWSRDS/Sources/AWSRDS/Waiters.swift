// Code generated by smithy-swift-codegen. DO NOT EDIT!

import class ClientRuntime.Waiter
import enum ClientRuntime.JMESUtils
import protocol ClientRuntime.ServiceError
import struct ClientRuntime.WaiterConfiguration
import struct ClientRuntime.WaiterOptions
import struct ClientRuntime.WaiterOutcome

extension RDSClient {

    static func dbClusterAvailableWaiterConfig() throws -> ClientRuntime.WaiterConfiguration<DescribeDBClustersInput, DescribeDBClustersOutput> {
        let acceptors: [ClientRuntime.WaiterConfiguration<DescribeDBClustersInput, DescribeDBClustersOutput>.Acceptor] = [
            .init(state: .success, matcher: { (input: DescribeDBClustersInput, result: Swift.Result<DescribeDBClustersOutput, Swift.Error>) -> Bool in
                // JMESPath expression: "DBClusters[].Status"
                // JMESPath comparator: "allStringEquals"
                // JMESPath expected value: "available"
                guard case .success(let output) = result else { return false }
                let dbClusters = output.dbClusters
                let projection: [Swift.String]? = dbClusters?.compactMap { original in
                    let status = original.status
                    return status
                }
                return (projection?.count ?? 0) > 1 && (projection?.allSatisfy { ClientRuntime.JMESUtils.compare($0, ==, "available") } ?? false)
            }),
            .init(state: .failure, matcher: { (input: DescribeDBClustersInput, result: Swift.Result<DescribeDBClustersOutput, Swift.Error>) -> Bool in
                // JMESPath expression: "DBClusters[].Status"
                // JMESPath comparator: "anyStringEquals"
                // JMESPath expected value: "deleted"
                guard case .success(let output) = result else { return false }
                let dbClusters = output.dbClusters
                let projection: [Swift.String]? = dbClusters?.compactMap { original in
                    let status = original.status
                    return status
                }
                return projection?.contains(where: { ClientRuntime.JMESUtils.compare($0, ==, "deleted") }) ?? false
            }),
            .init(state: .failure, matcher: { (input: DescribeDBClustersInput, result: Swift.Result<DescribeDBClustersOutput, Swift.Error>) -> Bool in
                // JMESPath expression: "DBClusters[].Status"
                // JMESPath comparator: "anyStringEquals"
                // JMESPath expected value: "deleting"
                guard case .success(let output) = result else { return false }
                let dbClusters = output.dbClusters
                let projection: [Swift.String]? = dbClusters?.compactMap { original in
                    let status = original.status
                    return status
                }
                return projection?.contains(where: { ClientRuntime.JMESUtils.compare($0, ==, "deleting") }) ?? false
            }),
            .init(state: .failure, matcher: { (input: DescribeDBClustersInput, result: Swift.Result<DescribeDBClustersOutput, Swift.Error>) -> Bool in
                // JMESPath expression: "DBClusters[].Status"
                // JMESPath comparator: "anyStringEquals"
                // JMESPath expected value: "failed"
                guard case .success(let output) = result else { return false }
                let dbClusters = output.dbClusters
                let projection: [Swift.String]? = dbClusters?.compactMap { original in
                    let status = original.status
                    return status
                }
                return projection?.contains(where: { ClientRuntime.JMESUtils.compare($0, ==, "failed") }) ?? false
            }),
            .init(state: .failure, matcher: { (input: DescribeDBClustersInput, result: Swift.Result<DescribeDBClustersOutput, Swift.Error>) -> Bool in
                // JMESPath expression: "DBClusters[].Status"
                // JMESPath comparator: "anyStringEquals"
                // JMESPath expected value: "incompatible-restore"
                guard case .success(let output) = result else { return false }
                let dbClusters = output.dbClusters
                let projection: [Swift.String]? = dbClusters?.compactMap { original in
                    let status = original.status
                    return status
                }
                return projection?.contains(where: { ClientRuntime.JMESUtils.compare($0, ==, "incompatible-restore") }) ?? false
            }),
            .init(state: .failure, matcher: { (input: DescribeDBClustersInput, result: Swift.Result<DescribeDBClustersOutput, Swift.Error>) -> Bool in
                // JMESPath expression: "DBClusters[].Status"
                // JMESPath comparator: "anyStringEquals"
                // JMESPath expected value: "incompatible-parameters"
                guard case .success(let output) = result else { return false }
                let dbClusters = output.dbClusters
                let projection: [Swift.String]? = dbClusters?.compactMap { original in
                    let status = original.status
                    return status
                }
                return projection?.contains(where: { ClientRuntime.JMESUtils.compare($0, ==, "incompatible-parameters") }) ?? false
            }),
        ]
        return try ClientRuntime.WaiterConfiguration<DescribeDBClustersInput, DescribeDBClustersOutput>(acceptors: acceptors, minDelay: 30.0, maxDelay: 120.0)
    }

    /// Initiates waiting for the DBClusterAvailable event on the describeDBClusters operation.
    /// The operation will be tried and (if necessary) retried until the wait succeeds, fails, or times out.
    /// Returns a `WaiterOutcome` asynchronously on waiter success, throws an error asynchronously on
    /// waiter failure or timeout.
    /// - Parameters:
    ///   - options: `WaiterOptions` to be used to configure this wait.
    ///   - input: The `DescribeDBClustersInput` object to be used as a parameter when performing the operation.
    /// - Returns: A `WaiterOutcome` with the result of the final, successful performance of the operation.
    /// - Throws: `WaiterFailureError` if the waiter fails due to matching an `Acceptor` with state `failure`
    /// or there is an error not handled by any `Acceptor.`
    /// `WaiterTimeoutError` if the waiter times out.
    public func waitUntilDBClusterAvailable(options: ClientRuntime.WaiterOptions, input: DescribeDBClustersInput) async throws -> ClientRuntime.WaiterOutcome<DescribeDBClustersOutput> {
        let waiter = ClientRuntime.Waiter(config: try Self.dbClusterAvailableWaiterConfig(), operation: self.describeDBClusters(input:))
        return try await waiter.waitUntil(options: options, input: input)
    }

    static func dbClusterDeletedWaiterConfig() throws -> ClientRuntime.WaiterConfiguration<DescribeDBClustersInput, DescribeDBClustersOutput> {
        let acceptors: [ClientRuntime.WaiterConfiguration<DescribeDBClustersInput, DescribeDBClustersOutput>.Acceptor] = [
            .init(state: .success, matcher: { (input: DescribeDBClustersInput, result: Swift.Result<DescribeDBClustersOutput, Swift.Error>) -> Bool in
                // JMESPath expression: "length(DBClusters) == `0`"
                // JMESPath comparator: "booleanEquals"
                // JMESPath expected value: "true"
                guard case .success(let output) = result else { return false }
                let dbClusters = output.dbClusters
                let count = Double(dbClusters?.count ?? 0)
                let number = Double(0.0)
                let comparison = JMESUtils.compare(count, ==, number)
                return ClientRuntime.JMESUtils.compare(comparison, ==, true)
            }),
            .init(state: .success, matcher: { (input: DescribeDBClustersInput, result: Swift.Result<DescribeDBClustersOutput, Swift.Error>) -> Bool in
                guard case .failure(let error) = result else { return false }
                return (error as? ClientRuntime.ServiceError)?.typeName == "DBClusterNotFoundFault"
            }),
            .init(state: .failure, matcher: { (input: DescribeDBClustersInput, result: Swift.Result<DescribeDBClustersOutput, Swift.Error>) -> Bool in
                // JMESPath expression: "DBClusters[].Status"
                // JMESPath comparator: "anyStringEquals"
                // JMESPath expected value: "creating"
                guard case .success(let output) = result else { return false }
                let dbClusters = output.dbClusters
                let projection: [Swift.String]? = dbClusters?.compactMap { original in
                    let status = original.status
                    return status
                }
                return projection?.contains(where: { ClientRuntime.JMESUtils.compare($0, ==, "creating") }) ?? false
            }),
            .init(state: .failure, matcher: { (input: DescribeDBClustersInput, result: Swift.Result<DescribeDBClustersOutput, Swift.Error>) -> Bool in
                // JMESPath expression: "DBClusters[].Status"
                // JMESPath comparator: "anyStringEquals"
                // JMESPath expected value: "modifying"
                guard case .success(let output) = result else { return false }
                let dbClusters = output.dbClusters
                let projection: [Swift.String]? = dbClusters?.compactMap { original in
                    let status = original.status
                    return status
                }
                return projection?.contains(where: { ClientRuntime.JMESUtils.compare($0, ==, "modifying") }) ?? false
            }),
            .init(state: .failure, matcher: { (input: DescribeDBClustersInput, result: Swift.Result<DescribeDBClustersOutput, Swift.Error>) -> Bool in
                // JMESPath expression: "DBClusters[].Status"
                // JMESPath comparator: "anyStringEquals"
                // JMESPath expected value: "rebooting"
                guard case .success(let output) = result else { return false }
                let dbClusters = output.dbClusters
                let projection: [Swift.String]? = dbClusters?.compactMap { original in
                    let status = original.status
                    return status
                }
                return projection?.contains(where: { ClientRuntime.JMESUtils.compare($0, ==, "rebooting") }) ?? false
            }),
            .init(state: .failure, matcher: { (input: DescribeDBClustersInput, result: Swift.Result<DescribeDBClustersOutput, Swift.Error>) -> Bool in
                // JMESPath expression: "DBClusters[].Status"
                // JMESPath comparator: "anyStringEquals"
                // JMESPath expected value: "resetting-master-credentials"
                guard case .success(let output) = result else { return false }
                let dbClusters = output.dbClusters
                let projection: [Swift.String]? = dbClusters?.compactMap { original in
                    let status = original.status
                    return status
                }
                return projection?.contains(where: { ClientRuntime.JMESUtils.compare($0, ==, "resetting-master-credentials") }) ?? false
            }),
        ]
        return try ClientRuntime.WaiterConfiguration<DescribeDBClustersInput, DescribeDBClustersOutput>(acceptors: acceptors, minDelay: 30.0, maxDelay: 120.0)
    }

    /// Initiates waiting for the DBClusterDeleted event on the describeDBClusters operation.
    /// The operation will be tried and (if necessary) retried until the wait succeeds, fails, or times out.
    /// Returns a `WaiterOutcome` asynchronously on waiter success, throws an error asynchronously on
    /// waiter failure or timeout.
    /// - Parameters:
    ///   - options: `WaiterOptions` to be used to configure this wait.
    ///   - input: The `DescribeDBClustersInput` object to be used as a parameter when performing the operation.
    /// - Returns: A `WaiterOutcome` with the result of the final, successful performance of the operation.
    /// - Throws: `WaiterFailureError` if the waiter fails due to matching an `Acceptor` with state `failure`
    /// or there is an error not handled by any `Acceptor.`
    /// `WaiterTimeoutError` if the waiter times out.
    public func waitUntilDBClusterDeleted(options: ClientRuntime.WaiterOptions, input: DescribeDBClustersInput) async throws -> ClientRuntime.WaiterOutcome<DescribeDBClustersOutput> {
        let waiter = ClientRuntime.Waiter(config: try Self.dbClusterDeletedWaiterConfig(), operation: self.describeDBClusters(input:))
        return try await waiter.waitUntil(options: options, input: input)
    }

    static func dbClusterSnapshotAvailableWaiterConfig() throws -> ClientRuntime.WaiterConfiguration<DescribeDBClusterSnapshotsInput, DescribeDBClusterSnapshotsOutput> {
        let acceptors: [ClientRuntime.WaiterConfiguration<DescribeDBClusterSnapshotsInput, DescribeDBClusterSnapshotsOutput>.Acceptor] = [
            .init(state: .success, matcher: { (input: DescribeDBClusterSnapshotsInput, result: Swift.Result<DescribeDBClusterSnapshotsOutput, Swift.Error>) -> Bool in
                // JMESPath expression: "DBClusterSnapshots[].Status"
                // JMESPath comparator: "allStringEquals"
                // JMESPath expected value: "available"
                guard case .success(let output) = result else { return false }
                let dbClusterSnapshots = output.dbClusterSnapshots
                let projection: [Swift.String]? = dbClusterSnapshots?.compactMap { original in
                    let status = original.status
                    return status
                }
                return (projection?.count ?? 0) > 1 && (projection?.allSatisfy { ClientRuntime.JMESUtils.compare($0, ==, "available") } ?? false)
            }),
            .init(state: .failure, matcher: { (input: DescribeDBClusterSnapshotsInput, result: Swift.Result<DescribeDBClusterSnapshotsOutput, Swift.Error>) -> Bool in
                // JMESPath expression: "DBClusterSnapshots[].Status"
                // JMESPath comparator: "anyStringEquals"
                // JMESPath expected value: "deleted"
                guard case .success(let output) = result else { return false }
                let dbClusterSnapshots = output.dbClusterSnapshots
                let projection: [Swift.String]? = dbClusterSnapshots?.compactMap { original in
                    let status = original.status
                    return status
                }
                return projection?.contains(where: { ClientRuntime.JMESUtils.compare($0, ==, "deleted") }) ?? false
            }),
            .init(state: .failure, matcher: { (input: DescribeDBClusterSnapshotsInput, result: Swift.Result<DescribeDBClusterSnapshotsOutput, Swift.Error>) -> Bool in
                // JMESPath expression: "DBClusterSnapshots[].Status"
                // JMESPath comparator: "anyStringEquals"
                // JMESPath expected value: "deleting"
                guard case .success(let output) = result else { return false }
                let dbClusterSnapshots = output.dbClusterSnapshots
                let projection: [Swift.String]? = dbClusterSnapshots?.compactMap { original in
                    let status = original.status
                    return status
                }
                return projection?.contains(where: { ClientRuntime.JMESUtils.compare($0, ==, "deleting") }) ?? false
            }),
            .init(state: .failure, matcher: { (input: DescribeDBClusterSnapshotsInput, result: Swift.Result<DescribeDBClusterSnapshotsOutput, Swift.Error>) -> Bool in
                // JMESPath expression: "DBClusterSnapshots[].Status"
                // JMESPath comparator: "anyStringEquals"
                // JMESPath expected value: "failed"
                guard case .success(let output) = result else { return false }
                let dbClusterSnapshots = output.dbClusterSnapshots
                let projection: [Swift.String]? = dbClusterSnapshots?.compactMap { original in
                    let status = original.status
                    return status
                }
                return projection?.contains(where: { ClientRuntime.JMESUtils.compare($0, ==, "failed") }) ?? false
            }),
            .init(state: .failure, matcher: { (input: DescribeDBClusterSnapshotsInput, result: Swift.Result<DescribeDBClusterSnapshotsOutput, Swift.Error>) -> Bool in
                // JMESPath expression: "DBClusterSnapshots[].Status"
                // JMESPath comparator: "anyStringEquals"
                // JMESPath expected value: "incompatible-restore"
                guard case .success(let output) = result else { return false }
                let dbClusterSnapshots = output.dbClusterSnapshots
                let projection: [Swift.String]? = dbClusterSnapshots?.compactMap { original in
                    let status = original.status
                    return status
                }
                return projection?.contains(where: { ClientRuntime.JMESUtils.compare($0, ==, "incompatible-restore") }) ?? false
            }),
            .init(state: .failure, matcher: { (input: DescribeDBClusterSnapshotsInput, result: Swift.Result<DescribeDBClusterSnapshotsOutput, Swift.Error>) -> Bool in
                // JMESPath expression: "DBClusterSnapshots[].Status"
                // JMESPath comparator: "anyStringEquals"
                // JMESPath expected value: "incompatible-parameters"
                guard case .success(let output) = result else { return false }
                let dbClusterSnapshots = output.dbClusterSnapshots
                let projection: [Swift.String]? = dbClusterSnapshots?.compactMap { original in
                    let status = original.status
                    return status
                }
                return projection?.contains(where: { ClientRuntime.JMESUtils.compare($0, ==, "incompatible-parameters") }) ?? false
            }),
        ]
        return try ClientRuntime.WaiterConfiguration<DescribeDBClusterSnapshotsInput, DescribeDBClusterSnapshotsOutput>(acceptors: acceptors, minDelay: 30.0, maxDelay: 120.0)
    }

    /// Initiates waiting for the DBClusterSnapshotAvailable event on the describeDBClusterSnapshots operation.
    /// The operation will be tried and (if necessary) retried until the wait succeeds, fails, or times out.
    /// Returns a `WaiterOutcome` asynchronously on waiter success, throws an error asynchronously on
    /// waiter failure or timeout.
    /// - Parameters:
    ///   - options: `WaiterOptions` to be used to configure this wait.
    ///   - input: The `DescribeDBClusterSnapshotsInput` object to be used as a parameter when performing the operation.
    /// - Returns: A `WaiterOutcome` with the result of the final, successful performance of the operation.
    /// - Throws: `WaiterFailureError` if the waiter fails due to matching an `Acceptor` with state `failure`
    /// or there is an error not handled by any `Acceptor.`
    /// `WaiterTimeoutError` if the waiter times out.
    public func waitUntilDBClusterSnapshotAvailable(options: ClientRuntime.WaiterOptions, input: DescribeDBClusterSnapshotsInput) async throws -> ClientRuntime.WaiterOutcome<DescribeDBClusterSnapshotsOutput> {
        let waiter = ClientRuntime.Waiter(config: try Self.dbClusterSnapshotAvailableWaiterConfig(), operation: self.describeDBClusterSnapshots(input:))
        return try await waiter.waitUntil(options: options, input: input)
    }

    static func dbClusterSnapshotDeletedWaiterConfig() throws -> ClientRuntime.WaiterConfiguration<DescribeDBClusterSnapshotsInput, DescribeDBClusterSnapshotsOutput> {
        let acceptors: [ClientRuntime.WaiterConfiguration<DescribeDBClusterSnapshotsInput, DescribeDBClusterSnapshotsOutput>.Acceptor] = [
            .init(state: .success, matcher: { (input: DescribeDBClusterSnapshotsInput, result: Swift.Result<DescribeDBClusterSnapshotsOutput, Swift.Error>) -> Bool in
                // JMESPath expression: "length(DBClusterSnapshots) == `0`"
                // JMESPath comparator: "booleanEquals"
                // JMESPath expected value: "true"
                guard case .success(let output) = result else { return false }
                let dbClusterSnapshots = output.dbClusterSnapshots
                let count = Double(dbClusterSnapshots?.count ?? 0)
                let number = Double(0.0)
                let comparison = JMESUtils.compare(count, ==, number)
                return ClientRuntime.JMESUtils.compare(comparison, ==, true)
            }),
            .init(state: .success, matcher: { (input: DescribeDBClusterSnapshotsInput, result: Swift.Result<DescribeDBClusterSnapshotsOutput, Swift.Error>) -> Bool in
                guard case .failure(let error) = result else { return false }
                return (error as? ClientRuntime.ServiceError)?.typeName == "DBClusterSnapshotNotFoundFault"
            }),
            .init(state: .failure, matcher: { (input: DescribeDBClusterSnapshotsInput, result: Swift.Result<DescribeDBClusterSnapshotsOutput, Swift.Error>) -> Bool in
                // JMESPath expression: "DBClusterSnapshots[].Status"
                // JMESPath comparator: "anyStringEquals"
                // JMESPath expected value: "creating"
                guard case .success(let output) = result else { return false }
                let dbClusterSnapshots = output.dbClusterSnapshots
                let projection: [Swift.String]? = dbClusterSnapshots?.compactMap { original in
                    let status = original.status
                    return status
                }
                return projection?.contains(where: { ClientRuntime.JMESUtils.compare($0, ==, "creating") }) ?? false
            }),
            .init(state: .failure, matcher: { (input: DescribeDBClusterSnapshotsInput, result: Swift.Result<DescribeDBClusterSnapshotsOutput, Swift.Error>) -> Bool in
                // JMESPath expression: "DBClusterSnapshots[].Status"
                // JMESPath comparator: "anyStringEquals"
                // JMESPath expected value: "modifying"
                guard case .success(let output) = result else { return false }
                let dbClusterSnapshots = output.dbClusterSnapshots
                let projection: [Swift.String]? = dbClusterSnapshots?.compactMap { original in
                    let status = original.status
                    return status
                }
                return projection?.contains(where: { ClientRuntime.JMESUtils.compare($0, ==, "modifying") }) ?? false
            }),
            .init(state: .failure, matcher: { (input: DescribeDBClusterSnapshotsInput, result: Swift.Result<DescribeDBClusterSnapshotsOutput, Swift.Error>) -> Bool in
                // JMESPath expression: "DBClusterSnapshots[].Status"
                // JMESPath comparator: "anyStringEquals"
                // JMESPath expected value: "rebooting"
                guard case .success(let output) = result else { return false }
                let dbClusterSnapshots = output.dbClusterSnapshots
                let projection: [Swift.String]? = dbClusterSnapshots?.compactMap { original in
                    let status = original.status
                    return status
                }
                return projection?.contains(where: { ClientRuntime.JMESUtils.compare($0, ==, "rebooting") }) ?? false
            }),
            .init(state: .failure, matcher: { (input: DescribeDBClusterSnapshotsInput, result: Swift.Result<DescribeDBClusterSnapshotsOutput, Swift.Error>) -> Bool in
                // JMESPath expression: "DBClusterSnapshots[].Status"
                // JMESPath comparator: "anyStringEquals"
                // JMESPath expected value: "resetting-master-credentials"
                guard case .success(let output) = result else { return false }
                let dbClusterSnapshots = output.dbClusterSnapshots
                let projection: [Swift.String]? = dbClusterSnapshots?.compactMap { original in
                    let status = original.status
                    return status
                }
                return projection?.contains(where: { ClientRuntime.JMESUtils.compare($0, ==, "resetting-master-credentials") }) ?? false
            }),
        ]
        return try ClientRuntime.WaiterConfiguration<DescribeDBClusterSnapshotsInput, DescribeDBClusterSnapshotsOutput>(acceptors: acceptors, minDelay: 30.0, maxDelay: 120.0)
    }

    /// Initiates waiting for the DBClusterSnapshotDeleted event on the describeDBClusterSnapshots operation.
    /// The operation will be tried and (if necessary) retried until the wait succeeds, fails, or times out.
    /// Returns a `WaiterOutcome` asynchronously on waiter success, throws an error asynchronously on
    /// waiter failure or timeout.
    /// - Parameters:
    ///   - options: `WaiterOptions` to be used to configure this wait.
    ///   - input: The `DescribeDBClusterSnapshotsInput` object to be used as a parameter when performing the operation.
    /// - Returns: A `WaiterOutcome` with the result of the final, successful performance of the operation.
    /// - Throws: `WaiterFailureError` if the waiter fails due to matching an `Acceptor` with state `failure`
    /// or there is an error not handled by any `Acceptor.`
    /// `WaiterTimeoutError` if the waiter times out.
    public func waitUntilDBClusterSnapshotDeleted(options: ClientRuntime.WaiterOptions, input: DescribeDBClusterSnapshotsInput) async throws -> ClientRuntime.WaiterOutcome<DescribeDBClusterSnapshotsOutput> {
        let waiter = ClientRuntime.Waiter(config: try Self.dbClusterSnapshotDeletedWaiterConfig(), operation: self.describeDBClusterSnapshots(input:))
        return try await waiter.waitUntil(options: options, input: input)
    }

    static func dbInstanceAvailableWaiterConfig() throws -> ClientRuntime.WaiterConfiguration<DescribeDBInstancesInput, DescribeDBInstancesOutput> {
        let acceptors: [ClientRuntime.WaiterConfiguration<DescribeDBInstancesInput, DescribeDBInstancesOutput>.Acceptor] = [
            .init(state: .success, matcher: { (input: DescribeDBInstancesInput, result: Swift.Result<DescribeDBInstancesOutput, Swift.Error>) -> Bool in
                // JMESPath expression: "DBInstances[].DBInstanceStatus"
                // JMESPath comparator: "allStringEquals"
                // JMESPath expected value: "available"
                guard case .success(let output) = result else { return false }
                let dbInstances = output.dbInstances
                let projection: [Swift.String]? = dbInstances?.compactMap { original in
                    let dbInstanceStatus = original.dbInstanceStatus
                    return dbInstanceStatus
                }
                return (projection?.count ?? 0) > 1 && (projection?.allSatisfy { ClientRuntime.JMESUtils.compare($0, ==, "available") } ?? false)
            }),
            .init(state: .failure, matcher: { (input: DescribeDBInstancesInput, result: Swift.Result<DescribeDBInstancesOutput, Swift.Error>) -> Bool in
                // JMESPath expression: "DBInstances[].DBInstanceStatus"
                // JMESPath comparator: "anyStringEquals"
                // JMESPath expected value: "deleted"
                guard case .success(let output) = result else { return false }
                let dbInstances = output.dbInstances
                let projection: [Swift.String]? = dbInstances?.compactMap { original in
                    let dbInstanceStatus = original.dbInstanceStatus
                    return dbInstanceStatus
                }
                return projection?.contains(where: { ClientRuntime.JMESUtils.compare($0, ==, "deleted") }) ?? false
            }),
            .init(state: .failure, matcher: { (input: DescribeDBInstancesInput, result: Swift.Result<DescribeDBInstancesOutput, Swift.Error>) -> Bool in
                // JMESPath expression: "DBInstances[].DBInstanceStatus"
                // JMESPath comparator: "anyStringEquals"
                // JMESPath expected value: "deleting"
                guard case .success(let output) = result else { return false }
                let dbInstances = output.dbInstances
                let projection: [Swift.String]? = dbInstances?.compactMap { original in
                    let dbInstanceStatus = original.dbInstanceStatus
                    return dbInstanceStatus
                }
                return projection?.contains(where: { ClientRuntime.JMESUtils.compare($0, ==, "deleting") }) ?? false
            }),
            .init(state: .failure, matcher: { (input: DescribeDBInstancesInput, result: Swift.Result<DescribeDBInstancesOutput, Swift.Error>) -> Bool in
                // JMESPath expression: "DBInstances[].DBInstanceStatus"
                // JMESPath comparator: "anyStringEquals"
                // JMESPath expected value: "failed"
                guard case .success(let output) = result else { return false }
                let dbInstances = output.dbInstances
                let projection: [Swift.String]? = dbInstances?.compactMap { original in
                    let dbInstanceStatus = original.dbInstanceStatus
                    return dbInstanceStatus
                }
                return projection?.contains(where: { ClientRuntime.JMESUtils.compare($0, ==, "failed") }) ?? false
            }),
            .init(state: .failure, matcher: { (input: DescribeDBInstancesInput, result: Swift.Result<DescribeDBInstancesOutput, Swift.Error>) -> Bool in
                // JMESPath expression: "DBInstances[].DBInstanceStatus"
                // JMESPath comparator: "anyStringEquals"
                // JMESPath expected value: "incompatible-restore"
                guard case .success(let output) = result else { return false }
                let dbInstances = output.dbInstances
                let projection: [Swift.String]? = dbInstances?.compactMap { original in
                    let dbInstanceStatus = original.dbInstanceStatus
                    return dbInstanceStatus
                }
                return projection?.contains(where: { ClientRuntime.JMESUtils.compare($0, ==, "incompatible-restore") }) ?? false
            }),
            .init(state: .failure, matcher: { (input: DescribeDBInstancesInput, result: Swift.Result<DescribeDBInstancesOutput, Swift.Error>) -> Bool in
                // JMESPath expression: "DBInstances[].DBInstanceStatus"
                // JMESPath comparator: "anyStringEquals"
                // JMESPath expected value: "incompatible-parameters"
                guard case .success(let output) = result else { return false }
                let dbInstances = output.dbInstances
                let projection: [Swift.String]? = dbInstances?.compactMap { original in
                    let dbInstanceStatus = original.dbInstanceStatus
                    return dbInstanceStatus
                }
                return projection?.contains(where: { ClientRuntime.JMESUtils.compare($0, ==, "incompatible-parameters") }) ?? false
            }),
        ]
        return try ClientRuntime.WaiterConfiguration<DescribeDBInstancesInput, DescribeDBInstancesOutput>(acceptors: acceptors, minDelay: 30.0, maxDelay: 120.0)
    }

    /// Initiates waiting for the DBInstanceAvailable event on the describeDBInstances operation.
    /// The operation will be tried and (if necessary) retried until the wait succeeds, fails, or times out.
    /// Returns a `WaiterOutcome` asynchronously on waiter success, throws an error asynchronously on
    /// waiter failure or timeout.
    /// - Parameters:
    ///   - options: `WaiterOptions` to be used to configure this wait.
    ///   - input: The `DescribeDBInstancesInput` object to be used as a parameter when performing the operation.
    /// - Returns: A `WaiterOutcome` with the result of the final, successful performance of the operation.
    /// - Throws: `WaiterFailureError` if the waiter fails due to matching an `Acceptor` with state `failure`
    /// or there is an error not handled by any `Acceptor.`
    /// `WaiterTimeoutError` if the waiter times out.
    public func waitUntilDBInstanceAvailable(options: ClientRuntime.WaiterOptions, input: DescribeDBInstancesInput) async throws -> ClientRuntime.WaiterOutcome<DescribeDBInstancesOutput> {
        let waiter = ClientRuntime.Waiter(config: try Self.dbInstanceAvailableWaiterConfig(), operation: self.describeDBInstances(input:))
        return try await waiter.waitUntil(options: options, input: input)
    }

    static func dbInstanceDeletedWaiterConfig() throws -> ClientRuntime.WaiterConfiguration<DescribeDBInstancesInput, DescribeDBInstancesOutput> {
        let acceptors: [ClientRuntime.WaiterConfiguration<DescribeDBInstancesInput, DescribeDBInstancesOutput>.Acceptor] = [
            .init(state: .success, matcher: { (input: DescribeDBInstancesInput, result: Swift.Result<DescribeDBInstancesOutput, Swift.Error>) -> Bool in
                // JMESPath expression: "length(DBInstances) == `0`"
                // JMESPath comparator: "booleanEquals"
                // JMESPath expected value: "true"
                guard case .success(let output) = result else { return false }
                let dbInstances = output.dbInstances
                let count = Double(dbInstances?.count ?? 0)
                let number = Double(0.0)
                let comparison = JMESUtils.compare(count, ==, number)
                return ClientRuntime.JMESUtils.compare(comparison, ==, true)
            }),
            .init(state: .success, matcher: { (input: DescribeDBInstancesInput, result: Swift.Result<DescribeDBInstancesOutput, Swift.Error>) -> Bool in
                guard case .failure(let error) = result else { return false }
                return (error as? ClientRuntime.ServiceError)?.typeName == "DBInstanceNotFound"
            }),
            .init(state: .failure, matcher: { (input: DescribeDBInstancesInput, result: Swift.Result<DescribeDBInstancesOutput, Swift.Error>) -> Bool in
                // JMESPath expression: "DBInstances[].DBInstanceStatus"
                // JMESPath comparator: "anyStringEquals"
                // JMESPath expected value: "creating"
                guard case .success(let output) = result else { return false }
                let dbInstances = output.dbInstances
                let projection: [Swift.String]? = dbInstances?.compactMap { original in
                    let dbInstanceStatus = original.dbInstanceStatus
                    return dbInstanceStatus
                }
                return projection?.contains(where: { ClientRuntime.JMESUtils.compare($0, ==, "creating") }) ?? false
            }),
            .init(state: .failure, matcher: { (input: DescribeDBInstancesInput, result: Swift.Result<DescribeDBInstancesOutput, Swift.Error>) -> Bool in
                // JMESPath expression: "DBInstances[].DBInstanceStatus"
                // JMESPath comparator: "anyStringEquals"
                // JMESPath expected value: "modifying"
                guard case .success(let output) = result else { return false }
                let dbInstances = output.dbInstances
                let projection: [Swift.String]? = dbInstances?.compactMap { original in
                    let dbInstanceStatus = original.dbInstanceStatus
                    return dbInstanceStatus
                }
                return projection?.contains(where: { ClientRuntime.JMESUtils.compare($0, ==, "modifying") }) ?? false
            }),
            .init(state: .failure, matcher: { (input: DescribeDBInstancesInput, result: Swift.Result<DescribeDBInstancesOutput, Swift.Error>) -> Bool in
                // JMESPath expression: "DBInstances[].DBInstanceStatus"
                // JMESPath comparator: "anyStringEquals"
                // JMESPath expected value: "rebooting"
                guard case .success(let output) = result else { return false }
                let dbInstances = output.dbInstances
                let projection: [Swift.String]? = dbInstances?.compactMap { original in
                    let dbInstanceStatus = original.dbInstanceStatus
                    return dbInstanceStatus
                }
                return projection?.contains(where: { ClientRuntime.JMESUtils.compare($0, ==, "rebooting") }) ?? false
            }),
            .init(state: .failure, matcher: { (input: DescribeDBInstancesInput, result: Swift.Result<DescribeDBInstancesOutput, Swift.Error>) -> Bool in
                // JMESPath expression: "DBInstances[].DBInstanceStatus"
                // JMESPath comparator: "anyStringEquals"
                // JMESPath expected value: "resetting-master-credentials"
                guard case .success(let output) = result else { return false }
                let dbInstances = output.dbInstances
                let projection: [Swift.String]? = dbInstances?.compactMap { original in
                    let dbInstanceStatus = original.dbInstanceStatus
                    return dbInstanceStatus
                }
                return projection?.contains(where: { ClientRuntime.JMESUtils.compare($0, ==, "resetting-master-credentials") }) ?? false
            }),
        ]
        return try ClientRuntime.WaiterConfiguration<DescribeDBInstancesInput, DescribeDBInstancesOutput>(acceptors: acceptors, minDelay: 30.0, maxDelay: 120.0)
    }

    /// Initiates waiting for the DBInstanceDeleted event on the describeDBInstances operation.
    /// The operation will be tried and (if necessary) retried until the wait succeeds, fails, or times out.
    /// Returns a `WaiterOutcome` asynchronously on waiter success, throws an error asynchronously on
    /// waiter failure or timeout.
    /// - Parameters:
    ///   - options: `WaiterOptions` to be used to configure this wait.
    ///   - input: The `DescribeDBInstancesInput` object to be used as a parameter when performing the operation.
    /// - Returns: A `WaiterOutcome` with the result of the final, successful performance of the operation.
    /// - Throws: `WaiterFailureError` if the waiter fails due to matching an `Acceptor` with state `failure`
    /// or there is an error not handled by any `Acceptor.`
    /// `WaiterTimeoutError` if the waiter times out.
    public func waitUntilDBInstanceDeleted(options: ClientRuntime.WaiterOptions, input: DescribeDBInstancesInput) async throws -> ClientRuntime.WaiterOutcome<DescribeDBInstancesOutput> {
        let waiter = ClientRuntime.Waiter(config: try Self.dbInstanceDeletedWaiterConfig(), operation: self.describeDBInstances(input:))
        return try await waiter.waitUntil(options: options, input: input)
    }

    static func dbSnapshotAvailableWaiterConfig() throws -> ClientRuntime.WaiterConfiguration<DescribeDBSnapshotsInput, DescribeDBSnapshotsOutput> {
        let acceptors: [ClientRuntime.WaiterConfiguration<DescribeDBSnapshotsInput, DescribeDBSnapshotsOutput>.Acceptor] = [
            .init(state: .success, matcher: { (input: DescribeDBSnapshotsInput, result: Swift.Result<DescribeDBSnapshotsOutput, Swift.Error>) -> Bool in
                // JMESPath expression: "DBSnapshots[].Status"
                // JMESPath comparator: "allStringEquals"
                // JMESPath expected value: "available"
                guard case .success(let output) = result else { return false }
                let dbSnapshots = output.dbSnapshots
                let projection: [Swift.String]? = dbSnapshots?.compactMap { original in
                    let status = original.status
                    return status
                }
                return (projection?.count ?? 0) > 1 && (projection?.allSatisfy { ClientRuntime.JMESUtils.compare($0, ==, "available") } ?? false)
            }),
            .init(state: .failure, matcher: { (input: DescribeDBSnapshotsInput, result: Swift.Result<DescribeDBSnapshotsOutput, Swift.Error>) -> Bool in
                // JMESPath expression: "DBSnapshots[].Status"
                // JMESPath comparator: "anyStringEquals"
                // JMESPath expected value: "deleted"
                guard case .success(let output) = result else { return false }
                let dbSnapshots = output.dbSnapshots
                let projection: [Swift.String]? = dbSnapshots?.compactMap { original in
                    let status = original.status
                    return status
                }
                return projection?.contains(where: { ClientRuntime.JMESUtils.compare($0, ==, "deleted") }) ?? false
            }),
            .init(state: .failure, matcher: { (input: DescribeDBSnapshotsInput, result: Swift.Result<DescribeDBSnapshotsOutput, Swift.Error>) -> Bool in
                // JMESPath expression: "DBSnapshots[].Status"
                // JMESPath comparator: "anyStringEquals"
                // JMESPath expected value: "deleting"
                guard case .success(let output) = result else { return false }
                let dbSnapshots = output.dbSnapshots
                let projection: [Swift.String]? = dbSnapshots?.compactMap { original in
                    let status = original.status
                    return status
                }
                return projection?.contains(where: { ClientRuntime.JMESUtils.compare($0, ==, "deleting") }) ?? false
            }),
            .init(state: .failure, matcher: { (input: DescribeDBSnapshotsInput, result: Swift.Result<DescribeDBSnapshotsOutput, Swift.Error>) -> Bool in
                // JMESPath expression: "DBSnapshots[].Status"
                // JMESPath comparator: "anyStringEquals"
                // JMESPath expected value: "failed"
                guard case .success(let output) = result else { return false }
                let dbSnapshots = output.dbSnapshots
                let projection: [Swift.String]? = dbSnapshots?.compactMap { original in
                    let status = original.status
                    return status
                }
                return projection?.contains(where: { ClientRuntime.JMESUtils.compare($0, ==, "failed") }) ?? false
            }),
            .init(state: .failure, matcher: { (input: DescribeDBSnapshotsInput, result: Swift.Result<DescribeDBSnapshotsOutput, Swift.Error>) -> Bool in
                // JMESPath expression: "DBSnapshots[].Status"
                // JMESPath comparator: "anyStringEquals"
                // JMESPath expected value: "incompatible-restore"
                guard case .success(let output) = result else { return false }
                let dbSnapshots = output.dbSnapshots
                let projection: [Swift.String]? = dbSnapshots?.compactMap { original in
                    let status = original.status
                    return status
                }
                return projection?.contains(where: { ClientRuntime.JMESUtils.compare($0, ==, "incompatible-restore") }) ?? false
            }),
            .init(state: .failure, matcher: { (input: DescribeDBSnapshotsInput, result: Swift.Result<DescribeDBSnapshotsOutput, Swift.Error>) -> Bool in
                // JMESPath expression: "DBSnapshots[].Status"
                // JMESPath comparator: "anyStringEquals"
                // JMESPath expected value: "incompatible-parameters"
                guard case .success(let output) = result else { return false }
                let dbSnapshots = output.dbSnapshots
                let projection: [Swift.String]? = dbSnapshots?.compactMap { original in
                    let status = original.status
                    return status
                }
                return projection?.contains(where: { ClientRuntime.JMESUtils.compare($0, ==, "incompatible-parameters") }) ?? false
            }),
        ]
        return try ClientRuntime.WaiterConfiguration<DescribeDBSnapshotsInput, DescribeDBSnapshotsOutput>(acceptors: acceptors, minDelay: 30.0, maxDelay: 120.0)
    }

    /// Initiates waiting for the DBSnapshotAvailable event on the describeDBSnapshots operation.
    /// The operation will be tried and (if necessary) retried until the wait succeeds, fails, or times out.
    /// Returns a `WaiterOutcome` asynchronously on waiter success, throws an error asynchronously on
    /// waiter failure or timeout.
    /// - Parameters:
    ///   - options: `WaiterOptions` to be used to configure this wait.
    ///   - input: The `DescribeDBSnapshotsInput` object to be used as a parameter when performing the operation.
    /// - Returns: A `WaiterOutcome` with the result of the final, successful performance of the operation.
    /// - Throws: `WaiterFailureError` if the waiter fails due to matching an `Acceptor` with state `failure`
    /// or there is an error not handled by any `Acceptor.`
    /// `WaiterTimeoutError` if the waiter times out.
    public func waitUntilDBSnapshotAvailable(options: ClientRuntime.WaiterOptions, input: DescribeDBSnapshotsInput) async throws -> ClientRuntime.WaiterOutcome<DescribeDBSnapshotsOutput> {
        let waiter = ClientRuntime.Waiter(config: try Self.dbSnapshotAvailableWaiterConfig(), operation: self.describeDBSnapshots(input:))
        return try await waiter.waitUntil(options: options, input: input)
    }

    static func dbSnapshotDeletedWaiterConfig() throws -> ClientRuntime.WaiterConfiguration<DescribeDBSnapshotsInput, DescribeDBSnapshotsOutput> {
        let acceptors: [ClientRuntime.WaiterConfiguration<DescribeDBSnapshotsInput, DescribeDBSnapshotsOutput>.Acceptor] = [
            .init(state: .success, matcher: { (input: DescribeDBSnapshotsInput, result: Swift.Result<DescribeDBSnapshotsOutput, Swift.Error>) -> Bool in
                // JMESPath expression: "length(DBSnapshots) == `0`"
                // JMESPath comparator: "booleanEquals"
                // JMESPath expected value: "true"
                guard case .success(let output) = result else { return false }
                let dbSnapshots = output.dbSnapshots
                let count = Double(dbSnapshots?.count ?? 0)
                let number = Double(0.0)
                let comparison = JMESUtils.compare(count, ==, number)
                return ClientRuntime.JMESUtils.compare(comparison, ==, true)
            }),
            .init(state: .success, matcher: { (input: DescribeDBSnapshotsInput, result: Swift.Result<DescribeDBSnapshotsOutput, Swift.Error>) -> Bool in
                guard case .failure(let error) = result else { return false }
                return (error as? ClientRuntime.ServiceError)?.typeName == "DBSnapshotNotFound"
            }),
            .init(state: .failure, matcher: { (input: DescribeDBSnapshotsInput, result: Swift.Result<DescribeDBSnapshotsOutput, Swift.Error>) -> Bool in
                // JMESPath expression: "DBSnapshots[].Status"
                // JMESPath comparator: "anyStringEquals"
                // JMESPath expected value: "creating"
                guard case .success(let output) = result else { return false }
                let dbSnapshots = output.dbSnapshots
                let projection: [Swift.String]? = dbSnapshots?.compactMap { original in
                    let status = original.status
                    return status
                }
                return projection?.contains(where: { ClientRuntime.JMESUtils.compare($0, ==, "creating") }) ?? false
            }),
            .init(state: .failure, matcher: { (input: DescribeDBSnapshotsInput, result: Swift.Result<DescribeDBSnapshotsOutput, Swift.Error>) -> Bool in
                // JMESPath expression: "DBSnapshots[].Status"
                // JMESPath comparator: "anyStringEquals"
                // JMESPath expected value: "modifying"
                guard case .success(let output) = result else { return false }
                let dbSnapshots = output.dbSnapshots
                let projection: [Swift.String]? = dbSnapshots?.compactMap { original in
                    let status = original.status
                    return status
                }
                return projection?.contains(where: { ClientRuntime.JMESUtils.compare($0, ==, "modifying") }) ?? false
            }),
            .init(state: .failure, matcher: { (input: DescribeDBSnapshotsInput, result: Swift.Result<DescribeDBSnapshotsOutput, Swift.Error>) -> Bool in
                // JMESPath expression: "DBSnapshots[].Status"
                // JMESPath comparator: "anyStringEquals"
                // JMESPath expected value: "rebooting"
                guard case .success(let output) = result else { return false }
                let dbSnapshots = output.dbSnapshots
                let projection: [Swift.String]? = dbSnapshots?.compactMap { original in
                    let status = original.status
                    return status
                }
                return projection?.contains(where: { ClientRuntime.JMESUtils.compare($0, ==, "rebooting") }) ?? false
            }),
            .init(state: .failure, matcher: { (input: DescribeDBSnapshotsInput, result: Swift.Result<DescribeDBSnapshotsOutput, Swift.Error>) -> Bool in
                // JMESPath expression: "DBSnapshots[].Status"
                // JMESPath comparator: "anyStringEquals"
                // JMESPath expected value: "resetting-master-credentials"
                guard case .success(let output) = result else { return false }
                let dbSnapshots = output.dbSnapshots
                let projection: [Swift.String]? = dbSnapshots?.compactMap { original in
                    let status = original.status
                    return status
                }
                return projection?.contains(where: { ClientRuntime.JMESUtils.compare($0, ==, "resetting-master-credentials") }) ?? false
            }),
        ]
        return try ClientRuntime.WaiterConfiguration<DescribeDBSnapshotsInput, DescribeDBSnapshotsOutput>(acceptors: acceptors, minDelay: 30.0, maxDelay: 120.0)
    }

    /// Initiates waiting for the DBSnapshotDeleted event on the describeDBSnapshots operation.
    /// The operation will be tried and (if necessary) retried until the wait succeeds, fails, or times out.
    /// Returns a `WaiterOutcome` asynchronously on waiter success, throws an error asynchronously on
    /// waiter failure or timeout.
    /// - Parameters:
    ///   - options: `WaiterOptions` to be used to configure this wait.
    ///   - input: The `DescribeDBSnapshotsInput` object to be used as a parameter when performing the operation.
    /// - Returns: A `WaiterOutcome` with the result of the final, successful performance of the operation.
    /// - Throws: `WaiterFailureError` if the waiter fails due to matching an `Acceptor` with state `failure`
    /// or there is an error not handled by any `Acceptor.`
    /// `WaiterTimeoutError` if the waiter times out.
    public func waitUntilDBSnapshotDeleted(options: ClientRuntime.WaiterOptions, input: DescribeDBSnapshotsInput) async throws -> ClientRuntime.WaiterOutcome<DescribeDBSnapshotsOutput> {
        let waiter = ClientRuntime.Waiter(config: try Self.dbSnapshotDeletedWaiterConfig(), operation: self.describeDBSnapshots(input:))
        return try await waiter.waitUntil(options: options, input: input)
    }

    static func tenantDatabaseAvailableWaiterConfig() throws -> ClientRuntime.WaiterConfiguration<DescribeTenantDatabasesInput, DescribeTenantDatabasesOutput> {
        let acceptors: [ClientRuntime.WaiterConfiguration<DescribeTenantDatabasesInput, DescribeTenantDatabasesOutput>.Acceptor] = [
            .init(state: .success, matcher: { (input: DescribeTenantDatabasesInput, result: Swift.Result<DescribeTenantDatabasesOutput, Swift.Error>) -> Bool in
                // JMESPath expression: "TenantDatabases[].Status"
                // JMESPath comparator: "allStringEquals"
                // JMESPath expected value: "available"
                guard case .success(let output) = result else { return false }
                let tenantDatabases = output.tenantDatabases
                let projection: [Swift.String]? = tenantDatabases?.compactMap { original in
                    let status = original.status
                    return status
                }
                return (projection?.count ?? 0) > 1 && (projection?.allSatisfy { ClientRuntime.JMESUtils.compare($0, ==, "available") } ?? false)
            }),
            .init(state: .failure, matcher: { (input: DescribeTenantDatabasesInput, result: Swift.Result<DescribeTenantDatabasesOutput, Swift.Error>) -> Bool in
                // JMESPath expression: "TenantDatabases[].Status"
                // JMESPath comparator: "anyStringEquals"
                // JMESPath expected value: "deleted"
                guard case .success(let output) = result else { return false }
                let tenantDatabases = output.tenantDatabases
                let projection: [Swift.String]? = tenantDatabases?.compactMap { original in
                    let status = original.status
                    return status
                }
                return projection?.contains(where: { ClientRuntime.JMESUtils.compare($0, ==, "deleted") }) ?? false
            }),
            .init(state: .failure, matcher: { (input: DescribeTenantDatabasesInput, result: Swift.Result<DescribeTenantDatabasesOutput, Swift.Error>) -> Bool in
                // JMESPath expression: "TenantDatabases[].Status"
                // JMESPath comparator: "anyStringEquals"
                // JMESPath expected value: "incompatible-parameters"
                guard case .success(let output) = result else { return false }
                let tenantDatabases = output.tenantDatabases
                let projection: [Swift.String]? = tenantDatabases?.compactMap { original in
                    let status = original.status
                    return status
                }
                return projection?.contains(where: { ClientRuntime.JMESUtils.compare($0, ==, "incompatible-parameters") }) ?? false
            }),
            .init(state: .failure, matcher: { (input: DescribeTenantDatabasesInput, result: Swift.Result<DescribeTenantDatabasesOutput, Swift.Error>) -> Bool in
                // JMESPath expression: "TenantDatabases[].Status"
                // JMESPath comparator: "anyStringEquals"
                // JMESPath expected value: "incompatible-restore"
                guard case .success(let output) = result else { return false }
                let tenantDatabases = output.tenantDatabases
                let projection: [Swift.String]? = tenantDatabases?.compactMap { original in
                    let status = original.status
                    return status
                }
                return projection?.contains(where: { ClientRuntime.JMESUtils.compare($0, ==, "incompatible-restore") }) ?? false
            }),
        ]
        return try ClientRuntime.WaiterConfiguration<DescribeTenantDatabasesInput, DescribeTenantDatabasesOutput>(acceptors: acceptors, minDelay: 30.0, maxDelay: 120.0)
    }

    /// Initiates waiting for the TenantDatabaseAvailable event on the describeTenantDatabases operation.
    /// The operation will be tried and (if necessary) retried until the wait succeeds, fails, or times out.
    /// Returns a `WaiterOutcome` asynchronously on waiter success, throws an error asynchronously on
    /// waiter failure or timeout.
    /// - Parameters:
    ///   - options: `WaiterOptions` to be used to configure this wait.
    ///   - input: The `DescribeTenantDatabasesInput` object to be used as a parameter when performing the operation.
    /// - Returns: A `WaiterOutcome` with the result of the final, successful performance of the operation.
    /// - Throws: `WaiterFailureError` if the waiter fails due to matching an `Acceptor` with state `failure`
    /// or there is an error not handled by any `Acceptor.`
    /// `WaiterTimeoutError` if the waiter times out.
    public func waitUntilTenantDatabaseAvailable(options: ClientRuntime.WaiterOptions, input: DescribeTenantDatabasesInput) async throws -> ClientRuntime.WaiterOutcome<DescribeTenantDatabasesOutput> {
        let waiter = ClientRuntime.Waiter(config: try Self.tenantDatabaseAvailableWaiterConfig(), operation: self.describeTenantDatabases(input:))
        return try await waiter.waitUntil(options: options, input: input)
    }

    static func tenantDatabaseDeletedWaiterConfig() throws -> ClientRuntime.WaiterConfiguration<DescribeTenantDatabasesInput, DescribeTenantDatabasesOutput> {
        let acceptors: [ClientRuntime.WaiterConfiguration<DescribeTenantDatabasesInput, DescribeTenantDatabasesOutput>.Acceptor] = [
            .init(state: .success, matcher: { (input: DescribeTenantDatabasesInput, result: Swift.Result<DescribeTenantDatabasesOutput, Swift.Error>) -> Bool in
                // JMESPath expression: "length(TenantDatabases) == `0`"
                // JMESPath comparator: "booleanEquals"
                // JMESPath expected value: "true"
                guard case .success(let output) = result else { return false }
                let tenantDatabases = output.tenantDatabases
                let count = Double(tenantDatabases?.count ?? 0)
                let number = Double(0.0)
                let comparison = JMESUtils.compare(count, ==, number)
                return ClientRuntime.JMESUtils.compare(comparison, ==, true)
            }),
            .init(state: .success, matcher: { (input: DescribeTenantDatabasesInput, result: Swift.Result<DescribeTenantDatabasesOutput, Swift.Error>) -> Bool in
                guard case .failure(let error) = result else { return false }
                return (error as? ClientRuntime.ServiceError)?.typeName == "DBInstanceNotFoundFault"
            }),
        ]
        return try ClientRuntime.WaiterConfiguration<DescribeTenantDatabasesInput, DescribeTenantDatabasesOutput>(acceptors: acceptors, minDelay: 30.0, maxDelay: 120.0)
    }

    /// Initiates waiting for the TenantDatabaseDeleted event on the describeTenantDatabases operation.
    /// The operation will be tried and (if necessary) retried until the wait succeeds, fails, or times out.
    /// Returns a `WaiterOutcome` asynchronously on waiter success, throws an error asynchronously on
    /// waiter failure or timeout.
    /// - Parameters:
    ///   - options: `WaiterOptions` to be used to configure this wait.
    ///   - input: The `DescribeTenantDatabasesInput` object to be used as a parameter when performing the operation.
    /// - Returns: A `WaiterOutcome` with the result of the final, successful performance of the operation.
    /// - Throws: `WaiterFailureError` if the waiter fails due to matching an `Acceptor` with state `failure`
    /// or there is an error not handled by any `Acceptor.`
    /// `WaiterTimeoutError` if the waiter times out.
    public func waitUntilTenantDatabaseDeleted(options: ClientRuntime.WaiterOptions, input: DescribeTenantDatabasesInput) async throws -> ClientRuntime.WaiterOutcome<DescribeTenantDatabasesOutput> {
        let waiter = ClientRuntime.Waiter(config: try Self.tenantDatabaseDeletedWaiterConfig(), operation: self.describeTenantDatabases(input:))
        return try await waiter.waitUntil(options: options, input: input)
    }
}
