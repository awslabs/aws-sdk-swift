// Code generated by smithy-swift-codegen. DO NOT EDIT!
import AWSClientRuntime
import ClientRuntime

extension AddPermissionInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let awsAccountIds = awsAccountIds {
            if !awsAccountIds.isEmpty {
                for (index0, string0) in awsAccountIds.enumerated() {
                    var awsAccountIdsContainer0 = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("AWSAccountId.\(index0.advanced(by: 1))"))
                    try awsAccountIdsContainer0.encode(string0, forKey: ClientRuntime.Key(""))
                }
            }
            else {
                var awsAccountIdsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("AWSAccountId"))
                try awsAccountIdsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let actions = actions {
            if !actions.isEmpty {
                for (index0, string0) in actions.enumerated() {
                    var actionsContainer0 = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("ActionName.\(index0.advanced(by: 1))"))
                    try actionsContainer0.encode(string0, forKey: ClientRuntime.Key(""))
                }
            }
            else {
                var actionsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("ActionName"))
                try actionsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let label = label {
            try container.encode(label, forKey: ClientRuntime.Key("Label"))
        }
        if let queueUrl = queueUrl {
            try container.encode(queueUrl, forKey: ClientRuntime.Key("QueueUrl"))
        }
        try container.encode("AddPermission", forKey:ClientRuntime.Key("Action"))
        try container.encode("2012-11-05", forKey:ClientRuntime.Key("Version"))
    }
}

extension AddPermissionInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

///
public struct AddPermissionInput: Swift.Equatable {
    /// The action the client wants to allow for the specified principal. Valid values: the name of any action or *. For more information about these actions, see [Overview of Managing Access Permissions to Your Amazon Simple Queue Service Resource](https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-overview-of-managing-access.html) in the Amazon SQS Developer Guide. Specifying SendMessage, DeleteMessage, or ChangeMessageVisibility for ActionName.n also grants permissions for the corresponding batch versions of those actions: SendMessageBatch, DeleteMessageBatch, and ChangeMessageVisibilityBatch.
    /// This member is required.
    public var actions: [Swift.String]?
    /// The Amazon Web Services account numbers of the [principals](https://docs.aws.amazon.com/general/latest/gr/glos-chap.html#P) who are to receive permission. For information about locating the Amazon Web Services account identification, see [Your Amazon Web Services Identifiers](https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-making-api-requests.html#sqs-api-request-authentication) in the Amazon SQS Developer Guide.
    /// This member is required.
    public var awsAccountIds: [Swift.String]?
    /// The unique identification of the permission you're setting (for example, AliceSendMessage). Maximum 80 characters. Allowed characters include alphanumeric characters, hyphens (-), and underscores (_).
    /// This member is required.
    public var label: Swift.String?
    /// The URL of the Amazon SQS queue to which permissions are added. Queue URLs and names are case-sensitive.
    /// This member is required.
    public var queueUrl: Swift.String?

    public init(
        actions: [Swift.String]? = nil,
        awsAccountIds: [Swift.String]? = nil,
        label: Swift.String? = nil,
        queueUrl: Swift.String? = nil
    )
    {
        self.actions = actions
        self.awsAccountIds = awsAccountIds
        self.label = label
        self.queueUrl = queueUrl
    }
}

struct AddPermissionInputBody: Swift.Equatable {
    let queueUrl: Swift.String?
    let label: Swift.String?
    let awsAccountIds: [Swift.String]?
    let actions: [Swift.String]?
}

extension AddPermissionInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case awsAccountIds = "AWSAccountId"
        case actions = "ActionName"
        case label = "Label"
        case queueUrl = "QueueUrl"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let queueUrlDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .queueUrl)
        queueUrl = queueUrlDecoded
        let labelDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .label)
        label = labelDecoded
        if containerValues.contains(.awsAccountIds) {
            let awsAccountIdsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CodingKeys.self, forKey: .awsAccountIds)
            if awsAccountIdsWrappedContainer != nil {
                let awsAccountIdsContainer = try containerValues.decodeIfPresent([Swift.String].self, forKey: .awsAccountIds)
                var awsAccountIdsBuffer:[Swift.String]? = nil
                if let awsAccountIdsContainer = awsAccountIdsContainer {
                    awsAccountIdsBuffer = [Swift.String]()
                    for stringContainer0 in awsAccountIdsContainer {
                        awsAccountIdsBuffer?.append(stringContainer0)
                    }
                }
                awsAccountIds = awsAccountIdsBuffer
            } else {
                awsAccountIds = []
            }
        } else {
            awsAccountIds = nil
        }
        if containerValues.contains(.actions) {
            let actionsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CodingKeys.self, forKey: .actions)
            if actionsWrappedContainer != nil {
                let actionsContainer = try containerValues.decodeIfPresent([Swift.String].self, forKey: .actions)
                var actionsBuffer:[Swift.String]? = nil
                if let actionsContainer = actionsContainer {
                    actionsBuffer = [Swift.String]()
                    for stringContainer0 in actionsContainer {
                        actionsBuffer?.append(stringContainer0)
                    }
                }
                actions = actionsBuffer
            } else {
                actions = []
            }
        } else {
            actions = nil
        }
    }
}

extension AddPermissionOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
    }
}

public struct AddPermissionOutput: Swift.Equatable {

    public init() { }
}

enum AddPermissionOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restXMLError = try await AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        switch restXMLError.errorCode {
            case "OverLimit": return try await OverLimit(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restXMLError.message, requestID: restXMLError.requestId, typeName: restXMLError.errorCode)
        }
    }
}

extension BatchEntryIdsNotDistinct {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws {
        self.httpResponse = httpResponse
        self.requestID = requestID
        self.message = message
    }
}

/// Two or more batch entries in the request have the same Id.
public struct BatchEntryIdsNotDistinct: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {
    public static var typeName: Swift.String { "AWS.SimpleQueueService.BatchEntryIdsNotDistinct" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init() { }
}

extension BatchRequestTooLong {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws {
        self.httpResponse = httpResponse
        self.requestID = requestID
        self.message = message
    }
}

/// The length of all the messages put together is more than the limit.
public struct BatchRequestTooLong: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {
    public static var typeName: Swift.String { "AWS.SimpleQueueService.BatchRequestTooLong" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init() { }
}

extension SQSClientTypes.BatchResultErrorEntry: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case code = "Code"
        case id = "Id"
        case message = "Message"
        case senderFault = "SenderFault"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let code = code {
            try container.encode(code, forKey: ClientRuntime.Key("Code"))
        }
        if let id = id {
            try container.encode(id, forKey: ClientRuntime.Key("Id"))
        }
        if let message = message {
            try container.encode(message, forKey: ClientRuntime.Key("Message"))
        }
        if senderFault != false {
            try container.encode(senderFault, forKey: ClientRuntime.Key("SenderFault"))
        }
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
        let senderFaultDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .senderFault) ?? false
        senderFault = senderFaultDecoded
        let codeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .code)
        code = codeDecoded
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension SQSClientTypes {
    /// Gives a detailed description of the result of an action on each entry in the request.
    public struct BatchResultErrorEntry: Swift.Equatable {
        /// An error code representing why the action failed on this entry.
        /// This member is required.
        public var code: Swift.String?
        /// The Id of an entry in a batch request.
        /// This member is required.
        public var id: Swift.String?
        /// A message explaining why the action failed on this entry.
        public var message: Swift.String?
        /// Specifies whether the error happened due to the caller of the batch API action.
        /// This member is required.
        public var senderFault: Swift.Bool

        public init(
            code: Swift.String? = nil,
            id: Swift.String? = nil,
            message: Swift.String? = nil,
            senderFault: Swift.Bool = false
        )
        {
            self.code = code
            self.id = id
            self.message = message
            self.senderFault = senderFault
        }
    }

}

extension CancelMessageMoveTaskInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let taskHandle = taskHandle {
            try container.encode(taskHandle, forKey: ClientRuntime.Key("TaskHandle"))
        }
        try container.encode("CancelMessageMoveTask", forKey:ClientRuntime.Key("Action"))
        try container.encode("2012-11-05", forKey:ClientRuntime.Key("Version"))
    }
}

extension CancelMessageMoveTaskInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct CancelMessageMoveTaskInput: Swift.Equatable {
    /// An identifier associated with a message movement task.
    /// This member is required.
    public var taskHandle: Swift.String?

    public init(
        taskHandle: Swift.String? = nil
    )
    {
        self.taskHandle = taskHandle
    }
}

struct CancelMessageMoveTaskInputBody: Swift.Equatable {
    let taskHandle: Swift.String?
}

extension CancelMessageMoveTaskInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case taskHandle = "TaskHandle"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let taskHandleDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .taskHandle)
        taskHandle = taskHandleDecoded
    }
}

extension CancelMessageMoveTaskOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: CancelMessageMoveTaskOutputBody = try responseDecoder.decode(responseBody: data)
            self.approximateNumberOfMessagesMoved = output.approximateNumberOfMessagesMoved
        } else {
            self.approximateNumberOfMessagesMoved = 0
        }
    }
}

public struct CancelMessageMoveTaskOutput: Swift.Equatable {
    /// The approximate number of messages already moved to the destination queue.
    public var approximateNumberOfMessagesMoved: Swift.Int

    public init(
        approximateNumberOfMessagesMoved: Swift.Int = 0
    )
    {
        self.approximateNumberOfMessagesMoved = approximateNumberOfMessagesMoved
    }
}

struct CancelMessageMoveTaskOutputBody: Swift.Equatable {
    let approximateNumberOfMessagesMoved: Swift.Int
}

extension CancelMessageMoveTaskOutputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case approximateNumberOfMessagesMoved = "ApproximateNumberOfMessagesMoved"
    }

    public init(from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("CancelMessageMoveTaskResult"))
        let approximateNumberOfMessagesMovedDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .approximateNumberOfMessagesMoved) ?? 0
        approximateNumberOfMessagesMoved = approximateNumberOfMessagesMovedDecoded
    }
}

enum CancelMessageMoveTaskOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restXMLError = try await AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        switch restXMLError.errorCode {
            case "ResourceNotFoundException": return try await ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "AWS.SimpleQueueService.UnsupportedOperation": return try await UnsupportedOperation(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restXMLError.message, requestID: restXMLError.requestId, typeName: restXMLError.errorCode)
        }
    }
}

extension ChangeMessageVisibilityBatchInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let entries = entries {
            if !entries.isEmpty {
                for (index0, changemessagevisibilitybatchrequestentry0) in entries.enumerated() {
                    var entriesContainer0 = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("ChangeMessageVisibilityBatchRequestEntry.\(index0.advanced(by: 1))"))
                    try entriesContainer0.encode(changemessagevisibilitybatchrequestentry0, forKey: ClientRuntime.Key(""))
                }
            }
            else {
                var entriesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("ChangeMessageVisibilityBatchRequestEntry"))
                try entriesContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let queueUrl = queueUrl {
            try container.encode(queueUrl, forKey: ClientRuntime.Key("QueueUrl"))
        }
        try container.encode("ChangeMessageVisibilityBatch", forKey:ClientRuntime.Key("Action"))
        try container.encode("2012-11-05", forKey:ClientRuntime.Key("Version"))
    }
}

extension ChangeMessageVisibilityBatchInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

///
public struct ChangeMessageVisibilityBatchInput: Swift.Equatable {
    /// Lists the receipt handles of the messages for which the visibility timeout must be changed.
    /// This member is required.
    public var entries: [SQSClientTypes.ChangeMessageVisibilityBatchRequestEntry]?
    /// The URL of the Amazon SQS queue whose messages' visibility is changed. Queue URLs and names are case-sensitive.
    /// This member is required.
    public var queueUrl: Swift.String?

    public init(
        entries: [SQSClientTypes.ChangeMessageVisibilityBatchRequestEntry]? = nil,
        queueUrl: Swift.String? = nil
    )
    {
        self.entries = entries
        self.queueUrl = queueUrl
    }
}

struct ChangeMessageVisibilityBatchInputBody: Swift.Equatable {
    let queueUrl: Swift.String?
    let entries: [SQSClientTypes.ChangeMessageVisibilityBatchRequestEntry]?
}

extension ChangeMessageVisibilityBatchInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case entries = "ChangeMessageVisibilityBatchRequestEntry"
        case queueUrl = "QueueUrl"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let queueUrlDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .queueUrl)
        queueUrl = queueUrlDecoded
        if containerValues.contains(.entries) {
            let entriesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CodingKeys.self, forKey: .entries)
            if entriesWrappedContainer != nil {
                let entriesContainer = try containerValues.decodeIfPresent([SQSClientTypes.ChangeMessageVisibilityBatchRequestEntry].self, forKey: .entries)
                var entriesBuffer:[SQSClientTypes.ChangeMessageVisibilityBatchRequestEntry]? = nil
                if let entriesContainer = entriesContainer {
                    entriesBuffer = [SQSClientTypes.ChangeMessageVisibilityBatchRequestEntry]()
                    for structureContainer0 in entriesContainer {
                        entriesBuffer?.append(structureContainer0)
                    }
                }
                entries = entriesBuffer
            } else {
                entries = []
            }
        } else {
            entries = nil
        }
    }
}

extension ChangeMessageVisibilityBatchOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: ChangeMessageVisibilityBatchOutputBody = try responseDecoder.decode(responseBody: data)
            self.failed = output.failed
            self.successful = output.successful
        } else {
            self.failed = nil
            self.successful = nil
        }
    }
}

/// For each message in the batch, the response contains a [ChangeMessageVisibilityBatchResultEntry] tag if the message succeeds or a [BatchResultErrorEntry] tag if the message fails.
public struct ChangeMessageVisibilityBatchOutput: Swift.Equatable {
    /// A list of [BatchResultErrorEntry] items.
    /// This member is required.
    public var failed: [SQSClientTypes.BatchResultErrorEntry]?
    /// A list of [ChangeMessageVisibilityBatchResultEntry] items.
    /// This member is required.
    public var successful: [SQSClientTypes.ChangeMessageVisibilityBatchResultEntry]?

    public init(
        failed: [SQSClientTypes.BatchResultErrorEntry]? = nil,
        successful: [SQSClientTypes.ChangeMessageVisibilityBatchResultEntry]? = nil
    )
    {
        self.failed = failed
        self.successful = successful
    }
}

struct ChangeMessageVisibilityBatchOutputBody: Swift.Equatable {
    let successful: [SQSClientTypes.ChangeMessageVisibilityBatchResultEntry]?
    let failed: [SQSClientTypes.BatchResultErrorEntry]?
}

extension ChangeMessageVisibilityBatchOutputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case failed = "BatchResultErrorEntry"
        case successful = "ChangeMessageVisibilityBatchResultEntry"
    }

    public init(from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("ChangeMessageVisibilityBatchResult"))
        if containerValues.contains(.successful) {
            let successfulWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CodingKeys.self, forKey: .successful)
            if successfulWrappedContainer != nil {
                let successfulContainer = try containerValues.decodeIfPresent([SQSClientTypes.ChangeMessageVisibilityBatchResultEntry].self, forKey: .successful)
                var successfulBuffer:[SQSClientTypes.ChangeMessageVisibilityBatchResultEntry]? = nil
                if let successfulContainer = successfulContainer {
                    successfulBuffer = [SQSClientTypes.ChangeMessageVisibilityBatchResultEntry]()
                    for structureContainer0 in successfulContainer {
                        successfulBuffer?.append(structureContainer0)
                    }
                }
                successful = successfulBuffer
            } else {
                successful = []
            }
        } else {
            successful = nil
        }
        if containerValues.contains(.failed) {
            let failedWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CodingKeys.self, forKey: .failed)
            if failedWrappedContainer != nil {
                let failedContainer = try containerValues.decodeIfPresent([SQSClientTypes.BatchResultErrorEntry].self, forKey: .failed)
                var failedBuffer:[SQSClientTypes.BatchResultErrorEntry]? = nil
                if let failedContainer = failedContainer {
                    failedBuffer = [SQSClientTypes.BatchResultErrorEntry]()
                    for structureContainer0 in failedContainer {
                        failedBuffer?.append(structureContainer0)
                    }
                }
                failed = failedBuffer
            } else {
                failed = []
            }
        } else {
            failed = nil
        }
    }
}

enum ChangeMessageVisibilityBatchOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restXMLError = try await AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        switch restXMLError.errorCode {
            case "AWS.SimpleQueueService.BatchEntryIdsNotDistinct": return try await BatchEntryIdsNotDistinct(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "AWS.SimpleQueueService.EmptyBatchRequest": return try await EmptyBatchRequest(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "AWS.SimpleQueueService.InvalidBatchEntryId": return try await InvalidBatchEntryId(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "AWS.SimpleQueueService.TooManyEntriesInBatchRequest": return try await TooManyEntriesInBatchRequest(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restXMLError.message, requestID: restXMLError.requestId, typeName: restXMLError.errorCode)
        }
    }
}

extension SQSClientTypes.ChangeMessageVisibilityBatchRequestEntry: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case id = "Id"
        case receiptHandle = "ReceiptHandle"
        case visibilityTimeout = "VisibilityTimeout"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let id = id {
            try container.encode(id, forKey: ClientRuntime.Key("Id"))
        }
        if let receiptHandle = receiptHandle {
            try container.encode(receiptHandle, forKey: ClientRuntime.Key("ReceiptHandle"))
        }
        if visibilityTimeout != 0 {
            try container.encode(visibilityTimeout, forKey: ClientRuntime.Key("VisibilityTimeout"))
        }
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
        let receiptHandleDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .receiptHandle)
        receiptHandle = receiptHandleDecoded
        let visibilityTimeoutDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .visibilityTimeout) ?? 0
        visibilityTimeout = visibilityTimeoutDecoded
    }
}

extension SQSClientTypes {
    /// Encloses a receipt handle and an entry ID for each message in [ChangeMessageVisibilityBatch].
    public struct ChangeMessageVisibilityBatchRequestEntry: Swift.Equatable {
        /// An identifier for this particular receipt handle used to communicate the result. The Ids of a batch request need to be unique within a request. This identifier can have up to 80 characters. The following characters are accepted: alphanumeric characters, hyphens(-), and underscores (_).
        /// This member is required.
        public var id: Swift.String?
        /// A receipt handle.
        /// This member is required.
        public var receiptHandle: Swift.String?
        /// The new value (in seconds) for the message's visibility timeout.
        public var visibilityTimeout: Swift.Int

        public init(
            id: Swift.String? = nil,
            receiptHandle: Swift.String? = nil,
            visibilityTimeout: Swift.Int = 0
        )
        {
            self.id = id
            self.receiptHandle = receiptHandle
            self.visibilityTimeout = visibilityTimeout
        }
    }

}

extension SQSClientTypes.ChangeMessageVisibilityBatchResultEntry: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case id = "Id"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let id = id {
            try container.encode(id, forKey: ClientRuntime.Key("Id"))
        }
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
    }
}

extension SQSClientTypes {
    /// Encloses the Id of an entry in [ChangeMessageVisibilityBatch].
    public struct ChangeMessageVisibilityBatchResultEntry: Swift.Equatable {
        /// Represents a message whose visibility timeout has been changed successfully.
        /// This member is required.
        public var id: Swift.String?

        public init(
            id: Swift.String? = nil
        )
        {
            self.id = id
        }
    }

}

extension ChangeMessageVisibilityInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let queueUrl = queueUrl {
            try container.encode(queueUrl, forKey: ClientRuntime.Key("QueueUrl"))
        }
        if let receiptHandle = receiptHandle {
            try container.encode(receiptHandle, forKey: ClientRuntime.Key("ReceiptHandle"))
        }
        if let visibilityTimeout = visibilityTimeout {
            try container.encode(visibilityTimeout, forKey: ClientRuntime.Key("VisibilityTimeout"))
        }
        try container.encode("ChangeMessageVisibility", forKey:ClientRuntime.Key("Action"))
        try container.encode("2012-11-05", forKey:ClientRuntime.Key("Version"))
    }
}

extension ChangeMessageVisibilityInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct ChangeMessageVisibilityInput: Swift.Equatable {
    /// The URL of the Amazon SQS queue whose message's visibility is changed. Queue URLs and names are case-sensitive.
    /// This member is required.
    public var queueUrl: Swift.String?
    /// The receipt handle associated with the message, whose visibility timeout is changed. This parameter is returned by the [ReceiveMessage] action.
    /// This member is required.
    public var receiptHandle: Swift.String?
    /// The new value for the message's visibility timeout (in seconds). Values range: 0 to 43200. Maximum: 12 hours.
    /// This member is required.
    public var visibilityTimeout: Swift.Int?

    public init(
        queueUrl: Swift.String? = nil,
        receiptHandle: Swift.String? = nil,
        visibilityTimeout: Swift.Int? = nil
    )
    {
        self.queueUrl = queueUrl
        self.receiptHandle = receiptHandle
        self.visibilityTimeout = visibilityTimeout
    }
}

struct ChangeMessageVisibilityInputBody: Swift.Equatable {
    let queueUrl: Swift.String?
    let receiptHandle: Swift.String?
    let visibilityTimeout: Swift.Int?
}

extension ChangeMessageVisibilityInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case queueUrl = "QueueUrl"
        case receiptHandle = "ReceiptHandle"
        case visibilityTimeout = "VisibilityTimeout"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let queueUrlDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .queueUrl)
        queueUrl = queueUrlDecoded
        let receiptHandleDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .receiptHandle)
        receiptHandle = receiptHandleDecoded
        let visibilityTimeoutDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .visibilityTimeout) ?? 0
        visibilityTimeout = visibilityTimeoutDecoded
    }
}

extension ChangeMessageVisibilityOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
    }
}

public struct ChangeMessageVisibilityOutput: Swift.Equatable {

    public init() { }
}

enum ChangeMessageVisibilityOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restXMLError = try await AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        switch restXMLError.errorCode {
            case "AWS.SimpleQueueService.MessageNotInflight": return try await MessageNotInflight(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "ReceiptHandleIsInvalid": return try await ReceiptHandleIsInvalid(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restXMLError.message, requestID: restXMLError.requestId, typeName: restXMLError.errorCode)
        }
    }
}

extension CreateQueueInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let attributes = attributes {
            if !attributes.isEmpty {
                for (index0, element0) in attributes.sorted(by: { $0.key < $1.key }).enumerated() {
                    let queueattributenameKey0 = element0.key
                    let stringValue0 = element0.value
                    var nestedContainer0 = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Attribute.\(index0.advanced(by: 1))"))
                    var keyContainer0 = nestedContainer0.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Name"))
                    try keyContainer0.encode(queueattributenameKey0, forKey: ClientRuntime.Key(""))
                    var valueContainer0 = nestedContainer0.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Value"))
                    try valueContainer0.encode(stringValue0, forKey: ClientRuntime.Key(""))
                }
            }
        }
        if let queueName = queueName {
            try container.encode(queueName, forKey: ClientRuntime.Key("QueueName"))
        }
        if let tags = tags {
            if !tags.isEmpty {
                for (index0, element0) in tags.sorted(by: { $0.key < $1.key }).enumerated() {
                    let tagkeyKey0 = element0.key
                    let tagvalueValue0 = element0.value
                    var nestedContainer0 = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Tag.\(index0.advanced(by: 1))"))
                    var keyContainer0 = nestedContainer0.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Key"))
                    try keyContainer0.encode(tagkeyKey0, forKey: ClientRuntime.Key(""))
                    var valueContainer0 = nestedContainer0.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Value"))
                    try valueContainer0.encode(tagvalueValue0, forKey: ClientRuntime.Key(""))
                }
            }
        }
        try container.encode("CreateQueue", forKey:ClientRuntime.Key("Action"))
        try container.encode("2012-11-05", forKey:ClientRuntime.Key("Version"))
    }
}

extension CreateQueueInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

///
public struct CreateQueueInput: Swift.Equatable {
    /// A map of attributes with their corresponding values. The following lists the names, descriptions, and values of the special request parameters that the CreateQueue action uses:
    ///
    /// * DelaySeconds – The length of time, in seconds, for which the delivery of all messages in the queue is delayed. Valid values: An integer from 0 to 900 seconds (15 minutes). Default: 0.
    ///
    /// * MaximumMessageSize – The limit of how many bytes a message can contain before Amazon SQS rejects it. Valid values: An integer from 1,024 bytes (1 KiB) to 262,144 bytes (256 KiB). Default: 262,144 (256 KiB).
    ///
    /// * MessageRetentionPeriod – The length of time, in seconds, for which Amazon SQS retains a message. Valid values: An integer from 60 seconds (1 minute) to 1,209,600 seconds (14 days). Default: 345,600 (4 days). When you change a queue's attributes, the change can take up to 60 seconds for most of the attributes to propagate throughout the Amazon SQS system. Changes made to the MessageRetentionPeriod attribute can take up to 15 minutes and will impact existing messages in the queue potentially causing them to be expired and deleted if the MessageRetentionPeriod is reduced below the age of existing messages.
    ///
    /// * Policy – The queue's policy. A valid Amazon Web Services policy. For more information about policy structure, see [Overview of Amazon Web Services IAM Policies](https://docs.aws.amazon.com/IAM/latest/UserGuide/PoliciesOverview.html) in the IAM User Guide.
    ///
    /// * ReceiveMessageWaitTimeSeconds – The length of time, in seconds, for which a [ReceiveMessage] action waits for a message to arrive. Valid values: An integer from 0 to 20 (seconds). Default: 0.
    ///
    /// * VisibilityTimeout – The visibility timeout for the queue, in seconds. Valid values: An integer from 0 to 43,200 (12 hours). Default: 30. For more information about the visibility timeout, see [Visibility Timeout](https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-visibility-timeout.html) in the Amazon SQS Developer Guide.
    ///
    ///
    /// The following attributes apply only to [dead-letter queues:](https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-dead-letter-queues.html)
    ///
    /// * RedrivePolicy – The string that includes the parameters for the dead-letter queue functionality of the source queue as a JSON object. The parameters are as follows:
    ///
    /// * deadLetterTargetArn – The Amazon Resource Name (ARN) of the dead-letter queue to which Amazon SQS moves messages after the value of maxReceiveCount is exceeded.
    ///
    /// * maxReceiveCount – The number of times a message is delivered to the source queue before being moved to the dead-letter queue. Default: 10. When the ReceiveCount for a message exceeds the maxReceiveCount for a queue, Amazon SQS moves the message to the dead-letter-queue.
    ///
    ///
    ///
    ///
    /// * RedriveAllowPolicy – The string that includes the parameters for the permissions for the dead-letter queue redrive permission and which source queues can specify dead-letter queues as a JSON object. The parameters are as follows:
    ///
    /// * redrivePermission – The permission type that defines which source queues can specify the current queue as the dead-letter queue. Valid values are:
    ///
    /// * allowAll – (Default) Any source queues in this Amazon Web Services account in the same Region can specify this queue as the dead-letter queue.
    ///
    /// * denyAll – No source queues can specify this queue as the dead-letter queue.
    ///
    /// * byQueue – Only queues specified by the sourceQueueArns parameter can specify this queue as the dead-letter queue.
    ///
    ///
    ///
    ///
    /// * sourceQueueArns – The Amazon Resource Names (ARN)s of the source queues that can specify this queue as the dead-letter queue and redrive messages. You can specify this parameter only when the redrivePermission parameter is set to byQueue. You can specify up to 10 source queue ARNs. To allow more than 10 source queues to specify dead-letter queues, set the redrivePermission parameter to allowAll.
    ///
    ///
    ///
    ///
    ///
    /// The dead-letter queue of a FIFO queue must also be a FIFO queue. Similarly, the dead-letter queue of a standard queue must also be a standard queue. The following attributes apply only to [server-side-encryption](https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-server-side-encryption.html):
    ///
    /// * KmsMasterKeyId – The ID of an Amazon Web Services managed customer master key (CMK) for Amazon SQS or a custom CMK. For more information, see [Key Terms](https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-server-side-encryption.html#sqs-sse-key-terms). While the alias of the Amazon Web Services managed CMK for Amazon SQS is always alias/aws/sqs, the alias of a custom CMK can, for example, be alias/MyAlias . For more examples, see [KeyId](https://docs.aws.amazon.com/kms/latest/APIReference/API_DescribeKey.html#API_DescribeKey_RequestParameters) in the Key Management Service API Reference.
    ///
    /// * KmsDataKeyReusePeriodSeconds – The length of time, in seconds, for which Amazon SQS can reuse a [data key](https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#data-keys) to encrypt or decrypt messages before calling KMS again. An integer representing seconds, between 60 seconds (1 minute) and 86,400 seconds (24 hours). Default: 300 (5 minutes). A shorter time period provides better security but results in more calls to KMS which might incur charges after Free Tier. For more information, see [How Does the Data Key Reuse Period Work?](https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-server-side-encryption.html#sqs-how-does-the-data-key-reuse-period-work)
    ///
    /// * SqsManagedSseEnabled – Enables server-side queue encryption using SQS owned encryption keys. Only one server-side encryption option is supported per queue (for example, [SSE-KMS](https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-configure-sse-existing-queue.html) or [SSE-SQS](https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-configure-sqs-sse-queue.html)).
    ///
    ///
    /// The following attributes apply only to [FIFO (first-in-first-out) queues](https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/FIFO-queues.html):
    ///
    /// * FifoQueue – Designates a queue as FIFO. Valid values are true and false. If you don't specify the FifoQueue attribute, Amazon SQS creates a standard queue. You can provide this attribute only during queue creation. You can't change it for an existing queue. When you set this attribute, you must also provide the MessageGroupId for your messages explicitly. For more information, see [FIFO queue logic](https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/FIFO-queues-understanding-logic.html) in the Amazon SQS Developer Guide.
    ///
    /// * ContentBasedDeduplication – Enables content-based deduplication. Valid values are true and false. For more information, see [Exactly-once processing](https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/FIFO-queues-exactly-once-processing.html) in the Amazon SQS Developer Guide. Note the following:
    ///
    /// * Every message must have a unique MessageDeduplicationId.
    ///
    /// * You may provide a MessageDeduplicationId explicitly.
    ///
    /// * If you aren't able to provide a MessageDeduplicationId and you enable ContentBasedDeduplication for your queue, Amazon SQS uses a SHA-256 hash to generate the MessageDeduplicationId using the body of the message (but not the attributes of the message).
    ///
    /// * If you don't provide a MessageDeduplicationId and the queue doesn't have ContentBasedDeduplication set, the action fails with an error.
    ///
    /// * If the queue has ContentBasedDeduplication set, your MessageDeduplicationId overrides the generated one.
    ///
    ///
    ///
    ///
    /// * When ContentBasedDeduplication is in effect, messages with identical content sent within the deduplication interval are treated as duplicates and only one copy of the message is delivered.
    ///
    /// * If you send one message with ContentBasedDeduplication enabled and then another message with a MessageDeduplicationId that is the same as the one generated for the first MessageDeduplicationId, the two messages are treated as duplicates and only one copy of the message is delivered.
    ///
    ///
    ///
    ///
    ///
    /// The following attributes apply only to [high throughput for FIFO queues](https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/high-throughput-fifo.html):
    ///
    /// * DeduplicationScope – Specifies whether message deduplication occurs at the message group or queue level. Valid values are messageGroup and queue.
    ///
    /// * FifoThroughputLimit – Specifies whether the FIFO queue throughput quota applies to the entire queue or per message group. Valid values are perQueue and perMessageGroupId. The perMessageGroupId value is allowed only when the value for DeduplicationScope is messageGroup.
    ///
    ///
    /// To enable high throughput for FIFO queues, do the following:
    ///
    /// * Set DeduplicationScope to messageGroup.
    ///
    /// * Set FifoThroughputLimit to perMessageGroupId.
    ///
    ///
    /// If you set these attributes to anything other than the values shown for enabling high throughput, normal throughput is in effect and deduplication occurs as specified. For information on throughput quotas, see [Quotas related to messages](https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/quotas-messages.html) in the Amazon SQS Developer Guide.
    public var attributes: [Swift.String:Swift.String]?
    /// The name of the new queue. The following limits apply to this name:
    ///
    /// * A queue name can have up to 80 characters.
    ///
    /// * Valid values: alphanumeric characters, hyphens (-), and underscores (_).
    ///
    /// * A FIFO queue name must end with the .fifo suffix.
    ///
    ///
    /// Queue URLs and names are case-sensitive.
    /// This member is required.
    public var queueName: Swift.String?
    /// Add cost allocation tags to the specified Amazon SQS queue. For an overview, see [Tagging Your Amazon SQS Queues](https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-queue-tags.html) in the Amazon SQS Developer Guide. When you use queue tags, keep the following guidelines in mind:
    ///
    /// * Adding more than 50 tags to a queue isn't recommended.
    ///
    /// * Tags don't have any semantic meaning. Amazon SQS interprets tags as character strings.
    ///
    /// * Tags are case-sensitive.
    ///
    /// * A new tag with a key identical to that of an existing tag overwrites the existing tag.
    ///
    ///
    /// For a full list of tag restrictions, see [Quotas related to queues](https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-limits.html#limits-queues) in the Amazon SQS Developer Guide. To be able to tag a queue on creation, you must have the sqs:CreateQueue and sqs:TagQueue permissions. Cross-account permissions don't apply to this action. For more information, see [Grant cross-account permissions to a role and a username](https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-customer-managed-policy-examples.html#grant-cross-account-permissions-to-role-and-user-name) in the Amazon SQS Developer Guide.
    public var tags: [Swift.String:Swift.String]?

    public init(
        attributes: [Swift.String:Swift.String]? = nil,
        queueName: Swift.String? = nil,
        tags: [Swift.String:Swift.String]? = nil
    )
    {
        self.attributes = attributes
        self.queueName = queueName
        self.tags = tags
    }
}

struct CreateQueueInputBody: Swift.Equatable {
    let queueName: Swift.String?
    let tags: [Swift.String:Swift.String]?
    let attributes: [Swift.String:Swift.String]?
}

extension CreateQueueInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case attributes = "Attribute"
        case queueName = "QueueName"
        case tags = "Tag"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let queueNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .queueName)
        queueName = queueNameDecoded
        if containerValues.contains(.tags) {
            struct KeyVal0{struct Key{}; struct Value{}}
            let tagsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: ClientRuntime.MapEntry<Swift.String, Swift.String, KeyVal0.Key, KeyVal0.Value>.CodingKeys.self, forKey: .tags)
            if tagsWrappedContainer != nil {
                let tagsContainer = try containerValues.decodeIfPresent([ClientRuntime.MapKeyValue<Swift.String, Swift.String, KeyVal0.Key, KeyVal0.Value>].self, forKey: .tags)
                var tagsBuffer: [Swift.String:Swift.String]? = nil
                if let tagsContainer = tagsContainer {
                    tagsBuffer = [Swift.String:Swift.String]()
                    for stringContainer0 in tagsContainer {
                        tagsBuffer?[stringContainer0.key] = stringContainer0.value
                    }
                }
                tags = tagsBuffer
            } else {
                tags = [:]
            }
        } else {
            tags = nil
        }
        if containerValues.contains(.attributes) {
            struct KeyVal0{struct Name{}; struct Value{}}
            let attributesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: ClientRuntime.MapEntry<Swift.String, Swift.String, KeyVal0.Name, KeyVal0.Value>.CodingKeys.self, forKey: .attributes)
            if attributesWrappedContainer != nil {
                let attributesContainer = try containerValues.decodeIfPresent([ClientRuntime.MapKeyValue<Swift.String, Swift.String, KeyVal0.Name, KeyVal0.Value>].self, forKey: .attributes)
                var attributesBuffer: [Swift.String:Swift.String]? = nil
                if let attributesContainer = attributesContainer {
                    attributesBuffer = [Swift.String:Swift.String]()
                    for stringContainer0 in attributesContainer {
                        attributesBuffer?[stringContainer0.key] = stringContainer0.value
                    }
                }
                attributes = attributesBuffer
            } else {
                attributes = [:]
            }
        } else {
            attributes = nil
        }
    }
}

extension CreateQueueOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: CreateQueueOutputBody = try responseDecoder.decode(responseBody: data)
            self.queueUrl = output.queueUrl
        } else {
            self.queueUrl = nil
        }
    }
}

/// Returns the QueueUrl attribute of the created queue.
public struct CreateQueueOutput: Swift.Equatable {
    /// The URL of the created Amazon SQS queue.
    public var queueUrl: Swift.String?

    public init(
        queueUrl: Swift.String? = nil
    )
    {
        self.queueUrl = queueUrl
    }
}

struct CreateQueueOutputBody: Swift.Equatable {
    let queueUrl: Swift.String?
}

extension CreateQueueOutputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case queueUrl = "QueueUrl"
    }

    public init(from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("CreateQueueResult"))
        let queueUrlDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .queueUrl)
        queueUrl = queueUrlDecoded
    }
}

enum CreateQueueOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restXMLError = try await AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        switch restXMLError.errorCode {
            case "AWS.SimpleQueueService.QueueDeletedRecently": return try await QueueDeletedRecently(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "QueueAlreadyExists": return try await QueueNameExists(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restXMLError.message, requestID: restXMLError.requestId, typeName: restXMLError.errorCode)
        }
    }
}

extension DeleteMessageBatchInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let entries = entries {
            if !entries.isEmpty {
                for (index0, deletemessagebatchrequestentry0) in entries.enumerated() {
                    var entriesContainer0 = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("DeleteMessageBatchRequestEntry.\(index0.advanced(by: 1))"))
                    try entriesContainer0.encode(deletemessagebatchrequestentry0, forKey: ClientRuntime.Key(""))
                }
            }
            else {
                var entriesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("DeleteMessageBatchRequestEntry"))
                try entriesContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let queueUrl = queueUrl {
            try container.encode(queueUrl, forKey: ClientRuntime.Key("QueueUrl"))
        }
        try container.encode("DeleteMessageBatch", forKey:ClientRuntime.Key("Action"))
        try container.encode("2012-11-05", forKey:ClientRuntime.Key("Version"))
    }
}

extension DeleteMessageBatchInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

///
public struct DeleteMessageBatchInput: Swift.Equatable {
    /// Lists the receipt handles for the messages to be deleted.
    /// This member is required.
    public var entries: [SQSClientTypes.DeleteMessageBatchRequestEntry]?
    /// The URL of the Amazon SQS queue from which messages are deleted. Queue URLs and names are case-sensitive.
    /// This member is required.
    public var queueUrl: Swift.String?

    public init(
        entries: [SQSClientTypes.DeleteMessageBatchRequestEntry]? = nil,
        queueUrl: Swift.String? = nil
    )
    {
        self.entries = entries
        self.queueUrl = queueUrl
    }
}

struct DeleteMessageBatchInputBody: Swift.Equatable {
    let queueUrl: Swift.String?
    let entries: [SQSClientTypes.DeleteMessageBatchRequestEntry]?
}

extension DeleteMessageBatchInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case entries = "DeleteMessageBatchRequestEntry"
        case queueUrl = "QueueUrl"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let queueUrlDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .queueUrl)
        queueUrl = queueUrlDecoded
        if containerValues.contains(.entries) {
            let entriesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CodingKeys.self, forKey: .entries)
            if entriesWrappedContainer != nil {
                let entriesContainer = try containerValues.decodeIfPresent([SQSClientTypes.DeleteMessageBatchRequestEntry].self, forKey: .entries)
                var entriesBuffer:[SQSClientTypes.DeleteMessageBatchRequestEntry]? = nil
                if let entriesContainer = entriesContainer {
                    entriesBuffer = [SQSClientTypes.DeleteMessageBatchRequestEntry]()
                    for structureContainer0 in entriesContainer {
                        entriesBuffer?.append(structureContainer0)
                    }
                }
                entries = entriesBuffer
            } else {
                entries = []
            }
        } else {
            entries = nil
        }
    }
}

extension DeleteMessageBatchOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: DeleteMessageBatchOutputBody = try responseDecoder.decode(responseBody: data)
            self.failed = output.failed
            self.successful = output.successful
        } else {
            self.failed = nil
            self.successful = nil
        }
    }
}

/// For each message in the batch, the response contains a [DeleteMessageBatchResultEntry] tag if the message is deleted or a [BatchResultErrorEntry] tag if the message can't be deleted.
public struct DeleteMessageBatchOutput: Swift.Equatable {
    /// A list of [BatchResultErrorEntry] items.
    /// This member is required.
    public var failed: [SQSClientTypes.BatchResultErrorEntry]?
    /// A list of [DeleteMessageBatchResultEntry] items.
    /// This member is required.
    public var successful: [SQSClientTypes.DeleteMessageBatchResultEntry]?

    public init(
        failed: [SQSClientTypes.BatchResultErrorEntry]? = nil,
        successful: [SQSClientTypes.DeleteMessageBatchResultEntry]? = nil
    )
    {
        self.failed = failed
        self.successful = successful
    }
}

struct DeleteMessageBatchOutputBody: Swift.Equatable {
    let successful: [SQSClientTypes.DeleteMessageBatchResultEntry]?
    let failed: [SQSClientTypes.BatchResultErrorEntry]?
}

extension DeleteMessageBatchOutputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case failed = "BatchResultErrorEntry"
        case successful = "DeleteMessageBatchResultEntry"
    }

    public init(from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("DeleteMessageBatchResult"))
        if containerValues.contains(.successful) {
            let successfulWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CodingKeys.self, forKey: .successful)
            if successfulWrappedContainer != nil {
                let successfulContainer = try containerValues.decodeIfPresent([SQSClientTypes.DeleteMessageBatchResultEntry].self, forKey: .successful)
                var successfulBuffer:[SQSClientTypes.DeleteMessageBatchResultEntry]? = nil
                if let successfulContainer = successfulContainer {
                    successfulBuffer = [SQSClientTypes.DeleteMessageBatchResultEntry]()
                    for structureContainer0 in successfulContainer {
                        successfulBuffer?.append(structureContainer0)
                    }
                }
                successful = successfulBuffer
            } else {
                successful = []
            }
        } else {
            successful = nil
        }
        if containerValues.contains(.failed) {
            let failedWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CodingKeys.self, forKey: .failed)
            if failedWrappedContainer != nil {
                let failedContainer = try containerValues.decodeIfPresent([SQSClientTypes.BatchResultErrorEntry].self, forKey: .failed)
                var failedBuffer:[SQSClientTypes.BatchResultErrorEntry]? = nil
                if let failedContainer = failedContainer {
                    failedBuffer = [SQSClientTypes.BatchResultErrorEntry]()
                    for structureContainer0 in failedContainer {
                        failedBuffer?.append(structureContainer0)
                    }
                }
                failed = failedBuffer
            } else {
                failed = []
            }
        } else {
            failed = nil
        }
    }
}

enum DeleteMessageBatchOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restXMLError = try await AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        switch restXMLError.errorCode {
            case "AWS.SimpleQueueService.BatchEntryIdsNotDistinct": return try await BatchEntryIdsNotDistinct(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "AWS.SimpleQueueService.EmptyBatchRequest": return try await EmptyBatchRequest(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "AWS.SimpleQueueService.InvalidBatchEntryId": return try await InvalidBatchEntryId(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "AWS.SimpleQueueService.TooManyEntriesInBatchRequest": return try await TooManyEntriesInBatchRequest(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restXMLError.message, requestID: restXMLError.requestId, typeName: restXMLError.errorCode)
        }
    }
}

extension SQSClientTypes.DeleteMessageBatchRequestEntry: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case id = "Id"
        case receiptHandle = "ReceiptHandle"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let id = id {
            try container.encode(id, forKey: ClientRuntime.Key("Id"))
        }
        if let receiptHandle = receiptHandle {
            try container.encode(receiptHandle, forKey: ClientRuntime.Key("ReceiptHandle"))
        }
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
        let receiptHandleDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .receiptHandle)
        receiptHandle = receiptHandleDecoded
    }
}

extension SQSClientTypes {
    /// Encloses a receipt handle and an identifier for it.
    public struct DeleteMessageBatchRequestEntry: Swift.Equatable {
        /// The identifier for this particular receipt handle. This is used to communicate the result. The Ids of a batch request need to be unique within a request. This identifier can have up to 80 characters. The following characters are accepted: alphanumeric characters, hyphens(-), and underscores (_).
        /// This member is required.
        public var id: Swift.String?
        /// A receipt handle.
        /// This member is required.
        public var receiptHandle: Swift.String?

        public init(
            id: Swift.String? = nil,
            receiptHandle: Swift.String? = nil
        )
        {
            self.id = id
            self.receiptHandle = receiptHandle
        }
    }

}

extension SQSClientTypes.DeleteMessageBatchResultEntry: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case id = "Id"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let id = id {
            try container.encode(id, forKey: ClientRuntime.Key("Id"))
        }
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
    }
}

extension SQSClientTypes {
    /// Encloses the Id of an entry in [DeleteMessageBatch].
    public struct DeleteMessageBatchResultEntry: Swift.Equatable {
        /// Represents a successfully deleted message.
        /// This member is required.
        public var id: Swift.String?

        public init(
            id: Swift.String? = nil
        )
        {
            self.id = id
        }
    }

}

extension DeleteMessageInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let queueUrl = queueUrl {
            try container.encode(queueUrl, forKey: ClientRuntime.Key("QueueUrl"))
        }
        if let receiptHandle = receiptHandle {
            try container.encode(receiptHandle, forKey: ClientRuntime.Key("ReceiptHandle"))
        }
        try container.encode("DeleteMessage", forKey:ClientRuntime.Key("Action"))
        try container.encode("2012-11-05", forKey:ClientRuntime.Key("Version"))
    }
}

extension DeleteMessageInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

///
public struct DeleteMessageInput: Swift.Equatable {
    /// The URL of the Amazon SQS queue from which messages are deleted. Queue URLs and names are case-sensitive.
    /// This member is required.
    public var queueUrl: Swift.String?
    /// The receipt handle associated with the message to delete.
    /// This member is required.
    public var receiptHandle: Swift.String?

    public init(
        queueUrl: Swift.String? = nil,
        receiptHandle: Swift.String? = nil
    )
    {
        self.queueUrl = queueUrl
        self.receiptHandle = receiptHandle
    }
}

struct DeleteMessageInputBody: Swift.Equatable {
    let queueUrl: Swift.String?
    let receiptHandle: Swift.String?
}

extension DeleteMessageInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case queueUrl = "QueueUrl"
        case receiptHandle = "ReceiptHandle"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let queueUrlDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .queueUrl)
        queueUrl = queueUrlDecoded
        let receiptHandleDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .receiptHandle)
        receiptHandle = receiptHandleDecoded
    }
}

extension DeleteMessageOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
    }
}

public struct DeleteMessageOutput: Swift.Equatable {

    public init() { }
}

enum DeleteMessageOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restXMLError = try await AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        switch restXMLError.errorCode {
            case "InvalidIdFormat": return try await InvalidIdFormat(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "ReceiptHandleIsInvalid": return try await ReceiptHandleIsInvalid(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restXMLError.message, requestID: restXMLError.requestId, typeName: restXMLError.errorCode)
        }
    }
}

extension DeleteQueueInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let queueUrl = queueUrl {
            try container.encode(queueUrl, forKey: ClientRuntime.Key("QueueUrl"))
        }
        try container.encode("DeleteQueue", forKey:ClientRuntime.Key("Action"))
        try container.encode("2012-11-05", forKey:ClientRuntime.Key("Version"))
    }
}

extension DeleteQueueInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

///
public struct DeleteQueueInput: Swift.Equatable {
    /// The URL of the Amazon SQS queue to delete. Queue URLs and names are case-sensitive.
    /// This member is required.
    public var queueUrl: Swift.String?

    public init(
        queueUrl: Swift.String? = nil
    )
    {
        self.queueUrl = queueUrl
    }
}

struct DeleteQueueInputBody: Swift.Equatable {
    let queueUrl: Swift.String?
}

extension DeleteQueueInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case queueUrl = "QueueUrl"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let queueUrlDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .queueUrl)
        queueUrl = queueUrlDecoded
    }
}

extension DeleteQueueOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
    }
}

public struct DeleteQueueOutput: Swift.Equatable {

    public init() { }
}

enum DeleteQueueOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restXMLError = try await AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        switch restXMLError.errorCode {
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restXMLError.message, requestID: restXMLError.requestId, typeName: restXMLError.errorCode)
        }
    }
}

extension EmptyBatchRequest {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws {
        self.httpResponse = httpResponse
        self.requestID = requestID
        self.message = message
    }
}

/// The batch request doesn't contain any entries.
public struct EmptyBatchRequest: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {
    public static var typeName: Swift.String { "AWS.SimpleQueueService.EmptyBatchRequest" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init() { }
}

extension GetQueueAttributesInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let attributeNames = attributeNames {
            if !attributeNames.isEmpty {
                for (index0, queueattributename0) in attributeNames.enumerated() {
                    var attributeNamesContainer0 = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("AttributeName.\(index0.advanced(by: 1))"))
                    try attributeNamesContainer0.encode(queueattributename0, forKey: ClientRuntime.Key(""))
                }
            }
            else {
                var attributeNamesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("AttributeName"))
                try attributeNamesContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let queueUrl = queueUrl {
            try container.encode(queueUrl, forKey: ClientRuntime.Key("QueueUrl"))
        }
        try container.encode("GetQueueAttributes", forKey:ClientRuntime.Key("Action"))
        try container.encode("2012-11-05", forKey:ClientRuntime.Key("Version"))
    }
}

extension GetQueueAttributesInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

///
public struct GetQueueAttributesInput: Swift.Equatable {
    /// A list of attributes for which to retrieve information. The AttributeNames parameter is optional, but if you don't specify values for this parameter, the request returns empty results. In the future, new attributes might be added. If you write code that calls this action, we recommend that you structure your code so that it can handle new attributes gracefully. The following attributes are supported: The ApproximateNumberOfMessagesDelayed, ApproximateNumberOfMessagesNotVisible, and ApproximateNumberOfMessages metrics may not achieve consistency until at least 1 minute after the producers stop sending messages. This period is required for the queue metadata to reach eventual consistency.
    ///
    /// * All – Returns all values.
    ///
    /// * ApproximateNumberOfMessages – Returns the approximate number of messages available for retrieval from the queue.
    ///
    /// * ApproximateNumberOfMessagesDelayed – Returns the approximate number of messages in the queue that are delayed and not available for reading immediately. This can happen when the queue is configured as a delay queue or when a message has been sent with a delay parameter.
    ///
    /// * ApproximateNumberOfMessagesNotVisible – Returns the approximate number of messages that are in flight. Messages are considered to be in flight if they have been sent to a client but have not yet been deleted or have not yet reached the end of their visibility window.
    ///
    /// * CreatedTimestamp – Returns the time when the queue was created in seconds ([epoch time](http://en.wikipedia.org/wiki/Unix_time)).
    ///
    /// * DelaySeconds – Returns the default delay on the queue in seconds.
    ///
    /// * LastModifiedTimestamp – Returns the time when the queue was last changed in seconds ([epoch time](http://en.wikipedia.org/wiki/Unix_time)).
    ///
    /// * MaximumMessageSize – Returns the limit of how many bytes a message can contain before Amazon SQS rejects it.
    ///
    /// * MessageRetentionPeriod – Returns the length of time, in seconds, for which Amazon SQS retains a message. When you change a queue's attributes, the change can take up to 60 seconds for most of the attributes to propagate throughout the Amazon SQS system. Changes made to the MessageRetentionPeriod attribute can take up to 15 minutes and will impact existing messages in the queue potentially causing them to be expired and deleted if the MessageRetentionPeriod is reduced below the age of existing messages.
    ///
    /// * Policy – Returns the policy of the queue.
    ///
    /// * QueueArn – Returns the Amazon resource name (ARN) of the queue.
    ///
    /// * ReceiveMessageWaitTimeSeconds – Returns the length of time, in seconds, for which the ReceiveMessage action waits for a message to arrive.
    ///
    /// * VisibilityTimeout – Returns the visibility timeout for the queue. For more information about the visibility timeout, see [Visibility Timeout](https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-visibility-timeout.html) in the Amazon SQS Developer Guide.
    ///
    ///
    /// The following attributes apply only to [dead-letter queues:](https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-dead-letter-queues.html)
    ///
    /// * RedrivePolicy – The string that includes the parameters for the dead-letter queue functionality of the source queue as a JSON object. The parameters are as follows:
    ///
    /// * deadLetterTargetArn – The Amazon Resource Name (ARN) of the dead-letter queue to which Amazon SQS moves messages after the value of maxReceiveCount is exceeded.
    ///
    /// * maxReceiveCount – The number of times a message is delivered to the source queue before being moved to the dead-letter queue. Default: 10. When the ReceiveCount for a message exceeds the maxReceiveCount for a queue, Amazon SQS moves the message to the dead-letter-queue.
    ///
    ///
    ///
    ///
    /// * RedriveAllowPolicy – The string that includes the parameters for the permissions for the dead-letter queue redrive permission and which source queues can specify dead-letter queues as a JSON object. The parameters are as follows:
    ///
    /// * redrivePermission – The permission type that defines which source queues can specify the current queue as the dead-letter queue. Valid values are:
    ///
    /// * allowAll – (Default) Any source queues in this Amazon Web Services account in the same Region can specify this queue as the dead-letter queue.
    ///
    /// * denyAll – No source queues can specify this queue as the dead-letter queue.
    ///
    /// * byQueue – Only queues specified by the sourceQueueArns parameter can specify this queue as the dead-letter queue.
    ///
    ///
    ///
    ///
    /// * sourceQueueArns – The Amazon Resource Names (ARN)s of the source queues that can specify this queue as the dead-letter queue and redrive messages. You can specify this parameter only when the redrivePermission parameter is set to byQueue. You can specify up to 10 source queue ARNs. To allow more than 10 source queues to specify dead-letter queues, set the redrivePermission parameter to allowAll.
    ///
    ///
    ///
    ///
    ///
    /// The dead-letter queue of a FIFO queue must also be a FIFO queue. Similarly, the dead-letter queue of a standard queue must also be a standard queue. The following attributes apply only to [server-side-encryption](https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-server-side-encryption.html):
    ///
    /// * KmsMasterKeyId – Returns the ID of an Amazon Web Services managed customer master key (CMK) for Amazon SQS or a custom CMK. For more information, see [Key Terms](https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-server-side-encryption.html#sqs-sse-key-terms).
    ///
    /// * KmsDataKeyReusePeriodSeconds – Returns the length of time, in seconds, for which Amazon SQS can reuse a data key to encrypt or decrypt messages before calling KMS again. For more information, see [How Does the Data Key Reuse Period Work?](https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-server-side-encryption.html#sqs-how-does-the-data-key-reuse-period-work).
    ///
    /// * SqsManagedSseEnabled – Returns information about whether the queue is using SSE-SQS encryption using SQS owned encryption keys. Only one server-side encryption option is supported per queue (for example, [SSE-KMS](https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-configure-sse-existing-queue.html) or [SSE-SQS](https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-configure-sqs-sse-queue.html)).
    ///
    ///
    /// The following attributes apply only to [FIFO (first-in-first-out) queues](https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/FIFO-queues.html):
    ///
    /// * FifoQueue – Returns information about whether the queue is FIFO. For more information, see [FIFO queue logic](https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/FIFO-queues-understanding-logic.html) in the Amazon SQS Developer Guide. To determine whether a queue is [FIFO](https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/FIFO-queues.html), you can check whether QueueName ends with the .fifo suffix.
    ///
    /// * ContentBasedDeduplication – Returns whether content-based deduplication is enabled for the queue. For more information, see [Exactly-once processing](https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/FIFO-queues-exactly-once-processing.html) in the Amazon SQS Developer Guide.
    ///
    ///
    /// The following attributes apply only to [high throughput for FIFO queues](https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/high-throughput-fifo.html):
    ///
    /// * DeduplicationScope – Specifies whether message deduplication occurs at the message group or queue level. Valid values are messageGroup and queue.
    ///
    /// * FifoThroughputLimit – Specifies whether the FIFO queue throughput quota applies to the entire queue or per message group. Valid values are perQueue and perMessageGroupId. The perMessageGroupId value is allowed only when the value for DeduplicationScope is messageGroup.
    ///
    ///
    /// To enable high throughput for FIFO queues, do the following:
    ///
    /// * Set DeduplicationScope to messageGroup.
    ///
    /// * Set FifoThroughputLimit to perMessageGroupId.
    ///
    ///
    /// If you set these attributes to anything other than the values shown for enabling high throughput, normal throughput is in effect and deduplication occurs as specified. For information on throughput quotas, see [Quotas related to messages](https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/quotas-messages.html) in the Amazon SQS Developer Guide.
    public var attributeNames: [SQSClientTypes.QueueAttributeName]?
    /// The URL of the Amazon SQS queue whose attribute information is retrieved. Queue URLs and names are case-sensitive.
    /// This member is required.
    public var queueUrl: Swift.String?

    public init(
        attributeNames: [SQSClientTypes.QueueAttributeName]? = nil,
        queueUrl: Swift.String? = nil
    )
    {
        self.attributeNames = attributeNames
        self.queueUrl = queueUrl
    }
}

struct GetQueueAttributesInputBody: Swift.Equatable {
    let queueUrl: Swift.String?
    let attributeNames: [SQSClientTypes.QueueAttributeName]?
}

extension GetQueueAttributesInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case attributeNames = "AttributeName"
        case queueUrl = "QueueUrl"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let queueUrlDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .queueUrl)
        queueUrl = queueUrlDecoded
        if containerValues.contains(.attributeNames) {
            let attributeNamesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CodingKeys.self, forKey: .attributeNames)
            if attributeNamesWrappedContainer != nil {
                let attributeNamesContainer = try containerValues.decodeIfPresent([SQSClientTypes.QueueAttributeName].self, forKey: .attributeNames)
                var attributeNamesBuffer:[SQSClientTypes.QueueAttributeName]? = nil
                if let attributeNamesContainer = attributeNamesContainer {
                    attributeNamesBuffer = [SQSClientTypes.QueueAttributeName]()
                    for enumContainer0 in attributeNamesContainer {
                        attributeNamesBuffer?.append(enumContainer0)
                    }
                }
                attributeNames = attributeNamesBuffer
            } else {
                attributeNames = []
            }
        } else {
            attributeNames = nil
        }
    }
}

extension GetQueueAttributesOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: GetQueueAttributesOutputBody = try responseDecoder.decode(responseBody: data)
            self.attributes = output.attributes
        } else {
            self.attributes = nil
        }
    }
}

/// A list of returned queue attributes.
public struct GetQueueAttributesOutput: Swift.Equatable {
    /// A map of attributes to their respective values.
    public var attributes: [Swift.String:Swift.String]?

    public init(
        attributes: [Swift.String:Swift.String]? = nil
    )
    {
        self.attributes = attributes
    }
}

struct GetQueueAttributesOutputBody: Swift.Equatable {
    let attributes: [Swift.String:Swift.String]?
}

extension GetQueueAttributesOutputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case attributes = "Attribute"
    }

    public init(from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("GetQueueAttributesResult"))
        if containerValues.contains(.attributes) {
            struct KeyVal0{struct Name{}; struct Value{}}
            let attributesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: ClientRuntime.MapEntry<Swift.String, Swift.String, KeyVal0.Name, KeyVal0.Value>.CodingKeys.self, forKey: .attributes)
            if attributesWrappedContainer != nil {
                let attributesContainer = try containerValues.decodeIfPresent([ClientRuntime.MapKeyValue<Swift.String, Swift.String, KeyVal0.Name, KeyVal0.Value>].self, forKey: .attributes)
                var attributesBuffer: [Swift.String:Swift.String]? = nil
                if let attributesContainer = attributesContainer {
                    attributesBuffer = [Swift.String:Swift.String]()
                    for stringContainer0 in attributesContainer {
                        attributesBuffer?[stringContainer0.key] = stringContainer0.value
                    }
                }
                attributes = attributesBuffer
            } else {
                attributes = [:]
            }
        } else {
            attributes = nil
        }
    }
}

enum GetQueueAttributesOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restXMLError = try await AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        switch restXMLError.errorCode {
            case "InvalidAttributeName": return try await InvalidAttributeName(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restXMLError.message, requestID: restXMLError.requestId, typeName: restXMLError.errorCode)
        }
    }
}

extension GetQueueUrlInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let queueName = queueName {
            try container.encode(queueName, forKey: ClientRuntime.Key("QueueName"))
        }
        if let queueOwnerAWSAccountId = queueOwnerAWSAccountId {
            try container.encode(queueOwnerAWSAccountId, forKey: ClientRuntime.Key("QueueOwnerAWSAccountId"))
        }
        try container.encode("GetQueueUrl", forKey:ClientRuntime.Key("Action"))
        try container.encode("2012-11-05", forKey:ClientRuntime.Key("Version"))
    }
}

extension GetQueueUrlInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

///
public struct GetQueueUrlInput: Swift.Equatable {
    /// The name of the queue whose URL must be fetched. Maximum 80 characters. Valid values: alphanumeric characters, hyphens (-), and underscores (_). Queue URLs and names are case-sensitive.
    /// This member is required.
    public var queueName: Swift.String?
    /// The Amazon Web Services account ID of the account that created the queue.
    public var queueOwnerAWSAccountId: Swift.String?

    public init(
        queueName: Swift.String? = nil,
        queueOwnerAWSAccountId: Swift.String? = nil
    )
    {
        self.queueName = queueName
        self.queueOwnerAWSAccountId = queueOwnerAWSAccountId
    }
}

struct GetQueueUrlInputBody: Swift.Equatable {
    let queueName: Swift.String?
    let queueOwnerAWSAccountId: Swift.String?
}

extension GetQueueUrlInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case queueName = "QueueName"
        case queueOwnerAWSAccountId = "QueueOwnerAWSAccountId"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let queueNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .queueName)
        queueName = queueNameDecoded
        let queueOwnerAWSAccountIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .queueOwnerAWSAccountId)
        queueOwnerAWSAccountId = queueOwnerAWSAccountIdDecoded
    }
}

extension GetQueueUrlOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: GetQueueUrlOutputBody = try responseDecoder.decode(responseBody: data)
            self.queueUrl = output.queueUrl
        } else {
            self.queueUrl = nil
        }
    }
}

/// For more information, see [Interpreting Responses](https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-api-responses.html) in the Amazon SQS Developer Guide.
public struct GetQueueUrlOutput: Swift.Equatable {
    /// The URL of the queue.
    public var queueUrl: Swift.String?

    public init(
        queueUrl: Swift.String? = nil
    )
    {
        self.queueUrl = queueUrl
    }
}

struct GetQueueUrlOutputBody: Swift.Equatable {
    let queueUrl: Swift.String?
}

extension GetQueueUrlOutputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case queueUrl = "QueueUrl"
    }

    public init(from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("GetQueueUrlResult"))
        let queueUrlDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .queueUrl)
        queueUrl = queueUrlDecoded
    }
}

enum GetQueueUrlOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restXMLError = try await AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        switch restXMLError.errorCode {
            case "AWS.SimpleQueueService.NonExistentQueue": return try await QueueDoesNotExist(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restXMLError.message, requestID: restXMLError.requestId, typeName: restXMLError.errorCode)
        }
    }
}

extension InvalidAttributeName {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws {
        self.httpResponse = httpResponse
        self.requestID = requestID
        self.message = message
    }
}

/// The specified attribute doesn't exist.
public struct InvalidAttributeName: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {
    public static var typeName: Swift.String { "InvalidAttributeName" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init() { }
}

extension InvalidBatchEntryId {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws {
        self.httpResponse = httpResponse
        self.requestID = requestID
        self.message = message
    }
}

/// The Id of a batch entry in a batch request doesn't abide by the specification.
public struct InvalidBatchEntryId: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {
    public static var typeName: Swift.String { "AWS.SimpleQueueService.InvalidBatchEntryId" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init() { }
}

extension InvalidIdFormat {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws {
        self.httpResponse = httpResponse
        self.requestID = requestID
        self.message = message
    }
}

/// The specified receipt handle isn't valid for the current version.
public struct InvalidIdFormat: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {
    public static var typeName: Swift.String { "InvalidIdFormat" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init() { }
}

extension InvalidMessageContents {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws {
        self.httpResponse = httpResponse
        self.requestID = requestID
        self.message = message
    }
}

/// The message contains characters outside the allowed set.
public struct InvalidMessageContents: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {
    public static var typeName: Swift.String { "InvalidMessageContents" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init() { }
}

extension ListDeadLetterSourceQueuesInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let maxResults = maxResults {
            try container.encode(maxResults, forKey: ClientRuntime.Key("MaxResults"))
        }
        if let nextToken = nextToken {
            try container.encode(nextToken, forKey: ClientRuntime.Key("NextToken"))
        }
        if let queueUrl = queueUrl {
            try container.encode(queueUrl, forKey: ClientRuntime.Key("QueueUrl"))
        }
        try container.encode("ListDeadLetterSourceQueues", forKey:ClientRuntime.Key("Action"))
        try container.encode("2012-11-05", forKey:ClientRuntime.Key("Version"))
    }
}

extension ListDeadLetterSourceQueuesInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

///
public struct ListDeadLetterSourceQueuesInput: Swift.Equatable {
    /// Maximum number of results to include in the response. Value range is 1 to 1000. You must set MaxResults to receive a value for NextToken in the response.
    public var maxResults: Swift.Int?
    /// Pagination token to request the next set of results.
    public var nextToken: Swift.String?
    /// The URL of a dead-letter queue. Queue URLs and names are case-sensitive.
    /// This member is required.
    public var queueUrl: Swift.String?

    public init(
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        queueUrl: Swift.String? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.queueUrl = queueUrl
    }
}

struct ListDeadLetterSourceQueuesInputBody: Swift.Equatable {
    let queueUrl: Swift.String?
    let nextToken: Swift.String?
    let maxResults: Swift.Int?
}

extension ListDeadLetterSourceQueuesInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
        case queueUrl = "QueueUrl"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let queueUrlDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .queueUrl)
        queueUrl = queueUrlDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let maxResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
    }
}

extension ListDeadLetterSourceQueuesOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: ListDeadLetterSourceQueuesOutputBody = try responseDecoder.decode(responseBody: data)
            self.nextToken = output.nextToken
            self.queueUrls = output.queueUrls
        } else {
            self.nextToken = nil
            self.queueUrls = nil
        }
    }
}

/// A list of your dead letter source queues.
public struct ListDeadLetterSourceQueuesOutput: Swift.Equatable {
    /// Pagination token to include in the next request. Token value is null if there are no additional results to request, or if you did not set MaxResults in the request.
    public var nextToken: Swift.String?
    /// A list of source queue URLs that have the RedrivePolicy queue attribute configured with a dead-letter queue.
    /// This member is required.
    public var queueUrls: [Swift.String]?

    public init(
        nextToken: Swift.String? = nil,
        queueUrls: [Swift.String]? = nil
    )
    {
        self.nextToken = nextToken
        self.queueUrls = queueUrls
    }
}

struct ListDeadLetterSourceQueuesOutputBody: Swift.Equatable {
    let queueUrls: [Swift.String]?
    let nextToken: Swift.String?
}

extension ListDeadLetterSourceQueuesOutputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken = "NextToken"
        case queueUrls = "QueueUrl"
    }

    public init(from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("ListDeadLetterSourceQueuesResult"))
        if containerValues.contains(.queueUrls) {
            let queueUrlsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CodingKeys.self, forKey: .queueUrls)
            if queueUrlsWrappedContainer != nil {
                let queueUrlsContainer = try containerValues.decodeIfPresent([Swift.String].self, forKey: .queueUrls)
                var queueUrlsBuffer:[Swift.String]? = nil
                if let queueUrlsContainer = queueUrlsContainer {
                    queueUrlsBuffer = [Swift.String]()
                    for stringContainer0 in queueUrlsContainer {
                        queueUrlsBuffer?.append(stringContainer0)
                    }
                }
                queueUrls = queueUrlsBuffer
            } else {
                queueUrls = []
            }
        } else {
            queueUrls = nil
        }
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

enum ListDeadLetterSourceQueuesOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restXMLError = try await AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        switch restXMLError.errorCode {
            case "AWS.SimpleQueueService.NonExistentQueue": return try await QueueDoesNotExist(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restXMLError.message, requestID: restXMLError.requestId, typeName: restXMLError.errorCode)
        }
    }
}

extension ListMessageMoveTasksInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let maxResults = maxResults {
            try container.encode(maxResults, forKey: ClientRuntime.Key("MaxResults"))
        }
        if let sourceArn = sourceArn {
            try container.encode(sourceArn, forKey: ClientRuntime.Key("SourceArn"))
        }
        try container.encode("ListMessageMoveTasks", forKey:ClientRuntime.Key("Action"))
        try container.encode("2012-11-05", forKey:ClientRuntime.Key("Version"))
    }
}

extension ListMessageMoveTasksInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct ListMessageMoveTasksInput: Swift.Equatable {
    /// The maximum number of results to include in the response. The default is 1, which provides the most recent message movement task. The upper limit is 10.
    public var maxResults: Swift.Int?
    /// The ARN of the queue whose message movement tasks are to be listed.
    /// This member is required.
    public var sourceArn: Swift.String?

    public init(
        maxResults: Swift.Int? = nil,
        sourceArn: Swift.String? = nil
    )
    {
        self.maxResults = maxResults
        self.sourceArn = sourceArn
    }
}

struct ListMessageMoveTasksInputBody: Swift.Equatable {
    let sourceArn: Swift.String?
    let maxResults: Swift.Int?
}

extension ListMessageMoveTasksInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case maxResults = "MaxResults"
        case sourceArn = "SourceArn"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let sourceArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .sourceArn)
        sourceArn = sourceArnDecoded
        let maxResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxResults) ?? 0
        maxResults = maxResultsDecoded
    }
}

extension ListMessageMoveTasksOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: ListMessageMoveTasksOutputBody = try responseDecoder.decode(responseBody: data)
            self.results = output.results
        } else {
            self.results = nil
        }
    }
}

public struct ListMessageMoveTasksOutput: Swift.Equatable {
    /// A list of message movement tasks and their attributes.
    public var results: [SQSClientTypes.ListMessageMoveTasksResultEntry]?

    public init(
        results: [SQSClientTypes.ListMessageMoveTasksResultEntry]? = nil
    )
    {
        self.results = results
    }
}

struct ListMessageMoveTasksOutputBody: Swift.Equatable {
    let results: [SQSClientTypes.ListMessageMoveTasksResultEntry]?
}

extension ListMessageMoveTasksOutputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case results = "ListMessageMoveTasksResultEntry"
    }

    public init(from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("ListMessageMoveTasksResult"))
        if containerValues.contains(.results) {
            let resultsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CodingKeys.self, forKey: .results)
            if resultsWrappedContainer != nil {
                let resultsContainer = try containerValues.decodeIfPresent([SQSClientTypes.ListMessageMoveTasksResultEntry].self, forKey: .results)
                var resultsBuffer:[SQSClientTypes.ListMessageMoveTasksResultEntry]? = nil
                if let resultsContainer = resultsContainer {
                    resultsBuffer = [SQSClientTypes.ListMessageMoveTasksResultEntry]()
                    for structureContainer0 in resultsContainer {
                        resultsBuffer?.append(structureContainer0)
                    }
                }
                results = resultsBuffer
            } else {
                results = []
            }
        } else {
            results = nil
        }
    }
}

enum ListMessageMoveTasksOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restXMLError = try await AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        switch restXMLError.errorCode {
            case "ResourceNotFoundException": return try await ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "AWS.SimpleQueueService.UnsupportedOperation": return try await UnsupportedOperation(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restXMLError.message, requestID: restXMLError.requestId, typeName: restXMLError.errorCode)
        }
    }
}

extension SQSClientTypes.ListMessageMoveTasksResultEntry: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case approximateNumberOfMessagesMoved = "ApproximateNumberOfMessagesMoved"
        case approximateNumberOfMessagesToMove = "ApproximateNumberOfMessagesToMove"
        case destinationArn = "DestinationArn"
        case failureReason = "FailureReason"
        case maxNumberOfMessagesPerSecond = "MaxNumberOfMessagesPerSecond"
        case sourceArn = "SourceArn"
        case startedTimestamp = "StartedTimestamp"
        case status = "Status"
        case taskHandle = "TaskHandle"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if approximateNumberOfMessagesMoved != 0 {
            try container.encode(approximateNumberOfMessagesMoved, forKey: ClientRuntime.Key("ApproximateNumberOfMessagesMoved"))
        }
        if approximateNumberOfMessagesToMove != 0 {
            try container.encode(approximateNumberOfMessagesToMove, forKey: ClientRuntime.Key("ApproximateNumberOfMessagesToMove"))
        }
        if let destinationArn = destinationArn {
            try container.encode(destinationArn, forKey: ClientRuntime.Key("DestinationArn"))
        }
        if let failureReason = failureReason {
            try container.encode(failureReason, forKey: ClientRuntime.Key("FailureReason"))
        }
        if maxNumberOfMessagesPerSecond != 0 {
            try container.encode(maxNumberOfMessagesPerSecond, forKey: ClientRuntime.Key("MaxNumberOfMessagesPerSecond"))
        }
        if let sourceArn = sourceArn {
            try container.encode(sourceArn, forKey: ClientRuntime.Key("SourceArn"))
        }
        if startedTimestamp != 0 {
            try container.encode(startedTimestamp, forKey: ClientRuntime.Key("StartedTimestamp"))
        }
        if let status = status {
            try container.encode(status, forKey: ClientRuntime.Key("Status"))
        }
        if let taskHandle = taskHandle {
            try container.encode(taskHandle, forKey: ClientRuntime.Key("TaskHandle"))
        }
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let taskHandleDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .taskHandle)
        taskHandle = taskHandleDecoded
        let statusDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .status)
        status = statusDecoded
        let sourceArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .sourceArn)
        sourceArn = sourceArnDecoded
        let destinationArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .destinationArn)
        destinationArn = destinationArnDecoded
        let maxNumberOfMessagesPerSecondDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxNumberOfMessagesPerSecond) ?? 0
        maxNumberOfMessagesPerSecond = maxNumberOfMessagesPerSecondDecoded
        let approximateNumberOfMessagesMovedDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .approximateNumberOfMessagesMoved) ?? 0
        approximateNumberOfMessagesMoved = approximateNumberOfMessagesMovedDecoded
        let approximateNumberOfMessagesToMoveDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .approximateNumberOfMessagesToMove) ?? 0
        approximateNumberOfMessagesToMove = approximateNumberOfMessagesToMoveDecoded
        let failureReasonDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .failureReason)
        failureReason = failureReasonDecoded
        let startedTimestampDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .startedTimestamp) ?? 0
        startedTimestamp = startedTimestampDecoded
    }
}

extension SQSClientTypes {
    /// Contains the details of a message movement task.
    public struct ListMessageMoveTasksResultEntry: Swift.Equatable {
        /// The approximate number of messages already moved to the destination queue.
        public var approximateNumberOfMessagesMoved: Swift.Int
        /// The number of messages to be moved from the source queue. This number is obtained at the time of starting the message movement task.
        public var approximateNumberOfMessagesToMove: Swift.Int
        /// The ARN of the destination queue if it has been specified in the StartMessageMoveTask request. If a DestinationArn has not been specified in the StartMessageMoveTask request, this field value will be NULL.
        public var destinationArn: Swift.String?
        /// The task failure reason (only included if the task status is FAILED).
        public var failureReason: Swift.String?
        /// The number of messages to be moved per second (the message movement rate), if it has been specified in the StartMessageMoveTask request. If a MaxNumberOfMessagesPerSecond has not been specified in the StartMessageMoveTask request, this field value will be NULL.
        public var maxNumberOfMessagesPerSecond: Swift.Int
        /// The ARN of the queue that contains the messages to be moved to another queue.
        public var sourceArn: Swift.String?
        /// The timestamp of starting the message movement task.
        public var startedTimestamp: Swift.Int
        /// The status of the message movement task. Possible values are: RUNNING, COMPLETED, CANCELLING, CANCELLED, and FAILED.
        public var status: Swift.String?
        /// An identifier associated with a message movement task. When this field is returned in the response of the ListMessageMoveTasks action, it is only populated for tasks that are in RUNNING status.
        public var taskHandle: Swift.String?

        public init(
            approximateNumberOfMessagesMoved: Swift.Int = 0,
            approximateNumberOfMessagesToMove: Swift.Int = 0,
            destinationArn: Swift.String? = nil,
            failureReason: Swift.String? = nil,
            maxNumberOfMessagesPerSecond: Swift.Int = 0,
            sourceArn: Swift.String? = nil,
            startedTimestamp: Swift.Int = 0,
            status: Swift.String? = nil,
            taskHandle: Swift.String? = nil
        )
        {
            self.approximateNumberOfMessagesMoved = approximateNumberOfMessagesMoved
            self.approximateNumberOfMessagesToMove = approximateNumberOfMessagesToMove
            self.destinationArn = destinationArn
            self.failureReason = failureReason
            self.maxNumberOfMessagesPerSecond = maxNumberOfMessagesPerSecond
            self.sourceArn = sourceArn
            self.startedTimestamp = startedTimestamp
            self.status = status
            self.taskHandle = taskHandle
        }
    }

}

extension ListQueueTagsInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let queueUrl = queueUrl {
            try container.encode(queueUrl, forKey: ClientRuntime.Key("QueueUrl"))
        }
        try container.encode("ListQueueTags", forKey:ClientRuntime.Key("Action"))
        try container.encode("2012-11-05", forKey:ClientRuntime.Key("Version"))
    }
}

extension ListQueueTagsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct ListQueueTagsInput: Swift.Equatable {
    /// The URL of the queue.
    /// This member is required.
    public var queueUrl: Swift.String?

    public init(
        queueUrl: Swift.String? = nil
    )
    {
        self.queueUrl = queueUrl
    }
}

struct ListQueueTagsInputBody: Swift.Equatable {
    let queueUrl: Swift.String?
}

extension ListQueueTagsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case queueUrl = "QueueUrl"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let queueUrlDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .queueUrl)
        queueUrl = queueUrlDecoded
    }
}

extension ListQueueTagsOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: ListQueueTagsOutputBody = try responseDecoder.decode(responseBody: data)
            self.tags = output.tags
        } else {
            self.tags = nil
        }
    }
}

public struct ListQueueTagsOutput: Swift.Equatable {
    /// The list of all tags added to the specified queue.
    public var tags: [Swift.String:Swift.String]?

    public init(
        tags: [Swift.String:Swift.String]? = nil
    )
    {
        self.tags = tags
    }
}

struct ListQueueTagsOutputBody: Swift.Equatable {
    let tags: [Swift.String:Swift.String]?
}

extension ListQueueTagsOutputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case tags = "Tag"
    }

    public init(from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("ListQueueTagsResult"))
        if containerValues.contains(.tags) {
            struct KeyVal0{struct Key{}; struct Value{}}
            let tagsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: ClientRuntime.MapEntry<Swift.String, Swift.String, KeyVal0.Key, KeyVal0.Value>.CodingKeys.self, forKey: .tags)
            if tagsWrappedContainer != nil {
                let tagsContainer = try containerValues.decodeIfPresent([ClientRuntime.MapKeyValue<Swift.String, Swift.String, KeyVal0.Key, KeyVal0.Value>].self, forKey: .tags)
                var tagsBuffer: [Swift.String:Swift.String]? = nil
                if let tagsContainer = tagsContainer {
                    tagsBuffer = [Swift.String:Swift.String]()
                    for stringContainer0 in tagsContainer {
                        tagsBuffer?[stringContainer0.key] = stringContainer0.value
                    }
                }
                tags = tagsBuffer
            } else {
                tags = [:]
            }
        } else {
            tags = nil
        }
    }
}

enum ListQueueTagsOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restXMLError = try await AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        switch restXMLError.errorCode {
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restXMLError.message, requestID: restXMLError.requestId, typeName: restXMLError.errorCode)
        }
    }
}

extension ListQueuesInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let maxResults = maxResults {
            try container.encode(maxResults, forKey: ClientRuntime.Key("MaxResults"))
        }
        if let nextToken = nextToken {
            try container.encode(nextToken, forKey: ClientRuntime.Key("NextToken"))
        }
        if let queueNamePrefix = queueNamePrefix {
            try container.encode(queueNamePrefix, forKey: ClientRuntime.Key("QueueNamePrefix"))
        }
        try container.encode("ListQueues", forKey:ClientRuntime.Key("Action"))
        try container.encode("2012-11-05", forKey:ClientRuntime.Key("Version"))
    }
}

extension ListQueuesInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

///
public struct ListQueuesInput: Swift.Equatable {
    /// Maximum number of results to include in the response. Value range is 1 to 1000. You must set MaxResults to receive a value for NextToken in the response.
    public var maxResults: Swift.Int?
    /// Pagination token to request the next set of results.
    public var nextToken: Swift.String?
    /// A string to use for filtering the list results. Only those queues whose name begins with the specified string are returned. Queue URLs and names are case-sensitive.
    public var queueNamePrefix: Swift.String?

    public init(
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        queueNamePrefix: Swift.String? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.queueNamePrefix = queueNamePrefix
    }
}

struct ListQueuesInputBody: Swift.Equatable {
    let queueNamePrefix: Swift.String?
    let nextToken: Swift.String?
    let maxResults: Swift.Int?
}

extension ListQueuesInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
        case queueNamePrefix = "QueueNamePrefix"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let queueNamePrefixDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .queueNamePrefix)
        queueNamePrefix = queueNamePrefixDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let maxResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
    }
}

extension ListQueuesOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: ListQueuesOutputBody = try responseDecoder.decode(responseBody: data)
            self.nextToken = output.nextToken
            self.queueUrls = output.queueUrls
        } else {
            self.nextToken = nil
            self.queueUrls = nil
        }
    }
}

/// A list of your queues.
public struct ListQueuesOutput: Swift.Equatable {
    /// Pagination token to include in the next request. Token value is null if there are no additional results to request, or if you did not set MaxResults in the request.
    public var nextToken: Swift.String?
    /// A list of queue URLs, up to 1,000 entries, or the value of MaxResults that you sent in the request.
    public var queueUrls: [Swift.String]?

    public init(
        nextToken: Swift.String? = nil,
        queueUrls: [Swift.String]? = nil
    )
    {
        self.nextToken = nextToken
        self.queueUrls = queueUrls
    }
}

struct ListQueuesOutputBody: Swift.Equatable {
    let nextToken: Swift.String?
    let queueUrls: [Swift.String]?
}

extension ListQueuesOutputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken = "NextToken"
        case queueUrls = "QueueUrl"
    }

    public init(from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("ListQueuesResult"))
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        if containerValues.contains(.queueUrls) {
            let queueUrlsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CodingKeys.self, forKey: .queueUrls)
            if queueUrlsWrappedContainer != nil {
                let queueUrlsContainer = try containerValues.decodeIfPresent([Swift.String].self, forKey: .queueUrls)
                var queueUrlsBuffer:[Swift.String]? = nil
                if let queueUrlsContainer = queueUrlsContainer {
                    queueUrlsBuffer = [Swift.String]()
                    for stringContainer0 in queueUrlsContainer {
                        queueUrlsBuffer?.append(stringContainer0)
                    }
                }
                queueUrls = queueUrlsBuffer
            } else {
                queueUrls = []
            }
        } else {
            queueUrls = nil
        }
    }
}

enum ListQueuesOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restXMLError = try await AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        switch restXMLError.errorCode {
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restXMLError.message, requestID: restXMLError.requestId, typeName: restXMLError.errorCode)
        }
    }
}

extension SQSClientTypes.Message: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case attributes = "Attribute"
        case body = "Body"
        case md5OfBody = "MD5OfBody"
        case md5OfMessageAttributes = "MD5OfMessageAttributes"
        case messageAttributes = "MessageAttribute"
        case messageId = "MessageId"
        case receiptHandle = "ReceiptHandle"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let attributes = attributes {
            if !attributes.isEmpty {
                for (index0, element0) in attributes.sorted(by: { $0.key < $1.key }).enumerated() {
                    let messagesystemattributenameKey0 = element0.key
                    let stringValue0 = element0.value
                    var nestedContainer0 = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Attribute.\(index0.advanced(by: 1))"))
                    var keyContainer0 = nestedContainer0.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Name"))
                    try keyContainer0.encode(messagesystemattributenameKey0, forKey: ClientRuntime.Key(""))
                    var valueContainer0 = nestedContainer0.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Value"))
                    try valueContainer0.encode(stringValue0, forKey: ClientRuntime.Key(""))
                }
            }
        }
        if let body = body {
            try container.encode(body, forKey: ClientRuntime.Key("Body"))
        }
        if let md5OfBody = md5OfBody {
            try container.encode(md5OfBody, forKey: ClientRuntime.Key("MD5OfBody"))
        }
        if let md5OfMessageAttributes = md5OfMessageAttributes {
            try container.encode(md5OfMessageAttributes, forKey: ClientRuntime.Key("MD5OfMessageAttributes"))
        }
        if let messageAttributes = messageAttributes {
            if !messageAttributes.isEmpty {
                for (index0, element0) in messageAttributes.sorted(by: { $0.key < $1.key }).enumerated() {
                    let stringKey0 = element0.key
                    let messageattributevalueValue0 = element0.value
                    var nestedContainer0 = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("MessageAttribute.\(index0.advanced(by: 1))"))
                    var keyContainer0 = nestedContainer0.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Name"))
                    try keyContainer0.encode(stringKey0, forKey: ClientRuntime.Key(""))
                    var valueContainer0 = nestedContainer0.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Value"))
                    try valueContainer0.encode(messageattributevalueValue0, forKey: ClientRuntime.Key(""))
                }
            }
        }
        if let messageId = messageId {
            try container.encode(messageId, forKey: ClientRuntime.Key("MessageId"))
        }
        if let receiptHandle = receiptHandle {
            try container.encode(receiptHandle, forKey: ClientRuntime.Key("ReceiptHandle"))
        }
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .messageId)
        messageId = messageIdDecoded
        let receiptHandleDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .receiptHandle)
        receiptHandle = receiptHandleDecoded
        let md5OfBodyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .md5OfBody)
        md5OfBody = md5OfBodyDecoded
        let bodyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .body)
        body = bodyDecoded
        if containerValues.contains(.attributes) {
            struct KeyVal0{struct Name{}; struct Value{}}
            let attributesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: ClientRuntime.MapEntry<Swift.String, Swift.String, KeyVal0.Name, KeyVal0.Value>.CodingKeys.self, forKey: .attributes)
            if attributesWrappedContainer != nil {
                let attributesContainer = try containerValues.decodeIfPresent([ClientRuntime.MapKeyValue<Swift.String, Swift.String, KeyVal0.Name, KeyVal0.Value>].self, forKey: .attributes)
                var attributesBuffer: [Swift.String:Swift.String]? = nil
                if let attributesContainer = attributesContainer {
                    attributesBuffer = [Swift.String:Swift.String]()
                    for stringContainer0 in attributesContainer {
                        attributesBuffer?[stringContainer0.key] = stringContainer0.value
                    }
                }
                attributes = attributesBuffer
            } else {
                attributes = [:]
            }
        } else {
            attributes = nil
        }
        let md5OfMessageAttributesDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .md5OfMessageAttributes)
        md5OfMessageAttributes = md5OfMessageAttributesDecoded
        if containerValues.contains(.messageAttributes) {
            struct KeyVal0{struct Name{}; struct Value{}}
            let messageAttributesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: ClientRuntime.MapEntry<Swift.String, SQSClientTypes.MessageAttributeValue, KeyVal0.Name, KeyVal0.Value>.CodingKeys.self, forKey: .messageAttributes)
            if messageAttributesWrappedContainer != nil {
                let messageAttributesContainer = try containerValues.decodeIfPresent([ClientRuntime.MapKeyValue<Swift.String, SQSClientTypes.MessageAttributeValue, KeyVal0.Name, KeyVal0.Value>].self, forKey: .messageAttributes)
                var messageAttributesBuffer: [Swift.String:SQSClientTypes.MessageAttributeValue]? = nil
                if let messageAttributesContainer = messageAttributesContainer {
                    messageAttributesBuffer = [Swift.String:SQSClientTypes.MessageAttributeValue]()
                    for structureContainer0 in messageAttributesContainer {
                        messageAttributesBuffer?[structureContainer0.key] = structureContainer0.value
                    }
                }
                messageAttributes = messageAttributesBuffer
            } else {
                messageAttributes = [:]
            }
        } else {
            messageAttributes = nil
        }
    }
}

extension SQSClientTypes {
    /// An Amazon SQS message.
    public struct Message: Swift.Equatable {
        /// A map of the attributes requested in [ReceiveMessage] to their respective values. Supported attributes:
        ///
        /// * ApproximateReceiveCount
        ///
        /// * ApproximateFirstReceiveTimestamp
        ///
        /// * MessageDeduplicationId
        ///
        /// * MessageGroupId
        ///
        /// * SenderId
        ///
        /// * SentTimestamp
        ///
        /// * SequenceNumber
        ///
        ///
        /// ApproximateFirstReceiveTimestamp and SentTimestamp are each returned as an integer representing the [epoch time](http://en.wikipedia.org/wiki/Unix_time) in milliseconds.
        public var attributes: [Swift.String:Swift.String]?
        /// The message's contents (not URL-encoded).
        public var body: Swift.String?
        /// An MD5 digest of the non-URL-encoded message body string.
        public var md5OfBody: Swift.String?
        /// An MD5 digest of the non-URL-encoded message attribute string. You can use this attribute to verify that Amazon SQS received the message correctly. Amazon SQS URL-decodes the message before creating the MD5 digest. For information about MD5, see [RFC1321](https://www.ietf.org/rfc/rfc1321.txt).
        public var md5OfMessageAttributes: Swift.String?
        /// Each message attribute consists of a Name, Type, and Value. For more information, see [Amazon SQS message attributes](https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-message-metadata.html#sqs-message-attributes) in the Amazon SQS Developer Guide.
        public var messageAttributes: [Swift.String:SQSClientTypes.MessageAttributeValue]?
        /// A unique identifier for the message. A MessageIdis considered unique across all Amazon Web Services accounts for an extended period of time.
        public var messageId: Swift.String?
        /// An identifier associated with the act of receiving the message. A new receipt handle is returned every time you receive a message. When deleting a message, you provide the last received receipt handle to delete the message.
        public var receiptHandle: Swift.String?

        public init(
            attributes: [Swift.String:Swift.String]? = nil,
            body: Swift.String? = nil,
            md5OfBody: Swift.String? = nil,
            md5OfMessageAttributes: Swift.String? = nil,
            messageAttributes: [Swift.String:SQSClientTypes.MessageAttributeValue]? = nil,
            messageId: Swift.String? = nil,
            receiptHandle: Swift.String? = nil
        )
        {
            self.attributes = attributes
            self.body = body
            self.md5OfBody = md5OfBody
            self.md5OfMessageAttributes = md5OfMessageAttributes
            self.messageAttributes = messageAttributes
            self.messageId = messageId
            self.receiptHandle = receiptHandle
        }
    }

}

extension SQSClientTypes.MessageAttributeValue: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case binaryListValues = "BinaryListValue"
        case binaryValue = "BinaryValue"
        case dataType = "DataType"
        case stringListValues = "StringListValue"
        case stringValue = "StringValue"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let binaryListValues = binaryListValues {
            if !binaryListValues.isEmpty {
                for (index0, binary0) in binaryListValues.enumerated() {
                    try container.encode(binary0.base64EncodedString(), forKey: ClientRuntime.Key("BinaryListValue.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var binaryListValuesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("BinaryListValue"))
                try binaryListValuesContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let binaryValue = binaryValue {
            try container.encode(binaryValue.base64EncodedString(), forKey: ClientRuntime.Key("BinaryValue"))
        }
        if let dataType = dataType {
            try container.encode(dataType, forKey: ClientRuntime.Key("DataType"))
        }
        if let stringListValues = stringListValues {
            if !stringListValues.isEmpty {
                for (index0, string0) in stringListValues.enumerated() {
                    var stringListValuesContainer0 = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("StringListValue.\(index0.advanced(by: 1))"))
                    try stringListValuesContainer0.encode(string0, forKey: ClientRuntime.Key(""))
                }
            }
            else {
                var stringListValuesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("StringListValue"))
                try stringListValuesContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let stringValue = stringValue {
            try container.encode(stringValue, forKey: ClientRuntime.Key("StringValue"))
        }
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let stringValueDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .stringValue)
        stringValue = stringValueDecoded
        if containerValues.contains(.binaryValue) {
            do {
                let binaryValueDecoded = try containerValues.decodeIfPresent(ClientRuntime.Data.self, forKey: .binaryValue)
                binaryValue = binaryValueDecoded
            } catch {
                binaryValue = "".data(using: .utf8)
            }
        } else {
            binaryValue = nil
        }
        if containerValues.contains(.stringListValues) {
            let stringListValuesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CodingKeys.self, forKey: .stringListValues)
            if stringListValuesWrappedContainer != nil {
                let stringListValuesContainer = try containerValues.decodeIfPresent([Swift.String].self, forKey: .stringListValues)
                var stringListValuesBuffer:[Swift.String]? = nil
                if let stringListValuesContainer = stringListValuesContainer {
                    stringListValuesBuffer = [Swift.String]()
                    for stringContainer0 in stringListValuesContainer {
                        stringListValuesBuffer?.append(stringContainer0)
                    }
                }
                stringListValues = stringListValuesBuffer
            } else {
                stringListValues = []
            }
        } else {
            stringListValues = nil
        }
        if containerValues.contains(.binaryListValues) {
            let binaryListValuesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CodingKeys.self, forKey: .binaryListValues)
            if binaryListValuesWrappedContainer != nil {
                let binaryListValuesContainer = try containerValues.decodeIfPresent([ClientRuntime.Data].self, forKey: .binaryListValues)
                var binaryListValuesBuffer:[ClientRuntime.Data]? = nil
                if let binaryListValuesContainer = binaryListValuesContainer {
                    binaryListValuesBuffer = [ClientRuntime.Data]()
                    for blobContainer0 in binaryListValuesContainer {
                        binaryListValuesBuffer?.append(blobContainer0)
                    }
                }
                binaryListValues = binaryListValuesBuffer
            } else {
                binaryListValues = []
            }
        } else {
            binaryListValues = nil
        }
        let dataTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .dataType)
        dataType = dataTypeDecoded
    }
}

extension SQSClientTypes {
    /// The user-specified message attribute value. For string data types, the Value attribute has the same restrictions on the content as the message body. For more information, see [SendMessage].Name, type, value and the message body must not be empty or null. All parts of the message attribute, including Name, Type, and Value, are part of the message size restriction (256 KiB or 262,144 bytes).
    public struct MessageAttributeValue: Swift.Equatable {
        /// Not implemented. Reserved for future use.
        public var binaryListValues: [ClientRuntime.Data]?
        /// Binary type attributes can store any binary data, such as compressed data, encrypted data, or images.
        public var binaryValue: ClientRuntime.Data?
        /// Amazon SQS supports the following logical data types: String, Number, and Binary. For the Number data type, you must use StringValue. You can also append custom labels. For more information, see [Amazon SQS Message Attributes](https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-message-metadata.html#sqs-message-attributes) in the Amazon SQS Developer Guide.
        /// This member is required.
        public var dataType: Swift.String?
        /// Not implemented. Reserved for future use.
        public var stringListValues: [Swift.String]?
        /// Strings are Unicode with UTF-8 binary encoding. For a list of code values, see [ASCII Printable Characters](http://en.wikipedia.org/wiki/ASCII#ASCII_printable_characters).
        public var stringValue: Swift.String?

        public init(
            binaryListValues: [ClientRuntime.Data]? = nil,
            binaryValue: ClientRuntime.Data? = nil,
            dataType: Swift.String? = nil,
            stringListValues: [Swift.String]? = nil,
            stringValue: Swift.String? = nil
        )
        {
            self.binaryListValues = binaryListValues
            self.binaryValue = binaryValue
            self.dataType = dataType
            self.stringListValues = stringListValues
            self.stringValue = stringValue
        }
    }

}

extension MessageNotInflight {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws {
        self.httpResponse = httpResponse
        self.requestID = requestID
        self.message = message
    }
}

/// The specified message isn't in flight.
public struct MessageNotInflight: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {
    public static var typeName: Swift.String { "AWS.SimpleQueueService.MessageNotInflight" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init() { }
}

extension SQSClientTypes {
    public enum MessageSystemAttributeName: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case awstraceheader
        case approximatefirstreceivetimestamp
        case approximatereceivecount
        case deadletterqueuesourcearn
        case messagededuplicationid
        case messagegroupid
        case senderid
        case senttimestamp
        case sequencenumber
        case sdkUnknown(Swift.String)

        public static var allCases: [MessageSystemAttributeName] {
            return [
                .awstraceheader,
                .approximatefirstreceivetimestamp,
                .approximatereceivecount,
                .deadletterqueuesourcearn,
                .messagededuplicationid,
                .messagegroupid,
                .senderid,
                .senttimestamp,
                .sequencenumber,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .awstraceheader: return "AWSTraceHeader"
            case .approximatefirstreceivetimestamp: return "ApproximateFirstReceiveTimestamp"
            case .approximatereceivecount: return "ApproximateReceiveCount"
            case .deadletterqueuesourcearn: return "DeadLetterQueueSourceArn"
            case .messagededuplicationid: return "MessageDeduplicationId"
            case .messagegroupid: return "MessageGroupId"
            case .senderid: return "SenderId"
            case .senttimestamp: return "SentTimestamp"
            case .sequencenumber: return "SequenceNumber"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = MessageSystemAttributeName(rawValue: rawValue) ?? MessageSystemAttributeName.sdkUnknown(rawValue)
        }
    }
}

extension SQSClientTypes {
    public enum MessageSystemAttributeNameForSends: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case awstraceheader
        case sdkUnknown(Swift.String)

        public static var allCases: [MessageSystemAttributeNameForSends] {
            return [
                .awstraceheader,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .awstraceheader: return "AWSTraceHeader"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = MessageSystemAttributeNameForSends(rawValue: rawValue) ?? MessageSystemAttributeNameForSends.sdkUnknown(rawValue)
        }
    }
}

extension SQSClientTypes.MessageSystemAttributeValue: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case binaryListValues = "BinaryListValue"
        case binaryValue = "BinaryValue"
        case dataType = "DataType"
        case stringListValues = "StringListValue"
        case stringValue = "StringValue"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let binaryListValues = binaryListValues {
            if !binaryListValues.isEmpty {
                for (index0, binary0) in binaryListValues.enumerated() {
                    try container.encode(binary0.base64EncodedString(), forKey: ClientRuntime.Key("BinaryListValue.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var binaryListValuesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("BinaryListValue"))
                try binaryListValuesContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let binaryValue = binaryValue {
            try container.encode(binaryValue.base64EncodedString(), forKey: ClientRuntime.Key("BinaryValue"))
        }
        if let dataType = dataType {
            try container.encode(dataType, forKey: ClientRuntime.Key("DataType"))
        }
        if let stringListValues = stringListValues {
            if !stringListValues.isEmpty {
                for (index0, string0) in stringListValues.enumerated() {
                    var stringListValuesContainer0 = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("StringListValue.\(index0.advanced(by: 1))"))
                    try stringListValuesContainer0.encode(string0, forKey: ClientRuntime.Key(""))
                }
            }
            else {
                var stringListValuesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("StringListValue"))
                try stringListValuesContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let stringValue = stringValue {
            try container.encode(stringValue, forKey: ClientRuntime.Key("StringValue"))
        }
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let stringValueDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .stringValue)
        stringValue = stringValueDecoded
        if containerValues.contains(.binaryValue) {
            do {
                let binaryValueDecoded = try containerValues.decodeIfPresent(ClientRuntime.Data.self, forKey: .binaryValue)
                binaryValue = binaryValueDecoded
            } catch {
                binaryValue = "".data(using: .utf8)
            }
        } else {
            binaryValue = nil
        }
        if containerValues.contains(.stringListValues) {
            let stringListValuesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CodingKeys.self, forKey: .stringListValues)
            if stringListValuesWrappedContainer != nil {
                let stringListValuesContainer = try containerValues.decodeIfPresent([Swift.String].self, forKey: .stringListValues)
                var stringListValuesBuffer:[Swift.String]? = nil
                if let stringListValuesContainer = stringListValuesContainer {
                    stringListValuesBuffer = [Swift.String]()
                    for stringContainer0 in stringListValuesContainer {
                        stringListValuesBuffer?.append(stringContainer0)
                    }
                }
                stringListValues = stringListValuesBuffer
            } else {
                stringListValues = []
            }
        } else {
            stringListValues = nil
        }
        if containerValues.contains(.binaryListValues) {
            let binaryListValuesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CodingKeys.self, forKey: .binaryListValues)
            if binaryListValuesWrappedContainer != nil {
                let binaryListValuesContainer = try containerValues.decodeIfPresent([ClientRuntime.Data].self, forKey: .binaryListValues)
                var binaryListValuesBuffer:[ClientRuntime.Data]? = nil
                if let binaryListValuesContainer = binaryListValuesContainer {
                    binaryListValuesBuffer = [ClientRuntime.Data]()
                    for blobContainer0 in binaryListValuesContainer {
                        binaryListValuesBuffer?.append(blobContainer0)
                    }
                }
                binaryListValues = binaryListValuesBuffer
            } else {
                binaryListValues = []
            }
        } else {
            binaryListValues = nil
        }
        let dataTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .dataType)
        dataType = dataTypeDecoded
    }
}

extension SQSClientTypes {
    /// The user-specified message system attribute value. For string data types, the Value attribute has the same restrictions on the content as the message body. For more information, see [SendMessage].Name, type, value and the message body must not be empty or null.
    public struct MessageSystemAttributeValue: Swift.Equatable {
        /// Not implemented. Reserved for future use.
        public var binaryListValues: [ClientRuntime.Data]?
        /// Binary type attributes can store any binary data, such as compressed data, encrypted data, or images.
        public var binaryValue: ClientRuntime.Data?
        /// Amazon SQS supports the following logical data types: String, Number, and Binary. For the Number data type, you must use StringValue. You can also append custom labels. For more information, see [Amazon SQS Message Attributes](https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-message-metadata.html#sqs-message-attributes) in the Amazon SQS Developer Guide.
        /// This member is required.
        public var dataType: Swift.String?
        /// Not implemented. Reserved for future use.
        public var stringListValues: [Swift.String]?
        /// Strings are Unicode with UTF-8 binary encoding. For a list of code values, see [ASCII Printable Characters](http://en.wikipedia.org/wiki/ASCII#ASCII_printable_characters).
        public var stringValue: Swift.String?

        public init(
            binaryListValues: [ClientRuntime.Data]? = nil,
            binaryValue: ClientRuntime.Data? = nil,
            dataType: Swift.String? = nil,
            stringListValues: [Swift.String]? = nil,
            stringValue: Swift.String? = nil
        )
        {
            self.binaryListValues = binaryListValues
            self.binaryValue = binaryValue
            self.dataType = dataType
            self.stringListValues = stringListValues
            self.stringValue = stringValue
        }
    }

}

extension OverLimit {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws {
        self.httpResponse = httpResponse
        self.requestID = requestID
        self.message = message
    }
}

/// The specified action violates a limit. For example, ReceiveMessage returns this error if the maximum number of in flight messages is reached and AddPermission returns this error if the maximum number of permissions for the queue is reached.
public struct OverLimit: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {
    public static var typeName: Swift.String { "OverLimit" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init() { }
}

extension PurgeQueueInProgress {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws {
        self.httpResponse = httpResponse
        self.requestID = requestID
        self.message = message
    }
}

/// Indicates that the specified queue previously received a PurgeQueue request within the last 60 seconds (the time it can take to delete the messages in the queue).
public struct PurgeQueueInProgress: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {
    public static var typeName: Swift.String { "AWS.SimpleQueueService.PurgeQueueInProgress" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init() { }
}

extension PurgeQueueInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let queueUrl = queueUrl {
            try container.encode(queueUrl, forKey: ClientRuntime.Key("QueueUrl"))
        }
        try container.encode("PurgeQueue", forKey:ClientRuntime.Key("Action"))
        try container.encode("2012-11-05", forKey:ClientRuntime.Key("Version"))
    }
}

extension PurgeQueueInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

///
public struct PurgeQueueInput: Swift.Equatable {
    /// The URL of the queue from which the PurgeQueue action deletes messages. Queue URLs and names are case-sensitive.
    /// This member is required.
    public var queueUrl: Swift.String?

    public init(
        queueUrl: Swift.String? = nil
    )
    {
        self.queueUrl = queueUrl
    }
}

struct PurgeQueueInputBody: Swift.Equatable {
    let queueUrl: Swift.String?
}

extension PurgeQueueInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case queueUrl = "QueueUrl"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let queueUrlDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .queueUrl)
        queueUrl = queueUrlDecoded
    }
}

extension PurgeQueueOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
    }
}

public struct PurgeQueueOutput: Swift.Equatable {

    public init() { }
}

enum PurgeQueueOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restXMLError = try await AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        switch restXMLError.errorCode {
            case "AWS.SimpleQueueService.PurgeQueueInProgress": return try await PurgeQueueInProgress(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "AWS.SimpleQueueService.NonExistentQueue": return try await QueueDoesNotExist(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restXMLError.message, requestID: restXMLError.requestId, typeName: restXMLError.errorCode)
        }
    }
}

extension SQSClientTypes {
    public enum QueueAttributeName: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case all
        case approximatenumberofmessages
        case approximatenumberofmessagesdelayed
        case approximatenumberofmessagesnotvisible
        case contentbaseddeduplication
        case createdtimestamp
        case deduplicationscope
        case delayseconds
        case fifoqueue
        case fifothroughputlimit
        case kmsdatakeyreuseperiodseconds
        case kmsmasterkeyid
        case lastmodifiedtimestamp
        case maximummessagesize
        case messageretentionperiod
        case policy
        case queuearn
        case receivemessagewaittimeseconds
        case redriveallowpolicy
        case redrivepolicy
        case sqsmanagedsseenabled
        case visibilitytimeout
        case sdkUnknown(Swift.String)

        public static var allCases: [QueueAttributeName] {
            return [
                .all,
                .approximatenumberofmessages,
                .approximatenumberofmessagesdelayed,
                .approximatenumberofmessagesnotvisible,
                .contentbaseddeduplication,
                .createdtimestamp,
                .deduplicationscope,
                .delayseconds,
                .fifoqueue,
                .fifothroughputlimit,
                .kmsdatakeyreuseperiodseconds,
                .kmsmasterkeyid,
                .lastmodifiedtimestamp,
                .maximummessagesize,
                .messageretentionperiod,
                .policy,
                .queuearn,
                .receivemessagewaittimeseconds,
                .redriveallowpolicy,
                .redrivepolicy,
                .sqsmanagedsseenabled,
                .visibilitytimeout,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .all: return "All"
            case .approximatenumberofmessages: return "ApproximateNumberOfMessages"
            case .approximatenumberofmessagesdelayed: return "ApproximateNumberOfMessagesDelayed"
            case .approximatenumberofmessagesnotvisible: return "ApproximateNumberOfMessagesNotVisible"
            case .contentbaseddeduplication: return "ContentBasedDeduplication"
            case .createdtimestamp: return "CreatedTimestamp"
            case .deduplicationscope: return "DeduplicationScope"
            case .delayseconds: return "DelaySeconds"
            case .fifoqueue: return "FifoQueue"
            case .fifothroughputlimit: return "FifoThroughputLimit"
            case .kmsdatakeyreuseperiodseconds: return "KmsDataKeyReusePeriodSeconds"
            case .kmsmasterkeyid: return "KmsMasterKeyId"
            case .lastmodifiedtimestamp: return "LastModifiedTimestamp"
            case .maximummessagesize: return "MaximumMessageSize"
            case .messageretentionperiod: return "MessageRetentionPeriod"
            case .policy: return "Policy"
            case .queuearn: return "QueueArn"
            case .receivemessagewaittimeseconds: return "ReceiveMessageWaitTimeSeconds"
            case .redriveallowpolicy: return "RedriveAllowPolicy"
            case .redrivepolicy: return "RedrivePolicy"
            case .sqsmanagedsseenabled: return "SqsManagedSseEnabled"
            case .visibilitytimeout: return "VisibilityTimeout"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = QueueAttributeName(rawValue: rawValue) ?? QueueAttributeName.sdkUnknown(rawValue)
        }
    }
}

extension QueueDeletedRecently {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws {
        self.httpResponse = httpResponse
        self.requestID = requestID
        self.message = message
    }
}

/// You must wait 60 seconds after deleting a queue before you can create another queue with the same name.
public struct QueueDeletedRecently: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {
    public static var typeName: Swift.String { "AWS.SimpleQueueService.QueueDeletedRecently" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init() { }
}

extension QueueDoesNotExist {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws {
        self.httpResponse = httpResponse
        self.requestID = requestID
        self.message = message
    }
}

/// The specified queue doesn't exist.
public struct QueueDoesNotExist: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {
    public static var typeName: Swift.String { "AWS.SimpleQueueService.NonExistentQueue" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init() { }
}

extension QueueNameExists {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws {
        self.httpResponse = httpResponse
        self.requestID = requestID
        self.message = message
    }
}

/// A queue with this name already exists. Amazon SQS returns this error only if the request includes attributes whose values differ from those of the existing queue.
public struct QueueNameExists: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {
    public static var typeName: Swift.String { "QueueAlreadyExists" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init() { }
}

extension ReceiptHandleIsInvalid {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws {
        self.httpResponse = httpResponse
        self.requestID = requestID
        self.message = message
    }
}

/// The specified receipt handle isn't valid.
public struct ReceiptHandleIsInvalid: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {
    public static var typeName: Swift.String { "ReceiptHandleIsInvalid" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init() { }
}

extension ReceiveMessageInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let attributeNames = attributeNames {
            if !attributeNames.isEmpty {
                for (index0, queueattributename0) in attributeNames.enumerated() {
                    var attributeNamesContainer0 = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("AttributeName.\(index0.advanced(by: 1))"))
                    try attributeNamesContainer0.encode(queueattributename0, forKey: ClientRuntime.Key(""))
                }
            }
            else {
                var attributeNamesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("AttributeName"))
                try attributeNamesContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let maxNumberOfMessages = maxNumberOfMessages {
            try container.encode(maxNumberOfMessages, forKey: ClientRuntime.Key("MaxNumberOfMessages"))
        }
        if let messageAttributeNames = messageAttributeNames {
            if !messageAttributeNames.isEmpty {
                for (index0, messageattributename0) in messageAttributeNames.enumerated() {
                    var messageAttributeNamesContainer0 = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("MessageAttributeName.\(index0.advanced(by: 1))"))
                    try messageAttributeNamesContainer0.encode(messageattributename0, forKey: ClientRuntime.Key(""))
                }
            }
            else {
                var messageAttributeNamesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("MessageAttributeName"))
                try messageAttributeNamesContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let queueUrl = queueUrl {
            try container.encode(queueUrl, forKey: ClientRuntime.Key("QueueUrl"))
        }
        if let receiveRequestAttemptId = receiveRequestAttemptId {
            try container.encode(receiveRequestAttemptId, forKey: ClientRuntime.Key("ReceiveRequestAttemptId"))
        }
        if let visibilityTimeout = visibilityTimeout {
            try container.encode(visibilityTimeout, forKey: ClientRuntime.Key("VisibilityTimeout"))
        }
        if let waitTimeSeconds = waitTimeSeconds {
            try container.encode(waitTimeSeconds, forKey: ClientRuntime.Key("WaitTimeSeconds"))
        }
        try container.encode("ReceiveMessage", forKey:ClientRuntime.Key("Action"))
        try container.encode("2012-11-05", forKey:ClientRuntime.Key("Version"))
    }
}

extension ReceiveMessageInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

///
public struct ReceiveMessageInput: Swift.Equatable {
    /// A list of attributes that need to be returned along with each message. These attributes include:
    ///
    /// * All – Returns all values.
    ///
    /// * ApproximateFirstReceiveTimestamp – Returns the time the message was first received from the queue ([epoch time](http://en.wikipedia.org/wiki/Unix_time) in milliseconds).
    ///
    /// * ApproximateReceiveCount – Returns the number of times a message has been received across all queues but not deleted.
    ///
    /// * AWSTraceHeader – Returns the X-Ray trace header string.
    ///
    /// * SenderId
    ///
    /// * For a user, returns the user ID, for example ABCDEFGHI1JKLMNOPQ23R.
    ///
    /// * For an IAM role, returns the IAM role ID, for example ABCDE1F2GH3I4JK5LMNOP:i-a123b456.
    ///
    ///
    ///
    ///
    /// * SentTimestamp – Returns the time the message was sent to the queue ([epoch time](http://en.wikipedia.org/wiki/Unix_time) in milliseconds).
    ///
    /// * SqsManagedSseEnabled – Enables server-side queue encryption using SQS owned encryption keys. Only one server-side encryption option is supported per queue (for example, [SSE-KMS](https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-configure-sse-existing-queue.html) or [SSE-SQS](https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-configure-sqs-sse-queue.html)).
    ///
    /// * MessageDeduplicationId – Returns the value provided by the producer that calls the [SendMessage] action.
    ///
    /// * MessageGroupId – Returns the value provided by the producer that calls the [SendMessage] action. Messages with the same MessageGroupId are returned in sequence.
    ///
    /// * SequenceNumber – Returns the value provided by Amazon SQS.
    public var attributeNames: [SQSClientTypes.QueueAttributeName]?
    /// The maximum number of messages to return. Amazon SQS never returns more messages than this value (however, fewer messages might be returned). Valid values: 1 to 10. Default: 1.
    public var maxNumberOfMessages: Swift.Int?
    /// The name of the message attribute, where N is the index.
    ///
    /// * The name can contain alphanumeric characters and the underscore (_), hyphen (-), and period (.).
    ///
    /// * The name is case-sensitive and must be unique among all attribute names for the message.
    ///
    /// * The name must not start with AWS-reserved prefixes such as AWS. or Amazon. (or any casing variants).
    ///
    /// * The name must not start or end with a period (.), and it should not have periods in succession (..).
    ///
    /// * The name can be up to 256 characters long.
    ///
    ///
    /// When using ReceiveMessage, you can send a list of attribute names to receive, or you can return all of the attributes by specifying All or .* in your request. You can also use all message attributes starting with a prefix, for example bar.*.
    public var messageAttributeNames: [Swift.String]?
    /// The URL of the Amazon SQS queue from which messages are received. Queue URLs and names are case-sensitive.
    /// This member is required.
    public var queueUrl: Swift.String?
    /// This parameter applies only to FIFO (first-in-first-out) queues. The token used for deduplication of ReceiveMessage calls. If a networking issue occurs after a ReceiveMessage action, and instead of a response you receive a generic error, it is possible to retry the same action with an identical ReceiveRequestAttemptId to retrieve the same set of messages, even if their visibility timeout has not yet expired.
    ///
    /// * You can use ReceiveRequestAttemptId only for 5 minutes after a ReceiveMessage action.
    ///
    /// * When you set FifoQueue, a caller of the ReceiveMessage action can provide a ReceiveRequestAttemptId explicitly.
    ///
    /// * If a caller of the ReceiveMessage action doesn't provide a ReceiveRequestAttemptId, Amazon SQS generates a ReceiveRequestAttemptId.
    ///
    /// * It is possible to retry the ReceiveMessage action with the same ReceiveRequestAttemptId if none of the messages have been modified (deleted or had their visibility changes).
    ///
    /// * During a visibility timeout, subsequent calls with the same ReceiveRequestAttemptId return the same messages and receipt handles. If a retry occurs within the deduplication interval, it resets the visibility timeout. For more information, see [Visibility Timeout](https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-visibility-timeout.html) in the Amazon SQS Developer Guide. If a caller of the ReceiveMessage action still processes messages when the visibility timeout expires and messages become visible, another worker consuming from the same queue can receive the same messages and therefore process duplicates. Also, if a consumer whose message processing time is longer than the visibility timeout tries to delete the processed messages, the action fails with an error. To mitigate this effect, ensure that your application observes a safe threshold before the visibility timeout expires and extend the visibility timeout as necessary.
    ///
    /// * While messages with a particular MessageGroupId are invisible, no more messages belonging to the same MessageGroupId are returned until the visibility timeout expires. You can still receive messages with another MessageGroupId as long as it is also visible.
    ///
    /// * If a caller of ReceiveMessage can't track the ReceiveRequestAttemptId, no retries work until the original visibility timeout expires. As a result, delays might occur but the messages in the queue remain in a strict order.
    ///
    ///
    /// The maximum length of ReceiveRequestAttemptId is 128 characters. ReceiveRequestAttemptId can contain alphanumeric characters (a-z, A-Z, 0-9) and punctuation (!"#$%&'()*+,-./:;<=>?@[\]^_`{|}~). For best practices of using ReceiveRequestAttemptId, see [Using the ReceiveRequestAttemptId Request Parameter](https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/using-receiverequestattemptid-request-parameter.html) in the Amazon SQS Developer Guide.
    public var receiveRequestAttemptId: Swift.String?
    /// The duration (in seconds) that the received messages are hidden from subsequent retrieve requests after being retrieved by a ReceiveMessage request.
    public var visibilityTimeout: Swift.Int?
    /// The duration (in seconds) for which the call waits for a message to arrive in the queue before returning. If a message is available, the call returns sooner than WaitTimeSeconds. If no messages are available and the wait time expires, the call returns successfully with an empty list of messages. To avoid HTTP errors, ensure that the HTTP response timeout for ReceiveMessage requests is longer than the WaitTimeSeconds parameter. For example, with the Java SDK, you can set HTTP transport settings using the [ NettyNioAsyncHttpClient](https://sdk.amazonaws.com/java/api/latest/software/amazon/awssdk/http/nio/netty/NettyNioAsyncHttpClient.html) for asynchronous clients, or the [ ApacheHttpClient](https://sdk.amazonaws.com/java/api/latest/software/amazon/awssdk/http/apache/ApacheHttpClient.html) for synchronous clients.
    public var waitTimeSeconds: Swift.Int?

    public init(
        attributeNames: [SQSClientTypes.QueueAttributeName]? = nil,
        maxNumberOfMessages: Swift.Int? = nil,
        messageAttributeNames: [Swift.String]? = nil,
        queueUrl: Swift.String? = nil,
        receiveRequestAttemptId: Swift.String? = nil,
        visibilityTimeout: Swift.Int? = nil,
        waitTimeSeconds: Swift.Int? = nil
    )
    {
        self.attributeNames = attributeNames
        self.maxNumberOfMessages = maxNumberOfMessages
        self.messageAttributeNames = messageAttributeNames
        self.queueUrl = queueUrl
        self.receiveRequestAttemptId = receiveRequestAttemptId
        self.visibilityTimeout = visibilityTimeout
        self.waitTimeSeconds = waitTimeSeconds
    }
}

struct ReceiveMessageInputBody: Swift.Equatable {
    let queueUrl: Swift.String?
    let attributeNames: [SQSClientTypes.QueueAttributeName]?
    let messageAttributeNames: [Swift.String]?
    let maxNumberOfMessages: Swift.Int?
    let visibilityTimeout: Swift.Int?
    let waitTimeSeconds: Swift.Int?
    let receiveRequestAttemptId: Swift.String?
}

extension ReceiveMessageInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case attributeNames = "AttributeName"
        case maxNumberOfMessages = "MaxNumberOfMessages"
        case messageAttributeNames = "MessageAttributeName"
        case queueUrl = "QueueUrl"
        case receiveRequestAttemptId = "ReceiveRequestAttemptId"
        case visibilityTimeout = "VisibilityTimeout"
        case waitTimeSeconds = "WaitTimeSeconds"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let queueUrlDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .queueUrl)
        queueUrl = queueUrlDecoded
        if containerValues.contains(.attributeNames) {
            let attributeNamesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CodingKeys.self, forKey: .attributeNames)
            if attributeNamesWrappedContainer != nil {
                let attributeNamesContainer = try containerValues.decodeIfPresent([SQSClientTypes.QueueAttributeName].self, forKey: .attributeNames)
                var attributeNamesBuffer:[SQSClientTypes.QueueAttributeName]? = nil
                if let attributeNamesContainer = attributeNamesContainer {
                    attributeNamesBuffer = [SQSClientTypes.QueueAttributeName]()
                    for enumContainer0 in attributeNamesContainer {
                        attributeNamesBuffer?.append(enumContainer0)
                    }
                }
                attributeNames = attributeNamesBuffer
            } else {
                attributeNames = []
            }
        } else {
            attributeNames = nil
        }
        if containerValues.contains(.messageAttributeNames) {
            let messageAttributeNamesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CodingKeys.self, forKey: .messageAttributeNames)
            if messageAttributeNamesWrappedContainer != nil {
                let messageAttributeNamesContainer = try containerValues.decodeIfPresent([Swift.String].self, forKey: .messageAttributeNames)
                var messageAttributeNamesBuffer:[Swift.String]? = nil
                if let messageAttributeNamesContainer = messageAttributeNamesContainer {
                    messageAttributeNamesBuffer = [Swift.String]()
                    for stringContainer0 in messageAttributeNamesContainer {
                        messageAttributeNamesBuffer?.append(stringContainer0)
                    }
                }
                messageAttributeNames = messageAttributeNamesBuffer
            } else {
                messageAttributeNames = []
            }
        } else {
            messageAttributeNames = nil
        }
        let maxNumberOfMessagesDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxNumberOfMessages) ?? 0
        maxNumberOfMessages = maxNumberOfMessagesDecoded
        let visibilityTimeoutDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .visibilityTimeout) ?? 0
        visibilityTimeout = visibilityTimeoutDecoded
        let waitTimeSecondsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .waitTimeSeconds) ?? 0
        waitTimeSeconds = waitTimeSecondsDecoded
        let receiveRequestAttemptIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .receiveRequestAttemptId)
        receiveRequestAttemptId = receiveRequestAttemptIdDecoded
    }
}

extension ReceiveMessageOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: ReceiveMessageOutputBody = try responseDecoder.decode(responseBody: data)
            self.messages = output.messages
        } else {
            self.messages = nil
        }
    }
}

/// A list of received messages.
public struct ReceiveMessageOutput: Swift.Equatable {
    /// A list of messages.
    public var messages: [SQSClientTypes.Message]?

    public init(
        messages: [SQSClientTypes.Message]? = nil
    )
    {
        self.messages = messages
    }
}

struct ReceiveMessageOutputBody: Swift.Equatable {
    let messages: [SQSClientTypes.Message]?
}

extension ReceiveMessageOutputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case messages = "Message"
    }

    public init(from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("ReceiveMessageResult"))
        if containerValues.contains(.messages) {
            let messagesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CodingKeys.self, forKey: .messages)
            if messagesWrappedContainer != nil {
                let messagesContainer = try containerValues.decodeIfPresent([SQSClientTypes.Message].self, forKey: .messages)
                var messagesBuffer:[SQSClientTypes.Message]? = nil
                if let messagesContainer = messagesContainer {
                    messagesBuffer = [SQSClientTypes.Message]()
                    for structureContainer0 in messagesContainer {
                        messagesBuffer?.append(structureContainer0)
                    }
                }
                messages = messagesBuffer
            } else {
                messages = []
            }
        } else {
            messages = nil
        }
    }
}

enum ReceiveMessageOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restXMLError = try await AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        switch restXMLError.errorCode {
            case "OverLimit": return try await OverLimit(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restXMLError.message, requestID: restXMLError.requestId, typeName: restXMLError.errorCode)
        }
    }
}

extension RemovePermissionInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let label = label {
            try container.encode(label, forKey: ClientRuntime.Key("Label"))
        }
        if let queueUrl = queueUrl {
            try container.encode(queueUrl, forKey: ClientRuntime.Key("QueueUrl"))
        }
        try container.encode("RemovePermission", forKey:ClientRuntime.Key("Action"))
        try container.encode("2012-11-05", forKey:ClientRuntime.Key("Version"))
    }
}

extension RemovePermissionInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

///
public struct RemovePermissionInput: Swift.Equatable {
    /// The identification of the permission to remove. This is the label added using the [AddPermission] action.
    /// This member is required.
    public var label: Swift.String?
    /// The URL of the Amazon SQS queue from which permissions are removed. Queue URLs and names are case-sensitive.
    /// This member is required.
    public var queueUrl: Swift.String?

    public init(
        label: Swift.String? = nil,
        queueUrl: Swift.String? = nil
    )
    {
        self.label = label
        self.queueUrl = queueUrl
    }
}

struct RemovePermissionInputBody: Swift.Equatable {
    let queueUrl: Swift.String?
    let label: Swift.String?
}

extension RemovePermissionInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case label = "Label"
        case queueUrl = "QueueUrl"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let queueUrlDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .queueUrl)
        queueUrl = queueUrlDecoded
        let labelDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .label)
        label = labelDecoded
    }
}

extension RemovePermissionOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
    }
}

public struct RemovePermissionOutput: Swift.Equatable {

    public init() { }
}

enum RemovePermissionOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restXMLError = try await AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        switch restXMLError.errorCode {
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restXMLError.message, requestID: restXMLError.requestId, typeName: restXMLError.errorCode)
        }
    }
}

extension ResourceNotFoundException {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws {
        self.httpResponse = httpResponse
        self.requestID = requestID
        self.message = message
    }
}

/// One or more specified resources don't exist.
public struct ResourceNotFoundException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {
    public static var typeName: Swift.String { "ResourceNotFoundException" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init() { }
}

extension SendMessageBatchInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let entries = entries {
            if !entries.isEmpty {
                for (index0, sendmessagebatchrequestentry0) in entries.enumerated() {
                    var entriesContainer0 = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("SendMessageBatchRequestEntry.\(index0.advanced(by: 1))"))
                    try entriesContainer0.encode(sendmessagebatchrequestentry0, forKey: ClientRuntime.Key(""))
                }
            }
            else {
                var entriesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("SendMessageBatchRequestEntry"))
                try entriesContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let queueUrl = queueUrl {
            try container.encode(queueUrl, forKey: ClientRuntime.Key("QueueUrl"))
        }
        try container.encode("SendMessageBatch", forKey:ClientRuntime.Key("Action"))
        try container.encode("2012-11-05", forKey:ClientRuntime.Key("Version"))
    }
}

extension SendMessageBatchInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

///
public struct SendMessageBatchInput: Swift.Equatable {
    /// A list of [SendMessageBatchRequestEntry] items.
    /// This member is required.
    public var entries: [SQSClientTypes.SendMessageBatchRequestEntry]?
    /// The URL of the Amazon SQS queue to which batched messages are sent. Queue URLs and names are case-sensitive.
    /// This member is required.
    public var queueUrl: Swift.String?

    public init(
        entries: [SQSClientTypes.SendMessageBatchRequestEntry]? = nil,
        queueUrl: Swift.String? = nil
    )
    {
        self.entries = entries
        self.queueUrl = queueUrl
    }
}

struct SendMessageBatchInputBody: Swift.Equatable {
    let queueUrl: Swift.String?
    let entries: [SQSClientTypes.SendMessageBatchRequestEntry]?
}

extension SendMessageBatchInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case entries = "SendMessageBatchRequestEntry"
        case queueUrl = "QueueUrl"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let queueUrlDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .queueUrl)
        queueUrl = queueUrlDecoded
        if containerValues.contains(.entries) {
            let entriesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CodingKeys.self, forKey: .entries)
            if entriesWrappedContainer != nil {
                let entriesContainer = try containerValues.decodeIfPresent([SQSClientTypes.SendMessageBatchRequestEntry].self, forKey: .entries)
                var entriesBuffer:[SQSClientTypes.SendMessageBatchRequestEntry]? = nil
                if let entriesContainer = entriesContainer {
                    entriesBuffer = [SQSClientTypes.SendMessageBatchRequestEntry]()
                    for structureContainer0 in entriesContainer {
                        entriesBuffer?.append(structureContainer0)
                    }
                }
                entries = entriesBuffer
            } else {
                entries = []
            }
        } else {
            entries = nil
        }
    }
}

extension SendMessageBatchOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: SendMessageBatchOutputBody = try responseDecoder.decode(responseBody: data)
            self.failed = output.failed
            self.successful = output.successful
        } else {
            self.failed = nil
            self.successful = nil
        }
    }
}

/// For each message in the batch, the response contains a [SendMessageBatchResultEntry] tag if the message succeeds or a [BatchResultErrorEntry] tag if the message fails.
public struct SendMessageBatchOutput: Swift.Equatable {
    /// A list of [BatchResultErrorEntry] items with error details about each message that can't be enqueued.
    /// This member is required.
    public var failed: [SQSClientTypes.BatchResultErrorEntry]?
    /// A list of [SendMessageBatchResultEntry] items.
    /// This member is required.
    public var successful: [SQSClientTypes.SendMessageBatchResultEntry]?

    public init(
        failed: [SQSClientTypes.BatchResultErrorEntry]? = nil,
        successful: [SQSClientTypes.SendMessageBatchResultEntry]? = nil
    )
    {
        self.failed = failed
        self.successful = successful
    }
}

struct SendMessageBatchOutputBody: Swift.Equatable {
    let successful: [SQSClientTypes.SendMessageBatchResultEntry]?
    let failed: [SQSClientTypes.BatchResultErrorEntry]?
}

extension SendMessageBatchOutputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case failed = "BatchResultErrorEntry"
        case successful = "SendMessageBatchResultEntry"
    }

    public init(from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("SendMessageBatchResult"))
        if containerValues.contains(.successful) {
            let successfulWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CodingKeys.self, forKey: .successful)
            if successfulWrappedContainer != nil {
                let successfulContainer = try containerValues.decodeIfPresent([SQSClientTypes.SendMessageBatchResultEntry].self, forKey: .successful)
                var successfulBuffer:[SQSClientTypes.SendMessageBatchResultEntry]? = nil
                if let successfulContainer = successfulContainer {
                    successfulBuffer = [SQSClientTypes.SendMessageBatchResultEntry]()
                    for structureContainer0 in successfulContainer {
                        successfulBuffer?.append(structureContainer0)
                    }
                }
                successful = successfulBuffer
            } else {
                successful = []
            }
        } else {
            successful = nil
        }
        if containerValues.contains(.failed) {
            let failedWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CodingKeys.self, forKey: .failed)
            if failedWrappedContainer != nil {
                let failedContainer = try containerValues.decodeIfPresent([SQSClientTypes.BatchResultErrorEntry].self, forKey: .failed)
                var failedBuffer:[SQSClientTypes.BatchResultErrorEntry]? = nil
                if let failedContainer = failedContainer {
                    failedBuffer = [SQSClientTypes.BatchResultErrorEntry]()
                    for structureContainer0 in failedContainer {
                        failedBuffer?.append(structureContainer0)
                    }
                }
                failed = failedBuffer
            } else {
                failed = []
            }
        } else {
            failed = nil
        }
    }
}

enum SendMessageBatchOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restXMLError = try await AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        switch restXMLError.errorCode {
            case "AWS.SimpleQueueService.BatchEntryIdsNotDistinct": return try await BatchEntryIdsNotDistinct(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "AWS.SimpleQueueService.BatchRequestTooLong": return try await BatchRequestTooLong(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "AWS.SimpleQueueService.EmptyBatchRequest": return try await EmptyBatchRequest(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "AWS.SimpleQueueService.InvalidBatchEntryId": return try await InvalidBatchEntryId(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "AWS.SimpleQueueService.TooManyEntriesInBatchRequest": return try await TooManyEntriesInBatchRequest(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "AWS.SimpleQueueService.UnsupportedOperation": return try await UnsupportedOperation(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restXMLError.message, requestID: restXMLError.requestId, typeName: restXMLError.errorCode)
        }
    }
}

extension SQSClientTypes.SendMessageBatchRequestEntry: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case delaySeconds = "DelaySeconds"
        case id = "Id"
        case messageAttributes = "MessageAttribute"
        case messageBody = "MessageBody"
        case messageDeduplicationId = "MessageDeduplicationId"
        case messageGroupId = "MessageGroupId"
        case messageSystemAttributes = "MessageSystemAttribute"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if delaySeconds != 0 {
            try container.encode(delaySeconds, forKey: ClientRuntime.Key("DelaySeconds"))
        }
        if let id = id {
            try container.encode(id, forKey: ClientRuntime.Key("Id"))
        }
        if let messageAttributes = messageAttributes {
            if !messageAttributes.isEmpty {
                for (index0, element0) in messageAttributes.sorted(by: { $0.key < $1.key }).enumerated() {
                    let stringKey0 = element0.key
                    let messageattributevalueValue0 = element0.value
                    var nestedContainer0 = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("MessageAttribute.\(index0.advanced(by: 1))"))
                    var keyContainer0 = nestedContainer0.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Name"))
                    try keyContainer0.encode(stringKey0, forKey: ClientRuntime.Key(""))
                    var valueContainer0 = nestedContainer0.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Value"))
                    try valueContainer0.encode(messageattributevalueValue0, forKey: ClientRuntime.Key(""))
                }
            }
        }
        if let messageBody = messageBody {
            try container.encode(messageBody, forKey: ClientRuntime.Key("MessageBody"))
        }
        if let messageDeduplicationId = messageDeduplicationId {
            try container.encode(messageDeduplicationId, forKey: ClientRuntime.Key("MessageDeduplicationId"))
        }
        if let messageGroupId = messageGroupId {
            try container.encode(messageGroupId, forKey: ClientRuntime.Key("MessageGroupId"))
        }
        if let messageSystemAttributes = messageSystemAttributes {
            if !messageSystemAttributes.isEmpty {
                for (index0, element0) in messageSystemAttributes.sorted(by: { $0.key < $1.key }).enumerated() {
                    let messagesystemattributenameforsendsKey0 = element0.key
                    let messagesystemattributevalueValue0 = element0.value
                    var nestedContainer0 = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("MessageSystemAttribute.\(index0.advanced(by: 1))"))
                    var keyContainer0 = nestedContainer0.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Name"))
                    try keyContainer0.encode(messagesystemattributenameforsendsKey0, forKey: ClientRuntime.Key(""))
                    var valueContainer0 = nestedContainer0.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Value"))
                    try valueContainer0.encode(messagesystemattributevalueValue0, forKey: ClientRuntime.Key(""))
                }
            }
        }
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
        let messageBodyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .messageBody)
        messageBody = messageBodyDecoded
        let delaySecondsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .delaySeconds) ?? 0
        delaySeconds = delaySecondsDecoded
        if containerValues.contains(.messageAttributes) {
            struct KeyVal0{struct Name{}; struct Value{}}
            let messageAttributesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: ClientRuntime.MapEntry<Swift.String, SQSClientTypes.MessageAttributeValue, KeyVal0.Name, KeyVal0.Value>.CodingKeys.self, forKey: .messageAttributes)
            if messageAttributesWrappedContainer != nil {
                let messageAttributesContainer = try containerValues.decodeIfPresent([ClientRuntime.MapKeyValue<Swift.String, SQSClientTypes.MessageAttributeValue, KeyVal0.Name, KeyVal0.Value>].self, forKey: .messageAttributes)
                var messageAttributesBuffer: [Swift.String:SQSClientTypes.MessageAttributeValue]? = nil
                if let messageAttributesContainer = messageAttributesContainer {
                    messageAttributesBuffer = [Swift.String:SQSClientTypes.MessageAttributeValue]()
                    for structureContainer0 in messageAttributesContainer {
                        messageAttributesBuffer?[structureContainer0.key] = structureContainer0.value
                    }
                }
                messageAttributes = messageAttributesBuffer
            } else {
                messageAttributes = [:]
            }
        } else {
            messageAttributes = nil
        }
        if containerValues.contains(.messageSystemAttributes) {
            struct KeyVal0{struct Name{}; struct Value{}}
            let messageSystemAttributesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: ClientRuntime.MapEntry<Swift.String, SQSClientTypes.MessageSystemAttributeValue, KeyVal0.Name, KeyVal0.Value>.CodingKeys.self, forKey: .messageSystemAttributes)
            if messageSystemAttributesWrappedContainer != nil {
                let messageSystemAttributesContainer = try containerValues.decodeIfPresent([ClientRuntime.MapKeyValue<Swift.String, SQSClientTypes.MessageSystemAttributeValue, KeyVal0.Name, KeyVal0.Value>].self, forKey: .messageSystemAttributes)
                var messageSystemAttributesBuffer: [Swift.String:SQSClientTypes.MessageSystemAttributeValue]? = nil
                if let messageSystemAttributesContainer = messageSystemAttributesContainer {
                    messageSystemAttributesBuffer = [Swift.String:SQSClientTypes.MessageSystemAttributeValue]()
                    for structureContainer0 in messageSystemAttributesContainer {
                        messageSystemAttributesBuffer?[structureContainer0.key] = structureContainer0.value
                    }
                }
                messageSystemAttributes = messageSystemAttributesBuffer
            } else {
                messageSystemAttributes = [:]
            }
        } else {
            messageSystemAttributes = nil
        }
        let messageDeduplicationIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .messageDeduplicationId)
        messageDeduplicationId = messageDeduplicationIdDecoded
        let messageGroupIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .messageGroupId)
        messageGroupId = messageGroupIdDecoded
    }
}

extension SQSClientTypes {
    /// Contains the details of a single Amazon SQS message along with an Id.
    public struct SendMessageBatchRequestEntry: Swift.Equatable {
        /// The length of time, in seconds, for which a specific message is delayed. Valid values: 0 to 900. Maximum: 15 minutes. Messages with a positive DelaySeconds value become available for processing after the delay period is finished. If you don't specify a value, the default value for the queue is applied. When you set FifoQueue, you can't set DelaySeconds per message. You can set this parameter only on a queue level.
        public var delaySeconds: Swift.Int
        /// An identifier for a message in this batch used to communicate the result. The Ids of a batch request need to be unique within a request. This identifier can have up to 80 characters. The following characters are accepted: alphanumeric characters, hyphens(-), and underscores (_).
        /// This member is required.
        public var id: Swift.String?
        /// Each message attribute consists of a Name, Type, and Value. For more information, see [Amazon SQS message attributes](https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-message-metadata.html#sqs-message-attributes) in the Amazon SQS Developer Guide.
        public var messageAttributes: [Swift.String:SQSClientTypes.MessageAttributeValue]?
        /// The body of the message.
        /// This member is required.
        public var messageBody: Swift.String?
        /// This parameter applies only to FIFO (first-in-first-out) queues. The token used for deduplication of messages within a 5-minute minimum deduplication interval. If a message with a particular MessageDeduplicationId is sent successfully, subsequent messages with the same MessageDeduplicationId are accepted successfully but aren't delivered. For more information, see [ Exactly-once processing](https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/FIFO-queues-exactly-once-processing.html) in the Amazon SQS Developer Guide.
        ///
        /// * Every message must have a unique MessageDeduplicationId,
        ///
        /// * You may provide a MessageDeduplicationId explicitly.
        ///
        /// * If you aren't able to provide a MessageDeduplicationId and you enable ContentBasedDeduplication for your queue, Amazon SQS uses a SHA-256 hash to generate the MessageDeduplicationId using the body of the message (but not the attributes of the message).
        ///
        /// * If you don't provide a MessageDeduplicationId and the queue doesn't have ContentBasedDeduplication set, the action fails with an error.
        ///
        /// * If the queue has ContentBasedDeduplication set, your MessageDeduplicationId overrides the generated one.
        ///
        ///
        ///
        ///
        /// * When ContentBasedDeduplication is in effect, messages with identical content sent within the deduplication interval are treated as duplicates and only one copy of the message is delivered.
        ///
        /// * If you send one message with ContentBasedDeduplication enabled and then another message with a MessageDeduplicationId that is the same as the one generated for the first MessageDeduplicationId, the two messages are treated as duplicates and only one copy of the message is delivered.
        ///
        ///
        /// The MessageDeduplicationId is available to the consumer of the message (this can be useful for troubleshooting delivery issues). If a message is sent successfully but the acknowledgement is lost and the message is resent with the same MessageDeduplicationId after the deduplication interval, Amazon SQS can't detect duplicate messages. Amazon SQS continues to keep track of the message deduplication ID even after the message is received and deleted. The length of MessageDeduplicationId is 128 characters. MessageDeduplicationId can contain alphanumeric characters (a-z, A-Z, 0-9) and punctuation (!"#$%&'()*+,-./:;<=>?@[\]^_`{|}~). For best practices of using MessageDeduplicationId, see [Using the MessageDeduplicationId Property](https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/using-messagededuplicationid-property.html) in the Amazon SQS Developer Guide.
        public var messageDeduplicationId: Swift.String?
        /// This parameter applies only to FIFO (first-in-first-out) queues. The tag that specifies that a message belongs to a specific message group. Messages that belong to the same message group are processed in a FIFO manner (however, messages in different message groups might be processed out of order). To interleave multiple ordered streams within a single queue, use MessageGroupId values (for example, session data for multiple users). In this scenario, multiple consumers can process the queue, but the session data of each user is processed in a FIFO fashion.
        ///
        /// * You must associate a non-empty MessageGroupId with a message. If you don't provide a MessageGroupId, the action fails.
        ///
        /// * ReceiveMessage might return messages with multiple MessageGroupId values. For each MessageGroupId, the messages are sorted by time sent. The caller can't specify a MessageGroupId.
        ///
        ///
        /// The length of MessageGroupId is 128 characters. Valid values: alphanumeric characters and punctuation (!"#$%&'()*+,-./:;<=>?@[\]^_`{|}~). For best practices of using MessageGroupId, see [Using the MessageGroupId Property](https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/using-messagegroupid-property.html) in the Amazon SQS Developer Guide. MessageGroupId is required for FIFO queues. You can't use it for Standard queues.
        public var messageGroupId: Swift.String?
        /// The message system attribute to send Each message system attribute consists of a Name, Type, and Value.
        ///
        /// * Currently, the only supported message system attribute is AWSTraceHeader. Its type must be String and its value must be a correctly formatted X-Ray trace header string.
        ///
        /// * The size of a message system attribute doesn't count towards the total size of a message.
        public var messageSystemAttributes: [Swift.String:SQSClientTypes.MessageSystemAttributeValue]?

        public init(
            delaySeconds: Swift.Int = 0,
            id: Swift.String? = nil,
            messageAttributes: [Swift.String:SQSClientTypes.MessageAttributeValue]? = nil,
            messageBody: Swift.String? = nil,
            messageDeduplicationId: Swift.String? = nil,
            messageGroupId: Swift.String? = nil,
            messageSystemAttributes: [Swift.String:SQSClientTypes.MessageSystemAttributeValue]? = nil
        )
        {
            self.delaySeconds = delaySeconds
            self.id = id
            self.messageAttributes = messageAttributes
            self.messageBody = messageBody
            self.messageDeduplicationId = messageDeduplicationId
            self.messageGroupId = messageGroupId
            self.messageSystemAttributes = messageSystemAttributes
        }
    }

}

extension SQSClientTypes.SendMessageBatchResultEntry: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case id = "Id"
        case md5OfMessageAttributes = "MD5OfMessageAttributes"
        case md5OfMessageBody = "MD5OfMessageBody"
        case md5OfMessageSystemAttributes = "MD5OfMessageSystemAttributes"
        case messageId = "MessageId"
        case sequenceNumber = "SequenceNumber"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let id = id {
            try container.encode(id, forKey: ClientRuntime.Key("Id"))
        }
        if let md5OfMessageAttributes = md5OfMessageAttributes {
            try container.encode(md5OfMessageAttributes, forKey: ClientRuntime.Key("MD5OfMessageAttributes"))
        }
        if let md5OfMessageBody = md5OfMessageBody {
            try container.encode(md5OfMessageBody, forKey: ClientRuntime.Key("MD5OfMessageBody"))
        }
        if let md5OfMessageSystemAttributes = md5OfMessageSystemAttributes {
            try container.encode(md5OfMessageSystemAttributes, forKey: ClientRuntime.Key("MD5OfMessageSystemAttributes"))
        }
        if let messageId = messageId {
            try container.encode(messageId, forKey: ClientRuntime.Key("MessageId"))
        }
        if let sequenceNumber = sequenceNumber {
            try container.encode(sequenceNumber, forKey: ClientRuntime.Key("SequenceNumber"))
        }
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
        let messageIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .messageId)
        messageId = messageIdDecoded
        let md5OfMessageBodyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .md5OfMessageBody)
        md5OfMessageBody = md5OfMessageBodyDecoded
        let md5OfMessageAttributesDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .md5OfMessageAttributes)
        md5OfMessageAttributes = md5OfMessageAttributesDecoded
        let md5OfMessageSystemAttributesDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .md5OfMessageSystemAttributes)
        md5OfMessageSystemAttributes = md5OfMessageSystemAttributesDecoded
        let sequenceNumberDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .sequenceNumber)
        sequenceNumber = sequenceNumberDecoded
    }
}

extension SQSClientTypes {
    /// Encloses a MessageId for a successfully-enqueued message in a [SendMessageBatch].
    public struct SendMessageBatchResultEntry: Swift.Equatable {
        /// An identifier for the message in this batch.
        /// This member is required.
        public var id: Swift.String?
        /// An MD5 digest of the non-URL-encoded message attribute string. You can use this attribute to verify that Amazon SQS received the message correctly. Amazon SQS URL-decodes the message before creating the MD5 digest. For information about MD5, see [RFC1321](https://www.ietf.org/rfc/rfc1321.txt).
        public var md5OfMessageAttributes: Swift.String?
        /// An MD5 digest of the non-URL-encoded message body string. You can use this attribute to verify that Amazon SQS received the message correctly. Amazon SQS URL-decodes the message before creating the MD5 digest. For information about MD5, see [RFC1321](https://www.ietf.org/rfc/rfc1321.txt).
        /// This member is required.
        public var md5OfMessageBody: Swift.String?
        /// An MD5 digest of the non-URL-encoded message system attribute string. You can use this attribute to verify that Amazon SQS received the message correctly. Amazon SQS URL-decodes the message before creating the MD5 digest. For information about MD5, see [RFC1321](https://www.ietf.org/rfc/rfc1321.txt).
        public var md5OfMessageSystemAttributes: Swift.String?
        /// An identifier for the message.
        /// This member is required.
        public var messageId: Swift.String?
        /// This parameter applies only to FIFO (first-in-first-out) queues. The large, non-consecutive number that Amazon SQS assigns to each message. The length of SequenceNumber is 128 bits. As SequenceNumber continues to increase for a particular MessageGroupId.
        public var sequenceNumber: Swift.String?

        public init(
            id: Swift.String? = nil,
            md5OfMessageAttributes: Swift.String? = nil,
            md5OfMessageBody: Swift.String? = nil,
            md5OfMessageSystemAttributes: Swift.String? = nil,
            messageId: Swift.String? = nil,
            sequenceNumber: Swift.String? = nil
        )
        {
            self.id = id
            self.md5OfMessageAttributes = md5OfMessageAttributes
            self.md5OfMessageBody = md5OfMessageBody
            self.md5OfMessageSystemAttributes = md5OfMessageSystemAttributes
            self.messageId = messageId
            self.sequenceNumber = sequenceNumber
        }
    }

}

extension SendMessageInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let delaySeconds = delaySeconds {
            try container.encode(delaySeconds, forKey: ClientRuntime.Key("DelaySeconds"))
        }
        if let messageAttributes = messageAttributes {
            if !messageAttributes.isEmpty {
                for (index0, element0) in messageAttributes.sorted(by: { $0.key < $1.key }).enumerated() {
                    let stringKey0 = element0.key
                    let messageattributevalueValue0 = element0.value
                    var nestedContainer0 = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("MessageAttribute.\(index0.advanced(by: 1))"))
                    var keyContainer0 = nestedContainer0.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Name"))
                    try keyContainer0.encode(stringKey0, forKey: ClientRuntime.Key(""))
                    var valueContainer0 = nestedContainer0.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Value"))
                    try valueContainer0.encode(messageattributevalueValue0, forKey: ClientRuntime.Key(""))
                }
            }
        }
        if let messageBody = messageBody {
            try container.encode(messageBody, forKey: ClientRuntime.Key("MessageBody"))
        }
        if let messageDeduplicationId = messageDeduplicationId {
            try container.encode(messageDeduplicationId, forKey: ClientRuntime.Key("MessageDeduplicationId"))
        }
        if let messageGroupId = messageGroupId {
            try container.encode(messageGroupId, forKey: ClientRuntime.Key("MessageGroupId"))
        }
        if let messageSystemAttributes = messageSystemAttributes {
            if !messageSystemAttributes.isEmpty {
                for (index0, element0) in messageSystemAttributes.sorted(by: { $0.key < $1.key }).enumerated() {
                    let messagesystemattributenameforsendsKey0 = element0.key
                    let messagesystemattributevalueValue0 = element0.value
                    var nestedContainer0 = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("MessageSystemAttribute.\(index0.advanced(by: 1))"))
                    var keyContainer0 = nestedContainer0.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Name"))
                    try keyContainer0.encode(messagesystemattributenameforsendsKey0, forKey: ClientRuntime.Key(""))
                    var valueContainer0 = nestedContainer0.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Value"))
                    try valueContainer0.encode(messagesystemattributevalueValue0, forKey: ClientRuntime.Key(""))
                }
            }
        }
        if let queueUrl = queueUrl {
            try container.encode(queueUrl, forKey: ClientRuntime.Key("QueueUrl"))
        }
        try container.encode("SendMessage", forKey:ClientRuntime.Key("Action"))
        try container.encode("2012-11-05", forKey:ClientRuntime.Key("Version"))
    }
}

extension SendMessageInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

///
public struct SendMessageInput: Swift.Equatable {
    /// The length of time, in seconds, for which to delay a specific message. Valid values: 0 to 900. Maximum: 15 minutes. Messages with a positive DelaySeconds value become available for processing after the delay period is finished. If you don't specify a value, the default value for the queue applies. When you set FifoQueue, you can't set DelaySeconds per message. You can set this parameter only on a queue level.
    public var delaySeconds: Swift.Int?
    /// Each message attribute consists of a Name, Type, and Value. For more information, see [Amazon SQS message attributes](https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-message-metadata.html#sqs-message-attributes) in the Amazon SQS Developer Guide.
    public var messageAttributes: [Swift.String:SQSClientTypes.MessageAttributeValue]?
    /// The message to send. The minimum size is one character. The maximum size is 256 KiB. A message can include only XML, JSON, and unformatted text. The following Unicode characters are allowed: #x9 | #xA | #xD | #x20 to #xD7FF | #xE000 to #xFFFD | #x10000 to #x10FFFF Any characters not included in this list will be rejected. For more information, see the [W3C specification for characters](http://www.w3.org/TR/REC-xml/#charsets).
    /// This member is required.
    public var messageBody: Swift.String?
    /// This parameter applies only to FIFO (first-in-first-out) queues. The token used for deduplication of sent messages. If a message with a particular MessageDeduplicationId is sent successfully, any messages sent with the same MessageDeduplicationId are accepted successfully but aren't delivered during the 5-minute deduplication interval. For more information, see [ Exactly-once processing](https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/FIFO-queues-exactly-once-processing.html) in the Amazon SQS Developer Guide.
    ///
    /// * Every message must have a unique MessageDeduplicationId,
    ///
    /// * You may provide a MessageDeduplicationId explicitly.
    ///
    /// * If you aren't able to provide a MessageDeduplicationId and you enable ContentBasedDeduplication for your queue, Amazon SQS uses a SHA-256 hash to generate the MessageDeduplicationId using the body of the message (but not the attributes of the message).
    ///
    /// * If you don't provide a MessageDeduplicationId and the queue doesn't have ContentBasedDeduplication set, the action fails with an error.
    ///
    /// * If the queue has ContentBasedDeduplication set, your MessageDeduplicationId overrides the generated one.
    ///
    ///
    ///
    ///
    /// * When ContentBasedDeduplication is in effect, messages with identical content sent within the deduplication interval are treated as duplicates and only one copy of the message is delivered.
    ///
    /// * If you send one message with ContentBasedDeduplication enabled and then another message with a MessageDeduplicationId that is the same as the one generated for the first MessageDeduplicationId, the two messages are treated as duplicates and only one copy of the message is delivered.
    ///
    ///
    /// The MessageDeduplicationId is available to the consumer of the message (this can be useful for troubleshooting delivery issues). If a message is sent successfully but the acknowledgement is lost and the message is resent with the same MessageDeduplicationId after the deduplication interval, Amazon SQS can't detect duplicate messages. Amazon SQS continues to keep track of the message deduplication ID even after the message is received and deleted. The maximum length of MessageDeduplicationId is 128 characters. MessageDeduplicationId can contain alphanumeric characters (a-z, A-Z, 0-9) and punctuation (!"#$%&'()*+,-./:;<=>?@[\]^_`{|}~). For best practices of using MessageDeduplicationId, see [Using the MessageDeduplicationId Property](https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/using-messagededuplicationid-property.html) in the Amazon SQS Developer Guide.
    public var messageDeduplicationId: Swift.String?
    /// This parameter applies only to FIFO (first-in-first-out) queues. The tag that specifies that a message belongs to a specific message group. Messages that belong to the same message group are processed in a FIFO manner (however, messages in different message groups might be processed out of order). To interleave multiple ordered streams within a single queue, use MessageGroupId values (for example, session data for multiple users). In this scenario, multiple consumers can process the queue, but the session data of each user is processed in a FIFO fashion.
    ///
    /// * You must associate a non-empty MessageGroupId with a message. If you don't provide a MessageGroupId, the action fails.
    ///
    /// * ReceiveMessage might return messages with multiple MessageGroupId values. For each MessageGroupId, the messages are sorted by time sent. The caller can't specify a MessageGroupId.
    ///
    ///
    /// The length of MessageGroupId is 128 characters. Valid values: alphanumeric characters and punctuation (!"#$%&'()*+,-./:;<=>?@[\]^_`{|}~). For best practices of using MessageGroupId, see [Using the MessageGroupId Property](https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/using-messagegroupid-property.html) in the Amazon SQS Developer Guide. MessageGroupId is required for FIFO queues. You can't use it for Standard queues.
    public var messageGroupId: Swift.String?
    /// The message system attribute to send. Each message system attribute consists of a Name, Type, and Value.
    ///
    /// * Currently, the only supported message system attribute is AWSTraceHeader. Its type must be String and its value must be a correctly formatted X-Ray trace header string.
    ///
    /// * The size of a message system attribute doesn't count towards the total size of a message.
    public var messageSystemAttributes: [Swift.String:SQSClientTypes.MessageSystemAttributeValue]?
    /// The URL of the Amazon SQS queue to which a message is sent. Queue URLs and names are case-sensitive.
    /// This member is required.
    public var queueUrl: Swift.String?

    public init(
        delaySeconds: Swift.Int? = nil,
        messageAttributes: [Swift.String:SQSClientTypes.MessageAttributeValue]? = nil,
        messageBody: Swift.String? = nil,
        messageDeduplicationId: Swift.String? = nil,
        messageGroupId: Swift.String? = nil,
        messageSystemAttributes: [Swift.String:SQSClientTypes.MessageSystemAttributeValue]? = nil,
        queueUrl: Swift.String? = nil
    )
    {
        self.delaySeconds = delaySeconds
        self.messageAttributes = messageAttributes
        self.messageBody = messageBody
        self.messageDeduplicationId = messageDeduplicationId
        self.messageGroupId = messageGroupId
        self.messageSystemAttributes = messageSystemAttributes
        self.queueUrl = queueUrl
    }
}

struct SendMessageInputBody: Swift.Equatable {
    let queueUrl: Swift.String?
    let messageBody: Swift.String?
    let delaySeconds: Swift.Int?
    let messageAttributes: [Swift.String:SQSClientTypes.MessageAttributeValue]?
    let messageSystemAttributes: [Swift.String:SQSClientTypes.MessageSystemAttributeValue]?
    let messageDeduplicationId: Swift.String?
    let messageGroupId: Swift.String?
}

extension SendMessageInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case delaySeconds = "DelaySeconds"
        case messageAttributes = "MessageAttribute"
        case messageBody = "MessageBody"
        case messageDeduplicationId = "MessageDeduplicationId"
        case messageGroupId = "MessageGroupId"
        case messageSystemAttributes = "MessageSystemAttribute"
        case queueUrl = "QueueUrl"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let queueUrlDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .queueUrl)
        queueUrl = queueUrlDecoded
        let messageBodyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .messageBody)
        messageBody = messageBodyDecoded
        let delaySecondsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .delaySeconds) ?? 0
        delaySeconds = delaySecondsDecoded
        if containerValues.contains(.messageAttributes) {
            struct KeyVal0{struct Name{}; struct Value{}}
            let messageAttributesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: ClientRuntime.MapEntry<Swift.String, SQSClientTypes.MessageAttributeValue, KeyVal0.Name, KeyVal0.Value>.CodingKeys.self, forKey: .messageAttributes)
            if messageAttributesWrappedContainer != nil {
                let messageAttributesContainer = try containerValues.decodeIfPresent([ClientRuntime.MapKeyValue<Swift.String, SQSClientTypes.MessageAttributeValue, KeyVal0.Name, KeyVal0.Value>].self, forKey: .messageAttributes)
                var messageAttributesBuffer: [Swift.String:SQSClientTypes.MessageAttributeValue]? = nil
                if let messageAttributesContainer = messageAttributesContainer {
                    messageAttributesBuffer = [Swift.String:SQSClientTypes.MessageAttributeValue]()
                    for structureContainer0 in messageAttributesContainer {
                        messageAttributesBuffer?[structureContainer0.key] = structureContainer0.value
                    }
                }
                messageAttributes = messageAttributesBuffer
            } else {
                messageAttributes = [:]
            }
        } else {
            messageAttributes = nil
        }
        if containerValues.contains(.messageSystemAttributes) {
            struct KeyVal0{struct Name{}; struct Value{}}
            let messageSystemAttributesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: ClientRuntime.MapEntry<Swift.String, SQSClientTypes.MessageSystemAttributeValue, KeyVal0.Name, KeyVal0.Value>.CodingKeys.self, forKey: .messageSystemAttributes)
            if messageSystemAttributesWrappedContainer != nil {
                let messageSystemAttributesContainer = try containerValues.decodeIfPresent([ClientRuntime.MapKeyValue<Swift.String, SQSClientTypes.MessageSystemAttributeValue, KeyVal0.Name, KeyVal0.Value>].self, forKey: .messageSystemAttributes)
                var messageSystemAttributesBuffer: [Swift.String:SQSClientTypes.MessageSystemAttributeValue]? = nil
                if let messageSystemAttributesContainer = messageSystemAttributesContainer {
                    messageSystemAttributesBuffer = [Swift.String:SQSClientTypes.MessageSystemAttributeValue]()
                    for structureContainer0 in messageSystemAttributesContainer {
                        messageSystemAttributesBuffer?[structureContainer0.key] = structureContainer0.value
                    }
                }
                messageSystemAttributes = messageSystemAttributesBuffer
            } else {
                messageSystemAttributes = [:]
            }
        } else {
            messageSystemAttributes = nil
        }
        let messageDeduplicationIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .messageDeduplicationId)
        messageDeduplicationId = messageDeduplicationIdDecoded
        let messageGroupIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .messageGroupId)
        messageGroupId = messageGroupIdDecoded
    }
}

extension SendMessageOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: SendMessageOutputBody = try responseDecoder.decode(responseBody: data)
            self.md5OfMessageAttributes = output.md5OfMessageAttributes
            self.md5OfMessageBody = output.md5OfMessageBody
            self.md5OfMessageSystemAttributes = output.md5OfMessageSystemAttributes
            self.messageId = output.messageId
            self.sequenceNumber = output.sequenceNumber
        } else {
            self.md5OfMessageAttributes = nil
            self.md5OfMessageBody = nil
            self.md5OfMessageSystemAttributes = nil
            self.messageId = nil
            self.sequenceNumber = nil
        }
    }
}

/// The MD5OfMessageBody and MessageId elements.
public struct SendMessageOutput: Swift.Equatable {
    /// An MD5 digest of the non-URL-encoded message attribute string. You can use this attribute to verify that Amazon SQS received the message correctly. Amazon SQS URL-decodes the message before creating the MD5 digest. For information about MD5, see [RFC1321](https://www.ietf.org/rfc/rfc1321.txt).
    public var md5OfMessageAttributes: Swift.String?
    /// An MD5 digest of the non-URL-encoded message body string. You can use this attribute to verify that Amazon SQS received the message correctly. Amazon SQS URL-decodes the message before creating the MD5 digest. For information about MD5, see [RFC1321](https://www.ietf.org/rfc/rfc1321.txt).
    public var md5OfMessageBody: Swift.String?
    /// An MD5 digest of the non-URL-encoded message system attribute string. You can use this attribute to verify that Amazon SQS received the message correctly. Amazon SQS URL-decodes the message before creating the MD5 digest.
    public var md5OfMessageSystemAttributes: Swift.String?
    /// An attribute containing the MessageId of the message sent to the queue. For more information, see [Queue and Message Identifiers](https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-queue-message-identifiers.html) in the Amazon SQS Developer Guide.
    public var messageId: Swift.String?
    /// This parameter applies only to FIFO (first-in-first-out) queues. The large, non-consecutive number that Amazon SQS assigns to each message. The length of SequenceNumber is 128 bits. SequenceNumber continues to increase for a particular MessageGroupId.
    public var sequenceNumber: Swift.String?

    public init(
        md5OfMessageAttributes: Swift.String? = nil,
        md5OfMessageBody: Swift.String? = nil,
        md5OfMessageSystemAttributes: Swift.String? = nil,
        messageId: Swift.String? = nil,
        sequenceNumber: Swift.String? = nil
    )
    {
        self.md5OfMessageAttributes = md5OfMessageAttributes
        self.md5OfMessageBody = md5OfMessageBody
        self.md5OfMessageSystemAttributes = md5OfMessageSystemAttributes
        self.messageId = messageId
        self.sequenceNumber = sequenceNumber
    }
}

struct SendMessageOutputBody: Swift.Equatable {
    let md5OfMessageBody: Swift.String?
    let md5OfMessageAttributes: Swift.String?
    let md5OfMessageSystemAttributes: Swift.String?
    let messageId: Swift.String?
    let sequenceNumber: Swift.String?
}

extension SendMessageOutputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case md5OfMessageAttributes = "MD5OfMessageAttributes"
        case md5OfMessageBody = "MD5OfMessageBody"
        case md5OfMessageSystemAttributes = "MD5OfMessageSystemAttributes"
        case messageId = "MessageId"
        case sequenceNumber = "SequenceNumber"
    }

    public init(from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("SendMessageResult"))
        let md5OfMessageBodyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .md5OfMessageBody)
        md5OfMessageBody = md5OfMessageBodyDecoded
        let md5OfMessageAttributesDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .md5OfMessageAttributes)
        md5OfMessageAttributes = md5OfMessageAttributesDecoded
        let md5OfMessageSystemAttributesDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .md5OfMessageSystemAttributes)
        md5OfMessageSystemAttributes = md5OfMessageSystemAttributesDecoded
        let messageIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .messageId)
        messageId = messageIdDecoded
        let sequenceNumberDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .sequenceNumber)
        sequenceNumber = sequenceNumberDecoded
    }
}

enum SendMessageOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restXMLError = try await AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        switch restXMLError.errorCode {
            case "InvalidMessageContents": return try await InvalidMessageContents(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "AWS.SimpleQueueService.UnsupportedOperation": return try await UnsupportedOperation(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restXMLError.message, requestID: restXMLError.requestId, typeName: restXMLError.errorCode)
        }
    }
}

extension SetQueueAttributesInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let attributes = attributes {
            if !attributes.isEmpty {
                for (index0, element0) in attributes.sorted(by: { $0.key < $1.key }).enumerated() {
                    let queueattributenameKey0 = element0.key
                    let stringValue0 = element0.value
                    var nestedContainer0 = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Attribute.\(index0.advanced(by: 1))"))
                    var keyContainer0 = nestedContainer0.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Name"))
                    try keyContainer0.encode(queueattributenameKey0, forKey: ClientRuntime.Key(""))
                    var valueContainer0 = nestedContainer0.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Value"))
                    try valueContainer0.encode(stringValue0, forKey: ClientRuntime.Key(""))
                }
            }
        }
        if let queueUrl = queueUrl {
            try container.encode(queueUrl, forKey: ClientRuntime.Key("QueueUrl"))
        }
        try container.encode("SetQueueAttributes", forKey:ClientRuntime.Key("Action"))
        try container.encode("2012-11-05", forKey:ClientRuntime.Key("Version"))
    }
}

extension SetQueueAttributesInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

///
public struct SetQueueAttributesInput: Swift.Equatable {
    /// A map of attributes to set. The following lists the names, descriptions, and values of the special request parameters that the SetQueueAttributes action uses:
    ///
    /// * DelaySeconds – The length of time, in seconds, for which the delivery of all messages in the queue is delayed. Valid values: An integer from 0 to 900 (15 minutes). Default: 0.
    ///
    /// * MaximumMessageSize – The limit of how many bytes a message can contain before Amazon SQS rejects it. Valid values: An integer from 1,024 bytes (1 KiB) up to 262,144 bytes (256 KiB). Default: 262,144 (256 KiB).
    ///
    /// * MessageRetentionPeriod – The length of time, in seconds, for which Amazon SQS retains a message. Valid values: An integer representing seconds, from 60 (1 minute) to 1,209,600 (14 days). Default: 345,600 (4 days). When you change a queue's attributes, the change can take up to 60 seconds for most of the attributes to propagate throughout the Amazon SQS system. Changes made to the MessageRetentionPeriod attribute can take up to 15 minutes and will impact existing messages in the queue potentially causing them to be expired and deleted if the MessageRetentionPeriod is reduced below the age of existing messages.
    ///
    /// * Policy – The queue's policy. A valid Amazon Web Services policy. For more information about policy structure, see [Overview of Amazon Web Services IAM Policies](https://docs.aws.amazon.com/IAM/latest/UserGuide/PoliciesOverview.html) in the Identity and Access Management User Guide.
    ///
    /// * ReceiveMessageWaitTimeSeconds – The length of time, in seconds, for which a [ReceiveMessage] action waits for a message to arrive. Valid values: An integer from 0 to 20 (seconds). Default: 0.
    ///
    /// * VisibilityTimeout – The visibility timeout for the queue, in seconds. Valid values: An integer from 0 to 43,200 (12 hours). Default: 30. For more information about the visibility timeout, see [Visibility Timeout](https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-visibility-timeout.html) in the Amazon SQS Developer Guide.
    ///
    ///
    /// The following attributes apply only to [dead-letter queues:](https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-dead-letter-queues.html)
    ///
    /// * RedrivePolicy – The string that includes the parameters for the dead-letter queue functionality of the source queue as a JSON object. The parameters are as follows:
    ///
    /// * deadLetterTargetArn – The Amazon Resource Name (ARN) of the dead-letter queue to which Amazon SQS moves messages after the value of maxReceiveCount is exceeded.
    ///
    /// * maxReceiveCount – The number of times a message is delivered to the source queue before being moved to the dead-letter queue. Default: 10. When the ReceiveCount for a message exceeds the maxReceiveCount for a queue, Amazon SQS moves the message to the dead-letter-queue.
    ///
    ///
    ///
    ///
    /// * RedriveAllowPolicy – The string that includes the parameters for the permissions for the dead-letter queue redrive permission and which source queues can specify dead-letter queues as a JSON object. The parameters are as follows:
    ///
    /// * redrivePermission – The permission type that defines which source queues can specify the current queue as the dead-letter queue. Valid values are:
    ///
    /// * allowAll – (Default) Any source queues in this Amazon Web Services account in the same Region can specify this queue as the dead-letter queue.
    ///
    /// * denyAll – No source queues can specify this queue as the dead-letter queue.
    ///
    /// * byQueue – Only queues specified by the sourceQueueArns parameter can specify this queue as the dead-letter queue.
    ///
    ///
    ///
    ///
    /// * sourceQueueArns – The Amazon Resource Names (ARN)s of the source queues that can specify this queue as the dead-letter queue and redrive messages. You can specify this parameter only when the redrivePermission parameter is set to byQueue. You can specify up to 10 source queue ARNs. To allow more than 10 source queues to specify dead-letter queues, set the redrivePermission parameter to allowAll.
    ///
    ///
    ///
    ///
    ///
    /// The dead-letter queue of a FIFO queue must also be a FIFO queue. Similarly, the dead-letter queue of a standard queue must also be a standard queue. The following attributes apply only to [server-side-encryption](https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-server-side-encryption.html):
    ///
    /// * KmsMasterKeyId – The ID of an Amazon Web Services managed customer master key (CMK) for Amazon SQS or a custom CMK. For more information, see [Key Terms](https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-server-side-encryption.html#sqs-sse-key-terms). While the alias of the AWS-managed CMK for Amazon SQS is always alias/aws/sqs, the alias of a custom CMK can, for example, be alias/MyAlias . For more examples, see [KeyId](https://docs.aws.amazon.com/kms/latest/APIReference/API_DescribeKey.html#API_DescribeKey_RequestParameters) in the Key Management Service API Reference.
    ///
    /// * KmsDataKeyReusePeriodSeconds – The length of time, in seconds, for which Amazon SQS can reuse a [data key](https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#data-keys) to encrypt or decrypt messages before calling KMS again. An integer representing seconds, between 60 seconds (1 minute) and 86,400 seconds (24 hours). Default: 300 (5 minutes). A shorter time period provides better security but results in more calls to KMS which might incur charges after Free Tier. For more information, see [How Does the Data Key Reuse Period Work?](https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-server-side-encryption.html#sqs-how-does-the-data-key-reuse-period-work).
    ///
    /// * SqsManagedSseEnabled – Enables server-side queue encryption using SQS owned encryption keys. Only one server-side encryption option is supported per queue (for example, [SSE-KMS](https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-configure-sse-existing-queue.html) or [SSE-SQS](https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-configure-sqs-sse-queue.html)).
    ///
    ///
    /// The following attribute applies only to [FIFO (first-in-first-out) queues](https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/FIFO-queues.html):
    ///
    /// * ContentBasedDeduplication – Enables content-based deduplication. For more information, see [Exactly-once processing](https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/FIFO-queues-exactly-once-processing.html) in the Amazon SQS Developer Guide. Note the following:
    ///
    /// * Every message must have a unique MessageDeduplicationId.
    ///
    /// * You may provide a MessageDeduplicationId explicitly.
    ///
    /// * If you aren't able to provide a MessageDeduplicationId and you enable ContentBasedDeduplication for your queue, Amazon SQS uses a SHA-256 hash to generate the MessageDeduplicationId using the body of the message (but not the attributes of the message).
    ///
    /// * If you don't provide a MessageDeduplicationId and the queue doesn't have ContentBasedDeduplication set, the action fails with an error.
    ///
    /// * If the queue has ContentBasedDeduplication set, your MessageDeduplicationId overrides the generated one.
    ///
    ///
    ///
    ///
    /// * When ContentBasedDeduplication is in effect, messages with identical content sent within the deduplication interval are treated as duplicates and only one copy of the message is delivered.
    ///
    /// * If you send one message with ContentBasedDeduplication enabled and then another message with a MessageDeduplicationId that is the same as the one generated for the first MessageDeduplicationId, the two messages are treated as duplicates and only one copy of the message is delivered.
    ///
    ///
    ///
    ///
    ///
    /// The following attributes apply only to [high throughput for FIFO queues](https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/high-throughput-fifo.html):
    ///
    /// * DeduplicationScope – Specifies whether message deduplication occurs at the message group or queue level. Valid values are messageGroup and queue.
    ///
    /// * FifoThroughputLimit – Specifies whether the FIFO queue throughput quota applies to the entire queue or per message group. Valid values are perQueue and perMessageGroupId. The perMessageGroupId value is allowed only when the value for DeduplicationScope is messageGroup.
    ///
    ///
    /// To enable high throughput for FIFO queues, do the following:
    ///
    /// * Set DeduplicationScope to messageGroup.
    ///
    /// * Set FifoThroughputLimit to perMessageGroupId.
    ///
    ///
    /// If you set these attributes to anything other than the values shown for enabling high throughput, normal throughput is in effect and deduplication occurs as specified. For information on throughput quotas, see [Quotas related to messages](https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/quotas-messages.html) in the Amazon SQS Developer Guide.
    /// This member is required.
    public var attributes: [Swift.String:Swift.String]?
    /// The URL of the Amazon SQS queue whose attributes are set. Queue URLs and names are case-sensitive.
    /// This member is required.
    public var queueUrl: Swift.String?

    public init(
        attributes: [Swift.String:Swift.String]? = nil,
        queueUrl: Swift.String? = nil
    )
    {
        self.attributes = attributes
        self.queueUrl = queueUrl
    }
}

struct SetQueueAttributesInputBody: Swift.Equatable {
    let queueUrl: Swift.String?
    let attributes: [Swift.String:Swift.String]?
}

extension SetQueueAttributesInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case attributes = "Attribute"
        case queueUrl = "QueueUrl"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let queueUrlDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .queueUrl)
        queueUrl = queueUrlDecoded
        if containerValues.contains(.attributes) {
            struct KeyVal0{struct Name{}; struct Value{}}
            let attributesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: ClientRuntime.MapEntry<Swift.String, Swift.String, KeyVal0.Name, KeyVal0.Value>.CodingKeys.self, forKey: .attributes)
            if attributesWrappedContainer != nil {
                let attributesContainer = try containerValues.decodeIfPresent([ClientRuntime.MapKeyValue<Swift.String, Swift.String, KeyVal0.Name, KeyVal0.Value>].self, forKey: .attributes)
                var attributesBuffer: [Swift.String:Swift.String]? = nil
                if let attributesContainer = attributesContainer {
                    attributesBuffer = [Swift.String:Swift.String]()
                    for stringContainer0 in attributesContainer {
                        attributesBuffer?[stringContainer0.key] = stringContainer0.value
                    }
                }
                attributes = attributesBuffer
            } else {
                attributes = [:]
            }
        } else {
            attributes = nil
        }
    }
}

extension SetQueueAttributesOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
    }
}

public struct SetQueueAttributesOutput: Swift.Equatable {

    public init() { }
}

enum SetQueueAttributesOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restXMLError = try await AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        switch restXMLError.errorCode {
            case "InvalidAttributeName": return try await InvalidAttributeName(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restXMLError.message, requestID: restXMLError.requestId, typeName: restXMLError.errorCode)
        }
    }
}

extension StartMessageMoveTaskInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let destinationArn = destinationArn {
            try container.encode(destinationArn, forKey: ClientRuntime.Key("DestinationArn"))
        }
        if let maxNumberOfMessagesPerSecond = maxNumberOfMessagesPerSecond {
            try container.encode(maxNumberOfMessagesPerSecond, forKey: ClientRuntime.Key("MaxNumberOfMessagesPerSecond"))
        }
        if let sourceArn = sourceArn {
            try container.encode(sourceArn, forKey: ClientRuntime.Key("SourceArn"))
        }
        try container.encode("StartMessageMoveTask", forKey:ClientRuntime.Key("Action"))
        try container.encode("2012-11-05", forKey:ClientRuntime.Key("Version"))
    }
}

extension StartMessageMoveTaskInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct StartMessageMoveTaskInput: Swift.Equatable {
    /// The ARN of the queue that receives the moved messages. You can use this field to specify the destination queue where you would like to redrive messages. If this field is left blank, the messages will be redriven back to their respective original source queues.
    public var destinationArn: Swift.String?
    /// The number of messages to be moved per second (the message movement rate). You can use this field to define a fixed message movement rate. The maximum value for messages per second is 500. If this field is left blank, the system will optimize the rate based on the queue message backlog size, which may vary throughout the duration of the message movement task.
    public var maxNumberOfMessagesPerSecond: Swift.Int?
    /// The ARN of the queue that contains the messages to be moved to another queue. Currently, only ARNs of dead-letter queues (DLQs) whose sources are other Amazon SQS queues are accepted. DLQs whose sources are non-SQS queues, such as Lambda or Amazon SNS topics, are not currently supported.
    /// This member is required.
    public var sourceArn: Swift.String?

    public init(
        destinationArn: Swift.String? = nil,
        maxNumberOfMessagesPerSecond: Swift.Int? = nil,
        sourceArn: Swift.String? = nil
    )
    {
        self.destinationArn = destinationArn
        self.maxNumberOfMessagesPerSecond = maxNumberOfMessagesPerSecond
        self.sourceArn = sourceArn
    }
}

struct StartMessageMoveTaskInputBody: Swift.Equatable {
    let sourceArn: Swift.String?
    let destinationArn: Swift.String?
    let maxNumberOfMessagesPerSecond: Swift.Int?
}

extension StartMessageMoveTaskInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case destinationArn = "DestinationArn"
        case maxNumberOfMessagesPerSecond = "MaxNumberOfMessagesPerSecond"
        case sourceArn = "SourceArn"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let sourceArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .sourceArn)
        sourceArn = sourceArnDecoded
        let destinationArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .destinationArn)
        destinationArn = destinationArnDecoded
        let maxNumberOfMessagesPerSecondDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxNumberOfMessagesPerSecond) ?? 0
        maxNumberOfMessagesPerSecond = maxNumberOfMessagesPerSecondDecoded
    }
}

extension StartMessageMoveTaskOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: StartMessageMoveTaskOutputBody = try responseDecoder.decode(responseBody: data)
            self.taskHandle = output.taskHandle
        } else {
            self.taskHandle = nil
        }
    }
}

public struct StartMessageMoveTaskOutput: Swift.Equatable {
    /// An identifier associated with a message movement task. You can use this identifier to cancel a specified message movement task using the CancelMessageMoveTask action.
    public var taskHandle: Swift.String?

    public init(
        taskHandle: Swift.String? = nil
    )
    {
        self.taskHandle = taskHandle
    }
}

struct StartMessageMoveTaskOutputBody: Swift.Equatable {
    let taskHandle: Swift.String?
}

extension StartMessageMoveTaskOutputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case taskHandle = "TaskHandle"
    }

    public init(from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("StartMessageMoveTaskResult"))
        let taskHandleDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .taskHandle)
        taskHandle = taskHandleDecoded
    }
}

enum StartMessageMoveTaskOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restXMLError = try await AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        switch restXMLError.errorCode {
            case "ResourceNotFoundException": return try await ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "AWS.SimpleQueueService.UnsupportedOperation": return try await UnsupportedOperation(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restXMLError.message, requestID: restXMLError.requestId, typeName: restXMLError.errorCode)
        }
    }
}

extension TagQueueInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let queueUrl = queueUrl {
            try container.encode(queueUrl, forKey: ClientRuntime.Key("QueueUrl"))
        }
        if let tags = tags {
            if !tags.isEmpty {
                for (index0, element0) in tags.sorted(by: { $0.key < $1.key }).enumerated() {
                    let tagkeyKey0 = element0.key
                    let tagvalueValue0 = element0.value
                    var nestedContainer0 = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Tag.\(index0.advanced(by: 1))"))
                    var keyContainer0 = nestedContainer0.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Key"))
                    try keyContainer0.encode(tagkeyKey0, forKey: ClientRuntime.Key(""))
                    var valueContainer0 = nestedContainer0.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Value"))
                    try valueContainer0.encode(tagvalueValue0, forKey: ClientRuntime.Key(""))
                }
            }
        }
        try container.encode("TagQueue", forKey:ClientRuntime.Key("Action"))
        try container.encode("2012-11-05", forKey:ClientRuntime.Key("Version"))
    }
}

extension TagQueueInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct TagQueueInput: Swift.Equatable {
    /// The URL of the queue.
    /// This member is required.
    public var queueUrl: Swift.String?
    /// The list of tags to be added to the specified queue.
    /// This member is required.
    public var tags: [Swift.String:Swift.String]?

    public init(
        queueUrl: Swift.String? = nil,
        tags: [Swift.String:Swift.String]? = nil
    )
    {
        self.queueUrl = queueUrl
        self.tags = tags
    }
}

struct TagQueueInputBody: Swift.Equatable {
    let queueUrl: Swift.String?
    let tags: [Swift.String:Swift.String]?
}

extension TagQueueInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case queueUrl = "QueueUrl"
        case tags = "Tag"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let queueUrlDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .queueUrl)
        queueUrl = queueUrlDecoded
        if containerValues.contains(.tags) {
            struct KeyVal0{struct Key{}; struct Value{}}
            let tagsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: ClientRuntime.MapEntry<Swift.String, Swift.String, KeyVal0.Key, KeyVal0.Value>.CodingKeys.self, forKey: .tags)
            if tagsWrappedContainer != nil {
                let tagsContainer = try containerValues.decodeIfPresent([ClientRuntime.MapKeyValue<Swift.String, Swift.String, KeyVal0.Key, KeyVal0.Value>].self, forKey: .tags)
                var tagsBuffer: [Swift.String:Swift.String]? = nil
                if let tagsContainer = tagsContainer {
                    tagsBuffer = [Swift.String:Swift.String]()
                    for stringContainer0 in tagsContainer {
                        tagsBuffer?[stringContainer0.key] = stringContainer0.value
                    }
                }
                tags = tagsBuffer
            } else {
                tags = [:]
            }
        } else {
            tags = nil
        }
    }
}

extension TagQueueOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
    }
}

public struct TagQueueOutput: Swift.Equatable {

    public init() { }
}

enum TagQueueOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restXMLError = try await AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        switch restXMLError.errorCode {
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restXMLError.message, requestID: restXMLError.requestId, typeName: restXMLError.errorCode)
        }
    }
}

extension TooManyEntriesInBatchRequest {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws {
        self.httpResponse = httpResponse
        self.requestID = requestID
        self.message = message
    }
}

/// The batch request contains more entries than permissible.
public struct TooManyEntriesInBatchRequest: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {
    public static var typeName: Swift.String { "AWS.SimpleQueueService.TooManyEntriesInBatchRequest" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init() { }
}

extension UnsupportedOperation {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws {
        self.httpResponse = httpResponse
        self.requestID = requestID
        self.message = message
    }
}

/// Error code 400. Unsupported operation.
public struct UnsupportedOperation: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {
    public static var typeName: Swift.String { "AWS.SimpleQueueService.UnsupportedOperation" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init() { }
}

extension UntagQueueInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let queueUrl = queueUrl {
            try container.encode(queueUrl, forKey: ClientRuntime.Key("QueueUrl"))
        }
        if let tagKeys = tagKeys {
            if !tagKeys.isEmpty {
                for (index0, tagkey0) in tagKeys.enumerated() {
                    var tagKeysContainer0 = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("TagKey.\(index0.advanced(by: 1))"))
                    try tagKeysContainer0.encode(tagkey0, forKey: ClientRuntime.Key(""))
                }
            }
            else {
                var tagKeysContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("TagKey"))
                try tagKeysContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        try container.encode("UntagQueue", forKey:ClientRuntime.Key("Action"))
        try container.encode("2012-11-05", forKey:ClientRuntime.Key("Version"))
    }
}

extension UntagQueueInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct UntagQueueInput: Swift.Equatable {
    /// The URL of the queue.
    /// This member is required.
    public var queueUrl: Swift.String?
    /// The list of tags to be removed from the specified queue.
    /// This member is required.
    public var tagKeys: [Swift.String]?

    public init(
        queueUrl: Swift.String? = nil,
        tagKeys: [Swift.String]? = nil
    )
    {
        self.queueUrl = queueUrl
        self.tagKeys = tagKeys
    }
}

struct UntagQueueInputBody: Swift.Equatable {
    let queueUrl: Swift.String?
    let tagKeys: [Swift.String]?
}

extension UntagQueueInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case queueUrl = "QueueUrl"
        case tagKeys = "TagKey"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let queueUrlDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .queueUrl)
        queueUrl = queueUrlDecoded
        if containerValues.contains(.tagKeys) {
            let tagKeysWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CodingKeys.self, forKey: .tagKeys)
            if tagKeysWrappedContainer != nil {
                let tagKeysContainer = try containerValues.decodeIfPresent([Swift.String].self, forKey: .tagKeys)
                var tagKeysBuffer:[Swift.String]? = nil
                if let tagKeysContainer = tagKeysContainer {
                    tagKeysBuffer = [Swift.String]()
                    for stringContainer0 in tagKeysContainer {
                        tagKeysBuffer?.append(stringContainer0)
                    }
                }
                tagKeys = tagKeysBuffer
            } else {
                tagKeys = []
            }
        } else {
            tagKeys = nil
        }
    }
}

extension UntagQueueOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
    }
}

public struct UntagQueueOutput: Swift.Equatable {

    public init() { }
}

enum UntagQueueOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restXMLError = try await AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        switch restXMLError.errorCode {
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restXMLError.message, requestID: restXMLError.requestId, typeName: restXMLError.errorCode)
        }
    }
}
