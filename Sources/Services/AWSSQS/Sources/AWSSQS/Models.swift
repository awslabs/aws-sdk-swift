//
// Copyright Amazon.com Inc. or its affiliates.
// All Rights Reserved.
//
// SPDX-License-Identifier: Apache-2.0
//

// Code generated by smithy-swift-codegen. DO NOT EDIT!

@_spi(SmithyReadWrite) import ClientRuntime
import Foundation
import class SmithyHTTPAPI.HTTPResponse
@_spi(SmithyReadWrite) import class SmithyJSON.Reader
@_spi(SmithyReadWrite) import class SmithyJSON.Writer
import enum ClientRuntime.ErrorFault
import enum SmithyReadWrite.ReaderError
@_spi(SmithyReadWrite) import enum SmithyReadWrite.ReadingClosures
@_spi(SmithyReadWrite) import enum SmithyReadWrite.WritingClosures
import protocol AWSClientRuntime.AWSServiceError
import protocol ClientRuntime.HTTPError
import protocol ClientRuntime.ModeledError
@_spi(SmithyReadWrite) import protocol SmithyReadWrite.SmithyReader
@_spi(SmithyReadWrite) import protocol SmithyReadWrite.SmithyWriter
@_spi(SmithyReadWrite) import struct AWSClientRuntime.AWSJSONError
@_spi(UnknownAWSHTTPServiceError) import struct AWSClientRuntime.UnknownAWSHTTPServiceError
@_spi(SmithyReadWrite) import struct SmithyReadWrite.WritingClosureBox


public struct AddPermissionOutput: Swift.Sendable {

    public init() { }
}

public struct ChangeMessageVisibilityOutput: Swift.Sendable {

    public init() { }
}

public struct DeleteMessageOutput: Swift.Sendable {

    public init() { }
}

public struct DeleteQueueOutput: Swift.Sendable {

    public init() { }
}

public struct PurgeQueueOutput: Swift.Sendable {

    public init() { }
}

public struct RemovePermissionOutput: Swift.Sendable {

    public init() { }
}

public struct SetQueueAttributesOutput: Swift.Sendable {

    public init() { }
}

public struct TagQueueOutput: Swift.Sendable {

    public init() { }
}

public struct UntagQueueOutput: Swift.Sendable {

    public init() { }
}

/// The accountId is invalid.
public struct InvalidAddress: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidAddress" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// When the request to a queue is not HTTPS and SigV4.
public struct InvalidSecurity: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidSecurity" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The specified action violates a limit. For example, ReceiveMessage returns this error if the maximum number of in flight messages is reached and AddPermission returns this error if the maximum number of permissions for the queue is reached.
public struct OverLimit: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "OverLimit" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The specified queue doesn't exist.
public struct QueueDoesNotExist: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "AWS.SimpleQueueService.NonExistentQueue" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The request was denied due to request throttling.
///
/// * The rate of requests per second exceeds the Amazon Web Services KMS request quota for an account and Region.
///
/// * A burst or sustained high rate of requests to change the state of the same KMS key. This condition is often known as a "hot key."
///
/// * Requests for operations on KMS keys in a Amazon Web Services CloudHSM key store might be throttled at a lower-than-expected rate when the Amazon Web Services CloudHSM cluster associated with the Amazon Web Services CloudHSM key store is processing numerous commands, including those unrelated to the Amazon Web Services CloudHSM key store.
public struct RequestThrottled: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "RequestThrottled" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// Error code 400. Unsupported operation.
public struct UnsupportedOperation: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "AWS.SimpleQueueService.UnsupportedOperation" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

///
public struct AddPermissionInput: Swift.Sendable {
    /// The action the client wants to allow for the specified principal. Valid values: the name of any action or *. For more information about these actions, see [Overview of Managing Access Permissions to Your Amazon Simple Queue Service Resource](https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-overview-of-managing-access.html) in the Amazon SQS Developer Guide. Specifying SendMessage, DeleteMessage, or ChangeMessageVisibility for ActionName.n also grants permissions for the corresponding batch versions of those actions: SendMessageBatch, DeleteMessageBatch, and ChangeMessageVisibilityBatch.
    /// This member is required.
    public var actions: [Swift.String]?
    /// The Amazon Web Services account numbers of the [principals](https://docs.aws.amazon.com/general/latest/gr/glos-chap.html#P) who are to receive permission. For information about locating the Amazon Web Services account identification, see [Your Amazon Web Services Identifiers](https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-making-api-requests.html#sqs-api-request-authentication) in the Amazon SQS Developer Guide.
    /// This member is required.
    public var awsAccountIds: [Swift.String]?
    /// The unique identification of the permission you're setting (for example, AliceSendMessage). Maximum 80 characters. Allowed characters include alphanumeric characters, hyphens (-), and underscores (_).
    /// This member is required.
    public var label: Swift.String?
    /// The URL of the Amazon SQS queue to which permissions are added. Queue URLs and names are case-sensitive.
    /// This member is required.
    public var queueUrl: Swift.String?

    public init(
        actions: [Swift.String]? = nil,
        awsAccountIds: [Swift.String]? = nil,
        label: Swift.String? = nil,
        queueUrl: Swift.String? = nil
    )
    {
        self.actions = actions
        self.awsAccountIds = awsAccountIds
        self.label = label
        self.queueUrl = queueUrl
    }
}

/// One or more specified resources don't exist.
public struct ResourceNotFoundException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ResourceNotFoundException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

public struct CancelMessageMoveTaskInput: Swift.Sendable {
    /// An identifier associated with a message movement task.
    /// This member is required.
    public var taskHandle: Swift.String?

    public init(
        taskHandle: Swift.String? = nil
    )
    {
        self.taskHandle = taskHandle
    }
}

public struct CancelMessageMoveTaskOutput: Swift.Sendable {
    /// The approximate number of messages already moved to the destination queue.
    public var approximateNumberOfMessagesMoved: Swift.Int

    public init(
        approximateNumberOfMessagesMoved: Swift.Int = 0
    )
    {
        self.approximateNumberOfMessagesMoved = approximateNumberOfMessagesMoved
    }
}

/// The specified message isn't in flight.
public struct MessageNotInflight: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {
    public static var typeName: Swift.String { "AWS.SimpleQueueService.MessageNotInflight" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init() { }
}

/// The specified receipt handle isn't valid.
public struct ReceiptHandleIsInvalid: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ReceiptHandleIsInvalid" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

public struct ChangeMessageVisibilityInput: Swift.Sendable {
    /// The URL of the Amazon SQS queue whose message's visibility is changed. Queue URLs and names are case-sensitive.
    /// This member is required.
    public var queueUrl: Swift.String?
    /// The receipt handle associated with the message, whose visibility timeout is changed. This parameter is returned by the [ReceiveMessage] action.
    /// This member is required.
    public var receiptHandle: Swift.String?
    /// The new value for the message's visibility timeout (in seconds). Values range: 0 to 43200. Maximum: 12 hours.
    /// This member is required.
    public var visibilityTimeout: Swift.Int?

    public init(
        queueUrl: Swift.String? = nil,
        receiptHandle: Swift.String? = nil,
        visibilityTimeout: Swift.Int? = nil
    )
    {
        self.queueUrl = queueUrl
        self.receiptHandle = receiptHandle
        self.visibilityTimeout = visibilityTimeout
    }
}

/// Two or more batch entries in the request have the same Id.
public struct BatchEntryIdsNotDistinct: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "AWS.SimpleQueueService.BatchEntryIdsNotDistinct" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The batch request doesn't contain any entries.
public struct EmptyBatchRequest: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "AWS.SimpleQueueService.EmptyBatchRequest" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The Id of a batch entry in a batch request doesn't abide by the specification.
public struct InvalidBatchEntryId: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "AWS.SimpleQueueService.InvalidBatchEntryId" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The batch request contains more entries than permissible.
public struct TooManyEntriesInBatchRequest: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "AWS.SimpleQueueService.TooManyEntriesInBatchRequest" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension SQSClientTypes {

    /// Encloses a receipt handle and an entry ID for each message in [ChangeMessageVisibilityBatch].
    public struct ChangeMessageVisibilityBatchRequestEntry: Swift.Sendable {
        /// An identifier for this particular receipt handle used to communicate the result. The Ids of a batch request need to be unique within a request. This identifier can have up to 80 characters. The following characters are accepted: alphanumeric characters, hyphens(-), and underscores (_).
        /// This member is required.
        public var id: Swift.String?
        /// A receipt handle.
        /// This member is required.
        public var receiptHandle: Swift.String?
        /// The new value (in seconds) for the message's visibility timeout.
        public var visibilityTimeout: Swift.Int?

        public init(
            id: Swift.String? = nil,
            receiptHandle: Swift.String? = nil,
            visibilityTimeout: Swift.Int? = nil
        )
        {
            self.id = id
            self.receiptHandle = receiptHandle
            self.visibilityTimeout = visibilityTimeout
        }
    }
}

///
public struct ChangeMessageVisibilityBatchInput: Swift.Sendable {
    /// Lists the receipt handles of the messages for which the visibility timeout must be changed.
    /// This member is required.
    public var entries: [SQSClientTypes.ChangeMessageVisibilityBatchRequestEntry]?
    /// The URL of the Amazon SQS queue whose messages' visibility is changed. Queue URLs and names are case-sensitive.
    /// This member is required.
    public var queueUrl: Swift.String?

    public init(
        entries: [SQSClientTypes.ChangeMessageVisibilityBatchRequestEntry]? = nil,
        queueUrl: Swift.String? = nil
    )
    {
        self.entries = entries
        self.queueUrl = queueUrl
    }
}

extension SQSClientTypes {

    /// Gives a detailed description of the result of an action on each entry in the request.
    public struct BatchResultErrorEntry: Swift.Sendable {
        /// An error code representing why the action failed on this entry.
        /// This member is required.
        public var code: Swift.String?
        /// The Id of an entry in a batch request.
        /// This member is required.
        public var id: Swift.String?
        /// A message explaining why the action failed on this entry.
        public var message: Swift.String?
        /// Specifies whether the error happened due to the caller of the batch API action.
        /// This member is required.
        public var senderFault: Swift.Bool

        public init(
            code: Swift.String? = nil,
            id: Swift.String? = nil,
            message: Swift.String? = nil,
            senderFault: Swift.Bool = false
        )
        {
            self.code = code
            self.id = id
            self.message = message
            self.senderFault = senderFault
        }
    }
}

extension SQSClientTypes {

    /// Encloses the Id of an entry in [ChangeMessageVisibilityBatch].
    public struct ChangeMessageVisibilityBatchResultEntry: Swift.Sendable {
        /// Represents a message whose visibility timeout has been changed successfully.
        /// This member is required.
        public var id: Swift.String?

        public init(
            id: Swift.String? = nil
        )
        {
            self.id = id
        }
    }
}

/// For each message in the batch, the response contains a [ChangeMessageVisibilityBatchResultEntry] tag if the message succeeds or a [BatchResultErrorEntry] tag if the message fails.
public struct ChangeMessageVisibilityBatchOutput: Swift.Sendable {
    /// A list of [BatchResultErrorEntry] items.
    /// This member is required.
    public var failed: [SQSClientTypes.BatchResultErrorEntry]?
    /// A list of [ChangeMessageVisibilityBatchResultEntry] items.
    /// This member is required.
    public var successful: [SQSClientTypes.ChangeMessageVisibilityBatchResultEntry]?

    public init(
        failed: [SQSClientTypes.BatchResultErrorEntry]? = nil,
        successful: [SQSClientTypes.ChangeMessageVisibilityBatchResultEntry]? = nil
    )
    {
        self.failed = failed
        self.successful = successful
    }
}

/// The specified attribute doesn't exist.
public struct InvalidAttributeName: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidAttributeName" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// A queue attribute value is invalid.
public struct InvalidAttributeValue: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidAttributeValue" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// You must wait 60 seconds after deleting a queue before you can create another queue with the same name.
public struct QueueDeletedRecently: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "AWS.SimpleQueueService.QueueDeletedRecently" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// A queue with this name already exists. Amazon SQS returns this error only if the request includes attributes whose values differ from those of the existing queue.
public struct QueueNameExists: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "QueueAlreadyExists" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension SQSClientTypes {

    public enum QueueAttributeName: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case all
        case approximatenumberofmessages
        case approximatenumberofmessagesdelayed
        case approximatenumberofmessagesnotvisible
        case contentbaseddeduplication
        case createdtimestamp
        case deduplicationscope
        case delayseconds
        case fifoqueue
        case fifothroughputlimit
        case kmsdatakeyreuseperiodseconds
        case kmsmasterkeyid
        case lastmodifiedtimestamp
        case maximummessagesize
        case messageretentionperiod
        case policy
        case queuearn
        case receivemessagewaittimeseconds
        case redriveallowpolicy
        case redrivepolicy
        case sqsmanagedsseenabled
        case visibilitytimeout
        case sdkUnknown(Swift.String)

        public static var allCases: [QueueAttributeName] {
            return [
                .all,
                .approximatenumberofmessages,
                .approximatenumberofmessagesdelayed,
                .approximatenumberofmessagesnotvisible,
                .contentbaseddeduplication,
                .createdtimestamp,
                .deduplicationscope,
                .delayseconds,
                .fifoqueue,
                .fifothroughputlimit,
                .kmsdatakeyreuseperiodseconds,
                .kmsmasterkeyid,
                .lastmodifiedtimestamp,
                .maximummessagesize,
                .messageretentionperiod,
                .policy,
                .queuearn,
                .receivemessagewaittimeseconds,
                .redriveallowpolicy,
                .redrivepolicy,
                .sqsmanagedsseenabled,
                .visibilitytimeout
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .all: return "All"
            case .approximatenumberofmessages: return "ApproximateNumberOfMessages"
            case .approximatenumberofmessagesdelayed: return "ApproximateNumberOfMessagesDelayed"
            case .approximatenumberofmessagesnotvisible: return "ApproximateNumberOfMessagesNotVisible"
            case .contentbaseddeduplication: return "ContentBasedDeduplication"
            case .createdtimestamp: return "CreatedTimestamp"
            case .deduplicationscope: return "DeduplicationScope"
            case .delayseconds: return "DelaySeconds"
            case .fifoqueue: return "FifoQueue"
            case .fifothroughputlimit: return "FifoThroughputLimit"
            case .kmsdatakeyreuseperiodseconds: return "KmsDataKeyReusePeriodSeconds"
            case .kmsmasterkeyid: return "KmsMasterKeyId"
            case .lastmodifiedtimestamp: return "LastModifiedTimestamp"
            case .maximummessagesize: return "MaximumMessageSize"
            case .messageretentionperiod: return "MessageRetentionPeriod"
            case .policy: return "Policy"
            case .queuearn: return "QueueArn"
            case .receivemessagewaittimeseconds: return "ReceiveMessageWaitTimeSeconds"
            case .redriveallowpolicy: return "RedriveAllowPolicy"
            case .redrivepolicy: return "RedrivePolicy"
            case .sqsmanagedsseenabled: return "SqsManagedSseEnabled"
            case .visibilitytimeout: return "VisibilityTimeout"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

///
public struct CreateQueueInput: Swift.Sendable {
    /// A map of attributes with their corresponding values. The following lists the names, descriptions, and values of the special request parameters that the CreateQueue action uses:
    ///
    /// * DelaySeconds – The length of time, in seconds, for which the delivery of all messages in the queue is delayed. Valid values: An integer from 0 to 900 seconds (15 minutes). Default: 0.
    ///
    /// * MaximumMessageSize – The limit of how many bytes a message can contain before Amazon SQS rejects it. Valid values: An integer from 1,024 bytes (1 KiB) to 262,144 bytes (256 KiB). Default: 262,144 (256 KiB).
    ///
    /// * MessageRetentionPeriod – The length of time, in seconds, for which Amazon SQS retains a message. Valid values: An integer from 60 seconds (1 minute) to 1,209,600 seconds (14 days). Default: 345,600 (4 days). When you change a queue's attributes, the change can take up to 60 seconds for most of the attributes to propagate throughout the Amazon SQS system. Changes made to the MessageRetentionPeriod attribute can take up to 15 minutes and will impact existing messages in the queue potentially causing them to be expired and deleted if the MessageRetentionPeriod is reduced below the age of existing messages.
    ///
    /// * Policy – The queue's policy. A valid Amazon Web Services policy. For more information about policy structure, see [Overview of Amazon Web Services IAM Policies](https://docs.aws.amazon.com/IAM/latest/UserGuide/PoliciesOverview.html) in the IAM User Guide.
    ///
    /// * ReceiveMessageWaitTimeSeconds – The length of time, in seconds, for which a [ReceiveMessage] action waits for a message to arrive. Valid values: An integer from 0 to 20 (seconds). Default: 0.
    ///
    /// * VisibilityTimeout – The visibility timeout for the queue, in seconds. Valid values: An integer from 0 to 43,200 (12 hours). Default: 30. For more information about the visibility timeout, see [Visibility Timeout](https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-visibility-timeout.html) in the Amazon SQS Developer Guide.
    ///
    ///
    /// The following attributes apply only to [dead-letter queues:](https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-dead-letter-queues.html)
    ///
    /// * RedrivePolicy – The string that includes the parameters for the dead-letter queue functionality of the source queue as a JSON object. The parameters are as follows:
    ///
    /// * deadLetterTargetArn – The Amazon Resource Name (ARN) of the dead-letter queue to which Amazon SQS moves messages after the value of maxReceiveCount is exceeded.
    ///
    /// * maxReceiveCount – The number of times a message is delivered to the source queue before being moved to the dead-letter queue. Default: 10. When the ReceiveCount for a message exceeds the maxReceiveCount for a queue, Amazon SQS moves the message to the dead-letter-queue.
    ///
    ///
    ///
    ///
    /// * RedriveAllowPolicy – The string that includes the parameters for the permissions for the dead-letter queue redrive permission and which source queues can specify dead-letter queues as a JSON object. The parameters are as follows:
    ///
    /// * redrivePermission – The permission type that defines which source queues can specify the current queue as the dead-letter queue. Valid values are:
    ///
    /// * allowAll – (Default) Any source queues in this Amazon Web Services account in the same Region can specify this queue as the dead-letter queue.
    ///
    /// * denyAll – No source queues can specify this queue as the dead-letter queue.
    ///
    /// * byQueue – Only queues specified by the sourceQueueArns parameter can specify this queue as the dead-letter queue.
    ///
    ///
    ///
    ///
    /// * sourceQueueArns – The Amazon Resource Names (ARN)s of the source queues that can specify this queue as the dead-letter queue and redrive messages. You can specify this parameter only when the redrivePermission parameter is set to byQueue. You can specify up to 10 source queue ARNs. To allow more than 10 source queues to specify dead-letter queues, set the redrivePermission parameter to allowAll.
    ///
    ///
    ///
    ///
    ///
    /// The dead-letter queue of a FIFO queue must also be a FIFO queue. Similarly, the dead-letter queue of a standard queue must also be a standard queue. The following attributes apply only to [server-side-encryption](https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-server-side-encryption.html):
    ///
    /// * KmsMasterKeyId – The ID of an Amazon Web Services managed customer master key (CMK) for Amazon SQS or a custom CMK. For more information, see [Key Terms](https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-server-side-encryption.html#sqs-sse-key-terms). While the alias of the Amazon Web Services managed CMK for Amazon SQS is always alias/aws/sqs, the alias of a custom CMK can, for example, be alias/MyAlias . For more examples, see [KeyId](https://docs.aws.amazon.com/kms/latest/APIReference/API_DescribeKey.html#API_DescribeKey_RequestParameters) in the Key Management Service API Reference.
    ///
    /// * KmsDataKeyReusePeriodSeconds – The length of time, in seconds, for which Amazon SQS can reuse a [data key](https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#data-keys) to encrypt or decrypt messages before calling KMS again. An integer representing seconds, between 60 seconds (1 minute) and 86,400 seconds (24 hours). Default: 300 (5 minutes). A shorter time period provides better security but results in more calls to KMS which might incur charges after Free Tier. For more information, see [How Does the Data Key Reuse Period Work?](https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-server-side-encryption.html#sqs-how-does-the-data-key-reuse-period-work)
    ///
    /// * SqsManagedSseEnabled – Enables server-side queue encryption using SQS owned encryption keys. Only one server-side encryption option is supported per queue (for example, [SSE-KMS](https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-configure-sse-existing-queue.html) or [SSE-SQS](https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-configure-sqs-sse-queue.html)).
    ///
    ///
    /// The following attributes apply only to [FIFO (first-in-first-out) queues](https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/FIFO-queues.html):
    ///
    /// * FifoQueue – Designates a queue as FIFO. Valid values are true and false. If you don't specify the FifoQueue attribute, Amazon SQS creates a standard queue. You can provide this attribute only during queue creation. You can't change it for an existing queue. When you set this attribute, you must also provide the MessageGroupId for your messages explicitly. For more information, see [FIFO queue logic](https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/FIFO-queues-understanding-logic.html) in the Amazon SQS Developer Guide.
    ///
    /// * ContentBasedDeduplication – Enables content-based deduplication. Valid values are true and false. For more information, see [Exactly-once processing](https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/FIFO-queues-exactly-once-processing.html) in the Amazon SQS Developer Guide. Note the following:
    ///
    /// * Every message must have a unique MessageDeduplicationId.
    ///
    /// * You may provide a MessageDeduplicationId explicitly.
    ///
    /// * If you aren't able to provide a MessageDeduplicationId and you enable ContentBasedDeduplication for your queue, Amazon SQS uses a SHA-256 hash to generate the MessageDeduplicationId using the body of the message (but not the attributes of the message).
    ///
    /// * If you don't provide a MessageDeduplicationId and the queue doesn't have ContentBasedDeduplication set, the action fails with an error.
    ///
    /// * If the queue has ContentBasedDeduplication set, your MessageDeduplicationId overrides the generated one.
    ///
    ///
    ///
    ///
    /// * When ContentBasedDeduplication is in effect, messages with identical content sent within the deduplication interval are treated as duplicates and only one copy of the message is delivered.
    ///
    /// * If you send one message with ContentBasedDeduplication enabled and then another message with a MessageDeduplicationId that is the same as the one generated for the first MessageDeduplicationId, the two messages are treated as duplicates and only one copy of the message is delivered.
    ///
    ///
    ///
    ///
    ///
    /// The following attributes apply only to [high throughput for FIFO queues](https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/high-throughput-fifo.html):
    ///
    /// * DeduplicationScope – Specifies whether message deduplication occurs at the message group or queue level. Valid values are messageGroup and queue.
    ///
    /// * FifoThroughputLimit – Specifies whether the FIFO queue throughput quota applies to the entire queue or per message group. Valid values are perQueue and perMessageGroupId. The perMessageGroupId value is allowed only when the value for DeduplicationScope is messageGroup.
    ///
    ///
    /// To enable high throughput for FIFO queues, do the following:
    ///
    /// * Set DeduplicationScope to messageGroup.
    ///
    /// * Set FifoThroughputLimit to perMessageGroupId.
    ///
    ///
    /// If you set these attributes to anything other than the values shown for enabling high throughput, normal throughput is in effect and deduplication occurs as specified. For information on throughput quotas, see [Quotas related to messages](https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/quotas-messages.html) in the Amazon SQS Developer Guide.
    public var attributes: [Swift.String: Swift.String]?
    /// The name of the new queue. The following limits apply to this name:
    ///
    /// * A queue name can have up to 80 characters.
    ///
    /// * Valid values: alphanumeric characters, hyphens (-), and underscores (_).
    ///
    /// * A FIFO queue name must end with the .fifo suffix.
    ///
    ///
    /// Queue URLs and names are case-sensitive.
    /// This member is required.
    public var queueName: Swift.String?
    /// Add cost allocation tags to the specified Amazon SQS queue. For an overview, see [Tagging Your Amazon SQS Queues](https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-queue-tags.html) in the Amazon SQS Developer Guide. When you use queue tags, keep the following guidelines in mind:
    ///
    /// * Adding more than 50 tags to a queue isn't recommended.
    ///
    /// * Tags don't have any semantic meaning. Amazon SQS interprets tags as character strings.
    ///
    /// * Tags are case-sensitive.
    ///
    /// * A new tag with a key identical to that of an existing tag overwrites the existing tag.
    ///
    ///
    /// For a full list of tag restrictions, see [Quotas related to queues](https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-limits.html#limits-queues) in the Amazon SQS Developer Guide. To be able to tag a queue on creation, you must have the sqs:CreateQueue and sqs:TagQueue permissions. Cross-account permissions don't apply to this action. For more information, see [Grant cross-account permissions to a role and a username](https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-customer-managed-policy-examples.html#grant-cross-account-permissions-to-role-and-user-name) in the Amazon SQS Developer Guide.
    public var tags: [Swift.String: Swift.String]?

    public init(
        attributes: [Swift.String: Swift.String]? = nil,
        queueName: Swift.String? = nil,
        tags: [Swift.String: Swift.String]? = nil
    )
    {
        self.attributes = attributes
        self.queueName = queueName
        self.tags = tags
    }
}

/// Returns the QueueUrl attribute of the created queue.
public struct CreateQueueOutput: Swift.Sendable {
    /// The URL of the created Amazon SQS queue.
    public var queueUrl: Swift.String?

    public init(
        queueUrl: Swift.String? = nil
    )
    {
        self.queueUrl = queueUrl
    }
}

/// The specified receipt handle isn't valid for the current version.
@available(*, deprecated, message: "exception has been included in ReceiptHandleIsInvalid")
public struct InvalidIdFormat: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {
    public static var typeName: Swift.String { "InvalidIdFormat" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init() { }
}

///
public struct DeleteMessageInput: Swift.Sendable {
    /// The URL of the Amazon SQS queue from which messages are deleted. Queue URLs and names are case-sensitive.
    /// This member is required.
    public var queueUrl: Swift.String?
    /// The receipt handle associated with the message to delete.
    /// This member is required.
    public var receiptHandle: Swift.String?

    public init(
        queueUrl: Swift.String? = nil,
        receiptHandle: Swift.String? = nil
    )
    {
        self.queueUrl = queueUrl
        self.receiptHandle = receiptHandle
    }
}

extension SQSClientTypes {

    /// Encloses a receipt handle and an identifier for it.
    public struct DeleteMessageBatchRequestEntry: Swift.Sendable {
        /// The identifier for this particular receipt handle. This is used to communicate the result. The Ids of a batch request need to be unique within a request. This identifier can have up to 80 characters. The following characters are accepted: alphanumeric characters, hyphens(-), and underscores (_).
        /// This member is required.
        public var id: Swift.String?
        /// A receipt handle.
        /// This member is required.
        public var receiptHandle: Swift.String?

        public init(
            id: Swift.String? = nil,
            receiptHandle: Swift.String? = nil
        )
        {
            self.id = id
            self.receiptHandle = receiptHandle
        }
    }
}

///
public struct DeleteMessageBatchInput: Swift.Sendable {
    /// Lists the receipt handles for the messages to be deleted.
    /// This member is required.
    public var entries: [SQSClientTypes.DeleteMessageBatchRequestEntry]?
    /// The URL of the Amazon SQS queue from which messages are deleted. Queue URLs and names are case-sensitive.
    /// This member is required.
    public var queueUrl: Swift.String?

    public init(
        entries: [SQSClientTypes.DeleteMessageBatchRequestEntry]? = nil,
        queueUrl: Swift.String? = nil
    )
    {
        self.entries = entries
        self.queueUrl = queueUrl
    }
}

extension SQSClientTypes {

    /// Encloses the Id of an entry in [DeleteMessageBatch].
    public struct DeleteMessageBatchResultEntry: Swift.Sendable {
        /// Represents a successfully deleted message.
        /// This member is required.
        public var id: Swift.String?

        public init(
            id: Swift.String? = nil
        )
        {
            self.id = id
        }
    }
}

/// For each message in the batch, the response contains a [DeleteMessageBatchResultEntry] tag if the message is deleted or a [BatchResultErrorEntry] tag if the message can't be deleted.
public struct DeleteMessageBatchOutput: Swift.Sendable {
    /// A list of [BatchResultErrorEntry] items.
    /// This member is required.
    public var failed: [SQSClientTypes.BatchResultErrorEntry]?
    /// A list of [DeleteMessageBatchResultEntry] items.
    /// This member is required.
    public var successful: [SQSClientTypes.DeleteMessageBatchResultEntry]?

    public init(
        failed: [SQSClientTypes.BatchResultErrorEntry]? = nil,
        successful: [SQSClientTypes.DeleteMessageBatchResultEntry]? = nil
    )
    {
        self.failed = failed
        self.successful = successful
    }
}

///
public struct DeleteQueueInput: Swift.Sendable {
    /// The URL of the Amazon SQS queue to delete. Queue URLs and names are case-sensitive.
    /// This member is required.
    public var queueUrl: Swift.String?

    public init(
        queueUrl: Swift.String? = nil
    )
    {
        self.queueUrl = queueUrl
    }
}

///
public struct GetQueueAttributesInput: Swift.Sendable {
    /// A list of attributes for which to retrieve information. The AttributeNames parameter is optional, but if you don't specify values for this parameter, the request returns empty results. In the future, new attributes might be added. If you write code that calls this action, we recommend that you structure your code so that it can handle new attributes gracefully. The following attributes are supported: The ApproximateNumberOfMessagesDelayed, ApproximateNumberOfMessagesNotVisible, and ApproximateNumberOfMessages metrics may not achieve consistency until at least 1 minute after the producers stop sending messages. This period is required for the queue metadata to reach eventual consistency.
    ///
    /// * All – Returns all values.
    ///
    /// * ApproximateNumberOfMessages – Returns the approximate number of messages available for retrieval from the queue.
    ///
    /// * ApproximateNumberOfMessagesDelayed – Returns the approximate number of messages in the queue that are delayed and not available for reading immediately. This can happen when the queue is configured as a delay queue or when a message has been sent with a delay parameter.
    ///
    /// * ApproximateNumberOfMessagesNotVisible – Returns the approximate number of messages that are in flight. Messages are considered to be in flight if they have been sent to a client but have not yet been deleted or have not yet reached the end of their visibility window.
    ///
    /// * CreatedTimestamp – Returns the time when the queue was created in seconds ([epoch time](http://en.wikipedia.org/wiki/Unix_time)).
    ///
    /// * DelaySeconds – Returns the default delay on the queue in seconds.
    ///
    /// * LastModifiedTimestamp – Returns the time when the queue was last changed in seconds ([epoch time](http://en.wikipedia.org/wiki/Unix_time)).
    ///
    /// * MaximumMessageSize – Returns the limit of how many bytes a message can contain before Amazon SQS rejects it.
    ///
    /// * MessageRetentionPeriod – Returns the length of time, in seconds, for which Amazon SQS retains a message. When you change a queue's attributes, the change can take up to 60 seconds for most of the attributes to propagate throughout the Amazon SQS system. Changes made to the MessageRetentionPeriod attribute can take up to 15 minutes and will impact existing messages in the queue potentially causing them to be expired and deleted if the MessageRetentionPeriod is reduced below the age of existing messages.
    ///
    /// * Policy – Returns the policy of the queue.
    ///
    /// * QueueArn – Returns the Amazon resource name (ARN) of the queue.
    ///
    /// * ReceiveMessageWaitTimeSeconds – Returns the length of time, in seconds, for which the ReceiveMessage action waits for a message to arrive.
    ///
    /// * VisibilityTimeout – Returns the visibility timeout for the queue. For more information about the visibility timeout, see [Visibility Timeout](https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-visibility-timeout.html) in the Amazon SQS Developer Guide.
    ///
    ///
    /// The following attributes apply only to [dead-letter queues:](https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-dead-letter-queues.html)
    ///
    /// * RedrivePolicy – The string that includes the parameters for the dead-letter queue functionality of the source queue as a JSON object. The parameters are as follows:
    ///
    /// * deadLetterTargetArn – The Amazon Resource Name (ARN) of the dead-letter queue to which Amazon SQS moves messages after the value of maxReceiveCount is exceeded.
    ///
    /// * maxReceiveCount – The number of times a message is delivered to the source queue before being moved to the dead-letter queue. Default: 10. When the ReceiveCount for a message exceeds the maxReceiveCount for a queue, Amazon SQS moves the message to the dead-letter-queue.
    ///
    ///
    ///
    ///
    /// * RedriveAllowPolicy – The string that includes the parameters for the permissions for the dead-letter queue redrive permission and which source queues can specify dead-letter queues as a JSON object. The parameters are as follows:
    ///
    /// * redrivePermission – The permission type that defines which source queues can specify the current queue as the dead-letter queue. Valid values are:
    ///
    /// * allowAll – (Default) Any source queues in this Amazon Web Services account in the same Region can specify this queue as the dead-letter queue.
    ///
    /// * denyAll – No source queues can specify this queue as the dead-letter queue.
    ///
    /// * byQueue – Only queues specified by the sourceQueueArns parameter can specify this queue as the dead-letter queue.
    ///
    ///
    ///
    ///
    /// * sourceQueueArns – The Amazon Resource Names (ARN)s of the source queues that can specify this queue as the dead-letter queue and redrive messages. You can specify this parameter only when the redrivePermission parameter is set to byQueue. You can specify up to 10 source queue ARNs. To allow more than 10 source queues to specify dead-letter queues, set the redrivePermission parameter to allowAll.
    ///
    ///
    ///
    ///
    ///
    /// The dead-letter queue of a FIFO queue must also be a FIFO queue. Similarly, the dead-letter queue of a standard queue must also be a standard queue. The following attributes apply only to [server-side-encryption](https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-server-side-encryption.html):
    ///
    /// * KmsMasterKeyId – Returns the ID of an Amazon Web Services managed customer master key (CMK) for Amazon SQS or a custom CMK. For more information, see [Key Terms](https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-server-side-encryption.html#sqs-sse-key-terms).
    ///
    /// * KmsDataKeyReusePeriodSeconds – Returns the length of time, in seconds, for which Amazon SQS can reuse a data key to encrypt or decrypt messages before calling KMS again. For more information, see [How Does the Data Key Reuse Period Work?](https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-server-side-encryption.html#sqs-how-does-the-data-key-reuse-period-work).
    ///
    /// * SqsManagedSseEnabled – Returns information about whether the queue is using SSE-SQS encryption using SQS owned encryption keys. Only one server-side encryption option is supported per queue (for example, [SSE-KMS](https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-configure-sse-existing-queue.html) or [SSE-SQS](https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-configure-sqs-sse-queue.html)).
    ///
    ///
    /// The following attributes apply only to [FIFO (first-in-first-out) queues](https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/FIFO-queues.html):
    ///
    /// * FifoQueue – Returns information about whether the queue is FIFO. For more information, see [FIFO queue logic](https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/FIFO-queues-understanding-logic.html) in the Amazon SQS Developer Guide. To determine whether a queue is [FIFO](https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/FIFO-queues.html), you can check whether QueueName ends with the .fifo suffix.
    ///
    /// * ContentBasedDeduplication – Returns whether content-based deduplication is enabled for the queue. For more information, see [Exactly-once processing](https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/FIFO-queues-exactly-once-processing.html) in the Amazon SQS Developer Guide.
    ///
    ///
    /// The following attributes apply only to [high throughput for FIFO queues](https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/high-throughput-fifo.html):
    ///
    /// * DeduplicationScope – Specifies whether message deduplication occurs at the message group or queue level. Valid values are messageGroup and queue.
    ///
    /// * FifoThroughputLimit – Specifies whether the FIFO queue throughput quota applies to the entire queue or per message group. Valid values are perQueue and perMessageGroupId. The perMessageGroupId value is allowed only when the value for DeduplicationScope is messageGroup.
    ///
    ///
    /// To enable high throughput for FIFO queues, do the following:
    ///
    /// * Set DeduplicationScope to messageGroup.
    ///
    /// * Set FifoThroughputLimit to perMessageGroupId.
    ///
    ///
    /// If you set these attributes to anything other than the values shown for enabling high throughput, normal throughput is in effect and deduplication occurs as specified. For information on throughput quotas, see [Quotas related to messages](https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/quotas-messages.html) in the Amazon SQS Developer Guide.
    public var attributeNames: [SQSClientTypes.QueueAttributeName]?
    /// The URL of the Amazon SQS queue whose attribute information is retrieved. Queue URLs and names are case-sensitive.
    /// This member is required.
    public var queueUrl: Swift.String?

    public init(
        attributeNames: [SQSClientTypes.QueueAttributeName]? = nil,
        queueUrl: Swift.String? = nil
    )
    {
        self.attributeNames = attributeNames
        self.queueUrl = queueUrl
    }
}

/// A list of returned queue attributes.
public struct GetQueueAttributesOutput: Swift.Sendable {
    /// A map of attributes to their respective values.
    public var attributes: [Swift.String: Swift.String]?

    public init(
        attributes: [Swift.String: Swift.String]? = nil
    )
    {
        self.attributes = attributes
    }
}

///
public struct GetQueueUrlInput: Swift.Sendable {
    /// The name of the queue whose URL must be fetched. Maximum 80 characters. Valid values: alphanumeric characters, hyphens (-), and underscores (_). Queue URLs and names are case-sensitive.
    /// This member is required.
    public var queueName: Swift.String?
    /// The Amazon Web Services account ID of the account that created the queue.
    public var queueOwnerAWSAccountId: Swift.String?

    public init(
        queueName: Swift.String? = nil,
        queueOwnerAWSAccountId: Swift.String? = nil
    )
    {
        self.queueName = queueName
        self.queueOwnerAWSAccountId = queueOwnerAWSAccountId
    }
}

/// For more information, see [Interpreting Responses](https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-api-responses.html) in the Amazon SQS Developer Guide.
public struct GetQueueUrlOutput: Swift.Sendable {
    /// The URL of the queue.
    public var queueUrl: Swift.String?

    public init(
        queueUrl: Swift.String? = nil
    )
    {
        self.queueUrl = queueUrl
    }
}

///
public struct ListDeadLetterSourceQueuesInput: Swift.Sendable {
    /// Maximum number of results to include in the response. Value range is 1 to 1000. You must set MaxResults to receive a value for NextToken in the response.
    public var maxResults: Swift.Int?
    /// Pagination token to request the next set of results.
    public var nextToken: Swift.String?
    /// The URL of a dead-letter queue. Queue URLs and names are case-sensitive.
    /// This member is required.
    public var queueUrl: Swift.String?

    public init(
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        queueUrl: Swift.String? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.queueUrl = queueUrl
    }
}

/// A list of your dead letter source queues.
public struct ListDeadLetterSourceQueuesOutput: Swift.Sendable {
    /// Pagination token to include in the next request. Token value is null if there are no additional results to request, or if you did not set MaxResults in the request.
    public var nextToken: Swift.String?
    /// A list of source queue URLs that have the RedrivePolicy queue attribute configured with a dead-letter queue.
    /// This member is required.
    public var queueUrls: [Swift.String]?

    public init(
        nextToken: Swift.String? = nil,
        queueUrls: [Swift.String]? = nil
    )
    {
        self.nextToken = nextToken
        self.queueUrls = queueUrls
    }
}

public struct ListMessageMoveTasksInput: Swift.Sendable {
    /// The maximum number of results to include in the response. The default is 1, which provides the most recent message movement task. The upper limit is 10.
    public var maxResults: Swift.Int?
    /// The ARN of the queue whose message movement tasks are to be listed.
    /// This member is required.
    public var sourceArn: Swift.String?

    public init(
        maxResults: Swift.Int? = nil,
        sourceArn: Swift.String? = nil
    )
    {
        self.maxResults = maxResults
        self.sourceArn = sourceArn
    }
}

extension SQSClientTypes {

    /// Contains the details of a message movement task.
    public struct ListMessageMoveTasksResultEntry: Swift.Sendable {
        /// The approximate number of messages already moved to the destination queue.
        public var approximateNumberOfMessagesMoved: Swift.Int
        /// The number of messages to be moved from the source queue. This number is obtained at the time of starting the message movement task and is only included after the message movement task is selected to start.
        public var approximateNumberOfMessagesToMove: Swift.Int?
        /// The ARN of the destination queue if it has been specified in the StartMessageMoveTask request. If a DestinationArn has not been specified in the StartMessageMoveTask request, this field value will be NULL.
        public var destinationArn: Swift.String?
        /// The task failure reason (only included if the task status is FAILED).
        public var failureReason: Swift.String?
        /// The number of messages to be moved per second (the message movement rate), if it has been specified in the StartMessageMoveTask request. If a MaxNumberOfMessagesPerSecond has not been specified in the StartMessageMoveTask request, this field value will be NULL.
        public var maxNumberOfMessagesPerSecond: Swift.Int?
        /// The ARN of the queue that contains the messages to be moved to another queue.
        public var sourceArn: Swift.String?
        /// The timestamp of starting the message movement task.
        public var startedTimestamp: Swift.Int
        /// The status of the message movement task. Possible values are: RUNNING, COMPLETED, CANCELLING, CANCELLED, and FAILED.
        public var status: Swift.String?
        /// An identifier associated with a message movement task. When this field is returned in the response of the ListMessageMoveTasks action, it is only populated for tasks that are in RUNNING status.
        public var taskHandle: Swift.String?

        public init(
            approximateNumberOfMessagesMoved: Swift.Int = 0,
            approximateNumberOfMessagesToMove: Swift.Int? = nil,
            destinationArn: Swift.String? = nil,
            failureReason: Swift.String? = nil,
            maxNumberOfMessagesPerSecond: Swift.Int? = nil,
            sourceArn: Swift.String? = nil,
            startedTimestamp: Swift.Int = 0,
            status: Swift.String? = nil,
            taskHandle: Swift.String? = nil
        )
        {
            self.approximateNumberOfMessagesMoved = approximateNumberOfMessagesMoved
            self.approximateNumberOfMessagesToMove = approximateNumberOfMessagesToMove
            self.destinationArn = destinationArn
            self.failureReason = failureReason
            self.maxNumberOfMessagesPerSecond = maxNumberOfMessagesPerSecond
            self.sourceArn = sourceArn
            self.startedTimestamp = startedTimestamp
            self.status = status
            self.taskHandle = taskHandle
        }
    }
}

public struct ListMessageMoveTasksOutput: Swift.Sendable {
    /// A list of message movement tasks and their attributes.
    public var results: [SQSClientTypes.ListMessageMoveTasksResultEntry]?

    public init(
        results: [SQSClientTypes.ListMessageMoveTasksResultEntry]? = nil
    )
    {
        self.results = results
    }
}

///
public struct ListQueuesInput: Swift.Sendable {
    /// Maximum number of results to include in the response. Value range is 1 to 1000. You must set MaxResults to receive a value for NextToken in the response.
    public var maxResults: Swift.Int?
    /// Pagination token to request the next set of results.
    public var nextToken: Swift.String?
    /// A string to use for filtering the list results. Only those queues whose name begins with the specified string are returned. Queue URLs and names are case-sensitive.
    public var queueNamePrefix: Swift.String?

    public init(
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        queueNamePrefix: Swift.String? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.queueNamePrefix = queueNamePrefix
    }
}

/// A list of your queues.
public struct ListQueuesOutput: Swift.Sendable {
    /// Pagination token to include in the next request. Token value is null if there are no additional results to request, or if you did not set MaxResults in the request.
    public var nextToken: Swift.String?
    /// A list of queue URLs, up to 1,000 entries, or the value of MaxResults that you sent in the request.
    public var queueUrls: [Swift.String]?

    public init(
        nextToken: Swift.String? = nil,
        queueUrls: [Swift.String]? = nil
    )
    {
        self.nextToken = nextToken
        self.queueUrls = queueUrls
    }
}

public struct ListQueueTagsInput: Swift.Sendable {
    /// The URL of the queue.
    /// This member is required.
    public var queueUrl: Swift.String?

    public init(
        queueUrl: Swift.String? = nil
    )
    {
        self.queueUrl = queueUrl
    }
}

public struct ListQueueTagsOutput: Swift.Sendable {
    /// The list of all tags added to the specified queue.
    public var tags: [Swift.String: Swift.String]?

    public init(
        tags: [Swift.String: Swift.String]? = nil
    )
    {
        self.tags = tags
    }
}

/// Indicates that the specified queue previously received a PurgeQueue request within the last 60 seconds (the time it can take to delete the messages in the queue).
public struct PurgeQueueInProgress: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "AWS.SimpleQueueService.PurgeQueueInProgress" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

///
public struct PurgeQueueInput: Swift.Sendable {
    /// The URL of the queue from which the PurgeQueue action deletes messages. Queue URLs and names are case-sensitive.
    /// This member is required.
    public var queueUrl: Swift.String?

    public init(
        queueUrl: Swift.String? = nil
    )
    {
        self.queueUrl = queueUrl
    }
}

/// The caller doesn't have the required KMS access.
public struct KmsAccessDenied: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "KMS.AccessDeniedException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The request was denied due to request throttling.
public struct KmsDisabled: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "KMS.DisabledException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The request was rejected for one of the following reasons:
///
/// * The KeyUsage value of the KMS key is incompatible with the API operation.
///
/// * The encryption algorithm or signing algorithm specified for the operation is incompatible with the type of key material in the KMS key (KeySpec).
public struct KmsInvalidKeyUsage: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "KMS.InvalidKeyUsageException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The request was rejected because the state of the specified resource is not valid for this request.
public struct KmsInvalidState: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "KMS.InvalidStateException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The request was rejected because the specified entity or resource could not be found.
public struct KmsNotFound: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "KMS.NotFoundException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The request was rejected because the specified key policy isn't syntactically or semantically correct.
public struct KmsOptInRequired: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "KMS.OptInRequired" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// Amazon Web Services KMS throttles requests for the following conditions.
public struct KmsThrottled: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "KMS.ThrottlingException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension SQSClientTypes {

    public enum MessageSystemAttributeName: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case awstraceheader
        case all
        case approximatefirstreceivetimestamp
        case approximatereceivecount
        case deadletterqueuesourcearn
        case messagededuplicationid
        case messagegroupid
        case senderid
        case senttimestamp
        case sequencenumber
        case sdkUnknown(Swift.String)

        public static var allCases: [MessageSystemAttributeName] {
            return [
                .awstraceheader,
                .all,
                .approximatefirstreceivetimestamp,
                .approximatereceivecount,
                .deadletterqueuesourcearn,
                .messagededuplicationid,
                .messagegroupid,
                .senderid,
                .senttimestamp,
                .sequencenumber
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .awstraceheader: return "AWSTraceHeader"
            case .all: return "All"
            case .approximatefirstreceivetimestamp: return "ApproximateFirstReceiveTimestamp"
            case .approximatereceivecount: return "ApproximateReceiveCount"
            case .deadletterqueuesourcearn: return "DeadLetterQueueSourceArn"
            case .messagededuplicationid: return "MessageDeduplicationId"
            case .messagegroupid: return "MessageGroupId"
            case .senderid: return "SenderId"
            case .senttimestamp: return "SentTimestamp"
            case .sequencenumber: return "SequenceNumber"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

///
public struct ReceiveMessageInput: Swift.Sendable {
    /// This parameter has been deprecated but will be supported for backward compatibility. To provide attribute names, you are encouraged to use MessageSystemAttributeNames. A list of attributes that need to be returned along with each message. These attributes include:
    ///
    /// * All – Returns all values.
    ///
    /// * ApproximateFirstReceiveTimestamp – Returns the time the message was first received from the queue ([epoch time](http://en.wikipedia.org/wiki/Unix_time) in milliseconds).
    ///
    /// * ApproximateReceiveCount – Returns the number of times a message has been received across all queues but not deleted.
    ///
    /// * AWSTraceHeader – Returns the X-Ray trace header string.
    ///
    /// * SenderId
    ///
    /// * For a user, returns the user ID, for example ABCDEFGHI1JKLMNOPQ23R.
    ///
    /// * For an IAM role, returns the IAM role ID, for example ABCDE1F2GH3I4JK5LMNOP:i-a123b456.
    ///
    ///
    ///
    ///
    /// * SentTimestamp – Returns the time the message was sent to the queue ([epoch time](http://en.wikipedia.org/wiki/Unix_time) in milliseconds).
    ///
    /// * SqsManagedSseEnabled – Enables server-side queue encryption using SQS owned encryption keys. Only one server-side encryption option is supported per queue (for example, [SSE-KMS](https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-configure-sse-existing-queue.html) or [SSE-SQS](https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-configure-sqs-sse-queue.html)).
    ///
    /// * MessageDeduplicationId – Returns the value provided by the producer that calls the [SendMessage] action.
    ///
    /// * MessageGroupId – Returns the value provided by the producer that calls the [SendMessage] action. Messages with the same MessageGroupId are returned in sequence.
    ///
    /// * SequenceNumber – Returns the value provided by Amazon SQS.
    @available(*, deprecated, message: "AttributeNames has been replaced by MessageSystemAttributeNames")
    public var attributeNames: [SQSClientTypes.QueueAttributeName]?
    /// The maximum number of messages to return. Amazon SQS never returns more messages than this value (however, fewer messages might be returned). Valid values: 1 to 10. Default: 1.
    public var maxNumberOfMessages: Swift.Int?
    /// The name of the message attribute, where N is the index.
    ///
    /// * The name can contain alphanumeric characters and the underscore (_), hyphen (-), and period (.).
    ///
    /// * The name is case-sensitive and must be unique among all attribute names for the message.
    ///
    /// * The name must not start with AWS-reserved prefixes such as AWS. or Amazon. (or any casing variants).
    ///
    /// * The name must not start or end with a period (.), and it should not have periods in succession (..).
    ///
    /// * The name can be up to 256 characters long.
    ///
    ///
    /// When using ReceiveMessage, you can send a list of attribute names to receive, or you can return all of the attributes by specifying All or .* in your request. You can also use all message attributes starting with a prefix, for example bar.*.
    public var messageAttributeNames: [Swift.String]?
    /// A list of attributes that need to be returned along with each message. These attributes include:
    ///
    /// * All – Returns all values.
    ///
    /// * ApproximateFirstReceiveTimestamp – Returns the time the message was first received from the queue ([epoch time](http://en.wikipedia.org/wiki/Unix_time) in milliseconds).
    ///
    /// * ApproximateReceiveCount – Returns the number of times a message has been received across all queues but not deleted.
    ///
    /// * AWSTraceHeader – Returns the X-Ray trace header string.
    ///
    /// * SenderId
    ///
    /// * For a user, returns the user ID, for example ABCDEFGHI1JKLMNOPQ23R.
    ///
    /// * For an IAM role, returns the IAM role ID, for example ABCDE1F2GH3I4JK5LMNOP:i-a123b456.
    ///
    ///
    ///
    ///
    /// * SentTimestamp – Returns the time the message was sent to the queue ([epoch time](http://en.wikipedia.org/wiki/Unix_time) in milliseconds).
    ///
    /// * SqsManagedSseEnabled – Enables server-side queue encryption using SQS owned encryption keys. Only one server-side encryption option is supported per queue (for example, [SSE-KMS](https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-configure-sse-existing-queue.html) or [SSE-SQS](https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-configure-sqs-sse-queue.html)).
    ///
    /// * MessageDeduplicationId – Returns the value provided by the producer that calls the [SendMessage] action.
    ///
    /// * MessageGroupId – Returns the value provided by the producer that calls the [SendMessage] action. Messages with the same MessageGroupId are returned in sequence.
    ///
    /// * SequenceNumber – Returns the value provided by Amazon SQS.
    public var messageSystemAttributeNames: [SQSClientTypes.MessageSystemAttributeName]?
    /// The URL of the Amazon SQS queue from which messages are received. Queue URLs and names are case-sensitive.
    /// This member is required.
    public var queueUrl: Swift.String?
    /// This parameter applies only to FIFO (first-in-first-out) queues. The token used for deduplication of ReceiveMessage calls. If a networking issue occurs after a ReceiveMessage action, and instead of a response you receive a generic error, it is possible to retry the same action with an identical ReceiveRequestAttemptId to retrieve the same set of messages, even if their visibility timeout has not yet expired.
    ///
    /// * You can use ReceiveRequestAttemptId only for 5 minutes after a ReceiveMessage action.
    ///
    /// * When you set FifoQueue, a caller of the ReceiveMessage action can provide a ReceiveRequestAttemptId explicitly.
    ///
    /// * It is possible to retry the ReceiveMessage action with the same ReceiveRequestAttemptId if none of the messages have been modified (deleted or had their visibility changes).
    ///
    /// * During a visibility timeout, subsequent calls with the same ReceiveRequestAttemptId return the same messages and receipt handles. If a retry occurs within the deduplication interval, it resets the visibility timeout. For more information, see [Visibility Timeout](https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-visibility-timeout.html) in the Amazon SQS Developer Guide. If a caller of the ReceiveMessage action still processes messages when the visibility timeout expires and messages become visible, another worker consuming from the same queue can receive the same messages and therefore process duplicates. Also, if a consumer whose message processing time is longer than the visibility timeout tries to delete the processed messages, the action fails with an error. To mitigate this effect, ensure that your application observes a safe threshold before the visibility timeout expires and extend the visibility timeout as necessary.
    ///
    /// * While messages with a particular MessageGroupId are invisible, no more messages belonging to the same MessageGroupId are returned until the visibility timeout expires. You can still receive messages with another MessageGroupId as long as it is also visible.
    ///
    /// * If a caller of ReceiveMessage can't track the ReceiveRequestAttemptId, no retries work until the original visibility timeout expires. As a result, delays might occur but the messages in the queue remain in a strict order.
    ///
    ///
    /// The maximum length of ReceiveRequestAttemptId is 128 characters. ReceiveRequestAttemptId can contain alphanumeric characters (a-z, A-Z, 0-9) and punctuation (!"#$%&'()*+,-./:;<=>?@[\]^_`{|}~). For best practices of using ReceiveRequestAttemptId, see [Using the ReceiveRequestAttemptId Request Parameter](https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/using-receiverequestattemptid-request-parameter.html) in the Amazon SQS Developer Guide.
    public var receiveRequestAttemptId: Swift.String?
    /// The duration (in seconds) that the received messages are hidden from subsequent retrieve requests after being retrieved by a ReceiveMessage request.
    public var visibilityTimeout: Swift.Int?
    /// The duration (in seconds) for which the call waits for a message to arrive in the queue before returning. If a message is available, the call returns sooner than WaitTimeSeconds. If no messages are available and the wait time expires, the call does not return a message list. To avoid HTTP errors, ensure that the HTTP response timeout for ReceiveMessage requests is longer than the WaitTimeSeconds parameter. For example, with the Java SDK, you can set HTTP transport settings using the [ NettyNioAsyncHttpClient](https://sdk.amazonaws.com/java/api/latest/software/amazon/awssdk/http/nio/netty/NettyNioAsyncHttpClient.html) for asynchronous clients, or the [ ApacheHttpClient](https://sdk.amazonaws.com/java/api/latest/software/amazon/awssdk/http/apache/ApacheHttpClient.html) for synchronous clients.
    public var waitTimeSeconds: Swift.Int?

    public init(
        attributeNames: [SQSClientTypes.QueueAttributeName]? = nil,
        maxNumberOfMessages: Swift.Int? = nil,
        messageAttributeNames: [Swift.String]? = nil,
        messageSystemAttributeNames: [SQSClientTypes.MessageSystemAttributeName]? = nil,
        queueUrl: Swift.String? = nil,
        receiveRequestAttemptId: Swift.String? = nil,
        visibilityTimeout: Swift.Int? = nil,
        waitTimeSeconds: Swift.Int? = nil
    )
    {
        self.attributeNames = attributeNames
        self.maxNumberOfMessages = maxNumberOfMessages
        self.messageAttributeNames = messageAttributeNames
        self.messageSystemAttributeNames = messageSystemAttributeNames
        self.queueUrl = queueUrl
        self.receiveRequestAttemptId = receiveRequestAttemptId
        self.visibilityTimeout = visibilityTimeout
        self.waitTimeSeconds = waitTimeSeconds
    }
}

extension SQSClientTypes {

    /// The user-specified message attribute value. For string data types, the Value attribute has the same restrictions on the content as the message body. For more information, see [SendMessage].Name, type, value and the message body must not be empty or null. All parts of the message attribute, including Name, Type, and Value, are part of the message size restriction (256 KiB or 262,144 bytes).
    public struct MessageAttributeValue: Swift.Sendable {
        /// Not implemented. Reserved for future use.
        public var binaryListValues: [Foundation.Data]?
        /// Binary type attributes can store any binary data, such as compressed data, encrypted data, or images.
        public var binaryValue: Foundation.Data?
        /// Amazon SQS supports the following logical data types: String, Number, and Binary. For the Number data type, you must use StringValue. You can also append custom labels. For more information, see [Amazon SQS Message Attributes](https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-message-metadata.html#sqs-message-attributes) in the Amazon SQS Developer Guide.
        /// This member is required.
        public var dataType: Swift.String?
        /// Not implemented. Reserved for future use.
        public var stringListValues: [Swift.String]?
        /// Strings are Unicode with UTF-8 binary encoding. For a list of code values, see [ASCII Printable Characters](http://en.wikipedia.org/wiki/ASCII#ASCII_printable_characters).
        public var stringValue: Swift.String?

        public init(
            binaryListValues: [Foundation.Data]? = nil,
            binaryValue: Foundation.Data? = nil,
            dataType: Swift.String? = nil,
            stringListValues: [Swift.String]? = nil,
            stringValue: Swift.String? = nil
        )
        {
            self.binaryListValues = binaryListValues
            self.binaryValue = binaryValue
            self.dataType = dataType
            self.stringListValues = stringListValues
            self.stringValue = stringValue
        }
    }
}

extension SQSClientTypes {

    /// An Amazon SQS message.
    public struct Message: Swift.Sendable {
        /// A map of the attributes requested in [ReceiveMessage] to their respective values. Supported attributes:
        ///
        /// * ApproximateReceiveCount
        ///
        /// * ApproximateFirstReceiveTimestamp
        ///
        /// * MessageDeduplicationId
        ///
        /// * MessageGroupId
        ///
        /// * SenderId
        ///
        /// * SentTimestamp
        ///
        /// * SequenceNumber
        ///
        ///
        /// ApproximateFirstReceiveTimestamp and SentTimestamp are each returned as an integer representing the [epoch time](http://en.wikipedia.org/wiki/Unix_time) in milliseconds.
        public var attributes: [Swift.String: Swift.String]?
        /// The message's contents (not URL-encoded).
        public var body: Swift.String?
        /// An MD5 digest of the non-URL-encoded message body string.
        public var md5OfBody: Swift.String?
        /// An MD5 digest of the non-URL-encoded message attribute string. You can use this attribute to verify that Amazon SQS received the message correctly. Amazon SQS URL-decodes the message before creating the MD5 digest. For information about MD5, see [RFC1321](https://www.ietf.org/rfc/rfc1321.txt).
        public var md5OfMessageAttributes: Swift.String?
        /// Each message attribute consists of a Name, Type, and Value. For more information, see [Amazon SQS message attributes](https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-message-metadata.html#sqs-message-attributes) in the Amazon SQS Developer Guide.
        public var messageAttributes: [Swift.String: SQSClientTypes.MessageAttributeValue]?
        /// A unique identifier for the message. A MessageIdis considered unique across all Amazon Web Services accounts for an extended period of time.
        public var messageId: Swift.String?
        /// An identifier associated with the act of receiving the message. A new receipt handle is returned every time you receive a message. When deleting a message, you provide the last received receipt handle to delete the message.
        public var receiptHandle: Swift.String?

        public init(
            attributes: [Swift.String: Swift.String]? = nil,
            body: Swift.String? = nil,
            md5OfBody: Swift.String? = nil,
            md5OfMessageAttributes: Swift.String? = nil,
            messageAttributes: [Swift.String: SQSClientTypes.MessageAttributeValue]? = nil,
            messageId: Swift.String? = nil,
            receiptHandle: Swift.String? = nil
        )
        {
            self.attributes = attributes
            self.body = body
            self.md5OfBody = md5OfBody
            self.md5OfMessageAttributes = md5OfMessageAttributes
            self.messageAttributes = messageAttributes
            self.messageId = messageId
            self.receiptHandle = receiptHandle
        }
    }
}

/// A list of received messages.
public struct ReceiveMessageOutput: Swift.Sendable {
    /// A list of messages.
    public var messages: [SQSClientTypes.Message]?

    public init(
        messages: [SQSClientTypes.Message]? = nil
    )
    {
        self.messages = messages
    }
}

///
public struct RemovePermissionInput: Swift.Sendable {
    /// The identification of the permission to remove. This is the label added using the [AddPermission] action.
    /// This member is required.
    public var label: Swift.String?
    /// The URL of the Amazon SQS queue from which permissions are removed. Queue URLs and names are case-sensitive.
    /// This member is required.
    public var queueUrl: Swift.String?

    public init(
        label: Swift.String? = nil,
        queueUrl: Swift.String? = nil
    )
    {
        self.label = label
        self.queueUrl = queueUrl
    }
}

/// The message contains characters outside the allowed set.
public struct InvalidMessageContents: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidMessageContents" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension SQSClientTypes {

    public enum MessageSystemAttributeNameForSends: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case awstraceheader
        case sdkUnknown(Swift.String)

        public static var allCases: [MessageSystemAttributeNameForSends] {
            return [
                .awstraceheader
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .awstraceheader: return "AWSTraceHeader"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension SQSClientTypes {

    /// The user-specified message system attribute value. For string data types, the Value attribute has the same restrictions on the content as the message body. For more information, see [SendMessage].Name, type, value and the message body must not be empty or null.
    public struct MessageSystemAttributeValue: Swift.Sendable {
        /// Not implemented. Reserved for future use.
        public var binaryListValues: [Foundation.Data]?
        /// Binary type attributes can store any binary data, such as compressed data, encrypted data, or images.
        public var binaryValue: Foundation.Data?
        /// Amazon SQS supports the following logical data types: String, Number, and Binary. For the Number data type, you must use StringValue. You can also append custom labels. For more information, see [Amazon SQS Message Attributes](https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-message-metadata.html#sqs-message-attributes) in the Amazon SQS Developer Guide.
        /// This member is required.
        public var dataType: Swift.String?
        /// Not implemented. Reserved for future use.
        public var stringListValues: [Swift.String]?
        /// Strings are Unicode with UTF-8 binary encoding. For a list of code values, see [ASCII Printable Characters](http://en.wikipedia.org/wiki/ASCII#ASCII_printable_characters).
        public var stringValue: Swift.String?

        public init(
            binaryListValues: [Foundation.Data]? = nil,
            binaryValue: Foundation.Data? = nil,
            dataType: Swift.String? = nil,
            stringListValues: [Swift.String]? = nil,
            stringValue: Swift.String? = nil
        )
        {
            self.binaryListValues = binaryListValues
            self.binaryValue = binaryValue
            self.dataType = dataType
            self.stringListValues = stringListValues
            self.stringValue = stringValue
        }
    }
}

///
public struct SendMessageInput: Swift.Sendable {
    /// The length of time, in seconds, for which to delay a specific message. Valid values: 0 to 900. Maximum: 15 minutes. Messages with a positive DelaySeconds value become available for processing after the delay period is finished. If you don't specify a value, the default value for the queue applies. When you set FifoQueue, you can't set DelaySeconds per message. You can set this parameter only on a queue level.
    public var delaySeconds: Swift.Int?
    /// Each message attribute consists of a Name, Type, and Value. For more information, see [Amazon SQS message attributes](https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-message-metadata.html#sqs-message-attributes) in the Amazon SQS Developer Guide.
    public var messageAttributes: [Swift.String: SQSClientTypes.MessageAttributeValue]?
    /// The message to send. The minimum size is one character. The maximum size is 256 KiB. A message can include only XML, JSON, and unformatted text. The following Unicode characters are allowed. For more information, see the [W3C specification for characters](http://www.w3.org/TR/REC-xml/#charsets). #x9 | #xA | #xD | #x20 to #xD7FF | #xE000 to #xFFFD | #x10000 to #x10FFFF Amazon SQS does not throw an exception or completely reject the message if it contains invalid characters. Instead, it replaces those invalid characters with U+FFFD before storing the message in the queue, as long as the message body contains at least one valid character.
    /// This member is required.
    public var messageBody: Swift.String?
    /// This parameter applies only to FIFO (first-in-first-out) queues. The token used for deduplication of sent messages. If a message with a particular MessageDeduplicationId is sent successfully, any messages sent with the same MessageDeduplicationId are accepted successfully but aren't delivered during the 5-minute deduplication interval. For more information, see [ Exactly-once processing](https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/FIFO-queues-exactly-once-processing.html) in the Amazon SQS Developer Guide.
    ///
    /// * Every message must have a unique MessageDeduplicationId,
    ///
    /// * You may provide a MessageDeduplicationId explicitly.
    ///
    /// * If you aren't able to provide a MessageDeduplicationId and you enable ContentBasedDeduplication for your queue, Amazon SQS uses a SHA-256 hash to generate the MessageDeduplicationId using the body of the message (but not the attributes of the message).
    ///
    /// * If you don't provide a MessageDeduplicationId and the queue doesn't have ContentBasedDeduplication set, the action fails with an error.
    ///
    /// * If the queue has ContentBasedDeduplication set, your MessageDeduplicationId overrides the generated one.
    ///
    ///
    ///
    ///
    /// * When ContentBasedDeduplication is in effect, messages with identical content sent within the deduplication interval are treated as duplicates and only one copy of the message is delivered.
    ///
    /// * If you send one message with ContentBasedDeduplication enabled and then another message with a MessageDeduplicationId that is the same as the one generated for the first MessageDeduplicationId, the two messages are treated as duplicates and only one copy of the message is delivered.
    ///
    ///
    /// The MessageDeduplicationId is available to the consumer of the message (this can be useful for troubleshooting delivery issues). If a message is sent successfully but the acknowledgement is lost and the message is resent with the same MessageDeduplicationId after the deduplication interval, Amazon SQS can't detect duplicate messages. Amazon SQS continues to keep track of the message deduplication ID even after the message is received and deleted. The maximum length of MessageDeduplicationId is 128 characters. MessageDeduplicationId can contain alphanumeric characters (a-z, A-Z, 0-9) and punctuation (!"#$%&'()*+,-./:;<=>?@[\]^_`{|}~). For best practices of using MessageDeduplicationId, see [Using the MessageDeduplicationId Property](https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/using-messagededuplicationid-property.html) in the Amazon SQS Developer Guide.
    public var messageDeduplicationId: Swift.String?
    /// This parameter applies only to FIFO (first-in-first-out) queues. The tag that specifies that a message belongs to a specific message group. Messages that belong to the same message group are processed in a FIFO manner (however, messages in different message groups might be processed out of order). To interleave multiple ordered streams within a single queue, use MessageGroupId values (for example, session data for multiple users). In this scenario, multiple consumers can process the queue, but the session data of each user is processed in a FIFO fashion.
    ///
    /// * You must associate a non-empty MessageGroupId with a message. If you don't provide a MessageGroupId, the action fails.
    ///
    /// * ReceiveMessage might return messages with multiple MessageGroupId values. For each MessageGroupId, the messages are sorted by time sent. The caller can't specify a MessageGroupId.
    ///
    ///
    /// The maximum length of MessageGroupId is 128 characters. Valid values: alphanumeric characters and punctuation (!"#$%&'()*+,-./:;<=>?@[\]^_`{|}~). For best practices of using MessageGroupId, see [Using the MessageGroupId Property](https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/using-messagegroupid-property.html) in the Amazon SQS Developer Guide. MessageGroupId is required for FIFO queues. You can't use it for Standard queues.
    public var messageGroupId: Swift.String?
    /// The message system attribute to send. Each message system attribute consists of a Name, Type, and Value.
    ///
    /// * Currently, the only supported message system attribute is AWSTraceHeader. Its type must be String and its value must be a correctly formatted X-Ray trace header string.
    ///
    /// * The size of a message system attribute doesn't count towards the total size of a message.
    public var messageSystemAttributes: [Swift.String: SQSClientTypes.MessageSystemAttributeValue]?
    /// The URL of the Amazon SQS queue to which a message is sent. Queue URLs and names are case-sensitive.
    /// This member is required.
    public var queueUrl: Swift.String?

    public init(
        delaySeconds: Swift.Int? = nil,
        messageAttributes: [Swift.String: SQSClientTypes.MessageAttributeValue]? = nil,
        messageBody: Swift.String? = nil,
        messageDeduplicationId: Swift.String? = nil,
        messageGroupId: Swift.String? = nil,
        messageSystemAttributes: [Swift.String: SQSClientTypes.MessageSystemAttributeValue]? = nil,
        queueUrl: Swift.String? = nil
    )
    {
        self.delaySeconds = delaySeconds
        self.messageAttributes = messageAttributes
        self.messageBody = messageBody
        self.messageDeduplicationId = messageDeduplicationId
        self.messageGroupId = messageGroupId
        self.messageSystemAttributes = messageSystemAttributes
        self.queueUrl = queueUrl
    }
}

/// The MD5OfMessageBody and MessageId elements.
public struct SendMessageOutput: Swift.Sendable {
    /// An MD5 digest of the non-URL-encoded message attribute string. You can use this attribute to verify that Amazon SQS received the message correctly. Amazon SQS URL-decodes the message before creating the MD5 digest. For information about MD5, see [RFC1321](https://www.ietf.org/rfc/rfc1321.txt).
    public var md5OfMessageAttributes: Swift.String?
    /// An MD5 digest of the non-URL-encoded message body string. You can use this attribute to verify that Amazon SQS received the message correctly. Amazon SQS URL-decodes the message before creating the MD5 digest. For information about MD5, see [RFC1321](https://www.ietf.org/rfc/rfc1321.txt).
    public var md5OfMessageBody: Swift.String?
    /// An MD5 digest of the non-URL-encoded message system attribute string. You can use this attribute to verify that Amazon SQS received the message correctly. Amazon SQS URL-decodes the message before creating the MD5 digest.
    public var md5OfMessageSystemAttributes: Swift.String?
    /// An attribute containing the MessageId of the message sent to the queue. For more information, see [Queue and Message Identifiers](https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-queue-message-identifiers.html) in the Amazon SQS Developer Guide.
    public var messageId: Swift.String?
    /// This parameter applies only to FIFO (first-in-first-out) queues. The large, non-consecutive number that Amazon SQS assigns to each message. The length of SequenceNumber is 128 bits. SequenceNumber continues to increase for a particular MessageGroupId.
    public var sequenceNumber: Swift.String?

    public init(
        md5OfMessageAttributes: Swift.String? = nil,
        md5OfMessageBody: Swift.String? = nil,
        md5OfMessageSystemAttributes: Swift.String? = nil,
        messageId: Swift.String? = nil,
        sequenceNumber: Swift.String? = nil
    )
    {
        self.md5OfMessageAttributes = md5OfMessageAttributes
        self.md5OfMessageBody = md5OfMessageBody
        self.md5OfMessageSystemAttributes = md5OfMessageSystemAttributes
        self.messageId = messageId
        self.sequenceNumber = sequenceNumber
    }
}

/// The length of all the messages put together is more than the limit.
public struct BatchRequestTooLong: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "AWS.SimpleQueueService.BatchRequestTooLong" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension SQSClientTypes {

    /// Contains the details of a single Amazon SQS message along with an Id.
    public struct SendMessageBatchRequestEntry: Swift.Sendable {
        /// The length of time, in seconds, for which a specific message is delayed. Valid values: 0 to 900. Maximum: 15 minutes. Messages with a positive DelaySeconds value become available for processing after the delay period is finished. If you don't specify a value, the default value for the queue is applied. When you set FifoQueue, you can't set DelaySeconds per message. You can set this parameter only on a queue level.
        public var delaySeconds: Swift.Int?
        /// An identifier for a message in this batch used to communicate the result. The Ids of a batch request need to be unique within a request. This identifier can have up to 80 characters. The following characters are accepted: alphanumeric characters, hyphens(-), and underscores (_).
        /// This member is required.
        public var id: Swift.String?
        /// Each message attribute consists of a Name, Type, and Value. For more information, see [Amazon SQS message attributes](https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-message-metadata.html#sqs-message-attributes) in the Amazon SQS Developer Guide.
        public var messageAttributes: [Swift.String: SQSClientTypes.MessageAttributeValue]?
        /// The body of the message.
        /// This member is required.
        public var messageBody: Swift.String?
        /// This parameter applies only to FIFO (first-in-first-out) queues. The token used for deduplication of messages within a 5-minute minimum deduplication interval. If a message with a particular MessageDeduplicationId is sent successfully, subsequent messages with the same MessageDeduplicationId are accepted successfully but aren't delivered. For more information, see [ Exactly-once processing](https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/FIFO-queues-exactly-once-processing.html) in the Amazon SQS Developer Guide.
        ///
        /// * Every message must have a unique MessageDeduplicationId,
        ///
        /// * You may provide a MessageDeduplicationId explicitly.
        ///
        /// * If you aren't able to provide a MessageDeduplicationId and you enable ContentBasedDeduplication for your queue, Amazon SQS uses a SHA-256 hash to generate the MessageDeduplicationId using the body of the message (but not the attributes of the message).
        ///
        /// * If you don't provide a MessageDeduplicationId and the queue doesn't have ContentBasedDeduplication set, the action fails with an error.
        ///
        /// * If the queue has ContentBasedDeduplication set, your MessageDeduplicationId overrides the generated one.
        ///
        ///
        ///
        ///
        /// * When ContentBasedDeduplication is in effect, messages with identical content sent within the deduplication interval are treated as duplicates and only one copy of the message is delivered.
        ///
        /// * If you send one message with ContentBasedDeduplication enabled and then another message with a MessageDeduplicationId that is the same as the one generated for the first MessageDeduplicationId, the two messages are treated as duplicates and only one copy of the message is delivered.
        ///
        ///
        /// The MessageDeduplicationId is available to the consumer of the message (this can be useful for troubleshooting delivery issues). If a message is sent successfully but the acknowledgement is lost and the message is resent with the same MessageDeduplicationId after the deduplication interval, Amazon SQS can't detect duplicate messages. Amazon SQS continues to keep track of the message deduplication ID even after the message is received and deleted. The length of MessageDeduplicationId is 128 characters. MessageDeduplicationId can contain alphanumeric characters (a-z, A-Z, 0-9) and punctuation (!"#$%&'()*+,-./:;<=>?@[\]^_`{|}~). For best practices of using MessageDeduplicationId, see [Using the MessageDeduplicationId Property](https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/using-messagededuplicationid-property.html) in the Amazon SQS Developer Guide.
        public var messageDeduplicationId: Swift.String?
        /// This parameter applies only to FIFO (first-in-first-out) queues. The tag that specifies that a message belongs to a specific message group. Messages that belong to the same message group are processed in a FIFO manner (however, messages in different message groups might be processed out of order). To interleave multiple ordered streams within a single queue, use MessageGroupId values (for example, session data for multiple users). In this scenario, multiple consumers can process the queue, but the session data of each user is processed in a FIFO fashion.
        ///
        /// * You must associate a non-empty MessageGroupId with a message. If you don't provide a MessageGroupId, the action fails.
        ///
        /// * ReceiveMessage might return messages with multiple MessageGroupId values. For each MessageGroupId, the messages are sorted by time sent. The caller can't specify a MessageGroupId.
        ///
        ///
        /// The length of MessageGroupId is 128 characters. Valid values: alphanumeric characters and punctuation (!"#$%&'()*+,-./:;<=>?@[\]^_`{|}~). For best practices of using MessageGroupId, see [Using the MessageGroupId Property](https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/using-messagegroupid-property.html) in the Amazon SQS Developer Guide. MessageGroupId is required for FIFO queues. You can't use it for Standard queues.
        public var messageGroupId: Swift.String?
        /// The message system attribute to send Each message system attribute consists of a Name, Type, and Value.
        ///
        /// * Currently, the only supported message system attribute is AWSTraceHeader. Its type must be String and its value must be a correctly formatted X-Ray trace header string.
        ///
        /// * The size of a message system attribute doesn't count towards the total size of a message.
        public var messageSystemAttributes: [Swift.String: SQSClientTypes.MessageSystemAttributeValue]?

        public init(
            delaySeconds: Swift.Int? = nil,
            id: Swift.String? = nil,
            messageAttributes: [Swift.String: SQSClientTypes.MessageAttributeValue]? = nil,
            messageBody: Swift.String? = nil,
            messageDeduplicationId: Swift.String? = nil,
            messageGroupId: Swift.String? = nil,
            messageSystemAttributes: [Swift.String: SQSClientTypes.MessageSystemAttributeValue]? = nil
        )
        {
            self.delaySeconds = delaySeconds
            self.id = id
            self.messageAttributes = messageAttributes
            self.messageBody = messageBody
            self.messageDeduplicationId = messageDeduplicationId
            self.messageGroupId = messageGroupId
            self.messageSystemAttributes = messageSystemAttributes
        }
    }
}

///
public struct SendMessageBatchInput: Swift.Sendable {
    /// A list of [SendMessageBatchRequestEntry] items.
    /// This member is required.
    public var entries: [SQSClientTypes.SendMessageBatchRequestEntry]?
    /// The URL of the Amazon SQS queue to which batched messages are sent. Queue URLs and names are case-sensitive.
    /// This member is required.
    public var queueUrl: Swift.String?

    public init(
        entries: [SQSClientTypes.SendMessageBatchRequestEntry]? = nil,
        queueUrl: Swift.String? = nil
    )
    {
        self.entries = entries
        self.queueUrl = queueUrl
    }
}

extension SQSClientTypes {

    /// Encloses a MessageId for a successfully-enqueued message in a [SendMessageBatch].
    public struct SendMessageBatchResultEntry: Swift.Sendable {
        /// An identifier for the message in this batch.
        /// This member is required.
        public var id: Swift.String?
        /// An MD5 digest of the non-URL-encoded message attribute string. You can use this attribute to verify that Amazon SQS received the message correctly. Amazon SQS URL-decodes the message before creating the MD5 digest. For information about MD5, see [RFC1321](https://www.ietf.org/rfc/rfc1321.txt).
        public var md5OfMessageAttributes: Swift.String?
        /// An MD5 digest of the non-URL-encoded message body string. You can use this attribute to verify that Amazon SQS received the message correctly. Amazon SQS URL-decodes the message before creating the MD5 digest. For information about MD5, see [RFC1321](https://www.ietf.org/rfc/rfc1321.txt).
        /// This member is required.
        public var md5OfMessageBody: Swift.String?
        /// An MD5 digest of the non-URL-encoded message system attribute string. You can use this attribute to verify that Amazon SQS received the message correctly. Amazon SQS URL-decodes the message before creating the MD5 digest. For information about MD5, see [RFC1321](https://www.ietf.org/rfc/rfc1321.txt).
        public var md5OfMessageSystemAttributes: Swift.String?
        /// An identifier for the message.
        /// This member is required.
        public var messageId: Swift.String?
        /// This parameter applies only to FIFO (first-in-first-out) queues. The large, non-consecutive number that Amazon SQS assigns to each message. The length of SequenceNumber is 128 bits. As SequenceNumber continues to increase for a particular MessageGroupId.
        public var sequenceNumber: Swift.String?

        public init(
            id: Swift.String? = nil,
            md5OfMessageAttributes: Swift.String? = nil,
            md5OfMessageBody: Swift.String? = nil,
            md5OfMessageSystemAttributes: Swift.String? = nil,
            messageId: Swift.String? = nil,
            sequenceNumber: Swift.String? = nil
        )
        {
            self.id = id
            self.md5OfMessageAttributes = md5OfMessageAttributes
            self.md5OfMessageBody = md5OfMessageBody
            self.md5OfMessageSystemAttributes = md5OfMessageSystemAttributes
            self.messageId = messageId
            self.sequenceNumber = sequenceNumber
        }
    }
}

/// For each message in the batch, the response contains a [SendMessageBatchResultEntry] tag if the message succeeds or a [BatchResultErrorEntry] tag if the message fails.
public struct SendMessageBatchOutput: Swift.Sendable {
    /// A list of [BatchResultErrorEntry] items with error details about each message that can't be enqueued.
    /// This member is required.
    public var failed: [SQSClientTypes.BatchResultErrorEntry]?
    /// A list of [SendMessageBatchResultEntry] items.
    /// This member is required.
    public var successful: [SQSClientTypes.SendMessageBatchResultEntry]?

    public init(
        failed: [SQSClientTypes.BatchResultErrorEntry]? = nil,
        successful: [SQSClientTypes.SendMessageBatchResultEntry]? = nil
    )
    {
        self.failed = failed
        self.successful = successful
    }
}

///
public struct SetQueueAttributesInput: Swift.Sendable {
    /// A map of attributes to set. The following lists the names, descriptions, and values of the special request parameters that the SetQueueAttributes action uses:
    ///
    /// * DelaySeconds – The length of time, in seconds, for which the delivery of all messages in the queue is delayed. Valid values: An integer from 0 to 900 (15 minutes). Default: 0.
    ///
    /// * MaximumMessageSize – The limit of how many bytes a message can contain before Amazon SQS rejects it. Valid values: An integer from 1,024 bytes (1 KiB) up to 262,144 bytes (256 KiB). Default: 262,144 (256 KiB).
    ///
    /// * MessageRetentionPeriod – The length of time, in seconds, for which Amazon SQS retains a message. Valid values: An integer representing seconds, from 60 (1 minute) to 1,209,600 (14 days). Default: 345,600 (4 days). When you change a queue's attributes, the change can take up to 60 seconds for most of the attributes to propagate throughout the Amazon SQS system. Changes made to the MessageRetentionPeriod attribute can take up to 15 minutes and will impact existing messages in the queue potentially causing them to be expired and deleted if the MessageRetentionPeriod is reduced below the age of existing messages.
    ///
    /// * Policy – The queue's policy. A valid Amazon Web Services policy. For more information about policy structure, see [Overview of Amazon Web Services IAM Policies](https://docs.aws.amazon.com/IAM/latest/UserGuide/PoliciesOverview.html) in the Identity and Access Management User Guide.
    ///
    /// * ReceiveMessageWaitTimeSeconds – The length of time, in seconds, for which a [ReceiveMessage] action waits for a message to arrive. Valid values: An integer from 0 to 20 (seconds). Default: 0.
    ///
    /// * VisibilityTimeout – The visibility timeout for the queue, in seconds. Valid values: An integer from 0 to 43,200 (12 hours). Default: 30. For more information about the visibility timeout, see [Visibility Timeout](https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-visibility-timeout.html) in the Amazon SQS Developer Guide.
    ///
    ///
    /// The following attributes apply only to [dead-letter queues:](https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-dead-letter-queues.html)
    ///
    /// * RedrivePolicy – The string that includes the parameters for the dead-letter queue functionality of the source queue as a JSON object. The parameters are as follows:
    ///
    /// * deadLetterTargetArn – The Amazon Resource Name (ARN) of the dead-letter queue to which Amazon SQS moves messages after the value of maxReceiveCount is exceeded.
    ///
    /// * maxReceiveCount – The number of times a message is delivered to the source queue before being moved to the dead-letter queue. Default: 10. When the ReceiveCount for a message exceeds the maxReceiveCount for a queue, Amazon SQS moves the message to the dead-letter-queue.
    ///
    ///
    ///
    ///
    /// * RedriveAllowPolicy – The string that includes the parameters for the permissions for the dead-letter queue redrive permission and which source queues can specify dead-letter queues as a JSON object. The parameters are as follows:
    ///
    /// * redrivePermission – The permission type that defines which source queues can specify the current queue as the dead-letter queue. Valid values are:
    ///
    /// * allowAll – (Default) Any source queues in this Amazon Web Services account in the same Region can specify this queue as the dead-letter queue.
    ///
    /// * denyAll – No source queues can specify this queue as the dead-letter queue.
    ///
    /// * byQueue – Only queues specified by the sourceQueueArns parameter can specify this queue as the dead-letter queue.
    ///
    ///
    ///
    ///
    /// * sourceQueueArns – The Amazon Resource Names (ARN)s of the source queues that can specify this queue as the dead-letter queue and redrive messages. You can specify this parameter only when the redrivePermission parameter is set to byQueue. You can specify up to 10 source queue ARNs. To allow more than 10 source queues to specify dead-letter queues, set the redrivePermission parameter to allowAll.
    ///
    ///
    ///
    ///
    ///
    /// The dead-letter queue of a FIFO queue must also be a FIFO queue. Similarly, the dead-letter queue of a standard queue must also be a standard queue. The following attributes apply only to [server-side-encryption](https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-server-side-encryption.html):
    ///
    /// * KmsMasterKeyId – The ID of an Amazon Web Services managed customer master key (CMK) for Amazon SQS or a custom CMK. For more information, see [Key Terms](https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-server-side-encryption.html#sqs-sse-key-terms). While the alias of the AWS-managed CMK for Amazon SQS is always alias/aws/sqs, the alias of a custom CMK can, for example, be alias/MyAlias . For more examples, see [KeyId](https://docs.aws.amazon.com/kms/latest/APIReference/API_DescribeKey.html#API_DescribeKey_RequestParameters) in the Key Management Service API Reference.
    ///
    /// * KmsDataKeyReusePeriodSeconds – The length of time, in seconds, for which Amazon SQS can reuse a [data key](https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#data-keys) to encrypt or decrypt messages before calling KMS again. An integer representing seconds, between 60 seconds (1 minute) and 86,400 seconds (24 hours). Default: 300 (5 minutes). A shorter time period provides better security but results in more calls to KMS which might incur charges after Free Tier. For more information, see [How Does the Data Key Reuse Period Work?](https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-server-side-encryption.html#sqs-how-does-the-data-key-reuse-period-work).
    ///
    /// * SqsManagedSseEnabled – Enables server-side queue encryption using SQS owned encryption keys. Only one server-side encryption option is supported per queue (for example, [SSE-KMS](https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-configure-sse-existing-queue.html) or [SSE-SQS](https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-configure-sqs-sse-queue.html)).
    ///
    ///
    /// The following attribute applies only to [FIFO (first-in-first-out) queues](https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/FIFO-queues.html):
    ///
    /// * ContentBasedDeduplication – Enables content-based deduplication. For more information, see [Exactly-once processing](https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/FIFO-queues-exactly-once-processing.html) in the Amazon SQS Developer Guide. Note the following:
    ///
    /// * Every message must have a unique MessageDeduplicationId.
    ///
    /// * You may provide a MessageDeduplicationId explicitly.
    ///
    /// * If you aren't able to provide a MessageDeduplicationId and you enable ContentBasedDeduplication for your queue, Amazon SQS uses a SHA-256 hash to generate the MessageDeduplicationId using the body of the message (but not the attributes of the message).
    ///
    /// * If you don't provide a MessageDeduplicationId and the queue doesn't have ContentBasedDeduplication set, the action fails with an error.
    ///
    /// * If the queue has ContentBasedDeduplication set, your MessageDeduplicationId overrides the generated one.
    ///
    ///
    ///
    ///
    /// * When ContentBasedDeduplication is in effect, messages with identical content sent within the deduplication interval are treated as duplicates and only one copy of the message is delivered.
    ///
    /// * If you send one message with ContentBasedDeduplication enabled and then another message with a MessageDeduplicationId that is the same as the one generated for the first MessageDeduplicationId, the two messages are treated as duplicates and only one copy of the message is delivered.
    ///
    ///
    ///
    ///
    ///
    /// The following attributes apply only to [high throughput for FIFO queues](https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/high-throughput-fifo.html):
    ///
    /// * DeduplicationScope – Specifies whether message deduplication occurs at the message group or queue level. Valid values are messageGroup and queue.
    ///
    /// * FifoThroughputLimit – Specifies whether the FIFO queue throughput quota applies to the entire queue or per message group. Valid values are perQueue and perMessageGroupId. The perMessageGroupId value is allowed only when the value for DeduplicationScope is messageGroup.
    ///
    ///
    /// To enable high throughput for FIFO queues, do the following:
    ///
    /// * Set DeduplicationScope to messageGroup.
    ///
    /// * Set FifoThroughputLimit to perMessageGroupId.
    ///
    ///
    /// If you set these attributes to anything other than the values shown for enabling high throughput, normal throughput is in effect and deduplication occurs as specified. For information on throughput quotas, see [Quotas related to messages](https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/quotas-messages.html) in the Amazon SQS Developer Guide.
    /// This member is required.
    public var attributes: [Swift.String: Swift.String]?
    /// The URL of the Amazon SQS queue whose attributes are set. Queue URLs and names are case-sensitive.
    /// This member is required.
    public var queueUrl: Swift.String?

    public init(
        attributes: [Swift.String: Swift.String]? = nil,
        queueUrl: Swift.String? = nil
    )
    {
        self.attributes = attributes
        self.queueUrl = queueUrl
    }
}

public struct StartMessageMoveTaskInput: Swift.Sendable {
    /// The ARN of the queue that receives the moved messages. You can use this field to specify the destination queue where you would like to redrive messages. If this field is left blank, the messages will be redriven back to their respective original source queues.
    public var destinationArn: Swift.String?
    /// The number of messages to be moved per second (the message movement rate). You can use this field to define a fixed message movement rate. The maximum value for messages per second is 500. If this field is left blank, the system will optimize the rate based on the queue message backlog size, which may vary throughout the duration of the message movement task.
    public var maxNumberOfMessagesPerSecond: Swift.Int?
    /// The ARN of the queue that contains the messages to be moved to another queue. Currently, only ARNs of dead-letter queues (DLQs) whose sources are other Amazon SQS queues are accepted. DLQs whose sources are non-SQS queues, such as Lambda or Amazon SNS topics, are not currently supported.
    /// This member is required.
    public var sourceArn: Swift.String?

    public init(
        destinationArn: Swift.String? = nil,
        maxNumberOfMessagesPerSecond: Swift.Int? = nil,
        sourceArn: Swift.String? = nil
    )
    {
        self.destinationArn = destinationArn
        self.maxNumberOfMessagesPerSecond = maxNumberOfMessagesPerSecond
        self.sourceArn = sourceArn
    }
}

public struct StartMessageMoveTaskOutput: Swift.Sendable {
    /// An identifier associated with a message movement task. You can use this identifier to cancel a specified message movement task using the CancelMessageMoveTask action.
    public var taskHandle: Swift.String?

    public init(
        taskHandle: Swift.String? = nil
    )
    {
        self.taskHandle = taskHandle
    }
}

public struct TagQueueInput: Swift.Sendable {
    /// The URL of the queue.
    /// This member is required.
    public var queueUrl: Swift.String?
    /// The list of tags to be added to the specified queue.
    /// This member is required.
    public var tags: [Swift.String: Swift.String]?

    public init(
        queueUrl: Swift.String? = nil,
        tags: [Swift.String: Swift.String]? = nil
    )
    {
        self.queueUrl = queueUrl
        self.tags = tags
    }
}

public struct UntagQueueInput: Swift.Sendable {
    /// The URL of the queue.
    /// This member is required.
    public var queueUrl: Swift.String?
    /// The list of tags to be removed from the specified queue.
    /// This member is required.
    public var tagKeys: [Swift.String]?

    public init(
        queueUrl: Swift.String? = nil,
        tagKeys: [Swift.String]? = nil
    )
    {
        self.queueUrl = queueUrl
        self.tagKeys = tagKeys
    }
}

extension AddPermissionInput {

    static func urlPathProvider(_ value: AddPermissionInput) -> Swift.String? {
        return "/"
    }
}

extension CancelMessageMoveTaskInput {

    static func urlPathProvider(_ value: CancelMessageMoveTaskInput) -> Swift.String? {
        return "/"
    }
}

extension ChangeMessageVisibilityInput {

    static func urlPathProvider(_ value: ChangeMessageVisibilityInput) -> Swift.String? {
        return "/"
    }
}

extension ChangeMessageVisibilityBatchInput {

    static func urlPathProvider(_ value: ChangeMessageVisibilityBatchInput) -> Swift.String? {
        return "/"
    }
}

extension CreateQueueInput {

    static func urlPathProvider(_ value: CreateQueueInput) -> Swift.String? {
        return "/"
    }
}

extension DeleteMessageInput {

    static func urlPathProvider(_ value: DeleteMessageInput) -> Swift.String? {
        return "/"
    }
}

extension DeleteMessageBatchInput {

    static func urlPathProvider(_ value: DeleteMessageBatchInput) -> Swift.String? {
        return "/"
    }
}

extension DeleteQueueInput {

    static func urlPathProvider(_ value: DeleteQueueInput) -> Swift.String? {
        return "/"
    }
}

extension GetQueueAttributesInput {

    static func urlPathProvider(_ value: GetQueueAttributesInput) -> Swift.String? {
        return "/"
    }
}

extension GetQueueUrlInput {

    static func urlPathProvider(_ value: GetQueueUrlInput) -> Swift.String? {
        return "/"
    }
}

extension ListDeadLetterSourceQueuesInput {

    static func urlPathProvider(_ value: ListDeadLetterSourceQueuesInput) -> Swift.String? {
        return "/"
    }
}

extension ListMessageMoveTasksInput {

    static func urlPathProvider(_ value: ListMessageMoveTasksInput) -> Swift.String? {
        return "/"
    }
}

extension ListQueuesInput {

    static func urlPathProvider(_ value: ListQueuesInput) -> Swift.String? {
        return "/"
    }
}

extension ListQueueTagsInput {

    static func urlPathProvider(_ value: ListQueueTagsInput) -> Swift.String? {
        return "/"
    }
}

extension PurgeQueueInput {

    static func urlPathProvider(_ value: PurgeQueueInput) -> Swift.String? {
        return "/"
    }
}

extension ReceiveMessageInput {

    static func urlPathProvider(_ value: ReceiveMessageInput) -> Swift.String? {
        return "/"
    }
}

extension RemovePermissionInput {

    static func urlPathProvider(_ value: RemovePermissionInput) -> Swift.String? {
        return "/"
    }
}

extension SendMessageInput {

    static func urlPathProvider(_ value: SendMessageInput) -> Swift.String? {
        return "/"
    }
}

extension SendMessageBatchInput {

    static func urlPathProvider(_ value: SendMessageBatchInput) -> Swift.String? {
        return "/"
    }
}

extension SetQueueAttributesInput {

    static func urlPathProvider(_ value: SetQueueAttributesInput) -> Swift.String? {
        return "/"
    }
}

extension StartMessageMoveTaskInput {

    static func urlPathProvider(_ value: StartMessageMoveTaskInput) -> Swift.String? {
        return "/"
    }
}

extension TagQueueInput {

    static func urlPathProvider(_ value: TagQueueInput) -> Swift.String? {
        return "/"
    }
}

extension UntagQueueInput {

    static func urlPathProvider(_ value: UntagQueueInput) -> Swift.String? {
        return "/"
    }
}

extension AddPermissionInput {

    static func write(value: AddPermissionInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["AWSAccountIds"].writeList(value.awsAccountIds, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: true)
        try writer["Actions"].writeList(value.actions, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: true)
        try writer["Label"].write(value.label)
        try writer["QueueUrl"].write(value.queueUrl)
    }
}

extension CancelMessageMoveTaskInput {

    static func write(value: CancelMessageMoveTaskInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["TaskHandle"].write(value.taskHandle)
    }
}

extension ChangeMessageVisibilityInput {

    static func write(value: ChangeMessageVisibilityInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["QueueUrl"].write(value.queueUrl)
        try writer["ReceiptHandle"].write(value.receiptHandle)
        try writer["VisibilityTimeout"].write(value.visibilityTimeout)
    }
}

extension ChangeMessageVisibilityBatchInput {

    static func write(value: ChangeMessageVisibilityBatchInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Entries"].writeList(value.entries, memberWritingClosure: SQSClientTypes.ChangeMessageVisibilityBatchRequestEntry.write(value:to:), memberNodeInfo: "member", isFlattened: true)
        try writer["QueueUrl"].write(value.queueUrl)
    }
}

extension CreateQueueInput {

    static func write(value: CreateQueueInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Attributes"].writeMap(value.attributes, valueWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: true)
        try writer["QueueName"].write(value.queueName)
        try writer["tags"].writeMap(value.tags, valueWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: true)
    }
}

extension DeleteMessageInput {

    static func write(value: DeleteMessageInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["QueueUrl"].write(value.queueUrl)
        try writer["ReceiptHandle"].write(value.receiptHandle)
    }
}

extension DeleteMessageBatchInput {

    static func write(value: DeleteMessageBatchInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Entries"].writeList(value.entries, memberWritingClosure: SQSClientTypes.DeleteMessageBatchRequestEntry.write(value:to:), memberNodeInfo: "member", isFlattened: true)
        try writer["QueueUrl"].write(value.queueUrl)
    }
}

extension DeleteQueueInput {

    static func write(value: DeleteQueueInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["QueueUrl"].write(value.queueUrl)
    }
}

extension GetQueueAttributesInput {

    static func write(value: GetQueueAttributesInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["AttributeNames"].writeList(value.attributeNames, memberWritingClosure: SmithyReadWrite.WritingClosureBox<SQSClientTypes.QueueAttributeName>().write(value:to:), memberNodeInfo: "member", isFlattened: true)
        try writer["QueueUrl"].write(value.queueUrl)
    }
}

extension GetQueueUrlInput {

    static func write(value: GetQueueUrlInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["QueueName"].write(value.queueName)
        try writer["QueueOwnerAWSAccountId"].write(value.queueOwnerAWSAccountId)
    }
}

extension ListDeadLetterSourceQueuesInput {

    static func write(value: ListDeadLetterSourceQueuesInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["MaxResults"].write(value.maxResults)
        try writer["NextToken"].write(value.nextToken)
        try writer["QueueUrl"].write(value.queueUrl)
    }
}

extension ListMessageMoveTasksInput {

    static func write(value: ListMessageMoveTasksInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["MaxResults"].write(value.maxResults)
        try writer["SourceArn"].write(value.sourceArn)
    }
}

extension ListQueuesInput {

    static func write(value: ListQueuesInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["MaxResults"].write(value.maxResults)
        try writer["NextToken"].write(value.nextToken)
        try writer["QueueNamePrefix"].write(value.queueNamePrefix)
    }
}

extension ListQueueTagsInput {

    static func write(value: ListQueueTagsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["QueueUrl"].write(value.queueUrl)
    }
}

extension PurgeQueueInput {

    static func write(value: PurgeQueueInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["QueueUrl"].write(value.queueUrl)
    }
}

extension ReceiveMessageInput {

    static func write(value: ReceiveMessageInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["AttributeNames"].writeList(value.attributeNames, memberWritingClosure: SmithyReadWrite.WritingClosureBox<SQSClientTypes.QueueAttributeName>().write(value:to:), memberNodeInfo: "member", isFlattened: true)
        try writer["MaxNumberOfMessages"].write(value.maxNumberOfMessages)
        try writer["MessageAttributeNames"].writeList(value.messageAttributeNames, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: true)
        try writer["MessageSystemAttributeNames"].writeList(value.messageSystemAttributeNames, memberWritingClosure: SmithyReadWrite.WritingClosureBox<SQSClientTypes.MessageSystemAttributeName>().write(value:to:), memberNodeInfo: "member", isFlattened: true)
        try writer["QueueUrl"].write(value.queueUrl)
        try writer["ReceiveRequestAttemptId"].write(value.receiveRequestAttemptId)
        try writer["VisibilityTimeout"].write(value.visibilityTimeout)
        try writer["WaitTimeSeconds"].write(value.waitTimeSeconds)
    }
}

extension RemovePermissionInput {

    static func write(value: RemovePermissionInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Label"].write(value.label)
        try writer["QueueUrl"].write(value.queueUrl)
    }
}

extension SendMessageInput {

    static func write(value: SendMessageInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["DelaySeconds"].write(value.delaySeconds)
        try writer["MessageAttributes"].writeMap(value.messageAttributes, valueWritingClosure: SQSClientTypes.MessageAttributeValue.write(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: true)
        try writer["MessageBody"].write(value.messageBody)
        try writer["MessageDeduplicationId"].write(value.messageDeduplicationId)
        try writer["MessageGroupId"].write(value.messageGroupId)
        try writer["MessageSystemAttributes"].writeMap(value.messageSystemAttributes, valueWritingClosure: SQSClientTypes.MessageSystemAttributeValue.write(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: true)
        try writer["QueueUrl"].write(value.queueUrl)
    }
}

extension SendMessageBatchInput {

    static func write(value: SendMessageBatchInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Entries"].writeList(value.entries, memberWritingClosure: SQSClientTypes.SendMessageBatchRequestEntry.write(value:to:), memberNodeInfo: "member", isFlattened: true)
        try writer["QueueUrl"].write(value.queueUrl)
    }
}

extension SetQueueAttributesInput {

    static func write(value: SetQueueAttributesInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Attributes"].writeMap(value.attributes, valueWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: true)
        try writer["QueueUrl"].write(value.queueUrl)
    }
}

extension StartMessageMoveTaskInput {

    static func write(value: StartMessageMoveTaskInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["DestinationArn"].write(value.destinationArn)
        try writer["MaxNumberOfMessagesPerSecond"].write(value.maxNumberOfMessagesPerSecond)
        try writer["SourceArn"].write(value.sourceArn)
    }
}

extension TagQueueInput {

    static func write(value: TagQueueInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["QueueUrl"].write(value.queueUrl)
        try writer["Tags"].writeMap(value.tags, valueWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: true)
    }
}

extension UntagQueueInput {

    static func write(value: UntagQueueInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["QueueUrl"].write(value.queueUrl)
        try writer["TagKeys"].writeList(value.tagKeys, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: true)
    }
}

extension AddPermissionOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> AddPermissionOutput {
        return AddPermissionOutput()
    }
}

extension CancelMessageMoveTaskOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CancelMessageMoveTaskOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CancelMessageMoveTaskOutput()
        value.approximateNumberOfMessagesMoved = try reader["ApproximateNumberOfMessagesMoved"].readIfPresent() ?? 0
        return value
    }
}

extension ChangeMessageVisibilityOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ChangeMessageVisibilityOutput {
        return ChangeMessageVisibilityOutput()
    }
}

extension ChangeMessageVisibilityBatchOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ChangeMessageVisibilityBatchOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ChangeMessageVisibilityBatchOutput()
        value.failed = try reader["Failed"].readListIfPresent(memberReadingClosure: SQSClientTypes.BatchResultErrorEntry.read(from:), memberNodeInfo: "member", isFlattened: true) ?? []
        value.successful = try reader["Successful"].readListIfPresent(memberReadingClosure: SQSClientTypes.ChangeMessageVisibilityBatchResultEntry.read(from:), memberNodeInfo: "member", isFlattened: true) ?? []
        return value
    }
}

extension CreateQueueOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateQueueOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateQueueOutput()
        value.queueUrl = try reader["QueueUrl"].readIfPresent()
        return value
    }
}

extension DeleteMessageOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteMessageOutput {
        return DeleteMessageOutput()
    }
}

extension DeleteMessageBatchOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteMessageBatchOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DeleteMessageBatchOutput()
        value.failed = try reader["Failed"].readListIfPresent(memberReadingClosure: SQSClientTypes.BatchResultErrorEntry.read(from:), memberNodeInfo: "member", isFlattened: true) ?? []
        value.successful = try reader["Successful"].readListIfPresent(memberReadingClosure: SQSClientTypes.DeleteMessageBatchResultEntry.read(from:), memberNodeInfo: "member", isFlattened: true) ?? []
        return value
    }
}

extension DeleteQueueOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteQueueOutput {
        return DeleteQueueOutput()
    }
}

extension GetQueueAttributesOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetQueueAttributesOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetQueueAttributesOutput()
        value.attributes = try reader["Attributes"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: true)
        return value
    }
}

extension GetQueueUrlOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetQueueUrlOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetQueueUrlOutput()
        value.queueUrl = try reader["QueueUrl"].readIfPresent()
        return value
    }
}

extension ListDeadLetterSourceQueuesOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListDeadLetterSourceQueuesOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListDeadLetterSourceQueuesOutput()
        value.nextToken = try reader["NextToken"].readIfPresent()
        value.queueUrls = try reader["queueUrls"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: true) ?? []
        return value
    }
}

extension ListMessageMoveTasksOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListMessageMoveTasksOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListMessageMoveTasksOutput()
        value.results = try reader["Results"].readListIfPresent(memberReadingClosure: SQSClientTypes.ListMessageMoveTasksResultEntry.read(from:), memberNodeInfo: "member", isFlattened: true)
        return value
    }
}

extension ListQueuesOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListQueuesOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListQueuesOutput()
        value.nextToken = try reader["NextToken"].readIfPresent()
        value.queueUrls = try reader["QueueUrls"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: true)
        return value
    }
}

extension ListQueueTagsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListQueueTagsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListQueueTagsOutput()
        value.tags = try reader["Tags"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: true)
        return value
    }
}

extension PurgeQueueOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> PurgeQueueOutput {
        return PurgeQueueOutput()
    }
}

extension ReceiveMessageOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ReceiveMessageOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ReceiveMessageOutput()
        value.messages = try reader["Messages"].readListIfPresent(memberReadingClosure: SQSClientTypes.Message.read(from:), memberNodeInfo: "member", isFlattened: true)
        return value
    }
}

extension RemovePermissionOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> RemovePermissionOutput {
        return RemovePermissionOutput()
    }
}

extension SendMessageOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> SendMessageOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = SendMessageOutput()
        value.md5OfMessageAttributes = try reader["MD5OfMessageAttributes"].readIfPresent()
        value.md5OfMessageBody = try reader["MD5OfMessageBody"].readIfPresent()
        value.md5OfMessageSystemAttributes = try reader["MD5OfMessageSystemAttributes"].readIfPresent()
        value.messageId = try reader["MessageId"].readIfPresent()
        value.sequenceNumber = try reader["SequenceNumber"].readIfPresent()
        return value
    }
}

extension SendMessageBatchOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> SendMessageBatchOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = SendMessageBatchOutput()
        value.failed = try reader["Failed"].readListIfPresent(memberReadingClosure: SQSClientTypes.BatchResultErrorEntry.read(from:), memberNodeInfo: "member", isFlattened: true) ?? []
        value.successful = try reader["Successful"].readListIfPresent(memberReadingClosure: SQSClientTypes.SendMessageBatchResultEntry.read(from:), memberNodeInfo: "member", isFlattened: true) ?? []
        return value
    }
}

extension SetQueueAttributesOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> SetQueueAttributesOutput {
        return SetQueueAttributesOutput()
    }
}

extension StartMessageMoveTaskOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> StartMessageMoveTaskOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = StartMessageMoveTaskOutput()
        value.taskHandle = try reader["TaskHandle"].readIfPresent()
        return value
    }
}

extension TagQueueOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> TagQueueOutput {
        return TagQueueOutput()
    }
}

extension UntagQueueOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UntagQueueOutput {
        return UntagQueueOutput()
    }
}

enum AddPermissionOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let errorDetails = httpResponse.headers.value(for: "x-amzn-query-error")
        let baseError = try AWSClientRuntime.AWSJSONError.makeQueryCompatibleAWSJsonError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false, errorDetails: errorDetails)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InvalidAddress": return try InvalidAddress.makeError(baseError: baseError)
            case "InvalidSecurity": return try InvalidSecurity.makeError(baseError: baseError)
            case "OverLimit": return try OverLimit.makeError(baseError: baseError)
            case "AWS.SimpleQueueService.NonExistentQueue": return try QueueDoesNotExist.makeError(baseError: baseError)
            case "RequestThrottled": return try RequestThrottled.makeError(baseError: baseError)
            case "AWS.SimpleQueueService.UnsupportedOperation": return try UnsupportedOperation.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CancelMessageMoveTaskOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let errorDetails = httpResponse.headers.value(for: "x-amzn-query-error")
        let baseError = try AWSClientRuntime.AWSJSONError.makeQueryCompatibleAWSJsonError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false, errorDetails: errorDetails)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InvalidAddress": return try InvalidAddress.makeError(baseError: baseError)
            case "InvalidSecurity": return try InvalidSecurity.makeError(baseError: baseError)
            case "RequestThrottled": return try RequestThrottled.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "AWS.SimpleQueueService.UnsupportedOperation": return try UnsupportedOperation.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ChangeMessageVisibilityOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let errorDetails = httpResponse.headers.value(for: "x-amzn-query-error")
        let baseError = try AWSClientRuntime.AWSJSONError.makeQueryCompatibleAWSJsonError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false, errorDetails: errorDetails)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InvalidAddress": return try InvalidAddress.makeError(baseError: baseError)
            case "InvalidSecurity": return try InvalidSecurity.makeError(baseError: baseError)
            case "AWS.SimpleQueueService.MessageNotInflight": return try MessageNotInflight.makeError(baseError: baseError)
            case "AWS.SimpleQueueService.NonExistentQueue": return try QueueDoesNotExist.makeError(baseError: baseError)
            case "ReceiptHandleIsInvalid": return try ReceiptHandleIsInvalid.makeError(baseError: baseError)
            case "RequestThrottled": return try RequestThrottled.makeError(baseError: baseError)
            case "AWS.SimpleQueueService.UnsupportedOperation": return try UnsupportedOperation.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ChangeMessageVisibilityBatchOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let errorDetails = httpResponse.headers.value(for: "x-amzn-query-error")
        let baseError = try AWSClientRuntime.AWSJSONError.makeQueryCompatibleAWSJsonError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false, errorDetails: errorDetails)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AWS.SimpleQueueService.BatchEntryIdsNotDistinct": return try BatchEntryIdsNotDistinct.makeError(baseError: baseError)
            case "AWS.SimpleQueueService.EmptyBatchRequest": return try EmptyBatchRequest.makeError(baseError: baseError)
            case "InvalidAddress": return try InvalidAddress.makeError(baseError: baseError)
            case "AWS.SimpleQueueService.InvalidBatchEntryId": return try InvalidBatchEntryId.makeError(baseError: baseError)
            case "InvalidSecurity": return try InvalidSecurity.makeError(baseError: baseError)
            case "AWS.SimpleQueueService.NonExistentQueue": return try QueueDoesNotExist.makeError(baseError: baseError)
            case "RequestThrottled": return try RequestThrottled.makeError(baseError: baseError)
            case "AWS.SimpleQueueService.TooManyEntriesInBatchRequest": return try TooManyEntriesInBatchRequest.makeError(baseError: baseError)
            case "AWS.SimpleQueueService.UnsupportedOperation": return try UnsupportedOperation.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateQueueOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let errorDetails = httpResponse.headers.value(for: "x-amzn-query-error")
        let baseError = try AWSClientRuntime.AWSJSONError.makeQueryCompatibleAWSJsonError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false, errorDetails: errorDetails)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InvalidAddress": return try InvalidAddress.makeError(baseError: baseError)
            case "InvalidAttributeName": return try InvalidAttributeName.makeError(baseError: baseError)
            case "InvalidAttributeValue": return try InvalidAttributeValue.makeError(baseError: baseError)
            case "InvalidSecurity": return try InvalidSecurity.makeError(baseError: baseError)
            case "AWS.SimpleQueueService.QueueDeletedRecently": return try QueueDeletedRecently.makeError(baseError: baseError)
            case "QueueAlreadyExists": return try QueueNameExists.makeError(baseError: baseError)
            case "RequestThrottled": return try RequestThrottled.makeError(baseError: baseError)
            case "AWS.SimpleQueueService.UnsupportedOperation": return try UnsupportedOperation.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteMessageOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let errorDetails = httpResponse.headers.value(for: "x-amzn-query-error")
        let baseError = try AWSClientRuntime.AWSJSONError.makeQueryCompatibleAWSJsonError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false, errorDetails: errorDetails)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InvalidAddress": return try InvalidAddress.makeError(baseError: baseError)
            case "InvalidIdFormat": return try InvalidIdFormat.makeError(baseError: baseError)
            case "InvalidSecurity": return try InvalidSecurity.makeError(baseError: baseError)
            case "AWS.SimpleQueueService.NonExistentQueue": return try QueueDoesNotExist.makeError(baseError: baseError)
            case "ReceiptHandleIsInvalid": return try ReceiptHandleIsInvalid.makeError(baseError: baseError)
            case "RequestThrottled": return try RequestThrottled.makeError(baseError: baseError)
            case "AWS.SimpleQueueService.UnsupportedOperation": return try UnsupportedOperation.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteMessageBatchOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let errorDetails = httpResponse.headers.value(for: "x-amzn-query-error")
        let baseError = try AWSClientRuntime.AWSJSONError.makeQueryCompatibleAWSJsonError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false, errorDetails: errorDetails)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AWS.SimpleQueueService.BatchEntryIdsNotDistinct": return try BatchEntryIdsNotDistinct.makeError(baseError: baseError)
            case "AWS.SimpleQueueService.EmptyBatchRequest": return try EmptyBatchRequest.makeError(baseError: baseError)
            case "InvalidAddress": return try InvalidAddress.makeError(baseError: baseError)
            case "AWS.SimpleQueueService.InvalidBatchEntryId": return try InvalidBatchEntryId.makeError(baseError: baseError)
            case "InvalidSecurity": return try InvalidSecurity.makeError(baseError: baseError)
            case "AWS.SimpleQueueService.NonExistentQueue": return try QueueDoesNotExist.makeError(baseError: baseError)
            case "RequestThrottled": return try RequestThrottled.makeError(baseError: baseError)
            case "AWS.SimpleQueueService.TooManyEntriesInBatchRequest": return try TooManyEntriesInBatchRequest.makeError(baseError: baseError)
            case "AWS.SimpleQueueService.UnsupportedOperation": return try UnsupportedOperation.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteQueueOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let errorDetails = httpResponse.headers.value(for: "x-amzn-query-error")
        let baseError = try AWSClientRuntime.AWSJSONError.makeQueryCompatibleAWSJsonError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false, errorDetails: errorDetails)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InvalidAddress": return try InvalidAddress.makeError(baseError: baseError)
            case "InvalidSecurity": return try InvalidSecurity.makeError(baseError: baseError)
            case "AWS.SimpleQueueService.NonExistentQueue": return try QueueDoesNotExist.makeError(baseError: baseError)
            case "RequestThrottled": return try RequestThrottled.makeError(baseError: baseError)
            case "AWS.SimpleQueueService.UnsupportedOperation": return try UnsupportedOperation.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetQueueAttributesOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let errorDetails = httpResponse.headers.value(for: "x-amzn-query-error")
        let baseError = try AWSClientRuntime.AWSJSONError.makeQueryCompatibleAWSJsonError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false, errorDetails: errorDetails)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InvalidAddress": return try InvalidAddress.makeError(baseError: baseError)
            case "InvalidAttributeName": return try InvalidAttributeName.makeError(baseError: baseError)
            case "InvalidSecurity": return try InvalidSecurity.makeError(baseError: baseError)
            case "AWS.SimpleQueueService.NonExistentQueue": return try QueueDoesNotExist.makeError(baseError: baseError)
            case "RequestThrottled": return try RequestThrottled.makeError(baseError: baseError)
            case "AWS.SimpleQueueService.UnsupportedOperation": return try UnsupportedOperation.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetQueueUrlOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let errorDetails = httpResponse.headers.value(for: "x-amzn-query-error")
        let baseError = try AWSClientRuntime.AWSJSONError.makeQueryCompatibleAWSJsonError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false, errorDetails: errorDetails)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InvalidAddress": return try InvalidAddress.makeError(baseError: baseError)
            case "InvalidSecurity": return try InvalidSecurity.makeError(baseError: baseError)
            case "AWS.SimpleQueueService.NonExistentQueue": return try QueueDoesNotExist.makeError(baseError: baseError)
            case "RequestThrottled": return try RequestThrottled.makeError(baseError: baseError)
            case "AWS.SimpleQueueService.UnsupportedOperation": return try UnsupportedOperation.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListDeadLetterSourceQueuesOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let errorDetails = httpResponse.headers.value(for: "x-amzn-query-error")
        let baseError = try AWSClientRuntime.AWSJSONError.makeQueryCompatibleAWSJsonError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false, errorDetails: errorDetails)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InvalidAddress": return try InvalidAddress.makeError(baseError: baseError)
            case "InvalidSecurity": return try InvalidSecurity.makeError(baseError: baseError)
            case "AWS.SimpleQueueService.NonExistentQueue": return try QueueDoesNotExist.makeError(baseError: baseError)
            case "RequestThrottled": return try RequestThrottled.makeError(baseError: baseError)
            case "AWS.SimpleQueueService.UnsupportedOperation": return try UnsupportedOperation.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListMessageMoveTasksOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let errorDetails = httpResponse.headers.value(for: "x-amzn-query-error")
        let baseError = try AWSClientRuntime.AWSJSONError.makeQueryCompatibleAWSJsonError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false, errorDetails: errorDetails)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InvalidAddress": return try InvalidAddress.makeError(baseError: baseError)
            case "InvalidSecurity": return try InvalidSecurity.makeError(baseError: baseError)
            case "RequestThrottled": return try RequestThrottled.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "AWS.SimpleQueueService.UnsupportedOperation": return try UnsupportedOperation.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListQueuesOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let errorDetails = httpResponse.headers.value(for: "x-amzn-query-error")
        let baseError = try AWSClientRuntime.AWSJSONError.makeQueryCompatibleAWSJsonError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false, errorDetails: errorDetails)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InvalidAddress": return try InvalidAddress.makeError(baseError: baseError)
            case "InvalidSecurity": return try InvalidSecurity.makeError(baseError: baseError)
            case "RequestThrottled": return try RequestThrottled.makeError(baseError: baseError)
            case "AWS.SimpleQueueService.UnsupportedOperation": return try UnsupportedOperation.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListQueueTagsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let errorDetails = httpResponse.headers.value(for: "x-amzn-query-error")
        let baseError = try AWSClientRuntime.AWSJSONError.makeQueryCompatibleAWSJsonError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false, errorDetails: errorDetails)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InvalidAddress": return try InvalidAddress.makeError(baseError: baseError)
            case "InvalidSecurity": return try InvalidSecurity.makeError(baseError: baseError)
            case "AWS.SimpleQueueService.NonExistentQueue": return try QueueDoesNotExist.makeError(baseError: baseError)
            case "RequestThrottled": return try RequestThrottled.makeError(baseError: baseError)
            case "AWS.SimpleQueueService.UnsupportedOperation": return try UnsupportedOperation.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum PurgeQueueOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let errorDetails = httpResponse.headers.value(for: "x-amzn-query-error")
        let baseError = try AWSClientRuntime.AWSJSONError.makeQueryCompatibleAWSJsonError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false, errorDetails: errorDetails)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InvalidAddress": return try InvalidAddress.makeError(baseError: baseError)
            case "InvalidSecurity": return try InvalidSecurity.makeError(baseError: baseError)
            case "AWS.SimpleQueueService.PurgeQueueInProgress": return try PurgeQueueInProgress.makeError(baseError: baseError)
            case "AWS.SimpleQueueService.NonExistentQueue": return try QueueDoesNotExist.makeError(baseError: baseError)
            case "RequestThrottled": return try RequestThrottled.makeError(baseError: baseError)
            case "AWS.SimpleQueueService.UnsupportedOperation": return try UnsupportedOperation.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ReceiveMessageOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let errorDetails = httpResponse.headers.value(for: "x-amzn-query-error")
        let baseError = try AWSClientRuntime.AWSJSONError.makeQueryCompatibleAWSJsonError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false, errorDetails: errorDetails)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InvalidAddress": return try InvalidAddress.makeError(baseError: baseError)
            case "InvalidSecurity": return try InvalidSecurity.makeError(baseError: baseError)
            case "KMS.AccessDeniedException": return try KmsAccessDenied.makeError(baseError: baseError)
            case "KMS.DisabledException": return try KmsDisabled.makeError(baseError: baseError)
            case "KMS.InvalidKeyUsageException": return try KmsInvalidKeyUsage.makeError(baseError: baseError)
            case "KMS.InvalidStateException": return try KmsInvalidState.makeError(baseError: baseError)
            case "KMS.NotFoundException": return try KmsNotFound.makeError(baseError: baseError)
            case "KMS.OptInRequired": return try KmsOptInRequired.makeError(baseError: baseError)
            case "KMS.ThrottlingException": return try KmsThrottled.makeError(baseError: baseError)
            case "OverLimit": return try OverLimit.makeError(baseError: baseError)
            case "AWS.SimpleQueueService.NonExistentQueue": return try QueueDoesNotExist.makeError(baseError: baseError)
            case "RequestThrottled": return try RequestThrottled.makeError(baseError: baseError)
            case "AWS.SimpleQueueService.UnsupportedOperation": return try UnsupportedOperation.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum RemovePermissionOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let errorDetails = httpResponse.headers.value(for: "x-amzn-query-error")
        let baseError = try AWSClientRuntime.AWSJSONError.makeQueryCompatibleAWSJsonError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false, errorDetails: errorDetails)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InvalidAddress": return try InvalidAddress.makeError(baseError: baseError)
            case "InvalidSecurity": return try InvalidSecurity.makeError(baseError: baseError)
            case "AWS.SimpleQueueService.NonExistentQueue": return try QueueDoesNotExist.makeError(baseError: baseError)
            case "RequestThrottled": return try RequestThrottled.makeError(baseError: baseError)
            case "AWS.SimpleQueueService.UnsupportedOperation": return try UnsupportedOperation.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum SendMessageOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let errorDetails = httpResponse.headers.value(for: "x-amzn-query-error")
        let baseError = try AWSClientRuntime.AWSJSONError.makeQueryCompatibleAWSJsonError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false, errorDetails: errorDetails)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InvalidAddress": return try InvalidAddress.makeError(baseError: baseError)
            case "InvalidMessageContents": return try InvalidMessageContents.makeError(baseError: baseError)
            case "InvalidSecurity": return try InvalidSecurity.makeError(baseError: baseError)
            case "KMS.AccessDeniedException": return try KmsAccessDenied.makeError(baseError: baseError)
            case "KMS.DisabledException": return try KmsDisabled.makeError(baseError: baseError)
            case "KMS.InvalidKeyUsageException": return try KmsInvalidKeyUsage.makeError(baseError: baseError)
            case "KMS.InvalidStateException": return try KmsInvalidState.makeError(baseError: baseError)
            case "KMS.NotFoundException": return try KmsNotFound.makeError(baseError: baseError)
            case "KMS.OptInRequired": return try KmsOptInRequired.makeError(baseError: baseError)
            case "KMS.ThrottlingException": return try KmsThrottled.makeError(baseError: baseError)
            case "AWS.SimpleQueueService.NonExistentQueue": return try QueueDoesNotExist.makeError(baseError: baseError)
            case "RequestThrottled": return try RequestThrottled.makeError(baseError: baseError)
            case "AWS.SimpleQueueService.UnsupportedOperation": return try UnsupportedOperation.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum SendMessageBatchOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let errorDetails = httpResponse.headers.value(for: "x-amzn-query-error")
        let baseError = try AWSClientRuntime.AWSJSONError.makeQueryCompatibleAWSJsonError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false, errorDetails: errorDetails)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AWS.SimpleQueueService.BatchEntryIdsNotDistinct": return try BatchEntryIdsNotDistinct.makeError(baseError: baseError)
            case "AWS.SimpleQueueService.BatchRequestTooLong": return try BatchRequestTooLong.makeError(baseError: baseError)
            case "AWS.SimpleQueueService.EmptyBatchRequest": return try EmptyBatchRequest.makeError(baseError: baseError)
            case "InvalidAddress": return try InvalidAddress.makeError(baseError: baseError)
            case "AWS.SimpleQueueService.InvalidBatchEntryId": return try InvalidBatchEntryId.makeError(baseError: baseError)
            case "InvalidSecurity": return try InvalidSecurity.makeError(baseError: baseError)
            case "KMS.AccessDeniedException": return try KmsAccessDenied.makeError(baseError: baseError)
            case "KMS.DisabledException": return try KmsDisabled.makeError(baseError: baseError)
            case "KMS.InvalidKeyUsageException": return try KmsInvalidKeyUsage.makeError(baseError: baseError)
            case "KMS.InvalidStateException": return try KmsInvalidState.makeError(baseError: baseError)
            case "KMS.NotFoundException": return try KmsNotFound.makeError(baseError: baseError)
            case "KMS.OptInRequired": return try KmsOptInRequired.makeError(baseError: baseError)
            case "KMS.ThrottlingException": return try KmsThrottled.makeError(baseError: baseError)
            case "AWS.SimpleQueueService.NonExistentQueue": return try QueueDoesNotExist.makeError(baseError: baseError)
            case "RequestThrottled": return try RequestThrottled.makeError(baseError: baseError)
            case "AWS.SimpleQueueService.TooManyEntriesInBatchRequest": return try TooManyEntriesInBatchRequest.makeError(baseError: baseError)
            case "AWS.SimpleQueueService.UnsupportedOperation": return try UnsupportedOperation.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum SetQueueAttributesOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let errorDetails = httpResponse.headers.value(for: "x-amzn-query-error")
        let baseError = try AWSClientRuntime.AWSJSONError.makeQueryCompatibleAWSJsonError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false, errorDetails: errorDetails)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InvalidAddress": return try InvalidAddress.makeError(baseError: baseError)
            case "InvalidAttributeName": return try InvalidAttributeName.makeError(baseError: baseError)
            case "InvalidAttributeValue": return try InvalidAttributeValue.makeError(baseError: baseError)
            case "InvalidSecurity": return try InvalidSecurity.makeError(baseError: baseError)
            case "OverLimit": return try OverLimit.makeError(baseError: baseError)
            case "AWS.SimpleQueueService.NonExistentQueue": return try QueueDoesNotExist.makeError(baseError: baseError)
            case "RequestThrottled": return try RequestThrottled.makeError(baseError: baseError)
            case "AWS.SimpleQueueService.UnsupportedOperation": return try UnsupportedOperation.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum StartMessageMoveTaskOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let errorDetails = httpResponse.headers.value(for: "x-amzn-query-error")
        let baseError = try AWSClientRuntime.AWSJSONError.makeQueryCompatibleAWSJsonError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false, errorDetails: errorDetails)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InvalidAddress": return try InvalidAddress.makeError(baseError: baseError)
            case "InvalidSecurity": return try InvalidSecurity.makeError(baseError: baseError)
            case "RequestThrottled": return try RequestThrottled.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "AWS.SimpleQueueService.UnsupportedOperation": return try UnsupportedOperation.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum TagQueueOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let errorDetails = httpResponse.headers.value(for: "x-amzn-query-error")
        let baseError = try AWSClientRuntime.AWSJSONError.makeQueryCompatibleAWSJsonError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false, errorDetails: errorDetails)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InvalidAddress": return try InvalidAddress.makeError(baseError: baseError)
            case "InvalidSecurity": return try InvalidSecurity.makeError(baseError: baseError)
            case "AWS.SimpleQueueService.NonExistentQueue": return try QueueDoesNotExist.makeError(baseError: baseError)
            case "RequestThrottled": return try RequestThrottled.makeError(baseError: baseError)
            case "AWS.SimpleQueueService.UnsupportedOperation": return try UnsupportedOperation.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UntagQueueOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let errorDetails = httpResponse.headers.value(for: "x-amzn-query-error")
        let baseError = try AWSClientRuntime.AWSJSONError.makeQueryCompatibleAWSJsonError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false, errorDetails: errorDetails)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InvalidAddress": return try InvalidAddress.makeError(baseError: baseError)
            case "InvalidSecurity": return try InvalidSecurity.makeError(baseError: baseError)
            case "AWS.SimpleQueueService.NonExistentQueue": return try QueueDoesNotExist.makeError(baseError: baseError)
            case "RequestThrottled": return try RequestThrottled.makeError(baseError: baseError)
            case "AWS.SimpleQueueService.UnsupportedOperation": return try UnsupportedOperation.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

extension InvalidAddress {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> InvalidAddress {
        let reader = baseError.errorBodyReader
        var value = InvalidAddress()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension UnsupportedOperation {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> UnsupportedOperation {
        let reader = baseError.errorBodyReader
        var value = UnsupportedOperation()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension OverLimit {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> OverLimit {
        let reader = baseError.errorBodyReader
        var value = OverLimit()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension RequestThrottled {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> RequestThrottled {
        let reader = baseError.errorBodyReader
        var value = RequestThrottled()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension QueueDoesNotExist {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> QueueDoesNotExist {
        let reader = baseError.errorBodyReader
        var value = QueueDoesNotExist()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension InvalidSecurity {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> InvalidSecurity {
        let reader = baseError.errorBodyReader
        var value = InvalidSecurity()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ResourceNotFoundException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> ResourceNotFoundException {
        let reader = baseError.errorBodyReader
        var value = ResourceNotFoundException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension MessageNotInflight {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> MessageNotInflight {
        var value = MessageNotInflight()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ReceiptHandleIsInvalid {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> ReceiptHandleIsInvalid {
        let reader = baseError.errorBodyReader
        var value = ReceiptHandleIsInvalid()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension EmptyBatchRequest {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> EmptyBatchRequest {
        let reader = baseError.errorBodyReader
        var value = EmptyBatchRequest()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension TooManyEntriesInBatchRequest {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> TooManyEntriesInBatchRequest {
        let reader = baseError.errorBodyReader
        var value = TooManyEntriesInBatchRequest()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension InvalidBatchEntryId {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> InvalidBatchEntryId {
        let reader = baseError.errorBodyReader
        var value = InvalidBatchEntryId()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension BatchEntryIdsNotDistinct {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> BatchEntryIdsNotDistinct {
        let reader = baseError.errorBodyReader
        var value = BatchEntryIdsNotDistinct()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension InvalidAttributeValue {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> InvalidAttributeValue {
        let reader = baseError.errorBodyReader
        var value = InvalidAttributeValue()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension InvalidAttributeName {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> InvalidAttributeName {
        let reader = baseError.errorBodyReader
        var value = InvalidAttributeName()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension QueueNameExists {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> QueueNameExists {
        let reader = baseError.errorBodyReader
        var value = QueueNameExists()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension QueueDeletedRecently {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> QueueDeletedRecently {
        let reader = baseError.errorBodyReader
        var value = QueueDeletedRecently()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension InvalidIdFormat {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> InvalidIdFormat {
        var value = InvalidIdFormat()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension PurgeQueueInProgress {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> PurgeQueueInProgress {
        let reader = baseError.errorBodyReader
        var value = PurgeQueueInProgress()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension KmsAccessDenied {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> KmsAccessDenied {
        let reader = baseError.errorBodyReader
        var value = KmsAccessDenied()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension KmsNotFound {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> KmsNotFound {
        let reader = baseError.errorBodyReader
        var value = KmsNotFound()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension KmsInvalidState {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> KmsInvalidState {
        let reader = baseError.errorBodyReader
        var value = KmsInvalidState()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension KmsInvalidKeyUsage {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> KmsInvalidKeyUsage {
        let reader = baseError.errorBodyReader
        var value = KmsInvalidKeyUsage()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension KmsThrottled {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> KmsThrottled {
        let reader = baseError.errorBodyReader
        var value = KmsThrottled()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension KmsDisabled {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> KmsDisabled {
        let reader = baseError.errorBodyReader
        var value = KmsDisabled()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension KmsOptInRequired {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> KmsOptInRequired {
        let reader = baseError.errorBodyReader
        var value = KmsOptInRequired()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension InvalidMessageContents {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> InvalidMessageContents {
        let reader = baseError.errorBodyReader
        var value = InvalidMessageContents()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension BatchRequestTooLong {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> BatchRequestTooLong {
        let reader = baseError.errorBodyReader
        var value = BatchRequestTooLong()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension SQSClientTypes.ChangeMessageVisibilityBatchResultEntry {

    static func read(from reader: SmithyJSON.Reader) throws -> SQSClientTypes.ChangeMessageVisibilityBatchResultEntry {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SQSClientTypes.ChangeMessageVisibilityBatchResultEntry()
        value.id = try reader["Id"].readIfPresent() ?? ""
        return value
    }
}

extension SQSClientTypes.BatchResultErrorEntry {

    static func read(from reader: SmithyJSON.Reader) throws -> SQSClientTypes.BatchResultErrorEntry {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SQSClientTypes.BatchResultErrorEntry()
        value.id = try reader["Id"].readIfPresent() ?? ""
        value.senderFault = try reader["SenderFault"].readIfPresent() ?? false
        value.code = try reader["Code"].readIfPresent() ?? ""
        value.message = try reader["Message"].readIfPresent()
        return value
    }
}

extension SQSClientTypes.DeleteMessageBatchResultEntry {

    static func read(from reader: SmithyJSON.Reader) throws -> SQSClientTypes.DeleteMessageBatchResultEntry {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SQSClientTypes.DeleteMessageBatchResultEntry()
        value.id = try reader["Id"].readIfPresent() ?? ""
        return value
    }
}

extension SQSClientTypes.ListMessageMoveTasksResultEntry {

    static func read(from reader: SmithyJSON.Reader) throws -> SQSClientTypes.ListMessageMoveTasksResultEntry {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SQSClientTypes.ListMessageMoveTasksResultEntry()
        value.taskHandle = try reader["TaskHandle"].readIfPresent()
        value.status = try reader["Status"].readIfPresent()
        value.sourceArn = try reader["SourceArn"].readIfPresent()
        value.destinationArn = try reader["DestinationArn"].readIfPresent()
        value.maxNumberOfMessagesPerSecond = try reader["MaxNumberOfMessagesPerSecond"].readIfPresent()
        value.approximateNumberOfMessagesMoved = try reader["ApproximateNumberOfMessagesMoved"].readIfPresent() ?? 0
        value.approximateNumberOfMessagesToMove = try reader["ApproximateNumberOfMessagesToMove"].readIfPresent()
        value.failureReason = try reader["FailureReason"].readIfPresent()
        value.startedTimestamp = try reader["StartedTimestamp"].readIfPresent() ?? 0
        return value
    }
}

extension SQSClientTypes.Message {

    static func read(from reader: SmithyJSON.Reader) throws -> SQSClientTypes.Message {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SQSClientTypes.Message()
        value.messageId = try reader["MessageId"].readIfPresent()
        value.receiptHandle = try reader["ReceiptHandle"].readIfPresent()
        value.md5OfBody = try reader["MD5OfBody"].readIfPresent()
        value.body = try reader["Body"].readIfPresent()
        value.attributes = try reader["Attributes"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: true)
        value.md5OfMessageAttributes = try reader["MD5OfMessageAttributes"].readIfPresent()
        value.messageAttributes = try reader["MessageAttributes"].readMapIfPresent(valueReadingClosure: SQSClientTypes.MessageAttributeValue.read(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: true)
        return value
    }
}

extension SQSClientTypes.MessageAttributeValue {

    static func write(value: SQSClientTypes.MessageAttributeValue?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["BinaryListValues"].writeList(value.binaryListValues, memberWritingClosure: SmithyReadWrite.WritingClosures.writeData(value:to:), memberNodeInfo: "member", isFlattened: true)
        try writer["BinaryValue"].write(value.binaryValue)
        try writer["DataType"].write(value.dataType)
        try writer["StringListValues"].writeList(value.stringListValues, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: true)
        try writer["StringValue"].write(value.stringValue)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SQSClientTypes.MessageAttributeValue {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SQSClientTypes.MessageAttributeValue()
        value.stringValue = try reader["StringValue"].readIfPresent()
        value.binaryValue = try reader["BinaryValue"].readIfPresent()
        value.stringListValues = try reader["StringListValues"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: true)
        value.binaryListValues = try reader["BinaryListValues"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readData(from:), memberNodeInfo: "member", isFlattened: true)
        value.dataType = try reader["DataType"].readIfPresent() ?? ""
        return value
    }
}

extension SQSClientTypes.SendMessageBatchResultEntry {

    static func read(from reader: SmithyJSON.Reader) throws -> SQSClientTypes.SendMessageBatchResultEntry {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SQSClientTypes.SendMessageBatchResultEntry()
        value.id = try reader["Id"].readIfPresent() ?? ""
        value.messageId = try reader["MessageId"].readIfPresent() ?? ""
        value.md5OfMessageBody = try reader["MD5OfMessageBody"].readIfPresent() ?? ""
        value.md5OfMessageAttributes = try reader["MD5OfMessageAttributes"].readIfPresent()
        value.md5OfMessageSystemAttributes = try reader["MD5OfMessageSystemAttributes"].readIfPresent()
        value.sequenceNumber = try reader["SequenceNumber"].readIfPresent()
        return value
    }
}

extension SQSClientTypes.ChangeMessageVisibilityBatchRequestEntry {

    static func write(value: SQSClientTypes.ChangeMessageVisibilityBatchRequestEntry?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Id"].write(value.id)
        try writer["ReceiptHandle"].write(value.receiptHandle)
        try writer["VisibilityTimeout"].write(value.visibilityTimeout)
    }
}

extension SQSClientTypes.DeleteMessageBatchRequestEntry {

    static func write(value: SQSClientTypes.DeleteMessageBatchRequestEntry?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Id"].write(value.id)
        try writer["ReceiptHandle"].write(value.receiptHandle)
    }
}

extension SQSClientTypes.MessageSystemAttributeValue {

    static func write(value: SQSClientTypes.MessageSystemAttributeValue?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["BinaryListValues"].writeList(value.binaryListValues, memberWritingClosure: SmithyReadWrite.WritingClosures.writeData(value:to:), memberNodeInfo: "member", isFlattened: true)
        try writer["BinaryValue"].write(value.binaryValue)
        try writer["DataType"].write(value.dataType)
        try writer["StringListValues"].writeList(value.stringListValues, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: true)
        try writer["StringValue"].write(value.stringValue)
    }
}

extension SQSClientTypes.SendMessageBatchRequestEntry {

    static func write(value: SQSClientTypes.SendMessageBatchRequestEntry?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["DelaySeconds"].write(value.delaySeconds)
        try writer["Id"].write(value.id)
        try writer["MessageAttributes"].writeMap(value.messageAttributes, valueWritingClosure: SQSClientTypes.MessageAttributeValue.write(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: true)
        try writer["MessageBody"].write(value.messageBody)
        try writer["MessageDeduplicationId"].write(value.messageDeduplicationId)
        try writer["MessageGroupId"].write(value.messageGroupId)
        try writer["MessageSystemAttributes"].writeMap(value.messageSystemAttributes, valueWritingClosure: SQSClientTypes.MessageSystemAttributeValue.write(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: true)
    }
}

public enum SQSClientTypes {}
