// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension S3ControlClient {
    /// Paginate over `[ListAccessPointsOutput]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[ListAccessPointsInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `ListAccessPointsOutput`
    public func listAccessPointsPaginated(input: ListAccessPointsInput) -> ClientRuntime.PaginatorSequence<ListAccessPointsInput, ListAccessPointsOutput> {
        return ClientRuntime.PaginatorSequence<ListAccessPointsInput, ListAccessPointsOutput>(input: input, inputKey: \ListAccessPointsInput.nextToken, outputKey: \ListAccessPointsOutput.nextToken, paginationFunction: self.listAccessPoints(input:))
    }
}

extension ListAccessPointsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListAccessPointsInput {
        return ListAccessPointsInput(
            accountId: self.accountId,
            bucket: self.bucket,
            maxResults: self.maxResults,
            nextToken: token
        )}
}
extension S3ControlClient {
    /// Paginate over `[ListAccessPointsForObjectLambdaOutput]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[ListAccessPointsForObjectLambdaInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `ListAccessPointsForObjectLambdaOutput`
    public func listAccessPointsForObjectLambdaPaginated(input: ListAccessPointsForObjectLambdaInput) -> ClientRuntime.PaginatorSequence<ListAccessPointsForObjectLambdaInput, ListAccessPointsForObjectLambdaOutput> {
        return ClientRuntime.PaginatorSequence<ListAccessPointsForObjectLambdaInput, ListAccessPointsForObjectLambdaOutput>(input: input, inputKey: \ListAccessPointsForObjectLambdaInput.nextToken, outputKey: \ListAccessPointsForObjectLambdaOutput.nextToken, paginationFunction: self.listAccessPointsForObjectLambda(input:))
    }
}

extension ListAccessPointsForObjectLambdaInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListAccessPointsForObjectLambdaInput {
        return ListAccessPointsForObjectLambdaInput(
            accountId: self.accountId,
            maxResults: self.maxResults,
            nextToken: token
        )}
}

extension PaginatorSequence where Input == ListAccessPointsForObjectLambdaInput, Output == ListAccessPointsForObjectLambdaOutput {
    /// This paginator transforms the `AsyncSequence` returned by `listAccessPointsForObjectLambdaPaginated`
    /// to access the nested member `[S3ControlClientTypes.ObjectLambdaAccessPoint]`
    /// - Returns: `[S3ControlClientTypes.ObjectLambdaAccessPoint]`
    public func objectLambdaAccessPointList() async throws -> [S3ControlClientTypes.ObjectLambdaAccessPoint] {
        return try await self.asyncCompactMap { item in item.objectLambdaAccessPointList }
    }
}
extension S3ControlClient {
    /// Paginate over `[ListJobsOutput]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[ListJobsInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `ListJobsOutput`
    public func listJobsPaginated(input: ListJobsInput) -> ClientRuntime.PaginatorSequence<ListJobsInput, ListJobsOutput> {
        return ClientRuntime.PaginatorSequence<ListJobsInput, ListJobsOutput>(input: input, inputKey: \ListJobsInput.nextToken, outputKey: \ListJobsOutput.nextToken, paginationFunction: self.listJobs(input:))
    }
}

extension ListJobsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListJobsInput {
        return ListJobsInput(
            accountId: self.accountId,
            jobStatuses: self.jobStatuses,
            maxResults: self.maxResults,
            nextToken: token
        )}
}
extension S3ControlClient {
    /// Paginate over `[ListMultiRegionAccessPointsOutput]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[ListMultiRegionAccessPointsInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `ListMultiRegionAccessPointsOutput`
    public func listMultiRegionAccessPointsPaginated(input: ListMultiRegionAccessPointsInput) -> ClientRuntime.PaginatorSequence<ListMultiRegionAccessPointsInput, ListMultiRegionAccessPointsOutput> {
        return ClientRuntime.PaginatorSequence<ListMultiRegionAccessPointsInput, ListMultiRegionAccessPointsOutput>(input: input, inputKey: \ListMultiRegionAccessPointsInput.nextToken, outputKey: \ListMultiRegionAccessPointsOutput.nextToken, paginationFunction: self.listMultiRegionAccessPoints(input:))
    }
}

extension ListMultiRegionAccessPointsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListMultiRegionAccessPointsInput {
        return ListMultiRegionAccessPointsInput(
            accountId: self.accountId,
            maxResults: self.maxResults,
            nextToken: token
        )}
}
extension S3ControlClient {
    /// Paginate over `[ListRegionalBucketsOutput]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[ListRegionalBucketsInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `ListRegionalBucketsOutput`
    public func listRegionalBucketsPaginated(input: ListRegionalBucketsInput) -> ClientRuntime.PaginatorSequence<ListRegionalBucketsInput, ListRegionalBucketsOutput> {
        return ClientRuntime.PaginatorSequence<ListRegionalBucketsInput, ListRegionalBucketsOutput>(input: input, inputKey: \ListRegionalBucketsInput.nextToken, outputKey: \ListRegionalBucketsOutput.nextToken, paginationFunction: self.listRegionalBuckets(input:))
    }
}

extension ListRegionalBucketsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListRegionalBucketsInput {
        return ListRegionalBucketsInput(
            accountId: self.accountId,
            maxResults: self.maxResults,
            nextToken: token,
            outpostId: self.outpostId
        )}
}
extension S3ControlClient {
    /// Paginate over `[ListStorageLensConfigurationsOutput]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[ListStorageLensConfigurationsInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `ListStorageLensConfigurationsOutput`
    public func listStorageLensConfigurationsPaginated(input: ListStorageLensConfigurationsInput) -> ClientRuntime.PaginatorSequence<ListStorageLensConfigurationsInput, ListStorageLensConfigurationsOutput> {
        return ClientRuntime.PaginatorSequence<ListStorageLensConfigurationsInput, ListStorageLensConfigurationsOutput>(input: input, inputKey: \ListStorageLensConfigurationsInput.nextToken, outputKey: \ListStorageLensConfigurationsOutput.nextToken, paginationFunction: self.listStorageLensConfigurations(input:))
    }
}

extension ListStorageLensConfigurationsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListStorageLensConfigurationsInput {
        return ListStorageLensConfigurationsInput(
            accountId: self.accountId,
            nextToken: token
        )}
}
