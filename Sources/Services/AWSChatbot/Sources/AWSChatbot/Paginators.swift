//
// Copyright Amazon.com Inc. or its affiliates.
// All Rights Reserved.
//
// SPDX-License-Identifier: Apache-2.0
//

// Code generated by smithy-swift-codegen. DO NOT EDIT!

import protocol ClientRuntime.PaginateToken
import struct ClientRuntime.PaginatorSequence

extension ChatbotClient {
    /// Paginate over `[DescribeChimeWebhookConfigurationsOutput]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[DescribeChimeWebhookConfigurationsInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `DescribeChimeWebhookConfigurationsOutput`
    public func describeChimeWebhookConfigurationsPaginated(input: DescribeChimeWebhookConfigurationsInput) -> ClientRuntime.PaginatorSequence<DescribeChimeWebhookConfigurationsInput, DescribeChimeWebhookConfigurationsOutput> {
        return ClientRuntime.PaginatorSequence<DescribeChimeWebhookConfigurationsInput, DescribeChimeWebhookConfigurationsOutput>(input: input, inputKey: \.nextToken, outputKey: \.nextToken, paginationFunction: self.describeChimeWebhookConfigurations(input:))
    }
}

extension DescribeChimeWebhookConfigurationsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> DescribeChimeWebhookConfigurationsInput {
        return DescribeChimeWebhookConfigurationsInput(
            chatConfigurationArn: self.chatConfigurationArn,
            maxResults: self.maxResults,
            nextToken: token
        )}
}

extension PaginatorSequence where OperationStackInput == DescribeChimeWebhookConfigurationsInput, OperationStackOutput == DescribeChimeWebhookConfigurationsOutput {
    /// This paginator transforms the `AsyncSequence` returned by `describeChimeWebhookConfigurationsPaginated`
    /// to access the nested member `[ChatbotClientTypes.ChimeWebhookConfiguration]`
    /// - Returns: `[ChatbotClientTypes.ChimeWebhookConfiguration]`
    public func webhookConfigurations() async throws -> [ChatbotClientTypes.ChimeWebhookConfiguration] {
        return try await self.asyncCompactMap { item in item.webhookConfigurations }
    }
}
extension ChatbotClient {
    /// Paginate over `[DescribeSlackChannelConfigurationsOutput]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[DescribeSlackChannelConfigurationsInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `DescribeSlackChannelConfigurationsOutput`
    public func describeSlackChannelConfigurationsPaginated(input: DescribeSlackChannelConfigurationsInput) -> ClientRuntime.PaginatorSequence<DescribeSlackChannelConfigurationsInput, DescribeSlackChannelConfigurationsOutput> {
        return ClientRuntime.PaginatorSequence<DescribeSlackChannelConfigurationsInput, DescribeSlackChannelConfigurationsOutput>(input: input, inputKey: \.nextToken, outputKey: \.nextToken, paginationFunction: self.describeSlackChannelConfigurations(input:))
    }
}

extension DescribeSlackChannelConfigurationsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> DescribeSlackChannelConfigurationsInput {
        return DescribeSlackChannelConfigurationsInput(
            chatConfigurationArn: self.chatConfigurationArn,
            maxResults: self.maxResults,
            nextToken: token
        )}
}

extension PaginatorSequence where OperationStackInput == DescribeSlackChannelConfigurationsInput, OperationStackOutput == DescribeSlackChannelConfigurationsOutput {
    /// This paginator transforms the `AsyncSequence` returned by `describeSlackChannelConfigurationsPaginated`
    /// to access the nested member `[ChatbotClientTypes.SlackChannelConfiguration]`
    /// - Returns: `[ChatbotClientTypes.SlackChannelConfiguration]`
    public func slackChannelConfigurations() async throws -> [ChatbotClientTypes.SlackChannelConfiguration] {
        return try await self.asyncCompactMap { item in item.slackChannelConfigurations }
    }
}
extension ChatbotClient {
    /// Paginate over `[DescribeSlackUserIdentitiesOutput]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[DescribeSlackUserIdentitiesInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `DescribeSlackUserIdentitiesOutput`
    public func describeSlackUserIdentitiesPaginated(input: DescribeSlackUserIdentitiesInput) -> ClientRuntime.PaginatorSequence<DescribeSlackUserIdentitiesInput, DescribeSlackUserIdentitiesOutput> {
        return ClientRuntime.PaginatorSequence<DescribeSlackUserIdentitiesInput, DescribeSlackUserIdentitiesOutput>(input: input, inputKey: \.nextToken, outputKey: \.nextToken, paginationFunction: self.describeSlackUserIdentities(input:))
    }
}

extension DescribeSlackUserIdentitiesInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> DescribeSlackUserIdentitiesInput {
        return DescribeSlackUserIdentitiesInput(
            chatConfigurationArn: self.chatConfigurationArn,
            maxResults: self.maxResults,
            nextToken: token
        )}
}

extension PaginatorSequence where OperationStackInput == DescribeSlackUserIdentitiesInput, OperationStackOutput == DescribeSlackUserIdentitiesOutput {
    /// This paginator transforms the `AsyncSequence` returned by `describeSlackUserIdentitiesPaginated`
    /// to access the nested member `[ChatbotClientTypes.SlackUserIdentity]`
    /// - Returns: `[ChatbotClientTypes.SlackUserIdentity]`
    public func slackUserIdentities() async throws -> [ChatbotClientTypes.SlackUserIdentity] {
        return try await self.asyncCompactMap { item in item.slackUserIdentities }
    }
}
extension ChatbotClient {
    /// Paginate over `[DescribeSlackWorkspacesOutput]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[DescribeSlackWorkspacesInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `DescribeSlackWorkspacesOutput`
    public func describeSlackWorkspacesPaginated(input: DescribeSlackWorkspacesInput) -> ClientRuntime.PaginatorSequence<DescribeSlackWorkspacesInput, DescribeSlackWorkspacesOutput> {
        return ClientRuntime.PaginatorSequence<DescribeSlackWorkspacesInput, DescribeSlackWorkspacesOutput>(input: input, inputKey: \.nextToken, outputKey: \.nextToken, paginationFunction: self.describeSlackWorkspaces(input:))
    }
}

extension DescribeSlackWorkspacesInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> DescribeSlackWorkspacesInput {
        return DescribeSlackWorkspacesInput(
            maxResults: self.maxResults,
            nextToken: token
        )}
}

extension PaginatorSequence where OperationStackInput == DescribeSlackWorkspacesInput, OperationStackOutput == DescribeSlackWorkspacesOutput {
    /// This paginator transforms the `AsyncSequence` returned by `describeSlackWorkspacesPaginated`
    /// to access the nested member `[ChatbotClientTypes.SlackWorkspace]`
    /// - Returns: `[ChatbotClientTypes.SlackWorkspace]`
    public func slackWorkspaces() async throws -> [ChatbotClientTypes.SlackWorkspace] {
        return try await self.asyncCompactMap { item in item.slackWorkspaces }
    }
}
extension ChatbotClient {
    /// Paginate over `[ListMicrosoftTeamsChannelConfigurationsOutput]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[ListMicrosoftTeamsChannelConfigurationsInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `ListMicrosoftTeamsChannelConfigurationsOutput`
    public func listMicrosoftTeamsChannelConfigurationsPaginated(input: ListMicrosoftTeamsChannelConfigurationsInput) -> ClientRuntime.PaginatorSequence<ListMicrosoftTeamsChannelConfigurationsInput, ListMicrosoftTeamsChannelConfigurationsOutput> {
        return ClientRuntime.PaginatorSequence<ListMicrosoftTeamsChannelConfigurationsInput, ListMicrosoftTeamsChannelConfigurationsOutput>(input: input, inputKey: \.nextToken, outputKey: \.nextToken, paginationFunction: self.listMicrosoftTeamsChannelConfigurations(input:))
    }
}

extension ListMicrosoftTeamsChannelConfigurationsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListMicrosoftTeamsChannelConfigurationsInput {
        return ListMicrosoftTeamsChannelConfigurationsInput(
            maxResults: self.maxResults,
            nextToken: token,
            teamId: self.teamId
        )}
}

extension PaginatorSequence where OperationStackInput == ListMicrosoftTeamsChannelConfigurationsInput, OperationStackOutput == ListMicrosoftTeamsChannelConfigurationsOutput {
    /// This paginator transforms the `AsyncSequence` returned by `listMicrosoftTeamsChannelConfigurationsPaginated`
    /// to access the nested member `[ChatbotClientTypes.TeamsChannelConfiguration]`
    /// - Returns: `[ChatbotClientTypes.TeamsChannelConfiguration]`
    public func teamChannelConfigurations() async throws -> [ChatbotClientTypes.TeamsChannelConfiguration] {
        return try await self.asyncCompactMap { item in item.teamChannelConfigurations }
    }
}
extension ChatbotClient {
    /// Paginate over `[ListMicrosoftTeamsConfiguredTeamsOutput]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[ListMicrosoftTeamsConfiguredTeamsInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `ListMicrosoftTeamsConfiguredTeamsOutput`
    public func listMicrosoftTeamsConfiguredTeamsPaginated(input: ListMicrosoftTeamsConfiguredTeamsInput) -> ClientRuntime.PaginatorSequence<ListMicrosoftTeamsConfiguredTeamsInput, ListMicrosoftTeamsConfiguredTeamsOutput> {
        return ClientRuntime.PaginatorSequence<ListMicrosoftTeamsConfiguredTeamsInput, ListMicrosoftTeamsConfiguredTeamsOutput>(input: input, inputKey: \.nextToken, outputKey: \.nextToken, paginationFunction: self.listMicrosoftTeamsConfiguredTeams(input:))
    }
}

extension ListMicrosoftTeamsConfiguredTeamsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListMicrosoftTeamsConfiguredTeamsInput {
        return ListMicrosoftTeamsConfiguredTeamsInput(
            maxResults: self.maxResults,
            nextToken: token
        )}
}

extension PaginatorSequence where OperationStackInput == ListMicrosoftTeamsConfiguredTeamsInput, OperationStackOutput == ListMicrosoftTeamsConfiguredTeamsOutput {
    /// This paginator transforms the `AsyncSequence` returned by `listMicrosoftTeamsConfiguredTeamsPaginated`
    /// to access the nested member `[ChatbotClientTypes.ConfiguredTeam]`
    /// - Returns: `[ChatbotClientTypes.ConfiguredTeam]`
    public func configuredTeams() async throws -> [ChatbotClientTypes.ConfiguredTeam] {
        return try await self.asyncCompactMap { item in item.configuredTeams }
    }
}
extension ChatbotClient {
    /// Paginate over `[ListMicrosoftTeamsUserIdentitiesOutput]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[ListMicrosoftTeamsUserIdentitiesInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `ListMicrosoftTeamsUserIdentitiesOutput`
    public func listMicrosoftTeamsUserIdentitiesPaginated(input: ListMicrosoftTeamsUserIdentitiesInput) -> ClientRuntime.PaginatorSequence<ListMicrosoftTeamsUserIdentitiesInput, ListMicrosoftTeamsUserIdentitiesOutput> {
        return ClientRuntime.PaginatorSequence<ListMicrosoftTeamsUserIdentitiesInput, ListMicrosoftTeamsUserIdentitiesOutput>(input: input, inputKey: \.nextToken, outputKey: \.nextToken, paginationFunction: self.listMicrosoftTeamsUserIdentities(input:))
    }
}

extension ListMicrosoftTeamsUserIdentitiesInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListMicrosoftTeamsUserIdentitiesInput {
        return ListMicrosoftTeamsUserIdentitiesInput(
            chatConfigurationArn: self.chatConfigurationArn,
            maxResults: self.maxResults,
            nextToken: token
        )}
}

extension PaginatorSequence where OperationStackInput == ListMicrosoftTeamsUserIdentitiesInput, OperationStackOutput == ListMicrosoftTeamsUserIdentitiesOutput {
    /// This paginator transforms the `AsyncSequence` returned by `listMicrosoftTeamsUserIdentitiesPaginated`
    /// to access the nested member `[ChatbotClientTypes.TeamsUserIdentity]`
    /// - Returns: `[ChatbotClientTypes.TeamsUserIdentity]`
    public func teamsUserIdentities() async throws -> [ChatbotClientTypes.TeamsUserIdentity] {
        return try await self.asyncCompactMap { item in item.teamsUserIdentities }
    }
}
