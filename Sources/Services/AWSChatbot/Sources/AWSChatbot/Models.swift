//
// Copyright Amazon.com Inc. or its affiliates.
// All Rights Reserved.
//
// SPDX-License-Identifier: Apache-2.0
//

// Code generated by smithy-swift-codegen. DO NOT EDIT!

@_spi(SmithyReadWrite) import ClientRuntime
import class SmithyHTTPAPI.HTTPResponse
@_spi(SmithyReadWrite) import class SmithyJSON.Reader
@_spi(SmithyReadWrite) import class SmithyJSON.Writer
import enum ClientRuntime.ErrorFault
import enum SmithyReadWrite.ReaderError
@_spi(SmithyReadWrite) import enum SmithyReadWrite.ReadingClosures
@_spi(SmithyReadWrite) import enum SmithyReadWrite.WritingClosures
import protocol AWSClientRuntime.AWSServiceError
import protocol ClientRuntime.HTTPError
import protocol ClientRuntime.ModeledError
@_spi(SmithyReadWrite) import protocol SmithyReadWrite.SmithyReader
@_spi(SmithyReadWrite) import protocol SmithyReadWrite.SmithyWriter
@_spi(SmithyReadWrite) import struct AWSClientRuntime.RestJSONError
@_spi(UnknownAWSHTTPServiceError) import struct AWSClientRuntime.UnknownAWSHTTPServiceError

extension ChatbotClientTypes {
    /// Preferences related to AWS Chatbot usage in the calling AWS account.
    public struct AccountPreferences {
        /// Turns on training data collection. This helps improve the AWS Chatbot experience by allowing AWS Chatbot to store and use your customer information, such as AWS Chatbot configurations, notifications, user inputs, AWS Chatbot generated responses, and interaction data. This data helps us to continuously improve and develop Artificial Intelligence (AI) technologies. Your data is not shared with any third parties and is protected using sophisticated controls to prevent unauthorized access and misuse. AWS Chatbot does not store or use interactions in chat channels with Amazon Q for training AI technologies for AWS Chatbot.
        public var trainingDataCollectionEnabled: Swift.Bool?
        /// Enables use of a user role requirement in your chat configuration.
        public var userAuthorizationRequired: Swift.Bool?

        public init(
            trainingDataCollectionEnabled: Swift.Bool? = nil,
            userAuthorizationRequired: Swift.Bool? = nil
        )
        {
            self.trainingDataCollectionEnabled = trainingDataCollectionEnabled
            self.userAuthorizationRequired = userAuthorizationRequired
        }
    }

}

extension ChatbotClientTypes {
    /// A key-value pair. A tag consists of a tag key and a tag value. Tag keys and tag values are both required, but tag values can be empty (null) strings. Do not include confidential or sensitive information in this field. For more information, see [User-Defined Tag Restrictions](https://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2/allocation-tag-restrictions.html) in the AWS Billing and Cost Management User Guide.
    public struct Tag {
        /// The key of the tag.
        /// This member is required.
        public var tagKey: Swift.String?
        /// The value of the tag.
        /// This member is required.
        public var tagValue: Swift.String?

        public init(
            tagKey: Swift.String? = nil,
            tagValue: Swift.String? = nil
        )
        {
            self.tagKey = tagKey
            self.tagValue = tagValue
        }
    }

}

extension ChatbotClientTypes {
    /// An AWS Chatbot configuration for Amazon Chime.
    public struct ChimeWebhookConfiguration {
        /// The Amazon Resource Number (ARN) of the ChimeWebhookConfiguration.
        /// This member is required.
        public var chatConfigurationArn: Swift.String?
        /// The name of the configuration.
        public var configurationName: Swift.String?
        /// A user-defined role that AWS Chatbot assumes. This is not the service-linked role. For more information, see [IAM policies for AWS Chatbot](https://docs.aws.amazon.com/chatbot/latest/adminguide/chatbot-iam-policies.html) in the AWS Chatbot Administrator Guide.
        /// This member is required.
        public var iamRoleArn: Swift.String?
        /// Logging levels include ERROR, INFO, or NONE.
        public var loggingLevel: Swift.String?
        /// The Amazon Resource Names (ARNs) of the SNS topics that deliver notifications to AWS Chatbot.
        /// This member is required.
        public var snsTopicArns: [Swift.String]?
        /// A map of tags assigned to a resource. A tag is a string-to-string map of key-value pairs.
        public var tags: [ChatbotClientTypes.Tag]?
        /// A description of the webhook. We recommend using the convention RoomName/WebhookName. For more information, see [Tutorial: Get started with Amazon Chime](https://docs.aws.amazon.com/chatbot/latest/adminguide/chime-setup.html) in the AWS Chatbot Administrator Guide.
        /// This member is required.
        public var webhookDescription: Swift.String?

        public init(
            chatConfigurationArn: Swift.String? = nil,
            configurationName: Swift.String? = nil,
            iamRoleArn: Swift.String? = nil,
            loggingLevel: Swift.String? = nil,
            snsTopicArns: [Swift.String]? = nil,
            tags: [ChatbotClientTypes.Tag]? = nil,
            webhookDescription: Swift.String? = nil
        )
        {
            self.chatConfigurationArn = chatConfigurationArn
            self.configurationName = configurationName
            self.iamRoleArn = iamRoleArn
            self.loggingLevel = loggingLevel
            self.snsTopicArns = snsTopicArns
            self.tags = tags
            self.webhookDescription = webhookDescription
        }
    }

}

extension ChatbotClientTypes.ChimeWebhookConfiguration: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ChimeWebhookConfiguration(chatConfigurationArn: \(Swift.String(describing: chatConfigurationArn)), configurationName: \(Swift.String(describing: configurationName)), iamRoleArn: \(Swift.String(describing: iamRoleArn)), loggingLevel: \(Swift.String(describing: loggingLevel)), snsTopicArns: \(Swift.String(describing: snsTopicArns)), tags: \(Swift.String(describing: tags)), webhookDescription: \"CONTENT_REDACTED\")"}
}

extension ChatbotClientTypes {
    /// A Microsoft Teams team that is authorized with AWS Chatbot.
    public struct ConfiguredTeam {
        /// The ID of the Microsoft Teams authorized with AWS Chatbot. To get the team ID, you must perform the initial authorization flow with Microsoft Teams in the AWS Chatbot console. Then you can copy and paste the team ID from the console. For more information, see [Step 1: Configure a Microsoft Teams client](https://docs.aws.amazon.com/chatbot/latest/adminguide/teams-setup.html#teams-client-setup) in the AWS Chatbot Administrator Guide.
        /// This member is required.
        public var teamId: Swift.String?
        /// The name of the Microsoft Teams Team.
        public var teamName: Swift.String?
        /// The ID of the Microsoft Teams tenant.
        /// This member is required.
        public var tenantId: Swift.String?

        public init(
            teamId: Swift.String? = nil,
            teamName: Swift.String? = nil,
            tenantId: Swift.String? = nil
        )
        {
            self.teamId = teamId
            self.teamName = teamName
            self.tenantId = tenantId
        }
    }

}

/// There was an issue processing your request.
public struct ConflictException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ConflictException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// We canâ€™t process your request right now because of a server issue. Try again later.
public struct CreateChimeWebhookConfigurationException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "CreateChimeWebhookConfigurationException" }
    public static var fault: ClientRuntime.ErrorFault { .server }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// Your request input doesn't meet the constraints required by AWS Chatbot.
public struct InvalidParameterException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidParameterException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// Your request input doesn't meet the constraints required by AWS Chatbot.
public struct InvalidRequestException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidRequestException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// You have exceeded a service limit for AWS Chatbot.
public struct LimitExceededException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "LimitExceededException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

public struct CreateChimeWebhookConfigurationInput {
    /// The name of the configuration.
    /// This member is required.
    public var configurationName: Swift.String?
    /// A user-defined role that AWS Chatbot assumes. This is not the service-linked role. For more information, see [IAM policies for AWS Chatbot](https://docs.aws.amazon.com/chatbot/latest/adminguide/chatbot-iam-policies.html) in the AWS Chatbot Administrator Guide.
    /// This member is required.
    public var iamRoleArn: Swift.String?
    /// Logging levels include ERROR, INFO, or NONE.
    public var loggingLevel: Swift.String?
    /// The Amazon Resource Names (ARNs) of the SNS topics that deliver notifications to AWS Chatbot.
    /// This member is required.
    public var snsTopicArns: [Swift.String]?
    /// A map of tags assigned to a resource. A tag is a string-to-string map of key-value pairs.
    public var tags: [ChatbotClientTypes.Tag]?
    /// A description of the webhook. We recommend using the convention RoomName/WebhookName. For more information, see [Tutorial: Get started with Amazon Chime](https://docs.aws.amazon.com/chatbot/latest/adminguide/chime-setup.html) in the AWS Chatbot Administrator Guide.
    /// This member is required.
    public var webhookDescription: Swift.String?
    /// The URL for the Amazon Chime webhook.
    /// This member is required.
    public var webhookUrl: Swift.String?

    public init(
        configurationName: Swift.String? = nil,
        iamRoleArn: Swift.String? = nil,
        loggingLevel: Swift.String? = nil,
        snsTopicArns: [Swift.String]? = nil,
        tags: [ChatbotClientTypes.Tag]? = nil,
        webhookDescription: Swift.String? = nil,
        webhookUrl: Swift.String? = nil
    )
    {
        self.configurationName = configurationName
        self.iamRoleArn = iamRoleArn
        self.loggingLevel = loggingLevel
        self.snsTopicArns = snsTopicArns
        self.tags = tags
        self.webhookDescription = webhookDescription
        self.webhookUrl = webhookUrl
    }
}

extension CreateChimeWebhookConfigurationInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateChimeWebhookConfigurationInput(configurationName: \(Swift.String(describing: configurationName)), iamRoleArn: \(Swift.String(describing: iamRoleArn)), loggingLevel: \(Swift.String(describing: loggingLevel)), snsTopicArns: \(Swift.String(describing: snsTopicArns)), tags: \(Swift.String(describing: tags)), webhookDescription: \"CONTENT_REDACTED\", webhookUrl: \"CONTENT_REDACTED\")"}
}

public struct CreateChimeWebhookConfigurationOutput {
    /// An Amazon Chime webhook configuration.
    public var webhookConfiguration: ChatbotClientTypes.ChimeWebhookConfiguration?

    public init(
        webhookConfiguration: ChatbotClientTypes.ChimeWebhookConfiguration? = nil
    )
    {
        self.webhookConfiguration = webhookConfiguration
    }
}

/// We canâ€™t process your request right now because of a server issue. Try again later.
public struct CreateTeamsChannelConfigurationException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "CreateTeamsChannelConfigurationException" }
    public static var fault: ClientRuntime.ErrorFault { .server }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

public struct CreateMicrosoftTeamsChannelConfigurationInput {
    /// The ID of the Microsoft Teams channel.
    /// This member is required.
    public var channelId: Swift.String?
    /// The name of the Microsoft Teams channel.
    public var channelName: Swift.String?
    /// The name of the configuration.
    /// This member is required.
    public var configurationName: Swift.String?
    /// The list of IAM policy ARNs that are applied as channel guardrails. The AWS managed AdministratorAccess policy is applied by default if this is not set.
    public var guardrailPolicyArns: [Swift.String]?
    /// A user-defined role that AWS Chatbot assumes. This is not the service-linked role. For more information, see [IAM policies for AWS Chatbot](https://docs.aws.amazon.com/chatbot/latest/adminguide/chatbot-iam-policies.html) in the AWS Chatbot Administrator Guide.
    /// This member is required.
    public var iamRoleArn: Swift.String?
    /// Logging levels include ERROR, INFO, or NONE.
    public var loggingLevel: Swift.String?
    /// The Amazon Resource Names (ARNs) of the SNS topics that deliver notifications to AWS Chatbot.
    public var snsTopicArns: [Swift.String]?
    /// A map of tags assigned to a resource. A tag is a string-to-string map of key-value pairs.
    public var tags: [ChatbotClientTypes.Tag]?
    /// The ID of the Microsoft Teams authorized with AWS Chatbot. To get the team ID, you must perform the initial authorization flow with Microsoft Teams in the AWS Chatbot console. Then you can copy and paste the team ID from the console. For more information, see [Step 1: Configure a Microsoft Teams client](https://docs.aws.amazon.com/chatbot/latest/adminguide/teams-setup.html#teams-client-setup) in the AWS Chatbot Administrator Guide.
    /// This member is required.
    public var teamId: Swift.String?
    /// The name of the Microsoft Teams Team.
    public var teamName: Swift.String?
    /// The ID of the Microsoft Teams tenant.
    /// This member is required.
    public var tenantId: Swift.String?
    /// Enables use of a user role requirement in your chat configuration.
    public var userAuthorizationRequired: Swift.Bool?

    public init(
        channelId: Swift.String? = nil,
        channelName: Swift.String? = nil,
        configurationName: Swift.String? = nil,
        guardrailPolicyArns: [Swift.String]? = nil,
        iamRoleArn: Swift.String? = nil,
        loggingLevel: Swift.String? = nil,
        snsTopicArns: [Swift.String]? = nil,
        tags: [ChatbotClientTypes.Tag]? = nil,
        teamId: Swift.String? = nil,
        teamName: Swift.String? = nil,
        tenantId: Swift.String? = nil,
        userAuthorizationRequired: Swift.Bool? = nil
    )
    {
        self.channelId = channelId
        self.channelName = channelName
        self.configurationName = configurationName
        self.guardrailPolicyArns = guardrailPolicyArns
        self.iamRoleArn = iamRoleArn
        self.loggingLevel = loggingLevel
        self.snsTopicArns = snsTopicArns
        self.tags = tags
        self.teamId = teamId
        self.teamName = teamName
        self.tenantId = tenantId
        self.userAuthorizationRequired = userAuthorizationRequired
    }
}

extension CreateMicrosoftTeamsChannelConfigurationInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateMicrosoftTeamsChannelConfigurationInput(channelId: \(Swift.String(describing: channelId)), configurationName: \(Swift.String(describing: configurationName)), guardrailPolicyArns: \(Swift.String(describing: guardrailPolicyArns)), iamRoleArn: \(Swift.String(describing: iamRoleArn)), loggingLevel: \(Swift.String(describing: loggingLevel)), snsTopicArns: \(Swift.String(describing: snsTopicArns)), tags: \(Swift.String(describing: tags)), teamId: \(Swift.String(describing: teamId)), tenantId: \(Swift.String(describing: tenantId)), userAuthorizationRequired: \(Swift.String(describing: userAuthorizationRequired)), channelName: \"CONTENT_REDACTED\", teamName: \"CONTENT_REDACTED\")"}
}

extension ChatbotClientTypes {
    /// An AWS Chatbot configuration for Microsoft Teams.
    public struct TeamsChannelConfiguration {
        /// The ID of the Microsoft Teams channel.
        /// This member is required.
        public var channelId: Swift.String?
        /// The name of the Microsoft Teams channel.
        public var channelName: Swift.String?
        /// The Amazon Resource Name (ARN) of the MicrosoftTeamsChannelConfiguration associated with the user identity to delete.
        /// This member is required.
        public var chatConfigurationArn: Swift.String?
        /// The name of the configuration.
        public var configurationName: Swift.String?
        /// The list of IAM policy ARNs that are applied as channel guardrails. The AWS managed AdministratorAccess policy is applied by default if this is not set.
        public var guardrailPolicyArns: [Swift.String]?
        /// A user-defined role that AWS Chatbot assumes. This is not the service-linked role. For more information, see [IAM policies for AWS Chatbot](https://docs.aws.amazon.com/chatbot/latest/adminguide/chatbot-iam-policies.html) in the AWS Chatbot Administrator Guide.
        /// This member is required.
        public var iamRoleArn: Swift.String?
        /// Logging levels include ERROR, INFO, or NONE.
        public var loggingLevel: Swift.String?
        /// The Amazon Resource Names (ARNs) of the SNS topics that deliver notifications to AWS Chatbot.
        /// This member is required.
        public var snsTopicArns: [Swift.String]?
        /// A map of tags assigned to a resource. A tag is a string-to-string map of key-value pairs.
        public var tags: [ChatbotClientTypes.Tag]?
        /// The ID of the Microsoft Teams authorized with AWS Chatbot. To get the team ID, you must perform the initial authorization flow with Microsoft Teams in the AWS Chatbot console. Then you can copy and paste the team ID from the console. For more information, see [Step 1: Configure a Microsoft Teams client](https://docs.aws.amazon.com/chatbot/latest/adminguide/teams-setup.html#teams-client-setup) in the AWS Chatbot Administrator Guide.
        /// This member is required.
        public var teamId: Swift.String?
        /// The name of the Microsoft Teams Team.
        public var teamName: Swift.String?
        /// The ID of the Microsoft Teams tenant.
        /// This member is required.
        public var tenantId: Swift.String?
        /// Enables use of a user role requirement in your chat configuration.
        public var userAuthorizationRequired: Swift.Bool?

        public init(
            channelId: Swift.String? = nil,
            channelName: Swift.String? = nil,
            chatConfigurationArn: Swift.String? = nil,
            configurationName: Swift.String? = nil,
            guardrailPolicyArns: [Swift.String]? = nil,
            iamRoleArn: Swift.String? = nil,
            loggingLevel: Swift.String? = nil,
            snsTopicArns: [Swift.String]? = nil,
            tags: [ChatbotClientTypes.Tag]? = nil,
            teamId: Swift.String? = nil,
            teamName: Swift.String? = nil,
            tenantId: Swift.String? = nil,
            userAuthorizationRequired: Swift.Bool? = nil
        )
        {
            self.channelId = channelId
            self.channelName = channelName
            self.chatConfigurationArn = chatConfigurationArn
            self.configurationName = configurationName
            self.guardrailPolicyArns = guardrailPolicyArns
            self.iamRoleArn = iamRoleArn
            self.loggingLevel = loggingLevel
            self.snsTopicArns = snsTopicArns
            self.tags = tags
            self.teamId = teamId
            self.teamName = teamName
            self.tenantId = tenantId
            self.userAuthorizationRequired = userAuthorizationRequired
        }
    }

}

extension ChatbotClientTypes.TeamsChannelConfiguration: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "TeamsChannelConfiguration(channelId: \(Swift.String(describing: channelId)), chatConfigurationArn: \(Swift.String(describing: chatConfigurationArn)), configurationName: \(Swift.String(describing: configurationName)), guardrailPolicyArns: \(Swift.String(describing: guardrailPolicyArns)), iamRoleArn: \(Swift.String(describing: iamRoleArn)), loggingLevel: \(Swift.String(describing: loggingLevel)), snsTopicArns: \(Swift.String(describing: snsTopicArns)), tags: \(Swift.String(describing: tags)), teamId: \(Swift.String(describing: teamId)), tenantId: \(Swift.String(describing: tenantId)), userAuthorizationRequired: \(Swift.String(describing: userAuthorizationRequired)), channelName: \"CONTENT_REDACTED\", teamName: \"CONTENT_REDACTED\")"}
}

public struct CreateMicrosoftTeamsChannelConfigurationOutput {
    /// The configuration for a Microsoft Teams channel configured with AWS Chatbot.
    public var channelConfiguration: ChatbotClientTypes.TeamsChannelConfiguration?

    public init(
        channelConfiguration: ChatbotClientTypes.TeamsChannelConfiguration? = nil
    )
    {
        self.channelConfiguration = channelConfiguration
    }
}

/// We canâ€™t process your request right now because of a server issue. Try again later.
public struct CreateSlackChannelConfigurationException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "CreateSlackChannelConfigurationException" }
    public static var fault: ClientRuntime.ErrorFault { .server }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

public struct CreateSlackChannelConfigurationInput {
    /// The name of the configuration.
    /// This member is required.
    public var configurationName: Swift.String?
    /// The list of IAM policy ARNs that are applied as channel guardrails. The AWS managed AdministratorAccess policy is applied by default if this is not set.
    public var guardrailPolicyArns: [Swift.String]?
    /// A user-defined role that AWS Chatbot assumes. This is not the service-linked role. For more information, see [IAM policies for AWS Chatbot](https://docs.aws.amazon.com/chatbot/latest/adminguide/chatbot-iam-policies.html) in the AWS Chatbot Administrator Guide.
    /// This member is required.
    public var iamRoleArn: Swift.String?
    /// Logging levels include ERROR, INFO, or NONE.
    public var loggingLevel: Swift.String?
    /// The ID of the Slack channel. To get this ID, open Slack, right click on the channel name in the left pane, then choose Copy Link. The channel ID is the 9-character string at the end of the URL. For example, ABCBBLZZZ.
    /// This member is required.
    public var slackChannelId: Swift.String?
    /// The name of the Slack channel.
    public var slackChannelName: Swift.String?
    /// The ID of the Slack workspace authorized with AWS Chatbot.
    /// This member is required.
    public var slackTeamId: Swift.String?
    /// The Amazon Resource Names (ARNs) of the SNS topics that deliver notifications to AWS Chatbot.
    public var snsTopicArns: [Swift.String]?
    /// A map of tags assigned to a resource. A tag is a string-to-string map of key-value pairs.
    public var tags: [ChatbotClientTypes.Tag]?
    /// Enables use of a user role requirement in your chat configuration.
    public var userAuthorizationRequired: Swift.Bool?

    public init(
        configurationName: Swift.String? = nil,
        guardrailPolicyArns: [Swift.String]? = nil,
        iamRoleArn: Swift.String? = nil,
        loggingLevel: Swift.String? = nil,
        slackChannelId: Swift.String? = nil,
        slackChannelName: Swift.String? = nil,
        slackTeamId: Swift.String? = nil,
        snsTopicArns: [Swift.String]? = nil,
        tags: [ChatbotClientTypes.Tag]? = nil,
        userAuthorizationRequired: Swift.Bool? = nil
    )
    {
        self.configurationName = configurationName
        self.guardrailPolicyArns = guardrailPolicyArns
        self.iamRoleArn = iamRoleArn
        self.loggingLevel = loggingLevel
        self.slackChannelId = slackChannelId
        self.slackChannelName = slackChannelName
        self.slackTeamId = slackTeamId
        self.snsTopicArns = snsTopicArns
        self.tags = tags
        self.userAuthorizationRequired = userAuthorizationRequired
    }
}

extension CreateSlackChannelConfigurationInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateSlackChannelConfigurationInput(configurationName: \(Swift.String(describing: configurationName)), guardrailPolicyArns: \(Swift.String(describing: guardrailPolicyArns)), iamRoleArn: \(Swift.String(describing: iamRoleArn)), loggingLevel: \(Swift.String(describing: loggingLevel)), slackChannelId: \(Swift.String(describing: slackChannelId)), slackTeamId: \(Swift.String(describing: slackTeamId)), snsTopicArns: \(Swift.String(describing: snsTopicArns)), tags: \(Swift.String(describing: tags)), userAuthorizationRequired: \(Swift.String(describing: userAuthorizationRequired)), slackChannelName: \"CONTENT_REDACTED\")"}
}

extension ChatbotClientTypes {
    /// An AWS Chatbot configuration for Slack.
    public struct SlackChannelConfiguration {
        /// The Amazon Resource Number (ARN) of the SlackChannelConfiguration.
        /// This member is required.
        public var chatConfigurationArn: Swift.String?
        /// The name of the configuration.
        public var configurationName: Swift.String?
        /// The list of IAM policy ARNs that are applied as channel guardrails. The AWS managed AdministratorAccess policy is applied by default if this is not set.
        public var guardrailPolicyArns: [Swift.String]?
        /// A user-defined role that AWS Chatbot assumes. This is not the service-linked role. For more information, see [IAM policies for AWS Chatbot](https://docs.aws.amazon.com/chatbot/latest/adminguide/chatbot-iam-policies.html) in the AWS Chatbot Administrator Guide.
        /// This member is required.
        public var iamRoleArn: Swift.String?
        /// Logging levels include ERROR, INFO, or NONE.
        public var loggingLevel: Swift.String?
        /// The ID of the Slack channel. To get this ID, open Slack, right click on the channel name in the left pane, then choose Copy Link. The channel ID is the 9-character string at the end of the URL. For example, ABCBBLZZZ.
        /// This member is required.
        public var slackChannelId: Swift.String?
        /// The name of the Slack channel.
        /// This member is required.
        public var slackChannelName: Swift.String?
        /// The ID of the Slack workspace authorized with Amazon Chime.
        /// This member is required.
        public var slackTeamId: Swift.String?
        /// Name of the Slack workspace.
        /// This member is required.
        public var slackTeamName: Swift.String?
        /// The ARNs of the SNS topics that deliver notifications to AWS Chatbot.
        /// This member is required.
        public var snsTopicArns: [Swift.String]?
        /// A map of tags assigned to a resource. A tag is a string-to-string map of key-value pairs.
        public var tags: [ChatbotClientTypes.Tag]?
        /// Enables use of a user role requirement in your chat configuration.
        public var userAuthorizationRequired: Swift.Bool?

        public init(
            chatConfigurationArn: Swift.String? = nil,
            configurationName: Swift.String? = nil,
            guardrailPolicyArns: [Swift.String]? = nil,
            iamRoleArn: Swift.String? = nil,
            loggingLevel: Swift.String? = nil,
            slackChannelId: Swift.String? = nil,
            slackChannelName: Swift.String? = nil,
            slackTeamId: Swift.String? = nil,
            slackTeamName: Swift.String? = nil,
            snsTopicArns: [Swift.String]? = nil,
            tags: [ChatbotClientTypes.Tag]? = nil,
            userAuthorizationRequired: Swift.Bool? = nil
        )
        {
            self.chatConfigurationArn = chatConfigurationArn
            self.configurationName = configurationName
            self.guardrailPolicyArns = guardrailPolicyArns
            self.iamRoleArn = iamRoleArn
            self.loggingLevel = loggingLevel
            self.slackChannelId = slackChannelId
            self.slackChannelName = slackChannelName
            self.slackTeamId = slackTeamId
            self.slackTeamName = slackTeamName
            self.snsTopicArns = snsTopicArns
            self.tags = tags
            self.userAuthorizationRequired = userAuthorizationRequired
        }
    }

}

extension ChatbotClientTypes.SlackChannelConfiguration: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "SlackChannelConfiguration(chatConfigurationArn: \(Swift.String(describing: chatConfigurationArn)), configurationName: \(Swift.String(describing: configurationName)), guardrailPolicyArns: \(Swift.String(describing: guardrailPolicyArns)), iamRoleArn: \(Swift.String(describing: iamRoleArn)), loggingLevel: \(Swift.String(describing: loggingLevel)), slackChannelId: \(Swift.String(describing: slackChannelId)), slackTeamId: \(Swift.String(describing: slackTeamId)), slackTeamName: \(Swift.String(describing: slackTeamName)), snsTopicArns: \(Swift.String(describing: snsTopicArns)), tags: \(Swift.String(describing: tags)), userAuthorizationRequired: \(Swift.String(describing: userAuthorizationRequired)), slackChannelName: \"CONTENT_REDACTED\")"}
}

public struct CreateSlackChannelConfigurationOutput {
    /// The configuration for a Slack channel configured with AWS Chatbot.
    public var channelConfiguration: ChatbotClientTypes.SlackChannelConfiguration?

    public init(
        channelConfiguration: ChatbotClientTypes.SlackChannelConfiguration? = nil
    )
    {
        self.channelConfiguration = channelConfiguration
    }
}

/// We canâ€™t process your request right now because of a server issue. Try again later.
public struct DeleteChimeWebhookConfigurationException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "DeleteChimeWebhookConfigurationException" }
    public static var fault: ClientRuntime.ErrorFault { .server }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// We were unable to find the resource for your request
public struct ResourceNotFoundException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ResourceNotFoundException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

public struct DeleteChimeWebhookConfigurationInput {
    /// The Amazon Resource Name (ARN) of the ChimeWebhookConfiguration to delete.
    /// This member is required.
    public var chatConfigurationArn: Swift.String?

    public init(
        chatConfigurationArn: Swift.String? = nil
    )
    {
        self.chatConfigurationArn = chatConfigurationArn
    }
}

public struct DeleteChimeWebhookConfigurationOutput {

    public init() { }
}

/// We canâ€™t process your request right now because of a server issue. Try again later.
public struct DeleteTeamsChannelConfigurationException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "DeleteTeamsChannelConfigurationException" }
    public static var fault: ClientRuntime.ErrorFault { .server }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

public struct DeleteMicrosoftTeamsChannelConfigurationInput {
    /// The Amazon Resource Name (ARN) of the MicrosoftTeamsChannelConfiguration associated with the user identity to delete.
    /// This member is required.
    public var chatConfigurationArn: Swift.String?

    public init(
        chatConfigurationArn: Swift.String? = nil
    )
    {
        self.chatConfigurationArn = chatConfigurationArn
    }
}

public struct DeleteMicrosoftTeamsChannelConfigurationOutput {

    public init() { }
}

/// We canâ€™t process your request right now because of a server issue. Try again later.
public struct DeleteTeamsConfiguredTeamException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "DeleteTeamsConfiguredTeamException" }
    public static var fault: ClientRuntime.ErrorFault { .server }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

public struct DeleteMicrosoftTeamsConfiguredTeamInput {
    /// The ID of the Microsoft Teams team authorized with AWS Chatbot. To get the team ID, you must perform the initial authorization flow with Microsoft Teams in the AWS Chatbot console. Then you can copy and paste the team ID from the console. For more information, see [Step 1: Configure a Microsoft Teams client](https://docs.aws.amazon.com/chatbot/latest/adminguide/teams-setup.html#teams-client-setup) in the AWS Chatbot Administrator Guide.
    /// This member is required.
    public var teamId: Swift.String?

    public init(
        teamId: Swift.String? = nil
    )
    {
        self.teamId = teamId
    }
}

public struct DeleteMicrosoftTeamsConfiguredTeamOutput {

    public init() { }
}

/// We canâ€™t process your request right now because of a server issue. Try again later.
public struct DeleteMicrosoftTeamsUserIdentityException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "DeleteMicrosoftTeamsUserIdentityException" }
    public static var fault: ClientRuntime.ErrorFault { .server }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

public struct DeleteMicrosoftTeamsUserIdentityInput {
    /// The ARN of the MicrosoftTeamsChannelConfiguration associated with the user identity to delete.
    /// This member is required.
    public var chatConfigurationArn: Swift.String?
    /// The Microsoft Teams user ID.
    /// This member is required.
    public var userId: Swift.String?

    public init(
        chatConfigurationArn: Swift.String? = nil,
        userId: Swift.String? = nil
    )
    {
        self.chatConfigurationArn = chatConfigurationArn
        self.userId = userId
    }
}

public struct DeleteMicrosoftTeamsUserIdentityOutput {

    public init() { }
}

/// We canâ€™t process your request right now because of a server issue. Try again later.
public struct DeleteSlackChannelConfigurationException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "DeleteSlackChannelConfigurationException" }
    public static var fault: ClientRuntime.ErrorFault { .server }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

public struct DeleteSlackChannelConfigurationInput {
    /// The Amazon Resource Name (ARN) of the SlackChannelConfiguration to delete.
    /// This member is required.
    public var chatConfigurationArn: Swift.String?

    public init(
        chatConfigurationArn: Swift.String? = nil
    )
    {
        self.chatConfigurationArn = chatConfigurationArn
    }
}

public struct DeleteSlackChannelConfigurationOutput {

    public init() { }
}

/// We canâ€™t process your request right now because of a server issue. Try again later.
public struct DeleteSlackUserIdentityException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "DeleteSlackUserIdentityException" }
    public static var fault: ClientRuntime.ErrorFault { .server }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

public struct DeleteSlackUserIdentityInput {
    /// The ARN of the SlackChannelConfiguration associated with the user identity to delete.
    /// This member is required.
    public var chatConfigurationArn: Swift.String?
    /// The ID of the Slack workspace authorized with AWS Chatbot.
    /// This member is required.
    public var slackTeamId: Swift.String?
    /// The ID of the user in Slack
    /// This member is required.
    public var slackUserId: Swift.String?

    public init(
        chatConfigurationArn: Swift.String? = nil,
        slackTeamId: Swift.String? = nil,
        slackUserId: Swift.String? = nil
    )
    {
        self.chatConfigurationArn = chatConfigurationArn
        self.slackTeamId = slackTeamId
        self.slackUserId = slackUserId
    }
}

public struct DeleteSlackUserIdentityOutput {

    public init() { }
}

/// There was an issue deleting your Slack workspace.
public struct DeleteSlackWorkspaceAuthorizationFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "DeleteSlackWorkspaceAuthorizationFault" }
    public static var fault: ClientRuntime.ErrorFault { .server }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

public struct DeleteSlackWorkspaceAuthorizationInput {
    /// The ID of the Slack workspace authorized with AWS Chatbot.
    /// This member is required.
    public var slackTeamId: Swift.String?

    public init(
        slackTeamId: Swift.String? = nil
    )
    {
        self.slackTeamId = slackTeamId
    }
}

public struct DeleteSlackWorkspaceAuthorizationOutput {

    public init() { }
}

/// We canâ€™t process your request right now because of a server issue. Try again later.
public struct DescribeChimeWebhookConfigurationsException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "DescribeChimeWebhookConfigurationsException" }
    public static var fault: ClientRuntime.ErrorFault { .server }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

public struct DescribeChimeWebhookConfigurationsInput {
    /// An optional Amazon Resource Number (ARN) of a ChimeWebhookConfiguration to describe.
    public var chatConfigurationArn: Swift.String?
    /// The maximum number of results to include in the response. If more results exist than the specified MaxResults value, a token is included in the response so that the remaining results can be retrieved.
    public var maxResults: Swift.Int?
    /// An optional token returned from a prior request. Use this token for pagination of results from this action. If this parameter is specified, the response includes only results beyond the token, up to the value specified by MaxResults.
    public var nextToken: Swift.String?

    public init(
        chatConfigurationArn: Swift.String? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.chatConfigurationArn = chatConfigurationArn
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

public struct DescribeChimeWebhookConfigurationsOutput {
    /// An optional token returned from a prior request. Use this token for pagination of results from this action. If this parameter is specified, the response includes only results beyond the token, up to the value specified by MaxResults.
    public var nextToken: Swift.String?
    /// A list of Amazon Chime webhooks associated with the account.
    public var webhookConfigurations: [ChatbotClientTypes.ChimeWebhookConfiguration]?

    public init(
        nextToken: Swift.String? = nil,
        webhookConfigurations: [ChatbotClientTypes.ChimeWebhookConfiguration]? = nil
    )
    {
        self.nextToken = nextToken
        self.webhookConfigurations = webhookConfigurations
    }
}

/// We canâ€™t process your request right now because of a server issue. Try again later.
public struct DescribeSlackChannelConfigurationsException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "DescribeSlackChannelConfigurationsException" }
    public static var fault: ClientRuntime.ErrorFault { .server }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

public struct DescribeSlackChannelConfigurationsInput {
    /// An optional Amazon Resource Number (ARN) of a SlackChannelConfiguration to describe.
    public var chatConfigurationArn: Swift.String?
    /// The maximum number of results to include in the response. If more results exist than the specified MaxResults value, a token is included in the response so that the remaining results can be retrieved.
    public var maxResults: Swift.Int?
    /// An optional token returned from a prior request. Use this token for pagination of results from this action. If this parameter is specified, the response includes only results beyond the token, up to the value specified by MaxResults.
    public var nextToken: Swift.String?

    public init(
        chatConfigurationArn: Swift.String? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.chatConfigurationArn = chatConfigurationArn
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

public struct DescribeSlackChannelConfigurationsOutput {
    /// An optional token returned from a prior request. Use this token for pagination of results from this action. If this parameter is specified, the response includes only results beyond the token, up to the value specified by MaxResults.
    public var nextToken: Swift.String?
    /// A list of Slack channel configurations.
    public var slackChannelConfigurations: [ChatbotClientTypes.SlackChannelConfiguration]?

    public init(
        nextToken: Swift.String? = nil,
        slackChannelConfigurations: [ChatbotClientTypes.SlackChannelConfiguration]? = nil
    )
    {
        self.nextToken = nextToken
        self.slackChannelConfigurations = slackChannelConfigurations
    }
}

/// We canâ€™t process your request right now because of a server issue. Try again later.
public struct DescribeSlackUserIdentitiesException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "DescribeSlackUserIdentitiesException" }
    public static var fault: ClientRuntime.ErrorFault { .server }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

public struct DescribeSlackUserIdentitiesInput {
    /// The Amazon Resource Number (ARN) of the SlackChannelConfiguration associated with the user identities to describe.
    public var chatConfigurationArn: Swift.String?
    /// The maximum number of results to include in the response. If more results exist than the specified MaxResults value, a token is included in the response so that the remaining results can be retrieved.
    public var maxResults: Swift.Int?
    /// An optional token returned from a prior request. Use this token for pagination of results from this action. If this parameter is specified, the response includes only results beyond the token, up to the value specified by MaxResults.
    public var nextToken: Swift.String?

    public init(
        chatConfigurationArn: Swift.String? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.chatConfigurationArn = chatConfigurationArn
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

extension ChatbotClientTypes {
    /// Identifes a user level permission for a channel configuration.
    public struct SlackUserIdentity {
        /// The AWS user identity ARN used to associate a Slack user ID with an IAM Role.
        public var awsUserIdentity: Swift.String?
        /// The Amazon Resource Number (ARN) of the SlackChannelConfiguration associated with the user identity to delete.
        /// This member is required.
        public var chatConfigurationArn: Swift.String?
        /// A user-defined role that AWS Chatbot assumes. This is not the service-linked role. For more information, see [IAM policies for AWS Chatbot](https://docs.aws.amazon.com/chatbot/latest/adminguide/chatbot-iam-policies.html) in the AWS Chatbot Administrator Guide.
        /// This member is required.
        public var iamRoleArn: Swift.String?
        /// The ID of the Slack workspace authorized with AWS Chatbot.
        /// This member is required.
        public var slackTeamId: Swift.String?
        /// The ID of the user in Slack
        /// This member is required.
        public var slackUserId: Swift.String?

        public init(
            awsUserIdentity: Swift.String? = nil,
            chatConfigurationArn: Swift.String? = nil,
            iamRoleArn: Swift.String? = nil,
            slackTeamId: Swift.String? = nil,
            slackUserId: Swift.String? = nil
        )
        {
            self.awsUserIdentity = awsUserIdentity
            self.chatConfigurationArn = chatConfigurationArn
            self.iamRoleArn = iamRoleArn
            self.slackTeamId = slackTeamId
            self.slackUserId = slackUserId
        }
    }

}

public struct DescribeSlackUserIdentitiesOutput {
    /// An optional token returned from a prior request. Use this token for pagination of results from this action. If this parameter is specified, the response includes only results beyond the token, up to the value specified by MaxResults.
    public var nextToken: Swift.String?
    /// A list of Slack User Identities.
    public var slackUserIdentities: [ChatbotClientTypes.SlackUserIdentity]?

    public init(
        nextToken: Swift.String? = nil,
        slackUserIdentities: [ChatbotClientTypes.SlackUserIdentity]? = nil
    )
    {
        self.nextToken = nextToken
        self.slackUserIdentities = slackUserIdentities
    }
}

/// We canâ€™t process your request right now because of a server issue. Try again later.
public struct DescribeSlackWorkspacesException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "DescribeSlackWorkspacesException" }
    public static var fault: ClientRuntime.ErrorFault { .server }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

public struct DescribeSlackWorkspacesInput {
    /// The maximum number of results to include in the response. If more results exist than the specified MaxResults value, a token is included in the response so that the remaining results can be retrieved.
    public var maxResults: Swift.Int?
    /// An optional token returned from a prior request. Use this token for pagination of results from this action. If this parameter is specified, the response includes only results beyond the token, up to the value specified by MaxResults.
    public var nextToken: Swift.String?

    public init(
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

extension ChatbotClientTypes {
    /// A Slack workspace.
    public struct SlackWorkspace {
        /// The ID of the Slack workspace authorized with AWS Chatbot.
        /// This member is required.
        public var slackTeamId: Swift.String?
        /// The name of the Slack workspace.
        /// This member is required.
        public var slackTeamName: Swift.String?

        public init(
            slackTeamId: Swift.String? = nil,
            slackTeamName: Swift.String? = nil
        )
        {
            self.slackTeamId = slackTeamId
            self.slackTeamName = slackTeamName
        }
    }

}

public struct DescribeSlackWorkspacesOutput {
    /// An optional token returned from a prior request. Use this token for pagination of results from this action. If this parameter is specified, the response includes only results beyond the token, up to the value specified by MaxResults.
    public var nextToken: Swift.String?
    /// A list of Slack workspaces registered with AWS Chatbot.
    public var slackWorkspaces: [ChatbotClientTypes.SlackWorkspace]?

    public init(
        nextToken: Swift.String? = nil,
        slackWorkspaces: [ChatbotClientTypes.SlackWorkspace]? = nil
    )
    {
        self.nextToken = nextToken
        self.slackWorkspaces = slackWorkspaces
    }
}

/// We canâ€™t process your request right now because of a server issue. Try again later.
public struct GetAccountPreferencesException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "GetAccountPreferencesException" }
    public static var fault: ClientRuntime.ErrorFault { .server }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

public struct GetAccountPreferencesInput {

    public init() { }
}

public struct GetAccountPreferencesOutput {
    /// The preferences related to AWS Chatbot usage in the calling AWS account.
    public var accountPreferences: ChatbotClientTypes.AccountPreferences?

    public init(
        accountPreferences: ChatbotClientTypes.AccountPreferences? = nil
    )
    {
        self.accountPreferences = accountPreferences
    }
}

/// We canâ€™t process your request right now because of a server issue. Try again later.
public struct GetTeamsChannelConfigurationException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "GetTeamsChannelConfigurationException" }
    public static var fault: ClientRuntime.ErrorFault { .server }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

public struct GetMicrosoftTeamsChannelConfigurationInput {
    /// The Amazon Resource Number (ARN) of the MicrosoftTeamsChannelConfiguration to retrieve.
    /// This member is required.
    public var chatConfigurationArn: Swift.String?

    public init(
        chatConfigurationArn: Swift.String? = nil
    )
    {
        self.chatConfigurationArn = chatConfigurationArn
    }
}

public struct GetMicrosoftTeamsChannelConfigurationOutput {
    /// The configuration for a Microsoft Teams channel configured with AWS Chatbot.
    public var channelConfiguration: ChatbotClientTypes.TeamsChannelConfiguration?

    public init(
        channelConfiguration: ChatbotClientTypes.TeamsChannelConfiguration? = nil
    )
    {
        self.channelConfiguration = channelConfiguration
    }
}

/// Unexpected error during processing of request.
public struct InternalServiceError: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InternalServiceError" }
    public static var fault: ClientRuntime.ErrorFault { .server }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// We canâ€™t process your request right now because of a server issue. Try again later.
public struct ListTeamsChannelConfigurationsException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ListTeamsChannelConfigurationsException" }
    public static var fault: ClientRuntime.ErrorFault { .server }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

public struct ListMicrosoftTeamsChannelConfigurationsInput {
    /// The maximum number of results to include in the response. If more results exist than the specified MaxResults value, a token is included in the response so that the remaining results can be retrieved.
    public var maxResults: Swift.Int?
    /// An optional token returned from a prior request. Use this token for pagination of results from this action. If this parameter is specified, the response includes only results beyond the token, up to the value specified by MaxResults.
    public var nextToken: Swift.String?
    /// The ID of the Microsoft Teams authorized with AWS Chatbot. To get the team ID, you must perform the initial authorization flow with Microsoft Teams in the AWS Chatbot console. Then you can copy and paste the team ID from the console. For more information, see [Step 1: Configure a Microsoft Teams client](https://docs.aws.amazon.com/chatbot/latest/adminguide/teams-setup.html#teams-client-setup) in the AWS Chatbot Administrator Guide.
    public var teamId: Swift.String?

    public init(
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        teamId: Swift.String? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.teamId = teamId
    }
}

public struct ListMicrosoftTeamsChannelConfigurationsOutput {
    /// An optional token returned from a prior request. Use this token for pagination of results from this action. If this parameter is specified, the response includes only results beyond the token, up to the value specified by MaxResults.
    public var nextToken: Swift.String?
    /// A list of AWS Chatbot channel configurations for Microsoft Teams.
    public var teamChannelConfigurations: [ChatbotClientTypes.TeamsChannelConfiguration]?

    public init(
        nextToken: Swift.String? = nil,
        teamChannelConfigurations: [ChatbotClientTypes.TeamsChannelConfiguration]? = nil
    )
    {
        self.nextToken = nextToken
        self.teamChannelConfigurations = teamChannelConfigurations
    }
}

/// We canâ€™t process your request right now because of a server issue. Try again later.
public struct ListMicrosoftTeamsConfiguredTeamsException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ListMicrosoftTeamsConfiguredTeamsException" }
    public static var fault: ClientRuntime.ErrorFault { .server }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

public struct ListMicrosoftTeamsConfiguredTeamsInput {
    /// The maximum number of results to include in the response. If more results exist than the specified MaxResults value, a token is included in the response so that the remaining results can be retrieved.
    public var maxResults: Swift.Int?
    /// An optional token returned from a prior request. Use this token for pagination of results from this action. If this parameter is specified, the response includes only results beyond the token, up to the value specified by MaxResults.
    public var nextToken: Swift.String?

    public init(
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

public struct ListMicrosoftTeamsConfiguredTeamsOutput {
    /// A list of teams in Microsoft Teams that are configured with AWS Chatbot.
    public var configuredTeams: [ChatbotClientTypes.ConfiguredTeam]?
    /// An optional token returned from a prior request. Use this token for pagination of results from this action. If this parameter is specified, the response includes only results beyond the token, up to the value specified by MaxResults.
    public var nextToken: Swift.String?

    public init(
        configuredTeams: [ChatbotClientTypes.ConfiguredTeam]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.configuredTeams = configuredTeams
        self.nextToken = nextToken
    }
}

/// We canâ€™t process your request right now because of a server issue. Try again later.
public struct ListMicrosoftTeamsUserIdentitiesException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ListMicrosoftTeamsUserIdentitiesException" }
    public static var fault: ClientRuntime.ErrorFault { .server }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

public struct ListMicrosoftTeamsUserIdentitiesInput {
    /// The Amazon Resource Number (ARN) of the MicrosoftTeamsChannelConfiguration associated with the user identities to list.
    public var chatConfigurationArn: Swift.String?
    /// The maximum number of results to include in the response. If more results exist than the specified MaxResults value, a token is included in the response so that the remaining results can be retrieved.
    public var maxResults: Swift.Int?
    /// An optional token returned from a prior request. Use this token for pagination of results from this action. If this parameter is specified, the response includes only results beyond the token, up to the value specified by MaxResults.
    public var nextToken: Swift.String?

    public init(
        chatConfigurationArn: Swift.String? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.chatConfigurationArn = chatConfigurationArn
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

extension ChatbotClientTypes {
    /// Identifes a user level permission for a channel configuration.
    public struct TeamsUserIdentity {
        /// The AWS user identity ARN used to associate a Microsoft Teams user Identity with an IAM Role.
        public var awsUserIdentity: Swift.String?
        /// The Amazon Resource Name (ARN) of the MicrosoftTeamsChannelConfiguration associated with the user identity to delete.
        /// This member is required.
        public var chatConfigurationArn: Swift.String?
        /// A user-defined role that AWS Chatbot assumes. This is not the service-linked role. For more information, see [IAM policies for AWS Chatbot](https://docs.aws.amazon.com/chatbot/latest/adminguide/chatbot-iam-policies.html) in the AWS Chatbot Administrator Guide.
        /// This member is required.
        public var iamRoleArn: Swift.String?
        /// The ID of the Microsoft Teams authorized with AWS Chatbot. To get the team ID, you must perform the initial authorization flow with Microsoft Teams in the AWS Chatbot console. Then you can copy and paste the team ID from the console. For more information, see [Step 1: Configure a Microsoft Teams client](https://docs.aws.amazon.com/chatbot/latest/adminguide/teams-setup.html#teams-client-setup) in the AWS Chatbot Administrator Guide.
        /// This member is required.
        public var teamId: Swift.String?
        /// The ID of the Microsoft Teams channel.
        public var teamsChannelId: Swift.String?
        /// The ID of the Microsoft Teams tenant.
        public var teamsTenantId: Swift.String?
        /// The Microsoft Teams user ID.
        public var userId: Swift.String?

        public init(
            awsUserIdentity: Swift.String? = nil,
            chatConfigurationArn: Swift.String? = nil,
            iamRoleArn: Swift.String? = nil,
            teamId: Swift.String? = nil,
            teamsChannelId: Swift.String? = nil,
            teamsTenantId: Swift.String? = nil,
            userId: Swift.String? = nil
        )
        {
            self.awsUserIdentity = awsUserIdentity
            self.chatConfigurationArn = chatConfigurationArn
            self.iamRoleArn = iamRoleArn
            self.teamId = teamId
            self.teamsChannelId = teamsChannelId
            self.teamsTenantId = teamsTenantId
            self.userId = userId
        }
    }

}

public struct ListMicrosoftTeamsUserIdentitiesOutput {
    /// An optional token returned from a prior request. Use this token for pagination of results from this action. If this parameter is specified, the response includes only results beyond the token, up to the value specified by MaxResults.
    public var nextToken: Swift.String?
    /// User level permissions associated to a channel configuration.
    public var teamsUserIdentities: [ChatbotClientTypes.TeamsUserIdentity]?

    public init(
        nextToken: Swift.String? = nil,
        teamsUserIdentities: [ChatbotClientTypes.TeamsUserIdentity]? = nil
    )
    {
        self.nextToken = nextToken
        self.teamsUserIdentities = teamsUserIdentities
    }
}

/// We canâ€™t process your request right now because of a server issue. Try again later.
public struct ServiceUnavailableException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ServiceUnavailableException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

public struct ListTagsForResourceInput {
    /// The ARN you specified to list the tags of.
    /// This member is required.
    public var resourceARN: Swift.String?

    public init(
        resourceARN: Swift.String? = nil
    )
    {
        self.resourceARN = resourceARN
    }
}

public struct ListTagsForResourceOutput {
    /// Key-value pairs that are assigned to a resource, usually for the purpose of grouping and searching for items. Tags are metadata that you define.
    public var tags: [ChatbotClientTypes.Tag]?

    public init(
        tags: [ChatbotClientTypes.Tag]? = nil
    )
    {
        self.tags = tags
    }
}

/// The supplied list of tags contains too many tags.
public struct TooManyTagsException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "TooManyTagsException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

public struct TagResourceInput {
    /// The ARN of the configuration.
    /// This member is required.
    public var resourceARN: Swift.String?
    /// A list of tags to apply to the configuration.
    /// This member is required.
    public var tags: [ChatbotClientTypes.Tag]?

    public init(
        resourceARN: Swift.String? = nil,
        tags: [ChatbotClientTypes.Tag]? = nil
    )
    {
        self.resourceARN = resourceARN
        self.tags = tags
    }
}

public struct TagResourceOutput {

    public init() { }
}

public struct UntagResourceInput {
    /// The value of the resource that will have the tag removed. An Amazon Resource Name (ARN) is an identifier for a specific AWS resource, such as a server, user, or role.
    /// This member is required.
    public var resourceARN: Swift.String?
    /// TagKeys are key-value pairs assigned to ARNs that can be used to group and search for resources by type. This metadata can be attached to resources for any purpose.
    /// This member is required.
    public var tagKeys: [Swift.String]?

    public init(
        resourceARN: Swift.String? = nil,
        tagKeys: [Swift.String]? = nil
    )
    {
        self.resourceARN = resourceARN
        self.tagKeys = tagKeys
    }
}

public struct UntagResourceOutput {

    public init() { }
}

/// We canâ€™t process your request right now because of a server issue. Try again later.
public struct UpdateAccountPreferencesException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "UpdateAccountPreferencesException" }
    public static var fault: ClientRuntime.ErrorFault { .server }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

public struct UpdateAccountPreferencesInput {
    /// Turns on training data collection. This helps improve the AWS Chatbot experience by allowing AWS Chatbot to store and use your customer information, such as AWS Chatbot configurations, notifications, user inputs, AWS Chatbot generated responses, and interaction data. This data helps us to continuously improve and develop Artificial Intelligence (AI) technologies. Your data is not shared with any third parties and is protected using sophisticated controls to prevent unauthorized access and misuse. AWS Chatbot does not store or use interactions in chat channels with Amazon Q for training AI technologies for AWS Chatbot.
    public var trainingDataCollectionEnabled: Swift.Bool?
    /// Enables use of a user role requirement in your chat configuration.
    public var userAuthorizationRequired: Swift.Bool?

    public init(
        trainingDataCollectionEnabled: Swift.Bool? = nil,
        userAuthorizationRequired: Swift.Bool? = nil
    )
    {
        self.trainingDataCollectionEnabled = trainingDataCollectionEnabled
        self.userAuthorizationRequired = userAuthorizationRequired
    }
}

public struct UpdateAccountPreferencesOutput {
    /// Preferences related to AWS Chatbot usage in the calling AWS account.
    public var accountPreferences: ChatbotClientTypes.AccountPreferences?

    public init(
        accountPreferences: ChatbotClientTypes.AccountPreferences? = nil
    )
    {
        self.accountPreferences = accountPreferences
    }
}

/// We canâ€™t process your request right now because of a server issue. Try again later.
public struct UpdateChimeWebhookConfigurationException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "UpdateChimeWebhookConfigurationException" }
    public static var fault: ClientRuntime.ErrorFault { .server }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

public struct UpdateChimeWebhookConfigurationInput {
    /// The Amazon Resource Number (ARN) of the ChimeWebhookConfiguration to update.
    /// This member is required.
    public var chatConfigurationArn: Swift.String?
    /// A user-defined role that AWS Chatbot assumes. This is not the service-linked role. For more information, see [IAM policies for AWS Chatbot](https://docs.aws.amazon.com/chatbot/latest/adminguide/chatbot-iam-policies.html) in the AWS Chatbot Administrator Guide.
    public var iamRoleArn: Swift.String?
    /// Logging levels include ERROR, INFO, or NONE.
    public var loggingLevel: Swift.String?
    /// The ARNs of the SNS topics that deliver notifications to AWS Chatbot.
    public var snsTopicArns: [Swift.String]?
    /// A description of the webhook. We recommend using the convention RoomName/WebhookName. For more information, see [Tutorial: Get started with Amazon Chime](https://docs.aws.amazon.com/chatbot/latest/adminguide/chime-setup.html) in the AWS Chatbot Administrator Guide.
    public var webhookDescription: Swift.String?
    /// The URL for the Amazon Chime webhook.
    public var webhookUrl: Swift.String?

    public init(
        chatConfigurationArn: Swift.String? = nil,
        iamRoleArn: Swift.String? = nil,
        loggingLevel: Swift.String? = nil,
        snsTopicArns: [Swift.String]? = nil,
        webhookDescription: Swift.String? = nil,
        webhookUrl: Swift.String? = nil
    )
    {
        self.chatConfigurationArn = chatConfigurationArn
        self.iamRoleArn = iamRoleArn
        self.loggingLevel = loggingLevel
        self.snsTopicArns = snsTopicArns
        self.webhookDescription = webhookDescription
        self.webhookUrl = webhookUrl
    }
}

extension UpdateChimeWebhookConfigurationInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UpdateChimeWebhookConfigurationInput(chatConfigurationArn: \(Swift.String(describing: chatConfigurationArn)), iamRoleArn: \(Swift.String(describing: iamRoleArn)), loggingLevel: \(Swift.String(describing: loggingLevel)), snsTopicArns: \(Swift.String(describing: snsTopicArns)), webhookDescription: \"CONTENT_REDACTED\", webhookUrl: \"CONTENT_REDACTED\")"}
}

public struct UpdateChimeWebhookConfigurationOutput {
    /// A Amazon Chime webhook configuration.
    public var webhookConfiguration: ChatbotClientTypes.ChimeWebhookConfiguration?

    public init(
        webhookConfiguration: ChatbotClientTypes.ChimeWebhookConfiguration? = nil
    )
    {
        self.webhookConfiguration = webhookConfiguration
    }
}

/// We canâ€™t process your request right now because of a server issue. Try again later.
public struct UpdateTeamsChannelConfigurationException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "UpdateTeamsChannelConfigurationException" }
    public static var fault: ClientRuntime.ErrorFault { .server }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

public struct UpdateMicrosoftTeamsChannelConfigurationInput {
    /// The ID of the Microsoft Teams channel.
    /// This member is required.
    public var channelId: Swift.String?
    /// The name of the Microsoft Teams channel.
    public var channelName: Swift.String?
    /// The Amazon Resource Number (ARN) of the TeamsChannelConfiguration to update.
    /// This member is required.
    public var chatConfigurationArn: Swift.String?
    /// The list of IAM policy ARNs that are applied as channel guardrails. The AWS managed AdministratorAccess policy is applied by default if this is not set.
    public var guardrailPolicyArns: [Swift.String]?
    /// A user-defined role that AWS Chatbot assumes. This is not the service-linked role. For more information, see [IAM policies for AWS Chatbot](https://docs.aws.amazon.com/chatbot/latest/adminguide/chatbot-iam-policies.html) in the AWS Chatbot Administrator Guide.
    public var iamRoleArn: Swift.String?
    /// Logging levels include ERROR, INFO, or NONE.
    public var loggingLevel: Swift.String?
    /// The Amazon Resource Names (ARNs) of the SNS topics that deliver notifications to AWS Chatbot.
    public var snsTopicArns: [Swift.String]?
    /// Enables use of a user role requirement in your chat configuration.
    public var userAuthorizationRequired: Swift.Bool?

    public init(
        channelId: Swift.String? = nil,
        channelName: Swift.String? = nil,
        chatConfigurationArn: Swift.String? = nil,
        guardrailPolicyArns: [Swift.String]? = nil,
        iamRoleArn: Swift.String? = nil,
        loggingLevel: Swift.String? = nil,
        snsTopicArns: [Swift.String]? = nil,
        userAuthorizationRequired: Swift.Bool? = nil
    )
    {
        self.channelId = channelId
        self.channelName = channelName
        self.chatConfigurationArn = chatConfigurationArn
        self.guardrailPolicyArns = guardrailPolicyArns
        self.iamRoleArn = iamRoleArn
        self.loggingLevel = loggingLevel
        self.snsTopicArns = snsTopicArns
        self.userAuthorizationRequired = userAuthorizationRequired
    }
}

extension UpdateMicrosoftTeamsChannelConfigurationInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UpdateMicrosoftTeamsChannelConfigurationInput(channelId: \(Swift.String(describing: channelId)), chatConfigurationArn: \(Swift.String(describing: chatConfigurationArn)), guardrailPolicyArns: \(Swift.String(describing: guardrailPolicyArns)), iamRoleArn: \(Swift.String(describing: iamRoleArn)), loggingLevel: \(Swift.String(describing: loggingLevel)), snsTopicArns: \(Swift.String(describing: snsTopicArns)), userAuthorizationRequired: \(Swift.String(describing: userAuthorizationRequired)), channelName: \"CONTENT_REDACTED\")"}
}

public struct UpdateMicrosoftTeamsChannelConfigurationOutput {
    /// The configuration for a Microsoft Teams channel configured with AWS Chatbot.
    public var channelConfiguration: ChatbotClientTypes.TeamsChannelConfiguration?

    public init(
        channelConfiguration: ChatbotClientTypes.TeamsChannelConfiguration? = nil
    )
    {
        self.channelConfiguration = channelConfiguration
    }
}

/// We canâ€™t process your request right now because of a server issue. Try again later.
public struct UpdateSlackChannelConfigurationException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "UpdateSlackChannelConfigurationException" }
    public static var fault: ClientRuntime.ErrorFault { .server }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

public struct UpdateSlackChannelConfigurationInput {
    /// The Amazon Resource Number (ARN) of the SlackChannelConfiguration to update.
    /// This member is required.
    public var chatConfigurationArn: Swift.String?
    /// The list of IAM policy ARNs that are applied as channel guardrails. The AWS managed AdministratorAccess policy is applied by default if this is not set.
    public var guardrailPolicyArns: [Swift.String]?
    /// A user-defined role that AWS Chatbot assumes. This is not the service-linked role. For more information, see [IAM policies for AWS Chatbot](https://docs.aws.amazon.com/chatbot/latest/adminguide/chatbot-iam-policies.html) in the AWS Chatbot Administrator Guide.
    public var iamRoleArn: Swift.String?
    /// Logging levels include ERROR, INFO, or NONE.
    public var loggingLevel: Swift.String?
    /// The ID of the Slack channel. To get this ID, open Slack, right click on the channel name in the left pane, then choose Copy Link. The channel ID is the 9-character string at the end of the URL. For example, ABCBBLZZZ.
    /// This member is required.
    public var slackChannelId: Swift.String?
    /// The name of the Slack channel.
    public var slackChannelName: Swift.String?
    /// The Amazon Resource Names (ARNs) of the SNS topics that deliver notifications to AWS Chatbot.
    public var snsTopicArns: [Swift.String]?
    /// Enables use of a user role requirement in your chat configuration.
    public var userAuthorizationRequired: Swift.Bool?

    public init(
        chatConfigurationArn: Swift.String? = nil,
        guardrailPolicyArns: [Swift.String]? = nil,
        iamRoleArn: Swift.String? = nil,
        loggingLevel: Swift.String? = nil,
        slackChannelId: Swift.String? = nil,
        slackChannelName: Swift.String? = nil,
        snsTopicArns: [Swift.String]? = nil,
        userAuthorizationRequired: Swift.Bool? = nil
    )
    {
        self.chatConfigurationArn = chatConfigurationArn
        self.guardrailPolicyArns = guardrailPolicyArns
        self.iamRoleArn = iamRoleArn
        self.loggingLevel = loggingLevel
        self.slackChannelId = slackChannelId
        self.slackChannelName = slackChannelName
        self.snsTopicArns = snsTopicArns
        self.userAuthorizationRequired = userAuthorizationRequired
    }
}

extension UpdateSlackChannelConfigurationInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UpdateSlackChannelConfigurationInput(chatConfigurationArn: \(Swift.String(describing: chatConfigurationArn)), guardrailPolicyArns: \(Swift.String(describing: guardrailPolicyArns)), iamRoleArn: \(Swift.String(describing: iamRoleArn)), loggingLevel: \(Swift.String(describing: loggingLevel)), slackChannelId: \(Swift.String(describing: slackChannelId)), snsTopicArns: \(Swift.String(describing: snsTopicArns)), userAuthorizationRequired: \(Swift.String(describing: userAuthorizationRequired)), slackChannelName: \"CONTENT_REDACTED\")"}
}

public struct UpdateSlackChannelConfigurationOutput {
    /// The configuration for a Slack channel configured with AWS Chatbot.
    public var channelConfiguration: ChatbotClientTypes.SlackChannelConfiguration?

    public init(
        channelConfiguration: ChatbotClientTypes.SlackChannelConfiguration? = nil
    )
    {
        self.channelConfiguration = channelConfiguration
    }
}

extension CreateChimeWebhookConfigurationInput {

    static func urlPathProvider(_ value: CreateChimeWebhookConfigurationInput) -> Swift.String? {
        return "/create-chime-webhook-configuration"
    }
}

extension CreateMicrosoftTeamsChannelConfigurationInput {

    static func urlPathProvider(_ value: CreateMicrosoftTeamsChannelConfigurationInput) -> Swift.String? {
        return "/create-ms-teams-channel-configuration"
    }
}

extension CreateSlackChannelConfigurationInput {

    static func urlPathProvider(_ value: CreateSlackChannelConfigurationInput) -> Swift.String? {
        return "/create-slack-channel-configuration"
    }
}

extension DeleteChimeWebhookConfigurationInput {

    static func urlPathProvider(_ value: DeleteChimeWebhookConfigurationInput) -> Swift.String? {
        return "/delete-chime-webhook-configuration"
    }
}

extension DeleteMicrosoftTeamsChannelConfigurationInput {

    static func urlPathProvider(_ value: DeleteMicrosoftTeamsChannelConfigurationInput) -> Swift.String? {
        return "/delete-ms-teams-channel-configuration"
    }
}

extension DeleteMicrosoftTeamsConfiguredTeamInput {

    static func urlPathProvider(_ value: DeleteMicrosoftTeamsConfiguredTeamInput) -> Swift.String? {
        return "/delete-ms-teams-configured-teams"
    }
}

extension DeleteMicrosoftTeamsUserIdentityInput {

    static func urlPathProvider(_ value: DeleteMicrosoftTeamsUserIdentityInput) -> Swift.String? {
        return "/delete-ms-teams-user-identity"
    }
}

extension DeleteSlackChannelConfigurationInput {

    static func urlPathProvider(_ value: DeleteSlackChannelConfigurationInput) -> Swift.String? {
        return "/delete-slack-channel-configuration"
    }
}

extension DeleteSlackUserIdentityInput {

    static func urlPathProvider(_ value: DeleteSlackUserIdentityInput) -> Swift.String? {
        return "/delete-slack-user-identity"
    }
}

extension DeleteSlackWorkspaceAuthorizationInput {

    static func urlPathProvider(_ value: DeleteSlackWorkspaceAuthorizationInput) -> Swift.String? {
        return "/delete-slack-workspace-authorization"
    }
}

extension DescribeChimeWebhookConfigurationsInput {

    static func urlPathProvider(_ value: DescribeChimeWebhookConfigurationsInput) -> Swift.String? {
        return "/describe-chime-webhook-configurations"
    }
}

extension DescribeSlackChannelConfigurationsInput {

    static func urlPathProvider(_ value: DescribeSlackChannelConfigurationsInput) -> Swift.String? {
        return "/describe-slack-channel-configurations"
    }
}

extension DescribeSlackUserIdentitiesInput {

    static func urlPathProvider(_ value: DescribeSlackUserIdentitiesInput) -> Swift.String? {
        return "/describe-slack-user-identities"
    }
}

extension DescribeSlackWorkspacesInput {

    static func urlPathProvider(_ value: DescribeSlackWorkspacesInput) -> Swift.String? {
        return "/describe-slack-workspaces"
    }
}

extension GetAccountPreferencesInput {

    static func urlPathProvider(_ value: GetAccountPreferencesInput) -> Swift.String? {
        return "/get-account-preferences"
    }
}

extension GetMicrosoftTeamsChannelConfigurationInput {

    static func urlPathProvider(_ value: GetMicrosoftTeamsChannelConfigurationInput) -> Swift.String? {
        return "/get-ms-teams-channel-configuration"
    }
}

extension ListMicrosoftTeamsChannelConfigurationsInput {

    static func urlPathProvider(_ value: ListMicrosoftTeamsChannelConfigurationsInput) -> Swift.String? {
        return "/list-ms-teams-channel-configurations"
    }
}

extension ListMicrosoftTeamsConfiguredTeamsInput {

    static func urlPathProvider(_ value: ListMicrosoftTeamsConfiguredTeamsInput) -> Swift.String? {
        return "/list-ms-teams-configured-teams"
    }
}

extension ListMicrosoftTeamsUserIdentitiesInput {

    static func urlPathProvider(_ value: ListMicrosoftTeamsUserIdentitiesInput) -> Swift.String? {
        return "/list-ms-teams-user-identities"
    }
}

extension ListTagsForResourceInput {

    static func urlPathProvider(_ value: ListTagsForResourceInput) -> Swift.String? {
        return "/list-tags-for-resource"
    }
}

extension TagResourceInput {

    static func urlPathProvider(_ value: TagResourceInput) -> Swift.String? {
        return "/tag-resource"
    }
}

extension UntagResourceInput {

    static func urlPathProvider(_ value: UntagResourceInput) -> Swift.String? {
        return "/untag-resource"
    }
}

extension UpdateAccountPreferencesInput {

    static func urlPathProvider(_ value: UpdateAccountPreferencesInput) -> Swift.String? {
        return "/update-account-preferences"
    }
}

extension UpdateChimeWebhookConfigurationInput {

    static func urlPathProvider(_ value: UpdateChimeWebhookConfigurationInput) -> Swift.String? {
        return "/update-chime-webhook-configuration"
    }
}

extension UpdateMicrosoftTeamsChannelConfigurationInput {

    static func urlPathProvider(_ value: UpdateMicrosoftTeamsChannelConfigurationInput) -> Swift.String? {
        return "/update-ms-teams-channel-configuration"
    }
}

extension UpdateSlackChannelConfigurationInput {

    static func urlPathProvider(_ value: UpdateSlackChannelConfigurationInput) -> Swift.String? {
        return "/update-slack-channel-configuration"
    }
}

extension CreateChimeWebhookConfigurationInput {

    static func write(value: CreateChimeWebhookConfigurationInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ConfigurationName"].write(value.configurationName)
        try writer["IamRoleArn"].write(value.iamRoleArn)
        try writer["LoggingLevel"].write(value.loggingLevel)
        try writer["SnsTopicArns"].writeList(value.snsTopicArns, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["Tags"].writeList(value.tags, memberWritingClosure: ChatbotClientTypes.Tag.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["WebhookDescription"].write(value.webhookDescription)
        try writer["WebhookUrl"].write(value.webhookUrl)
    }
}

extension CreateMicrosoftTeamsChannelConfigurationInput {

    static func write(value: CreateMicrosoftTeamsChannelConfigurationInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ChannelId"].write(value.channelId)
        try writer["ChannelName"].write(value.channelName)
        try writer["ConfigurationName"].write(value.configurationName)
        try writer["GuardrailPolicyArns"].writeList(value.guardrailPolicyArns, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["IamRoleArn"].write(value.iamRoleArn)
        try writer["LoggingLevel"].write(value.loggingLevel)
        try writer["SnsTopicArns"].writeList(value.snsTopicArns, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["Tags"].writeList(value.tags, memberWritingClosure: ChatbotClientTypes.Tag.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["TeamId"].write(value.teamId)
        try writer["TeamName"].write(value.teamName)
        try writer["TenantId"].write(value.tenantId)
        try writer["UserAuthorizationRequired"].write(value.userAuthorizationRequired)
    }
}

extension CreateSlackChannelConfigurationInput {

    static func write(value: CreateSlackChannelConfigurationInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ConfigurationName"].write(value.configurationName)
        try writer["GuardrailPolicyArns"].writeList(value.guardrailPolicyArns, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["IamRoleArn"].write(value.iamRoleArn)
        try writer["LoggingLevel"].write(value.loggingLevel)
        try writer["SlackChannelId"].write(value.slackChannelId)
        try writer["SlackChannelName"].write(value.slackChannelName)
        try writer["SlackTeamId"].write(value.slackTeamId)
        try writer["SnsTopicArns"].writeList(value.snsTopicArns, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["Tags"].writeList(value.tags, memberWritingClosure: ChatbotClientTypes.Tag.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["UserAuthorizationRequired"].write(value.userAuthorizationRequired)
    }
}

extension DeleteChimeWebhookConfigurationInput {

    static func write(value: DeleteChimeWebhookConfigurationInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ChatConfigurationArn"].write(value.chatConfigurationArn)
    }
}

extension DeleteMicrosoftTeamsChannelConfigurationInput {

    static func write(value: DeleteMicrosoftTeamsChannelConfigurationInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ChatConfigurationArn"].write(value.chatConfigurationArn)
    }
}

extension DeleteMicrosoftTeamsConfiguredTeamInput {

    static func write(value: DeleteMicrosoftTeamsConfiguredTeamInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["TeamId"].write(value.teamId)
    }
}

extension DeleteMicrosoftTeamsUserIdentityInput {

    static func write(value: DeleteMicrosoftTeamsUserIdentityInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ChatConfigurationArn"].write(value.chatConfigurationArn)
        try writer["UserId"].write(value.userId)
    }
}

extension DeleteSlackChannelConfigurationInput {

    static func write(value: DeleteSlackChannelConfigurationInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ChatConfigurationArn"].write(value.chatConfigurationArn)
    }
}

extension DeleteSlackUserIdentityInput {

    static func write(value: DeleteSlackUserIdentityInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ChatConfigurationArn"].write(value.chatConfigurationArn)
        try writer["SlackTeamId"].write(value.slackTeamId)
        try writer["SlackUserId"].write(value.slackUserId)
    }
}

extension DeleteSlackWorkspaceAuthorizationInput {

    static func write(value: DeleteSlackWorkspaceAuthorizationInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["SlackTeamId"].write(value.slackTeamId)
    }
}

extension DescribeChimeWebhookConfigurationsInput {

    static func write(value: DescribeChimeWebhookConfigurationsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ChatConfigurationArn"].write(value.chatConfigurationArn)
        try writer["MaxResults"].write(value.maxResults)
        try writer["NextToken"].write(value.nextToken)
    }
}

extension DescribeSlackChannelConfigurationsInput {

    static func write(value: DescribeSlackChannelConfigurationsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ChatConfigurationArn"].write(value.chatConfigurationArn)
        try writer["MaxResults"].write(value.maxResults)
        try writer["NextToken"].write(value.nextToken)
    }
}

extension DescribeSlackUserIdentitiesInput {

    static func write(value: DescribeSlackUserIdentitiesInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ChatConfigurationArn"].write(value.chatConfigurationArn)
        try writer["MaxResults"].write(value.maxResults)
        try writer["NextToken"].write(value.nextToken)
    }
}

extension DescribeSlackWorkspacesInput {

    static func write(value: DescribeSlackWorkspacesInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["MaxResults"].write(value.maxResults)
        try writer["NextToken"].write(value.nextToken)
    }
}

extension GetMicrosoftTeamsChannelConfigurationInput {

    static func write(value: GetMicrosoftTeamsChannelConfigurationInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ChatConfigurationArn"].write(value.chatConfigurationArn)
    }
}

extension ListMicrosoftTeamsChannelConfigurationsInput {

    static func write(value: ListMicrosoftTeamsChannelConfigurationsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["MaxResults"].write(value.maxResults)
        try writer["NextToken"].write(value.nextToken)
        try writer["TeamId"].write(value.teamId)
    }
}

extension ListMicrosoftTeamsConfiguredTeamsInput {

    static func write(value: ListMicrosoftTeamsConfiguredTeamsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["MaxResults"].write(value.maxResults)
        try writer["NextToken"].write(value.nextToken)
    }
}

extension ListMicrosoftTeamsUserIdentitiesInput {

    static func write(value: ListMicrosoftTeamsUserIdentitiesInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ChatConfigurationArn"].write(value.chatConfigurationArn)
        try writer["MaxResults"].write(value.maxResults)
        try writer["NextToken"].write(value.nextToken)
    }
}

extension ListTagsForResourceInput {

    static func write(value: ListTagsForResourceInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ResourceARN"].write(value.resourceARN)
    }
}

extension TagResourceInput {

    static func write(value: TagResourceInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ResourceARN"].write(value.resourceARN)
        try writer["Tags"].writeList(value.tags, memberWritingClosure: ChatbotClientTypes.Tag.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension UntagResourceInput {

    static func write(value: UntagResourceInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ResourceARN"].write(value.resourceARN)
        try writer["TagKeys"].writeList(value.tagKeys, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension UpdateAccountPreferencesInput {

    static func write(value: UpdateAccountPreferencesInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["TrainingDataCollectionEnabled"].write(value.trainingDataCollectionEnabled)
        try writer["UserAuthorizationRequired"].write(value.userAuthorizationRequired)
    }
}

extension UpdateChimeWebhookConfigurationInput {

    static func write(value: UpdateChimeWebhookConfigurationInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ChatConfigurationArn"].write(value.chatConfigurationArn)
        try writer["IamRoleArn"].write(value.iamRoleArn)
        try writer["LoggingLevel"].write(value.loggingLevel)
        try writer["SnsTopicArns"].writeList(value.snsTopicArns, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["WebhookDescription"].write(value.webhookDescription)
        try writer["WebhookUrl"].write(value.webhookUrl)
    }
}

extension UpdateMicrosoftTeamsChannelConfigurationInput {

    static func write(value: UpdateMicrosoftTeamsChannelConfigurationInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ChannelId"].write(value.channelId)
        try writer["ChannelName"].write(value.channelName)
        try writer["ChatConfigurationArn"].write(value.chatConfigurationArn)
        try writer["GuardrailPolicyArns"].writeList(value.guardrailPolicyArns, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["IamRoleArn"].write(value.iamRoleArn)
        try writer["LoggingLevel"].write(value.loggingLevel)
        try writer["SnsTopicArns"].writeList(value.snsTopicArns, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["UserAuthorizationRequired"].write(value.userAuthorizationRequired)
    }
}

extension UpdateSlackChannelConfigurationInput {

    static func write(value: UpdateSlackChannelConfigurationInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ChatConfigurationArn"].write(value.chatConfigurationArn)
        try writer["GuardrailPolicyArns"].writeList(value.guardrailPolicyArns, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["IamRoleArn"].write(value.iamRoleArn)
        try writer["LoggingLevel"].write(value.loggingLevel)
        try writer["SlackChannelId"].write(value.slackChannelId)
        try writer["SlackChannelName"].write(value.slackChannelName)
        try writer["SnsTopicArns"].writeList(value.snsTopicArns, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["UserAuthorizationRequired"].write(value.userAuthorizationRequired)
    }
}

extension CreateChimeWebhookConfigurationOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateChimeWebhookConfigurationOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateChimeWebhookConfigurationOutput()
        value.webhookConfiguration = try reader["WebhookConfiguration"].readIfPresent(with: ChatbotClientTypes.ChimeWebhookConfiguration.read(from:))
        return value
    }
}

extension CreateMicrosoftTeamsChannelConfigurationOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateMicrosoftTeamsChannelConfigurationOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateMicrosoftTeamsChannelConfigurationOutput()
        value.channelConfiguration = try reader["ChannelConfiguration"].readIfPresent(with: ChatbotClientTypes.TeamsChannelConfiguration.read(from:))
        return value
    }
}

extension CreateSlackChannelConfigurationOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateSlackChannelConfigurationOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateSlackChannelConfigurationOutput()
        value.channelConfiguration = try reader["ChannelConfiguration"].readIfPresent(with: ChatbotClientTypes.SlackChannelConfiguration.read(from:))
        return value
    }
}

extension DeleteChimeWebhookConfigurationOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteChimeWebhookConfigurationOutput {
        return DeleteChimeWebhookConfigurationOutput()
    }
}

extension DeleteMicrosoftTeamsChannelConfigurationOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteMicrosoftTeamsChannelConfigurationOutput {
        return DeleteMicrosoftTeamsChannelConfigurationOutput()
    }
}

extension DeleteMicrosoftTeamsConfiguredTeamOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteMicrosoftTeamsConfiguredTeamOutput {
        return DeleteMicrosoftTeamsConfiguredTeamOutput()
    }
}

extension DeleteMicrosoftTeamsUserIdentityOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteMicrosoftTeamsUserIdentityOutput {
        return DeleteMicrosoftTeamsUserIdentityOutput()
    }
}

extension DeleteSlackChannelConfigurationOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteSlackChannelConfigurationOutput {
        return DeleteSlackChannelConfigurationOutput()
    }
}

extension DeleteSlackUserIdentityOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteSlackUserIdentityOutput {
        return DeleteSlackUserIdentityOutput()
    }
}

extension DeleteSlackWorkspaceAuthorizationOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteSlackWorkspaceAuthorizationOutput {
        return DeleteSlackWorkspaceAuthorizationOutput()
    }
}

extension DescribeChimeWebhookConfigurationsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeChimeWebhookConfigurationsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DescribeChimeWebhookConfigurationsOutput()
        value.nextToken = try reader["NextToken"].readIfPresent()
        value.webhookConfigurations = try reader["WebhookConfigurations"].readListIfPresent(memberReadingClosure: ChatbotClientTypes.ChimeWebhookConfiguration.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension DescribeSlackChannelConfigurationsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeSlackChannelConfigurationsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DescribeSlackChannelConfigurationsOutput()
        value.nextToken = try reader["NextToken"].readIfPresent()
        value.slackChannelConfigurations = try reader["SlackChannelConfigurations"].readListIfPresent(memberReadingClosure: ChatbotClientTypes.SlackChannelConfiguration.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension DescribeSlackUserIdentitiesOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeSlackUserIdentitiesOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DescribeSlackUserIdentitiesOutput()
        value.nextToken = try reader["NextToken"].readIfPresent()
        value.slackUserIdentities = try reader["SlackUserIdentities"].readListIfPresent(memberReadingClosure: ChatbotClientTypes.SlackUserIdentity.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension DescribeSlackWorkspacesOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeSlackWorkspacesOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DescribeSlackWorkspacesOutput()
        value.nextToken = try reader["NextToken"].readIfPresent()
        value.slackWorkspaces = try reader["SlackWorkspaces"].readListIfPresent(memberReadingClosure: ChatbotClientTypes.SlackWorkspace.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension GetAccountPreferencesOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetAccountPreferencesOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetAccountPreferencesOutput()
        value.accountPreferences = try reader["AccountPreferences"].readIfPresent(with: ChatbotClientTypes.AccountPreferences.read(from:))
        return value
    }
}

extension GetMicrosoftTeamsChannelConfigurationOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetMicrosoftTeamsChannelConfigurationOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetMicrosoftTeamsChannelConfigurationOutput()
        value.channelConfiguration = try reader["ChannelConfiguration"].readIfPresent(with: ChatbotClientTypes.TeamsChannelConfiguration.read(from:))
        return value
    }
}

extension ListMicrosoftTeamsChannelConfigurationsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListMicrosoftTeamsChannelConfigurationsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListMicrosoftTeamsChannelConfigurationsOutput()
        value.nextToken = try reader["NextToken"].readIfPresent()
        value.teamChannelConfigurations = try reader["TeamChannelConfigurations"].readListIfPresent(memberReadingClosure: ChatbotClientTypes.TeamsChannelConfiguration.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension ListMicrosoftTeamsConfiguredTeamsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListMicrosoftTeamsConfiguredTeamsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListMicrosoftTeamsConfiguredTeamsOutput()
        value.configuredTeams = try reader["ConfiguredTeams"].readListIfPresent(memberReadingClosure: ChatbotClientTypes.ConfiguredTeam.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.nextToken = try reader["NextToken"].readIfPresent()
        return value
    }
}

extension ListMicrosoftTeamsUserIdentitiesOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListMicrosoftTeamsUserIdentitiesOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListMicrosoftTeamsUserIdentitiesOutput()
        value.nextToken = try reader["NextToken"].readIfPresent()
        value.teamsUserIdentities = try reader["TeamsUserIdentities"].readListIfPresent(memberReadingClosure: ChatbotClientTypes.TeamsUserIdentity.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension ListTagsForResourceOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListTagsForResourceOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListTagsForResourceOutput()
        value.tags = try reader["Tags"].readListIfPresent(memberReadingClosure: ChatbotClientTypes.Tag.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension TagResourceOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> TagResourceOutput {
        return TagResourceOutput()
    }
}

extension UntagResourceOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UntagResourceOutput {
        return UntagResourceOutput()
    }
}

extension UpdateAccountPreferencesOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdateAccountPreferencesOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = UpdateAccountPreferencesOutput()
        value.accountPreferences = try reader["AccountPreferences"].readIfPresent(with: ChatbotClientTypes.AccountPreferences.read(from:))
        return value
    }
}

extension UpdateChimeWebhookConfigurationOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdateChimeWebhookConfigurationOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = UpdateChimeWebhookConfigurationOutput()
        value.webhookConfiguration = try reader["WebhookConfiguration"].readIfPresent(with: ChatbotClientTypes.ChimeWebhookConfiguration.read(from:))
        return value
    }
}

extension UpdateMicrosoftTeamsChannelConfigurationOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdateMicrosoftTeamsChannelConfigurationOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = UpdateMicrosoftTeamsChannelConfigurationOutput()
        value.channelConfiguration = try reader["ChannelConfiguration"].readIfPresent(with: ChatbotClientTypes.TeamsChannelConfiguration.read(from:))
        return value
    }
}

extension UpdateSlackChannelConfigurationOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdateSlackChannelConfigurationOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = UpdateSlackChannelConfigurationOutput()
        value.channelConfiguration = try reader["ChannelConfiguration"].readIfPresent(with: ChatbotClientTypes.SlackChannelConfiguration.read(from:))
        return value
    }
}

enum CreateChimeWebhookConfigurationOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "CreateChimeWebhookConfigurationException": return try CreateChimeWebhookConfigurationException.makeError(baseError: baseError)
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            case "LimitExceededException": return try LimitExceededException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateMicrosoftTeamsChannelConfigurationOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "CreateTeamsChannelConfigurationException": return try CreateTeamsChannelConfigurationException.makeError(baseError: baseError)
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            case "LimitExceededException": return try LimitExceededException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateSlackChannelConfigurationOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "CreateSlackChannelConfigurationException": return try CreateSlackChannelConfigurationException.makeError(baseError: baseError)
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            case "LimitExceededException": return try LimitExceededException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteChimeWebhookConfigurationOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "DeleteChimeWebhookConfigurationException": return try DeleteChimeWebhookConfigurationException.makeError(baseError: baseError)
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteMicrosoftTeamsChannelConfigurationOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "DeleteTeamsChannelConfigurationException": return try DeleteTeamsChannelConfigurationException.makeError(baseError: baseError)
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteMicrosoftTeamsConfiguredTeamOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "DeleteTeamsConfiguredTeamException": return try DeleteTeamsConfiguredTeamException.makeError(baseError: baseError)
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteMicrosoftTeamsUserIdentityOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "DeleteMicrosoftTeamsUserIdentityException": return try DeleteMicrosoftTeamsUserIdentityException.makeError(baseError: baseError)
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteSlackChannelConfigurationOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "DeleteSlackChannelConfigurationException": return try DeleteSlackChannelConfigurationException.makeError(baseError: baseError)
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteSlackUserIdentityOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "DeleteSlackUserIdentityException": return try DeleteSlackUserIdentityException.makeError(baseError: baseError)
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteSlackWorkspaceAuthorizationOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "DeleteSlackWorkspaceAuthorizationFault": return try DeleteSlackWorkspaceAuthorizationFault.makeError(baseError: baseError)
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeChimeWebhookConfigurationsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "DescribeChimeWebhookConfigurationsException": return try DescribeChimeWebhookConfigurationsException.makeError(baseError: baseError)
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeSlackChannelConfigurationsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "DescribeSlackChannelConfigurationsException": return try DescribeSlackChannelConfigurationsException.makeError(baseError: baseError)
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeSlackUserIdentitiesOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "DescribeSlackUserIdentitiesException": return try DescribeSlackUserIdentitiesException.makeError(baseError: baseError)
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeSlackWorkspacesOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "DescribeSlackWorkspacesException": return try DescribeSlackWorkspacesException.makeError(baseError: baseError)
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetAccountPreferencesOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "GetAccountPreferencesException": return try GetAccountPreferencesException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetMicrosoftTeamsChannelConfigurationOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "GetTeamsChannelConfigurationException": return try GetTeamsChannelConfigurationException.makeError(baseError: baseError)
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListMicrosoftTeamsChannelConfigurationsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            case "ListTeamsChannelConfigurationsException": return try ListTeamsChannelConfigurationsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListMicrosoftTeamsConfiguredTeamsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            case "ListMicrosoftTeamsConfiguredTeamsException": return try ListMicrosoftTeamsConfiguredTeamsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListMicrosoftTeamsUserIdentitiesOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            case "ListMicrosoftTeamsUserIdentitiesException": return try ListMicrosoftTeamsUserIdentitiesException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListTagsForResourceOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServiceError": return try InternalServiceError.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum TagResourceOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServiceError": return try InternalServiceError.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            case "TooManyTagsException": return try TooManyTagsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UntagResourceOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServiceError": return try InternalServiceError.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdateAccountPreferencesOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            case "UpdateAccountPreferencesException": return try UpdateAccountPreferencesException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdateChimeWebhookConfigurationOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "UpdateChimeWebhookConfigurationException": return try UpdateChimeWebhookConfigurationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdateMicrosoftTeamsChannelConfigurationOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "UpdateTeamsChannelConfigurationException": return try UpdateTeamsChannelConfigurationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdateSlackChannelConfigurationOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "UpdateSlackChannelConfigurationException": return try UpdateSlackChannelConfigurationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

extension InvalidRequestException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> InvalidRequestException {
        let reader = baseError.errorBodyReader
        var value = InvalidRequestException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ConflictException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> ConflictException {
        let reader = baseError.errorBodyReader
        var value = ConflictException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension InvalidParameterException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> InvalidParameterException {
        let reader = baseError.errorBodyReader
        var value = InvalidParameterException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension LimitExceededException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> LimitExceededException {
        let reader = baseError.errorBodyReader
        var value = LimitExceededException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension CreateChimeWebhookConfigurationException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> CreateChimeWebhookConfigurationException {
        let reader = baseError.errorBodyReader
        var value = CreateChimeWebhookConfigurationException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension CreateTeamsChannelConfigurationException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> CreateTeamsChannelConfigurationException {
        let reader = baseError.errorBodyReader
        var value = CreateTeamsChannelConfigurationException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension CreateSlackChannelConfigurationException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> CreateSlackChannelConfigurationException {
        let reader = baseError.errorBodyReader
        var value = CreateSlackChannelConfigurationException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension DeleteChimeWebhookConfigurationException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> DeleteChimeWebhookConfigurationException {
        let reader = baseError.errorBodyReader
        var value = DeleteChimeWebhookConfigurationException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ResourceNotFoundException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> ResourceNotFoundException {
        let reader = baseError.errorBodyReader
        var value = ResourceNotFoundException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension DeleteTeamsChannelConfigurationException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> DeleteTeamsChannelConfigurationException {
        let reader = baseError.errorBodyReader
        var value = DeleteTeamsChannelConfigurationException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension DeleteTeamsConfiguredTeamException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> DeleteTeamsConfiguredTeamException {
        let reader = baseError.errorBodyReader
        var value = DeleteTeamsConfiguredTeamException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension DeleteMicrosoftTeamsUserIdentityException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> DeleteMicrosoftTeamsUserIdentityException {
        let reader = baseError.errorBodyReader
        var value = DeleteMicrosoftTeamsUserIdentityException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension DeleteSlackChannelConfigurationException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> DeleteSlackChannelConfigurationException {
        let reader = baseError.errorBodyReader
        var value = DeleteSlackChannelConfigurationException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension DeleteSlackUserIdentityException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> DeleteSlackUserIdentityException {
        let reader = baseError.errorBodyReader
        var value = DeleteSlackUserIdentityException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension DeleteSlackWorkspaceAuthorizationFault {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> DeleteSlackWorkspaceAuthorizationFault {
        let reader = baseError.errorBodyReader
        var value = DeleteSlackWorkspaceAuthorizationFault()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension DescribeChimeWebhookConfigurationsException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> DescribeChimeWebhookConfigurationsException {
        let reader = baseError.errorBodyReader
        var value = DescribeChimeWebhookConfigurationsException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension DescribeSlackChannelConfigurationsException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> DescribeSlackChannelConfigurationsException {
        let reader = baseError.errorBodyReader
        var value = DescribeSlackChannelConfigurationsException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension DescribeSlackUserIdentitiesException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> DescribeSlackUserIdentitiesException {
        let reader = baseError.errorBodyReader
        var value = DescribeSlackUserIdentitiesException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension DescribeSlackWorkspacesException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> DescribeSlackWorkspacesException {
        let reader = baseError.errorBodyReader
        var value = DescribeSlackWorkspacesException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension GetAccountPreferencesException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> GetAccountPreferencesException {
        let reader = baseError.errorBodyReader
        var value = GetAccountPreferencesException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension GetTeamsChannelConfigurationException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> GetTeamsChannelConfigurationException {
        let reader = baseError.errorBodyReader
        var value = GetTeamsChannelConfigurationException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ListTeamsChannelConfigurationsException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> ListTeamsChannelConfigurationsException {
        let reader = baseError.errorBodyReader
        var value = ListTeamsChannelConfigurationsException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ListMicrosoftTeamsConfiguredTeamsException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> ListMicrosoftTeamsConfiguredTeamsException {
        let reader = baseError.errorBodyReader
        var value = ListMicrosoftTeamsConfiguredTeamsException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ListMicrosoftTeamsUserIdentitiesException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> ListMicrosoftTeamsUserIdentitiesException {
        let reader = baseError.errorBodyReader
        var value = ListMicrosoftTeamsUserIdentitiesException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension InternalServiceError {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> InternalServiceError {
        let reader = baseError.errorBodyReader
        var value = InternalServiceError()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ServiceUnavailableException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> ServiceUnavailableException {
        let reader = baseError.errorBodyReader
        var value = ServiceUnavailableException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension TooManyTagsException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> TooManyTagsException {
        let reader = baseError.errorBodyReader
        var value = TooManyTagsException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension UpdateAccountPreferencesException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> UpdateAccountPreferencesException {
        let reader = baseError.errorBodyReader
        var value = UpdateAccountPreferencesException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension UpdateChimeWebhookConfigurationException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> UpdateChimeWebhookConfigurationException {
        let reader = baseError.errorBodyReader
        var value = UpdateChimeWebhookConfigurationException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension UpdateTeamsChannelConfigurationException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> UpdateTeamsChannelConfigurationException {
        let reader = baseError.errorBodyReader
        var value = UpdateTeamsChannelConfigurationException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension UpdateSlackChannelConfigurationException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> UpdateSlackChannelConfigurationException {
        let reader = baseError.errorBodyReader
        var value = UpdateSlackChannelConfigurationException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ChatbotClientTypes.ChimeWebhookConfiguration {

    static func read(from reader: SmithyJSON.Reader) throws -> ChatbotClientTypes.ChimeWebhookConfiguration {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ChatbotClientTypes.ChimeWebhookConfiguration()
        value.webhookDescription = try reader["WebhookDescription"].readIfPresent() ?? ""
        value.chatConfigurationArn = try reader["ChatConfigurationArn"].readIfPresent() ?? ""
        value.iamRoleArn = try reader["IamRoleArn"].readIfPresent() ?? ""
        value.snsTopicArns = try reader["SnsTopicArns"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        value.configurationName = try reader["ConfigurationName"].readIfPresent()
        value.loggingLevel = try reader["LoggingLevel"].readIfPresent()
        value.tags = try reader["Tags"].readListIfPresent(memberReadingClosure: ChatbotClientTypes.Tag.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension ChatbotClientTypes.Tag {

    static func write(value: ChatbotClientTypes.Tag?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["TagKey"].write(value.tagKey)
        try writer["TagValue"].write(value.tagValue)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> ChatbotClientTypes.Tag {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ChatbotClientTypes.Tag()
        value.tagKey = try reader["TagKey"].readIfPresent() ?? ""
        value.tagValue = try reader["TagValue"].readIfPresent() ?? ""
        return value
    }
}

extension ChatbotClientTypes.TeamsChannelConfiguration {

    static func read(from reader: SmithyJSON.Reader) throws -> ChatbotClientTypes.TeamsChannelConfiguration {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ChatbotClientTypes.TeamsChannelConfiguration()
        value.channelId = try reader["ChannelId"].readIfPresent() ?? ""
        value.channelName = try reader["ChannelName"].readIfPresent()
        value.teamId = try reader["TeamId"].readIfPresent() ?? ""
        value.teamName = try reader["TeamName"].readIfPresent()
        value.tenantId = try reader["TenantId"].readIfPresent() ?? ""
        value.chatConfigurationArn = try reader["ChatConfigurationArn"].readIfPresent() ?? ""
        value.iamRoleArn = try reader["IamRoleArn"].readIfPresent() ?? ""
        value.snsTopicArns = try reader["SnsTopicArns"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        value.configurationName = try reader["ConfigurationName"].readIfPresent()
        value.loggingLevel = try reader["LoggingLevel"].readIfPresent()
        value.guardrailPolicyArns = try reader["GuardrailPolicyArns"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.userAuthorizationRequired = try reader["UserAuthorizationRequired"].readIfPresent()
        value.tags = try reader["Tags"].readListIfPresent(memberReadingClosure: ChatbotClientTypes.Tag.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension ChatbotClientTypes.SlackChannelConfiguration {

    static func read(from reader: SmithyJSON.Reader) throws -> ChatbotClientTypes.SlackChannelConfiguration {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ChatbotClientTypes.SlackChannelConfiguration()
        value.slackTeamName = try reader["SlackTeamName"].readIfPresent() ?? ""
        value.slackTeamId = try reader["SlackTeamId"].readIfPresent() ?? ""
        value.slackChannelId = try reader["SlackChannelId"].readIfPresent() ?? ""
        value.slackChannelName = try reader["SlackChannelName"].readIfPresent() ?? ""
        value.chatConfigurationArn = try reader["ChatConfigurationArn"].readIfPresent() ?? ""
        value.iamRoleArn = try reader["IamRoleArn"].readIfPresent() ?? ""
        value.snsTopicArns = try reader["SnsTopicArns"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        value.configurationName = try reader["ConfigurationName"].readIfPresent()
        value.loggingLevel = try reader["LoggingLevel"].readIfPresent()
        value.guardrailPolicyArns = try reader["GuardrailPolicyArns"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.userAuthorizationRequired = try reader["UserAuthorizationRequired"].readIfPresent()
        value.tags = try reader["Tags"].readListIfPresent(memberReadingClosure: ChatbotClientTypes.Tag.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension ChatbotClientTypes.SlackUserIdentity {

    static func read(from reader: SmithyJSON.Reader) throws -> ChatbotClientTypes.SlackUserIdentity {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ChatbotClientTypes.SlackUserIdentity()
        value.iamRoleArn = try reader["IamRoleArn"].readIfPresent() ?? ""
        value.chatConfigurationArn = try reader["ChatConfigurationArn"].readIfPresent() ?? ""
        value.slackTeamId = try reader["SlackTeamId"].readIfPresent() ?? ""
        value.slackUserId = try reader["SlackUserId"].readIfPresent() ?? ""
        value.awsUserIdentity = try reader["AwsUserIdentity"].readIfPresent()
        return value
    }
}

extension ChatbotClientTypes.SlackWorkspace {

    static func read(from reader: SmithyJSON.Reader) throws -> ChatbotClientTypes.SlackWorkspace {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ChatbotClientTypes.SlackWorkspace()
        value.slackTeamId = try reader["SlackTeamId"].readIfPresent() ?? ""
        value.slackTeamName = try reader["SlackTeamName"].readIfPresent() ?? ""
        return value
    }
}

extension ChatbotClientTypes.AccountPreferences {

    static func read(from reader: SmithyJSON.Reader) throws -> ChatbotClientTypes.AccountPreferences {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ChatbotClientTypes.AccountPreferences()
        value.userAuthorizationRequired = try reader["UserAuthorizationRequired"].readIfPresent()
        value.trainingDataCollectionEnabled = try reader["TrainingDataCollectionEnabled"].readIfPresent()
        return value
    }
}

extension ChatbotClientTypes.ConfiguredTeam {

    static func read(from reader: SmithyJSON.Reader) throws -> ChatbotClientTypes.ConfiguredTeam {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ChatbotClientTypes.ConfiguredTeam()
        value.tenantId = try reader["TenantId"].readIfPresent() ?? ""
        value.teamId = try reader["TeamId"].readIfPresent() ?? ""
        value.teamName = try reader["TeamName"].readIfPresent()
        return value
    }
}

extension ChatbotClientTypes.TeamsUserIdentity {

    static func read(from reader: SmithyJSON.Reader) throws -> ChatbotClientTypes.TeamsUserIdentity {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ChatbotClientTypes.TeamsUserIdentity()
        value.iamRoleArn = try reader["IamRoleArn"].readIfPresent() ?? ""
        value.chatConfigurationArn = try reader["ChatConfigurationArn"].readIfPresent() ?? ""
        value.teamId = try reader["TeamId"].readIfPresent() ?? ""
        value.userId = try reader["UserId"].readIfPresent()
        value.awsUserIdentity = try reader["AwsUserIdentity"].readIfPresent()
        value.teamsChannelId = try reader["TeamsChannelId"].readIfPresent()
        value.teamsTenantId = try reader["TeamsTenantId"].readIfPresent()
        return value
    }
}

public enum ChatbotClientTypes {}
