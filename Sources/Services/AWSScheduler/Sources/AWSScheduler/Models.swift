//
// Copyright Amazon.com Inc. or its affiliates.
// All Rights Reserved.
//
// SPDX-License-Identifier: Apache-2.0
//

// Code generated by smithy-swift-codegen. DO NOT EDIT!

@_spi(SmithyReadWrite) import ClientRuntime
import Foundation
import class SmithyHTTPAPI.HTTPResponse
@_spi(SmithyReadWrite) import class SmithyJSON.Reader
@_spi(SmithyReadWrite) import class SmithyJSON.Writer
import enum ClientRuntime.ErrorFault
import enum Smithy.ClientError
import enum SmithyReadWrite.ReaderError
@_spi(SmithyReadWrite) import enum SmithyReadWrite.ReadingClosures
@_spi(SmithyReadWrite) import enum SmithyReadWrite.WritingClosures
@_spi(SmithyTimestamps) import enum SmithyTimestamps.TimestampFormat
@_spi(SmithyReadWrite) import func SmithyReadWrite.mapReadingClosure
@_spi(SmithyReadWrite) import func SmithyReadWrite.mapWritingClosure
import protocol AWSClientRuntime.AWSServiceError
import protocol ClientRuntime.HTTPError
import protocol ClientRuntime.ModeledError
@_spi(SmithyReadWrite) import protocol SmithyReadWrite.SmithyReader
@_spi(SmithyReadWrite) import protocol SmithyReadWrite.SmithyWriter
@_spi(SmithyReadWrite) import struct AWSClientRuntime.RestJSONError
@_spi(UnknownAWSHTTPServiceError) import struct AWSClientRuntime.UnknownAWSHTTPServiceError
import struct Smithy.URIQueryItem

extension SchedulerClientTypes {

    public enum ActionAfterCompletion: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case delete
        case `none`
        case sdkUnknown(Swift.String)

        public static var allCases: [ActionAfterCompletion] {
            return [
                .delete,
                .none
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .delete: return "DELETE"
            case .none: return "NONE"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension SchedulerClientTypes {

    public enum AssignPublicIp: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case disabled
        case enabled
        case sdkUnknown(Swift.String)

        public static var allCases: [AssignPublicIp] {
            return [
                .disabled,
                .enabled
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .disabled: return "DISABLED"
            case .enabled: return "ENABLED"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

/// Unexpected error encountered while processing the request.
public struct InternalServerException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// This member is required.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InternalServerException" }
    public static var fault: ClientRuntime.ErrorFault { .server }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The request references a resource which does not exist.
public struct ResourceNotFoundException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// This member is required.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ResourceNotFoundException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The request was denied due to request throttling.
public struct ThrottlingException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// This member is required.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ThrottlingException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The input fails to satisfy the constraints specified by an AWS service.
public struct ValidationException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// This member is required.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ValidationException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

public struct ListTagsForResourceInput {
    /// The ARN of the EventBridge Scheduler resource for which you want to view tags.
    /// This member is required.
    public var resourceArn: Swift.String?

    public init(
        resourceArn: Swift.String? = nil
    )
    {
        self.resourceArn = resourceArn
    }
}

extension SchedulerClientTypes {
    /// Tag to associate with a schedule group.
    public struct Tag {
        /// The key for the tag.
        /// This member is required.
        public var key: Swift.String?
        /// The value for the tag.
        /// This member is required.
        public var value: Swift.String?

        public init(
            key: Swift.String? = nil,
            value: Swift.String? = nil
        )
        {
            self.key = key
            self.value = value
        }
    }

}

public struct ListTagsForResourceOutput {
    /// The list of tags associated with the specified resource.
    public var tags: [SchedulerClientTypes.Tag]?

    public init(
        tags: [SchedulerClientTypes.Tag]? = nil
    )
    {
        self.tags = tags
    }
}

/// Updating or deleting the resource can cause an inconsistent state.
public struct ConflictException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// This member is required.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ConflictException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The request exceeds a service quota.
public struct ServiceQuotaExceededException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// This member is required.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ServiceQuotaExceededException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension SchedulerClientTypes {

    public enum FlexibleTimeWindowMode: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case flexible
        case off
        case sdkUnknown(Swift.String)

        public static var allCases: [FlexibleTimeWindowMode] {
            return [
                .flexible,
                .off
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .flexible: return "FLEXIBLE"
            case .off: return "OFF"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension SchedulerClientTypes {
    /// Allows you to configure a time window during which EventBridge Scheduler invokes the schedule.
    public struct FlexibleTimeWindow {
        /// The maximum time window during which a schedule can be invoked.
        public var maximumWindowInMinutes: Swift.Int?
        /// Determines whether the schedule is invoked within a flexible time window.
        /// This member is required.
        public var mode: SchedulerClientTypes.FlexibleTimeWindowMode?

        public init(
            maximumWindowInMinutes: Swift.Int? = nil,
            mode: SchedulerClientTypes.FlexibleTimeWindowMode? = nil
        )
        {
            self.maximumWindowInMinutes = maximumWindowInMinutes
            self.mode = mode
        }
    }

}

extension SchedulerClientTypes {

    public enum ScheduleState: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case disabled
        case enabled
        case sdkUnknown(Swift.String)

        public static var allCases: [ScheduleState] {
            return [
                .disabled,
                .enabled
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .disabled: return "DISABLED"
            case .enabled: return "ENABLED"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension SchedulerClientTypes {
    /// An object that contains information about an Amazon SQS queue that EventBridge Scheduler uses as a dead-letter queue for your schedule. If specified, EventBridge Scheduler delivers failed events that could not be successfully delivered to a target to the queue.
    public struct DeadLetterConfig {
        /// The Amazon Resource Name (ARN) of the SQS queue specified as the destination for the dead-letter queue.
        public var arn: Swift.String?

        public init(
            arn: Swift.String? = nil
        )
        {
            self.arn = arn
        }
    }

}

extension SchedulerClientTypes {
    /// The details of a capacity provider strategy.
    public struct CapacityProviderStrategyItem {
        /// The base value designates how many tasks, at a minimum, to run on the specified capacity provider. Only one capacity provider in a capacity provider strategy can have a base defined. If no value is specified, the default value of 0 is used.
        public var base: Swift.Int
        /// The short name of the capacity provider.
        /// This member is required.
        public var capacityProvider: Swift.String?
        /// The weight value designates the relative percentage of the total number of tasks launched that should use the specified capacity provider. The weight value is taken into consideration after the base value, if defined, is satisfied.
        public var weight: Swift.Int

        public init(
            base: Swift.Int = 0,
            capacityProvider: Swift.String? = nil,
            weight: Swift.Int = 0
        )
        {
            self.base = base
            self.capacityProvider = capacityProvider
            self.weight = weight
        }
    }

}

extension SchedulerClientTypes {

    public enum LaunchType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case ec2
        case external
        case fargate
        case sdkUnknown(Swift.String)

        public static var allCases: [LaunchType] {
            return [
                .ec2,
                .external,
                .fargate
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .ec2: return "EC2"
            case .external: return "EXTERNAL"
            case .fargate: return "FARGATE"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension SchedulerClientTypes {
    /// This structure specifies the VPC subnets and security groups for the task, and whether a public IP address is to be used. This structure is relevant only for ECS tasks that use the awsvpc network mode.
    public struct AwsVpcConfiguration {
        /// Specifies whether the task's elastic network interface receives a public IP address. You can specify ENABLED only when LaunchType in EcsParameters is set to FARGATE.
        public var assignPublicIp: SchedulerClientTypes.AssignPublicIp?
        /// Specifies the security groups associated with the task. These security groups must all be in the same VPC. You can specify as many as five security groups. If you do not specify a security group, the default security group for the VPC is used.
        public var securityGroups: [Swift.String]?
        /// Specifies the subnets associated with the task. These subnets must all be in the same VPC. You can specify as many as 16 subnets.
        /// This member is required.
        public var subnets: [Swift.String]?

        public init(
            assignPublicIp: SchedulerClientTypes.AssignPublicIp? = nil,
            securityGroups: [Swift.String]? = nil,
            subnets: [Swift.String]? = nil
        )
        {
            self.assignPublicIp = assignPublicIp
            self.securityGroups = securityGroups
            self.subnets = subnets
        }
    }

}

extension SchedulerClientTypes {
    /// Specifies the network configuration for an ECS task.
    public struct NetworkConfiguration {
        /// Specifies the Amazon VPC subnets and security groups for the task, and whether a public IP address is to be used. This structure is relevant only for ECS tasks that use the awsvpc network mode.
        public var awsvpcConfiguration: SchedulerClientTypes.AwsVpcConfiguration?

        public init(
            awsvpcConfiguration: SchedulerClientTypes.AwsVpcConfiguration? = nil
        )
        {
            self.awsvpcConfiguration = awsvpcConfiguration
        }
    }

}

extension SchedulerClientTypes {

    public enum PlacementConstraintType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case distinctInstance
        case memberOf
        case sdkUnknown(Swift.String)

        public static var allCases: [PlacementConstraintType] {
            return [
                .distinctInstance,
                .memberOf
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .distinctInstance: return "distinctInstance"
            case .memberOf: return "memberOf"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension SchedulerClientTypes {
    /// An object representing a constraint on task placement.
    public struct PlacementConstraint {
        /// A cluster query language expression to apply to the constraint. You cannot specify an expression if the constraint type is distinctInstance. For more information, see [Cluster query language](https://docs.aws.amazon.com/latest/developerguide/cluster-query-language.html) in the Amazon ECS Developer Guide.
        public var expression: Swift.String?
        /// The type of constraint. Use distinctInstance to ensure that each task in a particular group is running on a different container instance. Use memberOf to restrict the selection to a group of valid candidates.
        public var type: SchedulerClientTypes.PlacementConstraintType?

        public init(
            expression: Swift.String? = nil,
            type: SchedulerClientTypes.PlacementConstraintType? = nil
        )
        {
            self.expression = expression
            self.type = type
        }
    }

}

extension SchedulerClientTypes {

    public enum PlacementStrategyType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case binpack
        case random
        case spread
        case sdkUnknown(Swift.String)

        public static var allCases: [PlacementStrategyType] {
            return [
                .binpack,
                .random,
                .spread
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .binpack: return "binpack"
            case .random: return "random"
            case .spread: return "spread"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension SchedulerClientTypes {
    /// The task placement strategy for a task or service.
    public struct PlacementStrategy {
        /// The field to apply the placement strategy against. For the spread placement strategy, valid values are instanceId (or instanceId, which has the same effect), or any platform or custom attribute that is applied to a container instance, such as attribute:ecs.availability-zone. For the binpack placement strategy, valid values are cpu and memory. For the random placement strategy, this field is not used.
        public var field: Swift.String?
        /// The type of placement strategy. The random placement strategy randomly places tasks on available candidates. The spread placement strategy spreads placement across available candidates evenly based on the field parameter. The binpack strategy places tasks on available candidates that have the least available amount of the resource that is specified with the field parameter. For example, if you binpack on memory, a task is placed on the instance with the least amount of remaining memory (but still enough to run the task).
        public var type: SchedulerClientTypes.PlacementStrategyType?

        public init(
            field: Swift.String? = nil,
            type: SchedulerClientTypes.PlacementStrategyType? = nil
        )
        {
            self.field = field
            self.type = type
        }
    }

}

extension SchedulerClientTypes {

    public enum PropagateTags: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case taskDefinition
        case sdkUnknown(Swift.String)

        public static var allCases: [PropagateTags] {
            return [
                .taskDefinition
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .taskDefinition: return "TASK_DEFINITION"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension SchedulerClientTypes {
    /// The templated target type for the Amazon ECS [RunTask](https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_RunTask.html) API operation.
    public struct EcsParameters {
        /// The capacity provider strategy to use for the task.
        public var capacityProviderStrategy: [SchedulerClientTypes.CapacityProviderStrategyItem]?
        /// Specifies whether to enable Amazon ECS managed tags for the task. For more information, see [Tagging Your Amazon ECS Resources](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-using-tags.html) in the Amazon ECS Developer Guide.
        public var enableECSManagedTags: Swift.Bool?
        /// Whether or not to enable the execute command functionality for the containers in this task. If true, this enables execute command functionality on all containers in the task.
        public var enableExecuteCommand: Swift.Bool?
        /// Specifies an ECS task group for the task. The maximum length is 255 characters.
        public var group: Swift.String?
        /// Specifies the launch type on which your task is running. The launch type that you specify here must match one of the launch type (compatibilities) of the target task. The FARGATE value is supported only in the Regions where Fargate with Amazon ECS is supported. For more information, see [AWS Fargate on Amazon ECS](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/AWS_Fargate.html) in the Amazon ECS Developer Guide.
        public var launchType: SchedulerClientTypes.LaunchType?
        /// This structure specifies the network configuration for an ECS task.
        public var networkConfiguration: SchedulerClientTypes.NetworkConfiguration?
        /// An array of placement constraint objects to use for the task. You can specify up to 10 constraints per task (including constraints in the task definition and those specified at runtime).
        public var placementConstraints: [SchedulerClientTypes.PlacementConstraint]?
        /// The task placement strategy for a task or service.
        public var placementStrategy: [SchedulerClientTypes.PlacementStrategy]?
        /// Specifies the platform version for the task. Specify only the numeric portion of the platform version, such as 1.1.0.
        public var platformVersion: Swift.String?
        /// Specifies whether to propagate the tags from the task definition to the task. If no value is specified, the tags are not propagated. Tags can only be propagated to the task during task creation. To add tags to a task after task creation, use Amazon ECS's [TagResource](https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_TagResource.html) API action.
        public var propagateTags: SchedulerClientTypes.PropagateTags?
        /// The reference ID to use for the task.
        public var referenceId: Swift.String?
        /// The metadata that you apply to the task to help you categorize and organize them. Each tag consists of a key and an optional value, both of which you define. For more information, see [RunTask](https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_RunTask.html) in the Amazon ECS API Reference.
        public var tags: [[Swift.String: Swift.String]]?
        /// The number of tasks to create based on TaskDefinition. The default is 1.
        public var taskCount: Swift.Int?
        /// The Amazon Resource Name (ARN) of the task definition to use if the event target is an Amazon ECS task.
        /// This member is required.
        public var taskDefinitionArn: Swift.String?

        public init(
            capacityProviderStrategy: [SchedulerClientTypes.CapacityProviderStrategyItem]? = nil,
            enableECSManagedTags: Swift.Bool? = nil,
            enableExecuteCommand: Swift.Bool? = nil,
            group: Swift.String? = nil,
            launchType: SchedulerClientTypes.LaunchType? = nil,
            networkConfiguration: SchedulerClientTypes.NetworkConfiguration? = nil,
            placementConstraints: [SchedulerClientTypes.PlacementConstraint]? = nil,
            placementStrategy: [SchedulerClientTypes.PlacementStrategy]? = nil,
            platformVersion: Swift.String? = nil,
            propagateTags: SchedulerClientTypes.PropagateTags? = nil,
            referenceId: Swift.String? = nil,
            tags: [[Swift.String: Swift.String]]? = nil,
            taskCount: Swift.Int? = nil,
            taskDefinitionArn: Swift.String? = nil
        )
        {
            self.capacityProviderStrategy = capacityProviderStrategy
            self.enableECSManagedTags = enableECSManagedTags
            self.enableExecuteCommand = enableExecuteCommand
            self.group = group
            self.launchType = launchType
            self.networkConfiguration = networkConfiguration
            self.placementConstraints = placementConstraints
            self.placementStrategy = placementStrategy
            self.platformVersion = platformVersion
            self.propagateTags = propagateTags
            self.referenceId = referenceId
            self.tags = tags
            self.taskCount = taskCount
            self.taskDefinitionArn = taskDefinitionArn
        }
    }

}

extension SchedulerClientTypes {
    /// The templated target type for the EventBridge [PutEvents](https://docs.aws.amazon.com/eventbridge/latest/APIReference/API_PutEvents.html) API operation.
    public struct EventBridgeParameters {
        /// A free-form string, with a maximum of 128 characters, used to decide what fields to expect in the event detail.
        /// This member is required.
        public var detailType: Swift.String?
        /// The source of the event.
        /// This member is required.
        public var source: Swift.String?

        public init(
            detailType: Swift.String? = nil,
            source: Swift.String? = nil
        )
        {
            self.detailType = detailType
            self.source = source
        }
    }

}

extension SchedulerClientTypes {
    /// The templated target type for the Amazon Kinesis [PutRecord] API operation.
    public struct KinesisParameters {
        /// Specifies the shard to which EventBridge Scheduler sends the event. For more information, see [Amazon Kinesis Data Streams terminology and concepts](https://docs.aws.amazon.com/streams/latest/dev/key-concepts.html) in the Amazon Kinesis Streams Developer Guide.
        /// This member is required.
        public var partitionKey: Swift.String?

        public init(
            partitionKey: Swift.String? = nil
        )
        {
            self.partitionKey = partitionKey
        }
    }

}

extension SchedulerClientTypes {
    /// A RetryPolicy object that includes information about the retry policy settings, including the maximum age of an event, and the maximum number of times EventBridge Scheduler will try to deliver the event to a target.
    public struct RetryPolicy {
        /// The maximum amount of time, in seconds, to continue to make retry attempts.
        public var maximumEventAgeInSeconds: Swift.Int?
        /// The maximum number of retry attempts to make before the request fails. Retry attempts with exponential backoff continue until either the maximum number of attempts is made or until the duration of the MaximumEventAgeInSeconds is reached.
        public var maximumRetryAttempts: Swift.Int?

        public init(
            maximumEventAgeInSeconds: Swift.Int? = nil,
            maximumRetryAttempts: Swift.Int? = nil
        )
        {
            self.maximumEventAgeInSeconds = maximumEventAgeInSeconds
            self.maximumRetryAttempts = maximumRetryAttempts
        }
    }

}

extension SchedulerClientTypes {
    /// The name and value pair of a parameter to use to start execution of a SageMaker Model Building Pipeline.
    public struct SageMakerPipelineParameter {
        /// Name of parameter to start execution of a SageMaker Model Building Pipeline.
        /// This member is required.
        public var name: Swift.String?
        /// Value of parameter to start execution of a SageMaker Model Building Pipeline.
        /// This member is required.
        public var value: Swift.String?

        public init(
            name: Swift.String? = nil,
            value: Swift.String? = nil
        )
        {
            self.name = name
            self.value = value
        }
    }

}

extension SchedulerClientTypes {
    /// The templated target type for the Amazon SageMaker [StartPipelineExecution](https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_StartPipelineExecution.html) API operation.
    public struct SageMakerPipelineParameters {
        /// List of parameter names and values to use when executing the SageMaker Model Building Pipeline.
        public var pipelineParameterList: [SchedulerClientTypes.SageMakerPipelineParameter]?

        public init(
            pipelineParameterList: [SchedulerClientTypes.SageMakerPipelineParameter]? = nil
        )
        {
            self.pipelineParameterList = pipelineParameterList
        }
    }

}

extension SchedulerClientTypes {
    /// The templated target type for the Amazon SQS [SendMessage](https://docs.aws.amazon.com/AWSSimpleQueueService/latest/APIReference/API_SendMessage.html) API operation. Contains the message group ID to use when the target is a FIFO queue. If you specify an Amazon SQS FIFO queue as a target, the queue must have content-based deduplication enabled. For more information, see [Using the Amazon SQS message deduplication ID](https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/using-messagededuplicationid-property.html) in the Amazon SQS Developer Guide.
    public struct SqsParameters {
        /// The FIFO message group ID to use as the target.
        public var messageGroupId: Swift.String?

        public init(
            messageGroupId: Swift.String? = nil
        )
        {
            self.messageGroupId = messageGroupId
        }
    }

}

extension SchedulerClientTypes {
    /// The schedule's target. EventBridge Scheduler supports templated target that invoke common API operations, as well as universal targets that you can customize to invoke over 6,000 API operations across more than 270 services. You can only specify one templated or universal target for a schedule.
    public struct Target {
        /// The Amazon Resource Name (ARN) of the target.
        /// This member is required.
        public var arn: Swift.String?
        /// An object that contains information about an Amazon SQS queue that EventBridge Scheduler uses as a dead-letter queue for your schedule. If specified, EventBridge Scheduler delivers failed events that could not be successfully delivered to a target to the queue.
        public var deadLetterConfig: SchedulerClientTypes.DeadLetterConfig?
        /// The templated target type for the Amazon ECS [RunTask](https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_RunTask.html) API operation.
        public var ecsParameters: SchedulerClientTypes.EcsParameters?
        /// The templated target type for the EventBridge [PutEvents](https://docs.aws.amazon.com/eventbridge/latest/APIReference/API_PutEvents.html) API operation.
        public var eventBridgeParameters: SchedulerClientTypes.EventBridgeParameters?
        /// The text, or well-formed JSON, passed to the target. If you are configuring a templated Lambda, AWS Step Functions, or Amazon EventBridge target, the input must be a well-formed JSON. For all other target types, a JSON is not required. If you do not specify anything for this field, EventBridge Scheduler delivers a default notification to the target.
        public var input: Swift.String?
        /// The templated target type for the Amazon Kinesis [PutRecord] API operation.
        public var kinesisParameters: SchedulerClientTypes.KinesisParameters?
        /// A RetryPolicy object that includes information about the retry policy settings, including the maximum age of an event, and the maximum number of times EventBridge Scheduler will try to deliver the event to a target.
        public var retryPolicy: SchedulerClientTypes.RetryPolicy?
        /// The Amazon Resource Name (ARN) of the IAM role that EventBridge Scheduler will use for this target when the schedule is invoked.
        /// This member is required.
        public var roleArn: Swift.String?
        /// The templated target type for the Amazon SageMaker [StartPipelineExecution](https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_StartPipelineExecution.html) API operation.
        public var sageMakerPipelineParameters: SchedulerClientTypes.SageMakerPipelineParameters?
        /// The templated target type for the Amazon SQS [SendMessage](https://docs.aws.amazon.com/AWSSimpleQueueService/latest/APIReference/API_SendMessage.html) API operation. Contains the message group ID to use when the target is a FIFO queue. If you specify an Amazon SQS FIFO queue as a target, the queue must have content-based deduplication enabled. For more information, see [Using the Amazon SQS message deduplication ID](https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/using-messagededuplicationid-property.html) in the Amazon SQS Developer Guide.
        public var sqsParameters: SchedulerClientTypes.SqsParameters?

        public init(
            arn: Swift.String? = nil,
            deadLetterConfig: SchedulerClientTypes.DeadLetterConfig? = nil,
            ecsParameters: SchedulerClientTypes.EcsParameters? = nil,
            eventBridgeParameters: SchedulerClientTypes.EventBridgeParameters? = nil,
            input: Swift.String? = nil,
            kinesisParameters: SchedulerClientTypes.KinesisParameters? = nil,
            retryPolicy: SchedulerClientTypes.RetryPolicy? = nil,
            roleArn: Swift.String? = nil,
            sageMakerPipelineParameters: SchedulerClientTypes.SageMakerPipelineParameters? = nil,
            sqsParameters: SchedulerClientTypes.SqsParameters? = nil
        )
        {
            self.arn = arn
            self.deadLetterConfig = deadLetterConfig
            self.ecsParameters = ecsParameters
            self.eventBridgeParameters = eventBridgeParameters
            self.input = input
            self.kinesisParameters = kinesisParameters
            self.retryPolicy = retryPolicy
            self.roleArn = roleArn
            self.sageMakerPipelineParameters = sageMakerPipelineParameters
            self.sqsParameters = sqsParameters
        }
    }

}

public struct CreateScheduleInput {
    /// Specifies the action that EventBridge Scheduler applies to the schedule after the schedule completes invoking the target.
    public var actionAfterCompletion: SchedulerClientTypes.ActionAfterCompletion?
    /// Unique, case-sensitive identifier you provide to ensure the idempotency of the request. If you do not specify a client token, EventBridge Scheduler uses a randomly generated token for the request to ensure idempotency.
    public var clientToken: Swift.String?
    /// The description you specify for the schedule.
    public var description: Swift.String?
    /// The date, in UTC, before which the schedule can invoke its target. Depending on the schedule's recurrence expression, invocations might stop on, or before, the EndDate you specify. EventBridge Scheduler ignores EndDate for one-time schedules.
    public var endDate: Foundation.Date?
    /// Allows you to configure a time window during which EventBridge Scheduler invokes the schedule.
    /// This member is required.
    public var flexibleTimeWindow: SchedulerClientTypes.FlexibleTimeWindow?
    /// The name of the schedule group to associate with this schedule. If you omit this, the default schedule group is used.
    public var groupName: Swift.String?
    /// The Amazon Resource Name (ARN) for the customer managed KMS key that EventBridge Scheduler will use to encrypt and decrypt your data.
    public var kmsKeyArn: Swift.String?
    /// The name of the schedule that you are creating.
    /// This member is required.
    public var name: Swift.String?
    /// The expression that defines when the schedule runs. The following formats are supported.
    ///
    /// * at expression - at(yyyy-mm-ddThh:mm:ss)
    ///
    /// * rate expression - rate(value unit)
    ///
    /// * cron expression - cron(fields)
    ///
    ///
    /// You can use at expressions to create one-time schedules that invoke a target once, at the time and in the time zone, that you specify. You can use rate and cron expressions to create recurring schedules. Rate-based schedules are useful when you want to invoke a target at regular intervals, such as every 15 minutes or every five days. Cron-based schedules are useful when you want to invoke a target periodically at a specific time, such as at 8:00 am (UTC+0) every 1st day of the month. A cron expression consists of six fields separated by white spaces: (minutes hours day_of_month month day_of_week year). A rate expression consists of a value as a positive integer, and a unit with the following options: minute | minutes | hour | hours | day | days For more information and examples, see [Schedule types on EventBridge Scheduler](https://docs.aws.amazon.com/scheduler/latest/UserGuide/schedule-types.html) in the EventBridge Scheduler User Guide.
    /// This member is required.
    public var scheduleExpression: Swift.String?
    /// The timezone in which the scheduling expression is evaluated.
    public var scheduleExpressionTimezone: Swift.String?
    /// The date, in UTC, after which the schedule can begin invoking its target. Depending on the schedule's recurrence expression, invocations might occur on, or after, the StartDate you specify. EventBridge Scheduler ignores StartDate for one-time schedules.
    public var startDate: Foundation.Date?
    /// Specifies whether the schedule is enabled or disabled.
    public var state: SchedulerClientTypes.ScheduleState?
    /// The schedule's target.
    /// This member is required.
    public var target: SchedulerClientTypes.Target?

    public init(
        actionAfterCompletion: SchedulerClientTypes.ActionAfterCompletion? = nil,
        clientToken: Swift.String? = nil,
        description: Swift.String? = nil,
        endDate: Foundation.Date? = nil,
        flexibleTimeWindow: SchedulerClientTypes.FlexibleTimeWindow? = nil,
        groupName: Swift.String? = nil,
        kmsKeyArn: Swift.String? = nil,
        name: Swift.String? = nil,
        scheduleExpression: Swift.String? = nil,
        scheduleExpressionTimezone: Swift.String? = nil,
        startDate: Foundation.Date? = nil,
        state: SchedulerClientTypes.ScheduleState? = nil,
        target: SchedulerClientTypes.Target? = nil
    )
    {
        self.actionAfterCompletion = actionAfterCompletion
        self.clientToken = clientToken
        self.description = description
        self.endDate = endDate
        self.flexibleTimeWindow = flexibleTimeWindow
        self.groupName = groupName
        self.kmsKeyArn = kmsKeyArn
        self.name = name
        self.scheduleExpression = scheduleExpression
        self.scheduleExpressionTimezone = scheduleExpressionTimezone
        self.startDate = startDate
        self.state = state
        self.target = target
    }
}

public struct CreateScheduleOutput {
    /// The Amazon Resource Name (ARN) of the schedule.
    /// This member is required.
    public var scheduleArn: Swift.String?

    public init(
        scheduleArn: Swift.String? = nil
    )
    {
        self.scheduleArn = scheduleArn
    }
}

public struct DeleteScheduleInput {
    /// Unique, case-sensitive identifier you provide to ensure the idempotency of the request. If you do not specify a client token, EventBridge Scheduler uses a randomly generated token for the request to ensure idempotency.
    public var clientToken: Swift.String?
    /// The name of the schedule group associated with this schedule. If you omit this, the default schedule group is used.
    public var groupName: Swift.String?
    /// The name of the schedule to delete.
    /// This member is required.
    public var name: Swift.String?

    public init(
        clientToken: Swift.String? = nil,
        groupName: Swift.String? = nil,
        name: Swift.String? = nil
    )
    {
        self.clientToken = clientToken
        self.groupName = groupName
        self.name = name
    }
}

public struct DeleteScheduleOutput {

    public init() { }
}

public struct GetScheduleInput {
    /// The name of the schedule group associated with this schedule. If you omit this, EventBridge Scheduler assumes that the schedule is associated with the default group.
    public var groupName: Swift.String?
    /// The name of the schedule to retrieve.
    /// This member is required.
    public var name: Swift.String?

    public init(
        groupName: Swift.String? = nil,
        name: Swift.String? = nil
    )
    {
        self.groupName = groupName
        self.name = name
    }
}

public struct GetScheduleOutput {
    /// Indicates the action that EventBridge Scheduler applies to the schedule after the schedule completes invoking the target.
    public var actionAfterCompletion: SchedulerClientTypes.ActionAfterCompletion?
    /// The Amazon Resource Name (ARN) of the schedule.
    public var arn: Swift.String?
    /// The time at which the schedule was created.
    public var creationDate: Foundation.Date?
    /// The description of the schedule.
    public var description: Swift.String?
    /// The date, in UTC, before which the schedule can invoke its target. Depending on the schedule's recurrence expression, invocations might stop on, or before, the EndDate you specify. EventBridge Scheduler ignores EndDate for one-time schedules.
    public var endDate: Foundation.Date?
    /// Allows you to configure a time window during which EventBridge Scheduler invokes the schedule.
    public var flexibleTimeWindow: SchedulerClientTypes.FlexibleTimeWindow?
    /// The name of the schedule group associated with this schedule.
    public var groupName: Swift.String?
    /// The ARN for a customer managed KMS Key that is be used to encrypt and decrypt your data.
    public var kmsKeyArn: Swift.String?
    /// The time at which the schedule was last modified.
    public var lastModificationDate: Foundation.Date?
    /// The name of the schedule.
    public var name: Swift.String?
    /// The expression that defines when the schedule runs. The following formats are supported.
    ///
    /// * at expression - at(yyyy-mm-ddThh:mm:ss)
    ///
    /// * rate expression - rate(value unit)
    ///
    /// * cron expression - cron(fields)
    ///
    ///
    /// You can use at expressions to create one-time schedules that invoke a target once, at the time and in the time zone, that you specify. You can use rate and cron expressions to create recurring schedules. Rate-based schedules are useful when you want to invoke a target at regular intervals, such as every 15 minutes or every five days. Cron-based schedules are useful when you want to invoke a target periodically at a specific time, such as at 8:00 am (UTC+0) every 1st day of the month. A cron expression consists of six fields separated by white spaces: (minutes hours day_of_month month day_of_week year). A rate expression consists of a value as a positive integer, and a unit with the following options: minute | minutes | hour | hours | day | days For more information and examples, see [Schedule types on EventBridge Scheduler](https://docs.aws.amazon.com/scheduler/latest/UserGuide/schedule-types.html) in the EventBridge Scheduler User Guide.
    public var scheduleExpression: Swift.String?
    /// The timezone in which the scheduling expression is evaluated.
    public var scheduleExpressionTimezone: Swift.String?
    /// The date, in UTC, after which the schedule can begin invoking its target. Depending on the schedule's recurrence expression, invocations might occur on, or after, the StartDate you specify. EventBridge Scheduler ignores StartDate for one-time schedules.
    public var startDate: Foundation.Date?
    /// Specifies whether the schedule is enabled or disabled.
    public var state: SchedulerClientTypes.ScheduleState?
    /// The schedule target.
    public var target: SchedulerClientTypes.Target?

    public init(
        actionAfterCompletion: SchedulerClientTypes.ActionAfterCompletion? = nil,
        arn: Swift.String? = nil,
        creationDate: Foundation.Date? = nil,
        description: Swift.String? = nil,
        endDate: Foundation.Date? = nil,
        flexibleTimeWindow: SchedulerClientTypes.FlexibleTimeWindow? = nil,
        groupName: Swift.String? = nil,
        kmsKeyArn: Swift.String? = nil,
        lastModificationDate: Foundation.Date? = nil,
        name: Swift.String? = nil,
        scheduleExpression: Swift.String? = nil,
        scheduleExpressionTimezone: Swift.String? = nil,
        startDate: Foundation.Date? = nil,
        state: SchedulerClientTypes.ScheduleState? = nil,
        target: SchedulerClientTypes.Target? = nil
    )
    {
        self.actionAfterCompletion = actionAfterCompletion
        self.arn = arn
        self.creationDate = creationDate
        self.description = description
        self.endDate = endDate
        self.flexibleTimeWindow = flexibleTimeWindow
        self.groupName = groupName
        self.kmsKeyArn = kmsKeyArn
        self.lastModificationDate = lastModificationDate
        self.name = name
        self.scheduleExpression = scheduleExpression
        self.scheduleExpressionTimezone = scheduleExpressionTimezone
        self.startDate = startDate
        self.state = state
        self.target = target
    }
}

public struct ListSchedulesInput {
    /// If specified, only lists the schedules whose associated schedule group matches the given filter.
    public var groupName: Swift.String?
    /// If specified, limits the number of results returned by this operation. The operation also returns a NextToken which you can use in a subsequent operation to retrieve the next set of results.
    public var maxResults: Swift.Int?
    /// Schedule name prefix to return the filtered list of resources.
    public var namePrefix: Swift.String?
    /// The token returned by a previous call to retrieve the next set of results.
    public var nextToken: Swift.String?
    /// If specified, only lists the schedules whose current state matches the given filter.
    public var state: SchedulerClientTypes.ScheduleState?

    public init(
        groupName: Swift.String? = nil,
        maxResults: Swift.Int? = nil,
        namePrefix: Swift.String? = nil,
        nextToken: Swift.String? = nil,
        state: SchedulerClientTypes.ScheduleState? = nil
    )
    {
        self.groupName = groupName
        self.maxResults = maxResults
        self.namePrefix = namePrefix
        self.nextToken = nextToken
        self.state = state
    }
}

extension SchedulerClientTypes {
    /// The details of a target.
    public struct TargetSummary {
        /// The Amazon Resource Name (ARN) of the target.
        /// This member is required.
        public var arn: Swift.String?

        public init(
            arn: Swift.String? = nil
        )
        {
            self.arn = arn
        }
    }

}

extension SchedulerClientTypes {
    /// The details of a schedule.
    public struct ScheduleSummary {
        /// The Amazon Resource Name (ARN) of the schedule.
        public var arn: Swift.String?
        /// The time at which the schedule was created.
        public var creationDate: Foundation.Date?
        /// The name of the schedule group associated with this schedule.
        public var groupName: Swift.String?
        /// The time at which the schedule was last modified.
        public var lastModificationDate: Foundation.Date?
        /// The name of the schedule.
        public var name: Swift.String?
        /// Specifies whether the schedule is enabled or disabled.
        public var state: SchedulerClientTypes.ScheduleState?
        /// The schedule's target details.
        public var target: SchedulerClientTypes.TargetSummary?

        public init(
            arn: Swift.String? = nil,
            creationDate: Foundation.Date? = nil,
            groupName: Swift.String? = nil,
            lastModificationDate: Foundation.Date? = nil,
            name: Swift.String? = nil,
            state: SchedulerClientTypes.ScheduleState? = nil,
            target: SchedulerClientTypes.TargetSummary? = nil
        )
        {
            self.arn = arn
            self.creationDate = creationDate
            self.groupName = groupName
            self.lastModificationDate = lastModificationDate
            self.name = name
            self.state = state
            self.target = target
        }
    }

}

public struct ListSchedulesOutput {
    /// Indicates whether there are additional results to retrieve. If the value is null, there are no more results.
    public var nextToken: Swift.String?
    /// The schedules that match the specified criteria.
    /// This member is required.
    public var schedules: [SchedulerClientTypes.ScheduleSummary]?

    public init(
        nextToken: Swift.String? = nil,
        schedules: [SchedulerClientTypes.ScheduleSummary]? = nil
    )
    {
        self.nextToken = nextToken
        self.schedules = schedules
    }
}

public struct UpdateScheduleInput {
    /// Specifies the action that EventBridge Scheduler applies to the schedule after the schedule completes invoking the target.
    public var actionAfterCompletion: SchedulerClientTypes.ActionAfterCompletion?
    /// Unique, case-sensitive identifier you provide to ensure the idempotency of the request. If you do not specify a client token, EventBridge Scheduler uses a randomly generated token for the request to ensure idempotency.
    public var clientToken: Swift.String?
    /// The description you specify for the schedule.
    public var description: Swift.String?
    /// The date, in UTC, before which the schedule can invoke its target. Depending on the schedule's recurrence expression, invocations might stop on, or before, the EndDate you specify. EventBridge Scheduler ignores EndDate for one-time schedules.
    public var endDate: Foundation.Date?
    /// Allows you to configure a time window during which EventBridge Scheduler invokes the schedule.
    /// This member is required.
    public var flexibleTimeWindow: SchedulerClientTypes.FlexibleTimeWindow?
    /// The name of the schedule group with which the schedule is associated. You must provide this value in order for EventBridge Scheduler to find the schedule you want to update. If you omit this value, EventBridge Scheduler assumes the group is associated to the default group.
    public var groupName: Swift.String?
    /// The ARN for the customer managed KMS key that that you want EventBridge Scheduler to use to encrypt and decrypt your data.
    public var kmsKeyArn: Swift.String?
    /// The name of the schedule that you are updating.
    /// This member is required.
    public var name: Swift.String?
    /// The expression that defines when the schedule runs. The following formats are supported.
    ///
    /// * at expression - at(yyyy-mm-ddThh:mm:ss)
    ///
    /// * rate expression - rate(value unit)
    ///
    /// * cron expression - cron(fields)
    ///
    ///
    /// You can use at expressions to create one-time schedules that invoke a target once, at the time and in the time zone, that you specify. You can use rate and cron expressions to create recurring schedules. Rate-based schedules are useful when you want to invoke a target at regular intervals, such as every 15 minutes or every five days. Cron-based schedules are useful when you want to invoke a target periodically at a specific time, such as at 8:00 am (UTC+0) every 1st day of the month. A cron expression consists of six fields separated by white spaces: (minutes hours day_of_month month day_of_week year). A rate expression consists of a value as a positive integer, and a unit with the following options: minute | minutes | hour | hours | day | days For more information and examples, see [Schedule types on EventBridge Scheduler](https://docs.aws.amazon.com/scheduler/latest/UserGuide/schedule-types.html) in the EventBridge Scheduler User Guide.
    /// This member is required.
    public var scheduleExpression: Swift.String?
    /// The timezone in which the scheduling expression is evaluated.
    public var scheduleExpressionTimezone: Swift.String?
    /// The date, in UTC, after which the schedule can begin invoking its target. Depending on the schedule's recurrence expression, invocations might occur on, or after, the StartDate you specify. EventBridge Scheduler ignores StartDate for one-time schedules.
    public var startDate: Foundation.Date?
    /// Specifies whether the schedule is enabled or disabled.
    public var state: SchedulerClientTypes.ScheduleState?
    /// The schedule target. You can use this operation to change the target that your schedule invokes.
    /// This member is required.
    public var target: SchedulerClientTypes.Target?

    public init(
        actionAfterCompletion: SchedulerClientTypes.ActionAfterCompletion? = nil,
        clientToken: Swift.String? = nil,
        description: Swift.String? = nil,
        endDate: Foundation.Date? = nil,
        flexibleTimeWindow: SchedulerClientTypes.FlexibleTimeWindow? = nil,
        groupName: Swift.String? = nil,
        kmsKeyArn: Swift.String? = nil,
        name: Swift.String? = nil,
        scheduleExpression: Swift.String? = nil,
        scheduleExpressionTimezone: Swift.String? = nil,
        startDate: Foundation.Date? = nil,
        state: SchedulerClientTypes.ScheduleState? = nil,
        target: SchedulerClientTypes.Target? = nil
    )
    {
        self.actionAfterCompletion = actionAfterCompletion
        self.clientToken = clientToken
        self.description = description
        self.endDate = endDate
        self.flexibleTimeWindow = flexibleTimeWindow
        self.groupName = groupName
        self.kmsKeyArn = kmsKeyArn
        self.name = name
        self.scheduleExpression = scheduleExpression
        self.scheduleExpressionTimezone = scheduleExpressionTimezone
        self.startDate = startDate
        self.state = state
        self.target = target
    }
}

public struct UpdateScheduleOutput {
    /// The Amazon Resource Name (ARN) of the schedule that you updated.
    /// This member is required.
    public var scheduleArn: Swift.String?

    public init(
        scheduleArn: Swift.String? = nil
    )
    {
        self.scheduleArn = scheduleArn
    }
}

public struct CreateScheduleGroupInput {
    /// Unique, case-sensitive identifier you provide to ensure the idempotency of the request. If you do not specify a client token, EventBridge Scheduler uses a randomly generated token for the request to ensure idempotency.
    public var clientToken: Swift.String?
    /// The name of the schedule group that you are creating.
    /// This member is required.
    public var name: Swift.String?
    /// The list of tags to associate with the schedule group.
    public var tags: [SchedulerClientTypes.Tag]?

    public init(
        clientToken: Swift.String? = nil,
        name: Swift.String? = nil,
        tags: [SchedulerClientTypes.Tag]? = nil
    )
    {
        self.clientToken = clientToken
        self.name = name
        self.tags = tags
    }
}

public struct CreateScheduleGroupOutput {
    /// The Amazon Resource Name (ARN) of the schedule group.
    /// This member is required.
    public var scheduleGroupArn: Swift.String?

    public init(
        scheduleGroupArn: Swift.String? = nil
    )
    {
        self.scheduleGroupArn = scheduleGroupArn
    }
}

public struct DeleteScheduleGroupInput {
    /// Unique, case-sensitive identifier you provide to ensure the idempotency of the request. If you do not specify a client token, EventBridge Scheduler uses a randomly generated token for the request to ensure idempotency.
    public var clientToken: Swift.String?
    /// The name of the schedule group to delete.
    /// This member is required.
    public var name: Swift.String?

    public init(
        clientToken: Swift.String? = nil,
        name: Swift.String? = nil
    )
    {
        self.clientToken = clientToken
        self.name = name
    }
}

public struct DeleteScheduleGroupOutput {

    public init() { }
}

public struct GetScheduleGroupInput {
    /// The name of the schedule group to retrieve.
    /// This member is required.
    public var name: Swift.String?

    public init(
        name: Swift.String? = nil
    )
    {
        self.name = name
    }
}

extension SchedulerClientTypes {

    public enum ScheduleGroupState: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case active
        case deleting
        case sdkUnknown(Swift.String)

        public static var allCases: [ScheduleGroupState] {
            return [
                .active,
                .deleting
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .active: return "ACTIVE"
            case .deleting: return "DELETING"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

public struct GetScheduleGroupOutput {
    /// The Amazon Resource Name (ARN) of the schedule group.
    public var arn: Swift.String?
    /// The time at which the schedule group was created.
    public var creationDate: Foundation.Date?
    /// The time at which the schedule group was last modified.
    public var lastModificationDate: Foundation.Date?
    /// The name of the schedule group.
    public var name: Swift.String?
    /// Specifies the state of the schedule group.
    public var state: SchedulerClientTypes.ScheduleGroupState?

    public init(
        arn: Swift.String? = nil,
        creationDate: Foundation.Date? = nil,
        lastModificationDate: Foundation.Date? = nil,
        name: Swift.String? = nil,
        state: SchedulerClientTypes.ScheduleGroupState? = nil
    )
    {
        self.arn = arn
        self.creationDate = creationDate
        self.lastModificationDate = lastModificationDate
        self.name = name
        self.state = state
    }
}

public struct ListScheduleGroupsInput {
    /// If specified, limits the number of results returned by this operation. The operation also returns a NextToken which you can use in a subsequent operation to retrieve the next set of results.
    public var maxResults: Swift.Int?
    /// The name prefix that you can use to return a filtered list of your schedule groups.
    public var namePrefix: Swift.String?
    /// The token returned by a previous call to retrieve the next set of results.
    public var nextToken: Swift.String?

    public init(
        maxResults: Swift.Int? = nil,
        namePrefix: Swift.String? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.maxResults = maxResults
        self.namePrefix = namePrefix
        self.nextToken = nextToken
    }
}

extension SchedulerClientTypes {
    /// The details of a schedule group.
    public struct ScheduleGroupSummary {
        /// The Amazon Resource Name (ARN) of the schedule group.
        public var arn: Swift.String?
        /// The time at which the schedule group was created.
        public var creationDate: Foundation.Date?
        /// The time at which the schedule group was last modified.
        public var lastModificationDate: Foundation.Date?
        /// The name of the schedule group.
        public var name: Swift.String?
        /// Specifies the state of the schedule group.
        public var state: SchedulerClientTypes.ScheduleGroupState?

        public init(
            arn: Swift.String? = nil,
            creationDate: Foundation.Date? = nil,
            lastModificationDate: Foundation.Date? = nil,
            name: Swift.String? = nil,
            state: SchedulerClientTypes.ScheduleGroupState? = nil
        )
        {
            self.arn = arn
            self.creationDate = creationDate
            self.lastModificationDate = lastModificationDate
            self.name = name
            self.state = state
        }
    }

}

public struct ListScheduleGroupsOutput {
    /// Indicates whether there are additional results to retrieve. If the value is null, there are no more results.
    public var nextToken: Swift.String?
    /// The schedule groups that match the specified criteria.
    /// This member is required.
    public var scheduleGroups: [SchedulerClientTypes.ScheduleGroupSummary]?

    public init(
        nextToken: Swift.String? = nil,
        scheduleGroups: [SchedulerClientTypes.ScheduleGroupSummary]? = nil
    )
    {
        self.nextToken = nextToken
        self.scheduleGroups = scheduleGroups
    }
}

public struct TagResourceInput {
    /// The Amazon Resource Name (ARN) of the schedule group that you are adding tags to.
    /// This member is required.
    public var resourceArn: Swift.String?
    /// The list of tags to associate with the schedule group.
    /// This member is required.
    public var tags: [SchedulerClientTypes.Tag]?

    public init(
        resourceArn: Swift.String? = nil,
        tags: [SchedulerClientTypes.Tag]? = nil
    )
    {
        self.resourceArn = resourceArn
        self.tags = tags
    }
}

public struct TagResourceOutput {

    public init() { }
}

public struct UntagResourceInput {
    /// The Amazon Resource Name (ARN) of the schedule group from which you are removing tags.
    /// This member is required.
    public var resourceArn: Swift.String?
    /// The list of tag keys to remove from the resource.
    /// This member is required.
    public var tagKeys: [Swift.String]?

    public init(
        resourceArn: Swift.String? = nil,
        tagKeys: [Swift.String]? = nil
    )
    {
        self.resourceArn = resourceArn
        self.tagKeys = tagKeys
    }
}

public struct UntagResourceOutput {

    public init() { }
}

extension CreateScheduleInput {

    static func urlPathProvider(_ value: CreateScheduleInput) -> Swift.String? {
        guard let name = value.name else {
            return nil
        }
        return "/schedules/\(name.urlPercentEncoding())"
    }
}

extension CreateScheduleGroupInput {

    static func urlPathProvider(_ value: CreateScheduleGroupInput) -> Swift.String? {
        guard let name = value.name else {
            return nil
        }
        return "/schedule-groups/\(name.urlPercentEncoding())"
    }
}

extension DeleteScheduleInput {

    static func urlPathProvider(_ value: DeleteScheduleInput) -> Swift.String? {
        guard let name = value.name else {
            return nil
        }
        return "/schedules/\(name.urlPercentEncoding())"
    }
}

extension DeleteScheduleInput {

    static func queryItemProvider(_ value: DeleteScheduleInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        if let groupName = value.groupName {
            let groupNameQueryItem = Smithy.URIQueryItem(name: "groupName".urlPercentEncoding(), value: Swift.String(groupName).urlPercentEncoding())
            items.append(groupNameQueryItem)
        }
        if let clientToken = value.clientToken {
            let clientTokenQueryItem = Smithy.URIQueryItem(name: "clientToken".urlPercentEncoding(), value: Swift.String(clientToken).urlPercentEncoding())
            items.append(clientTokenQueryItem)
        }
        return items
    }
}

extension DeleteScheduleGroupInput {

    static func urlPathProvider(_ value: DeleteScheduleGroupInput) -> Swift.String? {
        guard let name = value.name else {
            return nil
        }
        return "/schedule-groups/\(name.urlPercentEncoding())"
    }
}

extension DeleteScheduleGroupInput {

    static func queryItemProvider(_ value: DeleteScheduleGroupInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        if let clientToken = value.clientToken {
            let clientTokenQueryItem = Smithy.URIQueryItem(name: "clientToken".urlPercentEncoding(), value: Swift.String(clientToken).urlPercentEncoding())
            items.append(clientTokenQueryItem)
        }
        return items
    }
}

extension GetScheduleInput {

    static func urlPathProvider(_ value: GetScheduleInput) -> Swift.String? {
        guard let name = value.name else {
            return nil
        }
        return "/schedules/\(name.urlPercentEncoding())"
    }
}

extension GetScheduleInput {

    static func queryItemProvider(_ value: GetScheduleInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        if let groupName = value.groupName {
            let groupNameQueryItem = Smithy.URIQueryItem(name: "groupName".urlPercentEncoding(), value: Swift.String(groupName).urlPercentEncoding())
            items.append(groupNameQueryItem)
        }
        return items
    }
}

extension GetScheduleGroupInput {

    static func urlPathProvider(_ value: GetScheduleGroupInput) -> Swift.String? {
        guard let name = value.name else {
            return nil
        }
        return "/schedule-groups/\(name.urlPercentEncoding())"
    }
}

extension ListScheduleGroupsInput {

    static func urlPathProvider(_ value: ListScheduleGroupsInput) -> Swift.String? {
        return "/schedule-groups"
    }
}

extension ListScheduleGroupsInput {

    static func queryItemProvider(_ value: ListScheduleGroupsInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        if let namePrefix = value.namePrefix {
            let namePrefixQueryItem = Smithy.URIQueryItem(name: "NamePrefix".urlPercentEncoding(), value: Swift.String(namePrefix).urlPercentEncoding())
            items.append(namePrefixQueryItem)
        }
        if let nextToken = value.nextToken {
            let nextTokenQueryItem = Smithy.URIQueryItem(name: "NextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
            items.append(nextTokenQueryItem)
        }
        if let maxResults = value.maxResults {
            let maxResultsQueryItem = Smithy.URIQueryItem(name: "MaxResults".urlPercentEncoding(), value: Swift.String(maxResults).urlPercentEncoding())
            items.append(maxResultsQueryItem)
        }
        return items
    }
}

extension ListSchedulesInput {

    static func urlPathProvider(_ value: ListSchedulesInput) -> Swift.String? {
        return "/schedules"
    }
}

extension ListSchedulesInput {

    static func queryItemProvider(_ value: ListSchedulesInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        if let groupName = value.groupName {
            let groupNameQueryItem = Smithy.URIQueryItem(name: "ScheduleGroup".urlPercentEncoding(), value: Swift.String(groupName).urlPercentEncoding())
            items.append(groupNameQueryItem)
        }
        if let namePrefix = value.namePrefix {
            let namePrefixQueryItem = Smithy.URIQueryItem(name: "NamePrefix".urlPercentEncoding(), value: Swift.String(namePrefix).urlPercentEncoding())
            items.append(namePrefixQueryItem)
        }
        if let nextToken = value.nextToken {
            let nextTokenQueryItem = Smithy.URIQueryItem(name: "NextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
            items.append(nextTokenQueryItem)
        }
        if let state = value.state {
            let stateQueryItem = Smithy.URIQueryItem(name: "State".urlPercentEncoding(), value: Swift.String(state.rawValue).urlPercentEncoding())
            items.append(stateQueryItem)
        }
        if let maxResults = value.maxResults {
            let maxResultsQueryItem = Smithy.URIQueryItem(name: "MaxResults".urlPercentEncoding(), value: Swift.String(maxResults).urlPercentEncoding())
            items.append(maxResultsQueryItem)
        }
        return items
    }
}

extension ListTagsForResourceInput {

    static func urlPathProvider(_ value: ListTagsForResourceInput) -> Swift.String? {
        guard let resourceArn = value.resourceArn else {
            return nil
        }
        return "/tags/\(resourceArn.urlPercentEncoding())"
    }
}

extension TagResourceInput {

    static func urlPathProvider(_ value: TagResourceInput) -> Swift.String? {
        guard let resourceArn = value.resourceArn else {
            return nil
        }
        return "/tags/\(resourceArn.urlPercentEncoding())"
    }
}

extension UntagResourceInput {

    static func urlPathProvider(_ value: UntagResourceInput) -> Swift.String? {
        guard let resourceArn = value.resourceArn else {
            return nil
        }
        return "/tags/\(resourceArn.urlPercentEncoding())"
    }
}

extension UntagResourceInput {

    static func queryItemProvider(_ value: UntagResourceInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        guard let tagKeys = value.tagKeys else {
            let message = "Creating a URL Query Item failed. tagKeys is required and must not be nil."
            throw Smithy.ClientError.unknownError(message)
        }
        tagKeys.forEach { queryItemValue in
            let queryItem = Smithy.URIQueryItem(name: "TagKeys".urlPercentEncoding(), value: Swift.String(queryItemValue).urlPercentEncoding())
            items.append(queryItem)
        }
        return items
    }
}

extension UpdateScheduleInput {

    static func urlPathProvider(_ value: UpdateScheduleInput) -> Swift.String? {
        guard let name = value.name else {
            return nil
        }
        return "/schedules/\(name.urlPercentEncoding())"
    }
}

extension CreateScheduleInput {

    static func write(value: CreateScheduleInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ActionAfterCompletion"].write(value.actionAfterCompletion)
        try writer["ClientToken"].write(value.clientToken)
        try writer["Description"].write(value.description)
        try writer["EndDate"].writeTimestamp(value.endDate, format: SmithyTimestamps.TimestampFormat.epochSeconds)
        try writer["FlexibleTimeWindow"].write(value.flexibleTimeWindow, with: SchedulerClientTypes.FlexibleTimeWindow.write(value:to:))
        try writer["GroupName"].write(value.groupName)
        try writer["KmsKeyArn"].write(value.kmsKeyArn)
        try writer["ScheduleExpression"].write(value.scheduleExpression)
        try writer["ScheduleExpressionTimezone"].write(value.scheduleExpressionTimezone)
        try writer["StartDate"].writeTimestamp(value.startDate, format: SmithyTimestamps.TimestampFormat.epochSeconds)
        try writer["State"].write(value.state)
        try writer["Target"].write(value.target, with: SchedulerClientTypes.Target.write(value:to:))
    }
}

extension CreateScheduleGroupInput {

    static func write(value: CreateScheduleGroupInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ClientToken"].write(value.clientToken)
        try writer["Tags"].writeList(value.tags, memberWritingClosure: SchedulerClientTypes.Tag.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension TagResourceInput {

    static func write(value: TagResourceInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Tags"].writeList(value.tags, memberWritingClosure: SchedulerClientTypes.Tag.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension UpdateScheduleInput {

    static func write(value: UpdateScheduleInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ActionAfterCompletion"].write(value.actionAfterCompletion)
        try writer["ClientToken"].write(value.clientToken)
        try writer["Description"].write(value.description)
        try writer["EndDate"].writeTimestamp(value.endDate, format: SmithyTimestamps.TimestampFormat.epochSeconds)
        try writer["FlexibleTimeWindow"].write(value.flexibleTimeWindow, with: SchedulerClientTypes.FlexibleTimeWindow.write(value:to:))
        try writer["GroupName"].write(value.groupName)
        try writer["KmsKeyArn"].write(value.kmsKeyArn)
        try writer["ScheduleExpression"].write(value.scheduleExpression)
        try writer["ScheduleExpressionTimezone"].write(value.scheduleExpressionTimezone)
        try writer["StartDate"].writeTimestamp(value.startDate, format: SmithyTimestamps.TimestampFormat.epochSeconds)
        try writer["State"].write(value.state)
        try writer["Target"].write(value.target, with: SchedulerClientTypes.Target.write(value:to:))
    }
}

extension CreateScheduleOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateScheduleOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateScheduleOutput()
        value.scheduleArn = try reader["ScheduleArn"].readIfPresent() ?? ""
        return value
    }
}

extension CreateScheduleGroupOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateScheduleGroupOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateScheduleGroupOutput()
        value.scheduleGroupArn = try reader["ScheduleGroupArn"].readIfPresent() ?? ""
        return value
    }
}

extension DeleteScheduleOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteScheduleOutput {
        return DeleteScheduleOutput()
    }
}

extension DeleteScheduleGroupOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteScheduleGroupOutput {
        return DeleteScheduleGroupOutput()
    }
}

extension GetScheduleOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetScheduleOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetScheduleOutput()
        value.actionAfterCompletion = try reader["ActionAfterCompletion"].readIfPresent()
        value.arn = try reader["Arn"].readIfPresent()
        value.creationDate = try reader["CreationDate"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.description = try reader["Description"].readIfPresent()
        value.endDate = try reader["EndDate"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.flexibleTimeWindow = try reader["FlexibleTimeWindow"].readIfPresent(with: SchedulerClientTypes.FlexibleTimeWindow.read(from:))
        value.groupName = try reader["GroupName"].readIfPresent()
        value.kmsKeyArn = try reader["KmsKeyArn"].readIfPresent()
        value.lastModificationDate = try reader["LastModificationDate"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.name = try reader["Name"].readIfPresent()
        value.scheduleExpression = try reader["ScheduleExpression"].readIfPresent()
        value.scheduleExpressionTimezone = try reader["ScheduleExpressionTimezone"].readIfPresent()
        value.startDate = try reader["StartDate"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.state = try reader["State"].readIfPresent()
        value.target = try reader["Target"].readIfPresent(with: SchedulerClientTypes.Target.read(from:))
        return value
    }
}

extension GetScheduleGroupOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetScheduleGroupOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetScheduleGroupOutput()
        value.arn = try reader["Arn"].readIfPresent()
        value.creationDate = try reader["CreationDate"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.lastModificationDate = try reader["LastModificationDate"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.name = try reader["Name"].readIfPresent()
        value.state = try reader["State"].readIfPresent()
        return value
    }
}

extension ListScheduleGroupsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListScheduleGroupsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListScheduleGroupsOutput()
        value.nextToken = try reader["NextToken"].readIfPresent()
        value.scheduleGroups = try reader["ScheduleGroups"].readListIfPresent(memberReadingClosure: SchedulerClientTypes.ScheduleGroupSummary.read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        return value
    }
}

extension ListSchedulesOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListSchedulesOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListSchedulesOutput()
        value.nextToken = try reader["NextToken"].readIfPresent()
        value.schedules = try reader["Schedules"].readListIfPresent(memberReadingClosure: SchedulerClientTypes.ScheduleSummary.read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        return value
    }
}

extension ListTagsForResourceOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListTagsForResourceOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListTagsForResourceOutput()
        value.tags = try reader["Tags"].readListIfPresent(memberReadingClosure: SchedulerClientTypes.Tag.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension TagResourceOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> TagResourceOutput {
        return TagResourceOutput()
    }
}

extension UntagResourceOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UntagResourceOutput {
        return UntagResourceOutput()
    }
}

extension UpdateScheduleOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdateScheduleOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = UpdateScheduleOutput()
        value.scheduleArn = try reader["ScheduleArn"].readIfPresent() ?? ""
        return value
    }
}

enum CreateScheduleOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceQuotaExceededException": return try ServiceQuotaExceededException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateScheduleGroupOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ServiceQuotaExceededException": return try ServiceQuotaExceededException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteScheduleOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteScheduleGroupOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetScheduleOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetScheduleGroupOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListScheduleGroupsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListSchedulesOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListTagsForResourceOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum TagResourceOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UntagResourceOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdateScheduleOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

extension ConflictException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> ConflictException {
        let reader = baseError.errorBodyReader
        var value = ConflictException()
        value.properties.message = try reader["Message"].readIfPresent() ?? ""
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ThrottlingException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> ThrottlingException {
        let reader = baseError.errorBodyReader
        var value = ThrottlingException()
        value.properties.message = try reader["Message"].readIfPresent() ?? ""
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ServiceQuotaExceededException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> ServiceQuotaExceededException {
        let reader = baseError.errorBodyReader
        var value = ServiceQuotaExceededException()
        value.properties.message = try reader["Message"].readIfPresent() ?? ""
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension InternalServerException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> InternalServerException {
        let reader = baseError.errorBodyReader
        var value = InternalServerException()
        value.properties.message = try reader["Message"].readIfPresent() ?? ""
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ResourceNotFoundException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> ResourceNotFoundException {
        let reader = baseError.errorBodyReader
        var value = ResourceNotFoundException()
        value.properties.message = try reader["Message"].readIfPresent() ?? ""
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ValidationException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> ValidationException {
        let reader = baseError.errorBodyReader
        var value = ValidationException()
        value.properties.message = try reader["Message"].readIfPresent() ?? ""
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension SchedulerClientTypes.Target {

    static func write(value: SchedulerClientTypes.Target?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Arn"].write(value.arn)
        try writer["DeadLetterConfig"].write(value.deadLetterConfig, with: SchedulerClientTypes.DeadLetterConfig.write(value:to:))
        try writer["EcsParameters"].write(value.ecsParameters, with: SchedulerClientTypes.EcsParameters.write(value:to:))
        try writer["EventBridgeParameters"].write(value.eventBridgeParameters, with: SchedulerClientTypes.EventBridgeParameters.write(value:to:))
        try writer["Input"].write(value.input)
        try writer["KinesisParameters"].write(value.kinesisParameters, with: SchedulerClientTypes.KinesisParameters.write(value:to:))
        try writer["RetryPolicy"].write(value.retryPolicy, with: SchedulerClientTypes.RetryPolicy.write(value:to:))
        try writer["RoleArn"].write(value.roleArn)
        try writer["SageMakerPipelineParameters"].write(value.sageMakerPipelineParameters, with: SchedulerClientTypes.SageMakerPipelineParameters.write(value:to:))
        try writer["SqsParameters"].write(value.sqsParameters, with: SchedulerClientTypes.SqsParameters.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SchedulerClientTypes.Target {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SchedulerClientTypes.Target()
        value.arn = try reader["Arn"].readIfPresent() ?? ""
        value.roleArn = try reader["RoleArn"].readIfPresent() ?? ""
        value.deadLetterConfig = try reader["DeadLetterConfig"].readIfPresent(with: SchedulerClientTypes.DeadLetterConfig.read(from:))
        value.retryPolicy = try reader["RetryPolicy"].readIfPresent(with: SchedulerClientTypes.RetryPolicy.read(from:))
        value.input = try reader["Input"].readIfPresent()
        value.ecsParameters = try reader["EcsParameters"].readIfPresent(with: SchedulerClientTypes.EcsParameters.read(from:))
        value.eventBridgeParameters = try reader["EventBridgeParameters"].readIfPresent(with: SchedulerClientTypes.EventBridgeParameters.read(from:))
        value.kinesisParameters = try reader["KinesisParameters"].readIfPresent(with: SchedulerClientTypes.KinesisParameters.read(from:))
        value.sageMakerPipelineParameters = try reader["SageMakerPipelineParameters"].readIfPresent(with: SchedulerClientTypes.SageMakerPipelineParameters.read(from:))
        value.sqsParameters = try reader["SqsParameters"].readIfPresent(with: SchedulerClientTypes.SqsParameters.read(from:))
        return value
    }
}

extension SchedulerClientTypes.SqsParameters {

    static func write(value: SchedulerClientTypes.SqsParameters?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["MessageGroupId"].write(value.messageGroupId)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SchedulerClientTypes.SqsParameters {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SchedulerClientTypes.SqsParameters()
        value.messageGroupId = try reader["MessageGroupId"].readIfPresent()
        return value
    }
}

extension SchedulerClientTypes.SageMakerPipelineParameters {

    static func write(value: SchedulerClientTypes.SageMakerPipelineParameters?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["PipelineParameterList"].writeList(value.pipelineParameterList, memberWritingClosure: SchedulerClientTypes.SageMakerPipelineParameter.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SchedulerClientTypes.SageMakerPipelineParameters {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SchedulerClientTypes.SageMakerPipelineParameters()
        value.pipelineParameterList = try reader["PipelineParameterList"].readListIfPresent(memberReadingClosure: SchedulerClientTypes.SageMakerPipelineParameter.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension SchedulerClientTypes.SageMakerPipelineParameter {

    static func write(value: SchedulerClientTypes.SageMakerPipelineParameter?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Name"].write(value.name)
        try writer["Value"].write(value.value)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SchedulerClientTypes.SageMakerPipelineParameter {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SchedulerClientTypes.SageMakerPipelineParameter()
        value.name = try reader["Name"].readIfPresent() ?? ""
        value.value = try reader["Value"].readIfPresent() ?? ""
        return value
    }
}

extension SchedulerClientTypes.KinesisParameters {

    static func write(value: SchedulerClientTypes.KinesisParameters?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["PartitionKey"].write(value.partitionKey)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SchedulerClientTypes.KinesisParameters {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SchedulerClientTypes.KinesisParameters()
        value.partitionKey = try reader["PartitionKey"].readIfPresent() ?? ""
        return value
    }
}

extension SchedulerClientTypes.EventBridgeParameters {

    static func write(value: SchedulerClientTypes.EventBridgeParameters?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["DetailType"].write(value.detailType)
        try writer["Source"].write(value.source)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SchedulerClientTypes.EventBridgeParameters {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SchedulerClientTypes.EventBridgeParameters()
        value.detailType = try reader["DetailType"].readIfPresent() ?? ""
        value.source = try reader["Source"].readIfPresent() ?? ""
        return value
    }
}

extension SchedulerClientTypes.EcsParameters {

    static func write(value: SchedulerClientTypes.EcsParameters?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["CapacityProviderStrategy"].writeList(value.capacityProviderStrategy, memberWritingClosure: SchedulerClientTypes.CapacityProviderStrategyItem.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["EnableECSManagedTags"].write(value.enableECSManagedTags)
        try writer["EnableExecuteCommand"].write(value.enableExecuteCommand)
        try writer["Group"].write(value.group)
        try writer["LaunchType"].write(value.launchType)
        try writer["NetworkConfiguration"].write(value.networkConfiguration, with: SchedulerClientTypes.NetworkConfiguration.write(value:to:))
        try writer["PlacementConstraints"].writeList(value.placementConstraints, memberWritingClosure: SchedulerClientTypes.PlacementConstraint.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["PlacementStrategy"].writeList(value.placementStrategy, memberWritingClosure: SchedulerClientTypes.PlacementStrategy.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["PlatformVersion"].write(value.platformVersion)
        try writer["PropagateTags"].write(value.propagateTags)
        try writer["ReferenceId"].write(value.referenceId)
        try writer["Tags"].writeList(value.tags, memberWritingClosure: SmithyReadWrite.mapWritingClosure(valueWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false), memberNodeInfo: "member", isFlattened: false)
        try writer["TaskCount"].write(value.taskCount)
        try writer["TaskDefinitionArn"].write(value.taskDefinitionArn)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SchedulerClientTypes.EcsParameters {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SchedulerClientTypes.EcsParameters()
        value.taskDefinitionArn = try reader["TaskDefinitionArn"].readIfPresent() ?? ""
        value.taskCount = try reader["TaskCount"].readIfPresent()
        value.launchType = try reader["LaunchType"].readIfPresent()
        value.networkConfiguration = try reader["NetworkConfiguration"].readIfPresent(with: SchedulerClientTypes.NetworkConfiguration.read(from:))
        value.platformVersion = try reader["PlatformVersion"].readIfPresent()
        value.group = try reader["Group"].readIfPresent()
        value.capacityProviderStrategy = try reader["CapacityProviderStrategy"].readListIfPresent(memberReadingClosure: SchedulerClientTypes.CapacityProviderStrategyItem.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.enableECSManagedTags = try reader["EnableECSManagedTags"].readIfPresent()
        value.enableExecuteCommand = try reader["EnableExecuteCommand"].readIfPresent()
        value.placementConstraints = try reader["PlacementConstraints"].readListIfPresent(memberReadingClosure: SchedulerClientTypes.PlacementConstraint.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.placementStrategy = try reader["PlacementStrategy"].readListIfPresent(memberReadingClosure: SchedulerClientTypes.PlacementStrategy.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.propagateTags = try reader["PropagateTags"].readIfPresent()
        value.referenceId = try reader["ReferenceId"].readIfPresent()
        value.tags = try reader["Tags"].readListIfPresent(memberReadingClosure: SmithyReadWrite.mapReadingClosure(valueReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension SchedulerClientTypes.PlacementStrategy {

    static func write(value: SchedulerClientTypes.PlacementStrategy?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["field"].write(value.field)
        try writer["type"].write(value.type)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SchedulerClientTypes.PlacementStrategy {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SchedulerClientTypes.PlacementStrategy()
        value.type = try reader["type"].readIfPresent()
        value.field = try reader["field"].readIfPresent()
        return value
    }
}

extension SchedulerClientTypes.PlacementConstraint {

    static func write(value: SchedulerClientTypes.PlacementConstraint?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["expression"].write(value.expression)
        try writer["type"].write(value.type)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SchedulerClientTypes.PlacementConstraint {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SchedulerClientTypes.PlacementConstraint()
        value.type = try reader["type"].readIfPresent()
        value.expression = try reader["expression"].readIfPresent()
        return value
    }
}

extension SchedulerClientTypes.CapacityProviderStrategyItem {

    static func write(value: SchedulerClientTypes.CapacityProviderStrategyItem?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["base"].write(value.base)
        try writer["capacityProvider"].write(value.capacityProvider)
        try writer["weight"].write(value.weight)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SchedulerClientTypes.CapacityProviderStrategyItem {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SchedulerClientTypes.CapacityProviderStrategyItem()
        value.capacityProvider = try reader["capacityProvider"].readIfPresent() ?? ""
        value.weight = try reader["weight"].readIfPresent() ?? 0
        value.base = try reader["base"].readIfPresent() ?? 0
        return value
    }
}

extension SchedulerClientTypes.NetworkConfiguration {

    static func write(value: SchedulerClientTypes.NetworkConfiguration?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["awsvpcConfiguration"].write(value.awsvpcConfiguration, with: SchedulerClientTypes.AwsVpcConfiguration.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SchedulerClientTypes.NetworkConfiguration {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SchedulerClientTypes.NetworkConfiguration()
        value.awsvpcConfiguration = try reader["awsvpcConfiguration"].readIfPresent(with: SchedulerClientTypes.AwsVpcConfiguration.read(from:))
        return value
    }
}

extension SchedulerClientTypes.AwsVpcConfiguration {

    static func write(value: SchedulerClientTypes.AwsVpcConfiguration?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["AssignPublicIp"].write(value.assignPublicIp)
        try writer["SecurityGroups"].writeList(value.securityGroups, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["Subnets"].writeList(value.subnets, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SchedulerClientTypes.AwsVpcConfiguration {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SchedulerClientTypes.AwsVpcConfiguration()
        value.subnets = try reader["Subnets"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        value.securityGroups = try reader["SecurityGroups"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.assignPublicIp = try reader["AssignPublicIp"].readIfPresent()
        return value
    }
}

extension SchedulerClientTypes.RetryPolicy {

    static func write(value: SchedulerClientTypes.RetryPolicy?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["MaximumEventAgeInSeconds"].write(value.maximumEventAgeInSeconds)
        try writer["MaximumRetryAttempts"].write(value.maximumRetryAttempts)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SchedulerClientTypes.RetryPolicy {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SchedulerClientTypes.RetryPolicy()
        value.maximumEventAgeInSeconds = try reader["MaximumEventAgeInSeconds"].readIfPresent()
        value.maximumRetryAttempts = try reader["MaximumRetryAttempts"].readIfPresent()
        return value
    }
}

extension SchedulerClientTypes.DeadLetterConfig {

    static func write(value: SchedulerClientTypes.DeadLetterConfig?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Arn"].write(value.arn)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SchedulerClientTypes.DeadLetterConfig {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SchedulerClientTypes.DeadLetterConfig()
        value.arn = try reader["Arn"].readIfPresent()
        return value
    }
}

extension SchedulerClientTypes.FlexibleTimeWindow {

    static func write(value: SchedulerClientTypes.FlexibleTimeWindow?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["MaximumWindowInMinutes"].write(value.maximumWindowInMinutes)
        try writer["Mode"].write(value.mode)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SchedulerClientTypes.FlexibleTimeWindow {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SchedulerClientTypes.FlexibleTimeWindow()
        value.mode = try reader["Mode"].readIfPresent() ?? .sdkUnknown("")
        value.maximumWindowInMinutes = try reader["MaximumWindowInMinutes"].readIfPresent()
        return value
    }
}

extension SchedulerClientTypes.ScheduleGroupSummary {

    static func read(from reader: SmithyJSON.Reader) throws -> SchedulerClientTypes.ScheduleGroupSummary {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SchedulerClientTypes.ScheduleGroupSummary()
        value.arn = try reader["Arn"].readIfPresent()
        value.name = try reader["Name"].readIfPresent()
        value.state = try reader["State"].readIfPresent()
        value.creationDate = try reader["CreationDate"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.lastModificationDate = try reader["LastModificationDate"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        return value
    }
}

extension SchedulerClientTypes.ScheduleSummary {

    static func read(from reader: SmithyJSON.Reader) throws -> SchedulerClientTypes.ScheduleSummary {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SchedulerClientTypes.ScheduleSummary()
        value.arn = try reader["Arn"].readIfPresent()
        value.name = try reader["Name"].readIfPresent()
        value.groupName = try reader["GroupName"].readIfPresent()
        value.state = try reader["State"].readIfPresent()
        value.creationDate = try reader["CreationDate"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.lastModificationDate = try reader["LastModificationDate"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.target = try reader["Target"].readIfPresent(with: SchedulerClientTypes.TargetSummary.read(from:))
        return value
    }
}

extension SchedulerClientTypes.TargetSummary {

    static func read(from reader: SmithyJSON.Reader) throws -> SchedulerClientTypes.TargetSummary {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SchedulerClientTypes.TargetSummary()
        value.arn = try reader["Arn"].readIfPresent() ?? ""
        return value
    }
}

extension SchedulerClientTypes.Tag {

    static func write(value: SchedulerClientTypes.Tag?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Key"].write(value.key)
        try writer["Value"].write(value.value)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SchedulerClientTypes.Tag {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SchedulerClientTypes.Tag()
        value.key = try reader["Key"].readIfPresent() ?? ""
        value.value = try reader["Value"].readIfPresent() ?? ""
        return value
    }
}

public enum SchedulerClientTypes {}
