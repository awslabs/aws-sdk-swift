// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension GlacierClient {
    /// Paginate over `[ListJobsOutput]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[ListJobsInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `ListJobsOutput`
    public func listJobsPaginated(input: ListJobsInput) -> ClientRuntime.PaginatorSequence<ListJobsInput, ListJobsOutput> {
        return ClientRuntime.PaginatorSequence<ListJobsInput, ListJobsOutput>(input: input, inputKey: \ListJobsInput.marker, outputKey: \ListJobsOutput.marker, paginationFunction: self.listJobs(input:))
    }
}

extension ListJobsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListJobsInput {
        return ListJobsInput(
            accountId: self.accountId,
            completed: self.completed,
            limit: self.limit,
            marker: token,
            statuscode: self.statuscode,
            vaultName: self.vaultName
        )}
}

extension PaginatorSequence where Input == ListJobsInput, Output == ListJobsOutput {
    /// This paginator transforms the `AsyncSequence` returned by `listJobsPaginated`
    /// to access the nested member `[GlacierClientTypes.GlacierJobDescription]`
    /// - Returns: `[GlacierClientTypes.GlacierJobDescription]`
    public func jobList() async throws -> [GlacierClientTypes.GlacierJobDescription] {
        return try await self.asyncCompactMap { item in item.jobList }
    }
}
extension GlacierClient {
    /// Paginate over `[ListMultipartUploadsOutput]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[ListMultipartUploadsInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `ListMultipartUploadsOutput`
    public func listMultipartUploadsPaginated(input: ListMultipartUploadsInput) -> ClientRuntime.PaginatorSequence<ListMultipartUploadsInput, ListMultipartUploadsOutput> {
        return ClientRuntime.PaginatorSequence<ListMultipartUploadsInput, ListMultipartUploadsOutput>(input: input, inputKey: \ListMultipartUploadsInput.marker, outputKey: \ListMultipartUploadsOutput.marker, paginationFunction: self.listMultipartUploads(input:))
    }
}

extension ListMultipartUploadsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListMultipartUploadsInput {
        return ListMultipartUploadsInput(
            accountId: self.accountId,
            limit: self.limit,
            marker: token,
            vaultName: self.vaultName
        )}
}

extension PaginatorSequence where Input == ListMultipartUploadsInput, Output == ListMultipartUploadsOutput {
    /// This paginator transforms the `AsyncSequence` returned by `listMultipartUploadsPaginated`
    /// to access the nested member `[GlacierClientTypes.UploadListElement]`
    /// - Returns: `[GlacierClientTypes.UploadListElement]`
    public func uploadsList() async throws -> [GlacierClientTypes.UploadListElement] {
        return try await self.asyncCompactMap { item in item.uploadsList }
    }
}
extension GlacierClient {
    /// Paginate over `[ListPartsOutput]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[ListPartsInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `ListPartsOutput`
    public func listPartsPaginated(input: ListPartsInput) -> ClientRuntime.PaginatorSequence<ListPartsInput, ListPartsOutput> {
        return ClientRuntime.PaginatorSequence<ListPartsInput, ListPartsOutput>(input: input, inputKey: \ListPartsInput.marker, outputKey: \ListPartsOutput.marker, paginationFunction: self.listParts(input:))
    }
}

extension ListPartsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListPartsInput {
        return ListPartsInput(
            accountId: self.accountId,
            limit: self.limit,
            marker: token,
            uploadId: self.uploadId,
            vaultName: self.vaultName
        )}
}

extension PaginatorSequence where Input == ListPartsInput, Output == ListPartsOutput {
    /// This paginator transforms the `AsyncSequence` returned by `listPartsPaginated`
    /// to access the nested member `[GlacierClientTypes.PartListElement]`
    /// - Returns: `[GlacierClientTypes.PartListElement]`
    public func parts() async throws -> [GlacierClientTypes.PartListElement] {
        return try await self.asyncCompactMap { item in item.parts }
    }
}
extension GlacierClient {
    /// Paginate over `[ListVaultsOutput]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[ListVaultsInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `ListVaultsOutput`
    public func listVaultsPaginated(input: ListVaultsInput) -> ClientRuntime.PaginatorSequence<ListVaultsInput, ListVaultsOutput> {
        return ClientRuntime.PaginatorSequence<ListVaultsInput, ListVaultsOutput>(input: input, inputKey: \ListVaultsInput.marker, outputKey: \ListVaultsOutput.marker, paginationFunction: self.listVaults(input:))
    }
}

extension ListVaultsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListVaultsInput {
        return ListVaultsInput(
            accountId: self.accountId,
            limit: self.limit,
            marker: token
        )}
}

extension PaginatorSequence where Input == ListVaultsInput, Output == ListVaultsOutput {
    /// This paginator transforms the `AsyncSequence` returned by `listVaultsPaginated`
    /// to access the nested member `[GlacierClientTypes.DescribeVaultOutput]`
    /// - Returns: `[GlacierClientTypes.DescribeVaultOutput]`
    public func vaultList() async throws -> [GlacierClientTypes.DescribeVaultOutput] {
        return try await self.asyncCompactMap { item in item.vaultList }
    }
}
