//
// Copyright Amazon.com Inc. or its affiliates.
// All Rights Reserved.
//
// SPDX-License-Identifier: Apache-2.0
//

// Code generated by smithy-swift-codegen. DO NOT EDIT!

@_spi(SmithyReadWrite) import ClientRuntime
import Foundation
import class SmithyHTTPAPI.HTTPResponse
@_spi(SmithyReadWrite) import class SmithyJSON.Reader
@_spi(SmithyReadWrite) import class SmithyJSON.Writer
import enum ClientRuntime.ErrorFault
import enum Smithy.ByteStream
import enum SmithyReadWrite.ReaderError
@_spi(SmithyReadWrite) import enum SmithyReadWrite.ReadingClosures
@_spi(SmithyReadWrite) import enum SmithyReadWrite.WritingClosures
import protocol AWSClientRuntime.AWSServiceError
import protocol ClientRuntime.HTTPError
import protocol ClientRuntime.ModeledError
@_spi(SmithyReadWrite) import protocol SmithyReadWrite.SmithyReader
@_spi(SmithyReadWrite) import protocol SmithyReadWrite.SmithyWriter
@_spi(SmithyReadWrite) import struct AWSClientRuntime.RestJSONError
@_spi(UnknownAWSHTTPServiceError) import struct AWSClientRuntime.UnknownAWSHTTPServiceError
import struct Smithy.URIQueryItem
import struct SmithyHTTPAPI.Header
import struct SmithyHTTPAPI.Headers

public struct AbortMultipartUploadOutput {

    public init() { }
}

public struct AbortVaultLockOutput {

    public init() { }
}

public struct AddTagsToVaultOutput {

    public init() { }
}

public struct CompleteVaultLockOutput {

    public init() { }
}

public struct DeleteArchiveOutput {

    public init() { }
}

public struct DeleteVaultAccessPolicyOutput {

    public init() { }
}

public struct DeleteVaultNotificationsOutput {

    public init() { }
}

public struct DeleteVaultOutput {

    public init() { }
}

public struct RemoveTagsFromVaultOutput {

    public init() { }
}

public struct SetDataRetrievalPolicyOutput {

    public init() { }
}

public struct SetVaultAccessPolicyOutput {

    public init() { }
}

public struct SetVaultNotificationsOutput {

    public init() { }
}

/// Returned if a parameter of the request is incorrectly specified.
public struct InvalidParameterValueException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// 400 Bad Request
        public internal(set) var code: Swift.String? = nil
        /// Returned if a parameter of the request is incorrectly specified.
        public internal(set) var message: Swift.String? = nil
        /// Client
        public internal(set) var type: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidParameterValueException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        code: Swift.String? = nil,
        message: Swift.String? = nil,
        type: Swift.String? = nil
    )
    {
        self.properties.code = code
        self.properties.message = message
        self.properties.type = type
    }
}

/// Returned if a required header or parameter is missing from the request.
public struct MissingParameterValueException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// 400 Bad Request
        public internal(set) var code: Swift.String? = nil
        /// Returned if no authentication data is found for the request.
        public internal(set) var message: Swift.String? = nil
        /// Client.
        public internal(set) var type: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "MissingParameterValueException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        code: Swift.String? = nil,
        message: Swift.String? = nil,
        type: Swift.String? = nil
    )
    {
        self.properties.code = code
        self.properties.message = message
        self.properties.type = type
    }
}

/// Returned if the specified resource (such as a vault, upload ID, or job ID) doesn't exist.
public struct ResourceNotFoundException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// 404 Not Found
        public internal(set) var code: Swift.String? = nil
        /// Returned if the specified resource (such as a vault, upload ID, or job ID) doesn't exist.
        public internal(set) var message: Swift.String? = nil
        /// Client
        public internal(set) var type: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ResourceNotFoundException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        code: Swift.String? = nil,
        message: Swift.String? = nil,
        type: Swift.String? = nil
    )
    {
        self.properties.code = code
        self.properties.message = message
        self.properties.type = type
    }
}

/// Returned if the service cannot complete the request.
public struct ServiceUnavailableException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// 500 Internal Server Error
        public internal(set) var code: Swift.String? = nil
        /// Returned if the service cannot complete the request.
        public internal(set) var message: Swift.String? = nil
        /// Server
        public internal(set) var type: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ServiceUnavailableException" }
    public static var fault: ClientRuntime.ErrorFault { .server }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        code: Swift.String? = nil,
        message: Swift.String? = nil,
        type: Swift.String? = nil
    )
    {
        self.properties.code = code
        self.properties.message = message
        self.properties.type = type
    }
}

/// Provides options to abort a multipart upload identified by the upload ID. For information about the underlying REST API, see [Abort Multipart Upload](https://docs.aws.amazon.com/amazonglacier/latest/dev/api-multipart-abort-upload.html). For conceptual information, see [Working with Archives in Amazon S3 Glacier](https://docs.aws.amazon.com/amazonglacier/latest/dev/working-with-archives.html).
public struct AbortMultipartUploadInput {
    /// The AccountId value is the AWS account ID of the account that owns the vault. You can either specify an AWS account ID or optionally a single '-' (hyphen), in which case Amazon S3 Glacier uses the AWS account ID associated with the credentials used to sign the request. If you use an account ID, do not include any hyphens ('-') in the ID.
    /// This member is required.
    public var accountId: Swift.String?
    /// The upload ID of the multipart upload to delete.
    /// This member is required.
    public var uploadId: Swift.String?
    /// The name of the vault.
    /// This member is required.
    public var vaultName: Swift.String?

    public init(
        accountId: Swift.String? = nil,
        uploadId: Swift.String? = nil,
        vaultName: Swift.String? = nil
    )
    {
        self.accountId = accountId
        self.uploadId = uploadId
        self.vaultName = vaultName
    }
}

/// The input values for AbortVaultLock.
public struct AbortVaultLockInput {
    /// The AccountId value is the AWS account ID. This value must match the AWS account ID associated with the credentials used to sign the request. You can either specify an AWS account ID or optionally a single '-' (hyphen), in which case Amazon Glacier uses the AWS account ID associated with the credentials used to sign the request. If you specify your account ID, do not include any hyphens ('-') in the ID.
    /// This member is required.
    public var accountId: Swift.String?
    /// The name of the vault.
    /// This member is required.
    public var vaultName: Swift.String?

    public init(
        accountId: Swift.String? = nil,
        vaultName: Swift.String? = nil
    )
    {
        self.accountId = accountId
        self.vaultName = vaultName
    }
}

extension GlacierClientTypes {

    public enum ModelType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case amazoncustomerbyemail
        case canonicaluser
        case group
        case sdkUnknown(Swift.String)

        public static var allCases: [ModelType] {
            return [
                .amazoncustomerbyemail,
                .canonicaluser,
                .group
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .amazoncustomerbyemail: return "AmazonCustomerByEmail"
            case .canonicaluser: return "CanonicalUser"
            case .group: return "Group"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension GlacierClientTypes {
    /// Contains information about the grantee.
    public struct Grantee {
        /// Screen name of the grantee.
        public var displayName: Swift.String?
        /// Email address of the grantee.
        public var emailAddress: Swift.String?
        /// The canonical user ID of the grantee.
        public var id: Swift.String?
        /// Type of grantee
        /// This member is required.
        public var type: GlacierClientTypes.ModelType?
        /// URI of the grantee group.
        public var uri: Swift.String?

        public init(
            displayName: Swift.String? = nil,
            emailAddress: Swift.String? = nil,
            id: Swift.String? = nil,
            type: GlacierClientTypes.ModelType? = nil,
            uri: Swift.String? = nil
        )
        {
            self.displayName = displayName
            self.emailAddress = emailAddress
            self.id = id
            self.type = type
            self.uri = uri
        }
    }

}

extension GlacierClientTypes {

    public enum Permission: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case fullControl
        case read
        case readAcp
        case write
        case writeAcp
        case sdkUnknown(Swift.String)

        public static var allCases: [Permission] {
            return [
                .fullControl,
                .read,
                .readAcp,
                .write,
                .writeAcp
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .fullControl: return "FULL_CONTROL"
            case .read: return "READ"
            case .readAcp: return "READ_ACP"
            case .write: return "WRITE"
            case .writeAcp: return "WRITE_ACP"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension GlacierClientTypes {
    /// Contains information about a grant.
    public struct Grant {
        /// The grantee.
        public var grantee: GlacierClientTypes.Grantee?
        /// Specifies the permission given to the grantee.
        public var permission: GlacierClientTypes.Permission?

        public init(
            grantee: GlacierClientTypes.Grantee? = nil,
            permission: GlacierClientTypes.Permission? = nil
        )
        {
            self.grantee = grantee
            self.permission = permission
        }
    }

}

extension GlacierClientTypes {

    public enum ActionCode: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case archiveretrieval
        case inventoryretrieval
        case select
        case sdkUnknown(Swift.String)

        public static var allCases: [ActionCode] {
            return [
                .archiveretrieval,
                .inventoryretrieval,
                .select
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .archiveretrieval: return "ArchiveRetrieval"
            case .inventoryretrieval: return "InventoryRetrieval"
            case .select: return "Select"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

/// Returned if the request results in a vault or account limit being exceeded.
public struct LimitExceededException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// 400 Bad Request
        public internal(set) var code: Swift.String? = nil
        /// Returned if the request results in a vault limit or tags limit being exceeded.
        public internal(set) var message: Swift.String? = nil
        /// Client
        public internal(set) var type: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "LimitExceededException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        code: Swift.String? = nil,
        message: Swift.String? = nil,
        type: Swift.String? = nil
    )
    {
        self.properties.code = code
        self.properties.message = message
        self.properties.type = type
    }
}

/// The input values for AddTagsToVault.
public struct AddTagsToVaultInput {
    /// The AccountId value is the AWS account ID of the account that owns the vault. You can either specify an AWS account ID or optionally a single '-' (hyphen), in which case Amazon S3 Glacier uses the AWS account ID associated with the credentials used to sign the request. If you use an account ID, do not include any hyphens ('-') in the ID.
    /// This member is required.
    public var accountId: Swift.String?
    /// The tags to add to the vault. Each tag is composed of a key and a value. The value can be an empty string.
    public var tags: [Swift.String: Swift.String]?
    /// The name of the vault.
    /// This member is required.
    public var vaultName: Swift.String?

    public init(
        accountId: Swift.String? = nil,
        tags: [Swift.String: Swift.String]? = nil,
        vaultName: Swift.String? = nil
    )
    {
        self.accountId = accountId
        self.tags = tags
        self.vaultName = vaultName
    }
}

extension GlacierClientTypes {

    public enum CannedACL: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case authenticatedread
        case awsexecread
        case bucketownerfullcontrol
        case bucketownerread
        case `private`
        case publicread
        case publicreadwrite
        case sdkUnknown(Swift.String)

        public static var allCases: [CannedACL] {
            return [
                .authenticatedread,
                .awsexecread,
                .bucketownerfullcontrol,
                .bucketownerread,
                .private,
                .publicread,
                .publicreadwrite
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .authenticatedread: return "authenticated-read"
            case .awsexecread: return "aws-exec-read"
            case .bucketownerfullcontrol: return "bucket-owner-full-control"
            case .bucketownerread: return "bucket-owner-read"
            case .private: return "private"
            case .publicread: return "public-read"
            case .publicreadwrite: return "public-read-write"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

/// Provides options to complete a multipart upload operation. This informs Amazon Glacier that all the archive parts have been uploaded and Amazon S3 Glacier (Glacier) can now assemble the archive from the uploaded parts. After assembling and saving the archive to the vault, Glacier returns the URI path of the newly created archive resource.
public struct CompleteMultipartUploadInput {
    /// The AccountId value is the AWS account ID of the account that owns the vault. You can either specify an AWS account ID or optionally a single '-' (hyphen), in which case Amazon S3 Glacier uses the AWS account ID associated with the credentials used to sign the request. If you use an account ID, do not include any hyphens ('-') in the ID.
    /// This member is required.
    public var accountId: Swift.String?
    /// The total size, in bytes, of the entire archive. This value should be the sum of all the sizes of the individual parts that you uploaded.
    public var archiveSize: Swift.String?
    /// The SHA256 tree hash of the entire archive. It is the tree hash of SHA256 tree hash of the individual parts. If the value you specify in the request does not match the SHA256 tree hash of the final assembled archive as computed by Amazon S3 Glacier (Glacier), Glacier returns an error and the request fails.
    public var checksum: Swift.String?
    /// The upload ID of the multipart upload.
    /// This member is required.
    public var uploadId: Swift.String?
    /// The name of the vault.
    /// This member is required.
    public var vaultName: Swift.String?

    public init(
        accountId: Swift.String? = nil,
        archiveSize: Swift.String? = nil,
        checksum: Swift.String? = nil,
        uploadId: Swift.String? = nil,
        vaultName: Swift.String? = nil
    )
    {
        self.accountId = accountId
        self.archiveSize = archiveSize
        self.checksum = checksum
        self.uploadId = uploadId
        self.vaultName = vaultName
    }
}

/// Contains the Amazon S3 Glacier response to your request. For information about the underlying REST API, see [Upload Archive](https://docs.aws.amazon.com/amazonglacier/latest/dev/api-archive-post.html). For conceptual information, see [Working with Archives in Amazon S3 Glacier](https://docs.aws.amazon.com/amazonglacier/latest/dev/working-with-archives.html).
public struct CompleteMultipartUploadOutput {
    /// The ID of the archive. This value is also included as part of the location.
    public var archiveId: Swift.String?
    /// The checksum of the archive computed by Amazon S3 Glacier.
    public var checksum: Swift.String?
    /// The relative URI path of the newly added archive resource.
    public var location: Swift.String?

    public init(
        archiveId: Swift.String? = nil,
        checksum: Swift.String? = nil,
        location: Swift.String? = nil
    )
    {
        self.archiveId = archiveId
        self.checksum = checksum
        self.location = location
    }
}

/// The input values for CompleteVaultLock.
public struct CompleteVaultLockInput {
    /// The AccountId value is the AWS account ID. This value must match the AWS account ID associated with the credentials used to sign the request. You can either specify an AWS account ID or optionally a single '-' (hyphen), in which case Amazon Glacier uses the AWS account ID associated with the credentials used to sign the request. If you specify your account ID, do not include any hyphens ('-') in the ID.
    /// This member is required.
    public var accountId: Swift.String?
    /// The lockId value is the lock ID obtained from a [InitiateVaultLock] request.
    /// This member is required.
    public var lockId: Swift.String?
    /// The name of the vault.
    /// This member is required.
    public var vaultName: Swift.String?

    public init(
        accountId: Swift.String? = nil,
        lockId: Swift.String? = nil,
        vaultName: Swift.String? = nil
    )
    {
        self.accountId = accountId
        self.lockId = lockId
        self.vaultName = vaultName
    }
}

/// Provides options to create a vault.
public struct CreateVaultInput {
    /// The AccountId value is the AWS account ID. This value must match the AWS account ID associated with the credentials used to sign the request. You can either specify an AWS account ID or optionally a single '-' (hyphen), in which case Amazon S3 Glacier uses the AWS account ID associated with the credentials used to sign the request. If you specify your account ID, do not include any hyphens ('-') in the ID.
    /// This member is required.
    public var accountId: Swift.String?
    /// The name of the vault.
    /// This member is required.
    public var vaultName: Swift.String?

    public init(
        accountId: Swift.String? = nil,
        vaultName: Swift.String? = nil
    )
    {
        self.accountId = accountId
        self.vaultName = vaultName
    }
}

/// Contains the Amazon S3 Glacier response to your request.
public struct CreateVaultOutput {
    /// The URI of the vault that was created.
    public var location: Swift.String?

    public init(
        location: Swift.String? = nil
    )
    {
        self.location = location
    }
}

extension GlacierClientTypes {

    public enum FileHeaderInfo: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case ignore
        case `none`
        case use
        case sdkUnknown(Swift.String)

        public static var allCases: [FileHeaderInfo] {
            return [
                .ignore,
                .none,
                .use
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .ignore: return "IGNORE"
            case .none: return "NONE"
            case .use: return "USE"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension GlacierClientTypes {
    /// Contains information about the comma-separated value (CSV) file to select from.
    public struct CSVInput {
        /// A single character used to indicate that a row should be ignored when the character is present at the start of that row.
        public var comments: Swift.String?
        /// A value used to separate individual fields from each other within a record.
        public var fieldDelimiter: Swift.String?
        /// Describes the first line of input. Valid values are None, Ignore, and Use.
        public var fileHeaderInfo: GlacierClientTypes.FileHeaderInfo?
        /// A value used as an escape character where the field delimiter is part of the value.
        public var quoteCharacter: Swift.String?
        /// A single character used for escaping the quotation-mark character inside an already escaped value.
        public var quoteEscapeCharacter: Swift.String?
        /// A value used to separate individual records from each other.
        public var recordDelimiter: Swift.String?

        public init(
            comments: Swift.String? = nil,
            fieldDelimiter: Swift.String? = nil,
            fileHeaderInfo: GlacierClientTypes.FileHeaderInfo? = nil,
            quoteCharacter: Swift.String? = nil,
            quoteEscapeCharacter: Swift.String? = nil,
            recordDelimiter: Swift.String? = nil
        )
        {
            self.comments = comments
            self.fieldDelimiter = fieldDelimiter
            self.fileHeaderInfo = fileHeaderInfo
            self.quoteCharacter = quoteCharacter
            self.quoteEscapeCharacter = quoteEscapeCharacter
            self.recordDelimiter = recordDelimiter
        }
    }

}

extension GlacierClientTypes {

    public enum QuoteFields: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case always
        case asneeded
        case sdkUnknown(Swift.String)

        public static var allCases: [QuoteFields] {
            return [
                .always,
                .asneeded
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .always: return "ALWAYS"
            case .asneeded: return "ASNEEDED"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension GlacierClientTypes {
    /// Contains information about the comma-separated value (CSV) file that the job results are stored in.
    public struct CSVOutput {
        /// A value used to separate individual fields from each other within a record.
        public var fieldDelimiter: Swift.String?
        /// A value used as an escape character where the field delimiter is part of the value.
        public var quoteCharacter: Swift.String?
        /// A single character used for escaping the quotation-mark character inside an already escaped value.
        public var quoteEscapeCharacter: Swift.String?
        /// A value that indicates whether all output fields should be contained within quotation marks.
        public var quoteFields: GlacierClientTypes.QuoteFields?
        /// A value used to separate individual records from each other.
        public var recordDelimiter: Swift.String?

        public init(
            fieldDelimiter: Swift.String? = nil,
            quoteCharacter: Swift.String? = nil,
            quoteEscapeCharacter: Swift.String? = nil,
            quoteFields: GlacierClientTypes.QuoteFields? = nil,
            recordDelimiter: Swift.String? = nil
        )
        {
            self.fieldDelimiter = fieldDelimiter
            self.quoteCharacter = quoteCharacter
            self.quoteEscapeCharacter = quoteEscapeCharacter
            self.quoteFields = quoteFields
            self.recordDelimiter = recordDelimiter
        }
    }

}

extension GlacierClientTypes {
    /// Data retrieval policy rule.
    public struct DataRetrievalRule {
        /// The maximum number of bytes that can be retrieved in an hour. This field is required only if the value of the Strategy field is BytesPerHour. Your PUT operation will be rejected if the Strategy field is not set to BytesPerHour and you set this field.
        public var bytesPerHour: Swift.Int?
        /// The type of data retrieval policy to set. Valid values: BytesPerHour|FreeTier|None
        public var strategy: Swift.String?

        public init(
            bytesPerHour: Swift.Int? = nil,
            strategy: Swift.String? = nil
        )
        {
            self.bytesPerHour = bytesPerHour
            self.strategy = strategy
        }
    }

}

extension GlacierClientTypes {
    /// Data retrieval policy.
    public struct DataRetrievalPolicy {
        /// The policy rule. Although this is a list type, currently there must be only one rule, which contains a Strategy field and optionally a BytesPerHour field.
        public var rules: [GlacierClientTypes.DataRetrievalRule]?

        public init(
            rules: [GlacierClientTypes.DataRetrievalRule]? = nil
        )
        {
            self.rules = rules
        }
    }

}

/// Provides options for deleting an archive from an Amazon S3 Glacier vault.
public struct DeleteArchiveInput {
    /// The AccountId value is the AWS account ID of the account that owns the vault. You can either specify an AWS account ID or optionally a single '-' (hyphen), in which case Amazon S3 Glacier uses the AWS account ID associated with the credentials used to sign the request. If you use an account ID, do not include any hyphens ('-') in the ID.
    /// This member is required.
    public var accountId: Swift.String?
    /// The ID of the archive to delete.
    /// This member is required.
    public var archiveId: Swift.String?
    /// The name of the vault.
    /// This member is required.
    public var vaultName: Swift.String?

    public init(
        accountId: Swift.String? = nil,
        archiveId: Swift.String? = nil,
        vaultName: Swift.String? = nil
    )
    {
        self.accountId = accountId
        self.archiveId = archiveId
        self.vaultName = vaultName
    }
}

/// Provides options for deleting a vault from Amazon S3 Glacier.
public struct DeleteVaultInput {
    /// The AccountId value is the AWS account ID of the account that owns the vault. You can either specify an AWS account ID or optionally a single '-' (hyphen), in which case Amazon S3 Glacier uses the AWS account ID associated with the credentials used to sign the request. If you use an account ID, do not include any hyphens ('-') in the ID.
    /// This member is required.
    public var accountId: Swift.String?
    /// The name of the vault.
    /// This member is required.
    public var vaultName: Swift.String?

    public init(
        accountId: Swift.String? = nil,
        vaultName: Swift.String? = nil
    )
    {
        self.accountId = accountId
        self.vaultName = vaultName
    }
}

/// DeleteVaultAccessPolicy input.
public struct DeleteVaultAccessPolicyInput {
    /// The AccountId value is the AWS account ID of the account that owns the vault. You can either specify an AWS account ID or optionally a single '-' (hyphen), in which case Amazon S3 Glacier uses the AWS account ID associated with the credentials used to sign the request. If you use an account ID, do not include any hyphens ('-') in the ID.
    /// This member is required.
    public var accountId: Swift.String?
    /// The name of the vault.
    /// This member is required.
    public var vaultName: Swift.String?

    public init(
        accountId: Swift.String? = nil,
        vaultName: Swift.String? = nil
    )
    {
        self.accountId = accountId
        self.vaultName = vaultName
    }
}

/// Provides options for deleting a vault notification configuration from an Amazon Glacier vault.
public struct DeleteVaultNotificationsInput {
    /// The AccountId value is the AWS account ID of the account that owns the vault. You can either specify an AWS account ID or optionally a single '-' (hyphen), in which case Amazon S3 Glacier uses the AWS account ID associated with the credentials used to sign the request. If you use an account ID, do not include any hyphens ('-') in the ID.
    /// This member is required.
    public var accountId: Swift.String?
    /// The name of the vault.
    /// This member is required.
    public var vaultName: Swift.String?

    public init(
        accountId: Swift.String? = nil,
        vaultName: Swift.String? = nil
    )
    {
        self.accountId = accountId
        self.vaultName = vaultName
    }
}

/// Provides options for retrieving a job description.
public struct DescribeJobInput {
    /// The AccountId value is the AWS account ID of the account that owns the vault. You can either specify an AWS account ID or optionally a single '-' (hyphen), in which case Amazon S3 Glacier uses the AWS account ID associated with the credentials used to sign the request. If you use an account ID, do not include any hyphens ('-') in the ID.
    /// This member is required.
    public var accountId: Swift.String?
    /// The ID of the job to describe.
    /// This member is required.
    public var jobId: Swift.String?
    /// The name of the vault.
    /// This member is required.
    public var vaultName: Swift.String?

    public init(
        accountId: Swift.String? = nil,
        jobId: Swift.String? = nil,
        vaultName: Swift.String? = nil
    )
    {
        self.accountId = accountId
        self.jobId = jobId
        self.vaultName = vaultName
    }
}

extension GlacierClientTypes {
    /// Describes the options for a range inventory retrieval job.
    public struct InventoryRetrievalJobDescription {
        /// The end of the date range in UTC for vault inventory retrieval that includes archives created before this date. This value should be a string in the ISO 8601 date format, for example 2013-03-20T17:03:43Z.
        public var endDate: Swift.String?
        /// The output format for the vault inventory list, which is set by the InitiateJob request when initiating a job to retrieve a vault inventory. Valid values are CSV and JSON.
        public var format: Swift.String?
        /// The maximum number of inventory items returned per vault inventory retrieval request. This limit is set when initiating the job with the a InitiateJob request.
        public var limit: Swift.String?
        /// An opaque string that represents where to continue pagination of the vault inventory retrieval results. You use the marker in a new InitiateJob request to obtain additional inventory items. If there are no more inventory items, this value is null. For more information, see [ Range Inventory Retrieval](https://docs.aws.amazon.com/amazonglacier/latest/dev/api-initiate-job-post.html#api-initiate-job-post-vault-inventory-list-filtering).
        public var marker: Swift.String?
        /// The start of the date range in Universal Coordinated Time (UTC) for vault inventory retrieval that includes archives created on or after this date. This value should be a string in the ISO 8601 date format, for example 2013-03-20T17:03:43Z.
        public var startDate: Swift.String?

        public init(
            endDate: Swift.String? = nil,
            format: Swift.String? = nil,
            limit: Swift.String? = nil,
            marker: Swift.String? = nil,
            startDate: Swift.String? = nil
        )
        {
            self.endDate = endDate
            self.format = format
            self.limit = limit
            self.marker = marker
            self.startDate = startDate
        }
    }

}

extension GlacierClientTypes {

    public enum EncryptionType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case kms
        case s3
        case sdkUnknown(Swift.String)

        public static var allCases: [EncryptionType] {
            return [
                .kms,
                .s3
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .kms: return "aws:kms"
            case .s3: return "AES256"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension GlacierClientTypes {
    /// Contains information about the encryption used to store the job results in Amazon S3.
    public struct Encryption {
        /// The server-side encryption algorithm used when storing job results in Amazon S3, for example AES256 or aws:kms.
        public var encryptionType: GlacierClientTypes.EncryptionType?
        /// Optional. If the encryption type is aws:kms, you can use this value to specify the encryption context for the job results.
        public var kmsContext: Swift.String?
        /// The AWS KMS key ID to use for object encryption. All GET and PUT requests for an object protected by AWS KMS fail if not made by using Secure Sockets Layer (SSL) or Signature Version 4.
        public var kmsKeyId: Swift.String?

        public init(
            encryptionType: GlacierClientTypes.EncryptionType? = nil,
            kmsContext: Swift.String? = nil,
            kmsKeyId: Swift.String? = nil
        )
        {
            self.encryptionType = encryptionType
            self.kmsContext = kmsContext
            self.kmsKeyId = kmsKeyId
        }
    }

}

extension GlacierClientTypes {

    public enum StorageClass: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case reducedredundancy
        case standard
        case standardinfrequentaccess
        case sdkUnknown(Swift.String)

        public static var allCases: [StorageClass] {
            return [
                .reducedredundancy,
                .standard,
                .standardinfrequentaccess
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .reducedredundancy: return "REDUCED_REDUNDANCY"
            case .standard: return "STANDARD"
            case .standardinfrequentaccess: return "STANDARD_IA"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension GlacierClientTypes {
    /// Contains information about the location in Amazon S3 where the select job results are stored.
    public struct S3Location {
        /// A list of grants that control access to the staged results.
        public var accessControlList: [GlacierClientTypes.Grant]?
        /// The name of the Amazon S3 bucket where the job results are stored.
        public var bucketName: Swift.String?
        /// The canned access control list (ACL) to apply to the job results.
        public var cannedACL: GlacierClientTypes.CannedACL?
        /// Contains information about the encryption used to store the job results in Amazon S3.
        public var encryption: GlacierClientTypes.Encryption?
        /// The prefix that is prepended to the results for this request.
        public var `prefix`: Swift.String?
        /// The storage class used to store the job results.
        public var storageClass: GlacierClientTypes.StorageClass?
        /// The tag-set that is applied to the job results.
        public var tagging: [Swift.String: Swift.String]?
        /// A map of metadata to store with the job results in Amazon S3.
        public var userMetadata: [Swift.String: Swift.String]?

        public init(
            accessControlList: [GlacierClientTypes.Grant]? = nil,
            bucketName: Swift.String? = nil,
            cannedACL: GlacierClientTypes.CannedACL? = nil,
            encryption: GlacierClientTypes.Encryption? = nil,
            `prefix`: Swift.String? = nil,
            storageClass: GlacierClientTypes.StorageClass? = nil,
            tagging: [Swift.String: Swift.String]? = nil,
            userMetadata: [Swift.String: Swift.String]? = nil
        )
        {
            self.accessControlList = accessControlList
            self.bucketName = bucketName
            self.cannedACL = cannedACL
            self.encryption = encryption
            self.`prefix` = `prefix`
            self.storageClass = storageClass
            self.tagging = tagging
            self.userMetadata = userMetadata
        }
    }

}

extension GlacierClientTypes {
    /// Contains information about the location where the select job results are stored.
    public struct OutputLocation {
        /// Describes an S3 location that will receive the results of the job request.
        public var s3: GlacierClientTypes.S3Location?

        public init(
            s3: GlacierClientTypes.S3Location? = nil
        )
        {
            self.s3 = s3
        }
    }

}

extension GlacierClientTypes {

    public enum ExpressionType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case sql
        case sdkUnknown(Swift.String)

        public static var allCases: [ExpressionType] {
            return [
                .sql
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .sql: return "SQL"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension GlacierClientTypes {
    /// Describes how the archive is serialized.
    public struct InputSerialization {
        /// Describes the serialization of a CSV-encoded object.
        public var csv: GlacierClientTypes.CSVInput?

        public init(
            csv: GlacierClientTypes.CSVInput? = nil
        )
        {
            self.csv = csv
        }
    }

}

extension GlacierClientTypes {
    /// Describes how the select output is serialized.
    public struct OutputSerialization {
        /// Describes the serialization of CSV-encoded query results.
        public var csv: GlacierClientTypes.CSVOutput?

        public init(
            csv: GlacierClientTypes.CSVOutput? = nil
        )
        {
            self.csv = csv
        }
    }

}

extension GlacierClientTypes {
    /// Contains information about the parameters used for a select.
    public struct SelectParameters {
        /// The expression that is used to select the object.
        public var expression: Swift.String?
        /// The type of the provided expression, for example SQL.
        public var expressionType: GlacierClientTypes.ExpressionType?
        /// Describes the serialization format of the object.
        public var inputSerialization: GlacierClientTypes.InputSerialization?
        /// Describes how the results of the select job are serialized.
        public var outputSerialization: GlacierClientTypes.OutputSerialization?

        public init(
            expression: Swift.String? = nil,
            expressionType: GlacierClientTypes.ExpressionType? = nil,
            inputSerialization: GlacierClientTypes.InputSerialization? = nil,
            outputSerialization: GlacierClientTypes.OutputSerialization? = nil
        )
        {
            self.expression = expression
            self.expressionType = expressionType
            self.inputSerialization = inputSerialization
            self.outputSerialization = outputSerialization
        }
    }

}

extension GlacierClientTypes {

    public enum StatusCode: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case failed
        case inprogress
        case succeeded
        case sdkUnknown(Swift.String)

        public static var allCases: [StatusCode] {
            return [
                .failed,
                .inprogress,
                .succeeded
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .failed: return "Failed"
            case .inprogress: return "InProgress"
            case .succeeded: return "Succeeded"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

/// Contains the description of an Amazon S3 Glacier job.
public struct DescribeJobOutput {
    /// The job type. This value is either ArchiveRetrieval, InventoryRetrieval, or Select.
    public var action: GlacierClientTypes.ActionCode?
    /// The archive ID requested for a select job or archive retrieval. Otherwise, this field is null.
    public var archiveId: Swift.String?
    /// The SHA256 tree hash of the entire archive for an archive retrieval. For inventory retrieval or select jobs, this field is null.
    public var archiveSHA256TreeHash: Swift.String?
    /// For an archive retrieval job, this value is the size in bytes of the archive being requested for download. For an inventory retrieval or select job, this value is null.
    public var archiveSizeInBytes: Swift.Int?
    /// The job status. When a job is completed, you get the job's output using Get Job Output (GET output).
    public var completed: Swift.Bool
    /// The UTC time that the job request completed. While the job is in progress, the value is null.
    public var completionDate: Swift.String?
    /// The UTC date when the job was created. This value is a string representation of ISO 8601 date format, for example "2012-03-20T17:03:43.221Z".
    public var creationDate: Swift.String?
    /// Parameters used for range inventory retrieval.
    public var inventoryRetrievalParameters: GlacierClientTypes.InventoryRetrievalJobDescription?
    /// For an inventory retrieval job, this value is the size in bytes of the inventory requested for download. For an archive retrieval or select job, this value is null.
    public var inventorySizeInBytes: Swift.Int?
    /// The job description provided when initiating the job.
    public var jobDescription: Swift.String?
    /// An opaque string that identifies an Amazon S3 Glacier job.
    public var jobId: Swift.String?
    /// Contains the job output location.
    public var jobOutputPath: Swift.String?
    /// Contains the location where the data from the select job is stored.
    public var outputLocation: GlacierClientTypes.OutputLocation?
    /// The retrieved byte range for archive retrieval jobs in the form StartByteValue-EndByteValue. If no range was specified in the archive retrieval, then the whole archive is retrieved. In this case, StartByteValue equals 0 and EndByteValue equals the size of the archive minus 1. For inventory retrieval or select jobs, this field is null.
    public var retrievalByteRange: Swift.String?
    /// Contains the parameters used for a select.
    public var selectParameters: GlacierClientTypes.SelectParameters?
    /// For an archive retrieval job, this value is the checksum of the archive. Otherwise, this value is null. The SHA256 tree hash value for the requested range of an archive. If the InitiateJob request for an archive specified a tree-hash aligned range, then this field returns a value. If the whole archive is retrieved, this value is the same as the ArchiveSHA256TreeHash value. This field is null for the following:
    ///
    /// * Archive retrieval jobs that specify a range that is not tree-hash aligned
    ///
    ///
    ///
    ///
    /// * Archival jobs that specify a range that is equal to the whole archive, when the job status is InProgress
    ///
    ///
    ///
    ///
    /// * Inventory jobs
    ///
    /// * Select jobs
    public var sha256TreeHash: Swift.String?
    /// An Amazon SNS topic that receives notification.
    public var snsTopic: Swift.String?
    /// The status code can be InProgress, Succeeded, or Failed, and indicates the status of the job.
    public var statusCode: GlacierClientTypes.StatusCode?
    /// A friendly message that describes the job status.
    public var statusMessage: Swift.String?
    /// The tier to use for a select or an archive retrieval. Valid values are Expedited, Standard, or Bulk. Standard is the default.
    public var tier: Swift.String?
    /// The Amazon Resource Name (ARN) of the vault from which an archive retrieval was requested.
    public var vaultARN: Swift.String?

    public init(
        action: GlacierClientTypes.ActionCode? = nil,
        archiveId: Swift.String? = nil,
        archiveSHA256TreeHash: Swift.String? = nil,
        archiveSizeInBytes: Swift.Int? = nil,
        completed: Swift.Bool = false,
        completionDate: Swift.String? = nil,
        creationDate: Swift.String? = nil,
        inventoryRetrievalParameters: GlacierClientTypes.InventoryRetrievalJobDescription? = nil,
        inventorySizeInBytes: Swift.Int? = nil,
        jobDescription: Swift.String? = nil,
        jobId: Swift.String? = nil,
        jobOutputPath: Swift.String? = nil,
        outputLocation: GlacierClientTypes.OutputLocation? = nil,
        retrievalByteRange: Swift.String? = nil,
        selectParameters: GlacierClientTypes.SelectParameters? = nil,
        sha256TreeHash: Swift.String? = nil,
        snsTopic: Swift.String? = nil,
        statusCode: GlacierClientTypes.StatusCode? = nil,
        statusMessage: Swift.String? = nil,
        tier: Swift.String? = nil,
        vaultARN: Swift.String? = nil
    )
    {
        self.action = action
        self.archiveId = archiveId
        self.archiveSHA256TreeHash = archiveSHA256TreeHash
        self.archiveSizeInBytes = archiveSizeInBytes
        self.completed = completed
        self.completionDate = completionDate
        self.creationDate = creationDate
        self.inventoryRetrievalParameters = inventoryRetrievalParameters
        self.inventorySizeInBytes = inventorySizeInBytes
        self.jobDescription = jobDescription
        self.jobId = jobId
        self.jobOutputPath = jobOutputPath
        self.outputLocation = outputLocation
        self.retrievalByteRange = retrievalByteRange
        self.selectParameters = selectParameters
        self.sha256TreeHash = sha256TreeHash
        self.snsTopic = snsTopic
        self.statusCode = statusCode
        self.statusMessage = statusMessage
        self.tier = tier
        self.vaultARN = vaultARN
    }
}

/// Provides options for retrieving metadata for a specific vault in Amazon Glacier.
public struct DescribeVaultInput {
    /// The AccountId value is the AWS account ID of the account that owns the vault. You can either specify an AWS account ID or optionally a single '-' (hyphen), in which case Amazon S3 Glacier uses the AWS account ID associated with the credentials used to sign the request. If you use an account ID, do not include any hyphens ('-') in the ID.
    /// This member is required.
    public var accountId: Swift.String?
    /// The name of the vault.
    /// This member is required.
    public var vaultName: Swift.String?

    public init(
        accountId: Swift.String? = nil,
        vaultName: Swift.String? = nil
    )
    {
        self.accountId = accountId
        self.vaultName = vaultName
    }
}

/// Contains the Amazon S3 Glacier response to your request.
public struct DescribeVaultOutput {
    /// The Universal Coordinated Time (UTC) date when the vault was created. This value should be a string in the ISO 8601 date format, for example 2012-03-20T17:03:43.221Z.
    public var creationDate: Swift.String?
    /// The Universal Coordinated Time (UTC) date when Amazon S3 Glacier completed the last vault inventory. This value should be a string in the ISO 8601 date format, for example 2012-03-20T17:03:43.221Z.
    public var lastInventoryDate: Swift.String?
    /// The number of archives in the vault as of the last inventory date. This field will return null if an inventory has not yet run on the vault, for example if you just created the vault.
    public var numberOfArchives: Swift.Int
    /// Total size, in bytes, of the archives in the vault as of the last inventory date. This field will return null if an inventory has not yet run on the vault, for example if you just created the vault.
    public var sizeInBytes: Swift.Int
    /// The Amazon Resource Name (ARN) of the vault.
    public var vaultARN: Swift.String?
    /// The name of the vault.
    public var vaultName: Swift.String?

    public init(
        creationDate: Swift.String? = nil,
        lastInventoryDate: Swift.String? = nil,
        numberOfArchives: Swift.Int = 0,
        sizeInBytes: Swift.Int = 0,
        vaultARN: Swift.String? = nil,
        vaultName: Swift.String? = nil
    )
    {
        self.creationDate = creationDate
        self.lastInventoryDate = lastInventoryDate
        self.numberOfArchives = numberOfArchives
        self.sizeInBytes = sizeInBytes
        self.vaultARN = vaultARN
        self.vaultName = vaultName
    }
}

extension GlacierClientTypes {
    /// Contains the Amazon S3 Glacier response to your request.
    public struct DescribeVaultOutput {
        /// The Universal Coordinated Time (UTC) date when the vault was created. This value should be a string in the ISO 8601 date format, for example 2012-03-20T17:03:43.221Z.
        public var creationDate: Swift.String?
        /// The Universal Coordinated Time (UTC) date when Amazon S3 Glacier completed the last vault inventory. This value should be a string in the ISO 8601 date format, for example 2012-03-20T17:03:43.221Z.
        public var lastInventoryDate: Swift.String?
        /// The number of archives in the vault as of the last inventory date. This field will return null if an inventory has not yet run on the vault, for example if you just created the vault.
        public var numberOfArchives: Swift.Int
        /// Total size, in bytes, of the archives in the vault as of the last inventory date. This field will return null if an inventory has not yet run on the vault, for example if you just created the vault.
        public var sizeInBytes: Swift.Int
        /// The Amazon Resource Name (ARN) of the vault.
        public var vaultARN: Swift.String?
        /// The name of the vault.
        public var vaultName: Swift.String?

        public init(
            creationDate: Swift.String? = nil,
            lastInventoryDate: Swift.String? = nil,
            numberOfArchives: Swift.Int = 0,
            sizeInBytes: Swift.Int = 0,
            vaultARN: Swift.String? = nil,
            vaultName: Swift.String? = nil
        )
        {
            self.creationDate = creationDate
            self.lastInventoryDate = lastInventoryDate
            self.numberOfArchives = numberOfArchives
            self.sizeInBytes = sizeInBytes
            self.vaultARN = vaultARN
            self.vaultName = vaultName
        }
    }

}

/// Input for GetDataRetrievalPolicy.
public struct GetDataRetrievalPolicyInput {
    /// The AccountId value is the AWS account ID. This value must match the AWS account ID associated with the credentials used to sign the request. You can either specify an AWS account ID or optionally a single '-' (hyphen), in which case Amazon Glacier uses the AWS account ID associated with the credentials used to sign the request. If you specify your account ID, do not include any hyphens ('-') in the ID.
    /// This member is required.
    public var accountId: Swift.String?

    public init(
        accountId: Swift.String? = nil
    )
    {
        self.accountId = accountId
    }
}

/// Contains the Amazon S3 Glacier response to the GetDataRetrievalPolicy request.
public struct GetDataRetrievalPolicyOutput {
    /// Contains the returned data retrieval policy in JSON format.
    public var policy: GlacierClientTypes.DataRetrievalPolicy?

    public init(
        policy: GlacierClientTypes.DataRetrievalPolicy? = nil
    )
    {
        self.policy = policy
    }
}

/// Provides options for downloading output of an Amazon S3 Glacier job.
public struct GetJobOutputInput {
    /// The AccountId value is the AWS account ID of the account that owns the vault. You can either specify an AWS account ID or optionally a single '-' (hyphen), in which case Amazon S3 Glacier uses the AWS account ID associated with the credentials used to sign the request. If you use an account ID, do not include any hyphens ('-') in the ID.
    /// This member is required.
    public var accountId: Swift.String?
    /// The job ID whose data is downloaded.
    /// This member is required.
    public var jobId: Swift.String?
    /// The range of bytes to retrieve from the output. For example, if you want to download the first 1,048,576 bytes, specify the range as bytes=0-1048575. By default, this operation downloads the entire output. If the job output is large, then you can use a range to retrieve a portion of the output. This allows you to download the entire output in smaller chunks of bytes. For example, suppose you have 1 GB of job output you want to download and you decide to download 128 MB chunks of data at a time, which is a total of eight Get Job Output requests. You use the following process to download the job output:
    ///
    /// * Download a 128 MB chunk of output by specifying the appropriate byte range. Verify that all 128 MB of data was received.
    ///
    /// * Along with the data, the response includes a SHA256 tree hash of the payload. You compute the checksum of the payload on the client and compare it with the checksum you received in the response to ensure you received all the expected data.
    ///
    /// * Repeat steps 1 and 2 for all the eight 128 MB chunks of output data, each time specifying the appropriate byte range.
    ///
    /// * After downloading all the parts of the job output, you have a list of eight checksum values. Compute the tree hash of these values to find the checksum of the entire output. Using the [DescribeJob] API, obtain job information of the job that provided you the output. The response includes the checksum of the entire archive stored in Amazon S3 Glacier. You compare this value with the checksum you computed to ensure you have downloaded the entire archive content with no errors.
    public var range: Swift.String?
    /// The name of the vault.
    /// This member is required.
    public var vaultName: Swift.String?

    public init(
        accountId: Swift.String? = nil,
        jobId: Swift.String? = nil,
        range: Swift.String? = nil,
        vaultName: Swift.String? = nil
    )
    {
        self.accountId = accountId
        self.jobId = jobId
        self.range = range
        self.vaultName = vaultName
    }
}

/// Contains the Amazon S3 Glacier response to your request.
public struct GetJobOutputOutput {
    /// Indicates the range units accepted. For more information, see [RFC2616](http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html).
    public var acceptRanges: Swift.String?
    /// The description of an archive.
    public var archiveDescription: Swift.String?
    /// The job data, either archive data or inventory data.
    public var body: Smithy.ByteStream?
    /// The checksum of the data in the response. This header is returned only when retrieving the output for an archive retrieval job. Furthermore, this header appears only under the following conditions:
    ///
    /// * You get the entire range of the archive.
    ///
    /// * You request a range to return of the archive that starts and ends on a multiple of 1 MB. For example, if you have an 3.1 MB archive and you specify a range to return that starts at 1 MB and ends at 2 MB, then the x-amz-sha256-tree-hash is returned as a response header.
    ///
    /// * You request a range of the archive to return that starts on a multiple of 1 MB and goes to the end of the archive. For example, if you have a 3.1 MB archive and you specify a range that starts at 2 MB and ends at 3.1 MB (the end of the archive), then the x-amz-sha256-tree-hash is returned as a response header.
    public var checksum: Swift.String?
    /// The range of bytes returned by Amazon S3 Glacier. If only partial output is downloaded, the response provides the range of bytes Amazon S3 Glacier returned. For example, bytes 0-1048575/8388608 returns the first 1 MB from 8 MB.
    public var contentRange: Swift.String?
    /// The Content-Type depends on whether the job output is an archive or a vault inventory. For archive data, the Content-Type is application/octet-stream. For vault inventory, if you requested CSV format when you initiated the job, the Content-Type is text/csv. Otherwise, by default, vault inventory is returned as JSON, and the Content-Type is application/json.
    public var contentType: Swift.String?
    /// The HTTP response code for a job output request. The value depends on whether a range was specified in the request.
    public var status: Swift.Int

    public init(
        acceptRanges: Swift.String? = nil,
        archiveDescription: Swift.String? = nil,
        body: Smithy.ByteStream? = Smithy.ByteStream.data(Foundation.Data("".utf8)),
        checksum: Swift.String? = nil,
        contentRange: Swift.String? = nil,
        contentType: Swift.String? = nil,
        status: Swift.Int = 0
    )
    {
        self.acceptRanges = acceptRanges
        self.archiveDescription = archiveDescription
        self.body = body
        self.checksum = checksum
        self.contentRange = contentRange
        self.contentType = contentType
        self.status = status
    }
}

/// Input for GetVaultAccessPolicy.
public struct GetVaultAccessPolicyInput {
    /// The AccountId value is the AWS account ID of the account that owns the vault. You can either specify an AWS account ID or optionally a single '-' (hyphen), in which case Amazon S3 Glacier uses the AWS account ID associated with the credentials used to sign the request. If you use an account ID, do not include any hyphens ('-') in the ID.
    /// This member is required.
    public var accountId: Swift.String?
    /// The name of the vault.
    /// This member is required.
    public var vaultName: Swift.String?

    public init(
        accountId: Swift.String? = nil,
        vaultName: Swift.String? = nil
    )
    {
        self.accountId = accountId
        self.vaultName = vaultName
    }
}

extension GlacierClientTypes {
    /// Contains the vault access policy.
    public struct VaultAccessPolicy {
        /// The vault access policy.
        public var policy: Swift.String?

        public init(
            policy: Swift.String? = nil
        )
        {
            self.policy = policy
        }
    }

}

/// Output for GetVaultAccessPolicy.
public struct GetVaultAccessPolicyOutput {
    /// Contains the returned vault access policy as a JSON string.
    public var policy: GlacierClientTypes.VaultAccessPolicy?

    public init(
        policy: GlacierClientTypes.VaultAccessPolicy? = nil
    )
    {
        self.policy = policy
    }
}

/// The input values for GetVaultLock.
public struct GetVaultLockInput {
    /// The AccountId value is the AWS account ID of the account that owns the vault. You can either specify an AWS account ID or optionally a single '-' (hyphen), in which case Amazon S3 Glacier uses the AWS account ID associated with the credentials used to sign the request. If you use an account ID, do not include any hyphens ('-') in the ID.
    /// This member is required.
    public var accountId: Swift.String?
    /// The name of the vault.
    /// This member is required.
    public var vaultName: Swift.String?

    public init(
        accountId: Swift.String? = nil,
        vaultName: Swift.String? = nil
    )
    {
        self.accountId = accountId
        self.vaultName = vaultName
    }
}

/// Contains the Amazon S3 Glacier response to your request.
public struct GetVaultLockOutput {
    /// The UTC date and time at which the vault lock was put into the InProgress state.
    public var creationDate: Swift.String?
    /// The UTC date and time at which the lock ID expires. This value can be null if the vault lock is in a Locked state.
    public var expirationDate: Swift.String?
    /// The vault lock policy as a JSON string, which uses "\" as an escape character.
    public var policy: Swift.String?
    /// The state of the vault lock. InProgress or Locked.
    public var state: Swift.String?

    public init(
        creationDate: Swift.String? = nil,
        expirationDate: Swift.String? = nil,
        policy: Swift.String? = nil,
        state: Swift.String? = nil
    )
    {
        self.creationDate = creationDate
        self.expirationDate = expirationDate
        self.policy = policy
        self.state = state
    }
}

/// Provides options for retrieving the notification configuration set on an Amazon Glacier vault.
public struct GetVaultNotificationsInput {
    /// The AccountId value is the AWS account ID of the account that owns the vault. You can either specify an AWS account ID or optionally a single '-' (hyphen), in which case Amazon S3 Glacier uses the AWS account ID associated with the credentials used to sign the request. If you use an account ID, do not include any hyphens ('-') in the ID.
    /// This member is required.
    public var accountId: Swift.String?
    /// The name of the vault.
    /// This member is required.
    public var vaultName: Swift.String?

    public init(
        accountId: Swift.String? = nil,
        vaultName: Swift.String? = nil
    )
    {
        self.accountId = accountId
        self.vaultName = vaultName
    }
}

extension GlacierClientTypes {
    /// Represents a vault's notification configuration.
    public struct VaultNotificationConfig {
        /// A list of one or more events for which Amazon S3 Glacier will send a notification to the specified Amazon SNS topic.
        public var events: [Swift.String]?
        /// The Amazon Simple Notification Service (Amazon SNS) topic Amazon Resource Name (ARN).
        public var snsTopic: Swift.String?

        public init(
            events: [Swift.String]? = nil,
            snsTopic: Swift.String? = nil
        )
        {
            self.events = events
            self.snsTopic = snsTopic
        }
    }

}

/// Contains the Amazon S3 Glacier response to your request.
public struct GetVaultNotificationsOutput {
    /// Returns the notification configuration set on the vault.
    public var vaultNotificationConfig: GlacierClientTypes.VaultNotificationConfig?

    public init(
        vaultNotificationConfig: GlacierClientTypes.VaultNotificationConfig? = nil
    )
    {
        self.vaultNotificationConfig = vaultNotificationConfig
    }
}

/// Returned if there is insufficient capacity to process this expedited request. This error only applies to expedited retrievals and not to standard or bulk retrievals.
public struct InsufficientCapacityException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var code: Swift.String? = nil
        public internal(set) var message: Swift.String? = nil
        public internal(set) var type: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InsufficientCapacityException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        code: Swift.String? = nil,
        message: Swift.String? = nil,
        type: Swift.String? = nil
    )
    {
        self.properties.code = code
        self.properties.message = message
        self.properties.type = type
    }
}

/// Returned if a retrieval job would exceed the current data policy's retrieval rate limit. For more information about data retrieval policies,
public struct PolicyEnforcedException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// PolicyEnforcedException
        public internal(set) var code: Swift.String? = nil
        /// InitiateJob request denied by current data retrieval policy.
        public internal(set) var message: Swift.String? = nil
        /// Client
        public internal(set) var type: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "PolicyEnforcedException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        code: Swift.String? = nil,
        message: Swift.String? = nil,
        type: Swift.String? = nil
    )
    {
        self.properties.code = code
        self.properties.message = message
        self.properties.type = type
    }
}

extension GlacierClientTypes {
    /// Provides options for specifying a range inventory retrieval job.
    public struct InventoryRetrievalJobInput {
        /// The end of the date range in UTC for vault inventory retrieval that includes archives created before this date. This value should be a string in the ISO 8601 date format, for example 2013-03-20T17:03:43Z.
        public var endDate: Swift.String?
        /// Specifies the maximum number of inventory items returned per vault inventory retrieval request. Valid values are greater than or equal to 1.
        public var limit: Swift.String?
        /// An opaque string that represents where to continue pagination of the vault inventory retrieval results. You use the marker in a new InitiateJob request to obtain additional inventory items. If there are no more inventory items, this value is null.
        public var marker: Swift.String?
        /// The start of the date range in UTC for vault inventory retrieval that includes archives created on or after this date. This value should be a string in the ISO 8601 date format, for example 2013-03-20T17:03:43Z.
        public var startDate: Swift.String?

        public init(
            endDate: Swift.String? = nil,
            limit: Swift.String? = nil,
            marker: Swift.String? = nil,
            startDate: Swift.String? = nil
        )
        {
            self.endDate = endDate
            self.limit = limit
            self.marker = marker
            self.startDate = startDate
        }
    }

}

extension GlacierClientTypes {
    /// Provides options for defining a job.
    public struct JobParameters {
        /// The ID of the archive that you want to retrieve. This field is required only if Type is set to select or archive-retrievalcode>. An error occurs if you specify this request parameter for an inventory retrieval job request.
        public var archiveId: Swift.String?
        /// The optional description for the job. The description must be less than or equal to 1,024 bytes. The allowable characters are 7-bit ASCII without control codes-specifically, ASCII values 32-126 decimal or 0x20-0x7E hexadecimal.
        public var description: Swift.String?
        /// When initiating a job to retrieve a vault inventory, you can optionally add this parameter to your request to specify the output format. If you are initiating an inventory job and do not specify a Format field, JSON is the default format. Valid values are "CSV" and "JSON".
        public var format: Swift.String?
        /// Input parameters used for range inventory retrieval.
        public var inventoryRetrievalParameters: GlacierClientTypes.InventoryRetrievalJobInput?
        /// Contains information about the location where the select job results are stored.
        public var outputLocation: GlacierClientTypes.OutputLocation?
        /// The byte range to retrieve for an archive retrieval. in the form "StartByteValue-EndByteValue" If not specified, the whole archive is retrieved. If specified, the byte range must be megabyte (1024*1024) aligned which means that StartByteValue must be divisible by 1 MB and EndByteValue plus 1 must be divisible by 1 MB or be the end of the archive specified as the archive byte size value minus 1. If RetrievalByteRange is not megabyte aligned, this operation returns a 400 response. An error occurs if you specify this field for an inventory retrieval job request.
        public var retrievalByteRange: Swift.String?
        /// Contains the parameters that define a job.
        public var selectParameters: GlacierClientTypes.SelectParameters?
        /// The Amazon SNS topic ARN to which Amazon S3 Glacier sends a notification when the job is completed and the output is ready for you to download. The specified topic publishes the notification to its subscribers. The SNS topic must exist.
        public var snsTopic: Swift.String?
        /// The tier to use for a select or an archive retrieval job. Valid values are Expedited, Standard, or Bulk. Standard is the default.
        public var tier: Swift.String?
        /// The job type. You can initiate a job to perform a select query on an archive, retrieve an archive, or get an inventory of a vault. Valid values are "select", "archive-retrieval" and "inventory-retrieval".
        public var type: Swift.String?

        public init(
            archiveId: Swift.String? = nil,
            description: Swift.String? = nil,
            format: Swift.String? = nil,
            inventoryRetrievalParameters: GlacierClientTypes.InventoryRetrievalJobInput? = nil,
            outputLocation: GlacierClientTypes.OutputLocation? = nil,
            retrievalByteRange: Swift.String? = nil,
            selectParameters: GlacierClientTypes.SelectParameters? = nil,
            snsTopic: Swift.String? = nil,
            tier: Swift.String? = nil,
            type: Swift.String? = nil
        )
        {
            self.archiveId = archiveId
            self.description = description
            self.format = format
            self.inventoryRetrievalParameters = inventoryRetrievalParameters
            self.outputLocation = outputLocation
            self.retrievalByteRange = retrievalByteRange
            self.selectParameters = selectParameters
            self.snsTopic = snsTopic
            self.tier = tier
            self.type = type
        }
    }

}

/// Provides options for initiating an Amazon S3 Glacier job.
public struct InitiateJobInput {
    /// The AccountId value is the AWS account ID of the account that owns the vault. You can either specify an AWS account ID or optionally a single '-' (hyphen), in which case Amazon S3 Glacier uses the AWS account ID associated with the credentials used to sign the request. If you use an account ID, do not include any hyphens ('-') in the ID.
    /// This member is required.
    public var accountId: Swift.String?
    /// Provides options for specifying job information.
    public var jobParameters: GlacierClientTypes.JobParameters?
    /// The name of the vault.
    /// This member is required.
    public var vaultName: Swift.String?

    public init(
        accountId: Swift.String? = nil,
        jobParameters: GlacierClientTypes.JobParameters? = nil,
        vaultName: Swift.String? = nil
    )
    {
        self.accountId = accountId
        self.jobParameters = jobParameters
        self.vaultName = vaultName
    }
}

/// Contains the Amazon S3 Glacier response to your request.
public struct InitiateJobOutput {
    /// The ID of the job.
    public var jobId: Swift.String?
    /// The path to the location of where the select results are stored.
    public var jobOutputPath: Swift.String?
    /// The relative URI path of the job.
    public var location: Swift.String?

    public init(
        jobId: Swift.String? = nil,
        jobOutputPath: Swift.String? = nil,
        location: Swift.String? = nil
    )
    {
        self.jobId = jobId
        self.jobOutputPath = jobOutputPath
        self.location = location
    }
}

/// Provides options for initiating a multipart upload to an Amazon S3 Glacier vault.
public struct InitiateMultipartUploadInput {
    /// The AccountId value is the AWS account ID of the account that owns the vault. You can either specify an AWS account ID or optionally a single '-' (hyphen), in which case Amazon S3 Glacier uses the AWS account ID associated with the credentials used to sign the request. If you use an account ID, do not include any hyphens ('-') in the ID.
    /// This member is required.
    public var accountId: Swift.String?
    /// The archive description that you are uploading in parts. The part size must be a megabyte (1024 KB) multiplied by a power of 2, for example 1048576 (1 MB), 2097152 (2 MB), 4194304 (4 MB), 8388608 (8 MB), and so on. The minimum allowable part size is 1 MB, and the maximum is 4 GB (4096 MB).
    public var archiveDescription: Swift.String?
    /// The size of each part except the last, in bytes. The last part can be smaller than this part size.
    public var partSize: Swift.String?
    /// The name of the vault.
    /// This member is required.
    public var vaultName: Swift.String?

    public init(
        accountId: Swift.String? = nil,
        archiveDescription: Swift.String? = nil,
        partSize: Swift.String? = nil,
        vaultName: Swift.String? = nil
    )
    {
        self.accountId = accountId
        self.archiveDescription = archiveDescription
        self.partSize = partSize
        self.vaultName = vaultName
    }
}

/// The Amazon S3 Glacier response to your request.
public struct InitiateMultipartUploadOutput {
    /// The relative URI path of the multipart upload ID Amazon S3 Glacier created.
    public var location: Swift.String?
    /// The ID of the multipart upload. This value is also included as part of the location.
    public var uploadId: Swift.String?

    public init(
        location: Swift.String? = nil,
        uploadId: Swift.String? = nil
    )
    {
        self.location = location
        self.uploadId = uploadId
    }
}

extension GlacierClientTypes {
    /// Contains the vault lock policy.
    public struct VaultLockPolicy {
        /// The vault lock policy.
        public var policy: Swift.String?

        public init(
            policy: Swift.String? = nil
        )
        {
            self.policy = policy
        }
    }

}

/// The input values for InitiateVaultLock.
public struct InitiateVaultLockInput {
    /// The AccountId value is the AWS account ID. This value must match the AWS account ID associated with the credentials used to sign the request. You can either specify an AWS account ID or optionally a single '-' (hyphen), in which case Amazon Glacier uses the AWS account ID associated with the credentials used to sign the request. If you specify your account ID, do not include any hyphens ('-') in the ID.
    /// This member is required.
    public var accountId: Swift.String?
    /// The vault lock policy as a JSON string, which uses "\" as an escape character.
    public var policy: GlacierClientTypes.VaultLockPolicy?
    /// The name of the vault.
    /// This member is required.
    public var vaultName: Swift.String?

    public init(
        accountId: Swift.String? = nil,
        policy: GlacierClientTypes.VaultLockPolicy? = nil,
        vaultName: Swift.String? = nil
    )
    {
        self.accountId = accountId
        self.policy = policy
        self.vaultName = vaultName
    }
}

/// Contains the Amazon S3 Glacier response to your request.
public struct InitiateVaultLockOutput {
    /// The lock ID, which is used to complete the vault locking process.
    public var lockId: Swift.String?

    public init(
        lockId: Swift.String? = nil
    )
    {
        self.lockId = lockId
    }
}

/// Provides options for retrieving a job list for an Amazon S3 Glacier vault.
public struct ListJobsInput {
    /// The AccountId value is the AWS account ID of the account that owns the vault. You can either specify an AWS account ID or optionally a single '-' (hyphen), in which case Amazon S3 Glacier uses the AWS account ID associated with the credentials used to sign the request. If you use an account ID, do not include any hyphens ('-') in the ID.
    /// This member is required.
    public var accountId: Swift.String?
    /// The state of the jobs to return. You can specify true or false.
    public var completed: Swift.String?
    /// The maximum number of jobs to be returned. The default limit is 50. The number of jobs returned might be fewer than the specified limit, but the number of returned jobs never exceeds the limit.
    public var limit: Swift.Int?
    /// An opaque string used for pagination. This value specifies the job at which the listing of jobs should begin. Get the marker value from a previous List Jobs response. You only need to include the marker if you are continuing the pagination of results started in a previous List Jobs request.
    public var marker: Swift.String?
    /// The type of job status to return. You can specify the following values: InProgress, Succeeded, or Failed.
    public var statuscode: Swift.String?
    /// The name of the vault.
    /// This member is required.
    public var vaultName: Swift.String?

    public init(
        accountId: Swift.String? = nil,
        completed: Swift.String? = nil,
        limit: Swift.Int? = nil,
        marker: Swift.String? = nil,
        statuscode: Swift.String? = nil,
        vaultName: Swift.String? = nil
    )
    {
        self.accountId = accountId
        self.completed = completed
        self.limit = limit
        self.marker = marker
        self.statuscode = statuscode
        self.vaultName = vaultName
    }
}

extension GlacierClientTypes {
    /// Contains the description of an Amazon S3 Glacier job.
    public struct GlacierJobDescription {
        /// The job type. This value is either ArchiveRetrieval, InventoryRetrieval, or Select.
        public var action: GlacierClientTypes.ActionCode?
        /// The archive ID requested for a select job or archive retrieval. Otherwise, this field is null.
        public var archiveId: Swift.String?
        /// The SHA256 tree hash of the entire archive for an archive retrieval. For inventory retrieval or select jobs, this field is null.
        public var archiveSHA256TreeHash: Swift.String?
        /// For an archive retrieval job, this value is the size in bytes of the archive being requested for download. For an inventory retrieval or select job, this value is null.
        public var archiveSizeInBytes: Swift.Int?
        /// The job status. When a job is completed, you get the job's output using Get Job Output (GET output).
        public var completed: Swift.Bool
        /// The UTC time that the job request completed. While the job is in progress, the value is null.
        public var completionDate: Swift.String?
        /// The UTC date when the job was created. This value is a string representation of ISO 8601 date format, for example "2012-03-20T17:03:43.221Z".
        public var creationDate: Swift.String?
        /// Parameters used for range inventory retrieval.
        public var inventoryRetrievalParameters: GlacierClientTypes.InventoryRetrievalJobDescription?
        /// For an inventory retrieval job, this value is the size in bytes of the inventory requested for download. For an archive retrieval or select job, this value is null.
        public var inventorySizeInBytes: Swift.Int?
        /// The job description provided when initiating the job.
        public var jobDescription: Swift.String?
        /// An opaque string that identifies an Amazon S3 Glacier job.
        public var jobId: Swift.String?
        /// Contains the job output location.
        public var jobOutputPath: Swift.String?
        /// Contains the location where the data from the select job is stored.
        public var outputLocation: GlacierClientTypes.OutputLocation?
        /// The retrieved byte range for archive retrieval jobs in the form StartByteValue-EndByteValue. If no range was specified in the archive retrieval, then the whole archive is retrieved. In this case, StartByteValue equals 0 and EndByteValue equals the size of the archive minus 1. For inventory retrieval or select jobs, this field is null.
        public var retrievalByteRange: Swift.String?
        /// Contains the parameters used for a select.
        public var selectParameters: GlacierClientTypes.SelectParameters?
        /// For an archive retrieval job, this value is the checksum of the archive. Otherwise, this value is null. The SHA256 tree hash value for the requested range of an archive. If the InitiateJob request for an archive specified a tree-hash aligned range, then this field returns a value. If the whole archive is retrieved, this value is the same as the ArchiveSHA256TreeHash value. This field is null for the following:
        ///
        /// * Archive retrieval jobs that specify a range that is not tree-hash aligned
        ///
        ///
        ///
        ///
        /// * Archival jobs that specify a range that is equal to the whole archive, when the job status is InProgress
        ///
        ///
        ///
        ///
        /// * Inventory jobs
        ///
        /// * Select jobs
        public var sha256TreeHash: Swift.String?
        /// An Amazon SNS topic that receives notification.
        public var snsTopic: Swift.String?
        /// The status code can be InProgress, Succeeded, or Failed, and indicates the status of the job.
        public var statusCode: GlacierClientTypes.StatusCode?
        /// A friendly message that describes the job status.
        public var statusMessage: Swift.String?
        /// The tier to use for a select or an archive retrieval. Valid values are Expedited, Standard, or Bulk. Standard is the default.
        public var tier: Swift.String?
        /// The Amazon Resource Name (ARN) of the vault from which an archive retrieval was requested.
        public var vaultARN: Swift.String?

        public init(
            action: GlacierClientTypes.ActionCode? = nil,
            archiveId: Swift.String? = nil,
            archiveSHA256TreeHash: Swift.String? = nil,
            archiveSizeInBytes: Swift.Int? = nil,
            completed: Swift.Bool = false,
            completionDate: Swift.String? = nil,
            creationDate: Swift.String? = nil,
            inventoryRetrievalParameters: GlacierClientTypes.InventoryRetrievalJobDescription? = nil,
            inventorySizeInBytes: Swift.Int? = nil,
            jobDescription: Swift.String? = nil,
            jobId: Swift.String? = nil,
            jobOutputPath: Swift.String? = nil,
            outputLocation: GlacierClientTypes.OutputLocation? = nil,
            retrievalByteRange: Swift.String? = nil,
            selectParameters: GlacierClientTypes.SelectParameters? = nil,
            sha256TreeHash: Swift.String? = nil,
            snsTopic: Swift.String? = nil,
            statusCode: GlacierClientTypes.StatusCode? = nil,
            statusMessage: Swift.String? = nil,
            tier: Swift.String? = nil,
            vaultARN: Swift.String? = nil
        )
        {
            self.action = action
            self.archiveId = archiveId
            self.archiveSHA256TreeHash = archiveSHA256TreeHash
            self.archiveSizeInBytes = archiveSizeInBytes
            self.completed = completed
            self.completionDate = completionDate
            self.creationDate = creationDate
            self.inventoryRetrievalParameters = inventoryRetrievalParameters
            self.inventorySizeInBytes = inventorySizeInBytes
            self.jobDescription = jobDescription
            self.jobId = jobId
            self.jobOutputPath = jobOutputPath
            self.outputLocation = outputLocation
            self.retrievalByteRange = retrievalByteRange
            self.selectParameters = selectParameters
            self.sha256TreeHash = sha256TreeHash
            self.snsTopic = snsTopic
            self.statusCode = statusCode
            self.statusMessage = statusMessage
            self.tier = tier
            self.vaultARN = vaultARN
        }
    }

}

/// Contains the Amazon S3 Glacier response to your request.
public struct ListJobsOutput {
    /// A list of job objects. Each job object contains metadata describing the job.
    public var jobList: [GlacierClientTypes.GlacierJobDescription]?
    /// An opaque string used for pagination that specifies the job at which the listing of jobs should begin. You get the marker value from a previous List Jobs response. You only need to include the marker if you are continuing the pagination of the results started in a previous List Jobs request.
    public var marker: Swift.String?

    public init(
        jobList: [GlacierClientTypes.GlacierJobDescription]? = nil,
        marker: Swift.String? = nil
    )
    {
        self.jobList = jobList
        self.marker = marker
    }
}

/// Provides options for retrieving list of in-progress multipart uploads for an Amazon Glacier vault.
public struct ListMultipartUploadsInput {
    /// The AccountId value is the AWS account ID of the account that owns the vault. You can either specify an AWS account ID or optionally a single '-' (hyphen), in which case Amazon S3 Glacier uses the AWS account ID associated with the credentials used to sign the request. If you use an account ID, do not include any hyphens ('-') in the ID.
    /// This member is required.
    public var accountId: Swift.String?
    /// Specifies the maximum number of uploads returned in the response body. If this value is not specified, the List Uploads operation returns up to 50 uploads.
    public var limit: Swift.Int?
    /// An opaque string used for pagination. This value specifies the upload at which the listing of uploads should begin. Get the marker value from a previous List Uploads response. You need only include the marker if you are continuing the pagination of results started in a previous List Uploads request.
    public var marker: Swift.String?
    /// The name of the vault.
    /// This member is required.
    public var vaultName: Swift.String?

    public init(
        accountId: Swift.String? = nil,
        limit: Swift.Int? = nil,
        marker: Swift.String? = nil,
        vaultName: Swift.String? = nil
    )
    {
        self.accountId = accountId
        self.limit = limit
        self.marker = marker
        self.vaultName = vaultName
    }
}

extension GlacierClientTypes {
    /// A list of in-progress multipart uploads for a vault.
    public struct UploadListElement {
        /// The description of the archive that was specified in the Initiate Multipart Upload request.
        public var archiveDescription: Swift.String?
        /// The UTC time at which the multipart upload was initiated.
        public var creationDate: Swift.String?
        /// The ID of a multipart upload.
        public var multipartUploadId: Swift.String?
        /// The part size, in bytes, specified in the Initiate Multipart Upload request. This is the size of all the parts in the upload except the last part, which may be smaller than this size.
        public var partSizeInBytes: Swift.Int
        /// The Amazon Resource Name (ARN) of the vault that contains the archive.
        public var vaultARN: Swift.String?

        public init(
            archiveDescription: Swift.String? = nil,
            creationDate: Swift.String? = nil,
            multipartUploadId: Swift.String? = nil,
            partSizeInBytes: Swift.Int = 0,
            vaultARN: Swift.String? = nil
        )
        {
            self.archiveDescription = archiveDescription
            self.creationDate = creationDate
            self.multipartUploadId = multipartUploadId
            self.partSizeInBytes = partSizeInBytes
            self.vaultARN = vaultARN
        }
    }

}

/// Contains the Amazon S3 Glacier response to your request.
public struct ListMultipartUploadsOutput {
    /// An opaque string that represents where to continue pagination of the results. You use the marker in a new List Multipart Uploads request to obtain more uploads in the list. If there are no more uploads, this value is null.
    public var marker: Swift.String?
    /// A list of in-progress multipart uploads.
    public var uploadsList: [GlacierClientTypes.UploadListElement]?

    public init(
        marker: Swift.String? = nil,
        uploadsList: [GlacierClientTypes.UploadListElement]? = nil
    )
    {
        self.marker = marker
        self.uploadsList = uploadsList
    }
}

/// Provides options for retrieving a list of parts of an archive that have been uploaded in a specific multipart upload.
public struct ListPartsInput {
    /// The AccountId value is the AWS account ID of the account that owns the vault. You can either specify an AWS account ID or optionally a single '-' (hyphen), in which case Amazon S3 Glacier uses the AWS account ID associated with the credentials used to sign the request. If you use an account ID, do not include any hyphens ('-') in the ID.
    /// This member is required.
    public var accountId: Swift.String?
    /// The maximum number of parts to be returned. The default limit is 50. The number of parts returned might be fewer than the specified limit, but the number of returned parts never exceeds the limit.
    public var limit: Swift.Int?
    /// An opaque string used for pagination. This value specifies the part at which the listing of parts should begin. Get the marker value from the response of a previous List Parts response. You need only include the marker if you are continuing the pagination of results started in a previous List Parts request.
    public var marker: Swift.String?
    /// The upload ID of the multipart upload.
    /// This member is required.
    public var uploadId: Swift.String?
    /// The name of the vault.
    /// This member is required.
    public var vaultName: Swift.String?

    public init(
        accountId: Swift.String? = nil,
        limit: Swift.Int? = nil,
        marker: Swift.String? = nil,
        uploadId: Swift.String? = nil,
        vaultName: Swift.String? = nil
    )
    {
        self.accountId = accountId
        self.limit = limit
        self.marker = marker
        self.uploadId = uploadId
        self.vaultName = vaultName
    }
}

extension GlacierClientTypes {
    /// A list of the part sizes of the multipart upload.
    public struct PartListElement {
        /// The byte range of a part, inclusive of the upper value of the range.
        public var rangeInBytes: Swift.String?
        /// The SHA256 tree hash value that Amazon S3 Glacier calculated for the part. This field is never null.
        public var sha256TreeHash: Swift.String?

        public init(
            rangeInBytes: Swift.String? = nil,
            sha256TreeHash: Swift.String? = nil
        )
        {
            self.rangeInBytes = rangeInBytes
            self.sha256TreeHash = sha256TreeHash
        }
    }

}

/// Contains the Amazon S3 Glacier response to your request.
public struct ListPartsOutput {
    /// The description of the archive that was specified in the Initiate Multipart Upload request.
    public var archiveDescription: Swift.String?
    /// The UTC time at which the multipart upload was initiated.
    public var creationDate: Swift.String?
    /// An opaque string that represents where to continue pagination of the results. You use the marker in a new List Parts request to obtain more jobs in the list. If there are no more parts, this value is null.
    public var marker: Swift.String?
    /// The ID of the upload to which the parts are associated.
    public var multipartUploadId: Swift.String?
    /// The part size in bytes. This is the same value that you specified in the Initiate Multipart Upload request.
    public var partSizeInBytes: Swift.Int
    /// A list of the part sizes of the multipart upload. Each object in the array contains a RangeBytes and sha256-tree-hash name/value pair.
    public var parts: [GlacierClientTypes.PartListElement]?
    /// The Amazon Resource Name (ARN) of the vault to which the multipart upload was initiated.
    public var vaultARN: Swift.String?

    public init(
        archiveDescription: Swift.String? = nil,
        creationDate: Swift.String? = nil,
        marker: Swift.String? = nil,
        multipartUploadId: Swift.String? = nil,
        partSizeInBytes: Swift.Int = 0,
        parts: [GlacierClientTypes.PartListElement]? = nil,
        vaultARN: Swift.String? = nil
    )
    {
        self.archiveDescription = archiveDescription
        self.creationDate = creationDate
        self.marker = marker
        self.multipartUploadId = multipartUploadId
        self.partSizeInBytes = partSizeInBytes
        self.parts = parts
        self.vaultARN = vaultARN
    }
}

public struct ListProvisionedCapacityInput {
    /// The AWS account ID of the account that owns the vault. You can either specify an AWS account ID or optionally a single '-' (hyphen), in which case Amazon S3 Glacier uses the AWS account ID associated with the credentials used to sign the request. If you use an account ID, don't include any hyphens ('-') in the ID.
    /// This member is required.
    public var accountId: Swift.String?

    public init(
        accountId: Swift.String? = nil
    )
    {
        self.accountId = accountId
    }
}

extension GlacierClientTypes {
    /// The definition for a provisioned capacity unit.
    public struct ProvisionedCapacityDescription {
        /// The ID that identifies the provisioned capacity unit.
        public var capacityId: Swift.String?
        /// The date that the provisioned capacity unit expires, in Universal Coordinated Time (UTC).
        public var expirationDate: Swift.String?
        /// The date that the provisioned capacity unit was purchased, in Universal Coordinated Time (UTC).
        public var startDate: Swift.String?

        public init(
            capacityId: Swift.String? = nil,
            expirationDate: Swift.String? = nil,
            startDate: Swift.String? = nil
        )
        {
            self.capacityId = capacityId
            self.expirationDate = expirationDate
            self.startDate = startDate
        }
    }

}

public struct ListProvisionedCapacityOutput {
    /// The response body contains the following JSON fields.
    public var provisionedCapacityList: [GlacierClientTypes.ProvisionedCapacityDescription]?

    public init(
        provisionedCapacityList: [GlacierClientTypes.ProvisionedCapacityDescription]? = nil
    )
    {
        self.provisionedCapacityList = provisionedCapacityList
    }
}

/// The input value for ListTagsForVaultInput.
public struct ListTagsForVaultInput {
    /// The AccountId value is the AWS account ID of the account that owns the vault. You can either specify an AWS account ID or optionally a single '-' (hyphen), in which case Amazon S3 Glacier uses the AWS account ID associated with the credentials used to sign the request. If you use an account ID, do not include any hyphens ('-') in the ID.
    /// This member is required.
    public var accountId: Swift.String?
    /// The name of the vault.
    /// This member is required.
    public var vaultName: Swift.String?

    public init(
        accountId: Swift.String? = nil,
        vaultName: Swift.String? = nil
    )
    {
        self.accountId = accountId
        self.vaultName = vaultName
    }
}

/// Contains the Amazon S3 Glacier response to your request.
public struct ListTagsForVaultOutput {
    /// The tags attached to the vault. Each tag is composed of a key and a value.
    public var tags: [Swift.String: Swift.String]?

    public init(
        tags: [Swift.String: Swift.String]? = nil
    )
    {
        self.tags = tags
    }
}

/// Provides options to retrieve the vault list owned by the calling user's account. The list provides metadata information for each vault.
public struct ListVaultsInput {
    /// The AccountId value is the AWS account ID. This value must match the AWS account ID associated with the credentials used to sign the request. You can either specify an AWS account ID or optionally a single '-' (hyphen), in which case Amazon Glacier uses the AWS account ID associated with the credentials used to sign the request. If you specify your account ID, do not include any hyphens ('-') in the ID.
    /// This member is required.
    public var accountId: Swift.String?
    /// The maximum number of vaults to be returned. The default limit is 10. The number of vaults returned might be fewer than the specified limit, but the number of returned vaults never exceeds the limit.
    public var limit: Swift.Int?
    /// A string used for pagination. The marker specifies the vault ARN after which the listing of vaults should begin.
    public var marker: Swift.String?

    public init(
        accountId: Swift.String? = nil,
        limit: Swift.Int? = nil,
        marker: Swift.String? = nil
    )
    {
        self.accountId = accountId
        self.limit = limit
        self.marker = marker
    }
}

/// Contains the Amazon S3 Glacier response to your request.
public struct ListVaultsOutput {
    /// The vault ARN at which to continue pagination of the results. You use the marker in another List Vaults request to obtain more vaults in the list.
    public var marker: Swift.String?
    /// List of vaults.
    public var vaultList: [GlacierClientTypes.DescribeVaultOutput]?

    public init(
        marker: Swift.String? = nil,
        vaultList: [GlacierClientTypes.DescribeVaultOutput]? = nil
    )
    {
        self.marker = marker
        self.vaultList = vaultList
    }
}

public struct PurchaseProvisionedCapacityInput {
    /// The AWS account ID of the account that owns the vault. You can either specify an AWS account ID or optionally a single '-' (hyphen), in which case Amazon S3 Glacier uses the AWS account ID associated with the credentials used to sign the request. If you use an account ID, don't include any hyphens ('-') in the ID.
    /// This member is required.
    public var accountId: Swift.String?

    public init(
        accountId: Swift.String? = nil
    )
    {
        self.accountId = accountId
    }
}

public struct PurchaseProvisionedCapacityOutput {
    /// The ID that identifies the provisioned capacity unit.
    public var capacityId: Swift.String?

    public init(
        capacityId: Swift.String? = nil
    )
    {
        self.capacityId = capacityId
    }
}

/// The input value for RemoveTagsFromVaultInput.
public struct RemoveTagsFromVaultInput {
    /// The AccountId value is the AWS account ID of the account that owns the vault. You can either specify an AWS account ID or optionally a single '-' (hyphen), in which case Amazon S3 Glacier uses the AWS account ID associated with the credentials used to sign the request. If you use an account ID, do not include any hyphens ('-') in the ID.
    /// This member is required.
    public var accountId: Swift.String?
    /// A list of tag keys. Each corresponding tag is removed from the vault.
    public var tagKeys: [Swift.String]?
    /// The name of the vault.
    /// This member is required.
    public var vaultName: Swift.String?

    public init(
        accountId: Swift.String? = nil,
        tagKeys: [Swift.String]? = nil,
        vaultName: Swift.String? = nil
    )
    {
        self.accountId = accountId
        self.tagKeys = tagKeys
        self.vaultName = vaultName
    }
}

/// SetDataRetrievalPolicy input.
public struct SetDataRetrievalPolicyInput {
    /// The AccountId value is the AWS account ID. This value must match the AWS account ID associated with the credentials used to sign the request. You can either specify an AWS account ID or optionally a single '-' (hyphen), in which case Amazon Glacier uses the AWS account ID associated with the credentials used to sign the request. If you specify your account ID, do not include any hyphens ('-') in the ID.
    /// This member is required.
    public var accountId: Swift.String?
    /// The data retrieval policy in JSON format.
    public var policy: GlacierClientTypes.DataRetrievalPolicy?

    public init(
        accountId: Swift.String? = nil,
        policy: GlacierClientTypes.DataRetrievalPolicy? = nil
    )
    {
        self.accountId = accountId
        self.policy = policy
    }
}

/// SetVaultAccessPolicy input.
public struct SetVaultAccessPolicyInput {
    /// The AccountId value is the AWS account ID of the account that owns the vault. You can either specify an AWS account ID or optionally a single '-' (hyphen), in which case Amazon S3 Glacier uses the AWS account ID associated with the credentials used to sign the request. If you use an account ID, do not include any hyphens ('-') in the ID.
    /// This member is required.
    public var accountId: Swift.String?
    /// The vault access policy as a JSON string.
    public var policy: GlacierClientTypes.VaultAccessPolicy?
    /// The name of the vault.
    /// This member is required.
    public var vaultName: Swift.String?

    public init(
        accountId: Swift.String? = nil,
        policy: GlacierClientTypes.VaultAccessPolicy? = nil,
        vaultName: Swift.String? = nil
    )
    {
        self.accountId = accountId
        self.policy = policy
        self.vaultName = vaultName
    }
}

/// Provides options to configure notifications that will be sent when specific events happen to a vault.
public struct SetVaultNotificationsInput {
    /// The AccountId value is the AWS account ID of the account that owns the vault. You can either specify an AWS account ID or optionally a single '-' (hyphen), in which case Amazon S3 Glacier uses the AWS account ID associated with the credentials used to sign the request. If you use an account ID, do not include any hyphens ('-') in the ID.
    /// This member is required.
    public var accountId: Swift.String?
    /// The name of the vault.
    /// This member is required.
    public var vaultName: Swift.String?
    /// Provides options for specifying notification configuration.
    public var vaultNotificationConfig: GlacierClientTypes.VaultNotificationConfig?

    public init(
        accountId: Swift.String? = nil,
        vaultName: Swift.String? = nil,
        vaultNotificationConfig: GlacierClientTypes.VaultNotificationConfig? = nil
    )
    {
        self.accountId = accountId
        self.vaultName = vaultName
        self.vaultNotificationConfig = vaultNotificationConfig
    }
}

/// Returned if, when uploading an archive, Amazon S3 Glacier times out while receiving the upload.
public struct RequestTimeoutException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// 408 Request Timeout
        public internal(set) var code: Swift.String? = nil
        /// Returned if, when uploading an archive, Amazon S3 Glacier times out while receiving the upload.
        public internal(set) var message: Swift.String? = nil
        /// Client
        public internal(set) var type: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "RequestTimeoutException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        code: Swift.String? = nil,
        message: Swift.String? = nil,
        type: Swift.String? = nil
    )
    {
        self.properties.code = code
        self.properties.message = message
        self.properties.type = type
    }
}

/// Provides options to add an archive to a vault.
public struct UploadArchiveInput {
    /// The AccountId value is the AWS account ID of the account that owns the vault. You can either specify an AWS account ID or optionally a single '-' (hyphen), in which case Amazon S3 Glacier uses the AWS account ID associated with the credentials used to sign the request. If you use an account ID, do not include any hyphens ('-') in the ID.
    /// This member is required.
    public var accountId: Swift.String?
    /// The optional description of the archive you are uploading.
    public var archiveDescription: Swift.String?
    /// The data to upload.
    public var body: Smithy.ByteStream?
    /// The SHA256 tree hash of the data being uploaded.
    public var checksum: Swift.String?
    /// The name of the vault.
    /// This member is required.
    public var vaultName: Swift.String?

    public init(
        accountId: Swift.String? = nil,
        archiveDescription: Swift.String? = nil,
        body: Smithy.ByteStream? = nil,
        checksum: Swift.String? = nil,
        vaultName: Swift.String? = nil
    )
    {
        self.accountId = accountId
        self.archiveDescription = archiveDescription
        self.body = body
        self.checksum = checksum
        self.vaultName = vaultName
    }
}

/// Contains the Amazon S3 Glacier response to your request. For information about the underlying REST API, see [Upload Archive](https://docs.aws.amazon.com/amazonglacier/latest/dev/api-archive-post.html). For conceptual information, see [Working with Archives in Amazon S3 Glacier](https://docs.aws.amazon.com/amazonglacier/latest/dev/working-with-archives.html).
public struct UploadArchiveOutput {
    /// The ID of the archive. This value is also included as part of the location.
    public var archiveId: Swift.String?
    /// The checksum of the archive computed by Amazon S3 Glacier.
    public var checksum: Swift.String?
    /// The relative URI path of the newly added archive resource.
    public var location: Swift.String?

    public init(
        archiveId: Swift.String? = nil,
        checksum: Swift.String? = nil,
        location: Swift.String? = nil
    )
    {
        self.archiveId = archiveId
        self.checksum = checksum
        self.location = location
    }
}

/// Provides options to upload a part of an archive in a multipart upload operation.
public struct UploadMultipartPartInput {
    /// The AccountId value is the AWS account ID of the account that owns the vault. You can either specify an AWS account ID or optionally a single '-' (hyphen), in which case Amazon S3 Glacier uses the AWS account ID associated with the credentials used to sign the request. If you use an account ID, do not include any hyphens ('-') in the ID.
    /// This member is required.
    public var accountId: Swift.String?
    /// The data to upload.
    public var body: Smithy.ByteStream?
    /// The SHA256 tree hash of the data being uploaded.
    public var checksum: Swift.String?
    /// Identifies the range of bytes in the assembled archive that will be uploaded in this part. Amazon S3 Glacier uses this information to assemble the archive in the proper sequence. The format of this header follows RFC 2616. An example header is Content-Range:bytes 0-4194303/*.
    public var range: Swift.String?
    /// The upload ID of the multipart upload.
    /// This member is required.
    public var uploadId: Swift.String?
    /// The name of the vault.
    /// This member is required.
    public var vaultName: Swift.String?

    public init(
        accountId: Swift.String? = nil,
        body: Smithy.ByteStream? = nil,
        checksum: Swift.String? = nil,
        range: Swift.String? = nil,
        uploadId: Swift.String? = nil,
        vaultName: Swift.String? = nil
    )
    {
        self.accountId = accountId
        self.body = body
        self.checksum = checksum
        self.range = range
        self.uploadId = uploadId
        self.vaultName = vaultName
    }
}

/// Contains the Amazon S3 Glacier response to your request.
public struct UploadMultipartPartOutput {
    /// The SHA256 tree hash that Amazon S3 Glacier computed for the uploaded part.
    public var checksum: Swift.String?

    public init(
        checksum: Swift.String? = nil
    )
    {
        self.checksum = checksum
    }
}

extension AbortMultipartUploadInput {

    static func urlPathProvider(_ value: AbortMultipartUploadInput) -> Swift.String? {
        guard let accountId = value.accountId else {
            return nil
        }
        guard let vaultName = value.vaultName else {
            return nil
        }
        guard let uploadId = value.uploadId else {
            return nil
        }
        return "/\(accountId.urlPercentEncoding())/vaults/\(vaultName.urlPercentEncoding())/multipart-uploads/\(uploadId.urlPercentEncoding())"
    }
}

extension AbortVaultLockInput {

    static func urlPathProvider(_ value: AbortVaultLockInput) -> Swift.String? {
        guard let accountId = value.accountId else {
            return nil
        }
        guard let vaultName = value.vaultName else {
            return nil
        }
        return "/\(accountId.urlPercentEncoding())/vaults/\(vaultName.urlPercentEncoding())/lock-policy"
    }
}

extension AddTagsToVaultInput {

    static func urlPathProvider(_ value: AddTagsToVaultInput) -> Swift.String? {
        guard let accountId = value.accountId else {
            return nil
        }
        guard let vaultName = value.vaultName else {
            return nil
        }
        return "/\(accountId.urlPercentEncoding())/vaults/\(vaultName.urlPercentEncoding())/tags"
    }
}

extension AddTagsToVaultInput {

    static func queryItemProvider(_ value: AddTagsToVaultInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        items.append(Smithy.URIQueryItem(name: "operation", value: "add"))
        return items
    }
}

extension CompleteMultipartUploadInput {

    static func urlPathProvider(_ value: CompleteMultipartUploadInput) -> Swift.String? {
        guard let accountId = value.accountId else {
            return nil
        }
        guard let vaultName = value.vaultName else {
            return nil
        }
        guard let uploadId = value.uploadId else {
            return nil
        }
        return "/\(accountId.urlPercentEncoding())/vaults/\(vaultName.urlPercentEncoding())/multipart-uploads/\(uploadId.urlPercentEncoding())"
    }
}

extension CompleteMultipartUploadInput {

    static func headerProvider(_ value: CompleteMultipartUploadInput) -> SmithyHTTPAPI.Headers {
        var items = SmithyHTTPAPI.Headers()
        if let archiveSize = value.archiveSize {
            items.add(SmithyHTTPAPI.Header(name: "x-amz-archive-size", value: Swift.String(archiveSize)))
        }
        if let checksum = value.checksum {
            items.add(SmithyHTTPAPI.Header(name: "x-amz-sha256-tree-hash", value: Swift.String(checksum)))
        }
        return items
    }
}

extension CompleteVaultLockInput {

    static func urlPathProvider(_ value: CompleteVaultLockInput) -> Swift.String? {
        guard let accountId = value.accountId else {
            return nil
        }
        guard let vaultName = value.vaultName else {
            return nil
        }
        guard let lockId = value.lockId else {
            return nil
        }
        return "/\(accountId.urlPercentEncoding())/vaults/\(vaultName.urlPercentEncoding())/lock-policy/\(lockId.urlPercentEncoding())"
    }
}

extension CreateVaultInput {

    static func urlPathProvider(_ value: CreateVaultInput) -> Swift.String? {
        guard let accountId = value.accountId else {
            return nil
        }
        guard let vaultName = value.vaultName else {
            return nil
        }
        return "/\(accountId.urlPercentEncoding())/vaults/\(vaultName.urlPercentEncoding())"
    }
}

extension DeleteArchiveInput {

    static func urlPathProvider(_ value: DeleteArchiveInput) -> Swift.String? {
        guard let accountId = value.accountId else {
            return nil
        }
        guard let vaultName = value.vaultName else {
            return nil
        }
        guard let archiveId = value.archiveId else {
            return nil
        }
        return "/\(accountId.urlPercentEncoding())/vaults/\(vaultName.urlPercentEncoding())/archives/\(archiveId.urlPercentEncoding())"
    }
}

extension DeleteVaultInput {

    static func urlPathProvider(_ value: DeleteVaultInput) -> Swift.String? {
        guard let accountId = value.accountId else {
            return nil
        }
        guard let vaultName = value.vaultName else {
            return nil
        }
        return "/\(accountId.urlPercentEncoding())/vaults/\(vaultName.urlPercentEncoding())"
    }
}

extension DeleteVaultAccessPolicyInput {

    static func urlPathProvider(_ value: DeleteVaultAccessPolicyInput) -> Swift.String? {
        guard let accountId = value.accountId else {
            return nil
        }
        guard let vaultName = value.vaultName else {
            return nil
        }
        return "/\(accountId.urlPercentEncoding())/vaults/\(vaultName.urlPercentEncoding())/access-policy"
    }
}

extension DeleteVaultNotificationsInput {

    static func urlPathProvider(_ value: DeleteVaultNotificationsInput) -> Swift.String? {
        guard let accountId = value.accountId else {
            return nil
        }
        guard let vaultName = value.vaultName else {
            return nil
        }
        return "/\(accountId.urlPercentEncoding())/vaults/\(vaultName.urlPercentEncoding())/notification-configuration"
    }
}

extension DescribeJobInput {

    static func urlPathProvider(_ value: DescribeJobInput) -> Swift.String? {
        guard let accountId = value.accountId else {
            return nil
        }
        guard let vaultName = value.vaultName else {
            return nil
        }
        guard let jobId = value.jobId else {
            return nil
        }
        return "/\(accountId.urlPercentEncoding())/vaults/\(vaultName.urlPercentEncoding())/jobs/\(jobId.urlPercentEncoding())"
    }
}

extension DescribeVaultInput {

    static func urlPathProvider(_ value: DescribeVaultInput) -> Swift.String? {
        guard let accountId = value.accountId else {
            return nil
        }
        guard let vaultName = value.vaultName else {
            return nil
        }
        return "/\(accountId.urlPercentEncoding())/vaults/\(vaultName.urlPercentEncoding())"
    }
}

extension GetDataRetrievalPolicyInput {

    static func urlPathProvider(_ value: GetDataRetrievalPolicyInput) -> Swift.String? {
        guard let accountId = value.accountId else {
            return nil
        }
        return "/\(accountId.urlPercentEncoding())/policies/data-retrieval"
    }
}

extension GetJobOutputInput {

    static func urlPathProvider(_ value: GetJobOutputInput) -> Swift.String? {
        guard let accountId = value.accountId else {
            return nil
        }
        guard let vaultName = value.vaultName else {
            return nil
        }
        guard let jobId = value.jobId else {
            return nil
        }
        return "/\(accountId.urlPercentEncoding())/vaults/\(vaultName.urlPercentEncoding())/jobs/\(jobId.urlPercentEncoding())/output"
    }
}

extension GetJobOutputInput {

    static func headerProvider(_ value: GetJobOutputInput) -> SmithyHTTPAPI.Headers {
        var items = SmithyHTTPAPI.Headers()
        if let range = value.range {
            items.add(SmithyHTTPAPI.Header(name: "Range", value: Swift.String(range)))
        }
        return items
    }
}

extension GetVaultAccessPolicyInput {

    static func urlPathProvider(_ value: GetVaultAccessPolicyInput) -> Swift.String? {
        guard let accountId = value.accountId else {
            return nil
        }
        guard let vaultName = value.vaultName else {
            return nil
        }
        return "/\(accountId.urlPercentEncoding())/vaults/\(vaultName.urlPercentEncoding())/access-policy"
    }
}

extension GetVaultLockInput {

    static func urlPathProvider(_ value: GetVaultLockInput) -> Swift.String? {
        guard let accountId = value.accountId else {
            return nil
        }
        guard let vaultName = value.vaultName else {
            return nil
        }
        return "/\(accountId.urlPercentEncoding())/vaults/\(vaultName.urlPercentEncoding())/lock-policy"
    }
}

extension GetVaultNotificationsInput {

    static func urlPathProvider(_ value: GetVaultNotificationsInput) -> Swift.String? {
        guard let accountId = value.accountId else {
            return nil
        }
        guard let vaultName = value.vaultName else {
            return nil
        }
        return "/\(accountId.urlPercentEncoding())/vaults/\(vaultName.urlPercentEncoding())/notification-configuration"
    }
}

extension InitiateJobInput {

    static func urlPathProvider(_ value: InitiateJobInput) -> Swift.String? {
        guard let accountId = value.accountId else {
            return nil
        }
        guard let vaultName = value.vaultName else {
            return nil
        }
        return "/\(accountId.urlPercentEncoding())/vaults/\(vaultName.urlPercentEncoding())/jobs"
    }
}

extension InitiateMultipartUploadInput {

    static func urlPathProvider(_ value: InitiateMultipartUploadInput) -> Swift.String? {
        guard let accountId = value.accountId else {
            return nil
        }
        guard let vaultName = value.vaultName else {
            return nil
        }
        return "/\(accountId.urlPercentEncoding())/vaults/\(vaultName.urlPercentEncoding())/multipart-uploads"
    }
}

extension InitiateMultipartUploadInput {

    static func headerProvider(_ value: InitiateMultipartUploadInput) -> SmithyHTTPAPI.Headers {
        var items = SmithyHTTPAPI.Headers()
        if let archiveDescription = value.archiveDescription {
            items.add(SmithyHTTPAPI.Header(name: "x-amz-archive-description", value: Swift.String(archiveDescription)))
        }
        if let partSize = value.partSize {
            items.add(SmithyHTTPAPI.Header(name: "x-amz-part-size", value: Swift.String(partSize)))
        }
        return items
    }
}

extension InitiateVaultLockInput {

    static func urlPathProvider(_ value: InitiateVaultLockInput) -> Swift.String? {
        guard let accountId = value.accountId else {
            return nil
        }
        guard let vaultName = value.vaultName else {
            return nil
        }
        return "/\(accountId.urlPercentEncoding())/vaults/\(vaultName.urlPercentEncoding())/lock-policy"
    }
}

extension ListJobsInput {

    static func urlPathProvider(_ value: ListJobsInput) -> Swift.String? {
        guard let accountId = value.accountId else {
            return nil
        }
        guard let vaultName = value.vaultName else {
            return nil
        }
        return "/\(accountId.urlPercentEncoding())/vaults/\(vaultName.urlPercentEncoding())/jobs"
    }
}

extension ListJobsInput {

    static func queryItemProvider(_ value: ListJobsInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        if let statuscode = value.statuscode {
            let statuscodeQueryItem = Smithy.URIQueryItem(name: "statuscode".urlPercentEncoding(), value: Swift.String(statuscode).urlPercentEncoding())
            items.append(statuscodeQueryItem)
        }
        if let marker = value.marker {
            let markerQueryItem = Smithy.URIQueryItem(name: "marker".urlPercentEncoding(), value: Swift.String(marker).urlPercentEncoding())
            items.append(markerQueryItem)
        }
        if let limit = value.limit {
            let limitQueryItem = Smithy.URIQueryItem(name: "limit".urlPercentEncoding(), value: Swift.String(limit).urlPercentEncoding())
            items.append(limitQueryItem)
        }
        if let completed = value.completed {
            let completedQueryItem = Smithy.URIQueryItem(name: "completed".urlPercentEncoding(), value: Swift.String(completed).urlPercentEncoding())
            items.append(completedQueryItem)
        }
        return items
    }
}

extension ListMultipartUploadsInput {

    static func urlPathProvider(_ value: ListMultipartUploadsInput) -> Swift.String? {
        guard let accountId = value.accountId else {
            return nil
        }
        guard let vaultName = value.vaultName else {
            return nil
        }
        return "/\(accountId.urlPercentEncoding())/vaults/\(vaultName.urlPercentEncoding())/multipart-uploads"
    }
}

extension ListMultipartUploadsInput {

    static func queryItemProvider(_ value: ListMultipartUploadsInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        if let marker = value.marker {
            let markerQueryItem = Smithy.URIQueryItem(name: "marker".urlPercentEncoding(), value: Swift.String(marker).urlPercentEncoding())
            items.append(markerQueryItem)
        }
        if let limit = value.limit {
            let limitQueryItem = Smithy.URIQueryItem(name: "limit".urlPercentEncoding(), value: Swift.String(limit).urlPercentEncoding())
            items.append(limitQueryItem)
        }
        return items
    }
}

extension ListPartsInput {

    static func urlPathProvider(_ value: ListPartsInput) -> Swift.String? {
        guard let accountId = value.accountId else {
            return nil
        }
        guard let vaultName = value.vaultName else {
            return nil
        }
        guard let uploadId = value.uploadId else {
            return nil
        }
        return "/\(accountId.urlPercentEncoding())/vaults/\(vaultName.urlPercentEncoding())/multipart-uploads/\(uploadId.urlPercentEncoding())"
    }
}

extension ListPartsInput {

    static func queryItemProvider(_ value: ListPartsInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        if let marker = value.marker {
            let markerQueryItem = Smithy.URIQueryItem(name: "marker".urlPercentEncoding(), value: Swift.String(marker).urlPercentEncoding())
            items.append(markerQueryItem)
        }
        if let limit = value.limit {
            let limitQueryItem = Smithy.URIQueryItem(name: "limit".urlPercentEncoding(), value: Swift.String(limit).urlPercentEncoding())
            items.append(limitQueryItem)
        }
        return items
    }
}

extension ListProvisionedCapacityInput {

    static func urlPathProvider(_ value: ListProvisionedCapacityInput) -> Swift.String? {
        guard let accountId = value.accountId else {
            return nil
        }
        return "/\(accountId.urlPercentEncoding())/provisioned-capacity"
    }
}

extension ListTagsForVaultInput {

    static func urlPathProvider(_ value: ListTagsForVaultInput) -> Swift.String? {
        guard let accountId = value.accountId else {
            return nil
        }
        guard let vaultName = value.vaultName else {
            return nil
        }
        return "/\(accountId.urlPercentEncoding())/vaults/\(vaultName.urlPercentEncoding())/tags"
    }
}

extension ListVaultsInput {

    static func urlPathProvider(_ value: ListVaultsInput) -> Swift.String? {
        guard let accountId = value.accountId else {
            return nil
        }
        return "/\(accountId.urlPercentEncoding())/vaults"
    }
}

extension ListVaultsInput {

    static func queryItemProvider(_ value: ListVaultsInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        if let marker = value.marker {
            let markerQueryItem = Smithy.URIQueryItem(name: "marker".urlPercentEncoding(), value: Swift.String(marker).urlPercentEncoding())
            items.append(markerQueryItem)
        }
        if let limit = value.limit {
            let limitQueryItem = Smithy.URIQueryItem(name: "limit".urlPercentEncoding(), value: Swift.String(limit).urlPercentEncoding())
            items.append(limitQueryItem)
        }
        return items
    }
}

extension PurchaseProvisionedCapacityInput {

    static func urlPathProvider(_ value: PurchaseProvisionedCapacityInput) -> Swift.String? {
        guard let accountId = value.accountId else {
            return nil
        }
        return "/\(accountId.urlPercentEncoding())/provisioned-capacity"
    }
}

extension RemoveTagsFromVaultInput {

    static func urlPathProvider(_ value: RemoveTagsFromVaultInput) -> Swift.String? {
        guard let accountId = value.accountId else {
            return nil
        }
        guard let vaultName = value.vaultName else {
            return nil
        }
        return "/\(accountId.urlPercentEncoding())/vaults/\(vaultName.urlPercentEncoding())/tags"
    }
}

extension RemoveTagsFromVaultInput {

    static func queryItemProvider(_ value: RemoveTagsFromVaultInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        items.append(Smithy.URIQueryItem(name: "operation", value: "remove"))
        return items
    }
}

extension SetDataRetrievalPolicyInput {

    static func urlPathProvider(_ value: SetDataRetrievalPolicyInput) -> Swift.String? {
        guard let accountId = value.accountId else {
            return nil
        }
        return "/\(accountId.urlPercentEncoding())/policies/data-retrieval"
    }
}

extension SetVaultAccessPolicyInput {

    static func urlPathProvider(_ value: SetVaultAccessPolicyInput) -> Swift.String? {
        guard let accountId = value.accountId else {
            return nil
        }
        guard let vaultName = value.vaultName else {
            return nil
        }
        return "/\(accountId.urlPercentEncoding())/vaults/\(vaultName.urlPercentEncoding())/access-policy"
    }
}

extension SetVaultNotificationsInput {

    static func urlPathProvider(_ value: SetVaultNotificationsInput) -> Swift.String? {
        guard let accountId = value.accountId else {
            return nil
        }
        guard let vaultName = value.vaultName else {
            return nil
        }
        return "/\(accountId.urlPercentEncoding())/vaults/\(vaultName.urlPercentEncoding())/notification-configuration"
    }
}

extension UploadArchiveInput {

    static func urlPathProvider(_ value: UploadArchiveInput) -> Swift.String? {
        guard let accountId = value.accountId else {
            return nil
        }
        guard let vaultName = value.vaultName else {
            return nil
        }
        return "/\(accountId.urlPercentEncoding())/vaults/\(vaultName.urlPercentEncoding())/archives"
    }
}

extension UploadArchiveInput {

    static func headerProvider(_ value: UploadArchiveInput) -> SmithyHTTPAPI.Headers {
        var items = SmithyHTTPAPI.Headers()
        if let archiveDescription = value.archiveDescription {
            items.add(SmithyHTTPAPI.Header(name: "x-amz-archive-description", value: Swift.String(archiveDescription)))
        }
        if let checksum = value.checksum {
            items.add(SmithyHTTPAPI.Header(name: "x-amz-sha256-tree-hash", value: Swift.String(checksum)))
        }
        return items
    }
}

extension UploadMultipartPartInput {

    static func urlPathProvider(_ value: UploadMultipartPartInput) -> Swift.String? {
        guard let accountId = value.accountId else {
            return nil
        }
        guard let vaultName = value.vaultName else {
            return nil
        }
        guard let uploadId = value.uploadId else {
            return nil
        }
        return "/\(accountId.urlPercentEncoding())/vaults/\(vaultName.urlPercentEncoding())/multipart-uploads/\(uploadId.urlPercentEncoding())"
    }
}

extension UploadMultipartPartInput {

    static func headerProvider(_ value: UploadMultipartPartInput) -> SmithyHTTPAPI.Headers {
        var items = SmithyHTTPAPI.Headers()
        if let checksum = value.checksum {
            items.add(SmithyHTTPAPI.Header(name: "x-amz-sha256-tree-hash", value: Swift.String(checksum)))
        }
        if let range = value.range {
            items.add(SmithyHTTPAPI.Header(name: "Content-Range", value: Swift.String(range)))
        }
        return items
    }
}

extension AddTagsToVaultInput {

    static func write(value: AddTagsToVaultInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Tags"].writeMap(value.tags, valueWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
    }
}

extension InitiateJobInput {

    static func write(value: InitiateJobInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["jobParameters"].write(value.jobParameters, with: GlacierClientTypes.JobParameters.write(value:to:))
    }
}

extension InitiateVaultLockInput {

    static func write(value: InitiateVaultLockInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["policy"].write(value.policy, with: GlacierClientTypes.VaultLockPolicy.write(value:to:))
    }
}

extension RemoveTagsFromVaultInput {

    static func write(value: RemoveTagsFromVaultInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["TagKeys"].writeList(value.tagKeys, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension SetDataRetrievalPolicyInput {

    static func write(value: SetDataRetrievalPolicyInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Policy"].write(value.policy, with: GlacierClientTypes.DataRetrievalPolicy.write(value:to:))
    }
}

extension SetVaultAccessPolicyInput {

    static func write(value: SetVaultAccessPolicyInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["policy"].write(value.policy, with: GlacierClientTypes.VaultAccessPolicy.write(value:to:))
    }
}

extension SetVaultNotificationsInput {

    static func write(value: SetVaultNotificationsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["vaultNotificationConfig"].write(value.vaultNotificationConfig, with: GlacierClientTypes.VaultNotificationConfig.write(value:to:))
    }
}

extension UploadArchiveInput {

    static func write(value: UploadArchiveInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["body"].write(value.body)
    }
}

extension UploadMultipartPartInput {

    static func write(value: UploadMultipartPartInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["body"].write(value.body)
    }
}

extension AbortMultipartUploadOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> AbortMultipartUploadOutput {
        return AbortMultipartUploadOutput()
    }
}

extension AbortVaultLockOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> AbortVaultLockOutput {
        return AbortVaultLockOutput()
    }
}

extension AddTagsToVaultOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> AddTagsToVaultOutput {
        return AddTagsToVaultOutput()
    }
}

extension CompleteMultipartUploadOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CompleteMultipartUploadOutput {
        var value = CompleteMultipartUploadOutput()
        if let archiveIdHeaderValue = httpResponse.headers.value(for: "x-amz-archive-id") {
            value.archiveId = archiveIdHeaderValue
        }
        if let checksumHeaderValue = httpResponse.headers.value(for: "x-amz-sha256-tree-hash") {
            value.checksum = checksumHeaderValue
        }
        if let locationHeaderValue = httpResponse.headers.value(for: "Location") {
            value.location = locationHeaderValue
        }
        return value
    }
}

extension CompleteVaultLockOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CompleteVaultLockOutput {
        return CompleteVaultLockOutput()
    }
}

extension CreateVaultOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateVaultOutput {
        var value = CreateVaultOutput()
        if let locationHeaderValue = httpResponse.headers.value(for: "Location") {
            value.location = locationHeaderValue
        }
        return value
    }
}

extension DeleteArchiveOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteArchiveOutput {
        return DeleteArchiveOutput()
    }
}

extension DeleteVaultOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteVaultOutput {
        return DeleteVaultOutput()
    }
}

extension DeleteVaultAccessPolicyOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteVaultAccessPolicyOutput {
        return DeleteVaultAccessPolicyOutput()
    }
}

extension DeleteVaultNotificationsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteVaultNotificationsOutput {
        return DeleteVaultNotificationsOutput()
    }
}

extension DescribeJobOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeJobOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DescribeJobOutput()
        value.action = try reader["Action"].readIfPresent()
        value.archiveId = try reader["ArchiveId"].readIfPresent()
        value.archiveSHA256TreeHash = try reader["ArchiveSHA256TreeHash"].readIfPresent()
        value.archiveSizeInBytes = try reader["ArchiveSizeInBytes"].readIfPresent()
        value.completed = try reader["Completed"].readIfPresent() ?? false
        value.completionDate = try reader["CompletionDate"].readIfPresent()
        value.creationDate = try reader["CreationDate"].readIfPresent()
        value.inventoryRetrievalParameters = try reader["InventoryRetrievalParameters"].readIfPresent(with: GlacierClientTypes.InventoryRetrievalJobDescription.read(from:))
        value.inventorySizeInBytes = try reader["InventorySizeInBytes"].readIfPresent()
        value.jobDescription = try reader["JobDescription"].readIfPresent()
        value.jobId = try reader["JobId"].readIfPresent()
        value.jobOutputPath = try reader["JobOutputPath"].readIfPresent()
        value.outputLocation = try reader["OutputLocation"].readIfPresent(with: GlacierClientTypes.OutputLocation.read(from:))
        value.retrievalByteRange = try reader["RetrievalByteRange"].readIfPresent()
        value.sha256TreeHash = try reader["SHA256TreeHash"].readIfPresent()
        value.snsTopic = try reader["SNSTopic"].readIfPresent()
        value.selectParameters = try reader["SelectParameters"].readIfPresent(with: GlacierClientTypes.SelectParameters.read(from:))
        value.statusCode = try reader["StatusCode"].readIfPresent()
        value.statusMessage = try reader["StatusMessage"].readIfPresent()
        value.tier = try reader["Tier"].readIfPresent()
        value.vaultARN = try reader["VaultARN"].readIfPresent()
        return value
    }
}

extension DescribeVaultOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeVaultOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DescribeVaultOutput()
        value.creationDate = try reader["CreationDate"].readIfPresent()
        value.lastInventoryDate = try reader["LastInventoryDate"].readIfPresent()
        value.numberOfArchives = try reader["NumberOfArchives"].readIfPresent() ?? 0
        value.sizeInBytes = try reader["SizeInBytes"].readIfPresent() ?? 0
        value.vaultARN = try reader["VaultARN"].readIfPresent()
        value.vaultName = try reader["VaultName"].readIfPresent()
        return value
    }
}

extension GetDataRetrievalPolicyOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetDataRetrievalPolicyOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetDataRetrievalPolicyOutput()
        value.policy = try reader["Policy"].readIfPresent(with: GlacierClientTypes.DataRetrievalPolicy.read(from:))
        return value
    }
}

extension GetJobOutputOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetJobOutputOutput {
        var value = GetJobOutputOutput()
        if let acceptRangesHeaderValue = httpResponse.headers.value(for: "Accept-Ranges") {
            value.acceptRanges = acceptRangesHeaderValue
        }
        if let archiveDescriptionHeaderValue = httpResponse.headers.value(for: "x-amz-archive-description") {
            value.archiveDescription = archiveDescriptionHeaderValue
        }
        if let checksumHeaderValue = httpResponse.headers.value(for: "x-amz-sha256-tree-hash") {
            value.checksum = checksumHeaderValue
        }
        if let contentRangeHeaderValue = httpResponse.headers.value(for: "Content-Range") {
            value.contentRange = contentRangeHeaderValue
        }
        if let contentTypeHeaderValue = httpResponse.headers.value(for: "Content-Type") {
            value.contentType = contentTypeHeaderValue
        }
        switch httpResponse.body {
        case .data(let data):
            value.body = .data(data)
        case .stream(let stream):
            value.body = .stream(stream)
        case .noStream:
            value.body = nil
        }
        value.status = httpResponse.statusCode.rawValue
        return value
    }
}

extension GetVaultAccessPolicyOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetVaultAccessPolicyOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetVaultAccessPolicyOutput()
        value.policy = try reader.readIfPresent(with: GlacierClientTypes.VaultAccessPolicy.read(from:))
        return value
    }
}

extension GetVaultLockOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetVaultLockOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetVaultLockOutput()
        value.creationDate = try reader["CreationDate"].readIfPresent()
        value.expirationDate = try reader["ExpirationDate"].readIfPresent()
        value.policy = try reader["Policy"].readIfPresent()
        value.state = try reader["State"].readIfPresent()
        return value
    }
}

extension GetVaultNotificationsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetVaultNotificationsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetVaultNotificationsOutput()
        value.vaultNotificationConfig = try reader.readIfPresent(with: GlacierClientTypes.VaultNotificationConfig.read(from:))
        return value
    }
}

extension InitiateJobOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> InitiateJobOutput {
        var value = InitiateJobOutput()
        if let jobIdHeaderValue = httpResponse.headers.value(for: "x-amz-job-id") {
            value.jobId = jobIdHeaderValue
        }
        if let jobOutputPathHeaderValue = httpResponse.headers.value(for: "x-amz-job-output-path") {
            value.jobOutputPath = jobOutputPathHeaderValue
        }
        if let locationHeaderValue = httpResponse.headers.value(for: "Location") {
            value.location = locationHeaderValue
        }
        return value
    }
}

extension InitiateMultipartUploadOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> InitiateMultipartUploadOutput {
        var value = InitiateMultipartUploadOutput()
        if let locationHeaderValue = httpResponse.headers.value(for: "Location") {
            value.location = locationHeaderValue
        }
        if let uploadIdHeaderValue = httpResponse.headers.value(for: "x-amz-multipart-upload-id") {
            value.uploadId = uploadIdHeaderValue
        }
        return value
    }
}

extension InitiateVaultLockOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> InitiateVaultLockOutput {
        var value = InitiateVaultLockOutput()
        if let lockIdHeaderValue = httpResponse.headers.value(for: "x-amz-lock-id") {
            value.lockId = lockIdHeaderValue
        }
        return value
    }
}

extension ListJobsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListJobsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListJobsOutput()
        value.jobList = try reader["JobList"].readListIfPresent(memberReadingClosure: GlacierClientTypes.GlacierJobDescription.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.marker = try reader["Marker"].readIfPresent()
        return value
    }
}

extension ListMultipartUploadsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListMultipartUploadsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListMultipartUploadsOutput()
        value.marker = try reader["Marker"].readIfPresent()
        value.uploadsList = try reader["UploadsList"].readListIfPresent(memberReadingClosure: GlacierClientTypes.UploadListElement.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension ListPartsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListPartsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListPartsOutput()
        value.archiveDescription = try reader["ArchiveDescription"].readIfPresent()
        value.creationDate = try reader["CreationDate"].readIfPresent()
        value.marker = try reader["Marker"].readIfPresent()
        value.multipartUploadId = try reader["MultipartUploadId"].readIfPresent()
        value.partSizeInBytes = try reader["PartSizeInBytes"].readIfPresent() ?? 0
        value.parts = try reader["Parts"].readListIfPresent(memberReadingClosure: GlacierClientTypes.PartListElement.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.vaultARN = try reader["VaultARN"].readIfPresent()
        return value
    }
}

extension ListProvisionedCapacityOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListProvisionedCapacityOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListProvisionedCapacityOutput()
        value.provisionedCapacityList = try reader["ProvisionedCapacityList"].readListIfPresent(memberReadingClosure: GlacierClientTypes.ProvisionedCapacityDescription.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension ListTagsForVaultOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListTagsForVaultOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListTagsForVaultOutput()
        value.tags = try reader["Tags"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        return value
    }
}

extension ListVaultsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListVaultsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListVaultsOutput()
        value.marker = try reader["Marker"].readIfPresent()
        value.vaultList = try reader["VaultList"].readListIfPresent(memberReadingClosure: GlacierClientTypes.DescribeVaultOutput.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension PurchaseProvisionedCapacityOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> PurchaseProvisionedCapacityOutput {
        var value = PurchaseProvisionedCapacityOutput()
        if let capacityIdHeaderValue = httpResponse.headers.value(for: "x-amz-capacity-id") {
            value.capacityId = capacityIdHeaderValue
        }
        return value
    }
}

extension RemoveTagsFromVaultOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> RemoveTagsFromVaultOutput {
        return RemoveTagsFromVaultOutput()
    }
}

extension SetDataRetrievalPolicyOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> SetDataRetrievalPolicyOutput {
        return SetDataRetrievalPolicyOutput()
    }
}

extension SetVaultAccessPolicyOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> SetVaultAccessPolicyOutput {
        return SetVaultAccessPolicyOutput()
    }
}

extension SetVaultNotificationsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> SetVaultNotificationsOutput {
        return SetVaultNotificationsOutput()
    }
}

extension UploadArchiveOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UploadArchiveOutput {
        var value = UploadArchiveOutput()
        if let archiveIdHeaderValue = httpResponse.headers.value(for: "x-amz-archive-id") {
            value.archiveId = archiveIdHeaderValue
        }
        if let checksumHeaderValue = httpResponse.headers.value(for: "x-amz-sha256-tree-hash") {
            value.checksum = checksumHeaderValue
        }
        if let locationHeaderValue = httpResponse.headers.value(for: "Location") {
            value.location = locationHeaderValue
        }
        return value
    }
}

extension UploadMultipartPartOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UploadMultipartPartOutput {
        var value = UploadMultipartPartOutput()
        if let checksumHeaderValue = httpResponse.headers.value(for: "x-amz-sha256-tree-hash") {
            value.checksum = checksumHeaderValue
        }
        return value
    }
}

enum AbortMultipartUploadOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InvalidParameterValueException": return try InvalidParameterValueException.makeError(baseError: baseError)
            case "MissingParameterValueException": return try MissingParameterValueException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum AbortVaultLockOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InvalidParameterValueException": return try InvalidParameterValueException.makeError(baseError: baseError)
            case "MissingParameterValueException": return try MissingParameterValueException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum AddTagsToVaultOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InvalidParameterValueException": return try InvalidParameterValueException.makeError(baseError: baseError)
            case "LimitExceededException": return try LimitExceededException.makeError(baseError: baseError)
            case "MissingParameterValueException": return try MissingParameterValueException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CompleteMultipartUploadOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InvalidParameterValueException": return try InvalidParameterValueException.makeError(baseError: baseError)
            case "MissingParameterValueException": return try MissingParameterValueException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CompleteVaultLockOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InvalidParameterValueException": return try InvalidParameterValueException.makeError(baseError: baseError)
            case "MissingParameterValueException": return try MissingParameterValueException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateVaultOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InvalidParameterValueException": return try InvalidParameterValueException.makeError(baseError: baseError)
            case "LimitExceededException": return try LimitExceededException.makeError(baseError: baseError)
            case "MissingParameterValueException": return try MissingParameterValueException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteArchiveOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InvalidParameterValueException": return try InvalidParameterValueException.makeError(baseError: baseError)
            case "MissingParameterValueException": return try MissingParameterValueException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteVaultOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InvalidParameterValueException": return try InvalidParameterValueException.makeError(baseError: baseError)
            case "MissingParameterValueException": return try MissingParameterValueException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteVaultAccessPolicyOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InvalidParameterValueException": return try InvalidParameterValueException.makeError(baseError: baseError)
            case "MissingParameterValueException": return try MissingParameterValueException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteVaultNotificationsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InvalidParameterValueException": return try InvalidParameterValueException.makeError(baseError: baseError)
            case "MissingParameterValueException": return try MissingParameterValueException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeJobOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InvalidParameterValueException": return try InvalidParameterValueException.makeError(baseError: baseError)
            case "MissingParameterValueException": return try MissingParameterValueException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeVaultOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InvalidParameterValueException": return try InvalidParameterValueException.makeError(baseError: baseError)
            case "MissingParameterValueException": return try MissingParameterValueException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetDataRetrievalPolicyOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InvalidParameterValueException": return try InvalidParameterValueException.makeError(baseError: baseError)
            case "MissingParameterValueException": return try MissingParameterValueException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetJobOutputOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InvalidParameterValueException": return try InvalidParameterValueException.makeError(baseError: baseError)
            case "MissingParameterValueException": return try MissingParameterValueException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetVaultAccessPolicyOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InvalidParameterValueException": return try InvalidParameterValueException.makeError(baseError: baseError)
            case "MissingParameterValueException": return try MissingParameterValueException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetVaultLockOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InvalidParameterValueException": return try InvalidParameterValueException.makeError(baseError: baseError)
            case "MissingParameterValueException": return try MissingParameterValueException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetVaultNotificationsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InvalidParameterValueException": return try InvalidParameterValueException.makeError(baseError: baseError)
            case "MissingParameterValueException": return try MissingParameterValueException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum InitiateJobOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InsufficientCapacityException": return try InsufficientCapacityException.makeError(baseError: baseError)
            case "InvalidParameterValueException": return try InvalidParameterValueException.makeError(baseError: baseError)
            case "MissingParameterValueException": return try MissingParameterValueException.makeError(baseError: baseError)
            case "PolicyEnforcedException": return try PolicyEnforcedException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum InitiateMultipartUploadOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InvalidParameterValueException": return try InvalidParameterValueException.makeError(baseError: baseError)
            case "MissingParameterValueException": return try MissingParameterValueException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum InitiateVaultLockOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InvalidParameterValueException": return try InvalidParameterValueException.makeError(baseError: baseError)
            case "MissingParameterValueException": return try MissingParameterValueException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListJobsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InvalidParameterValueException": return try InvalidParameterValueException.makeError(baseError: baseError)
            case "MissingParameterValueException": return try MissingParameterValueException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListMultipartUploadsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InvalidParameterValueException": return try InvalidParameterValueException.makeError(baseError: baseError)
            case "MissingParameterValueException": return try MissingParameterValueException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListPartsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InvalidParameterValueException": return try InvalidParameterValueException.makeError(baseError: baseError)
            case "MissingParameterValueException": return try MissingParameterValueException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListProvisionedCapacityOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InvalidParameterValueException": return try InvalidParameterValueException.makeError(baseError: baseError)
            case "MissingParameterValueException": return try MissingParameterValueException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListTagsForVaultOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InvalidParameterValueException": return try InvalidParameterValueException.makeError(baseError: baseError)
            case "MissingParameterValueException": return try MissingParameterValueException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListVaultsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InvalidParameterValueException": return try InvalidParameterValueException.makeError(baseError: baseError)
            case "MissingParameterValueException": return try MissingParameterValueException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum PurchaseProvisionedCapacityOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InvalidParameterValueException": return try InvalidParameterValueException.makeError(baseError: baseError)
            case "LimitExceededException": return try LimitExceededException.makeError(baseError: baseError)
            case "MissingParameterValueException": return try MissingParameterValueException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum RemoveTagsFromVaultOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InvalidParameterValueException": return try InvalidParameterValueException.makeError(baseError: baseError)
            case "MissingParameterValueException": return try MissingParameterValueException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum SetDataRetrievalPolicyOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InvalidParameterValueException": return try InvalidParameterValueException.makeError(baseError: baseError)
            case "MissingParameterValueException": return try MissingParameterValueException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum SetVaultAccessPolicyOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InvalidParameterValueException": return try InvalidParameterValueException.makeError(baseError: baseError)
            case "MissingParameterValueException": return try MissingParameterValueException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum SetVaultNotificationsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InvalidParameterValueException": return try InvalidParameterValueException.makeError(baseError: baseError)
            case "MissingParameterValueException": return try MissingParameterValueException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UploadArchiveOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InvalidParameterValueException": return try InvalidParameterValueException.makeError(baseError: baseError)
            case "MissingParameterValueException": return try MissingParameterValueException.makeError(baseError: baseError)
            case "RequestTimeoutException": return try RequestTimeoutException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UploadMultipartPartOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InvalidParameterValueException": return try InvalidParameterValueException.makeError(baseError: baseError)
            case "MissingParameterValueException": return try MissingParameterValueException.makeError(baseError: baseError)
            case "RequestTimeoutException": return try RequestTimeoutException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

extension MissingParameterValueException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> MissingParameterValueException {
        let reader = baseError.errorBodyReader
        var value = MissingParameterValueException()
        value.properties.code = try reader["code"].readIfPresent()
        value.properties.message = try reader["message"].readIfPresent()
        value.properties.type = try reader["type"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension InvalidParameterValueException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> InvalidParameterValueException {
        let reader = baseError.errorBodyReader
        var value = InvalidParameterValueException()
        value.properties.code = try reader["code"].readIfPresent()
        value.properties.message = try reader["message"].readIfPresent()
        value.properties.type = try reader["type"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ResourceNotFoundException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> ResourceNotFoundException {
        let reader = baseError.errorBodyReader
        var value = ResourceNotFoundException()
        value.properties.code = try reader["code"].readIfPresent()
        value.properties.message = try reader["message"].readIfPresent()
        value.properties.type = try reader["type"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ServiceUnavailableException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> ServiceUnavailableException {
        let reader = baseError.errorBodyReader
        var value = ServiceUnavailableException()
        value.properties.code = try reader["code"].readIfPresent()
        value.properties.message = try reader["message"].readIfPresent()
        value.properties.type = try reader["type"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension LimitExceededException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> LimitExceededException {
        let reader = baseError.errorBodyReader
        var value = LimitExceededException()
        value.properties.code = try reader["code"].readIfPresent()
        value.properties.message = try reader["message"].readIfPresent()
        value.properties.type = try reader["type"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension InsufficientCapacityException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> InsufficientCapacityException {
        let reader = baseError.errorBodyReader
        var value = InsufficientCapacityException()
        value.properties.code = try reader["code"].readIfPresent()
        value.properties.message = try reader["message"].readIfPresent()
        value.properties.type = try reader["type"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension PolicyEnforcedException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> PolicyEnforcedException {
        let reader = baseError.errorBodyReader
        var value = PolicyEnforcedException()
        value.properties.code = try reader["code"].readIfPresent()
        value.properties.message = try reader["message"].readIfPresent()
        value.properties.type = try reader["type"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension RequestTimeoutException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> RequestTimeoutException {
        let reader = baseError.errorBodyReader
        var value = RequestTimeoutException()
        value.properties.code = try reader["code"].readIfPresent()
        value.properties.message = try reader["message"].readIfPresent()
        value.properties.type = try reader["type"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension GlacierClientTypes.InventoryRetrievalJobDescription {

    static func read(from reader: SmithyJSON.Reader) throws -> GlacierClientTypes.InventoryRetrievalJobDescription {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = GlacierClientTypes.InventoryRetrievalJobDescription()
        value.format = try reader["Format"].readIfPresent()
        value.startDate = try reader["StartDate"].readIfPresent()
        value.endDate = try reader["EndDate"].readIfPresent()
        value.limit = try reader["Limit"].readIfPresent()
        value.marker = try reader["Marker"].readIfPresent()
        return value
    }
}

extension GlacierClientTypes.SelectParameters {

    static func write(value: GlacierClientTypes.SelectParameters?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Expression"].write(value.expression)
        try writer["ExpressionType"].write(value.expressionType)
        try writer["InputSerialization"].write(value.inputSerialization, with: GlacierClientTypes.InputSerialization.write(value:to:))
        try writer["OutputSerialization"].write(value.outputSerialization, with: GlacierClientTypes.OutputSerialization.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> GlacierClientTypes.SelectParameters {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = GlacierClientTypes.SelectParameters()
        value.inputSerialization = try reader["InputSerialization"].readIfPresent(with: GlacierClientTypes.InputSerialization.read(from:))
        value.expressionType = try reader["ExpressionType"].readIfPresent()
        value.expression = try reader["Expression"].readIfPresent()
        value.outputSerialization = try reader["OutputSerialization"].readIfPresent(with: GlacierClientTypes.OutputSerialization.read(from:))
        return value
    }
}

extension GlacierClientTypes.OutputSerialization {

    static func write(value: GlacierClientTypes.OutputSerialization?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["csv"].write(value.csv, with: GlacierClientTypes.CSVOutput.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> GlacierClientTypes.OutputSerialization {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = GlacierClientTypes.OutputSerialization()
        value.csv = try reader["csv"].readIfPresent(with: GlacierClientTypes.CSVOutput.read(from:))
        return value
    }
}

extension GlacierClientTypes.CSVOutput {

    static func write(value: GlacierClientTypes.CSVOutput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["FieldDelimiter"].write(value.fieldDelimiter)
        try writer["QuoteCharacter"].write(value.quoteCharacter)
        try writer["QuoteEscapeCharacter"].write(value.quoteEscapeCharacter)
        try writer["QuoteFields"].write(value.quoteFields)
        try writer["RecordDelimiter"].write(value.recordDelimiter)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> GlacierClientTypes.CSVOutput {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = GlacierClientTypes.CSVOutput()
        value.quoteFields = try reader["QuoteFields"].readIfPresent()
        value.quoteEscapeCharacter = try reader["QuoteEscapeCharacter"].readIfPresent()
        value.recordDelimiter = try reader["RecordDelimiter"].readIfPresent()
        value.fieldDelimiter = try reader["FieldDelimiter"].readIfPresent()
        value.quoteCharacter = try reader["QuoteCharacter"].readIfPresent()
        return value
    }
}

extension GlacierClientTypes.InputSerialization {

    static func write(value: GlacierClientTypes.InputSerialization?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["csv"].write(value.csv, with: GlacierClientTypes.CSVInput.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> GlacierClientTypes.InputSerialization {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = GlacierClientTypes.InputSerialization()
        value.csv = try reader["csv"].readIfPresent(with: GlacierClientTypes.CSVInput.read(from:))
        return value
    }
}

extension GlacierClientTypes.CSVInput {

    static func write(value: GlacierClientTypes.CSVInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Comments"].write(value.comments)
        try writer["FieldDelimiter"].write(value.fieldDelimiter)
        try writer["FileHeaderInfo"].write(value.fileHeaderInfo)
        try writer["QuoteCharacter"].write(value.quoteCharacter)
        try writer["QuoteEscapeCharacter"].write(value.quoteEscapeCharacter)
        try writer["RecordDelimiter"].write(value.recordDelimiter)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> GlacierClientTypes.CSVInput {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = GlacierClientTypes.CSVInput()
        value.fileHeaderInfo = try reader["FileHeaderInfo"].readIfPresent()
        value.comments = try reader["Comments"].readIfPresent()
        value.quoteEscapeCharacter = try reader["QuoteEscapeCharacter"].readIfPresent()
        value.recordDelimiter = try reader["RecordDelimiter"].readIfPresent()
        value.fieldDelimiter = try reader["FieldDelimiter"].readIfPresent()
        value.quoteCharacter = try reader["QuoteCharacter"].readIfPresent()
        return value
    }
}

extension GlacierClientTypes.OutputLocation {

    static func write(value: GlacierClientTypes.OutputLocation?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["S3"].write(value.s3, with: GlacierClientTypes.S3Location.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> GlacierClientTypes.OutputLocation {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = GlacierClientTypes.OutputLocation()
        value.s3 = try reader["S3"].readIfPresent(with: GlacierClientTypes.S3Location.read(from:))
        return value
    }
}

extension GlacierClientTypes.S3Location {

    static func write(value: GlacierClientTypes.S3Location?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["AccessControlList"].writeList(value.accessControlList, memberWritingClosure: GlacierClientTypes.Grant.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["BucketName"].write(value.bucketName)
        try writer["CannedACL"].write(value.cannedACL)
        try writer["Encryption"].write(value.encryption, with: GlacierClientTypes.Encryption.write(value:to:))
        try writer["Prefix"].write(value.`prefix`)
        try writer["StorageClass"].write(value.storageClass)
        try writer["Tagging"].writeMap(value.tagging, valueWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        try writer["UserMetadata"].writeMap(value.userMetadata, valueWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> GlacierClientTypes.S3Location {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = GlacierClientTypes.S3Location()
        value.bucketName = try reader["BucketName"].readIfPresent()
        value.`prefix` = try reader["Prefix"].readIfPresent()
        value.encryption = try reader["Encryption"].readIfPresent(with: GlacierClientTypes.Encryption.read(from:))
        value.cannedACL = try reader["CannedACL"].readIfPresent()
        value.accessControlList = try reader["AccessControlList"].readListIfPresent(memberReadingClosure: GlacierClientTypes.Grant.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.tagging = try reader["Tagging"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        value.userMetadata = try reader["UserMetadata"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        value.storageClass = try reader["StorageClass"].readIfPresent()
        return value
    }
}

extension GlacierClientTypes.Grant {

    static func write(value: GlacierClientTypes.Grant?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Grantee"].write(value.grantee, with: GlacierClientTypes.Grantee.write(value:to:))
        try writer["Permission"].write(value.permission)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> GlacierClientTypes.Grant {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = GlacierClientTypes.Grant()
        value.grantee = try reader["Grantee"].readIfPresent(with: GlacierClientTypes.Grantee.read(from:))
        value.permission = try reader["Permission"].readIfPresent()
        return value
    }
}

extension GlacierClientTypes.Grantee {

    static func write(value: GlacierClientTypes.Grantee?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["DisplayName"].write(value.displayName)
        try writer["EmailAddress"].write(value.emailAddress)
        try writer["ID"].write(value.id)
        try writer["Type"].write(value.type)
        try writer["URI"].write(value.uri)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> GlacierClientTypes.Grantee {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = GlacierClientTypes.Grantee()
        value.type = try reader["Type"].readIfPresent() ?? .sdkUnknown("")
        value.displayName = try reader["DisplayName"].readIfPresent()
        value.uri = try reader["URI"].readIfPresent()
        value.id = try reader["ID"].readIfPresent()
        value.emailAddress = try reader["EmailAddress"].readIfPresent()
        return value
    }
}

extension GlacierClientTypes.Encryption {

    static func write(value: GlacierClientTypes.Encryption?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["EncryptionType"].write(value.encryptionType)
        try writer["KMSContext"].write(value.kmsContext)
        try writer["KMSKeyId"].write(value.kmsKeyId)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> GlacierClientTypes.Encryption {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = GlacierClientTypes.Encryption()
        value.encryptionType = try reader["EncryptionType"].readIfPresent()
        value.kmsKeyId = try reader["KMSKeyId"].readIfPresent()
        value.kmsContext = try reader["KMSContext"].readIfPresent()
        return value
    }
}

extension GlacierClientTypes.DataRetrievalPolicy {

    static func write(value: GlacierClientTypes.DataRetrievalPolicy?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Rules"].writeList(value.rules, memberWritingClosure: GlacierClientTypes.DataRetrievalRule.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> GlacierClientTypes.DataRetrievalPolicy {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = GlacierClientTypes.DataRetrievalPolicy()
        value.rules = try reader["Rules"].readListIfPresent(memberReadingClosure: GlacierClientTypes.DataRetrievalRule.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension GlacierClientTypes.DataRetrievalRule {

    static func write(value: GlacierClientTypes.DataRetrievalRule?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["BytesPerHour"].write(value.bytesPerHour)
        try writer["Strategy"].write(value.strategy)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> GlacierClientTypes.DataRetrievalRule {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = GlacierClientTypes.DataRetrievalRule()
        value.strategy = try reader["Strategy"].readIfPresent()
        value.bytesPerHour = try reader["BytesPerHour"].readIfPresent()
        return value
    }
}

extension GlacierClientTypes.VaultAccessPolicy {

    static func write(value: GlacierClientTypes.VaultAccessPolicy?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Policy"].write(value.policy)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> GlacierClientTypes.VaultAccessPolicy {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = GlacierClientTypes.VaultAccessPolicy()
        value.policy = try reader["Policy"].readIfPresent()
        return value
    }
}

extension GlacierClientTypes.VaultNotificationConfig {

    static func write(value: GlacierClientTypes.VaultNotificationConfig?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Events"].writeList(value.events, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["SNSTopic"].write(value.snsTopic)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> GlacierClientTypes.VaultNotificationConfig {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = GlacierClientTypes.VaultNotificationConfig()
        value.snsTopic = try reader["SNSTopic"].readIfPresent()
        value.events = try reader["Events"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension GlacierClientTypes.GlacierJobDescription {

    static func read(from reader: SmithyJSON.Reader) throws -> GlacierClientTypes.GlacierJobDescription {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = GlacierClientTypes.GlacierJobDescription()
        value.jobId = try reader["JobId"].readIfPresent()
        value.jobDescription = try reader["JobDescription"].readIfPresent()
        value.action = try reader["Action"].readIfPresent()
        value.archiveId = try reader["ArchiveId"].readIfPresent()
        value.vaultARN = try reader["VaultARN"].readIfPresent()
        value.creationDate = try reader["CreationDate"].readIfPresent()
        value.completed = try reader["Completed"].readIfPresent() ?? false
        value.statusCode = try reader["StatusCode"].readIfPresent()
        value.statusMessage = try reader["StatusMessage"].readIfPresent()
        value.archiveSizeInBytes = try reader["ArchiveSizeInBytes"].readIfPresent()
        value.inventorySizeInBytes = try reader["InventorySizeInBytes"].readIfPresent()
        value.snsTopic = try reader["SNSTopic"].readIfPresent()
        value.completionDate = try reader["CompletionDate"].readIfPresent()
        value.sha256TreeHash = try reader["SHA256TreeHash"].readIfPresent()
        value.archiveSHA256TreeHash = try reader["ArchiveSHA256TreeHash"].readIfPresent()
        value.retrievalByteRange = try reader["RetrievalByteRange"].readIfPresent()
        value.tier = try reader["Tier"].readIfPresent()
        value.inventoryRetrievalParameters = try reader["InventoryRetrievalParameters"].readIfPresent(with: GlacierClientTypes.InventoryRetrievalJobDescription.read(from:))
        value.jobOutputPath = try reader["JobOutputPath"].readIfPresent()
        value.selectParameters = try reader["SelectParameters"].readIfPresent(with: GlacierClientTypes.SelectParameters.read(from:))
        value.outputLocation = try reader["OutputLocation"].readIfPresent(with: GlacierClientTypes.OutputLocation.read(from:))
        return value
    }
}

extension GlacierClientTypes.UploadListElement {

    static func read(from reader: SmithyJSON.Reader) throws -> GlacierClientTypes.UploadListElement {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = GlacierClientTypes.UploadListElement()
        value.multipartUploadId = try reader["MultipartUploadId"].readIfPresent()
        value.vaultARN = try reader["VaultARN"].readIfPresent()
        value.archiveDescription = try reader["ArchiveDescription"].readIfPresent()
        value.partSizeInBytes = try reader["PartSizeInBytes"].readIfPresent() ?? 0
        value.creationDate = try reader["CreationDate"].readIfPresent()
        return value
    }
}

extension GlacierClientTypes.PartListElement {

    static func read(from reader: SmithyJSON.Reader) throws -> GlacierClientTypes.PartListElement {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = GlacierClientTypes.PartListElement()
        value.rangeInBytes = try reader["RangeInBytes"].readIfPresent()
        value.sha256TreeHash = try reader["SHA256TreeHash"].readIfPresent()
        return value
    }
}

extension GlacierClientTypes.ProvisionedCapacityDescription {

    static func read(from reader: SmithyJSON.Reader) throws -> GlacierClientTypes.ProvisionedCapacityDescription {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = GlacierClientTypes.ProvisionedCapacityDescription()
        value.capacityId = try reader["CapacityId"].readIfPresent()
        value.startDate = try reader["StartDate"].readIfPresent()
        value.expirationDate = try reader["ExpirationDate"].readIfPresent()
        return value
    }
}

extension GlacierClientTypes.DescribeVaultOutput {

    static func read(from reader: SmithyJSON.Reader) throws -> GlacierClientTypes.DescribeVaultOutput {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = GlacierClientTypes.DescribeVaultOutput()
        value.vaultARN = try reader["VaultARN"].readIfPresent()
        value.vaultName = try reader["VaultName"].readIfPresent()
        value.creationDate = try reader["CreationDate"].readIfPresent()
        value.lastInventoryDate = try reader["LastInventoryDate"].readIfPresent()
        value.numberOfArchives = try reader["NumberOfArchives"].readIfPresent() ?? 0
        value.sizeInBytes = try reader["SizeInBytes"].readIfPresent() ?? 0
        return value
    }
}

extension GlacierClientTypes.JobParameters {

    static func write(value: GlacierClientTypes.JobParameters?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ArchiveId"].write(value.archiveId)
        try writer["Description"].write(value.description)
        try writer["Format"].write(value.format)
        try writer["InventoryRetrievalParameters"].write(value.inventoryRetrievalParameters, with: GlacierClientTypes.InventoryRetrievalJobInput.write(value:to:))
        try writer["OutputLocation"].write(value.outputLocation, with: GlacierClientTypes.OutputLocation.write(value:to:))
        try writer["RetrievalByteRange"].write(value.retrievalByteRange)
        try writer["SNSTopic"].write(value.snsTopic)
        try writer["SelectParameters"].write(value.selectParameters, with: GlacierClientTypes.SelectParameters.write(value:to:))
        try writer["Tier"].write(value.tier)
        try writer["Type"].write(value.type)
    }
}

extension GlacierClientTypes.InventoryRetrievalJobInput {

    static func write(value: GlacierClientTypes.InventoryRetrievalJobInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["EndDate"].write(value.endDate)
        try writer["Limit"].write(value.limit)
        try writer["Marker"].write(value.marker)
        try writer["StartDate"].write(value.startDate)
    }
}

extension GlacierClientTypes.VaultLockPolicy {

    static func write(value: GlacierClientTypes.VaultLockPolicy?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Policy"].write(value.policy)
    }
}

public enum GlacierClientTypes {}
