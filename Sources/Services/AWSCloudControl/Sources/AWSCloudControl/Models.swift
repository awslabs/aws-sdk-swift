//
// Copyright Amazon.com Inc. or its affiliates.
// All Rights Reserved.
//
// SPDX-License-Identifier: Apache-2.0
//

// Code generated by smithy-swift-codegen. DO NOT EDIT!

@_spi(SmithyReadWrite) import ClientRuntime
import Foundation
import class SmithyHTTPAPI.HTTPResponse
@_spi(SmithyReadWrite) import class SmithyJSON.Reader
@_spi(SmithyReadWrite) import class SmithyJSON.Writer
import enum ClientRuntime.ErrorFault
import enum SmithyReadWrite.ReaderError
@_spi(SmithyTimestamps) import enum SmithyTimestamps.TimestampFormat
import protocol AWSClientRuntime.AWSServiceError
import protocol ClientRuntime.HTTPError
import protocol ClientRuntime.ModeledError
@_spi(SmithyReadWrite) import protocol SmithyReadWrite.SmithyReader
@_spi(SmithyReadWrite) import protocol SmithyReadWrite.SmithyWriter
@_spi(SmithyReadWrite) import struct AWSClientRuntime.AWSJSONError
@_spi(UnknownAWSHTTPServiceError) import struct AWSClientRuntime.UnknownAWSHTTPServiceError
@_spi(SmithyReadWrite) import struct SmithyReadWrite.WritingClosureBox

/// The resource with the name requested already exists.
public struct AlreadyExistsException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "AlreadyExistsException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The resource is currently being modified by another operation.
public struct ConcurrentModificationException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ConcurrentModificationException" }
    public static var fault: ClientRuntime.ErrorFault { .server }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// A resource operation with the specified request token can't be found.
public struct RequestTokenNotFoundException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "RequestTokenNotFoundException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

public struct CancelResourceRequestInput: Swift.Sendable {
    /// The RequestToken of the ProgressEvent object returned by the resource operation request.
    /// This member is required.
    public var requestToken: Swift.String?

    public init(
        requestToken: Swift.String? = nil
    )
    {
        self.requestToken = requestToken
    }
}

extension CloudControlClientTypes {

    public enum HandlerErrorCode: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case accessDenied
        case alreadyExists
        case generalServiceException
        case internalFailure
        case invalidCredentials
        case invalidRequest
        case networkFailure
        case notFound
        case notStabilized
        case notUpdatable
        case resourceConflict
        case serviceInternalError
        case serviceLimitExceeded
        case serviceTimeout
        case throttling
        case sdkUnknown(Swift.String)

        public static var allCases: [HandlerErrorCode] {
            return [
                .accessDenied,
                .alreadyExists,
                .generalServiceException,
                .internalFailure,
                .invalidCredentials,
                .invalidRequest,
                .networkFailure,
                .notFound,
                .notStabilized,
                .notUpdatable,
                .resourceConflict,
                .serviceInternalError,
                .serviceLimitExceeded,
                .serviceTimeout,
                .throttling
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .accessDenied: return "AccessDenied"
            case .alreadyExists: return "AlreadyExists"
            case .generalServiceException: return "GeneralServiceException"
            case .internalFailure: return "InternalFailure"
            case .invalidCredentials: return "InvalidCredentials"
            case .invalidRequest: return "InvalidRequest"
            case .networkFailure: return "NetworkFailure"
            case .notFound: return "NotFound"
            case .notStabilized: return "NotStabilized"
            case .notUpdatable: return "NotUpdatable"
            case .resourceConflict: return "ResourceConflict"
            case .serviceInternalError: return "ServiceInternalError"
            case .serviceLimitExceeded: return "ServiceLimitExceeded"
            case .serviceTimeout: return "ServiceTimeout"
            case .throttling: return "Throttling"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension CloudControlClientTypes {

    public enum Operation: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case create
        case delete
        case update
        case sdkUnknown(Swift.String)

        public static var allCases: [Operation] {
            return [
                .create,
                .delete,
                .update
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .create: return "CREATE"
            case .delete: return "DELETE"
            case .update: return "UPDATE"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension CloudControlClientTypes {

    public enum OperationStatus: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case cancelComplete
        case cancelInProgress
        case failed
        case inProgress
        case pending
        case success
        case sdkUnknown(Swift.String)

        public static var allCases: [OperationStatus] {
            return [
                .cancelComplete,
                .cancelInProgress,
                .failed,
                .inProgress,
                .pending,
                .success
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .cancelComplete: return "CANCEL_COMPLETE"
            case .cancelInProgress: return "CANCEL_IN_PROGRESS"
            case .failed: return "FAILED"
            case .inProgress: return "IN_PROGRESS"
            case .pending: return "PENDING"
            case .success: return "SUCCESS"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension CloudControlClientTypes {

    /// Represents the current status of a resource operation request. For more information, see [Managing resource operation requests](https://docs.aws.amazon.com/cloudcontrolapi/latest/userguide/resource-operations-manage-requests.html) in the Amazon Web Services Cloud Control API User Guide.
    public struct ProgressEvent: Swift.Sendable {
        /// For requests with a status of FAILED, the associated error code. For error code definitions, see [Handler error codes](https://docs.aws.amazon.com/cloudformation-cli/latest/userguide/resource-type-test-contract-errors.html) in the CloudFormation Command Line Interface User Guide for Extension Development.
        public var errorCode: CloudControlClientTypes.HandlerErrorCode?
        /// When the resource operation request was initiated.
        public var eventTime: Foundation.Date?
        /// The primary identifier for the resource. In some cases, the resource identifier may be available before the resource operation has reached a status of SUCCESS.
        public var identifier: Swift.String?
        /// The resource operation type.
        public var operation: CloudControlClientTypes.Operation?
        /// The current status of the resource operation request.
        ///
        /// * PENDING: The resource operation hasn't yet started.
        ///
        /// * IN_PROGRESS: The resource operation is currently in progress.
        ///
        /// * SUCCESS: The resource operation has successfully completed.
        ///
        /// * FAILED: The resource operation has failed. Refer to the error code and status message for more information.
        ///
        /// * CANCEL_IN_PROGRESS: The resource operation is in the process of being canceled.
        ///
        /// * CANCEL_COMPLETE: The resource operation has been canceled.
        public var operationStatus: CloudControlClientTypes.OperationStatus?
        /// The unique token representing this resource operation request. Use the RequestToken with [GetResourceRequestStatus](https://docs.aws.amazon.com/cloudcontrolapi/latest/APIReference/API_GetResourceRequestStatus.html) to return the current status of a resource operation request.
        public var requestToken: Swift.String?
        /// A JSON string containing the resource model, consisting of each resource property and its current value.
        public var resourceModel: Swift.String?
        /// When to next request the status of this resource operation request.
        public var retryAfter: Foundation.Date?
        /// Any message explaining the current status.
        public var statusMessage: Swift.String?
        /// The name of the resource type used in the operation.
        public var typeName: Swift.String?

        public init(
            errorCode: CloudControlClientTypes.HandlerErrorCode? = nil,
            eventTime: Foundation.Date? = nil,
            identifier: Swift.String? = nil,
            operation: CloudControlClientTypes.Operation? = nil,
            operationStatus: CloudControlClientTypes.OperationStatus? = nil,
            requestToken: Swift.String? = nil,
            resourceModel: Swift.String? = nil,
            retryAfter: Foundation.Date? = nil,
            statusMessage: Swift.String? = nil,
            typeName: Swift.String? = nil
        )
        {
            self.errorCode = errorCode
            self.eventTime = eventTime
            self.identifier = identifier
            self.operation = operation
            self.operationStatus = operationStatus
            self.requestToken = requestToken
            self.resourceModel = resourceModel
            self.retryAfter = retryAfter
            self.statusMessage = statusMessage
            self.typeName = typeName
        }
    }
}

extension CloudControlClientTypes.ProgressEvent: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ProgressEvent(errorCode: \(Swift.String(describing: errorCode)), eventTime: \(Swift.String(describing: eventTime)), identifier: \(Swift.String(describing: identifier)), operation: \(Swift.String(describing: operation)), operationStatus: \(Swift.String(describing: operationStatus)), requestToken: \(Swift.String(describing: requestToken)), retryAfter: \(Swift.String(describing: retryAfter)), statusMessage: \(Swift.String(describing: statusMessage)), typeName: \(Swift.String(describing: typeName)), resourceModel: \"CONTENT_REDACTED\")"}
}

public struct CancelResourceRequestOutput: Swift.Sendable {
    /// Represents the current status of a resource operation request. For more information, see [Managing resource operation requests](https://docs.aws.amazon.com/cloudcontrolapi/latest/userguide/resource-operations-manage-requests.html) in the Amazon Web Services Cloud Control API User Guide.
    public var progressEvent: CloudControlClientTypes.ProgressEvent?

    public init(
        progressEvent: CloudControlClientTypes.ProgressEvent? = nil
    )
    {
        self.progressEvent = progressEvent
    }
}

/// The specified client token has already been used in another resource request. It's best practice for client tokens to be unique for each resource operation request. However, client token expire after 36 hours.
public struct ClientTokenConflictException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ClientTokenConflictException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// Another resource operation is currently being performed on this resource.
public struct ConcurrentOperationException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ConcurrentOperationException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The resource handler has returned that the downstream service generated an error that doesn't map to any other handler error code.
public struct GeneralServiceException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "GeneralServiceException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The resource handler has failed without a returning a more specific error code. This can include timeouts.
public struct HandlerFailureException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "HandlerFailureException" }
    public static var fault: ClientRuntime.ErrorFault { .server }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The resource handler has returned that an unexpected error occurred within the resource handler.
public struct HandlerInternalFailureException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "HandlerInternalFailureException" }
    public static var fault: ClientRuntime.ErrorFault { .server }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The resource handler has returned that the credentials provided by the user are invalid.
public struct InvalidCredentialsException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidCredentialsException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The resource handler has returned that invalid input from the user has generated a generic exception.
public struct InvalidRequestException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidRequestException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The resource handler has returned that the request couldn't be completed due to networking issues, such as a failure to receive a response from the server.
public struct NetworkFailureException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "NetworkFailureException" }
    public static var fault: ClientRuntime.ErrorFault { .server }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The resource handler has returned that the downstream resource failed to complete all of its ready-state checks.
public struct NotStabilizedException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "NotStabilizedException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// One or more properties included in this resource operation are defined as create-only, and therefore can't be updated.
public struct NotUpdatableException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "NotUpdatableException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// Cloud Control API hasn't received a valid response from the resource handler, due to a configuration error. This includes issues such as the resource handler returning an invalid response, or timing out.
public struct PrivateTypeException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "PrivateTypeException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The resource is temporarily unavailable to be acted upon. For example, if the resource is currently undergoing an operation and can't be acted upon until that operation is finished.
public struct ResourceConflictException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ResourceConflictException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// A resource with the specified identifier can't be found.
public struct ResourceNotFoundException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ResourceNotFoundException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The resource handler has returned that the downstream service returned an internal error, typically with a 5XX HTTP status code.
public struct ServiceInternalErrorException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ServiceInternalErrorException" }
    public static var fault: ClientRuntime.ErrorFault { .server }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The resource handler has returned that a non-transient resource limit was reached on the service side.
public struct ServiceLimitExceededException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ServiceLimitExceededException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The request was denied due to request throttling.
public struct ThrottlingException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ThrottlingException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The specified extension doesn't exist in the CloudFormation registry.
public struct TypeNotFoundException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "TypeNotFoundException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The specified resource doesn't support this resource operation.
public struct UnsupportedActionException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "UnsupportedActionException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

public struct CreateResourceInput: Swift.Sendable {
    /// A unique identifier to ensure the idempotency of the resource request. As a best practice, specify this token to ensure idempotency, so that Amazon Web Services Cloud Control API can accurately distinguish between request retries and new resource requests. You might retry a resource request to ensure that it was successfully received. A client token is valid for 36 hours once used. After that, a resource request with the same client token is treated as a new request. If you do not specify a client token, one is generated for inclusion in the request. For more information, see [Ensuring resource operation requests are unique](https://docs.aws.amazon.com/cloudcontrolapi/latest/userguide/resource-operations.html#resource-operations-idempotency) in the Amazon Web Services Cloud Control API User Guide.
    public var clientToken: Swift.String?
    /// Structured data format representing the desired state of the resource, consisting of that resource's properties and their desired values. Cloud Control API currently supports JSON as a structured data format. Specify the desired state as one of the following:
    ///
    /// * A JSON blob
    ///
    /// * A local path containing the desired state in JSON data format
    ///
    ///
    /// For more information, see [Composing the desired state of the resource](https://docs.aws.amazon.com/cloudcontrolapi/latest/userguide/resource-operations-create.html#resource-operations-create-desiredstate) in the Amazon Web Services Cloud Control API User Guide. For more information about the properties of a specific resource, refer to the related topic for the resource in the [Resource and property types reference](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-template-resource-type-ref.html) in the CloudFormation Users Guide.
    /// This member is required.
    public var desiredState: Swift.String?
    /// The Amazon Resource Name (ARN) of the Identity and Access Management (IAM) role for Cloud Control API to use when performing this resource operation. The role specified must have the permissions required for this operation. The necessary permissions for each event handler are defined in the [handlers](https://docs.aws.amazon.com/cloudformation-cli/latest/userguide/resource-type-schema.html#schema-properties-handlers) section of the [resource type definition schema](https://docs.aws.amazon.com/cloudformation-cli/latest/userguide/resource-type-schema.html). If you do not specify a role, Cloud Control API uses a temporary session created using your Amazon Web Services user credentials. For more information, see [Specifying credentials](https://docs.aws.amazon.com/cloudcontrolapi/latest/userguide/resource-operations.html#resource-operations-permissions) in the Amazon Web Services Cloud Control API User Guide.
    public var roleArn: Swift.String?
    /// The name of the resource type.
    /// This member is required.
    public var typeName: Swift.String?
    /// For private resource types, the type version to use in this resource operation. If you do not specify a resource version, CloudFormation uses the default version.
    public var typeVersionId: Swift.String?

    public init(
        clientToken: Swift.String? = nil,
        desiredState: Swift.String? = nil,
        roleArn: Swift.String? = nil,
        typeName: Swift.String? = nil,
        typeVersionId: Swift.String? = nil
    )
    {
        self.clientToken = clientToken
        self.desiredState = desiredState
        self.roleArn = roleArn
        self.typeName = typeName
        self.typeVersionId = typeVersionId
    }
}

extension CreateResourceInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateResourceInput(clientToken: \(Swift.String(describing: clientToken)), roleArn: \(Swift.String(describing: roleArn)), typeName: \(Swift.String(describing: typeName)), typeVersionId: \(Swift.String(describing: typeVersionId)), desiredState: \"CONTENT_REDACTED\")"}
}

public struct CreateResourceOutput: Swift.Sendable {
    /// Represents the current status of the resource creation request. After you have initiated a resource creation request, you can monitor the progress of your request by calling [GetResourceRequestStatus](https://docs.aws.amazon.com/cloudcontrolapi/latest/APIReference/API_GetResourceRequestStatus.html) using the RequestToken of the ProgressEvent returned by CreateResource.
    public var progressEvent: CloudControlClientTypes.ProgressEvent?

    public init(
        progressEvent: CloudControlClientTypes.ProgressEvent? = nil
    )
    {
        self.progressEvent = progressEvent
    }
}

public struct DeleteResourceInput: Swift.Sendable {
    /// A unique identifier to ensure the idempotency of the resource request. As a best practice, specify this token to ensure idempotency, so that Amazon Web Services Cloud Control API can accurately distinguish between request retries and new resource requests. You might retry a resource request to ensure that it was successfully received. A client token is valid for 36 hours once used. After that, a resource request with the same client token is treated as a new request. If you do not specify a client token, one is generated for inclusion in the request. For more information, see [Ensuring resource operation requests are unique](https://docs.aws.amazon.com/cloudcontrolapi/latest/userguide/resource-operations.html#resource-operations-idempotency) in the Amazon Web Services Cloud Control API User Guide.
    public var clientToken: Swift.String?
    /// The identifier for the resource. You can specify the primary identifier, or any secondary identifier defined for the resource type in its resource schema. You can only specify one identifier. Primary identifiers can be specified as a string or JSON; secondary identifiers must be specified as JSON. For compound primary identifiers (that is, one that consists of multiple resource properties strung together), to specify the primary identifier as a string, list the property values in the order they are specified in the primary identifier definition, separated by |. For more information, see [Identifying resources](https://docs.aws.amazon.com/cloudcontrolapi/latest/userguide/resource-identifier.html) in the Amazon Web Services Cloud Control API User Guide.
    /// This member is required.
    public var identifier: Swift.String?
    /// The Amazon Resource Name (ARN) of the Identity and Access Management (IAM) role for Cloud Control API to use when performing this resource operation. The role specified must have the permissions required for this operation. The necessary permissions for each event handler are defined in the [handlers](https://docs.aws.amazon.com/cloudformation-cli/latest/userguide/resource-type-schema.html#schema-properties-handlers) section of the [resource type definition schema](https://docs.aws.amazon.com/cloudformation-cli/latest/userguide/resource-type-schema.html). If you do not specify a role, Cloud Control API uses a temporary session created using your Amazon Web Services user credentials. For more information, see [Specifying credentials](https://docs.aws.amazon.com/cloudcontrolapi/latest/userguide/resource-operations.html#resource-operations-permissions) in the Amazon Web Services Cloud Control API User Guide.
    public var roleArn: Swift.String?
    /// The name of the resource type.
    /// This member is required.
    public var typeName: Swift.String?
    /// For private resource types, the type version to use in this resource operation. If you do not specify a resource version, CloudFormation uses the default version.
    public var typeVersionId: Swift.String?

    public init(
        clientToken: Swift.String? = nil,
        identifier: Swift.String? = nil,
        roleArn: Swift.String? = nil,
        typeName: Swift.String? = nil,
        typeVersionId: Swift.String? = nil
    )
    {
        self.clientToken = clientToken
        self.identifier = identifier
        self.roleArn = roleArn
        self.typeName = typeName
        self.typeVersionId = typeVersionId
    }
}

public struct DeleteResourceOutput: Swift.Sendable {
    /// Represents the current status of the resource deletion request. After you have initiated a resource deletion request, you can monitor the progress of your request by calling [GetResourceRequestStatus](https://docs.aws.amazon.com/cloudcontrolapi/latest/APIReference/API_GetResourceRequestStatus.html) using the RequestToken of the ProgressEvent returned by DeleteResource.
    public var progressEvent: CloudControlClientTypes.ProgressEvent?

    public init(
        progressEvent: CloudControlClientTypes.ProgressEvent? = nil
    )
    {
        self.progressEvent = progressEvent
    }
}

public struct GetResourceInput: Swift.Sendable {
    /// The identifier for the resource. You can specify the primary identifier, or any secondary identifier defined for the resource type in its resource schema. You can only specify one identifier. Primary identifiers can be specified as a string or JSON; secondary identifiers must be specified as JSON. For compound primary identifiers (that is, one that consists of multiple resource properties strung together), to specify the primary identifier as a string, list the property values in the order they are specified in the primary identifier definition, separated by |. For more information, see [Identifying resources](https://docs.aws.amazon.com/cloudcontrolapi/latest/userguide/resource-identifier.html) in the Amazon Web Services Cloud Control API User Guide.
    /// This member is required.
    public var identifier: Swift.String?
    /// The Amazon Resource Name (ARN) of the Identity and Access Management (IAM) role for Cloud Control API to use when performing this resource operation. The role specified must have the permissions required for this operation. The necessary permissions for each event handler are defined in the [handlers](https://docs.aws.amazon.com/cloudformation-cli/latest/userguide/resource-type-schema.html#schema-properties-handlers) section of the [resource type definition schema](https://docs.aws.amazon.com/cloudformation-cli/latest/userguide/resource-type-schema.html). If you do not specify a role, Cloud Control API uses a temporary session created using your Amazon Web Services user credentials. For more information, see [Specifying credentials](https://docs.aws.amazon.com/cloudcontrolapi/latest/userguide/resource-operations.html#resource-operations-permissions) in the Amazon Web Services Cloud Control API User Guide.
    public var roleArn: Swift.String?
    /// The name of the resource type.
    /// This member is required.
    public var typeName: Swift.String?
    /// For private resource types, the type version to use in this resource operation. If you do not specify a resource version, CloudFormation uses the default version.
    public var typeVersionId: Swift.String?

    public init(
        identifier: Swift.String? = nil,
        roleArn: Swift.String? = nil,
        typeName: Swift.String? = nil,
        typeVersionId: Swift.String? = nil
    )
    {
        self.identifier = identifier
        self.roleArn = roleArn
        self.typeName = typeName
        self.typeVersionId = typeVersionId
    }
}

extension CloudControlClientTypes {

    /// Represents information about a provisioned resource.
    public struct ResourceDescription: Swift.Sendable {
        /// The primary identifier for the resource. For more information, see [Identifying resources](https://docs.aws.amazon.com/cloudcontrolapi/latest/userguide/resource-identifier.html) in the Amazon Web Services Cloud Control API User Guide.
        public var identifier: Swift.String?
        /// A list of the resource properties and their current values.
        public var properties: Swift.String?

        public init(
            identifier: Swift.String? = nil,
            properties: Swift.String? = nil
        )
        {
            self.identifier = identifier
            self.properties = properties
        }
    }
}

extension CloudControlClientTypes.ResourceDescription: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ResourceDescription(identifier: \(Swift.String(describing: identifier)), properties: \"CONTENT_REDACTED\")"}
}

public struct GetResourceOutput: Swift.Sendable {
    /// Represents information about a provisioned resource.
    public var resourceDescription: CloudControlClientTypes.ResourceDescription?
    /// The name of the resource type.
    public var typeName: Swift.String?

    public init(
        resourceDescription: CloudControlClientTypes.ResourceDescription? = nil,
        typeName: Swift.String? = nil
    )
    {
        self.resourceDescription = resourceDescription
        self.typeName = typeName
    }
}

public struct GetResourceRequestStatusInput: Swift.Sendable {
    /// A unique token used to track the progress of the resource operation request. Request tokens are included in the ProgressEvent type returned by a resource operation request.
    /// This member is required.
    public var requestToken: Swift.String?

    public init(
        requestToken: Swift.String? = nil
    )
    {
        self.requestToken = requestToken
    }
}

public struct GetResourceRequestStatusOutput: Swift.Sendable {
    /// Represents the current status of the resource operation request.
    public var progressEvent: CloudControlClientTypes.ProgressEvent?

    public init(
        progressEvent: CloudControlClientTypes.ProgressEvent? = nil
    )
    {
        self.progressEvent = progressEvent
    }
}

extension CloudControlClientTypes {

    /// The filter criteria to use in determining the requests returned.
    public struct ResourceRequestStatusFilter: Swift.Sendable {
        /// The operation statuses to include in the filter.
        ///
        /// * PENDING: The operation has been requested, but not yet initiated.
        ///
        /// * IN_PROGRESS: The operation is in progress.
        ///
        /// * SUCCESS: The operation completed.
        ///
        /// * FAILED: The operation failed.
        ///
        /// * CANCEL_IN_PROGRESS: The operation is in the process of being canceled.
        ///
        /// * CANCEL_COMPLETE: The operation has been canceled.
        public var operationStatuses: [CloudControlClientTypes.OperationStatus]?
        /// The operation types to include in the filter.
        public var operations: [CloudControlClientTypes.Operation]?

        public init(
            operationStatuses: [CloudControlClientTypes.OperationStatus]? = nil,
            operations: [CloudControlClientTypes.Operation]? = nil
        )
        {
            self.operationStatuses = operationStatuses
            self.operations = operations
        }
    }
}

public struct ListResourceRequestsInput: Swift.Sendable {
    /// The maximum number of results to be returned with a single call. If the number of available results exceeds this maximum, the response includes a NextToken value that you can assign to the NextToken request parameter to get the next set of results. The default is 20.
    public var maxResults: Swift.Int?
    /// If the previous paginated request didn't return all of the remaining results, the response object's NextToken parameter value is set to a token. To retrieve the next set of results, call this action again and assign that token to the request object's NextToken parameter. If there are no remaining results, the previous response object's NextToken parameter is set to null.
    public var nextToken: Swift.String?
    /// The filter criteria to apply to the requests returned.
    public var resourceRequestStatusFilter: CloudControlClientTypes.ResourceRequestStatusFilter?

    public init(
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        resourceRequestStatusFilter: CloudControlClientTypes.ResourceRequestStatusFilter? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.resourceRequestStatusFilter = resourceRequestStatusFilter
    }
}

public struct ListResourceRequestsOutput: Swift.Sendable {
    /// If the request doesn't return all of the remaining results, NextToken is set to a token. To retrieve the next set of results, call ListResources again and assign that token to the request object's NextToken parameter. If the request returns all results, NextToken is set to null.
    public var nextToken: Swift.String?
    /// The requests that match the specified filter criteria.
    public var resourceRequestStatusSummaries: [CloudControlClientTypes.ProgressEvent]?

    public init(
        nextToken: Swift.String? = nil,
        resourceRequestStatusSummaries: [CloudControlClientTypes.ProgressEvent]? = nil
    )
    {
        self.nextToken = nextToken
        self.resourceRequestStatusSummaries = resourceRequestStatusSummaries
    }
}

public struct ListResourcesInput: Swift.Sendable {
    /// Reserved.
    public var maxResults: Swift.Int?
    /// If the previous paginated request didn't return all of the remaining results, the response object's NextToken parameter value is set to a token. To retrieve the next set of results, call this action again and assign that token to the request object's NextToken parameter. If there are no remaining results, the previous response object's NextToken parameter is set to null.
    public var nextToken: Swift.String?
    /// The resource model to use to select the resources to return.
    public var resourceModel: Swift.String?
    /// The Amazon Resource Name (ARN) of the Identity and Access Management (IAM) role for Cloud Control API to use when performing this resource operation. The role specified must have the permissions required for this operation. The necessary permissions for each event handler are defined in the [handlers](https://docs.aws.amazon.com/cloudformation-cli/latest/userguide/resource-type-schema.html#schema-properties-handlers) section of the [resource type definition schema](https://docs.aws.amazon.com/cloudformation-cli/latest/userguide/resource-type-schema.html). If you do not specify a role, Cloud Control API uses a temporary session created using your Amazon Web Services user credentials. For more information, see [Specifying credentials](https://docs.aws.amazon.com/cloudcontrolapi/latest/userguide/resource-operations.html#resource-operations-permissions) in the Amazon Web Services Cloud Control API User Guide.
    public var roleArn: Swift.String?
    /// The name of the resource type.
    /// This member is required.
    public var typeName: Swift.String?
    /// For private resource types, the type version to use in this resource operation. If you do not specify a resource version, CloudFormation uses the default version.
    public var typeVersionId: Swift.String?

    public init(
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        resourceModel: Swift.String? = nil,
        roleArn: Swift.String? = nil,
        typeName: Swift.String? = nil,
        typeVersionId: Swift.String? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.resourceModel = resourceModel
        self.roleArn = roleArn
        self.typeName = typeName
        self.typeVersionId = typeVersionId
    }
}

extension ListResourcesInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListResourcesInput(maxResults: \(Swift.String(describing: maxResults)), nextToken: \(Swift.String(describing: nextToken)), roleArn: \(Swift.String(describing: roleArn)), typeName: \(Swift.String(describing: typeName)), typeVersionId: \(Swift.String(describing: typeVersionId)), resourceModel: \"CONTENT_REDACTED\")"}
}

public struct ListResourcesOutput: Swift.Sendable {
    /// If the request doesn't return all of the remaining results, NextToken is set to a token. To retrieve the next set of results, call ListResources again and assign that token to the request object's NextToken parameter. If the request returns all results, NextToken is set to null.
    public var nextToken: Swift.String?
    /// Information about the specified resources, including primary identifier and resource model.
    public var resourceDescriptions: [CloudControlClientTypes.ResourceDescription]?
    /// The name of the resource type.
    public var typeName: Swift.String?

    public init(
        nextToken: Swift.String? = nil,
        resourceDescriptions: [CloudControlClientTypes.ResourceDescription]? = nil,
        typeName: Swift.String? = nil
    )
    {
        self.nextToken = nextToken
        self.resourceDescriptions = resourceDescriptions
        self.typeName = typeName
    }
}

public struct UpdateResourceInput: Swift.Sendable {
    /// A unique identifier to ensure the idempotency of the resource request. As a best practice, specify this token to ensure idempotency, so that Amazon Web Services Cloud Control API can accurately distinguish between request retries and new resource requests. You might retry a resource request to ensure that it was successfully received. A client token is valid for 36 hours once used. After that, a resource request with the same client token is treated as a new request. If you do not specify a client token, one is generated for inclusion in the request. For more information, see [Ensuring resource operation requests are unique](https://docs.aws.amazon.com/cloudcontrolapi/latest/userguide/resource-operations.html#resource-operations-idempotency) in the Amazon Web Services Cloud Control API User Guide.
    public var clientToken: Swift.String?
    /// The identifier for the resource. You can specify the primary identifier, or any secondary identifier defined for the resource type in its resource schema. You can only specify one identifier. Primary identifiers can be specified as a string or JSON; secondary identifiers must be specified as JSON. For compound primary identifiers (that is, one that consists of multiple resource properties strung together), to specify the primary identifier as a string, list the property values in the order they are specified in the primary identifier definition, separated by |. For more information, see [Identifying resources](https://docs.aws.amazon.com/cloudcontrolapi/latest/userguide/resource-identifier.html) in the Amazon Web Services Cloud Control API User Guide.
    /// This member is required.
    public var identifier: Swift.String?
    /// A JavaScript Object Notation (JSON) document listing the patch operations that represent the updates to apply to the current resource properties. For details, see [Composing the patch document](https://docs.aws.amazon.com/cloudcontrolapi/latest/userguide/resource-operations-update.html#resource-operations-update-patch) in the Amazon Web Services Cloud Control API User Guide.
    /// This member is required.
    public var patchDocument: Swift.String?
    /// The Amazon Resource Name (ARN) of the Identity and Access Management (IAM) role for Cloud Control API to use when performing this resource operation. The role specified must have the permissions required for this operation. The necessary permissions for each event handler are defined in the [handlers](https://docs.aws.amazon.com/cloudformation-cli/latest/userguide/resource-type-schema.html#schema-properties-handlers) section of the [resource type definition schema](https://docs.aws.amazon.com/cloudformation-cli/latest/userguide/resource-type-schema.html). If you do not specify a role, Cloud Control API uses a temporary session created using your Amazon Web Services user credentials. For more information, see [Specifying credentials](https://docs.aws.amazon.com/cloudcontrolapi/latest/userguide/resource-operations.html#resource-operations-permissions) in the Amazon Web Services Cloud Control API User Guide.
    public var roleArn: Swift.String?
    /// The name of the resource type.
    /// This member is required.
    public var typeName: Swift.String?
    /// For private resource types, the type version to use in this resource operation. If you do not specify a resource version, CloudFormation uses the default version.
    public var typeVersionId: Swift.String?

    public init(
        clientToken: Swift.String? = nil,
        identifier: Swift.String? = nil,
        patchDocument: Swift.String? = nil,
        roleArn: Swift.String? = nil,
        typeName: Swift.String? = nil,
        typeVersionId: Swift.String? = nil
    )
    {
        self.clientToken = clientToken
        self.identifier = identifier
        self.patchDocument = patchDocument
        self.roleArn = roleArn
        self.typeName = typeName
        self.typeVersionId = typeVersionId
    }
}

extension UpdateResourceInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UpdateResourceInput(clientToken: \(Swift.String(describing: clientToken)), identifier: \(Swift.String(describing: identifier)), roleArn: \(Swift.String(describing: roleArn)), typeName: \(Swift.String(describing: typeName)), typeVersionId: \(Swift.String(describing: typeVersionId)), patchDocument: \"CONTENT_REDACTED\")"}
}

public struct UpdateResourceOutput: Swift.Sendable {
    /// Represents the current status of the resource update request. Use the RequestToken of the ProgressEvent with [GetResourceRequestStatus](https://docs.aws.amazon.com/cloudcontrolapi/latest/APIReference/API_GetResourceRequestStatus.html) to return the current status of a resource operation request.
    public var progressEvent: CloudControlClientTypes.ProgressEvent?

    public init(
        progressEvent: CloudControlClientTypes.ProgressEvent? = nil
    )
    {
        self.progressEvent = progressEvent
    }
}

extension CancelResourceRequestInput {

    static func urlPathProvider(_ value: CancelResourceRequestInput) -> Swift.String? {
        return "/"
    }
}

extension CreateResourceInput {

    static func urlPathProvider(_ value: CreateResourceInput) -> Swift.String? {
        return "/"
    }
}

extension DeleteResourceInput {

    static func urlPathProvider(_ value: DeleteResourceInput) -> Swift.String? {
        return "/"
    }
}

extension GetResourceInput {

    static func urlPathProvider(_ value: GetResourceInput) -> Swift.String? {
        return "/"
    }
}

extension GetResourceRequestStatusInput {

    static func urlPathProvider(_ value: GetResourceRequestStatusInput) -> Swift.String? {
        return "/"
    }
}

extension ListResourceRequestsInput {

    static func urlPathProvider(_ value: ListResourceRequestsInput) -> Swift.String? {
        return "/"
    }
}

extension ListResourcesInput {

    static func urlPathProvider(_ value: ListResourcesInput) -> Swift.String? {
        return "/"
    }
}

extension UpdateResourceInput {

    static func urlPathProvider(_ value: UpdateResourceInput) -> Swift.String? {
        return "/"
    }
}

extension CancelResourceRequestInput {

    static func write(value: CancelResourceRequestInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["RequestToken"].write(value.requestToken)
    }
}

extension CreateResourceInput {

    static func write(value: CreateResourceInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ClientToken"].write(value.clientToken)
        try writer["DesiredState"].write(value.desiredState)
        try writer["RoleArn"].write(value.roleArn)
        try writer["TypeName"].write(value.typeName)
        try writer["TypeVersionId"].write(value.typeVersionId)
    }
}

extension DeleteResourceInput {

    static func write(value: DeleteResourceInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ClientToken"].write(value.clientToken)
        try writer["Identifier"].write(value.identifier)
        try writer["RoleArn"].write(value.roleArn)
        try writer["TypeName"].write(value.typeName)
        try writer["TypeVersionId"].write(value.typeVersionId)
    }
}

extension GetResourceInput {

    static func write(value: GetResourceInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Identifier"].write(value.identifier)
        try writer["RoleArn"].write(value.roleArn)
        try writer["TypeName"].write(value.typeName)
        try writer["TypeVersionId"].write(value.typeVersionId)
    }
}

extension GetResourceRequestStatusInput {

    static func write(value: GetResourceRequestStatusInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["RequestToken"].write(value.requestToken)
    }
}

extension ListResourceRequestsInput {

    static func write(value: ListResourceRequestsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["MaxResults"].write(value.maxResults)
        try writer["NextToken"].write(value.nextToken)
        try writer["ResourceRequestStatusFilter"].write(value.resourceRequestStatusFilter, with: CloudControlClientTypes.ResourceRequestStatusFilter.write(value:to:))
    }
}

extension ListResourcesInput {

    static func write(value: ListResourcesInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["MaxResults"].write(value.maxResults)
        try writer["NextToken"].write(value.nextToken)
        try writer["ResourceModel"].write(value.resourceModel)
        try writer["RoleArn"].write(value.roleArn)
        try writer["TypeName"].write(value.typeName)
        try writer["TypeVersionId"].write(value.typeVersionId)
    }
}

extension UpdateResourceInput {

    static func write(value: UpdateResourceInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ClientToken"].write(value.clientToken)
        try writer["Identifier"].write(value.identifier)
        try writer["PatchDocument"].write(value.patchDocument)
        try writer["RoleArn"].write(value.roleArn)
        try writer["TypeName"].write(value.typeName)
        try writer["TypeVersionId"].write(value.typeVersionId)
    }
}

extension CancelResourceRequestOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CancelResourceRequestOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CancelResourceRequestOutput()
        value.progressEvent = try reader["ProgressEvent"].readIfPresent(with: CloudControlClientTypes.ProgressEvent.read(from:))
        return value
    }
}

extension CreateResourceOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateResourceOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateResourceOutput()
        value.progressEvent = try reader["ProgressEvent"].readIfPresent(with: CloudControlClientTypes.ProgressEvent.read(from:))
        return value
    }
}

extension DeleteResourceOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteResourceOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DeleteResourceOutput()
        value.progressEvent = try reader["ProgressEvent"].readIfPresent(with: CloudControlClientTypes.ProgressEvent.read(from:))
        return value
    }
}

extension GetResourceOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetResourceOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetResourceOutput()
        value.resourceDescription = try reader["ResourceDescription"].readIfPresent(with: CloudControlClientTypes.ResourceDescription.read(from:))
        value.typeName = try reader["TypeName"].readIfPresent()
        return value
    }
}

extension GetResourceRequestStatusOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetResourceRequestStatusOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetResourceRequestStatusOutput()
        value.progressEvent = try reader["ProgressEvent"].readIfPresent(with: CloudControlClientTypes.ProgressEvent.read(from:))
        return value
    }
}

extension ListResourceRequestsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListResourceRequestsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListResourceRequestsOutput()
        value.nextToken = try reader["NextToken"].readIfPresent()
        value.resourceRequestStatusSummaries = try reader["ResourceRequestStatusSummaries"].readListIfPresent(memberReadingClosure: CloudControlClientTypes.ProgressEvent.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension ListResourcesOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListResourcesOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListResourcesOutput()
        value.nextToken = try reader["NextToken"].readIfPresent()
        value.resourceDescriptions = try reader["ResourceDescriptions"].readListIfPresent(memberReadingClosure: CloudControlClientTypes.ResourceDescription.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.typeName = try reader["TypeName"].readIfPresent()
        return value
    }
}

extension UpdateResourceOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdateResourceOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = UpdateResourceOutput()
        value.progressEvent = try reader["ProgressEvent"].readIfPresent(with: CloudControlClientTypes.ProgressEvent.read(from:))
        return value
    }
}

enum CancelResourceRequestOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ConcurrentModificationException": return try ConcurrentModificationException.makeError(baseError: baseError)
            case "RequestTokenNotFoundException": return try RequestTokenNotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateResourceOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AlreadyExistsException": return try AlreadyExistsException.makeError(baseError: baseError)
            case "ClientTokenConflictException": return try ClientTokenConflictException.makeError(baseError: baseError)
            case "ConcurrentOperationException": return try ConcurrentOperationException.makeError(baseError: baseError)
            case "GeneralServiceException": return try GeneralServiceException.makeError(baseError: baseError)
            case "HandlerFailureException": return try HandlerFailureException.makeError(baseError: baseError)
            case "HandlerInternalFailureException": return try HandlerInternalFailureException.makeError(baseError: baseError)
            case "InvalidCredentialsException": return try InvalidCredentialsException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            case "NetworkFailureException": return try NetworkFailureException.makeError(baseError: baseError)
            case "NotStabilizedException": return try NotStabilizedException.makeError(baseError: baseError)
            case "NotUpdatableException": return try NotUpdatableException.makeError(baseError: baseError)
            case "PrivateTypeException": return try PrivateTypeException.makeError(baseError: baseError)
            case "ResourceConflictException": return try ResourceConflictException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceInternalErrorException": return try ServiceInternalErrorException.makeError(baseError: baseError)
            case "ServiceLimitExceededException": return try ServiceLimitExceededException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "TypeNotFoundException": return try TypeNotFoundException.makeError(baseError: baseError)
            case "UnsupportedActionException": return try UnsupportedActionException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteResourceOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AlreadyExistsException": return try AlreadyExistsException.makeError(baseError: baseError)
            case "ClientTokenConflictException": return try ClientTokenConflictException.makeError(baseError: baseError)
            case "ConcurrentOperationException": return try ConcurrentOperationException.makeError(baseError: baseError)
            case "GeneralServiceException": return try GeneralServiceException.makeError(baseError: baseError)
            case "HandlerFailureException": return try HandlerFailureException.makeError(baseError: baseError)
            case "HandlerInternalFailureException": return try HandlerInternalFailureException.makeError(baseError: baseError)
            case "InvalidCredentialsException": return try InvalidCredentialsException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            case "NetworkFailureException": return try NetworkFailureException.makeError(baseError: baseError)
            case "NotStabilizedException": return try NotStabilizedException.makeError(baseError: baseError)
            case "NotUpdatableException": return try NotUpdatableException.makeError(baseError: baseError)
            case "PrivateTypeException": return try PrivateTypeException.makeError(baseError: baseError)
            case "ResourceConflictException": return try ResourceConflictException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceInternalErrorException": return try ServiceInternalErrorException.makeError(baseError: baseError)
            case "ServiceLimitExceededException": return try ServiceLimitExceededException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "TypeNotFoundException": return try TypeNotFoundException.makeError(baseError: baseError)
            case "UnsupportedActionException": return try UnsupportedActionException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetResourceOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AlreadyExistsException": return try AlreadyExistsException.makeError(baseError: baseError)
            case "GeneralServiceException": return try GeneralServiceException.makeError(baseError: baseError)
            case "HandlerFailureException": return try HandlerFailureException.makeError(baseError: baseError)
            case "HandlerInternalFailureException": return try HandlerInternalFailureException.makeError(baseError: baseError)
            case "InvalidCredentialsException": return try InvalidCredentialsException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            case "NetworkFailureException": return try NetworkFailureException.makeError(baseError: baseError)
            case "NotStabilizedException": return try NotStabilizedException.makeError(baseError: baseError)
            case "NotUpdatableException": return try NotUpdatableException.makeError(baseError: baseError)
            case "PrivateTypeException": return try PrivateTypeException.makeError(baseError: baseError)
            case "ResourceConflictException": return try ResourceConflictException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceInternalErrorException": return try ServiceInternalErrorException.makeError(baseError: baseError)
            case "ServiceLimitExceededException": return try ServiceLimitExceededException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "TypeNotFoundException": return try TypeNotFoundException.makeError(baseError: baseError)
            case "UnsupportedActionException": return try UnsupportedActionException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetResourceRequestStatusOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "RequestTokenNotFoundException": return try RequestTokenNotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListResourceRequestsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListResourcesOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AlreadyExistsException": return try AlreadyExistsException.makeError(baseError: baseError)
            case "GeneralServiceException": return try GeneralServiceException.makeError(baseError: baseError)
            case "HandlerFailureException": return try HandlerFailureException.makeError(baseError: baseError)
            case "HandlerInternalFailureException": return try HandlerInternalFailureException.makeError(baseError: baseError)
            case "InvalidCredentialsException": return try InvalidCredentialsException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            case "NetworkFailureException": return try NetworkFailureException.makeError(baseError: baseError)
            case "NotStabilizedException": return try NotStabilizedException.makeError(baseError: baseError)
            case "NotUpdatableException": return try NotUpdatableException.makeError(baseError: baseError)
            case "PrivateTypeException": return try PrivateTypeException.makeError(baseError: baseError)
            case "ResourceConflictException": return try ResourceConflictException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceInternalErrorException": return try ServiceInternalErrorException.makeError(baseError: baseError)
            case "ServiceLimitExceededException": return try ServiceLimitExceededException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "TypeNotFoundException": return try TypeNotFoundException.makeError(baseError: baseError)
            case "UnsupportedActionException": return try UnsupportedActionException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdateResourceOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AlreadyExistsException": return try AlreadyExistsException.makeError(baseError: baseError)
            case "ClientTokenConflictException": return try ClientTokenConflictException.makeError(baseError: baseError)
            case "ConcurrentOperationException": return try ConcurrentOperationException.makeError(baseError: baseError)
            case "GeneralServiceException": return try GeneralServiceException.makeError(baseError: baseError)
            case "HandlerFailureException": return try HandlerFailureException.makeError(baseError: baseError)
            case "HandlerInternalFailureException": return try HandlerInternalFailureException.makeError(baseError: baseError)
            case "InvalidCredentialsException": return try InvalidCredentialsException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            case "NetworkFailureException": return try NetworkFailureException.makeError(baseError: baseError)
            case "NotStabilizedException": return try NotStabilizedException.makeError(baseError: baseError)
            case "NotUpdatableException": return try NotUpdatableException.makeError(baseError: baseError)
            case "PrivateTypeException": return try PrivateTypeException.makeError(baseError: baseError)
            case "ResourceConflictException": return try ResourceConflictException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceInternalErrorException": return try ServiceInternalErrorException.makeError(baseError: baseError)
            case "ServiceLimitExceededException": return try ServiceLimitExceededException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "TypeNotFoundException": return try TypeNotFoundException.makeError(baseError: baseError)
            case "UnsupportedActionException": return try UnsupportedActionException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

extension ConcurrentModificationException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> ConcurrentModificationException {
        let reader = baseError.errorBodyReader
        var value = ConcurrentModificationException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension RequestTokenNotFoundException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> RequestTokenNotFoundException {
        let reader = baseError.errorBodyReader
        var value = RequestTokenNotFoundException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension HandlerFailureException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> HandlerFailureException {
        let reader = baseError.errorBodyReader
        var value = HandlerFailureException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension NotStabilizedException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> NotStabilizedException {
        let reader = baseError.errorBodyReader
        var value = NotStabilizedException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ResourceConflictException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> ResourceConflictException {
        let reader = baseError.errorBodyReader
        var value = ResourceConflictException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension InvalidCredentialsException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> InvalidCredentialsException {
        let reader = baseError.errorBodyReader
        var value = InvalidCredentialsException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ServiceLimitExceededException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> ServiceLimitExceededException {
        let reader = baseError.errorBodyReader
        var value = ServiceLimitExceededException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ConcurrentOperationException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> ConcurrentOperationException {
        let reader = baseError.errorBodyReader
        var value = ConcurrentOperationException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ResourceNotFoundException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> ResourceNotFoundException {
        let reader = baseError.errorBodyReader
        var value = ResourceNotFoundException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension NetworkFailureException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> NetworkFailureException {
        let reader = baseError.errorBodyReader
        var value = NetworkFailureException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ServiceInternalErrorException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> ServiceInternalErrorException {
        let reader = baseError.errorBodyReader
        var value = ServiceInternalErrorException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension TypeNotFoundException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> TypeNotFoundException {
        let reader = baseError.errorBodyReader
        var value = TypeNotFoundException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension InvalidRequestException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> InvalidRequestException {
        let reader = baseError.errorBodyReader
        var value = InvalidRequestException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension PrivateTypeException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> PrivateTypeException {
        let reader = baseError.errorBodyReader
        var value = PrivateTypeException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension AlreadyExistsException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> AlreadyExistsException {
        let reader = baseError.errorBodyReader
        var value = AlreadyExistsException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension GeneralServiceException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> GeneralServiceException {
        let reader = baseError.errorBodyReader
        var value = GeneralServiceException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension HandlerInternalFailureException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> HandlerInternalFailureException {
        let reader = baseError.errorBodyReader
        var value = HandlerInternalFailureException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension NotUpdatableException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> NotUpdatableException {
        let reader = baseError.errorBodyReader
        var value = NotUpdatableException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ThrottlingException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> ThrottlingException {
        let reader = baseError.errorBodyReader
        var value = ThrottlingException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ClientTokenConflictException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> ClientTokenConflictException {
        let reader = baseError.errorBodyReader
        var value = ClientTokenConflictException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension UnsupportedActionException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> UnsupportedActionException {
        let reader = baseError.errorBodyReader
        var value = UnsupportedActionException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension CloudControlClientTypes.ProgressEvent {

    static func read(from reader: SmithyJSON.Reader) throws -> CloudControlClientTypes.ProgressEvent {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = CloudControlClientTypes.ProgressEvent()
        value.typeName = try reader["TypeName"].readIfPresent()
        value.identifier = try reader["Identifier"].readIfPresent()
        value.requestToken = try reader["RequestToken"].readIfPresent()
        value.operation = try reader["Operation"].readIfPresent()
        value.operationStatus = try reader["OperationStatus"].readIfPresent()
        value.eventTime = try reader["EventTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.resourceModel = try reader["ResourceModel"].readIfPresent()
        value.statusMessage = try reader["StatusMessage"].readIfPresent()
        value.errorCode = try reader["ErrorCode"].readIfPresent()
        value.retryAfter = try reader["RetryAfter"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        return value
    }
}

extension CloudControlClientTypes.ResourceDescription {

    static func read(from reader: SmithyJSON.Reader) throws -> CloudControlClientTypes.ResourceDescription {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = CloudControlClientTypes.ResourceDescription()
        value.identifier = try reader["Identifier"].readIfPresent()
        value.properties = try reader["Properties"].readIfPresent()
        return value
    }
}

extension CloudControlClientTypes.ResourceRequestStatusFilter {

    static func write(value: CloudControlClientTypes.ResourceRequestStatusFilter?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["OperationStatuses"].writeList(value.operationStatuses, memberWritingClosure: SmithyReadWrite.WritingClosureBox<CloudControlClientTypes.OperationStatus>().write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["Operations"].writeList(value.operations, memberWritingClosure: SmithyReadWrite.WritingClosureBox<CloudControlClientTypes.Operation>().write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

public enum CloudControlClientTypes {}
