//
// Copyright Amazon.com Inc. or its affiliates.
// All Rights Reserved.
//
// SPDX-License-Identifier: Apache-2.0
//

// Code generated by smithy-swift-codegen. DO NOT EDIT!

@_spi(SmithyReadWrite) import ClientRuntime
import Foundation
import class SmithyHTTPAPI.HTTPResponse
@_spi(SmithyReadWrite) import class SmithyJSON.Reader
@_spi(SmithyReadWrite) import class SmithyJSON.Writer
import enum ClientRuntime.ErrorFault
import enum Smithy.ClientError
import enum SmithyReadWrite.ReaderError
@_spi(SmithyReadWrite) import enum SmithyReadWrite.ReadingClosures
@_spi(SmithyReadWrite) import enum SmithyReadWrite.WritingClosures
@_spi(SmithyTimestamps) import enum SmithyTimestamps.TimestampFormat
import protocol AWSClientRuntime.AWSServiceError
import protocol ClientRuntime.HTTPError
import protocol ClientRuntime.ModeledError
@_spi(SmithyReadWrite) import protocol SmithyReadWrite.SmithyReader
@_spi(SmithyReadWrite) import protocol SmithyReadWrite.SmithyWriter
@_spi(SmithyReadWrite) import struct AWSClientRuntime.RestJSONError
@_spi(UnknownAWSHTTPServiceError) import struct AWSClientRuntime.UnknownAWSHTTPServiceError
import struct Smithy.URIQueryItem
@_spi(SmithyReadWrite) import struct SmithyReadWrite.WritingClosureBox

extension SyntheticsClientTypes {

    public enum EncryptionMode: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case sseKms
        case sseS3
        case sdkUnknown(Swift.String)

        public static var allCases: [EncryptionMode] {
            return [
                .sseKms,
                .sseS3
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .sseKms: return "SSE_KMS"
            case .sseS3: return "SSE_S3"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension SyntheticsClientTypes {
    /// A structure that contains the configuration of encryption-at-rest settings for canary artifacts that the canary uploads to Amazon S3. For more information, see [Encrypting canary artifacts](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch_Synthetics_artifact_encryption.html)
    public struct S3EncryptionConfig {
        /// The encryption method to use for artifacts created by this canary. Specify SSE_S3 to use server-side encryption (SSE) with an Amazon S3-managed key. Specify SSE-KMS to use server-side encryption with a customer-managed KMS key. If you omit this parameter, an Amazon Web Services-managed KMS key is used.
        public var encryptionMode: SyntheticsClientTypes.EncryptionMode?
        /// The ARN of the customer-managed KMS key to use, if you specify SSE-KMS for EncryptionMode
        public var kmsKeyArn: Swift.String?

        public init(
            encryptionMode: SyntheticsClientTypes.EncryptionMode? = nil,
            kmsKeyArn: Swift.String? = nil
        )
        {
            self.encryptionMode = encryptionMode
            self.kmsKeyArn = kmsKeyArn
        }
    }

}

extension SyntheticsClientTypes {
    /// A structure that contains the configuration for canary artifacts, including the encryption-at-rest settings for artifacts that the canary uploads to Amazon S3.
    public struct ArtifactConfigInput {
        /// A structure that contains the configuration of the encryption-at-rest settings for artifacts that the canary uploads to Amazon S3. Artifact encryption functionality is available only for canaries that use Synthetics runtime version syn-nodejs-puppeteer-3.3 or later. For more information, see [Encrypting canary artifacts](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch_Synthetics_artifact_encryption.html)
        public var s3Encryption: SyntheticsClientTypes.S3EncryptionConfig?

        public init(
            s3Encryption: SyntheticsClientTypes.S3EncryptionConfig? = nil
        )
        {
            self.s3Encryption = s3Encryption
        }
    }

}

extension SyntheticsClientTypes {
    /// A structure that contains the configuration for canary artifacts, including the encryption-at-rest settings for artifacts that the canary uploads to Amazon S3.
    public struct ArtifactConfigOutput {
        /// A structure that contains the configuration of encryption settings for canary artifacts that are stored in Amazon S3.
        public var s3Encryption: SyntheticsClientTypes.S3EncryptionConfig?

        public init(
            s3Encryption: SyntheticsClientTypes.S3EncryptionConfig? = nil
        )
        {
            self.s3Encryption = s3Encryption
        }
    }

}

/// A conflicting operation is already in progress.
public struct ConflictException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ConflictException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// An unknown internal error occurred.
public struct InternalServerException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InternalServerException" }
    public static var fault: ClientRuntime.ErrorFault { .server }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// One of the specified resources was not found.
public struct ResourceNotFoundException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ResourceNotFoundException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The request exceeded a service quota value.
public struct ServiceQuotaExceededException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ServiceQuotaExceededException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// A parameter could not be validated.
public struct ValidationException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ValidationException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

public struct AssociateResourceInput {
    /// Specifies the group. You can specify the group name, the ARN, or the group ID as the GroupIdentifier.
    /// This member is required.
    public var groupIdentifier: Swift.String?
    /// The ARN of the canary that you want to associate with the specified group.
    /// This member is required.
    public var resourceArn: Swift.String?

    public init(
        groupIdentifier: Swift.String? = nil,
        resourceArn: Swift.String? = nil
    )
    {
        self.groupIdentifier = groupIdentifier
        self.resourceArn = resourceArn
    }
}

public struct AssociateResourceOutput {

    public init() { }
}

/// The request was not valid.
public struct BadRequestException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "BadRequestException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension SyntheticsClientTypes {
    /// A structure representing a screenshot that is used as a baseline during visual monitoring comparisons made by the canary.
    public struct BaseScreenshot {
        /// Coordinates that define the part of a screen to ignore during screenshot comparisons. To obtain the coordinates to use here, use the CloudWatch console to draw the boundaries on the screen. For more information, see [ Editing or deleting a canary](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/synthetics_canaries_deletion.html)
        public var ignoreCoordinates: [Swift.String]?
        /// The name of the screenshot. This is generated the first time the canary is run after the UpdateCanary operation that specified for this canary to perform visual monitoring.
        /// This member is required.
        public var screenshotName: Swift.String?

        public init(
            ignoreCoordinates: [Swift.String]? = nil,
            screenshotName: Swift.String? = nil
        )
        {
            self.ignoreCoordinates = ignoreCoordinates
            self.screenshotName = screenshotName
        }
    }

}

extension SyntheticsClientTypes {
    /// This structure contains information about the canary's Lambda handler and where its code is stored by CloudWatch Synthetics.
    public struct CanaryCodeOutput {
        /// The entry point to use for the source code when running the canary.
        public var handler: Swift.String?
        /// The ARN of the Lambda layer where Synthetics stores the canary script code.
        public var sourceLocationArn: Swift.String?

        public init(
            handler: Swift.String? = nil,
            sourceLocationArn: Swift.String? = nil
        )
        {
            self.handler = handler
            self.sourceLocationArn = sourceLocationArn
        }
    }

}

extension SyntheticsClientTypes {
    /// A structure that contains information about a canary run.
    public struct CanaryRunConfigOutput {
        /// Displays whether this canary run used active X-Ray tracing.
        public var activeTracing: Swift.Bool?
        /// The maximum amount of memory available to the canary while it is running, in MB. This value must be a multiple of 64.
        public var memoryInMB: Swift.Int?
        /// How long the canary is allowed to run before it must stop.
        public var timeoutInSeconds: Swift.Int?

        public init(
            activeTracing: Swift.Bool? = nil,
            memoryInMB: Swift.Int? = nil,
            timeoutInSeconds: Swift.Int? = nil
        )
        {
            self.activeTracing = activeTracing
            self.memoryInMB = memoryInMB
            self.timeoutInSeconds = timeoutInSeconds
        }
    }

}

extension SyntheticsClientTypes {
    /// How long, in seconds, for the canary to continue making regular runs according to the schedule in the Expression value.
    public struct CanaryScheduleOutput {
        /// How long, in seconds, for the canary to continue making regular runs after it was created. The runs are performed according to the schedule in the Expression value.
        public var durationInSeconds: Swift.Int?
        /// A rate expression or a cron expression that defines how often the canary is to run. For a rate expression, The syntax is rate(number unit). unit can be minute, minutes, or hour. For example, rate(1 minute) runs the canary once a minute, rate(10 minutes) runs it once every 10 minutes, and rate(1 hour) runs it once every hour. You can specify a frequency between rate(1 minute) and rate(1 hour). Specifying rate(0 minute) or rate(0 hour) is a special value that causes the canary to run only once when it is started. Use cron(expression) to specify a cron expression. For information about the syntax for cron expressions, see [ Scheduling canary runs using cron](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch_Synthetics_Canaries_cron.html).
        public var expression: Swift.String?

        public init(
            durationInSeconds: Swift.Int? = nil,
            expression: Swift.String? = nil
        )
        {
            self.durationInSeconds = durationInSeconds
            self.expression = expression
        }
    }

}

extension SyntheticsClientTypes {

    public enum CanaryState: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case creating
        case deleting
        case error
        case ready
        case running
        case starting
        case stopped
        case stopping
        case updating
        case sdkUnknown(Swift.String)

        public static var allCases: [CanaryState] {
            return [
                .creating,
                .deleting,
                .error,
                .ready,
                .running,
                .starting,
                .stopped,
                .stopping,
                .updating
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .creating: return "CREATING"
            case .deleting: return "DELETING"
            case .error: return "ERROR"
            case .ready: return "READY"
            case .running: return "RUNNING"
            case .starting: return "STARTING"
            case .stopped: return "STOPPED"
            case .stopping: return "STOPPING"
            case .updating: return "UPDATING"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension SyntheticsClientTypes {

    public enum CanaryStateReasonCode: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case createFailed
        case createInProgress
        case createPending
        case deleteFailed
        case deleteInProgress
        case invalidPermissions
        case rollbackComplete
        case rollbackFailed
        case syncDeleteInProgress
        case updateComplete
        case updateInProgress
        case updatePending
        case sdkUnknown(Swift.String)

        public static var allCases: [CanaryStateReasonCode] {
            return [
                .createFailed,
                .createInProgress,
                .createPending,
                .deleteFailed,
                .deleteInProgress,
                .invalidPermissions,
                .rollbackComplete,
                .rollbackFailed,
                .syncDeleteInProgress,
                .updateComplete,
                .updateInProgress,
                .updatePending
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .createFailed: return "CREATE_FAILED"
            case .createInProgress: return "CREATE_IN_PROGRESS"
            case .createPending: return "CREATE_PENDING"
            case .deleteFailed: return "DELETE_FAILED"
            case .deleteInProgress: return "DELETE_IN_PROGRESS"
            case .invalidPermissions: return "INVALID_PERMISSIONS"
            case .rollbackComplete: return "ROLLBACK_COMPLETE"
            case .rollbackFailed: return "ROLLBACK_FAILED"
            case .syncDeleteInProgress: return "SYNC_DELETE_IN_PROGRESS"
            case .updateComplete: return "UPDATE_COMPLETE"
            case .updateInProgress: return "UPDATE_IN_PROGRESS"
            case .updatePending: return "UPDATE_PENDING"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension SyntheticsClientTypes {
    /// A structure that contains the current state of the canary.
    public struct CanaryStatus {
        /// The current state of the canary.
        public var state: SyntheticsClientTypes.CanaryState?
        /// If the canary has insufficient permissions to run, this field provides more details.
        public var stateReason: Swift.String?
        /// If the canary cannot run or has failed, this field displays the reason.
        public var stateReasonCode: SyntheticsClientTypes.CanaryStateReasonCode?

        public init(
            state: SyntheticsClientTypes.CanaryState? = nil,
            stateReason: Swift.String? = nil,
            stateReasonCode: SyntheticsClientTypes.CanaryStateReasonCode? = nil
        )
        {
            self.state = state
            self.stateReason = stateReason
            self.stateReasonCode = stateReasonCode
        }
    }

}

extension SyntheticsClientTypes {
    /// This structure contains information about when the canary was created and modified.
    public struct CanaryTimeline {
        /// The date and time the canary was created.
        public var created: Foundation.Date?
        /// The date and time the canary was most recently modified.
        public var lastModified: Foundation.Date?
        /// The date and time that the canary's most recent run started.
        public var lastStarted: Foundation.Date?
        /// The date and time that the canary's most recent run ended.
        public var lastStopped: Foundation.Date?

        public init(
            created: Foundation.Date? = nil,
            lastModified: Foundation.Date? = nil,
            lastStarted: Foundation.Date? = nil,
            lastStopped: Foundation.Date? = nil
        )
        {
            self.created = created
            self.lastModified = lastModified
            self.lastStarted = lastStarted
            self.lastStopped = lastStopped
        }
    }

}

extension SyntheticsClientTypes {
    /// If this canary performs visual monitoring by comparing screenshots, this structure contains the ID of the canary run that is used as the baseline for screenshots, and the coordinates of any parts of those screenshots that are ignored during visual monitoring comparison. Visual monitoring is supported only on canaries running the syn-puppeteer-node-3.2 runtime or later.
    public struct VisualReferenceOutput {
        /// The ID of the canary run that produced the baseline screenshots that are used for visual monitoring comparisons by this canary.
        public var baseCanaryRunId: Swift.String?
        /// An array of screenshots that are used as the baseline for comparisons during visual monitoring.
        public var baseScreenshots: [SyntheticsClientTypes.BaseScreenshot]?

        public init(
            baseCanaryRunId: Swift.String? = nil,
            baseScreenshots: [SyntheticsClientTypes.BaseScreenshot]? = nil
        )
        {
            self.baseCanaryRunId = baseCanaryRunId
            self.baseScreenshots = baseScreenshots
        }
    }

}

extension SyntheticsClientTypes {
    /// If this canary is to test an endpoint in a VPC, this structure contains information about the subnets and security groups of the VPC endpoint. For more information, see [ Running a Canary in a VPC](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch_Synthetics_Canaries_VPC.html).
    public struct VpcConfigOutput {
        /// The IDs of the security groups for this canary.
        public var securityGroupIds: [Swift.String]?
        /// The IDs of the subnets where this canary is to run.
        public var subnetIds: [Swift.String]?
        /// The IDs of the VPC where this canary is to run.
        public var vpcId: Swift.String?

        public init(
            securityGroupIds: [Swift.String]? = nil,
            subnetIds: [Swift.String]? = nil,
            vpcId: Swift.String? = nil
        )
        {
            self.securityGroupIds = securityGroupIds
            self.subnetIds = subnetIds
            self.vpcId = vpcId
        }
    }

}

extension SyntheticsClientTypes {
    /// This structure contains all information about one canary in your account.
    public struct Canary {
        /// A structure that contains the configuration for canary artifacts, including the encryption-at-rest settings for artifacts that the canary uploads to Amazon S3.
        public var artifactConfig: SyntheticsClientTypes.ArtifactConfigOutput?
        /// The location in Amazon S3 where Synthetics stores artifacts from the runs of this canary. Artifacts include the log file, screenshots, and HAR files.
        public var artifactS3Location: Swift.String?
        /// This structure contains information about the canary's Lambda handler and where its code is stored by CloudWatch Synthetics.
        public var code: SyntheticsClientTypes.CanaryCodeOutput?
        /// The ARN of the Lambda function that is used as your canary's engine. For more information about Lambda ARN format, see [Resources and Conditions for Lambda Actions](https://docs.aws.amazon.com/lambda/latest/dg/lambda-api-permissions-ref.html).
        public var engineArn: Swift.String?
        /// The ARN of the IAM role used to run the canary. This role must include lambda.amazonaws.com as a principal in the trust policy.
        public var executionRoleArn: Swift.String?
        /// The number of days to retain data about failed runs of this canary.
        public var failureRetentionPeriodInDays: Swift.Int?
        /// The unique ID of this canary.
        public var id: Swift.String?
        /// The name of the canary.
        public var name: Swift.String?
        /// A structure that contains information about a canary run.
        public var runConfig: SyntheticsClientTypes.CanaryRunConfigOutput?
        /// Specifies the runtime version to use for the canary. For more information about runtime versions, see [ Canary Runtime Versions](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch_Synthetics_Canaries_Library.html).
        public var runtimeVersion: Swift.String?
        /// A structure that contains information about how often the canary is to run, and when these runs are to stop.
        public var schedule: SyntheticsClientTypes.CanaryScheduleOutput?
        /// A structure that contains information about the canary's status.
        public var status: SyntheticsClientTypes.CanaryStatus?
        /// The number of days to retain data about successful runs of this canary.
        public var successRetentionPeriodInDays: Swift.Int?
        /// The list of key-value pairs that are associated with the canary.
        public var tags: [Swift.String: Swift.String]?
        /// A structure that contains information about when the canary was created, modified, and most recently run.
        public var timeline: SyntheticsClientTypes.CanaryTimeline?
        /// If this canary performs visual monitoring by comparing screenshots, this structure contains the ID of the canary run to use as the baseline for screenshots, and the coordinates of any parts of the screen to ignore during the visual monitoring comparison.
        public var visualReference: SyntheticsClientTypes.VisualReferenceOutput?
        /// If this canary is to test an endpoint in a VPC, this structure contains information about the subnets and security groups of the VPC endpoint. For more information, see [ Running a Canary in a VPC](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch_Synthetics_Canaries_VPC.html).
        public var vpcConfig: SyntheticsClientTypes.VpcConfigOutput?

        public init(
            artifactConfig: SyntheticsClientTypes.ArtifactConfigOutput? = nil,
            artifactS3Location: Swift.String? = nil,
            code: SyntheticsClientTypes.CanaryCodeOutput? = nil,
            engineArn: Swift.String? = nil,
            executionRoleArn: Swift.String? = nil,
            failureRetentionPeriodInDays: Swift.Int? = nil,
            id: Swift.String? = nil,
            name: Swift.String? = nil,
            runConfig: SyntheticsClientTypes.CanaryRunConfigOutput? = nil,
            runtimeVersion: Swift.String? = nil,
            schedule: SyntheticsClientTypes.CanaryScheduleOutput? = nil,
            status: SyntheticsClientTypes.CanaryStatus? = nil,
            successRetentionPeriodInDays: Swift.Int? = nil,
            tags: [Swift.String: Swift.String]? = nil,
            timeline: SyntheticsClientTypes.CanaryTimeline? = nil,
            visualReference: SyntheticsClientTypes.VisualReferenceOutput? = nil,
            vpcConfig: SyntheticsClientTypes.VpcConfigOutput? = nil
        )
        {
            self.artifactConfig = artifactConfig
            self.artifactS3Location = artifactS3Location
            self.code = code
            self.engineArn = engineArn
            self.executionRoleArn = executionRoleArn
            self.failureRetentionPeriodInDays = failureRetentionPeriodInDays
            self.id = id
            self.name = name
            self.runConfig = runConfig
            self.runtimeVersion = runtimeVersion
            self.schedule = schedule
            self.status = status
            self.successRetentionPeriodInDays = successRetentionPeriodInDays
            self.tags = tags
            self.timeline = timeline
            self.visualReference = visualReference
            self.vpcConfig = vpcConfig
        }
    }

}

extension SyntheticsClientTypes {

    public enum CanaryRunState: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case failed
        case passed
        case running
        case sdkUnknown(Swift.String)

        public static var allCases: [CanaryRunState] {
            return [
                .failed,
                .passed,
                .running
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .failed: return "FAILED"
            case .passed: return "PASSED"
            case .running: return "RUNNING"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension SyntheticsClientTypes {

    public enum CanaryRunStateReasonCode: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case canaryFailure
        case executionFailure
        case sdkUnknown(Swift.String)

        public static var allCases: [CanaryRunStateReasonCode] {
            return [
                .canaryFailure,
                .executionFailure
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .canaryFailure: return "CANARY_FAILURE"
            case .executionFailure: return "EXECUTION_FAILURE"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension SyntheticsClientTypes {
    /// This structure contains the status information about a canary run.
    public struct CanaryRunStatus {
        /// The current state of the run.
        public var state: SyntheticsClientTypes.CanaryRunState?
        /// If run of the canary failed, this field contains the reason for the error.
        public var stateReason: Swift.String?
        /// If this value is CANARY_FAILURE, an exception occurred in the canary code. If this value is EXECUTION_FAILURE, an exception occurred in CloudWatch Synthetics.
        public var stateReasonCode: SyntheticsClientTypes.CanaryRunStateReasonCode?

        public init(
            state: SyntheticsClientTypes.CanaryRunState? = nil,
            stateReason: Swift.String? = nil,
            stateReasonCode: SyntheticsClientTypes.CanaryRunStateReasonCode? = nil
        )
        {
            self.state = state
            self.stateReason = stateReason
            self.stateReasonCode = stateReasonCode
        }
    }

}

extension SyntheticsClientTypes {
    /// This structure contains the start and end times of a single canary run.
    public struct CanaryRunTimeline {
        /// The end time of the run.
        public var completed: Foundation.Date?
        /// The start time of the run.
        public var started: Foundation.Date?

        public init(
            completed: Foundation.Date? = nil,
            started: Foundation.Date? = nil
        )
        {
            self.completed = completed
            self.started = started
        }
    }

}

extension SyntheticsClientTypes {
    /// This structure contains the details about one run of one canary.
    public struct CanaryRun {
        /// The location where the canary stored artifacts from the run. Artifacts include the log file, screenshots, and HAR files.
        public var artifactS3Location: Swift.String?
        /// A unique ID that identifies this canary run.
        public var id: Swift.String?
        /// The name of the canary.
        public var name: Swift.String?
        /// The status of this run.
        public var status: SyntheticsClientTypes.CanaryRunStatus?
        /// A structure that contains the start and end times of this run.
        public var timeline: SyntheticsClientTypes.CanaryRunTimeline?

        public init(
            artifactS3Location: Swift.String? = nil,
            id: Swift.String? = nil,
            name: Swift.String? = nil,
            status: SyntheticsClientTypes.CanaryRunStatus? = nil,
            timeline: SyntheticsClientTypes.CanaryRunTimeline? = nil
        )
        {
            self.artifactS3Location = artifactS3Location
            self.id = id
            self.name = name
            self.status = status
            self.timeline = timeline
        }
    }

}

extension SyntheticsClientTypes {
    /// This structure contains information about the most recent run of a single canary.
    public struct CanaryLastRun {
        /// The name of the canary.
        public var canaryName: Swift.String?
        /// The results from this canary's most recent run.
        public var lastRun: SyntheticsClientTypes.CanaryRun?

        public init(
            canaryName: Swift.String? = nil,
            lastRun: SyntheticsClientTypes.CanaryRun? = nil
        )
        {
            self.canaryName = canaryName
            self.lastRun = lastRun
        }
    }

}

extension SyntheticsClientTypes {
    /// Use this structure to input your script code for the canary. This structure contains the Lambda handler with the location where the canary should start running the script. If the script is stored in an S3 bucket, the bucket name, key, and version are also included. If the script was passed into the canary directly, the script code is contained in the value of Zipfile. If you are uploading your canary scripts with an Amazon S3 bucket, your zip file should include your script in a certain folder structure.
    ///
    /// * For Node.js canaries, the folder structure must be nodejs/node_modules/myCanaryFilename.js  For more information, see [Packaging your Node.js canary files](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch_Synthetics_Canaries_WritingCanary_Nodejs.html#CloudWatch_Synthetics_Canaries_package)
    ///
    /// * For Python canaries, the folder structure must be python/myCanaryFilename.p  or python/myFolder/myCanaryFilename.py  For more information, see [Packaging your Python canary files](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch_Synthetics_Canaries_WritingCanary_Python.html#CloudWatch_Synthetics_Canaries_WritingCanary_Python_package)
    public struct CanaryCodeInput {
        /// The entry point to use for the source code when running the canary. For canaries that use the syn-python-selenium-1.0 runtime or a syn-nodejs.puppeteer runtime earlier than syn-nodejs.puppeteer-3.4, the handler must be specified as  fileName.handler. For syn-python-selenium-1.1, syn-nodejs.puppeteer-3.4, and later runtimes, the handler can be specified as  fileName.functionName , or you can specify a folder where canary scripts reside as  folder/fileName.functionName .
        /// This member is required.
        public var handler: Swift.String?
        /// If your canary script is located in S3, specify the bucket name here. Do not include s3:// as the start of the bucket name.
        public var s3Bucket: Swift.String?
        /// The S3 key of your script. For more information, see [Working with Amazon S3 Objects](https://docs.aws.amazon.com/AmazonS3/latest/dev/UsingObjects.html).
        public var s3Key: Swift.String?
        /// The S3 version ID of your script.
        public var s3Version: Swift.String?
        /// If you input your canary script directly into the canary instead of referring to an S3 location, the value of this parameter is the base64-encoded contents of the .zip file that contains the script. It must be smaller than 225 Kb. For large canary scripts, we recommend that you use an S3 location instead of inputting it directly with this parameter.
        public var zipFile: Foundation.Data?

        public init(
            handler: Swift.String? = nil,
            s3Bucket: Swift.String? = nil,
            s3Key: Swift.String? = nil,
            s3Version: Swift.String? = nil,
            zipFile: Foundation.Data? = nil
        )
        {
            self.handler = handler
            self.s3Bucket = s3Bucket
            self.s3Key = s3Key
            self.s3Version = s3Version
            self.zipFile = zipFile
        }
    }

}

extension SyntheticsClientTypes {
    /// A structure that contains input information for a canary run.
    public struct CanaryRunConfigInput {
        /// Specifies whether this canary is to use active X-Ray tracing when it runs. Active tracing enables this canary run to be displayed in the ServiceLens and X-Ray service maps even if the canary does not hit an endpoint that has X-Ray tracing enabled. Using X-Ray tracing incurs charges. For more information, see [ Canaries and X-Ray tracing](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch_Synthetics_Canaries_tracing.html). You can enable active tracing only for canaries that use version syn-nodejs-2.0 or later for their canary runtime.
        public var activeTracing: Swift.Bool?
        /// Specifies the keys and values to use for any environment variables used in the canary script. Use the following format: { "key1" : "value1", "key2" : "value2", ...} Keys must start with a letter and be at least two characters. The total size of your environment variables cannot exceed 4 KB. You can't specify any Lambda reserved environment variables as the keys for your environment variables. For more information about reserved keys, see [ Runtime environment variables](https://docs.aws.amazon.com/lambda/latest/dg/configuration-envvars.html#configuration-envvars-runtime). The environment variables keys and values are not encrypted. Do not store sensitive information in this field.
        public var environmentVariables: [Swift.String: Swift.String]?
        /// The maximum amount of memory available to the canary while it is running, in MB. This value must be a multiple of 64.
        public var memoryInMB: Swift.Int?
        /// How long the canary is allowed to run before it must stop. You can't set this time to be longer than the frequency of the runs of this canary. If you omit this field, the frequency of the canary is used as this value, up to a maximum of 14 minutes.
        public var timeoutInSeconds: Swift.Int?

        public init(
            activeTracing: Swift.Bool? = nil,
            environmentVariables: [Swift.String: Swift.String]? = nil,
            memoryInMB: Swift.Int? = nil,
            timeoutInSeconds: Swift.Int? = nil
        )
        {
            self.activeTracing = activeTracing
            self.environmentVariables = environmentVariables
            self.memoryInMB = memoryInMB
            self.timeoutInSeconds = timeoutInSeconds
        }
    }

}

extension SyntheticsClientTypes {
    /// This structure specifies how often a canary is to make runs and the date and time when it should stop making runs.
    public struct CanaryScheduleInput {
        /// How long, in seconds, for the canary to continue making regular runs according to the schedule in the Expression value. If you specify 0, the canary continues making runs until you stop it. If you omit this field, the default of 0 is used.
        public var durationInSeconds: Swift.Int?
        /// A rate expression or a cron expression that defines how often the canary is to run. For a rate expression, The syntax is rate(number unit). unit can be minute, minutes, or hour. For example, rate(1 minute) runs the canary once a minute, rate(10 minutes) runs it once every 10 minutes, and rate(1 hour) runs it once every hour. You can specify a frequency between rate(1 minute) and rate(1 hour). Specifying rate(0 minute) or rate(0 hour) is a special value that causes the canary to run only once when it is started. Use cron(expression) to specify a cron expression. You can't schedule a canary to wait for more than a year before running. For information about the syntax for cron expressions, see [ Scheduling canary runs using cron](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch_Synthetics_Canaries_cron.html).
        /// This member is required.
        public var expression: Swift.String?

        public init(
            durationInSeconds: Swift.Int? = nil,
            expression: Swift.String? = nil
        )
        {
            self.durationInSeconds = durationInSeconds
            self.expression = expression
        }
    }

}

/// One of the input resources is larger than is allowed.
public struct RequestEntityTooLargeException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "RequestEntityTooLargeException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension SyntheticsClientTypes {

    public enum ResourceToTag: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case lambdaFunction
        case sdkUnknown(Swift.String)

        public static var allCases: [ResourceToTag] {
            return [
                .lambdaFunction
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .lambdaFunction: return "lambda-function"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension SyntheticsClientTypes {
    /// If this canary is to test an endpoint in a VPC, this structure contains information about the subnets and security groups of the VPC endpoint. For more information, see [ Running a Canary in a VPC](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch_Synthetics_Canaries_VPC.html).
    public struct VpcConfigInput {
        /// The IDs of the security groups for this canary.
        public var securityGroupIds: [Swift.String]?
        /// The IDs of the subnets where this canary is to run.
        public var subnetIds: [Swift.String]?

        public init(
            securityGroupIds: [Swift.String]? = nil,
            subnetIds: [Swift.String]? = nil
        )
        {
            self.securityGroupIds = securityGroupIds
            self.subnetIds = subnetIds
        }
    }

}

public struct CreateCanaryInput {
    /// A structure that contains the configuration for canary artifacts, including the encryption-at-rest settings for artifacts that the canary uploads to Amazon S3.
    public var artifactConfig: SyntheticsClientTypes.ArtifactConfigInput?
    /// The location in Amazon S3 where Synthetics stores artifacts from the test runs of this canary. Artifacts include the log file, screenshots, and HAR files. The name of the S3 bucket can't include a period (.).
    /// This member is required.
    public var artifactS3Location: Swift.String?
    /// A structure that includes the entry point from which the canary should start running your script. If the script is stored in an S3 bucket, the bucket name, key, and version are also included.
    /// This member is required.
    public var code: SyntheticsClientTypes.CanaryCodeInput?
    /// The ARN of the IAM role to be used to run the canary. This role must already exist, and must include lambda.amazonaws.com as a principal in the trust policy. The role must also have the following permissions:
    ///
    /// * s3:PutObject
    ///
    /// * s3:GetBucketLocation
    ///
    /// * s3:ListAllMyBuckets
    ///
    /// * cloudwatch:PutMetricData
    ///
    /// * logs:CreateLogGroup
    ///
    /// * logs:CreateLogStream
    ///
    /// * logs:PutLogEvents
    /// This member is required.
    public var executionRoleArn: Swift.String?
    /// The number of days to retain data about failed runs of this canary. If you omit this field, the default of 31 days is used. The valid range is 1 to 455 days.
    public var failureRetentionPeriodInDays: Swift.Int?
    /// The name for this canary. Be sure to give it a descriptive name that distinguishes it from other canaries in your account. Do not include secrets or proprietary information in your canary names. The canary name makes up part of the canary ARN, and the ARN is included in outbound calls over the internet. For more information, see [Security Considerations for Synthetics Canaries](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/servicelens_canaries_security.html).
    /// This member is required.
    public var name: Swift.String?
    /// To have the tags that you apply to this canary also be applied to the Lambda function that the canary uses, specify this parameter with the value lambda-function. If you specify this parameter and don't specify any tags in the Tags parameter, the canary creation fails.
    public var resourcesToReplicateTags: [SyntheticsClientTypes.ResourceToTag]?
    /// A structure that contains the configuration for individual canary runs, such as timeout value and environment variables. The environment variables keys and values are not encrypted. Do not store sensitive information in this field.
    public var runConfig: SyntheticsClientTypes.CanaryRunConfigInput?
    /// Specifies the runtime version to use for the canary. For a list of valid runtime versions and more information about runtime versions, see [ Canary Runtime Versions](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch_Synthetics_Canaries_Library.html).
    /// This member is required.
    public var runtimeVersion: Swift.String?
    /// A structure that contains information about how often the canary is to run and when these test runs are to stop.
    /// This member is required.
    public var schedule: SyntheticsClientTypes.CanaryScheduleInput?
    /// The number of days to retain data about successful runs of this canary. If you omit this field, the default of 31 days is used. The valid range is 1 to 455 days.
    public var successRetentionPeriodInDays: Swift.Int?
    /// A list of key-value pairs to associate with the canary. You can associate as many as 50 tags with a canary. Tags can help you organize and categorize your resources. You can also use them to scope user permissions, by granting a user permission to access or change only the resources that have certain tag values. To have the tags that you apply to this canary also be applied to the Lambda function that the canary uses, specify this parameter with the value lambda-function.
    public var tags: [Swift.String: Swift.String]?
    /// If this canary is to test an endpoint in a VPC, this structure contains information about the subnet and security groups of the VPC endpoint. For more information, see [ Running a Canary in a VPC](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch_Synthetics_Canaries_VPC.html).
    public var vpcConfig: SyntheticsClientTypes.VpcConfigInput?

    public init(
        artifactConfig: SyntheticsClientTypes.ArtifactConfigInput? = nil,
        artifactS3Location: Swift.String? = nil,
        code: SyntheticsClientTypes.CanaryCodeInput? = nil,
        executionRoleArn: Swift.String? = nil,
        failureRetentionPeriodInDays: Swift.Int? = nil,
        name: Swift.String? = nil,
        resourcesToReplicateTags: [SyntheticsClientTypes.ResourceToTag]? = nil,
        runConfig: SyntheticsClientTypes.CanaryRunConfigInput? = nil,
        runtimeVersion: Swift.String? = nil,
        schedule: SyntheticsClientTypes.CanaryScheduleInput? = nil,
        successRetentionPeriodInDays: Swift.Int? = nil,
        tags: [Swift.String: Swift.String]? = nil,
        vpcConfig: SyntheticsClientTypes.VpcConfigInput? = nil
    )
    {
        self.artifactConfig = artifactConfig
        self.artifactS3Location = artifactS3Location
        self.code = code
        self.executionRoleArn = executionRoleArn
        self.failureRetentionPeriodInDays = failureRetentionPeriodInDays
        self.name = name
        self.resourcesToReplicateTags = resourcesToReplicateTags
        self.runConfig = runConfig
        self.runtimeVersion = runtimeVersion
        self.schedule = schedule
        self.successRetentionPeriodInDays = successRetentionPeriodInDays
        self.tags = tags
        self.vpcConfig = vpcConfig
    }
}

public struct CreateCanaryOutput {
    /// The full details about the canary you have created.
    public var canary: SyntheticsClientTypes.Canary?

    public init(
        canary: SyntheticsClientTypes.Canary? = nil
    )
    {
        self.canary = canary
    }
}

public struct CreateGroupInput {
    /// The name for the group. It can include any Unicode characters. The names for all groups in your account, across all Regions, must be unique.
    /// This member is required.
    public var name: Swift.String?
    /// A list of key-value pairs to associate with the group. You can associate as many as 50 tags with a group. Tags can help you organize and categorize your resources. You can also use them to scope user permissions, by granting a user permission to access or change only the resources that have certain tag values.
    public var tags: [Swift.String: Swift.String]?

    public init(
        name: Swift.String? = nil,
        tags: [Swift.String: Swift.String]? = nil
    )
    {
        self.name = name
        self.tags = tags
    }
}

extension SyntheticsClientTypes {
    /// This structure contains information about one group.
    public struct Group {
        /// The ARN of the group.
        public var arn: Swift.String?
        /// The date and time that the group was created.
        public var createdTime: Foundation.Date?
        /// The unique ID of the group.
        public var id: Swift.String?
        /// The date and time that the group was most recently updated.
        public var lastModifiedTime: Foundation.Date?
        /// The name of the group.
        public var name: Swift.String?
        /// The list of key-value pairs that are associated with the canary.
        public var tags: [Swift.String: Swift.String]?

        public init(
            arn: Swift.String? = nil,
            createdTime: Foundation.Date? = nil,
            id: Swift.String? = nil,
            lastModifiedTime: Foundation.Date? = nil,
            name: Swift.String? = nil,
            tags: [Swift.String: Swift.String]? = nil
        )
        {
            self.arn = arn
            self.createdTime = createdTime
            self.id = id
            self.lastModifiedTime = lastModifiedTime
            self.name = name
            self.tags = tags
        }
    }

}

public struct CreateGroupOutput {
    /// A structure that contains information about the group that was just created.
    public var group: SyntheticsClientTypes.Group?

    public init(
        group: SyntheticsClientTypes.Group? = nil
    )
    {
        self.group = group
    }
}

public struct DeleteCanaryInput {
    /// Specifies whether to also delete the Lambda functions and layers used by this canary. The default is false. Type: Boolean
    public var deleteLambda: Swift.Bool?
    /// The name of the canary that you want to delete. To find the names of your canaries, use [DescribeCanaries](https://docs.aws.amazon.com/AmazonSynthetics/latest/APIReference/API_DescribeCanaries.html).
    /// This member is required.
    public var name: Swift.String?

    public init(
        deleteLambda: Swift.Bool? = false,
        name: Swift.String? = nil
    )
    {
        self.deleteLambda = deleteLambda
        self.name = name
    }
}

public struct DeleteCanaryOutput {

    public init() { }
}

public struct DeleteGroupInput {
    /// Specifies which group to delete. You can specify the group name, the ARN, or the group ID as the GroupIdentifier.
    /// This member is required.
    public var groupIdentifier: Swift.String?

    public init(
        groupIdentifier: Swift.String? = nil
    )
    {
        self.groupIdentifier = groupIdentifier
    }
}

public struct DeleteGroupOutput {

    public init() { }
}

public struct DescribeCanariesInput {
    /// Specify this parameter to limit how many canaries are returned each time you use the DescribeCanaries operation. If you omit this parameter, the default of 20 is used.
    public var maxResults: Swift.Int?
    /// Use this parameter to return only canaries that match the names that you specify here. You can specify as many as five canary names. If you specify this parameter, the operation is successful only if you have authorization to view all the canaries that you specify in your request. If you do not have permission to view any of the canaries, the request fails with a 403 response. You are required to use this parameter if you are logged on to a user or role that has an IAM policy that restricts which canaries that you are allowed to view. For more information, see [ Limiting a user to viewing specific canaries](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch_Synthetics_Canaries_Restricted.html).
    public var names: [Swift.String]?
    /// A token that indicates that there is more data available. You can use this token in a subsequent operation to retrieve the next set of results.
    public var nextToken: Swift.String?

    public init(
        maxResults: Swift.Int? = nil,
        names: [Swift.String]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.maxResults = maxResults
        self.names = names
        self.nextToken = nextToken
    }
}

public struct DescribeCanariesOutput {
    /// Returns an array. Each item in the array contains the full information about one canary.
    public var canaries: [SyntheticsClientTypes.Canary]?
    /// A token that indicates that there is more data available. You can use this token in a subsequent DescribeCanaries operation to retrieve the next set of results.
    public var nextToken: Swift.String?

    public init(
        canaries: [SyntheticsClientTypes.Canary]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.canaries = canaries
        self.nextToken = nextToken
    }
}

public struct DescribeCanariesLastRunInput {
    /// Specify this parameter to limit how many runs are returned each time you use the DescribeLastRun operation. If you omit this parameter, the default of 100 is used.
    public var maxResults: Swift.Int?
    /// Use this parameter to return only canaries that match the names that you specify here. You can specify as many as five canary names. If you specify this parameter, the operation is successful only if you have authorization to view all the canaries that you specify in your request. If you do not have permission to view any of the canaries, the request fails with a 403 response. You are required to use the Names parameter if you are logged on to a user or role that has an IAM policy that restricts which canaries that you are allowed to view. For more information, see [ Limiting a user to viewing specific canaries](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch_Synthetics_Canaries_Restricted.html).
    public var names: [Swift.String]?
    /// A token that indicates that there is more data available. You can use this token in a subsequent DescribeCanariesLastRun operation to retrieve the next set of results.
    public var nextToken: Swift.String?

    public init(
        maxResults: Swift.Int? = nil,
        names: [Swift.String]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.maxResults = maxResults
        self.names = names
        self.nextToken = nextToken
    }
}

public struct DescribeCanariesLastRunOutput {
    /// An array that contains the information from the most recent run of each canary.
    public var canariesLastRun: [SyntheticsClientTypes.CanaryLastRun]?
    /// A token that indicates that there is more data available. You can use this token in a subsequent DescribeCanariesLastRun operation to retrieve the next set of results.
    public var nextToken: Swift.String?

    public init(
        canariesLastRun: [SyntheticsClientTypes.CanaryLastRun]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.canariesLastRun = canariesLastRun
        self.nextToken = nextToken
    }
}

public struct DescribeRuntimeVersionsInput {
    /// Specify this parameter to limit how many runs are returned each time you use the DescribeRuntimeVersions operation. If you omit this parameter, the default of 100 is used.
    public var maxResults: Swift.Int?
    /// A token that indicates that there is more data available. You can use this token in a subsequent DescribeRuntimeVersions operation to retrieve the next set of results.
    public var nextToken: Swift.String?

    public init(
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

extension SyntheticsClientTypes {
    /// This structure contains information about one canary runtime version. For more information about runtime versions, see [ Canary Runtime Versions](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch_Synthetics_Canaries_Library.html).
    public struct RuntimeVersion {
        /// If this runtime version is deprecated, this value is the date of deprecation.
        public var deprecationDate: Foundation.Date?
        /// A description of the runtime version, created by Amazon.
        public var description: Swift.String?
        /// The date that the runtime version was released.
        public var releaseDate: Foundation.Date?
        /// The name of the runtime version. For a list of valid runtime versions, see [ Canary Runtime Versions](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch_Synthetics_Canaries_Library.html).
        public var versionName: Swift.String?

        public init(
            deprecationDate: Foundation.Date? = nil,
            description: Swift.String? = nil,
            releaseDate: Foundation.Date? = nil,
            versionName: Swift.String? = nil
        )
        {
            self.deprecationDate = deprecationDate
            self.description = description
            self.releaseDate = releaseDate
            self.versionName = versionName
        }
    }

}

public struct DescribeRuntimeVersionsOutput {
    /// A token that indicates that there is more data available. You can use this token in a subsequent DescribeRuntimeVersions operation to retrieve the next set of results.
    public var nextToken: Swift.String?
    /// An array of objects that display the details about each Synthetics canary runtime version.
    public var runtimeVersions: [SyntheticsClientTypes.RuntimeVersion]?

    public init(
        nextToken: Swift.String? = nil,
        runtimeVersions: [SyntheticsClientTypes.RuntimeVersion]? = nil
    )
    {
        self.nextToken = nextToken
        self.runtimeVersions = runtimeVersions
    }
}

public struct DisassociateResourceInput {
    /// Specifies the group. You can specify the group name, the ARN, or the group ID as the GroupIdentifier.
    /// This member is required.
    public var groupIdentifier: Swift.String?
    /// The ARN of the canary that you want to remove from the specified group.
    /// This member is required.
    public var resourceArn: Swift.String?

    public init(
        groupIdentifier: Swift.String? = nil,
        resourceArn: Swift.String? = nil
    )
    {
        self.groupIdentifier = groupIdentifier
        self.resourceArn = resourceArn
    }
}

public struct DisassociateResourceOutput {

    public init() { }
}

public struct GetCanaryInput {
    /// The name of the canary that you want details for.
    /// This member is required.
    public var name: Swift.String?

    public init(
        name: Swift.String? = nil
    )
    {
        self.name = name
    }
}

public struct GetCanaryOutput {
    /// A structure that contains the full information about the canary.
    public var canary: SyntheticsClientTypes.Canary?

    public init(
        canary: SyntheticsClientTypes.Canary? = nil
    )
    {
        self.canary = canary
    }
}

public struct GetCanaryRunsInput {
    /// Specify this parameter to limit how many runs are returned each time you use the GetCanaryRuns operation. If you omit this parameter, the default of 100 is used.
    public var maxResults: Swift.Int?
    /// The name of the canary that you want to see runs for.
    /// This member is required.
    public var name: Swift.String?
    /// A token that indicates that there is more data available. You can use this token in a subsequent GetCanaryRuns operation to retrieve the next set of results.
    public var nextToken: Swift.String?

    public init(
        maxResults: Swift.Int? = nil,
        name: Swift.String? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.maxResults = maxResults
        self.name = name
        self.nextToken = nextToken
    }
}

public struct GetCanaryRunsOutput {
    /// An array of structures. Each structure contains the details of one of the retrieved canary runs.
    public var canaryRuns: [SyntheticsClientTypes.CanaryRun]?
    /// A token that indicates that there is more data available. You can use this token in a subsequent GetCanaryRuns operation to retrieve the next set of results.
    public var nextToken: Swift.String?

    public init(
        canaryRuns: [SyntheticsClientTypes.CanaryRun]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.canaryRuns = canaryRuns
        self.nextToken = nextToken
    }
}

public struct GetGroupInput {
    /// Specifies the group to return information for. You can specify the group name, the ARN, or the group ID as the GroupIdentifier.
    /// This member is required.
    public var groupIdentifier: Swift.String?

    public init(
        groupIdentifier: Swift.String? = nil
    )
    {
        self.groupIdentifier = groupIdentifier
    }
}

public struct GetGroupOutput {
    /// A structure that contains information about the group.
    public var group: SyntheticsClientTypes.Group?

    public init(
        group: SyntheticsClientTypes.Group? = nil
    )
    {
        self.group = group
    }
}

extension SyntheticsClientTypes {
    /// A structure containing some information about a group.
    public struct GroupSummary {
        /// The ARN of the group.
        public var arn: Swift.String?
        /// The unique ID of the group.
        public var id: Swift.String?
        /// The name of the group.
        public var name: Swift.String?

        public init(
            arn: Swift.String? = nil,
            id: Swift.String? = nil,
            name: Swift.String? = nil
        )
        {
            self.arn = arn
            self.id = id
            self.name = name
        }
    }

}

/// An internal failure occurred. Try the operation again.
public struct InternalFailureException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InternalFailureException" }
    public static var fault: ClientRuntime.ErrorFault { .server }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

public struct ListAssociatedGroupsInput {
    /// Specify this parameter to limit how many groups are returned each time you use the ListAssociatedGroups operation. If you omit this parameter, the default of 20 is used.
    public var maxResults: Swift.Int?
    /// A token that indicates that there is more data available. You can use this token in a subsequent operation to retrieve the next set of results.
    public var nextToken: Swift.String?
    /// The ARN of the canary that you want to view groups for.
    /// This member is required.
    public var resourceArn: Swift.String?

    public init(
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        resourceArn: Swift.String? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.resourceArn = resourceArn
    }
}

public struct ListAssociatedGroupsOutput {
    /// An array of structures that contain information about the groups that this canary is associated with.
    public var groups: [SyntheticsClientTypes.GroupSummary]?
    /// A token that indicates that there is more data available. You can use this token in a subsequent ListAssociatedGroups operation to retrieve the next set of results.
    public var nextToken: Swift.String?

    public init(
        groups: [SyntheticsClientTypes.GroupSummary]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.groups = groups
        self.nextToken = nextToken
    }
}

public struct ListGroupResourcesInput {
    /// Specifies the group to return information for. You can specify the group name, the ARN, or the group ID as the GroupIdentifier.
    /// This member is required.
    public var groupIdentifier: Swift.String?
    /// Specify this parameter to limit how many canary ARNs are returned each time you use the ListGroupResources operation. If you omit this parameter, the default of 20 is used.
    public var maxResults: Swift.Int?
    /// A token that indicates that there is more data available. You can use this token in a subsequent operation to retrieve the next set of results.
    public var nextToken: Swift.String?

    public init(
        groupIdentifier: Swift.String? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.groupIdentifier = groupIdentifier
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

public struct ListGroupResourcesOutput {
    /// A token that indicates that there is more data available. You can use this token in a subsequent ListGroupResources operation to retrieve the next set of results.
    public var nextToken: Swift.String?
    /// An array of ARNs. These ARNs are for the canaries that are associated with the group.
    public var resources: [Swift.String]?

    public init(
        nextToken: Swift.String? = nil,
        resources: [Swift.String]? = nil
    )
    {
        self.nextToken = nextToken
        self.resources = resources
    }
}

public struct ListGroupsInput {
    /// Specify this parameter to limit how many groups are returned each time you use the ListGroups operation. If you omit this parameter, the default of 20 is used.
    public var maxResults: Swift.Int?
    /// A token that indicates that there is more data available. You can use this token in a subsequent operation to retrieve the next set of results.
    public var nextToken: Swift.String?

    public init(
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

public struct ListGroupsOutput {
    /// An array of structures that each contain information about one group.
    public var groups: [SyntheticsClientTypes.GroupSummary]?
    /// A token that indicates that there is more data available. You can use this token in a subsequent ListGroups operation to retrieve the next set of results.
    public var nextToken: Swift.String?

    public init(
        groups: [SyntheticsClientTypes.GroupSummary]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.groups = groups
        self.nextToken = nextToken
    }
}

/// The specified resource was not found.
public struct NotFoundException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "NotFoundException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// There were too many simultaneous requests. Try the operation again.
public struct TooManyRequestsException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "TooManyRequestsException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

public struct ListTagsForResourceInput {
    /// The ARN of the canary or group that you want to view tags for. The ARN format of a canary is arn:aws:synthetics:Region:account-id:canary:canary-name . The ARN format of a group is arn:aws:synthetics:Region:account-id:group:group-name
    /// This member is required.
    public var resourceArn: Swift.String?

    public init(
        resourceArn: Swift.String? = nil
    )
    {
        self.resourceArn = resourceArn
    }
}

public struct ListTagsForResourceOutput {
    /// The list of tag keys and values associated with the resource that you specified.
    public var tags: [Swift.String: Swift.String]?

    public init(
        tags: [Swift.String: Swift.String]? = nil
    )
    {
        self.tags = tags
    }
}

public struct StartCanaryInput {
    /// The name of the canary that you want to run. To find canary names, use [DescribeCanaries](https://docs.aws.amazon.com/AmazonSynthetics/latest/APIReference/API_DescribeCanaries.html).
    /// This member is required.
    public var name: Swift.String?

    public init(
        name: Swift.String? = nil
    )
    {
        self.name = name
    }
}

public struct StartCanaryOutput {

    public init() { }
}

public struct StopCanaryInput {
    /// The name of the canary that you want to stop. To find the names of your canaries, use [ListCanaries](https://docs.aws.amazon.com/AmazonSynthetics/latest/APIReference/API_DescribeCanaries.html).
    /// This member is required.
    public var name: Swift.String?

    public init(
        name: Swift.String? = nil
    )
    {
        self.name = name
    }
}

public struct StopCanaryOutput {

    public init() { }
}

public struct TagResourceInput {
    /// The ARN of the canary or group that you're adding tags to. The ARN format of a canary is arn:aws:synthetics:Region:account-id:canary:canary-name . The ARN format of a group is arn:aws:synthetics:Region:account-id:group:group-name
    /// This member is required.
    public var resourceArn: Swift.String?
    /// The list of key-value pairs to associate with the resource.
    /// This member is required.
    public var tags: [Swift.String: Swift.String]?

    public init(
        resourceArn: Swift.String? = nil,
        tags: [Swift.String: Swift.String]? = nil
    )
    {
        self.resourceArn = resourceArn
        self.tags = tags
    }
}

public struct TagResourceOutput {

    public init() { }
}

public struct UntagResourceInput {
    /// The ARN of the canary or group that you're removing tags from. The ARN format of a canary is arn:aws:synthetics:Region:account-id:canary:canary-name . The ARN format of a group is arn:aws:synthetics:Region:account-id:group:group-name
    /// This member is required.
    public var resourceArn: Swift.String?
    /// The list of tag keys to remove from the resource.
    /// This member is required.
    public var tagKeys: [Swift.String]?

    public init(
        resourceArn: Swift.String? = nil,
        tagKeys: [Swift.String]? = nil
    )
    {
        self.resourceArn = resourceArn
        self.tagKeys = tagKeys
    }
}

public struct UntagResourceOutput {

    public init() { }
}

extension SyntheticsClientTypes {
    /// An object that specifies what screenshots to use as a baseline for visual monitoring by this canary. It can optionally also specify parts of the screenshots to ignore during the visual monitoring comparison. Visual monitoring is supported only on canaries running the syn-puppeteer-node-3.2 runtime or later. For more information, see [ Visual monitoring](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch_Synthetics_Library_SyntheticsLogger_VisualTesting.html) and [ Visual monitoring blueprint](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch_Synthetics_Canaries_Blueprints_VisualTesting.html)
    public struct VisualReferenceInput {
        /// Specifies which canary run to use the screenshots from as the baseline for future visual monitoring with this canary. Valid values are nextrun to use the screenshots from the next run after this update is made, lastrun to use the screenshots from the most recent run before this update was made, or the value of Id in the [ CanaryRun](https://docs.aws.amazon.com/AmazonSynthetics/latest/APIReference/API_CanaryRun.html) from any past run of this canary.
        /// This member is required.
        public var baseCanaryRunId: Swift.String?
        /// An array of screenshots that will be used as the baseline for visual monitoring in future runs of this canary. If there is a screenshot that you don't want to be used for visual monitoring, remove it from this array.
        public var baseScreenshots: [SyntheticsClientTypes.BaseScreenshot]?

        public init(
            baseCanaryRunId: Swift.String? = nil,
            baseScreenshots: [SyntheticsClientTypes.BaseScreenshot]? = nil
        )
        {
            self.baseCanaryRunId = baseCanaryRunId
            self.baseScreenshots = baseScreenshots
        }
    }

}

public struct UpdateCanaryInput {
    /// A structure that contains the configuration for canary artifacts, including the encryption-at-rest settings for artifacts that the canary uploads to Amazon S3.
    public var artifactConfig: SyntheticsClientTypes.ArtifactConfigInput?
    /// The location in Amazon S3 where Synthetics stores artifacts from the test runs of this canary. Artifacts include the log file, screenshots, and HAR files. The name of the S3 bucket can't include a period (.).
    public var artifactS3Location: Swift.String?
    /// A structure that includes the entry point from which the canary should start running your script. If the script is stored in an S3 bucket, the bucket name, key, and version are also included.
    public var code: SyntheticsClientTypes.CanaryCodeInput?
    /// The ARN of the IAM role to be used to run the canary. This role must already exist, and must include lambda.amazonaws.com as a principal in the trust policy. The role must also have the following permissions:
    ///
    /// * s3:PutObject
    ///
    /// * s3:GetBucketLocation
    ///
    /// * s3:ListAllMyBuckets
    ///
    /// * cloudwatch:PutMetricData
    ///
    /// * logs:CreateLogGroup
    ///
    /// * logs:CreateLogStream
    ///
    /// * logs:CreateLogStream
    public var executionRoleArn: Swift.String?
    /// The number of days to retain data about failed runs of this canary.
    public var failureRetentionPeriodInDays: Swift.Int?
    /// The name of the canary that you want to update. To find the names of your canaries, use [DescribeCanaries](https://docs.aws.amazon.com/AmazonSynthetics/latest/APIReference/API_DescribeCanaries.html). You cannot change the name of a canary that has already been created.
    /// This member is required.
    public var name: Swift.String?
    /// A structure that contains the timeout value that is used for each individual run of the canary. The environment variables keys and values are not encrypted. Do not store sensitive information in this field.
    public var runConfig: SyntheticsClientTypes.CanaryRunConfigInput?
    /// Specifies the runtime version to use for the canary. For a list of valid runtime versions and for more information about runtime versions, see [ Canary Runtime Versions](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch_Synthetics_Canaries_Library.html).
    public var runtimeVersion: Swift.String?
    /// A structure that contains information about how often the canary is to run, and when these runs are to stop.
    public var schedule: SyntheticsClientTypes.CanaryScheduleInput?
    /// The number of days to retain data about successful runs of this canary.
    public var successRetentionPeriodInDays: Swift.Int?
    /// Defines the screenshots to use as the baseline for comparisons during visual monitoring comparisons during future runs of this canary. If you omit this parameter, no changes are made to any baseline screenshots that the canary might be using already. Visual monitoring is supported only on canaries running the syn-puppeteer-node-3.2 runtime or later. For more information, see [ Visual monitoring](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch_Synthetics_Library_SyntheticsLogger_VisualTesting.html) and [ Visual monitoring blueprint](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch_Synthetics_Canaries_Blueprints_VisualTesting.html)
    public var visualReference: SyntheticsClientTypes.VisualReferenceInput?
    /// If this canary is to test an endpoint in a VPC, this structure contains information about the subnet and security groups of the VPC endpoint. For more information, see [ Running a Canary in a VPC](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch_Synthetics_Canaries_VPC.html).
    public var vpcConfig: SyntheticsClientTypes.VpcConfigInput?

    public init(
        artifactConfig: SyntheticsClientTypes.ArtifactConfigInput? = nil,
        artifactS3Location: Swift.String? = nil,
        code: SyntheticsClientTypes.CanaryCodeInput? = nil,
        executionRoleArn: Swift.String? = nil,
        failureRetentionPeriodInDays: Swift.Int? = nil,
        name: Swift.String? = nil,
        runConfig: SyntheticsClientTypes.CanaryRunConfigInput? = nil,
        runtimeVersion: Swift.String? = nil,
        schedule: SyntheticsClientTypes.CanaryScheduleInput? = nil,
        successRetentionPeriodInDays: Swift.Int? = nil,
        visualReference: SyntheticsClientTypes.VisualReferenceInput? = nil,
        vpcConfig: SyntheticsClientTypes.VpcConfigInput? = nil
    )
    {
        self.artifactConfig = artifactConfig
        self.artifactS3Location = artifactS3Location
        self.code = code
        self.executionRoleArn = executionRoleArn
        self.failureRetentionPeriodInDays = failureRetentionPeriodInDays
        self.name = name
        self.runConfig = runConfig
        self.runtimeVersion = runtimeVersion
        self.schedule = schedule
        self.successRetentionPeriodInDays = successRetentionPeriodInDays
        self.visualReference = visualReference
        self.vpcConfig = vpcConfig
    }
}

public struct UpdateCanaryOutput {

    public init() { }
}

extension AssociateResourceInput {

    static func urlPathProvider(_ value: AssociateResourceInput) -> Swift.String? {
        guard let groupIdentifier = value.groupIdentifier else {
            return nil
        }
        return "/group/\(groupIdentifier.urlPercentEncoding())/associate"
    }
}

extension CreateCanaryInput {

    static func urlPathProvider(_ value: CreateCanaryInput) -> Swift.String? {
        return "/canary"
    }
}

extension CreateGroupInput {

    static func urlPathProvider(_ value: CreateGroupInput) -> Swift.String? {
        return "/group"
    }
}

extension DeleteCanaryInput {

    static func urlPathProvider(_ value: DeleteCanaryInput) -> Swift.String? {
        guard let name = value.name else {
            return nil
        }
        return "/canary/\(name.urlPercentEncoding())"
    }
}

extension DeleteCanaryInput {

    static func queryItemProvider(_ value: DeleteCanaryInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        if let deleteLambda = value.deleteLambda {
            let deleteLambdaQueryItem = Smithy.URIQueryItem(name: "deleteLambda".urlPercentEncoding(), value: Swift.String(deleteLambda).urlPercentEncoding())
            items.append(deleteLambdaQueryItem)
        }
        return items
    }
}

extension DeleteGroupInput {

    static func urlPathProvider(_ value: DeleteGroupInput) -> Swift.String? {
        guard let groupIdentifier = value.groupIdentifier else {
            return nil
        }
        return "/group/\(groupIdentifier.urlPercentEncoding())"
    }
}

extension DescribeCanariesInput {

    static func urlPathProvider(_ value: DescribeCanariesInput) -> Swift.String? {
        return "/canaries"
    }
}

extension DescribeCanariesLastRunInput {

    static func urlPathProvider(_ value: DescribeCanariesLastRunInput) -> Swift.String? {
        return "/canaries/last-run"
    }
}

extension DescribeRuntimeVersionsInput {

    static func urlPathProvider(_ value: DescribeRuntimeVersionsInput) -> Swift.String? {
        return "/runtime-versions"
    }
}

extension DisassociateResourceInput {

    static func urlPathProvider(_ value: DisassociateResourceInput) -> Swift.String? {
        guard let groupIdentifier = value.groupIdentifier else {
            return nil
        }
        return "/group/\(groupIdentifier.urlPercentEncoding())/disassociate"
    }
}

extension GetCanaryInput {

    static func urlPathProvider(_ value: GetCanaryInput) -> Swift.String? {
        guard let name = value.name else {
            return nil
        }
        return "/canary/\(name.urlPercentEncoding())"
    }
}

extension GetCanaryRunsInput {

    static func urlPathProvider(_ value: GetCanaryRunsInput) -> Swift.String? {
        guard let name = value.name else {
            return nil
        }
        return "/canary/\(name.urlPercentEncoding())/runs"
    }
}

extension GetGroupInput {

    static func urlPathProvider(_ value: GetGroupInput) -> Swift.String? {
        guard let groupIdentifier = value.groupIdentifier else {
            return nil
        }
        return "/group/\(groupIdentifier.urlPercentEncoding())"
    }
}

extension ListAssociatedGroupsInput {

    static func urlPathProvider(_ value: ListAssociatedGroupsInput) -> Swift.String? {
        guard let resourceArn = value.resourceArn else {
            return nil
        }
        return "/resource/\(resourceArn.urlPercentEncoding())/groups"
    }
}

extension ListGroupResourcesInput {

    static func urlPathProvider(_ value: ListGroupResourcesInput) -> Swift.String? {
        guard let groupIdentifier = value.groupIdentifier else {
            return nil
        }
        return "/group/\(groupIdentifier.urlPercentEncoding())/resources"
    }
}

extension ListGroupsInput {

    static func urlPathProvider(_ value: ListGroupsInput) -> Swift.String? {
        return "/groups"
    }
}

extension ListTagsForResourceInput {

    static func urlPathProvider(_ value: ListTagsForResourceInput) -> Swift.String? {
        guard let resourceArn = value.resourceArn else {
            return nil
        }
        return "/tags/\(resourceArn.urlPercentEncoding())"
    }
}

extension StartCanaryInput {

    static func urlPathProvider(_ value: StartCanaryInput) -> Swift.String? {
        guard let name = value.name else {
            return nil
        }
        return "/canary/\(name.urlPercentEncoding())/start"
    }
}

extension StopCanaryInput {

    static func urlPathProvider(_ value: StopCanaryInput) -> Swift.String? {
        guard let name = value.name else {
            return nil
        }
        return "/canary/\(name.urlPercentEncoding())/stop"
    }
}

extension TagResourceInput {

    static func urlPathProvider(_ value: TagResourceInput) -> Swift.String? {
        guard let resourceArn = value.resourceArn else {
            return nil
        }
        return "/tags/\(resourceArn.urlPercentEncoding())"
    }
}

extension UntagResourceInput {

    static func urlPathProvider(_ value: UntagResourceInput) -> Swift.String? {
        guard let resourceArn = value.resourceArn else {
            return nil
        }
        return "/tags/\(resourceArn.urlPercentEncoding())"
    }
}

extension UntagResourceInput {

    static func queryItemProvider(_ value: UntagResourceInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        guard let tagKeys = value.tagKeys else {
            let message = "Creating a URL Query Item failed. tagKeys is required and must not be nil."
            throw Smithy.ClientError.unknownError(message)
        }
        tagKeys.forEach { queryItemValue in
            let queryItem = Smithy.URIQueryItem(name: "tagKeys".urlPercentEncoding(), value: Swift.String(queryItemValue).urlPercentEncoding())
            items.append(queryItem)
        }
        return items
    }
}

extension UpdateCanaryInput {

    static func urlPathProvider(_ value: UpdateCanaryInput) -> Swift.String? {
        guard let name = value.name else {
            return nil
        }
        return "/canary/\(name.urlPercentEncoding())"
    }
}

extension AssociateResourceInput {

    static func write(value: AssociateResourceInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ResourceArn"].write(value.resourceArn)
    }
}

extension CreateCanaryInput {

    static func write(value: CreateCanaryInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ArtifactConfig"].write(value.artifactConfig, with: SyntheticsClientTypes.ArtifactConfigInput.write(value:to:))
        try writer["ArtifactS3Location"].write(value.artifactS3Location)
        try writer["Code"].write(value.code, with: SyntheticsClientTypes.CanaryCodeInput.write(value:to:))
        try writer["ExecutionRoleArn"].write(value.executionRoleArn)
        try writer["FailureRetentionPeriodInDays"].write(value.failureRetentionPeriodInDays)
        try writer["Name"].write(value.name)
        try writer["ResourcesToReplicateTags"].writeList(value.resourcesToReplicateTags, memberWritingClosure: SmithyReadWrite.WritingClosureBox<SyntheticsClientTypes.ResourceToTag>().write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["RunConfig"].write(value.runConfig, with: SyntheticsClientTypes.CanaryRunConfigInput.write(value:to:))
        try writer["RuntimeVersion"].write(value.runtimeVersion)
        try writer["Schedule"].write(value.schedule, with: SyntheticsClientTypes.CanaryScheduleInput.write(value:to:))
        try writer["SuccessRetentionPeriodInDays"].write(value.successRetentionPeriodInDays)
        try writer["Tags"].writeMap(value.tags, valueWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        try writer["VpcConfig"].write(value.vpcConfig, with: SyntheticsClientTypes.VpcConfigInput.write(value:to:))
    }
}

extension CreateGroupInput {

    static func write(value: CreateGroupInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Name"].write(value.name)
        try writer["Tags"].writeMap(value.tags, valueWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
    }
}

extension DescribeCanariesInput {

    static func write(value: DescribeCanariesInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["MaxResults"].write(value.maxResults)
        try writer["Names"].writeList(value.names, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["NextToken"].write(value.nextToken)
    }
}

extension DescribeCanariesLastRunInput {

    static func write(value: DescribeCanariesLastRunInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["MaxResults"].write(value.maxResults)
        try writer["Names"].writeList(value.names, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["NextToken"].write(value.nextToken)
    }
}

extension DescribeRuntimeVersionsInput {

    static func write(value: DescribeRuntimeVersionsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["MaxResults"].write(value.maxResults)
        try writer["NextToken"].write(value.nextToken)
    }
}

extension DisassociateResourceInput {

    static func write(value: DisassociateResourceInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ResourceArn"].write(value.resourceArn)
    }
}

extension GetCanaryRunsInput {

    static func write(value: GetCanaryRunsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["MaxResults"].write(value.maxResults)
        try writer["NextToken"].write(value.nextToken)
    }
}

extension ListAssociatedGroupsInput {

    static func write(value: ListAssociatedGroupsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["MaxResults"].write(value.maxResults)
        try writer["NextToken"].write(value.nextToken)
    }
}

extension ListGroupResourcesInput {

    static func write(value: ListGroupResourcesInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["MaxResults"].write(value.maxResults)
        try writer["NextToken"].write(value.nextToken)
    }
}

extension ListGroupsInput {

    static func write(value: ListGroupsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["MaxResults"].write(value.maxResults)
        try writer["NextToken"].write(value.nextToken)
    }
}

extension TagResourceInput {

    static func write(value: TagResourceInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Tags"].writeMap(value.tags, valueWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
    }
}

extension UpdateCanaryInput {

    static func write(value: UpdateCanaryInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ArtifactConfig"].write(value.artifactConfig, with: SyntheticsClientTypes.ArtifactConfigInput.write(value:to:))
        try writer["ArtifactS3Location"].write(value.artifactS3Location)
        try writer["Code"].write(value.code, with: SyntheticsClientTypes.CanaryCodeInput.write(value:to:))
        try writer["ExecutionRoleArn"].write(value.executionRoleArn)
        try writer["FailureRetentionPeriodInDays"].write(value.failureRetentionPeriodInDays)
        try writer["RunConfig"].write(value.runConfig, with: SyntheticsClientTypes.CanaryRunConfigInput.write(value:to:))
        try writer["RuntimeVersion"].write(value.runtimeVersion)
        try writer["Schedule"].write(value.schedule, with: SyntheticsClientTypes.CanaryScheduleInput.write(value:to:))
        try writer["SuccessRetentionPeriodInDays"].write(value.successRetentionPeriodInDays)
        try writer["VisualReference"].write(value.visualReference, with: SyntheticsClientTypes.VisualReferenceInput.write(value:to:))
        try writer["VpcConfig"].write(value.vpcConfig, with: SyntheticsClientTypes.VpcConfigInput.write(value:to:))
    }
}

extension AssociateResourceOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> AssociateResourceOutput {
        return AssociateResourceOutput()
    }
}

extension CreateCanaryOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateCanaryOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateCanaryOutput()
        value.canary = try reader["Canary"].readIfPresent(with: SyntheticsClientTypes.Canary.read(from:))
        return value
    }
}

extension CreateGroupOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateGroupOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateGroupOutput()
        value.group = try reader["Group"].readIfPresent(with: SyntheticsClientTypes.Group.read(from:))
        return value
    }
}

extension DeleteCanaryOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteCanaryOutput {
        return DeleteCanaryOutput()
    }
}

extension DeleteGroupOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteGroupOutput {
        return DeleteGroupOutput()
    }
}

extension DescribeCanariesOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeCanariesOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DescribeCanariesOutput()
        value.canaries = try reader["Canaries"].readListIfPresent(memberReadingClosure: SyntheticsClientTypes.Canary.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.nextToken = try reader["NextToken"].readIfPresent()
        return value
    }
}

extension DescribeCanariesLastRunOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeCanariesLastRunOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DescribeCanariesLastRunOutput()
        value.canariesLastRun = try reader["CanariesLastRun"].readListIfPresent(memberReadingClosure: SyntheticsClientTypes.CanaryLastRun.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.nextToken = try reader["NextToken"].readIfPresent()
        return value
    }
}

extension DescribeRuntimeVersionsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeRuntimeVersionsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DescribeRuntimeVersionsOutput()
        value.nextToken = try reader["NextToken"].readIfPresent()
        value.runtimeVersions = try reader["RuntimeVersions"].readListIfPresent(memberReadingClosure: SyntheticsClientTypes.RuntimeVersion.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension DisassociateResourceOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DisassociateResourceOutput {
        return DisassociateResourceOutput()
    }
}

extension GetCanaryOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetCanaryOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetCanaryOutput()
        value.canary = try reader["Canary"].readIfPresent(with: SyntheticsClientTypes.Canary.read(from:))
        return value
    }
}

extension GetCanaryRunsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetCanaryRunsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetCanaryRunsOutput()
        value.canaryRuns = try reader["CanaryRuns"].readListIfPresent(memberReadingClosure: SyntheticsClientTypes.CanaryRun.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.nextToken = try reader["NextToken"].readIfPresent()
        return value
    }
}

extension GetGroupOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetGroupOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetGroupOutput()
        value.group = try reader["Group"].readIfPresent(with: SyntheticsClientTypes.Group.read(from:))
        return value
    }
}

extension ListAssociatedGroupsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListAssociatedGroupsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListAssociatedGroupsOutput()
        value.groups = try reader["Groups"].readListIfPresent(memberReadingClosure: SyntheticsClientTypes.GroupSummary.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.nextToken = try reader["NextToken"].readIfPresent()
        return value
    }
}

extension ListGroupResourcesOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListGroupResourcesOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListGroupResourcesOutput()
        value.nextToken = try reader["NextToken"].readIfPresent()
        value.resources = try reader["Resources"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension ListGroupsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListGroupsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListGroupsOutput()
        value.groups = try reader["Groups"].readListIfPresent(memberReadingClosure: SyntheticsClientTypes.GroupSummary.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.nextToken = try reader["NextToken"].readIfPresent()
        return value
    }
}

extension ListTagsForResourceOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListTagsForResourceOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListTagsForResourceOutput()
        value.tags = try reader["Tags"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        return value
    }
}

extension StartCanaryOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> StartCanaryOutput {
        return StartCanaryOutput()
    }
}

extension StopCanaryOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> StopCanaryOutput {
        return StopCanaryOutput()
    }
}

extension TagResourceOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> TagResourceOutput {
        return TagResourceOutput()
    }
}

extension UntagResourceOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UntagResourceOutput {
        return UntagResourceOutput()
    }
}

extension UpdateCanaryOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdateCanaryOutput {
        return UpdateCanaryOutput()
    }
}

enum AssociateResourceOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceQuotaExceededException": return try ServiceQuotaExceededException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateCanaryOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "RequestEntityTooLargeException": return try RequestEntityTooLargeException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateGroupOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ServiceQuotaExceededException": return try ServiceQuotaExceededException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteCanaryOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteGroupOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeCanariesOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeCanariesLastRunOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeRuntimeVersionsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DisassociateResourceOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetCanaryOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetCanaryRunsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetGroupOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListAssociatedGroupsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListGroupResourcesOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListGroupsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListTagsForResourceOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalFailureException": return try InternalFailureException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum StartCanaryOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum StopCanaryOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum TagResourceOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalFailureException": return try InternalFailureException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UntagResourceOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalFailureException": return try InternalFailureException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdateCanaryOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "RequestEntityTooLargeException": return try RequestEntityTooLargeException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

extension ValidationException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> ValidationException {
        let reader = baseError.errorBodyReader
        var value = ValidationException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ServiceQuotaExceededException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> ServiceQuotaExceededException {
        let reader = baseError.errorBodyReader
        var value = ServiceQuotaExceededException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ConflictException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> ConflictException {
        let reader = baseError.errorBodyReader
        var value = ConflictException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension InternalServerException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> InternalServerException {
        let reader = baseError.errorBodyReader
        var value = InternalServerException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ResourceNotFoundException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> ResourceNotFoundException {
        let reader = baseError.errorBodyReader
        var value = ResourceNotFoundException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension RequestEntityTooLargeException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> RequestEntityTooLargeException {
        let reader = baseError.errorBodyReader
        var value = RequestEntityTooLargeException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension InternalFailureException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> InternalFailureException {
        let reader = baseError.errorBodyReader
        var value = InternalFailureException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension BadRequestException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> BadRequestException {
        let reader = baseError.errorBodyReader
        var value = BadRequestException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension TooManyRequestsException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> TooManyRequestsException {
        let reader = baseError.errorBodyReader
        var value = TooManyRequestsException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension NotFoundException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> NotFoundException {
        let reader = baseError.errorBodyReader
        var value = NotFoundException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension SyntheticsClientTypes.Canary {

    static func read(from reader: SmithyJSON.Reader) throws -> SyntheticsClientTypes.Canary {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SyntheticsClientTypes.Canary()
        value.id = try reader["Id"].readIfPresent()
        value.name = try reader["Name"].readIfPresent()
        value.code = try reader["Code"].readIfPresent(with: SyntheticsClientTypes.CanaryCodeOutput.read(from:))
        value.executionRoleArn = try reader["ExecutionRoleArn"].readIfPresent()
        value.schedule = try reader["Schedule"].readIfPresent(with: SyntheticsClientTypes.CanaryScheduleOutput.read(from:))
        value.runConfig = try reader["RunConfig"].readIfPresent(with: SyntheticsClientTypes.CanaryRunConfigOutput.read(from:))
        value.successRetentionPeriodInDays = try reader["SuccessRetentionPeriodInDays"].readIfPresent()
        value.failureRetentionPeriodInDays = try reader["FailureRetentionPeriodInDays"].readIfPresent()
        value.status = try reader["Status"].readIfPresent(with: SyntheticsClientTypes.CanaryStatus.read(from:))
        value.timeline = try reader["Timeline"].readIfPresent(with: SyntheticsClientTypes.CanaryTimeline.read(from:))
        value.artifactS3Location = try reader["ArtifactS3Location"].readIfPresent()
        value.engineArn = try reader["EngineArn"].readIfPresent()
        value.runtimeVersion = try reader["RuntimeVersion"].readIfPresent()
        value.vpcConfig = try reader["VpcConfig"].readIfPresent(with: SyntheticsClientTypes.VpcConfigOutput.read(from:))
        value.visualReference = try reader["VisualReference"].readIfPresent(with: SyntheticsClientTypes.VisualReferenceOutput.read(from:))
        value.tags = try reader["Tags"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        value.artifactConfig = try reader["ArtifactConfig"].readIfPresent(with: SyntheticsClientTypes.ArtifactConfigOutput.read(from:))
        return value
    }
}

extension SyntheticsClientTypes.ArtifactConfigOutput {

    static func read(from reader: SmithyJSON.Reader) throws -> SyntheticsClientTypes.ArtifactConfigOutput {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SyntheticsClientTypes.ArtifactConfigOutput()
        value.s3Encryption = try reader["S3Encryption"].readIfPresent(with: SyntheticsClientTypes.S3EncryptionConfig.read(from:))
        return value
    }
}

extension SyntheticsClientTypes.S3EncryptionConfig {

    static func write(value: SyntheticsClientTypes.S3EncryptionConfig?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["EncryptionMode"].write(value.encryptionMode)
        try writer["KmsKeyArn"].write(value.kmsKeyArn)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SyntheticsClientTypes.S3EncryptionConfig {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SyntheticsClientTypes.S3EncryptionConfig()
        value.encryptionMode = try reader["EncryptionMode"].readIfPresent()
        value.kmsKeyArn = try reader["KmsKeyArn"].readIfPresent()
        return value
    }
}

extension SyntheticsClientTypes.VisualReferenceOutput {

    static func read(from reader: SmithyJSON.Reader) throws -> SyntheticsClientTypes.VisualReferenceOutput {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SyntheticsClientTypes.VisualReferenceOutput()
        value.baseScreenshots = try reader["BaseScreenshots"].readListIfPresent(memberReadingClosure: SyntheticsClientTypes.BaseScreenshot.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.baseCanaryRunId = try reader["BaseCanaryRunId"].readIfPresent()
        return value
    }
}

extension SyntheticsClientTypes.BaseScreenshot {

    static func write(value: SyntheticsClientTypes.BaseScreenshot?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["IgnoreCoordinates"].writeList(value.ignoreCoordinates, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["ScreenshotName"].write(value.screenshotName)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SyntheticsClientTypes.BaseScreenshot {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SyntheticsClientTypes.BaseScreenshot()
        value.screenshotName = try reader["ScreenshotName"].readIfPresent() ?? ""
        value.ignoreCoordinates = try reader["IgnoreCoordinates"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension SyntheticsClientTypes.VpcConfigOutput {

    static func read(from reader: SmithyJSON.Reader) throws -> SyntheticsClientTypes.VpcConfigOutput {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SyntheticsClientTypes.VpcConfigOutput()
        value.vpcId = try reader["VpcId"].readIfPresent()
        value.subnetIds = try reader["SubnetIds"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.securityGroupIds = try reader["SecurityGroupIds"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension SyntheticsClientTypes.CanaryTimeline {

    static func read(from reader: SmithyJSON.Reader) throws -> SyntheticsClientTypes.CanaryTimeline {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SyntheticsClientTypes.CanaryTimeline()
        value.created = try reader["Created"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.lastModified = try reader["LastModified"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.lastStarted = try reader["LastStarted"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.lastStopped = try reader["LastStopped"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        return value
    }
}

extension SyntheticsClientTypes.CanaryStatus {

    static func read(from reader: SmithyJSON.Reader) throws -> SyntheticsClientTypes.CanaryStatus {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SyntheticsClientTypes.CanaryStatus()
        value.state = try reader["State"].readIfPresent()
        value.stateReason = try reader["StateReason"].readIfPresent()
        value.stateReasonCode = try reader["StateReasonCode"].readIfPresent()
        return value
    }
}

extension SyntheticsClientTypes.CanaryRunConfigOutput {

    static func read(from reader: SmithyJSON.Reader) throws -> SyntheticsClientTypes.CanaryRunConfigOutput {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SyntheticsClientTypes.CanaryRunConfigOutput()
        value.timeoutInSeconds = try reader["TimeoutInSeconds"].readIfPresent()
        value.memoryInMB = try reader["MemoryInMB"].readIfPresent()
        value.activeTracing = try reader["ActiveTracing"].readIfPresent()
        return value
    }
}

extension SyntheticsClientTypes.CanaryScheduleOutput {

    static func read(from reader: SmithyJSON.Reader) throws -> SyntheticsClientTypes.CanaryScheduleOutput {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SyntheticsClientTypes.CanaryScheduleOutput()
        value.expression = try reader["Expression"].readIfPresent()
        value.durationInSeconds = try reader["DurationInSeconds"].readIfPresent()
        return value
    }
}

extension SyntheticsClientTypes.CanaryCodeOutput {

    static func read(from reader: SmithyJSON.Reader) throws -> SyntheticsClientTypes.CanaryCodeOutput {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SyntheticsClientTypes.CanaryCodeOutput()
        value.sourceLocationArn = try reader["SourceLocationArn"].readIfPresent()
        value.handler = try reader["Handler"].readIfPresent()
        return value
    }
}

extension SyntheticsClientTypes.Group {

    static func read(from reader: SmithyJSON.Reader) throws -> SyntheticsClientTypes.Group {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SyntheticsClientTypes.Group()
        value.id = try reader["Id"].readIfPresent()
        value.name = try reader["Name"].readIfPresent()
        value.arn = try reader["Arn"].readIfPresent()
        value.tags = try reader["Tags"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        value.createdTime = try reader["CreatedTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.lastModifiedTime = try reader["LastModifiedTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        return value
    }
}

extension SyntheticsClientTypes.CanaryLastRun {

    static func read(from reader: SmithyJSON.Reader) throws -> SyntheticsClientTypes.CanaryLastRun {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SyntheticsClientTypes.CanaryLastRun()
        value.canaryName = try reader["CanaryName"].readIfPresent()
        value.lastRun = try reader["LastRun"].readIfPresent(with: SyntheticsClientTypes.CanaryRun.read(from:))
        return value
    }
}

extension SyntheticsClientTypes.CanaryRun {

    static func read(from reader: SmithyJSON.Reader) throws -> SyntheticsClientTypes.CanaryRun {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SyntheticsClientTypes.CanaryRun()
        value.id = try reader["Id"].readIfPresent()
        value.name = try reader["Name"].readIfPresent()
        value.status = try reader["Status"].readIfPresent(with: SyntheticsClientTypes.CanaryRunStatus.read(from:))
        value.timeline = try reader["Timeline"].readIfPresent(with: SyntheticsClientTypes.CanaryRunTimeline.read(from:))
        value.artifactS3Location = try reader["ArtifactS3Location"].readIfPresent()
        return value
    }
}

extension SyntheticsClientTypes.CanaryRunTimeline {

    static func read(from reader: SmithyJSON.Reader) throws -> SyntheticsClientTypes.CanaryRunTimeline {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SyntheticsClientTypes.CanaryRunTimeline()
        value.started = try reader["Started"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.completed = try reader["Completed"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        return value
    }
}

extension SyntheticsClientTypes.CanaryRunStatus {

    static func read(from reader: SmithyJSON.Reader) throws -> SyntheticsClientTypes.CanaryRunStatus {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SyntheticsClientTypes.CanaryRunStatus()
        value.state = try reader["State"].readIfPresent()
        value.stateReason = try reader["StateReason"].readIfPresent()
        value.stateReasonCode = try reader["StateReasonCode"].readIfPresent()
        return value
    }
}

extension SyntheticsClientTypes.RuntimeVersion {

    static func read(from reader: SmithyJSON.Reader) throws -> SyntheticsClientTypes.RuntimeVersion {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SyntheticsClientTypes.RuntimeVersion()
        value.versionName = try reader["VersionName"].readIfPresent()
        value.description = try reader["Description"].readIfPresent()
        value.releaseDate = try reader["ReleaseDate"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.deprecationDate = try reader["DeprecationDate"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        return value
    }
}

extension SyntheticsClientTypes.GroupSummary {

    static func read(from reader: SmithyJSON.Reader) throws -> SyntheticsClientTypes.GroupSummary {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SyntheticsClientTypes.GroupSummary()
        value.id = try reader["Id"].readIfPresent()
        value.name = try reader["Name"].readIfPresent()
        value.arn = try reader["Arn"].readIfPresent()
        return value
    }
}

extension SyntheticsClientTypes.CanaryCodeInput {

    static func write(value: SyntheticsClientTypes.CanaryCodeInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Handler"].write(value.handler)
        try writer["S3Bucket"].write(value.s3Bucket)
        try writer["S3Key"].write(value.s3Key)
        try writer["S3Version"].write(value.s3Version)
        try writer["ZipFile"].write(value.zipFile)
    }
}

extension SyntheticsClientTypes.CanaryScheduleInput {

    static func write(value: SyntheticsClientTypes.CanaryScheduleInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["DurationInSeconds"].write(value.durationInSeconds)
        try writer["Expression"].write(value.expression)
    }
}

extension SyntheticsClientTypes.CanaryRunConfigInput {

    static func write(value: SyntheticsClientTypes.CanaryRunConfigInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ActiveTracing"].write(value.activeTracing)
        try writer["EnvironmentVariables"].writeMap(value.environmentVariables, valueWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        try writer["MemoryInMB"].write(value.memoryInMB)
        try writer["TimeoutInSeconds"].write(value.timeoutInSeconds)
    }
}

extension SyntheticsClientTypes.VpcConfigInput {

    static func write(value: SyntheticsClientTypes.VpcConfigInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["SecurityGroupIds"].writeList(value.securityGroupIds, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["SubnetIds"].writeList(value.subnetIds, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension SyntheticsClientTypes.ArtifactConfigInput {

    static func write(value: SyntheticsClientTypes.ArtifactConfigInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["S3Encryption"].write(value.s3Encryption, with: SyntheticsClientTypes.S3EncryptionConfig.write(value:to:))
    }
}

extension SyntheticsClientTypes.VisualReferenceInput {

    static func write(value: SyntheticsClientTypes.VisualReferenceInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["BaseCanaryRunId"].write(value.baseCanaryRunId)
        try writer["BaseScreenshots"].writeList(value.baseScreenshots, memberWritingClosure: SyntheticsClientTypes.BaseScreenshot.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

public enum SyntheticsClientTypes {}
