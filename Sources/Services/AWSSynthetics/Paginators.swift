// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension SyntheticsClient {
    /// Paginate over `[DescribeCanariesOutputResponse]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[DescribeCanariesInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `DescribeCanariesOutputResponse`
    public func describeCanariesPaginated(input: DescribeCanariesInput) -> ClientRuntime.PaginatorSequence<DescribeCanariesInput, DescribeCanariesOutputResponse> {
        return ClientRuntime.PaginatorSequence<DescribeCanariesInput, DescribeCanariesOutputResponse>(input: input, inputKey: \DescribeCanariesInput.nextToken, outputKey: \DescribeCanariesOutputResponse.nextToken, paginationFunction: self.describeCanaries(input:))
    }
}

extension DescribeCanariesInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> DescribeCanariesInput {
        return DescribeCanariesInput(
            maxResults: self.maxResults,
            names: self.names,
            nextToken: token
        )}
}
extension SyntheticsClient {
    /// Paginate over `[DescribeCanariesLastRunOutputResponse]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[DescribeCanariesLastRunInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `DescribeCanariesLastRunOutputResponse`
    public func describeCanariesLastRunPaginated(input: DescribeCanariesLastRunInput) -> ClientRuntime.PaginatorSequence<DescribeCanariesLastRunInput, DescribeCanariesLastRunOutputResponse> {
        return ClientRuntime.PaginatorSequence<DescribeCanariesLastRunInput, DescribeCanariesLastRunOutputResponse>(input: input, inputKey: \DescribeCanariesLastRunInput.nextToken, outputKey: \DescribeCanariesLastRunOutputResponse.nextToken, paginationFunction: self.describeCanariesLastRun(input:))
    }
}

extension DescribeCanariesLastRunInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> DescribeCanariesLastRunInput {
        return DescribeCanariesLastRunInput(
            maxResults: self.maxResults,
            names: self.names,
            nextToken: token
        )}
}
extension SyntheticsClient {
    /// Paginate over `[DescribeRuntimeVersionsOutputResponse]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[DescribeRuntimeVersionsInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `DescribeRuntimeVersionsOutputResponse`
    public func describeRuntimeVersionsPaginated(input: DescribeRuntimeVersionsInput) -> ClientRuntime.PaginatorSequence<DescribeRuntimeVersionsInput, DescribeRuntimeVersionsOutputResponse> {
        return ClientRuntime.PaginatorSequence<DescribeRuntimeVersionsInput, DescribeRuntimeVersionsOutputResponse>(input: input, inputKey: \DescribeRuntimeVersionsInput.nextToken, outputKey: \DescribeRuntimeVersionsOutputResponse.nextToken, paginationFunction: self.describeRuntimeVersions(input:))
    }
}

extension DescribeRuntimeVersionsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> DescribeRuntimeVersionsInput {
        return DescribeRuntimeVersionsInput(
            maxResults: self.maxResults,
            nextToken: token
        )}
}
extension SyntheticsClient {
    /// Paginate over `[GetCanaryRunsOutputResponse]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[GetCanaryRunsInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `GetCanaryRunsOutputResponse`
    public func getCanaryRunsPaginated(input: GetCanaryRunsInput) -> ClientRuntime.PaginatorSequence<GetCanaryRunsInput, GetCanaryRunsOutputResponse> {
        return ClientRuntime.PaginatorSequence<GetCanaryRunsInput, GetCanaryRunsOutputResponse>(input: input, inputKey: \GetCanaryRunsInput.nextToken, outputKey: \GetCanaryRunsOutputResponse.nextToken, paginationFunction: self.getCanaryRuns(input:))
    }
}

extension GetCanaryRunsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> GetCanaryRunsInput {
        return GetCanaryRunsInput(
            maxResults: self.maxResults,
            name: self.name,
            nextToken: token
        )}
}
extension SyntheticsClient {
    /// Paginate over `[ListAssociatedGroupsOutputResponse]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[ListAssociatedGroupsInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `ListAssociatedGroupsOutputResponse`
    public func listAssociatedGroupsPaginated(input: ListAssociatedGroupsInput) -> ClientRuntime.PaginatorSequence<ListAssociatedGroupsInput, ListAssociatedGroupsOutputResponse> {
        return ClientRuntime.PaginatorSequence<ListAssociatedGroupsInput, ListAssociatedGroupsOutputResponse>(input: input, inputKey: \ListAssociatedGroupsInput.nextToken, outputKey: \ListAssociatedGroupsOutputResponse.nextToken, paginationFunction: self.listAssociatedGroups(input:))
    }
}

extension ListAssociatedGroupsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListAssociatedGroupsInput {
        return ListAssociatedGroupsInput(
            maxResults: self.maxResults,
            nextToken: token,
            resourceArn: self.resourceArn
        )}
}
extension SyntheticsClient {
    /// Paginate over `[ListGroupResourcesOutputResponse]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[ListGroupResourcesInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `ListGroupResourcesOutputResponse`
    public func listGroupResourcesPaginated(input: ListGroupResourcesInput) -> ClientRuntime.PaginatorSequence<ListGroupResourcesInput, ListGroupResourcesOutputResponse> {
        return ClientRuntime.PaginatorSequence<ListGroupResourcesInput, ListGroupResourcesOutputResponse>(input: input, inputKey: \ListGroupResourcesInput.nextToken, outputKey: \ListGroupResourcesOutputResponse.nextToken, paginationFunction: self.listGroupResources(input:))
    }
}

extension ListGroupResourcesInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListGroupResourcesInput {
        return ListGroupResourcesInput(
            groupIdentifier: self.groupIdentifier,
            maxResults: self.maxResults,
            nextToken: token
        )}
}
extension SyntheticsClient {
    /// Paginate over `[ListGroupsOutputResponse]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[ListGroupsInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `ListGroupsOutputResponse`
    public func listGroupsPaginated(input: ListGroupsInput) -> ClientRuntime.PaginatorSequence<ListGroupsInput, ListGroupsOutputResponse> {
        return ClientRuntime.PaginatorSequence<ListGroupsInput, ListGroupsOutputResponse>(input: input, inputKey: \ListGroupsInput.nextToken, outputKey: \ListGroupsOutputResponse.nextToken, paginationFunction: self.listGroups(input:))
    }
}

extension ListGroupsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListGroupsInput {
        return ListGroupsInput(
            maxResults: self.maxResults,
            nextToken: token
        )}
}
