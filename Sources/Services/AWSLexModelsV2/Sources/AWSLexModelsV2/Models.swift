//
// Copyright Amazon.com Inc. or its affiliates.
// All Rights Reserved.
//
// SPDX-License-Identifier: Apache-2.0
//

// Code generated by smithy-swift-codegen. DO NOT EDIT!

@_spi(SmithyReadWrite) import ClientRuntime
import Foundation
import class SmithyHTTPAPI.HTTPResponse
@_spi(SmithyReadWrite) import class SmithyJSON.Reader
@_spi(SmithyReadWrite) import class SmithyJSON.Writer
import enum ClientRuntime.ErrorFault
import enum Smithy.ClientError
import enum SmithyReadWrite.ReaderError
@_spi(SmithyReadWrite) import enum SmithyReadWrite.ReadingClosures
@_spi(SmithyReadWrite) import enum SmithyReadWrite.WritingClosures
@_spi(SmithyTimestamps) import enum SmithyTimestamps.TimestampFormat
@_spi(SmithyReadWrite) import func SmithyReadWrite.mapReadingClosure
@_spi(SmithyReadWrite) import func SmithyReadWrite.mapWritingClosure
import protocol AWSClientRuntime.AWSServiceError
import protocol ClientRuntime.HTTPError
import protocol ClientRuntime.ModeledError
@_spi(SmithyReadWrite) import protocol SmithyReadWrite.SmithyReader
@_spi(SmithyReadWrite) import protocol SmithyReadWrite.SmithyWriter
@_spi(SmithyReadWrite) import struct AWSClientRuntime.RestJSONError
@_spi(UnknownAWSHTTPServiceError) import struct AWSClientRuntime.UnknownAWSHTTPServiceError
import struct Smithy.URIQueryItem
@_spi(SmithyTimestamps) import struct SmithyTimestamps.TimestampFormatter

public struct DeleteIntentOutput {

    public init() { }
}

public struct DeleteSlotOutput {

    public init() { }
}

public struct DeleteSlotTypeOutput {

    public init() { }
}

public struct DeleteTestSetOutput {

    public init() { }
}

extension LexModelsV2ClientTypes {
    /// The active context used in the test execution.
    public struct ActiveContext {
        /// The name of active context.
        /// This member is required.
        public var name: Swift.String?

        public init(
            name: Swift.String? = nil
        )
        {
            self.name = name
        }
    }

}

extension LexModelsV2ClientTypes {

    public enum AudioRecognitionStrategy: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case useslotvaluesascustomvocabulary
        case sdkUnknown(Swift.String)

        public static var allCases: [AudioRecognitionStrategy] {
            return [
                .useslotvaluesascustomvocabulary
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .useslotvaluesascustomvocabulary: return "UseSlotValuesAsCustomVocabulary"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension LexModelsV2ClientTypes {
    /// Provides settings that enable advanced recognition settings for slot values.
    public struct AdvancedRecognitionSetting {
        /// Enables using the slot values as a custom vocabulary for recognizing user utterances.
        public var audioRecognitionStrategy: LexModelsV2ClientTypes.AudioRecognitionStrategy?

        public init(
            audioRecognitionStrategy: LexModelsV2ClientTypes.AudioRecognitionStrategy? = nil
        )
        {
            self.audioRecognitionStrategy = audioRecognitionStrategy
        }
    }

}

extension LexModelsV2ClientTypes {
    /// Details about an error in an execution of a test set.
    public struct ExecutionErrorDetails {
        /// The error code for the error.
        /// This member is required.
        public var errorCode: Swift.String?
        /// The message describing the error.
        /// This member is required.
        public var errorMessage: Swift.String?

        public init(
            errorCode: Swift.String? = nil,
            errorMessage: Swift.String? = nil
        )
        {
            self.errorCode = errorCode
            self.errorMessage = errorMessage
        }
    }

}

extension LexModelsV2ClientTypes {
    /// The information about the agent turn in a test set execution.
    public struct AgentTurnResult {
        /// The actual agent prompt for the agent turn in a test set execution.
        public var actualAgentPrompt: Swift.String?
        /// The actual elicited slot for the agent turn in a test set execution.
        public var actualElicitedSlot: Swift.String?
        /// The actual intent for the agent turn in a test set execution.
        public var actualIntent: Swift.String?
        /// Details about an error in an execution of a test set.
        public var errorDetails: LexModelsV2ClientTypes.ExecutionErrorDetails?
        /// The expected agent prompt for the agent turn in a test set execution.
        /// This member is required.
        public var expectedAgentPrompt: Swift.String?

        public init(
            actualAgentPrompt: Swift.String? = nil,
            actualElicitedSlot: Swift.String? = nil,
            actualIntent: Swift.String? = nil,
            errorDetails: LexModelsV2ClientTypes.ExecutionErrorDetails? = nil,
            expectedAgentPrompt: Swift.String? = nil
        )
        {
            self.actualAgentPrompt = actualAgentPrompt
            self.actualElicitedSlot = actualElicitedSlot
            self.actualIntent = actualIntent
            self.errorDetails = errorDetails
            self.expectedAgentPrompt = expectedAgentPrompt
        }
    }

}

extension LexModelsV2ClientTypes {
    /// The specification of an agent turn.
    public struct AgentTurnSpecification {
        /// The agent prompt for the agent turn in a test set.
        /// This member is required.
        public var agentPrompt: Swift.String?

        public init(
            agentPrompt: Swift.String? = nil
        )
        {
            self.agentPrompt = agentPrompt
        }
    }

}

extension LexModelsV2ClientTypes {

    public enum AggregatedUtterancesFilterName: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case utterance
        case sdkUnknown(Swift.String)

        public static var allCases: [AggregatedUtterancesFilterName] {
            return [
                .utterance
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .utterance: return "Utterance"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension LexModelsV2ClientTypes {

    public enum AggregatedUtterancesFilterOperator: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case contains
        case equals
        case sdkUnknown(Swift.String)

        public static var allCases: [AggregatedUtterancesFilterOperator] {
            return [
                .contains,
                .equals
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .contains: return "CO"
            case .equals: return "EQ"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension LexModelsV2ClientTypes {
    /// Filters responses returned by the ListAggregatedUtterances operation.
    public struct AggregatedUtterancesFilter {
        /// The name of the field to filter the utterance list.
        /// This member is required.
        public var name: LexModelsV2ClientTypes.AggregatedUtterancesFilterName?
        /// The operator to use for the filter. Specify EQ when the ListAggregatedUtterances operation should return only utterances that equal the specified value. Specify CO when the ListAggregatedUtterances operation should return utterances that contain the specified value.
        /// This member is required.
        public var `operator`: LexModelsV2ClientTypes.AggregatedUtterancesFilterOperator?
        /// The value to use for filtering the list of bots.
        /// This member is required.
        public var values: [Swift.String]?

        public init(
            name: LexModelsV2ClientTypes.AggregatedUtterancesFilterName? = nil,
            `operator`: LexModelsV2ClientTypes.AggregatedUtterancesFilterOperator? = nil,
            values: [Swift.String]? = nil
        )
        {
            self.name = name
            self.`operator` = `operator`
            self.values = values
        }
    }

}

extension LexModelsV2ClientTypes {

    public enum AggregatedUtterancesSortAttribute: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case hitcount
        case missedcount
        case sdkUnknown(Swift.String)

        public static var allCases: [AggregatedUtterancesSortAttribute] {
            return [
                .hitcount,
                .missedcount
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .hitcount: return "HitCount"
            case .missedcount: return "MissedCount"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension LexModelsV2ClientTypes {

    public enum SortOrder: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case ascending
        case descending
        case sdkUnknown(Swift.String)

        public static var allCases: [SortOrder] {
            return [
                .ascending,
                .descending
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .ascending: return "Ascending"
            case .descending: return "Descending"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension LexModelsV2ClientTypes {
    /// Specifies attributes for sorting a list of utterances.
    public struct AggregatedUtterancesSortBy {
        /// The utterance attribute to sort by.
        /// This member is required.
        public var attribute: LexModelsV2ClientTypes.AggregatedUtterancesSortAttribute?
        /// Specifies whether to sort the aggregated utterances in ascending or descending order.
        /// This member is required.
        public var order: LexModelsV2ClientTypes.SortOrder?

        public init(
            attribute: LexModelsV2ClientTypes.AggregatedUtterancesSortAttribute? = nil,
            order: LexModelsV2ClientTypes.SortOrder? = nil
        )
        {
            self.attribute = attribute
            self.order = order
        }
    }

}

extension LexModelsV2ClientTypes {
    /// Provides summary information for aggregated utterances. The ListAggregatedUtterances operations combines all instances of the same utterance into a single aggregated summary.
    public struct AggregatedUtterancesSummary {
        /// Aggregated utterance data may contain utterances from versions of your bot that have since been deleted. When the aggregated contains this kind of data, this field is set to true.
        public var containsDataFromDeletedResources: Swift.Bool?
        /// The number of times that the utterance was detected by Amazon Lex during the time period. When an utterance is detected, it activates an intent or a slot.
        public var hitCount: Swift.Int?
        /// The number of times that the utterance was missed by Amazon Lex An utterance is missed when it doesn't activate an intent or slot.
        public var missedCount: Swift.Int?
        /// The text of the utterance. If the utterance was used with the RecognizeUtterance operation, the text is the transcription of the audio utterance.
        public var utterance: Swift.String?
        /// The date and time that the utterance was first recorded in the time window for aggregation. An utterance may have been sent to Amazon Lex before that time, but only utterances within the time window are counted.
        public var utteranceFirstRecordedInAggregationDuration: Foundation.Date?
        /// The last date and time that an utterance was recorded in the time window for aggregation. An utterance may be sent to Amazon Lex after that time, but only utterances within the time window are counted.
        public var utteranceLastRecordedInAggregationDuration: Foundation.Date?

        public init(
            containsDataFromDeletedResources: Swift.Bool? = nil,
            hitCount: Swift.Int? = nil,
            missedCount: Swift.Int? = nil,
            utterance: Swift.String? = nil,
            utteranceFirstRecordedInAggregationDuration: Foundation.Date? = nil,
            utteranceLastRecordedInAggregationDuration: Foundation.Date? = nil
        )
        {
            self.containsDataFromDeletedResources = containsDataFromDeletedResources
            self.hitCount = hitCount
            self.missedCount = missedCount
            self.utterance = utterance
            self.utteranceFirstRecordedInAggregationDuration = utteranceFirstRecordedInAggregationDuration
            self.utteranceLastRecordedInAggregationDuration = utteranceLastRecordedInAggregationDuration
        }
    }

}

extension LexModelsV2ClientTypes {
    /// Specifies the allowed input types.
    public struct AllowedInputTypes {
        /// Indicates whether audio input is allowed.
        /// This member is required.
        public var allowAudioInput: Swift.Bool?
        /// Indicates whether DTMF input is allowed.
        /// This member is required.
        public var allowDTMFInput: Swift.Bool?

        public init(
            allowAudioInput: Swift.Bool? = nil,
            allowDTMFInput: Swift.Bool? = nil
        )
        {
            self.allowAudioInput = allowAudioInput
            self.allowDTMFInput = allowDTMFInput
        }
    }

}

extension LexModelsV2ClientTypes {

    public enum AnalyticsInterval: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case oneday
        case onehour
        case sdkUnknown(Swift.String)

        public static var allCases: [AnalyticsInterval] {
            return [
                .oneday,
                .onehour
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .oneday: return "OneDay"
            case .onehour: return "OneHour"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension LexModelsV2ClientTypes {

    public enum AnalyticsBinByName: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case conversationstarttime
        case utterancetimestamp
        case sdkUnknown(Swift.String)

        public static var allCases: [AnalyticsBinByName] {
            return [
                .conversationstarttime,
                .utterancetimestamp
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .conversationstarttime: return "ConversationStartTime"
            case .utterancetimestamp: return "UtteranceTimestamp"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension LexModelsV2ClientTypes {

    public enum AnalyticsSortOrder: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case ascending
        case descending
        case sdkUnknown(Swift.String)

        public static var allCases: [AnalyticsSortOrder] {
            return [
                .ascending,
                .descending
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .ascending: return "Ascending"
            case .descending: return "Descending"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension LexModelsV2ClientTypes {
    /// Contains the time metric, interval, and method by which to bin the analytics data.
    public struct AnalyticsBinBySpecification {
        /// Specifies the interval of time by which to bin the analytics data.
        /// This member is required.
        public var interval: LexModelsV2ClientTypes.AnalyticsInterval?
        /// Specifies the time metric by which to bin the analytics data.
        /// This member is required.
        public var name: LexModelsV2ClientTypes.AnalyticsBinByName?
        /// Specifies whether to bin the analytics data in ascending or descending order. If this field is left blank, the default order is by the key of the bin in descending order.
        public var order: LexModelsV2ClientTypes.AnalyticsSortOrder?

        public init(
            interval: LexModelsV2ClientTypes.AnalyticsInterval? = nil,
            name: LexModelsV2ClientTypes.AnalyticsBinByName? = nil,
            order: LexModelsV2ClientTypes.AnalyticsSortOrder? = nil
        )
        {
            self.interval = interval
            self.name = name
            self.order = order
        }
    }

}

extension LexModelsV2ClientTypes {
    /// An object containing the criterion by which to bin the results and the value that defines that bin.
    public struct AnalyticsBinKey {
        /// The criterion by which to bin the results.
        public var name: LexModelsV2ClientTypes.AnalyticsBinByName?
        /// The value of the criterion that defines the bin.
        public var value: Swift.Int?

        public init(
            name: LexModelsV2ClientTypes.AnalyticsBinByName? = nil,
            value: Swift.Int? = nil
        )
        {
            self.name = name
            self.value = value
        }
    }

}

extension LexModelsV2ClientTypes {

    public enum AnalyticsCommonFilterName: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case botaliasid
        case botversion
        case channel
        case localeid
        case modality
        case sdkUnknown(Swift.String)

        public static var allCases: [AnalyticsCommonFilterName] {
            return [
                .botaliasid,
                .botversion,
                .channel,
                .localeid,
                .modality
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .botaliasid: return "BotAliasId"
            case .botversion: return "BotVersion"
            case .channel: return "Channel"
            case .localeid: return "LocaleId"
            case .modality: return "Modality"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension LexModelsV2ClientTypes {

    public enum AnalyticsFilterOperator: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case equals
        case greaterthan
        case lessthan
        case sdkUnknown(Swift.String)

        public static var allCases: [AnalyticsFilterOperator] {
            return [
                .equals,
                .greaterthan,
                .lessthan
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .equals: return "EQ"
            case .greaterthan: return "GT"
            case .lessthan: return "LT"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension LexModelsV2ClientTypes {

    public enum AnalyticsIntentField: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case intentendstate
        case intentlevel
        case intentname
        case sdkUnknown(Swift.String)

        public static var allCases: [AnalyticsIntentField] {
            return [
                .intentendstate,
                .intentlevel,
                .intentname
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .intentendstate: return "IntentEndState"
            case .intentlevel: return "IntentLevel"
            case .intentname: return "IntentName"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension LexModelsV2ClientTypes {

    public enum AnalyticsIntentFilterName: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case botaliasid
        case botversion
        case channel
        case intentendstate
        case intentname
        case localeid
        case modality
        case originatingrequestid
        case sessionid
        case sdkUnknown(Swift.String)

        public static var allCases: [AnalyticsIntentFilterName] {
            return [
                .botaliasid,
                .botversion,
                .channel,
                .intentendstate,
                .intentname,
                .localeid,
                .modality,
                .originatingrequestid,
                .sessionid
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .botaliasid: return "BotAliasId"
            case .botversion: return "BotVersion"
            case .channel: return "Channel"
            case .intentendstate: return "IntentEndState"
            case .intentname: return "IntentName"
            case .localeid: return "LocaleId"
            case .modality: return "Modality"
            case .originatingrequestid: return "OriginatingRequestId"
            case .sessionid: return "SessionId"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension LexModelsV2ClientTypes {
    /// Contains fields describing a condition by which to filter the intents. The expression may be understood as name
    ///     operator
    ///
    /// values. For example:
    ///
    /// * IntentName CO Book – The intent name contains the string "Book."
    ///
    /// * BotVersion EQ 2 – The bot version is equal to two.
    ///
    ///
    /// The operators that each filter supports are listed below:
    ///
    /// * BotAlias – EQ.
    ///
    /// * BotVersion – EQ.
    ///
    /// * LocaleId – EQ.
    ///
    /// * Modality – EQ.
    ///
    /// * Channel – EQ.
    ///
    /// * SessionId – EQ.
    ///
    /// * OriginatingRequestId – EQ.
    ///
    /// * IntentName – EQ, CO.
    ///
    /// * IntentEndState – EQ, CO.
    public struct AnalyticsIntentFilter {
        /// The category by which to filter the intents. The descriptions for each option are as follows:
        ///
        /// * BotAlias – The name of the bot alias.
        ///
        /// * BotVersion – The version of the bot.
        ///
        /// * LocaleId – The locale of the bot.
        ///
        /// * Modality – The modality of the session with the bot (audio, DTMF, or text).
        ///
        /// * Channel – The channel that the bot is integrated with.
        ///
        /// * SessionId – The identifier of the session with the bot.
        ///
        /// * OriginatingRequestId – The identifier of the first request in a session.
        ///
        /// * IntentName – The name of the intent.
        ///
        /// * IntentEndState – The final state of the intent.
        /// This member is required.
        public var name: LexModelsV2ClientTypes.AnalyticsIntentFilterName?
        /// The operation by which to filter the category. The following operations are possible:
        ///
        /// * CO – Contains
        ///
        /// * EQ – Equals
        ///
        /// * GT – Greater than
        ///
        /// * LT – Less than
        ///
        ///
        /// The operators that each filter supports are listed below:
        ///
        /// * BotAlias – EQ.
        ///
        /// * BotVersion – EQ.
        ///
        /// * LocaleId – EQ.
        ///
        /// * Modality – EQ.
        ///
        /// * Channel – EQ.
        ///
        /// * SessionId – EQ.
        ///
        /// * OriginatingRequestId – EQ.
        ///
        /// * IntentName – EQ, CO.
        ///
        /// * IntentEndState – EQ, CO.
        /// This member is required.
        public var `operator`: LexModelsV2ClientTypes.AnalyticsFilterOperator?
        /// An array containing the values of the category by which to apply the operator to filter the results. You can provide multiple values if the operator is EQ or CO. If you provide multiple values, you filter for results that equal/contain any of the values. For example, if the name, operator, and values fields are Modality, EQ, and [Speech, Text], the operation filters for results where the modality was either Speech or Text.
        /// This member is required.
        public var values: [Swift.String]?

        public init(
            name: LexModelsV2ClientTypes.AnalyticsIntentFilterName? = nil,
            `operator`: LexModelsV2ClientTypes.AnalyticsFilterOperator? = nil,
            values: [Swift.String]? = nil
        )
        {
            self.name = name
            self.`operator` = `operator`
            self.values = values
        }
    }

}

extension LexModelsV2ClientTypes {
    /// Contains the category by which the intent analytics were grouped and a member of that category.
    public struct AnalyticsIntentGroupByKey {
        /// A category by which the intent analytics were grouped.
        public var name: LexModelsV2ClientTypes.AnalyticsIntentField?
        /// A member of the category by which the intent analytics were grouped.
        public var value: Swift.String?

        public init(
            name: LexModelsV2ClientTypes.AnalyticsIntentField? = nil,
            value: Swift.String? = nil
        )
        {
            self.name = name
            self.value = value
        }
    }

}

extension LexModelsV2ClientTypes {
    /// Contains the category by which to group the intents.
    public struct AnalyticsIntentGroupBySpecification {
        /// Specifies whether to group the intent stages by their name or their end state.
        /// This member is required.
        public var name: LexModelsV2ClientTypes.AnalyticsIntentField?

        public init(
            name: LexModelsV2ClientTypes.AnalyticsIntentField? = nil
        )
        {
            self.name = name
        }
    }

}

extension LexModelsV2ClientTypes {

    public enum AnalyticsIntentMetricName: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case count
        case dropped
        case failure
        case success
        case switched
        case sdkUnknown(Swift.String)

        public static var allCases: [AnalyticsIntentMetricName] {
            return [
                .count,
                .dropped,
                .failure,
                .success,
                .switched
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .count: return "Count"
            case .dropped: return "Dropped"
            case .failure: return "Failure"
            case .success: return "Success"
            case .switched: return "Switched"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension LexModelsV2ClientTypes {

    public enum AnalyticsMetricStatistic: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case avg
        case max
        case sum
        case sdkUnknown(Swift.String)

        public static var allCases: [AnalyticsMetricStatistic] {
            return [
                .avg,
                .max,
                .sum
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .avg: return "Avg"
            case .max: return "Max"
            case .sum: return "Sum"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension LexModelsV2ClientTypes {
    /// Contains the metric and the summary statistic you want to calculate, and the order in which to sort the results, for the intents in the bot.
    public struct AnalyticsIntentMetric {
        /// The metric for which you want to get intent summary statistics.
        ///
        /// * Count – The number of times the intent was invoked.
        ///
        /// * Success – The number of times the intent succeeded.
        ///
        /// * Failure – The number of times the intent failed.
        ///
        /// * Switched – The number of times there was a switch to a different intent.
        ///
        /// * Dropped – The number of times the user dropped the intent.
        /// This member is required.
        public var name: LexModelsV2ClientTypes.AnalyticsIntentMetricName?
        /// Specifies whether to sort the results in ascending or descending order.
        public var order: LexModelsV2ClientTypes.AnalyticsSortOrder?
        /// The summary statistic to calculate.
        ///
        /// * Sum – The total count for the category you provide in name.
        ///
        /// * Average – The total count divided by the number of intents in the category you provide in name.
        ///
        /// * Max – The highest count in the category you provide in name.
        /// This member is required.
        public var statistic: LexModelsV2ClientTypes.AnalyticsMetricStatistic?

        public init(
            name: LexModelsV2ClientTypes.AnalyticsIntentMetricName? = nil,
            order: LexModelsV2ClientTypes.AnalyticsSortOrder? = nil,
            statistic: LexModelsV2ClientTypes.AnalyticsMetricStatistic? = nil
        )
        {
            self.name = name
            self.order = order
            self.statistic = statistic
        }
    }

}

extension LexModelsV2ClientTypes {
    /// An object containing the results for the intent metric you requested.
    public struct AnalyticsIntentMetricResult {
        /// The metric that you requested. See [Key definitions](https://docs.aws.amazon.com/lexv2/latest/dg/analytics-key-definitions.html) for more details about these metrics.
        ///
        /// * Count – The number of times the intent was invoked.
        ///
        /// * Success – The number of times the intent succeeded.
        ///
        /// * Failure – The number of times the intent failed.
        ///
        /// * Switched – The number of times there was a switch to a different intent.
        ///
        /// * Dropped – The number of times the user dropped the intent.
        public var name: LexModelsV2ClientTypes.AnalyticsIntentMetricName?
        /// The statistic that you requested to calculate.
        ///
        /// * Sum – The total count for the category you provide in name.
        ///
        /// * Average – The total count divided by the number of intents in the category you provide in name.
        ///
        /// * Max – The highest count in the category you provide in name.
        public var statistic: LexModelsV2ClientTypes.AnalyticsMetricStatistic?
        /// The value of the summary statistic for the metric that you requested.
        public var value: Swift.Double?

        public init(
            name: LexModelsV2ClientTypes.AnalyticsIntentMetricName? = nil,
            statistic: LexModelsV2ClientTypes.AnalyticsMetricStatistic? = nil,
            value: Swift.Double? = nil
        )
        {
            self.name = name
            self.statistic = statistic
            self.value = value
        }
    }

}

extension LexModelsV2ClientTypes {

    public enum AnalyticsNodeType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case exit
        case inner
        case sdkUnknown(Swift.String)

        public static var allCases: [AnalyticsNodeType] {
            return [
                .exit,
                .inner
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .exit: return "Exit"
            case .inner: return "Inner"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension LexModelsV2ClientTypes {
    /// An object containing information about the requested path.
    public struct AnalyticsIntentNodeSummary {
        /// The total number of sessions that follow the given path to the given intent.
        public var intentCount: Swift.Int?
        /// The number of intents up to and including the requested path.
        public var intentLevel: Swift.Int?
        /// The name of the intent at the end of the requested path.
        public var intentName: Swift.String?
        /// The path.
        public var intentPath: Swift.String?
        /// Specifies whether the node is the end of a path (Exit) or not (Inner).
        public var nodeType: LexModelsV2ClientTypes.AnalyticsNodeType?

        public init(
            intentCount: Swift.Int? = nil,
            intentLevel: Swift.Int? = nil,
            intentName: Swift.String? = nil,
            intentPath: Swift.String? = nil,
            nodeType: LexModelsV2ClientTypes.AnalyticsNodeType? = nil
        )
        {
            self.intentCount = intentCount
            self.intentLevel = intentLevel
            self.intentName = intentName
            self.intentPath = intentPath
            self.nodeType = nodeType
        }
    }

}

extension LexModelsV2ClientTypes {
    /// An object containing the results for the intent metrics you requested and the bin and/or group(s) they refer to, if applicable.
    public struct AnalyticsIntentResult {
        /// A list of objects containing the criteria you requested for binning results and the values of the bins.
        public var binKeys: [LexModelsV2ClientTypes.AnalyticsBinKey]?
        /// A list of objects containing the criteria you requested for grouping results and the values of the groups.
        public var groupByKeys: [LexModelsV2ClientTypes.AnalyticsIntentGroupByKey]?
        /// A list of objects, each of which contains a metric you want to list, the statistic for the metric you want to return, and the method by which to organize the results.
        public var metricsResults: [LexModelsV2ClientTypes.AnalyticsIntentMetricResult]?

        public init(
            binKeys: [LexModelsV2ClientTypes.AnalyticsBinKey]? = nil,
            groupByKeys: [LexModelsV2ClientTypes.AnalyticsIntentGroupByKey]? = nil,
            metricsResults: [LexModelsV2ClientTypes.AnalyticsIntentMetricResult]? = nil
        )
        {
            self.binKeys = binKeys
            self.groupByKeys = groupByKeys
            self.metricsResults = metricsResults
        }
    }

}

extension LexModelsV2ClientTypes {

    public enum AnalyticsIntentStageField: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case intentstagename
        case switchedtointent
        case sdkUnknown(Swift.String)

        public static var allCases: [AnalyticsIntentStageField] {
            return [
                .intentstagename,
                .switchedtointent
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .intentstagename: return "IntentStageName"
            case .switchedtointent: return "SwitchedToIntent"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension LexModelsV2ClientTypes {

    public enum AnalyticsIntentStageFilterName: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case botaliasid
        case botversion
        case channel
        case intentname
        case intentstagename
        case localeid
        case modality
        case originatingrequestid
        case sessionid
        case sdkUnknown(Swift.String)

        public static var allCases: [AnalyticsIntentStageFilterName] {
            return [
                .botaliasid,
                .botversion,
                .channel,
                .intentname,
                .intentstagename,
                .localeid,
                .modality,
                .originatingrequestid,
                .sessionid
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .botaliasid: return "BotAliasId"
            case .botversion: return "BotVersion"
            case .channel: return "Channel"
            case .intentname: return "IntentName"
            case .intentstagename: return "IntentStageName"
            case .localeid: return "LocaleId"
            case .modality: return "Modality"
            case .originatingrequestid: return "OriginatingRequestId"
            case .sessionid: return "SessionId"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension LexModelsV2ClientTypes {
    /// Contains fields describing a condition by which to filter the intent stages. The expression may be understood as name
    ///     operator
    ///
    /// values. For example:
    ///
    /// * IntentName CO Book – The intent name contains the string "Book."
    ///
    /// * BotVersion EQ 2 – The bot version is equal to two.
    ///
    ///
    /// The operators that each filter supports are listed below:
    ///
    /// * BotAlias – EQ.
    ///
    /// * BotVersion – EQ.
    ///
    /// * LocaleId – EQ.
    ///
    /// * Modality – EQ.
    ///
    /// * Channel – EQ.
    ///
    /// * SessionId – EQ.
    ///
    /// * OriginatingRequestId – EQ.
    ///
    /// * IntentName – EQ, CO.
    ///
    /// * IntentStageName – EQ, CO.
    public struct AnalyticsIntentStageFilter {
        /// The category by which to filter the intent stages. The descriptions for each option are as follows:
        ///
        /// * BotAlias – The name of the bot alias.
        ///
        /// * BotVersion – The version of the bot.
        ///
        /// * LocaleId – The locale of the bot.
        ///
        /// * Modality – The modality of the session with the bot (audio, DTMF, or text).
        ///
        /// * Channel – The channel that the bot is integrated with.
        ///
        /// * SessionId – The identifier of the session with the bot.
        ///
        /// * OriginatingRequestId – The identifier of the first request in a session.
        ///
        /// * IntentName – The name of the intent.
        ///
        /// * IntentStageName – The stage in the intent.
        /// This member is required.
        public var name: LexModelsV2ClientTypes.AnalyticsIntentStageFilterName?
        /// The operation by which to filter the category. The following operations are possible:
        ///
        /// * CO – Contains
        ///
        /// * EQ – Equals
        ///
        /// * GT – Greater than
        ///
        /// * LT – Less than
        ///
        ///
        /// The operators that each filter supports are listed below:
        ///
        /// * BotAlias – EQ.
        ///
        /// * BotVersion – EQ.
        ///
        /// * LocaleId – EQ.
        ///
        /// * Modality – EQ.
        ///
        /// * Channel – EQ.
        ///
        /// * SessionId – EQ.
        ///
        /// * OriginatingRequestId – EQ.
        ///
        /// * IntentName – EQ, CO.
        ///
        /// * IntentStageName – EQ, CO.
        /// This member is required.
        public var `operator`: LexModelsV2ClientTypes.AnalyticsFilterOperator?
        /// An array containing the values of the category by which to apply the operator to filter the results. You can provide multiple values if the operator is EQ or CO. If you provide multiple values, you filter for results that equal/contain any of the values. For example, if the name, operator, and values fields are Modality, EQ, and [Speech, Text], the operation filters for results where the modality was either Speech or Text.
        /// This member is required.
        public var values: [Swift.String]?

        public init(
            name: LexModelsV2ClientTypes.AnalyticsIntentStageFilterName? = nil,
            `operator`: LexModelsV2ClientTypes.AnalyticsFilterOperator? = nil,
            values: [Swift.String]? = nil
        )
        {
            self.name = name
            self.`operator` = `operator`
            self.values = values
        }
    }

}

extension LexModelsV2ClientTypes {
    /// Contains the category by which the intent stage analytics and the values for that category were grouped.
    public struct AnalyticsIntentStageGroupByKey {
        /// A category by which the intent stage analytics were grouped.
        public var name: LexModelsV2ClientTypes.AnalyticsIntentStageField?
        /// A member of the category by which the intent stage analytics were grouped.
        public var value: Swift.String?

        public init(
            name: LexModelsV2ClientTypes.AnalyticsIntentStageField? = nil,
            value: Swift.String? = nil
        )
        {
            self.name = name
            self.value = value
        }
    }

}

extension LexModelsV2ClientTypes {
    /// Contains the category by which to group the intent stages.
    public struct AnalyticsIntentStageGroupBySpecification {
        /// Specifies whether to group the intent stages by their name or the intent to which the session was switched.
        /// This member is required.
        public var name: LexModelsV2ClientTypes.AnalyticsIntentStageField?

        public init(
            name: LexModelsV2ClientTypes.AnalyticsIntentStageField? = nil
        )
        {
            self.name = name
        }
    }

}

extension LexModelsV2ClientTypes {

    public enum AnalyticsIntentStageMetricName: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case count
        case dropped
        case failed
        case retry
        case success
        case sdkUnknown(Swift.String)

        public static var allCases: [AnalyticsIntentStageMetricName] {
            return [
                .count,
                .dropped,
                .failed,
                .retry,
                .success
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .count: return "Count"
            case .dropped: return "Dropped"
            case .failed: return "Failed"
            case .retry: return "Retry"
            case .success: return "Success"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension LexModelsV2ClientTypes {
    /// Contains the metric and the summary statistic you want to calculate, and the order in which to sort the results, for the intent stages across the user sessions with the bot.
    public struct AnalyticsIntentStageMetric {
        /// The metric for which you want to get intent stage summary statistics. See [Key definitions](https://docs.aws.amazon.com/lexv2/latest/dg/analytics-key-definitions.html) for more details about these metrics.
        ///
        /// * Count – The number of times the intent stage occurred.
        ///
        /// * Success – The number of times the intent stage succeeded.
        ///
        /// * Failure – The number of times the intent stage failed.
        ///
        /// * Dropped – The number of times the user dropped the intent stage.
        ///
        /// * Retry – The number of times the bot tried to elicit a response from the user at this stage.
        /// This member is required.
        public var name: LexModelsV2ClientTypes.AnalyticsIntentStageMetricName?
        /// Specifies whether to sort the results in ascending or descending order of the summary statistic (value in the response).
        public var order: LexModelsV2ClientTypes.AnalyticsSortOrder?
        /// The summary statistic to calculate.
        ///
        /// * Sum – The total count for the category you provide in name.
        ///
        /// * Average – The total count divided by the number of intent stages in the category you provide in name.
        ///
        /// * Max – The highest count in the category you provide in name.
        /// This member is required.
        public var statistic: LexModelsV2ClientTypes.AnalyticsMetricStatistic?

        public init(
            name: LexModelsV2ClientTypes.AnalyticsIntentStageMetricName? = nil,
            order: LexModelsV2ClientTypes.AnalyticsSortOrder? = nil,
            statistic: LexModelsV2ClientTypes.AnalyticsMetricStatistic? = nil
        )
        {
            self.name = name
            self.order = order
            self.statistic = statistic
        }
    }

}

extension LexModelsV2ClientTypes {
    /// An object containing the results for an intent stage metric you requested.
    public struct AnalyticsIntentStageMetricResult {
        /// The metric that you requested.
        ///
        /// * Count – The number of times the intent stage occurred.
        ///
        /// * Success – The number of times the intent stage succeeded.
        ///
        /// * Failure – The number of times the intent stage failed.
        ///
        /// * Dropped – The number of times the user dropped the intent stage.
        ///
        /// * Retry – The number of times the bot tried to elicit a response from the user at this stage.
        public var name: LexModelsV2ClientTypes.AnalyticsIntentStageMetricName?
        /// The summary statistic that you requested to calculate.
        ///
        /// * Sum – The total count for the category you provide in name.
        ///
        /// * Average – The total count divided by the number of intent stages in the category you provide in name.
        ///
        /// * Max – The highest count in the category you provide in name.
        public var statistic: LexModelsV2ClientTypes.AnalyticsMetricStatistic?
        /// The value of the summary statistic for the metric that you requested.
        public var value: Swift.Double?

        public init(
            name: LexModelsV2ClientTypes.AnalyticsIntentStageMetricName? = nil,
            statistic: LexModelsV2ClientTypes.AnalyticsMetricStatistic? = nil,
            value: Swift.Double? = nil
        )
        {
            self.name = name
            self.statistic = statistic
            self.value = value
        }
    }

}

extension LexModelsV2ClientTypes {
    /// An object containing the results for the intent stage metrics you requested and the bin and/or group they refer to, if applicable.
    public struct AnalyticsIntentStageResult {
        /// A list of objects containing the criteria you requested for binning results and the values of the bins.
        public var binKeys: [LexModelsV2ClientTypes.AnalyticsBinKey]?
        /// A list of objects containing the criteria you requested for grouping results and the values of the bins.
        public var groupByKeys: [LexModelsV2ClientTypes.AnalyticsIntentStageGroupByKey]?
        /// A list of objects, each of which contains a metric you want to list, the statistic for the metric you want to return, and the method by which to organize the results.
        public var metricsResults: [LexModelsV2ClientTypes.AnalyticsIntentStageMetricResult]?

        public init(
            binKeys: [LexModelsV2ClientTypes.AnalyticsBinKey]? = nil,
            groupByKeys: [LexModelsV2ClientTypes.AnalyticsIntentStageGroupByKey]? = nil,
            metricsResults: [LexModelsV2ClientTypes.AnalyticsIntentStageMetricResult]? = nil
        )
        {
            self.binKeys = binKeys
            self.groupByKeys = groupByKeys
            self.metricsResults = metricsResults
        }
    }

}

extension LexModelsV2ClientTypes {

    public enum AnalyticsModality: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case dtmf
        case multimode
        case speech
        case text
        case sdkUnknown(Swift.String)

        public static var allCases: [AnalyticsModality] {
            return [
                .dtmf,
                .multimode,
                .speech,
                .text
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .dtmf: return "DTMF"
            case .multimode: return "MultiMode"
            case .speech: return "Speech"
            case .text: return "Text"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension LexModelsV2ClientTypes {
    /// Contains fields describing a condition by which to filter the paths. The expression may be understood as name
    ///     operator
    ///
    /// values. For example:
    ///
    /// * LocaleId EQ en – The locale is "en".
    ///
    /// * BotVersion EQ 2 – The bot version is equal to two.
    ///
    ///
    /// The operators that each filter supports are listed below:
    ///
    /// * BotAlias – EQ.
    ///
    /// * BotVersion – EQ.
    ///
    /// * LocaleId – EQ.
    ///
    /// * Modality – EQ.
    ///
    /// * Channel – EQ.
    public struct AnalyticsPathFilter {
        /// The category by which to filter the intent paths. The descriptions for each option are as follows:
        ///
        /// * BotAlias – The name of the bot alias.
        ///
        /// * BotVersion – The version of the bot.
        ///
        /// * LocaleId – The locale of the bot.
        ///
        /// * Modality – The modality of the session with the bot (audio, DTMF, or text).
        ///
        /// * Channel – The channel that the bot is integrated with.
        /// This member is required.
        public var name: LexModelsV2ClientTypes.AnalyticsCommonFilterName?
        /// The operation by which to filter the category. The following operations are possible:
        ///
        /// * CO – Contains
        ///
        /// * EQ – Equals
        ///
        /// * GT – Greater than
        ///
        /// * LT – Less than
        ///
        ///
        /// The operators that each filter supports are listed below:
        ///
        /// * BotAlias – EQ.
        ///
        /// * BotVersion – EQ.
        ///
        /// * LocaleId – EQ.
        ///
        /// * Modality – EQ.
        ///
        /// * Channel – EQ.
        /// This member is required.
        public var `operator`: LexModelsV2ClientTypes.AnalyticsFilterOperator?
        /// An array containing the values of the category by which to apply the operator to filter the results. You can provide multiple values if the operator is EQ or CO. If you provide multiple values, you filter for results that equal/contain any of the values. For example, if the name, operator, and values fields are Modality, EQ, and [Speech, Text], the operation filters for results where the modality was either Speech or Text.
        /// This member is required.
        public var values: [Swift.String]?

        public init(
            name: LexModelsV2ClientTypes.AnalyticsCommonFilterName? = nil,
            `operator`: LexModelsV2ClientTypes.AnalyticsFilterOperator? = nil,
            values: [Swift.String]? = nil
        )
        {
            self.name = name
            self.`operator` = `operator`
            self.values = values
        }
    }

}

extension LexModelsV2ClientTypes {

    public enum AnalyticsSessionField: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case conversationendstate
        case localeid
        case sdkUnknown(Swift.String)

        public static var allCases: [AnalyticsSessionField] {
            return [
                .conversationendstate,
                .localeid
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .conversationendstate: return "ConversationEndState"
            case .localeid: return "LocaleId"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension LexModelsV2ClientTypes {

    public enum AnalyticsSessionFilterName: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case botaliasid
        case botversion
        case channel
        case conversationendstate
        case duration
        case intentpath
        case localeid
        case modality
        case originatingrequestid
        case sessionid
        case sdkUnknown(Swift.String)

        public static var allCases: [AnalyticsSessionFilterName] {
            return [
                .botaliasid,
                .botversion,
                .channel,
                .conversationendstate,
                .duration,
                .intentpath,
                .localeid,
                .modality,
                .originatingrequestid,
                .sessionid
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .botaliasid: return "BotAliasId"
            case .botversion: return "BotVersion"
            case .channel: return "Channel"
            case .conversationendstate: return "ConversationEndState"
            case .duration: return "Duration"
            case .intentpath: return "IntentPath"
            case .localeid: return "LocaleId"
            case .modality: return "Modality"
            case .originatingrequestid: return "OriginatingRequestId"
            case .sessionid: return "SessionId"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension LexModelsV2ClientTypes {
    /// Contains fields describing a condition by which to filter the sessions. The expression may be understood as name
    ///     operator
    ///
    /// values. For example:
    ///
    /// * LocaleId EQ en – The locale is "en".
    ///
    /// * Duration GT 200 – The duration is greater than 200 seconds.
    ///
    ///
    /// The operators that each filter supports are listed below:
    ///
    /// * BotAlias – EQ.
    ///
    /// * BotVersion – EQ.
    ///
    /// * LocaleId – EQ.
    ///
    /// * Modality – EQ.
    ///
    /// * Channel – EQ.
    ///
    /// * Duration – EQ, GT, LT.
    ///
    /// * conversationEndState – EQ, CO.
    ///
    /// * SessionId – EQ.
    ///
    /// * OriginatingRequestId – EQ.
    ///
    /// * IntentPath – EQ.
    public struct AnalyticsSessionFilter {
        /// The category by which to filter the sessions. The descriptions for each option are as follows:
        ///
        /// * BotAlias – The name of the bot alias.
        ///
        /// * BotVersion – The version of the bot.
        ///
        /// * LocaleId – The locale of the bot.
        ///
        /// * Modality – The modality of the session with the bot (audio, DTMF, or text).
        ///
        /// * Channel – The channel that the bot is integrated with.
        ///
        /// * Duration – The duration of the session.
        ///
        /// * conversationEndState – The final state of the session.
        ///
        /// * SessionId – The identifier of the session with the bot.
        ///
        /// * OriginatingRequestId – The identifier of the first request in a session.
        ///
        /// * IntentPath – The order of intents taken in a session.
        /// This member is required.
        public var name: LexModelsV2ClientTypes.AnalyticsSessionFilterName?
        /// The operation by which to filter the category. The following operations are possible:
        ///
        /// * CO – Contains
        ///
        /// * EQ – Equals
        ///
        /// * GT – Greater than
        ///
        /// * LT – Less than
        ///
        ///
        /// The operators that each filter supports are listed below:
        ///
        /// * BotAlias – EQ.
        ///
        /// * BotVersion – EQ.
        ///
        /// * LocaleId – EQ.
        ///
        /// * Modality – EQ.
        ///
        /// * Channel – EQ.
        ///
        /// * Duration – EQ, GT, LT.
        ///
        /// * conversationEndState – EQ, CO.
        ///
        /// * SessionId – EQ.
        ///
        /// * OriginatingRequestId – EQ.
        ///
        /// * IntentPath – EQ.
        /// This member is required.
        public var `operator`: LexModelsV2ClientTypes.AnalyticsFilterOperator?
        /// An array containing the values of the category by which to apply the operator to filter the results. You can provide multiple values if the operator is EQ or CO. If you provide multiple values, you filter for results that equal/contain any of the values. For example, if the name, operator, and values fields are Modality, EQ, and [Speech, Text], the operation filters for results where the modality was either Speech or Text.
        /// This member is required.
        public var values: [Swift.String]?

        public init(
            name: LexModelsV2ClientTypes.AnalyticsSessionFilterName? = nil,
            `operator`: LexModelsV2ClientTypes.AnalyticsFilterOperator? = nil,
            values: [Swift.String]? = nil
        )
        {
            self.name = name
            self.`operator` = `operator`
            self.values = values
        }
    }

}

extension LexModelsV2ClientTypes {
    /// Contains the category by which the session analytics were grouped and a member of that category.
    public struct AnalyticsSessionGroupByKey {
        /// The category by which the session analytics were grouped.
        public var name: LexModelsV2ClientTypes.AnalyticsSessionField?
        /// A member of the category by which the session analytics were grouped.
        public var value: Swift.String?

        public init(
            name: LexModelsV2ClientTypes.AnalyticsSessionField? = nil,
            value: Swift.String? = nil
        )
        {
            self.name = name
            self.value = value
        }
    }

}

extension LexModelsV2ClientTypes {
    /// Contains the category by which to group the sessions.
    public struct AnalyticsSessionGroupBySpecification {
        /// Specifies whether to group the session by their end state or their locale.
        /// This member is required.
        public var name: LexModelsV2ClientTypes.AnalyticsSessionField?

        public init(
            name: LexModelsV2ClientTypes.AnalyticsSessionField? = nil
        )
        {
            self.name = name
        }
    }

}

extension LexModelsV2ClientTypes {

    public enum AnalyticsSessionMetricName: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case concurrency
        case count
        case dropped
        case duration
        case failure
        case success
        case turnsperconversation
        case sdkUnknown(Swift.String)

        public static var allCases: [AnalyticsSessionMetricName] {
            return [
                .concurrency,
                .count,
                .dropped,
                .duration,
                .failure,
                .success,
                .turnsperconversation
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .concurrency: return "Concurrency"
            case .count: return "Count"
            case .dropped: return "Dropped"
            case .duration: return "Duration"
            case .failure: return "Failure"
            case .success: return "Success"
            case .turnsperconversation: return "TurnsPerConversation"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension LexModelsV2ClientTypes {
    /// Contains the metric and the summary statistic you want to calculate, and the order in which to sort the results, for the user sessions with the bot.
    public struct AnalyticsSessionMetric {
        /// The metric for which you want to get session summary statistics.
        ///
        /// * Count – The number of sessions.
        ///
        /// * Success – The number of sessions that succeeded.
        ///
        /// * Failure – The number of sessions that failed.
        ///
        /// * Dropped – The number of sessions that the user dropped.
        ///
        /// * Duration – The duration of sessions.
        ///
        /// * TurnsPerSession – The number of turns in the sessions.
        ///
        /// * Concurrency – The number of sessions occurring in the same period of time.
        /// This member is required.
        public var name: LexModelsV2ClientTypes.AnalyticsSessionMetricName?
        /// Specifies whether to sort the results in ascending or descending order.
        public var order: LexModelsV2ClientTypes.AnalyticsSortOrder?
        /// The summary statistic to calculate.
        ///
        /// * Sum – The total count for the category you provide in name.
        ///
        /// * Average – The total count divided by the number of sessions in the category you provide in name.
        ///
        /// * Max – The highest count in the category you provide in name.
        /// This member is required.
        public var statistic: LexModelsV2ClientTypes.AnalyticsMetricStatistic?

        public init(
            name: LexModelsV2ClientTypes.AnalyticsSessionMetricName? = nil,
            order: LexModelsV2ClientTypes.AnalyticsSortOrder? = nil,
            statistic: LexModelsV2ClientTypes.AnalyticsMetricStatistic? = nil
        )
        {
            self.name = name
            self.order = order
            self.statistic = statistic
        }
    }

}

extension LexModelsV2ClientTypes {
    /// An object containing the results for a session metric you requested.
    public struct AnalyticsSessionMetricResult {
        /// The metric that you requested.
        ///
        /// * Count – The number of sessions.
        ///
        /// * Success – The number of sessions that succeeded.
        ///
        /// * Failure – The number of sessions that failed.
        ///
        /// * Dropped – The number of sessions that the user dropped.
        ///
        /// * Duration – The duration of sessions.
        ///
        /// * TurnPersession – The number of turns in the sessions.
        ///
        /// * Concurrency – The number of sessions occurring in the same period of time.
        public var name: LexModelsV2ClientTypes.AnalyticsSessionMetricName?
        /// The summary statistic that you requested to calculate.
        ///
        /// * Sum – The total count for the category you provide in name.
        ///
        /// * Average – The total count divided by the number of sessions in the category you provide in name.
        ///
        /// * Max – The highest count in the category you provide in name.
        public var statistic: LexModelsV2ClientTypes.AnalyticsMetricStatistic?
        /// The value of the summary statistic for the metric that you requested.
        public var value: Swift.Double?

        public init(
            name: LexModelsV2ClientTypes.AnalyticsSessionMetricName? = nil,
            statistic: LexModelsV2ClientTypes.AnalyticsMetricStatistic? = nil,
            value: Swift.Double? = nil
        )
        {
            self.name = name
            self.statistic = statistic
            self.value = value
        }
    }

}

extension LexModelsV2ClientTypes {
    /// An object containing the results for the session metrics you requested and the bin and/or group(s) they refer to, if applicable.
    public struct AnalyticsSessionResult {
        /// A list of objects containing the criteria you requested for binning results and the values of the bins.
        public var binKeys: [LexModelsV2ClientTypes.AnalyticsBinKey]?
        /// A list of objects containing the criteria you requested for grouping results and the values of the bins.
        public var groupByKeys: [LexModelsV2ClientTypes.AnalyticsSessionGroupByKey]?
        /// A list of objects, each of which contains a metric you want to list, the statistic for the metric you want to return, and the method by which to organize the results.
        public var metricsResults: [LexModelsV2ClientTypes.AnalyticsSessionMetricResult]?

        public init(
            binKeys: [LexModelsV2ClientTypes.AnalyticsBinKey]? = nil,
            groupByKeys: [LexModelsV2ClientTypes.AnalyticsSessionGroupByKey]? = nil,
            metricsResults: [LexModelsV2ClientTypes.AnalyticsSessionMetricResult]? = nil
        )
        {
            self.binKeys = binKeys
            self.groupByKeys = groupByKeys
            self.metricsResults = metricsResults
        }
    }

}

extension LexModelsV2ClientTypes {

    public enum AnalyticsSessionSortByName: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case conversationstarttime
        case duration
        case numberofturns
        case sdkUnknown(Swift.String)

        public static var allCases: [AnalyticsSessionSortByName] {
            return [
                .conversationstarttime,
                .duration,
                .numberofturns
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .conversationstarttime: return "ConversationStartTime"
            case .duration: return "Duration"
            case .numberofturns: return "NumberOfTurns"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension LexModelsV2ClientTypes {

    public enum AnalyticsUtteranceAttributeName: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case lastusedintent
        case sdkUnknown(Swift.String)

        public static var allCases: [AnalyticsUtteranceAttributeName] {
            return [
                .lastusedintent
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .lastusedintent: return "LastUsedIntent"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension LexModelsV2ClientTypes {
    /// An object that specifies the last used intent at the time of the utterance as an attribute to return.
    public struct AnalyticsUtteranceAttribute {
        /// An attribute to return. The only available attribute is the intent that the bot mapped the utterance to.
        /// This member is required.
        public var name: LexModelsV2ClientTypes.AnalyticsUtteranceAttributeName?

        public init(
            name: LexModelsV2ClientTypes.AnalyticsUtteranceAttributeName? = nil
        )
        {
            self.name = name
        }
    }

}

extension LexModelsV2ClientTypes {
    /// An object containing the intent that the bot mapped the utterance to.
    public struct AnalyticsUtteranceAttributeResult {
        /// The intent that the bot mapped the utterance to.
        public var lastUsedIntent: Swift.String?

        public init(
            lastUsedIntent: Swift.String? = nil
        )
        {
            self.lastUsedIntent = lastUsedIntent
        }
    }

}

extension LexModelsV2ClientTypes {

    public enum AnalyticsUtteranceField: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case utterancestate
        case utterancetext
        case sdkUnknown(Swift.String)

        public static var allCases: [AnalyticsUtteranceField] {
            return [
                .utterancestate,
                .utterancetext
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .utterancestate: return "UtteranceState"
            case .utterancetext: return "UtteranceText"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension LexModelsV2ClientTypes {

    public enum AnalyticsUtteranceFilterName: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case botaliasid
        case botversion
        case channel
        case localeid
        case modality
        case originatingrequestid
        case sessionid
        case utterancestate
        case utterancetext
        case sdkUnknown(Swift.String)

        public static var allCases: [AnalyticsUtteranceFilterName] {
            return [
                .botaliasid,
                .botversion,
                .channel,
                .localeid,
                .modality,
                .originatingrequestid,
                .sessionid,
                .utterancestate,
                .utterancetext
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .botaliasid: return "BotAliasId"
            case .botversion: return "BotVersion"
            case .channel: return "Channel"
            case .localeid: return "LocaleId"
            case .modality: return "Modality"
            case .originatingrequestid: return "OriginatingRequestId"
            case .sessionid: return "SessionId"
            case .utterancestate: return "UtteranceState"
            case .utterancetext: return "UtteranceText"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension LexModelsV2ClientTypes {
    /// Contains fields describing a condition by which to filter the utterances. The expression may be understood as name
    ///     operator
    ///
    /// values. For example:
    ///
    /// * LocaleId EQ Book – The locale is the string "en".
    ///
    /// * UtteranceText CO help – The text of the utterance contains the string "help".
    ///
    ///
    /// The operators that each filter supports are listed below:
    ///
    /// * BotAlias – EQ.
    ///
    /// * BotVersion – EQ.
    ///
    /// * LocaleId – EQ.
    ///
    /// * Modality – EQ.
    ///
    /// * Channel – EQ.
    ///
    /// * SessionId – EQ.
    ///
    /// * OriginatingRequestId – EQ.
    ///
    /// * UtteranceState – EQ.
    ///
    /// * UtteranceText – EQ, CO.
    public struct AnalyticsUtteranceFilter {
        /// The category by which to filter the utterances. The descriptions for each option are as follows:
        ///
        /// * BotAlias – The name of the bot alias.
        ///
        /// * BotVersion – The version of the bot.
        ///
        /// * LocaleId – The locale of the bot.
        ///
        /// * Modality – The modality of the session with the bot (audio, DTMF, or text).
        ///
        /// * Channel – The channel that the bot is integrated with.
        ///
        /// * SessionId – The identifier of the session with the bot.
        ///
        /// * OriginatingRequestId – The identifier of the first request in a session.
        ///
        /// * UtteranceState – The state of the utterance.
        ///
        /// * UtteranceText – The text in the utterance.
        /// This member is required.
        public var name: LexModelsV2ClientTypes.AnalyticsUtteranceFilterName?
        /// The operation by which to filter the category. The following operations are possible:
        ///
        /// * CO – Contains
        ///
        /// * EQ – Equals
        ///
        /// * GT – Greater than
        ///
        /// * LT – Less than
        ///
        ///
        /// The operators that each filter supports are listed below:
        ///
        /// * BotAlias – EQ.
        ///
        /// * BotVersion – EQ.
        ///
        /// * LocaleId – EQ.
        ///
        /// * Modality – EQ.
        ///
        /// * Channel – EQ.
        ///
        /// * SessionId – EQ.
        ///
        /// * OriginatingRequestId – EQ.
        ///
        /// * UtteranceState – EQ.
        ///
        /// * UtteranceText – EQ, CO.
        /// This member is required.
        public var `operator`: LexModelsV2ClientTypes.AnalyticsFilterOperator?
        /// An array containing the values of the category by which to apply the operator to filter the results. You can provide multiple values if the operator is EQ or CO. If you provide multiple values, you filter for results that equal/contain any of the values. For example, if the name, operator, and values fields are Modality, EQ, and [Speech, Text], the operation filters for results where the modality was either Speech or Text.
        /// This member is required.
        public var values: [Swift.String]?

        public init(
            name: LexModelsV2ClientTypes.AnalyticsUtteranceFilterName? = nil,
            `operator`: LexModelsV2ClientTypes.AnalyticsFilterOperator? = nil,
            values: [Swift.String]? = nil
        )
        {
            self.name = name
            self.`operator` = `operator`
            self.values = values
        }
    }

}

extension LexModelsV2ClientTypes {
    /// Contains the category by which the utterance analytics were grouped and the values for that category.
    public struct AnalyticsUtteranceGroupByKey {
        /// The category by which the utterance analytics were grouped.
        public var name: LexModelsV2ClientTypes.AnalyticsUtteranceField?
        /// A member of the category by which the utterance analytics were grouped.
        public var value: Swift.String?

        public init(
            name: LexModelsV2ClientTypes.AnalyticsUtteranceField? = nil,
            value: Swift.String? = nil
        )
        {
            self.name = name
            self.value = value
        }
    }

}

extension LexModelsV2ClientTypes {
    /// Contains the category by which to group the utterances.
    public struct AnalyticsUtteranceGroupBySpecification {
        /// Specifies whether to group the utterances by their text or their state.
        /// This member is required.
        public var name: LexModelsV2ClientTypes.AnalyticsUtteranceField?

        public init(
            name: LexModelsV2ClientTypes.AnalyticsUtteranceField? = nil
        )
        {
            self.name = name
        }
    }

}

extension LexModelsV2ClientTypes {

    public enum AnalyticsUtteranceMetricName: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case count
        case detected
        case missed
        case utterancetimestamp
        case sdkUnknown(Swift.String)

        public static var allCases: [AnalyticsUtteranceMetricName] {
            return [
                .count,
                .detected,
                .missed,
                .utterancetimestamp
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .count: return "Count"
            case .detected: return "Detected"
            case .missed: return "Missed"
            case .utterancetimestamp: return "UtteranceTimestamp"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension LexModelsV2ClientTypes {
    /// Contains the metric and the summary statistic you want to calculate, and the order in which to sort the results, for the utterances across the user sessions with the bot.
    public struct AnalyticsUtteranceMetric {
        /// The metric for which you want to get utterance summary statistics.
        ///
        /// * Count – The number of utterances.
        ///
        /// * Missed – The number of utterances that Amazon Lex failed to recognize.
        ///
        /// * Detected – The number of utterances that Amazon Lex managed to detect.
        ///
        /// * UtteranceTimestamp – The date and time of the utterance.
        /// This member is required.
        public var name: LexModelsV2ClientTypes.AnalyticsUtteranceMetricName?
        /// Specifies whether to sort the results in ascending or descending order.
        public var order: LexModelsV2ClientTypes.AnalyticsSortOrder?
        /// The summary statistic to calculate.
        ///
        /// * Sum – The total count for the category you provide in name.
        ///
        /// * Average – The total count divided by the number of utterances in the category you provide in name.
        ///
        /// * Max – The highest count in the category you provide in name.
        /// This member is required.
        public var statistic: LexModelsV2ClientTypes.AnalyticsMetricStatistic?

        public init(
            name: LexModelsV2ClientTypes.AnalyticsUtteranceMetricName? = nil,
            order: LexModelsV2ClientTypes.AnalyticsSortOrder? = nil,
            statistic: LexModelsV2ClientTypes.AnalyticsMetricStatistic? = nil
        )
        {
            self.name = name
            self.order = order
            self.statistic = statistic
        }
    }

}

extension LexModelsV2ClientTypes {
    /// An object containing the results for the utterance metric you requested.
    public struct AnalyticsUtteranceMetricResult {
        /// The metric that you requested.
        ///
        /// * Count – The number of utterances.
        ///
        /// * Missed – The number of utterances that Amazon Lex failed to recognize.
        ///
        /// * Detected – The number of utterances that Amazon Lex managed to detect.
        ///
        /// * UtteranceTimestamp – The date and time of the utterance.
        public var name: LexModelsV2ClientTypes.AnalyticsUtteranceMetricName?
        /// The summary statistic that you requested to calculate.
        ///
        /// * Sum – The total count for the category you provide in name.
        ///
        /// * Average – The total count divided by the number of utterances in the category you provide in name.
        ///
        /// * Max – The highest count in the category you provide in name.
        public var statistic: LexModelsV2ClientTypes.AnalyticsMetricStatistic?
        /// The value of the summary statistic for the metric that you requested.
        public var value: Swift.Double?

        public init(
            name: LexModelsV2ClientTypes.AnalyticsUtteranceMetricName? = nil,
            statistic: LexModelsV2ClientTypes.AnalyticsMetricStatistic? = nil,
            value: Swift.Double? = nil
        )
        {
            self.name = name
            self.statistic = statistic
            self.value = value
        }
    }

}

extension LexModelsV2ClientTypes {
    /// An object containing the results for the utterance metrics you requested and the bin and/or group(s) they refer to, if applicable.
    public struct AnalyticsUtteranceResult {
        /// A list of objects containing information about the last used intent at the time of an utterance.
        public var attributeResults: [LexModelsV2ClientTypes.AnalyticsUtteranceAttributeResult]?
        /// A list of objects containing the criteria you requested for binning results and the values of the bins.
        public var binKeys: [LexModelsV2ClientTypes.AnalyticsBinKey]?
        /// A list of objects containing the criteria you requested for grouping results and the values of the bins.
        public var groupByKeys: [LexModelsV2ClientTypes.AnalyticsUtteranceGroupByKey]?
        /// A list of objects, each of which contains a metric you want to list, the statistic for the metric you want to return, and the method by which to organize the results.
        public var metricsResults: [LexModelsV2ClientTypes.AnalyticsUtteranceMetricResult]?

        public init(
            attributeResults: [LexModelsV2ClientTypes.AnalyticsUtteranceAttributeResult]? = nil,
            binKeys: [LexModelsV2ClientTypes.AnalyticsBinKey]? = nil,
            groupByKeys: [LexModelsV2ClientTypes.AnalyticsUtteranceGroupByKey]? = nil,
            metricsResults: [LexModelsV2ClientTypes.AnalyticsUtteranceMetricResult]? = nil
        )
        {
            self.attributeResults = attributeResults
            self.binKeys = binKeys
            self.groupByKeys = groupByKeys
            self.metricsResults = metricsResults
        }
    }

}

extension LexModelsV2ClientTypes {

    public enum AnalyticsUtteranceSortByName: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case utterancetimestamp
        case sdkUnknown(Swift.String)

        public static var allCases: [AnalyticsUtteranceSortByName] {
            return [
                .utterancetimestamp
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .utterancetimestamp: return "UtteranceTimestamp"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension LexModelsV2ClientTypes {
    /// The object containing information that associates the recommended intent/slot type with a conversation.
    public struct AssociatedTranscript {
        /// The content of the transcript that meets the search filter criteria. For the JSON format of the transcript, see [Output transcript format](https://docs.aws.amazon.com/lexv2/latest/dg/designing-output-format.html).
        public var transcript: Swift.String?

        public init(
            transcript: Swift.String? = nil
        )
        {
            self.transcript = transcript
        }
    }

}

extension LexModelsV2ClientTypes {

    public enum AssociatedTranscriptFilterName: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case intentid
        case slottypeid
        case sdkUnknown(Swift.String)

        public static var allCases: [AssociatedTranscriptFilterName] {
            return [
                .intentid,
                .slottypeid
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .intentid: return "IntentId"
            case .slottypeid: return "SlotTypeId"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension LexModelsV2ClientTypes {
    /// Filters to search for the associated transcript.
    public struct AssociatedTranscriptFilter {
        /// The name of the field to use for filtering. The allowed names are IntentId and SlotTypeId.
        /// This member is required.
        public var name: LexModelsV2ClientTypes.AssociatedTranscriptFilterName?
        /// The values to use to filter the transcript.
        /// This member is required.
        public var values: [Swift.String]?

        public init(
            name: LexModelsV2ClientTypes.AssociatedTranscriptFilterName? = nil,
            values: [Swift.String]? = nil
        )
        {
            self.name = name
            self.values = values
        }
    }

}

extension LexModelsV2ClientTypes {
    /// Specifies the audio input specifications.
    public struct AudioSpecification {
        /// Time for which a bot waits after the customer stops speaking to assume the utterance is finished.
        /// This member is required.
        public var endTimeoutMs: Swift.Int?
        /// Time for how long Amazon Lex waits before speech input is truncated and the speech is returned to application.
        /// This member is required.
        public var maxLengthMs: Swift.Int?

        public init(
            endTimeoutMs: Swift.Int? = nil,
            maxLengthMs: Swift.Int? = nil
        )
        {
            self.endTimeoutMs = endTimeoutMs
            self.maxLengthMs = maxLengthMs
        }
    }

}

extension LexModelsV2ClientTypes {
    /// Specifies the DTMF input specifications.
    public struct DTMFSpecification {
        /// The DTMF character that clears the accumulated DTMF digits and immediately ends the input.
        /// This member is required.
        public var deletionCharacter: Swift.String?
        /// The DTMF character that immediately ends input. If the user does not press this character, the input ends after the end timeout.
        /// This member is required.
        public var endCharacter: Swift.String?
        /// How long the bot should wait after the last DTMF character input before assuming that the input has concluded.
        /// This member is required.
        public var endTimeoutMs: Swift.Int?
        /// The maximum number of DTMF digits allowed in an utterance.
        /// This member is required.
        public var maxLength: Swift.Int?

        public init(
            deletionCharacter: Swift.String? = nil,
            endCharacter: Swift.String? = nil,
            endTimeoutMs: Swift.Int? = nil,
            maxLength: Swift.Int? = nil
        )
        {
            self.deletionCharacter = deletionCharacter
            self.endCharacter = endCharacter
            self.endTimeoutMs = endTimeoutMs
            self.maxLength = maxLength
        }
    }

}

extension LexModelsV2ClientTypes {
    /// Specifies the audio and DTMF input specification.
    public struct AudioAndDTMFInputSpecification {
        /// Specifies the settings on audio input.
        public var audioSpecification: LexModelsV2ClientTypes.AudioSpecification?
        /// Specifies the settings on DTMF input.
        public var dtmfSpecification: LexModelsV2ClientTypes.DTMFSpecification?
        /// Time for which a bot waits before assuming that the customer isn't going to speak or press a key. This timeout is shared between Audio and DTMF inputs.
        /// This member is required.
        public var startTimeoutMs: Swift.Int?

        public init(
            audioSpecification: LexModelsV2ClientTypes.AudioSpecification? = nil,
            dtmfSpecification: LexModelsV2ClientTypes.DTMFSpecification? = nil,
            startTimeoutMs: Swift.Int? = nil
        )
        {
            self.audioSpecification = audioSpecification
            self.dtmfSpecification = dtmfSpecification
            self.startTimeoutMs = startTimeoutMs
        }
    }

}

extension LexModelsV2ClientTypes {
    /// Specifies an Amazon S3 bucket for logging audio conversations
    public struct S3BucketLogDestination {
        /// The Amazon Resource Name (ARN) of an Amazon Web Services Key Management Service (KMS) key for encrypting audio log files stored in an S3 bucket.
        public var kmsKeyArn: Swift.String?
        /// The S3 prefix to assign to audio log files.
        /// This member is required.
        public var logPrefix: Swift.String?
        /// The Amazon Resource Name (ARN) of an Amazon S3 bucket where audio log files are stored.
        /// This member is required.
        public var s3BucketArn: Swift.String?

        public init(
            kmsKeyArn: Swift.String? = nil,
            logPrefix: Swift.String? = nil,
            s3BucketArn: Swift.String? = nil
        )
        {
            self.kmsKeyArn = kmsKeyArn
            self.logPrefix = logPrefix
            self.s3BucketArn = s3BucketArn
        }
    }

}

extension LexModelsV2ClientTypes {
    /// The location of audio log files collected when conversation logging is enabled for a bot.
    public struct AudioLogDestination {
        /// The Amazon S3 bucket where the audio log files are stored. The IAM role specified in the roleArn parameter of the [CreateBot](https://docs.aws.amazon.com/lexv2/latest/APIReference/API_CreateBot.html) operation must have permission to write to this bucket.
        /// This member is required.
        public var s3Bucket: LexModelsV2ClientTypes.S3BucketLogDestination?

        public init(
            s3Bucket: LexModelsV2ClientTypes.S3BucketLogDestination? = nil
        )
        {
            self.s3Bucket = s3Bucket
        }
    }

}

extension LexModelsV2ClientTypes {
    /// Settings for logging audio of conversations between Amazon Lex and a user. You specify whether to log audio and the Amazon S3 bucket where the audio file is stored.
    public struct AudioLogSetting {
        /// The location of audio log files collected when conversation logging is enabled for a bot.
        /// This member is required.
        public var destination: LexModelsV2ClientTypes.AudioLogDestination?
        /// Determines whether audio logging in enabled for the bot.
        /// This member is required.
        public var enabled: Swift.Bool
        /// The option to enable selective conversation log capture for audio.
        public var selectiveLoggingEnabled: Swift.Bool?

        public init(
            destination: LexModelsV2ClientTypes.AudioLogDestination? = nil,
            enabled: Swift.Bool = false,
            selectiveLoggingEnabled: Swift.Bool? = nil
        )
        {
            self.destination = destination
            self.enabled = enabled
            self.selectiveLoggingEnabled = selectiveLoggingEnabled
        }
    }

}

/// The service encountered an unexpected condition. Try your request again.
public struct InternalServerException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InternalServerException" }
    public static var fault: ClientRuntime.ErrorFault { .server }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// You asked to describe a resource that doesn't exist. Check the resource that you are requesting and try again.
public struct ResourceNotFoundException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ResourceNotFoundException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// You have reached a quota for your bot.
public struct ServiceQuotaExceededException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ServiceQuotaExceededException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// Your request rate is too high. Reduce the frequency of requests.
public struct ThrottlingException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
        /// The number of seconds after which the user can invoke the API again.
        public internal(set) var retryAfterSeconds: Swift.Int = 0
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ThrottlingException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil,
        retryAfterSeconds: Swift.Int = 0
    )
    {
        self.properties.message = message
        self.properties.retryAfterSeconds = retryAfterSeconds
    }
}

/// One of the input parameters in your request isn't valid. Check the parameters and try your request again.
public struct ValidationException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ValidationException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension LexModelsV2ClientTypes {
    /// The new custom vocabulary item from the custom vocabulary list.
    public struct NewCustomVocabularyItem {
        /// The display as value assigned to the new custom vocabulary item from the custom vocabulary list.
        public var displayAs: Swift.String?
        /// The unique phrase for the new custom vocabulary item from the custom vocabulary list.
        /// This member is required.
        public var phrase: Swift.String?
        /// The weight assigned to the new custom vocabulary item from the custom vocabulary list.
        public var weight: Swift.Int?

        public init(
            displayAs: Swift.String? = nil,
            phrase: Swift.String? = nil,
            weight: Swift.Int? = nil
        )
        {
            self.displayAs = displayAs
            self.phrase = phrase
            self.weight = weight
        }
    }

}

public struct BatchCreateCustomVocabularyItemInput {
    /// The identifier of the bot associated with this custom vocabulary.
    /// This member is required.
    public var botId: Swift.String?
    /// The identifier of the version of the bot associated with this custom vocabulary.
    /// This member is required.
    public var botVersion: Swift.String?
    /// A list of new custom vocabulary items. Each entry must contain a phrase and can optionally contain a displayAs and/or a weight.
    /// This member is required.
    public var customVocabularyItemList: [LexModelsV2ClientTypes.NewCustomVocabularyItem]?
    /// The identifier of the language and locale where this custom vocabulary is used. The string must match one of the supported locales. For more information, see [ Supported Languages ](https://docs.aws.amazon.com/lexv2/latest/dg/how-languages.html).
    /// This member is required.
    public var localeId: Swift.String?

    public init(
        botId: Swift.String? = nil,
        botVersion: Swift.String? = nil,
        customVocabularyItemList: [LexModelsV2ClientTypes.NewCustomVocabularyItem]? = nil,
        localeId: Swift.String? = nil
    )
    {
        self.botId = botId
        self.botVersion = botVersion
        self.customVocabularyItemList = customVocabularyItemList
        self.localeId = localeId
    }
}

extension LexModelsV2ClientTypes {

    public enum ErrorCode: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case duplicateInput
        case internalServerFailure
        case resourceAlreadyExists
        case resourceDoesNotExist
        case sdkUnknown(Swift.String)

        public static var allCases: [ErrorCode] {
            return [
                .duplicateInput,
                .internalServerFailure,
                .resourceAlreadyExists,
                .resourceDoesNotExist
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .duplicateInput: return "DUPLICATE_INPUT"
            case .internalServerFailure: return "INTERNAL_SERVER_FAILURE"
            case .resourceAlreadyExists: return "RESOURCE_ALREADY_EXISTS"
            case .resourceDoesNotExist: return "RESOURCE_DOES_NOT_EXIST"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension LexModelsV2ClientTypes {
    /// The unique failed custom vocabulary item from the custom vocabulary list.
    public struct FailedCustomVocabularyItem {
        /// The unique error code for the failed custom vocabulary item from the custom vocabulary list.
        public var errorCode: LexModelsV2ClientTypes.ErrorCode?
        /// The error message for the failed custom vocabulary item from the custom vocabulary list.
        public var errorMessage: Swift.String?
        /// The unique item identifer for the failed custom vocabulary item from the custom vocabulary list.
        public var itemId: Swift.String?

        public init(
            errorCode: LexModelsV2ClientTypes.ErrorCode? = nil,
            errorMessage: Swift.String? = nil,
            itemId: Swift.String? = nil
        )
        {
            self.errorCode = errorCode
            self.errorMessage = errorMessage
            self.itemId = itemId
        }
    }

}

extension LexModelsV2ClientTypes {
    /// The unique custom vocabulary item from the custom vocabulary list.
    public struct CustomVocabularyItem {
        /// The DisplayAs value for the custom vocabulary item from the custom vocabulary list.
        public var displayAs: Swift.String?
        /// The unique item identifer for the custom vocabulary item from the custom vocabulary list.
        /// This member is required.
        public var itemId: Swift.String?
        /// The unique phrase for the custom vocabulary item from the custom vocabulary list.
        /// This member is required.
        public var phrase: Swift.String?
        /// The weight assigned for the custom vocabulary item from the custom vocabulary list.
        public var weight: Swift.Int?

        public init(
            displayAs: Swift.String? = nil,
            itemId: Swift.String? = nil,
            phrase: Swift.String? = nil,
            weight: Swift.Int? = nil
        )
        {
            self.displayAs = displayAs
            self.itemId = itemId
            self.phrase = phrase
            self.weight = weight
        }
    }

}

public struct BatchCreateCustomVocabularyItemOutput {
    /// The identifier of the bot associated with this custom vocabulary.
    public var botId: Swift.String?
    /// The identifier of the version of the bot associated with this custom vocabulary.
    public var botVersion: Swift.String?
    /// A list of custom vocabulary items that failed to create during the operation. The reason for the error is contained within each error object.
    public var errors: [LexModelsV2ClientTypes.FailedCustomVocabularyItem]?
    /// The identifier of the language and locale where this custom vocabulary is used. The string must match one of the supported locales. For more information, see [ Supported Languages ](https://docs.aws.amazon.com/lexv2/latest/dg/how-languages.html).
    public var localeId: Swift.String?
    /// A list of custom vocabulary items that were successfully created during the operation.
    public var resources: [LexModelsV2ClientTypes.CustomVocabularyItem]?

    public init(
        botId: Swift.String? = nil,
        botVersion: Swift.String? = nil,
        errors: [LexModelsV2ClientTypes.FailedCustomVocabularyItem]? = nil,
        localeId: Swift.String? = nil,
        resources: [LexModelsV2ClientTypes.CustomVocabularyItem]? = nil
    )
    {
        self.botId = botId
        self.botVersion = botVersion
        self.errors = errors
        self.localeId = localeId
        self.resources = resources
    }
}

extension LexModelsV2ClientTypes {
    /// The unique entry identifier for the custom vocabulary items.
    public struct CustomVocabularyEntryId {
        /// The unique item identifier for the custom vocabulary items.
        /// This member is required.
        public var itemId: Swift.String?

        public init(
            itemId: Swift.String? = nil
        )
        {
            self.itemId = itemId
        }
    }

}

public struct BatchDeleteCustomVocabularyItemInput {
    /// The identifier of the bot associated with this custom vocabulary.
    /// This member is required.
    public var botId: Swift.String?
    /// The identifier of the version of the bot associated with this custom vocabulary.
    /// This member is required.
    public var botVersion: Swift.String?
    /// A list of custom vocabulary items requested to be deleted. Each entry must contain the unique custom vocabulary entry identifier.
    /// This member is required.
    public var customVocabularyItemList: [LexModelsV2ClientTypes.CustomVocabularyEntryId]?
    /// The identifier of the language and locale where this custom vocabulary is used. The string must match one of the supported locales. For more information, see [ Supported Languages ](https://docs.aws.amazon.com/lexv2/latest/dg/how-languages.html).
    /// This member is required.
    public var localeId: Swift.String?

    public init(
        botId: Swift.String? = nil,
        botVersion: Swift.String? = nil,
        customVocabularyItemList: [LexModelsV2ClientTypes.CustomVocabularyEntryId]? = nil,
        localeId: Swift.String? = nil
    )
    {
        self.botId = botId
        self.botVersion = botVersion
        self.customVocabularyItemList = customVocabularyItemList
        self.localeId = localeId
    }
}

public struct BatchDeleteCustomVocabularyItemOutput {
    /// The identifier of the bot associated with this custom vocabulary.
    public var botId: Swift.String?
    /// The identifier of the version of the bot associated with this custom vocabulary.
    public var botVersion: Swift.String?
    /// A list of custom vocabulary items that failed to delete during the operation. The reason for the error is contained within each error object.
    public var errors: [LexModelsV2ClientTypes.FailedCustomVocabularyItem]?
    /// The identifier of the language and locale where this custom vocabulary is used. The string must match one of the supported locales. For more information, see Supported languages (https://docs.aws.amazon.com/lexv2/latest/dg/how-languages.html).
    public var localeId: Swift.String?
    /// A list of custom vocabulary items that were successfully deleted during the operation.
    public var resources: [LexModelsV2ClientTypes.CustomVocabularyItem]?

    public init(
        botId: Swift.String? = nil,
        botVersion: Swift.String? = nil,
        errors: [LexModelsV2ClientTypes.FailedCustomVocabularyItem]? = nil,
        localeId: Swift.String? = nil,
        resources: [LexModelsV2ClientTypes.CustomVocabularyItem]? = nil
    )
    {
        self.botId = botId
        self.botVersion = botVersion
        self.errors = errors
        self.localeId = localeId
        self.resources = resources
    }
}

public struct BatchUpdateCustomVocabularyItemInput {
    /// The identifier of the bot associated with this custom vocabulary
    /// This member is required.
    public var botId: Swift.String?
    /// The identifier of the version of the bot associated with this custom vocabulary.
    /// This member is required.
    public var botVersion: Swift.String?
    /// A list of custom vocabulary items with updated fields. Each entry must contain a phrase and can optionally contain a displayAs and/or a weight.
    /// This member is required.
    public var customVocabularyItemList: [LexModelsV2ClientTypes.CustomVocabularyItem]?
    /// The identifier of the language and locale where this custom vocabulary is used. The string must match one of the supported locales. For more information, see [ Supported Languages ](https://docs.aws.amazon.com/lexv2/latest/dg/how-languages.html).
    /// This member is required.
    public var localeId: Swift.String?

    public init(
        botId: Swift.String? = nil,
        botVersion: Swift.String? = nil,
        customVocabularyItemList: [LexModelsV2ClientTypes.CustomVocabularyItem]? = nil,
        localeId: Swift.String? = nil
    )
    {
        self.botId = botId
        self.botVersion = botVersion
        self.customVocabularyItemList = customVocabularyItemList
        self.localeId = localeId
    }
}

public struct BatchUpdateCustomVocabularyItemOutput {
    /// The identifier of the bot associated with this custom vocabulary.
    public var botId: Swift.String?
    /// The identifier of the version of the bot associated with this custom vocabulary.
    public var botVersion: Swift.String?
    /// A list of custom vocabulary items that failed to update during the operation. The reason for the error is contained within each error object.
    public var errors: [LexModelsV2ClientTypes.FailedCustomVocabularyItem]?
    /// The identifier of the language and locale where this custom vocabulary is used. The string must match one of the supported locales. For more information, see [ Supported Languages ](https://docs.aws.amazon.com/lexv2/latest/dg/how-languages.html).
    public var localeId: Swift.String?
    /// A list of custom vocabulary items that were successfully updated during the operation.
    public var resources: [LexModelsV2ClientTypes.CustomVocabularyItem]?

    public init(
        botId: Swift.String? = nil,
        botVersion: Swift.String? = nil,
        errors: [LexModelsV2ClientTypes.FailedCustomVocabularyItem]? = nil,
        localeId: Swift.String? = nil,
        resources: [LexModelsV2ClientTypes.CustomVocabularyItem]? = nil
    )
    {
        self.botId = botId
        self.botVersion = botVersion
        self.errors = errors
        self.localeId = localeId
        self.resources = resources
    }
}

extension LexModelsV2ClientTypes {
    /// The details on the Bedrock guardrail configuration.
    public struct BedrockGuardrailConfiguration {
        /// The unique guardrail id for the Bedrock guardrail configuration.
        /// This member is required.
        public var identifier: Swift.String?
        /// The guardrail version for the Bedrock guardrail configuration.
        /// This member is required.
        public var version: Swift.String?

        public init(
            identifier: Swift.String? = nil,
            version: Swift.String? = nil
        )
        {
            self.identifier = identifier
            self.version = version
        }
    }

}

extension LexModelsV2ClientTypes {
    /// The exact response fields given by the Bedrock knowledge store.
    public struct BedrockKnowledgeStoreExactResponseFields {
        /// The answer field used for an exact response from Bedrock Knowledge Store.
        public var answerField: Swift.String?

        public init(
            answerField: Swift.String? = nil
        )
        {
            self.answerField = answerField
        }
    }

}

extension LexModelsV2ClientTypes {
    /// Contains details about the configuration of a Amazon Bedrock knowledge base.
    public struct BedrockKnowledgeStoreConfiguration {
        /// The base ARN of the knowledge base used.
        /// This member is required.
        public var bedrockKnowledgeBaseArn: Swift.String?
        /// Specifies whether to return an exact response, or to return an answer generated by the model, using the fields you specify from the database.
        public var exactResponse: Swift.Bool
        /// Contains the names of the fields used for an exact response to the user.
        public var exactResponseFields: LexModelsV2ClientTypes.BedrockKnowledgeStoreExactResponseFields?

        public init(
            bedrockKnowledgeBaseArn: Swift.String? = nil,
            exactResponse: Swift.Bool = false,
            exactResponseFields: LexModelsV2ClientTypes.BedrockKnowledgeStoreExactResponseFields? = nil
        )
        {
            self.bedrockKnowledgeBaseArn = bedrockKnowledgeBaseArn
            self.exactResponse = exactResponse
            self.exactResponseFields = exactResponseFields
        }
    }

}

extension LexModelsV2ClientTypes {

    public enum BedrockTraceStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case disabled
        case enabled
        case sdkUnknown(Swift.String)

        public static var allCases: [BedrockTraceStatus] {
            return [
                .disabled,
                .enabled
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .disabled: return "DISABLED"
            case .enabled: return "ENABLED"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension LexModelsV2ClientTypes {
    /// Contains information about the Amazon Bedrock model used to interpret the prompt used in descriptive bot building.
    public struct BedrockModelSpecification {
        /// The custom prompt used in the Bedrock model specification details.
        public var customPrompt: Swift.String?
        /// The guardrail configuration in the Bedrock model specification details.
        public var guardrail: LexModelsV2ClientTypes.BedrockGuardrailConfiguration?
        /// The ARN of the foundation model used in descriptive bot building.
        /// This member is required.
        public var modelArn: Swift.String?
        /// The Bedrock trace status in the Bedrock model specification details.
        public var traceStatus: LexModelsV2ClientTypes.BedrockTraceStatus?

        public init(
            customPrompt: Swift.String? = nil,
            guardrail: LexModelsV2ClientTypes.BedrockGuardrailConfiguration? = nil,
            modelArn: Swift.String? = nil,
            traceStatus: LexModelsV2ClientTypes.BedrockTraceStatus? = nil
        )
        {
            self.customPrompt = customPrompt
            self.guardrail = guardrail
            self.modelArn = modelArn
            self.traceStatus = traceStatus
        }
    }

}

extension LexModelsV2ClientTypes {
    /// Provides a record of an event that affects a bot alias. For example, when the version of a bot that the alias points to changes.
    public struct BotAliasHistoryEvent {
        /// The version of the bot that was used in the event.
        public var botVersion: Swift.String?
        /// The date and time that the event ended.
        public var endDate: Foundation.Date?
        /// The date and time that the event started.
        public var startDate: Foundation.Date?

        public init(
            botVersion: Swift.String? = nil,
            endDate: Foundation.Date? = nil,
            startDate: Foundation.Date? = nil
        )
        {
            self.botVersion = botVersion
            self.endDate = endDate
            self.startDate = startDate
        }
    }

}

extension LexModelsV2ClientTypes {
    /// Specifies a Lambda function that verifies requests to a bot or fulfills the user's request to a bot.
    public struct LambdaCodeHook {
        /// The version of the request-response that you want Amazon Lex to use to invoke your Lambda function.
        /// This member is required.
        public var codeHookInterfaceVersion: Swift.String?
        /// The Amazon Resource Name (ARN) of the Lambda function.
        /// This member is required.
        public var lambdaARN: Swift.String?

        public init(
            codeHookInterfaceVersion: Swift.String? = nil,
            lambdaARN: Swift.String? = nil
        )
        {
            self.codeHookInterfaceVersion = codeHookInterfaceVersion
            self.lambdaARN = lambdaARN
        }
    }

}

extension LexModelsV2ClientTypes {
    /// Contains information about code hooks that Amazon Lex calls during a conversation.
    public struct CodeHookSpecification {
        /// Specifies a Lambda function that verifies requests to a bot or fulfills the user's request to a bot.
        /// This member is required.
        public var lambdaCodeHook: LexModelsV2ClientTypes.LambdaCodeHook?

        public init(
            lambdaCodeHook: LexModelsV2ClientTypes.LambdaCodeHook? = nil
        )
        {
            self.lambdaCodeHook = lambdaCodeHook
        }
    }

}

extension LexModelsV2ClientTypes {
    /// Specifies settings that are unique to a locale. For example, you can use different Lambda function depending on the bot's locale.
    public struct BotAliasLocaleSettings {
        /// Specifies the Lambda function that should be used in the locale.
        public var codeHookSpecification: LexModelsV2ClientTypes.CodeHookSpecification?
        /// Determines whether the locale is enabled for the bot. If the value is false, the locale isn't available for use.
        /// This member is required.
        public var enabled: Swift.Bool

        public init(
            codeHookSpecification: LexModelsV2ClientTypes.CodeHookSpecification? = nil,
            enabled: Swift.Bool = false
        )
        {
            self.codeHookSpecification = codeHookSpecification
            self.enabled = enabled
        }
    }

}

extension LexModelsV2ClientTypes {

    /// The status of the operation to replicate the bot alias. Values: Creating, Updating, Available, Deleting, Failed.
    public enum BotAliasReplicationStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case available
        case creating
        case deleting
        case failed
        case updating
        case sdkUnknown(Swift.String)

        public static var allCases: [BotAliasReplicationStatus] {
            return [
                .available,
                .creating,
                .deleting,
                .failed,
                .updating
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .available: return "Available"
            case .creating: return "Creating"
            case .deleting: return "Deleting"
            case .failed: return "Failed"
            case .updating: return "Updating"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension LexModelsV2ClientTypes {
    /// Contains information about all the aliases replication statuses applicable for global resiliency.
    public struct BotAliasReplicaSummary {
        /// The bot alias ID for all the alias bot replications.
        public var botAliasId: Swift.String?
        /// The replication statuses for all the alias bot replications.
        public var botAliasReplicationStatus: LexModelsV2ClientTypes.BotAliasReplicationStatus?
        /// The bot version for all the alias bot replications.
        public var botVersion: Swift.String?
        /// The creation time and date for all the alias bot replications.
        public var creationDateTime: Foundation.Date?
        /// The reasons for failure for the aliases bot replications.
        public var failureReasons: [Swift.String]?
        /// The last time and date updated for all the alias bot replications.
        public var lastUpdatedDateTime: Foundation.Date?

        public init(
            botAliasId: Swift.String? = nil,
            botAliasReplicationStatus: LexModelsV2ClientTypes.BotAliasReplicationStatus? = nil,
            botVersion: Swift.String? = nil,
            creationDateTime: Foundation.Date? = nil,
            failureReasons: [Swift.String]? = nil,
            lastUpdatedDateTime: Foundation.Date? = nil
        )
        {
            self.botAliasId = botAliasId
            self.botAliasReplicationStatus = botAliasReplicationStatus
            self.botVersion = botVersion
            self.creationDateTime = creationDateTime
            self.failureReasons = failureReasons
            self.lastUpdatedDateTime = lastUpdatedDateTime
        }
    }

}

extension LexModelsV2ClientTypes {

    public enum BotAliasStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case available
        case creating
        case deleting
        case failed
        case sdkUnknown(Swift.String)

        public static var allCases: [BotAliasStatus] {
            return [
                .available,
                .creating,
                .deleting,
                .failed
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .available: return "Available"
            case .creating: return "Creating"
            case .deleting: return "Deleting"
            case .failed: return "Failed"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension LexModelsV2ClientTypes {
    /// Summary information about bot aliases returned from the [ListBotAliases](https://docs.aws.amazon.com/lexv2/latest/APIReference/API_ListBotAliases.html) operation.
    public struct BotAliasSummary {
        /// The unique identifier assigned to the bot alias. You can use this ID to get detailed information about the alias using the [DescribeBotAlias](https://docs.aws.amazon.com/lexv2/latest/APIReference/API_DescribeBotAlias.html) operation.
        public var botAliasId: Swift.String?
        /// The name of the bot alias.
        public var botAliasName: Swift.String?
        /// The current state of the bot alias. If the status is Available, the alias is ready for use.
        public var botAliasStatus: LexModelsV2ClientTypes.BotAliasStatus?
        /// The version of the bot that the bot alias references.
        public var botVersion: Swift.String?
        /// A timestamp of the date and time that the bot alias was created.
        public var creationDateTime: Foundation.Date?
        /// The description of the bot alias.
        public var description: Swift.String?
        /// A timestamp of the date and time that the bot alias was last updated.
        public var lastUpdatedDateTime: Foundation.Date?

        public init(
            botAliasId: Swift.String? = nil,
            botAliasName: Swift.String? = nil,
            botAliasStatus: LexModelsV2ClientTypes.BotAliasStatus? = nil,
            botVersion: Swift.String? = nil,
            creationDateTime: Foundation.Date? = nil,
            description: Swift.String? = nil,
            lastUpdatedDateTime: Foundation.Date? = nil
        )
        {
            self.botAliasId = botAliasId
            self.botAliasName = botAliasName
            self.botAliasStatus = botAliasStatus
            self.botVersion = botVersion
            self.creationDateTime = creationDateTime
            self.description = description
            self.lastUpdatedDateTime = lastUpdatedDateTime
        }
    }

}

extension LexModelsV2ClientTypes {
    /// The target Amazon S3 location for the test set execution using a bot alias.
    public struct BotAliasTestExecutionTarget {
        /// The bot alias Id of the bot alias used in the test set execution.
        /// This member is required.
        public var botAliasId: Swift.String?
        /// The bot Id of the bot alias used in the test set execution.
        /// This member is required.
        public var botId: Swift.String?
        /// The locale Id of the bot alias used in the test set execution.
        /// This member is required.
        public var localeId: Swift.String?

        public init(
            botAliasId: Swift.String? = nil,
            botId: Swift.String? = nil,
            localeId: Swift.String? = nil
        )
        {
            self.botAliasId = botAliasId
            self.botId = botId
            self.localeId = localeId
        }
    }

}

extension LexModelsV2ClientTypes {
    /// Provides the identity of a the bot that was exported.
    public struct BotExportSpecification {
        /// The identifier of the bot assigned by Amazon Lex.
        /// This member is required.
        public var botId: Swift.String?
        /// The version of the bot that was exported. This will be either DRAFT or the version number.
        /// This member is required.
        public var botVersion: Swift.String?

        public init(
            botId: Swift.String? = nil,
            botVersion: Swift.String? = nil
        )
        {
            self.botId = botId
            self.botVersion = botVersion
        }
    }

}

extension LexModelsV2ClientTypes {

    public enum BotFilterName: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case botname
        case bottype
        case sdkUnknown(Swift.String)

        public static var allCases: [BotFilterName] {
            return [
                .botname,
                .bottype
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .botname: return "BotName"
            case .bottype: return "BotType"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension LexModelsV2ClientTypes {

    public enum BotFilterOperator: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case contains
        case equals
        case notequals
        case sdkUnknown(Swift.String)

        public static var allCases: [BotFilterOperator] {
            return [
                .contains,
                .equals,
                .notequals
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .contains: return "CO"
            case .equals: return "EQ"
            case .notequals: return "NE"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension LexModelsV2ClientTypes {
    /// Filters the responses returned by the ListBots operation.
    public struct BotFilter {
        /// The name of the field to filter the list of bots.
        /// This member is required.
        public var name: LexModelsV2ClientTypes.BotFilterName?
        /// The operator to use for the filter. Specify EQ when the ListBots operation should return only aliases that equal the specified value. Specify CO when the ListBots operation should return aliases that contain the specified value.
        /// This member is required.
        public var `operator`: LexModelsV2ClientTypes.BotFilterOperator?
        /// The value to use for filtering the list of bots.
        /// This member is required.
        public var values: [Swift.String]?

        public init(
            name: LexModelsV2ClientTypes.BotFilterName? = nil,
            `operator`: LexModelsV2ClientTypes.BotFilterOperator? = nil,
            values: [Swift.String]? = nil
        )
        {
            self.name = name
            self.`operator` = `operator`
            self.values = values
        }
    }

}

extension LexModelsV2ClientTypes {
    /// By default, data stored by Amazon Lex is encrypted. The DataPrivacy structure provides settings that determine how Amazon Lex handles special cases of securing the data for your bot.
    public struct DataPrivacy {
        /// For each Amazon Lex bot created with the Amazon Lex Model Building Service, you must specify whether your use of Amazon Lex is related to a website, program, or other application that is directed or targeted, in whole or in part, to children under age 13 and subject to the Children's Online Privacy Protection Act (COPPA) by specifying true or false in the childDirected field. By specifying true in the childDirected field, you confirm that your use of Amazon Lex is related to a website, program, or other application that is directed or targeted, in whole or in part, to children under age 13 and subject to COPPA. By specifying false in the childDirected field, you confirm that your use of Amazon Lex is not related to a website, program, or other application that is directed or targeted, in whole or in part, to children under age 13 and subject to COPPA. You may not specify a default value for the childDirected field that does not accurately reflect whether your use of Amazon Lex is related to a website, program, or other application that is directed or targeted, in whole or in part, to children under age 13 and subject to COPPA. If your use of Amazon Lex relates to a website, program, or other application that is directed in whole or in part, to children under age 13, you must obtain any required verifiable parental consent under COPPA. For information regarding the use of Amazon Lex in connection with websites, programs, or other applications that are directed or targeted, in whole or in part, to children under age 13, see the [Amazon Lex FAQ](http://aws.amazon.com/lex/faqs#data-security).
        /// This member is required.
        public var childDirected: Swift.Bool

        public init(
            childDirected: Swift.Bool = false
        )
        {
            self.childDirected = childDirected
        }
    }

}

extension LexModelsV2ClientTypes {
    /// Provides the bot parameters required for importing a bot.
    public struct BotImportSpecification {
        /// The name that Amazon Lex should use for the bot.
        /// This member is required.
        public var botName: Swift.String?
        /// A list of tags to add to the bot. You can only add tags when you import a bot. You can't use the UpdateBot operation to update tags. To update tags, use the TagResource operation.
        public var botTags: [Swift.String: Swift.String]?
        /// By default, data stored by Amazon Lex is encrypted. The DataPrivacy structure provides settings that determine how Amazon Lex handles special cases of securing the data for your bot.
        /// This member is required.
        public var dataPrivacy: LexModelsV2ClientTypes.DataPrivacy?
        /// The time, in seconds, that Amazon Lex should keep information about a user's conversation with the bot. A user interaction remains active for the amount of time specified. If no conversation occurs during this time, the session expires and Amazon Lex deletes any data provided before the timeout. You can specify between 60 (1 minute) and 86,400 (24 hours) seconds.
        public var idleSessionTTLInSeconds: Swift.Int?
        /// The Amazon Resource Name (ARN) of the IAM role used to build and run the bot.
        /// This member is required.
        public var roleArn: Swift.String?
        /// A list of tags to add to the test alias for a bot. You can only add tags when you import a bot. You can't use the UpdateAlias operation to update tags. To update tags on the test alias, use the TagResource operation.
        public var testBotAliasTags: [Swift.String: Swift.String]?

        public init(
            botName: Swift.String? = nil,
            botTags: [Swift.String: Swift.String]? = nil,
            dataPrivacy: LexModelsV2ClientTypes.DataPrivacy? = nil,
            idleSessionTTLInSeconds: Swift.Int? = nil,
            roleArn: Swift.String? = nil,
            testBotAliasTags: [Swift.String: Swift.String]? = nil
        )
        {
            self.botName = botName
            self.botTags = botTags
            self.dataPrivacy = dataPrivacy
            self.idleSessionTTLInSeconds = idleSessionTTLInSeconds
            self.roleArn = roleArn
            self.testBotAliasTags = testBotAliasTags
        }
    }

}

extension LexModelsV2ClientTypes {
    /// Provides the bot locale parameters required for exporting a bot locale.
    public struct BotLocaleExportSpecification {
        /// The identifier of the bot to create the locale for.
        /// This member is required.
        public var botId: Swift.String?
        /// The version of the bot to export.
        /// This member is required.
        public var botVersion: Swift.String?
        /// The identifier of the language and locale to export. The string must match one of the locales in the bot.
        /// This member is required.
        public var localeId: Swift.String?

        public init(
            botId: Swift.String? = nil,
            botVersion: Swift.String? = nil,
            localeId: Swift.String? = nil
        )
        {
            self.botId = botId
            self.botVersion = botVersion
            self.localeId = localeId
        }
    }

}

extension LexModelsV2ClientTypes {

    public enum BotLocaleFilterName: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case botlocalename
        case sdkUnknown(Swift.String)

        public static var allCases: [BotLocaleFilterName] {
            return [
                .botlocalename
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .botlocalename: return "BotLocaleName"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension LexModelsV2ClientTypes {

    public enum BotLocaleFilterOperator: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case contains
        case equals
        case sdkUnknown(Swift.String)

        public static var allCases: [BotLocaleFilterOperator] {
            return [
                .contains,
                .equals
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .contains: return "CO"
            case .equals: return "EQ"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension LexModelsV2ClientTypes {
    /// Filters responses returned by the ListBotLocales operation.
    public struct BotLocaleFilter {
        /// The name of the field to filter the list of bots.
        /// This member is required.
        public var name: LexModelsV2ClientTypes.BotLocaleFilterName?
        /// The operator to use for the filter. Specify EQ when the ListBotLocales operation should return only aliases that equal the specified value. Specify CO when the ListBotLocales operation should return aliases that contain the specified value.
        /// This member is required.
        public var `operator`: LexModelsV2ClientTypes.BotLocaleFilterOperator?
        /// The value to use for filtering the list of bots.
        /// This member is required.
        public var values: [Swift.String]?

        public init(
            name: LexModelsV2ClientTypes.BotLocaleFilterName? = nil,
            `operator`: LexModelsV2ClientTypes.BotLocaleFilterOperator? = nil,
            values: [Swift.String]? = nil
        )
        {
            self.name = name
            self.`operator` = `operator`
            self.values = values
        }
    }

}

extension LexModelsV2ClientTypes {
    /// Provides information about an event that occurred affecting the bot locale.
    public struct BotLocaleHistoryEvent {
        /// A description of the event that occurred.
        /// This member is required.
        public var event: Swift.String?
        /// A timestamp of the date and time that the event occurred.
        /// This member is required.
        public var eventDate: Foundation.Date?

        public init(
            event: Swift.String? = nil,
            eventDate: Foundation.Date? = nil
        )
        {
            self.event = event
            self.eventDate = eventDate
        }
    }

}

extension LexModelsV2ClientTypes {

    public enum VoiceEngine: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case generative
        case longform
        case neural
        case standard
        case sdkUnknown(Swift.String)

        public static var allCases: [VoiceEngine] {
            return [
                .generative,
                .longform,
                .neural,
                .standard
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .generative: return "generative"
            case .longform: return "long-form"
            case .neural: return "neural"
            case .standard: return "standard"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension LexModelsV2ClientTypes {
    /// Defines settings for using an Amazon Polly voice to communicate with a user. Valid values include:
    ///
    /// * standard
    ///
    /// * neural
    ///
    /// * long-form
    ///
    /// * generative
    public struct VoiceSettings {
        /// Indicates the type of Amazon Polly voice that Amazon Lex should use for voice interaction with the user. For more information, see the [engine] parameter of the SynthesizeSpeech operation(https://docs.aws.amazon.com/polly/latest/dg/API_SynthesizeSpeech.html#polly-SynthesizeSpeech-request-Engine) in the Amazon Polly developer guide. If you do not specify a value, the default is standard.
        public var engine: LexModelsV2ClientTypes.VoiceEngine?
        /// The identifier of the Amazon Polly voice to use.
        /// This member is required.
        public var voiceId: Swift.String?

        public init(
            engine: LexModelsV2ClientTypes.VoiceEngine? = nil,
            voiceId: Swift.String? = nil
        )
        {
            self.engine = engine
            self.voiceId = voiceId
        }
    }

}

extension LexModelsV2ClientTypes {
    /// Provides the bot locale parameters required for importing a bot locale.
    public struct BotLocaleImportSpecification {
        /// The identifier of the bot to import the locale to.
        /// This member is required.
        public var botId: Swift.String?
        /// The version of the bot to import the locale to. This can only be the DRAFT version of the bot.
        /// This member is required.
        public var botVersion: Swift.String?
        /// The identifier of the language and locale that the bot will be used in. The string must match one of the supported locales. All of the intents, slot types, and slots used in the bot must have the same locale. For more information, see [Supported languages](https://docs.aws.amazon.com/lexv2/latest/dg/how-languages.html).
        /// This member is required.
        public var localeId: Swift.String?
        /// Determines the threshold where Amazon Lex will insert the AMAZON.FallbackIntent, AMAZON.KendraSearchIntent, or both when returning alternative intents. AMAZON.FallbackIntent and AMAZON.KendraSearchIntent are only inserted if they are configured for the bot. For example, suppose a bot is configured with the confidence threshold of 0.80 and the AMAZON.FallbackIntent. Amazon Lex returns three alternative intents with the following confidence scores: IntentA (0.70), IntentB (0.60), IntentC (0.50). The response from the PostText operation would be:
        ///
        /// * AMAZON.FallbackIntent
        ///
        /// * IntentA
        ///
        /// * IntentB
        ///
        /// * IntentC
        public var nluIntentConfidenceThreshold: Swift.Double?
        /// Defines settings for using an Amazon Polly voice to communicate with a user. Valid values include:
        ///
        /// * standard
        ///
        /// * neural
        ///
        /// * long-form
        ///
        /// * generative
        public var voiceSettings: LexModelsV2ClientTypes.VoiceSettings?

        public init(
            botId: Swift.String? = nil,
            botVersion: Swift.String? = nil,
            localeId: Swift.String? = nil,
            nluIntentConfidenceThreshold: Swift.Double? = nil,
            voiceSettings: LexModelsV2ClientTypes.VoiceSettings? = nil
        )
        {
            self.botId = botId
            self.botVersion = botVersion
            self.localeId = localeId
            self.nluIntentConfidenceThreshold = nluIntentConfidenceThreshold
            self.voiceSettings = voiceSettings
        }
    }

}

extension LexModelsV2ClientTypes {

    public enum BotLocaleSortAttribute: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case botlocalename
        case sdkUnknown(Swift.String)

        public static var allCases: [BotLocaleSortAttribute] {
            return [
                .botlocalename
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .botlocalename: return "BotLocaleName"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension LexModelsV2ClientTypes {
    /// Specifies attributes for sorting a list of bot locales.
    public struct BotLocaleSortBy {
        /// The bot locale attribute to sort by.
        /// This member is required.
        public var attribute: LexModelsV2ClientTypes.BotLocaleSortAttribute?
        /// Specifies whether to sort the bot locales in ascending or descending order.
        /// This member is required.
        public var order: LexModelsV2ClientTypes.SortOrder?

        public init(
            attribute: LexModelsV2ClientTypes.BotLocaleSortAttribute? = nil,
            order: LexModelsV2ClientTypes.SortOrder? = nil
        )
        {
            self.attribute = attribute
            self.order = order
        }
    }

}

extension LexModelsV2ClientTypes {

    public enum BotLocaleStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case building
        case built
        case creating
        case deleting
        case failed
        case importing
        case notbuilt
        case processing
        case readyexpresstesting
        case sdkUnknown(Swift.String)

        public static var allCases: [BotLocaleStatus] {
            return [
                .building,
                .built,
                .creating,
                .deleting,
                .failed,
                .importing,
                .notbuilt,
                .processing,
                .readyexpresstesting
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .building: return "Building"
            case .built: return "Built"
            case .creating: return "Creating"
            case .deleting: return "Deleting"
            case .failed: return "Failed"
            case .importing: return "Importing"
            case .notbuilt: return "NotBuilt"
            case .processing: return "Processing"
            case .readyexpresstesting: return "ReadyExpressTesting"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension LexModelsV2ClientTypes {
    /// Summary information about bot locales returned by the [ListBotLocales](https://docs.aws.amazon.com/lexv2/latest/APIReference/API_ListBotLocales.html) operation.
    public struct BotLocaleSummary {
        /// The current status of the bot locale. When the status is Built the locale is ready for use.
        public var botLocaleStatus: LexModelsV2ClientTypes.BotLocaleStatus?
        /// The description of the bot locale.
        public var description: Swift.String?
        /// A timestamp of the date and time that the bot locale was last built.
        public var lastBuildSubmittedDateTime: Foundation.Date?
        /// A timestamp of the date and time that the bot locale was last updated.
        public var lastUpdatedDateTime: Foundation.Date?
        /// The language and locale of the bot locale.
        public var localeId: Swift.String?
        /// The name of the bot locale.
        public var localeName: Swift.String?

        public init(
            botLocaleStatus: LexModelsV2ClientTypes.BotLocaleStatus? = nil,
            description: Swift.String? = nil,
            lastBuildSubmittedDateTime: Foundation.Date? = nil,
            lastUpdatedDateTime: Foundation.Date? = nil,
            localeId: Swift.String? = nil,
            localeName: Swift.String? = nil
        )
        {
            self.botLocaleStatus = botLocaleStatus
            self.description = description
            self.lastBuildSubmittedDateTime = lastBuildSubmittedDateTime
            self.lastUpdatedDateTime = lastUpdatedDateTime
            self.localeId = localeId
            self.localeName = localeName
        }
    }

}

extension LexModelsV2ClientTypes {
    /// A bot that is a member of a network of bots.
    public struct BotMember {
        /// The alias ID of a bot that is a member of this network of bots.
        /// This member is required.
        public var botMemberAliasId: Swift.String?
        /// The alias name of a bot that is a member of this network of bots.
        /// This member is required.
        public var botMemberAliasName: Swift.String?
        /// The unique ID of a bot that is a member of this network of bots.
        /// This member is required.
        public var botMemberId: Swift.String?
        /// The unique name of a bot that is a member of this network of bots.
        /// This member is required.
        public var botMemberName: Swift.String?
        /// The version of a bot that is a member of this network of bots.
        /// This member is required.
        public var botMemberVersion: Swift.String?

        public init(
            botMemberAliasId: Swift.String? = nil,
            botMemberAliasName: Swift.String? = nil,
            botMemberId: Swift.String? = nil,
            botMemberName: Swift.String? = nil,
            botMemberVersion: Swift.String? = nil
        )
        {
            self.botMemberAliasId = botMemberAliasId
            self.botMemberAliasName = botMemberAliasName
            self.botMemberId = botMemberId
            self.botMemberName = botMemberName
            self.botMemberVersion = botMemberVersion
        }
    }

}

extension LexModelsV2ClientTypes {
    /// The object that contains the statistical summary of recommended intents associated with the bot recommendation.
    public struct IntentStatistics {
        /// The number of recommended intents associated with the bot recommendation.
        public var discoveredIntentCount: Swift.Int?

        public init(
            discoveredIntentCount: Swift.Int? = nil
        )
        {
            self.discoveredIntentCount = discoveredIntentCount
        }
    }

}

extension LexModelsV2ClientTypes {
    /// The object that contains the statistical summary of the recommended slot type associated with the bot recommendation.
    public struct SlotTypeStatistics {
        /// The number of recommended slot types associated with the bot recommendation.
        public var discoveredSlotTypeCount: Swift.Int?

        public init(
            discoveredSlotTypeCount: Swift.Int? = nil
        )
        {
            self.discoveredSlotTypeCount = discoveredSlotTypeCount
        }
    }

}

extension LexModelsV2ClientTypes {
    /// A statistical summary of the bot recommendation results.
    public struct BotRecommendationResultStatistics {
        /// Statistical information about about the intents associated with the bot recommendation results.
        public var intents: LexModelsV2ClientTypes.IntentStatistics?
        /// Statistical information about the slot types associated with the bot recommendation results.
        public var slotTypes: LexModelsV2ClientTypes.SlotTypeStatistics?

        public init(
            intents: LexModelsV2ClientTypes.IntentStatistics? = nil,
            slotTypes: LexModelsV2ClientTypes.SlotTypeStatistics? = nil
        )
        {
            self.intents = intents
            self.slotTypes = slotTypes
        }
    }

}

extension LexModelsV2ClientTypes {
    /// The object representing the URL of the bot definition, the URL of the associated transcript, and a statistical summary of the bot recommendation results.
    public struct BotRecommendationResults {
        /// The presigned url link of the associated transcript.
        public var associatedTranscriptsUrl: Swift.String?
        /// The presigned URL link of the recommended bot definition.
        public var botLocaleExportUrl: Swift.String?
        /// The statistical summary of the bot recommendation results.
        public var statistics: LexModelsV2ClientTypes.BotRecommendationResultStatistics?

        public init(
            associatedTranscriptsUrl: Swift.String? = nil,
            botLocaleExportUrl: Swift.String? = nil,
            statistics: LexModelsV2ClientTypes.BotRecommendationResultStatistics? = nil
        )
        {
            self.associatedTranscriptsUrl = associatedTranscriptsUrl
            self.botLocaleExportUrl = botLocaleExportUrl
            self.statistics = statistics
        }
    }

}

extension LexModelsV2ClientTypes {

    public enum BotRecommendationStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case available
        case deleted
        case deleting
        case downloading
        case failed
        case processing
        case stopped
        case stopping
        case updating
        case sdkUnknown(Swift.String)

        public static var allCases: [BotRecommendationStatus] {
            return [
                .available,
                .deleted,
                .deleting,
                .downloading,
                .failed,
                .processing,
                .stopped,
                .stopping,
                .updating
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .available: return "Available"
            case .deleted: return "Deleted"
            case .deleting: return "Deleting"
            case .downloading: return "Downloading"
            case .failed: return "Failed"
            case .processing: return "Processing"
            case .stopped: return "Stopped"
            case .stopping: return "Stopping"
            case .updating: return "Updating"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension LexModelsV2ClientTypes {
    /// A summary of the bot recommendation.
    public struct BotRecommendationSummary {
        /// The unique identifier of the bot recommendation to be updated.
        /// This member is required.
        public var botRecommendationId: Swift.String?
        /// The status of the bot recommendation. If the status is Failed, then the reasons for the failure are listed in the failureReasons field.
        /// This member is required.
        public var botRecommendationStatus: LexModelsV2ClientTypes.BotRecommendationStatus?
        /// A timestamp of the date and time that the bot recommendation was created.
        public var creationDateTime: Foundation.Date?
        /// A timestamp of the date and time that the bot recommendation was last updated.
        public var lastUpdatedDateTime: Foundation.Date?

        public init(
            botRecommendationId: Swift.String? = nil,
            botRecommendationStatus: LexModelsV2ClientTypes.BotRecommendationStatus? = nil,
            creationDateTime: Foundation.Date? = nil,
            lastUpdatedDateTime: Foundation.Date? = nil
        )
        {
            self.botRecommendationId = botRecommendationId
            self.botRecommendationStatus = botRecommendationStatus
            self.creationDateTime = creationDateTime
            self.lastUpdatedDateTime = lastUpdatedDateTime
        }
    }

}

extension LexModelsV2ClientTypes {

    /// The status of the operation to replicate the bot. Values: Enabling, Enabled, Deleting, Failed.
    public enum BotReplicaStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case deleting
        case enabled
        case enabling
        case failed
        case sdkUnknown(Swift.String)

        public static var allCases: [BotReplicaStatus] {
            return [
                .deleting,
                .enabled,
                .enabling,
                .failed
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .deleting: return "Deleting"
            case .enabled: return "Enabled"
            case .enabling: return "Enabling"
            case .failed: return "Failed"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension LexModelsV2ClientTypes {
    /// Contains summary information about all the replication statuses applicable for global resiliency.
    public struct BotReplicaSummary {
        /// The operation status for the replicated bot applicable.
        public var botReplicaStatus: LexModelsV2ClientTypes.BotReplicaStatus?
        /// The creation time and date for the replicated bots.
        public var creationDateTime: Foundation.Date?
        /// The reasons for the failure for the replicated bot.
        public var failureReasons: [Swift.String]?
        /// The replica region used in the replication statuses summary.
        public var replicaRegion: Swift.String?

        public init(
            botReplicaStatus: LexModelsV2ClientTypes.BotReplicaStatus? = nil,
            creationDateTime: Foundation.Date? = nil,
            failureReasons: [Swift.String]? = nil,
            replicaRegion: Swift.String? = nil
        )
        {
            self.botReplicaStatus = botReplicaStatus
            self.creationDateTime = creationDateTime
            self.failureReasons = failureReasons
            self.replicaRegion = replicaRegion
        }
    }

}

extension LexModelsV2ClientTypes {

    public enum BotSortAttribute: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case botname
        case sdkUnknown(Swift.String)

        public static var allCases: [BotSortAttribute] {
            return [
                .botname
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .botname: return "BotName"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension LexModelsV2ClientTypes {
    /// Specifies attributes for sorting a list of bots.
    public struct BotSortBy {
        /// The attribute to use to sort the list of bots.
        /// This member is required.
        public var attribute: LexModelsV2ClientTypes.BotSortAttribute?
        /// The order to sort the list. You can choose ascending or descending.
        /// This member is required.
        public var order: LexModelsV2ClientTypes.SortOrder?

        public init(
            attribute: LexModelsV2ClientTypes.BotSortAttribute? = nil,
            order: LexModelsV2ClientTypes.SortOrder? = nil
        )
        {
            self.attribute = attribute
            self.order = order
        }
    }

}

extension LexModelsV2ClientTypes {

    public enum BotStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case available
        case creating
        case deleting
        case failed
        case importing
        case inactive
        case updating
        case versioning
        case sdkUnknown(Swift.String)

        public static var allCases: [BotStatus] {
            return [
                .available,
                .creating,
                .deleting,
                .failed,
                .importing,
                .inactive,
                .updating,
                .versioning
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .available: return "Available"
            case .creating: return "Creating"
            case .deleting: return "Deleting"
            case .failed: return "Failed"
            case .importing: return "Importing"
            case .inactive: return "Inactive"
            case .updating: return "Updating"
            case .versioning: return "Versioning"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension LexModelsV2ClientTypes {

    public enum BotType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case bot
        case botnetwork
        case sdkUnknown(Swift.String)

        public static var allCases: [BotType] {
            return [
                .bot,
                .botnetwork
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .bot: return "Bot"
            case .botnetwork: return "BotNetwork"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension LexModelsV2ClientTypes {
    /// Summary information about a bot returned by the [ListBots](https://docs.aws.amazon.com/lexv2/latest/APIReference/API_ListBots.html) operation.
    public struct BotSummary {
        /// The unique identifier assigned to the bot. Use this ID to get detailed information about the bot with the [DescribeBot](https://docs.aws.amazon.com/lexv2/latest/APIReference/API_DescribeBot.html) operation.
        public var botId: Swift.String?
        /// The name of the bot.
        public var botName: Swift.String?
        /// The current status of the bot. When the status is Available the bot is ready for use.
        public var botStatus: LexModelsV2ClientTypes.BotStatus?
        /// The type of the bot.
        public var botType: LexModelsV2ClientTypes.BotType?
        /// The description of the bot.
        public var description: Swift.String?
        /// The date and time that the bot was last updated.
        public var lastUpdatedDateTime: Foundation.Date?
        /// The latest numerical version in use for the bot.
        public var latestBotVersion: Swift.String?

        public init(
            botId: Swift.String? = nil,
            botName: Swift.String? = nil,
            botStatus: LexModelsV2ClientTypes.BotStatus? = nil,
            botType: LexModelsV2ClientTypes.BotType? = nil,
            description: Swift.String? = nil,
            lastUpdatedDateTime: Foundation.Date? = nil,
            latestBotVersion: Swift.String? = nil
        )
        {
            self.botId = botId
            self.botName = botName
            self.botStatus = botStatus
            self.botType = botType
            self.description = description
            self.lastUpdatedDateTime = lastUpdatedDateTime
            self.latestBotVersion = latestBotVersion
        }
    }

}

extension LexModelsV2ClientTypes {
    /// The version of a bot used for a bot locale.
    public struct BotVersionLocaleDetails {
        /// The version of a bot used for a bot locale.
        /// This member is required.
        public var sourceBotVersion: Swift.String?

        public init(
            sourceBotVersion: Swift.String? = nil
        )
        {
            self.sourceBotVersion = sourceBotVersion
        }
    }

}

extension LexModelsV2ClientTypes {

    public enum BotVersionReplicaSortAttribute: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case botversion
        case sdkUnknown(Swift.String)

        public static var allCases: [BotVersionReplicaSortAttribute] {
            return [
                .botversion
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .botversion: return "BotVersion"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension LexModelsV2ClientTypes {
    /// The sort category for the version replicated bots.
    public struct BotVersionReplicaSortBy {
        /// The attribute of the sort category for the version replicated bots.
        /// This member is required.
        public var attribute: LexModelsV2ClientTypes.BotVersionReplicaSortAttribute?
        /// The order of the sort category for the version replicated bots.
        /// This member is required.
        public var order: LexModelsV2ClientTypes.SortOrder?

        public init(
            attribute: LexModelsV2ClientTypes.BotVersionReplicaSortAttribute? = nil,
            order: LexModelsV2ClientTypes.SortOrder? = nil
        )
        {
            self.attribute = attribute
            self.order = order
        }
    }

}

extension LexModelsV2ClientTypes {

    /// The status of the operation to replicate the bot version. Values: Creating, Available, Deleting, Failed.
    public enum BotVersionReplicationStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case available
        case creating
        case deleting
        case failed
        case sdkUnknown(Swift.String)

        public static var allCases: [BotVersionReplicationStatus] {
            return [
                .available,
                .creating,
                .deleting,
                .failed
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .available: return "Available"
            case .creating: return "Creating"
            case .deleting: return "Deleting"
            case .failed: return "Failed"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension LexModelsV2ClientTypes {
    /// Contains summary information for all the version replication statuses applicable for Global resiliency.
    public struct BotVersionReplicaSummary {
        /// The bot version for the summary information for all the version replication statuses.
        public var botVersion: Swift.String?
        /// The version replication status for all the replicated bots.
        public var botVersionReplicationStatus: LexModelsV2ClientTypes.BotVersionReplicationStatus?
        /// The creation date and time of the replication status for all the replicated bots.
        public var creationDateTime: Foundation.Date?
        /// The reasons for replication failure for all the replicated bots.
        public var failureReasons: [Swift.String]?

        public init(
            botVersion: Swift.String? = nil,
            botVersionReplicationStatus: LexModelsV2ClientTypes.BotVersionReplicationStatus? = nil,
            creationDateTime: Foundation.Date? = nil,
            failureReasons: [Swift.String]? = nil
        )
        {
            self.botVersion = botVersion
            self.botVersionReplicationStatus = botVersionReplicationStatus
            self.creationDateTime = creationDateTime
            self.failureReasons = failureReasons
        }
    }

}

extension LexModelsV2ClientTypes {

    public enum BotVersionSortAttribute: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case botversion
        case sdkUnknown(Swift.String)

        public static var allCases: [BotVersionSortAttribute] {
            return [
                .botversion
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .botversion: return "BotVersion"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension LexModelsV2ClientTypes {
    /// Specifies attributes for sorting a list of bot versions.
    public struct BotVersionSortBy {
        /// The attribute to use to sort the list of versions.
        /// This member is required.
        public var attribute: LexModelsV2ClientTypes.BotVersionSortAttribute?
        /// The order to sort the list. You can specify ascending or descending order.
        /// This member is required.
        public var order: LexModelsV2ClientTypes.SortOrder?

        public init(
            attribute: LexModelsV2ClientTypes.BotVersionSortAttribute? = nil,
            order: LexModelsV2ClientTypes.SortOrder? = nil
        )
        {
            self.attribute = attribute
            self.order = order
        }
    }

}

extension LexModelsV2ClientTypes {
    /// Summary information about a bot version returned by the [ListBotVersions](https://docs.aws.amazon.com/lexv2/latest/APIReference/API_ListBotVersions.html) operation.
    public struct BotVersionSummary {
        /// The name of the bot associated with the version.
        public var botName: Swift.String?
        /// The status of the bot. When the status is available, the version of the bot is ready for use.
        public var botStatus: LexModelsV2ClientTypes.BotStatus?
        /// The numeric version of the bot, or DRAFT to indicate that this is the version of the bot that can be updated..
        public var botVersion: Swift.String?
        /// A timestamp of the date and time that the version was created.
        public var creationDateTime: Foundation.Date?
        /// The description of the version.
        public var description: Swift.String?

        public init(
            botName: Swift.String? = nil,
            botStatus: LexModelsV2ClientTypes.BotStatus? = nil,
            botVersion: Swift.String? = nil,
            creationDateTime: Foundation.Date? = nil,
            description: Swift.String? = nil
        )
        {
            self.botName = botName
            self.botStatus = botStatus
            self.botVersion = botVersion
            self.creationDateTime = creationDateTime
            self.description = description
        }
    }

}

/// The action that you tried to perform couldn't be completed because the resource is in a conflicting state. For example, deleting a bot that is in the CREATING state. Try your request again.
public struct ConflictException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ConflictException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// Your request couldn't be completed because one or more request fields aren't valid. Check the fields in your request and try again.
public struct PreconditionFailedException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "PreconditionFailedException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

public struct BuildBotLocaleInput {
    /// The identifier of the bot to build. The identifier is returned in the response from the [CreateBot](https://docs.aws.amazon.com/lexv2/latest/APIReference/API_CreateBot.html) operation.
    /// This member is required.
    public var botId: Swift.String?
    /// The version of the bot to build. This can only be the draft version of the bot.
    /// This member is required.
    public var botVersion: Swift.String?
    /// The identifier of the language and locale that the bot will be used in. The string must match one of the supported locales. All of the intents, slot types, and slots used in the bot must have the same locale. For more information, see [Supported languages](https://docs.aws.amazon.com/lexv2/latest/dg/how-languages.html).
    /// This member is required.
    public var localeId: Swift.String?

    public init(
        botId: Swift.String? = nil,
        botVersion: Swift.String? = nil,
        localeId: Swift.String? = nil
    )
    {
        self.botId = botId
        self.botVersion = botVersion
        self.localeId = localeId
    }
}

public struct BuildBotLocaleOutput {
    /// The identifier of the specified bot.
    public var botId: Swift.String?
    /// The bot's build status. When the status is ReadyExpressTesting you can test the bot using the utterances defined for the intents and slot types. When the status is Built, the bot is ready for use and can be tested using any utterance.
    public var botLocaleStatus: LexModelsV2ClientTypes.BotLocaleStatus?
    /// The version of the bot that was built. This is only the draft version of the bot.
    public var botVersion: Swift.String?
    /// A timestamp indicating the date and time that the bot was last built for this locale.
    public var lastBuildSubmittedDateTime: Foundation.Date?
    /// The language and locale specified of where the bot can be used.
    public var localeId: Swift.String?

    public init(
        botId: Swift.String? = nil,
        botLocaleStatus: LexModelsV2ClientTypes.BotLocaleStatus? = nil,
        botVersion: Swift.String? = nil,
        lastBuildSubmittedDateTime: Foundation.Date? = nil,
        localeId: Swift.String? = nil
    )
    {
        self.botId = botId
        self.botLocaleStatus = botLocaleStatus
        self.botVersion = botVersion
        self.lastBuildSubmittedDateTime = lastBuildSubmittedDateTime
        self.localeId = localeId
    }
}

extension LexModelsV2ClientTypes {
    /// Contains specifications for the descriptive bot building feature.
    public struct DescriptiveBotBuilderSpecification {
        /// An object containing information about the Amazon Bedrock model used to interpret the prompt used in descriptive bot building.
        public var bedrockModelSpecification: LexModelsV2ClientTypes.BedrockModelSpecification?
        /// Specifies whether the descriptive bot building feature is activated or not.
        /// This member is required.
        public var enabled: Swift.Bool

        public init(
            bedrockModelSpecification: LexModelsV2ClientTypes.BedrockModelSpecification? = nil,
            enabled: Swift.Bool = false
        )
        {
            self.bedrockModelSpecification = bedrockModelSpecification
            self.enabled = enabled
        }
    }

}

extension LexModelsV2ClientTypes {
    /// Contains specifications for the sample utterance generation feature.
    public struct SampleUtteranceGenerationSpecification {
        /// Contains information about the Amazon Bedrock model used to interpret the prompt used in descriptive bot building.
        public var bedrockModelSpecification: LexModelsV2ClientTypes.BedrockModelSpecification?
        /// Specifies whether to enable sample utterance generation or not.
        /// This member is required.
        public var enabled: Swift.Bool

        public init(
            bedrockModelSpecification: LexModelsV2ClientTypes.BedrockModelSpecification? = nil,
            enabled: Swift.Bool = false
        )
        {
            self.bedrockModelSpecification = bedrockModelSpecification
            self.enabled = enabled
        }
    }

}

extension LexModelsV2ClientTypes {
    /// Contains specifications about the Amazon Lex build time generative AI capabilities from Amazon Bedrock that you can turn on for your bot.
    public struct BuildtimeSettings {
        /// An object containing specifications for the descriptive bot building feature.
        public var descriptiveBotBuilder: LexModelsV2ClientTypes.DescriptiveBotBuilderSpecification?
        /// Contains specifications for the sample utterance generation feature.
        public var sampleUtteranceGeneration: LexModelsV2ClientTypes.SampleUtteranceGenerationSpecification?

        public init(
            descriptiveBotBuilder: LexModelsV2ClientTypes.DescriptiveBotBuilderSpecification? = nil,
            sampleUtteranceGeneration: LexModelsV2ClientTypes.SampleUtteranceGenerationSpecification? = nil
        )
        {
            self.descriptiveBotBuilder = descriptiveBotBuilder
            self.sampleUtteranceGeneration = sampleUtteranceGeneration
        }
    }

}

extension LexModelsV2ClientTypes {

    public enum BuiltInIntentSortAttribute: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case intentsignature
        case sdkUnknown(Swift.String)

        public static var allCases: [BuiltInIntentSortAttribute] {
            return [
                .intentsignature
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .intentsignature: return "IntentSignature"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension LexModelsV2ClientTypes {
    /// Specifies attributes for sorting a list of built-in intents.
    public struct BuiltInIntentSortBy {
        /// The attribute to use to sort the list of built-in intents.
        /// This member is required.
        public var attribute: LexModelsV2ClientTypes.BuiltInIntentSortAttribute?
        /// The order to sort the list. You can specify ascending or descending order.
        /// This member is required.
        public var order: LexModelsV2ClientTypes.SortOrder?

        public init(
            attribute: LexModelsV2ClientTypes.BuiltInIntentSortAttribute? = nil,
            order: LexModelsV2ClientTypes.SortOrder? = nil
        )
        {
            self.attribute = attribute
            self.order = order
        }
    }

}

extension LexModelsV2ClientTypes {
    /// Provides summary information about a built-in intent for the [ ListBuiltInIntents ](https://docs.aws.amazon.com/lexv2/latest/APIReference/API_ListBuiltInIntents.html) operation.
    public struct BuiltInIntentSummary {
        /// The description of the intent.
        public var description: Swift.String?
        /// The signature of the built-in intent. Use this to specify the parent intent of a derived intent.
        public var intentSignature: Swift.String?

        public init(
            description: Swift.String? = nil,
            intentSignature: Swift.String? = nil
        )
        {
            self.description = description
            self.intentSignature = intentSignature
        }
    }

}

extension LexModelsV2ClientTypes {

    public enum BuiltInSlotTypeSortAttribute: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case slottypesignature
        case sdkUnknown(Swift.String)

        public static var allCases: [BuiltInSlotTypeSortAttribute] {
            return [
                .slottypesignature
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .slottypesignature: return "SlotTypeSignature"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension LexModelsV2ClientTypes {
    /// Specifies attributes for sorting a list of built-in slot types.
    public struct BuiltInSlotTypeSortBy {
        /// The attribute to use to sort the list of built-in intents.
        /// This member is required.
        public var attribute: LexModelsV2ClientTypes.BuiltInSlotTypeSortAttribute?
        /// The order to sort the list. You can choose ascending or descending.
        /// This member is required.
        public var order: LexModelsV2ClientTypes.SortOrder?

        public init(
            attribute: LexModelsV2ClientTypes.BuiltInSlotTypeSortAttribute? = nil,
            order: LexModelsV2ClientTypes.SortOrder? = nil
        )
        {
            self.attribute = attribute
            self.order = order
        }
    }

}

extension LexModelsV2ClientTypes {
    /// Provides summary information about a built-in slot type for the [ ListBuiltInSlotTypes ](https://docs.aws.amazon.com/lexv2/latest/APIReference/API_ListBuiltInSlotTypes.html) operation.
    public struct BuiltInSlotTypeSummary {
        /// The description of the built-in slot type.
        public var description: Swift.String?
        /// The signature of the built-in slot type. Use this to specify the parent slot type of a derived slot type.
        public var slotTypeSignature: Swift.String?

        public init(
            description: Swift.String? = nil,
            slotTypeSignature: Swift.String? = nil
        )
        {
            self.description = description
            self.slotTypeSignature = slotTypeSignature
        }
    }

}

extension LexModelsV2ClientTypes {
    /// Describes a button to use on a response card used to gather slot values from a user.
    public struct Button {
        /// The text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        /// This member is required.
        public var text: Swift.String?
        /// The value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        /// This member is required.
        public var value: Swift.String?

        public init(
            text: Swift.String? = nil,
            value: Swift.String? = nil
        )
        {
            self.text = text
            self.value = value
        }
    }

}

extension LexModelsV2ClientTypes {
    /// The Amazon CloudWatch Logs log group where the text and metadata logs are delivered. The log group must exist before you enable logging.
    public struct CloudWatchLogGroupLogDestination {
        /// The Amazon Resource Name (ARN) of the log group where text and metadata logs are delivered.
        /// This member is required.
        public var cloudWatchLogGroupArn: Swift.String?
        /// The prefix of the log stream name within the log group that you specified
        /// This member is required.
        public var logPrefix: Swift.String?

        public init(
            cloudWatchLogGroupArn: Swift.String? = nil,
            logPrefix: Swift.String? = nil
        )
        {
            self.cloudWatchLogGroupArn = cloudWatchLogGroupArn
            self.logPrefix = logPrefix
        }
    }

}

extension LexModelsV2ClientTypes {
    /// Subslot type composition.
    public struct SubSlotTypeComposition {
        /// Name of a constituent sub slot inside a composite slot.
        /// This member is required.
        public var name: Swift.String?
        /// The unique identifier assigned to a slot type. This refers to either a built-in slot type or the unique slotTypeId of a custom slot type.
        /// This member is required.
        public var slotTypeId: Swift.String?

        public init(
            name: Swift.String? = nil,
            slotTypeId: Swift.String? = nil
        )
        {
            self.name = name
            self.slotTypeId = slotTypeId
        }
    }

}

extension LexModelsV2ClientTypes {
    /// A composite slot is a combination of two or more slots that capture multiple pieces of information in a single user input.
    public struct CompositeSlotTypeSetting {
        /// Subslots in the composite slot.
        public var subSlots: [LexModelsV2ClientTypes.SubSlotTypeComposition]?

        public init(
            subSlots: [LexModelsV2ClientTypes.SubSlotTypeComposition]? = nil
        )
        {
            self.subSlots = subSlots
        }
    }

}

extension LexModelsV2ClientTypes {
    /// Provides an expression that evaluates to true or false.
    public struct Condition {
        /// The expression string that is evaluated.
        /// This member is required.
        public var expressionString: Swift.String?

        public init(
            expressionString: Swift.String? = nil
        )
        {
            self.expressionString = expressionString
        }
    }

}

extension LexModelsV2ClientTypes {

    public enum DialogActionType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case closeintent
        case confirmintent
        case elicitintent
        case elicitslot
        case endconversation
        case evaluateconditional
        case fulfillintent
        case invokedialogcodehook
        case startintent
        case sdkUnknown(Swift.String)

        public static var allCases: [DialogActionType] {
            return [
                .closeintent,
                .confirmintent,
                .elicitintent,
                .elicitslot,
                .endconversation,
                .evaluateconditional,
                .fulfillintent,
                .invokedialogcodehook,
                .startintent
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .closeintent: return "CloseIntent"
            case .confirmintent: return "ConfirmIntent"
            case .elicitintent: return "ElicitIntent"
            case .elicitslot: return "ElicitSlot"
            case .endconversation: return "EndConversation"
            case .evaluateconditional: return "EvaluateConditional"
            case .fulfillintent: return "FulfillIntent"
            case .invokedialogcodehook: return "InvokeDialogCodeHook"
            case .startintent: return "StartIntent"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension LexModelsV2ClientTypes {
    /// Defines the action that the bot executes at runtime when the conversation reaches this step.
    public struct DialogAction {
        /// If the dialog action is ElicitSlot, defines the slot to elicit from the user.
        public var slotToElicit: Swift.String?
        /// When true the next message for the intent is not used.
        public var suppressNextMessage: Swift.Bool?
        /// The action that the bot should execute.
        /// This member is required.
        public var type: LexModelsV2ClientTypes.DialogActionType?

        public init(
            slotToElicit: Swift.String? = nil,
            suppressNextMessage: Swift.Bool? = nil,
            type: LexModelsV2ClientTypes.DialogActionType? = nil
        )
        {
            self.slotToElicit = slotToElicit
            self.suppressNextMessage = suppressNextMessage
            self.type = type
        }
    }

}

extension LexModelsV2ClientTypes {

    public enum SlotShape: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case list
        case scalar
        case sdkUnknown(Swift.String)

        public static var allCases: [SlotShape] {
            return [
                .list,
                .scalar
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .list: return "List"
            case .scalar: return "Scalar"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension LexModelsV2ClientTypes {
    /// The value to set in a slot.
    public struct SlotValue {
        /// The value that Amazon Lex determines for the slot. The actual value depends on the setting of the value selection strategy for the bot. You can choose to use the value entered by the user, or you can have Amazon Lex choose the first value in the resolvedValues list.
        public var interpretedValue: Swift.String?

        public init(
            interpretedValue: Swift.String? = nil
        )
        {
            self.interpretedValue = interpretedValue
        }
    }

}

extension LexModelsV2ClientTypes {
    /// A custom response string that Amazon Lex sends to your application. You define the content and structure the string.
    public struct CustomPayload {
        /// The string that is sent to your application.
        /// This member is required.
        public var value: Swift.String?

        public init(
            value: Swift.String? = nil
        )
        {
            self.value = value
        }
    }

}

extension LexModelsV2ClientTypes {
    /// A card that is shown to the user by a messaging platform. You define the contents of the card, the card is displayed by the platform. When you use a response card, the response from the user is constrained to the text associated with a button on the card.
    public struct ImageResponseCard {
        /// A list of buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button.
        public var buttons: [LexModelsV2ClientTypes.Button]?
        /// The URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        public var imageUrl: Swift.String?
        /// The subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        public var subtitle: Swift.String?
        /// The title to display on the response card. The format of the title is determined by the platform displaying the response card.
        /// This member is required.
        public var title: Swift.String?

        public init(
            buttons: [LexModelsV2ClientTypes.Button]? = nil,
            imageUrl: Swift.String? = nil,
            subtitle: Swift.String? = nil,
            title: Swift.String? = nil
        )
        {
            self.buttons = buttons
            self.imageUrl = imageUrl
            self.subtitle = subtitle
            self.title = title
        }
    }

}

extension LexModelsV2ClientTypes {
    /// Defines an ASCII text message to send to the user.
    public struct PlainTextMessage {
        /// The message to send to the user.
        /// This member is required.
        public var value: Swift.String?

        public init(
            value: Swift.String? = nil
        )
        {
            self.value = value
        }
    }

}

extension LexModelsV2ClientTypes {
    /// Defines a Speech Synthesis Markup Language (SSML) prompt.
    public struct SSMLMessage {
        /// The SSML text that defines the prompt.
        /// This member is required.
        public var value: Swift.String?

        public init(
            value: Swift.String? = nil
        )
        {
            self.value = value
        }
    }

}

extension LexModelsV2ClientTypes {
    /// The object that provides message text and its type.
    public struct Message {
        /// A message in a custom format defined by the client application.
        public var customPayload: LexModelsV2ClientTypes.CustomPayload?
        /// A message that defines a response card that the client application can show to the user.
        public var imageResponseCard: LexModelsV2ClientTypes.ImageResponseCard?
        /// A message in plain text format.
        public var plainTextMessage: LexModelsV2ClientTypes.PlainTextMessage?
        /// A message in Speech Synthesis Markup Language (SSML).
        public var ssmlMessage: LexModelsV2ClientTypes.SSMLMessage?

        public init(
            customPayload: LexModelsV2ClientTypes.CustomPayload? = nil,
            imageResponseCard: LexModelsV2ClientTypes.ImageResponseCard? = nil,
            plainTextMessage: LexModelsV2ClientTypes.PlainTextMessage? = nil,
            ssmlMessage: LexModelsV2ClientTypes.SSMLMessage? = nil
        )
        {
            self.customPayload = customPayload
            self.imageResponseCard = imageResponseCard
            self.plainTextMessage = plainTextMessage
            self.ssmlMessage = ssmlMessage
        }
    }

}

extension LexModelsV2ClientTypes {
    /// Provides one or more messages that Amazon Lex should send to the user.
    public struct MessageGroup {
        /// The primary message that Amazon Lex should send to the user.
        /// This member is required.
        public var message: LexModelsV2ClientTypes.Message?
        /// Message variations to send to the user. When variations are defined, Amazon Lex chooses the primary message or one of the variations to send to the user.
        public var variations: [LexModelsV2ClientTypes.Message]?

        public init(
            message: LexModelsV2ClientTypes.Message? = nil,
            variations: [LexModelsV2ClientTypes.Message]? = nil
        )
        {
            self.message = message
            self.variations = variations
        }
    }

}

extension LexModelsV2ClientTypes {
    /// Specifies a list of message groups that Amazon Lex uses to respond the user input.
    public struct ResponseSpecification {
        /// Indicates whether the user can interrupt a speech response from Amazon Lex.
        public var allowInterrupt: Swift.Bool?
        /// A collection of responses that Amazon Lex can send to the user. Amazon Lex chooses the actual response to send at runtime.
        /// This member is required.
        public var messageGroups: [LexModelsV2ClientTypes.MessageGroup]?

        public init(
            allowInterrupt: Swift.Bool? = nil,
            messageGroups: [LexModelsV2ClientTypes.MessageGroup]? = nil
        )
        {
            self.allowInterrupt = allowInterrupt
            self.messageGroups = messageGroups
        }
    }

}

extension LexModelsV2ClientTypes {

    public enum ConversationEndState: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case dropped
        case failure
        case success
        case sdkUnknown(Swift.String)

        public static var allCases: [ConversationEndState] {
            return [
                .dropped,
                .failure,
                .success
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .dropped: return "Dropped"
            case .failure: return "Failure"
            case .success: return "Success"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension LexModelsV2ClientTypes {

    public enum TestResultMatchStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case executionerror
        case matched
        case mismatched
        case sdkUnknown(Swift.String)

        public static var allCases: [TestResultMatchStatus] {
            return [
                .executionerror,
                .matched,
                .mismatched
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .executionerror: return "ExecutionError"
            case .matched: return "Matched"
            case .mismatched: return "Mismatched"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension LexModelsV2ClientTypes {
    /// The item listing the evaluation of intent level success or failure.
    public struct ConversationLevelIntentClassificationResultItem {
        /// The intent name used in the evaluation of intent level success or failure.
        /// This member is required.
        public var intentName: Swift.String?
        /// The number of times the specific intent is used in the evaluation of intent level success or failure.
        /// This member is required.
        public var matchResult: LexModelsV2ClientTypes.TestResultMatchStatus?

        public init(
            intentName: Swift.String? = nil,
            matchResult: LexModelsV2ClientTypes.TestResultMatchStatus? = nil
        )
        {
            self.intentName = intentName
            self.matchResult = matchResult
        }
    }

}

extension LexModelsV2ClientTypes {
    /// The conversation level details of the conversation used in the test set.
    public struct ConversationLevelResultDetail {
        /// The success or failure of the streaming of the conversation.
        /// This member is required.
        public var endToEndResult: LexModelsV2ClientTypes.TestResultMatchStatus?
        /// The speech transcription success or failure details of the conversation.
        public var speechTranscriptionResult: LexModelsV2ClientTypes.TestResultMatchStatus?

        public init(
            endToEndResult: LexModelsV2ClientTypes.TestResultMatchStatus? = nil,
            speechTranscriptionResult: LexModelsV2ClientTypes.TestResultMatchStatus? = nil
        )
        {
            self.endToEndResult = endToEndResult
            self.speechTranscriptionResult = speechTranscriptionResult
        }
    }

}

extension LexModelsV2ClientTypes {
    /// The slots used for the slot resolution in the conversation.
    public struct ConversationLevelSlotResolutionResultItem {
        /// The intents used in the slots list for the slot resolution details.
        /// This member is required.
        public var intentName: Swift.String?
        /// The number of matching slots used in the slots listings for the slot resolution evaluation.
        /// This member is required.
        public var matchResult: LexModelsV2ClientTypes.TestResultMatchStatus?
        /// The slot name in the slots list for the slot resolution details.
        /// This member is required.
        public var slotName: Swift.String?

        public init(
            intentName: Swift.String? = nil,
            matchResult: LexModelsV2ClientTypes.TestResultMatchStatus? = nil,
            slotName: Swift.String? = nil
        )
        {
            self.intentName = intentName
            self.matchResult = matchResult
            self.slotName = slotName
        }
    }

}

extension LexModelsV2ClientTypes {
    /// The test result evaluation item at the conversation level.
    public struct ConversationLevelTestResultItem {
        /// The conversation Id of the test result evaluation item.
        /// This member is required.
        public var conversationId: Swift.String?
        /// The end-to-end success or failure of the test result evaluation item.
        /// This member is required.
        public var endToEndResult: LexModelsV2ClientTypes.TestResultMatchStatus?
        /// The intent classification of the test result evaluation item.
        /// This member is required.
        public var intentClassificationResults: [LexModelsV2ClientTypes.ConversationLevelIntentClassificationResultItem]?
        /// The slot success or failure of the test result evaluation item.
        /// This member is required.
        public var slotResolutionResults: [LexModelsV2ClientTypes.ConversationLevelSlotResolutionResultItem]?
        /// The speech transcription success or failure of the test result evaluation item.
        public var speechTranscriptionResult: LexModelsV2ClientTypes.TestResultMatchStatus?

        public init(
            conversationId: Swift.String? = nil,
            endToEndResult: LexModelsV2ClientTypes.TestResultMatchStatus? = nil,
            intentClassificationResults: [LexModelsV2ClientTypes.ConversationLevelIntentClassificationResultItem]? = nil,
            slotResolutionResults: [LexModelsV2ClientTypes.ConversationLevelSlotResolutionResultItem]? = nil,
            speechTranscriptionResult: LexModelsV2ClientTypes.TestResultMatchStatus? = nil
        )
        {
            self.conversationId = conversationId
            self.endToEndResult = endToEndResult
            self.intentClassificationResults = intentClassificationResults
            self.slotResolutionResults = slotResolutionResults
            self.speechTranscriptionResult = speechTranscriptionResult
        }
    }

}

extension LexModelsV2ClientTypes {
    /// The test set results data at the conversation level.
    public struct ConversationLevelTestResults {
        /// The item list in the test set results data at the conversation level.
        /// This member is required.
        public var items: [LexModelsV2ClientTypes.ConversationLevelTestResultItem]?

        public init(
            items: [LexModelsV2ClientTypes.ConversationLevelTestResultItem]? = nil
        )
        {
            self.items = items
        }
    }

}

extension LexModelsV2ClientTypes {
    /// The selection to filter the test set results data at the conversation level.
    public struct ConversationLevelTestResultsFilterBy {
        /// The selection of matched or mismatched end-to-end status to filter test set results data at the conversation level.
        public var endToEndResult: LexModelsV2ClientTypes.TestResultMatchStatus?

        public init(
            endToEndResult: LexModelsV2ClientTypes.TestResultMatchStatus? = nil
        )
        {
            self.endToEndResult = endToEndResult
        }
    }

}

extension LexModelsV2ClientTypes {

    public enum ConversationLogsInputModeFilter: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case speech
        case text
        case sdkUnknown(Swift.String)

        public static var allCases: [ConversationLogsInputModeFilter] {
            return [
                .speech,
                .text
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .speech: return "Speech"
            case .text: return "Text"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension LexModelsV2ClientTypes {
    /// The selected data source to filter the conversation log.
    public struct ConversationLogsDataSourceFilterBy {
        /// The end time for the conversation log.
        /// This member is required.
        public var endTime: Foundation.Date?
        /// The selection to filter by input mode for the conversation logs.
        /// This member is required.
        public var inputMode: LexModelsV2ClientTypes.ConversationLogsInputModeFilter?
        /// The start time for the conversation log.
        /// This member is required.
        public var startTime: Foundation.Date?

        public init(
            endTime: Foundation.Date? = nil,
            inputMode: LexModelsV2ClientTypes.ConversationLogsInputModeFilter? = nil,
            startTime: Foundation.Date? = nil
        )
        {
            self.endTime = endTime
            self.inputMode = inputMode
            self.startTime = startTime
        }
    }

}

extension LexModelsV2ClientTypes {
    /// The data source that uses conversation logs.
    public struct ConversationLogsDataSource {
        /// The bot alias Id from the conversation logs.
        /// This member is required.
        public var botAliasId: Swift.String?
        /// The bot Id from the conversation logs.
        /// This member is required.
        public var botId: Swift.String?
        /// The filter for the data source of the conversation log.
        /// This member is required.
        public var filter: LexModelsV2ClientTypes.ConversationLogsDataSourceFilterBy?
        /// The locale Id of the conversation log.
        /// This member is required.
        public var localeId: Swift.String?

        public init(
            botAliasId: Swift.String? = nil,
            botId: Swift.String? = nil,
            filter: LexModelsV2ClientTypes.ConversationLogsDataSourceFilterBy? = nil,
            localeId: Swift.String? = nil
        )
        {
            self.botAliasId = botAliasId
            self.botId = botId
            self.filter = filter
            self.localeId = localeId
        }
    }

}

extension LexModelsV2ClientTypes {
    /// Defines the Amazon CloudWatch Logs destination log group for conversation text logs.
    public struct TextLogDestination {
        /// Defines the Amazon CloudWatch Logs log group where text and metadata logs are delivered.
        /// This member is required.
        public var cloudWatch: LexModelsV2ClientTypes.CloudWatchLogGroupLogDestination?

        public init(
            cloudWatch: LexModelsV2ClientTypes.CloudWatchLogGroupLogDestination? = nil
        )
        {
            self.cloudWatch = cloudWatch
        }
    }

}

extension LexModelsV2ClientTypes {
    /// Defines settings to enable text conversation logs.
    public struct TextLogSetting {
        /// Defines the Amazon CloudWatch Logs destination log group for conversation text logs.
        /// This member is required.
        public var destination: LexModelsV2ClientTypes.TextLogDestination?
        /// Determines whether conversation logs should be stored for an alias.
        /// This member is required.
        public var enabled: Swift.Bool
        /// The option to enable selective conversation log capture for text.
        public var selectiveLoggingEnabled: Swift.Bool?

        public init(
            destination: LexModelsV2ClientTypes.TextLogDestination? = nil,
            enabled: Swift.Bool = false,
            selectiveLoggingEnabled: Swift.Bool? = nil
        )
        {
            self.destination = destination
            self.enabled = enabled
            self.selectiveLoggingEnabled = selectiveLoggingEnabled
        }
    }

}

extension LexModelsV2ClientTypes {
    /// Configures conversation logging that saves audio, text, and metadata for the conversations with your users.
    public struct ConversationLogSettings {
        /// The Amazon S3 settings for logging audio to an S3 bucket.
        public var audioLogSettings: [LexModelsV2ClientTypes.AudioLogSetting]?
        /// The Amazon CloudWatch Logs settings for logging text and metadata.
        public var textLogSettings: [LexModelsV2ClientTypes.TextLogSetting]?

        public init(
            audioLogSettings: [LexModelsV2ClientTypes.AudioLogSetting]? = nil,
            textLogSettings: [LexModelsV2ClientTypes.TextLogSetting]? = nil
        )
        {
            self.audioLogSettings = audioLogSettings
            self.textLogSettings = textLogSettings
        }
    }

}

public struct CreateBotInput {
    /// The list of bot members in a network to be created.
    public var botMembers: [LexModelsV2ClientTypes.BotMember]?
    /// The name of the bot. The bot name must be unique in the account that creates the bot.
    /// This member is required.
    public var botName: Swift.String?
    /// A list of tags to add to the bot. You can only add tags when you create a bot. You can't use the UpdateBot operation to update tags. To update tags, use the TagResource operation.
    public var botTags: [Swift.String: Swift.String]?
    /// The type of a bot to create.
    public var botType: LexModelsV2ClientTypes.BotType?
    /// Provides information on additional privacy protections Amazon Lex should use with the bot's data.
    /// This member is required.
    public var dataPrivacy: LexModelsV2ClientTypes.DataPrivacy?
    /// A description of the bot. It appears in lists to help you identify a particular bot.
    public var description: Swift.String?
    /// The time, in seconds, that Amazon Lex should keep information about a user's conversation with the bot. A user interaction remains active for the amount of time specified. If no conversation occurs during this time, the session expires and Amazon Lex deletes any data provided before the timeout. You can specify between 60 (1 minute) and 86,400 (24 hours) seconds.
    /// This member is required.
    public var idleSessionTTLInSeconds: Swift.Int?
    /// The Amazon Resource Name (ARN) of an IAM role that has permission to access the bot.
    /// This member is required.
    public var roleArn: Swift.String?
    /// A list of tags to add to the test alias for a bot. You can only add tags when you create a bot. You can't use the UpdateAlias operation to update tags. To update tags on the test alias, use the TagResource operation.
    public var testBotAliasTags: [Swift.String: Swift.String]?

    public init(
        botMembers: [LexModelsV2ClientTypes.BotMember]? = nil,
        botName: Swift.String? = nil,
        botTags: [Swift.String: Swift.String]? = nil,
        botType: LexModelsV2ClientTypes.BotType? = nil,
        dataPrivacy: LexModelsV2ClientTypes.DataPrivacy? = nil,
        description: Swift.String? = nil,
        idleSessionTTLInSeconds: Swift.Int? = nil,
        roleArn: Swift.String? = nil,
        testBotAliasTags: [Swift.String: Swift.String]? = nil
    )
    {
        self.botMembers = botMembers
        self.botName = botName
        self.botTags = botTags
        self.botType = botType
        self.dataPrivacy = dataPrivacy
        self.description = description
        self.idleSessionTTLInSeconds = idleSessionTTLInSeconds
        self.roleArn = roleArn
        self.testBotAliasTags = testBotAliasTags
    }
}

public struct CreateBotOutput {
    /// A unique identifier for a particular bot. You use this to identify the bot when you call other Amazon Lex API operations.
    public var botId: Swift.String?
    /// The list of bots in a network that was created.
    public var botMembers: [LexModelsV2ClientTypes.BotMember]?
    /// The name specified for the bot.
    public var botName: Swift.String?
    /// Shows the current status of the bot. The bot is first in the Creating status. Once the bot is read for use, it changes to the Available status. After the bot is created, you can use the DRAFT version of the bot.
    public var botStatus: LexModelsV2ClientTypes.BotStatus?
    /// A list of tags associated with the bot.
    public var botTags: [Swift.String: Swift.String]?
    /// The type of a bot that was created.
    public var botType: LexModelsV2ClientTypes.BotType?
    /// A timestamp indicating the date and time that the bot was created.
    public var creationDateTime: Foundation.Date?
    /// The data privacy settings specified for the bot.
    public var dataPrivacy: LexModelsV2ClientTypes.DataPrivacy?
    /// The description specified for the bot.
    public var description: Swift.String?
    /// The session idle time specified for the bot.
    public var idleSessionTTLInSeconds: Swift.Int?
    /// The IAM role specified for the bot.
    public var roleArn: Swift.String?
    /// A list of tags associated with the test alias for the bot.
    public var testBotAliasTags: [Swift.String: Swift.String]?

    public init(
        botId: Swift.String? = nil,
        botMembers: [LexModelsV2ClientTypes.BotMember]? = nil,
        botName: Swift.String? = nil,
        botStatus: LexModelsV2ClientTypes.BotStatus? = nil,
        botTags: [Swift.String: Swift.String]? = nil,
        botType: LexModelsV2ClientTypes.BotType? = nil,
        creationDateTime: Foundation.Date? = nil,
        dataPrivacy: LexModelsV2ClientTypes.DataPrivacy? = nil,
        description: Swift.String? = nil,
        idleSessionTTLInSeconds: Swift.Int? = nil,
        roleArn: Swift.String? = nil,
        testBotAliasTags: [Swift.String: Swift.String]? = nil
    )
    {
        self.botId = botId
        self.botMembers = botMembers
        self.botName = botName
        self.botStatus = botStatus
        self.botTags = botTags
        self.botType = botType
        self.creationDateTime = creationDateTime
        self.dataPrivacy = dataPrivacy
        self.description = description
        self.idleSessionTTLInSeconds = idleSessionTTLInSeconds
        self.roleArn = roleArn
        self.testBotAliasTags = testBotAliasTags
    }
}

extension LexModelsV2ClientTypes {
    /// Determines whether Amazon Lex will use Amazon Comprehend to detect the sentiment of user utterances.
    public struct SentimentAnalysisSettings {
        /// Sets whether Amazon Lex uses Amazon Comprehend to detect the sentiment of user utterances.
        /// This member is required.
        public var detectSentiment: Swift.Bool

        public init(
            detectSentiment: Swift.Bool = false
        )
        {
            self.detectSentiment = detectSentiment
        }
    }

}

public struct CreateBotAliasInput {
    /// Maps configuration information to a specific locale. You can use this parameter to specify a specific Lambda function to run different functions in different locales.
    public var botAliasLocaleSettings: [Swift.String: LexModelsV2ClientTypes.BotAliasLocaleSettings]?
    /// The alias to create. The name must be unique for the bot.
    /// This member is required.
    public var botAliasName: Swift.String?
    /// The unique identifier of the bot that the alias applies to.
    /// This member is required.
    public var botId: Swift.String?
    /// The version of the bot that this alias points to. You can use the [UpdateBotAlias](https://docs.aws.amazon.com/lexv2/latest/APIReference/API_UpdateBotAlias.html) operation to change the bot version associated with the alias.
    public var botVersion: Swift.String?
    /// Specifies whether Amazon Lex logs text and audio for a conversation with the bot. When you enable conversation logs, text logs store text input, transcripts of audio input, and associated metadata in Amazon CloudWatch Logs. Audio logs store audio input in Amazon S3.
    public var conversationLogSettings: LexModelsV2ClientTypes.ConversationLogSettings?
    /// A description of the alias. Use this description to help identify the alias.
    public var description: Swift.String?
    /// Determines whether Amazon Lex will use Amazon Comprehend to detect the sentiment of user utterances.
    public var sentimentAnalysisSettings: LexModelsV2ClientTypes.SentimentAnalysisSettings?
    /// A list of tags to add to the bot alias. You can only add tags when you create an alias, you can't use the UpdateBotAlias operation to update the tags on a bot alias. To update tags, use the TagResource operation.
    public var tags: [Swift.String: Swift.String]?

    public init(
        botAliasLocaleSettings: [Swift.String: LexModelsV2ClientTypes.BotAliasLocaleSettings]? = nil,
        botAliasName: Swift.String? = nil,
        botId: Swift.String? = nil,
        botVersion: Swift.String? = nil,
        conversationLogSettings: LexModelsV2ClientTypes.ConversationLogSettings? = nil,
        description: Swift.String? = nil,
        sentimentAnalysisSettings: LexModelsV2ClientTypes.SentimentAnalysisSettings? = nil,
        tags: [Swift.String: Swift.String]? = nil
    )
    {
        self.botAliasLocaleSettings = botAliasLocaleSettings
        self.botAliasName = botAliasName
        self.botId = botId
        self.botVersion = botVersion
        self.conversationLogSettings = conversationLogSettings
        self.description = description
        self.sentimentAnalysisSettings = sentimentAnalysisSettings
        self.tags = tags
    }
}

public struct CreateBotAliasOutput {
    /// The unique identifier of the bot alias.
    public var botAliasId: Swift.String?
    /// Configuration information for a specific locale.
    public var botAliasLocaleSettings: [Swift.String: LexModelsV2ClientTypes.BotAliasLocaleSettings]?
    /// The name specified for the bot alias.
    public var botAliasName: Swift.String?
    /// The current status of the alias. The alias is first put into the Creating state. When the alias is ready to be used, it is put into the Available state. You can use the DescribeBotAlias operation to get the current state of an alias.
    public var botAliasStatus: LexModelsV2ClientTypes.BotAliasStatus?
    /// The unique identifier of the bot that this alias applies to.
    public var botId: Swift.String?
    /// The version of the bot associated with this alias.
    public var botVersion: Swift.String?
    /// The conversation log settings specified for the alias.
    public var conversationLogSettings: LexModelsV2ClientTypes.ConversationLogSettings?
    /// A Unix timestamp indicating the date and time that the bot alias was created.
    public var creationDateTime: Foundation.Date?
    /// The description specified for the bot alias.
    public var description: Swift.String?
    /// Determines whether Amazon Lex will use Amazon Comprehend to detect the sentiment of user utterances.
    public var sentimentAnalysisSettings: LexModelsV2ClientTypes.SentimentAnalysisSettings?
    /// A list of tags associated with the bot alias.
    public var tags: [Swift.String: Swift.String]?

    public init(
        botAliasId: Swift.String? = nil,
        botAliasLocaleSettings: [Swift.String: LexModelsV2ClientTypes.BotAliasLocaleSettings]? = nil,
        botAliasName: Swift.String? = nil,
        botAliasStatus: LexModelsV2ClientTypes.BotAliasStatus? = nil,
        botId: Swift.String? = nil,
        botVersion: Swift.String? = nil,
        conversationLogSettings: LexModelsV2ClientTypes.ConversationLogSettings? = nil,
        creationDateTime: Foundation.Date? = nil,
        description: Swift.String? = nil,
        sentimentAnalysisSettings: LexModelsV2ClientTypes.SentimentAnalysisSettings? = nil,
        tags: [Swift.String: Swift.String]? = nil
    )
    {
        self.botAliasId = botAliasId
        self.botAliasLocaleSettings = botAliasLocaleSettings
        self.botAliasName = botAliasName
        self.botAliasStatus = botAliasStatus
        self.botId = botId
        self.botVersion = botVersion
        self.conversationLogSettings = conversationLogSettings
        self.creationDateTime = creationDateTime
        self.description = description
        self.sentimentAnalysisSettings = sentimentAnalysisSettings
        self.tags = tags
    }
}

extension LexModelsV2ClientTypes {
    /// Contains specifications for the assisted slot resolution feature.
    public struct SlotResolutionImprovementSpecification {
        /// An object containing information about the Amazon Bedrock model used to assist slot resolution.
        public var bedrockModelSpecification: LexModelsV2ClientTypes.BedrockModelSpecification?
        /// Specifies whether assisted slot resolution is turned on or off.
        /// This member is required.
        public var enabled: Swift.Bool

        public init(
            bedrockModelSpecification: LexModelsV2ClientTypes.BedrockModelSpecification? = nil,
            enabled: Swift.Bool = false
        )
        {
            self.bedrockModelSpecification = bedrockModelSpecification
            self.enabled = enabled
        }
    }

}

extension LexModelsV2ClientTypes {
    /// Contains specifications about the Amazon Lex runtime generative AI capabilities from Amazon Bedrock that you can turn on for your bot.
    public struct RuntimeSettings {
        /// An object containing specifications for the assisted slot resolution feature.
        public var slotResolutionImprovement: LexModelsV2ClientTypes.SlotResolutionImprovementSpecification?

        public init(
            slotResolutionImprovement: LexModelsV2ClientTypes.SlotResolutionImprovementSpecification? = nil
        )
        {
            self.slotResolutionImprovement = slotResolutionImprovement
        }
    }

}

extension LexModelsV2ClientTypes {
    /// Contains specifications about the generative AI capabilities from Amazon Bedrock that you can turn on for your bot.
    public struct GenerativeAISettings {
        /// Contains specifications about the Amazon Lex build time generative AI capabilities from Amazon Bedrock that you can turn on for your bot.
        public var buildtimeSettings: LexModelsV2ClientTypes.BuildtimeSettings?
        /// Contains specifications about the Amazon Lex runtime generative AI capabilities from Amazon Bedrock that you can turn on for your bot.
        public var runtimeSettings: LexModelsV2ClientTypes.RuntimeSettings?

        public init(
            buildtimeSettings: LexModelsV2ClientTypes.BuildtimeSettings? = nil,
            runtimeSettings: LexModelsV2ClientTypes.RuntimeSettings? = nil
        )
        {
            self.buildtimeSettings = buildtimeSettings
            self.runtimeSettings = runtimeSettings
        }
    }

}

public struct CreateBotLocaleInput {
    /// The identifier of the bot to create the locale for.
    /// This member is required.
    public var botId: Swift.String?
    /// The version of the bot to create the locale for. This can only be the draft version of the bot.
    /// This member is required.
    public var botVersion: Swift.String?
    /// A description of the bot locale. Use this to help identify the bot locale in lists.
    public var description: Swift.String?
    /// Contains specifications about the generative AI capabilities from Amazon Bedrock that you can turn on for your bot.
    public var generativeAISettings: LexModelsV2ClientTypes.GenerativeAISettings?
    /// The identifier of the language and locale that the bot will be used in. The string must match one of the supported locales. All of the intents, slot types, and slots used in the bot must have the same locale. For more information, see [Supported languages](https://docs.aws.amazon.com/lexv2/latest/dg/how-languages.html).
    /// This member is required.
    public var localeId: Swift.String?
    /// Determines the threshold where Amazon Lex will insert the AMAZON.FallbackIntent, AMAZON.KendraSearchIntent, or both when returning alternative intents. AMAZON.FallbackIntent and AMAZON.KendraSearchIntent are only inserted if they are configured for the bot. For example, suppose a bot is configured with the confidence threshold of 0.80 and the AMAZON.FallbackIntent. Amazon Lex returns three alternative intents with the following confidence scores: IntentA (0.70), IntentB (0.60), IntentC (0.50). The response from the RecognizeText operation would be:
    ///
    /// * AMAZON.FallbackIntent
    ///
    /// * IntentA
    ///
    /// * IntentB
    ///
    /// * IntentC
    /// This member is required.
    public var nluIntentConfidenceThreshold: Swift.Double?
    /// The Amazon Polly voice ID that Amazon Lex uses for voice interaction with the user.
    public var voiceSettings: LexModelsV2ClientTypes.VoiceSettings?

    public init(
        botId: Swift.String? = nil,
        botVersion: Swift.String? = nil,
        description: Swift.String? = nil,
        generativeAISettings: LexModelsV2ClientTypes.GenerativeAISettings? = nil,
        localeId: Swift.String? = nil,
        nluIntentConfidenceThreshold: Swift.Double? = nil,
        voiceSettings: LexModelsV2ClientTypes.VoiceSettings? = nil
    )
    {
        self.botId = botId
        self.botVersion = botVersion
        self.description = description
        self.generativeAISettings = generativeAISettings
        self.localeId = localeId
        self.nluIntentConfidenceThreshold = nluIntentConfidenceThreshold
        self.voiceSettings = voiceSettings
    }
}

public struct CreateBotLocaleOutput {
    /// The specified bot identifier.
    public var botId: Swift.String?
    /// The status of the bot. When the status is Creating the bot locale is being configured. When the status is Building Amazon Lex is building the bot for testing and use. If the status of the bot is ReadyExpressTesting, you can test the bot using the exact utterances specified in the bots' intents. When the bot is ready for full testing or to run, the status is Built. If there was a problem with building the bot, the status is Failed. If the bot was saved but not built, the status is NotBuilt.
    public var botLocaleStatus: LexModelsV2ClientTypes.BotLocaleStatus?
    /// The specified bot version.
    public var botVersion: Swift.String?
    /// A timestamp specifying the date and time that the bot locale was created.
    public var creationDateTime: Foundation.Date?
    /// The specified description of the bot locale.
    public var description: Swift.String?
    /// Contains specifications about the generative AI capabilities from Amazon Bedrock that you can turn on for your bot.
    public var generativeAISettings: LexModelsV2ClientTypes.GenerativeAISettings?
    /// The specified locale identifier.
    public var localeId: Swift.String?
    /// The specified locale name.
    public var localeName: Swift.String?
    /// The specified confidence threshold for inserting the AMAZON.FallbackIntent and AMAZON.KendraSearchIntent intents.
    public var nluIntentConfidenceThreshold: Swift.Double?
    /// The Amazon Polly voice ID that Amazon Lex uses for voice interaction with the user.
    public var voiceSettings: LexModelsV2ClientTypes.VoiceSettings?

    public init(
        botId: Swift.String? = nil,
        botLocaleStatus: LexModelsV2ClientTypes.BotLocaleStatus? = nil,
        botVersion: Swift.String? = nil,
        creationDateTime: Foundation.Date? = nil,
        description: Swift.String? = nil,
        generativeAISettings: LexModelsV2ClientTypes.GenerativeAISettings? = nil,
        localeId: Swift.String? = nil,
        localeName: Swift.String? = nil,
        nluIntentConfidenceThreshold: Swift.Double? = nil,
        voiceSettings: LexModelsV2ClientTypes.VoiceSettings? = nil
    )
    {
        self.botId = botId
        self.botLocaleStatus = botLocaleStatus
        self.botVersion = botVersion
        self.creationDateTime = creationDateTime
        self.description = description
        self.generativeAISettings = generativeAISettings
        self.localeId = localeId
        self.localeName = localeName
        self.nluIntentConfidenceThreshold = nluIntentConfidenceThreshold
        self.voiceSettings = voiceSettings
    }
}

public struct CreateBotReplicaInput {
    /// The request for the unique bot ID of the source bot to be replicated in the secondary region.
    /// This member is required.
    public var botId: Swift.String?
    /// The request for the secondary region that will be used in the replication of the source bot.
    /// This member is required.
    public var replicaRegion: Swift.String?

    public init(
        botId: Swift.String? = nil,
        replicaRegion: Swift.String? = nil
    )
    {
        self.botId = botId
        self.replicaRegion = replicaRegion
    }
}

public struct CreateBotReplicaOutput {
    /// The unique bot ID of the replicated bot generated.
    public var botId: Swift.String?
    /// The operational status of the replicated bot generated.
    public var botReplicaStatus: LexModelsV2ClientTypes.BotReplicaStatus?
    /// The creation date and time of the replicated bot generated.
    public var creationDateTime: Foundation.Date?
    /// The region of the replicated bot generated.
    public var replicaRegion: Swift.String?
    /// The source region for the source bot used for the replicated bot generated.
    public var sourceRegion: Swift.String?

    public init(
        botId: Swift.String? = nil,
        botReplicaStatus: LexModelsV2ClientTypes.BotReplicaStatus? = nil,
        creationDateTime: Foundation.Date? = nil,
        replicaRegion: Swift.String? = nil,
        sourceRegion: Swift.String? = nil
    )
    {
        self.botId = botId
        self.botReplicaStatus = botReplicaStatus
        self.creationDateTime = creationDateTime
        self.replicaRegion = replicaRegion
        self.sourceRegion = sourceRegion
    }
}

public struct CreateBotVersionInput {
    /// The identifier of the bot to create the version for.
    /// This member is required.
    public var botId: Swift.String?
    /// Specifies the locales that Amazon Lex adds to this version. You can choose the Draft version or any other previously published version for each locale. When you specify a source version, the locale data is copied from the source version to the new version.
    /// This member is required.
    public var botVersionLocaleSpecification: [Swift.String: LexModelsV2ClientTypes.BotVersionLocaleDetails]?
    /// A description of the version. Use the description to help identify the version in lists.
    public var description: Swift.String?

    public init(
        botId: Swift.String? = nil,
        botVersionLocaleSpecification: [Swift.String: LexModelsV2ClientTypes.BotVersionLocaleDetails]? = nil,
        description: Swift.String? = nil
    )
    {
        self.botId = botId
        self.botVersionLocaleSpecification = botVersionLocaleSpecification
        self.description = description
    }
}

public struct CreateBotVersionOutput {
    /// The bot identifier specified in the request.
    public var botId: Swift.String?
    /// When you send a request to create or update a bot, Amazon Lex sets the status response element to Creating. After Amazon Lex builds the bot, it sets status to Available. If Amazon Lex can't build the bot, it sets status to Failed.
    public var botStatus: LexModelsV2ClientTypes.BotStatus?
    /// The version number assigned to the version.
    public var botVersion: Swift.String?
    /// The source versions used for each locale in the new version.
    public var botVersionLocaleSpecification: [Swift.String: LexModelsV2ClientTypes.BotVersionLocaleDetails]?
    /// A timestamp of the date and time that the version was created.
    public var creationDateTime: Foundation.Date?
    /// The description of the version specified in the request.
    public var description: Swift.String?

    public init(
        botId: Swift.String? = nil,
        botStatus: LexModelsV2ClientTypes.BotStatus? = nil,
        botVersion: Swift.String? = nil,
        botVersionLocaleSpecification: [Swift.String: LexModelsV2ClientTypes.BotVersionLocaleDetails]? = nil,
        creationDateTime: Foundation.Date? = nil,
        description: Swift.String? = nil
    )
    {
        self.botId = botId
        self.botStatus = botStatus
        self.botVersion = botVersion
        self.botVersionLocaleSpecification = botVersionLocaleSpecification
        self.creationDateTime = creationDateTime
        self.description = description
    }
}

extension LexModelsV2ClientTypes {

    public enum ImportExportFileFormat: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case csv
        case lexjson
        case tsv
        case sdkUnknown(Swift.String)

        public static var allCases: [ImportExportFileFormat] {
            return [
                .csv,
                .lexjson,
                .tsv
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .csv: return "CSV"
            case .lexjson: return "LexJson"
            case .tsv: return "TSV"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension LexModelsV2ClientTypes {
    /// Provides the parameters required for exporting a custom vocabulary.
    public struct CustomVocabularyExportSpecification {
        /// The identifier of the bot that contains the custom vocabulary to export.
        /// This member is required.
        public var botId: Swift.String?
        /// The version of the bot that contains the custom vocabulary to export.
        /// This member is required.
        public var botVersion: Swift.String?
        /// The locale of the bot that contains the custom vocabulary to export.
        /// This member is required.
        public var localeId: Swift.String?

        public init(
            botId: Swift.String? = nil,
            botVersion: Swift.String? = nil,
            localeId: Swift.String? = nil
        )
        {
            self.botId = botId
            self.botVersion = botVersion
            self.localeId = localeId
        }
    }

}

extension LexModelsV2ClientTypes {
    /// Contains information about the test set that is exported.
    public struct TestSetExportSpecification {
        /// The unique identifier of the test set.
        /// This member is required.
        public var testSetId: Swift.String?

        public init(
            testSetId: Swift.String? = nil
        )
        {
            self.testSetId = testSetId
        }
    }

}

extension LexModelsV2ClientTypes {
    /// Provides information about the bot or bot locale that you want to export. You can specify the botExportSpecification or the botLocaleExportSpecification, but not both.
    public struct ExportResourceSpecification {
        /// Parameters for exporting a bot.
        public var botExportSpecification: LexModelsV2ClientTypes.BotExportSpecification?
        /// Parameters for exporting a bot locale.
        public var botLocaleExportSpecification: LexModelsV2ClientTypes.BotLocaleExportSpecification?
        /// The parameters required to export a custom vocabulary.
        public var customVocabularyExportSpecification: LexModelsV2ClientTypes.CustomVocabularyExportSpecification?
        /// Specifications for the test set that is exported as a resource.
        public var testSetExportSpecification: LexModelsV2ClientTypes.TestSetExportSpecification?

        public init(
            botExportSpecification: LexModelsV2ClientTypes.BotExportSpecification? = nil,
            botLocaleExportSpecification: LexModelsV2ClientTypes.BotLocaleExportSpecification? = nil,
            customVocabularyExportSpecification: LexModelsV2ClientTypes.CustomVocabularyExportSpecification? = nil,
            testSetExportSpecification: LexModelsV2ClientTypes.TestSetExportSpecification? = nil
        )
        {
            self.botExportSpecification = botExportSpecification
            self.botLocaleExportSpecification = botLocaleExportSpecification
            self.customVocabularyExportSpecification = customVocabularyExportSpecification
            self.testSetExportSpecification = testSetExportSpecification
        }
    }

}

public struct CreateExportInput {
    /// The file format of the bot or bot locale definition files.
    /// This member is required.
    public var fileFormat: LexModelsV2ClientTypes.ImportExportFileFormat?
    /// An password to use to encrypt the exported archive. Using a password is optional, but you should encrypt the archive to protect the data in transit between Amazon Lex and your local computer.
    public var filePassword: Swift.String?
    /// Specifies the type of resource to export, either a bot or a bot locale. You can only specify one type of resource to export.
    /// This member is required.
    public var resourceSpecification: LexModelsV2ClientTypes.ExportResourceSpecification?

    public init(
        fileFormat: LexModelsV2ClientTypes.ImportExportFileFormat? = nil,
        filePassword: Swift.String? = nil,
        resourceSpecification: LexModelsV2ClientTypes.ExportResourceSpecification? = nil
    )
    {
        self.fileFormat = fileFormat
        self.filePassword = filePassword
        self.resourceSpecification = resourceSpecification
    }
}

extension CreateExportInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateExportInput(fileFormat: \(Swift.String(describing: fileFormat)), resourceSpecification: \(Swift.String(describing: resourceSpecification)), filePassword: \"CONTENT_REDACTED\")"}
}

extension LexModelsV2ClientTypes {

    public enum ExportStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case completed
        case deleting
        case failed
        case inprogress
        case sdkUnknown(Swift.String)

        public static var allCases: [ExportStatus] {
            return [
                .completed,
                .deleting,
                .failed,
                .inprogress
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .completed: return "Completed"
            case .deleting: return "Deleting"
            case .failed: return "Failed"
            case .inprogress: return "InProgress"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

public struct CreateExportOutput {
    /// The date and time that the request to export a bot was created.
    public var creationDateTime: Foundation.Date?
    /// An identifier for a specific request to create an export.
    public var exportId: Swift.String?
    /// The status of the export. When the status is Completed, you can use the [DescribeExport](https://docs.aws.amazon.com/lexv2/latest/APIReference/API_DescribeExport.html) operation to get the pre-signed S3 URL link to your exported bot or bot locale.
    public var exportStatus: LexModelsV2ClientTypes.ExportStatus?
    /// The file format used for the bot or bot locale definition files.
    public var fileFormat: LexModelsV2ClientTypes.ImportExportFileFormat?
    /// A description of the type of resource that was exported, either a bot or a bot locale.
    public var resourceSpecification: LexModelsV2ClientTypes.ExportResourceSpecification?

    public init(
        creationDateTime: Foundation.Date? = nil,
        exportId: Swift.String? = nil,
        exportStatus: LexModelsV2ClientTypes.ExportStatus? = nil,
        fileFormat: LexModelsV2ClientTypes.ImportExportFileFormat? = nil,
        resourceSpecification: LexModelsV2ClientTypes.ExportResourceSpecification? = nil
    )
    {
        self.creationDateTime = creationDateTime
        self.exportId = exportId
        self.exportStatus = exportStatus
        self.fileFormat = fileFormat
        self.resourceSpecification = resourceSpecification
    }
}

extension LexModelsV2ClientTypes {
    /// Settings that determine the Lambda function that Amazon Lex uses for processing user responses.
    public struct DialogCodeHookSettings {
        /// Enables the dialog code hook so that it processes user requests.
        /// This member is required.
        public var enabled: Swift.Bool

        public init(
            enabled: Swift.Bool = false
        )
        {
            self.enabled = enabled
        }
    }

}

extension LexModelsV2ClientTypes {
    /// Provides settings for a message that is sent to the user when a fulfillment Lambda function starts running.
    public struct FulfillmentStartResponseSpecification {
        /// Determines whether the user can interrupt the start message while it is playing.
        public var allowInterrupt: Swift.Bool?
        /// The delay between when the Lambda fulfillment function starts running and the start message is played. If the Lambda function returns before the delay is over, the start message isn't played.
        /// This member is required.
        public var delayInSeconds: Swift.Int?
        /// 1 - 5 message groups that contain start messages. Amazon Lex chooses one of the messages to play to the user.
        /// This member is required.
        public var messageGroups: [LexModelsV2ClientTypes.MessageGroup]?

        public init(
            allowInterrupt: Swift.Bool? = nil,
            delayInSeconds: Swift.Int? = nil,
            messageGroups: [LexModelsV2ClientTypes.MessageGroup]? = nil
        )
        {
            self.allowInterrupt = allowInterrupt
            self.delayInSeconds = delayInSeconds
            self.messageGroups = messageGroups
        }
    }

}

extension LexModelsV2ClientTypes {
    /// Provides settings for a message that is sent periodically to the user while a fulfillment Lambda function is running.
    public struct FulfillmentUpdateResponseSpecification {
        /// Determines whether the user can interrupt an update message while it is playing.
        public var allowInterrupt: Swift.Bool?
        /// The frequency that a message is sent to the user. When the period ends, Amazon Lex chooses a message from the message groups and plays it to the user. If the fulfillment Lambda returns before the first period ends, an update message is not played to the user.
        /// This member is required.
        public var frequencyInSeconds: Swift.Int?
        /// 1 - 5 message groups that contain update messages. Amazon Lex chooses one of the messages to play to the user.
        /// This member is required.
        public var messageGroups: [LexModelsV2ClientTypes.MessageGroup]?

        public init(
            allowInterrupt: Swift.Bool? = nil,
            frequencyInSeconds: Swift.Int? = nil,
            messageGroups: [LexModelsV2ClientTypes.MessageGroup]? = nil
        )
        {
            self.allowInterrupt = allowInterrupt
            self.frequencyInSeconds = frequencyInSeconds
            self.messageGroups = messageGroups
        }
    }

}

extension LexModelsV2ClientTypes {
    /// Provides information for updating the user on the progress of fulfilling an intent.
    public struct FulfillmentUpdatesSpecification {
        /// Determines whether fulfillment updates are sent to the user. When this field is true, updates are sent. If the active field is set to true, the startResponse, updateResponse, and timeoutInSeconds fields are required.
        /// This member is required.
        public var active: Swift.Bool?
        /// Provides configuration information for the message sent to users when the fulfillment Lambda functions starts running.
        public var startResponse: LexModelsV2ClientTypes.FulfillmentStartResponseSpecification?
        /// The length of time that the fulfillment Lambda function should run before it times out.
        public var timeoutInSeconds: Swift.Int?
        /// Provides configuration information for messages sent periodically to the user while the fulfillment Lambda function is running.
        public var updateResponse: LexModelsV2ClientTypes.FulfillmentUpdateResponseSpecification?

        public init(
            active: Swift.Bool? = nil,
            startResponse: LexModelsV2ClientTypes.FulfillmentStartResponseSpecification? = nil,
            timeoutInSeconds: Swift.Int? = nil,
            updateResponse: LexModelsV2ClientTypes.FulfillmentUpdateResponseSpecification? = nil
        )
        {
            self.active = active
            self.startResponse = startResponse
            self.timeoutInSeconds = timeoutInSeconds
            self.updateResponse = updateResponse
        }
    }

}

extension LexModelsV2ClientTypes {
    /// A context that must be active for an intent to be selected by Amazon Lex.
    public struct InputContext {
        /// The name of the context.
        /// This member is required.
        public var name: Swift.String?

        public init(
            name: Swift.String? = nil
        )
        {
            self.name = name
        }
    }

}

extension LexModelsV2ClientTypes {
    /// Settings that specify the dialog code hook that is called by Amazon Lex between eliciting slot values.
    public struct ElicitationCodeHookInvocationSetting {
        /// Indicates whether a Lambda function should be invoked for the dialog.
        /// This member is required.
        public var enableCodeHookInvocation: Swift.Bool?
        /// A label that indicates the dialog step from which the dialog code hook is happening.
        public var invocationLabel: Swift.String?

        public init(
            enableCodeHookInvocation: Swift.Bool? = nil,
            invocationLabel: Swift.String? = nil
        )
        {
            self.enableCodeHookInvocation = enableCodeHookInvocation
            self.invocationLabel = invocationLabel
        }
    }

}

extension LexModelsV2ClientTypes {

    public enum MessageSelectionStrategy: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case ordered
        case random
        case sdkUnknown(Swift.String)

        public static var allCases: [MessageSelectionStrategy] {
            return [
                .ordered,
                .random
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .ordered: return "Ordered"
            case .random: return "Random"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension LexModelsV2ClientTypes {

    /// The attempt name of attempts of a prompt.
    public enum PromptAttempt: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case initial
        case retry1
        case retry2
        case retry3
        case retry4
        case retry5
        case sdkUnknown(Swift.String)

        public static var allCases: [PromptAttempt] {
            return [
                .initial,
                .retry1,
                .retry2,
                .retry3,
                .retry4,
                .retry5
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .initial: return "Initial"
            case .retry1: return "Retry1"
            case .retry2: return "Retry2"
            case .retry3: return "Retry3"
            case .retry4: return "Retry4"
            case .retry5: return "Retry5"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension LexModelsV2ClientTypes {
    /// Specifies the text input specifications.
    public struct TextInputSpecification {
        /// Time for which a bot waits before re-prompting a customer for text input.
        /// This member is required.
        public var startTimeoutMs: Swift.Int?

        public init(
            startTimeoutMs: Swift.Int? = nil
        )
        {
            self.startTimeoutMs = startTimeoutMs
        }
    }

}

extension LexModelsV2ClientTypes {
    /// Specifies the settings on a prompt attempt.
    public struct PromptAttemptSpecification {
        /// Indicates whether the user can interrupt a speech prompt attempt from the bot.
        public var allowInterrupt: Swift.Bool?
        /// Indicates the allowed input types of the prompt attempt.
        /// This member is required.
        public var allowedInputTypes: LexModelsV2ClientTypes.AllowedInputTypes?
        /// Specifies the settings on audio and DTMF input.
        public var audioAndDTMFInputSpecification: LexModelsV2ClientTypes.AudioAndDTMFInputSpecification?
        /// Specifies the settings on text input.
        public var textInputSpecification: LexModelsV2ClientTypes.TextInputSpecification?

        public init(
            allowInterrupt: Swift.Bool? = nil,
            allowedInputTypes: LexModelsV2ClientTypes.AllowedInputTypes? = nil,
            audioAndDTMFInputSpecification: LexModelsV2ClientTypes.AudioAndDTMFInputSpecification? = nil,
            textInputSpecification: LexModelsV2ClientTypes.TextInputSpecification? = nil
        )
        {
            self.allowInterrupt = allowInterrupt
            self.allowedInputTypes = allowedInputTypes
            self.audioAndDTMFInputSpecification = audioAndDTMFInputSpecification
            self.textInputSpecification = textInputSpecification
        }
    }

}

extension LexModelsV2ClientTypes {
    /// Specifies a list of message groups that Amazon Lex sends to a user to elicit a response.
    public struct PromptSpecification {
        /// Indicates whether the user can interrupt a speech prompt from the bot.
        public var allowInterrupt: Swift.Bool?
        /// The maximum number of times the bot tries to elicit a response from the user using this prompt.
        /// This member is required.
        public var maxRetries: Swift.Int?
        /// A collection of messages that Amazon Lex can send to the user. Amazon Lex chooses the actual message to send at runtime.
        /// This member is required.
        public var messageGroups: [LexModelsV2ClientTypes.MessageGroup]?
        /// Indicates how a message is selected from a message group among retries.
        public var messageSelectionStrategy: LexModelsV2ClientTypes.MessageSelectionStrategy?
        /// Specifies the advanced settings on each attempt of the prompt.
        public var promptAttemptsSpecification: [Swift.String: LexModelsV2ClientTypes.PromptAttemptSpecification]?

        public init(
            allowInterrupt: Swift.Bool? = nil,
            maxRetries: Swift.Int? = nil,
            messageGroups: [LexModelsV2ClientTypes.MessageGroup]? = nil,
            messageSelectionStrategy: LexModelsV2ClientTypes.MessageSelectionStrategy? = nil,
            promptAttemptsSpecification: [Swift.String: LexModelsV2ClientTypes.PromptAttemptSpecification]? = nil
        )
        {
            self.allowInterrupt = allowInterrupt
            self.maxRetries = maxRetries
            self.messageGroups = messageGroups
            self.messageSelectionStrategy = messageSelectionStrategy
            self.promptAttemptsSpecification = promptAttemptsSpecification
        }
    }

}

extension LexModelsV2ClientTypes {
    /// Provides configuration information for the AMAZON.KendraSearchIntent intent. When you use this intent, Amazon Lex searches the specified Amazon Kendra index and returns documents from the index that match the user's utterance.
    public struct KendraConfiguration {
        /// The Amazon Resource Name (ARN) of the Amazon Kendra index that you want the AMAZON.KendraSearchIntent intent to search. The index must be in the same account and Region as the Amazon Lex bot.
        /// This member is required.
        public var kendraIndex: Swift.String?
        /// A query filter that Amazon Lex sends to Amazon Kendra to filter the response from a query. The filter is in the format defined by Amazon Kendra. For more information, see [Filtering queries](https://docs.aws.amazon.com/kendra/latest/dg/filtering.html).
        public var queryFilterString: Swift.String?
        /// Determines whether the AMAZON.KendraSearchIntent intent uses a custom query string to query the Amazon Kendra index.
        public var queryFilterStringEnabled: Swift.Bool

        public init(
            kendraIndex: Swift.String? = nil,
            queryFilterString: Swift.String? = nil,
            queryFilterStringEnabled: Swift.Bool = false
        )
        {
            self.kendraIndex = kendraIndex
            self.queryFilterString = queryFilterString
            self.queryFilterStringEnabled = queryFilterStringEnabled
        }
    }

}

extension LexModelsV2ClientTypes {
    /// Describes a session context that is activated when an intent is fulfilled.
    public struct OutputContext {
        /// The name of the output context.
        /// This member is required.
        public var name: Swift.String?
        /// The amount of time, in seconds, that the output context should remain active. The time is figured from the first time the context is sent to the user.
        /// This member is required.
        public var timeToLiveInSeconds: Swift.Int?
        /// The number of conversation turns that the output context should remain active. The number of turns is counted from the first time that the context is sent to the user.
        /// This member is required.
        public var turnsToLive: Swift.Int?

        public init(
            name: Swift.String? = nil,
            timeToLiveInSeconds: Swift.Int? = nil,
            turnsToLive: Swift.Int? = nil
        )
        {
            self.name = name
            self.timeToLiveInSeconds = timeToLiveInSeconds
            self.turnsToLive = turnsToLive
        }
    }

}

extension LexModelsV2ClientTypes {
    /// Contains details about the configuration of the Amazon Kendra index used for the AMAZON.QnAIntent.
    public struct QnAKendraConfiguration {
        /// Specifies whether to return an exact response from the Amazon Kendra index or to let the Amazon Bedrock model you select generate a response based on the results. To use this feature, you must first add FAQ questions to your index by following the steps at [Adding frequently asked questions (FAQs) to an index](https://docs.aws.amazon.com/kendra/latest/dg/in-creating-faq.html).
        public var exactResponse: Swift.Bool
        /// The ARN of the Amazon Kendra index to use.
        /// This member is required.
        public var kendraIndex: Swift.String?
        /// Contains the Amazon Kendra filter string to use if enabled. For more information on the Amazon Kendra search filter JSON format, see [Using document attributes to filter search results](https://docs.aws.amazon.com/kendra/latest/dg/filtering.html#search-filtering).
        public var queryFilterString: Swift.String?
        /// Specifies whether to enable an Amazon Kendra filter string or not.
        public var queryFilterStringEnabled: Swift.Bool

        public init(
            exactResponse: Swift.Bool = false,
            kendraIndex: Swift.String? = nil,
            queryFilterString: Swift.String? = nil,
            queryFilterStringEnabled: Swift.Bool = false
        )
        {
            self.exactResponse = exactResponse
            self.kendraIndex = kendraIndex
            self.queryFilterString = queryFilterString
            self.queryFilterStringEnabled = queryFilterStringEnabled
        }
    }

}

extension LexModelsV2ClientTypes {
    /// Contains the names of the fields used for an exact response to the user.
    public struct ExactResponseFields {
        /// The name of the field that contains the answer to the query made to the OpenSearch Service database.
        /// This member is required.
        public var answerField: Swift.String?
        /// The name of the field that contains the query made to the OpenSearch Service database.
        /// This member is required.
        public var questionField: Swift.String?

        public init(
            answerField: Swift.String? = nil,
            questionField: Swift.String? = nil
        )
        {
            self.answerField = answerField
            self.questionField = questionField
        }
    }

}

extension LexModelsV2ClientTypes {
    /// Contains details about the configuration of the Amazon OpenSearch Service database used for the AMAZON.QnAIntent.
    public struct OpensearchConfiguration {
        /// The endpoint of the Amazon OpenSearch Service domain.
        /// This member is required.
        public var domainEndpoint: Swift.String?
        /// Specifies whether to return an exact response or to return an answer generated by the model using the fields you specify from the database.
        public var exactResponse: Swift.Bool
        /// Contains the names of the fields used for an exact response to the user.
        public var exactResponseFields: LexModelsV2ClientTypes.ExactResponseFields?
        /// Contains a list of fields from the Amazon OpenSearch Service that the model can use to generate the answer to the query.
        public var includeFields: [Swift.String]?
        /// The name of the Amazon OpenSearch Service index.
        /// This member is required.
        public var indexName: Swift.String?

        public init(
            domainEndpoint: Swift.String? = nil,
            exactResponse: Swift.Bool = false,
            exactResponseFields: LexModelsV2ClientTypes.ExactResponseFields? = nil,
            includeFields: [Swift.String]? = nil,
            indexName: Swift.String? = nil
        )
        {
            self.domainEndpoint = domainEndpoint
            self.exactResponse = exactResponse
            self.exactResponseFields = exactResponseFields
            self.includeFields = includeFields
            self.indexName = indexName
        }
    }

}

extension LexModelsV2ClientTypes {
    /// Contains details about the configuration of the knowledge store used for the AMAZON.QnAIntent. You must have already created the knowledge store and indexed the documents within it.
    public struct DataSourceConfiguration {
        /// Contains details about the configuration of the Amazon Bedrock knowledge base used for the AMAZON.QnAIntent. To set up a knowledge base, follow the steps at [Building a knowledge base](https://docs.aws.amazon.com/bedrock/latest/userguide/knowledge-base.html).
        public var bedrockKnowledgeStoreConfiguration: LexModelsV2ClientTypes.BedrockKnowledgeStoreConfiguration?
        /// Contains details about the configuration of the Amazon Kendra index used for the AMAZON.QnAIntent. To create a Amazon Kendra index, follow the steps at [Creating an index](https://docs.aws.amazon.com/kendra/latest/dg/create-index.html).
        public var kendraConfiguration: LexModelsV2ClientTypes.QnAKendraConfiguration?
        /// Contains details about the configuration of the Amazon OpenSearch Service database used for the AMAZON.QnAIntent. To create a domain, follow the steps at [Creating and managing Amazon OpenSearch Service domains](https://docs.aws.amazon.com/opensearch-service/latest/developerguide/createupdatedomains.html).
        public var opensearchConfiguration: LexModelsV2ClientTypes.OpensearchConfiguration?

        public init(
            bedrockKnowledgeStoreConfiguration: LexModelsV2ClientTypes.BedrockKnowledgeStoreConfiguration? = nil,
            kendraConfiguration: LexModelsV2ClientTypes.QnAKendraConfiguration? = nil,
            opensearchConfiguration: LexModelsV2ClientTypes.OpensearchConfiguration? = nil
        )
        {
            self.bedrockKnowledgeStoreConfiguration = bedrockKnowledgeStoreConfiguration
            self.kendraConfiguration = kendraConfiguration
            self.opensearchConfiguration = opensearchConfiguration
        }
    }

}

extension LexModelsV2ClientTypes {
    /// Details about the the configuration of the built-in Amazon.QnAIntent.
    public struct QnAIntentConfiguration {
        /// Contains information about the Amazon Bedrock model used to interpret the prompt used in descriptive bot building.
        public var bedrockModelConfiguration: LexModelsV2ClientTypes.BedrockModelSpecification?
        /// Contains details about the configuration of the data source used for the AMAZON.QnAIntent.
        public var dataSourceConfiguration: LexModelsV2ClientTypes.DataSourceConfiguration?

        public init(
            bedrockModelConfiguration: LexModelsV2ClientTypes.BedrockModelSpecification? = nil,
            dataSourceConfiguration: LexModelsV2ClientTypes.DataSourceConfiguration? = nil
        )
        {
            self.bedrockModelConfiguration = bedrockModelConfiguration
            self.dataSourceConfiguration = dataSourceConfiguration
        }
    }

}

extension LexModelsV2ClientTypes {
    /// A sample utterance that invokes an intent or respond to a slot elicitation prompt.
    public struct SampleUtterance {
        /// The sample utterance that Amazon Lex uses to build its machine-learning model to recognize intents.
        /// This member is required.
        public var utterance: Swift.String?

        public init(
            utterance: Swift.String? = nil
        )
        {
            self.utterance = utterance
        }
    }

}

public struct CreateResourcePolicyInput {
    /// A resource policy to add to the resource. The policy is a JSON structure that contains one or more statements that define the policy. The policy must follow the IAM syntax. For more information about the contents of a JSON policy document, see [ IAM JSON policy reference ](https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies.html). If the policy isn't valid, Amazon Lex returns a validation exception.
    /// This member is required.
    public var policy: Swift.String?
    /// The Amazon Resource Name (ARN) of the bot or bot alias that the resource policy is attached to.
    /// This member is required.
    public var resourceArn: Swift.String?

    public init(
        policy: Swift.String? = nil,
        resourceArn: Swift.String? = nil
    )
    {
        self.policy = policy
        self.resourceArn = resourceArn
    }
}

public struct CreateResourcePolicyOutput {
    /// The Amazon Resource Name (ARN) of the bot or bot alias that the resource policy was attached to.
    public var resourceArn: Swift.String?
    /// The current revision of the resource policy. Use the revision ID to make sure that you are updating the most current version of a resource policy when you add a policy statement to a resource, delete a resource, or update a resource.
    public var revisionId: Swift.String?

    public init(
        resourceArn: Swift.String? = nil,
        revisionId: Swift.String? = nil
    )
    {
        self.resourceArn = resourceArn
        self.revisionId = revisionId
    }
}

extension LexModelsV2ClientTypes {

    public enum Effect: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case allow
        case deny
        case sdkUnknown(Swift.String)

        public static var allCases: [Effect] {
            return [
                .allow,
                .deny
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .allow: return "Allow"
            case .deny: return "Deny"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension LexModelsV2ClientTypes {
    /// The IAM principal that you allowing or denying access to an Amazon Lex action. You must provide a service or an arn, but not both in the same statement. For more information, see [ AWS JSON policy elements: Principal ](https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_elements_principal.html).
    public struct Principal {
        /// The Amazon Resource Name (ARN) of the principal.
        public var arn: Swift.String?
        /// The name of the Amazon Web Services service that should allowed or denied access to an Amazon Lex action.
        public var service: Swift.String?

        public init(
            arn: Swift.String? = nil,
            service: Swift.String? = nil
        )
        {
            self.arn = arn
            self.service = service
        }
    }

}

public struct CreateResourcePolicyStatementInput {
    /// The Amazon Lex action that this policy either allows or denies. The action must apply to the resource type of the specified ARN. For more information, see [ Actions, resources, and condition keys for Amazon Lex V2](https://docs.aws.amazon.com/service-authorization/latest/reference/list_amazonlexv2.html).
    /// This member is required.
    public var action: [Swift.String]?
    /// Specifies a condition when the policy is in effect. If the principal of the policy is a service principal, you must provide two condition blocks, one with a SourceAccount global condition key and one with a SourceArn global condition key. For more information, see [IAM JSON policy elements: Condition ](https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_elements_condition.html).
    public var condition: [Swift.String: [Swift.String: Swift.String]]?
    /// Determines whether the statement allows or denies access to the resource.
    /// This member is required.
    public var effect: LexModelsV2ClientTypes.Effect?
    /// The identifier of the revision of the policy to edit. If this revision ID doesn't match the current revision ID, Amazon Lex throws an exception. If you don't specify a revision, Amazon Lex overwrites the contents of the policy with the new values.
    public var expectedRevisionId: Swift.String?
    /// An IAM principal, such as an IAM user, IAM role, or Amazon Web Services services that is allowed or denied access to a resource. For more information, see [Amazon Web Services JSON policy elements: Principal](https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_elements_principal.html).
    /// This member is required.
    public var principal: [LexModelsV2ClientTypes.Principal]?
    /// The Amazon Resource Name (ARN) of the bot or bot alias that the resource policy is attached to.
    /// This member is required.
    public var resourceArn: Swift.String?
    /// The name of the statement. The ID is the same as the Sid IAM property. The statement name must be unique within the policy. For more information, see [IAM JSON policy elements: Sid](https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_elements_sid.html).
    /// This member is required.
    public var statementId: Swift.String?

    public init(
        action: [Swift.String]? = nil,
        condition: [Swift.String: [Swift.String: Swift.String]]? = nil,
        effect: LexModelsV2ClientTypes.Effect? = nil,
        expectedRevisionId: Swift.String? = nil,
        principal: [LexModelsV2ClientTypes.Principal]? = nil,
        resourceArn: Swift.String? = nil,
        statementId: Swift.String? = nil
    )
    {
        self.action = action
        self.condition = condition
        self.effect = effect
        self.expectedRevisionId = expectedRevisionId
        self.principal = principal
        self.resourceArn = resourceArn
        self.statementId = statementId
    }
}

public struct CreateResourcePolicyStatementOutput {
    /// The Amazon Resource Name (ARN) of the bot or bot alias that the resource policy is attached to.
    public var resourceArn: Swift.String?
    /// The current revision of the resource policy. Use the revision ID to make sure that you are updating the most current version of a resource policy when you add a policy statement to a resource, delete a resource, or update a resource.
    public var revisionId: Swift.String?

    public init(
        resourceArn: Swift.String? = nil,
        revisionId: Swift.String? = nil
    )
    {
        self.resourceArn = resourceArn
        self.revisionId = revisionId
    }
}

extension LexModelsV2ClientTypes {
    /// Indicates whether a slot can return multiple values.
    public struct MultipleValuesSetting {
        /// Indicates whether a slot can return multiple values. When true, the slot may return more than one value in a response. When false, the slot returns only a single value. Multi-value slots are only available in the en-US locale. If you set this value to true in any other locale, Amazon Lex throws a ValidationException. If the allowMutlipleValues is not set, the default value is false.
        public var allowMultipleValues: Swift.Bool

        public init(
            allowMultipleValues: Swift.Bool = false
        )
        {
            self.allowMultipleValues = allowMultipleValues
        }
    }

}

extension LexModelsV2ClientTypes {

    public enum ObfuscationSettingType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case defaultobfuscation
        case `none`
        case sdkUnknown(Swift.String)

        public static var allCases: [ObfuscationSettingType] {
            return [
                .defaultobfuscation,
                .none
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .defaultobfuscation: return "DefaultObfuscation"
            case .none: return "None"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension LexModelsV2ClientTypes {
    /// Determines whether Amazon Lex obscures slot values in conversation logs.
    public struct ObfuscationSetting {
        /// Value that determines whether Amazon Lex obscures slot values in conversation logs. The default is to obscure the values.
        /// This member is required.
        public var obfuscationSettingType: LexModelsV2ClientTypes.ObfuscationSettingType?

        public init(
            obfuscationSettingType: LexModelsV2ClientTypes.ObfuscationSettingType? = nil
        )
        {
            self.obfuscationSettingType = obfuscationSettingType
        }
    }

}

extension LexModelsV2ClientTypes {
    /// Specifies the default value to use when a user doesn't provide a value for a slot.
    public struct SlotDefaultValue {
        /// The default value to use when a user doesn't provide a value for a slot.
        /// This member is required.
        public var defaultValue: Swift.String?

        public init(
            defaultValue: Swift.String? = nil
        )
        {
            self.defaultValue = defaultValue
        }
    }

}

extension LexModelsV2ClientTypes {
    /// Defines a list of values that Amazon Lex should use as the default value for a slot.
    public struct SlotDefaultValueSpecification {
        /// A list of default values. Amazon Lex chooses the default value to use in the order that they are presented in the list.
        /// This member is required.
        public var defaultValueList: [LexModelsV2ClientTypes.SlotDefaultValue]?

        public init(
            defaultValueList: [LexModelsV2ClientTypes.SlotDefaultValue]? = nil
        )
        {
            self.defaultValueList = defaultValueList
        }
    }

}

extension LexModelsV2ClientTypes {
    /// Defines the messages that Amazon Lex sends to a user to remind them that the bot is waiting for a response.
    public struct StillWaitingResponseSpecification {
        /// Indicates that the user can interrupt the response by speaking while the message is being played.
        public var allowInterrupt: Swift.Bool?
        /// How often a message should be sent to the user. Minimum of 1 second, maximum of 5 minutes.
        /// This member is required.
        public var frequencyInSeconds: Swift.Int?
        /// One or more message groups, each containing one or more messages, that define the prompts that Amazon Lex sends to the user.
        /// This member is required.
        public var messageGroups: [LexModelsV2ClientTypes.MessageGroup]?
        /// If Amazon Lex waits longer than this length of time for a response, it will stop sending messages.
        /// This member is required.
        public var timeoutInSeconds: Swift.Int?

        public init(
            allowInterrupt: Swift.Bool? = nil,
            frequencyInSeconds: Swift.Int? = nil,
            messageGroups: [LexModelsV2ClientTypes.MessageGroup]? = nil,
            timeoutInSeconds: Swift.Int? = nil
        )
        {
            self.allowInterrupt = allowInterrupt
            self.frequencyInSeconds = frequencyInSeconds
            self.messageGroups = messageGroups
            self.timeoutInSeconds = timeoutInSeconds
        }
    }

}

extension LexModelsV2ClientTypes {
    /// Specifies the prompts that Amazon Lex uses while a bot is waiting for customer input.
    public struct WaitAndContinueSpecification {
        /// Specifies whether the bot will wait for a user to respond. When this field is false, wait and continue responses for a slot aren't used. If the active field isn't specified, the default is true.
        public var active: Swift.Bool?
        /// The response that Amazon Lex sends to indicate that the bot is ready to continue the conversation.
        /// This member is required.
        public var continueResponse: LexModelsV2ClientTypes.ResponseSpecification?
        /// A response that Amazon Lex sends periodically to the user to indicate that the bot is still waiting for input from the user.
        public var stillWaitingResponse: LexModelsV2ClientTypes.StillWaitingResponseSpecification?
        /// The response that Amazon Lex sends to indicate that the bot is waiting for the conversation to continue.
        /// This member is required.
        public var waitingResponse: LexModelsV2ClientTypes.ResponseSpecification?

        public init(
            active: Swift.Bool? = nil,
            continueResponse: LexModelsV2ClientTypes.ResponseSpecification? = nil,
            stillWaitingResponse: LexModelsV2ClientTypes.StillWaitingResponseSpecification? = nil,
            waitingResponse: LexModelsV2ClientTypes.ResponseSpecification? = nil
        )
        {
            self.active = active
            self.continueResponse = continueResponse
            self.stillWaitingResponse = stillWaitingResponse
            self.waitingResponse = waitingResponse
        }
    }

}

extension LexModelsV2ClientTypes {
    /// Subslot elicitation settings. DefaultValueSpecification is a list of default values for a constituent sub slot in a composite slot. Default values are used when Amazon Lex hasn't determined a value for a slot. You can specify default values from context variables, session attributes, and defined values. This is similar to DefaultValueSpecification for slots. PromptSpecification is the prompt that Amazon Lex uses to elicit the sub slot value from the user. This is similar to PromptSpecification for slots.
    public struct SubSlotValueElicitationSetting {
        /// Defines a list of values that Amazon Lex should use as the default value for a slot.
        public var defaultValueSpecification: LexModelsV2ClientTypes.SlotDefaultValueSpecification?
        /// Specifies a list of message groups that Amazon Lex sends to a user to elicit a response.
        /// This member is required.
        public var promptSpecification: LexModelsV2ClientTypes.PromptSpecification?
        /// If you know a specific pattern that users might respond to an Amazon Lex request for a sub slot value, you can provide those utterances to improve accuracy. This is optional. In most cases Amazon Lex is capable of understanding user utterances. This is similar to SampleUtterances for slots.
        public var sampleUtterances: [LexModelsV2ClientTypes.SampleUtterance]?
        /// Specifies the prompts that Amazon Lex uses while a bot is waiting for customer input.
        public var waitAndContinueSpecification: LexModelsV2ClientTypes.WaitAndContinueSpecification?

        public init(
            defaultValueSpecification: LexModelsV2ClientTypes.SlotDefaultValueSpecification? = nil,
            promptSpecification: LexModelsV2ClientTypes.PromptSpecification? = nil,
            sampleUtterances: [LexModelsV2ClientTypes.SampleUtterance]? = nil,
            waitAndContinueSpecification: LexModelsV2ClientTypes.WaitAndContinueSpecification? = nil
        )
        {
            self.defaultValueSpecification = defaultValueSpecification
            self.promptSpecification = promptSpecification
            self.sampleUtterances = sampleUtterances
            self.waitAndContinueSpecification = waitAndContinueSpecification
        }
    }

}

extension LexModelsV2ClientTypes {
    /// Subslot specifications.
    public struct Specifications {
        /// The unique identifier assigned to the slot type.
        /// This member is required.
        public var slotTypeId: Swift.String?
        /// Specifies the elicitation setting details for constituent sub slots of a composite slot.
        /// This member is required.
        public var valueElicitationSetting: LexModelsV2ClientTypes.SubSlotValueElicitationSetting?

        public init(
            slotTypeId: Swift.String? = nil,
            valueElicitationSetting: LexModelsV2ClientTypes.SubSlotValueElicitationSetting? = nil
        )
        {
            self.slotTypeId = slotTypeId
            self.valueElicitationSetting = valueElicitationSetting
        }
    }

}

extension LexModelsV2ClientTypes {
    /// Specifications for the constituent sub slots and the expression for the composite slot.
    public struct SubSlotSetting {
        /// The expression text for defining the constituent sub slots in the composite slot using logical AND and OR operators.
        public var expression: Swift.String?
        /// Specifications for the constituent sub slots of a composite slot.
        public var slotSpecifications: [Swift.String: LexModelsV2ClientTypes.Specifications]?

        public init(
            expression: Swift.String? = nil,
            slotSpecifications: [Swift.String: LexModelsV2ClientTypes.Specifications]? = nil
        )
        {
            self.expression = expression
            self.slotSpecifications = slotSpecifications
        }
    }

}

extension LexModelsV2ClientTypes {

    public enum SlotConstraint: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case `optional`
        case `required`
        case sdkUnknown(Swift.String)

        public static var allCases: [SlotConstraint] {
            return [
                .optional,
                .required
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .optional: return "Optional"
            case .required: return "Required"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension LexModelsV2ClientTypes {

    public enum SlotResolutionStrategy: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case `default`
        case enhancedfallback
        case sdkUnknown(Swift.String)

        public static var allCases: [SlotResolutionStrategy] {
            return [
                .default,
                .enhancedfallback
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .default: return "Default"
            case .enhancedfallback: return "EnhancedFallback"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension LexModelsV2ClientTypes {
    /// Contains information about whether assisted slot resolution is turned on for the slot or not.
    public struct SlotResolutionSetting {
        /// Specifies whether assisted slot resolution is turned on for the slot or not. If the value is EnhancedFallback, assisted slot resolution is activated when Amazon Lex defaults to the AMAZON.FallbackIntent. If the value is Default, assisted slot resolution is turned off.
        /// This member is required.
        public var slotResolutionStrategy: LexModelsV2ClientTypes.SlotResolutionStrategy?

        public init(
            slotResolutionStrategy: LexModelsV2ClientTypes.SlotResolutionStrategy? = nil
        )
        {
            self.slotResolutionStrategy = slotResolutionStrategy
        }
    }

}

extension LexModelsV2ClientTypes {
    /// Describes the Amazon S3 bucket name and location for the grammar that is the source for the slot type.
    public struct GrammarSlotTypeSource {
        /// The KMS key required to decrypt the contents of the grammar, if any.
        public var kmsKeyArn: Swift.String?
        /// The name of the Amazon S3 bucket that contains the grammar source.
        /// This member is required.
        public var s3BucketName: Swift.String?
        /// The path to the grammar in the Amazon S3 bucket.
        /// This member is required.
        public var s3ObjectKey: Swift.String?

        public init(
            kmsKeyArn: Swift.String? = nil,
            s3BucketName: Swift.String? = nil,
            s3ObjectKey: Swift.String? = nil
        )
        {
            self.kmsKeyArn = kmsKeyArn
            self.s3BucketName = s3BucketName
            self.s3ObjectKey = s3ObjectKey
        }
    }

}

extension LexModelsV2ClientTypes {
    /// Settings requried for a slot type based on a grammar that you provide.
    public struct GrammarSlotTypeSetting {
        /// The source of the grammar used to create the slot type.
        public var source: LexModelsV2ClientTypes.GrammarSlotTypeSource?

        public init(
            source: LexModelsV2ClientTypes.GrammarSlotTypeSource? = nil
        )
        {
            self.source = source
        }
    }

}

extension LexModelsV2ClientTypes {
    /// Provides information about the external source of the slot type's definition.
    public struct ExternalSourceSetting {
        /// Settings required for a slot type based on a grammar that you provide.
        public var grammarSlotTypeSetting: LexModelsV2ClientTypes.GrammarSlotTypeSetting?

        public init(
            grammarSlotTypeSetting: LexModelsV2ClientTypes.GrammarSlotTypeSetting? = nil
        )
        {
            self.grammarSlotTypeSetting = grammarSlotTypeSetting
        }
    }

}

extension LexModelsV2ClientTypes {
    /// Defines one of the values for a slot type.
    public struct SampleValue {
        /// The value that can be used for a slot type.
        /// This member is required.
        public var value: Swift.String?

        public init(
            value: Swift.String? = nil
        )
        {
            self.value = value
        }
    }

}

extension LexModelsV2ClientTypes {
    /// Each slot type can have a set of values. Each SlotTypeValue represents a value that the slot type can take.
    public struct SlotTypeValue {
        /// The value of the slot type entry.
        public var sampleValue: LexModelsV2ClientTypes.SampleValue?
        /// Additional values related to the slot type entry.
        public var synonyms: [LexModelsV2ClientTypes.SampleValue]?

        public init(
            sampleValue: LexModelsV2ClientTypes.SampleValue? = nil,
            synonyms: [LexModelsV2ClientTypes.SampleValue]? = nil
        )
        {
            self.sampleValue = sampleValue
            self.synonyms = synonyms
        }
    }

}

extension LexModelsV2ClientTypes {
    /// Provides a regular expression used to validate the value of a slot.
    public struct SlotValueRegexFilter {
        /// A regular expression used to validate the value of a slot. Use a standard regular expression. Amazon Lex supports the following characters in the regular expression:
        ///
        /// * A-Z, a-z
        ///
        /// * 0-9
        ///
        /// * Unicode characters ("\⁠u")
        ///
        ///
        /// Represent Unicode characters with four digits, for example "\⁠u0041" or "\⁠u005A". The following regular expression operators are not supported:
        ///
        /// * Infinite repeaters: *, +, or {x,} with no upper bound.
        ///
        /// * Wild card (.)
        /// This member is required.
        public var pattern: Swift.String?

        public init(
            pattern: Swift.String? = nil
        )
        {
            self.pattern = pattern
        }
    }

}

extension LexModelsV2ClientTypes {

    public enum SlotValueResolutionStrategy: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case concatenation
        case originalvalue
        case topresolution
        case sdkUnknown(Swift.String)

        public static var allCases: [SlotValueResolutionStrategy] {
            return [
                .concatenation,
                .originalvalue,
                .topresolution
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .concatenation: return "Concatenation"
            case .originalvalue: return "OriginalValue"
            case .topresolution: return "TopResolution"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension LexModelsV2ClientTypes {
    /// Contains settings used by Amazon Lex to select a slot value.
    public struct SlotValueSelectionSetting {
        /// Provides settings that enable advanced recognition settings for slot values. You can use this to enable using slot values as a custom vocabulary for recognizing user utterances.
        public var advancedRecognitionSetting: LexModelsV2ClientTypes.AdvancedRecognitionSetting?
        /// A regular expression used to validate the value of a slot.
        public var regexFilter: LexModelsV2ClientTypes.SlotValueRegexFilter?
        /// Determines the slot resolution strategy that Amazon Lex uses to return slot type values. The field can be set to one of the following values:
        ///
        /// * ORIGINAL_VALUE - Returns the value entered by the user, if the user value is similar to the slot value.
        ///
        /// * TOP_RESOLUTION - If there is a resolution list for the slot, return the first value in the resolution list as the slot type value. If there is no resolution list, null is returned.
        ///
        ///
        /// If you don't specify the valueSelectionStrategy, the default is ORIGINAL_VALUE.
        /// This member is required.
        public var resolutionStrategy: LexModelsV2ClientTypes.SlotValueResolutionStrategy?

        public init(
            advancedRecognitionSetting: LexModelsV2ClientTypes.AdvancedRecognitionSetting? = nil,
            regexFilter: LexModelsV2ClientTypes.SlotValueRegexFilter? = nil,
            resolutionStrategy: LexModelsV2ClientTypes.SlotValueResolutionStrategy? = nil
        )
        {
            self.advancedRecognitionSetting = advancedRecognitionSetting
            self.regexFilter = regexFilter
            self.resolutionStrategy = resolutionStrategy
        }
    }

}

public struct CreateSlotTypeInput {
    /// The identifier of the bot associated with this slot type.
    /// This member is required.
    public var botId: Swift.String?
    /// The identifier of the bot version associated with this slot type.
    /// This member is required.
    public var botVersion: Swift.String?
    /// Specifications for a composite slot type.
    public var compositeSlotTypeSetting: LexModelsV2ClientTypes.CompositeSlotTypeSetting?
    /// A description of the slot type. Use the description to help identify the slot type in lists.
    public var description: Swift.String?
    /// Sets the type of external information used to create the slot type.
    public var externalSourceSetting: LexModelsV2ClientTypes.ExternalSourceSetting?
    /// The identifier of the language and locale that the slot type will be used in. The string must match one of the supported locales. All of the bots, intents, and slots used by the slot type must have the same locale. For more information, see [Supported languages](https://docs.aws.amazon.com/lexv2/latest/dg/how-languages.html).
    /// This member is required.
    public var localeId: Swift.String?
    /// The built-in slot type used as a parent of this slot type. When you define a parent slot type, the new slot type has the configuration of the parent slot type. Only AMAZON.AlphaNumeric is supported.
    public var parentSlotTypeSignature: Swift.String?
    /// The name for the slot. A slot type name must be unique within the intent.
    /// This member is required.
    public var slotTypeName: Swift.String?
    /// A list of SlotTypeValue objects that defines the values that the slot type can take. Each value can have a list of synonyms, additional values that help train the machine learning model about the values that it resolves for a slot.
    public var slotTypeValues: [LexModelsV2ClientTypes.SlotTypeValue]?
    /// Determines the strategy that Amazon Lex uses to select a value from the list of possible values. The field can be set to one of the following values:
    ///
    /// * ORIGINAL_VALUE - Returns the value entered by the user, if the user value is similar to the slot value.
    ///
    /// * TOP_RESOLUTION - If there is a resolution list for the slot, return the first value in the resolution list. If there is no resolution list, return null.
    ///
    ///
    /// If you don't specify the valueSelectionSetting parameter, the default is ORIGINAL_VALUE.
    public var valueSelectionSetting: LexModelsV2ClientTypes.SlotValueSelectionSetting?

    public init(
        botId: Swift.String? = nil,
        botVersion: Swift.String? = nil,
        compositeSlotTypeSetting: LexModelsV2ClientTypes.CompositeSlotTypeSetting? = nil,
        description: Swift.String? = nil,
        externalSourceSetting: LexModelsV2ClientTypes.ExternalSourceSetting? = nil,
        localeId: Swift.String? = nil,
        parentSlotTypeSignature: Swift.String? = nil,
        slotTypeName: Swift.String? = nil,
        slotTypeValues: [LexModelsV2ClientTypes.SlotTypeValue]? = nil,
        valueSelectionSetting: LexModelsV2ClientTypes.SlotValueSelectionSetting? = nil
    )
    {
        self.botId = botId
        self.botVersion = botVersion
        self.compositeSlotTypeSetting = compositeSlotTypeSetting
        self.description = description
        self.externalSourceSetting = externalSourceSetting
        self.localeId = localeId
        self.parentSlotTypeSignature = parentSlotTypeSignature
        self.slotTypeName = slotTypeName
        self.slotTypeValues = slotTypeValues
        self.valueSelectionSetting = valueSelectionSetting
    }
}

public struct CreateSlotTypeOutput {
    /// The identifier for the bot associated with the slot type.
    public var botId: Swift.String?
    /// The version of the bot associated with the slot type.
    public var botVersion: Swift.String?
    /// Specifications for a composite slot type.
    public var compositeSlotTypeSetting: LexModelsV2ClientTypes.CompositeSlotTypeSetting?
    /// A timestamp of the date and time that the slot type was created.
    public var creationDateTime: Foundation.Date?
    /// The description specified for the slot type.
    public var description: Swift.String?
    /// The type of external information used to create the slot type.
    public var externalSourceSetting: LexModelsV2ClientTypes.ExternalSourceSetting?
    /// The specified language and local specified for the slot type.
    public var localeId: Swift.String?
    /// The signature of the base slot type specified for the slot type.
    public var parentSlotTypeSignature: Swift.String?
    /// The unique identifier assigned to the slot type. Use this to identify the slot type in the UpdateSlotType and DeleteSlotType operations.
    public var slotTypeId: Swift.String?
    /// The name specified for the slot type.
    public var slotTypeName: Swift.String?
    /// The list of values that the slot type can assume.
    public var slotTypeValues: [LexModelsV2ClientTypes.SlotTypeValue]?
    /// The strategy that Amazon Lex uses to select a value from the list of possible values.
    public var valueSelectionSetting: LexModelsV2ClientTypes.SlotValueSelectionSetting?

    public init(
        botId: Swift.String? = nil,
        botVersion: Swift.String? = nil,
        compositeSlotTypeSetting: LexModelsV2ClientTypes.CompositeSlotTypeSetting? = nil,
        creationDateTime: Foundation.Date? = nil,
        description: Swift.String? = nil,
        externalSourceSetting: LexModelsV2ClientTypes.ExternalSourceSetting? = nil,
        localeId: Swift.String? = nil,
        parentSlotTypeSignature: Swift.String? = nil,
        slotTypeId: Swift.String? = nil,
        slotTypeName: Swift.String? = nil,
        slotTypeValues: [LexModelsV2ClientTypes.SlotTypeValue]? = nil,
        valueSelectionSetting: LexModelsV2ClientTypes.SlotValueSelectionSetting? = nil
    )
    {
        self.botId = botId
        self.botVersion = botVersion
        self.compositeSlotTypeSetting = compositeSlotTypeSetting
        self.creationDateTime = creationDateTime
        self.description = description
        self.externalSourceSetting = externalSourceSetting
        self.localeId = localeId
        self.parentSlotTypeSignature = parentSlotTypeSignature
        self.slotTypeId = slotTypeId
        self.slotTypeName = slotTypeName
        self.slotTypeValues = slotTypeValues
        self.valueSelectionSetting = valueSelectionSetting
    }
}

extension LexModelsV2ClientTypes {
    /// Contains information about the bot alias used for the test set discrepancy report.
    public struct TestSetDiscrepancyReportBotAliasTarget {
        /// The unique identifier for the bot associated with the bot alias.
        /// This member is required.
        public var botAliasId: Swift.String?
        /// The unique identifier for the bot alias.
        /// This member is required.
        public var botId: Swift.String?
        /// The unique identifier of the locale associated with the bot alias.
        /// This member is required.
        public var localeId: Swift.String?

        public init(
            botAliasId: Swift.String? = nil,
            botId: Swift.String? = nil,
            localeId: Swift.String? = nil
        )
        {
            self.botAliasId = botAliasId
            self.botId = botId
            self.localeId = localeId
        }
    }

}

extension LexModelsV2ClientTypes {
    /// Contains information about the resource used for the test set discrepancy report.
    public struct TestSetDiscrepancyReportResourceTarget {
        /// Contains information about the bot alias used as the resource for the test set discrepancy report.
        public var botAliasTarget: LexModelsV2ClientTypes.TestSetDiscrepancyReportBotAliasTarget?

        public init(
            botAliasTarget: LexModelsV2ClientTypes.TestSetDiscrepancyReportBotAliasTarget? = nil
        )
        {
            self.botAliasTarget = botAliasTarget
        }
    }

}

public struct CreateTestSetDiscrepancyReportInput {
    /// The target bot for the test set discrepancy report.
    /// This member is required.
    public var target: LexModelsV2ClientTypes.TestSetDiscrepancyReportResourceTarget?
    /// The test set Id for the test set discrepancy report.
    /// This member is required.
    public var testSetId: Swift.String?

    public init(
        target: LexModelsV2ClientTypes.TestSetDiscrepancyReportResourceTarget? = nil,
        testSetId: Swift.String? = nil
    )
    {
        self.target = target
        self.testSetId = testSetId
    }
}

public struct CreateTestSetDiscrepancyReportOutput {
    /// The creation date and time for the test set discrepancy report.
    public var creationDateTime: Foundation.Date?
    /// The target bot for the test set discrepancy report.
    public var target: LexModelsV2ClientTypes.TestSetDiscrepancyReportResourceTarget?
    /// The unique identifier of the test set discrepancy report to describe.
    public var testSetDiscrepancyReportId: Swift.String?
    /// The test set Id for the test set discrepancy report.
    public var testSetId: Swift.String?

    public init(
        creationDateTime: Foundation.Date? = nil,
        target: LexModelsV2ClientTypes.TestSetDiscrepancyReportResourceTarget? = nil,
        testSetDiscrepancyReportId: Swift.String? = nil,
        testSetId: Swift.String? = nil
    )
    {
        self.creationDateTime = creationDateTime
        self.target = target
        self.testSetDiscrepancyReportId = testSetDiscrepancyReportId
        self.testSetId = testSetId
    }
}

public struct CreateUploadUrlInput {

    public init() { }
}

public struct CreateUploadUrlOutput {
    /// An identifier for a unique import job. Use it when you call the [StartImport](https://docs.aws.amazon.com/lexv2/latest/APIReference/API_StartImport.html) operation.
    public var importId: Swift.String?
    /// A pre-signed S3 write URL. Upload the zip archive file that contains the definition of your bot or bot locale.
    public var uploadUrl: Swift.String?

    public init(
        importId: Swift.String? = nil,
        uploadUrl: Swift.String? = nil
    )
    {
        self.importId = importId
        self.uploadUrl = uploadUrl
    }
}

extension LexModelsV2ClientTypes {
    /// Provides the parameters required for importing a custom vocabulary.
    public struct CustomVocabularyImportSpecification {
        /// The identifier of the bot to import the custom vocabulary to.
        /// This member is required.
        public var botId: Swift.String?
        /// The version of the bot to import the custom vocabulary to.
        /// This member is required.
        public var botVersion: Swift.String?
        /// The identifier of the local to import the custom vocabulary to. The value must be en_GB.
        /// This member is required.
        public var localeId: Swift.String?

        public init(
            botId: Swift.String? = nil,
            botVersion: Swift.String? = nil,
            localeId: Swift.String? = nil
        )
        {
            self.botId = botId
            self.botVersion = botVersion
            self.localeId = localeId
        }
    }

}

extension LexModelsV2ClientTypes {

    public enum CustomVocabularyStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case creating
        case deleting
        case exporting
        case importing
        case ready
        case sdkUnknown(Swift.String)

        public static var allCases: [CustomVocabularyStatus] {
            return [
                .creating,
                .deleting,
                .exporting,
                .importing,
                .ready
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .creating: return "Creating"
            case .deleting: return "Deleting"
            case .exporting: return "Exporting"
            case .importing: return "Importing"
            case .ready: return "Ready"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension LexModelsV2ClientTypes {
    /// The object used for specifying the data range that the customer wants Amazon Lex to read through in the input transcripts.
    public struct DateRangeFilter {
        /// A timestamp indicating the end date for the date range filter.
        /// This member is required.
        public var endDateTime: Foundation.Date?
        /// A timestamp indicating the start date for the date range filter.
        /// This member is required.
        public var startDateTime: Foundation.Date?

        public init(
            endDateTime: Foundation.Date? = nil,
            startDateTime: Foundation.Date? = nil
        )
        {
            self.endDateTime = endDateTime
            self.startDateTime = startDateTime
        }
    }

}

public struct DeleteBotInput {
    /// The identifier of the bot to delete.
    /// This member is required.
    public var botId: Swift.String?
    /// By default, Amazon Lex checks if any other resource, such as an alias or bot network, is using the bot version before it is deleted and throws a ResourceInUseException exception if the bot is being used by another resource. Set this parameter to true to skip this check and remove the bot even if it is being used by another resource.
    public var skipResourceInUseCheck: Swift.Bool?

    public init(
        botId: Swift.String? = nil,
        skipResourceInUseCheck: Swift.Bool? = false
    )
    {
        self.botId = botId
        self.skipResourceInUseCheck = skipResourceInUseCheck
    }
}

public struct DeleteBotOutput {
    /// The unique identifier of the bot that Amazon Lex is deleting.
    public var botId: Swift.String?
    /// The current status of the bot. The status is Deleting while the bot and its associated resources are being deleted.
    public var botStatus: LexModelsV2ClientTypes.BotStatus?

    public init(
        botId: Swift.String? = nil,
        botStatus: LexModelsV2ClientTypes.BotStatus? = nil
    )
    {
        self.botId = botId
        self.botStatus = botStatus
    }
}

public struct DeleteBotAliasInput {
    /// The unique identifier of the bot alias to delete.
    /// This member is required.
    public var botAliasId: Swift.String?
    /// The unique identifier of the bot associated with the alias to delete.
    /// This member is required.
    public var botId: Swift.String?
    /// By default, Amazon Lex checks if any other resource, such as a bot network, is using the bot alias before it is deleted and throws a ResourceInUseException exception if the alias is being used by another resource. Set this parameter to true to skip this check and remove the alias even if it is being used by another resource.
    public var skipResourceInUseCheck: Swift.Bool?

    public init(
        botAliasId: Swift.String? = nil,
        botId: Swift.String? = nil,
        skipResourceInUseCheck: Swift.Bool? = false
    )
    {
        self.botAliasId = botAliasId
        self.botId = botId
        self.skipResourceInUseCheck = skipResourceInUseCheck
    }
}

public struct DeleteBotAliasOutput {
    /// The unique identifier of the bot alias to delete.
    public var botAliasId: Swift.String?
    /// The current status of the alias. The status is Deleting while the alias is in the process of being deleted. Once the alias is deleted, it will no longer appear in the list of aliases returned by the ListBotAliases operation.
    public var botAliasStatus: LexModelsV2ClientTypes.BotAliasStatus?
    /// The unique identifier of the bot that contains the alias to delete.
    public var botId: Swift.String?

    public init(
        botAliasId: Swift.String? = nil,
        botAliasStatus: LexModelsV2ClientTypes.BotAliasStatus? = nil,
        botId: Swift.String? = nil
    )
    {
        self.botAliasId = botAliasId
        self.botAliasStatus = botAliasStatus
        self.botId = botId
    }
}

public struct DeleteBotLocaleInput {
    /// The unique identifier of the bot that contains the locale.
    /// This member is required.
    public var botId: Swift.String?
    /// The version of the bot that contains the locale.
    /// This member is required.
    public var botVersion: Swift.String?
    /// The identifier of the language and locale that will be deleted. The string must match one of the supported locales. For more information, see [Supported languages](https://docs.aws.amazon.com/lexv2/latest/dg/how-languages.html).
    /// This member is required.
    public var localeId: Swift.String?

    public init(
        botId: Swift.String? = nil,
        botVersion: Swift.String? = nil,
        localeId: Swift.String? = nil
    )
    {
        self.botId = botId
        self.botVersion = botVersion
        self.localeId = localeId
    }
}

public struct DeleteBotLocaleOutput {
    /// The identifier of the bot that contained the deleted locale.
    public var botId: Swift.String?
    /// The status of deleting the bot locale. The locale first enters the Deleting status. Once the locale is deleted it no longer appears in the list of locales for the bot.
    public var botLocaleStatus: LexModelsV2ClientTypes.BotLocaleStatus?
    /// The version of the bot that contained the deleted locale.
    public var botVersion: Swift.String?
    /// The language and locale of the deleted locale.
    public var localeId: Swift.String?

    public init(
        botId: Swift.String? = nil,
        botLocaleStatus: LexModelsV2ClientTypes.BotLocaleStatus? = nil,
        botVersion: Swift.String? = nil,
        localeId: Swift.String? = nil
    )
    {
        self.botId = botId
        self.botLocaleStatus = botLocaleStatus
        self.botVersion = botVersion
        self.localeId = localeId
    }
}

public struct DeleteBotReplicaInput {
    /// The unique ID of the replicated bot to be deleted from the secondary region
    /// This member is required.
    public var botId: Swift.String?
    /// The secondary region of the replicated bot that will be deleted.
    /// This member is required.
    public var replicaRegion: Swift.String?

    public init(
        botId: Swift.String? = nil,
        replicaRegion: Swift.String? = nil
    )
    {
        self.botId = botId
        self.replicaRegion = replicaRegion
    }
}

public struct DeleteBotReplicaOutput {
    /// The unique bot ID of the replicated bot generated.
    public var botId: Swift.String?
    /// The operational status of the replicated bot generated.
    public var botReplicaStatus: LexModelsV2ClientTypes.BotReplicaStatus?
    /// The region of the replicated bot generated.
    public var replicaRegion: Swift.String?

    public init(
        botId: Swift.String? = nil,
        botReplicaStatus: LexModelsV2ClientTypes.BotReplicaStatus? = nil,
        replicaRegion: Swift.String? = nil
    )
    {
        self.botId = botId
        self.botReplicaStatus = botReplicaStatus
        self.replicaRegion = replicaRegion
    }
}

public struct DeleteBotVersionInput {
    /// The identifier of the bot that contains the version.
    /// This member is required.
    public var botId: Swift.String?
    /// The version of the bot to delete.
    /// This member is required.
    public var botVersion: Swift.String?
    /// By default, Amazon Lex checks if any other resource, such as an alias or bot network, is using the bot version before it is deleted and throws a ResourceInUseException exception if the version is being used by another resource. Set this parameter to true to skip this check and remove the version even if it is being used by another resource.
    public var skipResourceInUseCheck: Swift.Bool?

    public init(
        botId: Swift.String? = nil,
        botVersion: Swift.String? = nil,
        skipResourceInUseCheck: Swift.Bool? = false
    )
    {
        self.botId = botId
        self.botVersion = botVersion
        self.skipResourceInUseCheck = skipResourceInUseCheck
    }
}

public struct DeleteBotVersionOutput {
    /// The identifier of the bot that is being deleted.
    public var botId: Swift.String?
    /// The current status of the bot.
    public var botStatus: LexModelsV2ClientTypes.BotStatus?
    /// The version of the bot that is being deleted.
    public var botVersion: Swift.String?

    public init(
        botId: Swift.String? = nil,
        botStatus: LexModelsV2ClientTypes.BotStatus? = nil,
        botVersion: Swift.String? = nil
    )
    {
        self.botId = botId
        self.botStatus = botStatus
        self.botVersion = botVersion
    }
}

public struct DeleteCustomVocabularyInput {
    /// The unique identifier of the bot to remove the custom vocabulary from.
    /// This member is required.
    public var botId: Swift.String?
    /// The version of the bot to remove the custom vocabulary from.
    /// This member is required.
    public var botVersion: Swift.String?
    /// The locale identifier for the locale that contains the custom vocabulary to remove.
    /// This member is required.
    public var localeId: Swift.String?

    public init(
        botId: Swift.String? = nil,
        botVersion: Swift.String? = nil,
        localeId: Swift.String? = nil
    )
    {
        self.botId = botId
        self.botVersion = botVersion
        self.localeId = localeId
    }
}

public struct DeleteCustomVocabularyOutput {
    /// The identifier of the bot that the custom vocabulary was removed from.
    public var botId: Swift.String?
    /// The version of the bot that the custom vocabulary was removed from.
    public var botVersion: Swift.String?
    /// The status of removing the custom vocabulary.
    public var customVocabularyStatus: LexModelsV2ClientTypes.CustomVocabularyStatus?
    /// The locale identifier for the locale that the custom vocabulary was removed from.
    public var localeId: Swift.String?

    public init(
        botId: Swift.String? = nil,
        botVersion: Swift.String? = nil,
        customVocabularyStatus: LexModelsV2ClientTypes.CustomVocabularyStatus? = nil,
        localeId: Swift.String? = nil
    )
    {
        self.botId = botId
        self.botVersion = botVersion
        self.customVocabularyStatus = customVocabularyStatus
        self.localeId = localeId
    }
}

public struct DeleteExportInput {
    /// The unique identifier of the export to delete.
    /// This member is required.
    public var exportId: Swift.String?

    public init(
        exportId: Swift.String? = nil
    )
    {
        self.exportId = exportId
    }
}

public struct DeleteExportOutput {
    /// The unique identifier of the deleted export.
    public var exportId: Swift.String?
    /// The current status of the deletion. When the deletion is complete, the export will no longer be returned by the [ListExports](https://docs.aws.amazon.com/lexv2/latest/APIReference/API_ListExports.html) operation and calls to the [ DescribeExport](https://docs.aws.amazon.com/lexv2/latest/APIReference/API_DescribeExport.html) operation with the export identifier will fail.
    public var exportStatus: LexModelsV2ClientTypes.ExportStatus?

    public init(
        exportId: Swift.String? = nil,
        exportStatus: LexModelsV2ClientTypes.ExportStatus? = nil
    )
    {
        self.exportId = exportId
        self.exportStatus = exportStatus
    }
}

public struct DeleteImportInput {
    /// The unique identifier of the import to delete.
    /// This member is required.
    public var importId: Swift.String?

    public init(
        importId: Swift.String? = nil
    )
    {
        self.importId = importId
    }
}

extension LexModelsV2ClientTypes {

    public enum ImportStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case completed
        case deleting
        case failed
        case inprogress
        case sdkUnknown(Swift.String)

        public static var allCases: [ImportStatus] {
            return [
                .completed,
                .deleting,
                .failed,
                .inprogress
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .completed: return "Completed"
            case .deleting: return "Deleting"
            case .failed: return "Failed"
            case .inprogress: return "InProgress"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

public struct DeleteImportOutput {
    /// The unique identifier of the deleted import.
    public var importId: Swift.String?
    /// The current status of the deletion. When the deletion is complete, the import will no longer be returned by the [ListImports](https://docs.aws.amazon.com/lexv2/latest/APIReference/API_ListImports.html) operation and calls to the [DescribeImport](https://docs.aws.amazon.com/lexv2/latest/APIReference/API_DescribeImport.html) operation with the import identifier will fail.
    public var importStatus: LexModelsV2ClientTypes.ImportStatus?

    public init(
        importId: Swift.String? = nil,
        importStatus: LexModelsV2ClientTypes.ImportStatus? = nil
    )
    {
        self.importId = importId
        self.importStatus = importStatus
    }
}

public struct DeleteIntentInput {
    /// The identifier of the bot associated with the intent.
    /// This member is required.
    public var botId: Swift.String?
    /// The version of the bot associated with the intent.
    /// This member is required.
    public var botVersion: Swift.String?
    /// The unique identifier of the intent to delete.
    /// This member is required.
    public var intentId: Swift.String?
    /// The identifier of the language and locale where the bot will be deleted. The string must match one of the supported locales. For more information, see [Supported languages](https://docs.aws.amazon.com/lexv2/latest/dg/how-languages.html).
    /// This member is required.
    public var localeId: Swift.String?

    public init(
        botId: Swift.String? = nil,
        botVersion: Swift.String? = nil,
        intentId: Swift.String? = nil,
        localeId: Swift.String? = nil
    )
    {
        self.botId = botId
        self.botVersion = botVersion
        self.intentId = intentId
        self.localeId = localeId
    }
}

public struct DeleteResourcePolicyInput {
    /// The identifier of the revision to edit. If this ID doesn't match the current revision number, Amazon Lex returns an exception If you don't specify a revision ID, Amazon Lex will delete the current policy.
    public var expectedRevisionId: Swift.String?
    /// The Amazon Resource Name (ARN) of the bot or bot alias that has the resource policy attached.
    /// This member is required.
    public var resourceArn: Swift.String?

    public init(
        expectedRevisionId: Swift.String? = nil,
        resourceArn: Swift.String? = nil
    )
    {
        self.expectedRevisionId = expectedRevisionId
        self.resourceArn = resourceArn
    }
}

public struct DeleteResourcePolicyOutput {
    /// The Amazon Resource Name (ARN) of the bot or bot alias that the resource policy was deleted from.
    public var resourceArn: Swift.String?
    /// The current revision of the resource policy. Use the revision ID to make sure that you are updating the most current version of a resource policy when you add a policy statement to a resource, delete a resource, or update a resource.
    public var revisionId: Swift.String?

    public init(
        resourceArn: Swift.String? = nil,
        revisionId: Swift.String? = nil
    )
    {
        self.resourceArn = resourceArn
        self.revisionId = revisionId
    }
}

public struct DeleteResourcePolicyStatementInput {
    /// The identifier of the revision of the policy to delete the statement from. If this revision ID doesn't match the current revision ID, Amazon Lex throws an exception. If you don't specify a revision, Amazon Lex removes the current contents of the statement.
    public var expectedRevisionId: Swift.String?
    /// The Amazon Resource Name (ARN) of the bot or bot alias that the resource policy is attached to.
    /// This member is required.
    public var resourceArn: Swift.String?
    /// The name of the statement (SID) to delete from the policy.
    /// This member is required.
    public var statementId: Swift.String?

    public init(
        expectedRevisionId: Swift.String? = nil,
        resourceArn: Swift.String? = nil,
        statementId: Swift.String? = nil
    )
    {
        self.expectedRevisionId = expectedRevisionId
        self.resourceArn = resourceArn
        self.statementId = statementId
    }
}

public struct DeleteResourcePolicyStatementOutput {
    /// The Amazon Resource Name (ARN) of the bot or bot alias that the resource policy statement was removed from.
    public var resourceArn: Swift.String?
    /// The current revision of the resource policy. Use the revision ID to make sure that you are updating the most current version of a resource policy when you add a policy statement to a resource, delete a resource, or update a resource.
    public var revisionId: Swift.String?

    public init(
        resourceArn: Swift.String? = nil,
        revisionId: Swift.String? = nil
    )
    {
        self.resourceArn = resourceArn
        self.revisionId = revisionId
    }
}

public struct DeleteSlotInput {
    /// The identifier of the bot associated with the slot to delete.
    /// This member is required.
    public var botId: Swift.String?
    /// The version of the bot associated with the slot to delete.
    /// This member is required.
    public var botVersion: Swift.String?
    /// The identifier of the intent associated with the slot.
    /// This member is required.
    public var intentId: Swift.String?
    /// The identifier of the language and locale that the slot will be deleted from. The string must match one of the supported locales. For more information, see [Supported languages](https://docs.aws.amazon.com/lexv2/latest/dg/how-languages.html).
    /// This member is required.
    public var localeId: Swift.String?
    /// The identifier of the slot to delete.
    /// This member is required.
    public var slotId: Swift.String?

    public init(
        botId: Swift.String? = nil,
        botVersion: Swift.String? = nil,
        intentId: Swift.String? = nil,
        localeId: Swift.String? = nil,
        slotId: Swift.String? = nil
    )
    {
        self.botId = botId
        self.botVersion = botVersion
        self.intentId = intentId
        self.localeId = localeId
        self.slotId = slotId
    }
}

public struct DeleteSlotTypeInput {
    /// The identifier of the bot associated with the slot type.
    /// This member is required.
    public var botId: Swift.String?
    /// The version of the bot associated with the slot type.
    /// This member is required.
    public var botVersion: Swift.String?
    /// The identifier of the language and locale that the slot type will be deleted from. The string must match one of the supported locales. For more information, see [Supported languages](https://docs.aws.amazon.com/lexv2/latest/dg/how-languages.html).
    /// This member is required.
    public var localeId: Swift.String?
    /// By default, the DeleteSlotType operations throws a ResourceInUseException exception if you try to delete a slot type used by a slot. Set the skipResourceInUseCheck parameter to true to skip this check and remove the slot type even if a slot uses it.
    public var skipResourceInUseCheck: Swift.Bool?
    /// The identifier of the slot type to delete.
    /// This member is required.
    public var slotTypeId: Swift.String?

    public init(
        botId: Swift.String? = nil,
        botVersion: Swift.String? = nil,
        localeId: Swift.String? = nil,
        skipResourceInUseCheck: Swift.Bool? = false,
        slotTypeId: Swift.String? = nil
    )
    {
        self.botId = botId
        self.botVersion = botVersion
        self.localeId = localeId
        self.skipResourceInUseCheck = skipResourceInUseCheck
        self.slotTypeId = slotTypeId
    }
}

public struct DeleteTestSetInput {
    /// The test set Id of the test set to be deleted.
    /// This member is required.
    public var testSetId: Swift.String?

    public init(
        testSetId: Swift.String? = nil
    )
    {
        self.testSetId = testSetId
    }
}

public struct DeleteUtterancesInput {
    /// The unique identifier of the bot that contains the utterances.
    /// This member is required.
    public var botId: Swift.String?
    /// The identifier of the language and locale where the utterances were collected. The string must match one of the supported locales. For more information, see [Supported languages](https://docs.aws.amazon.com/lexv2/latest/dg/how-languages.html).
    public var localeId: Swift.String?
    /// The unique identifier of the session with the user. The ID is returned in the response from the [RecognizeText](https://docs.aws.amazon.com/lexv2/latest/APIReference/API_runtime_RecognizeText.html) and [RecognizeUtterance](https://docs.aws.amazon.com/lexv2/latest/APIReference/API_runtime_RecognizeUtterance.html) operations.
    public var sessionId: Swift.String?

    public init(
        botId: Swift.String? = nil,
        localeId: Swift.String? = nil,
        sessionId: Swift.String? = nil
    )
    {
        self.botId = botId
        self.localeId = localeId
        self.sessionId = sessionId
    }
}

public struct DeleteUtterancesOutput {

    public init() { }
}

public struct DescribeBotInput {
    /// The unique identifier of the bot to describe.
    /// This member is required.
    public var botId: Swift.String?

    public init(
        botId: Swift.String? = nil
    )
    {
        self.botId = botId
    }
}

public struct DescribeBotOutput {
    /// The unique identifier of the bot.
    public var botId: Swift.String?
    /// The list of bots in the network that was described.
    public var botMembers: [LexModelsV2ClientTypes.BotMember]?
    /// The name of the bot.
    public var botName: Swift.String?
    /// The current status of the bot. When the status is Available the bot is ready to be used in conversations with users.
    public var botStatus: LexModelsV2ClientTypes.BotStatus?
    /// The type of the bot that was described.
    public var botType: LexModelsV2ClientTypes.BotType?
    /// A timestamp of the date and time that the bot was created.
    public var creationDateTime: Foundation.Date?
    /// Settings for managing data privacy of the bot and its conversations with users.
    public var dataPrivacy: LexModelsV2ClientTypes.DataPrivacy?
    /// The description of the bot.
    public var description: Swift.String?
    /// If the botStatus is Failed, this contains a list of reasons that the bot couldn't be built.
    public var failureReasons: [Swift.String]?
    /// The maximum time in seconds that Amazon Lex retains the data gathered in a conversation.
    public var idleSessionTTLInSeconds: Swift.Int?
    /// A timestamp of the date and time that the bot was last updated.
    public var lastUpdatedDateTime: Foundation.Date?
    /// The Amazon Resource Name (ARN) of an IAM role that has permission to access the bot.
    public var roleArn: Swift.String?

    public init(
        botId: Swift.String? = nil,
        botMembers: [LexModelsV2ClientTypes.BotMember]? = nil,
        botName: Swift.String? = nil,
        botStatus: LexModelsV2ClientTypes.BotStatus? = nil,
        botType: LexModelsV2ClientTypes.BotType? = nil,
        creationDateTime: Foundation.Date? = nil,
        dataPrivacy: LexModelsV2ClientTypes.DataPrivacy? = nil,
        description: Swift.String? = nil,
        failureReasons: [Swift.String]? = nil,
        idleSessionTTLInSeconds: Swift.Int? = nil,
        lastUpdatedDateTime: Foundation.Date? = nil,
        roleArn: Swift.String? = nil
    )
    {
        self.botId = botId
        self.botMembers = botMembers
        self.botName = botName
        self.botStatus = botStatus
        self.botType = botType
        self.creationDateTime = creationDateTime
        self.dataPrivacy = dataPrivacy
        self.description = description
        self.failureReasons = failureReasons
        self.idleSessionTTLInSeconds = idleSessionTTLInSeconds
        self.lastUpdatedDateTime = lastUpdatedDateTime
        self.roleArn = roleArn
    }
}

public struct DescribeBotAliasInput {
    /// The identifier of the bot alias to describe.
    /// This member is required.
    public var botAliasId: Swift.String?
    /// The identifier of the bot associated with the bot alias to describe.
    /// This member is required.
    public var botId: Swift.String?

    public init(
        botAliasId: Swift.String? = nil,
        botId: Swift.String? = nil
    )
    {
        self.botAliasId = botAliasId
        self.botId = botId
    }
}

extension LexModelsV2ClientTypes {
    /// A network of bots.
    public struct ParentBotNetwork {
        /// The identifier of the network of bots assigned by Amazon Lex.
        /// This member is required.
        public var botId: Swift.String?
        /// The version of the network of bots.
        /// This member is required.
        public var botVersion: Swift.String?

        public init(
            botId: Swift.String? = nil,
            botVersion: Swift.String? = nil
        )
        {
            self.botId = botId
            self.botVersion = botVersion
        }
    }

}

public struct DescribeBotAliasOutput {
    /// A list of events that affect a bot alias. For example, an event is recorded when the version that the alias points to changes.
    public var botAliasHistoryEvents: [LexModelsV2ClientTypes.BotAliasHistoryEvent]?
    /// The identifier of the bot alias.
    public var botAliasId: Swift.String?
    /// The locale settings that are unique to the alias.
    public var botAliasLocaleSettings: [Swift.String: LexModelsV2ClientTypes.BotAliasLocaleSettings]?
    /// The name of the bot alias.
    public var botAliasName: Swift.String?
    /// The current status of the alias. When the alias is Available, the alias is ready for use with your bot.
    public var botAliasStatus: LexModelsV2ClientTypes.BotAliasStatus?
    /// The identifier of the bot associated with the bot alias.
    public var botId: Swift.String?
    /// The version of the bot associated with the bot alias.
    public var botVersion: Swift.String?
    /// Specifics of how Amazon Lex logs text and audio conversations with the bot associated with the alias.
    public var conversationLogSettings: LexModelsV2ClientTypes.ConversationLogSettings?
    /// A timestamp of the date and time that the alias was created.
    public var creationDateTime: Foundation.Date?
    /// The description of the bot alias.
    public var description: Swift.String?
    /// A timestamp of the date and time that the alias was last updated.
    public var lastUpdatedDateTime: Foundation.Date?
    /// A list of the networks to which the bot alias you described belongs.
    public var parentBotNetworks: [LexModelsV2ClientTypes.ParentBotNetwork]?
    /// Determines whether Amazon Lex will use Amazon Comprehend to detect the sentiment of user utterances.
    public var sentimentAnalysisSettings: LexModelsV2ClientTypes.SentimentAnalysisSettings?

    public init(
        botAliasHistoryEvents: [LexModelsV2ClientTypes.BotAliasHistoryEvent]? = nil,
        botAliasId: Swift.String? = nil,
        botAliasLocaleSettings: [Swift.String: LexModelsV2ClientTypes.BotAliasLocaleSettings]? = nil,
        botAliasName: Swift.String? = nil,
        botAliasStatus: LexModelsV2ClientTypes.BotAliasStatus? = nil,
        botId: Swift.String? = nil,
        botVersion: Swift.String? = nil,
        conversationLogSettings: LexModelsV2ClientTypes.ConversationLogSettings? = nil,
        creationDateTime: Foundation.Date? = nil,
        description: Swift.String? = nil,
        lastUpdatedDateTime: Foundation.Date? = nil,
        parentBotNetworks: [LexModelsV2ClientTypes.ParentBotNetwork]? = nil,
        sentimentAnalysisSettings: LexModelsV2ClientTypes.SentimentAnalysisSettings? = nil
    )
    {
        self.botAliasHistoryEvents = botAliasHistoryEvents
        self.botAliasId = botAliasId
        self.botAliasLocaleSettings = botAliasLocaleSettings
        self.botAliasName = botAliasName
        self.botAliasStatus = botAliasStatus
        self.botId = botId
        self.botVersion = botVersion
        self.conversationLogSettings = conversationLogSettings
        self.creationDateTime = creationDateTime
        self.description = description
        self.lastUpdatedDateTime = lastUpdatedDateTime
        self.parentBotNetworks = parentBotNetworks
        self.sentimentAnalysisSettings = sentimentAnalysisSettings
    }
}

public struct DescribeBotLocaleInput {
    /// The identifier of the bot associated with the locale.
    /// This member is required.
    public var botId: Swift.String?
    /// The version of the bot associated with the locale.
    /// This member is required.
    public var botVersion: Swift.String?
    /// The unique identifier of the locale to describe. The string must match one of the supported locales. For more information, see [Supported languages](https://docs.aws.amazon.com/lexv2/latest/dg/how-languages.html).
    /// This member is required.
    public var localeId: Swift.String?

    public init(
        botId: Swift.String? = nil,
        botVersion: Swift.String? = nil,
        localeId: Swift.String? = nil
    )
    {
        self.botId = botId
        self.botVersion = botVersion
        self.localeId = localeId
    }
}

public struct DescribeBotLocaleOutput {
    /// The identifier of the bot associated with the locale.
    public var botId: Swift.String?
    /// History of changes, such as when a locale is used in an alias, that have taken place for the locale.
    public var botLocaleHistoryEvents: [LexModelsV2ClientTypes.BotLocaleHistoryEvent]?
    /// The status of the bot. If the status is Failed, the reasons for the failure are listed in the failureReasons field.
    public var botLocaleStatus: LexModelsV2ClientTypes.BotLocaleStatus?
    /// The version of the bot associated with the locale.
    public var botVersion: Swift.String?
    /// The date and time that the locale was created.
    public var creationDateTime: Foundation.Date?
    /// The description of the locale.
    public var description: Swift.String?
    /// if botLocaleStatus is Failed, Amazon Lex explains why it failed to build the bot.
    public var failureReasons: [Swift.String]?
    /// Contains settings for Amazon Bedrock's generative AI features for your bot locale.
    public var generativeAISettings: LexModelsV2ClientTypes.GenerativeAISettings?
    /// The number of intents defined for the locale.
    public var intentsCount: Swift.Int?
    /// The date and time that the locale was last submitted for building.
    public var lastBuildSubmittedDateTime: Foundation.Date?
    /// The date and time that the locale was last updated.
    public var lastUpdatedDateTime: Foundation.Date?
    /// The unique identifier of the described locale.
    public var localeId: Swift.String?
    /// The name of the locale.
    public var localeName: Swift.String?
    /// The confidence threshold where Amazon Lex inserts the AMAZON.FallbackIntent and AMAZON.KendraSearchIntent intents in the list of possible intents for an utterance.
    public var nluIntentConfidenceThreshold: Swift.Double?
    /// Recommended actions to take to resolve an error in the failureReasons field.
    public var recommendedActions: [Swift.String]?
    /// The number of slot types defined for the locale.
    public var slotTypesCount: Swift.Int?
    /// The Amazon Polly voice Amazon Lex uses for voice interaction with the user.
    public var voiceSettings: LexModelsV2ClientTypes.VoiceSettings?

    public init(
        botId: Swift.String? = nil,
        botLocaleHistoryEvents: [LexModelsV2ClientTypes.BotLocaleHistoryEvent]? = nil,
        botLocaleStatus: LexModelsV2ClientTypes.BotLocaleStatus? = nil,
        botVersion: Swift.String? = nil,
        creationDateTime: Foundation.Date? = nil,
        description: Swift.String? = nil,
        failureReasons: [Swift.String]? = nil,
        generativeAISettings: LexModelsV2ClientTypes.GenerativeAISettings? = nil,
        intentsCount: Swift.Int? = nil,
        lastBuildSubmittedDateTime: Foundation.Date? = nil,
        lastUpdatedDateTime: Foundation.Date? = nil,
        localeId: Swift.String? = nil,
        localeName: Swift.String? = nil,
        nluIntentConfidenceThreshold: Swift.Double? = nil,
        recommendedActions: [Swift.String]? = nil,
        slotTypesCount: Swift.Int? = nil,
        voiceSettings: LexModelsV2ClientTypes.VoiceSettings? = nil
    )
    {
        self.botId = botId
        self.botLocaleHistoryEvents = botLocaleHistoryEvents
        self.botLocaleStatus = botLocaleStatus
        self.botVersion = botVersion
        self.creationDateTime = creationDateTime
        self.description = description
        self.failureReasons = failureReasons
        self.generativeAISettings = generativeAISettings
        self.intentsCount = intentsCount
        self.lastBuildSubmittedDateTime = lastBuildSubmittedDateTime
        self.lastUpdatedDateTime = lastUpdatedDateTime
        self.localeId = localeId
        self.localeName = localeName
        self.nluIntentConfidenceThreshold = nluIntentConfidenceThreshold
        self.recommendedActions = recommendedActions
        self.slotTypesCount = slotTypesCount
        self.voiceSettings = voiceSettings
    }
}

public struct DescribeBotRecommendationInput {
    /// The unique identifier of the bot associated with the bot recommendation.
    /// This member is required.
    public var botId: Swift.String?
    /// The identifier of the bot recommendation to describe.
    /// This member is required.
    public var botRecommendationId: Swift.String?
    /// The version of the bot associated with the bot recommendation.
    /// This member is required.
    public var botVersion: Swift.String?
    /// The identifier of the language and locale of the bot recommendation to describe. The string must match one of the supported locales. For more information, see [Supported languages](https://docs.aws.amazon.com/lexv2/latest/dg/how-languages.html).
    /// This member is required.
    public var localeId: Swift.String?

    public init(
        botId: Swift.String? = nil,
        botRecommendationId: Swift.String? = nil,
        botVersion: Swift.String? = nil,
        localeId: Swift.String? = nil
    )
    {
        self.botId = botId
        self.botRecommendationId = botRecommendationId
        self.botVersion = botVersion
        self.localeId = localeId
    }
}

extension LexModelsV2ClientTypes {
    /// The object representing the passwords that were used to encrypt the data related to the bot recommendation, as well as the KMS key ARN used to encrypt the associated metadata.
    public struct EncryptionSetting {
        /// The password used to encrypt the associated transcript file.
        public var associatedTranscriptsPassword: Swift.String?
        /// The password used to encrypt the recommended bot recommendation file.
        public var botLocaleExportPassword: Swift.String?
        /// The KMS key ARN used to encrypt the metadata associated with the bot recommendation.
        public var kmsKeyArn: Swift.String?

        public init(
            associatedTranscriptsPassword: Swift.String? = nil,
            botLocaleExportPassword: Swift.String? = nil,
            kmsKeyArn: Swift.String? = nil
        )
        {
            self.associatedTranscriptsPassword = associatedTranscriptsPassword
            self.botLocaleExportPassword = botLocaleExportPassword
            self.kmsKeyArn = kmsKeyArn
        }
    }

}

extension LexModelsV2ClientTypes.EncryptionSetting: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "EncryptionSetting(kmsKeyArn: \(Swift.String(describing: kmsKeyArn)), associatedTranscriptsPassword: \"CONTENT_REDACTED\", botLocaleExportPassword: \"CONTENT_REDACTED\")"}
}

extension LexModelsV2ClientTypes {
    /// The object that contains a path format that will be applied when Amazon Lex reads the transcript file in the bucket you provide. Specify this object if you only want Lex to read a subset of files in your Amazon S3 bucket.
    public struct PathFormat {
        /// A list of Amazon S3 prefixes that points to sub-folders in the Amazon S3 bucket. Specify this list if you only want Lex to read the files under this set of sub-folders.
        public var objectPrefixes: [Swift.String]?

        public init(
            objectPrefixes: [Swift.String]? = nil
        )
        {
            self.objectPrefixes = objectPrefixes
        }
    }

}

extension LexModelsV2ClientTypes {
    /// The object that contains transcript filter details that are associated with a bot recommendation.
    public struct LexTranscriptFilter {
        /// The object that contains a date range filter that will be applied to the transcript. Specify this object if you want Amazon Lex to only read the files that are within the date range.
        public var dateRangeFilter: LexModelsV2ClientTypes.DateRangeFilter?

        public init(
            dateRangeFilter: LexModelsV2ClientTypes.DateRangeFilter? = nil
        )
        {
            self.dateRangeFilter = dateRangeFilter
        }
    }

}

extension LexModelsV2ClientTypes {
    /// The object representing the filter that Amazon Lex will use to select the appropriate transcript.
    public struct TranscriptFilter {
        /// The object representing the filter that Amazon Lex will use to select the appropriate transcript when the transcript format is the Amazon Lex format.
        public var lexTranscriptFilter: LexModelsV2ClientTypes.LexTranscriptFilter?

        public init(
            lexTranscriptFilter: LexModelsV2ClientTypes.LexTranscriptFilter? = nil
        )
        {
            self.lexTranscriptFilter = lexTranscriptFilter
        }
    }

}

extension LexModelsV2ClientTypes {

    public enum TranscriptFormat: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case lex
        case sdkUnknown(Swift.String)

        public static var allCases: [TranscriptFormat] {
            return [
                .lex
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .lex: return "Lex"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension LexModelsV2ClientTypes {
    /// The object representing the Amazon S3 bucket containing the transcript, as well as the associated metadata.
    public struct S3BucketTranscriptSource {
        /// The ARN of the KMS key that customer use to encrypt their Amazon S3 bucket. Only use this field if your bucket is encrypted using a customer managed KMS key.
        public var kmsKeyArn: Swift.String?
        /// The object that contains a path format that will be applied when Amazon Lex reads the transcript file in the bucket you provide. Specify this object if you only want Lex to read a subset of files in your Amazon S3 bucket.
        public var pathFormat: LexModelsV2ClientTypes.PathFormat?
        /// The name of the bucket containing the transcript and the associated metadata.
        /// This member is required.
        public var s3BucketName: Swift.String?
        /// The object that contains the filter which will be applied when Amazon Lex reads through the Amazon S3 bucket. Specify this object if you want Amazon Lex to read only a subset of the Amazon S3 bucket based on the filter you provide.
        public var transcriptFilter: LexModelsV2ClientTypes.TranscriptFilter?
        /// The format of the transcript content. Currently, Genie only supports the Amazon Lex transcript format.
        /// This member is required.
        public var transcriptFormat: LexModelsV2ClientTypes.TranscriptFormat?

        public init(
            kmsKeyArn: Swift.String? = nil,
            pathFormat: LexModelsV2ClientTypes.PathFormat? = nil,
            s3BucketName: Swift.String? = nil,
            transcriptFilter: LexModelsV2ClientTypes.TranscriptFilter? = nil,
            transcriptFormat: LexModelsV2ClientTypes.TranscriptFormat? = nil
        )
        {
            self.kmsKeyArn = kmsKeyArn
            self.pathFormat = pathFormat
            self.s3BucketName = s3BucketName
            self.transcriptFilter = transcriptFilter
            self.transcriptFormat = transcriptFormat
        }
    }

}

extension LexModelsV2ClientTypes {
    /// Indicates the setting of the location where the transcript is stored.
    public struct TranscriptSourceSetting {
        /// Indicates the setting of the Amazon S3 bucket where the transcript is stored.
        public var s3BucketTranscriptSource: LexModelsV2ClientTypes.S3BucketTranscriptSource?

        public init(
            s3BucketTranscriptSource: LexModelsV2ClientTypes.S3BucketTranscriptSource? = nil
        )
        {
            self.s3BucketTranscriptSource = s3BucketTranscriptSource
        }
    }

}

public struct DescribeBotRecommendationOutput {
    /// The identifier of the bot associated with the bot recommendation.
    public var botId: Swift.String?
    /// The identifier of the bot recommendation being described.
    public var botRecommendationId: Swift.String?
    /// The object representing the URL of the bot definition, the URL of the associated transcript and a statistical summary of the bot recommendation results.
    public var botRecommendationResults: LexModelsV2ClientTypes.BotRecommendationResults?
    /// The status of the bot recommendation. If the status is Failed, then the reasons for the failure are listed in the failureReasons field.
    public var botRecommendationStatus: LexModelsV2ClientTypes.BotRecommendationStatus?
    /// The version of the bot associated with the bot recommendation.
    public var botVersion: Swift.String?
    /// The date and time that the bot recommendation was created.
    public var creationDateTime: Foundation.Date?
    /// The object representing the passwords that were used to encrypt the data related to the bot recommendation results, as well as the KMS key ARN used to encrypt the associated metadata.
    public var encryptionSetting: LexModelsV2ClientTypes.EncryptionSetting?
    /// If botRecommendationStatus is Failed, Amazon Lex explains why.
    public var failureReasons: [Swift.String]?
    /// The date and time that the bot recommendation was last updated.
    public var lastUpdatedDateTime: Foundation.Date?
    /// The identifier of the language and locale of the bot recommendation to describe.
    public var localeId: Swift.String?
    /// The object representing the Amazon S3 bucket containing the transcript, as well as the associated metadata.
    public var transcriptSourceSetting: LexModelsV2ClientTypes.TranscriptSourceSetting?

    public init(
        botId: Swift.String? = nil,
        botRecommendationId: Swift.String? = nil,
        botRecommendationResults: LexModelsV2ClientTypes.BotRecommendationResults? = nil,
        botRecommendationStatus: LexModelsV2ClientTypes.BotRecommendationStatus? = nil,
        botVersion: Swift.String? = nil,
        creationDateTime: Foundation.Date? = nil,
        encryptionSetting: LexModelsV2ClientTypes.EncryptionSetting? = nil,
        failureReasons: [Swift.String]? = nil,
        lastUpdatedDateTime: Foundation.Date? = nil,
        localeId: Swift.String? = nil,
        transcriptSourceSetting: LexModelsV2ClientTypes.TranscriptSourceSetting? = nil
    )
    {
        self.botId = botId
        self.botRecommendationId = botRecommendationId
        self.botRecommendationResults = botRecommendationResults
        self.botRecommendationStatus = botRecommendationStatus
        self.botVersion = botVersion
        self.creationDateTime = creationDateTime
        self.encryptionSetting = encryptionSetting
        self.failureReasons = failureReasons
        self.lastUpdatedDateTime = lastUpdatedDateTime
        self.localeId = localeId
        self.transcriptSourceSetting = transcriptSourceSetting
    }
}

public struct DescribeBotReplicaInput {
    /// The request for the unique bot ID of the replicated bot being monitored.
    /// This member is required.
    public var botId: Swift.String?
    /// The request for the region of the replicated bot being monitored.
    /// This member is required.
    public var replicaRegion: Swift.String?

    public init(
        botId: Swift.String? = nil,
        replicaRegion: Swift.String? = nil
    )
    {
        self.botId = botId
        self.replicaRegion = replicaRegion
    }
}

public struct DescribeBotReplicaOutput {
    /// The unique bot ID of the replicated bot being monitored.
    public var botId: Swift.String?
    /// The operational status of the replicated bot being monitored.
    public var botReplicaStatus: LexModelsV2ClientTypes.BotReplicaStatus?
    /// The creation date and time of the replicated bot being monitored.
    public var creationDateTime: Foundation.Date?
    /// The failure reasons the bot being monitored failed to replicate.
    public var failureReasons: [Swift.String]?
    /// The region of the replicated bot being monitored.
    public var replicaRegion: Swift.String?
    /// The source region of the replicated bot being monitored.
    public var sourceRegion: Swift.String?

    public init(
        botId: Swift.String? = nil,
        botReplicaStatus: LexModelsV2ClientTypes.BotReplicaStatus? = nil,
        creationDateTime: Foundation.Date? = nil,
        failureReasons: [Swift.String]? = nil,
        replicaRegion: Swift.String? = nil,
        sourceRegion: Swift.String? = nil
    )
    {
        self.botId = botId
        self.botReplicaStatus = botReplicaStatus
        self.creationDateTime = creationDateTime
        self.failureReasons = failureReasons
        self.replicaRegion = replicaRegion
        self.sourceRegion = sourceRegion
    }
}

public struct DescribeBotResourceGenerationInput {
    /// The unique identifier of the bot for which to return the generation details.
    /// This member is required.
    public var botId: Swift.String?
    /// The version of the bot for which to return the generation details.
    /// This member is required.
    public var botVersion: Swift.String?
    /// The unique identifier of the generation request for which to return the generation details.
    /// This member is required.
    public var generationId: Swift.String?
    /// The locale of the bot for which to return the generation details.
    /// This member is required.
    public var localeId: Swift.String?

    public init(
        botId: Swift.String? = nil,
        botVersion: Swift.String? = nil,
        generationId: Swift.String? = nil,
        localeId: Swift.String? = nil
    )
    {
        self.botId = botId
        self.botVersion = botVersion
        self.generationId = generationId
        self.localeId = localeId
    }
}

extension LexModelsV2ClientTypes {

    public enum GenerationStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case complete
        case failed
        case inprogress
        case sdkUnknown(Swift.String)

        public static var allCases: [GenerationStatus] {
            return [
                .complete,
                .failed,
                .inprogress
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .complete: return "Complete"
            case .failed: return "Failed"
            case .inprogress: return "InProgress"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

public struct DescribeBotResourceGenerationOutput {
    /// The unique identifier of the bot for which the generation request was made.
    public var botId: Swift.String?
    /// The version of the bot for which the generation request was made.
    public var botVersion: Swift.String?
    /// The date and time at which the item was generated.
    public var creationDateTime: Foundation.Date?
    /// A list of reasons why the generation of bot resources through natural language description failed.
    public var failureReasons: [Swift.String]?
    /// The Amazon S3 location of the generated bot locale configuration.
    public var generatedBotLocaleUrl: Swift.String?
    /// The generation ID for which to return the generation details.
    public var generationId: Swift.String?
    /// The prompt used in the generation request.
    public var generationInputPrompt: Swift.String?
    /// The status of the generation request.
    public var generationStatus: LexModelsV2ClientTypes.GenerationStatus?
    /// The date and time at which the generated item was updated.
    public var lastUpdatedDateTime: Foundation.Date?
    /// The locale of the bot for which the generation request was made.
    public var localeId: Swift.String?
    /// The ARN of the model used to generate the bot resources.
    public var modelArn: Swift.String?

    public init(
        botId: Swift.String? = nil,
        botVersion: Swift.String? = nil,
        creationDateTime: Foundation.Date? = nil,
        failureReasons: [Swift.String]? = nil,
        generatedBotLocaleUrl: Swift.String? = nil,
        generationId: Swift.String? = nil,
        generationInputPrompt: Swift.String? = nil,
        generationStatus: LexModelsV2ClientTypes.GenerationStatus? = nil,
        lastUpdatedDateTime: Foundation.Date? = nil,
        localeId: Swift.String? = nil,
        modelArn: Swift.String? = nil
    )
    {
        self.botId = botId
        self.botVersion = botVersion
        self.creationDateTime = creationDateTime
        self.failureReasons = failureReasons
        self.generatedBotLocaleUrl = generatedBotLocaleUrl
        self.generationId = generationId
        self.generationInputPrompt = generationInputPrompt
        self.generationStatus = generationStatus
        self.lastUpdatedDateTime = lastUpdatedDateTime
        self.localeId = localeId
        self.modelArn = modelArn
    }
}

public struct DescribeBotVersionInput {
    /// The identifier of the bot containing the version to return metadata for.
    /// This member is required.
    public var botId: Swift.String?
    /// The version of the bot to return metadata for.
    /// This member is required.
    public var botVersion: Swift.String?

    public init(
        botId: Swift.String? = nil,
        botVersion: Swift.String? = nil
    )
    {
        self.botId = botId
        self.botVersion = botVersion
    }
}

public struct DescribeBotVersionOutput {
    /// The identifier of the bot that contains the version.
    public var botId: Swift.String?
    /// The members of bot network in the version that was described.
    public var botMembers: [LexModelsV2ClientTypes.BotMember]?
    /// The name of the bot that contains the version.
    public var botName: Swift.String?
    /// The current status of the bot. When the status is Available, the bot version is ready for use.
    public var botStatus: LexModelsV2ClientTypes.BotStatus?
    /// The type of the bot in the version that was described.
    public var botType: LexModelsV2ClientTypes.BotType?
    /// The version of the bot that was described.
    public var botVersion: Swift.String?
    /// A timestamp of the date and time that the bot version was created.
    public var creationDateTime: Foundation.Date?
    /// Data privacy settings for the bot version.
    public var dataPrivacy: LexModelsV2ClientTypes.DataPrivacy?
    /// The description specified for the bot.
    public var description: Swift.String?
    /// If the botStatus is Failed, this contains a list of reasons that the version couldn't be built.
    public var failureReasons: [Swift.String]?
    /// The number of seconds that a session with the bot remains active before it is discarded by Amazon Lex.
    public var idleSessionTTLInSeconds: Swift.Int?
    /// A list of the networks to which the bot version you described belongs.
    public var parentBotNetworks: [LexModelsV2ClientTypes.ParentBotNetwork]?
    /// The Amazon Resource Name (ARN) of an IAM role that has permission to access the bot version.
    public var roleArn: Swift.String?

    public init(
        botId: Swift.String? = nil,
        botMembers: [LexModelsV2ClientTypes.BotMember]? = nil,
        botName: Swift.String? = nil,
        botStatus: LexModelsV2ClientTypes.BotStatus? = nil,
        botType: LexModelsV2ClientTypes.BotType? = nil,
        botVersion: Swift.String? = nil,
        creationDateTime: Foundation.Date? = nil,
        dataPrivacy: LexModelsV2ClientTypes.DataPrivacy? = nil,
        description: Swift.String? = nil,
        failureReasons: [Swift.String]? = nil,
        idleSessionTTLInSeconds: Swift.Int? = nil,
        parentBotNetworks: [LexModelsV2ClientTypes.ParentBotNetwork]? = nil,
        roleArn: Swift.String? = nil
    )
    {
        self.botId = botId
        self.botMembers = botMembers
        self.botName = botName
        self.botStatus = botStatus
        self.botType = botType
        self.botVersion = botVersion
        self.creationDateTime = creationDateTime
        self.dataPrivacy = dataPrivacy
        self.description = description
        self.failureReasons = failureReasons
        self.idleSessionTTLInSeconds = idleSessionTTLInSeconds
        self.parentBotNetworks = parentBotNetworks
        self.roleArn = roleArn
    }
}

public struct DescribeCustomVocabularyMetadataInput {
    /// The unique identifier of the bot that contains the custom vocabulary.
    /// This member is required.
    public var botId: Swift.String?
    /// The bot version of the bot to return metadata for.
    /// This member is required.
    public var botVersion: Swift.String?
    /// The locale to return the custom vocabulary information for. The locale must be en_GB.
    /// This member is required.
    public var localeId: Swift.String?

    public init(
        botId: Swift.String? = nil,
        botVersion: Swift.String? = nil,
        localeId: Swift.String? = nil
    )
    {
        self.botId = botId
        self.botVersion = botVersion
        self.localeId = localeId
    }
}

public struct DescribeCustomVocabularyMetadataOutput {
    /// The identifier of the bot that contains the custom vocabulary.
    public var botId: Swift.String?
    /// The version of the bot that contains the custom vocabulary to describe.
    public var botVersion: Swift.String?
    /// The date and time that the custom vocabulary was created.
    public var creationDateTime: Foundation.Date?
    /// The status of the custom vocabulary. If the status is Ready the custom vocabulary is ready to use.
    public var customVocabularyStatus: LexModelsV2ClientTypes.CustomVocabularyStatus?
    /// The date and time that the custom vocabulary was last updated.
    public var lastUpdatedDateTime: Foundation.Date?
    /// The locale that contains the custom vocabulary to describe.
    public var localeId: Swift.String?

    public init(
        botId: Swift.String? = nil,
        botVersion: Swift.String? = nil,
        creationDateTime: Foundation.Date? = nil,
        customVocabularyStatus: LexModelsV2ClientTypes.CustomVocabularyStatus? = nil,
        lastUpdatedDateTime: Foundation.Date? = nil,
        localeId: Swift.String? = nil
    )
    {
        self.botId = botId
        self.botVersion = botVersion
        self.creationDateTime = creationDateTime
        self.customVocabularyStatus = customVocabularyStatus
        self.lastUpdatedDateTime = lastUpdatedDateTime
        self.localeId = localeId
    }
}

public struct DescribeExportInput {
    /// The unique identifier of the export to describe.
    /// This member is required.
    public var exportId: Swift.String?

    public init(
        exportId: Swift.String? = nil
    )
    {
        self.exportId = exportId
    }
}

public struct DescribeExportOutput {
    /// The date and time that the export was created.
    public var creationDateTime: Foundation.Date?
    /// A pre-signed S3 URL that points to the bot or bot locale archive. The URL is only available for 5 minutes after calling the DescribeExport operation.
    public var downloadUrl: Swift.String?
    /// The unique identifier of the described export.
    public var exportId: Swift.String?
    /// The status of the export. When the status is Complete the export archive file is available for download.
    public var exportStatus: LexModelsV2ClientTypes.ExportStatus?
    /// If the exportStatus is failed, contains one or more reasons why the export could not be completed.
    public var failureReasons: [Swift.String]?
    /// The file format used in the files that describe the resource.
    public var fileFormat: LexModelsV2ClientTypes.ImportExportFileFormat?
    /// The last date and time that the export was updated.
    public var lastUpdatedDateTime: Foundation.Date?
    /// The bot, bot ID, and optional locale ID of the exported bot or bot locale.
    public var resourceSpecification: LexModelsV2ClientTypes.ExportResourceSpecification?

    public init(
        creationDateTime: Foundation.Date? = nil,
        downloadUrl: Swift.String? = nil,
        exportId: Swift.String? = nil,
        exportStatus: LexModelsV2ClientTypes.ExportStatus? = nil,
        failureReasons: [Swift.String]? = nil,
        fileFormat: LexModelsV2ClientTypes.ImportExportFileFormat? = nil,
        lastUpdatedDateTime: Foundation.Date? = nil,
        resourceSpecification: LexModelsV2ClientTypes.ExportResourceSpecification? = nil
    )
    {
        self.creationDateTime = creationDateTime
        self.downloadUrl = downloadUrl
        self.exportId = exportId
        self.exportStatus = exportStatus
        self.failureReasons = failureReasons
        self.fileFormat = fileFormat
        self.lastUpdatedDateTime = lastUpdatedDateTime
        self.resourceSpecification = resourceSpecification
    }
}

public struct DescribeImportInput {
    /// The unique identifier of the import to describe.
    /// This member is required.
    public var importId: Swift.String?

    public init(
        importId: Swift.String? = nil
    )
    {
        self.importId = importId
    }
}

extension LexModelsV2ClientTypes {

    public enum MergeStrategy: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case append
        case failonconflict
        case overwrite
        case sdkUnknown(Swift.String)

        public static var allCases: [MergeStrategy] {
            return [
                .append,
                .failonconflict,
                .overwrite
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .append: return "Append"
            case .failonconflict: return "FailOnConflict"
            case .overwrite: return "Overwrite"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension LexModelsV2ClientTypes {
    /// Contains information about the Amazon S3 location from which the test set is imported.
    public struct TestSetImportInputLocation {
        /// The name of the Amazon S3 bucket.
        /// This member is required.
        public var s3BucketName: Swift.String?
        /// The path inside the Amazon S3 bucket pointing to the test-set CSV file.
        /// This member is required.
        public var s3Path: Swift.String?

        public init(
            s3BucketName: Swift.String? = nil,
            s3Path: Swift.String? = nil
        )
        {
            self.s3BucketName = s3BucketName
            self.s3Path = s3Path
        }
    }

}

extension LexModelsV2ClientTypes {

    public enum TestSetModality: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case audio
        case text
        case sdkUnknown(Swift.String)

        public static var allCases: [TestSetModality] {
            return [
                .audio,
                .text
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .audio: return "Audio"
            case .text: return "Text"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension LexModelsV2ClientTypes {
    /// Contains information about the location in which the test set is stored.
    public struct TestSetStorageLocation {
        /// The Amazon Resource Name (ARN) of an Amazon Web Services Key Management Service (KMS) key for encrypting the test set.
        public var kmsKeyArn: Swift.String?
        /// The name of the Amazon S3 bucket in which the test set is stored.
        /// This member is required.
        public var s3BucketName: Swift.String?
        /// The path inside the Amazon S3 bucket where the test set is stored.
        /// This member is required.
        public var s3Path: Swift.String?

        public init(
            kmsKeyArn: Swift.String? = nil,
            s3BucketName: Swift.String? = nil,
            s3Path: Swift.String? = nil
        )
        {
            self.kmsKeyArn = kmsKeyArn
            self.s3BucketName = s3BucketName
            self.s3Path = s3Path
        }
    }

}

extension LexModelsV2ClientTypes {
    /// Contains information about the test set that is imported.
    public struct TestSetImportResourceSpecification {
        /// The description of the test set.
        public var description: Swift.String?
        /// Contains information about the input location from where test-set should be imported.
        /// This member is required.
        public var importInputLocation: LexModelsV2ClientTypes.TestSetImportInputLocation?
        /// Specifies whether the test-set being imported contains written or spoken data.
        /// This member is required.
        public var modality: LexModelsV2ClientTypes.TestSetModality?
        /// The Amazon Resource Name (ARN) of an IAM role that has permission to access the test set.
        /// This member is required.
        public var roleArn: Swift.String?
        /// Contains information about the location that Amazon Lex uses to store the test-set.
        /// This member is required.
        public var storageLocation: LexModelsV2ClientTypes.TestSetStorageLocation?
        /// The name of the test set.
        /// This member is required.
        public var testSetName: Swift.String?
        /// A list of tags to add to the test set. You can only add tags when you import/generate a new test set. You can't use the UpdateTestSet operation to update tags. To update tags, use the TagResource operation.
        public var testSetTags: [Swift.String: Swift.String]?

        public init(
            description: Swift.String? = nil,
            importInputLocation: LexModelsV2ClientTypes.TestSetImportInputLocation? = nil,
            modality: LexModelsV2ClientTypes.TestSetModality? = nil,
            roleArn: Swift.String? = nil,
            storageLocation: LexModelsV2ClientTypes.TestSetStorageLocation? = nil,
            testSetName: Swift.String? = nil,
            testSetTags: [Swift.String: Swift.String]? = nil
        )
        {
            self.description = description
            self.importInputLocation = importInputLocation
            self.modality = modality
            self.roleArn = roleArn
            self.storageLocation = storageLocation
            self.testSetName = testSetName
            self.testSetTags = testSetTags
        }
    }

}

extension LexModelsV2ClientTypes {
    /// Provides information about the bot or bot locale that you want to import. You can specify the botImportSpecification or the botLocaleImportSpecification, but not both.
    public struct ImportResourceSpecification {
        /// Parameters for importing a bot.
        public var botImportSpecification: LexModelsV2ClientTypes.BotImportSpecification?
        /// Parameters for importing a bot locale.
        public var botLocaleImportSpecification: LexModelsV2ClientTypes.BotLocaleImportSpecification?
        /// Provides the parameters required for importing a custom vocabulary.
        public var customVocabularyImportSpecification: LexModelsV2ClientTypes.CustomVocabularyImportSpecification?
        /// Specifications for the test set that is imported.
        public var testSetImportResourceSpecification: LexModelsV2ClientTypes.TestSetImportResourceSpecification?

        public init(
            botImportSpecification: LexModelsV2ClientTypes.BotImportSpecification? = nil,
            botLocaleImportSpecification: LexModelsV2ClientTypes.BotLocaleImportSpecification? = nil,
            customVocabularyImportSpecification: LexModelsV2ClientTypes.CustomVocabularyImportSpecification? = nil,
            testSetImportResourceSpecification: LexModelsV2ClientTypes.TestSetImportResourceSpecification? = nil
        )
        {
            self.botImportSpecification = botImportSpecification
            self.botLocaleImportSpecification = botLocaleImportSpecification
            self.customVocabularyImportSpecification = customVocabularyImportSpecification
            self.testSetImportResourceSpecification = testSetImportResourceSpecification
        }
    }

}

public struct DescribeImportOutput {
    /// The date and time that the import was created.
    public var creationDateTime: Foundation.Date?
    /// If the importStatus field is Failed, this provides one or more reasons for the failure.
    public var failureReasons: [Swift.String]?
    /// The unique identifier of the described import.
    public var importId: Swift.String?
    /// The status of the import process. When the status is Completed the resource is imported and ready for use.
    public var importStatus: LexModelsV2ClientTypes.ImportStatus?
    /// The unique identifier that Amazon Lex assigned to the resource created by the import.
    public var importedResourceId: Swift.String?
    /// The name of the imported resource.
    public var importedResourceName: Swift.String?
    /// The date and time that the import was last updated.
    public var lastUpdatedDateTime: Foundation.Date?
    /// The strategy used when there was a name conflict between the imported resource and an existing resource. When the merge strategy is FailOnConflict existing resources are not overwritten and the import fails.
    public var mergeStrategy: LexModelsV2ClientTypes.MergeStrategy?
    /// The specifications of the imported bot, bot locale, or custom vocabulary.
    public var resourceSpecification: LexModelsV2ClientTypes.ImportResourceSpecification?

    public init(
        creationDateTime: Foundation.Date? = nil,
        failureReasons: [Swift.String]? = nil,
        importId: Swift.String? = nil,
        importStatus: LexModelsV2ClientTypes.ImportStatus? = nil,
        importedResourceId: Swift.String? = nil,
        importedResourceName: Swift.String? = nil,
        lastUpdatedDateTime: Foundation.Date? = nil,
        mergeStrategy: LexModelsV2ClientTypes.MergeStrategy? = nil,
        resourceSpecification: LexModelsV2ClientTypes.ImportResourceSpecification? = nil
    )
    {
        self.creationDateTime = creationDateTime
        self.failureReasons = failureReasons
        self.importId = importId
        self.importStatus = importStatus
        self.importedResourceId = importedResourceId
        self.importedResourceName = importedResourceName
        self.lastUpdatedDateTime = lastUpdatedDateTime
        self.mergeStrategy = mergeStrategy
        self.resourceSpecification = resourceSpecification
    }
}

public struct DescribeIntentInput {
    /// The identifier of the bot associated with the intent.
    /// This member is required.
    public var botId: Swift.String?
    /// The version of the bot associated with the intent.
    /// This member is required.
    public var botVersion: Swift.String?
    /// The identifier of the intent to describe.
    /// This member is required.
    public var intentId: Swift.String?
    /// The identifier of the language and locale of the intent to describe. The string must match one of the supported locales. For more information, see [Supported languages](https://docs.aws.amazon.com/lexv2/latest/dg/how-languages.html).
    /// This member is required.
    public var localeId: Swift.String?

    public init(
        botId: Swift.String? = nil,
        botVersion: Swift.String? = nil,
        intentId: Swift.String? = nil,
        localeId: Swift.String? = nil
    )
    {
        self.botId = botId
        self.botVersion = botVersion
        self.intentId = intentId
        self.localeId = localeId
    }
}

extension LexModelsV2ClientTypes {
    /// Sets the priority that Amazon Lex should use when eliciting slot values from a user.
    public struct SlotPriority {
        /// The priority that Amazon Lex should apply to the slot.
        /// This member is required.
        public var priority: Swift.Int?
        /// The unique identifier of the slot.
        /// This member is required.
        public var slotId: Swift.String?

        public init(
            priority: Swift.Int? = nil,
            slotId: Swift.String? = nil
        )
        {
            self.priority = priority
            self.slotId = slotId
        }
    }

}

public struct DescribeResourcePolicyInput {
    /// The Amazon Resource Name (ARN) of the bot or bot alias that the resource policy is attached to.
    /// This member is required.
    public var resourceArn: Swift.String?

    public init(
        resourceArn: Swift.String? = nil
    )
    {
        self.resourceArn = resourceArn
    }
}

public struct DescribeResourcePolicyOutput {
    /// The JSON structure that contains the resource policy. For more information about the contents of a JSON policy document, see [ IAM JSON policy reference ](https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies.html).
    public var policy: Swift.String?
    /// The Amazon Resource Name (ARN) of the bot or bot alias that the resource policy is attached to.
    public var resourceArn: Swift.String?
    /// The current revision of the resource policy. Use the revision ID to make sure that you are updating the most current version of a resource policy when you add a policy statement to a resource, delete a resource, or update a resource.
    public var revisionId: Swift.String?

    public init(
        policy: Swift.String? = nil,
        resourceArn: Swift.String? = nil,
        revisionId: Swift.String? = nil
    )
    {
        self.policy = policy
        self.resourceArn = resourceArn
        self.revisionId = revisionId
    }
}

public struct DescribeSlotInput {
    /// The identifier of the bot associated with the slot.
    /// This member is required.
    public var botId: Swift.String?
    /// The version of the bot associated with the slot.
    /// This member is required.
    public var botVersion: Swift.String?
    /// The identifier of the intent that contains the slot.
    /// This member is required.
    public var intentId: Swift.String?
    /// The identifier of the language and locale of the slot to describe. The string must match one of the supported locales. For more information, see [Supported languages](https://docs.aws.amazon.com/lexv2/latest/dg/how-languages.html).
    /// This member is required.
    public var localeId: Swift.String?
    /// The unique identifier for the slot.
    /// This member is required.
    public var slotId: Swift.String?

    public init(
        botId: Swift.String? = nil,
        botVersion: Swift.String? = nil,
        intentId: Swift.String? = nil,
        localeId: Swift.String? = nil,
        slotId: Swift.String? = nil
    )
    {
        self.botId = botId
        self.botVersion = botVersion
        self.intentId = intentId
        self.localeId = localeId
        self.slotId = slotId
    }
}

public struct DescribeSlotTypeInput {
    /// The identifier of the bot associated with the slot type.
    /// This member is required.
    public var botId: Swift.String?
    /// The version of the bot associated with the slot type.
    /// This member is required.
    public var botVersion: Swift.String?
    /// The identifier of the language and locale of the slot type to describe. The string must match one of the supported locales. For more information, see [Supported languages](https://docs.aws.amazon.com/lexv2/latest/dg/how-languages.html).
    /// This member is required.
    public var localeId: Swift.String?
    /// The identifier of the slot type.
    /// This member is required.
    public var slotTypeId: Swift.String?

    public init(
        botId: Swift.String? = nil,
        botVersion: Swift.String? = nil,
        localeId: Swift.String? = nil,
        slotTypeId: Swift.String? = nil
    )
    {
        self.botId = botId
        self.botVersion = botVersion
        self.localeId = localeId
        self.slotTypeId = slotTypeId
    }
}

public struct DescribeSlotTypeOutput {
    /// The identifier of the bot associated with the slot type.
    public var botId: Swift.String?
    /// The version of the bot associated with the slot type.
    public var botVersion: Swift.String?
    /// Specifications for a composite slot type.
    public var compositeSlotTypeSetting: LexModelsV2ClientTypes.CompositeSlotTypeSetting?
    /// A timestamp of the date and time that the slot type was created.
    public var creationDateTime: Foundation.Date?
    /// The description specified for the slot type.
    public var description: Swift.String?
    /// Provides information about the external source of the slot type's definition.
    public var externalSourceSetting: LexModelsV2ClientTypes.ExternalSourceSetting?
    /// A timestamp of the date and time that the slot type was last updated.
    public var lastUpdatedDateTime: Foundation.Date?
    /// The language and locale specified for the slot type.
    public var localeId: Swift.String?
    /// The built in slot type used as a parent to this slot type.
    public var parentSlotTypeSignature: Swift.String?
    /// The unique identifier for the slot type.
    public var slotTypeId: Swift.String?
    /// The name specified for the slot type.
    public var slotTypeName: Swift.String?
    /// The values that the slot type can take. Includes any synonyms for the slot type values.
    public var slotTypeValues: [LexModelsV2ClientTypes.SlotTypeValue]?
    /// The strategy that Amazon Lex uses to choose a value from a list of possible values.
    public var valueSelectionSetting: LexModelsV2ClientTypes.SlotValueSelectionSetting?

    public init(
        botId: Swift.String? = nil,
        botVersion: Swift.String? = nil,
        compositeSlotTypeSetting: LexModelsV2ClientTypes.CompositeSlotTypeSetting? = nil,
        creationDateTime: Foundation.Date? = nil,
        description: Swift.String? = nil,
        externalSourceSetting: LexModelsV2ClientTypes.ExternalSourceSetting? = nil,
        lastUpdatedDateTime: Foundation.Date? = nil,
        localeId: Swift.String? = nil,
        parentSlotTypeSignature: Swift.String? = nil,
        slotTypeId: Swift.String? = nil,
        slotTypeName: Swift.String? = nil,
        slotTypeValues: [LexModelsV2ClientTypes.SlotTypeValue]? = nil,
        valueSelectionSetting: LexModelsV2ClientTypes.SlotValueSelectionSetting? = nil
    )
    {
        self.botId = botId
        self.botVersion = botVersion
        self.compositeSlotTypeSetting = compositeSlotTypeSetting
        self.creationDateTime = creationDateTime
        self.description = description
        self.externalSourceSetting = externalSourceSetting
        self.lastUpdatedDateTime = lastUpdatedDateTime
        self.localeId = localeId
        self.parentSlotTypeSignature = parentSlotTypeSignature
        self.slotTypeId = slotTypeId
        self.slotTypeName = slotTypeName
        self.slotTypeValues = slotTypeValues
        self.valueSelectionSetting = valueSelectionSetting
    }
}

public struct DescribeTestExecutionInput {
    /// The execution Id of the test set execution.
    /// This member is required.
    public var testExecutionId: Swift.String?

    public init(
        testExecutionId: Swift.String? = nil
    )
    {
        self.testExecutionId = testExecutionId
    }
}

extension LexModelsV2ClientTypes {

    public enum TestExecutionApiMode: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case nonstreaming
        case streaming
        case sdkUnknown(Swift.String)

        public static var allCases: [TestExecutionApiMode] {
            return [
                .nonstreaming,
                .streaming
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .nonstreaming: return "NonStreaming"
            case .streaming: return "Streaming"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension LexModelsV2ClientTypes {
    /// Contains information about the bot used for the test execution.
    public struct TestExecutionTarget {
        /// Contains information about the bot alias used for the test execution.
        public var botAliasTarget: LexModelsV2ClientTypes.BotAliasTestExecutionTarget?

        public init(
            botAliasTarget: LexModelsV2ClientTypes.BotAliasTestExecutionTarget? = nil
        )
        {
            self.botAliasTarget = botAliasTarget
        }
    }

}

extension LexModelsV2ClientTypes {

    public enum TestExecutionModality: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case audio
        case text
        case sdkUnknown(Swift.String)

        public static var allCases: [TestExecutionModality] {
            return [
                .audio,
                .text
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .audio: return "Audio"
            case .text: return "Text"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension LexModelsV2ClientTypes {

    public enum TestExecutionStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case completed
        case failed
        case inprogress
        case pending
        case stopped
        case stopping
        case waiting
        case sdkUnknown(Swift.String)

        public static var allCases: [TestExecutionStatus] {
            return [
                .completed,
                .failed,
                .inprogress,
                .pending,
                .stopped,
                .stopping,
                .waiting
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .completed: return "Completed"
            case .failed: return "Failed"
            case .inprogress: return "InProgress"
            case .pending: return "Pending"
            case .stopped: return "Stopped"
            case .stopping: return "Stopping"
            case .waiting: return "Waiting"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

public struct DescribeTestExecutionOutput {
    /// Indicates whether we use streaming or non-streaming APIs are used for the test set execution. For streaming, StartConversation Amazon Lex Runtime API is used. Whereas for non-streaming, RecognizeUtterance and RecognizeText Amazon Lex Runtime API is used.
    public var apiMode: LexModelsV2ClientTypes.TestExecutionApiMode?
    /// The execution creation date and time for the test set execution.
    public var creationDateTime: Foundation.Date?
    /// Reasons for the failure of the test set execution.
    public var failureReasons: [Swift.String]?
    /// The date and time of the last update for the execution.
    public var lastUpdatedDateTime: Foundation.Date?
    /// The target bot for the test set execution details.
    public var target: LexModelsV2ClientTypes.TestExecutionTarget?
    /// The execution Id for the test set execution.
    public var testExecutionId: Swift.String?
    /// Indicates whether test set is audio or text.
    public var testExecutionModality: LexModelsV2ClientTypes.TestExecutionModality?
    /// The test execution status for the test execution.
    public var testExecutionStatus: LexModelsV2ClientTypes.TestExecutionStatus?
    /// The test set Id for the test set execution.
    public var testSetId: Swift.String?
    /// The test set name of the test set execution.
    public var testSetName: Swift.String?

    public init(
        apiMode: LexModelsV2ClientTypes.TestExecutionApiMode? = nil,
        creationDateTime: Foundation.Date? = nil,
        failureReasons: [Swift.String]? = nil,
        lastUpdatedDateTime: Foundation.Date? = nil,
        target: LexModelsV2ClientTypes.TestExecutionTarget? = nil,
        testExecutionId: Swift.String? = nil,
        testExecutionModality: LexModelsV2ClientTypes.TestExecutionModality? = nil,
        testExecutionStatus: LexModelsV2ClientTypes.TestExecutionStatus? = nil,
        testSetId: Swift.String? = nil,
        testSetName: Swift.String? = nil
    )
    {
        self.apiMode = apiMode
        self.creationDateTime = creationDateTime
        self.failureReasons = failureReasons
        self.lastUpdatedDateTime = lastUpdatedDateTime
        self.target = target
        self.testExecutionId = testExecutionId
        self.testExecutionModality = testExecutionModality
        self.testExecutionStatus = testExecutionStatus
        self.testSetId = testSetId
        self.testSetName = testSetName
    }
}

public struct DescribeTestSetInput {
    /// The test set Id for the test set request.
    /// This member is required.
    public var testSetId: Swift.String?

    public init(
        testSetId: Swift.String? = nil
    )
    {
        self.testSetId = testSetId
    }
}

extension LexModelsV2ClientTypes {

    public enum TestSetStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case deleting
        case importing
        case pendingannotation
        case ready
        case validationerror
        case sdkUnknown(Swift.String)

        public static var allCases: [TestSetStatus] {
            return [
                .deleting,
                .importing,
                .pendingannotation,
                .ready,
                .validationerror
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .deleting: return "Deleting"
            case .importing: return "Importing"
            case .pendingannotation: return "PendingAnnotation"
            case .ready: return "Ready"
            case .validationerror: return "ValidationError"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

public struct DescribeTestSetOutput {
    /// The creation date and time for the test set data.
    public var creationDateTime: Foundation.Date?
    /// The description of the test set.
    public var description: Swift.String?
    /// The date and time for the last update of the test set data.
    public var lastUpdatedDateTime: Foundation.Date?
    /// Indicates whether the test set is audio or text data.
    public var modality: LexModelsV2ClientTypes.TestSetModality?
    /// The total number of agent and user turn in the test set.
    public var numTurns: Swift.Int?
    /// The roleARN used for any operation in the test set to access resources in the Amazon Web Services account.
    public var roleArn: Swift.String?
    /// The status of the test set.
    public var status: LexModelsV2ClientTypes.TestSetStatus?
    /// The Amazon S3 storage location for the test set data.
    public var storageLocation: LexModelsV2ClientTypes.TestSetStorageLocation?
    /// The test set Id for the test set response.
    public var testSetId: Swift.String?
    /// The test set name of the test set.
    public var testSetName: Swift.String?

    public init(
        creationDateTime: Foundation.Date? = nil,
        description: Swift.String? = nil,
        lastUpdatedDateTime: Foundation.Date? = nil,
        modality: LexModelsV2ClientTypes.TestSetModality? = nil,
        numTurns: Swift.Int? = nil,
        roleArn: Swift.String? = nil,
        status: LexModelsV2ClientTypes.TestSetStatus? = nil,
        storageLocation: LexModelsV2ClientTypes.TestSetStorageLocation? = nil,
        testSetId: Swift.String? = nil,
        testSetName: Swift.String? = nil
    )
    {
        self.creationDateTime = creationDateTime
        self.description = description
        self.lastUpdatedDateTime = lastUpdatedDateTime
        self.modality = modality
        self.numTurns = numTurns
        self.roleArn = roleArn
        self.status = status
        self.storageLocation = storageLocation
        self.testSetId = testSetId
        self.testSetName = testSetName
    }
}

public struct DescribeTestSetDiscrepancyReportInput {
    /// The unique identifier of the test set discrepancy report.
    /// This member is required.
    public var testSetDiscrepancyReportId: Swift.String?

    public init(
        testSetDiscrepancyReportId: Swift.String? = nil
    )
    {
        self.testSetDiscrepancyReportId = testSetDiscrepancyReportId
    }
}

extension LexModelsV2ClientTypes {

    public enum TestSetDiscrepancyReportStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case completed
        case failed
        case inprogress
        case sdkUnknown(Swift.String)

        public static var allCases: [TestSetDiscrepancyReportStatus] {
            return [
                .completed,
                .failed,
                .inprogress
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .completed: return "Completed"
            case .failed: return "Failed"
            case .inprogress: return "InProgress"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension LexModelsV2ClientTypes {
    /// Contains information about discrepancy in an intent information between the test set and the bot.
    public struct TestSetIntentDiscrepancyItem {
        /// The error message for a discrepancy for an intent between the test set and the bot.
        /// This member is required.
        public var errorMessage: Swift.String?
        /// The name of the intent in the discrepancy report.
        /// This member is required.
        public var intentName: Swift.String?

        public init(
            errorMessage: Swift.String? = nil,
            intentName: Swift.String? = nil
        )
        {
            self.errorMessage = errorMessage
            self.intentName = intentName
        }
    }

}

extension LexModelsV2ClientTypes {
    /// Contains information about discrepancy in a slot information between the test set and the bot.
    public struct TestSetSlotDiscrepancyItem {
        /// The error message for a discrepancy for an intent between the test set and the bot.
        /// This member is required.
        public var errorMessage: Swift.String?
        /// The name of the intent associated with the slot in the discrepancy report.
        /// This member is required.
        public var intentName: Swift.String?
        /// The name of the slot in the discrepancy report.
        /// This member is required.
        public var slotName: Swift.String?

        public init(
            errorMessage: Swift.String? = nil,
            intentName: Swift.String? = nil,
            slotName: Swift.String? = nil
        )
        {
            self.errorMessage = errorMessage
            self.intentName = intentName
            self.slotName = slotName
        }
    }

}

extension LexModelsV2ClientTypes {
    /// Contains details about the errors in the test set discrepancy report
    public struct TestSetDiscrepancyErrors {
        /// Contains information about discrepancies found for intents between the test set and the bot.
        /// This member is required.
        public var intentDiscrepancies: [LexModelsV2ClientTypes.TestSetIntentDiscrepancyItem]?
        /// Contains information about discrepancies found for slots between the test set and the bot.
        /// This member is required.
        public var slotDiscrepancies: [LexModelsV2ClientTypes.TestSetSlotDiscrepancyItem]?

        public init(
            intentDiscrepancies: [LexModelsV2ClientTypes.TestSetIntentDiscrepancyItem]? = nil,
            slotDiscrepancies: [LexModelsV2ClientTypes.TestSetSlotDiscrepancyItem]? = nil
        )
        {
            self.intentDiscrepancies = intentDiscrepancies
            self.slotDiscrepancies = slotDiscrepancies
        }
    }

}

public struct DescribeTestSetDiscrepancyReportOutput {
    /// The time and date of creation for the test set discrepancy report.
    public var creationDateTime: Foundation.Date?
    /// The failure report for the test set discrepancy report generation action.
    public var failureReasons: [Swift.String]?
    /// The date and time of the last update for the test set discrepancy report.
    public var lastUpdatedDataTime: Foundation.Date?
    /// The target bot location for the test set discrepancy report.
    public var target: LexModelsV2ClientTypes.TestSetDiscrepancyReportResourceTarget?
    /// Pre-signed Amazon S3 URL to download the test set discrepancy report.
    public var testSetDiscrepancyRawOutputUrl: Swift.String?
    /// The unique identifier of the test set discrepancy report to describe.
    public var testSetDiscrepancyReportId: Swift.String?
    /// The status for the test set discrepancy report.
    public var testSetDiscrepancyReportStatus: LexModelsV2ClientTypes.TestSetDiscrepancyReportStatus?
    /// The top 200 error results from the test set discrepancy report.
    public var testSetDiscrepancyTopErrors: LexModelsV2ClientTypes.TestSetDiscrepancyErrors?
    /// The test set Id for the test set discrepancy report.
    public var testSetId: Swift.String?

    public init(
        creationDateTime: Foundation.Date? = nil,
        failureReasons: [Swift.String]? = nil,
        lastUpdatedDataTime: Foundation.Date? = nil,
        target: LexModelsV2ClientTypes.TestSetDiscrepancyReportResourceTarget? = nil,
        testSetDiscrepancyRawOutputUrl: Swift.String? = nil,
        testSetDiscrepancyReportId: Swift.String? = nil,
        testSetDiscrepancyReportStatus: LexModelsV2ClientTypes.TestSetDiscrepancyReportStatus? = nil,
        testSetDiscrepancyTopErrors: LexModelsV2ClientTypes.TestSetDiscrepancyErrors? = nil,
        testSetId: Swift.String? = nil
    )
    {
        self.creationDateTime = creationDateTime
        self.failureReasons = failureReasons
        self.lastUpdatedDataTime = lastUpdatedDataTime
        self.target = target
        self.testSetDiscrepancyRawOutputUrl = testSetDiscrepancyRawOutputUrl
        self.testSetDiscrepancyReportId = testSetDiscrepancyReportId
        self.testSetDiscrepancyReportStatus = testSetDiscrepancyReportStatus
        self.testSetDiscrepancyTopErrors = testSetDiscrepancyTopErrors
        self.testSetId = testSetId
    }
}

public struct DescribeTestSetGenerationInput {
    /// The unique identifier of the test set generation.
    /// This member is required.
    public var testSetGenerationId: Swift.String?

    public init(
        testSetGenerationId: Swift.String? = nil
    )
    {
        self.testSetGenerationId = testSetGenerationId
    }
}

extension LexModelsV2ClientTypes {
    /// Contains information about the data source from which the test set is generated.
    public struct TestSetGenerationDataSource {
        /// Contains information about the bot from which the conversation logs are sourced.
        public var conversationLogsDataSource: LexModelsV2ClientTypes.ConversationLogsDataSource?

        public init(
            conversationLogsDataSource: LexModelsV2ClientTypes.ConversationLogsDataSource? = nil
        )
        {
            self.conversationLogsDataSource = conversationLogsDataSource
        }
    }

}

extension LexModelsV2ClientTypes {

    public enum TestSetGenerationStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case failed
        case generating
        case pending
        case ready
        case sdkUnknown(Swift.String)

        public static var allCases: [TestSetGenerationStatus] {
            return [
                .failed,
                .generating,
                .pending,
                .ready
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .failed: return "Failed"
            case .generating: return "Generating"
            case .pending: return "Pending"
            case .ready: return "Ready"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

public struct DescribeTestSetGenerationOutput {
    /// The creation date and time for the test set generation.
    public var creationDateTime: Foundation.Date?
    /// The test set description for the test set generation.
    public var description: Swift.String?
    /// The reasons the test set generation failed.
    public var failureReasons: [Swift.String]?
    /// The data source of the test set used for the test set generation.
    public var generationDataSource: LexModelsV2ClientTypes.TestSetGenerationDataSource?
    /// The date and time of the last update for the test set generation.
    public var lastUpdatedDateTime: Foundation.Date?
    /// The roleARN of the test set used for the test set generation.
    public var roleArn: Swift.String?
    /// The Amazon S3 storage location for the test set generation.
    public var storageLocation: LexModelsV2ClientTypes.TestSetStorageLocation?
    /// The unique identifier of the test set generation.
    public var testSetGenerationId: Swift.String?
    /// The status for the test set generation.
    public var testSetGenerationStatus: LexModelsV2ClientTypes.TestSetGenerationStatus?
    /// The unique identifier for the test set created for the generated test set.
    public var testSetId: Swift.String?
    /// The test set name for the generated test set.
    public var testSetName: Swift.String?

    public init(
        creationDateTime: Foundation.Date? = nil,
        description: Swift.String? = nil,
        failureReasons: [Swift.String]? = nil,
        generationDataSource: LexModelsV2ClientTypes.TestSetGenerationDataSource? = nil,
        lastUpdatedDateTime: Foundation.Date? = nil,
        roleArn: Swift.String? = nil,
        storageLocation: LexModelsV2ClientTypes.TestSetStorageLocation? = nil,
        testSetGenerationId: Swift.String? = nil,
        testSetGenerationStatus: LexModelsV2ClientTypes.TestSetGenerationStatus? = nil,
        testSetId: Swift.String? = nil,
        testSetName: Swift.String? = nil
    )
    {
        self.creationDateTime = creationDateTime
        self.description = description
        self.failureReasons = failureReasons
        self.generationDataSource = generationDataSource
        self.lastUpdatedDateTime = lastUpdatedDateTime
        self.roleArn = roleArn
        self.storageLocation = storageLocation
        self.testSetGenerationId = testSetGenerationId
        self.testSetGenerationStatus = testSetGenerationStatus
        self.testSetId = testSetId
        self.testSetName = testSetName
    }
}

extension LexModelsV2ClientTypes {

    public enum ExportFilterName: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case exportresourcetype
        case sdkUnknown(Swift.String)

        public static var allCases: [ExportFilterName] {
            return [
                .exportresourcetype
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .exportresourcetype: return "ExportResourceType"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension LexModelsV2ClientTypes {

    public enum ExportFilterOperator: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case contains
        case equals
        case sdkUnknown(Swift.String)

        public static var allCases: [ExportFilterOperator] {
            return [
                .contains,
                .equals
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .contains: return "CO"
            case .equals: return "EQ"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension LexModelsV2ClientTypes {
    /// Filters the response form the [ListExports](https://docs.aws.amazon.com/lexv2/latest/APIReference/API_ListExports.html) operation
    public struct ExportFilter {
        /// The name of the field to use for filtering.
        /// This member is required.
        public var name: LexModelsV2ClientTypes.ExportFilterName?
        /// The operator to use for the filter. Specify EQ when the ListExports operation should return only resource types that equal the specified value. Specify CO when the ListExports operation should return resource types that contain the specified value.
        /// This member is required.
        public var `operator`: LexModelsV2ClientTypes.ExportFilterOperator?
        /// The values to use to filter the response. The values must be Bot, BotLocale, or CustomVocabulary.
        /// This member is required.
        public var values: [Swift.String]?

        public init(
            name: LexModelsV2ClientTypes.ExportFilterName? = nil,
            `operator`: LexModelsV2ClientTypes.ExportFilterOperator? = nil,
            values: [Swift.String]? = nil
        )
        {
            self.name = name
            self.`operator` = `operator`
            self.values = values
        }
    }

}

extension LexModelsV2ClientTypes {

    public enum ExportSortAttribute: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case lastupdateddatetime
        case sdkUnknown(Swift.String)

        public static var allCases: [ExportSortAttribute] {
            return [
                .lastupdateddatetime
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .lastupdateddatetime: return "LastUpdatedDateTime"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension LexModelsV2ClientTypes {
    /// Provides information about sorting a list of exports.
    public struct ExportSortBy {
        /// The export field to use for sorting.
        /// This member is required.
        public var attribute: LexModelsV2ClientTypes.ExportSortAttribute?
        /// The order to sort the list.
        /// This member is required.
        public var order: LexModelsV2ClientTypes.SortOrder?

        public init(
            attribute: LexModelsV2ClientTypes.ExportSortAttribute? = nil,
            order: LexModelsV2ClientTypes.SortOrder? = nil
        )
        {
            self.attribute = attribute
            self.order = order
        }
    }

}

extension LexModelsV2ClientTypes {
    /// Provides summary information about an export in an export list.
    public struct ExportSummary {
        /// The date and time that the export was created.
        public var creationDateTime: Foundation.Date?
        /// The unique identifier that Amazon Lex assigned to the export.
        public var exportId: Swift.String?
        /// The status of the export. When the status is Completed the export is ready to download.
        public var exportStatus: LexModelsV2ClientTypes.ExportStatus?
        /// The file format used in the export files.
        public var fileFormat: LexModelsV2ClientTypes.ImportExportFileFormat?
        /// The date and time that the export was last updated.
        public var lastUpdatedDateTime: Foundation.Date?
        /// Information about the bot or bot locale that was exported.
        public var resourceSpecification: LexModelsV2ClientTypes.ExportResourceSpecification?

        public init(
            creationDateTime: Foundation.Date? = nil,
            exportId: Swift.String? = nil,
            exportStatus: LexModelsV2ClientTypes.ExportStatus? = nil,
            fileFormat: LexModelsV2ClientTypes.ImportExportFileFormat? = nil,
            lastUpdatedDateTime: Foundation.Date? = nil,
            resourceSpecification: LexModelsV2ClientTypes.ExportResourceSpecification? = nil
        )
        {
            self.creationDateTime = creationDateTime
            self.exportId = exportId
            self.exportStatus = exportStatus
            self.fileFormat = fileFormat
            self.lastUpdatedDateTime = lastUpdatedDateTime
            self.resourceSpecification = resourceSpecification
        }
    }

}

public struct GenerateBotElementInput {
    /// The bot unique Id for the bot request to generate utterances.
    /// This member is required.
    public var botId: Swift.String?
    /// The bot version for the bot request to generate utterances.
    /// This member is required.
    public var botVersion: Swift.String?
    /// The intent unique Id for the bot request to generate utterances.
    /// This member is required.
    public var intentId: Swift.String?
    /// The unique locale Id for the bot request to generate utterances.
    /// This member is required.
    public var localeId: Swift.String?

    public init(
        botId: Swift.String? = nil,
        botVersion: Swift.String? = nil,
        intentId: Swift.String? = nil,
        localeId: Swift.String? = nil
    )
    {
        self.botId = botId
        self.botVersion = botVersion
        self.intentId = intentId
        self.localeId = localeId
    }
}

public struct GenerateBotElementOutput {
    /// The unique bot Id for the bot which received the response.
    public var botId: Swift.String?
    /// The unique bot version for the bot which received the response.
    public var botVersion: Swift.String?
    /// The unique intent Id for the bot which received the response.
    public var intentId: Swift.String?
    /// The unique locale Id for the bot which received the response.
    public var localeId: Swift.String?
    /// The sample utterances for the bot which received the response.
    public var sampleUtterances: [LexModelsV2ClientTypes.SampleUtterance]?

    public init(
        botId: Swift.String? = nil,
        botVersion: Swift.String? = nil,
        intentId: Swift.String? = nil,
        localeId: Swift.String? = nil,
        sampleUtterances: [LexModelsV2ClientTypes.SampleUtterance]? = nil
    )
    {
        self.botId = botId
        self.botVersion = botVersion
        self.intentId = intentId
        self.localeId = localeId
        self.sampleUtterances = sampleUtterances
    }
}

extension LexModelsV2ClientTypes {

    public enum GenerationSortByAttribute: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case creationstarttime
        case lastupdatedtime
        case sdkUnknown(Swift.String)

        public static var allCases: [GenerationSortByAttribute] {
            return [
                .creationstarttime,
                .lastupdatedtime
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .creationstarttime: return "creationStartTime"
            case .lastupdatedtime: return "lastUpdatedTime"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension LexModelsV2ClientTypes {
    /// Specifies the attribute and method by which to sort the generation request information.
    public struct GenerationSortBy {
        /// The attribute by which to sort the generation request information. You can sort by the following attributes.
        ///
        /// * creationStartTime – The time at which the generation request was created.
        ///
        /// * lastUpdatedTime – The time at which the generation request was last updated.
        /// This member is required.
        public var attribute: LexModelsV2ClientTypes.GenerationSortByAttribute?
        /// The order by which to sort the generation request information.
        /// This member is required.
        public var order: LexModelsV2ClientTypes.SortOrder?

        public init(
            attribute: LexModelsV2ClientTypes.GenerationSortByAttribute? = nil,
            order: LexModelsV2ClientTypes.SortOrder? = nil
        )
        {
            self.attribute = attribute
            self.order = order
        }
    }

}

extension LexModelsV2ClientTypes {
    /// Contains information about a generation request made for the bot locale.
    public struct GenerationSummary {
        /// The date and time at which the generation request was made.
        public var creationDateTime: Foundation.Date?
        /// The unique identifier of the generation request.
        public var generationId: Swift.String?
        /// The status of the generation request.
        public var generationStatus: LexModelsV2ClientTypes.GenerationStatus?
        /// The date and time at which the generation request was last updated.
        public var lastUpdatedDateTime: Foundation.Date?

        public init(
            creationDateTime: Foundation.Date? = nil,
            generationId: Swift.String? = nil,
            generationStatus: LexModelsV2ClientTypes.GenerationStatus? = nil,
            lastUpdatedDateTime: Foundation.Date? = nil
        )
        {
            self.creationDateTime = creationDateTime
            self.generationId = generationId
            self.generationStatus = generationStatus
            self.lastUpdatedDateTime = lastUpdatedDateTime
        }
    }

}

public struct GetTestExecutionArtifactsUrlInput {
    /// The unique identifier of the completed test execution.
    /// This member is required.
    public var testExecutionId: Swift.String?

    public init(
        testExecutionId: Swift.String? = nil
    )
    {
        self.testExecutionId = testExecutionId
    }
}

public struct GetTestExecutionArtifactsUrlOutput {
    /// The pre-signed Amazon S3 URL to download completed test execution.
    public var downloadArtifactsUrl: Swift.String?
    /// The unique identifier of the completed test execution.
    public var testExecutionId: Swift.String?

    public init(
        downloadArtifactsUrl: Swift.String? = nil,
        testExecutionId: Swift.String? = nil
    )
    {
        self.downloadArtifactsUrl = downloadArtifactsUrl
        self.testExecutionId = testExecutionId
    }
}

extension LexModelsV2ClientTypes {

    public enum ImportFilterName: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case importresourcetype
        case sdkUnknown(Swift.String)

        public static var allCases: [ImportFilterName] {
            return [
                .importresourcetype
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .importresourcetype: return "ImportResourceType"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension LexModelsV2ClientTypes {

    public enum ImportFilterOperator: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case contains
        case equals
        case sdkUnknown(Swift.String)

        public static var allCases: [ImportFilterOperator] {
            return [
                .contains,
                .equals
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .contains: return "CO"
            case .equals: return "EQ"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension LexModelsV2ClientTypes {
    /// Filters the response from the [ListImports](https://docs.aws.amazon.com/lexv2/latest/APIReference/API_ListImports.html) operation.
    public struct ImportFilter {
        /// The name of the field to use for filtering.
        /// This member is required.
        public var name: LexModelsV2ClientTypes.ImportFilterName?
        /// The operator to use for the filter. Specify EQ when the ListImports operation should return only resource types that equal the specified value. Specify CO when the ListImports operation should return resource types that contain the specified value.
        /// This member is required.
        public var `operator`: LexModelsV2ClientTypes.ImportFilterOperator?
        /// The values to use to filter the response. The values must be Bot, BotLocale, or CustomVocabulary.
        /// This member is required.
        public var values: [Swift.String]?

        public init(
            name: LexModelsV2ClientTypes.ImportFilterName? = nil,
            `operator`: LexModelsV2ClientTypes.ImportFilterOperator? = nil,
            values: [Swift.String]? = nil
        )
        {
            self.name = name
            self.`operator` = `operator`
            self.values = values
        }
    }

}

extension LexModelsV2ClientTypes {

    public enum ImportResourceType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case bot
        case botlocale
        case customvocabulary
        case testset
        case sdkUnknown(Swift.String)

        public static var allCases: [ImportResourceType] {
            return [
                .bot,
                .botlocale,
                .customvocabulary,
                .testset
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .bot: return "Bot"
            case .botlocale: return "BotLocale"
            case .customvocabulary: return "CustomVocabulary"
            case .testset: return "TestSet"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension LexModelsV2ClientTypes {

    public enum ImportSortAttribute: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case lastupdateddatetime
        case sdkUnknown(Swift.String)

        public static var allCases: [ImportSortAttribute] {
            return [
                .lastupdateddatetime
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .lastupdateddatetime: return "LastUpdatedDateTime"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension LexModelsV2ClientTypes {
    /// Provides information for sorting a list of imports.
    public struct ImportSortBy {
        /// The export field to use for sorting.
        /// This member is required.
        public var attribute: LexModelsV2ClientTypes.ImportSortAttribute?
        /// The order to sort the list.
        /// This member is required.
        public var order: LexModelsV2ClientTypes.SortOrder?

        public init(
            attribute: LexModelsV2ClientTypes.ImportSortAttribute? = nil,
            order: LexModelsV2ClientTypes.SortOrder? = nil
        )
        {
            self.attribute = attribute
            self.order = order
        }
    }

}

extension LexModelsV2ClientTypes {
    /// Provides summary information about an import in an import list.
    public struct ImportSummary {
        /// The date and time that the import was created.
        public var creationDateTime: Foundation.Date?
        /// The unique identifier that Amazon Lex assigned to the import.
        public var importId: Swift.String?
        /// The status of the resource. When the status is Completed the resource is ready to build.
        public var importStatus: LexModelsV2ClientTypes.ImportStatus?
        /// The unique identifier that Amazon Lex assigned to the imported resource.
        public var importedResourceId: Swift.String?
        /// The name that you gave the imported resource.
        public var importedResourceName: Swift.String?
        /// The type of resource that was imported.
        public var importedResourceType: LexModelsV2ClientTypes.ImportResourceType?
        /// The date and time that the import was last updated.
        public var lastUpdatedDateTime: Foundation.Date?
        /// The strategy used to merge existing bot or bot locale definitions with the imported definition.
        public var mergeStrategy: LexModelsV2ClientTypes.MergeStrategy?

        public init(
            creationDateTime: Foundation.Date? = nil,
            importId: Swift.String? = nil,
            importStatus: LexModelsV2ClientTypes.ImportStatus? = nil,
            importedResourceId: Swift.String? = nil,
            importedResourceName: Swift.String? = nil,
            importedResourceType: LexModelsV2ClientTypes.ImportResourceType? = nil,
            lastUpdatedDateTime: Foundation.Date? = nil,
            mergeStrategy: LexModelsV2ClientTypes.MergeStrategy? = nil
        )
        {
            self.creationDateTime = creationDateTime
            self.importId = importId
            self.importStatus = importStatus
            self.importedResourceId = importedResourceId
            self.importedResourceName = importedResourceName
            self.importedResourceType = importedResourceType
            self.lastUpdatedDateTime = lastUpdatedDateTime
            self.mergeStrategy = mergeStrategy
        }
    }

}

extension LexModelsV2ClientTypes {
    /// Provides the phrase that Amazon Lex should look for in the user's input to the bot.
    public struct RuntimeHintValue {
        /// The phrase that Amazon Lex should look for in the user's input to the bot.
        /// This member is required.
        public var phrase: Swift.String?

        public init(
            phrase: Swift.String? = nil
        )
        {
            self.phrase = phrase
        }
    }

}

extension LexModelsV2ClientTypes {
    /// The number of items in the intent classification test.
    public struct IntentClassificationTestResultItemCounts {
        /// The number of matched and mismatched results for intent recognition for the intent.
        /// This member is required.
        public var intentMatchResultCounts: [Swift.String: Swift.Int]?
        /// The number of matched, mismatched, and execution error results for speech transcription for the intent.
        public var speechTranscriptionResultCounts: [Swift.String: Swift.Int]?
        /// The total number of results in the intent classification test.
        /// This member is required.
        public var totalResultCount: Swift.Int?

        public init(
            intentMatchResultCounts: [Swift.String: Swift.Int]? = nil,
            speechTranscriptionResultCounts: [Swift.String: Swift.Int]? = nil,
            totalResultCount: Swift.Int? = nil
        )
        {
            self.intentMatchResultCounts = intentMatchResultCounts
            self.speechTranscriptionResultCounts = speechTranscriptionResultCounts
            self.totalResultCount = totalResultCount
        }
    }

}

extension LexModelsV2ClientTypes {
    /// Information for an intent that is classified by the test workbench.
    public struct IntentClassificationTestResultItem {
        /// The name of the intent.
        /// This member is required.
        public var intentName: Swift.String?
        /// Indicates whether the conversation involves multiple turns or not.
        /// This member is required.
        public var multiTurnConversation: Swift.Bool
        /// The result of the intent classification test.
        /// This member is required.
        public var resultCounts: LexModelsV2ClientTypes.IntentClassificationTestResultItemCounts?

        public init(
            intentName: Swift.String? = nil,
            multiTurnConversation: Swift.Bool = false,
            resultCounts: LexModelsV2ClientTypes.IntentClassificationTestResultItemCounts? = nil
        )
        {
            self.intentName = intentName
            self.multiTurnConversation = multiTurnConversation
            self.resultCounts = resultCounts
        }
    }

}

extension LexModelsV2ClientTypes {
    /// Information for the results of the intent classification test.
    public struct IntentClassificationTestResults {
        /// A list of the results for the intent classification test.
        /// This member is required.
        public var items: [LexModelsV2ClientTypes.IntentClassificationTestResultItem]?

        public init(
            items: [LexModelsV2ClientTypes.IntentClassificationTestResultItem]? = nil
        )
        {
            self.items = items
        }
    }

}

extension LexModelsV2ClientTypes {

    public enum IntentFilterName: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case intentname
        case sdkUnknown(Swift.String)

        public static var allCases: [IntentFilterName] {
            return [
                .intentname
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .intentname: return "IntentName"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension LexModelsV2ClientTypes {

    public enum IntentFilterOperator: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case contains
        case equals
        case sdkUnknown(Swift.String)

        public static var allCases: [IntentFilterOperator] {
            return [
                .contains,
                .equals
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .contains: return "CO"
            case .equals: return "EQ"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension LexModelsV2ClientTypes {
    /// Filters the response from the ListIntents operation.
    public struct IntentFilter {
        /// The name of the field to use for the filter.
        /// This member is required.
        public var name: LexModelsV2ClientTypes.IntentFilterName?
        /// The operator to use for the filter. Specify EQ when the ListIntents operation should return only aliases that equal the specified value. Specify CO when the ListIntents operation should return aliases that contain the specified value.
        /// This member is required.
        public var `operator`: LexModelsV2ClientTypes.IntentFilterOperator?
        /// The value to use for the filter.
        /// This member is required.
        public var values: [Swift.String]?

        public init(
            name: LexModelsV2ClientTypes.IntentFilterName? = nil,
            `operator`: LexModelsV2ClientTypes.IntentFilterOperator? = nil,
            values: [Swift.String]? = nil
        )
        {
            self.name = name
            self.`operator` = `operator`
            self.values = values
        }
    }

}

extension LexModelsV2ClientTypes {
    /// Information about the counts for a slot resolution in the results of a test execution.
    public struct SlotResolutionTestResultItemCounts {
        /// The number of matched and mismatched results for slot resolution for the slot.
        /// This member is required.
        public var slotMatchResultCounts: [Swift.String: Swift.Int]?
        /// The number of matched, mismatched and execution error results for speech transcription for the slot.
        public var speechTranscriptionResultCounts: [Swift.String: Swift.Int]?
        /// The total number of results.
        /// This member is required.
        public var totalResultCount: Swift.Int?

        public init(
            slotMatchResultCounts: [Swift.String: Swift.Int]? = nil,
            speechTranscriptionResultCounts: [Swift.String: Swift.Int]? = nil,
            totalResultCount: Swift.Int? = nil
        )
        {
            self.slotMatchResultCounts = slotMatchResultCounts
            self.speechTranscriptionResultCounts = speechTranscriptionResultCounts
            self.totalResultCount = totalResultCount
        }
    }

}

extension LexModelsV2ClientTypes {
    /// Information about the success and failure rate of slot resolution in the results of a test execution.
    public struct SlotResolutionTestResultItem {
        /// A result for slot resolution in the results of a test execution.
        /// This member is required.
        public var resultCounts: LexModelsV2ClientTypes.SlotResolutionTestResultItemCounts?
        /// The name of the slot.
        /// This member is required.
        public var slotName: Swift.String?

        public init(
            resultCounts: LexModelsV2ClientTypes.SlotResolutionTestResultItemCounts? = nil,
            slotName: Swift.String? = nil
        )
        {
            self.resultCounts = resultCounts
            self.slotName = slotName
        }
    }

}

extension LexModelsV2ClientTypes {
    /// Information about intent-level slot resolution in a test result.
    public struct IntentLevelSlotResolutionTestResultItem {
        /// The name of the intent that was recognized.
        /// This member is required.
        public var intentName: Swift.String?
        /// Indicates whether the conversation involves multiple turns or not.
        /// This member is required.
        public var multiTurnConversation: Swift.Bool
        /// The results for the slot resolution in the test execution result.
        /// This member is required.
        public var slotResolutionResults: [LexModelsV2ClientTypes.SlotResolutionTestResultItem]?

        public init(
            intentName: Swift.String? = nil,
            multiTurnConversation: Swift.Bool = false,
            slotResolutionResults: [LexModelsV2ClientTypes.SlotResolutionTestResultItem]? = nil
        )
        {
            self.intentName = intentName
            self.multiTurnConversation = multiTurnConversation
            self.slotResolutionResults = slotResolutionResults
        }
    }

}

extension LexModelsV2ClientTypes {
    /// Indicates the success or failure of slots at the intent level.
    public struct IntentLevelSlotResolutionTestResults {
        /// Indicates the items for the slot level resolution for the intents.
        /// This member is required.
        public var items: [LexModelsV2ClientTypes.IntentLevelSlotResolutionTestResultItem]?

        public init(
            items: [LexModelsV2ClientTypes.IntentLevelSlotResolutionTestResultItem]? = nil
        )
        {
            self.items = items
        }
    }

}

extension LexModelsV2ClientTypes {

    public enum IntentSortAttribute: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case intentname
        case lastupdateddatetime
        case sdkUnknown(Swift.String)

        public static var allCases: [IntentSortAttribute] {
            return [
                .intentname,
                .lastupdateddatetime
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .intentname: return "IntentName"
            case .lastupdateddatetime: return "LastUpdatedDateTime"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension LexModelsV2ClientTypes {
    /// Specifies attributes for sorting a list of intents.
    public struct IntentSortBy {
        /// The attribute to use to sort the list of intents.
        /// This member is required.
        public var attribute: LexModelsV2ClientTypes.IntentSortAttribute?
        /// The order to sort the list. You can choose ascending or descending.
        /// This member is required.
        public var order: LexModelsV2ClientTypes.SortOrder?

        public init(
            attribute: LexModelsV2ClientTypes.IntentSortAttribute? = nil,
            order: LexModelsV2ClientTypes.SortOrder? = nil
        )
        {
            self.attribute = attribute
            self.order = order
        }
    }

}

extension LexModelsV2ClientTypes {

    public enum IntentState: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case failed
        case fulfilled
        case fulfillmentinprogress
        case inprogress
        case readyforfulfillment
        case waiting
        case sdkUnknown(Swift.String)

        public static var allCases: [IntentState] {
            return [
                .failed,
                .fulfilled,
                .fulfillmentinprogress,
                .inprogress,
                .readyforfulfillment,
                .waiting
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .failed: return "Failed"
            case .fulfilled: return "Fulfilled"
            case .fulfillmentinprogress: return "FulfillmentInProgress"
            case .inprogress: return "InProgress"
            case .readyforfulfillment: return "ReadyForFulfillment"
            case .waiting: return "Waiting"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension LexModelsV2ClientTypes {
    /// Summary information about an intent returned by the ListIntents operation.
    public struct IntentSummary {
        /// The description of the intent.
        public var description: Swift.String?
        /// The input contexts that must be active for this intent to be considered for recognition.
        public var inputContexts: [LexModelsV2ClientTypes.InputContext]?
        /// The unique identifier assigned to the intent. Use this ID to get detailed information about the intent with the DescribeIntent operation.
        public var intentId: Swift.String?
        /// The name of the intent.
        public var intentName: Swift.String?
        /// The timestamp of the date and time that the intent was last updated.
        public var lastUpdatedDateTime: Foundation.Date?
        /// The output contexts that are activated when this intent is fulfilled.
        public var outputContexts: [LexModelsV2ClientTypes.OutputContext]?
        /// If this intent is derived from a built-in intent, the name of the parent intent.
        public var parentIntentSignature: Swift.String?

        public init(
            description: Swift.String? = nil,
            inputContexts: [LexModelsV2ClientTypes.InputContext]? = nil,
            intentId: Swift.String? = nil,
            intentName: Swift.String? = nil,
            lastUpdatedDateTime: Foundation.Date? = nil,
            outputContexts: [LexModelsV2ClientTypes.OutputContext]? = nil,
            parentIntentSignature: Swift.String? = nil
        )
        {
            self.description = description
            self.inputContexts = inputContexts
            self.intentId = intentId
            self.intentName = intentName
            self.lastUpdatedDateTime = lastUpdatedDateTime
            self.outputContexts = outputContexts
            self.parentIntentSignature = parentIntentSignature
        }
    }

}

extension LexModelsV2ClientTypes {
    /// An object containing the name of an intent that was invoked.
    public struct InvokedIntentSample {
        /// The name of an intent that was invoked.
        public var intentName: Swift.String?

        public init(
            intentName: Swift.String? = nil
        )
        {
            self.intentName = intentName
        }
    }

}

extension LexModelsV2ClientTypes {

    public enum TimeDimension: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case days
        case hours
        case weeks
        case sdkUnknown(Swift.String)

        public static var allCases: [TimeDimension] {
            return [
                .days,
                .hours,
                .weeks
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .days: return "Days"
            case .hours: return "Hours"
            case .weeks: return "Weeks"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension LexModelsV2ClientTypes {
    /// Specifies the time window that utterance statistics are returned for. The time window is always relative to the last time that the that utterances were aggregated. For example, if the ListAggregatedUtterances operation is called at 1600, the time window is set to 1 hour, and the last refresh time was 1530, only utterances made between 1430 and 1530 are returned. You can choose the time window that statistics should be returned for.
    ///
    /// * Hours - You can request utterance statistics for 1, 3, 6, 12, or 24 hour time windows. Statistics are refreshed every half hour for 1 hour time windows, and hourly for the other time windows.
    ///
    /// * Days - You can request utterance statistics for 3 days. Statistics are refreshed every 6 hours.
    ///
    /// * Weeks - You can see statistics for one or two weeks. Statistics are refreshed every 12 hours for one week time windows, and once per day for two week time windows.
    public struct RelativeAggregationDuration {
        /// The type of time period that the timeValue field represents.
        /// This member is required.
        public var timeDimension: LexModelsV2ClientTypes.TimeDimension?
        /// The period of the time window to gather statistics for. The valid value depends on the setting of the timeDimension field.
        ///
        /// * Hours - 1/3/6/12/24
        ///
        /// * Days - 3
        ///
        /// * Weeks - 1/2
        /// This member is required.
        public var timeValue: Swift.Int?

        public init(
            timeDimension: LexModelsV2ClientTypes.TimeDimension? = nil,
            timeValue: Swift.Int? = nil
        )
        {
            self.timeDimension = timeDimension
            self.timeValue = timeValue
        }
    }

}

extension LexModelsV2ClientTypes {
    /// Provides parameters for setting the time window and duration for aggregating utterance data.
    public struct UtteranceAggregationDuration {
        /// The desired time window for aggregating utterances.
        /// This member is required.
        public var relativeAggregationDuration: LexModelsV2ClientTypes.RelativeAggregationDuration?

        public init(
            relativeAggregationDuration: LexModelsV2ClientTypes.RelativeAggregationDuration? = nil
        )
        {
            self.relativeAggregationDuration = relativeAggregationDuration
        }
    }

}

public struct ListAggregatedUtterancesInput {
    /// The time window for aggregating the utterance information. You can specify a time between one hour and two weeks.
    /// This member is required.
    public var aggregationDuration: LexModelsV2ClientTypes.UtteranceAggregationDuration?
    /// The identifier of the bot alias associated with this request. If you specify the bot alias, you can't specify the bot version.
    public var botAliasId: Swift.String?
    /// The unique identifier of the bot associated with this request.
    /// This member is required.
    public var botId: Swift.String?
    /// The identifier of the bot version associated with this request. If you specify the bot version, you can't specify the bot alias.
    public var botVersion: Swift.String?
    /// Provides the specification of a filter used to limit the utterances in the response to only those that match the filter specification. You can only specify one filter and one string to filter on.
    public var filters: [LexModelsV2ClientTypes.AggregatedUtterancesFilter]?
    /// The identifier of the language and locale where the utterances were collected. For more information, see [Supported languages](https://docs.aws.amazon.com/lexv2/latest/dg/how-languages.html).
    /// This member is required.
    public var localeId: Swift.String?
    /// The maximum number of utterances to return in each page of results. If there are fewer results than the maximum page size, only the actual number of results are returned. If you don't specify the maxResults parameter, 1,000 results are returned.
    public var maxResults: Swift.Int?
    /// If the response from the ListAggregatedUtterances operation contains more results that specified in the maxResults parameter, a token is returned in the response. Use that token in the nextToken parameter to return the next page of results.
    public var nextToken: Swift.String?
    /// Specifies sorting parameters for the list of utterances. You can sort by the hit count, the missed count, or the number of distinct sessions the utterance appeared in.
    public var sortBy: LexModelsV2ClientTypes.AggregatedUtterancesSortBy?

    public init(
        aggregationDuration: LexModelsV2ClientTypes.UtteranceAggregationDuration? = nil,
        botAliasId: Swift.String? = nil,
        botId: Swift.String? = nil,
        botVersion: Swift.String? = nil,
        filters: [LexModelsV2ClientTypes.AggregatedUtterancesFilter]? = nil,
        localeId: Swift.String? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        sortBy: LexModelsV2ClientTypes.AggregatedUtterancesSortBy? = nil
    )
    {
        self.aggregationDuration = aggregationDuration
        self.botAliasId = botAliasId
        self.botId = botId
        self.botVersion = botVersion
        self.filters = filters
        self.localeId = localeId
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.sortBy = sortBy
    }
}

public struct ListAggregatedUtterancesOutput {
    /// Summaries of the aggregated utterance data. Each response contains information about the number of times that the utterance was seen during the time period, whether it was detected or missed, and when it was seen during the time period.
    public var aggregatedUtterancesSummaries: [LexModelsV2ClientTypes.AggregatedUtterancesSummary]?
    /// The time period used to aggregate the utterance data.
    public var aggregationDuration: LexModelsV2ClientTypes.UtteranceAggregationDuration?
    /// The last date and time that the aggregated data was collected. The time period depends on the length of the aggregation window.
    ///
    /// * Hours - for 1 hour time window, every half hour; otherwise every hour.
    ///
    /// * Days - every 6 hours
    ///
    /// * Weeks - for a one week time window, every 12 hours; otherwise, every day
    public var aggregationLastRefreshedDateTime: Foundation.Date?
    /// The date and time that the aggregation window ends. Only data collected between the start time and the end time are returned in the results.
    public var aggregationWindowEndTime: Foundation.Date?
    /// The date and time that the aggregation window begins. Only data collected after this time is returned in the results.
    public var aggregationWindowStartTime: Foundation.Date?
    /// The identifier of the bot alias that contains the utterances. If you specified the bot version, the bot alias ID isn't returned.
    public var botAliasId: Swift.String?
    /// The identifier of the bot that contains the utterances.
    public var botId: Swift.String?
    /// The identifier of the bot version that contains the utterances. If you specified the bot alias, the bot version isn't returned.
    public var botVersion: Swift.String?
    /// The identifier of the language and locale that the utterances are in.
    public var localeId: Swift.String?
    /// A token that indicates whether there are more results to return in a response to the ListAggregatedUtterances operation. If the nextToken field is present, you send the contents as the nextToken parameter of a ListAggregatedUtterances operation request to get the next page of results.
    public var nextToken: Swift.String?

    public init(
        aggregatedUtterancesSummaries: [LexModelsV2ClientTypes.AggregatedUtterancesSummary]? = nil,
        aggregationDuration: LexModelsV2ClientTypes.UtteranceAggregationDuration? = nil,
        aggregationLastRefreshedDateTime: Foundation.Date? = nil,
        aggregationWindowEndTime: Foundation.Date? = nil,
        aggregationWindowStartTime: Foundation.Date? = nil,
        botAliasId: Swift.String? = nil,
        botId: Swift.String? = nil,
        botVersion: Swift.String? = nil,
        localeId: Swift.String? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.aggregatedUtterancesSummaries = aggregatedUtterancesSummaries
        self.aggregationDuration = aggregationDuration
        self.aggregationLastRefreshedDateTime = aggregationLastRefreshedDateTime
        self.aggregationWindowEndTime = aggregationWindowEndTime
        self.aggregationWindowStartTime = aggregationWindowStartTime
        self.botAliasId = botAliasId
        self.botId = botId
        self.botVersion = botVersion
        self.localeId = localeId
        self.nextToken = nextToken
    }
}

public struct ListBotAliasesInput {
    /// The identifier of the bot to list aliases for.
    /// This member is required.
    public var botId: Swift.String?
    /// The maximum number of aliases to return in each page of results. If there are fewer results than the max page size, only the actual number of results are returned.
    public var maxResults: Swift.Int?
    /// If the response from the ListBotAliases operation contains more results than specified in the maxResults parameter, a token is returned in the response. Use that token in the nextToken parameter to return the next page of results.
    public var nextToken: Swift.String?

    public init(
        botId: Swift.String? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.botId = botId
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

public struct ListBotAliasesOutput {
    /// Summary information for the bot aliases that meet the filter criteria specified in the request. The length of the list is specified in the maxResults parameter of the request. If there are more aliases available, the nextToken field contains a token to get the next page of results.
    public var botAliasSummaries: [LexModelsV2ClientTypes.BotAliasSummary]?
    /// The identifier of the bot associated with the aliases.
    public var botId: Swift.String?
    /// A token that indicates whether there are more results to return in a response to the ListBotAliases operation. If the nextToken field is present, you send the contents as the nextToken parameter of a ListBotAliases operation request to get the next page of results.
    public var nextToken: Swift.String?

    public init(
        botAliasSummaries: [LexModelsV2ClientTypes.BotAliasSummary]? = nil,
        botId: Swift.String? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.botAliasSummaries = botAliasSummaries
        self.botId = botId
        self.nextToken = nextToken
    }
}

public struct ListBotAliasReplicasInput {
    /// The request for the unique bot ID of the replicated bot created from the source bot alias.
    /// This member is required.
    public var botId: Swift.String?
    /// The request for maximum results to list the replicated bots created from the source bot alias.
    public var maxResults: Swift.Int?
    /// The request for the next token for the replicated bot created from the source bot alias.
    public var nextToken: Swift.String?
    /// The request for the secondary region of the replicated bot created from the source bot alias.
    /// This member is required.
    public var replicaRegion: Swift.String?

    public init(
        botId: Swift.String? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        replicaRegion: Swift.String? = nil
    )
    {
        self.botId = botId
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.replicaRegion = replicaRegion
    }
}

public struct ListBotAliasReplicasOutput {
    /// The summary information of the replicated bot created from the source bot alias.
    public var botAliasReplicaSummaries: [LexModelsV2ClientTypes.BotAliasReplicaSummary]?
    /// The unique bot ID of the replicated bot created from the source bot alias.
    public var botId: Swift.String?
    /// The next token for the replicated bots created from the source bot alias.
    public var nextToken: Swift.String?
    /// The secondary region of the replicated bot created from the source bot alias.
    public var replicaRegion: Swift.String?
    /// The source region of the replicated bot created from the source bot alias.
    public var sourceRegion: Swift.String?

    public init(
        botAliasReplicaSummaries: [LexModelsV2ClientTypes.BotAliasReplicaSummary]? = nil,
        botId: Swift.String? = nil,
        nextToken: Swift.String? = nil,
        replicaRegion: Swift.String? = nil,
        sourceRegion: Swift.String? = nil
    )
    {
        self.botAliasReplicaSummaries = botAliasReplicaSummaries
        self.botId = botId
        self.nextToken = nextToken
        self.replicaRegion = replicaRegion
        self.sourceRegion = sourceRegion
    }
}

public struct ListBotLocalesInput {
    /// The identifier of the bot to list locales for.
    /// This member is required.
    public var botId: Swift.String?
    /// The version of the bot to list locales for.
    /// This member is required.
    public var botVersion: Swift.String?
    /// Provides the specification for a filter used to limit the response to only those locales that match the filter specification. You can only specify one filter and one value to filter on.
    public var filters: [LexModelsV2ClientTypes.BotLocaleFilter]?
    /// The maximum number of aliases to return in each page of results. If there are fewer results than the max page size, only the actual number of results are returned.
    public var maxResults: Swift.Int?
    /// If the response from the ListBotLocales operation contains more results than specified in the maxResults parameter, a token is returned in the response. Use that token as the nextToken parameter to return the next page of results.
    public var nextToken: Swift.String?
    /// Specifies sorting parameters for the list of locales. You can sort by locale name in ascending or descending order.
    public var sortBy: LexModelsV2ClientTypes.BotLocaleSortBy?

    public init(
        botId: Swift.String? = nil,
        botVersion: Swift.String? = nil,
        filters: [LexModelsV2ClientTypes.BotLocaleFilter]? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        sortBy: LexModelsV2ClientTypes.BotLocaleSortBy? = nil
    )
    {
        self.botId = botId
        self.botVersion = botVersion
        self.filters = filters
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.sortBy = sortBy
    }
}

public struct ListBotLocalesOutput {
    /// The identifier of the bot to list locales for.
    public var botId: Swift.String?
    /// Summary information for the locales that meet the filter criteria specified in the request. The length of the list is specified in the maxResults parameter of the request. If there are more locales available, the nextToken field contains a token to get the next page of results.
    public var botLocaleSummaries: [LexModelsV2ClientTypes.BotLocaleSummary]?
    /// The version of the bot.
    public var botVersion: Swift.String?
    /// A token that indicates whether there are more results to return in a response to the ListBotLocales operation. If the nextToken field is present, you send the contents as the nextToken parameter of a ListBotLocales operation request to get the next page of results.
    public var nextToken: Swift.String?

    public init(
        botId: Swift.String? = nil,
        botLocaleSummaries: [LexModelsV2ClientTypes.BotLocaleSummary]? = nil,
        botVersion: Swift.String? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.botId = botId
        self.botLocaleSummaries = botLocaleSummaries
        self.botVersion = botVersion
        self.nextToken = nextToken
    }
}

public struct ListBotRecommendationsInput {
    /// The unique identifier of the bot that contains the bot recommendation list.
    /// This member is required.
    public var botId: Swift.String?
    /// The version of the bot that contains the bot recommendation list.
    /// This member is required.
    public var botVersion: Swift.String?
    /// The identifier of the language and locale of the bot recommendation list.
    /// This member is required.
    public var localeId: Swift.String?
    /// The maximum number of bot recommendations to return in each page of results. If there are fewer results than the max page size, only the actual number of results are returned.
    public var maxResults: Swift.Int?
    /// If the response from the ListBotRecommendation operation contains more results than specified in the maxResults parameter, a token is returned in the response. Use that token in the nextToken parameter to return the next page of results.
    public var nextToken: Swift.String?

    public init(
        botId: Swift.String? = nil,
        botVersion: Swift.String? = nil,
        localeId: Swift.String? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.botId = botId
        self.botVersion = botVersion
        self.localeId = localeId
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

public struct ListBotRecommendationsOutput {
    /// The unique identifier of the bot that contains the bot recommendation list.
    public var botId: Swift.String?
    /// Summary information for the bot recommendations that meet the filter specified in this request. The length of the list is specified in the maxResults parameter of the request. If there are more bot recommendations available, the nextToken field contains a token to get the next page of results.
    public var botRecommendationSummaries: [LexModelsV2ClientTypes.BotRecommendationSummary]?
    /// The version of the bot that contains the bot recommendation list.
    public var botVersion: Swift.String?
    /// The identifier of the language and locale of the bot recommendation list.
    public var localeId: Swift.String?
    /// A token that indicates whether there are more results to return in a response to the ListBotRecommendations operation. If the nextToken field is present, you send the contents as the nextToken parameter of a ListBotRecommendations operation request to get the next page of results.
    public var nextToken: Swift.String?

    public init(
        botId: Swift.String? = nil,
        botRecommendationSummaries: [LexModelsV2ClientTypes.BotRecommendationSummary]? = nil,
        botVersion: Swift.String? = nil,
        localeId: Swift.String? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.botId = botId
        self.botRecommendationSummaries = botRecommendationSummaries
        self.botVersion = botVersion
        self.localeId = localeId
        self.nextToken = nextToken
    }
}

public struct ListBotReplicasInput {
    /// The request for the unique bot IDs in the list of replicated bots.
    /// This member is required.
    public var botId: Swift.String?

    public init(
        botId: Swift.String? = nil
    )
    {
        self.botId = botId
    }
}

public struct ListBotReplicasOutput {
    /// the unique bot IDs in the list of replicated bots.
    public var botId: Swift.String?
    /// The summary details for the replicated bots.
    public var botReplicaSummaries: [LexModelsV2ClientTypes.BotReplicaSummary]?
    /// The source region of the source bots in the list of replicated bots.
    public var sourceRegion: Swift.String?

    public init(
        botId: Swift.String? = nil,
        botReplicaSummaries: [LexModelsV2ClientTypes.BotReplicaSummary]? = nil,
        sourceRegion: Swift.String? = nil
    )
    {
        self.botId = botId
        self.botReplicaSummaries = botReplicaSummaries
        self.sourceRegion = sourceRegion
    }
}

public struct ListBotResourceGenerationsInput {
    /// The unique identifier of the bot whose generation requests you want to view.
    /// This member is required.
    public var botId: Swift.String?
    /// The version of the bot whose generation requests you want to view.
    /// This member is required.
    public var botVersion: Swift.String?
    /// The locale of the bot whose generation requests you want to view.
    /// This member is required.
    public var localeId: Swift.String?
    /// The maximum number of results to return in the response.
    public var maxResults: Swift.Int?
    /// If the total number of results is greater than the number specified in the maxResults, the response returns a token in the nextToken field. Use this token when making a request to return the next batch of results.
    public var nextToken: Swift.String?
    /// An object containing information about the attribute and the method by which to sort the results
    public var sortBy: LexModelsV2ClientTypes.GenerationSortBy?

    public init(
        botId: Swift.String? = nil,
        botVersion: Swift.String? = nil,
        localeId: Swift.String? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        sortBy: LexModelsV2ClientTypes.GenerationSortBy? = nil
    )
    {
        self.botId = botId
        self.botVersion = botVersion
        self.localeId = localeId
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.sortBy = sortBy
    }
}

public struct ListBotResourceGenerationsOutput {
    /// The unique identifier of the bot for which the generation requests were made.
    public var botId: Swift.String?
    /// The version of the bot for which the generation requests were made.
    public var botVersion: Swift.String?
    /// A list of objects, each containing information about a generation request for the bot locale.
    public var generationSummaries: [LexModelsV2ClientTypes.GenerationSummary]?
    /// The locale of the bot for which the generation requests were made.
    public var localeId: Swift.String?
    /// If the total number of results is greater than the number specified in the maxResults, the response returns a token in the nextToken field. Use this token when making a request to return the next batch of results.
    public var nextToken: Swift.String?

    public init(
        botId: Swift.String? = nil,
        botVersion: Swift.String? = nil,
        generationSummaries: [LexModelsV2ClientTypes.GenerationSummary]? = nil,
        localeId: Swift.String? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.botId = botId
        self.botVersion = botVersion
        self.generationSummaries = generationSummaries
        self.localeId = localeId
        self.nextToken = nextToken
    }
}

public struct ListBotsInput {
    /// Provides the specification of a filter used to limit the bots in the response to only those that match the filter specification. You can only specify one filter and one string to filter on.
    public var filters: [LexModelsV2ClientTypes.BotFilter]?
    /// The maximum number of bots to return in each page of results. If there are fewer results than the maximum page size, only the actual number of results are returned.
    public var maxResults: Swift.Int?
    /// If the response from the ListBots operation contains more results than specified in the maxResults parameter, a token is returned in the response. Use the returned token in the nextToken parameter of a ListBots request to return the next page of results. For a complete set of results, call the ListBots operation until the nextToken returned in the response is null.
    public var nextToken: Swift.String?
    /// Specifies sorting parameters for the list of bots. You can specify that the list be sorted by bot name in ascending or descending order.
    public var sortBy: LexModelsV2ClientTypes.BotSortBy?

    public init(
        filters: [LexModelsV2ClientTypes.BotFilter]? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        sortBy: LexModelsV2ClientTypes.BotSortBy? = nil
    )
    {
        self.filters = filters
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.sortBy = sortBy
    }
}

public struct ListBotsOutput {
    /// Summary information for the bots that meet the filter criteria specified in the request. The length of the list is specified in the maxResults parameter of the request. If there are more bots available, the nextToken field contains a token to the next page of results.
    public var botSummaries: [LexModelsV2ClientTypes.BotSummary]?
    /// A token that indicates whether there are more results to return in a response to the ListBots operation. If the nextToken field is present, you send the contents as the nextToken parameter of a ListBots operation request to get the next page of results.
    public var nextToken: Swift.String?

    public init(
        botSummaries: [LexModelsV2ClientTypes.BotSummary]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.botSummaries = botSummaries
        self.nextToken = nextToken
    }
}

public struct ListBotVersionReplicasInput {
    /// The request for the unique ID in the list of replicated bots.
    /// This member is required.
    public var botId: Swift.String?
    /// The maximum results given in the list of replicated bots.
    public var maxResults: Swift.Int?
    /// The next token given in the list of replicated bots.
    public var nextToken: Swift.String?
    /// The request for the region used in the list of replicated bots.
    /// This member is required.
    public var replicaRegion: Swift.String?
    /// The requested sort category for the list of replicated bots.
    public var sortBy: LexModelsV2ClientTypes.BotVersionReplicaSortBy?

    public init(
        botId: Swift.String? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        replicaRegion: Swift.String? = nil,
        sortBy: LexModelsV2ClientTypes.BotVersionReplicaSortBy? = nil
    )
    {
        self.botId = botId
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.replicaRegion = replicaRegion
        self.sortBy = sortBy
    }
}

public struct ListBotVersionReplicasOutput {
    /// The unique ID of the bots in the list of replicated bots.
    public var botId: Swift.String?
    /// The information summary used for the replicated bots in the list of replicated bots.
    public var botVersionReplicaSummaries: [LexModelsV2ClientTypes.BotVersionReplicaSummary]?
    /// The next token used for the replicated bots in the list of replicated bots.
    public var nextToken: Swift.String?
    /// The region used for the replicated bots in the list of replicated bots.
    public var replicaRegion: Swift.String?
    /// The source region used for the bots in the list of replicated bots.
    public var sourceRegion: Swift.String?

    public init(
        botId: Swift.String? = nil,
        botVersionReplicaSummaries: [LexModelsV2ClientTypes.BotVersionReplicaSummary]? = nil,
        nextToken: Swift.String? = nil,
        replicaRegion: Swift.String? = nil,
        sourceRegion: Swift.String? = nil
    )
    {
        self.botId = botId
        self.botVersionReplicaSummaries = botVersionReplicaSummaries
        self.nextToken = nextToken
        self.replicaRegion = replicaRegion
        self.sourceRegion = sourceRegion
    }
}

public struct ListBotVersionsInput {
    /// The identifier of the bot to list versions for.
    /// This member is required.
    public var botId: Swift.String?
    /// The maximum number of versions to return in each page of results. If there are fewer results than the max page size, only the actual number of results are returned.
    public var maxResults: Swift.Int?
    /// If the response to the ListBotVersion operation contains more results than specified in the maxResults parameter, a token is returned in the response. Use that token in the nextToken parameter to return the next page of results.
    public var nextToken: Swift.String?
    /// Specifies sorting parameters for the list of versions. You can specify that the list be sorted by version name in either ascending or descending order.
    public var sortBy: LexModelsV2ClientTypes.BotVersionSortBy?

    public init(
        botId: Swift.String? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        sortBy: LexModelsV2ClientTypes.BotVersionSortBy? = nil
    )
    {
        self.botId = botId
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.sortBy = sortBy
    }
}

public struct ListBotVersionsOutput {
    /// The identifier of the bot to list versions for.
    public var botId: Swift.String?
    /// Summary information for the bot versions that meet the filter criteria specified in the request. The length of the list is specified in the maxResults parameter of the request. If there are more versions available, the nextToken field contains a token to get the next page of results.
    public var botVersionSummaries: [LexModelsV2ClientTypes.BotVersionSummary]?
    /// A token that indicates whether there are more results to return in a response to the ListBotVersions operation. If the nextToken field is present, you send the contents as the nextToken parameter of a ListBotAliases operation request to get the next page of results.
    public var nextToken: Swift.String?

    public init(
        botId: Swift.String? = nil,
        botVersionSummaries: [LexModelsV2ClientTypes.BotVersionSummary]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.botId = botId
        self.botVersionSummaries = botVersionSummaries
        self.nextToken = nextToken
    }
}

public struct ListBuiltInIntentsInput {
    /// The identifier of the language and locale of the intents to list. The string must match one of the supported locales. For more information, see [Supported languages](https://docs.aws.amazon.com/lexv2/latest/dg/how-languages.html).
    /// This member is required.
    public var localeId: Swift.String?
    /// The maximum number of built-in intents to return in each page of results. If there are fewer results than the max page size, only the actual number of results are returned.
    public var maxResults: Swift.Int?
    /// If the response from the ListBuiltInIntents operation contains more results than specified in the maxResults parameter, a token is returned in the response. Use that token in the nextToken parameter to return the next page of results.
    public var nextToken: Swift.String?
    /// Specifies sorting parameters for the list of built-in intents. You can specify that the list be sorted by the built-in intent signature in either ascending or descending order.
    public var sortBy: LexModelsV2ClientTypes.BuiltInIntentSortBy?

    public init(
        localeId: Swift.String? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        sortBy: LexModelsV2ClientTypes.BuiltInIntentSortBy? = nil
    )
    {
        self.localeId = localeId
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.sortBy = sortBy
    }
}

public struct ListBuiltInIntentsOutput {
    /// Summary information for the built-in intents that meet the filter criteria specified in the request. The length of the list is specified in the maxResults parameter of the request. If there are more intents available, the nextToken field contains a token to get the next page of results.
    public var builtInIntentSummaries: [LexModelsV2ClientTypes.BuiltInIntentSummary]?
    /// The language and locale of the intents in the list.
    public var localeId: Swift.String?
    /// A token that indicates whether there are more results to return in a response to the ListBuiltInIntents operation. If the nextToken field is present, you send the contents as the nextToken parameter of a ListBotAliases operation request to get the next page of results.
    public var nextToken: Swift.String?

    public init(
        builtInIntentSummaries: [LexModelsV2ClientTypes.BuiltInIntentSummary]? = nil,
        localeId: Swift.String? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.builtInIntentSummaries = builtInIntentSummaries
        self.localeId = localeId
        self.nextToken = nextToken
    }
}

public struct ListBuiltInSlotTypesInput {
    /// The identifier of the language and locale of the slot types to list. The string must match one of the supported locales. For more information, see [Supported languages](https://docs.aws.amazon.com/lexv2/latest/dg/how-languages.html).
    /// This member is required.
    public var localeId: Swift.String?
    /// The maximum number of built-in slot types to return in each page of results. If there are fewer results than the max page size, only the actual number of results are returned.
    public var maxResults: Swift.Int?
    /// If the response from the ListBuiltInSlotTypes operation contains more results than specified in the maxResults parameter, a token is returned in the response. Use that token in the nextToken parameter to return the next page of results.
    public var nextToken: Swift.String?
    /// Determines the sort order for the response from the ListBuiltInSlotTypes operation. You can choose to sort by the slot type signature in either ascending or descending order.
    public var sortBy: LexModelsV2ClientTypes.BuiltInSlotTypeSortBy?

    public init(
        localeId: Swift.String? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        sortBy: LexModelsV2ClientTypes.BuiltInSlotTypeSortBy? = nil
    )
    {
        self.localeId = localeId
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.sortBy = sortBy
    }
}

public struct ListBuiltInSlotTypesOutput {
    /// Summary information for the built-in slot types that meet the filter criteria specified in the request. The length of the list is specified in the maxResults parameter of the request. If there are more slot types available, the nextToken field contains a token to get the next page of results.
    public var builtInSlotTypeSummaries: [LexModelsV2ClientTypes.BuiltInSlotTypeSummary]?
    /// The language and locale of the slot types in the list.
    public var localeId: Swift.String?
    /// A token that indicates whether there are more results to return in a response to the ListBuiltInSlotTypes operation. If the nextToken field is present, you send the contents as the nextToken parameter of a LIstBuiltInSlotTypes operation request to get the next page of results.
    public var nextToken: Swift.String?

    public init(
        builtInSlotTypeSummaries: [LexModelsV2ClientTypes.BuiltInSlotTypeSummary]? = nil,
        localeId: Swift.String? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.builtInSlotTypeSummaries = builtInSlotTypeSummaries
        self.localeId = localeId
        self.nextToken = nextToken
    }
}

public struct ListCustomVocabularyItemsInput {
    /// The identifier of the version of the bot associated with this custom vocabulary.
    /// This member is required.
    public var botId: Swift.String?
    /// The bot version of the bot to the list custom vocabulary request.
    /// This member is required.
    public var botVersion: Swift.String?
    /// The identifier of the language and locale where this custom vocabulary is used. The string must match one of the supported locales. For more information, see Supported languages (https://docs.aws.amazon.com/lexv2/latest/dg/how-languages.html).
    /// This member is required.
    public var localeId: Swift.String?
    /// The maximum number of items returned by the list operation.
    public var maxResults: Swift.Int?
    /// The nextToken identifier to the list custom vocabulary request.
    public var nextToken: Swift.String?

    public init(
        botId: Swift.String? = nil,
        botVersion: Swift.String? = nil,
        localeId: Swift.String? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.botId = botId
        self.botVersion = botVersion
        self.localeId = localeId
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

public struct ListCustomVocabularyItemsOutput {
    /// The identifier of the bot associated with this custom vocabulary.
    public var botId: Swift.String?
    /// The identifier of the version of the bot associated with this custom vocabulary.
    public var botVersion: Swift.String?
    /// The custom vocabulary items from the list custom vocabulary response.
    public var customVocabularyItems: [LexModelsV2ClientTypes.CustomVocabularyItem]?
    /// The identifier of the language and locale where this custom vocabulary is used. The string must match one of the supported locales. For more information, see [ Supported Languages ](https://docs.aws.amazon.com/lexv2/latest/dg/how-languages.html).
    public var localeId: Swift.String?
    /// The nextToken identifier to the list custom vocabulary response.
    public var nextToken: Swift.String?

    public init(
        botId: Swift.String? = nil,
        botVersion: Swift.String? = nil,
        customVocabularyItems: [LexModelsV2ClientTypes.CustomVocabularyItem]? = nil,
        localeId: Swift.String? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.botId = botId
        self.botVersion = botVersion
        self.customVocabularyItems = customVocabularyItems
        self.localeId = localeId
        self.nextToken = nextToken
    }
}

public struct ListExportsInput {
    /// The unique identifier that Amazon Lex assigned to the bot.
    public var botId: Swift.String?
    /// The version of the bot to list exports for.
    public var botVersion: Swift.String?
    /// Provides the specification of a filter used to limit the exports in the response to only those that match the filter specification. You can only specify one filter and one string to filter on.
    public var filters: [LexModelsV2ClientTypes.ExportFilter]?
    /// Specifies the resources that should be exported. If you don't specify a resource type in the filters parameter, both bot locales and custom vocabularies are exported.
    public var localeId: Swift.String?
    /// The maximum number of exports to return in each page of results. If there are fewer results than the max page size, only the actual number of results are returned.
    public var maxResults: Swift.Int?
    /// If the response from the ListExports operation contains more results that specified in the maxResults parameter, a token is returned in the response. Use the returned token in the nextToken parameter of a ListExports request to return the next page of results. For a complete set of results, call the ListExports operation until the nextToken returned in the response is null.
    public var nextToken: Swift.String?
    /// Determines the field that the list of exports is sorted by. You can sort by the LastUpdatedDateTime field in ascending or descending order.
    public var sortBy: LexModelsV2ClientTypes.ExportSortBy?

    public init(
        botId: Swift.String? = nil,
        botVersion: Swift.String? = nil,
        filters: [LexModelsV2ClientTypes.ExportFilter]? = nil,
        localeId: Swift.String? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        sortBy: LexModelsV2ClientTypes.ExportSortBy? = nil
    )
    {
        self.botId = botId
        self.botVersion = botVersion
        self.filters = filters
        self.localeId = localeId
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.sortBy = sortBy
    }
}

public struct ListExportsOutput {
    /// The unique identifier assigned to the bot by Amazon Lex.
    public var botId: Swift.String?
    /// The version of the bot that was exported.
    public var botVersion: Swift.String?
    /// Summary information for the exports that meet the filter criteria specified in the request. The length of the list is specified in the maxResults parameter. If there are more exports available, the nextToken field contains a token to get the next page of results.
    public var exportSummaries: [LexModelsV2ClientTypes.ExportSummary]?
    /// The locale specified in the request.
    public var localeId: Swift.String?
    /// A token that indicates whether there are more results to return in a response to the ListExports operation. If the nextToken field is present, you send the contents as the nextToken parameter of a ListExports operation request to get the next page of results.
    public var nextToken: Swift.String?

    public init(
        botId: Swift.String? = nil,
        botVersion: Swift.String? = nil,
        exportSummaries: [LexModelsV2ClientTypes.ExportSummary]? = nil,
        localeId: Swift.String? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.botId = botId
        self.botVersion = botVersion
        self.exportSummaries = exportSummaries
        self.localeId = localeId
        self.nextToken = nextToken
    }
}

public struct ListImportsInput {
    /// The unique identifier that Amazon Lex assigned to the bot.
    public var botId: Swift.String?
    /// The version of the bot to list imports for.
    public var botVersion: Swift.String?
    /// Provides the specification of a filter used to limit the bots in the response to only those that match the filter specification. You can only specify one filter and one string to filter on.
    public var filters: [LexModelsV2ClientTypes.ImportFilter]?
    /// Specifies the locale that should be present in the list. If you don't specify a resource type in the filters parameter, the list contains both bot locales and custom vocabularies.
    public var localeId: Swift.String?
    /// The maximum number of imports to return in each page of results. If there are fewer results than the max page size, only the actual number of results are returned.
    public var maxResults: Swift.Int?
    /// If the response from the ListImports operation contains more results than specified in the maxResults parameter, a token is returned in the response. Use the returned token in the nextToken parameter of a ListImports request to return the next page of results. For a complete set of results, call the ListImports operation until the nextToken returned in the response is null.
    public var nextToken: Swift.String?
    /// Determines the field that the list of imports is sorted by. You can sort by the LastUpdatedDateTime field in ascending or descending order.
    public var sortBy: LexModelsV2ClientTypes.ImportSortBy?

    public init(
        botId: Swift.String? = nil,
        botVersion: Swift.String? = nil,
        filters: [LexModelsV2ClientTypes.ImportFilter]? = nil,
        localeId: Swift.String? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        sortBy: LexModelsV2ClientTypes.ImportSortBy? = nil
    )
    {
        self.botId = botId
        self.botVersion = botVersion
        self.filters = filters
        self.localeId = localeId
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.sortBy = sortBy
    }
}

public struct ListImportsOutput {
    /// The unique identifier assigned by Amazon Lex to the bot.
    public var botId: Swift.String?
    /// The version of the bot that was imported. It will always be DRAFT.
    public var botVersion: Swift.String?
    /// Summary information for the imports that meet the filter criteria specified in the request. The length of the list is specified in the maxResults parameter. If there are more imports available, the nextToken field contains a token to get the next page of results.
    public var importSummaries: [LexModelsV2ClientTypes.ImportSummary]?
    /// The locale specified in the request.
    public var localeId: Swift.String?
    /// A token that indicates whether there are more results to return in a response to the ListImports operation. If the nextToken field is present, you send the contents as the nextToken parameter of a ListImports operation request to get the next page of results.
    public var nextToken: Swift.String?

    public init(
        botId: Swift.String? = nil,
        botVersion: Swift.String? = nil,
        importSummaries: [LexModelsV2ClientTypes.ImportSummary]? = nil,
        localeId: Swift.String? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.botId = botId
        self.botVersion = botVersion
        self.importSummaries = importSummaries
        self.localeId = localeId
        self.nextToken = nextToken
    }
}

public struct ListIntentMetricsInput {
    /// A list of objects, each of which contains specifications for organizing the results by time.
    public var binBy: [LexModelsV2ClientTypes.AnalyticsBinBySpecification]?
    /// The identifier for the bot for which you want to retrieve intent metrics.
    /// This member is required.
    public var botId: Swift.String?
    /// The date and time that marks the end of the range of time for which you want to see intent metrics.
    /// This member is required.
    public var endDateTime: Foundation.Date?
    /// A list of objects, each of which describes a condition by which you want to filter the results.
    public var filters: [LexModelsV2ClientTypes.AnalyticsIntentFilter]?
    /// A list of objects, each of which specifies how to group the results. You can group by the following criteria:
    ///
    /// * IntentName – The name of the intent.
    ///
    /// * IntentEndState – The final state of the intent. The possible end states are detailed in [Key definitions](https://docs.aws.amazon.com/analytics-key-definitions-intents) in the user guide.
    public var groupBy: [LexModelsV2ClientTypes.AnalyticsIntentGroupBySpecification]?
    /// The maximum number of results to return in each page of results. If there are fewer results than the maximum page size, only the actual number of results are returned.
    public var maxResults: Swift.Int?
    /// A list of objects, each of which contains a metric you want to list, the statistic for the metric you want to return, and the order by which to organize the results.
    /// This member is required.
    public var metrics: [LexModelsV2ClientTypes.AnalyticsIntentMetric]?
    /// If the response from the ListIntentMetrics operation contains more results than specified in the maxResults parameter, a token is returned in the response. Use the returned token in the nextToken parameter of a ListIntentMetrics request to return the next page of results. For a complete set of results, call the ListIntentMetrics operation until the nextToken returned in the response is null.
    public var nextToken: Swift.String?
    /// The timestamp that marks the beginning of the range of time for which you want to see intent metrics.
    /// This member is required.
    public var startDateTime: Foundation.Date?

    public init(
        binBy: [LexModelsV2ClientTypes.AnalyticsBinBySpecification]? = nil,
        botId: Swift.String? = nil,
        endDateTime: Foundation.Date? = nil,
        filters: [LexModelsV2ClientTypes.AnalyticsIntentFilter]? = nil,
        groupBy: [LexModelsV2ClientTypes.AnalyticsIntentGroupBySpecification]? = nil,
        maxResults: Swift.Int? = nil,
        metrics: [LexModelsV2ClientTypes.AnalyticsIntentMetric]? = nil,
        nextToken: Swift.String? = nil,
        startDateTime: Foundation.Date? = nil
    )
    {
        self.binBy = binBy
        self.botId = botId
        self.endDateTime = endDateTime
        self.filters = filters
        self.groupBy = groupBy
        self.maxResults = maxResults
        self.metrics = metrics
        self.nextToken = nextToken
        self.startDateTime = startDateTime
    }
}

public struct ListIntentMetricsOutput {
    /// The identifier for the bot for which you retrieved intent metrics.
    public var botId: Swift.String?
    /// If the response from the ListIntentMetrics operation contains more results than specified in the maxResults parameter, a token is returned in the response. Use the returned token in the nextToken parameter of a ListIntentMetrics request to return the next page of results. For a complete set of results, call the ListIntentMetrics operation until the nextToken returned in the response is null.
    public var nextToken: Swift.String?
    /// The results for the intent metrics.
    public var results: [LexModelsV2ClientTypes.AnalyticsIntentResult]?

    public init(
        botId: Swift.String? = nil,
        nextToken: Swift.String? = nil,
        results: [LexModelsV2ClientTypes.AnalyticsIntentResult]? = nil
    )
    {
        self.botId = botId
        self.nextToken = nextToken
        self.results = results
    }
}

public struct ListIntentPathsInput {
    /// The identifier for the bot for which you want to retrieve intent path metrics.
    /// This member is required.
    public var botId: Swift.String?
    /// The date and time that marks the end of the range of time for which you want to see intent path metrics.
    /// This member is required.
    public var endDateTime: Foundation.Date?
    /// A list of objects, each describes a condition by which you want to filter the results.
    public var filters: [LexModelsV2ClientTypes.AnalyticsPathFilter]?
    /// The intent path for which you want to retrieve metrics. Use a forward slash to separate intents in the path. For example:
    ///
    /// * /BookCar
    ///
    /// * /BookCar/BookHotel
    ///
    /// * /BookHotel/BookCar
    /// This member is required.
    public var intentPath: Swift.String?
    /// The date and time that marks the beginning of the range of time for which you want to see intent path metrics.
    /// This member is required.
    public var startDateTime: Foundation.Date?

    public init(
        botId: Swift.String? = nil,
        endDateTime: Foundation.Date? = nil,
        filters: [LexModelsV2ClientTypes.AnalyticsPathFilter]? = nil,
        intentPath: Swift.String? = nil,
        startDateTime: Foundation.Date? = nil
    )
    {
        self.botId = botId
        self.endDateTime = endDateTime
        self.filters = filters
        self.intentPath = intentPath
        self.startDateTime = startDateTime
    }
}

public struct ListIntentPathsOutput {
    /// A list of objects, each of which contains information about a node in the intent path for which you requested metrics.
    public var nodeSummaries: [LexModelsV2ClientTypes.AnalyticsIntentNodeSummary]?

    public init(
        nodeSummaries: [LexModelsV2ClientTypes.AnalyticsIntentNodeSummary]? = nil
    )
    {
        self.nodeSummaries = nodeSummaries
    }
}

public struct ListIntentsInput {
    /// The unique identifier of the bot that contains the intent.
    /// This member is required.
    public var botId: Swift.String?
    /// The version of the bot that contains the intent.
    /// This member is required.
    public var botVersion: Swift.String?
    /// Provides the specification of a filter used to limit the intents in the response to only those that match the filter specification. You can only specify one filter and only one string to filter on.
    public var filters: [LexModelsV2ClientTypes.IntentFilter]?
    /// The identifier of the language and locale of the intents to list. The string must match one of the supported locales. For more information, see [Supported languages](https://docs.aws.amazon.com/lexv2/latest/dg/how-languages.html).
    /// This member is required.
    public var localeId: Swift.String?
    /// The maximum number of intents to return in each page of results. If there are fewer results than the max page size, only the actual number of results are returned.
    public var maxResults: Swift.Int?
    /// If the response from the ListIntents operation contains more results than specified in the maxResults parameter, a token is returned in the response. Use the returned token in the nextToken parameter of a ListIntents request to return the next page of results. For a complete set of results, call the ListIntents operation until the nextToken returned in the response is null.
    public var nextToken: Swift.String?
    /// Determines the sort order for the response from the ListIntents operation. You can choose to sort by the intent name or last updated date in either ascending or descending order.
    public var sortBy: LexModelsV2ClientTypes.IntentSortBy?

    public init(
        botId: Swift.String? = nil,
        botVersion: Swift.String? = nil,
        filters: [LexModelsV2ClientTypes.IntentFilter]? = nil,
        localeId: Swift.String? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        sortBy: LexModelsV2ClientTypes.IntentSortBy? = nil
    )
    {
        self.botId = botId
        self.botVersion = botVersion
        self.filters = filters
        self.localeId = localeId
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.sortBy = sortBy
    }
}

public struct ListIntentsOutput {
    /// The identifier of the bot that contains the intent.
    public var botId: Swift.String?
    /// The version of the bot that contains the intent.
    public var botVersion: Swift.String?
    /// Summary information for the intents that meet the filter criteria specified in the request. The length of the list is specified in the maxResults parameter of the request. If there are more intents available, the nextToken field contains a token to get the next page of results.
    public var intentSummaries: [LexModelsV2ClientTypes.IntentSummary]?
    /// The language and locale of the intents in the list.
    public var localeId: Swift.String?
    /// A token that indicates whether there are more results to return in a response to the ListIntents operation. If the nextToken field is present, you send the contents as the nextToken parameter of a ListIntents operation request to get the next page of results.
    public var nextToken: Swift.String?

    public init(
        botId: Swift.String? = nil,
        botVersion: Swift.String? = nil,
        intentSummaries: [LexModelsV2ClientTypes.IntentSummary]? = nil,
        localeId: Swift.String? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.botId = botId
        self.botVersion = botVersion
        self.intentSummaries = intentSummaries
        self.localeId = localeId
        self.nextToken = nextToken
    }
}

public struct ListIntentStageMetricsInput {
    /// A list of objects, each of which contains specifications for organizing the results by time.
    public var binBy: [LexModelsV2ClientTypes.AnalyticsBinBySpecification]?
    /// The identifier for the bot for which you want to retrieve intent stage metrics.
    /// This member is required.
    public var botId: Swift.String?
    /// The date and time that marks the end of the range of time for which you want to see intent stage metrics.
    /// This member is required.
    public var endDateTime: Foundation.Date?
    /// A list of objects, each of which describes a condition by which you want to filter the results.
    public var filters: [LexModelsV2ClientTypes.AnalyticsIntentStageFilter]?
    /// A list of objects, each of which specifies how to group the results. You can group by the following criteria:
    ///
    /// * IntentStageName – The name of the intent stage.
    ///
    /// * SwitchedToIntent – The intent to which the conversation was switched (if any).
    public var groupBy: [LexModelsV2ClientTypes.AnalyticsIntentStageGroupBySpecification]?
    /// The maximum number of results to return in each page of results. If there are fewer results than the maximum page size, only the actual number of results are returned.
    public var maxResults: Swift.Int?
    /// A list of objects, each of which contains a metric you want to list, the statistic for the metric you want to return, and the method by which to organize the results.
    /// This member is required.
    public var metrics: [LexModelsV2ClientTypes.AnalyticsIntentStageMetric]?
    /// If the response from the ListIntentStageMetrics operation contains more results than specified in the maxResults parameter, a token is returned in the response. Use the returned token in the nextToken parameter of a ListIntentStageMetrics request to return the next page of results. For a complete set of results, call the ListIntentStageMetrics operation until the nextToken returned in the response is null.
    public var nextToken: Swift.String?
    /// The date and time that marks the beginning of the range of time for which you want to see intent stage metrics.
    /// This member is required.
    public var startDateTime: Foundation.Date?

    public init(
        binBy: [LexModelsV2ClientTypes.AnalyticsBinBySpecification]? = nil,
        botId: Swift.String? = nil,
        endDateTime: Foundation.Date? = nil,
        filters: [LexModelsV2ClientTypes.AnalyticsIntentStageFilter]? = nil,
        groupBy: [LexModelsV2ClientTypes.AnalyticsIntentStageGroupBySpecification]? = nil,
        maxResults: Swift.Int? = nil,
        metrics: [LexModelsV2ClientTypes.AnalyticsIntentStageMetric]? = nil,
        nextToken: Swift.String? = nil,
        startDateTime: Foundation.Date? = nil
    )
    {
        self.binBy = binBy
        self.botId = botId
        self.endDateTime = endDateTime
        self.filters = filters
        self.groupBy = groupBy
        self.maxResults = maxResults
        self.metrics = metrics
        self.nextToken = nextToken
        self.startDateTime = startDateTime
    }
}

public struct ListIntentStageMetricsOutput {
    /// The identifier for the bot for which you retrieved intent stage metrics.
    public var botId: Swift.String?
    /// If the response from the ListIntentStageMetrics operation contains more results than specified in the maxResults parameter, a token is returned in the response. Use the returned token in the nextToken parameter of a ListIntentStageMetrics request to return the next page of results. For a complete set of results, call the ListIntentStageMetrics operation until the nextToken returned in the response is null.
    public var nextToken: Swift.String?
    /// The results for the intent stage metrics.
    public var results: [LexModelsV2ClientTypes.AnalyticsIntentStageResult]?

    public init(
        botId: Swift.String? = nil,
        nextToken: Swift.String? = nil,
        results: [LexModelsV2ClientTypes.AnalyticsIntentStageResult]? = nil
    )
    {
        self.botId = botId
        self.nextToken = nextToken
        self.results = results
    }
}

public struct ListRecommendedIntentsInput {
    /// The unique identifier of the bot associated with the recommended intents.
    /// This member is required.
    public var botId: Swift.String?
    /// The identifier of the bot recommendation that contains the recommended intents.
    /// This member is required.
    public var botRecommendationId: Swift.String?
    /// The version of the bot that contains the recommended intents.
    /// This member is required.
    public var botVersion: Swift.String?
    /// The identifier of the language and locale of the recommended intents.
    /// This member is required.
    public var localeId: Swift.String?
    /// The maximum number of bot recommendations to return in each page of results. If there are fewer results than the max page size, only the actual number of results are returned.
    public var maxResults: Swift.Int?
    /// If the response from the ListRecommendedIntents operation contains more results than specified in the maxResults parameter, a token is returned in the response. Use that token in the nextToken parameter to return the next page of results.
    public var nextToken: Swift.String?

    public init(
        botId: Swift.String? = nil,
        botRecommendationId: Swift.String? = nil,
        botVersion: Swift.String? = nil,
        localeId: Swift.String? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.botId = botId
        self.botRecommendationId = botRecommendationId
        self.botVersion = botVersion
        self.localeId = localeId
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

extension LexModelsV2ClientTypes {
    /// An object that contains a summary of a recommended intent.
    public struct RecommendedIntentSummary {
        /// The unique identifier of a recommended intent associated with the bot recommendation.
        public var intentId: Swift.String?
        /// The name of a recommended intent associated with the bot recommendation.
        public var intentName: Swift.String?
        /// The count of sample utterances of a recommended intent that is associated with a bot recommendation.
        public var sampleUtterancesCount: Swift.Int?

        public init(
            intentId: Swift.String? = nil,
            intentName: Swift.String? = nil,
            sampleUtterancesCount: Swift.Int? = nil
        )
        {
            self.intentId = intentId
            self.intentName = intentName
            self.sampleUtterancesCount = sampleUtterancesCount
        }
    }

}

public struct ListRecommendedIntentsOutput {
    /// The unique identifier of the bot associated with the recommended intent.
    public var botId: Swift.String?
    /// The identifier of the bot recommendation that contains the recommended intent.
    public var botRecommendationId: Swift.String?
    /// The version of the bot that contains the intent.
    public var botVersion: Swift.String?
    /// The identifier of the language and locale of the intents to list. The string must match one of the supported locales. For more information, see [Supported languages](https://docs.aws.amazon.com/lexv2/latest/dg/how-languages.html).
    public var localeId: Swift.String?
    /// A token that indicates whether there are more results to return in a response to the ListRecommendedIntents operation. If the nextToken field is present, you send the contents as the nextToken parameter of a ListRecommendedIntents operation request to get the next page of results.
    public var nextToken: Swift.String?
    /// Summary information for the intents that meet the filter criteria specified in the request. The length of the list is specified in the maxResults parameter of the request. If there are more intents available, the nextToken field contains a token to get the next page of results.
    public var summaryList: [LexModelsV2ClientTypes.RecommendedIntentSummary]?

    public init(
        botId: Swift.String? = nil,
        botRecommendationId: Swift.String? = nil,
        botVersion: Swift.String? = nil,
        localeId: Swift.String? = nil,
        nextToken: Swift.String? = nil,
        summaryList: [LexModelsV2ClientTypes.RecommendedIntentSummary]? = nil
    )
    {
        self.botId = botId
        self.botRecommendationId = botRecommendationId
        self.botVersion = botVersion
        self.localeId = localeId
        self.nextToken = nextToken
        self.summaryList = summaryList
    }
}

extension LexModelsV2ClientTypes {
    /// An object specifying the measure and method by which to sort the session analytics data.
    public struct SessionDataSortBy {
        /// The measure by which to sort the session analytics data.
        ///
        /// * conversationStartTime – The date and time when the conversation began. A conversation is defined as a unique combination of a sessionId and an originatingRequestId.
        ///
        /// * numberOfTurns – The number of turns that the session took.
        ///
        /// * conversationDurationSeconds – The duration of the conversation in seconds.
        /// This member is required.
        public var name: LexModelsV2ClientTypes.AnalyticsSessionSortByName?
        /// Specifies whether to sort the results in ascending or descending order.
        /// This member is required.
        public var order: LexModelsV2ClientTypes.AnalyticsSortOrder?

        public init(
            name: LexModelsV2ClientTypes.AnalyticsSessionSortByName? = nil,
            order: LexModelsV2ClientTypes.AnalyticsSortOrder? = nil
        )
        {
            self.name = name
            self.order = order
        }
    }

}

public struct ListSessionAnalyticsDataInput {
    /// The identifier for the bot for which you want to retrieve session analytics.
    /// This member is required.
    public var botId: Swift.String?
    /// The date and time that marks the end of the range of time for which you want to see session analytics.
    /// This member is required.
    public var endDateTime: Foundation.Date?
    /// A list of objects, each of which describes a condition by which you want to filter the results.
    public var filters: [LexModelsV2ClientTypes.AnalyticsSessionFilter]?
    /// The maximum number of results to return in each page of results. If there are fewer results than the maximum page size, only the actual number of results are returned.
    public var maxResults: Swift.Int?
    /// If the response from the ListSessionAnalyticsData operation contains more results than specified in the maxResults parameter, a token is returned in the response. Use the returned token in the nextToken parameter of a ListSessionAnalyticsData request to return the next page of results. For a complete set of results, call the ListSessionAnalyticsData operation until the nextToken returned in the response is null.
    public var nextToken: Swift.String?
    /// An object specifying the measure and method by which to sort the session analytics data.
    public var sortBy: LexModelsV2ClientTypes.SessionDataSortBy?
    /// The date and time that marks the beginning of the range of time for which you want to see session analytics.
    /// This member is required.
    public var startDateTime: Foundation.Date?

    public init(
        botId: Swift.String? = nil,
        endDateTime: Foundation.Date? = nil,
        filters: [LexModelsV2ClientTypes.AnalyticsSessionFilter]? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        sortBy: LexModelsV2ClientTypes.SessionDataSortBy? = nil,
        startDateTime: Foundation.Date? = nil
    )
    {
        self.botId = botId
        self.endDateTime = endDateTime
        self.filters = filters
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.sortBy = sortBy
        self.startDateTime = startDateTime
    }
}

extension LexModelsV2ClientTypes {
    /// An object containing information about a specific session.
    public struct SessionSpecification {
        /// The identifier of the alias of the bot that the session was held with.
        public var botAliasId: Swift.String?
        /// The version of the bot that the session was held with.
        public var botVersion: Swift.String?
        /// The channel that is integrated with the bot that the session was held with.
        public var channel: Swift.String?
        /// The duration of the conversation in seconds. A conversation is defined as a unique combination of a sessionId and an originatingRequestId.
        public var conversationDurationSeconds: Swift.Int?
        /// The final state of the conversation. A conversation is defined as a unique combination of a sessionId and an originatingRequestId.
        public var conversationEndState: LexModelsV2ClientTypes.ConversationEndState?
        /// The date and time when the conversation ended. A conversation is defined as a unique combination of a sessionId and an originatingRequestId.
        public var conversationEndTime: Foundation.Date?
        /// The date and time when the conversation began. A conversation is defined as a unique combination of a sessionId and an originatingRequestId.
        public var conversationStartTime: Foundation.Date?
        /// A list of objects containing the name of an intent that was invoked.
        public var invokedIntentSamples: [LexModelsV2ClientTypes.InvokedIntentSample]?
        /// The locale of the bot that the session was held with.
        public var localeId: Swift.String?
        /// The mode of the session. The possible values are as follows:
        ///
        /// * Speech – The session was spoken.
        ///
        /// * Text – The session was written.
        ///
        /// * DTMF – The session used a touch-tone keypad (Dual Tone Multi-Frequency).
        ///
        /// * MultiMode – The session used multiple modes.
        public var mode: LexModelsV2ClientTypes.AnalyticsModality?
        /// The number of turns that the session took.
        public var numberOfTurns: Swift.Int?
        /// The identifier of the first request in a session.
        public var originatingRequestId: Swift.String?
        /// The identifier of the session.
        public var sessionId: Swift.String?

        public init(
            botAliasId: Swift.String? = nil,
            botVersion: Swift.String? = nil,
            channel: Swift.String? = nil,
            conversationDurationSeconds: Swift.Int? = nil,
            conversationEndState: LexModelsV2ClientTypes.ConversationEndState? = nil,
            conversationEndTime: Foundation.Date? = nil,
            conversationStartTime: Foundation.Date? = nil,
            invokedIntentSamples: [LexModelsV2ClientTypes.InvokedIntentSample]? = nil,
            localeId: Swift.String? = nil,
            mode: LexModelsV2ClientTypes.AnalyticsModality? = nil,
            numberOfTurns: Swift.Int? = nil,
            originatingRequestId: Swift.String? = nil,
            sessionId: Swift.String? = nil
        )
        {
            self.botAliasId = botAliasId
            self.botVersion = botVersion
            self.channel = channel
            self.conversationDurationSeconds = conversationDurationSeconds
            self.conversationEndState = conversationEndState
            self.conversationEndTime = conversationEndTime
            self.conversationStartTime = conversationStartTime
            self.invokedIntentSamples = invokedIntentSamples
            self.localeId = localeId
            self.mode = mode
            self.numberOfTurns = numberOfTurns
            self.originatingRequestId = originatingRequestId
            self.sessionId = sessionId
        }
    }

}

public struct ListSessionAnalyticsDataOutput {
    /// The unique identifier of the bot that the sessions belong to.
    public var botId: Swift.String?
    /// If the response from the ListSessionAnalyticsData operation contains more results than specified in the maxResults parameter, a token is returned in the response. Use the returned token in the nextToken parameter of a ListSessionAnalyticsData request to return the next page of results. For a complete set of results, call the ListSessionAnalyticsData operation until the nextToken returned in the response is null.
    public var nextToken: Swift.String?
    /// A list of objects, each of which contains information about a session with the bot.
    public var sessions: [LexModelsV2ClientTypes.SessionSpecification]?

    public init(
        botId: Swift.String? = nil,
        nextToken: Swift.String? = nil,
        sessions: [LexModelsV2ClientTypes.SessionSpecification]? = nil
    )
    {
        self.botId = botId
        self.nextToken = nextToken
        self.sessions = sessions
    }
}

public struct ListSessionMetricsInput {
    /// A list of objects, each of which contains specifications for organizing the results by time.
    public var binBy: [LexModelsV2ClientTypes.AnalyticsBinBySpecification]?
    /// The identifier for the bot for which you want to retrieve session metrics.
    /// This member is required.
    public var botId: Swift.String?
    /// The date and time that marks the end of the range of time for which you want to see session metrics.
    /// This member is required.
    public var endDateTime: Foundation.Date?
    /// A list of objects, each of which describes a condition by which you want to filter the results.
    public var filters: [LexModelsV2ClientTypes.AnalyticsSessionFilter]?
    /// A list of objects, each of which specifies how to group the results. You can group by the following criteria:
    ///
    /// * ConversationEndState – The final state of the conversation. The possible end states are detailed in [Key definitions](https://docs.aws.amazon.com/analytics-key-definitions-conversations) in the user guide.
    ///
    /// * LocaleId – The unique identifier of the bot locale.
    public var groupBy: [LexModelsV2ClientTypes.AnalyticsSessionGroupBySpecification]?
    /// The maximum number of results to return in each page of results. If there are fewer results than the maximum page size, only the actual number of results are returned.
    public var maxResults: Swift.Int?
    /// A list of objects, each of which contains a metric you want to list, the statistic for the metric you want to return, and the method by which to organize the results.
    /// This member is required.
    public var metrics: [LexModelsV2ClientTypes.AnalyticsSessionMetric]?
    /// If the response from the ListSessionMetrics operation contains more results than specified in the maxResults parameter, a token is returned in the response. Use the returned token in the nextToken parameter of a ListSessionMetrics request to return the next page of results. For a complete set of results, call the ListSessionMetrics operation until the nextToken returned in the response is null.
    public var nextToken: Swift.String?
    /// The date and time that marks the beginning of the range of time for which you want to see session metrics.
    /// This member is required.
    public var startDateTime: Foundation.Date?

    public init(
        binBy: [LexModelsV2ClientTypes.AnalyticsBinBySpecification]? = nil,
        botId: Swift.String? = nil,
        endDateTime: Foundation.Date? = nil,
        filters: [LexModelsV2ClientTypes.AnalyticsSessionFilter]? = nil,
        groupBy: [LexModelsV2ClientTypes.AnalyticsSessionGroupBySpecification]? = nil,
        maxResults: Swift.Int? = nil,
        metrics: [LexModelsV2ClientTypes.AnalyticsSessionMetric]? = nil,
        nextToken: Swift.String? = nil,
        startDateTime: Foundation.Date? = nil
    )
    {
        self.binBy = binBy
        self.botId = botId
        self.endDateTime = endDateTime
        self.filters = filters
        self.groupBy = groupBy
        self.maxResults = maxResults
        self.metrics = metrics
        self.nextToken = nextToken
        self.startDateTime = startDateTime
    }
}

public struct ListSessionMetricsOutput {
    /// The identifier for the bot for which you retrieved session metrics.
    public var botId: Swift.String?
    /// If the response from the ListSessionMetrics operation contains more results than specified in the maxResults parameter, a token is returned in the response. Use the returned token in the nextToken parameter of a ListSessionMetrics request to return the next page of results. For a complete set of results, call the ListSessionMetrics operation until the nextToken returned in the response is null.
    public var nextToken: Swift.String?
    /// The results for the session metrics.
    public var results: [LexModelsV2ClientTypes.AnalyticsSessionResult]?

    public init(
        botId: Swift.String? = nil,
        nextToken: Swift.String? = nil,
        results: [LexModelsV2ClientTypes.AnalyticsSessionResult]? = nil
    )
    {
        self.botId = botId
        self.nextToken = nextToken
        self.results = results
    }
}

extension LexModelsV2ClientTypes {

    public enum SlotFilterName: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case slotname
        case sdkUnknown(Swift.String)

        public static var allCases: [SlotFilterName] {
            return [
                .slotname
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .slotname: return "SlotName"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension LexModelsV2ClientTypes {

    public enum SlotFilterOperator: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case contains
        case equals
        case sdkUnknown(Swift.String)

        public static var allCases: [SlotFilterOperator] {
            return [
                .contains,
                .equals
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .contains: return "CO"
            case .equals: return "EQ"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension LexModelsV2ClientTypes {
    /// Filters the response from the ListSlots operation.
    public struct SlotFilter {
        /// The name of the field to use for filtering.
        /// This member is required.
        public var name: LexModelsV2ClientTypes.SlotFilterName?
        /// The operator to use for the filter. Specify EQ when the ListSlots operation should return only aliases that equal the specified value. Specify CO when the ListSlots operation should return aliases that contain the specified value.
        /// This member is required.
        public var `operator`: LexModelsV2ClientTypes.SlotFilterOperator?
        /// The value to use to filter the response.
        /// This member is required.
        public var values: [Swift.String]?

        public init(
            name: LexModelsV2ClientTypes.SlotFilterName? = nil,
            `operator`: LexModelsV2ClientTypes.SlotFilterOperator? = nil,
            values: [Swift.String]? = nil
        )
        {
            self.name = name
            self.`operator` = `operator`
            self.values = values
        }
    }

}

extension LexModelsV2ClientTypes {

    public enum SlotSortAttribute: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case lastupdateddatetime
        case slotname
        case sdkUnknown(Swift.String)

        public static var allCases: [SlotSortAttribute] {
            return [
                .lastupdateddatetime,
                .slotname
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .lastupdateddatetime: return "LastUpdatedDateTime"
            case .slotname: return "SlotName"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension LexModelsV2ClientTypes {
    /// Specifies attributes for sorting a list of bots.
    public struct SlotSortBy {
        /// The attribute to use to sort the list.
        /// This member is required.
        public var attribute: LexModelsV2ClientTypes.SlotSortAttribute?
        /// The order to sort the list. You can choose ascending or descending.
        /// This member is required.
        public var order: LexModelsV2ClientTypes.SortOrder?

        public init(
            attribute: LexModelsV2ClientTypes.SlotSortAttribute? = nil,
            order: LexModelsV2ClientTypes.SortOrder? = nil
        )
        {
            self.attribute = attribute
            self.order = order
        }
    }

}

public struct ListSlotsInput {
    /// The identifier of the bot that contains the slot.
    /// This member is required.
    public var botId: Swift.String?
    /// The version of the bot that contains the slot.
    /// This member is required.
    public var botVersion: Swift.String?
    /// Provides the specification of a filter used to limit the slots in the response to only those that match the filter specification. You can only specify one filter and only one string to filter on.
    public var filters: [LexModelsV2ClientTypes.SlotFilter]?
    /// The unique identifier of the intent that contains the slot.
    /// This member is required.
    public var intentId: Swift.String?
    /// The identifier of the language and locale of the slots to list. The string must match one of the supported locales. For more information, see [Supported languages](https://docs.aws.amazon.com/lexv2/latest/dg/how-languages.html).
    /// This member is required.
    public var localeId: Swift.String?
    /// The maximum number of slots to return in each page of results. If there are fewer results than the max page size, only the actual number of results are returned.
    public var maxResults: Swift.Int?
    /// If the response from the ListSlots operation contains more results than specified in the maxResults parameter, a token is returned in the response. Use that token in the nextToken parameter to return the next page of results.
    public var nextToken: Swift.String?
    /// Determines the sort order for the response from the ListSlots operation. You can choose to sort by the slot name or last updated date in either ascending or descending order.
    public var sortBy: LexModelsV2ClientTypes.SlotSortBy?

    public init(
        botId: Swift.String? = nil,
        botVersion: Swift.String? = nil,
        filters: [LexModelsV2ClientTypes.SlotFilter]? = nil,
        intentId: Swift.String? = nil,
        localeId: Swift.String? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        sortBy: LexModelsV2ClientTypes.SlotSortBy? = nil
    )
    {
        self.botId = botId
        self.botVersion = botVersion
        self.filters = filters
        self.intentId = intentId
        self.localeId = localeId
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.sortBy = sortBy
    }
}

extension LexModelsV2ClientTypes {
    /// Summary information about a slot, a value that the bot elicits from the user.
    public struct SlotSummary {
        /// The description of the slot.
        public var description: Swift.String?
        /// The timestamp of the last date and time that the slot was updated.
        public var lastUpdatedDateTime: Foundation.Date?
        /// Whether the slot is required or optional. An intent is complete when all required slots are filled.
        public var slotConstraint: LexModelsV2ClientTypes.SlotConstraint?
        /// The unique identifier of the slot.
        public var slotId: Swift.String?
        /// The name given to the slot.
        public var slotName: Swift.String?
        /// The unique identifier for the slot type that defines the values for the slot.
        public var slotTypeId: Swift.String?
        /// Prompts that are sent to the user to elicit a value for the slot.
        public var valueElicitationPromptSpecification: LexModelsV2ClientTypes.PromptSpecification?

        public init(
            description: Swift.String? = nil,
            lastUpdatedDateTime: Foundation.Date? = nil,
            slotConstraint: LexModelsV2ClientTypes.SlotConstraint? = nil,
            slotId: Swift.String? = nil,
            slotName: Swift.String? = nil,
            slotTypeId: Swift.String? = nil,
            valueElicitationPromptSpecification: LexModelsV2ClientTypes.PromptSpecification? = nil
        )
        {
            self.description = description
            self.lastUpdatedDateTime = lastUpdatedDateTime
            self.slotConstraint = slotConstraint
            self.slotId = slotId
            self.slotName = slotName
            self.slotTypeId = slotTypeId
            self.valueElicitationPromptSpecification = valueElicitationPromptSpecification
        }
    }

}

public struct ListSlotsOutput {
    /// The identifier of the bot that contains the slots.
    public var botId: Swift.String?
    /// The version of the bot that contains the slots.
    public var botVersion: Swift.String?
    /// The identifier of the intent that contains the slots.
    public var intentId: Swift.String?
    /// The language and locale of the slots in the list.
    public var localeId: Swift.String?
    /// A token that indicates whether there are more results to return in a response to the ListSlots operation. If the nextToken field is present, you send the contents as the nextToken parameter of a ListSlots operation request to get the next page of results.
    public var nextToken: Swift.String?
    /// Summary information for the slots that meet the filter criteria specified in the request. The length of the list is specified in the maxResults parameter of the request. If there are more slots available, the nextToken field contains a token to get the next page of results.
    public var slotSummaries: [LexModelsV2ClientTypes.SlotSummary]?

    public init(
        botId: Swift.String? = nil,
        botVersion: Swift.String? = nil,
        intentId: Swift.String? = nil,
        localeId: Swift.String? = nil,
        nextToken: Swift.String? = nil,
        slotSummaries: [LexModelsV2ClientTypes.SlotSummary]? = nil
    )
    {
        self.botId = botId
        self.botVersion = botVersion
        self.intentId = intentId
        self.localeId = localeId
        self.nextToken = nextToken
        self.slotSummaries = slotSummaries
    }
}

extension LexModelsV2ClientTypes {

    public enum SlotTypeFilterName: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case externalsourcetype
        case slottypename
        case sdkUnknown(Swift.String)

        public static var allCases: [SlotTypeFilterName] {
            return [
                .externalsourcetype,
                .slottypename
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .externalsourcetype: return "ExternalSourceType"
            case .slottypename: return "SlotTypeName"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension LexModelsV2ClientTypes {

    public enum SlotTypeFilterOperator: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case contains
        case equals
        case sdkUnknown(Swift.String)

        public static var allCases: [SlotTypeFilterOperator] {
            return [
                .contains,
                .equals
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .contains: return "CO"
            case .equals: return "EQ"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension LexModelsV2ClientTypes {
    /// Filters the response from the ListSlotTypes operation.
    public struct SlotTypeFilter {
        /// The name of the field to use for filtering.
        /// This member is required.
        public var name: LexModelsV2ClientTypes.SlotTypeFilterName?
        /// The operator to use for the filter. Specify EQ when the ListSlotTypes operation should return only aliases that equal the specified value. Specify CO when the ListSlotTypes operation should return aliases that contain the specified value.
        /// This member is required.
        public var `operator`: LexModelsV2ClientTypes.SlotTypeFilterOperator?
        /// The value to use to filter the response.
        /// This member is required.
        public var values: [Swift.String]?

        public init(
            name: LexModelsV2ClientTypes.SlotTypeFilterName? = nil,
            `operator`: LexModelsV2ClientTypes.SlotTypeFilterOperator? = nil,
            values: [Swift.String]? = nil
        )
        {
            self.name = name
            self.`operator` = `operator`
            self.values = values
        }
    }

}

extension LexModelsV2ClientTypes {

    public enum SlotTypeSortAttribute: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case lastupdateddatetime
        case slottypename
        case sdkUnknown(Swift.String)

        public static var allCases: [SlotTypeSortAttribute] {
            return [
                .lastupdateddatetime,
                .slottypename
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .lastupdateddatetime: return "LastUpdatedDateTime"
            case .slottypename: return "SlotTypeName"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension LexModelsV2ClientTypes {
    /// Specifies attributes for sorting a list of slot types.
    public struct SlotTypeSortBy {
        /// The attribute to use to sort the list of slot types.
        /// This member is required.
        public var attribute: LexModelsV2ClientTypes.SlotTypeSortAttribute?
        /// The order to sort the list. You can say ascending or descending.
        /// This member is required.
        public var order: LexModelsV2ClientTypes.SortOrder?

        public init(
            attribute: LexModelsV2ClientTypes.SlotTypeSortAttribute? = nil,
            order: LexModelsV2ClientTypes.SortOrder? = nil
        )
        {
            self.attribute = attribute
            self.order = order
        }
    }

}

public struct ListSlotTypesInput {
    /// The unique identifier of the bot that contains the slot types.
    /// This member is required.
    public var botId: Swift.String?
    /// The version of the bot that contains the slot type.
    /// This member is required.
    public var botVersion: Swift.String?
    /// Provides the specification of a filter used to limit the slot types in the response to only those that match the filter specification. You can only specify one filter and only one string to filter on.
    public var filters: [LexModelsV2ClientTypes.SlotTypeFilter]?
    /// The identifier of the language and locale of the slot types to list. The string must match one of the supported locales. For more information, see [Supported languages](https://docs.aws.amazon.com/lexv2/latest/dg/how-languages.html).
    /// This member is required.
    public var localeId: Swift.String?
    /// The maximum number of slot types to return in each page of results. If there are fewer results than the max page size, only the actual number of results are returned.
    public var maxResults: Swift.Int?
    /// If the response from the ListSlotTypes operation contains more results than specified in the maxResults parameter, a token is returned in the response. Use that token in the nextToken parameter to return the next page of results.
    public var nextToken: Swift.String?
    /// Determines the sort order for the response from the ListSlotTypes operation. You can choose to sort by the slot type name or last updated date in either ascending or descending order.
    public var sortBy: LexModelsV2ClientTypes.SlotTypeSortBy?

    public init(
        botId: Swift.String? = nil,
        botVersion: Swift.String? = nil,
        filters: [LexModelsV2ClientTypes.SlotTypeFilter]? = nil,
        localeId: Swift.String? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        sortBy: LexModelsV2ClientTypes.SlotTypeSortBy? = nil
    )
    {
        self.botId = botId
        self.botVersion = botVersion
        self.filters = filters
        self.localeId = localeId
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.sortBy = sortBy
    }
}

extension LexModelsV2ClientTypes {

    public enum SlotTypeCategory: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case composite
        case custom
        case extended
        case externalgrammar
        case sdkUnknown(Swift.String)

        public static var allCases: [SlotTypeCategory] {
            return [
                .composite,
                .custom,
                .extended,
                .externalgrammar
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .composite: return "Composite"
            case .custom: return "Custom"
            case .extended: return "Extended"
            case .externalgrammar: return "ExternalGrammar"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension LexModelsV2ClientTypes {
    /// Provides summary information about a slot type.
    public struct SlotTypeSummary {
        /// The description of the slot type.
        public var description: Swift.String?
        /// A timestamp of the date and time that the slot type was last updated.
        public var lastUpdatedDateTime: Foundation.Date?
        /// If the slot type is derived from a built-on slot type, the name of the parent slot type.
        public var parentSlotTypeSignature: Swift.String?
        /// Indicates the type of the slot type.
        ///
        /// * Custom - A slot type that you created using custom values. For more information, see [Creating custom slot types](https://docs.aws.amazon.com/lexv2/latest/dg/custom-slot-types.html).
        ///
        /// * Extended - A slot type created by extending the AMAZON.AlphaNumeric built-in slot type. For more information, see [AMAZON.AlphaNumeric](https://docs.aws.amazon.com/lexv2/latest/dg/built-in-slot-alphanumerice.html).
        ///
        /// * ExternalGrammar - A slot type using a custom GRXML grammar to define values. For more information, see [Using a custom grammar slot type](https://docs.aws.amazon.com/lexv2/latest/dg/building-grxml.html).
        public var slotTypeCategory: LexModelsV2ClientTypes.SlotTypeCategory?
        /// The unique identifier assigned to the slot type.
        public var slotTypeId: Swift.String?
        /// The name of the slot type.
        public var slotTypeName: Swift.String?

        public init(
            description: Swift.String? = nil,
            lastUpdatedDateTime: Foundation.Date? = nil,
            parentSlotTypeSignature: Swift.String? = nil,
            slotTypeCategory: LexModelsV2ClientTypes.SlotTypeCategory? = nil,
            slotTypeId: Swift.String? = nil,
            slotTypeName: Swift.String? = nil
        )
        {
            self.description = description
            self.lastUpdatedDateTime = lastUpdatedDateTime
            self.parentSlotTypeSignature = parentSlotTypeSignature
            self.slotTypeCategory = slotTypeCategory
            self.slotTypeId = slotTypeId
            self.slotTypeName = slotTypeName
        }
    }

}

public struct ListSlotTypesOutput {
    /// The identifier of the bot that contains the slot types.
    public var botId: Swift.String?
    /// The version of the bot that contains the slot types.
    public var botVersion: Swift.String?
    /// The language and local of the slot types in the list.
    public var localeId: Swift.String?
    /// A token that indicates whether there are more results to return in a response to the ListSlotTypes operation. If the nextToken field is present, you send the contents as the nextToken parameter of a ListSlotTypes operation request to get the next page of results.
    public var nextToken: Swift.String?
    /// Summary information for the slot types that meet the filter criteria specified in the request. The length of the list is specified in the maxResults parameter of the request. If there are more slot types available, the nextToken field contains a token to get the next page of results.
    public var slotTypeSummaries: [LexModelsV2ClientTypes.SlotTypeSummary]?

    public init(
        botId: Swift.String? = nil,
        botVersion: Swift.String? = nil,
        localeId: Swift.String? = nil,
        nextToken: Swift.String? = nil,
        slotTypeSummaries: [LexModelsV2ClientTypes.SlotTypeSummary]? = nil
    )
    {
        self.botId = botId
        self.botVersion = botVersion
        self.localeId = localeId
        self.nextToken = nextToken
        self.slotTypeSummaries = slotTypeSummaries
    }
}

public struct ListTagsForResourceInput {
    /// The Amazon Resource Name (ARN) of the resource to get a list of tags for.
    /// This member is required.
    public var resourceARN: Swift.String?

    public init(
        resourceARN: Swift.String? = nil
    )
    {
        self.resourceARN = resourceARN
    }
}

public struct ListTagsForResourceOutput {
    /// The tags associated with a resource.
    public var tags: [Swift.String: Swift.String]?

    public init(
        tags: [Swift.String: Swift.String]? = nil
    )
    {
        self.tags = tags
    }
}

extension LexModelsV2ClientTypes {

    public enum TestResultTypeFilter: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case conversationleveltestresults
        case intentclassificationtestresults
        case overalltestresults
        case slotresolutiontestresults
        case utterancelevelresults
        case sdkUnknown(Swift.String)

        public static var allCases: [TestResultTypeFilter] {
            return [
                .conversationleveltestresults,
                .intentclassificationtestresults,
                .overalltestresults,
                .slotresolutiontestresults,
                .utterancelevelresults
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .conversationleveltestresults: return "ConversationLevelTestResults"
            case .intentclassificationtestresults: return "IntentClassificationTestResults"
            case .overalltestresults: return "OverallTestResults"
            case .slotresolutiontestresults: return "SlotResolutionTestResults"
            case .utterancelevelresults: return "UtteranceLevelResults"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension LexModelsV2ClientTypes {
    /// Contains information about the method by which to filter the results of the test execution.
    public struct TestExecutionResultFilterBy {
        /// Contains information about the method for filtering Conversation level test results.
        public var conversationLevelTestResultsFilterBy: LexModelsV2ClientTypes.ConversationLevelTestResultsFilterBy?
        /// Specifies which results to filter. See [Test result details">Test results details](https://docs.aws.amazon.com/lexv2/latest/dg/test-results-details-test-set.html) for details about different types of results.
        /// This member is required.
        public var resultTypeFilter: LexModelsV2ClientTypes.TestResultTypeFilter?

        public init(
            conversationLevelTestResultsFilterBy: LexModelsV2ClientTypes.ConversationLevelTestResultsFilterBy? = nil,
            resultTypeFilter: LexModelsV2ClientTypes.TestResultTypeFilter? = nil
        )
        {
            self.conversationLevelTestResultsFilterBy = conversationLevelTestResultsFilterBy
            self.resultTypeFilter = resultTypeFilter
        }
    }

}

public struct ListTestExecutionResultItemsInput {
    /// The maximum number of test execution result items to return in each page. If there are fewer results than the max page size, only the actual number of results are returned.
    public var maxResults: Swift.Int?
    /// If the response from the ListTestExecutionResultItems operation contains more results than specified in the maxResults parameter, a token is returned in the response. Use that token in the nextToken parameter to return the next page of results.
    public var nextToken: Swift.String?
    /// The filter for the list of results from the test set execution.
    /// This member is required.
    public var resultFilterBy: LexModelsV2ClientTypes.TestExecutionResultFilterBy?
    /// The unique identifier of the test execution to list the result items.
    /// This member is required.
    public var testExecutionId: Swift.String?

    public init(
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        resultFilterBy: LexModelsV2ClientTypes.TestExecutionResultFilterBy? = nil,
        testExecutionId: Swift.String? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.resultFilterBy = resultFilterBy
        self.testExecutionId = testExecutionId
    }
}

extension LexModelsV2ClientTypes {
    /// Information about the overall results for a test execution result.
    public struct OverallTestResultItem {
        /// The number of results that succeeded.
        /// This member is required.
        public var endToEndResultCounts: [Swift.String: Swift.Int]?
        /// Indicates whether the conversation contains multiple turns or not.
        /// This member is required.
        public var multiTurnConversation: Swift.Bool
        /// The number of speech transcription results in the overall test.
        public var speechTranscriptionResultCounts: [Swift.String: Swift.Int]?
        /// The total number of overall results in the result of the test execution.
        /// This member is required.
        public var totalResultCount: Swift.Int?

        public init(
            endToEndResultCounts: [Swift.String: Swift.Int]? = nil,
            multiTurnConversation: Swift.Bool = false,
            speechTranscriptionResultCounts: [Swift.String: Swift.Int]? = nil,
            totalResultCount: Swift.Int? = nil
        )
        {
            self.endToEndResultCounts = endToEndResultCounts
            self.multiTurnConversation = multiTurnConversation
            self.speechTranscriptionResultCounts = speechTranscriptionResultCounts
            self.totalResultCount = totalResultCount
        }
    }

}

extension LexModelsV2ClientTypes {
    /// Information about the overall test results.
    public struct OverallTestResults {
        /// A list of the overall test results.
        /// This member is required.
        public var items: [LexModelsV2ClientTypes.OverallTestResultItem]?

        public init(
            items: [LexModelsV2ClientTypes.OverallTestResultItem]? = nil
        )
        {
            self.items = items
        }
    }

}

extension LexModelsV2ClientTypes {
    /// Contains information about the audio for an utterance.
    public struct UtteranceAudioInputSpecification {
        /// Amazon S3 file pointing to the audio.
        /// This member is required.
        public var audioFileS3Location: Swift.String?

        public init(
            audioFileS3Location: Swift.String? = nil
        )
        {
            self.audioFileS3Location = audioFileS3Location
        }
    }

}

extension LexModelsV2ClientTypes {
    /// Contains information about input of an utterance.
    public struct UtteranceInputSpecification {
        /// Contains information about the audio input for an utterance.
        public var audioInput: LexModelsV2ClientTypes.UtteranceAudioInputSpecification?
        /// A text input transcription of the utterance. It is only applicable for test-sets containing text data.
        public var textInput: Swift.String?

        public init(
            audioInput: LexModelsV2ClientTypes.UtteranceAudioInputSpecification? = nil,
            textInput: Swift.String? = nil
        )
        {
            self.audioInput = audioInput
            self.textInput = textInput
        }
    }

}

extension LexModelsV2ClientTypes {

    public enum TestExecutionSortAttribute: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case creationdatetime
        case testsetname
        case sdkUnknown(Swift.String)

        public static var allCases: [TestExecutionSortAttribute] {
            return [
                .creationdatetime,
                .testsetname
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .creationdatetime: return "CreationDateTime"
            case .testsetname: return "TestSetName"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension LexModelsV2ClientTypes {
    /// Contains information about the method by which to sort the instances of test executions you have carried out.
    public struct TestExecutionSortBy {
        /// Specifies whether to sort the test set executions by the date and time at which the test sets were created.
        /// This member is required.
        public var attribute: LexModelsV2ClientTypes.TestExecutionSortAttribute?
        /// Specifies whether to sort in ascending or descending order.
        /// This member is required.
        public var order: LexModelsV2ClientTypes.SortOrder?

        public init(
            attribute: LexModelsV2ClientTypes.TestExecutionSortAttribute? = nil,
            order: LexModelsV2ClientTypes.SortOrder? = nil
        )
        {
            self.attribute = attribute
            self.order = order
        }
    }

}

public struct ListTestExecutionsInput {
    /// The maximum number of test executions to return in each page. If there are fewer results than the max page size, only the actual number of results are returned.
    public var maxResults: Swift.Int?
    /// If the response from the ListTestExecutions operation contains more results than specified in the maxResults parameter, a token is returned in the response. Use that token in the nextToken parameter to return the next page of results.
    public var nextToken: Swift.String?
    /// The sort order of the test set executions.
    public var sortBy: LexModelsV2ClientTypes.TestExecutionSortBy?

    public init(
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        sortBy: LexModelsV2ClientTypes.TestExecutionSortBy? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.sortBy = sortBy
    }
}

extension LexModelsV2ClientTypes {
    /// Summarizes metadata about the test execution.
    public struct TestExecutionSummary {
        /// Specifies whether the API mode for the test execution is streaming or non-streaming.
        public var apiMode: LexModelsV2ClientTypes.TestExecutionApiMode?
        /// The date and time at which the test execution was created.
        public var creationDateTime: Foundation.Date?
        /// The date and time at which the test execution was last updated.
        public var lastUpdatedDateTime: Foundation.Date?
        /// Contains information about the bot used for the test execution..
        public var target: LexModelsV2ClientTypes.TestExecutionTarget?
        /// The unique identifier of the test execution.
        public var testExecutionId: Swift.String?
        /// Specifies whether the data used for the test execution is written or spoken.
        public var testExecutionModality: LexModelsV2ClientTypes.TestExecutionModality?
        /// The current status of the test execution.
        public var testExecutionStatus: LexModelsV2ClientTypes.TestExecutionStatus?
        /// The unique identifier of the test set used in the test execution.
        public var testSetId: Swift.String?
        /// The name of the test set used in the test execution.
        public var testSetName: Swift.String?

        public init(
            apiMode: LexModelsV2ClientTypes.TestExecutionApiMode? = nil,
            creationDateTime: Foundation.Date? = nil,
            lastUpdatedDateTime: Foundation.Date? = nil,
            target: LexModelsV2ClientTypes.TestExecutionTarget? = nil,
            testExecutionId: Swift.String? = nil,
            testExecutionModality: LexModelsV2ClientTypes.TestExecutionModality? = nil,
            testExecutionStatus: LexModelsV2ClientTypes.TestExecutionStatus? = nil,
            testSetId: Swift.String? = nil,
            testSetName: Swift.String? = nil
        )
        {
            self.apiMode = apiMode
            self.creationDateTime = creationDateTime
            self.lastUpdatedDateTime = lastUpdatedDateTime
            self.target = target
            self.testExecutionId = testExecutionId
            self.testExecutionModality = testExecutionModality
            self.testExecutionStatus = testExecutionStatus
            self.testSetId = testSetId
            self.testSetName = testSetName
        }
    }

}

public struct ListTestExecutionsOutput {
    /// A token that indicates whether there are more results to return in a response to the ListTestExecutions operation. If the nextToken field is present, you send the contents as the nextToken parameter of a ListTestExecutions operation request to get the next page of results.
    public var nextToken: Swift.String?
    /// The list of test executions.
    public var testExecutions: [LexModelsV2ClientTypes.TestExecutionSummary]?

    public init(
        nextToken: Swift.String? = nil,
        testExecutions: [LexModelsV2ClientTypes.TestExecutionSummary]? = nil
    )
    {
        self.nextToken = nextToken
        self.testExecutions = testExecutions
    }
}

public struct ListTestSetRecordsInput {
    /// The maximum number of test set records to return in each page. If there are fewer records than the max page size, only the actual number of records are returned.
    public var maxResults: Swift.Int?
    /// If the response from the ListTestSetRecords operation contains more results than specified in the maxResults parameter, a token is returned in the response. Use that token in the nextToken parameter to return the next page of results.
    public var nextToken: Swift.String?
    /// The identifier of the test set to list its test set records.
    /// This member is required.
    public var testSetId: Swift.String?

    public init(
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        testSetId: Swift.String? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.testSetId = testSetId
    }
}

extension LexModelsV2ClientTypes {

    public enum TestSetSortAttribute: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case lastupdateddatetime
        case testsetname
        case sdkUnknown(Swift.String)

        public static var allCases: [TestSetSortAttribute] {
            return [
                .lastupdateddatetime,
                .testsetname
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .lastupdateddatetime: return "LastUpdatedDateTime"
            case .testsetname: return "TestSetName"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension LexModelsV2ClientTypes {
    /// Contains information about the methods by which to sort the test set.
    public struct TestSetSortBy {
        /// Specifies whether to sort the test sets by name or by the time they were last updated.
        /// This member is required.
        public var attribute: LexModelsV2ClientTypes.TestSetSortAttribute?
        /// Specifies whether to sort in ascending or descending order.
        /// This member is required.
        public var order: LexModelsV2ClientTypes.SortOrder?

        public init(
            attribute: LexModelsV2ClientTypes.TestSetSortAttribute? = nil,
            order: LexModelsV2ClientTypes.SortOrder? = nil
        )
        {
            self.attribute = attribute
            self.order = order
        }
    }

}

public struct ListTestSetsInput {
    /// The maximum number of test sets to return in each page. If there are fewer results than the max page size, only the actual number of results are returned.
    public var maxResults: Swift.Int?
    /// If the response from the ListTestSets operation contains more results than specified in the maxResults parameter, a token is returned in the response. Use that token in the nextToken parameter to return the next page of results.
    public var nextToken: Swift.String?
    /// The sort order for the list of test sets.
    public var sortBy: LexModelsV2ClientTypes.TestSetSortBy?

    public init(
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        sortBy: LexModelsV2ClientTypes.TestSetSortBy? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.sortBy = sortBy
    }
}

extension LexModelsV2ClientTypes {
    /// Contains summary information about the test set.
    public struct TestSetSummary {
        /// The date and time at which the test set was created.
        public var creationDateTime: Foundation.Date?
        /// The description of the test set.
        public var description: Swift.String?
        /// The date and time at which the test set was last updated.
        public var lastUpdatedDateTime: Foundation.Date?
        /// Specifies whether the test set contains written or spoken data.
        public var modality: LexModelsV2ClientTypes.TestSetModality?
        /// The number of turns in the test set.
        public var numTurns: Swift.Int?
        /// The Amazon Resource Name (ARN) of an IAM role that has permission to access the test set.
        public var roleArn: Swift.String?
        /// The status of the test set.
        public var status: LexModelsV2ClientTypes.TestSetStatus?
        /// Contains information about the location at which the test set is stored.
        public var storageLocation: LexModelsV2ClientTypes.TestSetStorageLocation?
        /// The unique identifier of the test set.
        public var testSetId: Swift.String?
        /// The name of the test set.
        public var testSetName: Swift.String?

        public init(
            creationDateTime: Foundation.Date? = nil,
            description: Swift.String? = nil,
            lastUpdatedDateTime: Foundation.Date? = nil,
            modality: LexModelsV2ClientTypes.TestSetModality? = nil,
            numTurns: Swift.Int? = nil,
            roleArn: Swift.String? = nil,
            status: LexModelsV2ClientTypes.TestSetStatus? = nil,
            storageLocation: LexModelsV2ClientTypes.TestSetStorageLocation? = nil,
            testSetId: Swift.String? = nil,
            testSetName: Swift.String? = nil
        )
        {
            self.creationDateTime = creationDateTime
            self.description = description
            self.lastUpdatedDateTime = lastUpdatedDateTime
            self.modality = modality
            self.numTurns = numTurns
            self.roleArn = roleArn
            self.status = status
            self.storageLocation = storageLocation
            self.testSetId = testSetId
            self.testSetName = testSetName
        }
    }

}

public struct ListTestSetsOutput {
    /// A token that indicates whether there are more results to return in a response to the ListTestSets operation. If the nextToken field is present, you send the contents as the nextToken parameter of a ListTestSets operation request to get the next page of results.
    public var nextToken: Swift.String?
    /// The selected test sets in a list of test sets.
    public var testSets: [LexModelsV2ClientTypes.TestSetSummary]?

    public init(
        nextToken: Swift.String? = nil,
        testSets: [LexModelsV2ClientTypes.TestSetSummary]? = nil
    )
    {
        self.nextToken = nextToken
        self.testSets = testSets
    }
}

extension LexModelsV2ClientTypes {
    /// An object specifying the measure and method by which to sort the utterance data.
    public struct UtteranceDataSortBy {
        /// The measure by which to sort the utterance analytics data.
        ///
        /// * Count – The number of utterances.
        ///
        /// * UtteranceTimestamp – The date and time of the utterance.
        /// This member is required.
        public var name: LexModelsV2ClientTypes.AnalyticsUtteranceSortByName?
        /// Specifies whether to sort the results in ascending or descending order.
        /// This member is required.
        public var order: LexModelsV2ClientTypes.AnalyticsSortOrder?

        public init(
            name: LexModelsV2ClientTypes.AnalyticsUtteranceSortByName? = nil,
            order: LexModelsV2ClientTypes.AnalyticsSortOrder? = nil
        )
        {
            self.name = name
            self.order = order
        }
    }

}

public struct ListUtteranceAnalyticsDataInput {
    /// The identifier for the bot for which you want to retrieve utterance analytics.
    /// This member is required.
    public var botId: Swift.String?
    /// The date and time that marks the end of the range of time for which you want to see utterance analytics.
    /// This member is required.
    public var endDateTime: Foundation.Date?
    /// A list of objects, each of which describes a condition by which you want to filter the results.
    public var filters: [LexModelsV2ClientTypes.AnalyticsUtteranceFilter]?
    /// The maximum number of results to return in each page of results. If there are fewer results than the maximum page size, only the actual number of results are returned.
    public var maxResults: Swift.Int?
    /// If the response from the ListUtteranceAnalyticsData operation contains more results than specified in the maxResults parameter, a token is returned in the response. Use the returned token in the nextToken parameter of a ListUtteranceAnalyticsData request to return the next page of results. For a complete set of results, call the ListUtteranceAnalyticsData operation until the nextToken returned in the response is null.
    public var nextToken: Swift.String?
    /// An object specifying the measure and method by which to sort the utterance analytics data.
    public var sortBy: LexModelsV2ClientTypes.UtteranceDataSortBy?
    /// The date and time that marks the beginning of the range of time for which you want to see utterance analytics.
    /// This member is required.
    public var startDateTime: Foundation.Date?

    public init(
        botId: Swift.String? = nil,
        endDateTime: Foundation.Date? = nil,
        filters: [LexModelsV2ClientTypes.AnalyticsUtteranceFilter]? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        sortBy: LexModelsV2ClientTypes.UtteranceDataSortBy? = nil,
        startDateTime: Foundation.Date? = nil
    )
    {
        self.botId = botId
        self.endDateTime = endDateTime
        self.filters = filters
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.sortBy = sortBy
        self.startDateTime = startDateTime
    }
}

extension LexModelsV2ClientTypes {

    public enum UtteranceContentType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case custompayload
        case imageresponsecard
        case plaintext
        case ssml
        case sdkUnknown(Swift.String)

        public static var allCases: [UtteranceContentType] {
            return [
                .custompayload,
                .imageresponsecard,
                .plaintext,
                .ssml
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .custompayload: return "CustomPayload"
            case .imageresponsecard: return "ImageResponseCard"
            case .plaintext: return "PlainText"
            case .ssml: return "SSML"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension LexModelsV2ClientTypes {
    /// An object that contains a response to the utterance from the bot.
    public struct UtteranceBotResponse {
        /// The text of the response to the utterance from the bot.
        public var content: Swift.String?
        /// The type of the response. The following values are possible:
        ///
        /// * PlainText – A plain text string.
        ///
        /// * CustomPayload – A response string that you can customize to include data or metadata for your application.
        ///
        /// * SSML – A string that includes Speech Synthesis Markup Language to customize the audio response.
        ///
        /// * ImageResponseCard – An image with buttons that the customer can select. See [ImageResponseCard](https://docs.aws.amazon.com/lexv2/latest/APIReference/API_runtime_ImageResponseCard.html) for more information.
        public var contentType: LexModelsV2ClientTypes.UtteranceContentType?
        /// A card that is shown to the user by a messaging platform. You define the contents of the card, the card is displayed by the platform. When you use a response card, the response from the user is constrained to the text associated with a button on the card.
        public var imageResponseCard: LexModelsV2ClientTypes.ImageResponseCard?

        public init(
            content: Swift.String? = nil,
            contentType: LexModelsV2ClientTypes.UtteranceContentType? = nil,
            imageResponseCard: LexModelsV2ClientTypes.ImageResponseCard? = nil
        )
        {
            self.content = content
            self.contentType = contentType
            self.imageResponseCard = imageResponseCard
        }
    }

}

extension LexModelsV2ClientTypes {
    /// An object containing information about a specific utterance.
    public struct UtteranceSpecification {
        /// The name of the intent that the utterance is associated to.
        public var associatedIntentName: Swift.String?
        /// The name of the slot that the utterance is associated to.
        public var associatedSlotName: Swift.String?
        /// The duration in milliseconds of the audio associated with the utterance.
        public var audioVoiceDurationMillis: Swift.Int?
        /// The identifier of the alias of the bot that the utterance was made to.
        public var botAliasId: Swift.String?
        /// The identifier for the audio of the bot response.
        public var botResponseAudioVoiceId: Swift.String?
        /// A list of objects containing information about the bot response to the utterance.
        public var botResponses: [LexModelsV2ClientTypes.UtteranceBotResponse]?
        /// The version of the bot that the utterance was made to.
        public var botVersion: Swift.String?
        /// The channel that is integrated with the bot that the utterance was made to.
        public var channel: Swift.String?
        /// The date and time when the conversation in which the utterance took place ended. A conversation is defined as a unique combination of a sessionId and an originatingRequestId.
        public var conversationEndTime: Foundation.Date?
        /// The date and time when the conversation in which the utterance took place began. A conversation is defined as a unique combination of a sessionId and an originatingRequestId.
        public var conversationStartTime: Foundation.Date?
        /// The type of dialog action that the utterance is associated to. See the type field in [DialogAction](https://docs.aws.amazon.com/lexv2/latest/APIReference/API_runtime_DialogAction.html) for more information.
        public var dialogActionType: Swift.String?
        /// The input type of the utterance. The possible values are as follows:
        ///
        /// * PCM format: audio data must be in little-endian byte order.
        ///
        /// * audio/l16; rate=16000; channels=1
        ///
        /// * audio/x-l16; sample-rate=16000; channel-count=1
        ///
        /// * audio/lpcm; sample-rate=8000; sample-size-bits=16; channel-count=1; is-big-endian=false
        ///
        ///
        ///
        ///
        /// * Opus format
        ///
        /// * audio/x-cbr-opus-with-preamble;preamble-size=0;bit-rate=256000;frame-size-milliseconds=4
        ///
        ///
        ///
        ///
        /// * Text format
        ///
        /// * text/plain; charset=utf-8
        public var inputType: Swift.String?
        /// The state of the intent that the utterance is associated to.
        public var intentState: LexModelsV2ClientTypes.IntentState?
        /// The locale of the bot that the utterance was made to.
        public var localeId: Swift.String?
        /// The mode of the session. The possible values are as follows:
        ///
        /// * Speech – The session consisted of spoken dialogue.
        ///
        /// * Text – The session consisted of written dialogue.
        ///
        /// * DTMF – The session consisted of touch-tone keypad (Dual Tone Multi-Frequency) key presses.
        ///
        /// * MultiMode – The session consisted of multiple modes.
        public var mode: LexModelsV2ClientTypes.AnalyticsModality?
        /// The output type of the utterance. The possible values are as follows:
        ///
        /// * audio/mpeg
        ///
        /// * audio/ogg
        ///
        /// * audio/pcm (16 KHz)
        ///
        /// * audio/ (defaults to mpeg)
        ///
        /// * text/plain; charset=utf-8
        public var outputType: Swift.String?
        /// The identifier of the session that the utterance was made in.
        public var sessionId: Swift.String?
        /// The slots that have been filled in the session by the time of the utterance.
        public var slotsFilledInSession: Swift.String?
        /// The text of the utterance.
        public var utterance: Swift.String?
        /// The identifier of the request associated with the utterance.
        public var utteranceRequestId: Swift.String?
        /// The date and time when the utterance took place.
        public var utteranceTimestamp: Foundation.Date?
        /// Specifies whether the bot understood the utterance or not.
        public var utteranceUnderstood: Swift.Bool

        public init(
            associatedIntentName: Swift.String? = nil,
            associatedSlotName: Swift.String? = nil,
            audioVoiceDurationMillis: Swift.Int? = nil,
            botAliasId: Swift.String? = nil,
            botResponseAudioVoiceId: Swift.String? = nil,
            botResponses: [LexModelsV2ClientTypes.UtteranceBotResponse]? = nil,
            botVersion: Swift.String? = nil,
            channel: Swift.String? = nil,
            conversationEndTime: Foundation.Date? = nil,
            conversationStartTime: Foundation.Date? = nil,
            dialogActionType: Swift.String? = nil,
            inputType: Swift.String? = nil,
            intentState: LexModelsV2ClientTypes.IntentState? = nil,
            localeId: Swift.String? = nil,
            mode: LexModelsV2ClientTypes.AnalyticsModality? = nil,
            outputType: Swift.String? = nil,
            sessionId: Swift.String? = nil,
            slotsFilledInSession: Swift.String? = nil,
            utterance: Swift.String? = nil,
            utteranceRequestId: Swift.String? = nil,
            utteranceTimestamp: Foundation.Date? = nil,
            utteranceUnderstood: Swift.Bool = false
        )
        {
            self.associatedIntentName = associatedIntentName
            self.associatedSlotName = associatedSlotName
            self.audioVoiceDurationMillis = audioVoiceDurationMillis
            self.botAliasId = botAliasId
            self.botResponseAudioVoiceId = botResponseAudioVoiceId
            self.botResponses = botResponses
            self.botVersion = botVersion
            self.channel = channel
            self.conversationEndTime = conversationEndTime
            self.conversationStartTime = conversationStartTime
            self.dialogActionType = dialogActionType
            self.inputType = inputType
            self.intentState = intentState
            self.localeId = localeId
            self.mode = mode
            self.outputType = outputType
            self.sessionId = sessionId
            self.slotsFilledInSession = slotsFilledInSession
            self.utterance = utterance
            self.utteranceRequestId = utteranceRequestId
            self.utteranceTimestamp = utteranceTimestamp
            self.utteranceUnderstood = utteranceUnderstood
        }
    }

}

public struct ListUtteranceAnalyticsDataOutput {
    /// The unique identifier of the bot that the utterances belong to.
    public var botId: Swift.String?
    /// If the response from the ListUtteranceAnalyticsData operation contains more results than specified in the maxResults parameter, a token is returned in the response. Use the returned token in the nextToken parameter of a ListUtteranceAnalyticsData request to return the next page of results. For a complete set of results, call the ListUtteranceAnalyticsData operation until the nextToken returned in the response is null.
    public var nextToken: Swift.String?
    /// A list of objects, each of which contains information about an utterance in a user session with your bot.
    public var utterances: [LexModelsV2ClientTypes.UtteranceSpecification]?

    public init(
        botId: Swift.String? = nil,
        nextToken: Swift.String? = nil,
        utterances: [LexModelsV2ClientTypes.UtteranceSpecification]? = nil
    )
    {
        self.botId = botId
        self.nextToken = nextToken
        self.utterances = utterances
    }
}

public struct ListUtteranceMetricsInput {
    /// A list containing attributes related to the utterance that you want the response to return. The following attributes are possible:
    ///
    /// * LastUsedIntent – The last used intent at the time of the utterance.
    public var attributes: [LexModelsV2ClientTypes.AnalyticsUtteranceAttribute]?
    /// A list of objects, each of which contains specifications for organizing the results by time.
    public var binBy: [LexModelsV2ClientTypes.AnalyticsBinBySpecification]?
    /// The identifier for the bot for which you want to retrieve utterance metrics.
    /// This member is required.
    public var botId: Swift.String?
    /// The date and time that marks the end of the range of time for which you want to see utterance metrics.
    /// This member is required.
    public var endDateTime: Foundation.Date?
    /// A list of objects, each of which describes a condition by which you want to filter the results.
    public var filters: [LexModelsV2ClientTypes.AnalyticsUtteranceFilter]?
    /// A list of objects, each of which specifies how to group the results. You can group by the following criteria:
    ///
    /// * UtteranceText – The transcription of the utterance.
    ///
    /// * UtteranceState – The state of the utterance. The possible states are detailed in [Key definitions](https://docs.aws.amazon.com/analytics-key-definitions-utterances) in the user guide.
    public var groupBy: [LexModelsV2ClientTypes.AnalyticsUtteranceGroupBySpecification]?
    /// The maximum number of results to return in each page of results. If there are fewer results than the maximum page size, only the actual number of results are returned.
    public var maxResults: Swift.Int?
    /// A list of objects, each of which contains a metric you want to list, the statistic for the metric you want to return, and the method by which to organize the results.
    /// This member is required.
    public var metrics: [LexModelsV2ClientTypes.AnalyticsUtteranceMetric]?
    /// If the response from the ListUtteranceMetrics operation contains more results than specified in the maxResults parameter, a token is returned in the response. Use the returned token in the nextToken parameter of a ListUtteranceMetrics request to return the next page of results. For a complete set of results, call the ListUtteranceMetrics operation until the nextToken returned in the response is null.
    public var nextToken: Swift.String?
    /// The date and time that marks the beginning of the range of time for which you want to see utterance metrics.
    /// This member is required.
    public var startDateTime: Foundation.Date?

    public init(
        attributes: [LexModelsV2ClientTypes.AnalyticsUtteranceAttribute]? = nil,
        binBy: [LexModelsV2ClientTypes.AnalyticsBinBySpecification]? = nil,
        botId: Swift.String? = nil,
        endDateTime: Foundation.Date? = nil,
        filters: [LexModelsV2ClientTypes.AnalyticsUtteranceFilter]? = nil,
        groupBy: [LexModelsV2ClientTypes.AnalyticsUtteranceGroupBySpecification]? = nil,
        maxResults: Swift.Int? = nil,
        metrics: [LexModelsV2ClientTypes.AnalyticsUtteranceMetric]? = nil,
        nextToken: Swift.String? = nil,
        startDateTime: Foundation.Date? = nil
    )
    {
        self.attributes = attributes
        self.binBy = binBy
        self.botId = botId
        self.endDateTime = endDateTime
        self.filters = filters
        self.groupBy = groupBy
        self.maxResults = maxResults
        self.metrics = metrics
        self.nextToken = nextToken
        self.startDateTime = startDateTime
    }
}

public struct ListUtteranceMetricsOutput {
    /// The identifier for the bot for which you retrieved utterance metrics.
    public var botId: Swift.String?
    /// If the response from the ListUtteranceMetrics operation contains more results than specified in the maxResults parameter, a token is returned in the response. Use the returned token in the nextToken parameter of a ListUtteranceMetrics request to return the next page of results. For a complete set of results, call the ListUtteranceMetrics operation until the nextToken returned in the response is null.
    public var nextToken: Swift.String?
    /// The results for the utterance metrics.
    public var results: [LexModelsV2ClientTypes.AnalyticsUtteranceResult]?

    public init(
        botId: Swift.String? = nil,
        nextToken: Swift.String? = nil,
        results: [LexModelsV2ClientTypes.AnalyticsUtteranceResult]? = nil
    )
    {
        self.botId = botId
        self.nextToken = nextToken
        self.results = results
    }
}

extension LexModelsV2ClientTypes {

    public enum SearchOrder: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case ascending
        case descending
        case sdkUnknown(Swift.String)

        public static var allCases: [SearchOrder] {
            return [
                .ascending,
                .descending
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .ascending: return "Ascending"
            case .descending: return "Descending"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

public struct SearchAssociatedTranscriptsInput {
    /// The unique identifier of the bot associated with the transcripts that you are searching.
    /// This member is required.
    public var botId: Swift.String?
    /// The unique identifier of the bot recommendation associated with the transcripts to search.
    /// This member is required.
    public var botRecommendationId: Swift.String?
    /// The version of the bot containing the transcripts that you are searching.
    /// This member is required.
    public var botVersion: Swift.String?
    /// A list of filter objects.
    /// This member is required.
    public var filters: [LexModelsV2ClientTypes.AssociatedTranscriptFilter]?
    /// The identifier of the language and locale of the transcripts to search. The string must match one of the supported locales. For more information, see [Supported languages](https://docs.aws.amazon.com/lexv2/latest/dg/how-languages.html)
    /// This member is required.
    public var localeId: Swift.String?
    /// The maximum number of bot recommendations to return in each page of results. If there are fewer results than the max page size, only the actual number of results are returned.
    public var maxResults: Swift.Int?
    /// If the response from the SearchAssociatedTranscriptsRequest operation contains more results than specified in the maxResults parameter, an index is returned in the response. Use that index in the nextIndex parameter to return the next page of results.
    public var nextIndex: Swift.Int?
    /// How SearchResults are ordered. Valid values are Ascending or Descending. The default is Descending.
    public var searchOrder: LexModelsV2ClientTypes.SearchOrder?

    public init(
        botId: Swift.String? = nil,
        botRecommendationId: Swift.String? = nil,
        botVersion: Swift.String? = nil,
        filters: [LexModelsV2ClientTypes.AssociatedTranscriptFilter]? = nil,
        localeId: Swift.String? = nil,
        maxResults: Swift.Int? = nil,
        nextIndex: Swift.Int? = nil,
        searchOrder: LexModelsV2ClientTypes.SearchOrder? = nil
    )
    {
        self.botId = botId
        self.botRecommendationId = botRecommendationId
        self.botVersion = botVersion
        self.filters = filters
        self.localeId = localeId
        self.maxResults = maxResults
        self.nextIndex = nextIndex
        self.searchOrder = searchOrder
    }
}

public struct SearchAssociatedTranscriptsOutput {
    /// The object that contains the associated transcript that meet the criteria you specified.
    public var associatedTranscripts: [LexModelsV2ClientTypes.AssociatedTranscript]?
    /// The unique identifier of the bot associated with the transcripts that you are searching.
    public var botId: Swift.String?
    /// The unique identifier of the bot recommendation associated with the transcripts to search.
    public var botRecommendationId: Swift.String?
    /// The version of the bot containing the transcripts that you are searching.
    public var botVersion: Swift.String?
    /// The identifier of the language and locale of the transcripts to search. The string must match one of the supported locales. For more information, see [Supported languages](https://docs.aws.amazon.com/lexv2/latest/dg/how-languages.html)
    public var localeId: Swift.String?
    /// A index that indicates whether there are more results to return in a response to the SearchAssociatedTranscripts operation. If the nextIndex field is present, you send the contents as the nextIndex parameter of a SearchAssociatedTranscriptsRequest operation to get the next page of results.
    public var nextIndex: Swift.Int?
    /// The total number of transcripts returned by the search.
    public var totalResults: Swift.Int?

    public init(
        associatedTranscripts: [LexModelsV2ClientTypes.AssociatedTranscript]? = nil,
        botId: Swift.String? = nil,
        botRecommendationId: Swift.String? = nil,
        botVersion: Swift.String? = nil,
        localeId: Swift.String? = nil,
        nextIndex: Swift.Int? = nil,
        totalResults: Swift.Int? = nil
    )
    {
        self.associatedTranscripts = associatedTranscripts
        self.botId = botId
        self.botRecommendationId = botRecommendationId
        self.botVersion = botVersion
        self.localeId = localeId
        self.nextIndex = nextIndex
        self.totalResults = totalResults
    }
}

public struct StartBotRecommendationInput {
    /// The unique identifier of the bot containing the bot recommendation.
    /// This member is required.
    public var botId: Swift.String?
    /// The version of the bot containing the bot recommendation.
    /// This member is required.
    public var botVersion: Swift.String?
    /// The object representing the passwords that will be used to encrypt the data related to the bot recommendation results, as well as the KMS key ARN used to encrypt the associated metadata.
    public var encryptionSetting: LexModelsV2ClientTypes.EncryptionSetting?
    /// The identifier of the language and locale of the bot recommendation to start. The string must match one of the supported locales. For more information, see [Supported languages](https://docs.aws.amazon.com/lexv2/latest/dg/how-languages.html)
    /// This member is required.
    public var localeId: Swift.String?
    /// The object representing the Amazon S3 bucket containing the transcript, as well as the associated metadata.
    /// This member is required.
    public var transcriptSourceSetting: LexModelsV2ClientTypes.TranscriptSourceSetting?

    public init(
        botId: Swift.String? = nil,
        botVersion: Swift.String? = nil,
        encryptionSetting: LexModelsV2ClientTypes.EncryptionSetting? = nil,
        localeId: Swift.String? = nil,
        transcriptSourceSetting: LexModelsV2ClientTypes.TranscriptSourceSetting? = nil
    )
    {
        self.botId = botId
        self.botVersion = botVersion
        self.encryptionSetting = encryptionSetting
        self.localeId = localeId
        self.transcriptSourceSetting = transcriptSourceSetting
    }
}

public struct StartBotRecommendationOutput {
    /// The unique identifier of the bot containing the bot recommendation.
    public var botId: Swift.String?
    /// The identifier of the bot recommendation that you have created.
    public var botRecommendationId: Swift.String?
    /// The status of the bot recommendation. If the status is Failed, then the reasons for the failure are listed in the failureReasons field.
    public var botRecommendationStatus: LexModelsV2ClientTypes.BotRecommendationStatus?
    /// The version of the bot containing the bot recommendation.
    public var botVersion: Swift.String?
    /// A timestamp of the date and time that the bot recommendation was created.
    public var creationDateTime: Foundation.Date?
    /// The object representing the passwords that were used to encrypt the data related to the bot recommendation results, as well as the KMS key ARN used to encrypt the associated metadata.
    public var encryptionSetting: LexModelsV2ClientTypes.EncryptionSetting?
    /// The identifier of the language and locale of the bot recommendation to start. The string must match one of the supported locales. For more information, see [Supported languages](https://docs.aws.amazon.com/lexv2/latest/dg/how-languages.html)
    public var localeId: Swift.String?
    /// The object representing the Amazon S3 bucket containing the transcript, as well as the associated metadata.
    public var transcriptSourceSetting: LexModelsV2ClientTypes.TranscriptSourceSetting?

    public init(
        botId: Swift.String? = nil,
        botRecommendationId: Swift.String? = nil,
        botRecommendationStatus: LexModelsV2ClientTypes.BotRecommendationStatus? = nil,
        botVersion: Swift.String? = nil,
        creationDateTime: Foundation.Date? = nil,
        encryptionSetting: LexModelsV2ClientTypes.EncryptionSetting? = nil,
        localeId: Swift.String? = nil,
        transcriptSourceSetting: LexModelsV2ClientTypes.TranscriptSourceSetting? = nil
    )
    {
        self.botId = botId
        self.botRecommendationId = botRecommendationId
        self.botRecommendationStatus = botRecommendationStatus
        self.botVersion = botVersion
        self.creationDateTime = creationDateTime
        self.encryptionSetting = encryptionSetting
        self.localeId = localeId
        self.transcriptSourceSetting = transcriptSourceSetting
    }
}

public struct StartBotResourceGenerationInput {
    /// The unique identifier of the bot for which to generate intents and slot types.
    /// This member is required.
    public var botId: Swift.String?
    /// The version of the bot for which to generate intents and slot types.
    /// This member is required.
    public var botVersion: Swift.String?
    /// The prompt to generate intents and slot types for the bot locale. Your description should be both detailed and precise to help generate appropriate and sufficient intents for your bot. Include a list of actions to improve the intent creation process.
    /// This member is required.
    public var generationInputPrompt: Swift.String?
    /// The locale of the bot for which to generate intents and slot types.
    /// This member is required.
    public var localeId: Swift.String?

    public init(
        botId: Swift.String? = nil,
        botVersion: Swift.String? = nil,
        generationInputPrompt: Swift.String? = nil,
        localeId: Swift.String? = nil
    )
    {
        self.botId = botId
        self.botVersion = botVersion
        self.generationInputPrompt = generationInputPrompt
        self.localeId = localeId
    }
}

public struct StartBotResourceGenerationOutput {
    /// The unique identifier of the bot for which the generation request was made.
    public var botId: Swift.String?
    /// The version of the bot for which the generation request was made.
    public var botVersion: Swift.String?
    /// The date and time at which the generation request was made.
    public var creationDateTime: Foundation.Date?
    /// The unique identifier of the generation request.
    public var generationId: Swift.String?
    /// The prompt that was used generate intents and slot types for the bot locale.
    public var generationInputPrompt: Swift.String?
    /// The status of the generation request.
    public var generationStatus: LexModelsV2ClientTypes.GenerationStatus?
    /// The locale of the bot for which the generation request was made.
    public var localeId: Swift.String?

    public init(
        botId: Swift.String? = nil,
        botVersion: Swift.String? = nil,
        creationDateTime: Foundation.Date? = nil,
        generationId: Swift.String? = nil,
        generationInputPrompt: Swift.String? = nil,
        generationStatus: LexModelsV2ClientTypes.GenerationStatus? = nil,
        localeId: Swift.String? = nil
    )
    {
        self.botId = botId
        self.botVersion = botVersion
        self.creationDateTime = creationDateTime
        self.generationId = generationId
        self.generationInputPrompt = generationInputPrompt
        self.generationStatus = generationStatus
        self.localeId = localeId
    }
}

public struct StartImportInput {
    /// The password used to encrypt the zip archive that contains the resource definition. You should always encrypt the zip archive to protect it during transit between your site and Amazon Lex.
    public var filePassword: Swift.String?
    /// The unique identifier for the import. It is included in the response from the [CreateUploadUrl](https://docs.aws.amazon.com/lexv2/latest/APIReference/API_CreateUploadUrl.html) operation.
    /// This member is required.
    public var importId: Swift.String?
    /// The strategy to use when there is a name conflict between the imported resource and an existing resource. When the merge strategy is FailOnConflict existing resources are not overwritten and the import fails.
    /// This member is required.
    public var mergeStrategy: LexModelsV2ClientTypes.MergeStrategy?
    /// Parameters for creating the bot, bot locale or custom vocabulary.
    /// This member is required.
    public var resourceSpecification: LexModelsV2ClientTypes.ImportResourceSpecification?

    public init(
        filePassword: Swift.String? = nil,
        importId: Swift.String? = nil,
        mergeStrategy: LexModelsV2ClientTypes.MergeStrategy? = nil,
        resourceSpecification: LexModelsV2ClientTypes.ImportResourceSpecification? = nil
    )
    {
        self.filePassword = filePassword
        self.importId = importId
        self.mergeStrategy = mergeStrategy
        self.resourceSpecification = resourceSpecification
    }
}

extension StartImportInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "StartImportInput(importId: \(Swift.String(describing: importId)), mergeStrategy: \(Swift.String(describing: mergeStrategy)), resourceSpecification: \(Swift.String(describing: resourceSpecification)), filePassword: \"CONTENT_REDACTED\")"}
}

public struct StartImportOutput {
    /// The date and time that the import request was created.
    public var creationDateTime: Foundation.Date?
    /// A unique identifier for the import.
    public var importId: Swift.String?
    /// The current status of the import. When the status is Complete the bot, bot alias, or custom vocabulary is ready to use.
    public var importStatus: LexModelsV2ClientTypes.ImportStatus?
    /// The strategy used when there was a name conflict between the imported resource and an existing resource. When the merge strategy is FailOnConflict existing resources are not overwritten and the import fails.
    public var mergeStrategy: LexModelsV2ClientTypes.MergeStrategy?
    /// The parameters used when importing the resource.
    public var resourceSpecification: LexModelsV2ClientTypes.ImportResourceSpecification?

    public init(
        creationDateTime: Foundation.Date? = nil,
        importId: Swift.String? = nil,
        importStatus: LexModelsV2ClientTypes.ImportStatus? = nil,
        mergeStrategy: LexModelsV2ClientTypes.MergeStrategy? = nil,
        resourceSpecification: LexModelsV2ClientTypes.ImportResourceSpecification? = nil
    )
    {
        self.creationDateTime = creationDateTime
        self.importId = importId
        self.importStatus = importStatus
        self.mergeStrategy = mergeStrategy
        self.resourceSpecification = resourceSpecification
    }
}

public struct StartTestExecutionInput {
    /// Indicates whether we use streaming or non-streaming APIs for the test set execution. For streaming, StartConversation Runtime API is used. Whereas, for non-streaming, RecognizeUtterance and RecognizeText Amazon Lex Runtime API are used.
    /// This member is required.
    public var apiMode: LexModelsV2ClientTypes.TestExecutionApiMode?
    /// The target bot for the test set execution.
    /// This member is required.
    public var target: LexModelsV2ClientTypes.TestExecutionTarget?
    /// Indicates whether audio or text is used.
    public var testExecutionModality: LexModelsV2ClientTypes.TestExecutionModality?
    /// The test set Id for the test set execution.
    /// This member is required.
    public var testSetId: Swift.String?

    public init(
        apiMode: LexModelsV2ClientTypes.TestExecutionApiMode? = nil,
        target: LexModelsV2ClientTypes.TestExecutionTarget? = nil,
        testExecutionModality: LexModelsV2ClientTypes.TestExecutionModality? = nil,
        testSetId: Swift.String? = nil
    )
    {
        self.apiMode = apiMode
        self.target = target
        self.testExecutionModality = testExecutionModality
        self.testSetId = testSetId
    }
}

public struct StartTestExecutionOutput {
    /// Indicates whether we use streaming or non-streaming APIs for the test set execution. For streaming, StartConversation Amazon Lex Runtime API is used. Whereas for non-streaming, RecognizeUtterance and RecognizeText Amazon Lex Runtime API are used.
    public var apiMode: LexModelsV2ClientTypes.TestExecutionApiMode?
    /// The creation date and time for the test set execution.
    public var creationDateTime: Foundation.Date?
    /// The target bot for the test set execution.
    public var target: LexModelsV2ClientTypes.TestExecutionTarget?
    /// The unique identifier of the test set execution.
    public var testExecutionId: Swift.String?
    /// Indicates whether audio or text is used.
    public var testExecutionModality: LexModelsV2ClientTypes.TestExecutionModality?
    /// The test set Id for the test set execution.
    public var testSetId: Swift.String?

    public init(
        apiMode: LexModelsV2ClientTypes.TestExecutionApiMode? = nil,
        creationDateTime: Foundation.Date? = nil,
        target: LexModelsV2ClientTypes.TestExecutionTarget? = nil,
        testExecutionId: Swift.String? = nil,
        testExecutionModality: LexModelsV2ClientTypes.TestExecutionModality? = nil,
        testSetId: Swift.String? = nil
    )
    {
        self.apiMode = apiMode
        self.creationDateTime = creationDateTime
        self.target = target
        self.testExecutionId = testExecutionId
        self.testExecutionModality = testExecutionModality
        self.testSetId = testSetId
    }
}

public struct StartTestSetGenerationInput {
    /// The test set description for the test set generation request.
    public var description: Swift.String?
    /// The data source for the test set generation.
    /// This member is required.
    public var generationDataSource: LexModelsV2ClientTypes.TestSetGenerationDataSource?
    /// The roleARN used for any operation in the test set to access resources in the Amazon Web Services account.
    /// This member is required.
    public var roleArn: Swift.String?
    /// The Amazon S3 storage location for the test set generation.
    /// This member is required.
    public var storageLocation: LexModelsV2ClientTypes.TestSetStorageLocation?
    /// The test set name for the test set generation request.
    /// This member is required.
    public var testSetName: Swift.String?
    /// A list of tags to add to the test set. You can only add tags when you import/generate a new test set. You can't use the UpdateTestSet operation to update tags. To update tags, use the TagResource operation.
    public var testSetTags: [Swift.String: Swift.String]?

    public init(
        description: Swift.String? = nil,
        generationDataSource: LexModelsV2ClientTypes.TestSetGenerationDataSource? = nil,
        roleArn: Swift.String? = nil,
        storageLocation: LexModelsV2ClientTypes.TestSetStorageLocation? = nil,
        testSetName: Swift.String? = nil,
        testSetTags: [Swift.String: Swift.String]? = nil
    )
    {
        self.description = description
        self.generationDataSource = generationDataSource
        self.roleArn = roleArn
        self.storageLocation = storageLocation
        self.testSetName = testSetName
        self.testSetTags = testSetTags
    }
}

public struct StartTestSetGenerationOutput {
    /// The creation date and time for the test set generation.
    public var creationDateTime: Foundation.Date?
    /// The description used for the test set generation.
    public var description: Swift.String?
    /// The data source for the test set generation.
    public var generationDataSource: LexModelsV2ClientTypes.TestSetGenerationDataSource?
    /// The roleARN used for any operation in the test set to access resources in the Amazon Web Services account.
    public var roleArn: Swift.String?
    /// The Amazon S3 storage location for the test set generation.
    public var storageLocation: LexModelsV2ClientTypes.TestSetStorageLocation?
    /// The unique identifier of the test set generation to describe.
    public var testSetGenerationId: Swift.String?
    /// The status for the test set generation.
    public var testSetGenerationStatus: LexModelsV2ClientTypes.TestSetGenerationStatus?
    /// The test set name used for the test set generation.
    public var testSetName: Swift.String?
    /// A list of tags that was used for the test set that is being generated.
    public var testSetTags: [Swift.String: Swift.String]?

    public init(
        creationDateTime: Foundation.Date? = nil,
        description: Swift.String? = nil,
        generationDataSource: LexModelsV2ClientTypes.TestSetGenerationDataSource? = nil,
        roleArn: Swift.String? = nil,
        storageLocation: LexModelsV2ClientTypes.TestSetStorageLocation? = nil,
        testSetGenerationId: Swift.String? = nil,
        testSetGenerationStatus: LexModelsV2ClientTypes.TestSetGenerationStatus? = nil,
        testSetName: Swift.String? = nil,
        testSetTags: [Swift.String: Swift.String]? = nil
    )
    {
        self.creationDateTime = creationDateTime
        self.description = description
        self.generationDataSource = generationDataSource
        self.roleArn = roleArn
        self.storageLocation = storageLocation
        self.testSetGenerationId = testSetGenerationId
        self.testSetGenerationStatus = testSetGenerationStatus
        self.testSetName = testSetName
        self.testSetTags = testSetTags
    }
}

public struct StopBotRecommendationInput {
    /// The unique identifier of the bot containing the bot recommendation to be stopped.
    /// This member is required.
    public var botId: Swift.String?
    /// The unique identifier of the bot recommendation to be stopped.
    /// This member is required.
    public var botRecommendationId: Swift.String?
    /// The version of the bot containing the bot recommendation.
    /// This member is required.
    public var botVersion: Swift.String?
    /// The identifier of the language and locale of the bot recommendation to stop. The string must match one of the supported locales. For more information, see [Supported languages](https://docs.aws.amazon.com/lexv2/latest/dg/how-languages.html)
    /// This member is required.
    public var localeId: Swift.String?

    public init(
        botId: Swift.String? = nil,
        botRecommendationId: Swift.String? = nil,
        botVersion: Swift.String? = nil,
        localeId: Swift.String? = nil
    )
    {
        self.botId = botId
        self.botRecommendationId = botRecommendationId
        self.botVersion = botVersion
        self.localeId = localeId
    }
}

public struct StopBotRecommendationOutput {
    /// The unique identifier of the bot containing the bot recommendation that is being stopped.
    public var botId: Swift.String?
    /// The unique identifier of the bot recommendation that is being stopped.
    public var botRecommendationId: Swift.String?
    /// The status of the bot recommendation. If the status is Failed, then the reasons for the failure are listed in the failureReasons field.
    public var botRecommendationStatus: LexModelsV2ClientTypes.BotRecommendationStatus?
    /// The version of the bot containing the recommendation that is being stopped.
    public var botVersion: Swift.String?
    /// The identifier of the language and locale of the bot response to stop. The string must match one of the supported locales. For more information, see [Supported languages](https://docs.aws.amazon.com/lexv2/latest/dg/how-languages.html)
    public var localeId: Swift.String?

    public init(
        botId: Swift.String? = nil,
        botRecommendationId: Swift.String? = nil,
        botRecommendationStatus: LexModelsV2ClientTypes.BotRecommendationStatus? = nil,
        botVersion: Swift.String? = nil,
        localeId: Swift.String? = nil
    )
    {
        self.botId = botId
        self.botRecommendationId = botRecommendationId
        self.botRecommendationStatus = botRecommendationStatus
        self.botVersion = botVersion
        self.localeId = localeId
    }
}

public struct TagResourceInput {
    /// The Amazon Resource Name (ARN) of the bot, bot alias, or bot channel to tag.
    /// This member is required.
    public var resourceARN: Swift.String?
    /// A list of tag keys to add to the resource. If a tag key already exists, the existing value is replaced with the new value.
    /// This member is required.
    public var tags: [Swift.String: Swift.String]?

    public init(
        resourceARN: Swift.String? = nil,
        tags: [Swift.String: Swift.String]? = nil
    )
    {
        self.resourceARN = resourceARN
        self.tags = tags
    }
}

public struct TagResourceOutput {

    public init() { }
}

public struct UntagResourceInput {
    /// The Amazon Resource Name (ARN) of the resource to remove the tags from.
    /// This member is required.
    public var resourceARN: Swift.String?
    /// A list of tag keys to remove from the resource. If a tag key does not exist on the resource, it is ignored.
    /// This member is required.
    public var tagKeys: [Swift.String]?

    public init(
        resourceARN: Swift.String? = nil,
        tagKeys: [Swift.String]? = nil
    )
    {
        self.resourceARN = resourceARN
        self.tagKeys = tagKeys
    }
}

public struct UntagResourceOutput {

    public init() { }
}

public struct UpdateBotInput {
    /// The unique identifier of the bot to update. This identifier is returned by the [CreateBot](https://docs.aws.amazon.com/lexv2/latest/APIReference/API_CreateBot.html) operation.
    /// This member is required.
    public var botId: Swift.String?
    /// The list of bot members in the network associated with the update action.
    public var botMembers: [LexModelsV2ClientTypes.BotMember]?
    /// The new name of the bot. The name must be unique in the account that creates the bot.
    /// This member is required.
    public var botName: Swift.String?
    /// The type of the bot to be updated.
    public var botType: LexModelsV2ClientTypes.BotType?
    /// Provides information on additional privacy protections Amazon Lex should use with the bot's data.
    /// This member is required.
    public var dataPrivacy: LexModelsV2ClientTypes.DataPrivacy?
    /// A description of the bot.
    public var description: Swift.String?
    /// The time, in seconds, that Amazon Lex should keep information about a user's conversation with the bot. A user interaction remains active for the amount of time specified. If no conversation occurs during this time, the session expires and Amazon Lex deletes any data provided before the timeout. You can specify between 60 (1 minute) and 86,400 (24 hours) seconds.
    /// This member is required.
    public var idleSessionTTLInSeconds: Swift.Int?
    /// The Amazon Resource Name (ARN) of an IAM role that has permissions to access the bot.
    /// This member is required.
    public var roleArn: Swift.String?

    public init(
        botId: Swift.String? = nil,
        botMembers: [LexModelsV2ClientTypes.BotMember]? = nil,
        botName: Swift.String? = nil,
        botType: LexModelsV2ClientTypes.BotType? = nil,
        dataPrivacy: LexModelsV2ClientTypes.DataPrivacy? = nil,
        description: Swift.String? = nil,
        idleSessionTTLInSeconds: Swift.Int? = nil,
        roleArn: Swift.String? = nil
    )
    {
        self.botId = botId
        self.botMembers = botMembers
        self.botName = botName
        self.botType = botType
        self.dataPrivacy = dataPrivacy
        self.description = description
        self.idleSessionTTLInSeconds = idleSessionTTLInSeconds
        self.roleArn = roleArn
    }
}

public struct UpdateBotOutput {
    /// The unique identifier of the bot that was updated.
    public var botId: Swift.String?
    /// The list of bot members in the network that was updated.
    public var botMembers: [LexModelsV2ClientTypes.BotMember]?
    /// The name of the bot after the update.
    public var botName: Swift.String?
    /// Shows the current status of the bot. The bot is first in the Creating status. Once the bot is read for use, it changes to the Available status. After the bot is created, you can use the DRAFT version of the bot.
    public var botStatus: LexModelsV2ClientTypes.BotStatus?
    /// The type of the bot that was updated.
    public var botType: LexModelsV2ClientTypes.BotType?
    /// A timestamp of the date and time that the bot was created.
    public var creationDateTime: Foundation.Date?
    /// The data privacy settings for the bot after the update.
    public var dataPrivacy: LexModelsV2ClientTypes.DataPrivacy?
    /// The description of the bot after the update.
    public var description: Swift.String?
    /// The session timeout, in seconds, for the bot after the update.
    public var idleSessionTTLInSeconds: Swift.Int?
    /// A timestamp of the date and time that the bot was last updated.
    public var lastUpdatedDateTime: Foundation.Date?
    /// The Amazon Resource Name (ARN) of the IAM role used by the bot after the update.
    public var roleArn: Swift.String?

    public init(
        botId: Swift.String? = nil,
        botMembers: [LexModelsV2ClientTypes.BotMember]? = nil,
        botName: Swift.String? = nil,
        botStatus: LexModelsV2ClientTypes.BotStatus? = nil,
        botType: LexModelsV2ClientTypes.BotType? = nil,
        creationDateTime: Foundation.Date? = nil,
        dataPrivacy: LexModelsV2ClientTypes.DataPrivacy? = nil,
        description: Swift.String? = nil,
        idleSessionTTLInSeconds: Swift.Int? = nil,
        lastUpdatedDateTime: Foundation.Date? = nil,
        roleArn: Swift.String? = nil
    )
    {
        self.botId = botId
        self.botMembers = botMembers
        self.botName = botName
        self.botStatus = botStatus
        self.botType = botType
        self.creationDateTime = creationDateTime
        self.dataPrivacy = dataPrivacy
        self.description = description
        self.idleSessionTTLInSeconds = idleSessionTTLInSeconds
        self.lastUpdatedDateTime = lastUpdatedDateTime
        self.roleArn = roleArn
    }
}

public struct UpdateBotAliasInput {
    /// The unique identifier of the bot alias.
    /// This member is required.
    public var botAliasId: Swift.String?
    /// The new Lambda functions to use in each locale for the bot alias.
    public var botAliasLocaleSettings: [Swift.String: LexModelsV2ClientTypes.BotAliasLocaleSettings]?
    /// The new name to assign to the bot alias.
    /// This member is required.
    public var botAliasName: Swift.String?
    /// The identifier of the bot with the updated alias.
    /// This member is required.
    public var botId: Swift.String?
    /// The new bot version to assign to the bot alias.
    public var botVersion: Swift.String?
    /// The new settings for storing conversation logs in Amazon CloudWatch Logs and Amazon S3 buckets.
    public var conversationLogSettings: LexModelsV2ClientTypes.ConversationLogSettings?
    /// The new description to assign to the bot alias.
    public var description: Swift.String?
    /// Determines whether Amazon Lex will use Amazon Comprehend to detect the sentiment of user utterances.
    public var sentimentAnalysisSettings: LexModelsV2ClientTypes.SentimentAnalysisSettings?

    public init(
        botAliasId: Swift.String? = nil,
        botAliasLocaleSettings: [Swift.String: LexModelsV2ClientTypes.BotAliasLocaleSettings]? = nil,
        botAliasName: Swift.String? = nil,
        botId: Swift.String? = nil,
        botVersion: Swift.String? = nil,
        conversationLogSettings: LexModelsV2ClientTypes.ConversationLogSettings? = nil,
        description: Swift.String? = nil,
        sentimentAnalysisSettings: LexModelsV2ClientTypes.SentimentAnalysisSettings? = nil
    )
    {
        self.botAliasId = botAliasId
        self.botAliasLocaleSettings = botAliasLocaleSettings
        self.botAliasName = botAliasName
        self.botId = botId
        self.botVersion = botVersion
        self.conversationLogSettings = conversationLogSettings
        self.description = description
        self.sentimentAnalysisSettings = sentimentAnalysisSettings
    }
}

public struct UpdateBotAliasOutput {
    /// The identifier of the updated bot alias.
    public var botAliasId: Swift.String?
    /// The updated Lambda functions to use in each locale for the bot alias.
    public var botAliasLocaleSettings: [Swift.String: LexModelsV2ClientTypes.BotAliasLocaleSettings]?
    /// The updated name of the bot alias.
    public var botAliasName: Swift.String?
    /// The current status of the bot alias. When the status is Available the alias is ready for use.
    public var botAliasStatus: LexModelsV2ClientTypes.BotAliasStatus?
    /// The identifier of the bot with the updated alias.
    public var botId: Swift.String?
    /// The updated version of the bot that the alias points to.
    public var botVersion: Swift.String?
    /// The updated settings for storing conversation logs in Amazon CloudWatch Logs and Amazon S3 buckets.
    public var conversationLogSettings: LexModelsV2ClientTypes.ConversationLogSettings?
    /// A timestamp of the date and time that the bot was created.
    public var creationDateTime: Foundation.Date?
    /// The updated description of the bot alias.
    public var description: Swift.String?
    /// A timestamp of the date and time that the bot was last updated.
    public var lastUpdatedDateTime: Foundation.Date?
    /// Determines whether Amazon Lex will use Amazon Comprehend to detect the sentiment of user utterances.
    public var sentimentAnalysisSettings: LexModelsV2ClientTypes.SentimentAnalysisSettings?

    public init(
        botAliasId: Swift.String? = nil,
        botAliasLocaleSettings: [Swift.String: LexModelsV2ClientTypes.BotAliasLocaleSettings]? = nil,
        botAliasName: Swift.String? = nil,
        botAliasStatus: LexModelsV2ClientTypes.BotAliasStatus? = nil,
        botId: Swift.String? = nil,
        botVersion: Swift.String? = nil,
        conversationLogSettings: LexModelsV2ClientTypes.ConversationLogSettings? = nil,
        creationDateTime: Foundation.Date? = nil,
        description: Swift.String? = nil,
        lastUpdatedDateTime: Foundation.Date? = nil,
        sentimentAnalysisSettings: LexModelsV2ClientTypes.SentimentAnalysisSettings? = nil
    )
    {
        self.botAliasId = botAliasId
        self.botAliasLocaleSettings = botAliasLocaleSettings
        self.botAliasName = botAliasName
        self.botAliasStatus = botAliasStatus
        self.botId = botId
        self.botVersion = botVersion
        self.conversationLogSettings = conversationLogSettings
        self.creationDateTime = creationDateTime
        self.description = description
        self.lastUpdatedDateTime = lastUpdatedDateTime
        self.sentimentAnalysisSettings = sentimentAnalysisSettings
    }
}

public struct UpdateBotLocaleInput {
    /// The unique identifier of the bot that contains the locale.
    /// This member is required.
    public var botId: Swift.String?
    /// The version of the bot that contains the locale to be updated. The version can only be the DRAFT version.
    /// This member is required.
    public var botVersion: Swift.String?
    /// The new description of the locale.
    public var description: Swift.String?
    /// Contains settings for generative AI features powered by Amazon Bedrock for your bot locale. Use this object to turn generative AI features on and off. Pricing may differ if you turn a feature on. For more information, see LINK.
    public var generativeAISettings: LexModelsV2ClientTypes.GenerativeAISettings?
    /// The identifier of the language and locale to update. The string must match one of the supported locales. For more information, see [Supported languages](https://docs.aws.amazon.com/lexv2/latest/dg/how-languages.html).
    /// This member is required.
    public var localeId: Swift.String?
    /// The new confidence threshold where Amazon Lex inserts the AMAZON.FallbackIntent and AMAZON.KendraSearchIntent intents in the list of possible intents for an utterance.
    /// This member is required.
    public var nluIntentConfidenceThreshold: Swift.Double?
    /// The new Amazon Polly voice Amazon Lex should use for voice interaction with the user.
    public var voiceSettings: LexModelsV2ClientTypes.VoiceSettings?

    public init(
        botId: Swift.String? = nil,
        botVersion: Swift.String? = nil,
        description: Swift.String? = nil,
        generativeAISettings: LexModelsV2ClientTypes.GenerativeAISettings? = nil,
        localeId: Swift.String? = nil,
        nluIntentConfidenceThreshold: Swift.Double? = nil,
        voiceSettings: LexModelsV2ClientTypes.VoiceSettings? = nil
    )
    {
        self.botId = botId
        self.botVersion = botVersion
        self.description = description
        self.generativeAISettings = generativeAISettings
        self.localeId = localeId
        self.nluIntentConfidenceThreshold = nluIntentConfidenceThreshold
        self.voiceSettings = voiceSettings
    }
}

public struct UpdateBotLocaleOutput {
    /// The identifier of the bot that contains the updated locale.
    public var botId: Swift.String?
    /// The current status of the locale. When the bot status is Built the locale is ready for use.
    public var botLocaleStatus: LexModelsV2ClientTypes.BotLocaleStatus?
    /// The version of the bot that contains the updated locale.
    public var botVersion: Swift.String?
    /// A timestamp of the date and time that the locale was created.
    public var creationDateTime: Foundation.Date?
    /// The updated description of the locale.
    public var description: Swift.String?
    /// If the botLocaleStatus is Failed, the failureReasons field lists the errors that occurred while building the bot.
    public var failureReasons: [Swift.String]?
    /// Contains settings for generative AI features powered by Amazon Bedrock for your bot locale.
    public var generativeAISettings: LexModelsV2ClientTypes.GenerativeAISettings?
    /// A timestamp of the date and time that the locale was last updated.
    public var lastUpdatedDateTime: Foundation.Date?
    /// The language and locale of the updated bot locale.
    public var localeId: Swift.String?
    /// The updated locale name for the locale.
    public var localeName: Swift.String?
    /// The updated confidence threshold for inserting the AMAZON.FallbackIntent and AMAZON.KendraSearchIntent intents in the list of possible intents for an utterance.
    public var nluIntentConfidenceThreshold: Swift.Double?
    /// Recommended actions to take to resolve an error in the failureReasons field.
    public var recommendedActions: [Swift.String]?
    /// The updated Amazon Polly voice to use for voice interaction with the user.
    public var voiceSettings: LexModelsV2ClientTypes.VoiceSettings?

    public init(
        botId: Swift.String? = nil,
        botLocaleStatus: LexModelsV2ClientTypes.BotLocaleStatus? = nil,
        botVersion: Swift.String? = nil,
        creationDateTime: Foundation.Date? = nil,
        description: Swift.String? = nil,
        failureReasons: [Swift.String]? = nil,
        generativeAISettings: LexModelsV2ClientTypes.GenerativeAISettings? = nil,
        lastUpdatedDateTime: Foundation.Date? = nil,
        localeId: Swift.String? = nil,
        localeName: Swift.String? = nil,
        nluIntentConfidenceThreshold: Swift.Double? = nil,
        recommendedActions: [Swift.String]? = nil,
        voiceSettings: LexModelsV2ClientTypes.VoiceSettings? = nil
    )
    {
        self.botId = botId
        self.botLocaleStatus = botLocaleStatus
        self.botVersion = botVersion
        self.creationDateTime = creationDateTime
        self.description = description
        self.failureReasons = failureReasons
        self.generativeAISettings = generativeAISettings
        self.lastUpdatedDateTime = lastUpdatedDateTime
        self.localeId = localeId
        self.localeName = localeName
        self.nluIntentConfidenceThreshold = nluIntentConfidenceThreshold
        self.recommendedActions = recommendedActions
        self.voiceSettings = voiceSettings
    }
}

public struct UpdateBotRecommendationInput {
    /// The unique identifier of the bot containing the bot recommendation to be updated.
    /// This member is required.
    public var botId: Swift.String?
    /// The unique identifier of the bot recommendation to be updated.
    /// This member is required.
    public var botRecommendationId: Swift.String?
    /// The version of the bot containing the bot recommendation to be updated.
    /// This member is required.
    public var botVersion: Swift.String?
    /// The object representing the passwords that will be used to encrypt the data related to the bot recommendation results, as well as the KMS key ARN used to encrypt the associated metadata.
    /// This member is required.
    public var encryptionSetting: LexModelsV2ClientTypes.EncryptionSetting?
    /// The identifier of the language and locale of the bot recommendation to update. The string must match one of the supported locales. For more information, see [Supported languages](https://docs.aws.amazon.com/lexv2/latest/dg/how-languages.html)
    /// This member is required.
    public var localeId: Swift.String?

    public init(
        botId: Swift.String? = nil,
        botRecommendationId: Swift.String? = nil,
        botVersion: Swift.String? = nil,
        encryptionSetting: LexModelsV2ClientTypes.EncryptionSetting? = nil,
        localeId: Swift.String? = nil
    )
    {
        self.botId = botId
        self.botRecommendationId = botRecommendationId
        self.botVersion = botVersion
        self.encryptionSetting = encryptionSetting
        self.localeId = localeId
    }
}

public struct UpdateBotRecommendationOutput {
    /// The unique identifier of the bot containing the bot recommendation that has been updated.
    public var botId: Swift.String?
    /// The unique identifier of the bot recommendation to be updated.
    public var botRecommendationId: Swift.String?
    /// The status of the bot recommendation. If the status is Failed, then the reasons for the failure are listed in the failureReasons field.
    public var botRecommendationStatus: LexModelsV2ClientTypes.BotRecommendationStatus?
    /// The version of the bot containing the bot recommendation that has been updated.
    public var botVersion: Swift.String?
    /// A timestamp of the date and time that the bot recommendation was created.
    public var creationDateTime: Foundation.Date?
    /// The object representing the passwords that were used to encrypt the data related to the bot recommendation results, as well as the KMS key ARN used to encrypt the associated metadata.
    public var encryptionSetting: LexModelsV2ClientTypes.EncryptionSetting?
    /// A timestamp of the date and time that the bot recommendation was last updated.
    public var lastUpdatedDateTime: Foundation.Date?
    /// The identifier of the language and locale of the bot recommendation to update. The string must match one of the supported locales. For more information, see [Supported languages](https://docs.aws.amazon.com/lexv2/latest/dg/how-languages.html)
    public var localeId: Swift.String?
    /// The object representing the Amazon S3 bucket containing the transcript, as well as the associated metadata.
    public var transcriptSourceSetting: LexModelsV2ClientTypes.TranscriptSourceSetting?

    public init(
        botId: Swift.String? = nil,
        botRecommendationId: Swift.String? = nil,
        botRecommendationStatus: LexModelsV2ClientTypes.BotRecommendationStatus? = nil,
        botVersion: Swift.String? = nil,
        creationDateTime: Foundation.Date? = nil,
        encryptionSetting: LexModelsV2ClientTypes.EncryptionSetting? = nil,
        lastUpdatedDateTime: Foundation.Date? = nil,
        localeId: Swift.String? = nil,
        transcriptSourceSetting: LexModelsV2ClientTypes.TranscriptSourceSetting? = nil
    )
    {
        self.botId = botId
        self.botRecommendationId = botRecommendationId
        self.botRecommendationStatus = botRecommendationStatus
        self.botVersion = botVersion
        self.creationDateTime = creationDateTime
        self.encryptionSetting = encryptionSetting
        self.lastUpdatedDateTime = lastUpdatedDateTime
        self.localeId = localeId
        self.transcriptSourceSetting = transcriptSourceSetting
    }
}

public struct UpdateExportInput {
    /// The unique identifier Amazon Lex assigned to the export.
    /// This member is required.
    public var exportId: Swift.String?
    /// The new password to use to encrypt the export zip archive.
    public var filePassword: Swift.String?

    public init(
        exportId: Swift.String? = nil,
        filePassword: Swift.String? = nil
    )
    {
        self.exportId = exportId
        self.filePassword = filePassword
    }
}

extension UpdateExportInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UpdateExportInput(exportId: \(Swift.String(describing: exportId)), filePassword: \"CONTENT_REDACTED\")"}
}

public struct UpdateExportOutput {
    /// The date and time that the export was created.
    public var creationDateTime: Foundation.Date?
    /// The unique identifier Amazon Lex assigned to the export.
    public var exportId: Swift.String?
    /// The status of the export. When the status is Completed the export archive is available for download.
    public var exportStatus: LexModelsV2ClientTypes.ExportStatus?
    /// The file format used for the files that define the resource. The TSV format is required to export a custom vocabulary only; otherwise use LexJson format.
    public var fileFormat: LexModelsV2ClientTypes.ImportExportFileFormat?
    /// The date and time that the export was last updated.
    public var lastUpdatedDateTime: Foundation.Date?
    /// A description of the type of resource that was exported, either a bot or a bot locale.
    public var resourceSpecification: LexModelsV2ClientTypes.ExportResourceSpecification?

    public init(
        creationDateTime: Foundation.Date? = nil,
        exportId: Swift.String? = nil,
        exportStatus: LexModelsV2ClientTypes.ExportStatus? = nil,
        fileFormat: LexModelsV2ClientTypes.ImportExportFileFormat? = nil,
        lastUpdatedDateTime: Foundation.Date? = nil,
        resourceSpecification: LexModelsV2ClientTypes.ExportResourceSpecification? = nil
    )
    {
        self.creationDateTime = creationDateTime
        self.exportId = exportId
        self.exportStatus = exportStatus
        self.fileFormat = fileFormat
        self.lastUpdatedDateTime = lastUpdatedDateTime
        self.resourceSpecification = resourceSpecification
    }
}

public struct UpdateResourcePolicyInput {
    /// The identifier of the revision of the policy to update. If this revision ID doesn't match the current revision ID, Amazon Lex throws an exception. If you don't specify a revision, Amazon Lex overwrites the contents of the policy with the new values.
    public var expectedRevisionId: Swift.String?
    /// A resource policy to add to the resource. The policy is a JSON structure that contains one or more statements that define the policy. The policy must follow the IAM syntax. For more information about the contents of a JSON policy document, see [ IAM JSON policy reference ](https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies.html). If the policy isn't valid, Amazon Lex returns a validation exception.
    /// This member is required.
    public var policy: Swift.String?
    /// The Amazon Resource Name (ARN) of the bot or bot alias that the resource policy is attached to.
    /// This member is required.
    public var resourceArn: Swift.String?

    public init(
        expectedRevisionId: Swift.String? = nil,
        policy: Swift.String? = nil,
        resourceArn: Swift.String? = nil
    )
    {
        self.expectedRevisionId = expectedRevisionId
        self.policy = policy
        self.resourceArn = resourceArn
    }
}

public struct UpdateResourcePolicyOutput {
    /// The Amazon Resource Name (ARN) of the bot or bot alias that the resource policy is attached to.
    public var resourceArn: Swift.String?
    /// The current revision of the resource policy. Use the revision ID to make sure that you are updating the most current version of a resource policy when you add a policy statement to a resource, delete a resource, or update a resource.
    public var revisionId: Swift.String?

    public init(
        resourceArn: Swift.String? = nil,
        revisionId: Swift.String? = nil
    )
    {
        self.resourceArn = resourceArn
        self.revisionId = revisionId
    }
}

public struct UpdateSlotTypeInput {
    /// The identifier of the bot that contains the slot type.
    /// This member is required.
    public var botId: Swift.String?
    /// The version of the bot that contains the slot type. Must be DRAFT.
    /// This member is required.
    public var botVersion: Swift.String?
    /// Specifications for a composite slot type.
    public var compositeSlotTypeSetting: LexModelsV2ClientTypes.CompositeSlotTypeSetting?
    /// The new description of the slot type.
    public var description: Swift.String?
    /// Provides information about the external source of the slot type's definition.
    public var externalSourceSetting: LexModelsV2ClientTypes.ExternalSourceSetting?
    /// The identifier of the language and locale that contains the slot type. The string must match one of the supported locales. For more information, see [Supported languages](https://docs.aws.amazon.com/lexv2/latest/dg/how-languages.html).
    /// This member is required.
    public var localeId: Swift.String?
    /// The new built-in slot type that should be used as the parent of this slot type.
    public var parentSlotTypeSignature: Swift.String?
    /// The unique identifier of the slot type to update.
    /// This member is required.
    public var slotTypeId: Swift.String?
    /// The new name of the slot type.
    /// This member is required.
    public var slotTypeName: Swift.String?
    /// A new list of values and their optional synonyms that define the values that the slot type can take.
    public var slotTypeValues: [LexModelsV2ClientTypes.SlotTypeValue]?
    /// The strategy that Amazon Lex should use when deciding on a value from the list of slot type values.
    public var valueSelectionSetting: LexModelsV2ClientTypes.SlotValueSelectionSetting?

    public init(
        botId: Swift.String? = nil,
        botVersion: Swift.String? = nil,
        compositeSlotTypeSetting: LexModelsV2ClientTypes.CompositeSlotTypeSetting? = nil,
        description: Swift.String? = nil,
        externalSourceSetting: LexModelsV2ClientTypes.ExternalSourceSetting? = nil,
        localeId: Swift.String? = nil,
        parentSlotTypeSignature: Swift.String? = nil,
        slotTypeId: Swift.String? = nil,
        slotTypeName: Swift.String? = nil,
        slotTypeValues: [LexModelsV2ClientTypes.SlotTypeValue]? = nil,
        valueSelectionSetting: LexModelsV2ClientTypes.SlotValueSelectionSetting? = nil
    )
    {
        self.botId = botId
        self.botVersion = botVersion
        self.compositeSlotTypeSetting = compositeSlotTypeSetting
        self.description = description
        self.externalSourceSetting = externalSourceSetting
        self.localeId = localeId
        self.parentSlotTypeSignature = parentSlotTypeSignature
        self.slotTypeId = slotTypeId
        self.slotTypeName = slotTypeName
        self.slotTypeValues = slotTypeValues
        self.valueSelectionSetting = valueSelectionSetting
    }
}

public struct UpdateSlotTypeOutput {
    /// The identifier of the bot that contains the slot type.
    public var botId: Swift.String?
    /// The version of the bot that contains the slot type. This is always DRAFT.
    public var botVersion: Swift.String?
    /// Specifications for a composite slot type.
    public var compositeSlotTypeSetting: LexModelsV2ClientTypes.CompositeSlotTypeSetting?
    /// The timestamp of the date and time that the slot type was created.
    public var creationDateTime: Foundation.Date?
    /// The updated description of the slot type.
    public var description: Swift.String?
    /// Provides information about the external source of the slot type's definition.
    public var externalSourceSetting: LexModelsV2ClientTypes.ExternalSourceSetting?
    /// A timestamp of the date and time that the slot type was last updated.
    public var lastUpdatedDateTime: Foundation.Date?
    /// The language and locale of the updated slot type.
    public var localeId: Swift.String?
    /// The updated signature of the built-in slot type that is the parent of this slot type.
    public var parentSlotTypeSignature: Swift.String?
    /// The unique identifier of the updated slot type.
    public var slotTypeId: Swift.String?
    /// The updated name of the slot type.
    public var slotTypeName: Swift.String?
    /// The updated values that the slot type provides.
    public var slotTypeValues: [LexModelsV2ClientTypes.SlotTypeValue]?
    /// The updated strategy that Amazon Lex uses to determine which value to select from the slot type.
    public var valueSelectionSetting: LexModelsV2ClientTypes.SlotValueSelectionSetting?

    public init(
        botId: Swift.String? = nil,
        botVersion: Swift.String? = nil,
        compositeSlotTypeSetting: LexModelsV2ClientTypes.CompositeSlotTypeSetting? = nil,
        creationDateTime: Foundation.Date? = nil,
        description: Swift.String? = nil,
        externalSourceSetting: LexModelsV2ClientTypes.ExternalSourceSetting? = nil,
        lastUpdatedDateTime: Foundation.Date? = nil,
        localeId: Swift.String? = nil,
        parentSlotTypeSignature: Swift.String? = nil,
        slotTypeId: Swift.String? = nil,
        slotTypeName: Swift.String? = nil,
        slotTypeValues: [LexModelsV2ClientTypes.SlotTypeValue]? = nil,
        valueSelectionSetting: LexModelsV2ClientTypes.SlotValueSelectionSetting? = nil
    )
    {
        self.botId = botId
        self.botVersion = botVersion
        self.compositeSlotTypeSetting = compositeSlotTypeSetting
        self.creationDateTime = creationDateTime
        self.description = description
        self.externalSourceSetting = externalSourceSetting
        self.lastUpdatedDateTime = lastUpdatedDateTime
        self.localeId = localeId
        self.parentSlotTypeSignature = parentSlotTypeSignature
        self.slotTypeId = slotTypeId
        self.slotTypeName = slotTypeName
        self.slotTypeValues = slotTypeValues
        self.valueSelectionSetting = valueSelectionSetting
    }
}

public struct UpdateTestSetInput {
    /// The new test set description.
    public var description: Swift.String?
    /// The test set Id for which update test operation to be performed.
    /// This member is required.
    public var testSetId: Swift.String?
    /// The new test set name.
    /// This member is required.
    public var testSetName: Swift.String?

    public init(
        description: Swift.String? = nil,
        testSetId: Swift.String? = nil,
        testSetName: Swift.String? = nil
    )
    {
        self.description = description
        self.testSetId = testSetId
        self.testSetName = testSetName
    }
}

public struct UpdateTestSetOutput {
    /// The creation date and time for the updated test set.
    public var creationDateTime: Foundation.Date?
    /// The test set description for the updated test set.
    public var description: Swift.String?
    /// The date and time of the last update for the updated test set.
    public var lastUpdatedDateTime: Foundation.Date?
    /// Indicates whether audio or text is used for the updated test set.
    public var modality: LexModelsV2ClientTypes.TestSetModality?
    /// The number of conversation turns from the updated test set.
    public var numTurns: Swift.Int?
    /// The roleARN used for any operation in the test set to access resources in the Amazon Web Services account.
    public var roleArn: Swift.String?
    /// The status for the updated test set.
    public var status: LexModelsV2ClientTypes.TestSetStatus?
    /// The Amazon S3 storage location for the updated test set.
    public var storageLocation: LexModelsV2ClientTypes.TestSetStorageLocation?
    /// The test set Id for which update test operation to be performed.
    public var testSetId: Swift.String?
    /// The test set name for the updated test set.
    public var testSetName: Swift.String?

    public init(
        creationDateTime: Foundation.Date? = nil,
        description: Swift.String? = nil,
        lastUpdatedDateTime: Foundation.Date? = nil,
        modality: LexModelsV2ClientTypes.TestSetModality? = nil,
        numTurns: Swift.Int? = nil,
        roleArn: Swift.String? = nil,
        status: LexModelsV2ClientTypes.TestSetStatus? = nil,
        storageLocation: LexModelsV2ClientTypes.TestSetStorageLocation? = nil,
        testSetId: Swift.String? = nil,
        testSetName: Swift.String? = nil
    )
    {
        self.creationDateTime = creationDateTime
        self.description = description
        self.lastUpdatedDateTime = lastUpdatedDateTime
        self.modality = modality
        self.numTurns = numTurns
        self.roleArn = roleArn
        self.status = status
        self.storageLocation = storageLocation
        self.testSetId = testSetId
        self.testSetName = testSetName
    }
}

extension LexModelsV2ClientTypes {
    /// Provides an array of phrases that should be given preference when resolving values for a slot.
    public struct RuntimeHintDetails {
        /// One or more strings that Amazon Lex should look for in the input to the bot. Each phrase is given preference when deciding on slot values.
        public var runtimeHintValues: [LexModelsV2ClientTypes.RuntimeHintValue]?
        /// A map of constituent sub slot names inside a composite slot in the intent and the phrases that should be added for each sub slot. Inside each composite slot hints, this structure provides a mechanism to add granular sub slot phrases. Only sub slot hints are supported for composite slots. The intent name, composite slot name and the constituent sub slot names must exist.
        public var subSlotHints: [Swift.String: LexModelsV2ClientTypes.RuntimeHintDetails]?

        public init(
            runtimeHintValues: [LexModelsV2ClientTypes.RuntimeHintValue]? = nil,
            subSlotHints: [Swift.String: LexModelsV2ClientTypes.RuntimeHintDetails]? = nil
        )
        {
            self.runtimeHintValues = runtimeHintValues
            self.subSlotHints = subSlotHints
        }
    }

}

extension LexModelsV2ClientTypes {
    /// The slot values that Amazon Lex uses when it sets slot values in a dialog step.
    public struct SlotValueOverride {
        /// When the shape value is List, it indicates that the values field contains a list of slot values. When the value is Scalar, it indicates that the value field contains a single value.
        public var shape: LexModelsV2ClientTypes.SlotShape?
        /// The current value of the slot.
        public var value: LexModelsV2ClientTypes.SlotValue?
        /// A list of one or more values that the user provided for the slot. For example, for a slot that elicits pizza toppings, the values might be "pepperoni" and "pineapple."
        public var values: [LexModelsV2ClientTypes.SlotValueOverride]?

        public init(
            shape: LexModelsV2ClientTypes.SlotShape? = nil,
            value: LexModelsV2ClientTypes.SlotValue? = nil,
            values: [LexModelsV2ClientTypes.SlotValueOverride]? = nil
        )
        {
            self.shape = shape
            self.value = value
            self.values = values
        }
    }

}

extension LexModelsV2ClientTypes {
    /// Override settings to configure the intent state.
    public struct IntentOverride {
        /// The name of the intent. Only required when you're switching intents.
        public var name: Swift.String?
        /// A map of all of the slot value overrides for the intent. The name of the slot maps to the value of the slot. Slots that are not included in the map aren't overridden.
        public var slots: [Swift.String: LexModelsV2ClientTypes.SlotValueOverride]?

        public init(
            name: Swift.String? = nil,
            slots: [Swift.String: LexModelsV2ClientTypes.SlotValueOverride]? = nil
        )
        {
            self.name = name
            self.slots = slots
        }
    }

}

extension LexModelsV2ClientTypes {
    /// You can provide Amazon Lex with hints to the phrases that a customer is likely to use for a slot. When a slot with hints is resolved, the phrases in the runtime hints are preferred in the resolution. You can provide hints for a maximum of 100 intents. You can provide a maximum of 100 slots. Before you can use runtime hints with an existing bot, you must first rebuild the bot. For more information, see [Using runtime hints to improve recognition of slot values](https://docs.aws.amazon.com/lexv2/latest/dg/using-hints.html).
    public struct RuntimeHints {
        /// A list of the slots in the intent that should have runtime hints added, and the phrases that should be added for each slot. The first level of the slotHints map is the name of the intent. The second level is the name of the slot within the intent. For more information, see [Using hints to improve accuracy](https://docs.aws.amazon.com/lexv2/latest/dg/using-hints.html). The intent name and slot name must exist.
        public var slotHints: [Swift.String: [Swift.String: LexModelsV2ClientTypes.RuntimeHintDetails]]?

        public init(
            slotHints: [Swift.String: [Swift.String: LexModelsV2ClientTypes.RuntimeHintDetails]]? = nil
        )
        {
            self.slotHints = slotHints
        }
    }

}

extension LexModelsV2ClientTypes {
    /// Contains information about a slot output by the test set execution.
    public struct UserTurnSlotOutput {
        /// A list of items mapping the name of the subslots to information about those subslots.
        public var subSlots: [Swift.String: LexModelsV2ClientTypes.UserTurnSlotOutput]?
        /// The value output by the slot recognition.
        public var value: Swift.String?
        /// Values that are output by the slot recognition.
        public var values: [LexModelsV2ClientTypes.UserTurnSlotOutput]?

        public init(
            subSlots: [Swift.String: LexModelsV2ClientTypes.UserTurnSlotOutput]? = nil,
            value: Swift.String? = nil,
            values: [LexModelsV2ClientTypes.UserTurnSlotOutput]? = nil
        )
        {
            self.subSlots = subSlots
            self.value = value
            self.values = values
        }
    }

}

extension LexModelsV2ClientTypes {
    /// The current state of the conversation with the user.
    public struct DialogState {
        /// Defines the action that the bot executes at runtime when the conversation reaches this step.
        public var dialogAction: LexModelsV2ClientTypes.DialogAction?
        /// Override settings to configure the intent state.
        public var intent: LexModelsV2ClientTypes.IntentOverride?
        /// Map of key/value pairs representing session-specific context information. It contains application information passed between Amazon Lex and a client application.
        public var sessionAttributes: [Swift.String: Swift.String]?

        public init(
            dialogAction: LexModelsV2ClientTypes.DialogAction? = nil,
            intent: LexModelsV2ClientTypes.IntentOverride? = nil,
            sessionAttributes: [Swift.String: Swift.String]? = nil
        )
        {
            self.dialogAction = dialogAction
            self.intent = intent
            self.sessionAttributes = sessionAttributes
        }
    }

}

extension LexModelsV2ClientTypes {
    /// Specifications for the current state of the dialog between the user and the bot in the test set.
    public struct InputSessionStateSpecification {
        /// Active contexts for the session state.
        public var activeContexts: [LexModelsV2ClientTypes.ActiveContext]?
        /// Runtime hints for the session state.
        public var runtimeHints: LexModelsV2ClientTypes.RuntimeHints?
        /// Session attributes for the session state.
        public var sessionAttributes: [Swift.String: Swift.String]?

        public init(
            activeContexts: [LexModelsV2ClientTypes.ActiveContext]? = nil,
            runtimeHints: LexModelsV2ClientTypes.RuntimeHints? = nil,
            sessionAttributes: [Swift.String: Swift.String]? = nil
        )
        {
            self.activeContexts = activeContexts
            self.runtimeHints = runtimeHints
            self.sessionAttributes = sessionAttributes
        }
    }

}

extension LexModelsV2ClientTypes {
    /// A set of actions that Amazon Lex should run if the condition is matched.
    public struct ConditionalBranch {
        /// Contains the expression to evaluate. If the condition is true, the branch's actions are taken.
        /// This member is required.
        public var condition: LexModelsV2ClientTypes.Condition?
        /// The name of the branch.
        /// This member is required.
        public var name: Swift.String?
        /// The next step in the conversation.
        /// This member is required.
        public var nextStep: LexModelsV2ClientTypes.DialogState?
        /// Specifies a list of message groups that Amazon Lex uses to respond the user input.
        public var response: LexModelsV2ClientTypes.ResponseSpecification?

        public init(
            condition: LexModelsV2ClientTypes.Condition? = nil,
            name: Swift.String? = nil,
            nextStep: LexModelsV2ClientTypes.DialogState? = nil,
            response: LexModelsV2ClientTypes.ResponseSpecification? = nil
        )
        {
            self.condition = condition
            self.name = name
            self.nextStep = nextStep
            self.response = response
        }
    }

}

extension LexModelsV2ClientTypes {
    /// A set of actions that Amazon Lex should run if none of the other conditions are met.
    public struct DefaultConditionalBranch {
        /// The next step in the conversation.
        public var nextStep: LexModelsV2ClientTypes.DialogState?
        /// Specifies a list of message groups that Amazon Lex uses to respond the user input.
        public var response: LexModelsV2ClientTypes.ResponseSpecification?

        public init(
            nextStep: LexModelsV2ClientTypes.DialogState? = nil,
            response: LexModelsV2ClientTypes.ResponseSpecification? = nil
        )
        {
            self.nextStep = nextStep
            self.response = response
        }
    }

}

extension LexModelsV2ClientTypes {
    /// Contains information about the user messages in the turn in the input.
    public struct UserTurnInputSpecification {
        /// Request attributes of the user turn.
        public var requestAttributes: [Swift.String: Swift.String]?
        /// Contains information about the session state in the input.
        public var sessionState: LexModelsV2ClientTypes.InputSessionStateSpecification?
        /// The utterance input in the user turn.
        /// This member is required.
        public var utteranceInput: LexModelsV2ClientTypes.UtteranceInputSpecification?

        public init(
            requestAttributes: [Swift.String: Swift.String]? = nil,
            sessionState: LexModelsV2ClientTypes.InputSessionStateSpecification? = nil,
            utteranceInput: LexModelsV2ClientTypes.UtteranceInputSpecification? = nil
        )
        {
            self.requestAttributes = requestAttributes
            self.sessionState = sessionState
            self.utteranceInput = utteranceInput
        }
    }

}

extension LexModelsV2ClientTypes {
    /// Contains information about the intent that is output for the turn by the test execution.
    public struct UserTurnIntentOutput {
        /// The name of the intent.
        /// This member is required.
        public var name: Swift.String?
        /// The slots associated with the intent.
        public var slots: [Swift.String: LexModelsV2ClientTypes.UserTurnSlotOutput]?

        public init(
            name: Swift.String? = nil,
            slots: [Swift.String: LexModelsV2ClientTypes.UserTurnSlotOutput]? = nil
        )
        {
            self.name = name
            self.slots = slots
        }
    }

}

extension LexModelsV2ClientTypes {
    /// Contains results that are output for the user turn by the test execution.
    public struct UserTurnOutputSpecification {
        /// The contexts that are active in the turn.
        public var activeContexts: [LexModelsV2ClientTypes.ActiveContext]?
        /// Contains information about the intent.
        /// This member is required.
        public var intent: LexModelsV2ClientTypes.UserTurnIntentOutput?
        /// The transcript that is output for the user turn by the test execution.
        public var transcript: Swift.String?

        public init(
            activeContexts: [LexModelsV2ClientTypes.ActiveContext]? = nil,
            intent: LexModelsV2ClientTypes.UserTurnIntentOutput? = nil,
            transcript: Swift.String? = nil
        )
        {
            self.activeContexts = activeContexts
            self.intent = intent
            self.transcript = transcript
        }
    }

}

extension LexModelsV2ClientTypes {
    /// Provides a list of conditional branches. Branches are evaluated in the order that they are entered in the list. The first branch with a condition that evaluates to true is executed. The last branch in the list is the default branch. The default branch should not have any condition expression. The default branch is executed if no other branch has a matching condition.
    public struct ConditionalSpecification {
        /// Determines whether a conditional branch is active. When active is false, the conditions are not evaluated.
        /// This member is required.
        public var active: Swift.Bool?
        /// A list of conditional branches. A conditional branch is made up of a condition, a response and a next step. The response and next step are executed when the condition is true.
        /// This member is required.
        public var conditionalBranches: [LexModelsV2ClientTypes.ConditionalBranch]?
        /// The conditional branch that should be followed when the conditions for other branches are not satisfied. A conditional branch is made up of a condition, a response and a next step.
        /// This member is required.
        public var defaultBranch: LexModelsV2ClientTypes.DefaultConditionalBranch?

        public init(
            active: Swift.Bool? = nil,
            conditionalBranches: [LexModelsV2ClientTypes.ConditionalBranch]? = nil,
            defaultBranch: LexModelsV2ClientTypes.DefaultConditionalBranch? = nil
        )
        {
            self.active = active
            self.conditionalBranches = conditionalBranches
            self.defaultBranch = defaultBranch
        }
    }

}

extension LexModelsV2ClientTypes {
    /// Contains information about the expected and input values for the user turn.
    public struct UserTurnSpecification {
        /// Contains results about the expected output for the user turn.
        /// This member is required.
        public var expected: LexModelsV2ClientTypes.UserTurnOutputSpecification?
        /// Contains information about the user messages in the turn in the input.
        /// This member is required.
        public var input: LexModelsV2ClientTypes.UserTurnInputSpecification?

        public init(
            expected: LexModelsV2ClientTypes.UserTurnOutputSpecification? = nil,
            input: LexModelsV2ClientTypes.UserTurnInputSpecification? = nil
        )
        {
            self.expected = expected
            self.input = input
        }
    }

}

extension LexModelsV2ClientTypes {
    /// Contains information about the messages in the turn.
    public struct TurnSpecification {
        /// Contains information about the agent messages in the turn.
        public var agentTurn: LexModelsV2ClientTypes.AgentTurnSpecification?
        /// Contains information about the user messages in the turn.
        public var userTurn: LexModelsV2ClientTypes.UserTurnSpecification?

        public init(
            agentTurn: LexModelsV2ClientTypes.AgentTurnSpecification? = nil,
            userTurn: LexModelsV2ClientTypes.UserTurnSpecification? = nil
        )
        {
            self.agentTurn = agentTurn
            self.userTurn = userTurn
        }
    }

}

extension LexModelsV2ClientTypes {
    /// Provides a statement the Amazon Lex conveys to the user when the intent is successfully fulfilled.
    public struct IntentClosingSetting {
        /// Specifies whether an intent's closing response is used. When this field is false, the closing response isn't sent to the user. If the active field isn't specified, the default is true.
        public var active: Swift.Bool?
        /// The response that Amazon Lex sends to the user when the intent is complete.
        public var closingResponse: LexModelsV2ClientTypes.ResponseSpecification?
        /// A list of conditional branches associated with the intent's closing response. These branches are executed when the nextStep attribute is set to EvalutateConditional.
        public var conditional: LexModelsV2ClientTypes.ConditionalSpecification?
        /// Specifies the next step that the bot executes after playing the intent's closing response.
        public var nextStep: LexModelsV2ClientTypes.DialogState?

        public init(
            active: Swift.Bool? = nil,
            closingResponse: LexModelsV2ClientTypes.ResponseSpecification? = nil,
            conditional: LexModelsV2ClientTypes.ConditionalSpecification? = nil,
            nextStep: LexModelsV2ClientTypes.DialogState? = nil
        )
        {
            self.active = active
            self.closingResponse = closingResponse
            self.conditional = conditional
            self.nextStep = nextStep
        }
    }

}

extension LexModelsV2ClientTypes {
    /// Contains information about a turn in a test set.
    public struct TestSetTurnRecord {
        /// The unique identifier for the conversation associated with the turn.
        public var conversationId: Swift.String?
        /// The record number associated with the turn.
        /// This member is required.
        public var recordNumber: Swift.Int?
        /// The number of turns that has elapsed up to that turn.
        public var turnNumber: Swift.Int?
        /// Contains information about the agent or user turn depending upon type of turn.
        /// This member is required.
        public var turnSpecification: LexModelsV2ClientTypes.TurnSpecification?

        public init(
            conversationId: Swift.String? = nil,
            recordNumber: Swift.Int? = nil,
            turnNumber: Swift.Int? = nil,
            turnSpecification: LexModelsV2ClientTypes.TurnSpecification? = nil
        )
        {
            self.conversationId = conversationId
            self.recordNumber = recordNumber
            self.turnNumber = turnNumber
            self.turnSpecification = turnSpecification
        }
    }

}

extension LexModelsV2ClientTypes {
    /// Contains the results for the user turn by the test execution.
    public struct UserTurnResult {
        /// Contains information about the actual output for the user turn.
        public var actualOutput: LexModelsV2ClientTypes.UserTurnOutputSpecification?
        /// Contains information about the results related to the conversation associated with the user turn.
        public var conversationLevelResult: LexModelsV2ClientTypes.ConversationLevelResultDetail?
        /// Specifies whether the expected and actual outputs match or not, or if there is an error in execution.
        public var endToEndResult: LexModelsV2ClientTypes.TestResultMatchStatus?
        /// Details about an error in an execution of a test set.
        public var errorDetails: LexModelsV2ClientTypes.ExecutionErrorDetails?
        /// Contains information about the expected output for the user turn.
        /// This member is required.
        public var expectedOutput: LexModelsV2ClientTypes.UserTurnOutputSpecification?
        /// Contains information about the user messages in the turn in the input.
        /// This member is required.
        public var input: LexModelsV2ClientTypes.UserTurnInputSpecification?
        /// Specifies whether the expected and actual intents match or not.
        public var intentMatchResult: LexModelsV2ClientTypes.TestResultMatchStatus?
        /// Specifies whether the expected and actual slots match or not.
        public var slotMatchResult: LexModelsV2ClientTypes.TestResultMatchStatus?
        /// Specifies whether the expected and actual speech transcriptions match or not, or if there is an error in execution.
        public var speechTranscriptionResult: LexModelsV2ClientTypes.TestResultMatchStatus?

        public init(
            actualOutput: LexModelsV2ClientTypes.UserTurnOutputSpecification? = nil,
            conversationLevelResult: LexModelsV2ClientTypes.ConversationLevelResultDetail? = nil,
            endToEndResult: LexModelsV2ClientTypes.TestResultMatchStatus? = nil,
            errorDetails: LexModelsV2ClientTypes.ExecutionErrorDetails? = nil,
            expectedOutput: LexModelsV2ClientTypes.UserTurnOutputSpecification? = nil,
            input: LexModelsV2ClientTypes.UserTurnInputSpecification? = nil,
            intentMatchResult: LexModelsV2ClientTypes.TestResultMatchStatus? = nil,
            slotMatchResult: LexModelsV2ClientTypes.TestResultMatchStatus? = nil,
            speechTranscriptionResult: LexModelsV2ClientTypes.TestResultMatchStatus? = nil
        )
        {
            self.actualOutput = actualOutput
            self.conversationLevelResult = conversationLevelResult
            self.endToEndResult = endToEndResult
            self.errorDetails = errorDetails
            self.expectedOutput = expectedOutput
            self.input = input
            self.intentMatchResult = intentMatchResult
            self.slotMatchResult = slotMatchResult
            self.speechTranscriptionResult = speechTranscriptionResult
        }
    }

}

public struct ListTestSetRecordsOutput {
    /// A token that indicates whether there are more records to return in a response to the ListTestSetRecords operation. If the nextToken field is present, you send the contents as the nextToken parameter of a ListTestSetRecords operation request to get the next page of records.
    public var nextToken: Swift.String?
    /// The list of records from the test set.
    public var testSetRecords: [LexModelsV2ClientTypes.TestSetTurnRecord]?

    public init(
        nextToken: Swift.String? = nil,
        testSetRecords: [LexModelsV2ClientTypes.TestSetTurnRecord]? = nil
    )
    {
        self.nextToken = nextToken
        self.testSetRecords = testSetRecords
    }
}

extension LexModelsV2ClientTypes {
    /// Contains information about the results of the analysis of a turn in the test set.
    public struct TestSetTurnResult {
        /// Contains information about the agent messages in the turn.
        public var agent: LexModelsV2ClientTypes.AgentTurnResult?
        /// Contains information about the user messages in the turn.
        public var user: LexModelsV2ClientTypes.UserTurnResult?

        public init(
            agent: LexModelsV2ClientTypes.AgentTurnResult? = nil,
            user: LexModelsV2ClientTypes.UserTurnResult? = nil
        )
        {
            self.agent = agent
            self.user = user
        }
    }

}

extension LexModelsV2ClientTypes {
    /// Contains information about multiple utterances in the results of a test set execution.
    public struct UtteranceLevelTestResultItem {
        /// The unique identifier for the conversation associated with the result.
        public var conversationId: Swift.String?
        /// The record number of the result.
        /// This member is required.
        public var recordNumber: Swift.Int?
        /// Contains information about the turn associated with the result.
        /// This member is required.
        public var turnResult: LexModelsV2ClientTypes.TestSetTurnResult?

        public init(
            conversationId: Swift.String? = nil,
            recordNumber: Swift.Int? = nil,
            turnResult: LexModelsV2ClientTypes.TestSetTurnResult? = nil
        )
        {
            self.conversationId = conversationId
            self.recordNumber = recordNumber
            self.turnResult = turnResult
        }
    }

}

extension LexModelsV2ClientTypes {
    /// Contains information about the utterances in the results of the test set execution.
    public struct UtteranceLevelTestResults {
        /// Contains information about an utterance in the results of the test set execution.
        /// This member is required.
        public var items: [LexModelsV2ClientTypes.UtteranceLevelTestResultItem]?

        public init(
            items: [LexModelsV2ClientTypes.UtteranceLevelTestResultItem]? = nil
        )
        {
            self.items = items
        }
    }

}

extension LexModelsV2ClientTypes {
    /// Contains the results of the test execution, grouped by type of results. See [Test result details">Test results details](https://docs.aws.amazon.com/lexv2/latest/dg/test-results-details-test-set.html) for details about different types of results.
    public struct TestExecutionResultItems {
        /// Results related to conversations in the test set, including metrics about success and failure of conversations and intent and slot failures.
        public var conversationLevelTestResults: LexModelsV2ClientTypes.ConversationLevelTestResults?
        /// Intent recognition results aggregated by intent name. The aggregated results contain success and failure rates of intent recognition, speech transcriptions, and end-to-end conversations.
        public var intentClassificationTestResults: LexModelsV2ClientTypes.IntentClassificationTestResults?
        /// Slot resolution results aggregated by intent and slot name. The aggregated results contain success and failure rates of slot resolution, speech transcriptions, and end-to-end conversations
        public var intentLevelSlotResolutionTestResults: LexModelsV2ClientTypes.IntentLevelSlotResolutionTestResults?
        /// Overall results for the test execution, including the breakdown of conversations and single-input utterances.
        public var overallTestResults: LexModelsV2ClientTypes.OverallTestResults?
        /// Results related to utterances in the test set.
        public var utteranceLevelTestResults: LexModelsV2ClientTypes.UtteranceLevelTestResults?

        public init(
            conversationLevelTestResults: LexModelsV2ClientTypes.ConversationLevelTestResults? = nil,
            intentClassificationTestResults: LexModelsV2ClientTypes.IntentClassificationTestResults? = nil,
            intentLevelSlotResolutionTestResults: LexModelsV2ClientTypes.IntentLevelSlotResolutionTestResults? = nil,
            overallTestResults: LexModelsV2ClientTypes.OverallTestResults? = nil,
            utteranceLevelTestResults: LexModelsV2ClientTypes.UtteranceLevelTestResults? = nil
        )
        {
            self.conversationLevelTestResults = conversationLevelTestResults
            self.intentClassificationTestResults = intentClassificationTestResults
            self.intentLevelSlotResolutionTestResults = intentLevelSlotResolutionTestResults
            self.overallTestResults = overallTestResults
            self.utteranceLevelTestResults = utteranceLevelTestResults
        }
    }

}

public struct ListTestExecutionResultItemsOutput {
    /// A token that indicates whether there are more results to return in a response to the ListTestExecutionResultItems operation. If the nextToken field is present, you send the contents as the nextToken parameter of a ListTestExecutionResultItems operation request to get the next page of results.
    public var nextToken: Swift.String?
    /// The list of results from the test execution.
    public var testExecutionResults: LexModelsV2ClientTypes.TestExecutionResultItems?

    public init(
        nextToken: Swift.String? = nil,
        testExecutionResults: LexModelsV2ClientTypes.TestExecutionResultItems? = nil
    )
    {
        self.nextToken = nextToken
        self.testExecutionResults = testExecutionResults
    }
}

extension LexModelsV2ClientTypes {
    /// Specifies next steps to run after the dialog code hook finishes.
    public struct PostDialogCodeHookInvocationSpecification {
        /// A list of conditional branches to evaluate after the dialog code hook throws an exception or returns with the State field of the Intent object set to Failed.
        public var failureConditional: LexModelsV2ClientTypes.ConditionalSpecification?
        /// Specifies the next step the bot runs after the dialog code hook throws an exception or returns with the State field of the Intent object set to Failed.
        public var failureNextStep: LexModelsV2ClientTypes.DialogState?
        /// Specifies a list of message groups that Amazon Lex uses to respond the user input.
        public var failureResponse: LexModelsV2ClientTypes.ResponseSpecification?
        /// A list of conditional branches to evaluate after the dialog code hook finishes successfully.
        public var successConditional: LexModelsV2ClientTypes.ConditionalSpecification?
        /// Specifics the next step the bot runs after the dialog code hook finishes successfully.
        public var successNextStep: LexModelsV2ClientTypes.DialogState?
        /// Specifies a list of message groups that Amazon Lex uses to respond the user input.
        public var successResponse: LexModelsV2ClientTypes.ResponseSpecification?
        /// A list of conditional branches to evaluate if the code hook times out.
        public var timeoutConditional: LexModelsV2ClientTypes.ConditionalSpecification?
        /// Specifies the next step that the bot runs when the code hook times out.
        public var timeoutNextStep: LexModelsV2ClientTypes.DialogState?
        /// Specifies a list of message groups that Amazon Lex uses to respond the user input.
        public var timeoutResponse: LexModelsV2ClientTypes.ResponseSpecification?

        public init(
            failureConditional: LexModelsV2ClientTypes.ConditionalSpecification? = nil,
            failureNextStep: LexModelsV2ClientTypes.DialogState? = nil,
            failureResponse: LexModelsV2ClientTypes.ResponseSpecification? = nil,
            successConditional: LexModelsV2ClientTypes.ConditionalSpecification? = nil,
            successNextStep: LexModelsV2ClientTypes.DialogState? = nil,
            successResponse: LexModelsV2ClientTypes.ResponseSpecification? = nil,
            timeoutConditional: LexModelsV2ClientTypes.ConditionalSpecification? = nil,
            timeoutNextStep: LexModelsV2ClientTypes.DialogState? = nil,
            timeoutResponse: LexModelsV2ClientTypes.ResponseSpecification? = nil
        )
        {
            self.failureConditional = failureConditional
            self.failureNextStep = failureNextStep
            self.failureResponse = failureResponse
            self.successConditional = successConditional
            self.successNextStep = successNextStep
            self.successResponse = successResponse
            self.timeoutConditional = timeoutConditional
            self.timeoutNextStep = timeoutNextStep
            self.timeoutResponse = timeoutResponse
        }
    }

}

extension LexModelsV2ClientTypes {
    /// Provides a setting that determines whether the post-fulfillment response is sent to the user. For more information, see [https://docs.aws.amazon.com/lexv2/latest/dg/streaming-progress.html#progress-complete](https://docs.aws.amazon.com/lexv2/latest/dg/streaming-progress.html#progress-complete)
    public struct PostFulfillmentStatusSpecification {
        /// A list of conditional branches to evaluate after the fulfillment code hook throws an exception or returns with the State field of the Intent object set to Failed.
        public var failureConditional: LexModelsV2ClientTypes.ConditionalSpecification?
        /// Specifies the next step the bot runs after the fulfillment code hook throws an exception or returns with the State field of the Intent object set to Failed.
        public var failureNextStep: LexModelsV2ClientTypes.DialogState?
        /// Specifies a list of message groups that Amazon Lex uses to respond the user input.
        public var failureResponse: LexModelsV2ClientTypes.ResponseSpecification?
        /// A list of conditional branches to evaluate after the fulfillment code hook finishes successfully.
        public var successConditional: LexModelsV2ClientTypes.ConditionalSpecification?
        /// Specifies the next step in the conversation that Amazon Lex invokes when the fulfillment code hook completes successfully.
        public var successNextStep: LexModelsV2ClientTypes.DialogState?
        /// Specifies a list of message groups that Amazon Lex uses to respond the user input.
        public var successResponse: LexModelsV2ClientTypes.ResponseSpecification?
        /// A list of conditional branches to evaluate if the fulfillment code hook times out.
        public var timeoutConditional: LexModelsV2ClientTypes.ConditionalSpecification?
        /// Specifies the next step that the bot runs when the fulfillment code hook times out.
        public var timeoutNextStep: LexModelsV2ClientTypes.DialogState?
        /// Specifies a list of message groups that Amazon Lex uses to respond the user input.
        public var timeoutResponse: LexModelsV2ClientTypes.ResponseSpecification?

        public init(
            failureConditional: LexModelsV2ClientTypes.ConditionalSpecification? = nil,
            failureNextStep: LexModelsV2ClientTypes.DialogState? = nil,
            failureResponse: LexModelsV2ClientTypes.ResponseSpecification? = nil,
            successConditional: LexModelsV2ClientTypes.ConditionalSpecification? = nil,
            successNextStep: LexModelsV2ClientTypes.DialogState? = nil,
            successResponse: LexModelsV2ClientTypes.ResponseSpecification? = nil,
            timeoutConditional: LexModelsV2ClientTypes.ConditionalSpecification? = nil,
            timeoutNextStep: LexModelsV2ClientTypes.DialogState? = nil,
            timeoutResponse: LexModelsV2ClientTypes.ResponseSpecification? = nil
        )
        {
            self.failureConditional = failureConditional
            self.failureNextStep = failureNextStep
            self.failureResponse = failureResponse
            self.successConditional = successConditional
            self.successNextStep = successNextStep
            self.successResponse = successResponse
            self.timeoutConditional = timeoutConditional
            self.timeoutNextStep = timeoutNextStep
            self.timeoutResponse = timeoutResponse
        }
    }

}

extension LexModelsV2ClientTypes {
    /// Settings that specify the dialog code hook that is called by Amazon Lex at a step of the conversation.
    public struct DialogCodeHookInvocationSetting {
        /// Determines whether a dialog code hook is used when the intent is activated.
        /// This member is required.
        public var active: Swift.Bool?
        /// Indicates whether a Lambda function should be invoked for the dialog.
        /// This member is required.
        public var enableCodeHookInvocation: Swift.Bool?
        /// A label that indicates the dialog step from which the dialog code hook is happening.
        public var invocationLabel: Swift.String?
        /// Contains the responses and actions that Amazon Lex takes after the Lambda function is complete.
        /// This member is required.
        public var postCodeHookSpecification: LexModelsV2ClientTypes.PostDialogCodeHookInvocationSpecification?

        public init(
            active: Swift.Bool? = nil,
            enableCodeHookInvocation: Swift.Bool? = nil,
            invocationLabel: Swift.String? = nil,
            postCodeHookSpecification: LexModelsV2ClientTypes.PostDialogCodeHookInvocationSpecification? = nil
        )
        {
            self.active = active
            self.enableCodeHookInvocation = enableCodeHookInvocation
            self.invocationLabel = invocationLabel
            self.postCodeHookSpecification = postCodeHookSpecification
        }
    }

}

extension LexModelsV2ClientTypes {
    /// Determines if a Lambda function should be invoked for a specific intent.
    public struct FulfillmentCodeHookSettings {
        /// Determines whether the fulfillment code hook is used. When active is false, the code hook doesn't run.
        public var active: Swift.Bool?
        /// Indicates whether a Lambda function should be invoked to fulfill a specific intent.
        /// This member is required.
        public var enabled: Swift.Bool
        /// Provides settings for update messages sent to the user for long-running Lambda fulfillment functions. Fulfillment updates can be used only with streaming conversations.
        public var fulfillmentUpdatesSpecification: LexModelsV2ClientTypes.FulfillmentUpdatesSpecification?
        /// Provides settings for messages sent to the user for after the Lambda fulfillment function completes. Post-fulfillment messages can be sent for both streaming and non-streaming conversations.
        public var postFulfillmentStatusSpecification: LexModelsV2ClientTypes.PostFulfillmentStatusSpecification?

        public init(
            active: Swift.Bool? = nil,
            enabled: Swift.Bool = false,
            fulfillmentUpdatesSpecification: LexModelsV2ClientTypes.FulfillmentUpdatesSpecification? = nil,
            postFulfillmentStatusSpecification: LexModelsV2ClientTypes.PostFulfillmentStatusSpecification? = nil
        )
        {
            self.active = active
            self.enabled = enabled
            self.fulfillmentUpdatesSpecification = fulfillmentUpdatesSpecification
            self.postFulfillmentStatusSpecification = postFulfillmentStatusSpecification
        }
    }

}

extension LexModelsV2ClientTypes {
    /// Configuration setting for a response sent to the user before Amazon Lex starts eliciting slots.
    public struct InitialResponseSetting {
        /// Settings that specify the dialog code hook that is called by Amazon Lex at a step of the conversation.
        public var codeHook: LexModelsV2ClientTypes.DialogCodeHookInvocationSetting?
        /// Provides a list of conditional branches. Branches are evaluated in the order that they are entered in the list. The first branch with a condition that evaluates to true is executed. The last branch in the list is the default branch. The default branch should not have any condition expression. The default branch is executed if no other branch has a matching condition.
        public var conditional: LexModelsV2ClientTypes.ConditionalSpecification?
        /// Specifies a list of message groups that Amazon Lex uses to respond the user input.
        public var initialResponse: LexModelsV2ClientTypes.ResponseSpecification?
        /// The next step in the conversation.
        public var nextStep: LexModelsV2ClientTypes.DialogState?

        public init(
            codeHook: LexModelsV2ClientTypes.DialogCodeHookInvocationSetting? = nil,
            conditional: LexModelsV2ClientTypes.ConditionalSpecification? = nil,
            initialResponse: LexModelsV2ClientTypes.ResponseSpecification? = nil,
            nextStep: LexModelsV2ClientTypes.DialogState? = nil
        )
        {
            self.codeHook = codeHook
            self.conditional = conditional
            self.initialResponse = initialResponse
            self.nextStep = nextStep
        }
    }

}

extension LexModelsV2ClientTypes {
    /// Settings used when Amazon Lex successfully captures a slot value from a user.
    public struct SlotCaptureSetting {
        /// A list of conditional branches to evaluate after the slot value is captured.
        public var captureConditional: LexModelsV2ClientTypes.ConditionalSpecification?
        /// Specifies the next step that the bot runs when the slot value is captured before the code hook times out.
        public var captureNextStep: LexModelsV2ClientTypes.DialogState?
        /// Specifies a list of message groups that Amazon Lex uses to respond the user input.
        public var captureResponse: LexModelsV2ClientTypes.ResponseSpecification?
        /// Code hook called after Amazon Lex successfully captures a slot value.
        public var codeHook: LexModelsV2ClientTypes.DialogCodeHookInvocationSetting?
        /// Code hook called when Amazon Lex doesn't capture a slot value.
        public var elicitationCodeHook: LexModelsV2ClientTypes.ElicitationCodeHookInvocationSetting?
        /// A list of conditional branches to evaluate when the slot value isn't captured.
        public var failureConditional: LexModelsV2ClientTypes.ConditionalSpecification?
        /// Specifies the next step that the bot runs when the slot value code is not recognized.
        public var failureNextStep: LexModelsV2ClientTypes.DialogState?
        /// Specifies a list of message groups that Amazon Lex uses to respond the user input.
        public var failureResponse: LexModelsV2ClientTypes.ResponseSpecification?

        public init(
            captureConditional: LexModelsV2ClientTypes.ConditionalSpecification? = nil,
            captureNextStep: LexModelsV2ClientTypes.DialogState? = nil,
            captureResponse: LexModelsV2ClientTypes.ResponseSpecification? = nil,
            codeHook: LexModelsV2ClientTypes.DialogCodeHookInvocationSetting? = nil,
            elicitationCodeHook: LexModelsV2ClientTypes.ElicitationCodeHookInvocationSetting? = nil,
            failureConditional: LexModelsV2ClientTypes.ConditionalSpecification? = nil,
            failureNextStep: LexModelsV2ClientTypes.DialogState? = nil,
            failureResponse: LexModelsV2ClientTypes.ResponseSpecification? = nil
        )
        {
            self.captureConditional = captureConditional
            self.captureNextStep = captureNextStep
            self.captureResponse = captureResponse
            self.codeHook = codeHook
            self.elicitationCodeHook = elicitationCodeHook
            self.failureConditional = failureConditional
            self.failureNextStep = failureNextStep
            self.failureResponse = failureResponse
        }
    }

}

extension LexModelsV2ClientTypes {
    /// Specifies the elicitation setting details eliciting a slot.
    public struct SlotValueElicitationSetting {
        /// A list of default values for a slot. Default values are used when Amazon Lex hasn't determined a value for a slot. You can specify default values from context variables, session attributes, and defined values.
        public var defaultValueSpecification: LexModelsV2ClientTypes.SlotDefaultValueSpecification?
        /// The prompt that Amazon Lex uses to elicit the slot value from the user.
        public var promptSpecification: LexModelsV2ClientTypes.PromptSpecification?
        /// If you know a specific pattern that users might respond to an Amazon Lex request for a slot value, you can provide those utterances to improve accuracy. This is optional. In most cases, Amazon Lex is capable of understanding user utterances.
        public var sampleUtterances: [LexModelsV2ClientTypes.SampleUtterance]?
        /// Specifies the settings that Amazon Lex uses when a slot value is successfully entered by a user.
        public var slotCaptureSetting: LexModelsV2ClientTypes.SlotCaptureSetting?
        /// Specifies whether the slot is required or optional.
        /// This member is required.
        public var slotConstraint: LexModelsV2ClientTypes.SlotConstraint?
        /// An object containing information about whether assisted slot resolution is turned on for the slot or not.
        public var slotResolutionSetting: LexModelsV2ClientTypes.SlotResolutionSetting?
        /// Specifies the prompts that Amazon Lex uses while a bot is waiting for customer input.
        public var waitAndContinueSpecification: LexModelsV2ClientTypes.WaitAndContinueSpecification?

        public init(
            defaultValueSpecification: LexModelsV2ClientTypes.SlotDefaultValueSpecification? = nil,
            promptSpecification: LexModelsV2ClientTypes.PromptSpecification? = nil,
            sampleUtterances: [LexModelsV2ClientTypes.SampleUtterance]? = nil,
            slotCaptureSetting: LexModelsV2ClientTypes.SlotCaptureSetting? = nil,
            slotConstraint: LexModelsV2ClientTypes.SlotConstraint? = nil,
            slotResolutionSetting: LexModelsV2ClientTypes.SlotResolutionSetting? = nil,
            waitAndContinueSpecification: LexModelsV2ClientTypes.WaitAndContinueSpecification? = nil
        )
        {
            self.defaultValueSpecification = defaultValueSpecification
            self.promptSpecification = promptSpecification
            self.sampleUtterances = sampleUtterances
            self.slotCaptureSetting = slotCaptureSetting
            self.slotConstraint = slotConstraint
            self.slotResolutionSetting = slotResolutionSetting
            self.waitAndContinueSpecification = waitAndContinueSpecification
        }
    }

}

extension LexModelsV2ClientTypes {
    /// Provides a prompt for making sure that the user is ready for the intent to be fulfilled.
    public struct IntentConfirmationSetting {
        /// Specifies whether the intent's confirmation is sent to the user. When this field is false, confirmation and declination responses aren't sent. If the active field isn't specified, the default is true.
        public var active: Swift.Bool?
        /// The DialogCodeHookInvocationSetting object associated with intent's confirmation step. The dialog code hook is triggered based on these invocation settings when the confirmation next step or declination next step or failure next step is InvokeDialogCodeHook.
        public var codeHook: LexModelsV2ClientTypes.DialogCodeHookInvocationSetting?
        /// A list of conditional branches to evaluate after the intent is closed.
        public var confirmationConditional: LexModelsV2ClientTypes.ConditionalSpecification?
        /// Specifies the next step that the bot executes when the customer confirms the intent.
        public var confirmationNextStep: LexModelsV2ClientTypes.DialogState?
        /// Specifies a list of message groups that Amazon Lex uses to respond the user input.
        public var confirmationResponse: LexModelsV2ClientTypes.ResponseSpecification?
        /// A list of conditional branches to evaluate after the intent is declined.
        public var declinationConditional: LexModelsV2ClientTypes.ConditionalSpecification?
        /// Specifies the next step that the bot executes when the customer declines the intent.
        public var declinationNextStep: LexModelsV2ClientTypes.DialogState?
        /// When the user answers "no" to the question defined in promptSpecification, Amazon Lex responds with this response to acknowledge that the intent was canceled.
        public var declinationResponse: LexModelsV2ClientTypes.ResponseSpecification?
        /// The DialogCodeHookInvocationSetting used when the code hook is invoked during confirmation prompt retries.
        public var elicitationCodeHook: LexModelsV2ClientTypes.ElicitationCodeHookInvocationSetting?
        /// Provides a list of conditional branches. Branches are evaluated in the order that they are entered in the list. The first branch with a condition that evaluates to true is executed. The last branch in the list is the default branch. The default branch should not have any condition expression. The default branch is executed if no other branch has a matching condition.
        public var failureConditional: LexModelsV2ClientTypes.ConditionalSpecification?
        /// The next step to take in the conversation if the confirmation step fails.
        public var failureNextStep: LexModelsV2ClientTypes.DialogState?
        /// Specifies a list of message groups that Amazon Lex uses to respond the user input.
        public var failureResponse: LexModelsV2ClientTypes.ResponseSpecification?
        /// Prompts the user to confirm the intent. This question should have a yes or no answer. Amazon Lex uses this prompt to ensure that the user acknowledges that the intent is ready for fulfillment. For example, with the OrderPizza intent, you might want to confirm that the order is correct before placing it. For other intents, such as intents that simply respond to user questions, you might not need to ask the user for confirmation before providing the information.
        /// This member is required.
        public var promptSpecification: LexModelsV2ClientTypes.PromptSpecification?

        public init(
            active: Swift.Bool? = nil,
            codeHook: LexModelsV2ClientTypes.DialogCodeHookInvocationSetting? = nil,
            confirmationConditional: LexModelsV2ClientTypes.ConditionalSpecification? = nil,
            confirmationNextStep: LexModelsV2ClientTypes.DialogState? = nil,
            confirmationResponse: LexModelsV2ClientTypes.ResponseSpecification? = nil,
            declinationConditional: LexModelsV2ClientTypes.ConditionalSpecification? = nil,
            declinationNextStep: LexModelsV2ClientTypes.DialogState? = nil,
            declinationResponse: LexModelsV2ClientTypes.ResponseSpecification? = nil,
            elicitationCodeHook: LexModelsV2ClientTypes.ElicitationCodeHookInvocationSetting? = nil,
            failureConditional: LexModelsV2ClientTypes.ConditionalSpecification? = nil,
            failureNextStep: LexModelsV2ClientTypes.DialogState? = nil,
            failureResponse: LexModelsV2ClientTypes.ResponseSpecification? = nil,
            promptSpecification: LexModelsV2ClientTypes.PromptSpecification? = nil
        )
        {
            self.active = active
            self.codeHook = codeHook
            self.confirmationConditional = confirmationConditional
            self.confirmationNextStep = confirmationNextStep
            self.confirmationResponse = confirmationResponse
            self.declinationConditional = declinationConditional
            self.declinationNextStep = declinationNextStep
            self.declinationResponse = declinationResponse
            self.elicitationCodeHook = elicitationCodeHook
            self.failureConditional = failureConditional
            self.failureNextStep = failureNextStep
            self.failureResponse = failureResponse
            self.promptSpecification = promptSpecification
        }
    }

}

public struct CreateSlotInput {
    /// The identifier of the bot associated with the slot.
    /// This member is required.
    public var botId: Swift.String?
    /// The version of the bot associated with the slot.
    /// This member is required.
    public var botVersion: Swift.String?
    /// A description of the slot. Use this to help identify the slot in lists.
    public var description: Swift.String?
    /// The identifier of the intent that contains the slot.
    /// This member is required.
    public var intentId: Swift.String?
    /// The identifier of the language and locale that the slot will be used in. The string must match one of the supported locales. All of the bots, intents, slot types used by the slot must have the same locale. For more information, see [Supported languages](https://docs.aws.amazon.com/lexv2/latest/dg/how-languages.html).
    /// This member is required.
    public var localeId: Swift.String?
    /// Indicates whether the slot returns multiple values in one response. Multi-value slots are only available in the en-US locale. If you set this value to true in any other locale, Amazon Lex throws a ValidationException. If the multipleValuesSetting is not set, the default value is false.
    public var multipleValuesSetting: LexModelsV2ClientTypes.MultipleValuesSetting?
    /// Determines how slot values are used in Amazon CloudWatch logs. If the value of the obfuscationSetting parameter is DefaultObfuscation, slot values are obfuscated in the log output. If the value is None, the actual value is present in the log output. The default is to obfuscate values in the CloudWatch logs.
    public var obfuscationSetting: LexModelsV2ClientTypes.ObfuscationSetting?
    /// The name of the slot. Slot names must be unique within the bot that contains the slot.
    /// This member is required.
    public var slotName: Swift.String?
    /// The unique identifier for the slot type associated with this slot. The slot type determines the values that can be entered into the slot.
    public var slotTypeId: Swift.String?
    /// Specifications for the constituent sub slots and the expression for the composite slot.
    public var subSlotSetting: LexModelsV2ClientTypes.SubSlotSetting?
    /// Specifies prompts that Amazon Lex sends to the user to elicit a response that provides the value for the slot.
    /// This member is required.
    public var valueElicitationSetting: LexModelsV2ClientTypes.SlotValueElicitationSetting?

    public init(
        botId: Swift.String? = nil,
        botVersion: Swift.String? = nil,
        description: Swift.String? = nil,
        intentId: Swift.String? = nil,
        localeId: Swift.String? = nil,
        multipleValuesSetting: LexModelsV2ClientTypes.MultipleValuesSetting? = nil,
        obfuscationSetting: LexModelsV2ClientTypes.ObfuscationSetting? = nil,
        slotName: Swift.String? = nil,
        slotTypeId: Swift.String? = nil,
        subSlotSetting: LexModelsV2ClientTypes.SubSlotSetting? = nil,
        valueElicitationSetting: LexModelsV2ClientTypes.SlotValueElicitationSetting? = nil
    )
    {
        self.botId = botId
        self.botVersion = botVersion
        self.description = description
        self.intentId = intentId
        self.localeId = localeId
        self.multipleValuesSetting = multipleValuesSetting
        self.obfuscationSetting = obfuscationSetting
        self.slotName = slotName
        self.slotTypeId = slotTypeId
        self.subSlotSetting = subSlotSetting
        self.valueElicitationSetting = valueElicitationSetting
    }
}

public struct CreateSlotOutput {
    /// The unique identifier of the bot associated with the slot.
    public var botId: Swift.String?
    /// The version of the bot associated with the slot.
    public var botVersion: Swift.String?
    /// The timestamp of the date and time that the slot was created.
    public var creationDateTime: Foundation.Date?
    /// The description associated with the slot.
    public var description: Swift.String?
    /// The unique identifier of the intent associated with the slot.
    public var intentId: Swift.String?
    /// The language and local specified for the slot.
    public var localeId: Swift.String?
    /// Indicates whether the slot returns multiple values in one response.
    public var multipleValuesSetting: LexModelsV2ClientTypes.MultipleValuesSetting?
    /// Indicates whether the slot is configured to obfuscate values in Amazon CloudWatch logs.
    public var obfuscationSetting: LexModelsV2ClientTypes.ObfuscationSetting?
    /// The unique identifier associated with the slot. Use this to identify the slot when you update or delete it.
    public var slotId: Swift.String?
    /// The name specified for the slot.
    public var slotName: Swift.String?
    /// The unique identifier of the slot type associated with this slot.
    public var slotTypeId: Swift.String?
    /// Specifications for the constituent sub slots and the expression for the composite slot.
    public var subSlotSetting: LexModelsV2ClientTypes.SubSlotSetting?
    /// The value elicitation settings specified for the slot.
    public var valueElicitationSetting: LexModelsV2ClientTypes.SlotValueElicitationSetting?

    public init(
        botId: Swift.String? = nil,
        botVersion: Swift.String? = nil,
        creationDateTime: Foundation.Date? = nil,
        description: Swift.String? = nil,
        intentId: Swift.String? = nil,
        localeId: Swift.String? = nil,
        multipleValuesSetting: LexModelsV2ClientTypes.MultipleValuesSetting? = nil,
        obfuscationSetting: LexModelsV2ClientTypes.ObfuscationSetting? = nil,
        slotId: Swift.String? = nil,
        slotName: Swift.String? = nil,
        slotTypeId: Swift.String? = nil,
        subSlotSetting: LexModelsV2ClientTypes.SubSlotSetting? = nil,
        valueElicitationSetting: LexModelsV2ClientTypes.SlotValueElicitationSetting? = nil
    )
    {
        self.botId = botId
        self.botVersion = botVersion
        self.creationDateTime = creationDateTime
        self.description = description
        self.intentId = intentId
        self.localeId = localeId
        self.multipleValuesSetting = multipleValuesSetting
        self.obfuscationSetting = obfuscationSetting
        self.slotId = slotId
        self.slotName = slotName
        self.slotTypeId = slotTypeId
        self.subSlotSetting = subSlotSetting
        self.valueElicitationSetting = valueElicitationSetting
    }
}

public struct DescribeSlotOutput {
    /// The identifier of the bot associated with the slot.
    public var botId: Swift.String?
    /// The version of the bot associated with the slot.
    public var botVersion: Swift.String?
    /// A timestamp of the date and time that the slot was created.
    public var creationDateTime: Foundation.Date?
    /// The description specified for the slot.
    public var description: Swift.String?
    /// The identifier of the intent associated with the slot.
    public var intentId: Swift.String?
    /// A timestamp of the date and time that the slot was last updated.
    public var lastUpdatedDateTime: Foundation.Date?
    /// The language and locale specified for the slot.
    public var localeId: Swift.String?
    /// Indicates whether the slot accepts multiple values in a single utterance. If the multipleValuesSetting is not set, the default value is false.
    public var multipleValuesSetting: LexModelsV2ClientTypes.MultipleValuesSetting?
    /// Whether slot values are shown in Amazon CloudWatch logs. If the value is None, the actual value of the slot is shown in logs.
    public var obfuscationSetting: LexModelsV2ClientTypes.ObfuscationSetting?
    /// The unique identifier generated for the slot.
    public var slotId: Swift.String?
    /// The name specified for the slot.
    public var slotName: Swift.String?
    /// The identifier of the slot type that determines the values entered into the slot.
    public var slotTypeId: Swift.String?
    /// Specifications for the constituent sub slots and the expression for the composite slot.
    public var subSlotSetting: LexModelsV2ClientTypes.SubSlotSetting?
    /// Prompts that Amazon Lex uses to elicit a value for the slot.
    public var valueElicitationSetting: LexModelsV2ClientTypes.SlotValueElicitationSetting?

    public init(
        botId: Swift.String? = nil,
        botVersion: Swift.String? = nil,
        creationDateTime: Foundation.Date? = nil,
        description: Swift.String? = nil,
        intentId: Swift.String? = nil,
        lastUpdatedDateTime: Foundation.Date? = nil,
        localeId: Swift.String? = nil,
        multipleValuesSetting: LexModelsV2ClientTypes.MultipleValuesSetting? = nil,
        obfuscationSetting: LexModelsV2ClientTypes.ObfuscationSetting? = nil,
        slotId: Swift.String? = nil,
        slotName: Swift.String? = nil,
        slotTypeId: Swift.String? = nil,
        subSlotSetting: LexModelsV2ClientTypes.SubSlotSetting? = nil,
        valueElicitationSetting: LexModelsV2ClientTypes.SlotValueElicitationSetting? = nil
    )
    {
        self.botId = botId
        self.botVersion = botVersion
        self.creationDateTime = creationDateTime
        self.description = description
        self.intentId = intentId
        self.lastUpdatedDateTime = lastUpdatedDateTime
        self.localeId = localeId
        self.multipleValuesSetting = multipleValuesSetting
        self.obfuscationSetting = obfuscationSetting
        self.slotId = slotId
        self.slotName = slotName
        self.slotTypeId = slotTypeId
        self.subSlotSetting = subSlotSetting
        self.valueElicitationSetting = valueElicitationSetting
    }
}

public struct UpdateSlotInput {
    /// The unique identifier of the bot that contains the slot.
    /// This member is required.
    public var botId: Swift.String?
    /// The version of the bot that contains the slot. Must always be DRAFT.
    /// This member is required.
    public var botVersion: Swift.String?
    /// The new description for the slot.
    public var description: Swift.String?
    /// The identifier of the intent that contains the slot.
    /// This member is required.
    public var intentId: Swift.String?
    /// The identifier of the language and locale that contains the slot. The string must match one of the supported locales. For more information, see [Supported languages](https://docs.aws.amazon.com/lexv2/latest/dg/how-languages.html).
    /// This member is required.
    public var localeId: Swift.String?
    /// Determines whether the slot accepts multiple values in one response. Multiple value slots are only available in the en-US locale. If you set this value to true in any other locale, Amazon Lex throws a ValidationException. If the multipleValuesSetting is not set, the default value is false.
    public var multipleValuesSetting: LexModelsV2ClientTypes.MultipleValuesSetting?
    /// New settings that determine how slot values are formatted in Amazon CloudWatch logs.
    public var obfuscationSetting: LexModelsV2ClientTypes.ObfuscationSetting?
    /// The unique identifier for the slot to update.
    /// This member is required.
    public var slotId: Swift.String?
    /// The new name for the slot.
    /// This member is required.
    public var slotName: Swift.String?
    /// The unique identifier of the new slot type to associate with this slot.
    public var slotTypeId: Swift.String?
    /// Specifications for the constituent sub slots and the expression for the composite slot.
    public var subSlotSetting: LexModelsV2ClientTypes.SubSlotSetting?
    /// A new set of prompts that Amazon Lex sends to the user to elicit a response the provides a value for the slot.
    /// This member is required.
    public var valueElicitationSetting: LexModelsV2ClientTypes.SlotValueElicitationSetting?

    public init(
        botId: Swift.String? = nil,
        botVersion: Swift.String? = nil,
        description: Swift.String? = nil,
        intentId: Swift.String? = nil,
        localeId: Swift.String? = nil,
        multipleValuesSetting: LexModelsV2ClientTypes.MultipleValuesSetting? = nil,
        obfuscationSetting: LexModelsV2ClientTypes.ObfuscationSetting? = nil,
        slotId: Swift.String? = nil,
        slotName: Swift.String? = nil,
        slotTypeId: Swift.String? = nil,
        subSlotSetting: LexModelsV2ClientTypes.SubSlotSetting? = nil,
        valueElicitationSetting: LexModelsV2ClientTypes.SlotValueElicitationSetting? = nil
    )
    {
        self.botId = botId
        self.botVersion = botVersion
        self.description = description
        self.intentId = intentId
        self.localeId = localeId
        self.multipleValuesSetting = multipleValuesSetting
        self.obfuscationSetting = obfuscationSetting
        self.slotId = slotId
        self.slotName = slotName
        self.slotTypeId = slotTypeId
        self.subSlotSetting = subSlotSetting
        self.valueElicitationSetting = valueElicitationSetting
    }
}

public struct UpdateSlotOutput {
    /// The identifier of the bot that contains the slot.
    public var botId: Swift.String?
    /// The version of the bot that contains the slot. Will always be DRAFT.
    public var botVersion: Swift.String?
    /// The timestamp of the date and time that the slot was created.
    public var creationDateTime: Foundation.Date?
    /// The updated description of the bot.
    public var description: Swift.String?
    /// The intent that contains the slot.
    public var intentId: Swift.String?
    /// The timestamp of the date and time that the slot was last updated.
    public var lastUpdatedDateTime: Foundation.Date?
    /// The locale that contains the slot.
    public var localeId: Swift.String?
    /// Indicates whether the slot accepts multiple values in one response.
    public var multipleValuesSetting: LexModelsV2ClientTypes.MultipleValuesSetting?
    /// The updated setting that determines whether the slot value is obfuscated in the Amazon CloudWatch logs.
    public var obfuscationSetting: LexModelsV2ClientTypes.ObfuscationSetting?
    /// The unique identifier of the slot that was updated.
    public var slotId: Swift.String?
    /// The updated name of the slot.
    public var slotName: Swift.String?
    /// The updated identifier of the slot type that provides values for the slot.
    public var slotTypeId: Swift.String?
    /// Specifications for the constituent sub slots and the expression for the composite slot.
    public var subSlotSetting: LexModelsV2ClientTypes.SubSlotSetting?
    /// The updated prompts that Amazon Lex sends to the user to elicit a response that provides a value for the slot.
    public var valueElicitationSetting: LexModelsV2ClientTypes.SlotValueElicitationSetting?

    public init(
        botId: Swift.String? = nil,
        botVersion: Swift.String? = nil,
        creationDateTime: Foundation.Date? = nil,
        description: Swift.String? = nil,
        intentId: Swift.String? = nil,
        lastUpdatedDateTime: Foundation.Date? = nil,
        localeId: Swift.String? = nil,
        multipleValuesSetting: LexModelsV2ClientTypes.MultipleValuesSetting? = nil,
        obfuscationSetting: LexModelsV2ClientTypes.ObfuscationSetting? = nil,
        slotId: Swift.String? = nil,
        slotName: Swift.String? = nil,
        slotTypeId: Swift.String? = nil,
        subSlotSetting: LexModelsV2ClientTypes.SubSlotSetting? = nil,
        valueElicitationSetting: LexModelsV2ClientTypes.SlotValueElicitationSetting? = nil
    )
    {
        self.botId = botId
        self.botVersion = botVersion
        self.creationDateTime = creationDateTime
        self.description = description
        self.intentId = intentId
        self.lastUpdatedDateTime = lastUpdatedDateTime
        self.localeId = localeId
        self.multipleValuesSetting = multipleValuesSetting
        self.obfuscationSetting = obfuscationSetting
        self.slotId = slotId
        self.slotName = slotName
        self.slotTypeId = slotTypeId
        self.subSlotSetting = subSlotSetting
        self.valueElicitationSetting = valueElicitationSetting
    }
}

public struct CreateIntentInput {
    /// The identifier of the bot associated with this intent.
    /// This member is required.
    public var botId: Swift.String?
    /// The version of the bot associated with this intent.
    /// This member is required.
    public var botVersion: Swift.String?
    /// A description of the intent. Use the description to help identify the intent in lists.
    public var description: Swift.String?
    /// Specifies that Amazon Lex invokes the alias Lambda function for each user input. You can invoke this Lambda function to personalize user interaction. For example, suppose that your bot determines that the user's name is John. You Lambda function might retrieve John's information from a backend database and prepopulate some of the values. For example, if you find that John is gluten intolerant, you might set the corresponding intent slot, glutenIntolerant to true. You might find John's phone number and set the corresponding session attribute.
    public var dialogCodeHook: LexModelsV2ClientTypes.DialogCodeHookSettings?
    /// Specifies that Amazon Lex invokes the alias Lambda function when the intent is ready for fulfillment. You can invoke this function to complete the bot's transaction with the user. For example, in a pizza ordering bot, the Lambda function can look up the closest pizza restaurant to the customer's location and then place an order on the customer's behalf.
    public var fulfillmentCodeHook: LexModelsV2ClientTypes.FulfillmentCodeHookSettings?
    /// Configuration settings for the response that is sent to the user at the beginning of a conversation, before eliciting slot values.
    public var initialResponseSetting: LexModelsV2ClientTypes.InitialResponseSetting?
    /// A list of contexts that must be active for this intent to be considered by Amazon Lex. When an intent has an input context list, Amazon Lex only considers using the intent in an interaction with the user when the specified contexts are included in the active context list for the session. If the contexts are not active, then Amazon Lex will not use the intent. A context can be automatically activated using the outputContexts property or it can be set at runtime. For example, if there are two intents with different input contexts that respond to the same utterances, only the intent with the active context will respond. An intent may have up to 5 input contexts. If an intent has multiple input contexts, all of the contexts must be active to consider the intent.
    public var inputContexts: [LexModelsV2ClientTypes.InputContext]?
    /// Sets the response that Amazon Lex sends to the user when the intent is closed.
    public var intentClosingSetting: LexModelsV2ClientTypes.IntentClosingSetting?
    /// Provides prompts that Amazon Lex sends to the user to confirm the completion of an intent. If the user answers "no," the settings contain a statement that is sent to the user to end the intent.
    public var intentConfirmationSetting: LexModelsV2ClientTypes.IntentConfirmationSetting?
    /// The name of the intent. Intent names must be unique in the locale that contains the intent and cannot match the name of any built-in intent.
    /// This member is required.
    public var intentName: Swift.String?
    /// Configuration information required to use the AMAZON.KendraSearchIntent intent to connect to an Amazon Kendra index. The AMAZON.KendraSearchIntent intent is called when Amazon Lex can't determine another intent to invoke.
    public var kendraConfiguration: LexModelsV2ClientTypes.KendraConfiguration?
    /// The identifier of the language and locale where this intent is used. All of the bots, slot types, and slots used by the intent must have the same locale. For more information, see [Supported languages](https://docs.aws.amazon.com/lexv2/latest/dg/how-languages.html).
    /// This member is required.
    public var localeId: Swift.String?
    /// A lists of contexts that the intent activates when it is fulfilled. You can use an output context to indicate the intents that Amazon Lex should consider for the next turn of the conversation with a customer. When you use the outputContextsList property, all of the contexts specified in the list are activated when the intent is fulfilled. You can set up to 10 output contexts. You can also set the number of conversation turns that the context should be active, or the length of time that the context should be active.
    public var outputContexts: [LexModelsV2ClientTypes.OutputContext]?
    /// A unique identifier for the built-in intent to base this intent on.
    public var parentIntentSignature: Swift.String?
    /// Specifies the configuration of the built-in Amazon.QnAIntent. The AMAZON.QnAIntent intent is called when Amazon Lex can't determine another intent to invoke. If you specify this field, you can't specify the kendraConfiguration field.
    public var qnAIntentConfiguration: LexModelsV2ClientTypes.QnAIntentConfiguration?
    /// An array of strings that a user might say to signal the intent. For example, "I want a pizza", or "I want a {PizzaSize} pizza". In an utterance, slot names are enclosed in curly braces ("{", "}") to indicate where they should be displayed in the utterance shown to the user..
    public var sampleUtterances: [LexModelsV2ClientTypes.SampleUtterance]?

    public init(
        botId: Swift.String? = nil,
        botVersion: Swift.String? = nil,
        description: Swift.String? = nil,
        dialogCodeHook: LexModelsV2ClientTypes.DialogCodeHookSettings? = nil,
        fulfillmentCodeHook: LexModelsV2ClientTypes.FulfillmentCodeHookSettings? = nil,
        initialResponseSetting: LexModelsV2ClientTypes.InitialResponseSetting? = nil,
        inputContexts: [LexModelsV2ClientTypes.InputContext]? = nil,
        intentClosingSetting: LexModelsV2ClientTypes.IntentClosingSetting? = nil,
        intentConfirmationSetting: LexModelsV2ClientTypes.IntentConfirmationSetting? = nil,
        intentName: Swift.String? = nil,
        kendraConfiguration: LexModelsV2ClientTypes.KendraConfiguration? = nil,
        localeId: Swift.String? = nil,
        outputContexts: [LexModelsV2ClientTypes.OutputContext]? = nil,
        parentIntentSignature: Swift.String? = nil,
        qnAIntentConfiguration: LexModelsV2ClientTypes.QnAIntentConfiguration? = nil,
        sampleUtterances: [LexModelsV2ClientTypes.SampleUtterance]? = nil
    )
    {
        self.botId = botId
        self.botVersion = botVersion
        self.description = description
        self.dialogCodeHook = dialogCodeHook
        self.fulfillmentCodeHook = fulfillmentCodeHook
        self.initialResponseSetting = initialResponseSetting
        self.inputContexts = inputContexts
        self.intentClosingSetting = intentClosingSetting
        self.intentConfirmationSetting = intentConfirmationSetting
        self.intentName = intentName
        self.kendraConfiguration = kendraConfiguration
        self.localeId = localeId
        self.outputContexts = outputContexts
        self.parentIntentSignature = parentIntentSignature
        self.qnAIntentConfiguration = qnAIntentConfiguration
        self.sampleUtterances = sampleUtterances
    }
}

public struct CreateIntentOutput {
    /// The identifier of the bot associated with the intent.
    public var botId: Swift.String?
    /// The version of the bot associated with the intent.
    public var botVersion: Swift.String?
    /// A timestamp of the date and time that the intent was created.
    public var creationDateTime: Foundation.Date?
    /// The description specified for the intent.
    public var description: Swift.String?
    /// The dialog Lambda function specified for the intent.
    public var dialogCodeHook: LexModelsV2ClientTypes.DialogCodeHookSettings?
    /// The fulfillment Lambda function specified for the intent.
    public var fulfillmentCodeHook: LexModelsV2ClientTypes.FulfillmentCodeHookSettings?
    /// Configuration settings for the response that is sent to the user at the beginning of a conversation, before eliciting slot values.
    public var initialResponseSetting: LexModelsV2ClientTypes.InitialResponseSetting?
    /// The list of input contexts specified for the intent.
    public var inputContexts: [LexModelsV2ClientTypes.InputContext]?
    /// The closing setting specified for the intent.
    public var intentClosingSetting: LexModelsV2ClientTypes.IntentClosingSetting?
    /// The confirmation setting specified for the intent.
    public var intentConfirmationSetting: LexModelsV2ClientTypes.IntentConfirmationSetting?
    /// A unique identifier for the intent.
    public var intentId: Swift.String?
    /// The name specified for the intent.
    public var intentName: Swift.String?
    /// Configuration for searching a Amazon Kendra index specified for the intent.
    public var kendraConfiguration: LexModelsV2ClientTypes.KendraConfiguration?
    /// The locale that the intent is specified to use.
    public var localeId: Swift.String?
    /// The list of output contexts specified for the intent.
    public var outputContexts: [LexModelsV2ClientTypes.OutputContext]?
    /// The signature of the parent intent specified for the intent.
    public var parentIntentSignature: Swift.String?
    /// Details about the the configuration of the built-in Amazon.QnAIntent.
    public var qnAIntentConfiguration: LexModelsV2ClientTypes.QnAIntentConfiguration?
    /// The sample utterances specified for the intent.
    public var sampleUtterances: [LexModelsV2ClientTypes.SampleUtterance]?

    public init(
        botId: Swift.String? = nil,
        botVersion: Swift.String? = nil,
        creationDateTime: Foundation.Date? = nil,
        description: Swift.String? = nil,
        dialogCodeHook: LexModelsV2ClientTypes.DialogCodeHookSettings? = nil,
        fulfillmentCodeHook: LexModelsV2ClientTypes.FulfillmentCodeHookSettings? = nil,
        initialResponseSetting: LexModelsV2ClientTypes.InitialResponseSetting? = nil,
        inputContexts: [LexModelsV2ClientTypes.InputContext]? = nil,
        intentClosingSetting: LexModelsV2ClientTypes.IntentClosingSetting? = nil,
        intentConfirmationSetting: LexModelsV2ClientTypes.IntentConfirmationSetting? = nil,
        intentId: Swift.String? = nil,
        intentName: Swift.String? = nil,
        kendraConfiguration: LexModelsV2ClientTypes.KendraConfiguration? = nil,
        localeId: Swift.String? = nil,
        outputContexts: [LexModelsV2ClientTypes.OutputContext]? = nil,
        parentIntentSignature: Swift.String? = nil,
        qnAIntentConfiguration: LexModelsV2ClientTypes.QnAIntentConfiguration? = nil,
        sampleUtterances: [LexModelsV2ClientTypes.SampleUtterance]? = nil
    )
    {
        self.botId = botId
        self.botVersion = botVersion
        self.creationDateTime = creationDateTime
        self.description = description
        self.dialogCodeHook = dialogCodeHook
        self.fulfillmentCodeHook = fulfillmentCodeHook
        self.initialResponseSetting = initialResponseSetting
        self.inputContexts = inputContexts
        self.intentClosingSetting = intentClosingSetting
        self.intentConfirmationSetting = intentConfirmationSetting
        self.intentId = intentId
        self.intentName = intentName
        self.kendraConfiguration = kendraConfiguration
        self.localeId = localeId
        self.outputContexts = outputContexts
        self.parentIntentSignature = parentIntentSignature
        self.qnAIntentConfiguration = qnAIntentConfiguration
        self.sampleUtterances = sampleUtterances
    }
}

public struct DescribeIntentOutput {
    /// The identifier of the bot associated with the intent.
    public var botId: Swift.String?
    /// The version of the bot associated with the intent.
    public var botVersion: Swift.String?
    /// A timestamp of the date and time that the intent was created.
    public var creationDateTime: Foundation.Date?
    /// The description of the intent.
    public var description: Swift.String?
    /// The Lambda function called during each turn of a conversation with the intent.
    public var dialogCodeHook: LexModelsV2ClientTypes.DialogCodeHookSettings?
    /// The Lambda function called when the intent is complete and ready for fulfillment.
    public var fulfillmentCodeHook: LexModelsV2ClientTypes.FulfillmentCodeHookSettings?
    /// Configuration setting for a response sent to the user before Amazon Lex starts eliciting slots.
    public var initialResponseSetting: LexModelsV2ClientTypes.InitialResponseSetting?
    /// A list of contexts that must be active for the intent to be considered for sending to the user.
    public var inputContexts: [LexModelsV2ClientTypes.InputContext]?
    /// The response that Amazon Lex sends to when the intent is closed.
    public var intentClosingSetting: LexModelsV2ClientTypes.IntentClosingSetting?
    /// Prompts that Amazon Lex sends to the user to confirm completion of an intent.
    public var intentConfirmationSetting: LexModelsV2ClientTypes.IntentConfirmationSetting?
    /// The unique identifier assigned to the intent when it was created.
    public var intentId: Swift.String?
    /// The name specified for the intent.
    public var intentName: Swift.String?
    /// Configuration information required to use the AMAZON.KendraSearchIntent intent.
    public var kendraConfiguration: LexModelsV2ClientTypes.KendraConfiguration?
    /// A timestamp of the date and time that the intent was last updated.
    public var lastUpdatedDateTime: Foundation.Date?
    /// The language and locale specified for the intent.
    public var localeId: Swift.String?
    /// A list of contexts that are activated when the intent is fulfilled.
    public var outputContexts: [LexModelsV2ClientTypes.OutputContext]?
    /// The identifier of the built-in intent that this intent is derived from, if any.
    public var parentIntentSignature: Swift.String?
    /// Details about the configuration of the built-in Amazon.QnAIntent.
    public var qnAIntentConfiguration: LexModelsV2ClientTypes.QnAIntentConfiguration?
    /// User utterances that trigger this intent.
    public var sampleUtterances: [LexModelsV2ClientTypes.SampleUtterance]?
    /// The list that determines the priority that slots should be elicited from the user.
    public var slotPriorities: [LexModelsV2ClientTypes.SlotPriority]?

    public init(
        botId: Swift.String? = nil,
        botVersion: Swift.String? = nil,
        creationDateTime: Foundation.Date? = nil,
        description: Swift.String? = nil,
        dialogCodeHook: LexModelsV2ClientTypes.DialogCodeHookSettings? = nil,
        fulfillmentCodeHook: LexModelsV2ClientTypes.FulfillmentCodeHookSettings? = nil,
        initialResponseSetting: LexModelsV2ClientTypes.InitialResponseSetting? = nil,
        inputContexts: [LexModelsV2ClientTypes.InputContext]? = nil,
        intentClosingSetting: LexModelsV2ClientTypes.IntentClosingSetting? = nil,
        intentConfirmationSetting: LexModelsV2ClientTypes.IntentConfirmationSetting? = nil,
        intentId: Swift.String? = nil,
        intentName: Swift.String? = nil,
        kendraConfiguration: LexModelsV2ClientTypes.KendraConfiguration? = nil,
        lastUpdatedDateTime: Foundation.Date? = nil,
        localeId: Swift.String? = nil,
        outputContexts: [LexModelsV2ClientTypes.OutputContext]? = nil,
        parentIntentSignature: Swift.String? = nil,
        qnAIntentConfiguration: LexModelsV2ClientTypes.QnAIntentConfiguration? = nil,
        sampleUtterances: [LexModelsV2ClientTypes.SampleUtterance]? = nil,
        slotPriorities: [LexModelsV2ClientTypes.SlotPriority]? = nil
    )
    {
        self.botId = botId
        self.botVersion = botVersion
        self.creationDateTime = creationDateTime
        self.description = description
        self.dialogCodeHook = dialogCodeHook
        self.fulfillmentCodeHook = fulfillmentCodeHook
        self.initialResponseSetting = initialResponseSetting
        self.inputContexts = inputContexts
        self.intentClosingSetting = intentClosingSetting
        self.intentConfirmationSetting = intentConfirmationSetting
        self.intentId = intentId
        self.intentName = intentName
        self.kendraConfiguration = kendraConfiguration
        self.lastUpdatedDateTime = lastUpdatedDateTime
        self.localeId = localeId
        self.outputContexts = outputContexts
        self.parentIntentSignature = parentIntentSignature
        self.qnAIntentConfiguration = qnAIntentConfiguration
        self.sampleUtterances = sampleUtterances
        self.slotPriorities = slotPriorities
    }
}

public struct UpdateIntentInput {
    /// The identifier of the bot that contains the intent.
    /// This member is required.
    public var botId: Swift.String?
    /// The version of the bot that contains the intent. Must be DRAFT.
    /// This member is required.
    public var botVersion: Swift.String?
    /// The new description of the intent.
    public var description: Swift.String?
    /// The new Lambda function to use between each turn of the conversation with the bot.
    public var dialogCodeHook: LexModelsV2ClientTypes.DialogCodeHookSettings?
    /// The new Lambda function to call when all of the intents required slots are provided and the intent is ready for fulfillment.
    public var fulfillmentCodeHook: LexModelsV2ClientTypes.FulfillmentCodeHookSettings?
    /// Configuration settings for a response sent to the user before Amazon Lex starts eliciting slots.
    public var initialResponseSetting: LexModelsV2ClientTypes.InitialResponseSetting?
    /// A new list of contexts that must be active in order for Amazon Lex to consider the intent.
    public var inputContexts: [LexModelsV2ClientTypes.InputContext]?
    /// The new response that Amazon Lex sends the user when the intent is closed.
    public var intentClosingSetting: LexModelsV2ClientTypes.IntentClosingSetting?
    /// New prompts that Amazon Lex sends to the user to confirm the completion of an intent.
    public var intentConfirmationSetting: LexModelsV2ClientTypes.IntentConfirmationSetting?
    /// The unique identifier of the intent to update.
    /// This member is required.
    public var intentId: Swift.String?
    /// The new name for the intent.
    /// This member is required.
    public var intentName: Swift.String?
    /// New configuration settings for connecting to an Amazon Kendra index.
    public var kendraConfiguration: LexModelsV2ClientTypes.KendraConfiguration?
    /// The identifier of the language and locale where this intent is used. The string must match one of the supported locales. For more information, see [Supported languages](https://docs.aws.amazon.com/lexv2/latest/dg/how-languages.html).
    /// This member is required.
    public var localeId: Swift.String?
    /// A new list of contexts that Amazon Lex activates when the intent is fulfilled.
    public var outputContexts: [LexModelsV2ClientTypes.OutputContext]?
    /// The signature of the new built-in intent to use as the parent of this intent.
    public var parentIntentSignature: Swift.String?
    /// Specifies the configuration of the built-in Amazon.QnAIntent. The AMAZON.QnAIntent intent is called when Amazon Lex can't determine another intent to invoke. If you specify this field, you can't specify the kendraConfiguration field.
    public var qnAIntentConfiguration: LexModelsV2ClientTypes.QnAIntentConfiguration?
    /// New utterances used to invoke the intent.
    public var sampleUtterances: [LexModelsV2ClientTypes.SampleUtterance]?
    /// A new list of slots and their priorities that are contained by the intent.
    public var slotPriorities: [LexModelsV2ClientTypes.SlotPriority]?

    public init(
        botId: Swift.String? = nil,
        botVersion: Swift.String? = nil,
        description: Swift.String? = nil,
        dialogCodeHook: LexModelsV2ClientTypes.DialogCodeHookSettings? = nil,
        fulfillmentCodeHook: LexModelsV2ClientTypes.FulfillmentCodeHookSettings? = nil,
        initialResponseSetting: LexModelsV2ClientTypes.InitialResponseSetting? = nil,
        inputContexts: [LexModelsV2ClientTypes.InputContext]? = nil,
        intentClosingSetting: LexModelsV2ClientTypes.IntentClosingSetting? = nil,
        intentConfirmationSetting: LexModelsV2ClientTypes.IntentConfirmationSetting? = nil,
        intentId: Swift.String? = nil,
        intentName: Swift.String? = nil,
        kendraConfiguration: LexModelsV2ClientTypes.KendraConfiguration? = nil,
        localeId: Swift.String? = nil,
        outputContexts: [LexModelsV2ClientTypes.OutputContext]? = nil,
        parentIntentSignature: Swift.String? = nil,
        qnAIntentConfiguration: LexModelsV2ClientTypes.QnAIntentConfiguration? = nil,
        sampleUtterances: [LexModelsV2ClientTypes.SampleUtterance]? = nil,
        slotPriorities: [LexModelsV2ClientTypes.SlotPriority]? = nil
    )
    {
        self.botId = botId
        self.botVersion = botVersion
        self.description = description
        self.dialogCodeHook = dialogCodeHook
        self.fulfillmentCodeHook = fulfillmentCodeHook
        self.initialResponseSetting = initialResponseSetting
        self.inputContexts = inputContexts
        self.intentClosingSetting = intentClosingSetting
        self.intentConfirmationSetting = intentConfirmationSetting
        self.intentId = intentId
        self.intentName = intentName
        self.kendraConfiguration = kendraConfiguration
        self.localeId = localeId
        self.outputContexts = outputContexts
        self.parentIntentSignature = parentIntentSignature
        self.qnAIntentConfiguration = qnAIntentConfiguration
        self.sampleUtterances = sampleUtterances
        self.slotPriorities = slotPriorities
    }
}

public struct UpdateIntentOutput {
    /// The identifier of the bot that contains the intent.
    public var botId: Swift.String?
    /// The version of the bot that contains the intent. Will always be DRAFT.
    public var botVersion: Swift.String?
    /// A timestamp of when the intent was created.
    public var creationDateTime: Foundation.Date?
    /// The updated description of the intent.
    public var description: Swift.String?
    /// The updated Lambda function called during each turn of the conversation with the user.
    public var dialogCodeHook: LexModelsV2ClientTypes.DialogCodeHookSettings?
    /// The updated Lambda function called when the intent is ready for fulfillment.
    public var fulfillmentCodeHook: LexModelsV2ClientTypes.FulfillmentCodeHookSettings?
    /// Configuration settings for a response sent to the user before Amazon Lex starts eliciting slots.
    public var initialResponseSetting: LexModelsV2ClientTypes.InitialResponseSetting?
    /// The updated list of contexts that must be active for the intent to be considered by Amazon Lex.
    public var inputContexts: [LexModelsV2ClientTypes.InputContext]?
    /// The updated response that Amazon Lex sends the user when the intent is closed.
    public var intentClosingSetting: LexModelsV2ClientTypes.IntentClosingSetting?
    /// The updated prompts that Amazon Lex sends to the user to confirm the completion of an intent.
    public var intentConfirmationSetting: LexModelsV2ClientTypes.IntentConfirmationSetting?
    /// The identifier of the intent that was updated.
    public var intentId: Swift.String?
    /// The updated name of the intent.
    public var intentName: Swift.String?
    /// The updated configuration for connecting to an Amazon Kendra index with the AMAZON.KendraSearchIntent intent.
    public var kendraConfiguration: LexModelsV2ClientTypes.KendraConfiguration?
    /// A timestamp of the last time that the intent was modified.
    public var lastUpdatedDateTime: Foundation.Date?
    /// The updated language and locale of the intent.
    public var localeId: Swift.String?
    /// The updated list of contexts that Amazon Lex activates when the intent is fulfilled.
    public var outputContexts: [LexModelsV2ClientTypes.OutputContext]?
    /// The updated built-in intent that is the parent of this intent.
    public var parentIntentSignature: Swift.String?
    /// Details about the configuration of the built-in Amazon.QnAIntent.
    public var qnAIntentConfiguration: LexModelsV2ClientTypes.QnAIntentConfiguration?
    /// The updated list of sample utterances for the intent.
    public var sampleUtterances: [LexModelsV2ClientTypes.SampleUtterance]?
    /// The updated list of slots and their priorities that are elicited from the user for the intent.
    public var slotPriorities: [LexModelsV2ClientTypes.SlotPriority]?

    public init(
        botId: Swift.String? = nil,
        botVersion: Swift.String? = nil,
        creationDateTime: Foundation.Date? = nil,
        description: Swift.String? = nil,
        dialogCodeHook: LexModelsV2ClientTypes.DialogCodeHookSettings? = nil,
        fulfillmentCodeHook: LexModelsV2ClientTypes.FulfillmentCodeHookSettings? = nil,
        initialResponseSetting: LexModelsV2ClientTypes.InitialResponseSetting? = nil,
        inputContexts: [LexModelsV2ClientTypes.InputContext]? = nil,
        intentClosingSetting: LexModelsV2ClientTypes.IntentClosingSetting? = nil,
        intentConfirmationSetting: LexModelsV2ClientTypes.IntentConfirmationSetting? = nil,
        intentId: Swift.String? = nil,
        intentName: Swift.String? = nil,
        kendraConfiguration: LexModelsV2ClientTypes.KendraConfiguration? = nil,
        lastUpdatedDateTime: Foundation.Date? = nil,
        localeId: Swift.String? = nil,
        outputContexts: [LexModelsV2ClientTypes.OutputContext]? = nil,
        parentIntentSignature: Swift.String? = nil,
        qnAIntentConfiguration: LexModelsV2ClientTypes.QnAIntentConfiguration? = nil,
        sampleUtterances: [LexModelsV2ClientTypes.SampleUtterance]? = nil,
        slotPriorities: [LexModelsV2ClientTypes.SlotPriority]? = nil
    )
    {
        self.botId = botId
        self.botVersion = botVersion
        self.creationDateTime = creationDateTime
        self.description = description
        self.dialogCodeHook = dialogCodeHook
        self.fulfillmentCodeHook = fulfillmentCodeHook
        self.initialResponseSetting = initialResponseSetting
        self.inputContexts = inputContexts
        self.intentClosingSetting = intentClosingSetting
        self.intentConfirmationSetting = intentConfirmationSetting
        self.intentId = intentId
        self.intentName = intentName
        self.kendraConfiguration = kendraConfiguration
        self.lastUpdatedDateTime = lastUpdatedDateTime
        self.localeId = localeId
        self.outputContexts = outputContexts
        self.parentIntentSignature = parentIntentSignature
        self.qnAIntentConfiguration = qnAIntentConfiguration
        self.sampleUtterances = sampleUtterances
        self.slotPriorities = slotPriorities
    }
}

extension BatchCreateCustomVocabularyItemInput {

    static func urlPathProvider(_ value: BatchCreateCustomVocabularyItemInput) -> Swift.String? {
        guard let botId = value.botId else {
            return nil
        }
        guard let botVersion = value.botVersion else {
            return nil
        }
        guard let localeId = value.localeId else {
            return nil
        }
        return "/bots/\(botId.urlPercentEncoding())/botversions/\(botVersion.urlPercentEncoding())/botlocales/\(localeId.urlPercentEncoding())/customvocabulary/DEFAULT/batchcreate"
    }
}

extension BatchDeleteCustomVocabularyItemInput {

    static func urlPathProvider(_ value: BatchDeleteCustomVocabularyItemInput) -> Swift.String? {
        guard let botId = value.botId else {
            return nil
        }
        guard let botVersion = value.botVersion else {
            return nil
        }
        guard let localeId = value.localeId else {
            return nil
        }
        return "/bots/\(botId.urlPercentEncoding())/botversions/\(botVersion.urlPercentEncoding())/botlocales/\(localeId.urlPercentEncoding())/customvocabulary/DEFAULT/batchdelete"
    }
}

extension BatchUpdateCustomVocabularyItemInput {

    static func urlPathProvider(_ value: BatchUpdateCustomVocabularyItemInput) -> Swift.String? {
        guard let botId = value.botId else {
            return nil
        }
        guard let botVersion = value.botVersion else {
            return nil
        }
        guard let localeId = value.localeId else {
            return nil
        }
        return "/bots/\(botId.urlPercentEncoding())/botversions/\(botVersion.urlPercentEncoding())/botlocales/\(localeId.urlPercentEncoding())/customvocabulary/DEFAULT/batchupdate"
    }
}

extension BuildBotLocaleInput {

    static func urlPathProvider(_ value: BuildBotLocaleInput) -> Swift.String? {
        guard let botId = value.botId else {
            return nil
        }
        guard let botVersion = value.botVersion else {
            return nil
        }
        guard let localeId = value.localeId else {
            return nil
        }
        return "/bots/\(botId.urlPercentEncoding())/botversions/\(botVersion.urlPercentEncoding())/botlocales/\(localeId.urlPercentEncoding())"
    }
}

extension CreateBotInput {

    static func urlPathProvider(_ value: CreateBotInput) -> Swift.String? {
        return "/bots"
    }
}

extension CreateBotAliasInput {

    static func urlPathProvider(_ value: CreateBotAliasInput) -> Swift.String? {
        guard let botId = value.botId else {
            return nil
        }
        return "/bots/\(botId.urlPercentEncoding())/botaliases"
    }
}

extension CreateBotLocaleInput {

    static func urlPathProvider(_ value: CreateBotLocaleInput) -> Swift.String? {
        guard let botId = value.botId else {
            return nil
        }
        guard let botVersion = value.botVersion else {
            return nil
        }
        return "/bots/\(botId.urlPercentEncoding())/botversions/\(botVersion.urlPercentEncoding())/botlocales"
    }
}

extension CreateBotReplicaInput {

    static func urlPathProvider(_ value: CreateBotReplicaInput) -> Swift.String? {
        guard let botId = value.botId else {
            return nil
        }
        return "/bots/\(botId.urlPercentEncoding())/replicas"
    }
}

extension CreateBotVersionInput {

    static func urlPathProvider(_ value: CreateBotVersionInput) -> Swift.String? {
        guard let botId = value.botId else {
            return nil
        }
        return "/bots/\(botId.urlPercentEncoding())/botversions"
    }
}

extension CreateExportInput {

    static func urlPathProvider(_ value: CreateExportInput) -> Swift.String? {
        return "/exports"
    }
}

extension CreateIntentInput {

    static func urlPathProvider(_ value: CreateIntentInput) -> Swift.String? {
        guard let botId = value.botId else {
            return nil
        }
        guard let botVersion = value.botVersion else {
            return nil
        }
        guard let localeId = value.localeId else {
            return nil
        }
        return "/bots/\(botId.urlPercentEncoding())/botversions/\(botVersion.urlPercentEncoding())/botlocales/\(localeId.urlPercentEncoding())/intents"
    }
}

extension CreateResourcePolicyInput {

    static func urlPathProvider(_ value: CreateResourcePolicyInput) -> Swift.String? {
        guard let resourceArn = value.resourceArn else {
            return nil
        }
        return "/policy/\(resourceArn.urlPercentEncoding())"
    }
}

extension CreateResourcePolicyStatementInput {

    static func urlPathProvider(_ value: CreateResourcePolicyStatementInput) -> Swift.String? {
        guard let resourceArn = value.resourceArn else {
            return nil
        }
        return "/policy/\(resourceArn.urlPercentEncoding())/statements"
    }
}

extension CreateResourcePolicyStatementInput {

    static func queryItemProvider(_ value: CreateResourcePolicyStatementInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        if let expectedRevisionId = value.expectedRevisionId {
            let expectedRevisionIdQueryItem = Smithy.URIQueryItem(name: "expectedRevisionId".urlPercentEncoding(), value: Swift.String(expectedRevisionId).urlPercentEncoding())
            items.append(expectedRevisionIdQueryItem)
        }
        return items
    }
}

extension CreateSlotInput {

    static func urlPathProvider(_ value: CreateSlotInput) -> Swift.String? {
        guard let botId = value.botId else {
            return nil
        }
        guard let botVersion = value.botVersion else {
            return nil
        }
        guard let localeId = value.localeId else {
            return nil
        }
        guard let intentId = value.intentId else {
            return nil
        }
        return "/bots/\(botId.urlPercentEncoding())/botversions/\(botVersion.urlPercentEncoding())/botlocales/\(localeId.urlPercentEncoding())/intents/\(intentId.urlPercentEncoding())/slots"
    }
}

extension CreateSlotTypeInput {

    static func urlPathProvider(_ value: CreateSlotTypeInput) -> Swift.String? {
        guard let botId = value.botId else {
            return nil
        }
        guard let botVersion = value.botVersion else {
            return nil
        }
        guard let localeId = value.localeId else {
            return nil
        }
        return "/bots/\(botId.urlPercentEncoding())/botversions/\(botVersion.urlPercentEncoding())/botlocales/\(localeId.urlPercentEncoding())/slottypes"
    }
}

extension CreateTestSetDiscrepancyReportInput {

    static func urlPathProvider(_ value: CreateTestSetDiscrepancyReportInput) -> Swift.String? {
        guard let testSetId = value.testSetId else {
            return nil
        }
        return "/testsets/\(testSetId.urlPercentEncoding())/testsetdiscrepancy"
    }
}

extension CreateUploadUrlInput {

    static func urlPathProvider(_ value: CreateUploadUrlInput) -> Swift.String? {
        return "/createuploadurl"
    }
}

extension DeleteBotInput {

    static func urlPathProvider(_ value: DeleteBotInput) -> Swift.String? {
        guard let botId = value.botId else {
            return nil
        }
        return "/bots/\(botId.urlPercentEncoding())"
    }
}

extension DeleteBotInput {

    static func queryItemProvider(_ value: DeleteBotInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        if let skipResourceInUseCheck = value.skipResourceInUseCheck {
            let skipResourceInUseCheckQueryItem = Smithy.URIQueryItem(name: "skipResourceInUseCheck".urlPercentEncoding(), value: Swift.String(skipResourceInUseCheck).urlPercentEncoding())
            items.append(skipResourceInUseCheckQueryItem)
        }
        return items
    }
}

extension DeleteBotAliasInput {

    static func urlPathProvider(_ value: DeleteBotAliasInput) -> Swift.String? {
        guard let botId = value.botId else {
            return nil
        }
        guard let botAliasId = value.botAliasId else {
            return nil
        }
        return "/bots/\(botId.urlPercentEncoding())/botaliases/\(botAliasId.urlPercentEncoding())"
    }
}

extension DeleteBotAliasInput {

    static func queryItemProvider(_ value: DeleteBotAliasInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        if let skipResourceInUseCheck = value.skipResourceInUseCheck {
            let skipResourceInUseCheckQueryItem = Smithy.URIQueryItem(name: "skipResourceInUseCheck".urlPercentEncoding(), value: Swift.String(skipResourceInUseCheck).urlPercentEncoding())
            items.append(skipResourceInUseCheckQueryItem)
        }
        return items
    }
}

extension DeleteBotLocaleInput {

    static func urlPathProvider(_ value: DeleteBotLocaleInput) -> Swift.String? {
        guard let botId = value.botId else {
            return nil
        }
        guard let botVersion = value.botVersion else {
            return nil
        }
        guard let localeId = value.localeId else {
            return nil
        }
        return "/bots/\(botId.urlPercentEncoding())/botversions/\(botVersion.urlPercentEncoding())/botlocales/\(localeId.urlPercentEncoding())"
    }
}

extension DeleteBotReplicaInput {

    static func urlPathProvider(_ value: DeleteBotReplicaInput) -> Swift.String? {
        guard let botId = value.botId else {
            return nil
        }
        guard let replicaRegion = value.replicaRegion else {
            return nil
        }
        return "/bots/\(botId.urlPercentEncoding())/replicas/\(replicaRegion.urlPercentEncoding())"
    }
}

extension DeleteBotVersionInput {

    static func urlPathProvider(_ value: DeleteBotVersionInput) -> Swift.String? {
        guard let botId = value.botId else {
            return nil
        }
        guard let botVersion = value.botVersion else {
            return nil
        }
        return "/bots/\(botId.urlPercentEncoding())/botversions/\(botVersion.urlPercentEncoding())"
    }
}

extension DeleteBotVersionInput {

    static func queryItemProvider(_ value: DeleteBotVersionInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        if let skipResourceInUseCheck = value.skipResourceInUseCheck {
            let skipResourceInUseCheckQueryItem = Smithy.URIQueryItem(name: "skipResourceInUseCheck".urlPercentEncoding(), value: Swift.String(skipResourceInUseCheck).urlPercentEncoding())
            items.append(skipResourceInUseCheckQueryItem)
        }
        return items
    }
}

extension DeleteCustomVocabularyInput {

    static func urlPathProvider(_ value: DeleteCustomVocabularyInput) -> Swift.String? {
        guard let botId = value.botId else {
            return nil
        }
        guard let botVersion = value.botVersion else {
            return nil
        }
        guard let localeId = value.localeId else {
            return nil
        }
        return "/bots/\(botId.urlPercentEncoding())/botversions/\(botVersion.urlPercentEncoding())/botlocales/\(localeId.urlPercentEncoding())/customvocabulary"
    }
}

extension DeleteExportInput {

    static func urlPathProvider(_ value: DeleteExportInput) -> Swift.String? {
        guard let exportId = value.exportId else {
            return nil
        }
        return "/exports/\(exportId.urlPercentEncoding())"
    }
}

extension DeleteImportInput {

    static func urlPathProvider(_ value: DeleteImportInput) -> Swift.String? {
        guard let importId = value.importId else {
            return nil
        }
        return "/imports/\(importId.urlPercentEncoding())"
    }
}

extension DeleteIntentInput {

    static func urlPathProvider(_ value: DeleteIntentInput) -> Swift.String? {
        guard let botId = value.botId else {
            return nil
        }
        guard let botVersion = value.botVersion else {
            return nil
        }
        guard let localeId = value.localeId else {
            return nil
        }
        guard let intentId = value.intentId else {
            return nil
        }
        return "/bots/\(botId.urlPercentEncoding())/botversions/\(botVersion.urlPercentEncoding())/botlocales/\(localeId.urlPercentEncoding())/intents/\(intentId.urlPercentEncoding())"
    }
}

extension DeleteResourcePolicyInput {

    static func urlPathProvider(_ value: DeleteResourcePolicyInput) -> Swift.String? {
        guard let resourceArn = value.resourceArn else {
            return nil
        }
        return "/policy/\(resourceArn.urlPercentEncoding())"
    }
}

extension DeleteResourcePolicyInput {

    static func queryItemProvider(_ value: DeleteResourcePolicyInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        if let expectedRevisionId = value.expectedRevisionId {
            let expectedRevisionIdQueryItem = Smithy.URIQueryItem(name: "expectedRevisionId".urlPercentEncoding(), value: Swift.String(expectedRevisionId).urlPercentEncoding())
            items.append(expectedRevisionIdQueryItem)
        }
        return items
    }
}

extension DeleteResourcePolicyStatementInput {

    static func urlPathProvider(_ value: DeleteResourcePolicyStatementInput) -> Swift.String? {
        guard let resourceArn = value.resourceArn else {
            return nil
        }
        guard let statementId = value.statementId else {
            return nil
        }
        return "/policy/\(resourceArn.urlPercentEncoding())/statements/\(statementId.urlPercentEncoding())"
    }
}

extension DeleteResourcePolicyStatementInput {

    static func queryItemProvider(_ value: DeleteResourcePolicyStatementInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        if let expectedRevisionId = value.expectedRevisionId {
            let expectedRevisionIdQueryItem = Smithy.URIQueryItem(name: "expectedRevisionId".urlPercentEncoding(), value: Swift.String(expectedRevisionId).urlPercentEncoding())
            items.append(expectedRevisionIdQueryItem)
        }
        return items
    }
}

extension DeleteSlotInput {

    static func urlPathProvider(_ value: DeleteSlotInput) -> Swift.String? {
        guard let botId = value.botId else {
            return nil
        }
        guard let botVersion = value.botVersion else {
            return nil
        }
        guard let localeId = value.localeId else {
            return nil
        }
        guard let intentId = value.intentId else {
            return nil
        }
        guard let slotId = value.slotId else {
            return nil
        }
        return "/bots/\(botId.urlPercentEncoding())/botversions/\(botVersion.urlPercentEncoding())/botlocales/\(localeId.urlPercentEncoding())/intents/\(intentId.urlPercentEncoding())/slots/\(slotId.urlPercentEncoding())"
    }
}

extension DeleteSlotTypeInput {

    static func urlPathProvider(_ value: DeleteSlotTypeInput) -> Swift.String? {
        guard let botId = value.botId else {
            return nil
        }
        guard let botVersion = value.botVersion else {
            return nil
        }
        guard let localeId = value.localeId else {
            return nil
        }
        guard let slotTypeId = value.slotTypeId else {
            return nil
        }
        return "/bots/\(botId.urlPercentEncoding())/botversions/\(botVersion.urlPercentEncoding())/botlocales/\(localeId.urlPercentEncoding())/slottypes/\(slotTypeId.urlPercentEncoding())"
    }
}

extension DeleteSlotTypeInput {

    static func queryItemProvider(_ value: DeleteSlotTypeInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        if let skipResourceInUseCheck = value.skipResourceInUseCheck {
            let skipResourceInUseCheckQueryItem = Smithy.URIQueryItem(name: "skipResourceInUseCheck".urlPercentEncoding(), value: Swift.String(skipResourceInUseCheck).urlPercentEncoding())
            items.append(skipResourceInUseCheckQueryItem)
        }
        return items
    }
}

extension DeleteTestSetInput {

    static func urlPathProvider(_ value: DeleteTestSetInput) -> Swift.String? {
        guard let testSetId = value.testSetId else {
            return nil
        }
        return "/testsets/\(testSetId.urlPercentEncoding())"
    }
}

extension DeleteUtterancesInput {

    static func urlPathProvider(_ value: DeleteUtterancesInput) -> Swift.String? {
        guard let botId = value.botId else {
            return nil
        }
        return "/bots/\(botId.urlPercentEncoding())/utterances"
    }
}

extension DeleteUtterancesInput {

    static func queryItemProvider(_ value: DeleteUtterancesInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        if let sessionId = value.sessionId {
            let sessionIdQueryItem = Smithy.URIQueryItem(name: "sessionId".urlPercentEncoding(), value: Swift.String(sessionId).urlPercentEncoding())
            items.append(sessionIdQueryItem)
        }
        if let localeId = value.localeId {
            let localeIdQueryItem = Smithy.URIQueryItem(name: "localeId".urlPercentEncoding(), value: Swift.String(localeId).urlPercentEncoding())
            items.append(localeIdQueryItem)
        }
        return items
    }
}

extension DescribeBotInput {

    static func urlPathProvider(_ value: DescribeBotInput) -> Swift.String? {
        guard let botId = value.botId else {
            return nil
        }
        return "/bots/\(botId.urlPercentEncoding())"
    }
}

extension DescribeBotAliasInput {

    static func urlPathProvider(_ value: DescribeBotAliasInput) -> Swift.String? {
        guard let botId = value.botId else {
            return nil
        }
        guard let botAliasId = value.botAliasId else {
            return nil
        }
        return "/bots/\(botId.urlPercentEncoding())/botaliases/\(botAliasId.urlPercentEncoding())"
    }
}

extension DescribeBotLocaleInput {

    static func urlPathProvider(_ value: DescribeBotLocaleInput) -> Swift.String? {
        guard let botId = value.botId else {
            return nil
        }
        guard let botVersion = value.botVersion else {
            return nil
        }
        guard let localeId = value.localeId else {
            return nil
        }
        return "/bots/\(botId.urlPercentEncoding())/botversions/\(botVersion.urlPercentEncoding())/botlocales/\(localeId.urlPercentEncoding())"
    }
}

extension DescribeBotRecommendationInput {

    static func urlPathProvider(_ value: DescribeBotRecommendationInput) -> Swift.String? {
        guard let botId = value.botId else {
            return nil
        }
        guard let botVersion = value.botVersion else {
            return nil
        }
        guard let localeId = value.localeId else {
            return nil
        }
        guard let botRecommendationId = value.botRecommendationId else {
            return nil
        }
        return "/bots/\(botId.urlPercentEncoding())/botversions/\(botVersion.urlPercentEncoding())/botlocales/\(localeId.urlPercentEncoding())/botrecommendations/\(botRecommendationId.urlPercentEncoding())"
    }
}

extension DescribeBotReplicaInput {

    static func urlPathProvider(_ value: DescribeBotReplicaInput) -> Swift.String? {
        guard let botId = value.botId else {
            return nil
        }
        guard let replicaRegion = value.replicaRegion else {
            return nil
        }
        return "/bots/\(botId.urlPercentEncoding())/replicas/\(replicaRegion.urlPercentEncoding())"
    }
}

extension DescribeBotResourceGenerationInput {

    static func urlPathProvider(_ value: DescribeBotResourceGenerationInput) -> Swift.String? {
        guard let botId = value.botId else {
            return nil
        }
        guard let botVersion = value.botVersion else {
            return nil
        }
        guard let localeId = value.localeId else {
            return nil
        }
        guard let generationId = value.generationId else {
            return nil
        }
        return "/bots/\(botId.urlPercentEncoding())/botversions/\(botVersion.urlPercentEncoding())/botlocales/\(localeId.urlPercentEncoding())/generations/\(generationId.urlPercentEncoding())"
    }
}

extension DescribeBotVersionInput {

    static func urlPathProvider(_ value: DescribeBotVersionInput) -> Swift.String? {
        guard let botId = value.botId else {
            return nil
        }
        guard let botVersion = value.botVersion else {
            return nil
        }
        return "/bots/\(botId.urlPercentEncoding())/botversions/\(botVersion.urlPercentEncoding())"
    }
}

extension DescribeCustomVocabularyMetadataInput {

    static func urlPathProvider(_ value: DescribeCustomVocabularyMetadataInput) -> Swift.String? {
        guard let botId = value.botId else {
            return nil
        }
        guard let botVersion = value.botVersion else {
            return nil
        }
        guard let localeId = value.localeId else {
            return nil
        }
        return "/bots/\(botId.urlPercentEncoding())/botversions/\(botVersion.urlPercentEncoding())/botlocales/\(localeId.urlPercentEncoding())/customvocabulary/DEFAULT/metadata"
    }
}

extension DescribeExportInput {

    static func urlPathProvider(_ value: DescribeExportInput) -> Swift.String? {
        guard let exportId = value.exportId else {
            return nil
        }
        return "/exports/\(exportId.urlPercentEncoding())"
    }
}

extension DescribeImportInput {

    static func urlPathProvider(_ value: DescribeImportInput) -> Swift.String? {
        guard let importId = value.importId else {
            return nil
        }
        return "/imports/\(importId.urlPercentEncoding())"
    }
}

extension DescribeIntentInput {

    static func urlPathProvider(_ value: DescribeIntentInput) -> Swift.String? {
        guard let botId = value.botId else {
            return nil
        }
        guard let botVersion = value.botVersion else {
            return nil
        }
        guard let localeId = value.localeId else {
            return nil
        }
        guard let intentId = value.intentId else {
            return nil
        }
        return "/bots/\(botId.urlPercentEncoding())/botversions/\(botVersion.urlPercentEncoding())/botlocales/\(localeId.urlPercentEncoding())/intents/\(intentId.urlPercentEncoding())"
    }
}

extension DescribeResourcePolicyInput {

    static func urlPathProvider(_ value: DescribeResourcePolicyInput) -> Swift.String? {
        guard let resourceArn = value.resourceArn else {
            return nil
        }
        return "/policy/\(resourceArn.urlPercentEncoding())"
    }
}

extension DescribeSlotInput {

    static func urlPathProvider(_ value: DescribeSlotInput) -> Swift.String? {
        guard let botId = value.botId else {
            return nil
        }
        guard let botVersion = value.botVersion else {
            return nil
        }
        guard let localeId = value.localeId else {
            return nil
        }
        guard let intentId = value.intentId else {
            return nil
        }
        guard let slotId = value.slotId else {
            return nil
        }
        return "/bots/\(botId.urlPercentEncoding())/botversions/\(botVersion.urlPercentEncoding())/botlocales/\(localeId.urlPercentEncoding())/intents/\(intentId.urlPercentEncoding())/slots/\(slotId.urlPercentEncoding())"
    }
}

extension DescribeSlotTypeInput {

    static func urlPathProvider(_ value: DescribeSlotTypeInput) -> Swift.String? {
        guard let botId = value.botId else {
            return nil
        }
        guard let botVersion = value.botVersion else {
            return nil
        }
        guard let localeId = value.localeId else {
            return nil
        }
        guard let slotTypeId = value.slotTypeId else {
            return nil
        }
        return "/bots/\(botId.urlPercentEncoding())/botversions/\(botVersion.urlPercentEncoding())/botlocales/\(localeId.urlPercentEncoding())/slottypes/\(slotTypeId.urlPercentEncoding())"
    }
}

extension DescribeTestExecutionInput {

    static func urlPathProvider(_ value: DescribeTestExecutionInput) -> Swift.String? {
        guard let testExecutionId = value.testExecutionId else {
            return nil
        }
        return "/testexecutions/\(testExecutionId.urlPercentEncoding())"
    }
}

extension DescribeTestSetInput {

    static func urlPathProvider(_ value: DescribeTestSetInput) -> Swift.String? {
        guard let testSetId = value.testSetId else {
            return nil
        }
        return "/testsets/\(testSetId.urlPercentEncoding())"
    }
}

extension DescribeTestSetDiscrepancyReportInput {

    static func urlPathProvider(_ value: DescribeTestSetDiscrepancyReportInput) -> Swift.String? {
        guard let testSetDiscrepancyReportId = value.testSetDiscrepancyReportId else {
            return nil
        }
        return "/testsetdiscrepancy/\(testSetDiscrepancyReportId.urlPercentEncoding())"
    }
}

extension DescribeTestSetGenerationInput {

    static func urlPathProvider(_ value: DescribeTestSetGenerationInput) -> Swift.String? {
        guard let testSetGenerationId = value.testSetGenerationId else {
            return nil
        }
        return "/testsetgenerations/\(testSetGenerationId.urlPercentEncoding())"
    }
}

extension GenerateBotElementInput {

    static func urlPathProvider(_ value: GenerateBotElementInput) -> Swift.String? {
        guard let botId = value.botId else {
            return nil
        }
        guard let botVersion = value.botVersion else {
            return nil
        }
        guard let localeId = value.localeId else {
            return nil
        }
        return "/bots/\(botId.urlPercentEncoding())/botversions/\(botVersion.urlPercentEncoding())/botlocales/\(localeId.urlPercentEncoding())/generate"
    }
}

extension GetTestExecutionArtifactsUrlInput {

    static func urlPathProvider(_ value: GetTestExecutionArtifactsUrlInput) -> Swift.String? {
        guard let testExecutionId = value.testExecutionId else {
            return nil
        }
        return "/testexecutions/\(testExecutionId.urlPercentEncoding())/artifacturl"
    }
}

extension ListAggregatedUtterancesInput {

    static func urlPathProvider(_ value: ListAggregatedUtterancesInput) -> Swift.String? {
        guard let botId = value.botId else {
            return nil
        }
        return "/bots/\(botId.urlPercentEncoding())/aggregatedutterances"
    }
}

extension ListBotAliasesInput {

    static func urlPathProvider(_ value: ListBotAliasesInput) -> Swift.String? {
        guard let botId = value.botId else {
            return nil
        }
        return "/bots/\(botId.urlPercentEncoding())/botaliases"
    }
}

extension ListBotAliasReplicasInput {

    static func urlPathProvider(_ value: ListBotAliasReplicasInput) -> Swift.String? {
        guard let botId = value.botId else {
            return nil
        }
        guard let replicaRegion = value.replicaRegion else {
            return nil
        }
        return "/bots/\(botId.urlPercentEncoding())/replicas/\(replicaRegion.urlPercentEncoding())/botaliases"
    }
}

extension ListBotLocalesInput {

    static func urlPathProvider(_ value: ListBotLocalesInput) -> Swift.String? {
        guard let botId = value.botId else {
            return nil
        }
        guard let botVersion = value.botVersion else {
            return nil
        }
        return "/bots/\(botId.urlPercentEncoding())/botversions/\(botVersion.urlPercentEncoding())/botlocales"
    }
}

extension ListBotRecommendationsInput {

    static func urlPathProvider(_ value: ListBotRecommendationsInput) -> Swift.String? {
        guard let botId = value.botId else {
            return nil
        }
        guard let botVersion = value.botVersion else {
            return nil
        }
        guard let localeId = value.localeId else {
            return nil
        }
        return "/bots/\(botId.urlPercentEncoding())/botversions/\(botVersion.urlPercentEncoding())/botlocales/\(localeId.urlPercentEncoding())/botrecommendations"
    }
}

extension ListBotReplicasInput {

    static func urlPathProvider(_ value: ListBotReplicasInput) -> Swift.String? {
        guard let botId = value.botId else {
            return nil
        }
        return "/bots/\(botId.urlPercentEncoding())/replicas"
    }
}

extension ListBotResourceGenerationsInput {

    static func urlPathProvider(_ value: ListBotResourceGenerationsInput) -> Swift.String? {
        guard let botId = value.botId else {
            return nil
        }
        guard let botVersion = value.botVersion else {
            return nil
        }
        guard let localeId = value.localeId else {
            return nil
        }
        return "/bots/\(botId.urlPercentEncoding())/botversions/\(botVersion.urlPercentEncoding())/botlocales/\(localeId.urlPercentEncoding())/generations"
    }
}

extension ListBotsInput {

    static func urlPathProvider(_ value: ListBotsInput) -> Swift.String? {
        return "/bots"
    }
}

extension ListBotVersionReplicasInput {

    static func urlPathProvider(_ value: ListBotVersionReplicasInput) -> Swift.String? {
        guard let botId = value.botId else {
            return nil
        }
        guard let replicaRegion = value.replicaRegion else {
            return nil
        }
        return "/bots/\(botId.urlPercentEncoding())/replicas/\(replicaRegion.urlPercentEncoding())/botversions"
    }
}

extension ListBotVersionsInput {

    static func urlPathProvider(_ value: ListBotVersionsInput) -> Swift.String? {
        guard let botId = value.botId else {
            return nil
        }
        return "/bots/\(botId.urlPercentEncoding())/botversions"
    }
}

extension ListBuiltInIntentsInput {

    static func urlPathProvider(_ value: ListBuiltInIntentsInput) -> Swift.String? {
        guard let localeId = value.localeId else {
            return nil
        }
        return "/builtins/locales/\(localeId.urlPercentEncoding())/intents"
    }
}

extension ListBuiltInSlotTypesInput {

    static func urlPathProvider(_ value: ListBuiltInSlotTypesInput) -> Swift.String? {
        guard let localeId = value.localeId else {
            return nil
        }
        return "/builtins/locales/\(localeId.urlPercentEncoding())/slottypes"
    }
}

extension ListCustomVocabularyItemsInput {

    static func urlPathProvider(_ value: ListCustomVocabularyItemsInput) -> Swift.String? {
        guard let botId = value.botId else {
            return nil
        }
        guard let botVersion = value.botVersion else {
            return nil
        }
        guard let localeId = value.localeId else {
            return nil
        }
        return "/bots/\(botId.urlPercentEncoding())/botversions/\(botVersion.urlPercentEncoding())/botlocales/\(localeId.urlPercentEncoding())/customvocabulary/DEFAULT/list"
    }
}

extension ListExportsInput {

    static func urlPathProvider(_ value: ListExportsInput) -> Swift.String? {
        return "/exports"
    }
}

extension ListImportsInput {

    static func urlPathProvider(_ value: ListImportsInput) -> Swift.String? {
        return "/imports"
    }
}

extension ListIntentMetricsInput {

    static func urlPathProvider(_ value: ListIntentMetricsInput) -> Swift.String? {
        guard let botId = value.botId else {
            return nil
        }
        return "/bots/\(botId.urlPercentEncoding())/analytics/intentmetrics"
    }
}

extension ListIntentPathsInput {

    static func urlPathProvider(_ value: ListIntentPathsInput) -> Swift.String? {
        guard let botId = value.botId else {
            return nil
        }
        return "/bots/\(botId.urlPercentEncoding())/analytics/intentpaths"
    }
}

extension ListIntentsInput {

    static func urlPathProvider(_ value: ListIntentsInput) -> Swift.String? {
        guard let botId = value.botId else {
            return nil
        }
        guard let botVersion = value.botVersion else {
            return nil
        }
        guard let localeId = value.localeId else {
            return nil
        }
        return "/bots/\(botId.urlPercentEncoding())/botversions/\(botVersion.urlPercentEncoding())/botlocales/\(localeId.urlPercentEncoding())/intents"
    }
}

extension ListIntentStageMetricsInput {

    static func urlPathProvider(_ value: ListIntentStageMetricsInput) -> Swift.String? {
        guard let botId = value.botId else {
            return nil
        }
        return "/bots/\(botId.urlPercentEncoding())/analytics/intentstagemetrics"
    }
}

extension ListRecommendedIntentsInput {

    static func urlPathProvider(_ value: ListRecommendedIntentsInput) -> Swift.String? {
        guard let botId = value.botId else {
            return nil
        }
        guard let botVersion = value.botVersion else {
            return nil
        }
        guard let localeId = value.localeId else {
            return nil
        }
        guard let botRecommendationId = value.botRecommendationId else {
            return nil
        }
        return "/bots/\(botId.urlPercentEncoding())/botversions/\(botVersion.urlPercentEncoding())/botlocales/\(localeId.urlPercentEncoding())/botrecommendations/\(botRecommendationId.urlPercentEncoding())/intents"
    }
}

extension ListSessionAnalyticsDataInput {

    static func urlPathProvider(_ value: ListSessionAnalyticsDataInput) -> Swift.String? {
        guard let botId = value.botId else {
            return nil
        }
        return "/bots/\(botId.urlPercentEncoding())/analytics/sessions"
    }
}

extension ListSessionMetricsInput {

    static func urlPathProvider(_ value: ListSessionMetricsInput) -> Swift.String? {
        guard let botId = value.botId else {
            return nil
        }
        return "/bots/\(botId.urlPercentEncoding())/analytics/sessionmetrics"
    }
}

extension ListSlotsInput {

    static func urlPathProvider(_ value: ListSlotsInput) -> Swift.String? {
        guard let botId = value.botId else {
            return nil
        }
        guard let botVersion = value.botVersion else {
            return nil
        }
        guard let localeId = value.localeId else {
            return nil
        }
        guard let intentId = value.intentId else {
            return nil
        }
        return "/bots/\(botId.urlPercentEncoding())/botversions/\(botVersion.urlPercentEncoding())/botlocales/\(localeId.urlPercentEncoding())/intents/\(intentId.urlPercentEncoding())/slots"
    }
}

extension ListSlotTypesInput {

    static func urlPathProvider(_ value: ListSlotTypesInput) -> Swift.String? {
        guard let botId = value.botId else {
            return nil
        }
        guard let botVersion = value.botVersion else {
            return nil
        }
        guard let localeId = value.localeId else {
            return nil
        }
        return "/bots/\(botId.urlPercentEncoding())/botversions/\(botVersion.urlPercentEncoding())/botlocales/\(localeId.urlPercentEncoding())/slottypes"
    }
}

extension ListTagsForResourceInput {

    static func urlPathProvider(_ value: ListTagsForResourceInput) -> Swift.String? {
        guard let resourceARN = value.resourceARN else {
            return nil
        }
        return "/tags/\(resourceARN.urlPercentEncoding())"
    }
}

extension ListTestExecutionResultItemsInput {

    static func urlPathProvider(_ value: ListTestExecutionResultItemsInput) -> Swift.String? {
        guard let testExecutionId = value.testExecutionId else {
            return nil
        }
        return "/testexecutions/\(testExecutionId.urlPercentEncoding())/results"
    }
}

extension ListTestExecutionsInput {

    static func urlPathProvider(_ value: ListTestExecutionsInput) -> Swift.String? {
        return "/testexecutions"
    }
}

extension ListTestSetRecordsInput {

    static func urlPathProvider(_ value: ListTestSetRecordsInput) -> Swift.String? {
        guard let testSetId = value.testSetId else {
            return nil
        }
        return "/testsets/\(testSetId.urlPercentEncoding())/records"
    }
}

extension ListTestSetsInput {

    static func urlPathProvider(_ value: ListTestSetsInput) -> Swift.String? {
        return "/testsets"
    }
}

extension ListUtteranceAnalyticsDataInput {

    static func urlPathProvider(_ value: ListUtteranceAnalyticsDataInput) -> Swift.String? {
        guard let botId = value.botId else {
            return nil
        }
        return "/bots/\(botId.urlPercentEncoding())/analytics/utterances"
    }
}

extension ListUtteranceMetricsInput {

    static func urlPathProvider(_ value: ListUtteranceMetricsInput) -> Swift.String? {
        guard let botId = value.botId else {
            return nil
        }
        return "/bots/\(botId.urlPercentEncoding())/analytics/utterancemetrics"
    }
}

extension SearchAssociatedTranscriptsInput {

    static func urlPathProvider(_ value: SearchAssociatedTranscriptsInput) -> Swift.String? {
        guard let botId = value.botId else {
            return nil
        }
        guard let botVersion = value.botVersion else {
            return nil
        }
        guard let localeId = value.localeId else {
            return nil
        }
        guard let botRecommendationId = value.botRecommendationId else {
            return nil
        }
        return "/bots/\(botId.urlPercentEncoding())/botversions/\(botVersion.urlPercentEncoding())/botlocales/\(localeId.urlPercentEncoding())/botrecommendations/\(botRecommendationId.urlPercentEncoding())/associatedtranscripts"
    }
}

extension StartBotRecommendationInput {

    static func urlPathProvider(_ value: StartBotRecommendationInput) -> Swift.String? {
        guard let botId = value.botId else {
            return nil
        }
        guard let botVersion = value.botVersion else {
            return nil
        }
        guard let localeId = value.localeId else {
            return nil
        }
        return "/bots/\(botId.urlPercentEncoding())/botversions/\(botVersion.urlPercentEncoding())/botlocales/\(localeId.urlPercentEncoding())/botrecommendations"
    }
}

extension StartBotResourceGenerationInput {

    static func urlPathProvider(_ value: StartBotResourceGenerationInput) -> Swift.String? {
        guard let botId = value.botId else {
            return nil
        }
        guard let botVersion = value.botVersion else {
            return nil
        }
        guard let localeId = value.localeId else {
            return nil
        }
        return "/bots/\(botId.urlPercentEncoding())/botversions/\(botVersion.urlPercentEncoding())/botlocales/\(localeId.urlPercentEncoding())/startgeneration"
    }
}

extension StartImportInput {

    static func urlPathProvider(_ value: StartImportInput) -> Swift.String? {
        return "/imports"
    }
}

extension StartTestExecutionInput {

    static func urlPathProvider(_ value: StartTestExecutionInput) -> Swift.String? {
        guard let testSetId = value.testSetId else {
            return nil
        }
        return "/testsets/\(testSetId.urlPercentEncoding())/testexecutions"
    }
}

extension StartTestSetGenerationInput {

    static func urlPathProvider(_ value: StartTestSetGenerationInput) -> Swift.String? {
        return "/testsetgenerations"
    }
}

extension StopBotRecommendationInput {

    static func urlPathProvider(_ value: StopBotRecommendationInput) -> Swift.String? {
        guard let botId = value.botId else {
            return nil
        }
        guard let botVersion = value.botVersion else {
            return nil
        }
        guard let localeId = value.localeId else {
            return nil
        }
        guard let botRecommendationId = value.botRecommendationId else {
            return nil
        }
        return "/bots/\(botId.urlPercentEncoding())/botversions/\(botVersion.urlPercentEncoding())/botlocales/\(localeId.urlPercentEncoding())/botrecommendations/\(botRecommendationId.urlPercentEncoding())/stopbotrecommendation"
    }
}

extension TagResourceInput {

    static func urlPathProvider(_ value: TagResourceInput) -> Swift.String? {
        guard let resourceARN = value.resourceARN else {
            return nil
        }
        return "/tags/\(resourceARN.urlPercentEncoding())"
    }
}

extension UntagResourceInput {

    static func urlPathProvider(_ value: UntagResourceInput) -> Swift.String? {
        guard let resourceARN = value.resourceARN else {
            return nil
        }
        return "/tags/\(resourceARN.urlPercentEncoding())"
    }
}

extension UntagResourceInput {

    static func queryItemProvider(_ value: UntagResourceInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        guard let tagKeys = value.tagKeys else {
            let message = "Creating a URL Query Item failed. tagKeys is required and must not be nil."
            throw Smithy.ClientError.unknownError(message)
        }
        tagKeys.forEach { queryItemValue in
            let queryItem = Smithy.URIQueryItem(name: "tagKeys".urlPercentEncoding(), value: Swift.String(queryItemValue).urlPercentEncoding())
            items.append(queryItem)
        }
        return items
    }
}

extension UpdateBotInput {

    static func urlPathProvider(_ value: UpdateBotInput) -> Swift.String? {
        guard let botId = value.botId else {
            return nil
        }
        return "/bots/\(botId.urlPercentEncoding())"
    }
}

extension UpdateBotAliasInput {

    static func urlPathProvider(_ value: UpdateBotAliasInput) -> Swift.String? {
        guard let botId = value.botId else {
            return nil
        }
        guard let botAliasId = value.botAliasId else {
            return nil
        }
        return "/bots/\(botId.urlPercentEncoding())/botaliases/\(botAliasId.urlPercentEncoding())"
    }
}

extension UpdateBotLocaleInput {

    static func urlPathProvider(_ value: UpdateBotLocaleInput) -> Swift.String? {
        guard let botId = value.botId else {
            return nil
        }
        guard let botVersion = value.botVersion else {
            return nil
        }
        guard let localeId = value.localeId else {
            return nil
        }
        return "/bots/\(botId.urlPercentEncoding())/botversions/\(botVersion.urlPercentEncoding())/botlocales/\(localeId.urlPercentEncoding())"
    }
}

extension UpdateBotRecommendationInput {

    static func urlPathProvider(_ value: UpdateBotRecommendationInput) -> Swift.String? {
        guard let botId = value.botId else {
            return nil
        }
        guard let botVersion = value.botVersion else {
            return nil
        }
        guard let localeId = value.localeId else {
            return nil
        }
        guard let botRecommendationId = value.botRecommendationId else {
            return nil
        }
        return "/bots/\(botId.urlPercentEncoding())/botversions/\(botVersion.urlPercentEncoding())/botlocales/\(localeId.urlPercentEncoding())/botrecommendations/\(botRecommendationId.urlPercentEncoding())"
    }
}

extension UpdateExportInput {

    static func urlPathProvider(_ value: UpdateExportInput) -> Swift.String? {
        guard let exportId = value.exportId else {
            return nil
        }
        return "/exports/\(exportId.urlPercentEncoding())"
    }
}

extension UpdateIntentInput {

    static func urlPathProvider(_ value: UpdateIntentInput) -> Swift.String? {
        guard let botId = value.botId else {
            return nil
        }
        guard let botVersion = value.botVersion else {
            return nil
        }
        guard let localeId = value.localeId else {
            return nil
        }
        guard let intentId = value.intentId else {
            return nil
        }
        return "/bots/\(botId.urlPercentEncoding())/botversions/\(botVersion.urlPercentEncoding())/botlocales/\(localeId.urlPercentEncoding())/intents/\(intentId.urlPercentEncoding())"
    }
}

extension UpdateResourcePolicyInput {

    static func urlPathProvider(_ value: UpdateResourcePolicyInput) -> Swift.String? {
        guard let resourceArn = value.resourceArn else {
            return nil
        }
        return "/policy/\(resourceArn.urlPercentEncoding())"
    }
}

extension UpdateResourcePolicyInput {

    static func queryItemProvider(_ value: UpdateResourcePolicyInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        if let expectedRevisionId = value.expectedRevisionId {
            let expectedRevisionIdQueryItem = Smithy.URIQueryItem(name: "expectedRevisionId".urlPercentEncoding(), value: Swift.String(expectedRevisionId).urlPercentEncoding())
            items.append(expectedRevisionIdQueryItem)
        }
        return items
    }
}

extension UpdateSlotInput {

    static func urlPathProvider(_ value: UpdateSlotInput) -> Swift.String? {
        guard let botId = value.botId else {
            return nil
        }
        guard let botVersion = value.botVersion else {
            return nil
        }
        guard let localeId = value.localeId else {
            return nil
        }
        guard let intentId = value.intentId else {
            return nil
        }
        guard let slotId = value.slotId else {
            return nil
        }
        return "/bots/\(botId.urlPercentEncoding())/botversions/\(botVersion.urlPercentEncoding())/botlocales/\(localeId.urlPercentEncoding())/intents/\(intentId.urlPercentEncoding())/slots/\(slotId.urlPercentEncoding())"
    }
}

extension UpdateSlotTypeInput {

    static func urlPathProvider(_ value: UpdateSlotTypeInput) -> Swift.String? {
        guard let botId = value.botId else {
            return nil
        }
        guard let botVersion = value.botVersion else {
            return nil
        }
        guard let localeId = value.localeId else {
            return nil
        }
        guard let slotTypeId = value.slotTypeId else {
            return nil
        }
        return "/bots/\(botId.urlPercentEncoding())/botversions/\(botVersion.urlPercentEncoding())/botlocales/\(localeId.urlPercentEncoding())/slottypes/\(slotTypeId.urlPercentEncoding())"
    }
}

extension UpdateTestSetInput {

    static func urlPathProvider(_ value: UpdateTestSetInput) -> Swift.String? {
        guard let testSetId = value.testSetId else {
            return nil
        }
        return "/testsets/\(testSetId.urlPercentEncoding())"
    }
}

extension BatchCreateCustomVocabularyItemInput {

    static func write(value: BatchCreateCustomVocabularyItemInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["customVocabularyItemList"].writeList(value.customVocabularyItemList, memberWritingClosure: LexModelsV2ClientTypes.NewCustomVocabularyItem.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension BatchDeleteCustomVocabularyItemInput {

    static func write(value: BatchDeleteCustomVocabularyItemInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["customVocabularyItemList"].writeList(value.customVocabularyItemList, memberWritingClosure: LexModelsV2ClientTypes.CustomVocabularyEntryId.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension BatchUpdateCustomVocabularyItemInput {

    static func write(value: BatchUpdateCustomVocabularyItemInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["customVocabularyItemList"].writeList(value.customVocabularyItemList, memberWritingClosure: LexModelsV2ClientTypes.CustomVocabularyItem.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension CreateBotInput {

    static func write(value: CreateBotInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["botMembers"].writeList(value.botMembers, memberWritingClosure: LexModelsV2ClientTypes.BotMember.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["botName"].write(value.botName)
        try writer["botTags"].writeMap(value.botTags, valueWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        try writer["botType"].write(value.botType)
        try writer["dataPrivacy"].write(value.dataPrivacy, with: LexModelsV2ClientTypes.DataPrivacy.write(value:to:))
        try writer["description"].write(value.description)
        try writer["idleSessionTTLInSeconds"].write(value.idleSessionTTLInSeconds)
        try writer["roleArn"].write(value.roleArn)
        try writer["testBotAliasTags"].writeMap(value.testBotAliasTags, valueWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
    }
}

extension CreateBotAliasInput {

    static func write(value: CreateBotAliasInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["botAliasLocaleSettings"].writeMap(value.botAliasLocaleSettings, valueWritingClosure: LexModelsV2ClientTypes.BotAliasLocaleSettings.write(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        try writer["botAliasName"].write(value.botAliasName)
        try writer["botVersion"].write(value.botVersion)
        try writer["conversationLogSettings"].write(value.conversationLogSettings, with: LexModelsV2ClientTypes.ConversationLogSettings.write(value:to:))
        try writer["description"].write(value.description)
        try writer["sentimentAnalysisSettings"].write(value.sentimentAnalysisSettings, with: LexModelsV2ClientTypes.SentimentAnalysisSettings.write(value:to:))
        try writer["tags"].writeMap(value.tags, valueWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
    }
}

extension CreateBotLocaleInput {

    static func write(value: CreateBotLocaleInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["description"].write(value.description)
        try writer["generativeAISettings"].write(value.generativeAISettings, with: LexModelsV2ClientTypes.GenerativeAISettings.write(value:to:))
        try writer["localeId"].write(value.localeId)
        try writer["nluIntentConfidenceThreshold"].write(value.nluIntentConfidenceThreshold)
        try writer["voiceSettings"].write(value.voiceSettings, with: LexModelsV2ClientTypes.VoiceSettings.write(value:to:))
    }
}

extension CreateBotReplicaInput {

    static func write(value: CreateBotReplicaInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["replicaRegion"].write(value.replicaRegion)
    }
}

extension CreateBotVersionInput {

    static func write(value: CreateBotVersionInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["botVersionLocaleSpecification"].writeMap(value.botVersionLocaleSpecification, valueWritingClosure: LexModelsV2ClientTypes.BotVersionLocaleDetails.write(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        try writer["description"].write(value.description)
    }
}

extension CreateExportInput {

    static func write(value: CreateExportInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["fileFormat"].write(value.fileFormat)
        try writer["filePassword"].write(value.filePassword)
        try writer["resourceSpecification"].write(value.resourceSpecification, with: LexModelsV2ClientTypes.ExportResourceSpecification.write(value:to:))
    }
}

extension CreateIntentInput {

    static func write(value: CreateIntentInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["description"].write(value.description)
        try writer["dialogCodeHook"].write(value.dialogCodeHook, with: LexModelsV2ClientTypes.DialogCodeHookSettings.write(value:to:))
        try writer["fulfillmentCodeHook"].write(value.fulfillmentCodeHook, with: LexModelsV2ClientTypes.FulfillmentCodeHookSettings.write(value:to:))
        try writer["initialResponseSetting"].write(value.initialResponseSetting, with: LexModelsV2ClientTypes.InitialResponseSetting.write(value:to:))
        try writer["inputContexts"].writeList(value.inputContexts, memberWritingClosure: LexModelsV2ClientTypes.InputContext.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["intentClosingSetting"].write(value.intentClosingSetting, with: LexModelsV2ClientTypes.IntentClosingSetting.write(value:to:))
        try writer["intentConfirmationSetting"].write(value.intentConfirmationSetting, with: LexModelsV2ClientTypes.IntentConfirmationSetting.write(value:to:))
        try writer["intentName"].write(value.intentName)
        try writer["kendraConfiguration"].write(value.kendraConfiguration, with: LexModelsV2ClientTypes.KendraConfiguration.write(value:to:))
        try writer["outputContexts"].writeList(value.outputContexts, memberWritingClosure: LexModelsV2ClientTypes.OutputContext.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["parentIntentSignature"].write(value.parentIntentSignature)
        try writer["qnAIntentConfiguration"].write(value.qnAIntentConfiguration, with: LexModelsV2ClientTypes.QnAIntentConfiguration.write(value:to:))
        try writer["sampleUtterances"].writeList(value.sampleUtterances, memberWritingClosure: LexModelsV2ClientTypes.SampleUtterance.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension CreateResourcePolicyInput {

    static func write(value: CreateResourcePolicyInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["policy"].write(value.policy)
    }
}

extension CreateResourcePolicyStatementInput {

    static func write(value: CreateResourcePolicyStatementInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["action"].writeList(value.action, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["condition"].writeMap(value.condition, valueWritingClosure: SmithyReadWrite.mapWritingClosure(valueWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        try writer["effect"].write(value.effect)
        try writer["principal"].writeList(value.principal, memberWritingClosure: LexModelsV2ClientTypes.Principal.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["statementId"].write(value.statementId)
    }
}

extension CreateSlotInput {

    static func write(value: CreateSlotInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["description"].write(value.description)
        try writer["multipleValuesSetting"].write(value.multipleValuesSetting, with: LexModelsV2ClientTypes.MultipleValuesSetting.write(value:to:))
        try writer["obfuscationSetting"].write(value.obfuscationSetting, with: LexModelsV2ClientTypes.ObfuscationSetting.write(value:to:))
        try writer["slotName"].write(value.slotName)
        try writer["slotTypeId"].write(value.slotTypeId)
        try writer["subSlotSetting"].write(value.subSlotSetting, with: LexModelsV2ClientTypes.SubSlotSetting.write(value:to:))
        try writer["valueElicitationSetting"].write(value.valueElicitationSetting, with: LexModelsV2ClientTypes.SlotValueElicitationSetting.write(value:to:))
    }
}

extension CreateSlotTypeInput {

    static func write(value: CreateSlotTypeInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["compositeSlotTypeSetting"].write(value.compositeSlotTypeSetting, with: LexModelsV2ClientTypes.CompositeSlotTypeSetting.write(value:to:))
        try writer["description"].write(value.description)
        try writer["externalSourceSetting"].write(value.externalSourceSetting, with: LexModelsV2ClientTypes.ExternalSourceSetting.write(value:to:))
        try writer["parentSlotTypeSignature"].write(value.parentSlotTypeSignature)
        try writer["slotTypeName"].write(value.slotTypeName)
        try writer["slotTypeValues"].writeList(value.slotTypeValues, memberWritingClosure: LexModelsV2ClientTypes.SlotTypeValue.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["valueSelectionSetting"].write(value.valueSelectionSetting, with: LexModelsV2ClientTypes.SlotValueSelectionSetting.write(value:to:))
    }
}

extension CreateTestSetDiscrepancyReportInput {

    static func write(value: CreateTestSetDiscrepancyReportInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["target"].write(value.target, with: LexModelsV2ClientTypes.TestSetDiscrepancyReportResourceTarget.write(value:to:))
    }
}

extension GenerateBotElementInput {

    static func write(value: GenerateBotElementInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["intentId"].write(value.intentId)
    }
}

extension ListAggregatedUtterancesInput {

    static func write(value: ListAggregatedUtterancesInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["aggregationDuration"].write(value.aggregationDuration, with: LexModelsV2ClientTypes.UtteranceAggregationDuration.write(value:to:))
        try writer["botAliasId"].write(value.botAliasId)
        try writer["botVersion"].write(value.botVersion)
        try writer["filters"].writeList(value.filters, memberWritingClosure: LexModelsV2ClientTypes.AggregatedUtterancesFilter.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["localeId"].write(value.localeId)
        try writer["maxResults"].write(value.maxResults)
        try writer["nextToken"].write(value.nextToken)
        try writer["sortBy"].write(value.sortBy, with: LexModelsV2ClientTypes.AggregatedUtterancesSortBy.write(value:to:))
    }
}

extension ListBotAliasesInput {

    static func write(value: ListBotAliasesInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["maxResults"].write(value.maxResults)
        try writer["nextToken"].write(value.nextToken)
    }
}

extension ListBotAliasReplicasInput {

    static func write(value: ListBotAliasReplicasInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["maxResults"].write(value.maxResults)
        try writer["nextToken"].write(value.nextToken)
    }
}

extension ListBotLocalesInput {

    static func write(value: ListBotLocalesInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["filters"].writeList(value.filters, memberWritingClosure: LexModelsV2ClientTypes.BotLocaleFilter.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["maxResults"].write(value.maxResults)
        try writer["nextToken"].write(value.nextToken)
        try writer["sortBy"].write(value.sortBy, with: LexModelsV2ClientTypes.BotLocaleSortBy.write(value:to:))
    }
}

extension ListBotRecommendationsInput {

    static func write(value: ListBotRecommendationsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["maxResults"].write(value.maxResults)
        try writer["nextToken"].write(value.nextToken)
    }
}

extension ListBotResourceGenerationsInput {

    static func write(value: ListBotResourceGenerationsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["maxResults"].write(value.maxResults)
        try writer["nextToken"].write(value.nextToken)
        try writer["sortBy"].write(value.sortBy, with: LexModelsV2ClientTypes.GenerationSortBy.write(value:to:))
    }
}

extension ListBotsInput {

    static func write(value: ListBotsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["filters"].writeList(value.filters, memberWritingClosure: LexModelsV2ClientTypes.BotFilter.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["maxResults"].write(value.maxResults)
        try writer["nextToken"].write(value.nextToken)
        try writer["sortBy"].write(value.sortBy, with: LexModelsV2ClientTypes.BotSortBy.write(value:to:))
    }
}

extension ListBotVersionReplicasInput {

    static func write(value: ListBotVersionReplicasInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["maxResults"].write(value.maxResults)
        try writer["nextToken"].write(value.nextToken)
        try writer["sortBy"].write(value.sortBy, with: LexModelsV2ClientTypes.BotVersionReplicaSortBy.write(value:to:))
    }
}

extension ListBotVersionsInput {

    static func write(value: ListBotVersionsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["maxResults"].write(value.maxResults)
        try writer["nextToken"].write(value.nextToken)
        try writer["sortBy"].write(value.sortBy, with: LexModelsV2ClientTypes.BotVersionSortBy.write(value:to:))
    }
}

extension ListBuiltInIntentsInput {

    static func write(value: ListBuiltInIntentsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["maxResults"].write(value.maxResults)
        try writer["nextToken"].write(value.nextToken)
        try writer["sortBy"].write(value.sortBy, with: LexModelsV2ClientTypes.BuiltInIntentSortBy.write(value:to:))
    }
}

extension ListBuiltInSlotTypesInput {

    static func write(value: ListBuiltInSlotTypesInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["maxResults"].write(value.maxResults)
        try writer["nextToken"].write(value.nextToken)
        try writer["sortBy"].write(value.sortBy, with: LexModelsV2ClientTypes.BuiltInSlotTypeSortBy.write(value:to:))
    }
}

extension ListCustomVocabularyItemsInput {

    static func write(value: ListCustomVocabularyItemsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["maxResults"].write(value.maxResults)
        try writer["nextToken"].write(value.nextToken)
    }
}

extension ListExportsInput {

    static func write(value: ListExportsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["botId"].write(value.botId)
        try writer["botVersion"].write(value.botVersion)
        try writer["filters"].writeList(value.filters, memberWritingClosure: LexModelsV2ClientTypes.ExportFilter.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["localeId"].write(value.localeId)
        try writer["maxResults"].write(value.maxResults)
        try writer["nextToken"].write(value.nextToken)
        try writer["sortBy"].write(value.sortBy, with: LexModelsV2ClientTypes.ExportSortBy.write(value:to:))
    }
}

extension ListImportsInput {

    static func write(value: ListImportsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["botId"].write(value.botId)
        try writer["botVersion"].write(value.botVersion)
        try writer["filters"].writeList(value.filters, memberWritingClosure: LexModelsV2ClientTypes.ImportFilter.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["localeId"].write(value.localeId)
        try writer["maxResults"].write(value.maxResults)
        try writer["nextToken"].write(value.nextToken)
        try writer["sortBy"].write(value.sortBy, with: LexModelsV2ClientTypes.ImportSortBy.write(value:to:))
    }
}

extension ListIntentMetricsInput {

    static func write(value: ListIntentMetricsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["binBy"].writeList(value.binBy, memberWritingClosure: LexModelsV2ClientTypes.AnalyticsBinBySpecification.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["endDateTime"].writeTimestamp(value.endDateTime, format: SmithyTimestamps.TimestampFormat.epochSeconds)
        try writer["filters"].writeList(value.filters, memberWritingClosure: LexModelsV2ClientTypes.AnalyticsIntentFilter.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["groupBy"].writeList(value.groupBy, memberWritingClosure: LexModelsV2ClientTypes.AnalyticsIntentGroupBySpecification.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["maxResults"].write(value.maxResults)
        try writer["metrics"].writeList(value.metrics, memberWritingClosure: LexModelsV2ClientTypes.AnalyticsIntentMetric.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["nextToken"].write(value.nextToken)
        try writer["startDateTime"].writeTimestamp(value.startDateTime, format: SmithyTimestamps.TimestampFormat.epochSeconds)
    }
}

extension ListIntentPathsInput {

    static func write(value: ListIntentPathsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["endDateTime"].writeTimestamp(value.endDateTime, format: SmithyTimestamps.TimestampFormat.epochSeconds)
        try writer["filters"].writeList(value.filters, memberWritingClosure: LexModelsV2ClientTypes.AnalyticsPathFilter.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["intentPath"].write(value.intentPath)
        try writer["startDateTime"].writeTimestamp(value.startDateTime, format: SmithyTimestamps.TimestampFormat.epochSeconds)
    }
}

extension ListIntentsInput {

    static func write(value: ListIntentsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["filters"].writeList(value.filters, memberWritingClosure: LexModelsV2ClientTypes.IntentFilter.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["maxResults"].write(value.maxResults)
        try writer["nextToken"].write(value.nextToken)
        try writer["sortBy"].write(value.sortBy, with: LexModelsV2ClientTypes.IntentSortBy.write(value:to:))
    }
}

extension ListIntentStageMetricsInput {

    static func write(value: ListIntentStageMetricsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["binBy"].writeList(value.binBy, memberWritingClosure: LexModelsV2ClientTypes.AnalyticsBinBySpecification.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["endDateTime"].writeTimestamp(value.endDateTime, format: SmithyTimestamps.TimestampFormat.epochSeconds)
        try writer["filters"].writeList(value.filters, memberWritingClosure: LexModelsV2ClientTypes.AnalyticsIntentStageFilter.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["groupBy"].writeList(value.groupBy, memberWritingClosure: LexModelsV2ClientTypes.AnalyticsIntentStageGroupBySpecification.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["maxResults"].write(value.maxResults)
        try writer["metrics"].writeList(value.metrics, memberWritingClosure: LexModelsV2ClientTypes.AnalyticsIntentStageMetric.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["nextToken"].write(value.nextToken)
        try writer["startDateTime"].writeTimestamp(value.startDateTime, format: SmithyTimestamps.TimestampFormat.epochSeconds)
    }
}

extension ListRecommendedIntentsInput {

    static func write(value: ListRecommendedIntentsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["maxResults"].write(value.maxResults)
        try writer["nextToken"].write(value.nextToken)
    }
}

extension ListSessionAnalyticsDataInput {

    static func write(value: ListSessionAnalyticsDataInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["endDateTime"].writeTimestamp(value.endDateTime, format: SmithyTimestamps.TimestampFormat.epochSeconds)
        try writer["filters"].writeList(value.filters, memberWritingClosure: LexModelsV2ClientTypes.AnalyticsSessionFilter.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["maxResults"].write(value.maxResults)
        try writer["nextToken"].write(value.nextToken)
        try writer["sortBy"].write(value.sortBy, with: LexModelsV2ClientTypes.SessionDataSortBy.write(value:to:))
        try writer["startDateTime"].writeTimestamp(value.startDateTime, format: SmithyTimestamps.TimestampFormat.epochSeconds)
    }
}

extension ListSessionMetricsInput {

    static func write(value: ListSessionMetricsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["binBy"].writeList(value.binBy, memberWritingClosure: LexModelsV2ClientTypes.AnalyticsBinBySpecification.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["endDateTime"].writeTimestamp(value.endDateTime, format: SmithyTimestamps.TimestampFormat.epochSeconds)
        try writer["filters"].writeList(value.filters, memberWritingClosure: LexModelsV2ClientTypes.AnalyticsSessionFilter.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["groupBy"].writeList(value.groupBy, memberWritingClosure: LexModelsV2ClientTypes.AnalyticsSessionGroupBySpecification.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["maxResults"].write(value.maxResults)
        try writer["metrics"].writeList(value.metrics, memberWritingClosure: LexModelsV2ClientTypes.AnalyticsSessionMetric.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["nextToken"].write(value.nextToken)
        try writer["startDateTime"].writeTimestamp(value.startDateTime, format: SmithyTimestamps.TimestampFormat.epochSeconds)
    }
}

extension ListSlotsInput {

    static func write(value: ListSlotsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["filters"].writeList(value.filters, memberWritingClosure: LexModelsV2ClientTypes.SlotFilter.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["maxResults"].write(value.maxResults)
        try writer["nextToken"].write(value.nextToken)
        try writer["sortBy"].write(value.sortBy, with: LexModelsV2ClientTypes.SlotSortBy.write(value:to:))
    }
}

extension ListSlotTypesInput {

    static func write(value: ListSlotTypesInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["filters"].writeList(value.filters, memberWritingClosure: LexModelsV2ClientTypes.SlotTypeFilter.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["maxResults"].write(value.maxResults)
        try writer["nextToken"].write(value.nextToken)
        try writer["sortBy"].write(value.sortBy, with: LexModelsV2ClientTypes.SlotTypeSortBy.write(value:to:))
    }
}

extension ListTestExecutionResultItemsInput {

    static func write(value: ListTestExecutionResultItemsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["maxResults"].write(value.maxResults)
        try writer["nextToken"].write(value.nextToken)
        try writer["resultFilterBy"].write(value.resultFilterBy, with: LexModelsV2ClientTypes.TestExecutionResultFilterBy.write(value:to:))
    }
}

extension ListTestExecutionsInput {

    static func write(value: ListTestExecutionsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["maxResults"].write(value.maxResults)
        try writer["nextToken"].write(value.nextToken)
        try writer["sortBy"].write(value.sortBy, with: LexModelsV2ClientTypes.TestExecutionSortBy.write(value:to:))
    }
}

extension ListTestSetRecordsInput {

    static func write(value: ListTestSetRecordsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["maxResults"].write(value.maxResults)
        try writer["nextToken"].write(value.nextToken)
    }
}

extension ListTestSetsInput {

    static func write(value: ListTestSetsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["maxResults"].write(value.maxResults)
        try writer["nextToken"].write(value.nextToken)
        try writer["sortBy"].write(value.sortBy, with: LexModelsV2ClientTypes.TestSetSortBy.write(value:to:))
    }
}

extension ListUtteranceAnalyticsDataInput {

    static func write(value: ListUtteranceAnalyticsDataInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["endDateTime"].writeTimestamp(value.endDateTime, format: SmithyTimestamps.TimestampFormat.epochSeconds)
        try writer["filters"].writeList(value.filters, memberWritingClosure: LexModelsV2ClientTypes.AnalyticsUtteranceFilter.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["maxResults"].write(value.maxResults)
        try writer["nextToken"].write(value.nextToken)
        try writer["sortBy"].write(value.sortBy, with: LexModelsV2ClientTypes.UtteranceDataSortBy.write(value:to:))
        try writer["startDateTime"].writeTimestamp(value.startDateTime, format: SmithyTimestamps.TimestampFormat.epochSeconds)
    }
}

extension ListUtteranceMetricsInput {

    static func write(value: ListUtteranceMetricsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["attributes"].writeList(value.attributes, memberWritingClosure: LexModelsV2ClientTypes.AnalyticsUtteranceAttribute.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["binBy"].writeList(value.binBy, memberWritingClosure: LexModelsV2ClientTypes.AnalyticsBinBySpecification.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["endDateTime"].writeTimestamp(value.endDateTime, format: SmithyTimestamps.TimestampFormat.epochSeconds)
        try writer["filters"].writeList(value.filters, memberWritingClosure: LexModelsV2ClientTypes.AnalyticsUtteranceFilter.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["groupBy"].writeList(value.groupBy, memberWritingClosure: LexModelsV2ClientTypes.AnalyticsUtteranceGroupBySpecification.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["maxResults"].write(value.maxResults)
        try writer["metrics"].writeList(value.metrics, memberWritingClosure: LexModelsV2ClientTypes.AnalyticsUtteranceMetric.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["nextToken"].write(value.nextToken)
        try writer["startDateTime"].writeTimestamp(value.startDateTime, format: SmithyTimestamps.TimestampFormat.epochSeconds)
    }
}

extension SearchAssociatedTranscriptsInput {

    static func write(value: SearchAssociatedTranscriptsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["filters"].writeList(value.filters, memberWritingClosure: LexModelsV2ClientTypes.AssociatedTranscriptFilter.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["maxResults"].write(value.maxResults)
        try writer["nextIndex"].write(value.nextIndex)
        try writer["searchOrder"].write(value.searchOrder)
    }
}

extension StartBotRecommendationInput {

    static func write(value: StartBotRecommendationInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["encryptionSetting"].write(value.encryptionSetting, with: LexModelsV2ClientTypes.EncryptionSetting.write(value:to:))
        try writer["transcriptSourceSetting"].write(value.transcriptSourceSetting, with: LexModelsV2ClientTypes.TranscriptSourceSetting.write(value:to:))
    }
}

extension StartBotResourceGenerationInput {

    static func write(value: StartBotResourceGenerationInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["generationInputPrompt"].write(value.generationInputPrompt)
    }
}

extension StartImportInput {

    static func write(value: StartImportInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["filePassword"].write(value.filePassword)
        try writer["importId"].write(value.importId)
        try writer["mergeStrategy"].write(value.mergeStrategy)
        try writer["resourceSpecification"].write(value.resourceSpecification, with: LexModelsV2ClientTypes.ImportResourceSpecification.write(value:to:))
    }
}

extension StartTestExecutionInput {

    static func write(value: StartTestExecutionInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["apiMode"].write(value.apiMode)
        try writer["target"].write(value.target, with: LexModelsV2ClientTypes.TestExecutionTarget.write(value:to:))
        try writer["testExecutionModality"].write(value.testExecutionModality)
    }
}

extension StartTestSetGenerationInput {

    static func write(value: StartTestSetGenerationInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["description"].write(value.description)
        try writer["generationDataSource"].write(value.generationDataSource, with: LexModelsV2ClientTypes.TestSetGenerationDataSource.write(value:to:))
        try writer["roleArn"].write(value.roleArn)
        try writer["storageLocation"].write(value.storageLocation, with: LexModelsV2ClientTypes.TestSetStorageLocation.write(value:to:))
        try writer["testSetName"].write(value.testSetName)
        try writer["testSetTags"].writeMap(value.testSetTags, valueWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
    }
}

extension TagResourceInput {

    static func write(value: TagResourceInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["tags"].writeMap(value.tags, valueWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
    }
}

extension UpdateBotInput {

    static func write(value: UpdateBotInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["botMembers"].writeList(value.botMembers, memberWritingClosure: LexModelsV2ClientTypes.BotMember.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["botName"].write(value.botName)
        try writer["botType"].write(value.botType)
        try writer["dataPrivacy"].write(value.dataPrivacy, with: LexModelsV2ClientTypes.DataPrivacy.write(value:to:))
        try writer["description"].write(value.description)
        try writer["idleSessionTTLInSeconds"].write(value.idleSessionTTLInSeconds)
        try writer["roleArn"].write(value.roleArn)
    }
}

extension UpdateBotAliasInput {

    static func write(value: UpdateBotAliasInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["botAliasLocaleSettings"].writeMap(value.botAliasLocaleSettings, valueWritingClosure: LexModelsV2ClientTypes.BotAliasLocaleSettings.write(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        try writer["botAliasName"].write(value.botAliasName)
        try writer["botVersion"].write(value.botVersion)
        try writer["conversationLogSettings"].write(value.conversationLogSettings, with: LexModelsV2ClientTypes.ConversationLogSettings.write(value:to:))
        try writer["description"].write(value.description)
        try writer["sentimentAnalysisSettings"].write(value.sentimentAnalysisSettings, with: LexModelsV2ClientTypes.SentimentAnalysisSettings.write(value:to:))
    }
}

extension UpdateBotLocaleInput {

    static func write(value: UpdateBotLocaleInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["description"].write(value.description)
        try writer["generativeAISettings"].write(value.generativeAISettings, with: LexModelsV2ClientTypes.GenerativeAISettings.write(value:to:))
        try writer["nluIntentConfidenceThreshold"].write(value.nluIntentConfidenceThreshold)
        try writer["voiceSettings"].write(value.voiceSettings, with: LexModelsV2ClientTypes.VoiceSettings.write(value:to:))
    }
}

extension UpdateBotRecommendationInput {

    static func write(value: UpdateBotRecommendationInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["encryptionSetting"].write(value.encryptionSetting, with: LexModelsV2ClientTypes.EncryptionSetting.write(value:to:))
    }
}

extension UpdateExportInput {

    static func write(value: UpdateExportInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["filePassword"].write(value.filePassword)
    }
}

extension UpdateIntentInput {

    static func write(value: UpdateIntentInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["description"].write(value.description)
        try writer["dialogCodeHook"].write(value.dialogCodeHook, with: LexModelsV2ClientTypes.DialogCodeHookSettings.write(value:to:))
        try writer["fulfillmentCodeHook"].write(value.fulfillmentCodeHook, with: LexModelsV2ClientTypes.FulfillmentCodeHookSettings.write(value:to:))
        try writer["initialResponseSetting"].write(value.initialResponseSetting, with: LexModelsV2ClientTypes.InitialResponseSetting.write(value:to:))
        try writer["inputContexts"].writeList(value.inputContexts, memberWritingClosure: LexModelsV2ClientTypes.InputContext.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["intentClosingSetting"].write(value.intentClosingSetting, with: LexModelsV2ClientTypes.IntentClosingSetting.write(value:to:))
        try writer["intentConfirmationSetting"].write(value.intentConfirmationSetting, with: LexModelsV2ClientTypes.IntentConfirmationSetting.write(value:to:))
        try writer["intentName"].write(value.intentName)
        try writer["kendraConfiguration"].write(value.kendraConfiguration, with: LexModelsV2ClientTypes.KendraConfiguration.write(value:to:))
        try writer["outputContexts"].writeList(value.outputContexts, memberWritingClosure: LexModelsV2ClientTypes.OutputContext.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["parentIntentSignature"].write(value.parentIntentSignature)
        try writer["qnAIntentConfiguration"].write(value.qnAIntentConfiguration, with: LexModelsV2ClientTypes.QnAIntentConfiguration.write(value:to:))
        try writer["sampleUtterances"].writeList(value.sampleUtterances, memberWritingClosure: LexModelsV2ClientTypes.SampleUtterance.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["slotPriorities"].writeList(value.slotPriorities, memberWritingClosure: LexModelsV2ClientTypes.SlotPriority.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension UpdateResourcePolicyInput {

    static func write(value: UpdateResourcePolicyInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["policy"].write(value.policy)
    }
}

extension UpdateSlotInput {

    static func write(value: UpdateSlotInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["description"].write(value.description)
        try writer["multipleValuesSetting"].write(value.multipleValuesSetting, with: LexModelsV2ClientTypes.MultipleValuesSetting.write(value:to:))
        try writer["obfuscationSetting"].write(value.obfuscationSetting, with: LexModelsV2ClientTypes.ObfuscationSetting.write(value:to:))
        try writer["slotName"].write(value.slotName)
        try writer["slotTypeId"].write(value.slotTypeId)
        try writer["subSlotSetting"].write(value.subSlotSetting, with: LexModelsV2ClientTypes.SubSlotSetting.write(value:to:))
        try writer["valueElicitationSetting"].write(value.valueElicitationSetting, with: LexModelsV2ClientTypes.SlotValueElicitationSetting.write(value:to:))
    }
}

extension UpdateSlotTypeInput {

    static func write(value: UpdateSlotTypeInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["compositeSlotTypeSetting"].write(value.compositeSlotTypeSetting, with: LexModelsV2ClientTypes.CompositeSlotTypeSetting.write(value:to:))
        try writer["description"].write(value.description)
        try writer["externalSourceSetting"].write(value.externalSourceSetting, with: LexModelsV2ClientTypes.ExternalSourceSetting.write(value:to:))
        try writer["parentSlotTypeSignature"].write(value.parentSlotTypeSignature)
        try writer["slotTypeName"].write(value.slotTypeName)
        try writer["slotTypeValues"].writeList(value.slotTypeValues, memberWritingClosure: LexModelsV2ClientTypes.SlotTypeValue.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["valueSelectionSetting"].write(value.valueSelectionSetting, with: LexModelsV2ClientTypes.SlotValueSelectionSetting.write(value:to:))
    }
}

extension UpdateTestSetInput {

    static func write(value: UpdateTestSetInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["description"].write(value.description)
        try writer["testSetName"].write(value.testSetName)
    }
}

extension BatchCreateCustomVocabularyItemOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> BatchCreateCustomVocabularyItemOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = BatchCreateCustomVocabularyItemOutput()
        value.botId = try reader["botId"].readIfPresent()
        value.botVersion = try reader["botVersion"].readIfPresent()
        value.errors = try reader["errors"].readListIfPresent(memberReadingClosure: LexModelsV2ClientTypes.FailedCustomVocabularyItem.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.localeId = try reader["localeId"].readIfPresent()
        value.resources = try reader["resources"].readListIfPresent(memberReadingClosure: LexModelsV2ClientTypes.CustomVocabularyItem.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension BatchDeleteCustomVocabularyItemOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> BatchDeleteCustomVocabularyItemOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = BatchDeleteCustomVocabularyItemOutput()
        value.botId = try reader["botId"].readIfPresent()
        value.botVersion = try reader["botVersion"].readIfPresent()
        value.errors = try reader["errors"].readListIfPresent(memberReadingClosure: LexModelsV2ClientTypes.FailedCustomVocabularyItem.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.localeId = try reader["localeId"].readIfPresent()
        value.resources = try reader["resources"].readListIfPresent(memberReadingClosure: LexModelsV2ClientTypes.CustomVocabularyItem.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension BatchUpdateCustomVocabularyItemOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> BatchUpdateCustomVocabularyItemOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = BatchUpdateCustomVocabularyItemOutput()
        value.botId = try reader["botId"].readIfPresent()
        value.botVersion = try reader["botVersion"].readIfPresent()
        value.errors = try reader["errors"].readListIfPresent(memberReadingClosure: LexModelsV2ClientTypes.FailedCustomVocabularyItem.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.localeId = try reader["localeId"].readIfPresent()
        value.resources = try reader["resources"].readListIfPresent(memberReadingClosure: LexModelsV2ClientTypes.CustomVocabularyItem.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension BuildBotLocaleOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> BuildBotLocaleOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = BuildBotLocaleOutput()
        value.botId = try reader["botId"].readIfPresent()
        value.botLocaleStatus = try reader["botLocaleStatus"].readIfPresent()
        value.botVersion = try reader["botVersion"].readIfPresent()
        value.lastBuildSubmittedDateTime = try reader["lastBuildSubmittedDateTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.localeId = try reader["localeId"].readIfPresent()
        return value
    }
}

extension CreateBotOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateBotOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateBotOutput()
        value.botId = try reader["botId"].readIfPresent()
        value.botMembers = try reader["botMembers"].readListIfPresent(memberReadingClosure: LexModelsV2ClientTypes.BotMember.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.botName = try reader["botName"].readIfPresent()
        value.botStatus = try reader["botStatus"].readIfPresent()
        value.botTags = try reader["botTags"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        value.botType = try reader["botType"].readIfPresent()
        value.creationDateTime = try reader["creationDateTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.dataPrivacy = try reader["dataPrivacy"].readIfPresent(with: LexModelsV2ClientTypes.DataPrivacy.read(from:))
        value.description = try reader["description"].readIfPresent()
        value.idleSessionTTLInSeconds = try reader["idleSessionTTLInSeconds"].readIfPresent()
        value.roleArn = try reader["roleArn"].readIfPresent()
        value.testBotAliasTags = try reader["testBotAliasTags"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        return value
    }
}

extension CreateBotAliasOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateBotAliasOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateBotAliasOutput()
        value.botAliasId = try reader["botAliasId"].readIfPresent()
        value.botAliasLocaleSettings = try reader["botAliasLocaleSettings"].readMapIfPresent(valueReadingClosure: LexModelsV2ClientTypes.BotAliasLocaleSettings.read(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        value.botAliasName = try reader["botAliasName"].readIfPresent()
        value.botAliasStatus = try reader["botAliasStatus"].readIfPresent()
        value.botId = try reader["botId"].readIfPresent()
        value.botVersion = try reader["botVersion"].readIfPresent()
        value.conversationLogSettings = try reader["conversationLogSettings"].readIfPresent(with: LexModelsV2ClientTypes.ConversationLogSettings.read(from:))
        value.creationDateTime = try reader["creationDateTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.description = try reader["description"].readIfPresent()
        value.sentimentAnalysisSettings = try reader["sentimentAnalysisSettings"].readIfPresent(with: LexModelsV2ClientTypes.SentimentAnalysisSettings.read(from:))
        value.tags = try reader["tags"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        return value
    }
}

extension CreateBotLocaleOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateBotLocaleOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateBotLocaleOutput()
        value.botId = try reader["botId"].readIfPresent()
        value.botLocaleStatus = try reader["botLocaleStatus"].readIfPresent()
        value.botVersion = try reader["botVersion"].readIfPresent()
        value.creationDateTime = try reader["creationDateTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.description = try reader["description"].readIfPresent()
        value.generativeAISettings = try reader["generativeAISettings"].readIfPresent(with: LexModelsV2ClientTypes.GenerativeAISettings.read(from:))
        value.localeId = try reader["localeId"].readIfPresent()
        value.localeName = try reader["localeName"].readIfPresent()
        value.nluIntentConfidenceThreshold = try reader["nluIntentConfidenceThreshold"].readIfPresent()
        value.voiceSettings = try reader["voiceSettings"].readIfPresent(with: LexModelsV2ClientTypes.VoiceSettings.read(from:))
        return value
    }
}

extension CreateBotReplicaOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateBotReplicaOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateBotReplicaOutput()
        value.botId = try reader["botId"].readIfPresent()
        value.botReplicaStatus = try reader["botReplicaStatus"].readIfPresent()
        value.creationDateTime = try reader["creationDateTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.replicaRegion = try reader["replicaRegion"].readIfPresent()
        value.sourceRegion = try reader["sourceRegion"].readIfPresent()
        return value
    }
}

extension CreateBotVersionOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateBotVersionOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateBotVersionOutput()
        value.botId = try reader["botId"].readIfPresent()
        value.botStatus = try reader["botStatus"].readIfPresent()
        value.botVersion = try reader["botVersion"].readIfPresent()
        value.botVersionLocaleSpecification = try reader["botVersionLocaleSpecification"].readMapIfPresent(valueReadingClosure: LexModelsV2ClientTypes.BotVersionLocaleDetails.read(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        value.creationDateTime = try reader["creationDateTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.description = try reader["description"].readIfPresent()
        return value
    }
}

extension CreateExportOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateExportOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateExportOutput()
        value.creationDateTime = try reader["creationDateTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.exportId = try reader["exportId"].readIfPresent()
        value.exportStatus = try reader["exportStatus"].readIfPresent()
        value.fileFormat = try reader["fileFormat"].readIfPresent()
        value.resourceSpecification = try reader["resourceSpecification"].readIfPresent(with: LexModelsV2ClientTypes.ExportResourceSpecification.read(from:))
        return value
    }
}

extension CreateIntentOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateIntentOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateIntentOutput()
        value.botId = try reader["botId"].readIfPresent()
        value.botVersion = try reader["botVersion"].readIfPresent()
        value.creationDateTime = try reader["creationDateTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.description = try reader["description"].readIfPresent()
        value.dialogCodeHook = try reader["dialogCodeHook"].readIfPresent(with: LexModelsV2ClientTypes.DialogCodeHookSettings.read(from:))
        value.fulfillmentCodeHook = try reader["fulfillmentCodeHook"].readIfPresent(with: LexModelsV2ClientTypes.FulfillmentCodeHookSettings.read(from:))
        value.initialResponseSetting = try reader["initialResponseSetting"].readIfPresent(with: LexModelsV2ClientTypes.InitialResponseSetting.read(from:))
        value.inputContexts = try reader["inputContexts"].readListIfPresent(memberReadingClosure: LexModelsV2ClientTypes.InputContext.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.intentClosingSetting = try reader["intentClosingSetting"].readIfPresent(with: LexModelsV2ClientTypes.IntentClosingSetting.read(from:))
        value.intentConfirmationSetting = try reader["intentConfirmationSetting"].readIfPresent(with: LexModelsV2ClientTypes.IntentConfirmationSetting.read(from:))
        value.intentId = try reader["intentId"].readIfPresent()
        value.intentName = try reader["intentName"].readIfPresent()
        value.kendraConfiguration = try reader["kendraConfiguration"].readIfPresent(with: LexModelsV2ClientTypes.KendraConfiguration.read(from:))
        value.localeId = try reader["localeId"].readIfPresent()
        value.outputContexts = try reader["outputContexts"].readListIfPresent(memberReadingClosure: LexModelsV2ClientTypes.OutputContext.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.parentIntentSignature = try reader["parentIntentSignature"].readIfPresent()
        value.qnAIntentConfiguration = try reader["qnAIntentConfiguration"].readIfPresent(with: LexModelsV2ClientTypes.QnAIntentConfiguration.read(from:))
        value.sampleUtterances = try reader["sampleUtterances"].readListIfPresent(memberReadingClosure: LexModelsV2ClientTypes.SampleUtterance.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension CreateResourcePolicyOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateResourcePolicyOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateResourcePolicyOutput()
        value.resourceArn = try reader["resourceArn"].readIfPresent()
        value.revisionId = try reader["revisionId"].readIfPresent()
        return value
    }
}

extension CreateResourcePolicyStatementOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateResourcePolicyStatementOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateResourcePolicyStatementOutput()
        value.resourceArn = try reader["resourceArn"].readIfPresent()
        value.revisionId = try reader["revisionId"].readIfPresent()
        return value
    }
}

extension CreateSlotOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateSlotOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateSlotOutput()
        value.botId = try reader["botId"].readIfPresent()
        value.botVersion = try reader["botVersion"].readIfPresent()
        value.creationDateTime = try reader["creationDateTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.description = try reader["description"].readIfPresent()
        value.intentId = try reader["intentId"].readIfPresent()
        value.localeId = try reader["localeId"].readIfPresent()
        value.multipleValuesSetting = try reader["multipleValuesSetting"].readIfPresent(with: LexModelsV2ClientTypes.MultipleValuesSetting.read(from:))
        value.obfuscationSetting = try reader["obfuscationSetting"].readIfPresent(with: LexModelsV2ClientTypes.ObfuscationSetting.read(from:))
        value.slotId = try reader["slotId"].readIfPresent()
        value.slotName = try reader["slotName"].readIfPresent()
        value.slotTypeId = try reader["slotTypeId"].readIfPresent()
        value.subSlotSetting = try reader["subSlotSetting"].readIfPresent(with: LexModelsV2ClientTypes.SubSlotSetting.read(from:))
        value.valueElicitationSetting = try reader["valueElicitationSetting"].readIfPresent(with: LexModelsV2ClientTypes.SlotValueElicitationSetting.read(from:))
        return value
    }
}

extension CreateSlotTypeOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateSlotTypeOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateSlotTypeOutput()
        value.botId = try reader["botId"].readIfPresent()
        value.botVersion = try reader["botVersion"].readIfPresent()
        value.compositeSlotTypeSetting = try reader["compositeSlotTypeSetting"].readIfPresent(with: LexModelsV2ClientTypes.CompositeSlotTypeSetting.read(from:))
        value.creationDateTime = try reader["creationDateTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.description = try reader["description"].readIfPresent()
        value.externalSourceSetting = try reader["externalSourceSetting"].readIfPresent(with: LexModelsV2ClientTypes.ExternalSourceSetting.read(from:))
        value.localeId = try reader["localeId"].readIfPresent()
        value.parentSlotTypeSignature = try reader["parentSlotTypeSignature"].readIfPresent()
        value.slotTypeId = try reader["slotTypeId"].readIfPresent()
        value.slotTypeName = try reader["slotTypeName"].readIfPresent()
        value.slotTypeValues = try reader["slotTypeValues"].readListIfPresent(memberReadingClosure: LexModelsV2ClientTypes.SlotTypeValue.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.valueSelectionSetting = try reader["valueSelectionSetting"].readIfPresent(with: LexModelsV2ClientTypes.SlotValueSelectionSetting.read(from:))
        return value
    }
}

extension CreateTestSetDiscrepancyReportOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateTestSetDiscrepancyReportOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateTestSetDiscrepancyReportOutput()
        value.creationDateTime = try reader["creationDateTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.target = try reader["target"].readIfPresent(with: LexModelsV2ClientTypes.TestSetDiscrepancyReportResourceTarget.read(from:))
        value.testSetDiscrepancyReportId = try reader["testSetDiscrepancyReportId"].readIfPresent()
        value.testSetId = try reader["testSetId"].readIfPresent()
        return value
    }
}

extension CreateUploadUrlOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateUploadUrlOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateUploadUrlOutput()
        value.importId = try reader["importId"].readIfPresent()
        value.uploadUrl = try reader["uploadUrl"].readIfPresent()
        return value
    }
}

extension DeleteBotOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteBotOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DeleteBotOutput()
        value.botId = try reader["botId"].readIfPresent()
        value.botStatus = try reader["botStatus"].readIfPresent()
        return value
    }
}

extension DeleteBotAliasOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteBotAliasOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DeleteBotAliasOutput()
        value.botAliasId = try reader["botAliasId"].readIfPresent()
        value.botAliasStatus = try reader["botAliasStatus"].readIfPresent()
        value.botId = try reader["botId"].readIfPresent()
        return value
    }
}

extension DeleteBotLocaleOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteBotLocaleOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DeleteBotLocaleOutput()
        value.botId = try reader["botId"].readIfPresent()
        value.botLocaleStatus = try reader["botLocaleStatus"].readIfPresent()
        value.botVersion = try reader["botVersion"].readIfPresent()
        value.localeId = try reader["localeId"].readIfPresent()
        return value
    }
}

extension DeleteBotReplicaOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteBotReplicaOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DeleteBotReplicaOutput()
        value.botId = try reader["botId"].readIfPresent()
        value.botReplicaStatus = try reader["botReplicaStatus"].readIfPresent()
        value.replicaRegion = try reader["replicaRegion"].readIfPresent()
        return value
    }
}

extension DeleteBotVersionOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteBotVersionOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DeleteBotVersionOutput()
        value.botId = try reader["botId"].readIfPresent()
        value.botStatus = try reader["botStatus"].readIfPresent()
        value.botVersion = try reader["botVersion"].readIfPresent()
        return value
    }
}

extension DeleteCustomVocabularyOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteCustomVocabularyOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DeleteCustomVocabularyOutput()
        value.botId = try reader["botId"].readIfPresent()
        value.botVersion = try reader["botVersion"].readIfPresent()
        value.customVocabularyStatus = try reader["customVocabularyStatus"].readIfPresent()
        value.localeId = try reader["localeId"].readIfPresent()
        return value
    }
}

extension DeleteExportOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteExportOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DeleteExportOutput()
        value.exportId = try reader["exportId"].readIfPresent()
        value.exportStatus = try reader["exportStatus"].readIfPresent()
        return value
    }
}

extension DeleteImportOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteImportOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DeleteImportOutput()
        value.importId = try reader["importId"].readIfPresent()
        value.importStatus = try reader["importStatus"].readIfPresent()
        return value
    }
}

extension DeleteIntentOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteIntentOutput {
        return DeleteIntentOutput()
    }
}

extension DeleteResourcePolicyOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteResourcePolicyOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DeleteResourcePolicyOutput()
        value.resourceArn = try reader["resourceArn"].readIfPresent()
        value.revisionId = try reader["revisionId"].readIfPresent()
        return value
    }
}

extension DeleteResourcePolicyStatementOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteResourcePolicyStatementOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DeleteResourcePolicyStatementOutput()
        value.resourceArn = try reader["resourceArn"].readIfPresent()
        value.revisionId = try reader["revisionId"].readIfPresent()
        return value
    }
}

extension DeleteSlotOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteSlotOutput {
        return DeleteSlotOutput()
    }
}

extension DeleteSlotTypeOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteSlotTypeOutput {
        return DeleteSlotTypeOutput()
    }
}

extension DeleteTestSetOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteTestSetOutput {
        return DeleteTestSetOutput()
    }
}

extension DeleteUtterancesOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteUtterancesOutput {
        return DeleteUtterancesOutput()
    }
}

extension DescribeBotOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeBotOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DescribeBotOutput()
        value.botId = try reader["botId"].readIfPresent()
        value.botMembers = try reader["botMembers"].readListIfPresent(memberReadingClosure: LexModelsV2ClientTypes.BotMember.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.botName = try reader["botName"].readIfPresent()
        value.botStatus = try reader["botStatus"].readIfPresent()
        value.botType = try reader["botType"].readIfPresent()
        value.creationDateTime = try reader["creationDateTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.dataPrivacy = try reader["dataPrivacy"].readIfPresent(with: LexModelsV2ClientTypes.DataPrivacy.read(from:))
        value.description = try reader["description"].readIfPresent()
        value.failureReasons = try reader["failureReasons"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.idleSessionTTLInSeconds = try reader["idleSessionTTLInSeconds"].readIfPresent()
        value.lastUpdatedDateTime = try reader["lastUpdatedDateTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.roleArn = try reader["roleArn"].readIfPresent()
        return value
    }
}

extension DescribeBotAliasOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeBotAliasOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DescribeBotAliasOutput()
        value.botAliasHistoryEvents = try reader["botAliasHistoryEvents"].readListIfPresent(memberReadingClosure: LexModelsV2ClientTypes.BotAliasHistoryEvent.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.botAliasId = try reader["botAliasId"].readIfPresent()
        value.botAliasLocaleSettings = try reader["botAliasLocaleSettings"].readMapIfPresent(valueReadingClosure: LexModelsV2ClientTypes.BotAliasLocaleSettings.read(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        value.botAliasName = try reader["botAliasName"].readIfPresent()
        value.botAliasStatus = try reader["botAliasStatus"].readIfPresent()
        value.botId = try reader["botId"].readIfPresent()
        value.botVersion = try reader["botVersion"].readIfPresent()
        value.conversationLogSettings = try reader["conversationLogSettings"].readIfPresent(with: LexModelsV2ClientTypes.ConversationLogSettings.read(from:))
        value.creationDateTime = try reader["creationDateTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.description = try reader["description"].readIfPresent()
        value.lastUpdatedDateTime = try reader["lastUpdatedDateTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.parentBotNetworks = try reader["parentBotNetworks"].readListIfPresent(memberReadingClosure: LexModelsV2ClientTypes.ParentBotNetwork.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.sentimentAnalysisSettings = try reader["sentimentAnalysisSettings"].readIfPresent(with: LexModelsV2ClientTypes.SentimentAnalysisSettings.read(from:))
        return value
    }
}

extension DescribeBotLocaleOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeBotLocaleOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DescribeBotLocaleOutput()
        value.botId = try reader["botId"].readIfPresent()
        value.botLocaleHistoryEvents = try reader["botLocaleHistoryEvents"].readListIfPresent(memberReadingClosure: LexModelsV2ClientTypes.BotLocaleHistoryEvent.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.botLocaleStatus = try reader["botLocaleStatus"].readIfPresent()
        value.botVersion = try reader["botVersion"].readIfPresent()
        value.creationDateTime = try reader["creationDateTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.description = try reader["description"].readIfPresent()
        value.failureReasons = try reader["failureReasons"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.generativeAISettings = try reader["generativeAISettings"].readIfPresent(with: LexModelsV2ClientTypes.GenerativeAISettings.read(from:))
        value.intentsCount = try reader["intentsCount"].readIfPresent()
        value.lastBuildSubmittedDateTime = try reader["lastBuildSubmittedDateTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.lastUpdatedDateTime = try reader["lastUpdatedDateTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.localeId = try reader["localeId"].readIfPresent()
        value.localeName = try reader["localeName"].readIfPresent()
        value.nluIntentConfidenceThreshold = try reader["nluIntentConfidenceThreshold"].readIfPresent()
        value.recommendedActions = try reader["recommendedActions"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.slotTypesCount = try reader["slotTypesCount"].readIfPresent()
        value.voiceSettings = try reader["voiceSettings"].readIfPresent(with: LexModelsV2ClientTypes.VoiceSettings.read(from:))
        return value
    }
}

extension DescribeBotRecommendationOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeBotRecommendationOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DescribeBotRecommendationOutput()
        value.botId = try reader["botId"].readIfPresent()
        value.botRecommendationId = try reader["botRecommendationId"].readIfPresent()
        value.botRecommendationResults = try reader["botRecommendationResults"].readIfPresent(with: LexModelsV2ClientTypes.BotRecommendationResults.read(from:))
        value.botRecommendationStatus = try reader["botRecommendationStatus"].readIfPresent()
        value.botVersion = try reader["botVersion"].readIfPresent()
        value.creationDateTime = try reader["creationDateTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.encryptionSetting = try reader["encryptionSetting"].readIfPresent(with: LexModelsV2ClientTypes.EncryptionSetting.read(from:))
        value.failureReasons = try reader["failureReasons"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.lastUpdatedDateTime = try reader["lastUpdatedDateTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.localeId = try reader["localeId"].readIfPresent()
        value.transcriptSourceSetting = try reader["transcriptSourceSetting"].readIfPresent(with: LexModelsV2ClientTypes.TranscriptSourceSetting.read(from:))
        return value
    }
}

extension DescribeBotReplicaOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeBotReplicaOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DescribeBotReplicaOutput()
        value.botId = try reader["botId"].readIfPresent()
        value.botReplicaStatus = try reader["botReplicaStatus"].readIfPresent()
        value.creationDateTime = try reader["creationDateTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.failureReasons = try reader["failureReasons"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.replicaRegion = try reader["replicaRegion"].readIfPresent()
        value.sourceRegion = try reader["sourceRegion"].readIfPresent()
        return value
    }
}

extension DescribeBotResourceGenerationOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeBotResourceGenerationOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DescribeBotResourceGenerationOutput()
        value.botId = try reader["botId"].readIfPresent()
        value.botVersion = try reader["botVersion"].readIfPresent()
        value.creationDateTime = try reader["creationDateTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.failureReasons = try reader["failureReasons"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.generatedBotLocaleUrl = try reader["generatedBotLocaleUrl"].readIfPresent()
        value.generationId = try reader["generationId"].readIfPresent()
        value.generationInputPrompt = try reader["generationInputPrompt"].readIfPresent()
        value.generationStatus = try reader["generationStatus"].readIfPresent()
        value.lastUpdatedDateTime = try reader["lastUpdatedDateTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.localeId = try reader["localeId"].readIfPresent()
        value.modelArn = try reader["modelArn"].readIfPresent()
        return value
    }
}

extension DescribeBotVersionOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeBotVersionOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DescribeBotVersionOutput()
        value.botId = try reader["botId"].readIfPresent()
        value.botMembers = try reader["botMembers"].readListIfPresent(memberReadingClosure: LexModelsV2ClientTypes.BotMember.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.botName = try reader["botName"].readIfPresent()
        value.botStatus = try reader["botStatus"].readIfPresent()
        value.botType = try reader["botType"].readIfPresent()
        value.botVersion = try reader["botVersion"].readIfPresent()
        value.creationDateTime = try reader["creationDateTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.dataPrivacy = try reader["dataPrivacy"].readIfPresent(with: LexModelsV2ClientTypes.DataPrivacy.read(from:))
        value.description = try reader["description"].readIfPresent()
        value.failureReasons = try reader["failureReasons"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.idleSessionTTLInSeconds = try reader["idleSessionTTLInSeconds"].readIfPresent()
        value.parentBotNetworks = try reader["parentBotNetworks"].readListIfPresent(memberReadingClosure: LexModelsV2ClientTypes.ParentBotNetwork.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.roleArn = try reader["roleArn"].readIfPresent()
        return value
    }
}

extension DescribeCustomVocabularyMetadataOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeCustomVocabularyMetadataOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DescribeCustomVocabularyMetadataOutput()
        value.botId = try reader["botId"].readIfPresent()
        value.botVersion = try reader["botVersion"].readIfPresent()
        value.creationDateTime = try reader["creationDateTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.customVocabularyStatus = try reader["customVocabularyStatus"].readIfPresent()
        value.lastUpdatedDateTime = try reader["lastUpdatedDateTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.localeId = try reader["localeId"].readIfPresent()
        return value
    }
}

extension DescribeExportOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeExportOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DescribeExportOutput()
        value.creationDateTime = try reader["creationDateTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.downloadUrl = try reader["downloadUrl"].readIfPresent()
        value.exportId = try reader["exportId"].readIfPresent()
        value.exportStatus = try reader["exportStatus"].readIfPresent()
        value.failureReasons = try reader["failureReasons"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.fileFormat = try reader["fileFormat"].readIfPresent()
        value.lastUpdatedDateTime = try reader["lastUpdatedDateTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.resourceSpecification = try reader["resourceSpecification"].readIfPresent(with: LexModelsV2ClientTypes.ExportResourceSpecification.read(from:))
        return value
    }
}

extension DescribeImportOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeImportOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DescribeImportOutput()
        value.creationDateTime = try reader["creationDateTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.failureReasons = try reader["failureReasons"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.importId = try reader["importId"].readIfPresent()
        value.importStatus = try reader["importStatus"].readIfPresent()
        value.importedResourceId = try reader["importedResourceId"].readIfPresent()
        value.importedResourceName = try reader["importedResourceName"].readIfPresent()
        value.lastUpdatedDateTime = try reader["lastUpdatedDateTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.mergeStrategy = try reader["mergeStrategy"].readIfPresent()
        value.resourceSpecification = try reader["resourceSpecification"].readIfPresent(with: LexModelsV2ClientTypes.ImportResourceSpecification.read(from:))
        return value
    }
}

extension DescribeIntentOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeIntentOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DescribeIntentOutput()
        value.botId = try reader["botId"].readIfPresent()
        value.botVersion = try reader["botVersion"].readIfPresent()
        value.creationDateTime = try reader["creationDateTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.description = try reader["description"].readIfPresent()
        value.dialogCodeHook = try reader["dialogCodeHook"].readIfPresent(with: LexModelsV2ClientTypes.DialogCodeHookSettings.read(from:))
        value.fulfillmentCodeHook = try reader["fulfillmentCodeHook"].readIfPresent(with: LexModelsV2ClientTypes.FulfillmentCodeHookSettings.read(from:))
        value.initialResponseSetting = try reader["initialResponseSetting"].readIfPresent(with: LexModelsV2ClientTypes.InitialResponseSetting.read(from:))
        value.inputContexts = try reader["inputContexts"].readListIfPresent(memberReadingClosure: LexModelsV2ClientTypes.InputContext.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.intentClosingSetting = try reader["intentClosingSetting"].readIfPresent(with: LexModelsV2ClientTypes.IntentClosingSetting.read(from:))
        value.intentConfirmationSetting = try reader["intentConfirmationSetting"].readIfPresent(with: LexModelsV2ClientTypes.IntentConfirmationSetting.read(from:))
        value.intentId = try reader["intentId"].readIfPresent()
        value.intentName = try reader["intentName"].readIfPresent()
        value.kendraConfiguration = try reader["kendraConfiguration"].readIfPresent(with: LexModelsV2ClientTypes.KendraConfiguration.read(from:))
        value.lastUpdatedDateTime = try reader["lastUpdatedDateTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.localeId = try reader["localeId"].readIfPresent()
        value.outputContexts = try reader["outputContexts"].readListIfPresent(memberReadingClosure: LexModelsV2ClientTypes.OutputContext.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.parentIntentSignature = try reader["parentIntentSignature"].readIfPresent()
        value.qnAIntentConfiguration = try reader["qnAIntentConfiguration"].readIfPresent(with: LexModelsV2ClientTypes.QnAIntentConfiguration.read(from:))
        value.sampleUtterances = try reader["sampleUtterances"].readListIfPresent(memberReadingClosure: LexModelsV2ClientTypes.SampleUtterance.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.slotPriorities = try reader["slotPriorities"].readListIfPresent(memberReadingClosure: LexModelsV2ClientTypes.SlotPriority.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension DescribeResourcePolicyOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeResourcePolicyOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DescribeResourcePolicyOutput()
        value.policy = try reader["policy"].readIfPresent()
        value.resourceArn = try reader["resourceArn"].readIfPresent()
        value.revisionId = try reader["revisionId"].readIfPresent()
        return value
    }
}

extension DescribeSlotOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeSlotOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DescribeSlotOutput()
        value.botId = try reader["botId"].readIfPresent()
        value.botVersion = try reader["botVersion"].readIfPresent()
        value.creationDateTime = try reader["creationDateTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.description = try reader["description"].readIfPresent()
        value.intentId = try reader["intentId"].readIfPresent()
        value.lastUpdatedDateTime = try reader["lastUpdatedDateTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.localeId = try reader["localeId"].readIfPresent()
        value.multipleValuesSetting = try reader["multipleValuesSetting"].readIfPresent(with: LexModelsV2ClientTypes.MultipleValuesSetting.read(from:))
        value.obfuscationSetting = try reader["obfuscationSetting"].readIfPresent(with: LexModelsV2ClientTypes.ObfuscationSetting.read(from:))
        value.slotId = try reader["slotId"].readIfPresent()
        value.slotName = try reader["slotName"].readIfPresent()
        value.slotTypeId = try reader["slotTypeId"].readIfPresent()
        value.subSlotSetting = try reader["subSlotSetting"].readIfPresent(with: LexModelsV2ClientTypes.SubSlotSetting.read(from:))
        value.valueElicitationSetting = try reader["valueElicitationSetting"].readIfPresent(with: LexModelsV2ClientTypes.SlotValueElicitationSetting.read(from:))
        return value
    }
}

extension DescribeSlotTypeOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeSlotTypeOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DescribeSlotTypeOutput()
        value.botId = try reader["botId"].readIfPresent()
        value.botVersion = try reader["botVersion"].readIfPresent()
        value.compositeSlotTypeSetting = try reader["compositeSlotTypeSetting"].readIfPresent(with: LexModelsV2ClientTypes.CompositeSlotTypeSetting.read(from:))
        value.creationDateTime = try reader["creationDateTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.description = try reader["description"].readIfPresent()
        value.externalSourceSetting = try reader["externalSourceSetting"].readIfPresent(with: LexModelsV2ClientTypes.ExternalSourceSetting.read(from:))
        value.lastUpdatedDateTime = try reader["lastUpdatedDateTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.localeId = try reader["localeId"].readIfPresent()
        value.parentSlotTypeSignature = try reader["parentSlotTypeSignature"].readIfPresent()
        value.slotTypeId = try reader["slotTypeId"].readIfPresent()
        value.slotTypeName = try reader["slotTypeName"].readIfPresent()
        value.slotTypeValues = try reader["slotTypeValues"].readListIfPresent(memberReadingClosure: LexModelsV2ClientTypes.SlotTypeValue.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.valueSelectionSetting = try reader["valueSelectionSetting"].readIfPresent(with: LexModelsV2ClientTypes.SlotValueSelectionSetting.read(from:))
        return value
    }
}

extension DescribeTestExecutionOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeTestExecutionOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DescribeTestExecutionOutput()
        value.apiMode = try reader["apiMode"].readIfPresent()
        value.creationDateTime = try reader["creationDateTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.failureReasons = try reader["failureReasons"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.lastUpdatedDateTime = try reader["lastUpdatedDateTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.target = try reader["target"].readIfPresent(with: LexModelsV2ClientTypes.TestExecutionTarget.read(from:))
        value.testExecutionId = try reader["testExecutionId"].readIfPresent()
        value.testExecutionModality = try reader["testExecutionModality"].readIfPresent()
        value.testExecutionStatus = try reader["testExecutionStatus"].readIfPresent()
        value.testSetId = try reader["testSetId"].readIfPresent()
        value.testSetName = try reader["testSetName"].readIfPresent()
        return value
    }
}

extension DescribeTestSetOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeTestSetOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DescribeTestSetOutput()
        value.creationDateTime = try reader["creationDateTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.description = try reader["description"].readIfPresent()
        value.lastUpdatedDateTime = try reader["lastUpdatedDateTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.modality = try reader["modality"].readIfPresent()
        value.numTurns = try reader["numTurns"].readIfPresent()
        value.roleArn = try reader["roleArn"].readIfPresent()
        value.status = try reader["status"].readIfPresent()
        value.storageLocation = try reader["storageLocation"].readIfPresent(with: LexModelsV2ClientTypes.TestSetStorageLocation.read(from:))
        value.testSetId = try reader["testSetId"].readIfPresent()
        value.testSetName = try reader["testSetName"].readIfPresent()
        return value
    }
}

extension DescribeTestSetDiscrepancyReportOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeTestSetDiscrepancyReportOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DescribeTestSetDiscrepancyReportOutput()
        value.creationDateTime = try reader["creationDateTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.failureReasons = try reader["failureReasons"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.lastUpdatedDataTime = try reader["lastUpdatedDataTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.target = try reader["target"].readIfPresent(with: LexModelsV2ClientTypes.TestSetDiscrepancyReportResourceTarget.read(from:))
        value.testSetDiscrepancyRawOutputUrl = try reader["testSetDiscrepancyRawOutputUrl"].readIfPresent()
        value.testSetDiscrepancyReportId = try reader["testSetDiscrepancyReportId"].readIfPresent()
        value.testSetDiscrepancyReportStatus = try reader["testSetDiscrepancyReportStatus"].readIfPresent()
        value.testSetDiscrepancyTopErrors = try reader["testSetDiscrepancyTopErrors"].readIfPresent(with: LexModelsV2ClientTypes.TestSetDiscrepancyErrors.read(from:))
        value.testSetId = try reader["testSetId"].readIfPresent()
        return value
    }
}

extension DescribeTestSetGenerationOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeTestSetGenerationOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DescribeTestSetGenerationOutput()
        value.creationDateTime = try reader["creationDateTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.description = try reader["description"].readIfPresent()
        value.failureReasons = try reader["failureReasons"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.generationDataSource = try reader["generationDataSource"].readIfPresent(with: LexModelsV2ClientTypes.TestSetGenerationDataSource.read(from:))
        value.lastUpdatedDateTime = try reader["lastUpdatedDateTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.roleArn = try reader["roleArn"].readIfPresent()
        value.storageLocation = try reader["storageLocation"].readIfPresent(with: LexModelsV2ClientTypes.TestSetStorageLocation.read(from:))
        value.testSetGenerationId = try reader["testSetGenerationId"].readIfPresent()
        value.testSetGenerationStatus = try reader["testSetGenerationStatus"].readIfPresent()
        value.testSetId = try reader["testSetId"].readIfPresent()
        value.testSetName = try reader["testSetName"].readIfPresent()
        return value
    }
}

extension GenerateBotElementOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GenerateBotElementOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GenerateBotElementOutput()
        value.botId = try reader["botId"].readIfPresent()
        value.botVersion = try reader["botVersion"].readIfPresent()
        value.intentId = try reader["intentId"].readIfPresent()
        value.localeId = try reader["localeId"].readIfPresent()
        value.sampleUtterances = try reader["sampleUtterances"].readListIfPresent(memberReadingClosure: LexModelsV2ClientTypes.SampleUtterance.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension GetTestExecutionArtifactsUrlOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetTestExecutionArtifactsUrlOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetTestExecutionArtifactsUrlOutput()
        value.downloadArtifactsUrl = try reader["downloadArtifactsUrl"].readIfPresent()
        value.testExecutionId = try reader["testExecutionId"].readIfPresent()
        return value
    }
}

extension ListAggregatedUtterancesOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListAggregatedUtterancesOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListAggregatedUtterancesOutput()
        value.aggregatedUtterancesSummaries = try reader["aggregatedUtterancesSummaries"].readListIfPresent(memberReadingClosure: LexModelsV2ClientTypes.AggregatedUtterancesSummary.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.aggregationDuration = try reader["aggregationDuration"].readIfPresent(with: LexModelsV2ClientTypes.UtteranceAggregationDuration.read(from:))
        value.aggregationLastRefreshedDateTime = try reader["aggregationLastRefreshedDateTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.aggregationWindowEndTime = try reader["aggregationWindowEndTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.aggregationWindowStartTime = try reader["aggregationWindowStartTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.botAliasId = try reader["botAliasId"].readIfPresent()
        value.botId = try reader["botId"].readIfPresent()
        value.botVersion = try reader["botVersion"].readIfPresent()
        value.localeId = try reader["localeId"].readIfPresent()
        value.nextToken = try reader["nextToken"].readIfPresent()
        return value
    }
}

extension ListBotAliasesOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListBotAliasesOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListBotAliasesOutput()
        value.botAliasSummaries = try reader["botAliasSummaries"].readListIfPresent(memberReadingClosure: LexModelsV2ClientTypes.BotAliasSummary.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.botId = try reader["botId"].readIfPresent()
        value.nextToken = try reader["nextToken"].readIfPresent()
        return value
    }
}

extension ListBotAliasReplicasOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListBotAliasReplicasOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListBotAliasReplicasOutput()
        value.botAliasReplicaSummaries = try reader["botAliasReplicaSummaries"].readListIfPresent(memberReadingClosure: LexModelsV2ClientTypes.BotAliasReplicaSummary.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.botId = try reader["botId"].readIfPresent()
        value.nextToken = try reader["nextToken"].readIfPresent()
        value.replicaRegion = try reader["replicaRegion"].readIfPresent()
        value.sourceRegion = try reader["sourceRegion"].readIfPresent()
        return value
    }
}

extension ListBotLocalesOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListBotLocalesOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListBotLocalesOutput()
        value.botId = try reader["botId"].readIfPresent()
        value.botLocaleSummaries = try reader["botLocaleSummaries"].readListIfPresent(memberReadingClosure: LexModelsV2ClientTypes.BotLocaleSummary.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.botVersion = try reader["botVersion"].readIfPresent()
        value.nextToken = try reader["nextToken"].readIfPresent()
        return value
    }
}

extension ListBotRecommendationsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListBotRecommendationsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListBotRecommendationsOutput()
        value.botId = try reader["botId"].readIfPresent()
        value.botRecommendationSummaries = try reader["botRecommendationSummaries"].readListIfPresent(memberReadingClosure: LexModelsV2ClientTypes.BotRecommendationSummary.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.botVersion = try reader["botVersion"].readIfPresent()
        value.localeId = try reader["localeId"].readIfPresent()
        value.nextToken = try reader["nextToken"].readIfPresent()
        return value
    }
}

extension ListBotReplicasOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListBotReplicasOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListBotReplicasOutput()
        value.botId = try reader["botId"].readIfPresent()
        value.botReplicaSummaries = try reader["botReplicaSummaries"].readListIfPresent(memberReadingClosure: LexModelsV2ClientTypes.BotReplicaSummary.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.sourceRegion = try reader["sourceRegion"].readIfPresent()
        return value
    }
}

extension ListBotResourceGenerationsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListBotResourceGenerationsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListBotResourceGenerationsOutput()
        value.botId = try reader["botId"].readIfPresent()
        value.botVersion = try reader["botVersion"].readIfPresent()
        value.generationSummaries = try reader["generationSummaries"].readListIfPresent(memberReadingClosure: LexModelsV2ClientTypes.GenerationSummary.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.localeId = try reader["localeId"].readIfPresent()
        value.nextToken = try reader["nextToken"].readIfPresent()
        return value
    }
}

extension ListBotsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListBotsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListBotsOutput()
        value.botSummaries = try reader["botSummaries"].readListIfPresent(memberReadingClosure: LexModelsV2ClientTypes.BotSummary.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.nextToken = try reader["nextToken"].readIfPresent()
        return value
    }
}

extension ListBotVersionReplicasOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListBotVersionReplicasOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListBotVersionReplicasOutput()
        value.botId = try reader["botId"].readIfPresent()
        value.botVersionReplicaSummaries = try reader["botVersionReplicaSummaries"].readListIfPresent(memberReadingClosure: LexModelsV2ClientTypes.BotVersionReplicaSummary.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.nextToken = try reader["nextToken"].readIfPresent()
        value.replicaRegion = try reader["replicaRegion"].readIfPresent()
        value.sourceRegion = try reader["sourceRegion"].readIfPresent()
        return value
    }
}

extension ListBotVersionsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListBotVersionsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListBotVersionsOutput()
        value.botId = try reader["botId"].readIfPresent()
        value.botVersionSummaries = try reader["botVersionSummaries"].readListIfPresent(memberReadingClosure: LexModelsV2ClientTypes.BotVersionSummary.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.nextToken = try reader["nextToken"].readIfPresent()
        return value
    }
}

extension ListBuiltInIntentsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListBuiltInIntentsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListBuiltInIntentsOutput()
        value.builtInIntentSummaries = try reader["builtInIntentSummaries"].readListIfPresent(memberReadingClosure: LexModelsV2ClientTypes.BuiltInIntentSummary.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.localeId = try reader["localeId"].readIfPresent()
        value.nextToken = try reader["nextToken"].readIfPresent()
        return value
    }
}

extension ListBuiltInSlotTypesOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListBuiltInSlotTypesOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListBuiltInSlotTypesOutput()
        value.builtInSlotTypeSummaries = try reader["builtInSlotTypeSummaries"].readListIfPresent(memberReadingClosure: LexModelsV2ClientTypes.BuiltInSlotTypeSummary.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.localeId = try reader["localeId"].readIfPresent()
        value.nextToken = try reader["nextToken"].readIfPresent()
        return value
    }
}

extension ListCustomVocabularyItemsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListCustomVocabularyItemsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListCustomVocabularyItemsOutput()
        value.botId = try reader["botId"].readIfPresent()
        value.botVersion = try reader["botVersion"].readIfPresent()
        value.customVocabularyItems = try reader["customVocabularyItems"].readListIfPresent(memberReadingClosure: LexModelsV2ClientTypes.CustomVocabularyItem.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.localeId = try reader["localeId"].readIfPresent()
        value.nextToken = try reader["nextToken"].readIfPresent()
        return value
    }
}

extension ListExportsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListExportsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListExportsOutput()
        value.botId = try reader["botId"].readIfPresent()
        value.botVersion = try reader["botVersion"].readIfPresent()
        value.exportSummaries = try reader["exportSummaries"].readListIfPresent(memberReadingClosure: LexModelsV2ClientTypes.ExportSummary.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.localeId = try reader["localeId"].readIfPresent()
        value.nextToken = try reader["nextToken"].readIfPresent()
        return value
    }
}

extension ListImportsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListImportsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListImportsOutput()
        value.botId = try reader["botId"].readIfPresent()
        value.botVersion = try reader["botVersion"].readIfPresent()
        value.importSummaries = try reader["importSummaries"].readListIfPresent(memberReadingClosure: LexModelsV2ClientTypes.ImportSummary.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.localeId = try reader["localeId"].readIfPresent()
        value.nextToken = try reader["nextToken"].readIfPresent()
        return value
    }
}

extension ListIntentMetricsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListIntentMetricsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListIntentMetricsOutput()
        value.botId = try reader["botId"].readIfPresent()
        value.nextToken = try reader["nextToken"].readIfPresent()
        value.results = try reader["results"].readListIfPresent(memberReadingClosure: LexModelsV2ClientTypes.AnalyticsIntentResult.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension ListIntentPathsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListIntentPathsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListIntentPathsOutput()
        value.nodeSummaries = try reader["nodeSummaries"].readListIfPresent(memberReadingClosure: LexModelsV2ClientTypes.AnalyticsIntentNodeSummary.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension ListIntentsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListIntentsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListIntentsOutput()
        value.botId = try reader["botId"].readIfPresent()
        value.botVersion = try reader["botVersion"].readIfPresent()
        value.intentSummaries = try reader["intentSummaries"].readListIfPresent(memberReadingClosure: LexModelsV2ClientTypes.IntentSummary.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.localeId = try reader["localeId"].readIfPresent()
        value.nextToken = try reader["nextToken"].readIfPresent()
        return value
    }
}

extension ListIntentStageMetricsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListIntentStageMetricsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListIntentStageMetricsOutput()
        value.botId = try reader["botId"].readIfPresent()
        value.nextToken = try reader["nextToken"].readIfPresent()
        value.results = try reader["results"].readListIfPresent(memberReadingClosure: LexModelsV2ClientTypes.AnalyticsIntentStageResult.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension ListRecommendedIntentsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListRecommendedIntentsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListRecommendedIntentsOutput()
        value.botId = try reader["botId"].readIfPresent()
        value.botRecommendationId = try reader["botRecommendationId"].readIfPresent()
        value.botVersion = try reader["botVersion"].readIfPresent()
        value.localeId = try reader["localeId"].readIfPresent()
        value.nextToken = try reader["nextToken"].readIfPresent()
        value.summaryList = try reader["summaryList"].readListIfPresent(memberReadingClosure: LexModelsV2ClientTypes.RecommendedIntentSummary.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension ListSessionAnalyticsDataOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListSessionAnalyticsDataOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListSessionAnalyticsDataOutput()
        value.botId = try reader["botId"].readIfPresent()
        value.nextToken = try reader["nextToken"].readIfPresent()
        value.sessions = try reader["sessions"].readListIfPresent(memberReadingClosure: LexModelsV2ClientTypes.SessionSpecification.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension ListSessionMetricsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListSessionMetricsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListSessionMetricsOutput()
        value.botId = try reader["botId"].readIfPresent()
        value.nextToken = try reader["nextToken"].readIfPresent()
        value.results = try reader["results"].readListIfPresent(memberReadingClosure: LexModelsV2ClientTypes.AnalyticsSessionResult.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension ListSlotsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListSlotsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListSlotsOutput()
        value.botId = try reader["botId"].readIfPresent()
        value.botVersion = try reader["botVersion"].readIfPresent()
        value.intentId = try reader["intentId"].readIfPresent()
        value.localeId = try reader["localeId"].readIfPresent()
        value.nextToken = try reader["nextToken"].readIfPresent()
        value.slotSummaries = try reader["slotSummaries"].readListIfPresent(memberReadingClosure: LexModelsV2ClientTypes.SlotSummary.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension ListSlotTypesOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListSlotTypesOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListSlotTypesOutput()
        value.botId = try reader["botId"].readIfPresent()
        value.botVersion = try reader["botVersion"].readIfPresent()
        value.localeId = try reader["localeId"].readIfPresent()
        value.nextToken = try reader["nextToken"].readIfPresent()
        value.slotTypeSummaries = try reader["slotTypeSummaries"].readListIfPresent(memberReadingClosure: LexModelsV2ClientTypes.SlotTypeSummary.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension ListTagsForResourceOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListTagsForResourceOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListTagsForResourceOutput()
        value.tags = try reader["tags"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        return value
    }
}

extension ListTestExecutionResultItemsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListTestExecutionResultItemsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListTestExecutionResultItemsOutput()
        value.nextToken = try reader["nextToken"].readIfPresent()
        value.testExecutionResults = try reader["testExecutionResults"].readIfPresent(with: LexModelsV2ClientTypes.TestExecutionResultItems.read(from:))
        return value
    }
}

extension ListTestExecutionsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListTestExecutionsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListTestExecutionsOutput()
        value.nextToken = try reader["nextToken"].readIfPresent()
        value.testExecutions = try reader["testExecutions"].readListIfPresent(memberReadingClosure: LexModelsV2ClientTypes.TestExecutionSummary.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension ListTestSetRecordsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListTestSetRecordsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListTestSetRecordsOutput()
        value.nextToken = try reader["nextToken"].readIfPresent()
        value.testSetRecords = try reader["testSetRecords"].readListIfPresent(memberReadingClosure: LexModelsV2ClientTypes.TestSetTurnRecord.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension ListTestSetsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListTestSetsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListTestSetsOutput()
        value.nextToken = try reader["nextToken"].readIfPresent()
        value.testSets = try reader["testSets"].readListIfPresent(memberReadingClosure: LexModelsV2ClientTypes.TestSetSummary.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension ListUtteranceAnalyticsDataOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListUtteranceAnalyticsDataOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListUtteranceAnalyticsDataOutput()
        value.botId = try reader["botId"].readIfPresent()
        value.nextToken = try reader["nextToken"].readIfPresent()
        value.utterances = try reader["utterances"].readListIfPresent(memberReadingClosure: LexModelsV2ClientTypes.UtteranceSpecification.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension ListUtteranceMetricsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListUtteranceMetricsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListUtteranceMetricsOutput()
        value.botId = try reader["botId"].readIfPresent()
        value.nextToken = try reader["nextToken"].readIfPresent()
        value.results = try reader["results"].readListIfPresent(memberReadingClosure: LexModelsV2ClientTypes.AnalyticsUtteranceResult.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension SearchAssociatedTranscriptsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> SearchAssociatedTranscriptsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = SearchAssociatedTranscriptsOutput()
        value.associatedTranscripts = try reader["associatedTranscripts"].readListIfPresent(memberReadingClosure: LexModelsV2ClientTypes.AssociatedTranscript.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.botId = try reader["botId"].readIfPresent()
        value.botRecommendationId = try reader["botRecommendationId"].readIfPresent()
        value.botVersion = try reader["botVersion"].readIfPresent()
        value.localeId = try reader["localeId"].readIfPresent()
        value.nextIndex = try reader["nextIndex"].readIfPresent()
        value.totalResults = try reader["totalResults"].readIfPresent()
        return value
    }
}

extension StartBotRecommendationOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> StartBotRecommendationOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = StartBotRecommendationOutput()
        value.botId = try reader["botId"].readIfPresent()
        value.botRecommendationId = try reader["botRecommendationId"].readIfPresent()
        value.botRecommendationStatus = try reader["botRecommendationStatus"].readIfPresent()
        value.botVersion = try reader["botVersion"].readIfPresent()
        value.creationDateTime = try reader["creationDateTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.encryptionSetting = try reader["encryptionSetting"].readIfPresent(with: LexModelsV2ClientTypes.EncryptionSetting.read(from:))
        value.localeId = try reader["localeId"].readIfPresent()
        value.transcriptSourceSetting = try reader["transcriptSourceSetting"].readIfPresent(with: LexModelsV2ClientTypes.TranscriptSourceSetting.read(from:))
        return value
    }
}

extension StartBotResourceGenerationOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> StartBotResourceGenerationOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = StartBotResourceGenerationOutput()
        value.botId = try reader["botId"].readIfPresent()
        value.botVersion = try reader["botVersion"].readIfPresent()
        value.creationDateTime = try reader["creationDateTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.generationId = try reader["generationId"].readIfPresent()
        value.generationInputPrompt = try reader["generationInputPrompt"].readIfPresent()
        value.generationStatus = try reader["generationStatus"].readIfPresent()
        value.localeId = try reader["localeId"].readIfPresent()
        return value
    }
}

extension StartImportOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> StartImportOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = StartImportOutput()
        value.creationDateTime = try reader["creationDateTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.importId = try reader["importId"].readIfPresent()
        value.importStatus = try reader["importStatus"].readIfPresent()
        value.mergeStrategy = try reader["mergeStrategy"].readIfPresent()
        value.resourceSpecification = try reader["resourceSpecification"].readIfPresent(with: LexModelsV2ClientTypes.ImportResourceSpecification.read(from:))
        return value
    }
}

extension StartTestExecutionOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> StartTestExecutionOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = StartTestExecutionOutput()
        value.apiMode = try reader["apiMode"].readIfPresent()
        value.creationDateTime = try reader["creationDateTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.target = try reader["target"].readIfPresent(with: LexModelsV2ClientTypes.TestExecutionTarget.read(from:))
        value.testExecutionId = try reader["testExecutionId"].readIfPresent()
        value.testExecutionModality = try reader["testExecutionModality"].readIfPresent()
        value.testSetId = try reader["testSetId"].readIfPresent()
        return value
    }
}

extension StartTestSetGenerationOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> StartTestSetGenerationOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = StartTestSetGenerationOutput()
        value.creationDateTime = try reader["creationDateTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.description = try reader["description"].readIfPresent()
        value.generationDataSource = try reader["generationDataSource"].readIfPresent(with: LexModelsV2ClientTypes.TestSetGenerationDataSource.read(from:))
        value.roleArn = try reader["roleArn"].readIfPresent()
        value.storageLocation = try reader["storageLocation"].readIfPresent(with: LexModelsV2ClientTypes.TestSetStorageLocation.read(from:))
        value.testSetGenerationId = try reader["testSetGenerationId"].readIfPresent()
        value.testSetGenerationStatus = try reader["testSetGenerationStatus"].readIfPresent()
        value.testSetName = try reader["testSetName"].readIfPresent()
        value.testSetTags = try reader["testSetTags"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        return value
    }
}

extension StopBotRecommendationOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> StopBotRecommendationOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = StopBotRecommendationOutput()
        value.botId = try reader["botId"].readIfPresent()
        value.botRecommendationId = try reader["botRecommendationId"].readIfPresent()
        value.botRecommendationStatus = try reader["botRecommendationStatus"].readIfPresent()
        value.botVersion = try reader["botVersion"].readIfPresent()
        value.localeId = try reader["localeId"].readIfPresent()
        return value
    }
}

extension TagResourceOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> TagResourceOutput {
        return TagResourceOutput()
    }
}

extension UntagResourceOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UntagResourceOutput {
        return UntagResourceOutput()
    }
}

extension UpdateBotOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdateBotOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = UpdateBotOutput()
        value.botId = try reader["botId"].readIfPresent()
        value.botMembers = try reader["botMembers"].readListIfPresent(memberReadingClosure: LexModelsV2ClientTypes.BotMember.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.botName = try reader["botName"].readIfPresent()
        value.botStatus = try reader["botStatus"].readIfPresent()
        value.botType = try reader["botType"].readIfPresent()
        value.creationDateTime = try reader["creationDateTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.dataPrivacy = try reader["dataPrivacy"].readIfPresent(with: LexModelsV2ClientTypes.DataPrivacy.read(from:))
        value.description = try reader["description"].readIfPresent()
        value.idleSessionTTLInSeconds = try reader["idleSessionTTLInSeconds"].readIfPresent()
        value.lastUpdatedDateTime = try reader["lastUpdatedDateTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.roleArn = try reader["roleArn"].readIfPresent()
        return value
    }
}

extension UpdateBotAliasOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdateBotAliasOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = UpdateBotAliasOutput()
        value.botAliasId = try reader["botAliasId"].readIfPresent()
        value.botAliasLocaleSettings = try reader["botAliasLocaleSettings"].readMapIfPresent(valueReadingClosure: LexModelsV2ClientTypes.BotAliasLocaleSettings.read(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        value.botAliasName = try reader["botAliasName"].readIfPresent()
        value.botAliasStatus = try reader["botAliasStatus"].readIfPresent()
        value.botId = try reader["botId"].readIfPresent()
        value.botVersion = try reader["botVersion"].readIfPresent()
        value.conversationLogSettings = try reader["conversationLogSettings"].readIfPresent(with: LexModelsV2ClientTypes.ConversationLogSettings.read(from:))
        value.creationDateTime = try reader["creationDateTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.description = try reader["description"].readIfPresent()
        value.lastUpdatedDateTime = try reader["lastUpdatedDateTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.sentimentAnalysisSettings = try reader["sentimentAnalysisSettings"].readIfPresent(with: LexModelsV2ClientTypes.SentimentAnalysisSettings.read(from:))
        return value
    }
}

extension UpdateBotLocaleOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdateBotLocaleOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = UpdateBotLocaleOutput()
        value.botId = try reader["botId"].readIfPresent()
        value.botLocaleStatus = try reader["botLocaleStatus"].readIfPresent()
        value.botVersion = try reader["botVersion"].readIfPresent()
        value.creationDateTime = try reader["creationDateTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.description = try reader["description"].readIfPresent()
        value.failureReasons = try reader["failureReasons"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.generativeAISettings = try reader["generativeAISettings"].readIfPresent(with: LexModelsV2ClientTypes.GenerativeAISettings.read(from:))
        value.lastUpdatedDateTime = try reader["lastUpdatedDateTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.localeId = try reader["localeId"].readIfPresent()
        value.localeName = try reader["localeName"].readIfPresent()
        value.nluIntentConfidenceThreshold = try reader["nluIntentConfidenceThreshold"].readIfPresent()
        value.recommendedActions = try reader["recommendedActions"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.voiceSettings = try reader["voiceSettings"].readIfPresent(with: LexModelsV2ClientTypes.VoiceSettings.read(from:))
        return value
    }
}

extension UpdateBotRecommendationOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdateBotRecommendationOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = UpdateBotRecommendationOutput()
        value.botId = try reader["botId"].readIfPresent()
        value.botRecommendationId = try reader["botRecommendationId"].readIfPresent()
        value.botRecommendationStatus = try reader["botRecommendationStatus"].readIfPresent()
        value.botVersion = try reader["botVersion"].readIfPresent()
        value.creationDateTime = try reader["creationDateTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.encryptionSetting = try reader["encryptionSetting"].readIfPresent(with: LexModelsV2ClientTypes.EncryptionSetting.read(from:))
        value.lastUpdatedDateTime = try reader["lastUpdatedDateTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.localeId = try reader["localeId"].readIfPresent()
        value.transcriptSourceSetting = try reader["transcriptSourceSetting"].readIfPresent(with: LexModelsV2ClientTypes.TranscriptSourceSetting.read(from:))
        return value
    }
}

extension UpdateExportOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdateExportOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = UpdateExportOutput()
        value.creationDateTime = try reader["creationDateTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.exportId = try reader["exportId"].readIfPresent()
        value.exportStatus = try reader["exportStatus"].readIfPresent()
        value.fileFormat = try reader["fileFormat"].readIfPresent()
        value.lastUpdatedDateTime = try reader["lastUpdatedDateTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.resourceSpecification = try reader["resourceSpecification"].readIfPresent(with: LexModelsV2ClientTypes.ExportResourceSpecification.read(from:))
        return value
    }
}

extension UpdateIntentOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdateIntentOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = UpdateIntentOutput()
        value.botId = try reader["botId"].readIfPresent()
        value.botVersion = try reader["botVersion"].readIfPresent()
        value.creationDateTime = try reader["creationDateTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.description = try reader["description"].readIfPresent()
        value.dialogCodeHook = try reader["dialogCodeHook"].readIfPresent(with: LexModelsV2ClientTypes.DialogCodeHookSettings.read(from:))
        value.fulfillmentCodeHook = try reader["fulfillmentCodeHook"].readIfPresent(with: LexModelsV2ClientTypes.FulfillmentCodeHookSettings.read(from:))
        value.initialResponseSetting = try reader["initialResponseSetting"].readIfPresent(with: LexModelsV2ClientTypes.InitialResponseSetting.read(from:))
        value.inputContexts = try reader["inputContexts"].readListIfPresent(memberReadingClosure: LexModelsV2ClientTypes.InputContext.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.intentClosingSetting = try reader["intentClosingSetting"].readIfPresent(with: LexModelsV2ClientTypes.IntentClosingSetting.read(from:))
        value.intentConfirmationSetting = try reader["intentConfirmationSetting"].readIfPresent(with: LexModelsV2ClientTypes.IntentConfirmationSetting.read(from:))
        value.intentId = try reader["intentId"].readIfPresent()
        value.intentName = try reader["intentName"].readIfPresent()
        value.kendraConfiguration = try reader["kendraConfiguration"].readIfPresent(with: LexModelsV2ClientTypes.KendraConfiguration.read(from:))
        value.lastUpdatedDateTime = try reader["lastUpdatedDateTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.localeId = try reader["localeId"].readIfPresent()
        value.outputContexts = try reader["outputContexts"].readListIfPresent(memberReadingClosure: LexModelsV2ClientTypes.OutputContext.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.parentIntentSignature = try reader["parentIntentSignature"].readIfPresent()
        value.qnAIntentConfiguration = try reader["qnAIntentConfiguration"].readIfPresent(with: LexModelsV2ClientTypes.QnAIntentConfiguration.read(from:))
        value.sampleUtterances = try reader["sampleUtterances"].readListIfPresent(memberReadingClosure: LexModelsV2ClientTypes.SampleUtterance.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.slotPriorities = try reader["slotPriorities"].readListIfPresent(memberReadingClosure: LexModelsV2ClientTypes.SlotPriority.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension UpdateResourcePolicyOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdateResourcePolicyOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = UpdateResourcePolicyOutput()
        value.resourceArn = try reader["resourceArn"].readIfPresent()
        value.revisionId = try reader["revisionId"].readIfPresent()
        return value
    }
}

extension UpdateSlotOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdateSlotOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = UpdateSlotOutput()
        value.botId = try reader["botId"].readIfPresent()
        value.botVersion = try reader["botVersion"].readIfPresent()
        value.creationDateTime = try reader["creationDateTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.description = try reader["description"].readIfPresent()
        value.intentId = try reader["intentId"].readIfPresent()
        value.lastUpdatedDateTime = try reader["lastUpdatedDateTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.localeId = try reader["localeId"].readIfPresent()
        value.multipleValuesSetting = try reader["multipleValuesSetting"].readIfPresent(with: LexModelsV2ClientTypes.MultipleValuesSetting.read(from:))
        value.obfuscationSetting = try reader["obfuscationSetting"].readIfPresent(with: LexModelsV2ClientTypes.ObfuscationSetting.read(from:))
        value.slotId = try reader["slotId"].readIfPresent()
        value.slotName = try reader["slotName"].readIfPresent()
        value.slotTypeId = try reader["slotTypeId"].readIfPresent()
        value.subSlotSetting = try reader["subSlotSetting"].readIfPresent(with: LexModelsV2ClientTypes.SubSlotSetting.read(from:))
        value.valueElicitationSetting = try reader["valueElicitationSetting"].readIfPresent(with: LexModelsV2ClientTypes.SlotValueElicitationSetting.read(from:))
        return value
    }
}

extension UpdateSlotTypeOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdateSlotTypeOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = UpdateSlotTypeOutput()
        value.botId = try reader["botId"].readIfPresent()
        value.botVersion = try reader["botVersion"].readIfPresent()
        value.compositeSlotTypeSetting = try reader["compositeSlotTypeSetting"].readIfPresent(with: LexModelsV2ClientTypes.CompositeSlotTypeSetting.read(from:))
        value.creationDateTime = try reader["creationDateTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.description = try reader["description"].readIfPresent()
        value.externalSourceSetting = try reader["externalSourceSetting"].readIfPresent(with: LexModelsV2ClientTypes.ExternalSourceSetting.read(from:))
        value.lastUpdatedDateTime = try reader["lastUpdatedDateTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.localeId = try reader["localeId"].readIfPresent()
        value.parentSlotTypeSignature = try reader["parentSlotTypeSignature"].readIfPresent()
        value.slotTypeId = try reader["slotTypeId"].readIfPresent()
        value.slotTypeName = try reader["slotTypeName"].readIfPresent()
        value.slotTypeValues = try reader["slotTypeValues"].readListIfPresent(memberReadingClosure: LexModelsV2ClientTypes.SlotTypeValue.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.valueSelectionSetting = try reader["valueSelectionSetting"].readIfPresent(with: LexModelsV2ClientTypes.SlotValueSelectionSetting.read(from:))
        return value
    }
}

extension UpdateTestSetOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdateTestSetOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = UpdateTestSetOutput()
        value.creationDateTime = try reader["creationDateTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.description = try reader["description"].readIfPresent()
        value.lastUpdatedDateTime = try reader["lastUpdatedDateTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.modality = try reader["modality"].readIfPresent()
        value.numTurns = try reader["numTurns"].readIfPresent()
        value.roleArn = try reader["roleArn"].readIfPresent()
        value.status = try reader["status"].readIfPresent()
        value.storageLocation = try reader["storageLocation"].readIfPresent(with: LexModelsV2ClientTypes.TestSetStorageLocation.read(from:))
        value.testSetId = try reader["testSetId"].readIfPresent()
        value.testSetName = try reader["testSetName"].readIfPresent()
        return value
    }
}

enum BatchCreateCustomVocabularyItemOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceQuotaExceededException": return try ServiceQuotaExceededException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum BatchDeleteCustomVocabularyItemOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceQuotaExceededException": return try ServiceQuotaExceededException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum BatchUpdateCustomVocabularyItemOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceQuotaExceededException": return try ServiceQuotaExceededException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum BuildBotLocaleOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "PreconditionFailedException": return try PreconditionFailedException.makeError(baseError: baseError)
            case "ServiceQuotaExceededException": return try ServiceQuotaExceededException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateBotOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "PreconditionFailedException": return try PreconditionFailedException.makeError(baseError: baseError)
            case "ServiceQuotaExceededException": return try ServiceQuotaExceededException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateBotAliasOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "PreconditionFailedException": return try PreconditionFailedException.makeError(baseError: baseError)
            case "ServiceQuotaExceededException": return try ServiceQuotaExceededException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateBotLocaleOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "PreconditionFailedException": return try PreconditionFailedException.makeError(baseError: baseError)
            case "ServiceQuotaExceededException": return try ServiceQuotaExceededException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateBotReplicaOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "PreconditionFailedException": return try PreconditionFailedException.makeError(baseError: baseError)
            case "ServiceQuotaExceededException": return try ServiceQuotaExceededException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateBotVersionOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "PreconditionFailedException": return try PreconditionFailedException.makeError(baseError: baseError)
            case "ServiceQuotaExceededException": return try ServiceQuotaExceededException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateExportOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceQuotaExceededException": return try ServiceQuotaExceededException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateIntentOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "PreconditionFailedException": return try PreconditionFailedException.makeError(baseError: baseError)
            case "ServiceQuotaExceededException": return try ServiceQuotaExceededException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateResourcePolicyOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "PreconditionFailedException": return try PreconditionFailedException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceQuotaExceededException": return try ServiceQuotaExceededException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateResourcePolicyStatementOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "PreconditionFailedException": return try PreconditionFailedException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceQuotaExceededException": return try ServiceQuotaExceededException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateSlotOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "PreconditionFailedException": return try PreconditionFailedException.makeError(baseError: baseError)
            case "ServiceQuotaExceededException": return try ServiceQuotaExceededException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateSlotTypeOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "PreconditionFailedException": return try PreconditionFailedException.makeError(baseError: baseError)
            case "ServiceQuotaExceededException": return try ServiceQuotaExceededException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateTestSetDiscrepancyReportOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceQuotaExceededException": return try ServiceQuotaExceededException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateUploadUrlOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteBotOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "PreconditionFailedException": return try PreconditionFailedException.makeError(baseError: baseError)
            case "ServiceQuotaExceededException": return try ServiceQuotaExceededException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteBotAliasOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "PreconditionFailedException": return try PreconditionFailedException.makeError(baseError: baseError)
            case "ServiceQuotaExceededException": return try ServiceQuotaExceededException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteBotLocaleOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "PreconditionFailedException": return try PreconditionFailedException.makeError(baseError: baseError)
            case "ServiceQuotaExceededException": return try ServiceQuotaExceededException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteBotReplicaOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "PreconditionFailedException": return try PreconditionFailedException.makeError(baseError: baseError)
            case "ServiceQuotaExceededException": return try ServiceQuotaExceededException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteBotVersionOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "PreconditionFailedException": return try PreconditionFailedException.makeError(baseError: baseError)
            case "ServiceQuotaExceededException": return try ServiceQuotaExceededException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteCustomVocabularyOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "PreconditionFailedException": return try PreconditionFailedException.makeError(baseError: baseError)
            case "ServiceQuotaExceededException": return try ServiceQuotaExceededException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteExportOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "PreconditionFailedException": return try PreconditionFailedException.makeError(baseError: baseError)
            case "ServiceQuotaExceededException": return try ServiceQuotaExceededException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteImportOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "PreconditionFailedException": return try PreconditionFailedException.makeError(baseError: baseError)
            case "ServiceQuotaExceededException": return try ServiceQuotaExceededException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteIntentOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "PreconditionFailedException": return try PreconditionFailedException.makeError(baseError: baseError)
            case "ServiceQuotaExceededException": return try ServiceQuotaExceededException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteResourcePolicyOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "PreconditionFailedException": return try PreconditionFailedException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteResourcePolicyStatementOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "PreconditionFailedException": return try PreconditionFailedException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteSlotOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "PreconditionFailedException": return try PreconditionFailedException.makeError(baseError: baseError)
            case "ServiceQuotaExceededException": return try ServiceQuotaExceededException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteSlotTypeOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "PreconditionFailedException": return try PreconditionFailedException.makeError(baseError: baseError)
            case "ServiceQuotaExceededException": return try ServiceQuotaExceededException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteTestSetOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "PreconditionFailedException": return try PreconditionFailedException.makeError(baseError: baseError)
            case "ServiceQuotaExceededException": return try ServiceQuotaExceededException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteUtterancesOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeBotOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceQuotaExceededException": return try ServiceQuotaExceededException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeBotAliasOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceQuotaExceededException": return try ServiceQuotaExceededException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeBotLocaleOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceQuotaExceededException": return try ServiceQuotaExceededException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeBotRecommendationOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeBotReplicaOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceQuotaExceededException": return try ServiceQuotaExceededException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeBotResourceGenerationOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeBotVersionOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceQuotaExceededException": return try ServiceQuotaExceededException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeCustomVocabularyMetadataOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceQuotaExceededException": return try ServiceQuotaExceededException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeExportOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeImportOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeIntentOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceQuotaExceededException": return try ServiceQuotaExceededException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeResourcePolicyOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeSlotOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceQuotaExceededException": return try ServiceQuotaExceededException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeSlotTypeOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceQuotaExceededException": return try ServiceQuotaExceededException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeTestExecutionOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceQuotaExceededException": return try ServiceQuotaExceededException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeTestSetOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceQuotaExceededException": return try ServiceQuotaExceededException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeTestSetDiscrepancyReportOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceQuotaExceededException": return try ServiceQuotaExceededException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeTestSetGenerationOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceQuotaExceededException": return try ServiceQuotaExceededException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GenerateBotElementOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "PreconditionFailedException": return try PreconditionFailedException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceQuotaExceededException": return try ServiceQuotaExceededException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetTestExecutionArtifactsUrlOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceQuotaExceededException": return try ServiceQuotaExceededException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListAggregatedUtterancesOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "PreconditionFailedException": return try PreconditionFailedException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListBotAliasesOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ServiceQuotaExceededException": return try ServiceQuotaExceededException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListBotAliasReplicasOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ServiceQuotaExceededException": return try ServiceQuotaExceededException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListBotLocalesOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ServiceQuotaExceededException": return try ServiceQuotaExceededException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListBotRecommendationsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListBotReplicasOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ServiceQuotaExceededException": return try ServiceQuotaExceededException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListBotResourceGenerationsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListBotsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ServiceQuotaExceededException": return try ServiceQuotaExceededException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListBotVersionReplicasOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ServiceQuotaExceededException": return try ServiceQuotaExceededException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListBotVersionsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ServiceQuotaExceededException": return try ServiceQuotaExceededException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListBuiltInIntentsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ServiceQuotaExceededException": return try ServiceQuotaExceededException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListBuiltInSlotTypesOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ServiceQuotaExceededException": return try ServiceQuotaExceededException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListCustomVocabularyItemsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceQuotaExceededException": return try ServiceQuotaExceededException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListExportsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListImportsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListIntentMetricsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "PreconditionFailedException": return try PreconditionFailedException.makeError(baseError: baseError)
            case "ServiceQuotaExceededException": return try ServiceQuotaExceededException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListIntentPathsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "PreconditionFailedException": return try PreconditionFailedException.makeError(baseError: baseError)
            case "ServiceQuotaExceededException": return try ServiceQuotaExceededException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListIntentsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ServiceQuotaExceededException": return try ServiceQuotaExceededException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListIntentStageMetricsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "PreconditionFailedException": return try PreconditionFailedException.makeError(baseError: baseError)
            case "ServiceQuotaExceededException": return try ServiceQuotaExceededException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListRecommendedIntentsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceQuotaExceededException": return try ServiceQuotaExceededException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListSessionAnalyticsDataOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "PreconditionFailedException": return try PreconditionFailedException.makeError(baseError: baseError)
            case "ServiceQuotaExceededException": return try ServiceQuotaExceededException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListSessionMetricsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "PreconditionFailedException": return try PreconditionFailedException.makeError(baseError: baseError)
            case "ServiceQuotaExceededException": return try ServiceQuotaExceededException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListSlotsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ServiceQuotaExceededException": return try ServiceQuotaExceededException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListSlotTypesOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ServiceQuotaExceededException": return try ServiceQuotaExceededException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListTagsForResourceOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListTestExecutionResultItemsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceQuotaExceededException": return try ServiceQuotaExceededException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListTestExecutionsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ServiceQuotaExceededException": return try ServiceQuotaExceededException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListTestSetRecordsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceQuotaExceededException": return try ServiceQuotaExceededException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListTestSetsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ServiceQuotaExceededException": return try ServiceQuotaExceededException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListUtteranceAnalyticsDataOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "PreconditionFailedException": return try PreconditionFailedException.makeError(baseError: baseError)
            case "ServiceQuotaExceededException": return try ServiceQuotaExceededException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListUtteranceMetricsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "PreconditionFailedException": return try PreconditionFailedException.makeError(baseError: baseError)
            case "ServiceQuotaExceededException": return try ServiceQuotaExceededException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum SearchAssociatedTranscriptsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceQuotaExceededException": return try ServiceQuotaExceededException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum StartBotRecommendationOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "PreconditionFailedException": return try PreconditionFailedException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceQuotaExceededException": return try ServiceQuotaExceededException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum StartBotResourceGenerationOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "PreconditionFailedException": return try PreconditionFailedException.makeError(baseError: baseError)
            case "ServiceQuotaExceededException": return try ServiceQuotaExceededException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum StartImportOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceQuotaExceededException": return try ServiceQuotaExceededException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum StartTestExecutionOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceQuotaExceededException": return try ServiceQuotaExceededException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum StartTestSetGenerationOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceQuotaExceededException": return try ServiceQuotaExceededException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum StopBotRecommendationOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "PreconditionFailedException": return try PreconditionFailedException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceQuotaExceededException": return try ServiceQuotaExceededException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum TagResourceOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UntagResourceOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdateBotOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "PreconditionFailedException": return try PreconditionFailedException.makeError(baseError: baseError)
            case "ServiceQuotaExceededException": return try ServiceQuotaExceededException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdateBotAliasOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "PreconditionFailedException": return try PreconditionFailedException.makeError(baseError: baseError)
            case "ServiceQuotaExceededException": return try ServiceQuotaExceededException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdateBotLocaleOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "PreconditionFailedException": return try PreconditionFailedException.makeError(baseError: baseError)
            case "ServiceQuotaExceededException": return try ServiceQuotaExceededException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdateBotRecommendationOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "PreconditionFailedException": return try PreconditionFailedException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceQuotaExceededException": return try ServiceQuotaExceededException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdateExportOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceQuotaExceededException": return try ServiceQuotaExceededException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdateIntentOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "PreconditionFailedException": return try PreconditionFailedException.makeError(baseError: baseError)
            case "ServiceQuotaExceededException": return try ServiceQuotaExceededException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdateResourcePolicyOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "PreconditionFailedException": return try PreconditionFailedException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceQuotaExceededException": return try ServiceQuotaExceededException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdateSlotOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "PreconditionFailedException": return try PreconditionFailedException.makeError(baseError: baseError)
            case "ServiceQuotaExceededException": return try ServiceQuotaExceededException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdateSlotTypeOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "PreconditionFailedException": return try PreconditionFailedException.makeError(baseError: baseError)
            case "ServiceQuotaExceededException": return try ServiceQuotaExceededException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdateTestSetOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "PreconditionFailedException": return try PreconditionFailedException.makeError(baseError: baseError)
            case "ServiceQuotaExceededException": return try ServiceQuotaExceededException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

extension ValidationException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> ValidationException {
        let reader = baseError.errorBodyReader
        var value = ValidationException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension InternalServerException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> InternalServerException {
        let reader = baseError.errorBodyReader
        var value = InternalServerException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ResourceNotFoundException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> ResourceNotFoundException {
        let reader = baseError.errorBodyReader
        var value = ResourceNotFoundException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ThrottlingException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> ThrottlingException {
        let reader = baseError.errorBodyReader
        let httpResponse = baseError.httpResponse
        var value = ThrottlingException()
        if let retryAfterSecondsHeaderValue = httpResponse.headers.value(for: "Retry-After") {
            value.properties.retryAfterSeconds = Swift.Int(retryAfterSecondsHeaderValue) ?? 0
        }
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ServiceQuotaExceededException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> ServiceQuotaExceededException {
        let reader = baseError.errorBodyReader
        var value = ServiceQuotaExceededException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ConflictException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> ConflictException {
        let reader = baseError.errorBodyReader
        var value = ConflictException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension PreconditionFailedException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> PreconditionFailedException {
        let reader = baseError.errorBodyReader
        var value = PreconditionFailedException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension LexModelsV2ClientTypes.FailedCustomVocabularyItem {

    static func read(from reader: SmithyJSON.Reader) throws -> LexModelsV2ClientTypes.FailedCustomVocabularyItem {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LexModelsV2ClientTypes.FailedCustomVocabularyItem()
        value.itemId = try reader["itemId"].readIfPresent()
        value.errorMessage = try reader["errorMessage"].readIfPresent()
        value.errorCode = try reader["errorCode"].readIfPresent()
        return value
    }
}

extension LexModelsV2ClientTypes.CustomVocabularyItem {

    static func write(value: LexModelsV2ClientTypes.CustomVocabularyItem?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["displayAs"].write(value.displayAs)
        try writer["itemId"].write(value.itemId)
        try writer["phrase"].write(value.phrase)
        try writer["weight"].write(value.weight)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> LexModelsV2ClientTypes.CustomVocabularyItem {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LexModelsV2ClientTypes.CustomVocabularyItem()
        value.itemId = try reader["itemId"].readIfPresent() ?? ""
        value.phrase = try reader["phrase"].readIfPresent() ?? ""
        value.weight = try reader["weight"].readIfPresent()
        value.displayAs = try reader["displayAs"].readIfPresent()
        return value
    }
}

extension LexModelsV2ClientTypes.DataPrivacy {

    static func write(value: LexModelsV2ClientTypes.DataPrivacy?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["childDirected"].write(value.childDirected)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> LexModelsV2ClientTypes.DataPrivacy {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LexModelsV2ClientTypes.DataPrivacy()
        value.childDirected = try reader["childDirected"].readIfPresent() ?? false
        return value
    }
}

extension LexModelsV2ClientTypes.BotMember {

    static func write(value: LexModelsV2ClientTypes.BotMember?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["botMemberAliasId"].write(value.botMemberAliasId)
        try writer["botMemberAliasName"].write(value.botMemberAliasName)
        try writer["botMemberId"].write(value.botMemberId)
        try writer["botMemberName"].write(value.botMemberName)
        try writer["botMemberVersion"].write(value.botMemberVersion)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> LexModelsV2ClientTypes.BotMember {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LexModelsV2ClientTypes.BotMember()
        value.botMemberId = try reader["botMemberId"].readIfPresent() ?? ""
        value.botMemberName = try reader["botMemberName"].readIfPresent() ?? ""
        value.botMemberAliasId = try reader["botMemberAliasId"].readIfPresent() ?? ""
        value.botMemberAliasName = try reader["botMemberAliasName"].readIfPresent() ?? ""
        value.botMemberVersion = try reader["botMemberVersion"].readIfPresent() ?? ""
        return value
    }
}

extension LexModelsV2ClientTypes.BotAliasLocaleSettings {

    static func write(value: LexModelsV2ClientTypes.BotAliasLocaleSettings?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["codeHookSpecification"].write(value.codeHookSpecification, with: LexModelsV2ClientTypes.CodeHookSpecification.write(value:to:))
        try writer["enabled"].write(value.enabled)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> LexModelsV2ClientTypes.BotAliasLocaleSettings {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LexModelsV2ClientTypes.BotAliasLocaleSettings()
        value.enabled = try reader["enabled"].readIfPresent() ?? false
        value.codeHookSpecification = try reader["codeHookSpecification"].readIfPresent(with: LexModelsV2ClientTypes.CodeHookSpecification.read(from:))
        return value
    }
}

extension LexModelsV2ClientTypes.CodeHookSpecification {

    static func write(value: LexModelsV2ClientTypes.CodeHookSpecification?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["lambdaCodeHook"].write(value.lambdaCodeHook, with: LexModelsV2ClientTypes.LambdaCodeHook.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> LexModelsV2ClientTypes.CodeHookSpecification {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LexModelsV2ClientTypes.CodeHookSpecification()
        value.lambdaCodeHook = try reader["lambdaCodeHook"].readIfPresent(with: LexModelsV2ClientTypes.LambdaCodeHook.read(from:))
        return value
    }
}

extension LexModelsV2ClientTypes.LambdaCodeHook {

    static func write(value: LexModelsV2ClientTypes.LambdaCodeHook?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["codeHookInterfaceVersion"].write(value.codeHookInterfaceVersion)
        try writer["lambdaARN"].write(value.lambdaARN)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> LexModelsV2ClientTypes.LambdaCodeHook {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LexModelsV2ClientTypes.LambdaCodeHook()
        value.lambdaARN = try reader["lambdaARN"].readIfPresent() ?? ""
        value.codeHookInterfaceVersion = try reader["codeHookInterfaceVersion"].readIfPresent() ?? ""
        return value
    }
}

extension LexModelsV2ClientTypes.ConversationLogSettings {

    static func write(value: LexModelsV2ClientTypes.ConversationLogSettings?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["audioLogSettings"].writeList(value.audioLogSettings, memberWritingClosure: LexModelsV2ClientTypes.AudioLogSetting.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["textLogSettings"].writeList(value.textLogSettings, memberWritingClosure: LexModelsV2ClientTypes.TextLogSetting.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> LexModelsV2ClientTypes.ConversationLogSettings {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LexModelsV2ClientTypes.ConversationLogSettings()
        value.textLogSettings = try reader["textLogSettings"].readListIfPresent(memberReadingClosure: LexModelsV2ClientTypes.TextLogSetting.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.audioLogSettings = try reader["audioLogSettings"].readListIfPresent(memberReadingClosure: LexModelsV2ClientTypes.AudioLogSetting.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension LexModelsV2ClientTypes.AudioLogSetting {

    static func write(value: LexModelsV2ClientTypes.AudioLogSetting?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["destination"].write(value.destination, with: LexModelsV2ClientTypes.AudioLogDestination.write(value:to:))
        try writer["enabled"].write(value.enabled)
        try writer["selectiveLoggingEnabled"].write(value.selectiveLoggingEnabled)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> LexModelsV2ClientTypes.AudioLogSetting {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LexModelsV2ClientTypes.AudioLogSetting()
        value.enabled = try reader["enabled"].readIfPresent() ?? false
        value.destination = try reader["destination"].readIfPresent(with: LexModelsV2ClientTypes.AudioLogDestination.read(from:))
        value.selectiveLoggingEnabled = try reader["selectiveLoggingEnabled"].readIfPresent()
        return value
    }
}

extension LexModelsV2ClientTypes.AudioLogDestination {

    static func write(value: LexModelsV2ClientTypes.AudioLogDestination?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["s3Bucket"].write(value.s3Bucket, with: LexModelsV2ClientTypes.S3BucketLogDestination.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> LexModelsV2ClientTypes.AudioLogDestination {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LexModelsV2ClientTypes.AudioLogDestination()
        value.s3Bucket = try reader["s3Bucket"].readIfPresent(with: LexModelsV2ClientTypes.S3BucketLogDestination.read(from:))
        return value
    }
}

extension LexModelsV2ClientTypes.S3BucketLogDestination {

    static func write(value: LexModelsV2ClientTypes.S3BucketLogDestination?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["kmsKeyArn"].write(value.kmsKeyArn)
        try writer["logPrefix"].write(value.logPrefix)
        try writer["s3BucketArn"].write(value.s3BucketArn)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> LexModelsV2ClientTypes.S3BucketLogDestination {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LexModelsV2ClientTypes.S3BucketLogDestination()
        value.kmsKeyArn = try reader["kmsKeyArn"].readIfPresent()
        value.s3BucketArn = try reader["s3BucketArn"].readIfPresent() ?? ""
        value.logPrefix = try reader["logPrefix"].readIfPresent() ?? ""
        return value
    }
}

extension LexModelsV2ClientTypes.TextLogSetting {

    static func write(value: LexModelsV2ClientTypes.TextLogSetting?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["destination"].write(value.destination, with: LexModelsV2ClientTypes.TextLogDestination.write(value:to:))
        try writer["enabled"].write(value.enabled)
        try writer["selectiveLoggingEnabled"].write(value.selectiveLoggingEnabled)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> LexModelsV2ClientTypes.TextLogSetting {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LexModelsV2ClientTypes.TextLogSetting()
        value.enabled = try reader["enabled"].readIfPresent() ?? false
        value.destination = try reader["destination"].readIfPresent(with: LexModelsV2ClientTypes.TextLogDestination.read(from:))
        value.selectiveLoggingEnabled = try reader["selectiveLoggingEnabled"].readIfPresent()
        return value
    }
}

extension LexModelsV2ClientTypes.TextLogDestination {

    static func write(value: LexModelsV2ClientTypes.TextLogDestination?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["cloudWatch"].write(value.cloudWatch, with: LexModelsV2ClientTypes.CloudWatchLogGroupLogDestination.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> LexModelsV2ClientTypes.TextLogDestination {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LexModelsV2ClientTypes.TextLogDestination()
        value.cloudWatch = try reader["cloudWatch"].readIfPresent(with: LexModelsV2ClientTypes.CloudWatchLogGroupLogDestination.read(from:))
        return value
    }
}

extension LexModelsV2ClientTypes.CloudWatchLogGroupLogDestination {

    static func write(value: LexModelsV2ClientTypes.CloudWatchLogGroupLogDestination?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["cloudWatchLogGroupArn"].write(value.cloudWatchLogGroupArn)
        try writer["logPrefix"].write(value.logPrefix)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> LexModelsV2ClientTypes.CloudWatchLogGroupLogDestination {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LexModelsV2ClientTypes.CloudWatchLogGroupLogDestination()
        value.cloudWatchLogGroupArn = try reader["cloudWatchLogGroupArn"].readIfPresent() ?? ""
        value.logPrefix = try reader["logPrefix"].readIfPresent() ?? ""
        return value
    }
}

extension LexModelsV2ClientTypes.SentimentAnalysisSettings {

    static func write(value: LexModelsV2ClientTypes.SentimentAnalysisSettings?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["detectSentiment"].write(value.detectSentiment)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> LexModelsV2ClientTypes.SentimentAnalysisSettings {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LexModelsV2ClientTypes.SentimentAnalysisSettings()
        value.detectSentiment = try reader["detectSentiment"].readIfPresent() ?? false
        return value
    }
}

extension LexModelsV2ClientTypes.VoiceSettings {

    static func write(value: LexModelsV2ClientTypes.VoiceSettings?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["engine"].write(value.engine)
        try writer["voiceId"].write(value.voiceId)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> LexModelsV2ClientTypes.VoiceSettings {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LexModelsV2ClientTypes.VoiceSettings()
        value.voiceId = try reader["voiceId"].readIfPresent() ?? ""
        value.engine = try reader["engine"].readIfPresent()
        return value
    }
}

extension LexModelsV2ClientTypes.GenerativeAISettings {

    static func write(value: LexModelsV2ClientTypes.GenerativeAISettings?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["buildtimeSettings"].write(value.buildtimeSettings, with: LexModelsV2ClientTypes.BuildtimeSettings.write(value:to:))
        try writer["runtimeSettings"].write(value.runtimeSettings, with: LexModelsV2ClientTypes.RuntimeSettings.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> LexModelsV2ClientTypes.GenerativeAISettings {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LexModelsV2ClientTypes.GenerativeAISettings()
        value.runtimeSettings = try reader["runtimeSettings"].readIfPresent(with: LexModelsV2ClientTypes.RuntimeSettings.read(from:))
        value.buildtimeSettings = try reader["buildtimeSettings"].readIfPresent(with: LexModelsV2ClientTypes.BuildtimeSettings.read(from:))
        return value
    }
}

extension LexModelsV2ClientTypes.BuildtimeSettings {

    static func write(value: LexModelsV2ClientTypes.BuildtimeSettings?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["descriptiveBotBuilder"].write(value.descriptiveBotBuilder, with: LexModelsV2ClientTypes.DescriptiveBotBuilderSpecification.write(value:to:))
        try writer["sampleUtteranceGeneration"].write(value.sampleUtteranceGeneration, with: LexModelsV2ClientTypes.SampleUtteranceGenerationSpecification.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> LexModelsV2ClientTypes.BuildtimeSettings {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LexModelsV2ClientTypes.BuildtimeSettings()
        value.descriptiveBotBuilder = try reader["descriptiveBotBuilder"].readIfPresent(with: LexModelsV2ClientTypes.DescriptiveBotBuilderSpecification.read(from:))
        value.sampleUtteranceGeneration = try reader["sampleUtteranceGeneration"].readIfPresent(with: LexModelsV2ClientTypes.SampleUtteranceGenerationSpecification.read(from:))
        return value
    }
}

extension LexModelsV2ClientTypes.SampleUtteranceGenerationSpecification {

    static func write(value: LexModelsV2ClientTypes.SampleUtteranceGenerationSpecification?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["bedrockModelSpecification"].write(value.bedrockModelSpecification, with: LexModelsV2ClientTypes.BedrockModelSpecification.write(value:to:))
        try writer["enabled"].write(value.enabled)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> LexModelsV2ClientTypes.SampleUtteranceGenerationSpecification {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LexModelsV2ClientTypes.SampleUtteranceGenerationSpecification()
        value.enabled = try reader["enabled"].readIfPresent() ?? false
        value.bedrockModelSpecification = try reader["bedrockModelSpecification"].readIfPresent(with: LexModelsV2ClientTypes.BedrockModelSpecification.read(from:))
        return value
    }
}

extension LexModelsV2ClientTypes.BedrockModelSpecification {

    static func write(value: LexModelsV2ClientTypes.BedrockModelSpecification?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["customPrompt"].write(value.customPrompt)
        try writer["guardrail"].write(value.guardrail, with: LexModelsV2ClientTypes.BedrockGuardrailConfiguration.write(value:to:))
        try writer["modelArn"].write(value.modelArn)
        try writer["traceStatus"].write(value.traceStatus)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> LexModelsV2ClientTypes.BedrockModelSpecification {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LexModelsV2ClientTypes.BedrockModelSpecification()
        value.modelArn = try reader["modelArn"].readIfPresent() ?? ""
        value.guardrail = try reader["guardrail"].readIfPresent(with: LexModelsV2ClientTypes.BedrockGuardrailConfiguration.read(from:))
        value.traceStatus = try reader["traceStatus"].readIfPresent()
        value.customPrompt = try reader["customPrompt"].readIfPresent()
        return value
    }
}

extension LexModelsV2ClientTypes.BedrockGuardrailConfiguration {

    static func write(value: LexModelsV2ClientTypes.BedrockGuardrailConfiguration?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["identifier"].write(value.identifier)
        try writer["version"].write(value.version)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> LexModelsV2ClientTypes.BedrockGuardrailConfiguration {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LexModelsV2ClientTypes.BedrockGuardrailConfiguration()
        value.identifier = try reader["identifier"].readIfPresent() ?? ""
        value.version = try reader["version"].readIfPresent() ?? ""
        return value
    }
}

extension LexModelsV2ClientTypes.DescriptiveBotBuilderSpecification {

    static func write(value: LexModelsV2ClientTypes.DescriptiveBotBuilderSpecification?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["bedrockModelSpecification"].write(value.bedrockModelSpecification, with: LexModelsV2ClientTypes.BedrockModelSpecification.write(value:to:))
        try writer["enabled"].write(value.enabled)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> LexModelsV2ClientTypes.DescriptiveBotBuilderSpecification {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LexModelsV2ClientTypes.DescriptiveBotBuilderSpecification()
        value.enabled = try reader["enabled"].readIfPresent() ?? false
        value.bedrockModelSpecification = try reader["bedrockModelSpecification"].readIfPresent(with: LexModelsV2ClientTypes.BedrockModelSpecification.read(from:))
        return value
    }
}

extension LexModelsV2ClientTypes.RuntimeSettings {

    static func write(value: LexModelsV2ClientTypes.RuntimeSettings?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["slotResolutionImprovement"].write(value.slotResolutionImprovement, with: LexModelsV2ClientTypes.SlotResolutionImprovementSpecification.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> LexModelsV2ClientTypes.RuntimeSettings {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LexModelsV2ClientTypes.RuntimeSettings()
        value.slotResolutionImprovement = try reader["slotResolutionImprovement"].readIfPresent(with: LexModelsV2ClientTypes.SlotResolutionImprovementSpecification.read(from:))
        return value
    }
}

extension LexModelsV2ClientTypes.SlotResolutionImprovementSpecification {

    static func write(value: LexModelsV2ClientTypes.SlotResolutionImprovementSpecification?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["bedrockModelSpecification"].write(value.bedrockModelSpecification, with: LexModelsV2ClientTypes.BedrockModelSpecification.write(value:to:))
        try writer["enabled"].write(value.enabled)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> LexModelsV2ClientTypes.SlotResolutionImprovementSpecification {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LexModelsV2ClientTypes.SlotResolutionImprovementSpecification()
        value.enabled = try reader["enabled"].readIfPresent() ?? false
        value.bedrockModelSpecification = try reader["bedrockModelSpecification"].readIfPresent(with: LexModelsV2ClientTypes.BedrockModelSpecification.read(from:))
        return value
    }
}

extension LexModelsV2ClientTypes.BotVersionLocaleDetails {

    static func write(value: LexModelsV2ClientTypes.BotVersionLocaleDetails?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["sourceBotVersion"].write(value.sourceBotVersion)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> LexModelsV2ClientTypes.BotVersionLocaleDetails {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LexModelsV2ClientTypes.BotVersionLocaleDetails()
        value.sourceBotVersion = try reader["sourceBotVersion"].readIfPresent() ?? ""
        return value
    }
}

extension LexModelsV2ClientTypes.ExportResourceSpecification {

    static func write(value: LexModelsV2ClientTypes.ExportResourceSpecification?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["botExportSpecification"].write(value.botExportSpecification, with: LexModelsV2ClientTypes.BotExportSpecification.write(value:to:))
        try writer["botLocaleExportSpecification"].write(value.botLocaleExportSpecification, with: LexModelsV2ClientTypes.BotLocaleExportSpecification.write(value:to:))
        try writer["customVocabularyExportSpecification"].write(value.customVocabularyExportSpecification, with: LexModelsV2ClientTypes.CustomVocabularyExportSpecification.write(value:to:))
        try writer["testSetExportSpecification"].write(value.testSetExportSpecification, with: LexModelsV2ClientTypes.TestSetExportSpecification.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> LexModelsV2ClientTypes.ExportResourceSpecification {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LexModelsV2ClientTypes.ExportResourceSpecification()
        value.botExportSpecification = try reader["botExportSpecification"].readIfPresent(with: LexModelsV2ClientTypes.BotExportSpecification.read(from:))
        value.botLocaleExportSpecification = try reader["botLocaleExportSpecification"].readIfPresent(with: LexModelsV2ClientTypes.BotLocaleExportSpecification.read(from:))
        value.customVocabularyExportSpecification = try reader["customVocabularyExportSpecification"].readIfPresent(with: LexModelsV2ClientTypes.CustomVocabularyExportSpecification.read(from:))
        value.testSetExportSpecification = try reader["testSetExportSpecification"].readIfPresent(with: LexModelsV2ClientTypes.TestSetExportSpecification.read(from:))
        return value
    }
}

extension LexModelsV2ClientTypes.TestSetExportSpecification {

    static func write(value: LexModelsV2ClientTypes.TestSetExportSpecification?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["testSetId"].write(value.testSetId)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> LexModelsV2ClientTypes.TestSetExportSpecification {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LexModelsV2ClientTypes.TestSetExportSpecification()
        value.testSetId = try reader["testSetId"].readIfPresent() ?? ""
        return value
    }
}

extension LexModelsV2ClientTypes.CustomVocabularyExportSpecification {

    static func write(value: LexModelsV2ClientTypes.CustomVocabularyExportSpecification?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["botId"].write(value.botId)
        try writer["botVersion"].write(value.botVersion)
        try writer["localeId"].write(value.localeId)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> LexModelsV2ClientTypes.CustomVocabularyExportSpecification {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LexModelsV2ClientTypes.CustomVocabularyExportSpecification()
        value.botId = try reader["botId"].readIfPresent() ?? ""
        value.botVersion = try reader["botVersion"].readIfPresent() ?? ""
        value.localeId = try reader["localeId"].readIfPresent() ?? ""
        return value
    }
}

extension LexModelsV2ClientTypes.BotLocaleExportSpecification {

    static func write(value: LexModelsV2ClientTypes.BotLocaleExportSpecification?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["botId"].write(value.botId)
        try writer["botVersion"].write(value.botVersion)
        try writer["localeId"].write(value.localeId)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> LexModelsV2ClientTypes.BotLocaleExportSpecification {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LexModelsV2ClientTypes.BotLocaleExportSpecification()
        value.botId = try reader["botId"].readIfPresent() ?? ""
        value.botVersion = try reader["botVersion"].readIfPresent() ?? ""
        value.localeId = try reader["localeId"].readIfPresent() ?? ""
        return value
    }
}

extension LexModelsV2ClientTypes.BotExportSpecification {

    static func write(value: LexModelsV2ClientTypes.BotExportSpecification?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["botId"].write(value.botId)
        try writer["botVersion"].write(value.botVersion)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> LexModelsV2ClientTypes.BotExportSpecification {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LexModelsV2ClientTypes.BotExportSpecification()
        value.botId = try reader["botId"].readIfPresent() ?? ""
        value.botVersion = try reader["botVersion"].readIfPresent() ?? ""
        return value
    }
}

extension LexModelsV2ClientTypes.SampleUtterance {

    static func write(value: LexModelsV2ClientTypes.SampleUtterance?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["utterance"].write(value.utterance)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> LexModelsV2ClientTypes.SampleUtterance {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LexModelsV2ClientTypes.SampleUtterance()
        value.utterance = try reader["utterance"].readIfPresent() ?? ""
        return value
    }
}

extension LexModelsV2ClientTypes.DialogCodeHookSettings {

    static func write(value: LexModelsV2ClientTypes.DialogCodeHookSettings?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["enabled"].write(value.enabled)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> LexModelsV2ClientTypes.DialogCodeHookSettings {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LexModelsV2ClientTypes.DialogCodeHookSettings()
        value.enabled = try reader["enabled"].readIfPresent() ?? false
        return value
    }
}

extension LexModelsV2ClientTypes.FulfillmentCodeHookSettings {

    static func write(value: LexModelsV2ClientTypes.FulfillmentCodeHookSettings?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["active"].write(value.active)
        try writer["enabled"].write(value.enabled)
        try writer["fulfillmentUpdatesSpecification"].write(value.fulfillmentUpdatesSpecification, with: LexModelsV2ClientTypes.FulfillmentUpdatesSpecification.write(value:to:))
        try writer["postFulfillmentStatusSpecification"].write(value.postFulfillmentStatusSpecification, with: LexModelsV2ClientTypes.PostFulfillmentStatusSpecification.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> LexModelsV2ClientTypes.FulfillmentCodeHookSettings {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LexModelsV2ClientTypes.FulfillmentCodeHookSettings()
        value.enabled = try reader["enabled"].readIfPresent() ?? false
        value.postFulfillmentStatusSpecification = try reader["postFulfillmentStatusSpecification"].readIfPresent(with: LexModelsV2ClientTypes.PostFulfillmentStatusSpecification.read(from:))
        value.fulfillmentUpdatesSpecification = try reader["fulfillmentUpdatesSpecification"].readIfPresent(with: LexModelsV2ClientTypes.FulfillmentUpdatesSpecification.read(from:))
        value.active = try reader["active"].readIfPresent()
        return value
    }
}

extension LexModelsV2ClientTypes.FulfillmentUpdatesSpecification {

    static func write(value: LexModelsV2ClientTypes.FulfillmentUpdatesSpecification?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["active"].write(value.active)
        try writer["startResponse"].write(value.startResponse, with: LexModelsV2ClientTypes.FulfillmentStartResponseSpecification.write(value:to:))
        try writer["timeoutInSeconds"].write(value.timeoutInSeconds)
        try writer["updateResponse"].write(value.updateResponse, with: LexModelsV2ClientTypes.FulfillmentUpdateResponseSpecification.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> LexModelsV2ClientTypes.FulfillmentUpdatesSpecification {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LexModelsV2ClientTypes.FulfillmentUpdatesSpecification()
        value.active = try reader["active"].readIfPresent() ?? false
        value.startResponse = try reader["startResponse"].readIfPresent(with: LexModelsV2ClientTypes.FulfillmentStartResponseSpecification.read(from:))
        value.updateResponse = try reader["updateResponse"].readIfPresent(with: LexModelsV2ClientTypes.FulfillmentUpdateResponseSpecification.read(from:))
        value.timeoutInSeconds = try reader["timeoutInSeconds"].readIfPresent()
        return value
    }
}

extension LexModelsV2ClientTypes.FulfillmentUpdateResponseSpecification {

    static func write(value: LexModelsV2ClientTypes.FulfillmentUpdateResponseSpecification?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["allowInterrupt"].write(value.allowInterrupt)
        try writer["frequencyInSeconds"].write(value.frequencyInSeconds)
        try writer["messageGroups"].writeList(value.messageGroups, memberWritingClosure: LexModelsV2ClientTypes.MessageGroup.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> LexModelsV2ClientTypes.FulfillmentUpdateResponseSpecification {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LexModelsV2ClientTypes.FulfillmentUpdateResponseSpecification()
        value.frequencyInSeconds = try reader["frequencyInSeconds"].readIfPresent() ?? 0
        value.messageGroups = try reader["messageGroups"].readListIfPresent(memberReadingClosure: LexModelsV2ClientTypes.MessageGroup.read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        value.allowInterrupt = try reader["allowInterrupt"].readIfPresent()
        return value
    }
}

extension LexModelsV2ClientTypes.MessageGroup {

    static func write(value: LexModelsV2ClientTypes.MessageGroup?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["message"].write(value.message, with: LexModelsV2ClientTypes.Message.write(value:to:))
        try writer["variations"].writeList(value.variations, memberWritingClosure: LexModelsV2ClientTypes.Message.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> LexModelsV2ClientTypes.MessageGroup {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LexModelsV2ClientTypes.MessageGroup()
        value.message = try reader["message"].readIfPresent(with: LexModelsV2ClientTypes.Message.read(from:))
        value.variations = try reader["variations"].readListIfPresent(memberReadingClosure: LexModelsV2ClientTypes.Message.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension LexModelsV2ClientTypes.Message {

    static func write(value: LexModelsV2ClientTypes.Message?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["customPayload"].write(value.customPayload, with: LexModelsV2ClientTypes.CustomPayload.write(value:to:))
        try writer["imageResponseCard"].write(value.imageResponseCard, with: LexModelsV2ClientTypes.ImageResponseCard.write(value:to:))
        try writer["plainTextMessage"].write(value.plainTextMessage, with: LexModelsV2ClientTypes.PlainTextMessage.write(value:to:))
        try writer["ssmlMessage"].write(value.ssmlMessage, with: LexModelsV2ClientTypes.SSMLMessage.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> LexModelsV2ClientTypes.Message {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LexModelsV2ClientTypes.Message()
        value.plainTextMessage = try reader["plainTextMessage"].readIfPresent(with: LexModelsV2ClientTypes.PlainTextMessage.read(from:))
        value.customPayload = try reader["customPayload"].readIfPresent(with: LexModelsV2ClientTypes.CustomPayload.read(from:))
        value.ssmlMessage = try reader["ssmlMessage"].readIfPresent(with: LexModelsV2ClientTypes.SSMLMessage.read(from:))
        value.imageResponseCard = try reader["imageResponseCard"].readIfPresent(with: LexModelsV2ClientTypes.ImageResponseCard.read(from:))
        return value
    }
}

extension LexModelsV2ClientTypes.ImageResponseCard {

    static func write(value: LexModelsV2ClientTypes.ImageResponseCard?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["buttons"].writeList(value.buttons, memberWritingClosure: LexModelsV2ClientTypes.Button.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["imageUrl"].write(value.imageUrl)
        try writer["subtitle"].write(value.subtitle)
        try writer["title"].write(value.title)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> LexModelsV2ClientTypes.ImageResponseCard {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LexModelsV2ClientTypes.ImageResponseCard()
        value.title = try reader["title"].readIfPresent() ?? ""
        value.subtitle = try reader["subtitle"].readIfPresent()
        value.imageUrl = try reader["imageUrl"].readIfPresent()
        value.buttons = try reader["buttons"].readListIfPresent(memberReadingClosure: LexModelsV2ClientTypes.Button.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension LexModelsV2ClientTypes.Button {

    static func write(value: LexModelsV2ClientTypes.Button?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["text"].write(value.text)
        try writer["value"].write(value.value)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> LexModelsV2ClientTypes.Button {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LexModelsV2ClientTypes.Button()
        value.text = try reader["text"].readIfPresent() ?? ""
        value.value = try reader["value"].readIfPresent() ?? ""
        return value
    }
}

extension LexModelsV2ClientTypes.SSMLMessage {

    static func write(value: LexModelsV2ClientTypes.SSMLMessage?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["value"].write(value.value)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> LexModelsV2ClientTypes.SSMLMessage {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LexModelsV2ClientTypes.SSMLMessage()
        value.value = try reader["value"].readIfPresent() ?? ""
        return value
    }
}

extension LexModelsV2ClientTypes.CustomPayload {

    static func write(value: LexModelsV2ClientTypes.CustomPayload?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["value"].write(value.value)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> LexModelsV2ClientTypes.CustomPayload {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LexModelsV2ClientTypes.CustomPayload()
        value.value = try reader["value"].readIfPresent() ?? ""
        return value
    }
}

extension LexModelsV2ClientTypes.PlainTextMessage {

    static func write(value: LexModelsV2ClientTypes.PlainTextMessage?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["value"].write(value.value)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> LexModelsV2ClientTypes.PlainTextMessage {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LexModelsV2ClientTypes.PlainTextMessage()
        value.value = try reader["value"].readIfPresent() ?? ""
        return value
    }
}

extension LexModelsV2ClientTypes.FulfillmentStartResponseSpecification {

    static func write(value: LexModelsV2ClientTypes.FulfillmentStartResponseSpecification?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["allowInterrupt"].write(value.allowInterrupt)
        try writer["delayInSeconds"].write(value.delayInSeconds)
        try writer["messageGroups"].writeList(value.messageGroups, memberWritingClosure: LexModelsV2ClientTypes.MessageGroup.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> LexModelsV2ClientTypes.FulfillmentStartResponseSpecification {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LexModelsV2ClientTypes.FulfillmentStartResponseSpecification()
        value.delayInSeconds = try reader["delayInSeconds"].readIfPresent() ?? 0
        value.messageGroups = try reader["messageGroups"].readListIfPresent(memberReadingClosure: LexModelsV2ClientTypes.MessageGroup.read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        value.allowInterrupt = try reader["allowInterrupt"].readIfPresent()
        return value
    }
}

extension LexModelsV2ClientTypes.PostFulfillmentStatusSpecification {

    static func write(value: LexModelsV2ClientTypes.PostFulfillmentStatusSpecification?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["failureConditional"].write(value.failureConditional, with: LexModelsV2ClientTypes.ConditionalSpecification.write(value:to:))
        try writer["failureNextStep"].write(value.failureNextStep, with: LexModelsV2ClientTypes.DialogState.write(value:to:))
        try writer["failureResponse"].write(value.failureResponse, with: LexModelsV2ClientTypes.ResponseSpecification.write(value:to:))
        try writer["successConditional"].write(value.successConditional, with: LexModelsV2ClientTypes.ConditionalSpecification.write(value:to:))
        try writer["successNextStep"].write(value.successNextStep, with: LexModelsV2ClientTypes.DialogState.write(value:to:))
        try writer["successResponse"].write(value.successResponse, with: LexModelsV2ClientTypes.ResponseSpecification.write(value:to:))
        try writer["timeoutConditional"].write(value.timeoutConditional, with: LexModelsV2ClientTypes.ConditionalSpecification.write(value:to:))
        try writer["timeoutNextStep"].write(value.timeoutNextStep, with: LexModelsV2ClientTypes.DialogState.write(value:to:))
        try writer["timeoutResponse"].write(value.timeoutResponse, with: LexModelsV2ClientTypes.ResponseSpecification.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> LexModelsV2ClientTypes.PostFulfillmentStatusSpecification {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LexModelsV2ClientTypes.PostFulfillmentStatusSpecification()
        value.successResponse = try reader["successResponse"].readIfPresent(with: LexModelsV2ClientTypes.ResponseSpecification.read(from:))
        value.failureResponse = try reader["failureResponse"].readIfPresent(with: LexModelsV2ClientTypes.ResponseSpecification.read(from:))
        value.timeoutResponse = try reader["timeoutResponse"].readIfPresent(with: LexModelsV2ClientTypes.ResponseSpecification.read(from:))
        value.successNextStep = try reader["successNextStep"].readIfPresent(with: LexModelsV2ClientTypes.DialogState.read(from:))
        value.successConditional = try reader["successConditional"].readIfPresent(with: LexModelsV2ClientTypes.ConditionalSpecification.read(from:))
        value.failureNextStep = try reader["failureNextStep"].readIfPresent(with: LexModelsV2ClientTypes.DialogState.read(from:))
        value.failureConditional = try reader["failureConditional"].readIfPresent(with: LexModelsV2ClientTypes.ConditionalSpecification.read(from:))
        value.timeoutNextStep = try reader["timeoutNextStep"].readIfPresent(with: LexModelsV2ClientTypes.DialogState.read(from:))
        value.timeoutConditional = try reader["timeoutConditional"].readIfPresent(with: LexModelsV2ClientTypes.ConditionalSpecification.read(from:))
        return value
    }
}

extension LexModelsV2ClientTypes.ConditionalSpecification {

    static func write(value: LexModelsV2ClientTypes.ConditionalSpecification?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["active"].write(value.active)
        try writer["conditionalBranches"].writeList(value.conditionalBranches, memberWritingClosure: LexModelsV2ClientTypes.ConditionalBranch.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["defaultBranch"].write(value.defaultBranch, with: LexModelsV2ClientTypes.DefaultConditionalBranch.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> LexModelsV2ClientTypes.ConditionalSpecification {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LexModelsV2ClientTypes.ConditionalSpecification()
        value.active = try reader["active"].readIfPresent() ?? false
        value.conditionalBranches = try reader["conditionalBranches"].readListIfPresent(memberReadingClosure: LexModelsV2ClientTypes.ConditionalBranch.read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        value.defaultBranch = try reader["defaultBranch"].readIfPresent(with: LexModelsV2ClientTypes.DefaultConditionalBranch.read(from:))
        return value
    }
}

extension LexModelsV2ClientTypes.DefaultConditionalBranch {

    static func write(value: LexModelsV2ClientTypes.DefaultConditionalBranch?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["nextStep"].write(value.nextStep, with: LexModelsV2ClientTypes.DialogState.write(value:to:))
        try writer["response"].write(value.response, with: LexModelsV2ClientTypes.ResponseSpecification.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> LexModelsV2ClientTypes.DefaultConditionalBranch {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LexModelsV2ClientTypes.DefaultConditionalBranch()
        value.nextStep = try reader["nextStep"].readIfPresent(with: LexModelsV2ClientTypes.DialogState.read(from:))
        value.response = try reader["response"].readIfPresent(with: LexModelsV2ClientTypes.ResponseSpecification.read(from:))
        return value
    }
}

extension LexModelsV2ClientTypes.ResponseSpecification {

    static func write(value: LexModelsV2ClientTypes.ResponseSpecification?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["allowInterrupt"].write(value.allowInterrupt)
        try writer["messageGroups"].writeList(value.messageGroups, memberWritingClosure: LexModelsV2ClientTypes.MessageGroup.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> LexModelsV2ClientTypes.ResponseSpecification {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LexModelsV2ClientTypes.ResponseSpecification()
        value.messageGroups = try reader["messageGroups"].readListIfPresent(memberReadingClosure: LexModelsV2ClientTypes.MessageGroup.read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        value.allowInterrupt = try reader["allowInterrupt"].readIfPresent()
        return value
    }
}

extension LexModelsV2ClientTypes.DialogState {

    static func write(value: LexModelsV2ClientTypes.DialogState?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["dialogAction"].write(value.dialogAction, with: LexModelsV2ClientTypes.DialogAction.write(value:to:))
        try writer["intent"].write(value.intent, with: LexModelsV2ClientTypes.IntentOverride.write(value:to:))
        try writer["sessionAttributes"].writeMap(value.sessionAttributes, valueWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> LexModelsV2ClientTypes.DialogState {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LexModelsV2ClientTypes.DialogState()
        value.dialogAction = try reader["dialogAction"].readIfPresent(with: LexModelsV2ClientTypes.DialogAction.read(from:))
        value.intent = try reader["intent"].readIfPresent(with: LexModelsV2ClientTypes.IntentOverride.read(from:))
        value.sessionAttributes = try reader["sessionAttributes"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        return value
    }
}

extension LexModelsV2ClientTypes.IntentOverride {

    static func write(value: LexModelsV2ClientTypes.IntentOverride?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["name"].write(value.name)
        try writer["slots"].writeMap(value.slots, valueWritingClosure: LexModelsV2ClientTypes.SlotValueOverride.write(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> LexModelsV2ClientTypes.IntentOverride {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LexModelsV2ClientTypes.IntentOverride()
        value.name = try reader["name"].readIfPresent()
        value.slots = try reader["slots"].readMapIfPresent(valueReadingClosure: LexModelsV2ClientTypes.SlotValueOverride.read(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        return value
    }
}

extension LexModelsV2ClientTypes.SlotValueOverride {

    static func write(value: LexModelsV2ClientTypes.SlotValueOverride?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["shape"].write(value.shape)
        try writer["value"].write(value.value, with: LexModelsV2ClientTypes.SlotValue.write(value:to:))
        try writer["values"].writeList(value.values, memberWritingClosure: LexModelsV2ClientTypes.SlotValueOverride.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> LexModelsV2ClientTypes.SlotValueOverride {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LexModelsV2ClientTypes.SlotValueOverride()
        value.shape = try reader["shape"].readIfPresent()
        value.value = try reader["value"].readIfPresent(with: LexModelsV2ClientTypes.SlotValue.read(from:))
        value.values = try reader["values"].readListIfPresent(memberReadingClosure: LexModelsV2ClientTypes.SlotValueOverride.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension LexModelsV2ClientTypes.SlotValue {

    static func write(value: LexModelsV2ClientTypes.SlotValue?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["interpretedValue"].write(value.interpretedValue)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> LexModelsV2ClientTypes.SlotValue {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LexModelsV2ClientTypes.SlotValue()
        value.interpretedValue = try reader["interpretedValue"].readIfPresent()
        return value
    }
}

extension LexModelsV2ClientTypes.DialogAction {

    static func write(value: LexModelsV2ClientTypes.DialogAction?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["slotToElicit"].write(value.slotToElicit)
        try writer["suppressNextMessage"].write(value.suppressNextMessage)
        try writer["type"].write(value.type)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> LexModelsV2ClientTypes.DialogAction {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LexModelsV2ClientTypes.DialogAction()
        value.type = try reader["type"].readIfPresent() ?? .sdkUnknown("")
        value.slotToElicit = try reader["slotToElicit"].readIfPresent()
        value.suppressNextMessage = try reader["suppressNextMessage"].readIfPresent()
        return value
    }
}

extension LexModelsV2ClientTypes.ConditionalBranch {

    static func write(value: LexModelsV2ClientTypes.ConditionalBranch?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["condition"].write(value.condition, with: LexModelsV2ClientTypes.Condition.write(value:to:))
        try writer["name"].write(value.name)
        try writer["nextStep"].write(value.nextStep, with: LexModelsV2ClientTypes.DialogState.write(value:to:))
        try writer["response"].write(value.response, with: LexModelsV2ClientTypes.ResponseSpecification.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> LexModelsV2ClientTypes.ConditionalBranch {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LexModelsV2ClientTypes.ConditionalBranch()
        value.name = try reader["name"].readIfPresent() ?? ""
        value.condition = try reader["condition"].readIfPresent(with: LexModelsV2ClientTypes.Condition.read(from:))
        value.nextStep = try reader["nextStep"].readIfPresent(with: LexModelsV2ClientTypes.DialogState.read(from:))
        value.response = try reader["response"].readIfPresent(with: LexModelsV2ClientTypes.ResponseSpecification.read(from:))
        return value
    }
}

extension LexModelsV2ClientTypes.Condition {

    static func write(value: LexModelsV2ClientTypes.Condition?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["expressionString"].write(value.expressionString)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> LexModelsV2ClientTypes.Condition {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LexModelsV2ClientTypes.Condition()
        value.expressionString = try reader["expressionString"].readIfPresent() ?? ""
        return value
    }
}

extension LexModelsV2ClientTypes.IntentConfirmationSetting {

    static func write(value: LexModelsV2ClientTypes.IntentConfirmationSetting?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["active"].write(value.active)
        try writer["codeHook"].write(value.codeHook, with: LexModelsV2ClientTypes.DialogCodeHookInvocationSetting.write(value:to:))
        try writer["confirmationConditional"].write(value.confirmationConditional, with: LexModelsV2ClientTypes.ConditionalSpecification.write(value:to:))
        try writer["confirmationNextStep"].write(value.confirmationNextStep, with: LexModelsV2ClientTypes.DialogState.write(value:to:))
        try writer["confirmationResponse"].write(value.confirmationResponse, with: LexModelsV2ClientTypes.ResponseSpecification.write(value:to:))
        try writer["declinationConditional"].write(value.declinationConditional, with: LexModelsV2ClientTypes.ConditionalSpecification.write(value:to:))
        try writer["declinationNextStep"].write(value.declinationNextStep, with: LexModelsV2ClientTypes.DialogState.write(value:to:))
        try writer["declinationResponse"].write(value.declinationResponse, with: LexModelsV2ClientTypes.ResponseSpecification.write(value:to:))
        try writer["elicitationCodeHook"].write(value.elicitationCodeHook, with: LexModelsV2ClientTypes.ElicitationCodeHookInvocationSetting.write(value:to:))
        try writer["failureConditional"].write(value.failureConditional, with: LexModelsV2ClientTypes.ConditionalSpecification.write(value:to:))
        try writer["failureNextStep"].write(value.failureNextStep, with: LexModelsV2ClientTypes.DialogState.write(value:to:))
        try writer["failureResponse"].write(value.failureResponse, with: LexModelsV2ClientTypes.ResponseSpecification.write(value:to:))
        try writer["promptSpecification"].write(value.promptSpecification, with: LexModelsV2ClientTypes.PromptSpecification.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> LexModelsV2ClientTypes.IntentConfirmationSetting {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LexModelsV2ClientTypes.IntentConfirmationSetting()
        value.promptSpecification = try reader["promptSpecification"].readIfPresent(with: LexModelsV2ClientTypes.PromptSpecification.read(from:))
        value.declinationResponse = try reader["declinationResponse"].readIfPresent(with: LexModelsV2ClientTypes.ResponseSpecification.read(from:))
        value.active = try reader["active"].readIfPresent()
        value.confirmationResponse = try reader["confirmationResponse"].readIfPresent(with: LexModelsV2ClientTypes.ResponseSpecification.read(from:))
        value.confirmationNextStep = try reader["confirmationNextStep"].readIfPresent(with: LexModelsV2ClientTypes.DialogState.read(from:))
        value.confirmationConditional = try reader["confirmationConditional"].readIfPresent(with: LexModelsV2ClientTypes.ConditionalSpecification.read(from:))
        value.declinationNextStep = try reader["declinationNextStep"].readIfPresent(with: LexModelsV2ClientTypes.DialogState.read(from:))
        value.declinationConditional = try reader["declinationConditional"].readIfPresent(with: LexModelsV2ClientTypes.ConditionalSpecification.read(from:))
        value.failureResponse = try reader["failureResponse"].readIfPresent(with: LexModelsV2ClientTypes.ResponseSpecification.read(from:))
        value.failureNextStep = try reader["failureNextStep"].readIfPresent(with: LexModelsV2ClientTypes.DialogState.read(from:))
        value.failureConditional = try reader["failureConditional"].readIfPresent(with: LexModelsV2ClientTypes.ConditionalSpecification.read(from:))
        value.codeHook = try reader["codeHook"].readIfPresent(with: LexModelsV2ClientTypes.DialogCodeHookInvocationSetting.read(from:))
        value.elicitationCodeHook = try reader["elicitationCodeHook"].readIfPresent(with: LexModelsV2ClientTypes.ElicitationCodeHookInvocationSetting.read(from:))
        return value
    }
}

extension LexModelsV2ClientTypes.ElicitationCodeHookInvocationSetting {

    static func write(value: LexModelsV2ClientTypes.ElicitationCodeHookInvocationSetting?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["enableCodeHookInvocation"].write(value.enableCodeHookInvocation)
        try writer["invocationLabel"].write(value.invocationLabel)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> LexModelsV2ClientTypes.ElicitationCodeHookInvocationSetting {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LexModelsV2ClientTypes.ElicitationCodeHookInvocationSetting()
        value.enableCodeHookInvocation = try reader["enableCodeHookInvocation"].readIfPresent() ?? false
        value.invocationLabel = try reader["invocationLabel"].readIfPresent()
        return value
    }
}

extension LexModelsV2ClientTypes.DialogCodeHookInvocationSetting {

    static func write(value: LexModelsV2ClientTypes.DialogCodeHookInvocationSetting?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["active"].write(value.active)
        try writer["enableCodeHookInvocation"].write(value.enableCodeHookInvocation)
        try writer["invocationLabel"].write(value.invocationLabel)
        try writer["postCodeHookSpecification"].write(value.postCodeHookSpecification, with: LexModelsV2ClientTypes.PostDialogCodeHookInvocationSpecification.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> LexModelsV2ClientTypes.DialogCodeHookInvocationSetting {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LexModelsV2ClientTypes.DialogCodeHookInvocationSetting()
        value.enableCodeHookInvocation = try reader["enableCodeHookInvocation"].readIfPresent() ?? false
        value.active = try reader["active"].readIfPresent() ?? false
        value.invocationLabel = try reader["invocationLabel"].readIfPresent()
        value.postCodeHookSpecification = try reader["postCodeHookSpecification"].readIfPresent(with: LexModelsV2ClientTypes.PostDialogCodeHookInvocationSpecification.read(from:))
        return value
    }
}

extension LexModelsV2ClientTypes.PostDialogCodeHookInvocationSpecification {

    static func write(value: LexModelsV2ClientTypes.PostDialogCodeHookInvocationSpecification?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["failureConditional"].write(value.failureConditional, with: LexModelsV2ClientTypes.ConditionalSpecification.write(value:to:))
        try writer["failureNextStep"].write(value.failureNextStep, with: LexModelsV2ClientTypes.DialogState.write(value:to:))
        try writer["failureResponse"].write(value.failureResponse, with: LexModelsV2ClientTypes.ResponseSpecification.write(value:to:))
        try writer["successConditional"].write(value.successConditional, with: LexModelsV2ClientTypes.ConditionalSpecification.write(value:to:))
        try writer["successNextStep"].write(value.successNextStep, with: LexModelsV2ClientTypes.DialogState.write(value:to:))
        try writer["successResponse"].write(value.successResponse, with: LexModelsV2ClientTypes.ResponseSpecification.write(value:to:))
        try writer["timeoutConditional"].write(value.timeoutConditional, with: LexModelsV2ClientTypes.ConditionalSpecification.write(value:to:))
        try writer["timeoutNextStep"].write(value.timeoutNextStep, with: LexModelsV2ClientTypes.DialogState.write(value:to:))
        try writer["timeoutResponse"].write(value.timeoutResponse, with: LexModelsV2ClientTypes.ResponseSpecification.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> LexModelsV2ClientTypes.PostDialogCodeHookInvocationSpecification {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LexModelsV2ClientTypes.PostDialogCodeHookInvocationSpecification()
        value.successResponse = try reader["successResponse"].readIfPresent(with: LexModelsV2ClientTypes.ResponseSpecification.read(from:))
        value.successNextStep = try reader["successNextStep"].readIfPresent(with: LexModelsV2ClientTypes.DialogState.read(from:))
        value.successConditional = try reader["successConditional"].readIfPresent(with: LexModelsV2ClientTypes.ConditionalSpecification.read(from:))
        value.failureResponse = try reader["failureResponse"].readIfPresent(with: LexModelsV2ClientTypes.ResponseSpecification.read(from:))
        value.failureNextStep = try reader["failureNextStep"].readIfPresent(with: LexModelsV2ClientTypes.DialogState.read(from:))
        value.failureConditional = try reader["failureConditional"].readIfPresent(with: LexModelsV2ClientTypes.ConditionalSpecification.read(from:))
        value.timeoutResponse = try reader["timeoutResponse"].readIfPresent(with: LexModelsV2ClientTypes.ResponseSpecification.read(from:))
        value.timeoutNextStep = try reader["timeoutNextStep"].readIfPresent(with: LexModelsV2ClientTypes.DialogState.read(from:))
        value.timeoutConditional = try reader["timeoutConditional"].readIfPresent(with: LexModelsV2ClientTypes.ConditionalSpecification.read(from:))
        return value
    }
}

extension LexModelsV2ClientTypes.PromptSpecification {

    static func write(value: LexModelsV2ClientTypes.PromptSpecification?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["allowInterrupt"].write(value.allowInterrupt)
        try writer["maxRetries"].write(value.maxRetries)
        try writer["messageGroups"].writeList(value.messageGroups, memberWritingClosure: LexModelsV2ClientTypes.MessageGroup.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["messageSelectionStrategy"].write(value.messageSelectionStrategy)
        try writer["promptAttemptsSpecification"].writeMap(value.promptAttemptsSpecification, valueWritingClosure: LexModelsV2ClientTypes.PromptAttemptSpecification.write(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> LexModelsV2ClientTypes.PromptSpecification {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LexModelsV2ClientTypes.PromptSpecification()
        value.messageGroups = try reader["messageGroups"].readListIfPresent(memberReadingClosure: LexModelsV2ClientTypes.MessageGroup.read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        value.maxRetries = try reader["maxRetries"].readIfPresent() ?? 0
        value.allowInterrupt = try reader["allowInterrupt"].readIfPresent()
        value.messageSelectionStrategy = try reader["messageSelectionStrategy"].readIfPresent()
        value.promptAttemptsSpecification = try reader["promptAttemptsSpecification"].readMapIfPresent(valueReadingClosure: LexModelsV2ClientTypes.PromptAttemptSpecification.read(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        return value
    }
}

extension LexModelsV2ClientTypes.PromptAttemptSpecification {

    static func write(value: LexModelsV2ClientTypes.PromptAttemptSpecification?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["allowInterrupt"].write(value.allowInterrupt)
        try writer["allowedInputTypes"].write(value.allowedInputTypes, with: LexModelsV2ClientTypes.AllowedInputTypes.write(value:to:))
        try writer["audioAndDTMFInputSpecification"].write(value.audioAndDTMFInputSpecification, with: LexModelsV2ClientTypes.AudioAndDTMFInputSpecification.write(value:to:))
        try writer["textInputSpecification"].write(value.textInputSpecification, with: LexModelsV2ClientTypes.TextInputSpecification.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> LexModelsV2ClientTypes.PromptAttemptSpecification {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LexModelsV2ClientTypes.PromptAttemptSpecification()
        value.allowInterrupt = try reader["allowInterrupt"].readIfPresent()
        value.allowedInputTypes = try reader["allowedInputTypes"].readIfPresent(with: LexModelsV2ClientTypes.AllowedInputTypes.read(from:))
        value.audioAndDTMFInputSpecification = try reader["audioAndDTMFInputSpecification"].readIfPresent(with: LexModelsV2ClientTypes.AudioAndDTMFInputSpecification.read(from:))
        value.textInputSpecification = try reader["textInputSpecification"].readIfPresent(with: LexModelsV2ClientTypes.TextInputSpecification.read(from:))
        return value
    }
}

extension LexModelsV2ClientTypes.TextInputSpecification {

    static func write(value: LexModelsV2ClientTypes.TextInputSpecification?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["startTimeoutMs"].write(value.startTimeoutMs)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> LexModelsV2ClientTypes.TextInputSpecification {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LexModelsV2ClientTypes.TextInputSpecification()
        value.startTimeoutMs = try reader["startTimeoutMs"].readIfPresent() ?? 0
        return value
    }
}

extension LexModelsV2ClientTypes.AudioAndDTMFInputSpecification {

    static func write(value: LexModelsV2ClientTypes.AudioAndDTMFInputSpecification?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["audioSpecification"].write(value.audioSpecification, with: LexModelsV2ClientTypes.AudioSpecification.write(value:to:))
        try writer["dtmfSpecification"].write(value.dtmfSpecification, with: LexModelsV2ClientTypes.DTMFSpecification.write(value:to:))
        try writer["startTimeoutMs"].write(value.startTimeoutMs)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> LexModelsV2ClientTypes.AudioAndDTMFInputSpecification {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LexModelsV2ClientTypes.AudioAndDTMFInputSpecification()
        value.startTimeoutMs = try reader["startTimeoutMs"].readIfPresent() ?? 0
        value.audioSpecification = try reader["audioSpecification"].readIfPresent(with: LexModelsV2ClientTypes.AudioSpecification.read(from:))
        value.dtmfSpecification = try reader["dtmfSpecification"].readIfPresent(with: LexModelsV2ClientTypes.DTMFSpecification.read(from:))
        return value
    }
}

extension LexModelsV2ClientTypes.DTMFSpecification {

    static func write(value: LexModelsV2ClientTypes.DTMFSpecification?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["deletionCharacter"].write(value.deletionCharacter)
        try writer["endCharacter"].write(value.endCharacter)
        try writer["endTimeoutMs"].write(value.endTimeoutMs)
        try writer["maxLength"].write(value.maxLength)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> LexModelsV2ClientTypes.DTMFSpecification {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LexModelsV2ClientTypes.DTMFSpecification()
        value.maxLength = try reader["maxLength"].readIfPresent() ?? 0
        value.endTimeoutMs = try reader["endTimeoutMs"].readIfPresent() ?? 0
        value.deletionCharacter = try reader["deletionCharacter"].readIfPresent() ?? ""
        value.endCharacter = try reader["endCharacter"].readIfPresent() ?? ""
        return value
    }
}

extension LexModelsV2ClientTypes.AudioSpecification {

    static func write(value: LexModelsV2ClientTypes.AudioSpecification?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["endTimeoutMs"].write(value.endTimeoutMs)
        try writer["maxLengthMs"].write(value.maxLengthMs)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> LexModelsV2ClientTypes.AudioSpecification {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LexModelsV2ClientTypes.AudioSpecification()
        value.maxLengthMs = try reader["maxLengthMs"].readIfPresent() ?? 0
        value.endTimeoutMs = try reader["endTimeoutMs"].readIfPresent() ?? 0
        return value
    }
}

extension LexModelsV2ClientTypes.AllowedInputTypes {

    static func write(value: LexModelsV2ClientTypes.AllowedInputTypes?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["allowAudioInput"].write(value.allowAudioInput)
        try writer["allowDTMFInput"].write(value.allowDTMFInput)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> LexModelsV2ClientTypes.AllowedInputTypes {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LexModelsV2ClientTypes.AllowedInputTypes()
        value.allowAudioInput = try reader["allowAudioInput"].readIfPresent() ?? false
        value.allowDTMFInput = try reader["allowDTMFInput"].readIfPresent() ?? false
        return value
    }
}

extension LexModelsV2ClientTypes.IntentClosingSetting {

    static func write(value: LexModelsV2ClientTypes.IntentClosingSetting?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["active"].write(value.active)
        try writer["closingResponse"].write(value.closingResponse, with: LexModelsV2ClientTypes.ResponseSpecification.write(value:to:))
        try writer["conditional"].write(value.conditional, with: LexModelsV2ClientTypes.ConditionalSpecification.write(value:to:))
        try writer["nextStep"].write(value.nextStep, with: LexModelsV2ClientTypes.DialogState.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> LexModelsV2ClientTypes.IntentClosingSetting {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LexModelsV2ClientTypes.IntentClosingSetting()
        value.closingResponse = try reader["closingResponse"].readIfPresent(with: LexModelsV2ClientTypes.ResponseSpecification.read(from:))
        value.active = try reader["active"].readIfPresent()
        value.nextStep = try reader["nextStep"].readIfPresent(with: LexModelsV2ClientTypes.DialogState.read(from:))
        value.conditional = try reader["conditional"].readIfPresent(with: LexModelsV2ClientTypes.ConditionalSpecification.read(from:))
        return value
    }
}

extension LexModelsV2ClientTypes.InputContext {

    static func write(value: LexModelsV2ClientTypes.InputContext?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["name"].write(value.name)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> LexModelsV2ClientTypes.InputContext {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LexModelsV2ClientTypes.InputContext()
        value.name = try reader["name"].readIfPresent() ?? ""
        return value
    }
}

extension LexModelsV2ClientTypes.OutputContext {

    static func write(value: LexModelsV2ClientTypes.OutputContext?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["name"].write(value.name)
        try writer["timeToLiveInSeconds"].write(value.timeToLiveInSeconds)
        try writer["turnsToLive"].write(value.turnsToLive)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> LexModelsV2ClientTypes.OutputContext {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LexModelsV2ClientTypes.OutputContext()
        value.name = try reader["name"].readIfPresent() ?? ""
        value.timeToLiveInSeconds = try reader["timeToLiveInSeconds"].readIfPresent() ?? 0
        value.turnsToLive = try reader["turnsToLive"].readIfPresent() ?? 0
        return value
    }
}

extension LexModelsV2ClientTypes.KendraConfiguration {

    static func write(value: LexModelsV2ClientTypes.KendraConfiguration?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["kendraIndex"].write(value.kendraIndex)
        try writer["queryFilterString"].write(value.queryFilterString)
        try writer["queryFilterStringEnabled"].write(value.queryFilterStringEnabled)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> LexModelsV2ClientTypes.KendraConfiguration {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LexModelsV2ClientTypes.KendraConfiguration()
        value.kendraIndex = try reader["kendraIndex"].readIfPresent() ?? ""
        value.queryFilterStringEnabled = try reader["queryFilterStringEnabled"].readIfPresent() ?? false
        value.queryFilterString = try reader["queryFilterString"].readIfPresent()
        return value
    }
}

extension LexModelsV2ClientTypes.InitialResponseSetting {

    static func write(value: LexModelsV2ClientTypes.InitialResponseSetting?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["codeHook"].write(value.codeHook, with: LexModelsV2ClientTypes.DialogCodeHookInvocationSetting.write(value:to:))
        try writer["conditional"].write(value.conditional, with: LexModelsV2ClientTypes.ConditionalSpecification.write(value:to:))
        try writer["initialResponse"].write(value.initialResponse, with: LexModelsV2ClientTypes.ResponseSpecification.write(value:to:))
        try writer["nextStep"].write(value.nextStep, with: LexModelsV2ClientTypes.DialogState.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> LexModelsV2ClientTypes.InitialResponseSetting {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LexModelsV2ClientTypes.InitialResponseSetting()
        value.initialResponse = try reader["initialResponse"].readIfPresent(with: LexModelsV2ClientTypes.ResponseSpecification.read(from:))
        value.nextStep = try reader["nextStep"].readIfPresent(with: LexModelsV2ClientTypes.DialogState.read(from:))
        value.conditional = try reader["conditional"].readIfPresent(with: LexModelsV2ClientTypes.ConditionalSpecification.read(from:))
        value.codeHook = try reader["codeHook"].readIfPresent(with: LexModelsV2ClientTypes.DialogCodeHookInvocationSetting.read(from:))
        return value
    }
}

extension LexModelsV2ClientTypes.QnAIntentConfiguration {

    static func write(value: LexModelsV2ClientTypes.QnAIntentConfiguration?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["bedrockModelConfiguration"].write(value.bedrockModelConfiguration, with: LexModelsV2ClientTypes.BedrockModelSpecification.write(value:to:))
        try writer["dataSourceConfiguration"].write(value.dataSourceConfiguration, with: LexModelsV2ClientTypes.DataSourceConfiguration.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> LexModelsV2ClientTypes.QnAIntentConfiguration {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LexModelsV2ClientTypes.QnAIntentConfiguration()
        value.dataSourceConfiguration = try reader["dataSourceConfiguration"].readIfPresent(with: LexModelsV2ClientTypes.DataSourceConfiguration.read(from:))
        value.bedrockModelConfiguration = try reader["bedrockModelConfiguration"].readIfPresent(with: LexModelsV2ClientTypes.BedrockModelSpecification.read(from:))
        return value
    }
}

extension LexModelsV2ClientTypes.DataSourceConfiguration {

    static func write(value: LexModelsV2ClientTypes.DataSourceConfiguration?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["bedrockKnowledgeStoreConfiguration"].write(value.bedrockKnowledgeStoreConfiguration, with: LexModelsV2ClientTypes.BedrockKnowledgeStoreConfiguration.write(value:to:))
        try writer["kendraConfiguration"].write(value.kendraConfiguration, with: LexModelsV2ClientTypes.QnAKendraConfiguration.write(value:to:))
        try writer["opensearchConfiguration"].write(value.opensearchConfiguration, with: LexModelsV2ClientTypes.OpensearchConfiguration.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> LexModelsV2ClientTypes.DataSourceConfiguration {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LexModelsV2ClientTypes.DataSourceConfiguration()
        value.opensearchConfiguration = try reader["opensearchConfiguration"].readIfPresent(with: LexModelsV2ClientTypes.OpensearchConfiguration.read(from:))
        value.kendraConfiguration = try reader["kendraConfiguration"].readIfPresent(with: LexModelsV2ClientTypes.QnAKendraConfiguration.read(from:))
        value.bedrockKnowledgeStoreConfiguration = try reader["bedrockKnowledgeStoreConfiguration"].readIfPresent(with: LexModelsV2ClientTypes.BedrockKnowledgeStoreConfiguration.read(from:))
        return value
    }
}

extension LexModelsV2ClientTypes.BedrockKnowledgeStoreConfiguration {

    static func write(value: LexModelsV2ClientTypes.BedrockKnowledgeStoreConfiguration?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["bedrockKnowledgeBaseArn"].write(value.bedrockKnowledgeBaseArn)
        try writer["exactResponse"].write(value.exactResponse)
        try writer["exactResponseFields"].write(value.exactResponseFields, with: LexModelsV2ClientTypes.BedrockKnowledgeStoreExactResponseFields.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> LexModelsV2ClientTypes.BedrockKnowledgeStoreConfiguration {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LexModelsV2ClientTypes.BedrockKnowledgeStoreConfiguration()
        value.bedrockKnowledgeBaseArn = try reader["bedrockKnowledgeBaseArn"].readIfPresent() ?? ""
        value.exactResponse = try reader["exactResponse"].readIfPresent() ?? false
        value.exactResponseFields = try reader["exactResponseFields"].readIfPresent(with: LexModelsV2ClientTypes.BedrockKnowledgeStoreExactResponseFields.read(from:))
        return value
    }
}

extension LexModelsV2ClientTypes.BedrockKnowledgeStoreExactResponseFields {

    static func write(value: LexModelsV2ClientTypes.BedrockKnowledgeStoreExactResponseFields?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["answerField"].write(value.answerField)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> LexModelsV2ClientTypes.BedrockKnowledgeStoreExactResponseFields {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LexModelsV2ClientTypes.BedrockKnowledgeStoreExactResponseFields()
        value.answerField = try reader["answerField"].readIfPresent()
        return value
    }
}

extension LexModelsV2ClientTypes.QnAKendraConfiguration {

    static func write(value: LexModelsV2ClientTypes.QnAKendraConfiguration?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["exactResponse"].write(value.exactResponse)
        try writer["kendraIndex"].write(value.kendraIndex)
        try writer["queryFilterString"].write(value.queryFilterString)
        try writer["queryFilterStringEnabled"].write(value.queryFilterStringEnabled)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> LexModelsV2ClientTypes.QnAKendraConfiguration {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LexModelsV2ClientTypes.QnAKendraConfiguration()
        value.kendraIndex = try reader["kendraIndex"].readIfPresent() ?? ""
        value.queryFilterStringEnabled = try reader["queryFilterStringEnabled"].readIfPresent() ?? false
        value.queryFilterString = try reader["queryFilterString"].readIfPresent()
        value.exactResponse = try reader["exactResponse"].readIfPresent() ?? false
        return value
    }
}

extension LexModelsV2ClientTypes.OpensearchConfiguration {

    static func write(value: LexModelsV2ClientTypes.OpensearchConfiguration?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["domainEndpoint"].write(value.domainEndpoint)
        try writer["exactResponse"].write(value.exactResponse)
        try writer["exactResponseFields"].write(value.exactResponseFields, with: LexModelsV2ClientTypes.ExactResponseFields.write(value:to:))
        try writer["includeFields"].writeList(value.includeFields, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["indexName"].write(value.indexName)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> LexModelsV2ClientTypes.OpensearchConfiguration {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LexModelsV2ClientTypes.OpensearchConfiguration()
        value.domainEndpoint = try reader["domainEndpoint"].readIfPresent() ?? ""
        value.indexName = try reader["indexName"].readIfPresent() ?? ""
        value.exactResponse = try reader["exactResponse"].readIfPresent() ?? false
        value.exactResponseFields = try reader["exactResponseFields"].readIfPresent(with: LexModelsV2ClientTypes.ExactResponseFields.read(from:))
        value.includeFields = try reader["includeFields"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension LexModelsV2ClientTypes.ExactResponseFields {

    static func write(value: LexModelsV2ClientTypes.ExactResponseFields?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["answerField"].write(value.answerField)
        try writer["questionField"].write(value.questionField)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> LexModelsV2ClientTypes.ExactResponseFields {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LexModelsV2ClientTypes.ExactResponseFields()
        value.questionField = try reader["questionField"].readIfPresent() ?? ""
        value.answerField = try reader["answerField"].readIfPresent() ?? ""
        return value
    }
}

extension LexModelsV2ClientTypes.SlotValueElicitationSetting {

    static func write(value: LexModelsV2ClientTypes.SlotValueElicitationSetting?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["defaultValueSpecification"].write(value.defaultValueSpecification, with: LexModelsV2ClientTypes.SlotDefaultValueSpecification.write(value:to:))
        try writer["promptSpecification"].write(value.promptSpecification, with: LexModelsV2ClientTypes.PromptSpecification.write(value:to:))
        try writer["sampleUtterances"].writeList(value.sampleUtterances, memberWritingClosure: LexModelsV2ClientTypes.SampleUtterance.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["slotCaptureSetting"].write(value.slotCaptureSetting, with: LexModelsV2ClientTypes.SlotCaptureSetting.write(value:to:))
        try writer["slotConstraint"].write(value.slotConstraint)
        try writer["slotResolutionSetting"].write(value.slotResolutionSetting, with: LexModelsV2ClientTypes.SlotResolutionSetting.write(value:to:))
        try writer["waitAndContinueSpecification"].write(value.waitAndContinueSpecification, with: LexModelsV2ClientTypes.WaitAndContinueSpecification.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> LexModelsV2ClientTypes.SlotValueElicitationSetting {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LexModelsV2ClientTypes.SlotValueElicitationSetting()
        value.defaultValueSpecification = try reader["defaultValueSpecification"].readIfPresent(with: LexModelsV2ClientTypes.SlotDefaultValueSpecification.read(from:))
        value.slotConstraint = try reader["slotConstraint"].readIfPresent() ?? .sdkUnknown("")
        value.promptSpecification = try reader["promptSpecification"].readIfPresent(with: LexModelsV2ClientTypes.PromptSpecification.read(from:))
        value.sampleUtterances = try reader["sampleUtterances"].readListIfPresent(memberReadingClosure: LexModelsV2ClientTypes.SampleUtterance.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.waitAndContinueSpecification = try reader["waitAndContinueSpecification"].readIfPresent(with: LexModelsV2ClientTypes.WaitAndContinueSpecification.read(from:))
        value.slotCaptureSetting = try reader["slotCaptureSetting"].readIfPresent(with: LexModelsV2ClientTypes.SlotCaptureSetting.read(from:))
        value.slotResolutionSetting = try reader["slotResolutionSetting"].readIfPresent(with: LexModelsV2ClientTypes.SlotResolutionSetting.read(from:))
        return value
    }
}

extension LexModelsV2ClientTypes.SlotResolutionSetting {

    static func write(value: LexModelsV2ClientTypes.SlotResolutionSetting?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["slotResolutionStrategy"].write(value.slotResolutionStrategy)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> LexModelsV2ClientTypes.SlotResolutionSetting {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LexModelsV2ClientTypes.SlotResolutionSetting()
        value.slotResolutionStrategy = try reader["slotResolutionStrategy"].readIfPresent() ?? .sdkUnknown("")
        return value
    }
}

extension LexModelsV2ClientTypes.SlotCaptureSetting {

    static func write(value: LexModelsV2ClientTypes.SlotCaptureSetting?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["captureConditional"].write(value.captureConditional, with: LexModelsV2ClientTypes.ConditionalSpecification.write(value:to:))
        try writer["captureNextStep"].write(value.captureNextStep, with: LexModelsV2ClientTypes.DialogState.write(value:to:))
        try writer["captureResponse"].write(value.captureResponse, with: LexModelsV2ClientTypes.ResponseSpecification.write(value:to:))
        try writer["codeHook"].write(value.codeHook, with: LexModelsV2ClientTypes.DialogCodeHookInvocationSetting.write(value:to:))
        try writer["elicitationCodeHook"].write(value.elicitationCodeHook, with: LexModelsV2ClientTypes.ElicitationCodeHookInvocationSetting.write(value:to:))
        try writer["failureConditional"].write(value.failureConditional, with: LexModelsV2ClientTypes.ConditionalSpecification.write(value:to:))
        try writer["failureNextStep"].write(value.failureNextStep, with: LexModelsV2ClientTypes.DialogState.write(value:to:))
        try writer["failureResponse"].write(value.failureResponse, with: LexModelsV2ClientTypes.ResponseSpecification.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> LexModelsV2ClientTypes.SlotCaptureSetting {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LexModelsV2ClientTypes.SlotCaptureSetting()
        value.captureResponse = try reader["captureResponse"].readIfPresent(with: LexModelsV2ClientTypes.ResponseSpecification.read(from:))
        value.captureNextStep = try reader["captureNextStep"].readIfPresent(with: LexModelsV2ClientTypes.DialogState.read(from:))
        value.captureConditional = try reader["captureConditional"].readIfPresent(with: LexModelsV2ClientTypes.ConditionalSpecification.read(from:))
        value.failureResponse = try reader["failureResponse"].readIfPresent(with: LexModelsV2ClientTypes.ResponseSpecification.read(from:))
        value.failureNextStep = try reader["failureNextStep"].readIfPresent(with: LexModelsV2ClientTypes.DialogState.read(from:))
        value.failureConditional = try reader["failureConditional"].readIfPresent(with: LexModelsV2ClientTypes.ConditionalSpecification.read(from:))
        value.codeHook = try reader["codeHook"].readIfPresent(with: LexModelsV2ClientTypes.DialogCodeHookInvocationSetting.read(from:))
        value.elicitationCodeHook = try reader["elicitationCodeHook"].readIfPresent(with: LexModelsV2ClientTypes.ElicitationCodeHookInvocationSetting.read(from:))
        return value
    }
}

extension LexModelsV2ClientTypes.WaitAndContinueSpecification {

    static func write(value: LexModelsV2ClientTypes.WaitAndContinueSpecification?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["active"].write(value.active)
        try writer["continueResponse"].write(value.continueResponse, with: LexModelsV2ClientTypes.ResponseSpecification.write(value:to:))
        try writer["stillWaitingResponse"].write(value.stillWaitingResponse, with: LexModelsV2ClientTypes.StillWaitingResponseSpecification.write(value:to:))
        try writer["waitingResponse"].write(value.waitingResponse, with: LexModelsV2ClientTypes.ResponseSpecification.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> LexModelsV2ClientTypes.WaitAndContinueSpecification {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LexModelsV2ClientTypes.WaitAndContinueSpecification()
        value.waitingResponse = try reader["waitingResponse"].readIfPresent(with: LexModelsV2ClientTypes.ResponseSpecification.read(from:))
        value.continueResponse = try reader["continueResponse"].readIfPresent(with: LexModelsV2ClientTypes.ResponseSpecification.read(from:))
        value.stillWaitingResponse = try reader["stillWaitingResponse"].readIfPresent(with: LexModelsV2ClientTypes.StillWaitingResponseSpecification.read(from:))
        value.active = try reader["active"].readIfPresent()
        return value
    }
}

extension LexModelsV2ClientTypes.StillWaitingResponseSpecification {

    static func write(value: LexModelsV2ClientTypes.StillWaitingResponseSpecification?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["allowInterrupt"].write(value.allowInterrupt)
        try writer["frequencyInSeconds"].write(value.frequencyInSeconds)
        try writer["messageGroups"].writeList(value.messageGroups, memberWritingClosure: LexModelsV2ClientTypes.MessageGroup.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["timeoutInSeconds"].write(value.timeoutInSeconds)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> LexModelsV2ClientTypes.StillWaitingResponseSpecification {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LexModelsV2ClientTypes.StillWaitingResponseSpecification()
        value.messageGroups = try reader["messageGroups"].readListIfPresent(memberReadingClosure: LexModelsV2ClientTypes.MessageGroup.read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        value.frequencyInSeconds = try reader["frequencyInSeconds"].readIfPresent() ?? 0
        value.timeoutInSeconds = try reader["timeoutInSeconds"].readIfPresent() ?? 0
        value.allowInterrupt = try reader["allowInterrupt"].readIfPresent()
        return value
    }
}

extension LexModelsV2ClientTypes.SlotDefaultValueSpecification {

    static func write(value: LexModelsV2ClientTypes.SlotDefaultValueSpecification?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["defaultValueList"].writeList(value.defaultValueList, memberWritingClosure: LexModelsV2ClientTypes.SlotDefaultValue.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> LexModelsV2ClientTypes.SlotDefaultValueSpecification {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LexModelsV2ClientTypes.SlotDefaultValueSpecification()
        value.defaultValueList = try reader["defaultValueList"].readListIfPresent(memberReadingClosure: LexModelsV2ClientTypes.SlotDefaultValue.read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        return value
    }
}

extension LexModelsV2ClientTypes.SlotDefaultValue {

    static func write(value: LexModelsV2ClientTypes.SlotDefaultValue?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["defaultValue"].write(value.defaultValue)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> LexModelsV2ClientTypes.SlotDefaultValue {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LexModelsV2ClientTypes.SlotDefaultValue()
        value.defaultValue = try reader["defaultValue"].readIfPresent() ?? ""
        return value
    }
}

extension LexModelsV2ClientTypes.ObfuscationSetting {

    static func write(value: LexModelsV2ClientTypes.ObfuscationSetting?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["obfuscationSettingType"].write(value.obfuscationSettingType)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> LexModelsV2ClientTypes.ObfuscationSetting {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LexModelsV2ClientTypes.ObfuscationSetting()
        value.obfuscationSettingType = try reader["obfuscationSettingType"].readIfPresent() ?? .sdkUnknown("")
        return value
    }
}

extension LexModelsV2ClientTypes.MultipleValuesSetting {

    static func write(value: LexModelsV2ClientTypes.MultipleValuesSetting?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["allowMultipleValues"].write(value.allowMultipleValues)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> LexModelsV2ClientTypes.MultipleValuesSetting {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LexModelsV2ClientTypes.MultipleValuesSetting()
        value.allowMultipleValues = try reader["allowMultipleValues"].readIfPresent() ?? false
        return value
    }
}

extension LexModelsV2ClientTypes.SubSlotSetting {

    static func write(value: LexModelsV2ClientTypes.SubSlotSetting?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["expression"].write(value.expression)
        try writer["slotSpecifications"].writeMap(value.slotSpecifications, valueWritingClosure: LexModelsV2ClientTypes.Specifications.write(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> LexModelsV2ClientTypes.SubSlotSetting {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LexModelsV2ClientTypes.SubSlotSetting()
        value.expression = try reader["expression"].readIfPresent()
        value.slotSpecifications = try reader["slotSpecifications"].readMapIfPresent(valueReadingClosure: LexModelsV2ClientTypes.Specifications.read(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        return value
    }
}

extension LexModelsV2ClientTypes.Specifications {

    static func write(value: LexModelsV2ClientTypes.Specifications?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["slotTypeId"].write(value.slotTypeId)
        try writer["valueElicitationSetting"].write(value.valueElicitationSetting, with: LexModelsV2ClientTypes.SubSlotValueElicitationSetting.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> LexModelsV2ClientTypes.Specifications {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LexModelsV2ClientTypes.Specifications()
        value.slotTypeId = try reader["slotTypeId"].readIfPresent() ?? ""
        value.valueElicitationSetting = try reader["valueElicitationSetting"].readIfPresent(with: LexModelsV2ClientTypes.SubSlotValueElicitationSetting.read(from:))
        return value
    }
}

extension LexModelsV2ClientTypes.SubSlotValueElicitationSetting {

    static func write(value: LexModelsV2ClientTypes.SubSlotValueElicitationSetting?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["defaultValueSpecification"].write(value.defaultValueSpecification, with: LexModelsV2ClientTypes.SlotDefaultValueSpecification.write(value:to:))
        try writer["promptSpecification"].write(value.promptSpecification, with: LexModelsV2ClientTypes.PromptSpecification.write(value:to:))
        try writer["sampleUtterances"].writeList(value.sampleUtterances, memberWritingClosure: LexModelsV2ClientTypes.SampleUtterance.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["waitAndContinueSpecification"].write(value.waitAndContinueSpecification, with: LexModelsV2ClientTypes.WaitAndContinueSpecification.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> LexModelsV2ClientTypes.SubSlotValueElicitationSetting {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LexModelsV2ClientTypes.SubSlotValueElicitationSetting()
        value.defaultValueSpecification = try reader["defaultValueSpecification"].readIfPresent(with: LexModelsV2ClientTypes.SlotDefaultValueSpecification.read(from:))
        value.promptSpecification = try reader["promptSpecification"].readIfPresent(with: LexModelsV2ClientTypes.PromptSpecification.read(from:))
        value.sampleUtterances = try reader["sampleUtterances"].readListIfPresent(memberReadingClosure: LexModelsV2ClientTypes.SampleUtterance.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.waitAndContinueSpecification = try reader["waitAndContinueSpecification"].readIfPresent(with: LexModelsV2ClientTypes.WaitAndContinueSpecification.read(from:))
        return value
    }
}

extension LexModelsV2ClientTypes.SlotTypeValue {

    static func write(value: LexModelsV2ClientTypes.SlotTypeValue?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["sampleValue"].write(value.sampleValue, with: LexModelsV2ClientTypes.SampleValue.write(value:to:))
        try writer["synonyms"].writeList(value.synonyms, memberWritingClosure: LexModelsV2ClientTypes.SampleValue.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> LexModelsV2ClientTypes.SlotTypeValue {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LexModelsV2ClientTypes.SlotTypeValue()
        value.sampleValue = try reader["sampleValue"].readIfPresent(with: LexModelsV2ClientTypes.SampleValue.read(from:))
        value.synonyms = try reader["synonyms"].readListIfPresent(memberReadingClosure: LexModelsV2ClientTypes.SampleValue.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension LexModelsV2ClientTypes.SampleValue {

    static func write(value: LexModelsV2ClientTypes.SampleValue?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["value"].write(value.value)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> LexModelsV2ClientTypes.SampleValue {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LexModelsV2ClientTypes.SampleValue()
        value.value = try reader["value"].readIfPresent() ?? ""
        return value
    }
}

extension LexModelsV2ClientTypes.SlotValueSelectionSetting {

    static func write(value: LexModelsV2ClientTypes.SlotValueSelectionSetting?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["advancedRecognitionSetting"].write(value.advancedRecognitionSetting, with: LexModelsV2ClientTypes.AdvancedRecognitionSetting.write(value:to:))
        try writer["regexFilter"].write(value.regexFilter, with: LexModelsV2ClientTypes.SlotValueRegexFilter.write(value:to:))
        try writer["resolutionStrategy"].write(value.resolutionStrategy)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> LexModelsV2ClientTypes.SlotValueSelectionSetting {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LexModelsV2ClientTypes.SlotValueSelectionSetting()
        value.resolutionStrategy = try reader["resolutionStrategy"].readIfPresent() ?? .sdkUnknown("")
        value.regexFilter = try reader["regexFilter"].readIfPresent(with: LexModelsV2ClientTypes.SlotValueRegexFilter.read(from:))
        value.advancedRecognitionSetting = try reader["advancedRecognitionSetting"].readIfPresent(with: LexModelsV2ClientTypes.AdvancedRecognitionSetting.read(from:))
        return value
    }
}

extension LexModelsV2ClientTypes.AdvancedRecognitionSetting {

    static func write(value: LexModelsV2ClientTypes.AdvancedRecognitionSetting?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["audioRecognitionStrategy"].write(value.audioRecognitionStrategy)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> LexModelsV2ClientTypes.AdvancedRecognitionSetting {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LexModelsV2ClientTypes.AdvancedRecognitionSetting()
        value.audioRecognitionStrategy = try reader["audioRecognitionStrategy"].readIfPresent()
        return value
    }
}

extension LexModelsV2ClientTypes.SlotValueRegexFilter {

    static func write(value: LexModelsV2ClientTypes.SlotValueRegexFilter?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["pattern"].write(value.pattern)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> LexModelsV2ClientTypes.SlotValueRegexFilter {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LexModelsV2ClientTypes.SlotValueRegexFilter()
        value.pattern = try reader["pattern"].readIfPresent() ?? ""
        return value
    }
}

extension LexModelsV2ClientTypes.ExternalSourceSetting {

    static func write(value: LexModelsV2ClientTypes.ExternalSourceSetting?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["grammarSlotTypeSetting"].write(value.grammarSlotTypeSetting, with: LexModelsV2ClientTypes.GrammarSlotTypeSetting.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> LexModelsV2ClientTypes.ExternalSourceSetting {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LexModelsV2ClientTypes.ExternalSourceSetting()
        value.grammarSlotTypeSetting = try reader["grammarSlotTypeSetting"].readIfPresent(with: LexModelsV2ClientTypes.GrammarSlotTypeSetting.read(from:))
        return value
    }
}

extension LexModelsV2ClientTypes.GrammarSlotTypeSetting {

    static func write(value: LexModelsV2ClientTypes.GrammarSlotTypeSetting?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["source"].write(value.source, with: LexModelsV2ClientTypes.GrammarSlotTypeSource.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> LexModelsV2ClientTypes.GrammarSlotTypeSetting {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LexModelsV2ClientTypes.GrammarSlotTypeSetting()
        value.source = try reader["source"].readIfPresent(with: LexModelsV2ClientTypes.GrammarSlotTypeSource.read(from:))
        return value
    }
}

extension LexModelsV2ClientTypes.GrammarSlotTypeSource {

    static func write(value: LexModelsV2ClientTypes.GrammarSlotTypeSource?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["kmsKeyArn"].write(value.kmsKeyArn)
        try writer["s3BucketName"].write(value.s3BucketName)
        try writer["s3ObjectKey"].write(value.s3ObjectKey)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> LexModelsV2ClientTypes.GrammarSlotTypeSource {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LexModelsV2ClientTypes.GrammarSlotTypeSource()
        value.s3BucketName = try reader["s3BucketName"].readIfPresent() ?? ""
        value.s3ObjectKey = try reader["s3ObjectKey"].readIfPresent() ?? ""
        value.kmsKeyArn = try reader["kmsKeyArn"].readIfPresent()
        return value
    }
}

extension LexModelsV2ClientTypes.CompositeSlotTypeSetting {

    static func write(value: LexModelsV2ClientTypes.CompositeSlotTypeSetting?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["subSlots"].writeList(value.subSlots, memberWritingClosure: LexModelsV2ClientTypes.SubSlotTypeComposition.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> LexModelsV2ClientTypes.CompositeSlotTypeSetting {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LexModelsV2ClientTypes.CompositeSlotTypeSetting()
        value.subSlots = try reader["subSlots"].readListIfPresent(memberReadingClosure: LexModelsV2ClientTypes.SubSlotTypeComposition.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension LexModelsV2ClientTypes.SubSlotTypeComposition {

    static func write(value: LexModelsV2ClientTypes.SubSlotTypeComposition?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["name"].write(value.name)
        try writer["slotTypeId"].write(value.slotTypeId)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> LexModelsV2ClientTypes.SubSlotTypeComposition {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LexModelsV2ClientTypes.SubSlotTypeComposition()
        value.name = try reader["name"].readIfPresent() ?? ""
        value.slotTypeId = try reader["slotTypeId"].readIfPresent() ?? ""
        return value
    }
}

extension LexModelsV2ClientTypes.TestSetDiscrepancyReportResourceTarget {

    static func write(value: LexModelsV2ClientTypes.TestSetDiscrepancyReportResourceTarget?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["botAliasTarget"].write(value.botAliasTarget, with: LexModelsV2ClientTypes.TestSetDiscrepancyReportBotAliasTarget.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> LexModelsV2ClientTypes.TestSetDiscrepancyReportResourceTarget {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LexModelsV2ClientTypes.TestSetDiscrepancyReportResourceTarget()
        value.botAliasTarget = try reader["botAliasTarget"].readIfPresent(with: LexModelsV2ClientTypes.TestSetDiscrepancyReportBotAliasTarget.read(from:))
        return value
    }
}

extension LexModelsV2ClientTypes.TestSetDiscrepancyReportBotAliasTarget {

    static func write(value: LexModelsV2ClientTypes.TestSetDiscrepancyReportBotAliasTarget?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["botAliasId"].write(value.botAliasId)
        try writer["botId"].write(value.botId)
        try writer["localeId"].write(value.localeId)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> LexModelsV2ClientTypes.TestSetDiscrepancyReportBotAliasTarget {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LexModelsV2ClientTypes.TestSetDiscrepancyReportBotAliasTarget()
        value.botId = try reader["botId"].readIfPresent() ?? ""
        value.botAliasId = try reader["botAliasId"].readIfPresent() ?? ""
        value.localeId = try reader["localeId"].readIfPresent() ?? ""
        return value
    }
}

extension LexModelsV2ClientTypes.BotAliasHistoryEvent {

    static func read(from reader: SmithyJSON.Reader) throws -> LexModelsV2ClientTypes.BotAliasHistoryEvent {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LexModelsV2ClientTypes.BotAliasHistoryEvent()
        value.botVersion = try reader["botVersion"].readIfPresent()
        value.startDate = try reader["startDate"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.endDate = try reader["endDate"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        return value
    }
}

extension LexModelsV2ClientTypes.ParentBotNetwork {

    static func read(from reader: SmithyJSON.Reader) throws -> LexModelsV2ClientTypes.ParentBotNetwork {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LexModelsV2ClientTypes.ParentBotNetwork()
        value.botId = try reader["botId"].readIfPresent() ?? ""
        value.botVersion = try reader["botVersion"].readIfPresent() ?? ""
        return value
    }
}

extension LexModelsV2ClientTypes.BotLocaleHistoryEvent {

    static func read(from reader: SmithyJSON.Reader) throws -> LexModelsV2ClientTypes.BotLocaleHistoryEvent {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LexModelsV2ClientTypes.BotLocaleHistoryEvent()
        value.event = try reader["event"].readIfPresent() ?? ""
        value.eventDate = try reader["eventDate"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds) ?? SmithyTimestamps.TimestampFormatter(format: .dateTime).date(from: "1970-01-01T00:00:00Z")
        return value
    }
}

extension LexModelsV2ClientTypes.TranscriptSourceSetting {

    static func write(value: LexModelsV2ClientTypes.TranscriptSourceSetting?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["s3BucketTranscriptSource"].write(value.s3BucketTranscriptSource, with: LexModelsV2ClientTypes.S3BucketTranscriptSource.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> LexModelsV2ClientTypes.TranscriptSourceSetting {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LexModelsV2ClientTypes.TranscriptSourceSetting()
        value.s3BucketTranscriptSource = try reader["s3BucketTranscriptSource"].readIfPresent(with: LexModelsV2ClientTypes.S3BucketTranscriptSource.read(from:))
        return value
    }
}

extension LexModelsV2ClientTypes.S3BucketTranscriptSource {

    static func write(value: LexModelsV2ClientTypes.S3BucketTranscriptSource?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["kmsKeyArn"].write(value.kmsKeyArn)
        try writer["pathFormat"].write(value.pathFormat, with: LexModelsV2ClientTypes.PathFormat.write(value:to:))
        try writer["s3BucketName"].write(value.s3BucketName)
        try writer["transcriptFilter"].write(value.transcriptFilter, with: LexModelsV2ClientTypes.TranscriptFilter.write(value:to:))
        try writer["transcriptFormat"].write(value.transcriptFormat)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> LexModelsV2ClientTypes.S3BucketTranscriptSource {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LexModelsV2ClientTypes.S3BucketTranscriptSource()
        value.s3BucketName = try reader["s3BucketName"].readIfPresent() ?? ""
        value.pathFormat = try reader["pathFormat"].readIfPresent(with: LexModelsV2ClientTypes.PathFormat.read(from:))
        value.transcriptFormat = try reader["transcriptFormat"].readIfPresent() ?? .sdkUnknown("")
        value.transcriptFilter = try reader["transcriptFilter"].readIfPresent(with: LexModelsV2ClientTypes.TranscriptFilter.read(from:))
        value.kmsKeyArn = try reader["kmsKeyArn"].readIfPresent()
        return value
    }
}

extension LexModelsV2ClientTypes.TranscriptFilter {

    static func write(value: LexModelsV2ClientTypes.TranscriptFilter?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["lexTranscriptFilter"].write(value.lexTranscriptFilter, with: LexModelsV2ClientTypes.LexTranscriptFilter.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> LexModelsV2ClientTypes.TranscriptFilter {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LexModelsV2ClientTypes.TranscriptFilter()
        value.lexTranscriptFilter = try reader["lexTranscriptFilter"].readIfPresent(with: LexModelsV2ClientTypes.LexTranscriptFilter.read(from:))
        return value
    }
}

extension LexModelsV2ClientTypes.LexTranscriptFilter {

    static func write(value: LexModelsV2ClientTypes.LexTranscriptFilter?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["dateRangeFilter"].write(value.dateRangeFilter, with: LexModelsV2ClientTypes.DateRangeFilter.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> LexModelsV2ClientTypes.LexTranscriptFilter {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LexModelsV2ClientTypes.LexTranscriptFilter()
        value.dateRangeFilter = try reader["dateRangeFilter"].readIfPresent(with: LexModelsV2ClientTypes.DateRangeFilter.read(from:))
        return value
    }
}

extension LexModelsV2ClientTypes.DateRangeFilter {

    static func write(value: LexModelsV2ClientTypes.DateRangeFilter?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["endDateTime"].writeTimestamp(value.endDateTime, format: SmithyTimestamps.TimestampFormat.epochSeconds)
        try writer["startDateTime"].writeTimestamp(value.startDateTime, format: SmithyTimestamps.TimestampFormat.epochSeconds)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> LexModelsV2ClientTypes.DateRangeFilter {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LexModelsV2ClientTypes.DateRangeFilter()
        value.startDateTime = try reader["startDateTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds) ?? SmithyTimestamps.TimestampFormatter(format: .dateTime).date(from: "1970-01-01T00:00:00Z")
        value.endDateTime = try reader["endDateTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds) ?? SmithyTimestamps.TimestampFormatter(format: .dateTime).date(from: "1970-01-01T00:00:00Z")
        return value
    }
}

extension LexModelsV2ClientTypes.PathFormat {

    static func write(value: LexModelsV2ClientTypes.PathFormat?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["objectPrefixes"].writeList(value.objectPrefixes, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> LexModelsV2ClientTypes.PathFormat {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LexModelsV2ClientTypes.PathFormat()
        value.objectPrefixes = try reader["objectPrefixes"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension LexModelsV2ClientTypes.EncryptionSetting {

    static func write(value: LexModelsV2ClientTypes.EncryptionSetting?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["associatedTranscriptsPassword"].write(value.associatedTranscriptsPassword)
        try writer["botLocaleExportPassword"].write(value.botLocaleExportPassword)
        try writer["kmsKeyArn"].write(value.kmsKeyArn)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> LexModelsV2ClientTypes.EncryptionSetting {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LexModelsV2ClientTypes.EncryptionSetting()
        value.kmsKeyArn = try reader["kmsKeyArn"].readIfPresent()
        value.botLocaleExportPassword = try reader["botLocaleExportPassword"].readIfPresent()
        value.associatedTranscriptsPassword = try reader["associatedTranscriptsPassword"].readIfPresent()
        return value
    }
}

extension LexModelsV2ClientTypes.BotRecommendationResults {

    static func read(from reader: SmithyJSON.Reader) throws -> LexModelsV2ClientTypes.BotRecommendationResults {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LexModelsV2ClientTypes.BotRecommendationResults()
        value.botLocaleExportUrl = try reader["botLocaleExportUrl"].readIfPresent()
        value.associatedTranscriptsUrl = try reader["associatedTranscriptsUrl"].readIfPresent()
        value.statistics = try reader["statistics"].readIfPresent(with: LexModelsV2ClientTypes.BotRecommendationResultStatistics.read(from:))
        return value
    }
}

extension LexModelsV2ClientTypes.BotRecommendationResultStatistics {

    static func read(from reader: SmithyJSON.Reader) throws -> LexModelsV2ClientTypes.BotRecommendationResultStatistics {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LexModelsV2ClientTypes.BotRecommendationResultStatistics()
        value.intents = try reader["intents"].readIfPresent(with: LexModelsV2ClientTypes.IntentStatistics.read(from:))
        value.slotTypes = try reader["slotTypes"].readIfPresent(with: LexModelsV2ClientTypes.SlotTypeStatistics.read(from:))
        return value
    }
}

extension LexModelsV2ClientTypes.SlotTypeStatistics {

    static func read(from reader: SmithyJSON.Reader) throws -> LexModelsV2ClientTypes.SlotTypeStatistics {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LexModelsV2ClientTypes.SlotTypeStatistics()
        value.discoveredSlotTypeCount = try reader["discoveredSlotTypeCount"].readIfPresent()
        return value
    }
}

extension LexModelsV2ClientTypes.IntentStatistics {

    static func read(from reader: SmithyJSON.Reader) throws -> LexModelsV2ClientTypes.IntentStatistics {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LexModelsV2ClientTypes.IntentStatistics()
        value.discoveredIntentCount = try reader["discoveredIntentCount"].readIfPresent()
        return value
    }
}

extension LexModelsV2ClientTypes.ImportResourceSpecification {

    static func write(value: LexModelsV2ClientTypes.ImportResourceSpecification?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["botImportSpecification"].write(value.botImportSpecification, with: LexModelsV2ClientTypes.BotImportSpecification.write(value:to:))
        try writer["botLocaleImportSpecification"].write(value.botLocaleImportSpecification, with: LexModelsV2ClientTypes.BotLocaleImportSpecification.write(value:to:))
        try writer["customVocabularyImportSpecification"].write(value.customVocabularyImportSpecification, with: LexModelsV2ClientTypes.CustomVocabularyImportSpecification.write(value:to:))
        try writer["testSetImportResourceSpecification"].write(value.testSetImportResourceSpecification, with: LexModelsV2ClientTypes.TestSetImportResourceSpecification.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> LexModelsV2ClientTypes.ImportResourceSpecification {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LexModelsV2ClientTypes.ImportResourceSpecification()
        value.botImportSpecification = try reader["botImportSpecification"].readIfPresent(with: LexModelsV2ClientTypes.BotImportSpecification.read(from:))
        value.botLocaleImportSpecification = try reader["botLocaleImportSpecification"].readIfPresent(with: LexModelsV2ClientTypes.BotLocaleImportSpecification.read(from:))
        value.customVocabularyImportSpecification = try reader["customVocabularyImportSpecification"].readIfPresent(with: LexModelsV2ClientTypes.CustomVocabularyImportSpecification.read(from:))
        value.testSetImportResourceSpecification = try reader["testSetImportResourceSpecification"].readIfPresent(with: LexModelsV2ClientTypes.TestSetImportResourceSpecification.read(from:))
        return value
    }
}

extension LexModelsV2ClientTypes.TestSetImportResourceSpecification {

    static func write(value: LexModelsV2ClientTypes.TestSetImportResourceSpecification?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["description"].write(value.description)
        try writer["importInputLocation"].write(value.importInputLocation, with: LexModelsV2ClientTypes.TestSetImportInputLocation.write(value:to:))
        try writer["modality"].write(value.modality)
        try writer["roleArn"].write(value.roleArn)
        try writer["storageLocation"].write(value.storageLocation, with: LexModelsV2ClientTypes.TestSetStorageLocation.write(value:to:))
        try writer["testSetName"].write(value.testSetName)
        try writer["testSetTags"].writeMap(value.testSetTags, valueWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> LexModelsV2ClientTypes.TestSetImportResourceSpecification {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LexModelsV2ClientTypes.TestSetImportResourceSpecification()
        value.testSetName = try reader["testSetName"].readIfPresent() ?? ""
        value.description = try reader["description"].readIfPresent()
        value.roleArn = try reader["roleArn"].readIfPresent() ?? ""
        value.storageLocation = try reader["storageLocation"].readIfPresent(with: LexModelsV2ClientTypes.TestSetStorageLocation.read(from:))
        value.importInputLocation = try reader["importInputLocation"].readIfPresent(with: LexModelsV2ClientTypes.TestSetImportInputLocation.read(from:))
        value.modality = try reader["modality"].readIfPresent() ?? .sdkUnknown("")
        value.testSetTags = try reader["testSetTags"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        return value
    }
}

extension LexModelsV2ClientTypes.TestSetImportInputLocation {

    static func write(value: LexModelsV2ClientTypes.TestSetImportInputLocation?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["s3BucketName"].write(value.s3BucketName)
        try writer["s3Path"].write(value.s3Path)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> LexModelsV2ClientTypes.TestSetImportInputLocation {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LexModelsV2ClientTypes.TestSetImportInputLocation()
        value.s3BucketName = try reader["s3BucketName"].readIfPresent() ?? ""
        value.s3Path = try reader["s3Path"].readIfPresent() ?? ""
        return value
    }
}

extension LexModelsV2ClientTypes.TestSetStorageLocation {

    static func write(value: LexModelsV2ClientTypes.TestSetStorageLocation?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["kmsKeyArn"].write(value.kmsKeyArn)
        try writer["s3BucketName"].write(value.s3BucketName)
        try writer["s3Path"].write(value.s3Path)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> LexModelsV2ClientTypes.TestSetStorageLocation {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LexModelsV2ClientTypes.TestSetStorageLocation()
        value.s3BucketName = try reader["s3BucketName"].readIfPresent() ?? ""
        value.s3Path = try reader["s3Path"].readIfPresent() ?? ""
        value.kmsKeyArn = try reader["kmsKeyArn"].readIfPresent()
        return value
    }
}

extension LexModelsV2ClientTypes.CustomVocabularyImportSpecification {

    static func write(value: LexModelsV2ClientTypes.CustomVocabularyImportSpecification?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["botId"].write(value.botId)
        try writer["botVersion"].write(value.botVersion)
        try writer["localeId"].write(value.localeId)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> LexModelsV2ClientTypes.CustomVocabularyImportSpecification {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LexModelsV2ClientTypes.CustomVocabularyImportSpecification()
        value.botId = try reader["botId"].readIfPresent() ?? ""
        value.botVersion = try reader["botVersion"].readIfPresent() ?? ""
        value.localeId = try reader["localeId"].readIfPresent() ?? ""
        return value
    }
}

extension LexModelsV2ClientTypes.BotLocaleImportSpecification {

    static func write(value: LexModelsV2ClientTypes.BotLocaleImportSpecification?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["botId"].write(value.botId)
        try writer["botVersion"].write(value.botVersion)
        try writer["localeId"].write(value.localeId)
        try writer["nluIntentConfidenceThreshold"].write(value.nluIntentConfidenceThreshold)
        try writer["voiceSettings"].write(value.voiceSettings, with: LexModelsV2ClientTypes.VoiceSettings.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> LexModelsV2ClientTypes.BotLocaleImportSpecification {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LexModelsV2ClientTypes.BotLocaleImportSpecification()
        value.botId = try reader["botId"].readIfPresent() ?? ""
        value.botVersion = try reader["botVersion"].readIfPresent() ?? ""
        value.localeId = try reader["localeId"].readIfPresent() ?? ""
        value.nluIntentConfidenceThreshold = try reader["nluIntentConfidenceThreshold"].readIfPresent()
        value.voiceSettings = try reader["voiceSettings"].readIfPresent(with: LexModelsV2ClientTypes.VoiceSettings.read(from:))
        return value
    }
}

extension LexModelsV2ClientTypes.BotImportSpecification {

    static func write(value: LexModelsV2ClientTypes.BotImportSpecification?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["botName"].write(value.botName)
        try writer["botTags"].writeMap(value.botTags, valueWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        try writer["dataPrivacy"].write(value.dataPrivacy, with: LexModelsV2ClientTypes.DataPrivacy.write(value:to:))
        try writer["idleSessionTTLInSeconds"].write(value.idleSessionTTLInSeconds)
        try writer["roleArn"].write(value.roleArn)
        try writer["testBotAliasTags"].writeMap(value.testBotAliasTags, valueWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> LexModelsV2ClientTypes.BotImportSpecification {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LexModelsV2ClientTypes.BotImportSpecification()
        value.botName = try reader["botName"].readIfPresent() ?? ""
        value.roleArn = try reader["roleArn"].readIfPresent() ?? ""
        value.dataPrivacy = try reader["dataPrivacy"].readIfPresent(with: LexModelsV2ClientTypes.DataPrivacy.read(from:))
        value.idleSessionTTLInSeconds = try reader["idleSessionTTLInSeconds"].readIfPresent()
        value.botTags = try reader["botTags"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        value.testBotAliasTags = try reader["testBotAliasTags"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        return value
    }
}

extension LexModelsV2ClientTypes.SlotPriority {

    static func write(value: LexModelsV2ClientTypes.SlotPriority?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["priority"].write(value.priority)
        try writer["slotId"].write(value.slotId)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> LexModelsV2ClientTypes.SlotPriority {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LexModelsV2ClientTypes.SlotPriority()
        value.priority = try reader["priority"].readIfPresent() ?? 0
        value.slotId = try reader["slotId"].readIfPresent() ?? ""
        return value
    }
}

extension LexModelsV2ClientTypes.TestExecutionTarget {

    static func write(value: LexModelsV2ClientTypes.TestExecutionTarget?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["botAliasTarget"].write(value.botAliasTarget, with: LexModelsV2ClientTypes.BotAliasTestExecutionTarget.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> LexModelsV2ClientTypes.TestExecutionTarget {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LexModelsV2ClientTypes.TestExecutionTarget()
        value.botAliasTarget = try reader["botAliasTarget"].readIfPresent(with: LexModelsV2ClientTypes.BotAliasTestExecutionTarget.read(from:))
        return value
    }
}

extension LexModelsV2ClientTypes.BotAliasTestExecutionTarget {

    static func write(value: LexModelsV2ClientTypes.BotAliasTestExecutionTarget?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["botAliasId"].write(value.botAliasId)
        try writer["botId"].write(value.botId)
        try writer["localeId"].write(value.localeId)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> LexModelsV2ClientTypes.BotAliasTestExecutionTarget {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LexModelsV2ClientTypes.BotAliasTestExecutionTarget()
        value.botId = try reader["botId"].readIfPresent() ?? ""
        value.botAliasId = try reader["botAliasId"].readIfPresent() ?? ""
        value.localeId = try reader["localeId"].readIfPresent() ?? ""
        return value
    }
}

extension LexModelsV2ClientTypes.TestSetDiscrepancyErrors {

    static func read(from reader: SmithyJSON.Reader) throws -> LexModelsV2ClientTypes.TestSetDiscrepancyErrors {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LexModelsV2ClientTypes.TestSetDiscrepancyErrors()
        value.intentDiscrepancies = try reader["intentDiscrepancies"].readListIfPresent(memberReadingClosure: LexModelsV2ClientTypes.TestSetIntentDiscrepancyItem.read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        value.slotDiscrepancies = try reader["slotDiscrepancies"].readListIfPresent(memberReadingClosure: LexModelsV2ClientTypes.TestSetSlotDiscrepancyItem.read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        return value
    }
}

extension LexModelsV2ClientTypes.TestSetSlotDiscrepancyItem {

    static func read(from reader: SmithyJSON.Reader) throws -> LexModelsV2ClientTypes.TestSetSlotDiscrepancyItem {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LexModelsV2ClientTypes.TestSetSlotDiscrepancyItem()
        value.intentName = try reader["intentName"].readIfPresent() ?? ""
        value.slotName = try reader["slotName"].readIfPresent() ?? ""
        value.errorMessage = try reader["errorMessage"].readIfPresent() ?? ""
        return value
    }
}

extension LexModelsV2ClientTypes.TestSetIntentDiscrepancyItem {

    static func read(from reader: SmithyJSON.Reader) throws -> LexModelsV2ClientTypes.TestSetIntentDiscrepancyItem {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LexModelsV2ClientTypes.TestSetIntentDiscrepancyItem()
        value.intentName = try reader["intentName"].readIfPresent() ?? ""
        value.errorMessage = try reader["errorMessage"].readIfPresent() ?? ""
        return value
    }
}

extension LexModelsV2ClientTypes.TestSetGenerationDataSource {

    static func write(value: LexModelsV2ClientTypes.TestSetGenerationDataSource?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["conversationLogsDataSource"].write(value.conversationLogsDataSource, with: LexModelsV2ClientTypes.ConversationLogsDataSource.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> LexModelsV2ClientTypes.TestSetGenerationDataSource {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LexModelsV2ClientTypes.TestSetGenerationDataSource()
        value.conversationLogsDataSource = try reader["conversationLogsDataSource"].readIfPresent(with: LexModelsV2ClientTypes.ConversationLogsDataSource.read(from:))
        return value
    }
}

extension LexModelsV2ClientTypes.ConversationLogsDataSource {

    static func write(value: LexModelsV2ClientTypes.ConversationLogsDataSource?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["botAliasId"].write(value.botAliasId)
        try writer["botId"].write(value.botId)
        try writer["filter"].write(value.filter, with: LexModelsV2ClientTypes.ConversationLogsDataSourceFilterBy.write(value:to:))
        try writer["localeId"].write(value.localeId)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> LexModelsV2ClientTypes.ConversationLogsDataSource {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LexModelsV2ClientTypes.ConversationLogsDataSource()
        value.botId = try reader["botId"].readIfPresent() ?? ""
        value.botAliasId = try reader["botAliasId"].readIfPresent() ?? ""
        value.localeId = try reader["localeId"].readIfPresent() ?? ""
        value.filter = try reader["filter"].readIfPresent(with: LexModelsV2ClientTypes.ConversationLogsDataSourceFilterBy.read(from:))
        return value
    }
}

extension LexModelsV2ClientTypes.ConversationLogsDataSourceFilterBy {

    static func write(value: LexModelsV2ClientTypes.ConversationLogsDataSourceFilterBy?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["endTime"].writeTimestamp(value.endTime, format: SmithyTimestamps.TimestampFormat.epochSeconds)
        try writer["inputMode"].write(value.inputMode)
        try writer["startTime"].writeTimestamp(value.startTime, format: SmithyTimestamps.TimestampFormat.epochSeconds)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> LexModelsV2ClientTypes.ConversationLogsDataSourceFilterBy {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LexModelsV2ClientTypes.ConversationLogsDataSourceFilterBy()
        value.startTime = try reader["startTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds) ?? SmithyTimestamps.TimestampFormatter(format: .dateTime).date(from: "1970-01-01T00:00:00Z")
        value.endTime = try reader["endTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds) ?? SmithyTimestamps.TimestampFormatter(format: .dateTime).date(from: "1970-01-01T00:00:00Z")
        value.inputMode = try reader["inputMode"].readIfPresent() ?? .sdkUnknown("")
        return value
    }
}

extension LexModelsV2ClientTypes.UtteranceAggregationDuration {

    static func write(value: LexModelsV2ClientTypes.UtteranceAggregationDuration?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["relativeAggregationDuration"].write(value.relativeAggregationDuration, with: LexModelsV2ClientTypes.RelativeAggregationDuration.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> LexModelsV2ClientTypes.UtteranceAggregationDuration {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LexModelsV2ClientTypes.UtteranceAggregationDuration()
        value.relativeAggregationDuration = try reader["relativeAggregationDuration"].readIfPresent(with: LexModelsV2ClientTypes.RelativeAggregationDuration.read(from:))
        return value
    }
}

extension LexModelsV2ClientTypes.RelativeAggregationDuration {

    static func write(value: LexModelsV2ClientTypes.RelativeAggregationDuration?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["timeDimension"].write(value.timeDimension)
        try writer["timeValue"].write(value.timeValue)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> LexModelsV2ClientTypes.RelativeAggregationDuration {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LexModelsV2ClientTypes.RelativeAggregationDuration()
        value.timeDimension = try reader["timeDimension"].readIfPresent() ?? .sdkUnknown("")
        value.timeValue = try reader["timeValue"].readIfPresent() ?? 0
        return value
    }
}

extension LexModelsV2ClientTypes.AggregatedUtterancesSummary {

    static func read(from reader: SmithyJSON.Reader) throws -> LexModelsV2ClientTypes.AggregatedUtterancesSummary {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LexModelsV2ClientTypes.AggregatedUtterancesSummary()
        value.utterance = try reader["utterance"].readIfPresent()
        value.hitCount = try reader["hitCount"].readIfPresent()
        value.missedCount = try reader["missedCount"].readIfPresent()
        value.utteranceFirstRecordedInAggregationDuration = try reader["utteranceFirstRecordedInAggregationDuration"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.utteranceLastRecordedInAggregationDuration = try reader["utteranceLastRecordedInAggregationDuration"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.containsDataFromDeletedResources = try reader["containsDataFromDeletedResources"].readIfPresent()
        return value
    }
}

extension LexModelsV2ClientTypes.BotAliasSummary {

    static func read(from reader: SmithyJSON.Reader) throws -> LexModelsV2ClientTypes.BotAliasSummary {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LexModelsV2ClientTypes.BotAliasSummary()
        value.botAliasId = try reader["botAliasId"].readIfPresent()
        value.botAliasName = try reader["botAliasName"].readIfPresent()
        value.description = try reader["description"].readIfPresent()
        value.botVersion = try reader["botVersion"].readIfPresent()
        value.botAliasStatus = try reader["botAliasStatus"].readIfPresent()
        value.creationDateTime = try reader["creationDateTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.lastUpdatedDateTime = try reader["lastUpdatedDateTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        return value
    }
}

extension LexModelsV2ClientTypes.BotAliasReplicaSummary {

    static func read(from reader: SmithyJSON.Reader) throws -> LexModelsV2ClientTypes.BotAliasReplicaSummary {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LexModelsV2ClientTypes.BotAliasReplicaSummary()
        value.botAliasId = try reader["botAliasId"].readIfPresent()
        value.botAliasReplicationStatus = try reader["botAliasReplicationStatus"].readIfPresent()
        value.botVersion = try reader["botVersion"].readIfPresent()
        value.creationDateTime = try reader["creationDateTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.lastUpdatedDateTime = try reader["lastUpdatedDateTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.failureReasons = try reader["failureReasons"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension LexModelsV2ClientTypes.BotLocaleSummary {

    static func read(from reader: SmithyJSON.Reader) throws -> LexModelsV2ClientTypes.BotLocaleSummary {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LexModelsV2ClientTypes.BotLocaleSummary()
        value.localeId = try reader["localeId"].readIfPresent()
        value.localeName = try reader["localeName"].readIfPresent()
        value.description = try reader["description"].readIfPresent()
        value.botLocaleStatus = try reader["botLocaleStatus"].readIfPresent()
        value.lastUpdatedDateTime = try reader["lastUpdatedDateTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.lastBuildSubmittedDateTime = try reader["lastBuildSubmittedDateTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        return value
    }
}

extension LexModelsV2ClientTypes.BotRecommendationSummary {

    static func read(from reader: SmithyJSON.Reader) throws -> LexModelsV2ClientTypes.BotRecommendationSummary {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LexModelsV2ClientTypes.BotRecommendationSummary()
        value.botRecommendationStatus = try reader["botRecommendationStatus"].readIfPresent() ?? .sdkUnknown("")
        value.botRecommendationId = try reader["botRecommendationId"].readIfPresent() ?? ""
        value.creationDateTime = try reader["creationDateTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.lastUpdatedDateTime = try reader["lastUpdatedDateTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        return value
    }
}

extension LexModelsV2ClientTypes.BotReplicaSummary {

    static func read(from reader: SmithyJSON.Reader) throws -> LexModelsV2ClientTypes.BotReplicaSummary {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LexModelsV2ClientTypes.BotReplicaSummary()
        value.replicaRegion = try reader["replicaRegion"].readIfPresent()
        value.creationDateTime = try reader["creationDateTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.botReplicaStatus = try reader["botReplicaStatus"].readIfPresent()
        value.failureReasons = try reader["failureReasons"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension LexModelsV2ClientTypes.GenerationSummary {

    static func read(from reader: SmithyJSON.Reader) throws -> LexModelsV2ClientTypes.GenerationSummary {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LexModelsV2ClientTypes.GenerationSummary()
        value.generationId = try reader["generationId"].readIfPresent()
        value.generationStatus = try reader["generationStatus"].readIfPresent()
        value.creationDateTime = try reader["creationDateTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.lastUpdatedDateTime = try reader["lastUpdatedDateTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        return value
    }
}

extension LexModelsV2ClientTypes.BotSummary {

    static func read(from reader: SmithyJSON.Reader) throws -> LexModelsV2ClientTypes.BotSummary {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LexModelsV2ClientTypes.BotSummary()
        value.botId = try reader["botId"].readIfPresent()
        value.botName = try reader["botName"].readIfPresent()
        value.description = try reader["description"].readIfPresent()
        value.botStatus = try reader["botStatus"].readIfPresent()
        value.latestBotVersion = try reader["latestBotVersion"].readIfPresent()
        value.lastUpdatedDateTime = try reader["lastUpdatedDateTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.botType = try reader["botType"].readIfPresent()
        return value
    }
}

extension LexModelsV2ClientTypes.BotVersionReplicaSummary {

    static func read(from reader: SmithyJSON.Reader) throws -> LexModelsV2ClientTypes.BotVersionReplicaSummary {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LexModelsV2ClientTypes.BotVersionReplicaSummary()
        value.botVersion = try reader["botVersion"].readIfPresent()
        value.botVersionReplicationStatus = try reader["botVersionReplicationStatus"].readIfPresent()
        value.creationDateTime = try reader["creationDateTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.failureReasons = try reader["failureReasons"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension LexModelsV2ClientTypes.BotVersionSummary {

    static func read(from reader: SmithyJSON.Reader) throws -> LexModelsV2ClientTypes.BotVersionSummary {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LexModelsV2ClientTypes.BotVersionSummary()
        value.botName = try reader["botName"].readIfPresent()
        value.botVersion = try reader["botVersion"].readIfPresent()
        value.description = try reader["description"].readIfPresent()
        value.botStatus = try reader["botStatus"].readIfPresent()
        value.creationDateTime = try reader["creationDateTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        return value
    }
}

extension LexModelsV2ClientTypes.BuiltInIntentSummary {

    static func read(from reader: SmithyJSON.Reader) throws -> LexModelsV2ClientTypes.BuiltInIntentSummary {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LexModelsV2ClientTypes.BuiltInIntentSummary()
        value.intentSignature = try reader["intentSignature"].readIfPresent()
        value.description = try reader["description"].readIfPresent()
        return value
    }
}

extension LexModelsV2ClientTypes.BuiltInSlotTypeSummary {

    static func read(from reader: SmithyJSON.Reader) throws -> LexModelsV2ClientTypes.BuiltInSlotTypeSummary {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LexModelsV2ClientTypes.BuiltInSlotTypeSummary()
        value.slotTypeSignature = try reader["slotTypeSignature"].readIfPresent()
        value.description = try reader["description"].readIfPresent()
        return value
    }
}

extension LexModelsV2ClientTypes.ExportSummary {

    static func read(from reader: SmithyJSON.Reader) throws -> LexModelsV2ClientTypes.ExportSummary {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LexModelsV2ClientTypes.ExportSummary()
        value.exportId = try reader["exportId"].readIfPresent()
        value.resourceSpecification = try reader["resourceSpecification"].readIfPresent(with: LexModelsV2ClientTypes.ExportResourceSpecification.read(from:))
        value.fileFormat = try reader["fileFormat"].readIfPresent()
        value.exportStatus = try reader["exportStatus"].readIfPresent()
        value.creationDateTime = try reader["creationDateTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.lastUpdatedDateTime = try reader["lastUpdatedDateTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        return value
    }
}

extension LexModelsV2ClientTypes.ImportSummary {

    static func read(from reader: SmithyJSON.Reader) throws -> LexModelsV2ClientTypes.ImportSummary {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LexModelsV2ClientTypes.ImportSummary()
        value.importId = try reader["importId"].readIfPresent()
        value.importedResourceId = try reader["importedResourceId"].readIfPresent()
        value.importedResourceName = try reader["importedResourceName"].readIfPresent()
        value.importStatus = try reader["importStatus"].readIfPresent()
        value.mergeStrategy = try reader["mergeStrategy"].readIfPresent()
        value.creationDateTime = try reader["creationDateTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.lastUpdatedDateTime = try reader["lastUpdatedDateTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.importedResourceType = try reader["importedResourceType"].readIfPresent()
        return value
    }
}

extension LexModelsV2ClientTypes.AnalyticsIntentResult {

    static func read(from reader: SmithyJSON.Reader) throws -> LexModelsV2ClientTypes.AnalyticsIntentResult {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LexModelsV2ClientTypes.AnalyticsIntentResult()
        value.binKeys = try reader["binKeys"].readListIfPresent(memberReadingClosure: LexModelsV2ClientTypes.AnalyticsBinKey.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.groupByKeys = try reader["groupByKeys"].readListIfPresent(memberReadingClosure: LexModelsV2ClientTypes.AnalyticsIntentGroupByKey.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.metricsResults = try reader["metricsResults"].readListIfPresent(memberReadingClosure: LexModelsV2ClientTypes.AnalyticsIntentMetricResult.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension LexModelsV2ClientTypes.AnalyticsIntentMetricResult {

    static func read(from reader: SmithyJSON.Reader) throws -> LexModelsV2ClientTypes.AnalyticsIntentMetricResult {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LexModelsV2ClientTypes.AnalyticsIntentMetricResult()
        value.name = try reader["name"].readIfPresent()
        value.statistic = try reader["statistic"].readIfPresent()
        value.value = try reader["value"].readIfPresent()
        return value
    }
}

extension LexModelsV2ClientTypes.AnalyticsIntentGroupByKey {

    static func read(from reader: SmithyJSON.Reader) throws -> LexModelsV2ClientTypes.AnalyticsIntentGroupByKey {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LexModelsV2ClientTypes.AnalyticsIntentGroupByKey()
        value.name = try reader["name"].readIfPresent()
        value.value = try reader["value"].readIfPresent()
        return value
    }
}

extension LexModelsV2ClientTypes.AnalyticsBinKey {

    static func read(from reader: SmithyJSON.Reader) throws -> LexModelsV2ClientTypes.AnalyticsBinKey {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LexModelsV2ClientTypes.AnalyticsBinKey()
        value.name = try reader["name"].readIfPresent()
        value.value = try reader["value"].readIfPresent()
        return value
    }
}

extension LexModelsV2ClientTypes.AnalyticsIntentNodeSummary {

    static func read(from reader: SmithyJSON.Reader) throws -> LexModelsV2ClientTypes.AnalyticsIntentNodeSummary {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LexModelsV2ClientTypes.AnalyticsIntentNodeSummary()
        value.intentName = try reader["intentName"].readIfPresent()
        value.intentPath = try reader["intentPath"].readIfPresent()
        value.intentCount = try reader["intentCount"].readIfPresent()
        value.intentLevel = try reader["intentLevel"].readIfPresent()
        value.nodeType = try reader["nodeType"].readIfPresent()
        return value
    }
}

extension LexModelsV2ClientTypes.IntentSummary {

    static func read(from reader: SmithyJSON.Reader) throws -> LexModelsV2ClientTypes.IntentSummary {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LexModelsV2ClientTypes.IntentSummary()
        value.intentId = try reader["intentId"].readIfPresent()
        value.intentName = try reader["intentName"].readIfPresent()
        value.description = try reader["description"].readIfPresent()
        value.parentIntentSignature = try reader["parentIntentSignature"].readIfPresent()
        value.inputContexts = try reader["inputContexts"].readListIfPresent(memberReadingClosure: LexModelsV2ClientTypes.InputContext.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.outputContexts = try reader["outputContexts"].readListIfPresent(memberReadingClosure: LexModelsV2ClientTypes.OutputContext.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.lastUpdatedDateTime = try reader["lastUpdatedDateTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        return value
    }
}

extension LexModelsV2ClientTypes.AnalyticsIntentStageResult {

    static func read(from reader: SmithyJSON.Reader) throws -> LexModelsV2ClientTypes.AnalyticsIntentStageResult {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LexModelsV2ClientTypes.AnalyticsIntentStageResult()
        value.binKeys = try reader["binKeys"].readListIfPresent(memberReadingClosure: LexModelsV2ClientTypes.AnalyticsBinKey.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.groupByKeys = try reader["groupByKeys"].readListIfPresent(memberReadingClosure: LexModelsV2ClientTypes.AnalyticsIntentStageGroupByKey.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.metricsResults = try reader["metricsResults"].readListIfPresent(memberReadingClosure: LexModelsV2ClientTypes.AnalyticsIntentStageMetricResult.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension LexModelsV2ClientTypes.AnalyticsIntentStageMetricResult {

    static func read(from reader: SmithyJSON.Reader) throws -> LexModelsV2ClientTypes.AnalyticsIntentStageMetricResult {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LexModelsV2ClientTypes.AnalyticsIntentStageMetricResult()
        value.name = try reader["name"].readIfPresent()
        value.statistic = try reader["statistic"].readIfPresent()
        value.value = try reader["value"].readIfPresent()
        return value
    }
}

extension LexModelsV2ClientTypes.AnalyticsIntentStageGroupByKey {

    static func read(from reader: SmithyJSON.Reader) throws -> LexModelsV2ClientTypes.AnalyticsIntentStageGroupByKey {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LexModelsV2ClientTypes.AnalyticsIntentStageGroupByKey()
        value.name = try reader["name"].readIfPresent()
        value.value = try reader["value"].readIfPresent()
        return value
    }
}

extension LexModelsV2ClientTypes.RecommendedIntentSummary {

    static func read(from reader: SmithyJSON.Reader) throws -> LexModelsV2ClientTypes.RecommendedIntentSummary {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LexModelsV2ClientTypes.RecommendedIntentSummary()
        value.intentId = try reader["intentId"].readIfPresent()
        value.intentName = try reader["intentName"].readIfPresent()
        value.sampleUtterancesCount = try reader["sampleUtterancesCount"].readIfPresent()
        return value
    }
}

extension LexModelsV2ClientTypes.SessionSpecification {

    static func read(from reader: SmithyJSON.Reader) throws -> LexModelsV2ClientTypes.SessionSpecification {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LexModelsV2ClientTypes.SessionSpecification()
        value.botAliasId = try reader["botAliasId"].readIfPresent()
        value.botVersion = try reader["botVersion"].readIfPresent()
        value.localeId = try reader["localeId"].readIfPresent()
        value.channel = try reader["channel"].readIfPresent()
        value.sessionId = try reader["sessionId"].readIfPresent()
        value.conversationStartTime = try reader["conversationStartTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.conversationEndTime = try reader["conversationEndTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.conversationDurationSeconds = try reader["conversationDurationSeconds"].readIfPresent()
        value.conversationEndState = try reader["conversationEndState"].readIfPresent()
        value.mode = try reader["mode"].readIfPresent()
        value.numberOfTurns = try reader["numberOfTurns"].readIfPresent()
        value.invokedIntentSamples = try reader["invokedIntentSamples"].readListIfPresent(memberReadingClosure: LexModelsV2ClientTypes.InvokedIntentSample.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.originatingRequestId = try reader["originatingRequestId"].readIfPresent()
        return value
    }
}

extension LexModelsV2ClientTypes.InvokedIntentSample {

    static func read(from reader: SmithyJSON.Reader) throws -> LexModelsV2ClientTypes.InvokedIntentSample {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LexModelsV2ClientTypes.InvokedIntentSample()
        value.intentName = try reader["intentName"].readIfPresent()
        return value
    }
}

extension LexModelsV2ClientTypes.AnalyticsSessionResult {

    static func read(from reader: SmithyJSON.Reader) throws -> LexModelsV2ClientTypes.AnalyticsSessionResult {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LexModelsV2ClientTypes.AnalyticsSessionResult()
        value.binKeys = try reader["binKeys"].readListIfPresent(memberReadingClosure: LexModelsV2ClientTypes.AnalyticsBinKey.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.groupByKeys = try reader["groupByKeys"].readListIfPresent(memberReadingClosure: LexModelsV2ClientTypes.AnalyticsSessionGroupByKey.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.metricsResults = try reader["metricsResults"].readListIfPresent(memberReadingClosure: LexModelsV2ClientTypes.AnalyticsSessionMetricResult.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension LexModelsV2ClientTypes.AnalyticsSessionMetricResult {

    static func read(from reader: SmithyJSON.Reader) throws -> LexModelsV2ClientTypes.AnalyticsSessionMetricResult {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LexModelsV2ClientTypes.AnalyticsSessionMetricResult()
        value.name = try reader["name"].readIfPresent()
        value.statistic = try reader["statistic"].readIfPresent()
        value.value = try reader["value"].readIfPresent()
        return value
    }
}

extension LexModelsV2ClientTypes.AnalyticsSessionGroupByKey {

    static func read(from reader: SmithyJSON.Reader) throws -> LexModelsV2ClientTypes.AnalyticsSessionGroupByKey {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LexModelsV2ClientTypes.AnalyticsSessionGroupByKey()
        value.name = try reader["name"].readIfPresent()
        value.value = try reader["value"].readIfPresent()
        return value
    }
}

extension LexModelsV2ClientTypes.SlotSummary {

    static func read(from reader: SmithyJSON.Reader) throws -> LexModelsV2ClientTypes.SlotSummary {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LexModelsV2ClientTypes.SlotSummary()
        value.slotId = try reader["slotId"].readIfPresent()
        value.slotName = try reader["slotName"].readIfPresent()
        value.description = try reader["description"].readIfPresent()
        value.slotConstraint = try reader["slotConstraint"].readIfPresent()
        value.slotTypeId = try reader["slotTypeId"].readIfPresent()
        value.valueElicitationPromptSpecification = try reader["valueElicitationPromptSpecification"].readIfPresent(with: LexModelsV2ClientTypes.PromptSpecification.read(from:))
        value.lastUpdatedDateTime = try reader["lastUpdatedDateTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        return value
    }
}

extension LexModelsV2ClientTypes.SlotTypeSummary {

    static func read(from reader: SmithyJSON.Reader) throws -> LexModelsV2ClientTypes.SlotTypeSummary {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LexModelsV2ClientTypes.SlotTypeSummary()
        value.slotTypeId = try reader["slotTypeId"].readIfPresent()
        value.slotTypeName = try reader["slotTypeName"].readIfPresent()
        value.description = try reader["description"].readIfPresent()
        value.parentSlotTypeSignature = try reader["parentSlotTypeSignature"].readIfPresent()
        value.lastUpdatedDateTime = try reader["lastUpdatedDateTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.slotTypeCategory = try reader["slotTypeCategory"].readIfPresent()
        return value
    }
}

extension LexModelsV2ClientTypes.TestExecutionResultItems {

    static func read(from reader: SmithyJSON.Reader) throws -> LexModelsV2ClientTypes.TestExecutionResultItems {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LexModelsV2ClientTypes.TestExecutionResultItems()
        value.overallTestResults = try reader["overallTestResults"].readIfPresent(with: LexModelsV2ClientTypes.OverallTestResults.read(from:))
        value.conversationLevelTestResults = try reader["conversationLevelTestResults"].readIfPresent(with: LexModelsV2ClientTypes.ConversationLevelTestResults.read(from:))
        value.intentClassificationTestResults = try reader["intentClassificationTestResults"].readIfPresent(with: LexModelsV2ClientTypes.IntentClassificationTestResults.read(from:))
        value.intentLevelSlotResolutionTestResults = try reader["intentLevelSlotResolutionTestResults"].readIfPresent(with: LexModelsV2ClientTypes.IntentLevelSlotResolutionTestResults.read(from:))
        value.utteranceLevelTestResults = try reader["utteranceLevelTestResults"].readIfPresent(with: LexModelsV2ClientTypes.UtteranceLevelTestResults.read(from:))
        return value
    }
}

extension LexModelsV2ClientTypes.UtteranceLevelTestResults {

    static func read(from reader: SmithyJSON.Reader) throws -> LexModelsV2ClientTypes.UtteranceLevelTestResults {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LexModelsV2ClientTypes.UtteranceLevelTestResults()
        value.items = try reader["items"].readListIfPresent(memberReadingClosure: LexModelsV2ClientTypes.UtteranceLevelTestResultItem.read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        return value
    }
}

extension LexModelsV2ClientTypes.UtteranceLevelTestResultItem {

    static func read(from reader: SmithyJSON.Reader) throws -> LexModelsV2ClientTypes.UtteranceLevelTestResultItem {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LexModelsV2ClientTypes.UtteranceLevelTestResultItem()
        value.recordNumber = try reader["recordNumber"].readIfPresent() ?? 0
        value.conversationId = try reader["conversationId"].readIfPresent()
        value.turnResult = try reader["turnResult"].readIfPresent(with: LexModelsV2ClientTypes.TestSetTurnResult.read(from:))
        return value
    }
}

extension LexModelsV2ClientTypes.TestSetTurnResult {

    static func read(from reader: SmithyJSON.Reader) throws -> LexModelsV2ClientTypes.TestSetTurnResult {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LexModelsV2ClientTypes.TestSetTurnResult()
        value.agent = try reader["agent"].readIfPresent(with: LexModelsV2ClientTypes.AgentTurnResult.read(from:))
        value.user = try reader["user"].readIfPresent(with: LexModelsV2ClientTypes.UserTurnResult.read(from:))
        return value
    }
}

extension LexModelsV2ClientTypes.UserTurnResult {

    static func read(from reader: SmithyJSON.Reader) throws -> LexModelsV2ClientTypes.UserTurnResult {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LexModelsV2ClientTypes.UserTurnResult()
        value.input = try reader["input"].readIfPresent(with: LexModelsV2ClientTypes.UserTurnInputSpecification.read(from:))
        value.expectedOutput = try reader["expectedOutput"].readIfPresent(with: LexModelsV2ClientTypes.UserTurnOutputSpecification.read(from:))
        value.actualOutput = try reader["actualOutput"].readIfPresent(with: LexModelsV2ClientTypes.UserTurnOutputSpecification.read(from:))
        value.errorDetails = try reader["errorDetails"].readIfPresent(with: LexModelsV2ClientTypes.ExecutionErrorDetails.read(from:))
        value.endToEndResult = try reader["endToEndResult"].readIfPresent()
        value.intentMatchResult = try reader["intentMatchResult"].readIfPresent()
        value.slotMatchResult = try reader["slotMatchResult"].readIfPresent()
        value.speechTranscriptionResult = try reader["speechTranscriptionResult"].readIfPresent()
        value.conversationLevelResult = try reader["conversationLevelResult"].readIfPresent(with: LexModelsV2ClientTypes.ConversationLevelResultDetail.read(from:))
        return value
    }
}

extension LexModelsV2ClientTypes.ConversationLevelResultDetail {

    static func read(from reader: SmithyJSON.Reader) throws -> LexModelsV2ClientTypes.ConversationLevelResultDetail {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LexModelsV2ClientTypes.ConversationLevelResultDetail()
        value.endToEndResult = try reader["endToEndResult"].readIfPresent() ?? .sdkUnknown("")
        value.speechTranscriptionResult = try reader["speechTranscriptionResult"].readIfPresent()
        return value
    }
}

extension LexModelsV2ClientTypes.ExecutionErrorDetails {

    static func read(from reader: SmithyJSON.Reader) throws -> LexModelsV2ClientTypes.ExecutionErrorDetails {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LexModelsV2ClientTypes.ExecutionErrorDetails()
        value.errorCode = try reader["errorCode"].readIfPresent() ?? ""
        value.errorMessage = try reader["errorMessage"].readIfPresent() ?? ""
        return value
    }
}

extension LexModelsV2ClientTypes.UserTurnOutputSpecification {

    static func read(from reader: SmithyJSON.Reader) throws -> LexModelsV2ClientTypes.UserTurnOutputSpecification {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LexModelsV2ClientTypes.UserTurnOutputSpecification()
        value.intent = try reader["intent"].readIfPresent(with: LexModelsV2ClientTypes.UserTurnIntentOutput.read(from:))
        value.activeContexts = try reader["activeContexts"].readListIfPresent(memberReadingClosure: LexModelsV2ClientTypes.ActiveContext.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.transcript = try reader["transcript"].readIfPresent()
        return value
    }
}

extension LexModelsV2ClientTypes.ActiveContext {

    static func read(from reader: SmithyJSON.Reader) throws -> LexModelsV2ClientTypes.ActiveContext {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LexModelsV2ClientTypes.ActiveContext()
        value.name = try reader["name"].readIfPresent() ?? ""
        return value
    }
}

extension LexModelsV2ClientTypes.UserTurnIntentOutput {

    static func read(from reader: SmithyJSON.Reader) throws -> LexModelsV2ClientTypes.UserTurnIntentOutput {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LexModelsV2ClientTypes.UserTurnIntentOutput()
        value.name = try reader["name"].readIfPresent() ?? ""
        value.slots = try reader["slots"].readMapIfPresent(valueReadingClosure: LexModelsV2ClientTypes.UserTurnSlotOutput.read(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        return value
    }
}

extension LexModelsV2ClientTypes.UserTurnSlotOutput {

    static func read(from reader: SmithyJSON.Reader) throws -> LexModelsV2ClientTypes.UserTurnSlotOutput {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LexModelsV2ClientTypes.UserTurnSlotOutput()
        value.value = try reader["value"].readIfPresent()
        value.values = try reader["values"].readListIfPresent(memberReadingClosure: LexModelsV2ClientTypes.UserTurnSlotOutput.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.subSlots = try reader["subSlots"].readMapIfPresent(valueReadingClosure: LexModelsV2ClientTypes.UserTurnSlotOutput.read(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        return value
    }
}

extension LexModelsV2ClientTypes.UserTurnInputSpecification {

    static func read(from reader: SmithyJSON.Reader) throws -> LexModelsV2ClientTypes.UserTurnInputSpecification {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LexModelsV2ClientTypes.UserTurnInputSpecification()
        value.utteranceInput = try reader["utteranceInput"].readIfPresent(with: LexModelsV2ClientTypes.UtteranceInputSpecification.read(from:))
        value.requestAttributes = try reader["requestAttributes"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        value.sessionState = try reader["sessionState"].readIfPresent(with: LexModelsV2ClientTypes.InputSessionStateSpecification.read(from:))
        return value
    }
}

extension LexModelsV2ClientTypes.InputSessionStateSpecification {

    static func read(from reader: SmithyJSON.Reader) throws -> LexModelsV2ClientTypes.InputSessionStateSpecification {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LexModelsV2ClientTypes.InputSessionStateSpecification()
        value.sessionAttributes = try reader["sessionAttributes"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        value.activeContexts = try reader["activeContexts"].readListIfPresent(memberReadingClosure: LexModelsV2ClientTypes.ActiveContext.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.runtimeHints = try reader["runtimeHints"].readIfPresent(with: LexModelsV2ClientTypes.RuntimeHints.read(from:))
        return value
    }
}

extension LexModelsV2ClientTypes.RuntimeHints {

    static func read(from reader: SmithyJSON.Reader) throws -> LexModelsV2ClientTypes.RuntimeHints {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LexModelsV2ClientTypes.RuntimeHints()
        value.slotHints = try reader["slotHints"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.mapReadingClosure(valueReadingClosure: LexModelsV2ClientTypes.RuntimeHintDetails.read(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        return value
    }
}

extension LexModelsV2ClientTypes.RuntimeHintDetails {

    static func read(from reader: SmithyJSON.Reader) throws -> LexModelsV2ClientTypes.RuntimeHintDetails {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LexModelsV2ClientTypes.RuntimeHintDetails()
        value.runtimeHintValues = try reader["runtimeHintValues"].readListIfPresent(memberReadingClosure: LexModelsV2ClientTypes.RuntimeHintValue.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.subSlotHints = try reader["subSlotHints"].readMapIfPresent(valueReadingClosure: LexModelsV2ClientTypes.RuntimeHintDetails.read(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        return value
    }
}

extension LexModelsV2ClientTypes.RuntimeHintValue {

    static func read(from reader: SmithyJSON.Reader) throws -> LexModelsV2ClientTypes.RuntimeHintValue {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LexModelsV2ClientTypes.RuntimeHintValue()
        value.phrase = try reader["phrase"].readIfPresent() ?? ""
        return value
    }
}

extension LexModelsV2ClientTypes.UtteranceInputSpecification {

    static func read(from reader: SmithyJSON.Reader) throws -> LexModelsV2ClientTypes.UtteranceInputSpecification {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LexModelsV2ClientTypes.UtteranceInputSpecification()
        value.textInput = try reader["textInput"].readIfPresent()
        value.audioInput = try reader["audioInput"].readIfPresent(with: LexModelsV2ClientTypes.UtteranceAudioInputSpecification.read(from:))
        return value
    }
}

extension LexModelsV2ClientTypes.UtteranceAudioInputSpecification {

    static func read(from reader: SmithyJSON.Reader) throws -> LexModelsV2ClientTypes.UtteranceAudioInputSpecification {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LexModelsV2ClientTypes.UtteranceAudioInputSpecification()
        value.audioFileS3Location = try reader["audioFileS3Location"].readIfPresent() ?? ""
        return value
    }
}

extension LexModelsV2ClientTypes.AgentTurnResult {

    static func read(from reader: SmithyJSON.Reader) throws -> LexModelsV2ClientTypes.AgentTurnResult {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LexModelsV2ClientTypes.AgentTurnResult()
        value.expectedAgentPrompt = try reader["expectedAgentPrompt"].readIfPresent() ?? ""
        value.actualAgentPrompt = try reader["actualAgentPrompt"].readIfPresent()
        value.errorDetails = try reader["errorDetails"].readIfPresent(with: LexModelsV2ClientTypes.ExecutionErrorDetails.read(from:))
        value.actualElicitedSlot = try reader["actualElicitedSlot"].readIfPresent()
        value.actualIntent = try reader["actualIntent"].readIfPresent()
        return value
    }
}

extension LexModelsV2ClientTypes.IntentLevelSlotResolutionTestResults {

    static func read(from reader: SmithyJSON.Reader) throws -> LexModelsV2ClientTypes.IntentLevelSlotResolutionTestResults {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LexModelsV2ClientTypes.IntentLevelSlotResolutionTestResults()
        value.items = try reader["items"].readListIfPresent(memberReadingClosure: LexModelsV2ClientTypes.IntentLevelSlotResolutionTestResultItem.read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        return value
    }
}

extension LexModelsV2ClientTypes.IntentLevelSlotResolutionTestResultItem {

    static func read(from reader: SmithyJSON.Reader) throws -> LexModelsV2ClientTypes.IntentLevelSlotResolutionTestResultItem {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LexModelsV2ClientTypes.IntentLevelSlotResolutionTestResultItem()
        value.intentName = try reader["intentName"].readIfPresent() ?? ""
        value.multiTurnConversation = try reader["multiTurnConversation"].readIfPresent() ?? false
        value.slotResolutionResults = try reader["slotResolutionResults"].readListIfPresent(memberReadingClosure: LexModelsV2ClientTypes.SlotResolutionTestResultItem.read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        return value
    }
}

extension LexModelsV2ClientTypes.SlotResolutionTestResultItem {

    static func read(from reader: SmithyJSON.Reader) throws -> LexModelsV2ClientTypes.SlotResolutionTestResultItem {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LexModelsV2ClientTypes.SlotResolutionTestResultItem()
        value.slotName = try reader["slotName"].readIfPresent() ?? ""
        value.resultCounts = try reader["resultCounts"].readIfPresent(with: LexModelsV2ClientTypes.SlotResolutionTestResultItemCounts.read(from:))
        return value
    }
}

extension LexModelsV2ClientTypes.SlotResolutionTestResultItemCounts {

    static func read(from reader: SmithyJSON.Reader) throws -> LexModelsV2ClientTypes.SlotResolutionTestResultItemCounts {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LexModelsV2ClientTypes.SlotResolutionTestResultItemCounts()
        value.totalResultCount = try reader["totalResultCount"].readIfPresent() ?? 0
        value.speechTranscriptionResultCounts = try reader["speechTranscriptionResultCounts"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.ReadingClosures.readInt(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        value.slotMatchResultCounts = try reader["slotMatchResultCounts"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.ReadingClosures.readInt(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false) ?? [:]
        return value
    }
}

extension LexModelsV2ClientTypes.IntentClassificationTestResults {

    static func read(from reader: SmithyJSON.Reader) throws -> LexModelsV2ClientTypes.IntentClassificationTestResults {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LexModelsV2ClientTypes.IntentClassificationTestResults()
        value.items = try reader["items"].readListIfPresent(memberReadingClosure: LexModelsV2ClientTypes.IntentClassificationTestResultItem.read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        return value
    }
}

extension LexModelsV2ClientTypes.IntentClassificationTestResultItem {

    static func read(from reader: SmithyJSON.Reader) throws -> LexModelsV2ClientTypes.IntentClassificationTestResultItem {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LexModelsV2ClientTypes.IntentClassificationTestResultItem()
        value.intentName = try reader["intentName"].readIfPresent() ?? ""
        value.multiTurnConversation = try reader["multiTurnConversation"].readIfPresent() ?? false
        value.resultCounts = try reader["resultCounts"].readIfPresent(with: LexModelsV2ClientTypes.IntentClassificationTestResultItemCounts.read(from:))
        return value
    }
}

extension LexModelsV2ClientTypes.IntentClassificationTestResultItemCounts {

    static func read(from reader: SmithyJSON.Reader) throws -> LexModelsV2ClientTypes.IntentClassificationTestResultItemCounts {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LexModelsV2ClientTypes.IntentClassificationTestResultItemCounts()
        value.totalResultCount = try reader["totalResultCount"].readIfPresent() ?? 0
        value.speechTranscriptionResultCounts = try reader["speechTranscriptionResultCounts"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.ReadingClosures.readInt(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        value.intentMatchResultCounts = try reader["intentMatchResultCounts"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.ReadingClosures.readInt(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false) ?? [:]
        return value
    }
}

extension LexModelsV2ClientTypes.ConversationLevelTestResults {

    static func read(from reader: SmithyJSON.Reader) throws -> LexModelsV2ClientTypes.ConversationLevelTestResults {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LexModelsV2ClientTypes.ConversationLevelTestResults()
        value.items = try reader["items"].readListIfPresent(memberReadingClosure: LexModelsV2ClientTypes.ConversationLevelTestResultItem.read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        return value
    }
}

extension LexModelsV2ClientTypes.ConversationLevelTestResultItem {

    static func read(from reader: SmithyJSON.Reader) throws -> LexModelsV2ClientTypes.ConversationLevelTestResultItem {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LexModelsV2ClientTypes.ConversationLevelTestResultItem()
        value.conversationId = try reader["conversationId"].readIfPresent() ?? ""
        value.endToEndResult = try reader["endToEndResult"].readIfPresent() ?? .sdkUnknown("")
        value.speechTranscriptionResult = try reader["speechTranscriptionResult"].readIfPresent()
        value.intentClassificationResults = try reader["intentClassificationResults"].readListIfPresent(memberReadingClosure: LexModelsV2ClientTypes.ConversationLevelIntentClassificationResultItem.read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        value.slotResolutionResults = try reader["slotResolutionResults"].readListIfPresent(memberReadingClosure: LexModelsV2ClientTypes.ConversationLevelSlotResolutionResultItem.read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        return value
    }
}

extension LexModelsV2ClientTypes.ConversationLevelSlotResolutionResultItem {

    static func read(from reader: SmithyJSON.Reader) throws -> LexModelsV2ClientTypes.ConversationLevelSlotResolutionResultItem {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LexModelsV2ClientTypes.ConversationLevelSlotResolutionResultItem()
        value.intentName = try reader["intentName"].readIfPresent() ?? ""
        value.slotName = try reader["slotName"].readIfPresent() ?? ""
        value.matchResult = try reader["matchResult"].readIfPresent() ?? .sdkUnknown("")
        return value
    }
}

extension LexModelsV2ClientTypes.ConversationLevelIntentClassificationResultItem {

    static func read(from reader: SmithyJSON.Reader) throws -> LexModelsV2ClientTypes.ConversationLevelIntentClassificationResultItem {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LexModelsV2ClientTypes.ConversationLevelIntentClassificationResultItem()
        value.intentName = try reader["intentName"].readIfPresent() ?? ""
        value.matchResult = try reader["matchResult"].readIfPresent() ?? .sdkUnknown("")
        return value
    }
}

extension LexModelsV2ClientTypes.OverallTestResults {

    static func read(from reader: SmithyJSON.Reader) throws -> LexModelsV2ClientTypes.OverallTestResults {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LexModelsV2ClientTypes.OverallTestResults()
        value.items = try reader["items"].readListIfPresent(memberReadingClosure: LexModelsV2ClientTypes.OverallTestResultItem.read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        return value
    }
}

extension LexModelsV2ClientTypes.OverallTestResultItem {

    static func read(from reader: SmithyJSON.Reader) throws -> LexModelsV2ClientTypes.OverallTestResultItem {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LexModelsV2ClientTypes.OverallTestResultItem()
        value.multiTurnConversation = try reader["multiTurnConversation"].readIfPresent() ?? false
        value.totalResultCount = try reader["totalResultCount"].readIfPresent() ?? 0
        value.speechTranscriptionResultCounts = try reader["speechTranscriptionResultCounts"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.ReadingClosures.readInt(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        value.endToEndResultCounts = try reader["endToEndResultCounts"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.ReadingClosures.readInt(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false) ?? [:]
        return value
    }
}

extension LexModelsV2ClientTypes.TestExecutionSummary {

    static func read(from reader: SmithyJSON.Reader) throws -> LexModelsV2ClientTypes.TestExecutionSummary {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LexModelsV2ClientTypes.TestExecutionSummary()
        value.testExecutionId = try reader["testExecutionId"].readIfPresent()
        value.creationDateTime = try reader["creationDateTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.lastUpdatedDateTime = try reader["lastUpdatedDateTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.testExecutionStatus = try reader["testExecutionStatus"].readIfPresent()
        value.testSetId = try reader["testSetId"].readIfPresent()
        value.testSetName = try reader["testSetName"].readIfPresent()
        value.target = try reader["target"].readIfPresent(with: LexModelsV2ClientTypes.TestExecutionTarget.read(from:))
        value.apiMode = try reader["apiMode"].readIfPresent()
        value.testExecutionModality = try reader["testExecutionModality"].readIfPresent()
        return value
    }
}

extension LexModelsV2ClientTypes.TestSetTurnRecord {

    static func read(from reader: SmithyJSON.Reader) throws -> LexModelsV2ClientTypes.TestSetTurnRecord {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LexModelsV2ClientTypes.TestSetTurnRecord()
        value.recordNumber = try reader["recordNumber"].readIfPresent() ?? 0
        value.conversationId = try reader["conversationId"].readIfPresent()
        value.turnNumber = try reader["turnNumber"].readIfPresent()
        value.turnSpecification = try reader["turnSpecification"].readIfPresent(with: LexModelsV2ClientTypes.TurnSpecification.read(from:))
        return value
    }
}

extension LexModelsV2ClientTypes.TurnSpecification {

    static func read(from reader: SmithyJSON.Reader) throws -> LexModelsV2ClientTypes.TurnSpecification {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LexModelsV2ClientTypes.TurnSpecification()
        value.agentTurn = try reader["agentTurn"].readIfPresent(with: LexModelsV2ClientTypes.AgentTurnSpecification.read(from:))
        value.userTurn = try reader["userTurn"].readIfPresent(with: LexModelsV2ClientTypes.UserTurnSpecification.read(from:))
        return value
    }
}

extension LexModelsV2ClientTypes.UserTurnSpecification {

    static func read(from reader: SmithyJSON.Reader) throws -> LexModelsV2ClientTypes.UserTurnSpecification {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LexModelsV2ClientTypes.UserTurnSpecification()
        value.input = try reader["input"].readIfPresent(with: LexModelsV2ClientTypes.UserTurnInputSpecification.read(from:))
        value.expected = try reader["expected"].readIfPresent(with: LexModelsV2ClientTypes.UserTurnOutputSpecification.read(from:))
        return value
    }
}

extension LexModelsV2ClientTypes.AgentTurnSpecification {

    static func read(from reader: SmithyJSON.Reader) throws -> LexModelsV2ClientTypes.AgentTurnSpecification {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LexModelsV2ClientTypes.AgentTurnSpecification()
        value.agentPrompt = try reader["agentPrompt"].readIfPresent() ?? ""
        return value
    }
}

extension LexModelsV2ClientTypes.TestSetSummary {

    static func read(from reader: SmithyJSON.Reader) throws -> LexModelsV2ClientTypes.TestSetSummary {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LexModelsV2ClientTypes.TestSetSummary()
        value.testSetId = try reader["testSetId"].readIfPresent()
        value.testSetName = try reader["testSetName"].readIfPresent()
        value.description = try reader["description"].readIfPresent()
        value.modality = try reader["modality"].readIfPresent()
        value.status = try reader["status"].readIfPresent()
        value.roleArn = try reader["roleArn"].readIfPresent()
        value.numTurns = try reader["numTurns"].readIfPresent()
        value.storageLocation = try reader["storageLocation"].readIfPresent(with: LexModelsV2ClientTypes.TestSetStorageLocation.read(from:))
        value.creationDateTime = try reader["creationDateTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.lastUpdatedDateTime = try reader["lastUpdatedDateTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        return value
    }
}

extension LexModelsV2ClientTypes.UtteranceSpecification {

    static func read(from reader: SmithyJSON.Reader) throws -> LexModelsV2ClientTypes.UtteranceSpecification {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LexModelsV2ClientTypes.UtteranceSpecification()
        value.botAliasId = try reader["botAliasId"].readIfPresent()
        value.botVersion = try reader["botVersion"].readIfPresent()
        value.localeId = try reader["localeId"].readIfPresent()
        value.sessionId = try reader["sessionId"].readIfPresent()
        value.channel = try reader["channel"].readIfPresent()
        value.mode = try reader["mode"].readIfPresent()
        value.conversationStartTime = try reader["conversationStartTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.conversationEndTime = try reader["conversationEndTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.utterance = try reader["utterance"].readIfPresent()
        value.utteranceTimestamp = try reader["utteranceTimestamp"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.audioVoiceDurationMillis = try reader["audioVoiceDurationMillis"].readIfPresent()
        value.utteranceUnderstood = try reader["utteranceUnderstood"].readIfPresent() ?? false
        value.inputType = try reader["inputType"].readIfPresent()
        value.outputType = try reader["outputType"].readIfPresent()
        value.associatedIntentName = try reader["associatedIntentName"].readIfPresent()
        value.associatedSlotName = try reader["associatedSlotName"].readIfPresent()
        value.intentState = try reader["intentState"].readIfPresent()
        value.dialogActionType = try reader["dialogActionType"].readIfPresent()
        value.botResponseAudioVoiceId = try reader["botResponseAudioVoiceId"].readIfPresent()
        value.slotsFilledInSession = try reader["slotsFilledInSession"].readIfPresent()
        value.utteranceRequestId = try reader["utteranceRequestId"].readIfPresent()
        value.botResponses = try reader["botResponses"].readListIfPresent(memberReadingClosure: LexModelsV2ClientTypes.UtteranceBotResponse.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension LexModelsV2ClientTypes.UtteranceBotResponse {

    static func read(from reader: SmithyJSON.Reader) throws -> LexModelsV2ClientTypes.UtteranceBotResponse {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LexModelsV2ClientTypes.UtteranceBotResponse()
        value.content = try reader["content"].readIfPresent()
        value.contentType = try reader["contentType"].readIfPresent()
        value.imageResponseCard = try reader["imageResponseCard"].readIfPresent(with: LexModelsV2ClientTypes.ImageResponseCard.read(from:))
        return value
    }
}

extension LexModelsV2ClientTypes.AnalyticsUtteranceResult {

    static func read(from reader: SmithyJSON.Reader) throws -> LexModelsV2ClientTypes.AnalyticsUtteranceResult {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LexModelsV2ClientTypes.AnalyticsUtteranceResult()
        value.binKeys = try reader["binKeys"].readListIfPresent(memberReadingClosure: LexModelsV2ClientTypes.AnalyticsBinKey.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.groupByKeys = try reader["groupByKeys"].readListIfPresent(memberReadingClosure: LexModelsV2ClientTypes.AnalyticsUtteranceGroupByKey.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.metricsResults = try reader["metricsResults"].readListIfPresent(memberReadingClosure: LexModelsV2ClientTypes.AnalyticsUtteranceMetricResult.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.attributeResults = try reader["attributeResults"].readListIfPresent(memberReadingClosure: LexModelsV2ClientTypes.AnalyticsUtteranceAttributeResult.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension LexModelsV2ClientTypes.AnalyticsUtteranceAttributeResult {

    static func read(from reader: SmithyJSON.Reader) throws -> LexModelsV2ClientTypes.AnalyticsUtteranceAttributeResult {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LexModelsV2ClientTypes.AnalyticsUtteranceAttributeResult()
        value.lastUsedIntent = try reader["lastUsedIntent"].readIfPresent()
        return value
    }
}

extension LexModelsV2ClientTypes.AnalyticsUtteranceMetricResult {

    static func read(from reader: SmithyJSON.Reader) throws -> LexModelsV2ClientTypes.AnalyticsUtteranceMetricResult {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LexModelsV2ClientTypes.AnalyticsUtteranceMetricResult()
        value.name = try reader["name"].readIfPresent()
        value.statistic = try reader["statistic"].readIfPresent()
        value.value = try reader["value"].readIfPresent()
        return value
    }
}

extension LexModelsV2ClientTypes.AnalyticsUtteranceGroupByKey {

    static func read(from reader: SmithyJSON.Reader) throws -> LexModelsV2ClientTypes.AnalyticsUtteranceGroupByKey {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LexModelsV2ClientTypes.AnalyticsUtteranceGroupByKey()
        value.name = try reader["name"].readIfPresent()
        value.value = try reader["value"].readIfPresent()
        return value
    }
}

extension LexModelsV2ClientTypes.AssociatedTranscript {

    static func read(from reader: SmithyJSON.Reader) throws -> LexModelsV2ClientTypes.AssociatedTranscript {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LexModelsV2ClientTypes.AssociatedTranscript()
        value.transcript = try reader["transcript"].readIfPresent()
        return value
    }
}

extension LexModelsV2ClientTypes.NewCustomVocabularyItem {

    static func write(value: LexModelsV2ClientTypes.NewCustomVocabularyItem?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["displayAs"].write(value.displayAs)
        try writer["phrase"].write(value.phrase)
        try writer["weight"].write(value.weight)
    }
}

extension LexModelsV2ClientTypes.CustomVocabularyEntryId {

    static func write(value: LexModelsV2ClientTypes.CustomVocabularyEntryId?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["itemId"].write(value.itemId)
    }
}

extension LexModelsV2ClientTypes.Principal {

    static func write(value: LexModelsV2ClientTypes.Principal?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["arn"].write(value.arn)
        try writer["service"].write(value.service)
    }
}

extension LexModelsV2ClientTypes.AggregatedUtterancesSortBy {

    static func write(value: LexModelsV2ClientTypes.AggregatedUtterancesSortBy?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["attribute"].write(value.attribute)
        try writer["order"].write(value.order)
    }
}

extension LexModelsV2ClientTypes.AggregatedUtterancesFilter {

    static func write(value: LexModelsV2ClientTypes.AggregatedUtterancesFilter?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["name"].write(value.name)
        try writer["operator"].write(value.`operator`)
        try writer["values"].writeList(value.values, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension LexModelsV2ClientTypes.BotLocaleSortBy {

    static func write(value: LexModelsV2ClientTypes.BotLocaleSortBy?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["attribute"].write(value.attribute)
        try writer["order"].write(value.order)
    }
}

extension LexModelsV2ClientTypes.BotLocaleFilter {

    static func write(value: LexModelsV2ClientTypes.BotLocaleFilter?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["name"].write(value.name)
        try writer["operator"].write(value.`operator`)
        try writer["values"].writeList(value.values, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension LexModelsV2ClientTypes.GenerationSortBy {

    static func write(value: LexModelsV2ClientTypes.GenerationSortBy?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["attribute"].write(value.attribute)
        try writer["order"].write(value.order)
    }
}

extension LexModelsV2ClientTypes.BotSortBy {

    static func write(value: LexModelsV2ClientTypes.BotSortBy?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["attribute"].write(value.attribute)
        try writer["order"].write(value.order)
    }
}

extension LexModelsV2ClientTypes.BotFilter {

    static func write(value: LexModelsV2ClientTypes.BotFilter?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["name"].write(value.name)
        try writer["operator"].write(value.`operator`)
        try writer["values"].writeList(value.values, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension LexModelsV2ClientTypes.BotVersionReplicaSortBy {

    static func write(value: LexModelsV2ClientTypes.BotVersionReplicaSortBy?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["attribute"].write(value.attribute)
        try writer["order"].write(value.order)
    }
}

extension LexModelsV2ClientTypes.BotVersionSortBy {

    static func write(value: LexModelsV2ClientTypes.BotVersionSortBy?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["attribute"].write(value.attribute)
        try writer["order"].write(value.order)
    }
}

extension LexModelsV2ClientTypes.BuiltInIntentSortBy {

    static func write(value: LexModelsV2ClientTypes.BuiltInIntentSortBy?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["attribute"].write(value.attribute)
        try writer["order"].write(value.order)
    }
}

extension LexModelsV2ClientTypes.BuiltInSlotTypeSortBy {

    static func write(value: LexModelsV2ClientTypes.BuiltInSlotTypeSortBy?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["attribute"].write(value.attribute)
        try writer["order"].write(value.order)
    }
}

extension LexModelsV2ClientTypes.ExportSortBy {

    static func write(value: LexModelsV2ClientTypes.ExportSortBy?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["attribute"].write(value.attribute)
        try writer["order"].write(value.order)
    }
}

extension LexModelsV2ClientTypes.ExportFilter {

    static func write(value: LexModelsV2ClientTypes.ExportFilter?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["name"].write(value.name)
        try writer["operator"].write(value.`operator`)
        try writer["values"].writeList(value.values, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension LexModelsV2ClientTypes.ImportSortBy {

    static func write(value: LexModelsV2ClientTypes.ImportSortBy?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["attribute"].write(value.attribute)
        try writer["order"].write(value.order)
    }
}

extension LexModelsV2ClientTypes.ImportFilter {

    static func write(value: LexModelsV2ClientTypes.ImportFilter?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["name"].write(value.name)
        try writer["operator"].write(value.`operator`)
        try writer["values"].writeList(value.values, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension LexModelsV2ClientTypes.AnalyticsIntentMetric {

    static func write(value: LexModelsV2ClientTypes.AnalyticsIntentMetric?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["name"].write(value.name)
        try writer["order"].write(value.order)
        try writer["statistic"].write(value.statistic)
    }
}

extension LexModelsV2ClientTypes.AnalyticsBinBySpecification {

    static func write(value: LexModelsV2ClientTypes.AnalyticsBinBySpecification?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["interval"].write(value.interval)
        try writer["name"].write(value.name)
        try writer["order"].write(value.order)
    }
}

extension LexModelsV2ClientTypes.AnalyticsIntentGroupBySpecification {

    static func write(value: LexModelsV2ClientTypes.AnalyticsIntentGroupBySpecification?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["name"].write(value.name)
    }
}

extension LexModelsV2ClientTypes.AnalyticsIntentFilter {

    static func write(value: LexModelsV2ClientTypes.AnalyticsIntentFilter?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["name"].write(value.name)
        try writer["operator"].write(value.`operator`)
        try writer["values"].writeList(value.values, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension LexModelsV2ClientTypes.AnalyticsPathFilter {

    static func write(value: LexModelsV2ClientTypes.AnalyticsPathFilter?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["name"].write(value.name)
        try writer["operator"].write(value.`operator`)
        try writer["values"].writeList(value.values, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension LexModelsV2ClientTypes.IntentSortBy {

    static func write(value: LexModelsV2ClientTypes.IntentSortBy?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["attribute"].write(value.attribute)
        try writer["order"].write(value.order)
    }
}

extension LexModelsV2ClientTypes.IntentFilter {

    static func write(value: LexModelsV2ClientTypes.IntentFilter?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["name"].write(value.name)
        try writer["operator"].write(value.`operator`)
        try writer["values"].writeList(value.values, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension LexModelsV2ClientTypes.AnalyticsIntentStageMetric {

    static func write(value: LexModelsV2ClientTypes.AnalyticsIntentStageMetric?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["name"].write(value.name)
        try writer["order"].write(value.order)
        try writer["statistic"].write(value.statistic)
    }
}

extension LexModelsV2ClientTypes.AnalyticsIntentStageGroupBySpecification {

    static func write(value: LexModelsV2ClientTypes.AnalyticsIntentStageGroupBySpecification?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["name"].write(value.name)
    }
}

extension LexModelsV2ClientTypes.AnalyticsIntentStageFilter {

    static func write(value: LexModelsV2ClientTypes.AnalyticsIntentStageFilter?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["name"].write(value.name)
        try writer["operator"].write(value.`operator`)
        try writer["values"].writeList(value.values, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension LexModelsV2ClientTypes.SessionDataSortBy {

    static func write(value: LexModelsV2ClientTypes.SessionDataSortBy?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["name"].write(value.name)
        try writer["order"].write(value.order)
    }
}

extension LexModelsV2ClientTypes.AnalyticsSessionFilter {

    static func write(value: LexModelsV2ClientTypes.AnalyticsSessionFilter?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["name"].write(value.name)
        try writer["operator"].write(value.`operator`)
        try writer["values"].writeList(value.values, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension LexModelsV2ClientTypes.AnalyticsSessionMetric {

    static func write(value: LexModelsV2ClientTypes.AnalyticsSessionMetric?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["name"].write(value.name)
        try writer["order"].write(value.order)
        try writer["statistic"].write(value.statistic)
    }
}

extension LexModelsV2ClientTypes.AnalyticsSessionGroupBySpecification {

    static func write(value: LexModelsV2ClientTypes.AnalyticsSessionGroupBySpecification?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["name"].write(value.name)
    }
}

extension LexModelsV2ClientTypes.SlotSortBy {

    static func write(value: LexModelsV2ClientTypes.SlotSortBy?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["attribute"].write(value.attribute)
        try writer["order"].write(value.order)
    }
}

extension LexModelsV2ClientTypes.SlotFilter {

    static func write(value: LexModelsV2ClientTypes.SlotFilter?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["name"].write(value.name)
        try writer["operator"].write(value.`operator`)
        try writer["values"].writeList(value.values, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension LexModelsV2ClientTypes.SlotTypeSortBy {

    static func write(value: LexModelsV2ClientTypes.SlotTypeSortBy?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["attribute"].write(value.attribute)
        try writer["order"].write(value.order)
    }
}

extension LexModelsV2ClientTypes.SlotTypeFilter {

    static func write(value: LexModelsV2ClientTypes.SlotTypeFilter?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["name"].write(value.name)
        try writer["operator"].write(value.`operator`)
        try writer["values"].writeList(value.values, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension LexModelsV2ClientTypes.TestExecutionResultFilterBy {

    static func write(value: LexModelsV2ClientTypes.TestExecutionResultFilterBy?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["conversationLevelTestResultsFilterBy"].write(value.conversationLevelTestResultsFilterBy, with: LexModelsV2ClientTypes.ConversationLevelTestResultsFilterBy.write(value:to:))
        try writer["resultTypeFilter"].write(value.resultTypeFilter)
    }
}

extension LexModelsV2ClientTypes.ConversationLevelTestResultsFilterBy {

    static func write(value: LexModelsV2ClientTypes.ConversationLevelTestResultsFilterBy?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["endToEndResult"].write(value.endToEndResult)
    }
}

extension LexModelsV2ClientTypes.TestExecutionSortBy {

    static func write(value: LexModelsV2ClientTypes.TestExecutionSortBy?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["attribute"].write(value.attribute)
        try writer["order"].write(value.order)
    }
}

extension LexModelsV2ClientTypes.TestSetSortBy {

    static func write(value: LexModelsV2ClientTypes.TestSetSortBy?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["attribute"].write(value.attribute)
        try writer["order"].write(value.order)
    }
}

extension LexModelsV2ClientTypes.UtteranceDataSortBy {

    static func write(value: LexModelsV2ClientTypes.UtteranceDataSortBy?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["name"].write(value.name)
        try writer["order"].write(value.order)
    }
}

extension LexModelsV2ClientTypes.AnalyticsUtteranceFilter {

    static func write(value: LexModelsV2ClientTypes.AnalyticsUtteranceFilter?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["name"].write(value.name)
        try writer["operator"].write(value.`operator`)
        try writer["values"].writeList(value.values, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension LexModelsV2ClientTypes.AnalyticsUtteranceMetric {

    static func write(value: LexModelsV2ClientTypes.AnalyticsUtteranceMetric?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["name"].write(value.name)
        try writer["order"].write(value.order)
        try writer["statistic"].write(value.statistic)
    }
}

extension LexModelsV2ClientTypes.AnalyticsUtteranceGroupBySpecification {

    static func write(value: LexModelsV2ClientTypes.AnalyticsUtteranceGroupBySpecification?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["name"].write(value.name)
    }
}

extension LexModelsV2ClientTypes.AnalyticsUtteranceAttribute {

    static func write(value: LexModelsV2ClientTypes.AnalyticsUtteranceAttribute?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["name"].write(value.name)
    }
}

extension LexModelsV2ClientTypes.AssociatedTranscriptFilter {

    static func write(value: LexModelsV2ClientTypes.AssociatedTranscriptFilter?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["name"].write(value.name)
        try writer["values"].writeList(value.values, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

public enum LexModelsV2ClientTypes {}
