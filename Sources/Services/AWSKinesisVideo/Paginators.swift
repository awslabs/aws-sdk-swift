// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension KinesisVideoClient {
    /// Paginate over `[DescribeMappedResourceConfigurationOutputResponse]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[DescribeMappedResourceConfigurationInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `DescribeMappedResourceConfigurationOutputResponse`
    public func describeMappedResourceConfigurationPaginated(input: DescribeMappedResourceConfigurationInput) -> ClientRuntime.PaginatorSequence<DescribeMappedResourceConfigurationInput, DescribeMappedResourceConfigurationOutputResponse> {
        return ClientRuntime.PaginatorSequence<DescribeMappedResourceConfigurationInput, DescribeMappedResourceConfigurationOutputResponse>(input: input, inputKey: \DescribeMappedResourceConfigurationInput.nextToken, outputKey: \DescribeMappedResourceConfigurationOutputResponse.nextToken, paginationFunction: self.describeMappedResourceConfiguration(input:))
    }
}

extension DescribeMappedResourceConfigurationInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> DescribeMappedResourceConfigurationInput {
        return DescribeMappedResourceConfigurationInput(
            maxResults: self.maxResults,
            nextToken: token,
            streamARN: self.streamARN,
            streamName: self.streamName
        )}
}

extension PaginatorSequence where Input == DescribeMappedResourceConfigurationInput, Output == DescribeMappedResourceConfigurationOutputResponse {
    /// This paginator transforms the `AsyncSequence` returned by `describeMappedResourceConfigurationPaginated`
    /// to access the nested member `[KinesisVideoClientTypes.MappedResourceConfigurationListItem]`
    /// - Returns: `[KinesisVideoClientTypes.MappedResourceConfigurationListItem]`
    public func mappedResourceConfigurationList() async throws -> [KinesisVideoClientTypes.MappedResourceConfigurationListItem] {
        return try await self.asyncCompactMap { item in item.mappedResourceConfigurationList }
    }
}
extension KinesisVideoClient {
    /// Paginate over `[ListSignalingChannelsOutputResponse]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[ListSignalingChannelsInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `ListSignalingChannelsOutputResponse`
    public func listSignalingChannelsPaginated(input: ListSignalingChannelsInput) -> ClientRuntime.PaginatorSequence<ListSignalingChannelsInput, ListSignalingChannelsOutputResponse> {
        return ClientRuntime.PaginatorSequence<ListSignalingChannelsInput, ListSignalingChannelsOutputResponse>(input: input, inputKey: \ListSignalingChannelsInput.nextToken, outputKey: \ListSignalingChannelsOutputResponse.nextToken, paginationFunction: self.listSignalingChannels(input:))
    }
}

extension ListSignalingChannelsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListSignalingChannelsInput {
        return ListSignalingChannelsInput(
            channelNameCondition: self.channelNameCondition,
            maxResults: self.maxResults,
            nextToken: token
        )}
}

extension PaginatorSequence where Input == ListSignalingChannelsInput, Output == ListSignalingChannelsOutputResponse {
    /// This paginator transforms the `AsyncSequence` returned by `listSignalingChannelsPaginated`
    /// to access the nested member `[KinesisVideoClientTypes.ChannelInfo]`
    /// - Returns: `[KinesisVideoClientTypes.ChannelInfo]`
    public func channelInfoList() async throws -> [KinesisVideoClientTypes.ChannelInfo] {
        return try await self.asyncCompactMap { item in item.channelInfoList }
    }
}
extension KinesisVideoClient {
    /// Paginate over `[ListStreamsOutputResponse]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[ListStreamsInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `ListStreamsOutputResponse`
    public func listStreamsPaginated(input: ListStreamsInput) -> ClientRuntime.PaginatorSequence<ListStreamsInput, ListStreamsOutputResponse> {
        return ClientRuntime.PaginatorSequence<ListStreamsInput, ListStreamsOutputResponse>(input: input, inputKey: \ListStreamsInput.nextToken, outputKey: \ListStreamsOutputResponse.nextToken, paginationFunction: self.listStreams(input:))
    }
}

extension ListStreamsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListStreamsInput {
        return ListStreamsInput(
            maxResults: self.maxResults,
            nextToken: token,
            streamNameCondition: self.streamNameCondition
        )}
}

extension PaginatorSequence where Input == ListStreamsInput, Output == ListStreamsOutputResponse {
    /// This paginator transforms the `AsyncSequence` returned by `listStreamsPaginated`
    /// to access the nested member `[KinesisVideoClientTypes.StreamInfo]`
    /// - Returns: `[KinesisVideoClientTypes.StreamInfo]`
    public func streamInfoList() async throws -> [KinesisVideoClientTypes.StreamInfo] {
        return try await self.asyncCompactMap { item in item.streamInfoList }
    }
}
