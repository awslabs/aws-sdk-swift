// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension VoiceIDClient {
    /// Paginate over `[ListFraudsterRegistrationJobsOutputResponse]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[ListFraudsterRegistrationJobsInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `ListFraudsterRegistrationJobsOutputResponse`
    public func listFraudsterRegistrationJobsPaginated(input: ListFraudsterRegistrationJobsInput) -> ClientRuntime.PaginatorSequence<ListFraudsterRegistrationJobsInput, ListFraudsterRegistrationJobsOutputResponse> {
        return ClientRuntime.PaginatorSequence<ListFraudsterRegistrationJobsInput, ListFraudsterRegistrationJobsOutputResponse>(input: input, inputKey: \ListFraudsterRegistrationJobsInput.nextToken, outputKey: \ListFraudsterRegistrationJobsOutputResponse.nextToken, paginationFunction: self.listFraudsterRegistrationJobs(input:))
    }
}

extension ListFraudsterRegistrationJobsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListFraudsterRegistrationJobsInput {
        return ListFraudsterRegistrationJobsInput(
            domainId: self.domainId,
            jobStatus: self.jobStatus,
            maxResults: self.maxResults,
            nextToken: token
        )}
}

extension PaginatorSequence where Input == ListFraudsterRegistrationJobsInput, Output == ListFraudsterRegistrationJobsOutputResponse {
    /// This paginator transforms the `AsyncSequence` returned by `listFraudsterRegistrationJobsPaginated`
    /// to access the nested member `[VoiceIDClientTypes.FraudsterRegistrationJobSummary]`
    /// - Returns: `[VoiceIDClientTypes.FraudsterRegistrationJobSummary]`
    public func jobSummaries() async throws -> [VoiceIDClientTypes.FraudsterRegistrationJobSummary] {
        return try await self.asyncCompactMap { item in item.jobSummaries }
    }
}
extension VoiceIDClient {
    /// Paginate over `[ListSpeakerEnrollmentJobsOutputResponse]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[ListSpeakerEnrollmentJobsInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `ListSpeakerEnrollmentJobsOutputResponse`
    public func listSpeakerEnrollmentJobsPaginated(input: ListSpeakerEnrollmentJobsInput) -> ClientRuntime.PaginatorSequence<ListSpeakerEnrollmentJobsInput, ListSpeakerEnrollmentJobsOutputResponse> {
        return ClientRuntime.PaginatorSequence<ListSpeakerEnrollmentJobsInput, ListSpeakerEnrollmentJobsOutputResponse>(input: input, inputKey: \ListSpeakerEnrollmentJobsInput.nextToken, outputKey: \ListSpeakerEnrollmentJobsOutputResponse.nextToken, paginationFunction: self.listSpeakerEnrollmentJobs(input:))
    }
}

extension ListSpeakerEnrollmentJobsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListSpeakerEnrollmentJobsInput {
        return ListSpeakerEnrollmentJobsInput(
            domainId: self.domainId,
            jobStatus: self.jobStatus,
            maxResults: self.maxResults,
            nextToken: token
        )}
}

extension PaginatorSequence where Input == ListSpeakerEnrollmentJobsInput, Output == ListSpeakerEnrollmentJobsOutputResponse {
    /// This paginator transforms the `AsyncSequence` returned by `listSpeakerEnrollmentJobsPaginated`
    /// to access the nested member `[VoiceIDClientTypes.SpeakerEnrollmentJobSummary]`
    /// - Returns: `[VoiceIDClientTypes.SpeakerEnrollmentJobSummary]`
    public func jobSummaries() async throws -> [VoiceIDClientTypes.SpeakerEnrollmentJobSummary] {
        return try await self.asyncCompactMap { item in item.jobSummaries }
    }
}
extension VoiceIDClient {
    /// Paginate over `[ListSpeakersOutputResponse]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[ListSpeakersInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `ListSpeakersOutputResponse`
    public func listSpeakersPaginated(input: ListSpeakersInput) -> ClientRuntime.PaginatorSequence<ListSpeakersInput, ListSpeakersOutputResponse> {
        return ClientRuntime.PaginatorSequence<ListSpeakersInput, ListSpeakersOutputResponse>(input: input, inputKey: \ListSpeakersInput.nextToken, outputKey: \ListSpeakersOutputResponse.nextToken, paginationFunction: self.listSpeakers(input:))
    }
}

extension ListSpeakersInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListSpeakersInput {
        return ListSpeakersInput(
            domainId: self.domainId,
            maxResults: self.maxResults,
            nextToken: token
        )}
}

extension PaginatorSequence where Input == ListSpeakersInput, Output == ListSpeakersOutputResponse {
    /// This paginator transforms the `AsyncSequence` returned by `listSpeakersPaginated`
    /// to access the nested member `[VoiceIDClientTypes.SpeakerSummary]`
    /// - Returns: `[VoiceIDClientTypes.SpeakerSummary]`
    public func speakerSummaries() async throws -> [VoiceIDClientTypes.SpeakerSummary] {
        return try await self.asyncCompactMap { item in item.speakerSummaries }
    }
}
