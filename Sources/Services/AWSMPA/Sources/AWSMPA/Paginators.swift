//
// Copyright Amazon.com Inc. or its affiliates.
// All Rights Reserved.
//
// SPDX-License-Identifier: Apache-2.0
//

// Code generated by smithy-swift-codegen. DO NOT EDIT!

import protocol ClientRuntime.PaginateToken
import struct ClientRuntime.PaginatorSequence

extension MPAClient {
    /// Paginate over `[ListPoliciesOutput]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[ListPoliciesInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `ListPoliciesOutput`
    public func listPoliciesPaginated(input: ListPoliciesInput) -> ClientRuntime.PaginatorSequence<ListPoliciesInput, ListPoliciesOutput> {
        return ClientRuntime.PaginatorSequence<ListPoliciesInput, ListPoliciesOutput>(input: input, inputKey: \.nextToken, outputKey: \.nextToken, paginationFunction: self.listPolicies(input:))
    }
}

extension ListPoliciesInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListPoliciesInput {
        return ListPoliciesInput(
            maxResults: self.maxResults,
            nextToken: token
        )}
}

extension PaginatorSequence where OperationStackInput == ListPoliciesInput, OperationStackOutput == ListPoliciesOutput {
    /// This paginator transforms the `AsyncSequence` returned by `listPoliciesPaginated`
    /// to access the nested member `[MPAClientTypes.Policy]`
    /// - Returns: `[MPAClientTypes.Policy]`
    public func policies() async throws -> [MPAClientTypes.Policy] {
        return try await self.asyncCompactMap { item in item.policies }
    }
}
extension MPAClient {
    /// Paginate over `[ListPolicyVersionsOutput]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[ListPolicyVersionsInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `ListPolicyVersionsOutput`
    public func listPolicyVersionsPaginated(input: ListPolicyVersionsInput) -> ClientRuntime.PaginatorSequence<ListPolicyVersionsInput, ListPolicyVersionsOutput> {
        return ClientRuntime.PaginatorSequence<ListPolicyVersionsInput, ListPolicyVersionsOutput>(input: input, inputKey: \.nextToken, outputKey: \.nextToken, paginationFunction: self.listPolicyVersions(input:))
    }
}

extension ListPolicyVersionsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListPolicyVersionsInput {
        return ListPolicyVersionsInput(
            maxResults: self.maxResults,
            nextToken: token,
            policyArn: self.policyArn
        )}
}

extension PaginatorSequence where OperationStackInput == ListPolicyVersionsInput, OperationStackOutput == ListPolicyVersionsOutput {
    /// This paginator transforms the `AsyncSequence` returned by `listPolicyVersionsPaginated`
    /// to access the nested member `[MPAClientTypes.PolicyVersionSummary]`
    /// - Returns: `[MPAClientTypes.PolicyVersionSummary]`
    public func policyVersions() async throws -> [MPAClientTypes.PolicyVersionSummary] {
        return try await self.asyncCompactMap { item in item.policyVersions }
    }
}
extension MPAClient {
    /// Paginate over `[ListResourcePoliciesOutput]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[ListResourcePoliciesInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `ListResourcePoliciesOutput`
    public func listResourcePoliciesPaginated(input: ListResourcePoliciesInput) -> ClientRuntime.PaginatorSequence<ListResourcePoliciesInput, ListResourcePoliciesOutput> {
        return ClientRuntime.PaginatorSequence<ListResourcePoliciesInput, ListResourcePoliciesOutput>(input: input, inputKey: \.nextToken, outputKey: \.nextToken, paginationFunction: self.listResourcePolicies(input:))
    }
}

extension ListResourcePoliciesInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListResourcePoliciesInput {
        return ListResourcePoliciesInput(
            maxResults: self.maxResults,
            nextToken: token,
            resourceArn: self.resourceArn
        )}
}

extension PaginatorSequence where OperationStackInput == ListResourcePoliciesInput, OperationStackOutput == ListResourcePoliciesOutput {
    /// This paginator transforms the `AsyncSequence` returned by `listResourcePoliciesPaginated`
    /// to access the nested member `[MPAClientTypes.ListResourcePoliciesResponseResourcePolicy]`
    /// - Returns: `[MPAClientTypes.ListResourcePoliciesResponseResourcePolicy]`
    public func resourcePolicies() async throws -> [MPAClientTypes.ListResourcePoliciesResponseResourcePolicy] {
        return try await self.asyncCompactMap { item in item.resourcePolicies }
    }
}
