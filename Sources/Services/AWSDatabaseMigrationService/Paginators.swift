// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime


/// Paginate over `[DescribeApplicableIndividualAssessmentsOutputResponse]` results.
///
/// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
/// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
/// until then. If there are errors in your request, you will see the failures only after you start iterating.
/// - Parameters:
///     - input: A `[DescribeApplicableIndividualAssessmentsInput]` to start pagination
/// - Returns: An `AsyncSequence` that can iterate over `DescribeApplicableIndividualAssessmentsOutputResponse`
extension DatabaseMigrationClient {
    public func describeApplicableIndividualAssessmentsPaginated(input: DescribeApplicableIndividualAssessmentsInput) -> ClientRuntime.PaginatorSequence<DescribeApplicableIndividualAssessmentsInput, DescribeApplicableIndividualAssessmentsOutputResponse> {
        return ClientRuntime.PaginatorSequence<DescribeApplicableIndividualAssessmentsInput, DescribeApplicableIndividualAssessmentsOutputResponse>(input: input, inputKey: \DescribeApplicableIndividualAssessmentsInput.marker, outputKey: \DescribeApplicableIndividualAssessmentsOutputResponse.marker, paginationFunction: self.describeApplicableIndividualAssessments(input:))
    }
}

extension DescribeApplicableIndividualAssessmentsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> DescribeApplicableIndividualAssessmentsInput {
        return DescribeApplicableIndividualAssessmentsInput(
            marker: token,
            maxRecords: self.maxRecords,
            migrationType: self.migrationType,
            replicationInstanceArn: self.replicationInstanceArn,
            replicationTaskArn: self.replicationTaskArn,
            sourceEngineName: self.sourceEngineName,
            targetEngineName: self.targetEngineName
        )}
}

/// Paginate over `[DescribeCertificatesOutputResponse]` results.
///
/// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
/// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
/// until then. If there are errors in your request, you will see the failures only after you start iterating.
/// - Parameters:
///     - input: A `[DescribeCertificatesInput]` to start pagination
/// - Returns: An `AsyncSequence` that can iterate over `DescribeCertificatesOutputResponse`
extension DatabaseMigrationClient {
    public func describeCertificatesPaginated(input: DescribeCertificatesInput) -> ClientRuntime.PaginatorSequence<DescribeCertificatesInput, DescribeCertificatesOutputResponse> {
        return ClientRuntime.PaginatorSequence<DescribeCertificatesInput, DescribeCertificatesOutputResponse>(input: input, inputKey: \DescribeCertificatesInput.marker, outputKey: \DescribeCertificatesOutputResponse.marker, paginationFunction: self.describeCertificates(input:))
    }
}

extension DescribeCertificatesInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> DescribeCertificatesInput {
        return DescribeCertificatesInput(
            filters: self.filters,
            marker: token,
            maxRecords: self.maxRecords
        )}
}

/// Paginate over `[DescribeConnectionsOutputResponse]` results.
///
/// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
/// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
/// until then. If there are errors in your request, you will see the failures only after you start iterating.
/// - Parameters:
///     - input: A `[DescribeConnectionsInput]` to start pagination
/// - Returns: An `AsyncSequence` that can iterate over `DescribeConnectionsOutputResponse`
extension DatabaseMigrationClient {
    public func describeConnectionsPaginated(input: DescribeConnectionsInput) -> ClientRuntime.PaginatorSequence<DescribeConnectionsInput, DescribeConnectionsOutputResponse> {
        return ClientRuntime.PaginatorSequence<DescribeConnectionsInput, DescribeConnectionsOutputResponse>(input: input, inputKey: \DescribeConnectionsInput.marker, outputKey: \DescribeConnectionsOutputResponse.marker, paginationFunction: self.describeConnections(input:))
    }
}

extension DescribeConnectionsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> DescribeConnectionsInput {
        return DescribeConnectionsInput(
            filters: self.filters,
            marker: token,
            maxRecords: self.maxRecords
        )}
}

/// Paginate over `[DescribeEndpointsOutputResponse]` results.
///
/// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
/// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
/// until then. If there are errors in your request, you will see the failures only after you start iterating.
/// - Parameters:
///     - input: A `[DescribeEndpointsInput]` to start pagination
/// - Returns: An `AsyncSequence` that can iterate over `DescribeEndpointsOutputResponse`
extension DatabaseMigrationClient {
    public func describeEndpointsPaginated(input: DescribeEndpointsInput) -> ClientRuntime.PaginatorSequence<DescribeEndpointsInput, DescribeEndpointsOutputResponse> {
        return ClientRuntime.PaginatorSequence<DescribeEndpointsInput, DescribeEndpointsOutputResponse>(input: input, inputKey: \DescribeEndpointsInput.marker, outputKey: \DescribeEndpointsOutputResponse.marker, paginationFunction: self.describeEndpoints(input:))
    }
}

extension DescribeEndpointsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> DescribeEndpointsInput {
        return DescribeEndpointsInput(
            filters: self.filters,
            marker: token,
            maxRecords: self.maxRecords
        )}
}

/// Paginate over `[DescribeEndpointSettingsOutputResponse]` results.
///
/// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
/// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
/// until then. If there are errors in your request, you will see the failures only after you start iterating.
/// - Parameters:
///     - input: A `[DescribeEndpointSettingsInput]` to start pagination
/// - Returns: An `AsyncSequence` that can iterate over `DescribeEndpointSettingsOutputResponse`
extension DatabaseMigrationClient {
    public func describeEndpointSettingsPaginated(input: DescribeEndpointSettingsInput) -> ClientRuntime.PaginatorSequence<DescribeEndpointSettingsInput, DescribeEndpointSettingsOutputResponse> {
        return ClientRuntime.PaginatorSequence<DescribeEndpointSettingsInput, DescribeEndpointSettingsOutputResponse>(input: input, inputKey: \DescribeEndpointSettingsInput.marker, outputKey: \DescribeEndpointSettingsOutputResponse.marker, paginationFunction: self.describeEndpointSettings(input:))
    }
}

extension DescribeEndpointSettingsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> DescribeEndpointSettingsInput {
        return DescribeEndpointSettingsInput(
            engineName: self.engineName,
            marker: token,
            maxRecords: self.maxRecords
        )}
}

/// Paginate over `[DescribeEndpointTypesOutputResponse]` results.
///
/// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
/// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
/// until then. If there are errors in your request, you will see the failures only after you start iterating.
/// - Parameters:
///     - input: A `[DescribeEndpointTypesInput]` to start pagination
/// - Returns: An `AsyncSequence` that can iterate over `DescribeEndpointTypesOutputResponse`
extension DatabaseMigrationClient {
    public func describeEndpointTypesPaginated(input: DescribeEndpointTypesInput) -> ClientRuntime.PaginatorSequence<DescribeEndpointTypesInput, DescribeEndpointTypesOutputResponse> {
        return ClientRuntime.PaginatorSequence<DescribeEndpointTypesInput, DescribeEndpointTypesOutputResponse>(input: input, inputKey: \DescribeEndpointTypesInput.marker, outputKey: \DescribeEndpointTypesOutputResponse.marker, paginationFunction: self.describeEndpointTypes(input:))
    }
}

extension DescribeEndpointTypesInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> DescribeEndpointTypesInput {
        return DescribeEndpointTypesInput(
            filters: self.filters,
            marker: token,
            maxRecords: self.maxRecords
        )}
}

/// Paginate over `[DescribeEventsOutputResponse]` results.
///
/// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
/// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
/// until then. If there are errors in your request, you will see the failures only after you start iterating.
/// - Parameters:
///     - input: A `[DescribeEventsInput]` to start pagination
/// - Returns: An `AsyncSequence` that can iterate over `DescribeEventsOutputResponse`
extension DatabaseMigrationClient {
    public func describeEventsPaginated(input: DescribeEventsInput) -> ClientRuntime.PaginatorSequence<DescribeEventsInput, DescribeEventsOutputResponse> {
        return ClientRuntime.PaginatorSequence<DescribeEventsInput, DescribeEventsOutputResponse>(input: input, inputKey: \DescribeEventsInput.marker, outputKey: \DescribeEventsOutputResponse.marker, paginationFunction: self.describeEvents(input:))
    }
}

extension DescribeEventsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> DescribeEventsInput {
        return DescribeEventsInput(
            duration: self.duration,
            endTime: self.endTime,
            eventCategories: self.eventCategories,
            filters: self.filters,
            marker: token,
            maxRecords: self.maxRecords,
            sourceIdentifier: self.sourceIdentifier,
            sourceType: self.sourceType,
            startTime: self.startTime
        )}
}

/// Paginate over `[DescribeEventSubscriptionsOutputResponse]` results.
///
/// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
/// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
/// until then. If there are errors in your request, you will see the failures only after you start iterating.
/// - Parameters:
///     - input: A `[DescribeEventSubscriptionsInput]` to start pagination
/// - Returns: An `AsyncSequence` that can iterate over `DescribeEventSubscriptionsOutputResponse`
extension DatabaseMigrationClient {
    public func describeEventSubscriptionsPaginated(input: DescribeEventSubscriptionsInput) -> ClientRuntime.PaginatorSequence<DescribeEventSubscriptionsInput, DescribeEventSubscriptionsOutputResponse> {
        return ClientRuntime.PaginatorSequence<DescribeEventSubscriptionsInput, DescribeEventSubscriptionsOutputResponse>(input: input, inputKey: \DescribeEventSubscriptionsInput.marker, outputKey: \DescribeEventSubscriptionsOutputResponse.marker, paginationFunction: self.describeEventSubscriptions(input:))
    }
}

extension DescribeEventSubscriptionsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> DescribeEventSubscriptionsInput {
        return DescribeEventSubscriptionsInput(
            filters: self.filters,
            marker: token,
            maxRecords: self.maxRecords,
            subscriptionName: self.subscriptionName
        )}
}

/// Paginate over `[DescribeFleetAdvisorCollectorsOutputResponse]` results.
///
/// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
/// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
/// until then. If there are errors in your request, you will see the failures only after you start iterating.
/// - Parameters:
///     - input: A `[DescribeFleetAdvisorCollectorsInput]` to start pagination
/// - Returns: An `AsyncSequence` that can iterate over `DescribeFleetAdvisorCollectorsOutputResponse`
extension DatabaseMigrationClient {
    public func describeFleetAdvisorCollectorsPaginated(input: DescribeFleetAdvisorCollectorsInput) -> ClientRuntime.PaginatorSequence<DescribeFleetAdvisorCollectorsInput, DescribeFleetAdvisorCollectorsOutputResponse> {
        return ClientRuntime.PaginatorSequence<DescribeFleetAdvisorCollectorsInput, DescribeFleetAdvisorCollectorsOutputResponse>(input: input, inputKey: \DescribeFleetAdvisorCollectorsInput.nextToken, outputKey: \DescribeFleetAdvisorCollectorsOutputResponse.nextToken, paginationFunction: self.describeFleetAdvisorCollectors(input:))
    }
}

extension DescribeFleetAdvisorCollectorsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> DescribeFleetAdvisorCollectorsInput {
        return DescribeFleetAdvisorCollectorsInput(
            filters: self.filters,
            maxRecords: self.maxRecords,
            nextToken: token
        )}
}

/// Paginate over `[DescribeFleetAdvisorDatabasesOutputResponse]` results.
///
/// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
/// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
/// until then. If there are errors in your request, you will see the failures only after you start iterating.
/// - Parameters:
///     - input: A `[DescribeFleetAdvisorDatabasesInput]` to start pagination
/// - Returns: An `AsyncSequence` that can iterate over `DescribeFleetAdvisorDatabasesOutputResponse`
extension DatabaseMigrationClient {
    public func describeFleetAdvisorDatabasesPaginated(input: DescribeFleetAdvisorDatabasesInput) -> ClientRuntime.PaginatorSequence<DescribeFleetAdvisorDatabasesInput, DescribeFleetAdvisorDatabasesOutputResponse> {
        return ClientRuntime.PaginatorSequence<DescribeFleetAdvisorDatabasesInput, DescribeFleetAdvisorDatabasesOutputResponse>(input: input, inputKey: \DescribeFleetAdvisorDatabasesInput.nextToken, outputKey: \DescribeFleetAdvisorDatabasesOutputResponse.nextToken, paginationFunction: self.describeFleetAdvisorDatabases(input:))
    }
}

extension DescribeFleetAdvisorDatabasesInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> DescribeFleetAdvisorDatabasesInput {
        return DescribeFleetAdvisorDatabasesInput(
            filters: self.filters,
            maxRecords: self.maxRecords,
            nextToken: token
        )}
}

/// Paginate over `[DescribeFleetAdvisorLsaAnalysisOutputResponse]` results.
///
/// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
/// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
/// until then. If there are errors in your request, you will see the failures only after you start iterating.
/// - Parameters:
///     - input: A `[DescribeFleetAdvisorLsaAnalysisInput]` to start pagination
/// - Returns: An `AsyncSequence` that can iterate over `DescribeFleetAdvisorLsaAnalysisOutputResponse`
extension DatabaseMigrationClient {
    public func describeFleetAdvisorLsaAnalysisPaginated(input: DescribeFleetAdvisorLsaAnalysisInput) -> ClientRuntime.PaginatorSequence<DescribeFleetAdvisorLsaAnalysisInput, DescribeFleetAdvisorLsaAnalysisOutputResponse> {
        return ClientRuntime.PaginatorSequence<DescribeFleetAdvisorLsaAnalysisInput, DescribeFleetAdvisorLsaAnalysisOutputResponse>(input: input, inputKey: \DescribeFleetAdvisorLsaAnalysisInput.nextToken, outputKey: \DescribeFleetAdvisorLsaAnalysisOutputResponse.nextToken, paginationFunction: self.describeFleetAdvisorLsaAnalysis(input:))
    }
}

extension DescribeFleetAdvisorLsaAnalysisInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> DescribeFleetAdvisorLsaAnalysisInput {
        return DescribeFleetAdvisorLsaAnalysisInput(
            maxRecords: self.maxRecords,
            nextToken: token
        )}
}

/// Paginate over `[DescribeFleetAdvisorSchemaObjectSummaryOutputResponse]` results.
///
/// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
/// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
/// until then. If there are errors in your request, you will see the failures only after you start iterating.
/// - Parameters:
///     - input: A `[DescribeFleetAdvisorSchemaObjectSummaryInput]` to start pagination
/// - Returns: An `AsyncSequence` that can iterate over `DescribeFleetAdvisorSchemaObjectSummaryOutputResponse`
extension DatabaseMigrationClient {
    public func describeFleetAdvisorSchemaObjectSummaryPaginated(input: DescribeFleetAdvisorSchemaObjectSummaryInput) -> ClientRuntime.PaginatorSequence<DescribeFleetAdvisorSchemaObjectSummaryInput, DescribeFleetAdvisorSchemaObjectSummaryOutputResponse> {
        return ClientRuntime.PaginatorSequence<DescribeFleetAdvisorSchemaObjectSummaryInput, DescribeFleetAdvisorSchemaObjectSummaryOutputResponse>(input: input, inputKey: \DescribeFleetAdvisorSchemaObjectSummaryInput.nextToken, outputKey: \DescribeFleetAdvisorSchemaObjectSummaryOutputResponse.nextToken, paginationFunction: self.describeFleetAdvisorSchemaObjectSummary(input:))
    }
}

extension DescribeFleetAdvisorSchemaObjectSummaryInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> DescribeFleetAdvisorSchemaObjectSummaryInput {
        return DescribeFleetAdvisorSchemaObjectSummaryInput(
            filters: self.filters,
            maxRecords: self.maxRecords,
            nextToken: token
        )}
}

/// Paginate over `[DescribeFleetAdvisorSchemasOutputResponse]` results.
///
/// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
/// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
/// until then. If there are errors in your request, you will see the failures only after you start iterating.
/// - Parameters:
///     - input: A `[DescribeFleetAdvisorSchemasInput]` to start pagination
/// - Returns: An `AsyncSequence` that can iterate over `DescribeFleetAdvisorSchemasOutputResponse`
extension DatabaseMigrationClient {
    public func describeFleetAdvisorSchemasPaginated(input: DescribeFleetAdvisorSchemasInput) -> ClientRuntime.PaginatorSequence<DescribeFleetAdvisorSchemasInput, DescribeFleetAdvisorSchemasOutputResponse> {
        return ClientRuntime.PaginatorSequence<DescribeFleetAdvisorSchemasInput, DescribeFleetAdvisorSchemasOutputResponse>(input: input, inputKey: \DescribeFleetAdvisorSchemasInput.nextToken, outputKey: \DescribeFleetAdvisorSchemasOutputResponse.nextToken, paginationFunction: self.describeFleetAdvisorSchemas(input:))
    }
}

extension DescribeFleetAdvisorSchemasInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> DescribeFleetAdvisorSchemasInput {
        return DescribeFleetAdvisorSchemasInput(
            filters: self.filters,
            maxRecords: self.maxRecords,
            nextToken: token
        )}
}

/// Paginate over `[DescribeOrderableReplicationInstancesOutputResponse]` results.
///
/// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
/// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
/// until then. If there are errors in your request, you will see the failures only after you start iterating.
/// - Parameters:
///     - input: A `[DescribeOrderableReplicationInstancesInput]` to start pagination
/// - Returns: An `AsyncSequence` that can iterate over `DescribeOrderableReplicationInstancesOutputResponse`
extension DatabaseMigrationClient {
    public func describeOrderableReplicationInstancesPaginated(input: DescribeOrderableReplicationInstancesInput) -> ClientRuntime.PaginatorSequence<DescribeOrderableReplicationInstancesInput, DescribeOrderableReplicationInstancesOutputResponse> {
        return ClientRuntime.PaginatorSequence<DescribeOrderableReplicationInstancesInput, DescribeOrderableReplicationInstancesOutputResponse>(input: input, inputKey: \DescribeOrderableReplicationInstancesInput.marker, outputKey: \DescribeOrderableReplicationInstancesOutputResponse.marker, paginationFunction: self.describeOrderableReplicationInstances(input:))
    }
}

extension DescribeOrderableReplicationInstancesInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> DescribeOrderableReplicationInstancesInput {
        return DescribeOrderableReplicationInstancesInput(
            marker: token,
            maxRecords: self.maxRecords
        )}
}

/// Paginate over `[DescribePendingMaintenanceActionsOutputResponse]` results.
///
/// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
/// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
/// until then. If there are errors in your request, you will see the failures only after you start iterating.
/// - Parameters:
///     - input: A `[DescribePendingMaintenanceActionsInput]` to start pagination
/// - Returns: An `AsyncSequence` that can iterate over `DescribePendingMaintenanceActionsOutputResponse`
extension DatabaseMigrationClient {
    public func describePendingMaintenanceActionsPaginated(input: DescribePendingMaintenanceActionsInput) -> ClientRuntime.PaginatorSequence<DescribePendingMaintenanceActionsInput, DescribePendingMaintenanceActionsOutputResponse> {
        return ClientRuntime.PaginatorSequence<DescribePendingMaintenanceActionsInput, DescribePendingMaintenanceActionsOutputResponse>(input: input, inputKey: \DescribePendingMaintenanceActionsInput.marker, outputKey: \DescribePendingMaintenanceActionsOutputResponse.marker, paginationFunction: self.describePendingMaintenanceActions(input:))
    }
}

extension DescribePendingMaintenanceActionsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> DescribePendingMaintenanceActionsInput {
        return DescribePendingMaintenanceActionsInput(
            filters: self.filters,
            marker: token,
            maxRecords: self.maxRecords,
            replicationInstanceArn: self.replicationInstanceArn
        )}
}

/// Paginate over `[DescribeReplicationInstancesOutputResponse]` results.
///
/// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
/// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
/// until then. If there are errors in your request, you will see the failures only after you start iterating.
/// - Parameters:
///     - input: A `[DescribeReplicationInstancesInput]` to start pagination
/// - Returns: An `AsyncSequence` that can iterate over `DescribeReplicationInstancesOutputResponse`
extension DatabaseMigrationClient {
    public func describeReplicationInstancesPaginated(input: DescribeReplicationInstancesInput) -> ClientRuntime.PaginatorSequence<DescribeReplicationInstancesInput, DescribeReplicationInstancesOutputResponse> {
        return ClientRuntime.PaginatorSequence<DescribeReplicationInstancesInput, DescribeReplicationInstancesOutputResponse>(input: input, inputKey: \DescribeReplicationInstancesInput.marker, outputKey: \DescribeReplicationInstancesOutputResponse.marker, paginationFunction: self.describeReplicationInstances(input:))
    }
}

extension DescribeReplicationInstancesInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> DescribeReplicationInstancesInput {
        return DescribeReplicationInstancesInput(
            filters: self.filters,
            marker: token,
            maxRecords: self.maxRecords
        )}
}

/// Paginate over `[DescribeReplicationInstanceTaskLogsOutputResponse]` results.
///
/// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
/// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
/// until then. If there are errors in your request, you will see the failures only after you start iterating.
/// - Parameters:
///     - input: A `[DescribeReplicationInstanceTaskLogsInput]` to start pagination
/// - Returns: An `AsyncSequence` that can iterate over `DescribeReplicationInstanceTaskLogsOutputResponse`
extension DatabaseMigrationClient {
    public func describeReplicationInstanceTaskLogsPaginated(input: DescribeReplicationInstanceTaskLogsInput) -> ClientRuntime.PaginatorSequence<DescribeReplicationInstanceTaskLogsInput, DescribeReplicationInstanceTaskLogsOutputResponse> {
        return ClientRuntime.PaginatorSequence<DescribeReplicationInstanceTaskLogsInput, DescribeReplicationInstanceTaskLogsOutputResponse>(input: input, inputKey: \DescribeReplicationInstanceTaskLogsInput.marker, outputKey: \DescribeReplicationInstanceTaskLogsOutputResponse.marker, paginationFunction: self.describeReplicationInstanceTaskLogs(input:))
    }
}

extension DescribeReplicationInstanceTaskLogsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> DescribeReplicationInstanceTaskLogsInput {
        return DescribeReplicationInstanceTaskLogsInput(
            marker: token,
            maxRecords: self.maxRecords,
            replicationInstanceArn: self.replicationInstanceArn
        )}
}

/// Paginate over `[DescribeReplicationSubnetGroupsOutputResponse]` results.
///
/// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
/// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
/// until then. If there are errors in your request, you will see the failures only after you start iterating.
/// - Parameters:
///     - input: A `[DescribeReplicationSubnetGroupsInput]` to start pagination
/// - Returns: An `AsyncSequence` that can iterate over `DescribeReplicationSubnetGroupsOutputResponse`
extension DatabaseMigrationClient {
    public func describeReplicationSubnetGroupsPaginated(input: DescribeReplicationSubnetGroupsInput) -> ClientRuntime.PaginatorSequence<DescribeReplicationSubnetGroupsInput, DescribeReplicationSubnetGroupsOutputResponse> {
        return ClientRuntime.PaginatorSequence<DescribeReplicationSubnetGroupsInput, DescribeReplicationSubnetGroupsOutputResponse>(input: input, inputKey: \DescribeReplicationSubnetGroupsInput.marker, outputKey: \DescribeReplicationSubnetGroupsOutputResponse.marker, paginationFunction: self.describeReplicationSubnetGroups(input:))
    }
}

extension DescribeReplicationSubnetGroupsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> DescribeReplicationSubnetGroupsInput {
        return DescribeReplicationSubnetGroupsInput(
            filters: self.filters,
            marker: token,
            maxRecords: self.maxRecords
        )}
}

/// Paginate over `[DescribeReplicationTaskAssessmentResultsOutputResponse]` results.
///
/// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
/// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
/// until then. If there are errors in your request, you will see the failures only after you start iterating.
/// - Parameters:
///     - input: A `[DescribeReplicationTaskAssessmentResultsInput]` to start pagination
/// - Returns: An `AsyncSequence` that can iterate over `DescribeReplicationTaskAssessmentResultsOutputResponse`
extension DatabaseMigrationClient {
    public func describeReplicationTaskAssessmentResultsPaginated(input: DescribeReplicationTaskAssessmentResultsInput) -> ClientRuntime.PaginatorSequence<DescribeReplicationTaskAssessmentResultsInput, DescribeReplicationTaskAssessmentResultsOutputResponse> {
        return ClientRuntime.PaginatorSequence<DescribeReplicationTaskAssessmentResultsInput, DescribeReplicationTaskAssessmentResultsOutputResponse>(input: input, inputKey: \DescribeReplicationTaskAssessmentResultsInput.marker, outputKey: \DescribeReplicationTaskAssessmentResultsOutputResponse.marker, paginationFunction: self.describeReplicationTaskAssessmentResults(input:))
    }
}

extension DescribeReplicationTaskAssessmentResultsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> DescribeReplicationTaskAssessmentResultsInput {
        return DescribeReplicationTaskAssessmentResultsInput(
            marker: token,
            maxRecords: self.maxRecords,
            replicationTaskArn: self.replicationTaskArn
        )}
}

/// Paginate over `[DescribeReplicationTaskAssessmentRunsOutputResponse]` results.
///
/// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
/// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
/// until then. If there are errors in your request, you will see the failures only after you start iterating.
/// - Parameters:
///     - input: A `[DescribeReplicationTaskAssessmentRunsInput]` to start pagination
/// - Returns: An `AsyncSequence` that can iterate over `DescribeReplicationTaskAssessmentRunsOutputResponse`
extension DatabaseMigrationClient {
    public func describeReplicationTaskAssessmentRunsPaginated(input: DescribeReplicationTaskAssessmentRunsInput) -> ClientRuntime.PaginatorSequence<DescribeReplicationTaskAssessmentRunsInput, DescribeReplicationTaskAssessmentRunsOutputResponse> {
        return ClientRuntime.PaginatorSequence<DescribeReplicationTaskAssessmentRunsInput, DescribeReplicationTaskAssessmentRunsOutputResponse>(input: input, inputKey: \DescribeReplicationTaskAssessmentRunsInput.marker, outputKey: \DescribeReplicationTaskAssessmentRunsOutputResponse.marker, paginationFunction: self.describeReplicationTaskAssessmentRuns(input:))
    }
}

extension DescribeReplicationTaskAssessmentRunsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> DescribeReplicationTaskAssessmentRunsInput {
        return DescribeReplicationTaskAssessmentRunsInput(
            filters: self.filters,
            marker: token,
            maxRecords: self.maxRecords
        )}
}

/// Paginate over `[DescribeReplicationTaskIndividualAssessmentsOutputResponse]` results.
///
/// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
/// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
/// until then. If there are errors in your request, you will see the failures only after you start iterating.
/// - Parameters:
///     - input: A `[DescribeReplicationTaskIndividualAssessmentsInput]` to start pagination
/// - Returns: An `AsyncSequence` that can iterate over `DescribeReplicationTaskIndividualAssessmentsOutputResponse`
extension DatabaseMigrationClient {
    public func describeReplicationTaskIndividualAssessmentsPaginated(input: DescribeReplicationTaskIndividualAssessmentsInput) -> ClientRuntime.PaginatorSequence<DescribeReplicationTaskIndividualAssessmentsInput, DescribeReplicationTaskIndividualAssessmentsOutputResponse> {
        return ClientRuntime.PaginatorSequence<DescribeReplicationTaskIndividualAssessmentsInput, DescribeReplicationTaskIndividualAssessmentsOutputResponse>(input: input, inputKey: \DescribeReplicationTaskIndividualAssessmentsInput.marker, outputKey: \DescribeReplicationTaskIndividualAssessmentsOutputResponse.marker, paginationFunction: self.describeReplicationTaskIndividualAssessments(input:))
    }
}

extension DescribeReplicationTaskIndividualAssessmentsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> DescribeReplicationTaskIndividualAssessmentsInput {
        return DescribeReplicationTaskIndividualAssessmentsInput(
            filters: self.filters,
            marker: token,
            maxRecords: self.maxRecords
        )}
}

/// Paginate over `[DescribeReplicationTasksOutputResponse]` results.
///
/// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
/// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
/// until then. If there are errors in your request, you will see the failures only after you start iterating.
/// - Parameters:
///     - input: A `[DescribeReplicationTasksInput]` to start pagination
/// - Returns: An `AsyncSequence` that can iterate over `DescribeReplicationTasksOutputResponse`
extension DatabaseMigrationClient {
    public func describeReplicationTasksPaginated(input: DescribeReplicationTasksInput) -> ClientRuntime.PaginatorSequence<DescribeReplicationTasksInput, DescribeReplicationTasksOutputResponse> {
        return ClientRuntime.PaginatorSequence<DescribeReplicationTasksInput, DescribeReplicationTasksOutputResponse>(input: input, inputKey: \DescribeReplicationTasksInput.marker, outputKey: \DescribeReplicationTasksOutputResponse.marker, paginationFunction: self.describeReplicationTasks(input:))
    }
}

extension DescribeReplicationTasksInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> DescribeReplicationTasksInput {
        return DescribeReplicationTasksInput(
            filters: self.filters,
            marker: token,
            maxRecords: self.maxRecords,
            withoutSettings: self.withoutSettings
        )}
}

/// Paginate over `[DescribeSchemasOutputResponse]` results.
///
/// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
/// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
/// until then. If there are errors in your request, you will see the failures only after you start iterating.
/// - Parameters:
///     - input: A `[DescribeSchemasInput]` to start pagination
/// - Returns: An `AsyncSequence` that can iterate over `DescribeSchemasOutputResponse`
extension DatabaseMigrationClient {
    public func describeSchemasPaginated(input: DescribeSchemasInput) -> ClientRuntime.PaginatorSequence<DescribeSchemasInput, DescribeSchemasOutputResponse> {
        return ClientRuntime.PaginatorSequence<DescribeSchemasInput, DescribeSchemasOutputResponse>(input: input, inputKey: \DescribeSchemasInput.marker, outputKey: \DescribeSchemasOutputResponse.marker, paginationFunction: self.describeSchemas(input:))
    }
}

extension DescribeSchemasInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> DescribeSchemasInput {
        return DescribeSchemasInput(
            endpointArn: self.endpointArn,
            marker: token,
            maxRecords: self.maxRecords
        )}
}

/// Paginate over `[DescribeTableStatisticsOutputResponse]` results.
///
/// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
/// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
/// until then. If there are errors in your request, you will see the failures only after you start iterating.
/// - Parameters:
///     - input: A `[DescribeTableStatisticsInput]` to start pagination
/// - Returns: An `AsyncSequence` that can iterate over `DescribeTableStatisticsOutputResponse`
extension DatabaseMigrationClient {
    public func describeTableStatisticsPaginated(input: DescribeTableStatisticsInput) -> ClientRuntime.PaginatorSequence<DescribeTableStatisticsInput, DescribeTableStatisticsOutputResponse> {
        return ClientRuntime.PaginatorSequence<DescribeTableStatisticsInput, DescribeTableStatisticsOutputResponse>(input: input, inputKey: \DescribeTableStatisticsInput.marker, outputKey: \DescribeTableStatisticsOutputResponse.marker, paginationFunction: self.describeTableStatistics(input:))
    }
}

extension DescribeTableStatisticsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> DescribeTableStatisticsInput {
        return DescribeTableStatisticsInput(
            filters: self.filters,
            marker: token,
            maxRecords: self.maxRecords,
            replicationTaskArn: self.replicationTaskArn
        )}
}
