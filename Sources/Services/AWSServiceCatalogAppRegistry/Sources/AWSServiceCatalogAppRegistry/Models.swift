//
// Copyright Amazon.com Inc. or its affiliates.
// All Rights Reserved.
//
// SPDX-License-Identifier: Apache-2.0
//

// Code generated by smithy-swift-codegen. DO NOT EDIT!

@_spi(SmithyReadWrite) import ClientRuntime
import Foundation
import class SmithyHTTPAPI.HTTPResponse
@_spi(SmithyReadWrite) import class SmithyJSON.Reader
@_spi(SmithyReadWrite) import class SmithyJSON.Writer
import enum ClientRuntime.ErrorFault
import enum Smithy.ClientError
import enum SmithyReadWrite.ReaderError
@_spi(SmithyReadWrite) import enum SmithyReadWrite.ReadingClosures
@_spi(SmithyReadWrite) import enum SmithyReadWrite.WritingClosures
@_spi(SmithyTimestamps) import enum SmithyTimestamps.TimestampFormat
import protocol AWSClientRuntime.AWSServiceError
import protocol ClientRuntime.HTTPError
import protocol ClientRuntime.ModeledError
@_spi(SmithyReadWrite) import protocol SmithyReadWrite.SmithyReader
@_spi(SmithyReadWrite) import protocol SmithyReadWrite.SmithyWriter
@_spi(SmithyReadWrite) import struct AWSClientRuntime.RestJSONError
@_spi(UnknownAWSHTTPServiceError) import struct AWSClientRuntime.UnknownAWSHTTPServiceError
import struct Smithy.URIQueryItem
@_spi(SmithyReadWrite) import struct SmithyReadWrite.ReadingClosureBox
@_spi(SmithyReadWrite) import struct SmithyReadWrite.WritingClosureBox

public struct GetConfigurationInput {

    public init() { }
}

public struct PutConfigurationOutput {

    public init() { }
}

extension ServiceCatalogAppRegistryClientTypes {
    /// Represents a Amazon Web Services Service Catalog AppRegistry application that is the top-level node in a hierarchy of related cloud resource abstractions.
    public struct Application {
        /// A key-value pair that identifies an associated resource.
        public var applicationTag: [Swift.String: Swift.String]?
        /// The Amazon resource name (ARN) that specifies the application across services.
        public var arn: Swift.String?
        /// The ISO-8601 formatted timestamp of the moment when the application was created.
        public var creationTime: Foundation.Date?
        /// The description of the application.
        public var description: Swift.String?
        /// The identifier of the application.
        public var id: Swift.String?
        /// The ISO-8601 formatted timestamp of the moment when the application was last updated.
        public var lastUpdateTime: Foundation.Date?
        /// The name of the application. The name must be unique in the region in which you are creating the application.
        public var name: Swift.String?
        /// Key-value pairs you can use to associate with the application.
        public var tags: [Swift.String: Swift.String]?

        public init(
            applicationTag: [Swift.String: Swift.String]? = nil,
            arn: Swift.String? = nil,
            creationTime: Foundation.Date? = nil,
            description: Swift.String? = nil,
            id: Swift.String? = nil,
            lastUpdateTime: Foundation.Date? = nil,
            name: Swift.String? = nil,
            tags: [Swift.String: Swift.String]? = nil
        )
        {
            self.applicationTag = applicationTag
            self.arn = arn
            self.creationTime = creationTime
            self.description = description
            self.id = id
            self.lastUpdateTime = lastUpdateTime
            self.name = name
            self.tags = tags
        }
    }

}

extension ServiceCatalogAppRegistryClientTypes {
    /// Summary of a Amazon Web Services Service Catalog AppRegistry application.
    public struct ApplicationSummary {
        /// The Amazon resource name (ARN) that specifies the application across services.
        public var arn: Swift.String?
        /// The ISO-8601 formatted timestamp of the moment when the application was created.
        public var creationTime: Foundation.Date?
        /// The description of the application.
        public var description: Swift.String?
        /// The identifier of the application.
        public var id: Swift.String?
        /// The ISO-8601 formatted timestamp of the moment when the application was last updated.
        public var lastUpdateTime: Foundation.Date?
        /// The name of the application. The name must be unique in the region in which you are creating the application.
        public var name: Swift.String?

        public init(
            arn: Swift.String? = nil,
            creationTime: Foundation.Date? = nil,
            description: Swift.String? = nil,
            id: Swift.String? = nil,
            lastUpdateTime: Foundation.Date? = nil,
            name: Swift.String? = nil
        )
        {
            self.arn = arn
            self.creationTime = creationTime
            self.description = description
            self.id = id
            self.lastUpdateTime = lastUpdateTime
            self.name = name
        }
    }

}

extension ServiceCatalogAppRegistryClientTypes {

    public enum ApplicationTagStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case failure
        case inProgress
        case success
        case sdkUnknown(Swift.String)

        public static var allCases: [ApplicationTagStatus] {
            return [
                .failure,
                .inProgress,
                .success
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .failure: return "FAILURE"
            case .inProgress: return "IN_PROGRESS"
            case .success: return "SUCCESS"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension ServiceCatalogAppRegistryClientTypes {
    /// The resource in a list of resources.
    public struct ResourcesListItem {
        /// The message returned if the call fails.
        public var errorMessage: Swift.String?
        /// The Amazon resource name (ARN) of the resource.
        public var resourceArn: Swift.String?
        /// Provides information about the AppRegistry resource type.
        public var resourceType: Swift.String?
        /// The status of the list item.
        public var status: Swift.String?

        public init(
            errorMessage: Swift.String? = nil,
            resourceArn: Swift.String? = nil,
            resourceType: Swift.String? = nil,
            status: Swift.String? = nil
        )
        {
            self.errorMessage = errorMessage
            self.resourceArn = resourceArn
            self.resourceType = resourceType
            self.status = status
        }
    }

}

extension ServiceCatalogAppRegistryClientTypes {
    /// The result of the application tag that's applied to a resource.
    public struct ApplicationTagResult {
        /// The application tag is in the process of being applied to a resource, was successfully applied to a resource, or failed to apply to a resource.
        public var applicationTagStatus: ServiceCatalogAppRegistryClientTypes.ApplicationTagStatus?
        /// The message returned if the call fails.
        public var errorMessage: Swift.String?
        /// A unique pagination token for each page of results. Make the call again with the returned token to retrieve the next page of results.
        public var nextToken: Swift.String?
        /// The resources associated with an application
        public var resources: [ServiceCatalogAppRegistryClientTypes.ResourcesListItem]?

        public init(
            applicationTagStatus: ServiceCatalogAppRegistryClientTypes.ApplicationTagStatus? = nil,
            errorMessage: Swift.String? = nil,
            nextToken: Swift.String? = nil,
            resources: [ServiceCatalogAppRegistryClientTypes.ResourcesListItem]? = nil
        )
        {
            self.applicationTagStatus = applicationTagStatus
            self.errorMessage = errorMessage
            self.nextToken = nextToken
            self.resources = resources
        }
    }

}

extension ServiceCatalogAppRegistryClientTypes {
    /// The definition of tagQuery. Specifies which resources are associated with an application.
    public struct TagQueryConfiguration {
        /// Condition in the IAM policy that associates resources to an application.
        public var tagKey: Swift.String?

        public init(
            tagKey: Swift.String? = nil
        )
        {
            self.tagKey = tagKey
        }
    }

}

extension ServiceCatalogAppRegistryClientTypes {
    /// Includes all of the AppRegistry settings.
    public struct AppRegistryConfiguration {
        /// Includes the definition of a tagQuery.
        public var tagQueryConfiguration: ServiceCatalogAppRegistryClientTypes.TagQueryConfiguration?

        public init(
            tagQueryConfiguration: ServiceCatalogAppRegistryClientTypes.TagQueryConfiguration? = nil
        )
        {
            self.tagQueryConfiguration = tagQueryConfiguration
        }
    }

}

/// There was a conflict when processing the request (for example, a resource with the given name already exists within the account).
public struct ConflictException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ConflictException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The service is experiencing internal problems.
public struct InternalServerException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InternalServerException" }
    public static var fault: ClientRuntime.ErrorFault { .server }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The specified resource does not exist.
public struct ResourceNotFoundException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ResourceNotFoundException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The maximum number of resources per account has been reached.
public struct ServiceQuotaExceededException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ServiceQuotaExceededException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The request has invalid or missing parameters.
public struct ValidationException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ValidationException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

public struct AssociateAttributeGroupInput {
    /// The name, ID, or ARN of the application.
    /// This member is required.
    public var application: Swift.String?
    /// The name, ID, or ARN of the attribute group that holds the attributes to describe the application.
    /// This member is required.
    public var attributeGroup: Swift.String?

    public init(
        application: Swift.String? = nil,
        attributeGroup: Swift.String? = nil
    )
    {
        self.application = application
        self.attributeGroup = attributeGroup
    }
}

public struct AssociateAttributeGroupOutput {
    /// The Amazon resource name (ARN) of the application that was augmented with attributes.
    public var applicationArn: Swift.String?
    /// The Amazon resource name (ARN) of the attribute group that contains the application's new attributes.
    public var attributeGroupArn: Swift.String?

    public init(
        applicationArn: Swift.String? = nil,
        attributeGroupArn: Swift.String? = nil
    )
    {
        self.applicationArn = applicationArn
        self.attributeGroupArn = attributeGroupArn
    }
}

/// The maximum number of API requests has been exceeded.
public struct ThrottlingException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// A message associated with the Throttling exception.
        /// This member is required.
        public internal(set) var message: Swift.String? = nil
        /// The originating service code.
        public internal(set) var serviceCode: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ThrottlingException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil,
        serviceCode: Swift.String? = nil
    )
    {
        self.properties.message = message
        self.properties.serviceCode = serviceCode
    }
}

extension ServiceCatalogAppRegistryClientTypes {

    public enum AssociationOption: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case applyApplicationTag
        case skipApplicationTag
        case sdkUnknown(Swift.String)

        public static var allCases: [AssociationOption] {
            return [
                .applyApplicationTag,
                .skipApplicationTag
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .applyApplicationTag: return "APPLY_APPLICATION_TAG"
            case .skipApplicationTag: return "SKIP_APPLICATION_TAG"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension ServiceCatalogAppRegistryClientTypes {

    public enum ResourceType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case cfnStack
        case resourceTagValue
        case sdkUnknown(Swift.String)

        public static var allCases: [ResourceType] {
            return [
                .cfnStack,
                .resourceTagValue
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .cfnStack: return "CFN_STACK"
            case .resourceTagValue: return "RESOURCE_TAG_VALUE"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

public struct AssociateResourceInput {
    /// The name, ID, or ARN of the application.
    /// This member is required.
    public var application: Swift.String?
    /// Determines whether an application tag is applied or skipped.
    public var options: [ServiceCatalogAppRegistryClientTypes.AssociationOption]?
    /// The name or ID of the resource of which the application will be associated.
    /// This member is required.
    public var resource: Swift.String?
    /// The type of resource of which the application will be associated.
    /// This member is required.
    public var resourceType: ServiceCatalogAppRegistryClientTypes.ResourceType?

    public init(
        application: Swift.String? = nil,
        options: [ServiceCatalogAppRegistryClientTypes.AssociationOption]? = nil,
        resource: Swift.String? = nil,
        resourceType: ServiceCatalogAppRegistryClientTypes.ResourceType? = nil
    )
    {
        self.application = application
        self.options = options
        self.resource = resource
        self.resourceType = resourceType
    }
}

public struct AssociateResourceOutput {
    /// The Amazon resource name (ARN) of the application that was augmented with attributes.
    public var applicationArn: Swift.String?
    /// Determines whether an application tag is applied or skipped.
    public var options: [ServiceCatalogAppRegistryClientTypes.AssociationOption]?
    /// The Amazon resource name (ARN) that specifies the resource.
    public var resourceArn: Swift.String?

    public init(
        applicationArn: Swift.String? = nil,
        options: [ServiceCatalogAppRegistryClientTypes.AssociationOption]? = nil,
        resourceArn: Swift.String? = nil
    )
    {
        self.applicationArn = applicationArn
        self.options = options
        self.resourceArn = resourceArn
    }
}

extension ServiceCatalogAppRegistryClientTypes {
    /// Represents a Amazon Web Services Service Catalog AppRegistry attribute group that is rich metadata which describes an application and its components.
    public struct AttributeGroup {
        /// The Amazon resource name (ARN) that specifies the attribute group across services.
        public var arn: Swift.String?
        /// The ISO-8601 formatted timestamp of the moment the attribute group was created.
        public var creationTime: Foundation.Date?
        /// The description of the attribute group that the user provides.
        public var description: Swift.String?
        /// The globally unique attribute group identifier of the attribute group.
        public var id: Swift.String?
        /// The ISO-8601 formatted timestamp of the moment the attribute group was last updated. This time is the same as the creationTime for a newly created attribute group.
        public var lastUpdateTime: Foundation.Date?
        /// The name of the attribute group.
        public var name: Swift.String?
        /// Key-value pairs you can use to associate with the attribute group.
        public var tags: [Swift.String: Swift.String]?

        public init(
            arn: Swift.String? = nil,
            creationTime: Foundation.Date? = nil,
            description: Swift.String? = nil,
            id: Swift.String? = nil,
            lastUpdateTime: Foundation.Date? = nil,
            name: Swift.String? = nil,
            tags: [Swift.String: Swift.String]? = nil
        )
        {
            self.arn = arn
            self.creationTime = creationTime
            self.description = description
            self.id = id
            self.lastUpdateTime = lastUpdateTime
            self.name = name
            self.tags = tags
        }
    }

}

extension ServiceCatalogAppRegistryClientTypes {
    /// The details related to a specific AttributeGroup.
    public struct AttributeGroupDetails {
        /// The Amazon resource name (ARN) that specifies the attribute group.
        public var arn: Swift.String?
        /// The service principal that created the attribute group.
        public var createdBy: Swift.String?
        /// The unique identifier of the attribute group.
        public var id: Swift.String?
        /// This field is no longer supported. We recommend you don't use the field when using ListAttributeGroupsForApplication. The name of the attribute group.
        public var name: Swift.String?

        public init(
            arn: Swift.String? = nil,
            createdBy: Swift.String? = nil,
            id: Swift.String? = nil,
            name: Swift.String? = nil
        )
        {
            self.arn = arn
            self.createdBy = createdBy
            self.id = id
            self.name = name
        }
    }

}

extension ServiceCatalogAppRegistryClientTypes {
    /// Summary of a Amazon Web Services Service Catalog AppRegistry attribute group.
    public struct AttributeGroupSummary {
        /// The Amazon resource name (ARN) that specifies the attribute group across services.
        public var arn: Swift.String?
        /// The service principal that created the attribute group.
        public var createdBy: Swift.String?
        /// The ISO-8601 formatted timestamp of the moment the attribute group was created.
        public var creationTime: Foundation.Date?
        /// The description of the attribute group that the user provides.
        public var description: Swift.String?
        /// The globally unique attribute group identifier of the attribute group.
        public var id: Swift.String?
        /// The ISO-8601 formatted timestamp of the moment the attribute group was last updated. This time is the same as the creationTime for a newly created attribute group.
        public var lastUpdateTime: Foundation.Date?
        /// The name of the attribute group.
        public var name: Swift.String?

        public init(
            arn: Swift.String? = nil,
            createdBy: Swift.String? = nil,
            creationTime: Foundation.Date? = nil,
            description: Swift.String? = nil,
            id: Swift.String? = nil,
            lastUpdateTime: Foundation.Date? = nil,
            name: Swift.String? = nil
        )
        {
            self.arn = arn
            self.createdBy = createdBy
            self.creationTime = creationTime
            self.description = description
            self.id = id
            self.lastUpdateTime = lastUpdateTime
            self.name = name
        }
    }

}

public struct CreateApplicationInput {
    /// A unique identifier that you provide to ensure idempotency. If you retry a request that completed successfully using the same client token and the same parameters, the retry succeeds without performing any further actions. If you retry a successful request using the same client token, but one or more of the parameters are different, the retry fails.
    /// This member is required.
    public var clientToken: Swift.String?
    /// The description of the application.
    public var description: Swift.String?
    /// The name of the application. The name must be unique in the region in which you are creating the application.
    /// This member is required.
    public var name: Swift.String?
    /// Key-value pairs you can use to associate with the application.
    public var tags: [Swift.String: Swift.String]?

    public init(
        clientToken: Swift.String? = nil,
        description: Swift.String? = nil,
        name: Swift.String? = nil,
        tags: [Swift.String: Swift.String]? = nil
    )
    {
        self.clientToken = clientToken
        self.description = description
        self.name = name
        self.tags = tags
    }
}

public struct CreateApplicationOutput {
    /// Information about the application.
    public var application: ServiceCatalogAppRegistryClientTypes.Application?

    public init(
        application: ServiceCatalogAppRegistryClientTypes.Application? = nil
    )
    {
        self.application = application
    }
}

public struct CreateAttributeGroupInput {
    /// A JSON string in the form of nested key-value pairs that represent the attributes in the group and describes an application and its components.
    /// This member is required.
    public var attributes: Swift.String?
    /// A unique identifier that you provide to ensure idempotency. If you retry a request that completed successfully using the same client token and the same parameters, the retry succeeds without performing any further actions. If you retry a successful request using the same client token, but one or more of the parameters are different, the retry fails.
    /// This member is required.
    public var clientToken: Swift.String?
    /// The description of the attribute group that the user provides.
    public var description: Swift.String?
    /// The name of the attribute group.
    /// This member is required.
    public var name: Swift.String?
    /// Key-value pairs you can use to associate with the attribute group.
    public var tags: [Swift.String: Swift.String]?

    public init(
        attributes: Swift.String? = nil,
        clientToken: Swift.String? = nil,
        description: Swift.String? = nil,
        name: Swift.String? = nil,
        tags: [Swift.String: Swift.String]? = nil
    )
    {
        self.attributes = attributes
        self.clientToken = clientToken
        self.description = description
        self.name = name
        self.tags = tags
    }
}

public struct CreateAttributeGroupOutput {
    /// Information about the attribute group.
    public var attributeGroup: ServiceCatalogAppRegistryClientTypes.AttributeGroup?

    public init(
        attributeGroup: ServiceCatalogAppRegistryClientTypes.AttributeGroup? = nil
    )
    {
        self.attributeGroup = attributeGroup
    }
}

public struct DeleteApplicationInput {
    /// The name, ID, or ARN of the application.
    /// This member is required.
    public var application: Swift.String?

    public init(
        application: Swift.String? = nil
    )
    {
        self.application = application
    }
}

public struct DeleteApplicationOutput {
    /// Information about the deleted application.
    public var application: ServiceCatalogAppRegistryClientTypes.ApplicationSummary?

    public init(
        application: ServiceCatalogAppRegistryClientTypes.ApplicationSummary? = nil
    )
    {
        self.application = application
    }
}

public struct DeleteAttributeGroupInput {
    /// The name, ID, or ARN of the attribute group that holds the attributes to describe the application.
    /// This member is required.
    public var attributeGroup: Swift.String?

    public init(
        attributeGroup: Swift.String? = nil
    )
    {
        self.attributeGroup = attributeGroup
    }
}

public struct DeleteAttributeGroupOutput {
    /// Information about the deleted attribute group.
    public var attributeGroup: ServiceCatalogAppRegistryClientTypes.AttributeGroupSummary?

    public init(
        attributeGroup: ServiceCatalogAppRegistryClientTypes.AttributeGroupSummary? = nil
    )
    {
        self.attributeGroup = attributeGroup
    }
}

public struct DisassociateAttributeGroupInput {
    /// The name, ID, or ARN of the application.
    /// This member is required.
    public var application: Swift.String?
    /// The name, ID, or ARN of the attribute group that holds the attributes to describe the application.
    /// This member is required.
    public var attributeGroup: Swift.String?

    public init(
        application: Swift.String? = nil,
        attributeGroup: Swift.String? = nil
    )
    {
        self.application = application
        self.attributeGroup = attributeGroup
    }
}

public struct DisassociateAttributeGroupOutput {
    /// The Amazon resource name (ARN) that specifies the application.
    public var applicationArn: Swift.String?
    /// The Amazon resource name (ARN) that specifies the attribute group.
    public var attributeGroupArn: Swift.String?

    public init(
        applicationArn: Swift.String? = nil,
        attributeGroupArn: Swift.String? = nil
    )
    {
        self.applicationArn = applicationArn
        self.attributeGroupArn = attributeGroupArn
    }
}

public struct DisassociateResourceInput {
    /// The name or ID of the application.
    /// This member is required.
    public var application: Swift.String?
    /// The name or ID of the resource.
    /// This member is required.
    public var resource: Swift.String?
    /// The type of the resource that is being disassociated.
    /// This member is required.
    public var resourceType: ServiceCatalogAppRegistryClientTypes.ResourceType?

    public init(
        application: Swift.String? = nil,
        resource: Swift.String? = nil,
        resourceType: ServiceCatalogAppRegistryClientTypes.ResourceType? = nil
    )
    {
        self.application = application
        self.resource = resource
        self.resourceType = resourceType
    }
}

public struct DisassociateResourceOutput {
    /// The Amazon resource name (ARN) that specifies the application.
    public var applicationArn: Swift.String?
    /// The Amazon resource name (ARN) that specifies the resource.
    public var resourceArn: Swift.String?

    public init(
        applicationArn: Swift.String? = nil,
        resourceArn: Swift.String? = nil
    )
    {
        self.applicationArn = applicationArn
        self.resourceArn = resourceArn
    }
}

public struct GetApplicationInput {
    /// The name, ID, or ARN of the application.
    /// This member is required.
    public var application: Swift.String?

    public init(
        application: Swift.String? = nil
    )
    {
        self.application = application
    }
}

extension ServiceCatalogAppRegistryClientTypes {

    public enum ResourceGroupState: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case createComplete
        case createFailed
        case creating
        case updateComplete
        case updateFailed
        case updating
        case sdkUnknown(Swift.String)

        public static var allCases: [ResourceGroupState] {
            return [
                .createComplete,
                .createFailed,
                .creating,
                .updateComplete,
                .updateFailed,
                .updating
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .createComplete: return "CREATE_COMPLETE"
            case .createFailed: return "CREATE_FAILED"
            case .creating: return "CREATING"
            case .updateComplete: return "UPDATE_COMPLETE"
            case .updateFailed: return "UPDATE_FAILED"
            case .updating: return "UPDATING"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension ServiceCatalogAppRegistryClientTypes {
    /// The information about the resource group integration.
    public struct ResourceGroup {
        /// The Amazon resource name (ARN) of the resource group.
        public var arn: Swift.String?
        /// The error message that generates when the propagation process for the resource group fails.
        public var errorMessage: Swift.String?
        /// The state of the propagation process for the resource group. The states includes: CREATING if the resource group is in the process of being created. CREATE_COMPLETE if the resource group was created successfully. CREATE_FAILED if the resource group failed to be created. UPDATING if the resource group is in the process of being updated. UPDATE_COMPLETE if the resource group updated successfully. UPDATE_FAILED if the resource group could not update successfully.
        public var state: ServiceCatalogAppRegistryClientTypes.ResourceGroupState?

        public init(
            arn: Swift.String? = nil,
            errorMessage: Swift.String? = nil,
            state: ServiceCatalogAppRegistryClientTypes.ResourceGroupState? = nil
        )
        {
            self.arn = arn
            self.errorMessage = errorMessage
            self.state = state
        }
    }

}

extension ServiceCatalogAppRegistryClientTypes {
    /// The information about the service integration.
    public struct Integrations {
        /// The information about the resource group integration.
        public var applicationTagResourceGroup: ServiceCatalogAppRegistryClientTypes.ResourceGroup?
        /// The information about the resource group integration.
        public var resourceGroup: ServiceCatalogAppRegistryClientTypes.ResourceGroup?

        public init(
            applicationTagResourceGroup: ServiceCatalogAppRegistryClientTypes.ResourceGroup? = nil,
            resourceGroup: ServiceCatalogAppRegistryClientTypes.ResourceGroup? = nil
        )
        {
            self.applicationTagResourceGroup = applicationTagResourceGroup
            self.resourceGroup = resourceGroup
        }
    }

}

public struct GetApplicationOutput {
    /// A key-value pair that identifies an associated resource.
    public var applicationTag: [Swift.String: Swift.String]?
    /// The Amazon resource name (ARN) that specifies the application across services.
    public var arn: Swift.String?
    /// The number of top-level resources that were registered as part of this application.
    public var associatedResourceCount: Swift.Int
    /// The ISO-8601 formatted timestamp of the moment when the application was created.
    public var creationTime: Foundation.Date?
    /// The description of the application.
    public var description: Swift.String?
    /// The identifier of the application.
    public var id: Swift.String?
    /// The information about the integration of the application with other services, such as Resource Groups.
    public var integrations: ServiceCatalogAppRegistryClientTypes.Integrations?
    /// The ISO-8601 formatted timestamp of the moment when the application was last updated.
    public var lastUpdateTime: Foundation.Date?
    /// The name of the application. The name must be unique in the region in which you are creating the application.
    public var name: Swift.String?
    /// Key-value pairs associated with the application.
    public var tags: [Swift.String: Swift.String]?

    public init(
        applicationTag: [Swift.String: Swift.String]? = nil,
        arn: Swift.String? = nil,
        associatedResourceCount: Swift.Int = 0,
        creationTime: Foundation.Date? = nil,
        description: Swift.String? = nil,
        id: Swift.String? = nil,
        integrations: ServiceCatalogAppRegistryClientTypes.Integrations? = nil,
        lastUpdateTime: Foundation.Date? = nil,
        name: Swift.String? = nil,
        tags: [Swift.String: Swift.String]? = nil
    )
    {
        self.applicationTag = applicationTag
        self.arn = arn
        self.associatedResourceCount = associatedResourceCount
        self.creationTime = creationTime
        self.description = description
        self.id = id
        self.integrations = integrations
        self.lastUpdateTime = lastUpdateTime
        self.name = name
        self.tags = tags
    }
}

extension ServiceCatalogAppRegistryClientTypes {

    public enum ResourceItemStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case failed
        case inProgress
        case skipped
        case success
        case sdkUnknown(Swift.String)

        public static var allCases: [ResourceItemStatus] {
            return [
                .failed,
                .inProgress,
                .skipped,
                .success
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .failed: return "FAILED"
            case .inProgress: return "IN_PROGRESS"
            case .skipped: return "SKIPPED"
            case .success: return "SUCCESS"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

public struct GetAssociatedResourceInput {
    /// The name, ID, or ARN of the application.
    /// This member is required.
    public var application: Swift.String?
    /// The maximum number of results to return. If the parameter is omitted, it defaults to 25. The value is optional.
    public var maxResults: Swift.Int?
    /// A unique pagination token for each page of results. Make the call again with the returned token to retrieve the next page of results.
    public var nextToken: Swift.String?
    /// The name or ID of the resource associated with the application.
    /// This member is required.
    public var resource: Swift.String?
    /// States whether an application tag is applied, not applied, in the process of being applied, or skipped.
    public var resourceTagStatus: [ServiceCatalogAppRegistryClientTypes.ResourceItemStatus]?
    /// The type of resource associated with the application.
    /// This member is required.
    public var resourceType: ServiceCatalogAppRegistryClientTypes.ResourceType?

    public init(
        application: Swift.String? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        resource: Swift.String? = nil,
        resourceTagStatus: [ServiceCatalogAppRegistryClientTypes.ResourceItemStatus]? = nil,
        resourceType: ServiceCatalogAppRegistryClientTypes.ResourceType? = nil
    )
    {
        self.application = application
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.resource = resource
        self.resourceTagStatus = resourceTagStatus
        self.resourceType = resourceType
    }
}

extension ServiceCatalogAppRegistryClientTypes {
    /// The service integration information about the resource.
    public struct ResourceIntegrations {
        /// The information about the integration of Resource Groups.
        public var resourceGroup: ServiceCatalogAppRegistryClientTypes.ResourceGroup?

        public init(
            resourceGroup: ServiceCatalogAppRegistryClientTypes.ResourceGroup? = nil
        )
        {
            self.resourceGroup = resourceGroup
        }
    }

}

extension ServiceCatalogAppRegistryClientTypes {
    /// The information about the resource.
    public struct Resource {
        /// The Amazon resource name (ARN) of the resource.
        public var arn: Swift.String?
        /// The time the resource was associated with the application.
        public var associationTime: Foundation.Date?
        /// The service integration information about the resource.
        public var integrations: ServiceCatalogAppRegistryClientTypes.ResourceIntegrations?
        /// The name of the resource.
        public var name: Swift.String?

        public init(
            arn: Swift.String? = nil,
            associationTime: Foundation.Date? = nil,
            integrations: ServiceCatalogAppRegistryClientTypes.ResourceIntegrations? = nil,
            name: Swift.String? = nil
        )
        {
            self.arn = arn
            self.associationTime = associationTime
            self.integrations = integrations
            self.name = name
        }
    }

}

public struct GetAssociatedResourceOutput {
    /// The result of the application that's tag applied to a resource.
    public var applicationTagResult: ServiceCatalogAppRegistryClientTypes.ApplicationTagResult?
    /// Determines whether an application tag is applied or skipped.
    public var options: [ServiceCatalogAppRegistryClientTypes.AssociationOption]?
    /// The resource associated with the application.
    public var resource: ServiceCatalogAppRegistryClientTypes.Resource?

    public init(
        applicationTagResult: ServiceCatalogAppRegistryClientTypes.ApplicationTagResult? = nil,
        options: [ServiceCatalogAppRegistryClientTypes.AssociationOption]? = nil,
        resource: ServiceCatalogAppRegistryClientTypes.Resource? = nil
    )
    {
        self.applicationTagResult = applicationTagResult
        self.options = options
        self.resource = resource
    }
}

public struct GetAttributeGroupInput {
    /// The name, ID, or ARN of the attribute group that holds the attributes to describe the application.
    /// This member is required.
    public var attributeGroup: Swift.String?

    public init(
        attributeGroup: Swift.String? = nil
    )
    {
        self.attributeGroup = attributeGroup
    }
}

public struct GetAttributeGroupOutput {
    /// The Amazon resource name (ARN) that specifies the attribute group across services.
    public var arn: Swift.String?
    /// A JSON string in the form of nested key-value pairs that represent the attributes in the group and describes an application and its components.
    public var attributes: Swift.String?
    /// The service principal that created the attribute group.
    public var createdBy: Swift.String?
    /// The ISO-8601 formatted timestamp of the moment the attribute group was created.
    public var creationTime: Foundation.Date?
    /// The description of the attribute group that the user provides.
    public var description: Swift.String?
    /// The identifier of the attribute group.
    public var id: Swift.String?
    /// The ISO-8601 formatted timestamp of the moment the attribute group was last updated. This time is the same as the creationTime for a newly created attribute group.
    public var lastUpdateTime: Foundation.Date?
    /// The name of the attribute group.
    public var name: Swift.String?
    /// Key-value pairs associated with the attribute group.
    public var tags: [Swift.String: Swift.String]?

    public init(
        arn: Swift.String? = nil,
        attributes: Swift.String? = nil,
        createdBy: Swift.String? = nil,
        creationTime: Foundation.Date? = nil,
        description: Swift.String? = nil,
        id: Swift.String? = nil,
        lastUpdateTime: Foundation.Date? = nil,
        name: Swift.String? = nil,
        tags: [Swift.String: Swift.String]? = nil
    )
    {
        self.arn = arn
        self.attributes = attributes
        self.createdBy = createdBy
        self.creationTime = creationTime
        self.description = description
        self.id = id
        self.lastUpdateTime = lastUpdateTime
        self.name = name
        self.tags = tags
    }
}

public struct GetConfigurationOutput {
    /// Retrieves TagKey configuration from an account.
    public var configuration: ServiceCatalogAppRegistryClientTypes.AppRegistryConfiguration?

    public init(
        configuration: ServiceCatalogAppRegistryClientTypes.AppRegistryConfiguration? = nil
    )
    {
        self.configuration = configuration
    }
}

public struct ListApplicationsInput {
    /// The upper bound of the number of results to return (cannot exceed 25). If this parameter is omitted, it defaults to 25. This value is optional.
    public var maxResults: Swift.Int?
    /// The token to use to get the next page of results after a previous API call.
    public var nextToken: Swift.String?

    public init(
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

public struct ListApplicationsOutput {
    /// This list of applications.
    public var applications: [ServiceCatalogAppRegistryClientTypes.ApplicationSummary]?
    /// The token to use to get the next page of results after a previous API call.
    public var nextToken: Swift.String?

    public init(
        applications: [ServiceCatalogAppRegistryClientTypes.ApplicationSummary]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.applications = applications
        self.nextToken = nextToken
    }
}

public struct ListAssociatedAttributeGroupsInput {
    /// The name or ID of the application.
    /// This member is required.
    public var application: Swift.String?
    /// The upper bound of the number of results to return (cannot exceed 25). If this parameter is omitted, it defaults to 25. This value is optional.
    public var maxResults: Swift.Int?
    /// The token to use to get the next page of results after a previous API call.
    public var nextToken: Swift.String?

    public init(
        application: Swift.String? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.application = application
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

public struct ListAssociatedAttributeGroupsOutput {
    /// A list of attribute group IDs.
    public var attributeGroups: [Swift.String]?
    /// The token to use to get the next page of results after a previous API call.
    public var nextToken: Swift.String?

    public init(
        attributeGroups: [Swift.String]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.attributeGroups = attributeGroups
        self.nextToken = nextToken
    }
}

public struct ListAssociatedResourcesInput {
    /// The name, ID, or ARN of the application.
    /// This member is required.
    public var application: Swift.String?
    /// The upper bound of the number of results to return (cannot exceed 25). If this parameter is omitted, it defaults to 25. This value is optional.
    public var maxResults: Swift.Int?
    /// The token to use to get the next page of results after a previous API call.
    public var nextToken: Swift.String?

    public init(
        application: Swift.String? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.application = application
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

extension ServiceCatalogAppRegistryClientTypes {
    /// The details related to the resource.
    public struct ResourceDetails {
        /// The value of the tag.
        public var tagValue: Swift.String?

        public init(
            tagValue: Swift.String? = nil
        )
        {
            self.tagValue = tagValue
        }
    }

}

extension ServiceCatalogAppRegistryClientTypes {
    /// The information about the resource.
    public struct ResourceInfo {
        /// The Amazon resource name (ARN) that specifies the resource across services.
        public var arn: Swift.String?
        /// The name of the resource.
        public var name: Swift.String?
        /// Determines whether an application tag is applied or skipped.
        public var options: [ServiceCatalogAppRegistryClientTypes.AssociationOption]?
        /// The details related to the resource.
        public var resourceDetails: ServiceCatalogAppRegistryClientTypes.ResourceDetails?
        /// Provides information about the Service Catalog App Registry resource type.
        public var resourceType: ServiceCatalogAppRegistryClientTypes.ResourceType?

        public init(
            arn: Swift.String? = nil,
            name: Swift.String? = nil,
            options: [ServiceCatalogAppRegistryClientTypes.AssociationOption]? = nil,
            resourceDetails: ServiceCatalogAppRegistryClientTypes.ResourceDetails? = nil,
            resourceType: ServiceCatalogAppRegistryClientTypes.ResourceType? = nil
        )
        {
            self.arn = arn
            self.name = name
            self.options = options
            self.resourceDetails = resourceDetails
            self.resourceType = resourceType
        }
    }

}

public struct ListAssociatedResourcesOutput {
    /// The token to use to get the next page of results after a previous API call.
    public var nextToken: Swift.String?
    /// Information about the resources.
    public var resources: [ServiceCatalogAppRegistryClientTypes.ResourceInfo]?

    public init(
        nextToken: Swift.String? = nil,
        resources: [ServiceCatalogAppRegistryClientTypes.ResourceInfo]? = nil
    )
    {
        self.nextToken = nextToken
        self.resources = resources
    }
}

public struct ListAttributeGroupsInput {
    /// The upper bound of the number of results to return (cannot exceed 25). If this parameter is omitted, it defaults to 25. This value is optional.
    public var maxResults: Swift.Int?
    /// The token to use to get the next page of results after a previous API call.
    public var nextToken: Swift.String?

    public init(
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

public struct ListAttributeGroupsOutput {
    /// This list of attribute groups.
    public var attributeGroups: [ServiceCatalogAppRegistryClientTypes.AttributeGroupSummary]?
    /// The token to use to get the next page of results after a previous API call.
    public var nextToken: Swift.String?

    public init(
        attributeGroups: [ServiceCatalogAppRegistryClientTypes.AttributeGroupSummary]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.attributeGroups = attributeGroups
        self.nextToken = nextToken
    }
}

public struct ListAttributeGroupsForApplicationInput {
    /// The name or ID of the application.
    /// This member is required.
    public var application: Swift.String?
    /// The upper bound of the number of results to return. The value cannot exceed 25. If you omit this parameter, it defaults to 25. This value is optional.
    public var maxResults: Swift.Int?
    /// This token retrieves the next page of results after a previous API call.
    public var nextToken: Swift.String?

    public init(
        application: Swift.String? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.application = application
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

public struct ListAttributeGroupsForApplicationOutput {
    /// The details related to a specific attribute group.
    public var attributeGroupsDetails: [ServiceCatalogAppRegistryClientTypes.AttributeGroupDetails]?
    /// The token to use to get the next page of results after a previous API call.
    public var nextToken: Swift.String?

    public init(
        attributeGroupsDetails: [ServiceCatalogAppRegistryClientTypes.AttributeGroupDetails]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.attributeGroupsDetails = attributeGroupsDetails
        self.nextToken = nextToken
    }
}

public struct ListTagsForResourceInput {
    /// The Amazon resource name (ARN) that specifies the resource.
    /// This member is required.
    public var resourceArn: Swift.String?

    public init(
        resourceArn: Swift.String? = nil
    )
    {
        self.resourceArn = resourceArn
    }
}

public struct ListTagsForResourceOutput {
    /// The tags on the resource.
    public var tags: [Swift.String: Swift.String]?

    public init(
        tags: [Swift.String: Swift.String]? = nil
    )
    {
        self.tags = tags
    }
}

public struct PutConfigurationInput {
    /// Associates a TagKey configuration to an account.
    /// This member is required.
    public var configuration: ServiceCatalogAppRegistryClientTypes.AppRegistryConfiguration?

    public init(
        configuration: ServiceCatalogAppRegistryClientTypes.AppRegistryConfiguration? = nil
    )
    {
        self.configuration = configuration
    }
}

public struct SyncResourceInput {
    /// An entity you can work with and specify with a name or ID. Examples include an Amazon EC2 instance, an Amazon Web Services CloudFormation stack, or an Amazon S3 bucket.
    /// This member is required.
    public var resource: Swift.String?
    /// The type of resource of which the application will be associated.
    /// This member is required.
    public var resourceType: ServiceCatalogAppRegistryClientTypes.ResourceType?

    public init(
        resource: Swift.String? = nil,
        resourceType: ServiceCatalogAppRegistryClientTypes.ResourceType? = nil
    )
    {
        self.resource = resource
        self.resourceType = resourceType
    }
}

extension ServiceCatalogAppRegistryClientTypes {

    public enum SyncAction: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case noAction
        case startSync
        case sdkUnknown(Swift.String)

        public static var allCases: [SyncAction] {
            return [
                .noAction,
                .startSync
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .noAction: return "NO_ACTION"
            case .startSync: return "START_SYNC"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

public struct SyncResourceOutput {
    /// The results of the output if an application is associated with an ARN value, which could be syncStarted or None.
    public var actionTaken: ServiceCatalogAppRegistryClientTypes.SyncAction?
    /// The Amazon resource name (ARN) that specifies the application.
    public var applicationArn: Swift.String?
    /// The Amazon resource name (ARN) that specifies the resource.
    public var resourceArn: Swift.String?

    public init(
        actionTaken: ServiceCatalogAppRegistryClientTypes.SyncAction? = nil,
        applicationArn: Swift.String? = nil,
        resourceArn: Swift.String? = nil
    )
    {
        self.actionTaken = actionTaken
        self.applicationArn = applicationArn
        self.resourceArn = resourceArn
    }
}

public struct TagResourceInput {
    /// The Amazon resource name (ARN) that specifies the resource.
    /// This member is required.
    public var resourceArn: Swift.String?
    /// The new or modified tags for the resource.
    /// This member is required.
    public var tags: [Swift.String: Swift.String]?

    public init(
        resourceArn: Swift.String? = nil,
        tags: [Swift.String: Swift.String]? = nil
    )
    {
        self.resourceArn = resourceArn
        self.tags = tags
    }
}

public struct TagResourceOutput {

    public init() { }
}

public struct UntagResourceInput {
    /// The Amazon resource name (ARN) that specifies the resource.
    /// This member is required.
    public var resourceArn: Swift.String?
    /// A list of the tag keys to remove from the specified resource.
    /// This member is required.
    public var tagKeys: [Swift.String]?

    public init(
        resourceArn: Swift.String? = nil,
        tagKeys: [Swift.String]? = nil
    )
    {
        self.resourceArn = resourceArn
        self.tagKeys = tagKeys
    }
}

public struct UntagResourceOutput {

    public init() { }
}

public struct UpdateApplicationInput {
    /// The name, ID, or ARN of the application that will be updated.
    /// This member is required.
    public var application: Swift.String?
    /// The new description of the application.
    public var description: Swift.String?
    /// Deprecated: The new name of the application. The name must be unique in the region in which you are updating the application. Please do not use this field as we have stopped supporting name updates.
    @available(*, deprecated, message: "Name update for application is deprecated.")
    public var name: Swift.String?

    public init(
        application: Swift.String? = nil,
        description: Swift.String? = nil,
        name: Swift.String? = nil
    )
    {
        self.application = application
        self.description = description
        self.name = name
    }
}

public struct UpdateApplicationOutput {
    /// The updated information of the application.
    public var application: ServiceCatalogAppRegistryClientTypes.Application?

    public init(
        application: ServiceCatalogAppRegistryClientTypes.Application? = nil
    )
    {
        self.application = application
    }
}

public struct UpdateAttributeGroupInput {
    /// The name, ID, or ARN of the attribute group that holds the attributes to describe the application.
    /// This member is required.
    public var attributeGroup: Swift.String?
    /// A JSON string in the form of nested key-value pairs that represent the attributes in the group and describes an application and its components.
    public var attributes: Swift.String?
    /// The description of the attribute group that the user provides.
    public var description: Swift.String?
    /// Deprecated: The new name of the attribute group. The name must be unique in the region in which you are updating the attribute group. Please do not use this field as we have stopped supporting name updates.
    @available(*, deprecated, message: "Name update for attribute group is deprecated.")
    public var name: Swift.String?

    public init(
        attributeGroup: Swift.String? = nil,
        attributes: Swift.String? = nil,
        description: Swift.String? = nil,
        name: Swift.String? = nil
    )
    {
        self.attributeGroup = attributeGroup
        self.attributes = attributes
        self.description = description
        self.name = name
    }
}

public struct UpdateAttributeGroupOutput {
    /// The updated information of the attribute group.
    public var attributeGroup: ServiceCatalogAppRegistryClientTypes.AttributeGroup?

    public init(
        attributeGroup: ServiceCatalogAppRegistryClientTypes.AttributeGroup? = nil
    )
    {
        self.attributeGroup = attributeGroup
    }
}

extension AssociateAttributeGroupInput {

    static func urlPathProvider(_ value: AssociateAttributeGroupInput) -> Swift.String? {
        guard let application = value.application else {
            return nil
        }
        guard let attributeGroup = value.attributeGroup else {
            return nil
        }
        return "/applications/\(application.urlPercentEncoding())/attribute-groups/\(attributeGroup.urlPercentEncoding())"
    }
}

extension AssociateResourceInput {

    static func urlPathProvider(_ value: AssociateResourceInput) -> Swift.String? {
        guard let application = value.application else {
            return nil
        }
        guard let resourceType = value.resourceType else {
            return nil
        }
        guard let resource = value.resource else {
            return nil
        }
        return "/applications/\(application.urlPercentEncoding())/resources/\(resourceType.rawValue.urlPercentEncoding())/\(resource.urlPercentEncoding())"
    }
}

extension CreateApplicationInput {

    static func urlPathProvider(_ value: CreateApplicationInput) -> Swift.String? {
        return "/applications"
    }
}

extension CreateAttributeGroupInput {

    static func urlPathProvider(_ value: CreateAttributeGroupInput) -> Swift.String? {
        return "/attribute-groups"
    }
}

extension DeleteApplicationInput {

    static func urlPathProvider(_ value: DeleteApplicationInput) -> Swift.String? {
        guard let application = value.application else {
            return nil
        }
        return "/applications/\(application.urlPercentEncoding())"
    }
}

extension DeleteAttributeGroupInput {

    static func urlPathProvider(_ value: DeleteAttributeGroupInput) -> Swift.String? {
        guard let attributeGroup = value.attributeGroup else {
            return nil
        }
        return "/attribute-groups/\(attributeGroup.urlPercentEncoding())"
    }
}

extension DisassociateAttributeGroupInput {

    static func urlPathProvider(_ value: DisassociateAttributeGroupInput) -> Swift.String? {
        guard let application = value.application else {
            return nil
        }
        guard let attributeGroup = value.attributeGroup else {
            return nil
        }
        return "/applications/\(application.urlPercentEncoding())/attribute-groups/\(attributeGroup.urlPercentEncoding())"
    }
}

extension DisassociateResourceInput {

    static func urlPathProvider(_ value: DisassociateResourceInput) -> Swift.String? {
        guard let application = value.application else {
            return nil
        }
        guard let resourceType = value.resourceType else {
            return nil
        }
        guard let resource = value.resource else {
            return nil
        }
        return "/applications/\(application.urlPercentEncoding())/resources/\(resourceType.rawValue.urlPercentEncoding())/\(resource.urlPercentEncoding())"
    }
}

extension GetApplicationInput {

    static func urlPathProvider(_ value: GetApplicationInput) -> Swift.String? {
        guard let application = value.application else {
            return nil
        }
        return "/applications/\(application.urlPercentEncoding())"
    }
}

extension GetAssociatedResourceInput {

    static func urlPathProvider(_ value: GetAssociatedResourceInput) -> Swift.String? {
        guard let application = value.application else {
            return nil
        }
        guard let resourceType = value.resourceType else {
            return nil
        }
        guard let resource = value.resource else {
            return nil
        }
        return "/applications/\(application.urlPercentEncoding())/resources/\(resourceType.rawValue.urlPercentEncoding())/\(resource.urlPercentEncoding())"
    }
}

extension GetAssociatedResourceInput {

    static func queryItemProvider(_ value: GetAssociatedResourceInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        if let resourceTagStatus = value.resourceTagStatus {
            resourceTagStatus.forEach { queryItemValue in
                let queryItem = Smithy.URIQueryItem(name: "resourceTagStatus".urlPercentEncoding(), value: Swift.String(queryItemValue.rawValue).urlPercentEncoding())
                items.append(queryItem)
            }
        }
        if let nextToken = value.nextToken {
            let nextTokenQueryItem = Smithy.URIQueryItem(name: "nextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
            items.append(nextTokenQueryItem)
        }
        if let maxResults = value.maxResults {
            let maxResultsQueryItem = Smithy.URIQueryItem(name: "maxResults".urlPercentEncoding(), value: Swift.String(maxResults).urlPercentEncoding())
            items.append(maxResultsQueryItem)
        }
        return items
    }
}

extension GetAttributeGroupInput {

    static func urlPathProvider(_ value: GetAttributeGroupInput) -> Swift.String? {
        guard let attributeGroup = value.attributeGroup else {
            return nil
        }
        return "/attribute-groups/\(attributeGroup.urlPercentEncoding())"
    }
}

extension GetConfigurationInput {

    static func urlPathProvider(_ value: GetConfigurationInput) -> Swift.String? {
        return "/configuration"
    }
}

extension ListApplicationsInput {

    static func urlPathProvider(_ value: ListApplicationsInput) -> Swift.String? {
        return "/applications"
    }
}

extension ListApplicationsInput {

    static func queryItemProvider(_ value: ListApplicationsInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        if let nextToken = value.nextToken {
            let nextTokenQueryItem = Smithy.URIQueryItem(name: "nextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
            items.append(nextTokenQueryItem)
        }
        if let maxResults = value.maxResults {
            let maxResultsQueryItem = Smithy.URIQueryItem(name: "maxResults".urlPercentEncoding(), value: Swift.String(maxResults).urlPercentEncoding())
            items.append(maxResultsQueryItem)
        }
        return items
    }
}

extension ListAssociatedAttributeGroupsInput {

    static func urlPathProvider(_ value: ListAssociatedAttributeGroupsInput) -> Swift.String? {
        guard let application = value.application else {
            return nil
        }
        return "/applications/\(application.urlPercentEncoding())/attribute-groups"
    }
}

extension ListAssociatedAttributeGroupsInput {

    static func queryItemProvider(_ value: ListAssociatedAttributeGroupsInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        if let nextToken = value.nextToken {
            let nextTokenQueryItem = Smithy.URIQueryItem(name: "nextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
            items.append(nextTokenQueryItem)
        }
        if let maxResults = value.maxResults {
            let maxResultsQueryItem = Smithy.URIQueryItem(name: "maxResults".urlPercentEncoding(), value: Swift.String(maxResults).urlPercentEncoding())
            items.append(maxResultsQueryItem)
        }
        return items
    }
}

extension ListAssociatedResourcesInput {

    static func urlPathProvider(_ value: ListAssociatedResourcesInput) -> Swift.String? {
        guard let application = value.application else {
            return nil
        }
        return "/applications/\(application.urlPercentEncoding())/resources"
    }
}

extension ListAssociatedResourcesInput {

    static func queryItemProvider(_ value: ListAssociatedResourcesInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        if let nextToken = value.nextToken {
            let nextTokenQueryItem = Smithy.URIQueryItem(name: "nextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
            items.append(nextTokenQueryItem)
        }
        if let maxResults = value.maxResults {
            let maxResultsQueryItem = Smithy.URIQueryItem(name: "maxResults".urlPercentEncoding(), value: Swift.String(maxResults).urlPercentEncoding())
            items.append(maxResultsQueryItem)
        }
        return items
    }
}

extension ListAttributeGroupsInput {

    static func urlPathProvider(_ value: ListAttributeGroupsInput) -> Swift.String? {
        return "/attribute-groups"
    }
}

extension ListAttributeGroupsInput {

    static func queryItemProvider(_ value: ListAttributeGroupsInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        if let nextToken = value.nextToken {
            let nextTokenQueryItem = Smithy.URIQueryItem(name: "nextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
            items.append(nextTokenQueryItem)
        }
        if let maxResults = value.maxResults {
            let maxResultsQueryItem = Smithy.URIQueryItem(name: "maxResults".urlPercentEncoding(), value: Swift.String(maxResults).urlPercentEncoding())
            items.append(maxResultsQueryItem)
        }
        return items
    }
}

extension ListAttributeGroupsForApplicationInput {

    static func urlPathProvider(_ value: ListAttributeGroupsForApplicationInput) -> Swift.String? {
        guard let application = value.application else {
            return nil
        }
        return "/applications/\(application.urlPercentEncoding())/attribute-group-details"
    }
}

extension ListAttributeGroupsForApplicationInput {

    static func queryItemProvider(_ value: ListAttributeGroupsForApplicationInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        if let nextToken = value.nextToken {
            let nextTokenQueryItem = Smithy.URIQueryItem(name: "nextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
            items.append(nextTokenQueryItem)
        }
        if let maxResults = value.maxResults {
            let maxResultsQueryItem = Smithy.URIQueryItem(name: "maxResults".urlPercentEncoding(), value: Swift.String(maxResults).urlPercentEncoding())
            items.append(maxResultsQueryItem)
        }
        return items
    }
}

extension ListTagsForResourceInput {

    static func urlPathProvider(_ value: ListTagsForResourceInput) -> Swift.String? {
        guard let resourceArn = value.resourceArn else {
            return nil
        }
        return "/tags/\(resourceArn.urlPercentEncoding())"
    }
}

extension PutConfigurationInput {

    static func urlPathProvider(_ value: PutConfigurationInput) -> Swift.String? {
        return "/configuration"
    }
}

extension SyncResourceInput {

    static func urlPathProvider(_ value: SyncResourceInput) -> Swift.String? {
        guard let resourceType = value.resourceType else {
            return nil
        }
        guard let resource = value.resource else {
            return nil
        }
        return "/sync/\(resourceType.rawValue.urlPercentEncoding())/\(resource.urlPercentEncoding())"
    }
}

extension TagResourceInput {

    static func urlPathProvider(_ value: TagResourceInput) -> Swift.String? {
        guard let resourceArn = value.resourceArn else {
            return nil
        }
        return "/tags/\(resourceArn.urlPercentEncoding())"
    }
}

extension UntagResourceInput {

    static func urlPathProvider(_ value: UntagResourceInput) -> Swift.String? {
        guard let resourceArn = value.resourceArn else {
            return nil
        }
        return "/tags/\(resourceArn.urlPercentEncoding())"
    }
}

extension UntagResourceInput {

    static func queryItemProvider(_ value: UntagResourceInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        guard let tagKeys = value.tagKeys else {
            let message = "Creating a URL Query Item failed. tagKeys is required and must not be nil."
            throw Smithy.ClientError.unknownError(message)
        }
        tagKeys.forEach { queryItemValue in
            let queryItem = Smithy.URIQueryItem(name: "tagKeys".urlPercentEncoding(), value: Swift.String(queryItemValue).urlPercentEncoding())
            items.append(queryItem)
        }
        return items
    }
}

extension UpdateApplicationInput {

    static func urlPathProvider(_ value: UpdateApplicationInput) -> Swift.String? {
        guard let application = value.application else {
            return nil
        }
        return "/applications/\(application.urlPercentEncoding())"
    }
}

extension UpdateAttributeGroupInput {

    static func urlPathProvider(_ value: UpdateAttributeGroupInput) -> Swift.String? {
        guard let attributeGroup = value.attributeGroup else {
            return nil
        }
        return "/attribute-groups/\(attributeGroup.urlPercentEncoding())"
    }
}

extension AssociateResourceInput {

    static func write(value: AssociateResourceInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["options"].writeList(value.options, memberWritingClosure: SmithyReadWrite.WritingClosureBox<ServiceCatalogAppRegistryClientTypes.AssociationOption>().write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension CreateApplicationInput {

    static func write(value: CreateApplicationInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["clientToken"].write(value.clientToken)
        try writer["description"].write(value.description)
        try writer["name"].write(value.name)
        try writer["tags"].writeMap(value.tags, valueWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
    }
}

extension CreateAttributeGroupInput {

    static func write(value: CreateAttributeGroupInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["attributes"].write(value.attributes)
        try writer["clientToken"].write(value.clientToken)
        try writer["description"].write(value.description)
        try writer["name"].write(value.name)
        try writer["tags"].writeMap(value.tags, valueWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
    }
}

extension PutConfigurationInput {

    static func write(value: PutConfigurationInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["configuration"].write(value.configuration, with: ServiceCatalogAppRegistryClientTypes.AppRegistryConfiguration.write(value:to:))
    }
}

extension TagResourceInput {

    static func write(value: TagResourceInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["tags"].writeMap(value.tags, valueWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
    }
}

extension UpdateApplicationInput {

    static func write(value: UpdateApplicationInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["description"].write(value.description)
        try writer["name"].write(value.name)
    }
}

extension UpdateAttributeGroupInput {

    static func write(value: UpdateAttributeGroupInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["attributes"].write(value.attributes)
        try writer["description"].write(value.description)
        try writer["name"].write(value.name)
    }
}

extension AssociateAttributeGroupOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> AssociateAttributeGroupOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = AssociateAttributeGroupOutput()
        value.applicationArn = try reader["applicationArn"].readIfPresent()
        value.attributeGroupArn = try reader["attributeGroupArn"].readIfPresent()
        return value
    }
}

extension AssociateResourceOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> AssociateResourceOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = AssociateResourceOutput()
        value.applicationArn = try reader["applicationArn"].readIfPresent()
        value.options = try reader["options"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosureBox<ServiceCatalogAppRegistryClientTypes.AssociationOption>().read(from:), memberNodeInfo: "member", isFlattened: false)
        value.resourceArn = try reader["resourceArn"].readIfPresent()
        return value
    }
}

extension CreateApplicationOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateApplicationOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateApplicationOutput()
        value.application = try reader["application"].readIfPresent(with: ServiceCatalogAppRegistryClientTypes.Application.read(from:))
        return value
    }
}

extension CreateAttributeGroupOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateAttributeGroupOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateAttributeGroupOutput()
        value.attributeGroup = try reader["attributeGroup"].readIfPresent(with: ServiceCatalogAppRegistryClientTypes.AttributeGroup.read(from:))
        return value
    }
}

extension DeleteApplicationOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteApplicationOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DeleteApplicationOutput()
        value.application = try reader["application"].readIfPresent(with: ServiceCatalogAppRegistryClientTypes.ApplicationSummary.read(from:))
        return value
    }
}

extension DeleteAttributeGroupOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteAttributeGroupOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DeleteAttributeGroupOutput()
        value.attributeGroup = try reader["attributeGroup"].readIfPresent(with: ServiceCatalogAppRegistryClientTypes.AttributeGroupSummary.read(from:))
        return value
    }
}

extension DisassociateAttributeGroupOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DisassociateAttributeGroupOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DisassociateAttributeGroupOutput()
        value.applicationArn = try reader["applicationArn"].readIfPresent()
        value.attributeGroupArn = try reader["attributeGroupArn"].readIfPresent()
        return value
    }
}

extension DisassociateResourceOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DisassociateResourceOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DisassociateResourceOutput()
        value.applicationArn = try reader["applicationArn"].readIfPresent()
        value.resourceArn = try reader["resourceArn"].readIfPresent()
        return value
    }
}

extension GetApplicationOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetApplicationOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetApplicationOutput()
        value.applicationTag = try reader["applicationTag"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        value.arn = try reader["arn"].readIfPresent()
        value.associatedResourceCount = try reader["associatedResourceCount"].readIfPresent() ?? 0
        value.creationTime = try reader["creationTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.dateTime)
        value.description = try reader["description"].readIfPresent()
        value.id = try reader["id"].readIfPresent()
        value.integrations = try reader["integrations"].readIfPresent(with: ServiceCatalogAppRegistryClientTypes.Integrations.read(from:))
        value.lastUpdateTime = try reader["lastUpdateTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.dateTime)
        value.name = try reader["name"].readIfPresent()
        value.tags = try reader["tags"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        return value
    }
}

extension GetAssociatedResourceOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetAssociatedResourceOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetAssociatedResourceOutput()
        value.applicationTagResult = try reader["applicationTagResult"].readIfPresent(with: ServiceCatalogAppRegistryClientTypes.ApplicationTagResult.read(from:))
        value.options = try reader["options"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosureBox<ServiceCatalogAppRegistryClientTypes.AssociationOption>().read(from:), memberNodeInfo: "member", isFlattened: false)
        value.resource = try reader["resource"].readIfPresent(with: ServiceCatalogAppRegistryClientTypes.Resource.read(from:))
        return value
    }
}

extension GetAttributeGroupOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetAttributeGroupOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetAttributeGroupOutput()
        value.arn = try reader["arn"].readIfPresent()
        value.attributes = try reader["attributes"].readIfPresent()
        value.createdBy = try reader["createdBy"].readIfPresent()
        value.creationTime = try reader["creationTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.dateTime)
        value.description = try reader["description"].readIfPresent()
        value.id = try reader["id"].readIfPresent()
        value.lastUpdateTime = try reader["lastUpdateTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.dateTime)
        value.name = try reader["name"].readIfPresent()
        value.tags = try reader["tags"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        return value
    }
}

extension GetConfigurationOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetConfigurationOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetConfigurationOutput()
        value.configuration = try reader["configuration"].readIfPresent(with: ServiceCatalogAppRegistryClientTypes.AppRegistryConfiguration.read(from:))
        return value
    }
}

extension ListApplicationsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListApplicationsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListApplicationsOutput()
        value.applications = try reader["applications"].readListIfPresent(memberReadingClosure: ServiceCatalogAppRegistryClientTypes.ApplicationSummary.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.nextToken = try reader["nextToken"].readIfPresent()
        return value
    }
}

extension ListAssociatedAttributeGroupsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListAssociatedAttributeGroupsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListAssociatedAttributeGroupsOutput()
        value.attributeGroups = try reader["attributeGroups"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.nextToken = try reader["nextToken"].readIfPresent()
        return value
    }
}

extension ListAssociatedResourcesOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListAssociatedResourcesOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListAssociatedResourcesOutput()
        value.nextToken = try reader["nextToken"].readIfPresent()
        value.resources = try reader["resources"].readListIfPresent(memberReadingClosure: ServiceCatalogAppRegistryClientTypes.ResourceInfo.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension ListAttributeGroupsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListAttributeGroupsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListAttributeGroupsOutput()
        value.attributeGroups = try reader["attributeGroups"].readListIfPresent(memberReadingClosure: ServiceCatalogAppRegistryClientTypes.AttributeGroupSummary.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.nextToken = try reader["nextToken"].readIfPresent()
        return value
    }
}

extension ListAttributeGroupsForApplicationOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListAttributeGroupsForApplicationOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListAttributeGroupsForApplicationOutput()
        value.attributeGroupsDetails = try reader["attributeGroupsDetails"].readListIfPresent(memberReadingClosure: ServiceCatalogAppRegistryClientTypes.AttributeGroupDetails.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.nextToken = try reader["nextToken"].readIfPresent()
        return value
    }
}

extension ListTagsForResourceOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListTagsForResourceOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListTagsForResourceOutput()
        value.tags = try reader["tags"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        return value
    }
}

extension PutConfigurationOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> PutConfigurationOutput {
        return PutConfigurationOutput()
    }
}

extension SyncResourceOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> SyncResourceOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = SyncResourceOutput()
        value.actionTaken = try reader["actionTaken"].readIfPresent()
        value.applicationArn = try reader["applicationArn"].readIfPresent()
        value.resourceArn = try reader["resourceArn"].readIfPresent()
        return value
    }
}

extension TagResourceOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> TagResourceOutput {
        return TagResourceOutput()
    }
}

extension UntagResourceOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UntagResourceOutput {
        return UntagResourceOutput()
    }
}

extension UpdateApplicationOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdateApplicationOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = UpdateApplicationOutput()
        value.application = try reader["application"].readIfPresent(with: ServiceCatalogAppRegistryClientTypes.Application.read(from:))
        return value
    }
}

extension UpdateAttributeGroupOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdateAttributeGroupOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = UpdateAttributeGroupOutput()
        value.attributeGroup = try reader["attributeGroup"].readIfPresent(with: ServiceCatalogAppRegistryClientTypes.AttributeGroup.read(from:))
        return value
    }
}

enum AssociateAttributeGroupOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceQuotaExceededException": return try ServiceQuotaExceededException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum AssociateResourceOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceQuotaExceededException": return try ServiceQuotaExceededException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateApplicationOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ServiceQuotaExceededException": return try ServiceQuotaExceededException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateAttributeGroupOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ServiceQuotaExceededException": return try ServiceQuotaExceededException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteApplicationOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteAttributeGroupOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DisassociateAttributeGroupOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DisassociateResourceOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetApplicationOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetAssociatedResourceOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetAttributeGroupOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetConfigurationOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListApplicationsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListAssociatedAttributeGroupsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListAssociatedResourcesOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListAttributeGroupsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListAttributeGroupsForApplicationOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListTagsForResourceOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum PutConfigurationOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum SyncResourceOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum TagResourceOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UntagResourceOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdateApplicationOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdateAttributeGroupOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

extension InternalServerException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> InternalServerException {
        let reader = baseError.errorBodyReader
        var value = InternalServerException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ResourceNotFoundException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> ResourceNotFoundException {
        let reader = baseError.errorBodyReader
        var value = ResourceNotFoundException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ConflictException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> ConflictException {
        let reader = baseError.errorBodyReader
        var value = ConflictException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ValidationException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> ValidationException {
        let reader = baseError.errorBodyReader
        var value = ValidationException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ServiceQuotaExceededException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> ServiceQuotaExceededException {
        let reader = baseError.errorBodyReader
        var value = ServiceQuotaExceededException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ThrottlingException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> ThrottlingException {
        let reader = baseError.errorBodyReader
        var value = ThrottlingException()
        value.properties.message = try reader["message"].readIfPresent() ?? ""
        value.properties.serviceCode = try reader["serviceCode"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ServiceCatalogAppRegistryClientTypes.Application {

    static func read(from reader: SmithyJSON.Reader) throws -> ServiceCatalogAppRegistryClientTypes.Application {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ServiceCatalogAppRegistryClientTypes.Application()
        value.id = try reader["id"].readIfPresent()
        value.arn = try reader["arn"].readIfPresent()
        value.name = try reader["name"].readIfPresent()
        value.description = try reader["description"].readIfPresent()
        value.creationTime = try reader["creationTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.dateTime)
        value.lastUpdateTime = try reader["lastUpdateTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.dateTime)
        value.tags = try reader["tags"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        value.applicationTag = try reader["applicationTag"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        return value
    }
}

extension ServiceCatalogAppRegistryClientTypes.AttributeGroup {

    static func read(from reader: SmithyJSON.Reader) throws -> ServiceCatalogAppRegistryClientTypes.AttributeGroup {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ServiceCatalogAppRegistryClientTypes.AttributeGroup()
        value.id = try reader["id"].readIfPresent()
        value.arn = try reader["arn"].readIfPresent()
        value.name = try reader["name"].readIfPresent()
        value.description = try reader["description"].readIfPresent()
        value.creationTime = try reader["creationTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.dateTime)
        value.lastUpdateTime = try reader["lastUpdateTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.dateTime)
        value.tags = try reader["tags"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        return value
    }
}

extension ServiceCatalogAppRegistryClientTypes.ApplicationSummary {

    static func read(from reader: SmithyJSON.Reader) throws -> ServiceCatalogAppRegistryClientTypes.ApplicationSummary {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ServiceCatalogAppRegistryClientTypes.ApplicationSummary()
        value.id = try reader["id"].readIfPresent()
        value.arn = try reader["arn"].readIfPresent()
        value.name = try reader["name"].readIfPresent()
        value.description = try reader["description"].readIfPresent()
        value.creationTime = try reader["creationTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.dateTime)
        value.lastUpdateTime = try reader["lastUpdateTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.dateTime)
        return value
    }
}

extension ServiceCatalogAppRegistryClientTypes.AttributeGroupSummary {

    static func read(from reader: SmithyJSON.Reader) throws -> ServiceCatalogAppRegistryClientTypes.AttributeGroupSummary {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ServiceCatalogAppRegistryClientTypes.AttributeGroupSummary()
        value.id = try reader["id"].readIfPresent()
        value.arn = try reader["arn"].readIfPresent()
        value.name = try reader["name"].readIfPresent()
        value.description = try reader["description"].readIfPresent()
        value.creationTime = try reader["creationTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.dateTime)
        value.lastUpdateTime = try reader["lastUpdateTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.dateTime)
        value.createdBy = try reader["createdBy"].readIfPresent()
        return value
    }
}

extension ServiceCatalogAppRegistryClientTypes.Integrations {

    static func read(from reader: SmithyJSON.Reader) throws -> ServiceCatalogAppRegistryClientTypes.Integrations {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ServiceCatalogAppRegistryClientTypes.Integrations()
        value.resourceGroup = try reader["resourceGroup"].readIfPresent(with: ServiceCatalogAppRegistryClientTypes.ResourceGroup.read(from:))
        value.applicationTagResourceGroup = try reader["applicationTagResourceGroup"].readIfPresent(with: ServiceCatalogAppRegistryClientTypes.ResourceGroup.read(from:))
        return value
    }
}

extension ServiceCatalogAppRegistryClientTypes.ResourceGroup {

    static func read(from reader: SmithyJSON.Reader) throws -> ServiceCatalogAppRegistryClientTypes.ResourceGroup {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ServiceCatalogAppRegistryClientTypes.ResourceGroup()
        value.state = try reader["state"].readIfPresent()
        value.arn = try reader["arn"].readIfPresent()
        value.errorMessage = try reader["errorMessage"].readIfPresent()
        return value
    }
}

extension ServiceCatalogAppRegistryClientTypes.Resource {

    static func read(from reader: SmithyJSON.Reader) throws -> ServiceCatalogAppRegistryClientTypes.Resource {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ServiceCatalogAppRegistryClientTypes.Resource()
        value.name = try reader["name"].readIfPresent()
        value.arn = try reader["arn"].readIfPresent()
        value.associationTime = try reader["associationTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.dateTime)
        value.integrations = try reader["integrations"].readIfPresent(with: ServiceCatalogAppRegistryClientTypes.ResourceIntegrations.read(from:))
        return value
    }
}

extension ServiceCatalogAppRegistryClientTypes.ResourceIntegrations {

    static func read(from reader: SmithyJSON.Reader) throws -> ServiceCatalogAppRegistryClientTypes.ResourceIntegrations {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ServiceCatalogAppRegistryClientTypes.ResourceIntegrations()
        value.resourceGroup = try reader["resourceGroup"].readIfPresent(with: ServiceCatalogAppRegistryClientTypes.ResourceGroup.read(from:))
        return value
    }
}

extension ServiceCatalogAppRegistryClientTypes.ApplicationTagResult {

    static func read(from reader: SmithyJSON.Reader) throws -> ServiceCatalogAppRegistryClientTypes.ApplicationTagResult {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ServiceCatalogAppRegistryClientTypes.ApplicationTagResult()
        value.applicationTagStatus = try reader["applicationTagStatus"].readIfPresent()
        value.errorMessage = try reader["errorMessage"].readIfPresent()
        value.resources = try reader["resources"].readListIfPresent(memberReadingClosure: ServiceCatalogAppRegistryClientTypes.ResourcesListItem.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.nextToken = try reader["nextToken"].readIfPresent()
        return value
    }
}

extension ServiceCatalogAppRegistryClientTypes.ResourcesListItem {

    static func read(from reader: SmithyJSON.Reader) throws -> ServiceCatalogAppRegistryClientTypes.ResourcesListItem {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ServiceCatalogAppRegistryClientTypes.ResourcesListItem()
        value.resourceArn = try reader["resourceArn"].readIfPresent()
        value.errorMessage = try reader["errorMessage"].readIfPresent()
        value.status = try reader["status"].readIfPresent()
        value.resourceType = try reader["resourceType"].readIfPresent()
        return value
    }
}

extension ServiceCatalogAppRegistryClientTypes.AppRegistryConfiguration {

    static func write(value: ServiceCatalogAppRegistryClientTypes.AppRegistryConfiguration?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["tagQueryConfiguration"].write(value.tagQueryConfiguration, with: ServiceCatalogAppRegistryClientTypes.TagQueryConfiguration.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> ServiceCatalogAppRegistryClientTypes.AppRegistryConfiguration {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ServiceCatalogAppRegistryClientTypes.AppRegistryConfiguration()
        value.tagQueryConfiguration = try reader["tagQueryConfiguration"].readIfPresent(with: ServiceCatalogAppRegistryClientTypes.TagQueryConfiguration.read(from:))
        return value
    }
}

extension ServiceCatalogAppRegistryClientTypes.TagQueryConfiguration {

    static func write(value: ServiceCatalogAppRegistryClientTypes.TagQueryConfiguration?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["tagKey"].write(value.tagKey)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> ServiceCatalogAppRegistryClientTypes.TagQueryConfiguration {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ServiceCatalogAppRegistryClientTypes.TagQueryConfiguration()
        value.tagKey = try reader["tagKey"].readIfPresent()
        return value
    }
}

extension ServiceCatalogAppRegistryClientTypes.ResourceInfo {

    static func read(from reader: SmithyJSON.Reader) throws -> ServiceCatalogAppRegistryClientTypes.ResourceInfo {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ServiceCatalogAppRegistryClientTypes.ResourceInfo()
        value.name = try reader["name"].readIfPresent()
        value.arn = try reader["arn"].readIfPresent()
        value.resourceType = try reader["resourceType"].readIfPresent()
        value.resourceDetails = try reader["resourceDetails"].readIfPresent(with: ServiceCatalogAppRegistryClientTypes.ResourceDetails.read(from:))
        value.options = try reader["options"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosureBox<ServiceCatalogAppRegistryClientTypes.AssociationOption>().read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension ServiceCatalogAppRegistryClientTypes.ResourceDetails {

    static func read(from reader: SmithyJSON.Reader) throws -> ServiceCatalogAppRegistryClientTypes.ResourceDetails {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ServiceCatalogAppRegistryClientTypes.ResourceDetails()
        value.tagValue = try reader["tagValue"].readIfPresent()
        return value
    }
}

extension ServiceCatalogAppRegistryClientTypes.AttributeGroupDetails {

    static func read(from reader: SmithyJSON.Reader) throws -> ServiceCatalogAppRegistryClientTypes.AttributeGroupDetails {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ServiceCatalogAppRegistryClientTypes.AttributeGroupDetails()
        value.id = try reader["id"].readIfPresent()
        value.arn = try reader["arn"].readIfPresent()
        value.name = try reader["name"].readIfPresent()
        value.createdBy = try reader["createdBy"].readIfPresent()
        return value
    }
}

public enum ServiceCatalogAppRegistryClientTypes {}
