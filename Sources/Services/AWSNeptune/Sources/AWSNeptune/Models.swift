//
// Copyright Amazon.com Inc. or its affiliates.
// All Rights Reserved.
//
// SPDX-License-Identifier: Apache-2.0
//

// Code generated by smithy-swift-codegen. DO NOT EDIT!

@_spi(SmithyReadWrite) import ClientRuntime
import Foundation
@_spi(SmithyReadWrite) import class SmithyFormURL.Writer
import class SmithyHTTPAPI.HTTPResponse
@_spi(SmithyReadWrite) import class SmithyXML.Reader
import enum ClientRuntime.ErrorFault
import enum SmithyReadWrite.ReaderError
@_spi(SmithyReadWrite) import enum SmithyReadWrite.ReadingClosures
@_spi(SmithyReadWrite) import enum SmithyReadWrite.WritingClosures
@_spi(SmithyTimestamps) import enum SmithyTimestamps.TimestampFormat
import protocol AWSClientRuntime.AWSServiceError
import protocol ClientRuntime.HTTPError
import protocol ClientRuntime.ModeledError
@_spi(SmithyReadWrite) import protocol SmithyReadWrite.SmithyReader
@_spi(SmithyReadWrite) import protocol SmithyReadWrite.SmithyWriter
@_spi(SmithyReadWrite) import struct AWSClientRuntime.AWSQueryError
@_spi(UnknownAWSHTTPServiceError) import struct AWSClientRuntime.UnknownAWSHTTPServiceError


public struct AddRoleToDBClusterOutput: Swift.Sendable {

    public init() { }
}

public struct AddTagsToResourceOutput: Swift.Sendable {

    public init() { }
}

public struct DeleteDBClusterParameterGroupOutput: Swift.Sendable {

    public init() { }
}

public struct DeleteDBParameterGroupOutput: Swift.Sendable {

    public init() { }
}

public struct DeleteDBSubnetGroupOutput: Swift.Sendable {

    public init() { }
}

public struct RemoveRoleFromDBClusterOutput: Swift.Sendable {

    public init() { }
}

public struct RemoveTagsFromResourceOutput: Swift.Sendable {

    public init() { }
}

/// DBClusterIdentifier does not refer to an existing DB cluster.
public struct DBClusterNotFoundFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// A message describing the details of the problem.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "DBClusterNotFoundFault" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The specified IAM role Amazon Resource Name (ARN) is already associated with the specified DB cluster.
public struct DBClusterRoleAlreadyExistsFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// A message describing the details of the problem.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "DBClusterRoleAlreadyExists" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// You have exceeded the maximum number of IAM roles that can be associated with the specified DB cluster.
public struct DBClusterRoleQuotaExceededFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// A message describing the details of the problem.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "DBClusterRoleQuotaExceeded" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The DB cluster is not in a valid state.
public struct InvalidDBClusterStateFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// A message describing the details of the problem.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidDBClusterStateFault" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

public struct AddRoleToDBClusterInput: Swift.Sendable {
    /// The name of the DB cluster to associate the IAM role with.
    /// This member is required.
    public var dbClusterIdentifier: Swift.String?
    /// The name of the feature for the Neptune DB cluster that the IAM role is to be associated with. For the list of supported feature names, see [DBEngineVersion].
    public var featureName: Swift.String?
    /// The Amazon Resource Name (ARN) of the IAM role to associate with the Neptune DB cluster, for example arn:aws:iam::123456789012:role/NeptuneAccessRole.
    /// This member is required.
    public var roleArn: Swift.String?

    public init(
        dbClusterIdentifier: Swift.String? = nil,
        featureName: Swift.String? = nil,
        roleArn: Swift.String? = nil
    )
    {
        self.dbClusterIdentifier = dbClusterIdentifier
        self.featureName = featureName
        self.roleArn = roleArn
    }
}

/// The source could not be found.
public struct SourceNotFoundFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// A message describing the details of the problem.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "SourceNotFound" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The designated subscription could not be found.
public struct SubscriptionNotFoundFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// A message describing the details of the problem.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "SubscriptionNotFound" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

public struct AddSourceIdentifierToSubscriptionInput: Swift.Sendable {
    /// The identifier of the event source to be added. Constraints:
    ///
    /// * If the source type is a DB instance, then a DBInstanceIdentifier must be supplied.
    ///
    /// * If the source type is a DB security group, a DBSecurityGroupName must be supplied.
    ///
    /// * If the source type is a DB parameter group, a DBParameterGroupName must be supplied.
    ///
    /// * If the source type is a DB snapshot, a DBSnapshotIdentifier must be supplied.
    /// This member is required.
    public var sourceIdentifier: Swift.String?
    /// The name of the event notification subscription you want to add a source identifier to.
    /// This member is required.
    public var subscriptionName: Swift.String?

    public init(
        sourceIdentifier: Swift.String? = nil,
        subscriptionName: Swift.String? = nil
    )
    {
        self.sourceIdentifier = sourceIdentifier
        self.subscriptionName = subscriptionName
    }
}

extension NeptuneClientTypes {

    /// Contains the results of a successful invocation of the [DescribeEventSubscriptions] action.
    public struct EventSubscription: Swift.Sendable {
        /// The event notification subscription Id.
        public var custSubscriptionId: Swift.String?
        /// The Amazon customer account associated with the event notification subscription.
        public var customerAwsId: Swift.String?
        /// A Boolean value indicating if the subscription is enabled. True indicates the subscription is enabled.
        public var enabled: Swift.Bool?
        /// A list of event categories for the event notification subscription.
        public var eventCategoriesList: [Swift.String]?
        /// The Amazon Resource Name (ARN) for the event subscription.
        public var eventSubscriptionArn: Swift.String?
        /// The topic ARN of the event notification subscription.
        public var snsTopicArn: Swift.String?
        /// A list of source IDs for the event notification subscription.
        public var sourceIdsList: [Swift.String]?
        /// The source type for the event notification subscription.
        public var sourceType: Swift.String?
        /// The status of the event notification subscription. Constraints: Can be one of the following: creating | modifying | deleting | active | no-permission | topic-not-exist The status "no-permission" indicates that Neptune no longer has permission to post to the SNS topic. The status "topic-not-exist" indicates that the topic was deleted after the subscription was created.
        public var status: Swift.String?
        /// The time the event notification subscription was created.
        public var subscriptionCreationTime: Swift.String?

        public init(
            custSubscriptionId: Swift.String? = nil,
            customerAwsId: Swift.String? = nil,
            enabled: Swift.Bool? = nil,
            eventCategoriesList: [Swift.String]? = nil,
            eventSubscriptionArn: Swift.String? = nil,
            snsTopicArn: Swift.String? = nil,
            sourceIdsList: [Swift.String]? = nil,
            sourceType: Swift.String? = nil,
            status: Swift.String? = nil,
            subscriptionCreationTime: Swift.String? = nil
        )
        {
            self.custSubscriptionId = custSubscriptionId
            self.customerAwsId = customerAwsId
            self.enabled = enabled
            self.eventCategoriesList = eventCategoriesList
            self.eventSubscriptionArn = eventSubscriptionArn
            self.snsTopicArn = snsTopicArn
            self.sourceIdsList = sourceIdsList
            self.sourceType = sourceType
            self.status = status
            self.subscriptionCreationTime = subscriptionCreationTime
        }
    }
}

public struct AddSourceIdentifierToSubscriptionOutput: Swift.Sendable {
    /// Contains the results of a successful invocation of the [DescribeEventSubscriptions] action.
    public var eventSubscription: NeptuneClientTypes.EventSubscription?

    public init(
        eventSubscription: NeptuneClientTypes.EventSubscription? = nil
    )
    {
        self.eventSubscription = eventSubscription
    }
}

/// DBInstanceIdentifier does not refer to an existing DB instance.
public struct DBInstanceNotFoundFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// A message describing the details of the problem.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "DBInstanceNotFound" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// DBSnapshotIdentifier does not refer to an existing DB snapshot.
public struct DBSnapshotNotFoundFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// A message describing the details of the problem.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "DBSnapshotNotFound" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension NeptuneClientTypes {

    /// Metadata assigned to an Amazon Neptune resource consisting of a key-value pair.
    public struct Tag: Swift.Sendable {
        /// A key is the required name of the tag. The string value can be from 1 to 128 Unicode characters in length and can't be prefixed with aws: or rds:. The string can only contain the set of Unicode letters, digits, white-space, '_', '.', '/', '=', '+', '-' (Java regex: "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-]*)$").
        public var key: Swift.String?
        /// A value is the optional value of the tag. The string value can be from 1 to 256 Unicode characters in length and can't be prefixed with aws: or rds:. The string can only contain the set of Unicode letters, digits, white-space, '_', '.', '/', '=', '+', '-' (Java regex: "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-]*)$").
        public var value: Swift.String?

        public init(
            key: Swift.String? = nil,
            value: Swift.String? = nil
        )
        {
            self.key = key
            self.value = value
        }
    }
}

public struct AddTagsToResourceInput: Swift.Sendable {
    /// The Amazon Neptune resource that the tags are added to. This value is an Amazon Resource Name (ARN). For information about creating an ARN, see [ Constructing an Amazon Resource Name (ARN)](https://docs.aws.amazon.com/neptune/latest/UserGuide/tagging.ARN.html#tagging.ARN.Constructing).
    /// This member is required.
    public var resourceName: Swift.String?
    /// The tags to be assigned to the Amazon Neptune resource.
    /// This member is required.
    public var tags: [NeptuneClientTypes.Tag]?

    public init(
        resourceName: Swift.String? = nil,
        tags: [NeptuneClientTypes.Tag]? = nil
    )
    {
        self.resourceName = resourceName
        self.tags = tags
    }
}

/// The specified resource ID was not found.
public struct ResourceNotFoundFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// A message describing the details of the problem.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ResourceNotFoundFault" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

public struct ApplyPendingMaintenanceActionInput: Swift.Sendable {
    /// The pending maintenance action to apply to this resource. Valid values: system-update, db-upgrade
    /// This member is required.
    public var applyAction: Swift.String?
    /// A value that specifies the type of opt-in request, or undoes an opt-in request. An opt-in request of type immediate can't be undone. Valid values:
    ///
    /// * immediate - Apply the maintenance action immediately.
    ///
    /// * next-maintenance - Apply the maintenance action during the next maintenance window for the resource.
    ///
    /// * undo-opt-in - Cancel any existing next-maintenance opt-in requests.
    /// This member is required.
    public var optInType: Swift.String?
    /// The Amazon Resource Name (ARN) of the resource that the pending maintenance action applies to. For information about creating an ARN, see [ Constructing an Amazon Resource Name (ARN)](https://docs.aws.amazon.com/neptune/latest/UserGuide/tagging.ARN.html#tagging.ARN.Constructing).
    /// This member is required.
    public var resourceIdentifier: Swift.String?

    public init(
        applyAction: Swift.String? = nil,
        optInType: Swift.String? = nil,
        resourceIdentifier: Swift.String? = nil
    )
    {
        self.applyAction = applyAction
        self.optInType = optInType
        self.resourceIdentifier = resourceIdentifier
    }
}

extension NeptuneClientTypes {

    /// Provides information about a pending maintenance action for a resource.
    public struct PendingMaintenanceAction: Swift.Sendable {
        /// The type of pending maintenance action that is available for the resource.
        public var action: Swift.String?
        /// The date of the maintenance window when the action is applied. The maintenance action is applied to the resource during its first maintenance window after this date. If this date is specified, any next-maintenance opt-in requests are ignored.
        public var autoAppliedAfterDate: Foundation.Date?
        /// The effective date when the pending maintenance action is applied to the resource. This date takes into account opt-in requests received from the [ApplyPendingMaintenanceAction] API, the AutoAppliedAfterDate, and the ForcedApplyDate. This value is blank if an opt-in request has not been received and nothing has been specified as AutoAppliedAfterDate or ForcedApplyDate.
        public var currentApplyDate: Foundation.Date?
        /// A description providing more detail about the maintenance action.
        public var description: Swift.String?
        /// The date when the maintenance action is automatically applied. The maintenance action is applied to the resource on this date regardless of the maintenance window for the resource. If this date is specified, any immediate opt-in requests are ignored.
        public var forcedApplyDate: Foundation.Date?
        /// Indicates the type of opt-in request that has been received for the resource.
        public var optInStatus: Swift.String?

        public init(
            action: Swift.String? = nil,
            autoAppliedAfterDate: Foundation.Date? = nil,
            currentApplyDate: Foundation.Date? = nil,
            description: Swift.String? = nil,
            forcedApplyDate: Foundation.Date? = nil,
            optInStatus: Swift.String? = nil
        )
        {
            self.action = action
            self.autoAppliedAfterDate = autoAppliedAfterDate
            self.currentApplyDate = currentApplyDate
            self.description = description
            self.forcedApplyDate = forcedApplyDate
            self.optInStatus = optInStatus
        }
    }
}

extension NeptuneClientTypes {

    /// Describes the pending maintenance actions for a resource.
    public struct ResourcePendingMaintenanceActions: Swift.Sendable {
        /// A list that provides details about the pending maintenance actions for the resource.
        public var pendingMaintenanceActionDetails: [NeptuneClientTypes.PendingMaintenanceAction]?
        /// The ARN of the resource that has pending maintenance actions.
        public var resourceIdentifier: Swift.String?

        public init(
            pendingMaintenanceActionDetails: [NeptuneClientTypes.PendingMaintenanceAction]? = nil,
            resourceIdentifier: Swift.String? = nil
        )
        {
            self.pendingMaintenanceActionDetails = pendingMaintenanceActionDetails
            self.resourceIdentifier = resourceIdentifier
        }
    }
}

public struct ApplyPendingMaintenanceActionOutput: Swift.Sendable {
    /// Describes the pending maintenance actions for a resource.
    public var resourcePendingMaintenanceActions: NeptuneClientTypes.ResourcePendingMaintenanceActions?

    public init(
        resourcePendingMaintenanceActions: NeptuneClientTypes.ResourcePendingMaintenanceActions? = nil
    )
    {
        self.resourcePendingMaintenanceActions = resourcePendingMaintenanceActions
    }
}

/// A DB parameter group with the same name exists.
public struct DBParameterGroupAlreadyExistsFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// A message describing the details of the problem.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "DBParameterGroupAlreadyExists" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// DBParameterGroupName does not refer to an existing DB parameter group.
public struct DBParameterGroupNotFoundFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// A message describing the details of the problem.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "DBParameterGroupNotFound" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// Request would result in user exceeding the allowed number of DB parameter groups.
public struct DBParameterGroupQuotaExceededFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// A message describing the details of the problem.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "DBParameterGroupQuotaExceeded" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

public struct CopyDBClusterParameterGroupInput: Swift.Sendable {
    /// The identifier or Amazon Resource Name (ARN) for the source DB cluster parameter group. For information about creating an ARN, see [ Constructing an Amazon Resource Name (ARN)](https://docs.aws.amazon.com/neptune/latest/UserGuide/tagging.ARN.html#tagging.ARN.Constructing). Constraints:
    ///
    /// * Must specify a valid DB cluster parameter group.
    ///
    /// * If the source DB cluster parameter group is in the same Amazon Region as the copy, specify a valid DB parameter group identifier, for example my-db-cluster-param-group, or a valid ARN.
    ///
    /// * If the source DB parameter group is in a different Amazon Region than the copy, specify a valid DB cluster parameter group ARN, for example arn:aws:rds:us-east-1:123456789012:cluster-pg:custom-cluster-group1.
    /// This member is required.
    public var sourceDBClusterParameterGroupIdentifier: Swift.String?
    /// The tags to be assigned to the copied DB cluster parameter group.
    public var tags: [NeptuneClientTypes.Tag]?
    /// A description for the copied DB cluster parameter group.
    /// This member is required.
    public var targetDBClusterParameterGroupDescription: Swift.String?
    /// The identifier for the copied DB cluster parameter group. Constraints:
    ///
    /// * Cannot be null, empty, or blank
    ///
    /// * Must contain from 1 to 255 letters, numbers, or hyphens
    ///
    /// * First character must be a letter
    ///
    /// * Cannot end with a hyphen or contain two consecutive hyphens
    ///
    ///
    /// Example: my-cluster-param-group1
    /// This member is required.
    public var targetDBClusterParameterGroupIdentifier: Swift.String?

    public init(
        sourceDBClusterParameterGroupIdentifier: Swift.String? = nil,
        tags: [NeptuneClientTypes.Tag]? = nil,
        targetDBClusterParameterGroupDescription: Swift.String? = nil,
        targetDBClusterParameterGroupIdentifier: Swift.String? = nil
    )
    {
        self.sourceDBClusterParameterGroupIdentifier = sourceDBClusterParameterGroupIdentifier
        self.tags = tags
        self.targetDBClusterParameterGroupDescription = targetDBClusterParameterGroupDescription
        self.targetDBClusterParameterGroupIdentifier = targetDBClusterParameterGroupIdentifier
    }
}

extension NeptuneClientTypes {

    /// Contains the details of an Amazon Neptune DB cluster parameter group. This data type is used as a response element in the [DescribeDBClusterParameterGroups] action.
    public struct DBClusterParameterGroup: Swift.Sendable {
        /// The Amazon Resource Name (ARN) for the DB cluster parameter group.
        public var dbClusterParameterGroupArn: Swift.String?
        /// Provides the name of the DB cluster parameter group.
        public var dbClusterParameterGroupName: Swift.String?
        /// Provides the name of the DB parameter group family that this DB cluster parameter group is compatible with.
        public var dbParameterGroupFamily: Swift.String?
        /// Provides the customer-specified description for this DB cluster parameter group.
        public var description: Swift.String?

        public init(
            dbClusterParameterGroupArn: Swift.String? = nil,
            dbClusterParameterGroupName: Swift.String? = nil,
            dbParameterGroupFamily: Swift.String? = nil,
            description: Swift.String? = nil
        )
        {
            self.dbClusterParameterGroupArn = dbClusterParameterGroupArn
            self.dbClusterParameterGroupName = dbClusterParameterGroupName
            self.dbParameterGroupFamily = dbParameterGroupFamily
            self.description = description
        }
    }
}

public struct CopyDBClusterParameterGroupOutput: Swift.Sendable {
    /// Contains the details of an Amazon Neptune DB cluster parameter group. This data type is used as a response element in the [DescribeDBClusterParameterGroups] action.
    public var dbClusterParameterGroup: NeptuneClientTypes.DBClusterParameterGroup?

    public init(
        dbClusterParameterGroup: NeptuneClientTypes.DBClusterParameterGroup? = nil
    )
    {
        self.dbClusterParameterGroup = dbClusterParameterGroup
    }
}

/// User already has a DB cluster snapshot with the given identifier.
public struct DBClusterSnapshotAlreadyExistsFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// A message describing the details of the problem.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "DBClusterSnapshotAlreadyExistsFault" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// DBClusterSnapshotIdentifier does not refer to an existing DB cluster snapshot.
public struct DBClusterSnapshotNotFoundFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// A message describing the details of the problem.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "DBClusterSnapshotNotFoundFault" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The supplied value is not a valid DB cluster snapshot state.
public struct InvalidDBClusterSnapshotStateFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// A message describing the details of the problem.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidDBClusterSnapshotStateFault" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// Error accessing KMS key.
public struct KMSKeyNotAccessibleFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// A message describing the details of the problem.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "KMSKeyNotAccessibleFault" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// Request would result in user exceeding the allowed number of DB snapshots.
public struct SnapshotQuotaExceededFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// A message describing the details of the problem.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "SnapshotQuotaExceeded" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

public struct CopyDBClusterSnapshotInput: Swift.Sendable {
    /// True to copy all tags from the source DB cluster snapshot to the target DB cluster snapshot, and otherwise false. The default is false.
    public var copyTags: Swift.Bool?
    /// The Amazon Amazon KMS key ID for an encrypted DB cluster snapshot. The KMS key ID is the Amazon Resource Name (ARN), KMS key identifier, or the KMS key alias for the KMS encryption key. If you copy an encrypted DB cluster snapshot from your Amazon account, you can specify a value for KmsKeyId to encrypt the copy with a new KMS encryption key. If you don't specify a value for KmsKeyId, then the copy of the DB cluster snapshot is encrypted with the same KMS key as the source DB cluster snapshot. If you copy an encrypted DB cluster snapshot that is shared from another Amazon account, then you must specify a value for KmsKeyId. KMS encryption keys are specific to the Amazon Region that they are created in, and you can't use encryption keys from one Amazon Region in another Amazon Region. You cannot encrypt an unencrypted DB cluster snapshot when you copy it. If you try to copy an unencrypted DB cluster snapshot and specify a value for the KmsKeyId parameter, an error is returned.
    public var kmsKeyId: Swift.String?
    /// Not currently supported.
    public var preSignedUrl: Swift.String?
    /// The identifier of the DB cluster snapshot to copy. This parameter is not case-sensitive. Constraints:
    ///
    /// * Must specify a valid system snapshot in the "available" state.
    ///
    /// * Specify a valid DB snapshot identifier.
    ///
    ///
    /// Example: my-cluster-snapshot1
    /// This member is required.
    public var sourceDBClusterSnapshotIdentifier: Swift.String?
    /// The tags to assign to the new DB cluster snapshot copy.
    public var tags: [NeptuneClientTypes.Tag]?
    /// The identifier of the new DB cluster snapshot to create from the source DB cluster snapshot. This parameter is not case-sensitive. Constraints:
    ///
    /// * Must contain from 1 to 63 letters, numbers, or hyphens.
    ///
    /// * First character must be a letter.
    ///
    /// * Cannot end with a hyphen or contain two consecutive hyphens.
    ///
    ///
    /// Example: my-cluster-snapshot2
    /// This member is required.
    public var targetDBClusterSnapshotIdentifier: Swift.String?

    public init(
        copyTags: Swift.Bool? = nil,
        kmsKeyId: Swift.String? = nil,
        preSignedUrl: Swift.String? = nil,
        sourceDBClusterSnapshotIdentifier: Swift.String? = nil,
        tags: [NeptuneClientTypes.Tag]? = nil,
        targetDBClusterSnapshotIdentifier: Swift.String? = nil
    )
    {
        self.copyTags = copyTags
        self.kmsKeyId = kmsKeyId
        self.preSignedUrl = preSignedUrl
        self.sourceDBClusterSnapshotIdentifier = sourceDBClusterSnapshotIdentifier
        self.tags = tags
        self.targetDBClusterSnapshotIdentifier = targetDBClusterSnapshotIdentifier
    }
}

extension NeptuneClientTypes {

    /// Contains the details for an Amazon Neptune DB cluster snapshot This data type is used as a response element in the [DescribeDBClusterSnapshots] action.
    public struct DBClusterSnapshot: Swift.Sendable {
        /// Specifies the allocated storage size in gibibytes (GiB).
        public var allocatedStorage: Swift.Int?
        /// Provides the list of EC2 Availability Zones that instances in the DB cluster snapshot can be restored in.
        public var availabilityZones: [Swift.String]?
        /// Specifies the time when the DB cluster was created, in Universal Coordinated Time (UTC).
        public var clusterCreateTime: Foundation.Date?
        /// Specifies the DB cluster identifier of the DB cluster that this DB cluster snapshot was created from.
        public var dbClusterIdentifier: Swift.String?
        /// The Amazon Resource Name (ARN) for the DB cluster snapshot.
        public var dbClusterSnapshotArn: Swift.String?
        /// Specifies the identifier for a DB cluster snapshot. Must match the identifier of an existing snapshot. After you restore a DB cluster using a DBClusterSnapshotIdentifier, you must specify the same DBClusterSnapshotIdentifier for any future updates to the DB cluster. When you specify this property for an update, the DB cluster is not restored from the snapshot again, and the data in the database is not changed. However, if you don't specify the DBClusterSnapshotIdentifier, an empty DB cluster is created, and the original DB cluster is deleted. If you specify a property that is different from the previous snapshot restore property, the DB cluster is restored from the snapshot specified by the DBClusterSnapshotIdentifier, and the original DB cluster is deleted.
        public var dbClusterSnapshotIdentifier: Swift.String?
        /// Specifies the name of the database engine.
        public var engine: Swift.String?
        /// Provides the version of the database engine for this DB cluster snapshot.
        public var engineVersion: Swift.String?
        /// True if mapping of Amazon Identity and Access Management (IAM) accounts to database accounts is enabled, and otherwise false.
        public var iamDatabaseAuthenticationEnabled: Swift.Bool?
        /// If StorageEncrypted is true, the Amazon KMS key identifier for the encrypted DB cluster snapshot.
        public var kmsKeyId: Swift.String?
        /// Provides the license model information for this DB cluster snapshot.
        public var licenseModel: Swift.String?
        /// Not supported by Neptune.
        public var masterUsername: Swift.String?
        /// Specifies the percentage of the estimated data that has been transferred.
        public var percentProgress: Swift.Int?
        /// Specifies the port that the DB cluster was listening on at the time of the snapshot.
        public var port: Swift.Int?
        /// Provides the time when the snapshot was taken, in Universal Coordinated Time (UTC).
        public var snapshotCreateTime: Foundation.Date?
        /// Provides the type of the DB cluster snapshot.
        public var snapshotType: Swift.String?
        /// If the DB cluster snapshot was copied from a source DB cluster snapshot, the Amazon Resource Name (ARN) for the source DB cluster snapshot, otherwise, a null value.
        public var sourceDBClusterSnapshotArn: Swift.String?
        /// Specifies the status of this DB cluster snapshot.
        public var status: Swift.String?
        /// Specifies whether the DB cluster snapshot is encrypted.
        public var storageEncrypted: Swift.Bool?
        /// The storage type associated with the DB cluster snapshot.
        public var storageType: Swift.String?
        /// Provides the VPC ID associated with the DB cluster snapshot.
        public var vpcId: Swift.String?

        public init(
            allocatedStorage: Swift.Int? = nil,
            availabilityZones: [Swift.String]? = nil,
            clusterCreateTime: Foundation.Date? = nil,
            dbClusterIdentifier: Swift.String? = nil,
            dbClusterSnapshotArn: Swift.String? = nil,
            dbClusterSnapshotIdentifier: Swift.String? = nil,
            engine: Swift.String? = nil,
            engineVersion: Swift.String? = nil,
            iamDatabaseAuthenticationEnabled: Swift.Bool? = nil,
            kmsKeyId: Swift.String? = nil,
            licenseModel: Swift.String? = nil,
            masterUsername: Swift.String? = nil,
            percentProgress: Swift.Int? = nil,
            port: Swift.Int? = nil,
            snapshotCreateTime: Foundation.Date? = nil,
            snapshotType: Swift.String? = nil,
            sourceDBClusterSnapshotArn: Swift.String? = nil,
            status: Swift.String? = nil,
            storageEncrypted: Swift.Bool? = nil,
            storageType: Swift.String? = nil,
            vpcId: Swift.String? = nil
        )
        {
            self.allocatedStorage = allocatedStorage
            self.availabilityZones = availabilityZones
            self.clusterCreateTime = clusterCreateTime
            self.dbClusterIdentifier = dbClusterIdentifier
            self.dbClusterSnapshotArn = dbClusterSnapshotArn
            self.dbClusterSnapshotIdentifier = dbClusterSnapshotIdentifier
            self.engine = engine
            self.engineVersion = engineVersion
            self.iamDatabaseAuthenticationEnabled = iamDatabaseAuthenticationEnabled
            self.kmsKeyId = kmsKeyId
            self.licenseModel = licenseModel
            self.masterUsername = masterUsername
            self.percentProgress = percentProgress
            self.port = port
            self.snapshotCreateTime = snapshotCreateTime
            self.snapshotType = snapshotType
            self.sourceDBClusterSnapshotArn = sourceDBClusterSnapshotArn
            self.status = status
            self.storageEncrypted = storageEncrypted
            self.storageType = storageType
            self.vpcId = vpcId
        }
    }
}

public struct CopyDBClusterSnapshotOutput: Swift.Sendable {
    /// Contains the details for an Amazon Neptune DB cluster snapshot This data type is used as a response element in the [DescribeDBClusterSnapshots] action.
    public var dbClusterSnapshot: NeptuneClientTypes.DBClusterSnapshot?

    public init(
        dbClusterSnapshot: NeptuneClientTypes.DBClusterSnapshot? = nil
    )
    {
        self.dbClusterSnapshot = dbClusterSnapshot
    }
}

public struct CopyDBParameterGroupInput: Swift.Sendable {
    /// The identifier or ARN for the source DB parameter group. For information about creating an ARN, see [ Constructing an Amazon Resource Name (ARN)](https://docs.aws.amazon.com/neptune/latest/UserGuide/tagging.ARN.html#tagging.ARN.Constructing). Constraints:
    ///
    /// * Must specify a valid DB parameter group.
    ///
    /// * Must specify a valid DB parameter group identifier, for example my-db-param-group, or a valid ARN.
    /// This member is required.
    public var sourceDBParameterGroupIdentifier: Swift.String?
    /// The tags to be assigned to the copied DB parameter group.
    public var tags: [NeptuneClientTypes.Tag]?
    /// A description for the copied DB parameter group.
    /// This member is required.
    public var targetDBParameterGroupDescription: Swift.String?
    /// The identifier for the copied DB parameter group. Constraints:
    ///
    /// * Cannot be null, empty, or blank.
    ///
    /// * Must contain from 1 to 255 letters, numbers, or hyphens.
    ///
    /// * First character must be a letter.
    ///
    /// * Cannot end with a hyphen or contain two consecutive hyphens.
    ///
    ///
    /// Example: my-db-parameter-group
    /// This member is required.
    public var targetDBParameterGroupIdentifier: Swift.String?

    public init(
        sourceDBParameterGroupIdentifier: Swift.String? = nil,
        tags: [NeptuneClientTypes.Tag]? = nil,
        targetDBParameterGroupDescription: Swift.String? = nil,
        targetDBParameterGroupIdentifier: Swift.String? = nil
    )
    {
        self.sourceDBParameterGroupIdentifier = sourceDBParameterGroupIdentifier
        self.tags = tags
        self.targetDBParameterGroupDescription = targetDBParameterGroupDescription
        self.targetDBParameterGroupIdentifier = targetDBParameterGroupIdentifier
    }
}

extension NeptuneClientTypes {

    /// Contains the details of an Amazon Neptune DB parameter group. This data type is used as a response element in the [DescribeDBParameterGroups] action.
    public struct DBParameterGroup: Swift.Sendable {
        /// The Amazon Resource Name (ARN) for the DB parameter group.
        public var dbParameterGroupArn: Swift.String?
        /// Provides the name of the DB parameter group family that this DB parameter group is compatible with.
        public var dbParameterGroupFamily: Swift.String?
        /// Provides the name of the DB parameter group.
        public var dbParameterGroupName: Swift.String?
        /// Provides the customer-specified description for this DB parameter group.
        public var description: Swift.String?

        public init(
            dbParameterGroupArn: Swift.String? = nil,
            dbParameterGroupFamily: Swift.String? = nil,
            dbParameterGroupName: Swift.String? = nil,
            description: Swift.String? = nil
        )
        {
            self.dbParameterGroupArn = dbParameterGroupArn
            self.dbParameterGroupFamily = dbParameterGroupFamily
            self.dbParameterGroupName = dbParameterGroupName
            self.description = description
        }
    }
}

public struct CopyDBParameterGroupOutput: Swift.Sendable {
    /// Contains the details of an Amazon Neptune DB parameter group. This data type is used as a response element in the [DescribeDBParameterGroups] action.
    public var dbParameterGroup: NeptuneClientTypes.DBParameterGroup?

    public init(
        dbParameterGroup: NeptuneClientTypes.DBParameterGroup? = nil
    )
    {
        self.dbParameterGroup = dbParameterGroup
    }
}

/// User already has a DB cluster with the given identifier.
public struct DBClusterAlreadyExistsFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// A message describing the details of the problem.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "DBClusterAlreadyExistsFault" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// DBClusterParameterGroupName does not refer to an existing DB Cluster parameter group.
public struct DBClusterParameterGroupNotFoundFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// A message describing the details of the problem.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "DBClusterParameterGroupNotFound" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// User attempted to create a new DB cluster and the user has already reached the maximum allowed DB cluster quota.
public struct DBClusterQuotaExceededFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// A message describing the details of the problem.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "DBClusterQuotaExceededFault" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// Subnets in the DB subnet group should cover at least two Availability Zones unless there is only one Availability Zone.
public struct DBSubnetGroupDoesNotCoverEnoughAZs: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// A message describing the details of the problem.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "DBSubnetGroupDoesNotCoverEnoughAZs" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// DBSubnetGroupName does not refer to an existing DB subnet group.
public struct DBSubnetGroupNotFoundFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// A message describing the details of the problem.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "DBSubnetGroupNotFoundFault" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The GlobalClusterIdentifier doesn't refer to an existing global database cluster.
public struct GlobalClusterNotFoundFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// A message describing the details of the problem.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "GlobalClusterNotFoundFault" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// There is insufficient storage available for the current action. You may be able to resolve this error by updating your subnet group to use different Availability Zones that have more storage available.
public struct InsufficientStorageClusterCapacityFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// A message describing the details of the problem.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InsufficientStorageClusterCapacity" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The specified DB instance is not in the available state.
public struct InvalidDBInstanceStateFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// A message describing the details of the problem.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidDBInstanceState" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The DB subnet group cannot be deleted because it is in use.
public struct InvalidDBSubnetGroupStateFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// A message describing the details of the problem.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidDBSubnetGroupStateFault" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The global cluster is in an invalid state and can't perform the requested operation.
public struct InvalidGlobalClusterStateFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// A message describing the details of the problem.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidGlobalClusterStateFault" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The requested subnet is invalid, or multiple subnets were requested that are not all in a common VPC.
public struct InvalidSubnet: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// A message describing the details of the problem.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidSubnet" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// DB subnet group does not cover all Availability Zones after it is created because users' change.
public struct InvalidVPCNetworkStateFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// A message describing the details of the problem.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidVPCNetworkStateFault" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// Request would result in user exceeding the allowed amount of storage available across all DB instances.
public struct StorageQuotaExceededFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// A message describing the details of the problem.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "StorageQuotaExceeded" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension NeptuneClientTypes {

    /// Contains the scaling configuration of a Neptune Serverless DB cluster. For more information, see [Using Amazon Neptune Serverless](https://docs.aws.amazon.com/neptune/latest/userguide/neptune-serverless-using.html) in the Amazon Neptune User Guide.
    public struct ServerlessV2ScalingConfiguration: Swift.Sendable {
        /// The maximum number of Neptune capacity units (NCUs) for a DB instance in a Neptune Serverless cluster. You can specify NCU values in half-step increments, such as 40, 40.5, 41, and so on.
        public var maxCapacity: Swift.Double?
        /// The minimum number of Neptune capacity units (NCUs) for a DB instance in a Neptune Serverless cluster. You can specify NCU values in half-step increments, such as 8, 8.5, 9, and so on.
        public var minCapacity: Swift.Double?

        public init(
            maxCapacity: Swift.Double? = nil,
            minCapacity: Swift.Double? = nil
        )
        {
            self.maxCapacity = maxCapacity
            self.minCapacity = minCapacity
        }
    }
}

public struct CreateDBClusterInput: Swift.Sendable {
    /// A list of EC2 Availability Zones that instances in the DB cluster can be created in.
    public var availabilityZones: [Swift.String]?
    /// The number of days for which automated backups are retained. You must specify a minimum value of 1. Default: 1 Constraints:
    ///
    /// * Must be a value from 1 to 35
    public var backupRetentionPeriod: Swift.Int?
    /// (Not supported by Neptune)
    public var characterSetName: Swift.String?
    /// If set to true, tags are copied to any snapshot of the DB cluster that is created.
    public var copyTagsToSnapshot: Swift.Bool?
    /// The name for your database of up to 64 alpha-numeric characters. If you do not provide a name, Amazon Neptune will not create a database in the DB cluster you are creating.
    public var databaseName: Swift.String?
    /// The DB cluster identifier. This parameter is stored as a lowercase string. Constraints:
    ///
    /// * Must contain from 1 to 63 letters, numbers, or hyphens.
    ///
    /// * First character must be a letter.
    ///
    /// * Cannot end with a hyphen or contain two consecutive hyphens.
    ///
    ///
    /// Example: my-cluster1
    /// This member is required.
    public var dbClusterIdentifier: Swift.String?
    /// The name of the DB cluster parameter group to associate with this DB cluster. If this argument is omitted, the default is used. Constraints:
    ///
    /// * If supplied, must match the name of an existing DBClusterParameterGroup.
    public var dbClusterParameterGroupName: Swift.String?
    /// A DB subnet group to associate with this DB cluster. Constraints: Must match the name of an existing DBSubnetGroup. Must not be default. Example: mySubnetgroup
    public var dbSubnetGroupName: Swift.String?
    /// A value that indicates whether the DB cluster has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is enabled.
    public var deletionProtection: Swift.Bool?
    /// A list of the log types that this DB cluster should export to CloudWatch Logs. Valid log types are: audit (to publish audit logs) and slowquery (to publish slow-query logs). See [Publishing Neptune logs to Amazon CloudWatch logs](https://docs.aws.amazon.com/neptune/latest/userguide/cloudwatch-logs.html).
    public var enableCloudwatchLogsExports: [Swift.String]?
    /// If set to true, enables Amazon Identity and Access Management (IAM) authentication for the entire DB cluster (this cannot be set at an instance level). Default: false.
    public var enableIAMDatabaseAuthentication: Swift.Bool?
    /// The name of the database engine to be used for this DB cluster. Valid Values: neptune
    /// This member is required.
    public var engine: Swift.String?
    /// The version number of the database engine to use for the new DB cluster. Example: 1.0.2.1
    public var engineVersion: Swift.String?
    /// The ID of the Neptune global database to which this new DB cluster should be added.
    public var globalClusterIdentifier: Swift.String?
    /// The Amazon KMS key identifier for an encrypted DB cluster. The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are creating a DB cluster with the same Amazon account that owns the KMS encryption key used to encrypt the new DB cluster, then you can use the KMS key alias instead of the ARN for the KMS encryption key. If an encryption key is not specified in KmsKeyId:
    ///
    /// * If ReplicationSourceIdentifier identifies an encrypted source, then Amazon Neptune will use the encryption key used to encrypt the source. Otherwise, Amazon Neptune will use your default encryption key.
    ///
    /// * If the StorageEncrypted parameter is true and ReplicationSourceIdentifier is not specified, then Amazon Neptune will use your default encryption key.
    ///
    ///
    /// Amazon KMS creates the default encryption key for your Amazon account. Your Amazon account has a different default encryption key for each Amazon Region. If you create a Read Replica of an encrypted DB cluster in another Amazon Region, you must set KmsKeyId to a KMS key ID that is valid in the destination Amazon Region. This key is used to encrypt the Read Replica in that Amazon Region.
    public var kmsKeyId: Swift.String?
    /// Not supported by Neptune.
    public var masterUserPassword: Swift.String?
    /// Not supported by Neptune.
    public var masterUsername: Swift.String?
    /// (Not supported by Neptune)
    public var optionGroupName: Swift.String?
    /// The port number on which the instances in the DB cluster accept connections. Default: 8182
    public var port: Swift.Int?
    /// This parameter is not currently supported.
    public var preSignedUrl: Swift.String?
    /// The daily time range during which automated backups are created if automated backups are enabled using the BackupRetentionPeriod parameter. The default is a 30-minute window selected at random from an 8-hour block of time for each Amazon Region. To see the time blocks available, see [Neptune Maintenance Window](https://docs.aws.amazon.com/neptune/latest/userguide/manage-console-maintaining.html#manage-console-maintaining-window) in the Amazon Neptune User Guide. Constraints:
    ///
    /// * Must be in the format hh24:mi-hh24:mi.
    ///
    /// * Must be in Universal Coordinated Time (UTC).
    ///
    /// * Must not conflict with the preferred maintenance window.
    ///
    /// * Must be at least 30 minutes.
    public var preferredBackupWindow: Swift.String?
    /// The weekly time range during which system maintenance can occur, in Universal Coordinated Time (UTC). Format: ddd:hh24:mi-ddd:hh24:mi The default is a 30-minute window selected at random from an 8-hour block of time for each Amazon Region, occurring on a random day of the week. To see the time blocks available, see [Neptune Maintenance Window](https://docs.aws.amazon.com/neptune/latest/userguide/manage-console-maintaining.html#manage-console-maintaining-window) in the Amazon Neptune User Guide. Valid Days: Mon, Tue, Wed, Thu, Fri, Sat, Sun. Constraints: Minimum 30-minute window.
    public var preferredMaintenanceWindow: Swift.String?
    /// The Amazon Resource Name (ARN) of the source DB instance or DB cluster if this DB cluster is created as a Read Replica.
    public var replicationSourceIdentifier: Swift.String?
    /// Contains the scaling configuration of a Neptune Serverless DB cluster. For more information, see [Using Amazon Neptune Serverless](https://docs.aws.amazon.com/neptune/latest/userguide/neptune-serverless-using.html) in the Amazon Neptune User Guide.
    public var serverlessV2ScalingConfiguration: NeptuneClientTypes.ServerlessV2ScalingConfiguration?
    /// Specifies whether the DB cluster is encrypted.
    public var storageEncrypted: Swift.Bool?
    /// The storage type to associate with the DB cluster. Valid Values:
    ///
    /// * standard | iopt1
    ///
    ///
    /// Default:
    ///
    /// * standard
    ///
    ///
    /// When you create a Neptune cluster with the storage type set to iopt1, the storage type is returned in the response. The storage type isn't returned when you set it to standard.
    public var storageType: Swift.String?
    /// The tags to assign to the new DB cluster.
    public var tags: [NeptuneClientTypes.Tag]?
    /// A list of EC2 VPC security groups to associate with this DB cluster.
    public var vpcSecurityGroupIds: [Swift.String]?

    public init(
        availabilityZones: [Swift.String]? = nil,
        backupRetentionPeriod: Swift.Int? = nil,
        characterSetName: Swift.String? = nil,
        copyTagsToSnapshot: Swift.Bool? = nil,
        databaseName: Swift.String? = nil,
        dbClusterIdentifier: Swift.String? = nil,
        dbClusterParameterGroupName: Swift.String? = nil,
        dbSubnetGroupName: Swift.String? = nil,
        deletionProtection: Swift.Bool? = nil,
        enableCloudwatchLogsExports: [Swift.String]? = nil,
        enableIAMDatabaseAuthentication: Swift.Bool? = nil,
        engine: Swift.String? = nil,
        engineVersion: Swift.String? = nil,
        globalClusterIdentifier: Swift.String? = nil,
        kmsKeyId: Swift.String? = nil,
        masterUserPassword: Swift.String? = nil,
        masterUsername: Swift.String? = nil,
        optionGroupName: Swift.String? = nil,
        port: Swift.Int? = nil,
        preSignedUrl: Swift.String? = nil,
        preferredBackupWindow: Swift.String? = nil,
        preferredMaintenanceWindow: Swift.String? = nil,
        replicationSourceIdentifier: Swift.String? = nil,
        serverlessV2ScalingConfiguration: NeptuneClientTypes.ServerlessV2ScalingConfiguration? = nil,
        storageEncrypted: Swift.Bool? = nil,
        storageType: Swift.String? = nil,
        tags: [NeptuneClientTypes.Tag]? = nil,
        vpcSecurityGroupIds: [Swift.String]? = nil
    )
    {
        self.availabilityZones = availabilityZones
        self.backupRetentionPeriod = backupRetentionPeriod
        self.characterSetName = characterSetName
        self.copyTagsToSnapshot = copyTagsToSnapshot
        self.databaseName = databaseName
        self.dbClusterIdentifier = dbClusterIdentifier
        self.dbClusterParameterGroupName = dbClusterParameterGroupName
        self.dbSubnetGroupName = dbSubnetGroupName
        self.deletionProtection = deletionProtection
        self.enableCloudwatchLogsExports = enableCloudwatchLogsExports
        self.enableIAMDatabaseAuthentication = enableIAMDatabaseAuthentication
        self.engine = engine
        self.engineVersion = engineVersion
        self.globalClusterIdentifier = globalClusterIdentifier
        self.kmsKeyId = kmsKeyId
        self.masterUserPassword = masterUserPassword
        self.masterUsername = masterUsername
        self.optionGroupName = optionGroupName
        self.port = port
        self.preSignedUrl = preSignedUrl
        self.preferredBackupWindow = preferredBackupWindow
        self.preferredMaintenanceWindow = preferredMaintenanceWindow
        self.replicationSourceIdentifier = replicationSourceIdentifier
        self.serverlessV2ScalingConfiguration = serverlessV2ScalingConfiguration
        self.storageEncrypted = storageEncrypted
        self.storageType = storageType
        self.tags = tags
        self.vpcSecurityGroupIds = vpcSecurityGroupIds
    }
}

extension NeptuneClientTypes {

    /// Describes an Amazon Identity and Access Management (IAM) role that is associated with a DB cluster.
    public struct DBClusterRole: Swift.Sendable {
        /// The name of the feature associated with the Amazon Identity and Access Management (IAM) role. For the list of supported feature names, see [DescribeDBEngineVersions].
        public var featureName: Swift.String?
        /// The Amazon Resource Name (ARN) of the IAM role that is associated with the DB cluster.
        public var roleArn: Swift.String?
        /// Describes the state of association between the IAM role and the DB cluster. The Status property returns one of the following values:
        ///
        /// * ACTIVE - the IAM role ARN is associated with the DB cluster and can be used to access other Amazon services on your behalf.
        ///
        /// * PENDING - the IAM role ARN is being associated with the DB cluster.
        ///
        /// * INVALID - the IAM role ARN is associated with the DB cluster, but the DB cluster is unable to assume the IAM role in order to access other Amazon services on your behalf.
        public var status: Swift.String?

        public init(
            featureName: Swift.String? = nil,
            roleArn: Swift.String? = nil,
            status: Swift.String? = nil
        )
        {
            self.featureName = featureName
            self.roleArn = roleArn
            self.status = status
        }
    }
}

extension NeptuneClientTypes {

    /// Contains information about an instance that is part of a DB cluster.
    public struct DBClusterMember: Swift.Sendable {
        /// Specifies the status of the DB cluster parameter group for this member of the DB cluster.
        public var dbClusterParameterGroupStatus: Swift.String?
        /// Specifies the instance identifier for this member of the DB cluster.
        public var dbInstanceIdentifier: Swift.String?
        /// Value that is true if the cluster member is the primary instance for the DB cluster and false otherwise.
        public var isClusterWriter: Swift.Bool?
        /// A value that specifies the order in which a Read Replica is promoted to the primary instance after a failure of the existing primary instance.
        public var promotionTier: Swift.Int?

        public init(
            dbClusterParameterGroupStatus: Swift.String? = nil,
            dbInstanceIdentifier: Swift.String? = nil,
            isClusterWriter: Swift.Bool? = nil,
            promotionTier: Swift.Int? = nil
        )
        {
            self.dbClusterParameterGroupStatus = dbClusterParameterGroupStatus
            self.dbInstanceIdentifier = dbInstanceIdentifier
            self.isClusterWriter = isClusterWriter
            self.promotionTier = promotionTier
        }
    }
}

extension NeptuneClientTypes {

    /// Not supported by Neptune.
    public struct DBClusterOptionGroupStatus: Swift.Sendable {
        /// Not supported by Neptune.
        public var dbClusterOptionGroupName: Swift.String?
        /// Not supported by Neptune.
        public var status: Swift.String?

        public init(
            dbClusterOptionGroupName: Swift.String? = nil,
            status: Swift.String? = nil
        )
        {
            self.dbClusterOptionGroupName = dbClusterOptionGroupName
            self.status = status
        }
    }
}

extension NeptuneClientTypes {

    /// A list of the log types whose configuration is still pending. In other words, these log types are in the process of being activated or deactivated. Valid log types are: audit (to publish audit logs) and slowquery (to publish slow-query logs). See [Publishing Neptune logs to Amazon CloudWatch logs](https://docs.aws.amazon.com/neptune/latest/userguide/cloudwatch-logs.html).
    public struct PendingCloudwatchLogsExports: Swift.Sendable {
        /// Log types that are in the process of being enabled. After they are enabled, these log types are exported to CloudWatch Logs.
        public var logTypesToDisable: [Swift.String]?
        /// Log types that are in the process of being deactivated. After they are deactivated, these log types aren't exported to CloudWatch Logs.
        public var logTypesToEnable: [Swift.String]?

        public init(
            logTypesToDisable: [Swift.String]? = nil,
            logTypesToEnable: [Swift.String]? = nil
        )
        {
            self.logTypesToDisable = logTypesToDisable
            self.logTypesToEnable = logTypesToEnable
        }
    }
}

extension NeptuneClientTypes {

    /// This data type is used as a response element in the ModifyDBCluster operation and contains changes that will be applied during the next maintenance window.
    public struct ClusterPendingModifiedValues: Swift.Sendable {
        /// The allocated storage size in gibibytes (GiB) for database engines. For Neptune, AllocatedStorage always returns 1, because Neptune DB cluster storage size isn't fixed, but instead automatically adjusts as needed.
        public var allocatedStorage: Swift.Int?
        /// The number of days for which automatic DB snapshots are retained.
        public var backupRetentionPeriod: Swift.Int?
        /// The DBClusterIdentifier value for the DB cluster.
        public var dbClusterIdentifier: Swift.String?
        /// The database engine version.
        public var engineVersion: Swift.String?
        /// A value that indicates whether mapping of Amazon Web Services Identity and Access Management (IAM) accounts to database accounts is enabled.
        public var iamDatabaseAuthenticationEnabled: Swift.Bool?
        /// The Provisioned IOPS (I/O operations per second) value. This setting is only for non-Aurora Multi-AZ DB clusters.
        public var iops: Swift.Int?
        /// This PendingCloudwatchLogsExports structure specifies pending changes to which CloudWatch logs are enabled and which are disabled.
        public var pendingCloudwatchLogsExports: NeptuneClientTypes.PendingCloudwatchLogsExports?
        /// The storage type for the DB cluster.
        public var storageType: Swift.String?

        public init(
            allocatedStorage: Swift.Int? = nil,
            backupRetentionPeriod: Swift.Int? = nil,
            dbClusterIdentifier: Swift.String? = nil,
            engineVersion: Swift.String? = nil,
            iamDatabaseAuthenticationEnabled: Swift.Bool? = nil,
            iops: Swift.Int? = nil,
            pendingCloudwatchLogsExports: NeptuneClientTypes.PendingCloudwatchLogsExports? = nil,
            storageType: Swift.String? = nil
        )
        {
            self.allocatedStorage = allocatedStorage
            self.backupRetentionPeriod = backupRetentionPeriod
            self.dbClusterIdentifier = dbClusterIdentifier
            self.engineVersion = engineVersion
            self.iamDatabaseAuthenticationEnabled = iamDatabaseAuthenticationEnabled
            self.iops = iops
            self.pendingCloudwatchLogsExports = pendingCloudwatchLogsExports
            self.storageType = storageType
        }
    }
}

extension NeptuneClientTypes {

    /// Shows the scaling configuration for a Neptune Serverless DB cluster. For more information, see [Using Amazon Neptune Serverless](https://docs.aws.amazon.com/neptune/latest/userguide/neptune-serverless-using.html) in the Amazon Neptune User Guide.
    public struct ServerlessV2ScalingConfigurationInfo: Swift.Sendable {
        /// The maximum number of Neptune capacity units (NCUs) for a DB instance in a Neptune Serverless cluster. You can specify NCU values in half-step increments, such as 40, 40.5, 41, and so on.
        public var maxCapacity: Swift.Double?
        /// The minimum number of Neptune capacity units (NCUs) for a DB instance in a Neptune Serverless cluster. You can specify NCU values in half-step increments, such as 8, 8.5, 9, and so on.
        public var minCapacity: Swift.Double?

        public init(
            maxCapacity: Swift.Double? = nil,
            minCapacity: Swift.Double? = nil
        )
        {
            self.maxCapacity = maxCapacity
            self.minCapacity = minCapacity
        }
    }
}

extension NeptuneClientTypes {

    /// This data type is used as a response element for queries on VPC security group membership.
    public struct VpcSecurityGroupMembership: Swift.Sendable {
        /// The status of the VPC security group.
        public var status: Swift.String?
        /// The name of the VPC security group.
        public var vpcSecurityGroupId: Swift.String?

        public init(
            status: Swift.String? = nil,
            vpcSecurityGroupId: Swift.String? = nil
        )
        {
            self.status = status
            self.vpcSecurityGroupId = vpcSecurityGroupId
        }
    }
}

extension NeptuneClientTypes {

    /// Contains the details of an Amazon Neptune DB cluster. This data type is used as a response element in the [DescribeDBClusters].
    public struct DBCluster: Swift.Sendable {
        /// AllocatedStorage always returns 1, because Neptune DB cluster storage size is not fixed, but instead automatically adjusts as needed.
        public var allocatedStorage: Swift.Int?
        /// Provides a list of the Amazon Identity and Access Management (IAM) roles that are associated with the DB cluster. IAM roles that are associated with a DB cluster grant permission for the DB cluster to access other Amazon services on your behalf.
        public var associatedRoles: [NeptuneClientTypes.DBClusterRole]?
        /// Time at which the DB cluster will be automatically restarted.
        public var automaticRestartTime: Foundation.Date?
        /// Provides the list of EC2 Availability Zones that instances in the DB cluster can be created in.
        public var availabilityZones: [Swift.String]?
        /// Specifies the number of days for which automatic DB snapshots are retained.
        public var backupRetentionPeriod: Swift.Int?
        /// Not supported by Neptune.
        public var characterSetName: Swift.String?
        /// Identifies the clone group to which the DB cluster is associated.
        public var cloneGroupId: Swift.String?
        /// Specifies the time when the DB cluster was created, in Universal Coordinated Time (UTC).
        public var clusterCreateTime: Foundation.Date?
        /// If set to true, tags are copied to any snapshot of the DB cluster that is created.
        public var copyTagsToSnapshot: Swift.Bool?
        /// If set to true, the DB cluster can be cloned across accounts.
        public var crossAccountClone: Swift.Bool?
        /// Contains the name of the initial database of this DB cluster that was provided at create time, if one was specified when the DB cluster was created. This same name is returned for the life of the DB cluster.
        public var databaseName: Swift.String?
        /// The Amazon Resource Name (ARN) for the DB cluster.
        public var dbClusterArn: Swift.String?
        /// Contains a user-supplied DB cluster identifier. This identifier is the unique key that identifies a DB cluster.
        public var dbClusterIdentifier: Swift.String?
        /// Provides the list of instances that make up the DB cluster.
        public var dbClusterMembers: [NeptuneClientTypes.DBClusterMember]?
        /// Not supported by Neptune.
        public var dbClusterOptionGroupMemberships: [NeptuneClientTypes.DBClusterOptionGroupStatus]?
        /// Specifies the name of the DB cluster parameter group for the DB cluster.
        public var dbClusterParameterGroup: Swift.String?
        /// The Amazon Region-unique, immutable identifier for the DB cluster. This identifier is found in Amazon CloudTrail log entries whenever the Amazon KMS key for the DB cluster is accessed.
        public var dbClusterResourceId: Swift.String?
        /// Specifies information on the subnet group associated with the DB cluster, including the name, description, and subnets in the subnet group.
        public var dbSubnetGroup: Swift.String?
        /// Indicates whether or not the DB cluster has deletion protection enabled. The database can't be deleted when deletion protection is enabled.
        public var deletionProtection: Swift.Bool?
        /// Specifies the earliest time to which a database can be restored with point-in-time restore.
        public var earliestRestorableTime: Foundation.Date?
        /// A list of the log types that this DB cluster is configured to export to CloudWatch Logs. Valid log types are: audit (to publish audit logs to CloudWatch) and slowquery (to publish slow-query logs to CloudWatch). See [Publishing Neptune logs to Amazon CloudWatch logs](https://docs.aws.amazon.com/neptune/latest/userguide/cloudwatch-logs.html).
        public var enabledCloudwatchLogsExports: [Swift.String]?
        /// Specifies the connection endpoint for the primary instance of the DB cluster.
        public var endpoint: Swift.String?
        /// Provides the name of the database engine to be used for this DB cluster.
        public var engine: Swift.String?
        /// Indicates the database engine version.
        public var engineVersion: Swift.String?
        /// Contains a user-supplied global database cluster identifier. This identifier is the unique key that identifies a global database.
        public var globalClusterIdentifier: Swift.String?
        /// Specifies the ID that Amazon Route 53 assigns when you create a hosted zone.
        public var hostedZoneId: Swift.String?
        /// True if mapping of Amazon Identity and Access Management (IAM) accounts to database accounts is enabled, and otherwise false.
        public var iamDatabaseAuthenticationEnabled: Swift.Bool?
        /// The next time you can modify the DB cluster to use the iopt1 storage type.
        public var ioOptimizedNextAllowedModificationTime: Foundation.Date?
        /// If StorageEncrypted is true, the Amazon KMS key identifier for the encrypted DB cluster.
        public var kmsKeyId: Swift.String?
        /// Specifies the latest time to which a database can be restored with point-in-time restore.
        public var latestRestorableTime: Foundation.Date?
        /// Not supported by Neptune.
        public var masterUsername: Swift.String?
        /// Specifies whether the DB cluster has instances in multiple Availability Zones.
        public var multiAZ: Swift.Bool?
        /// This data type is used as a response element in the ModifyDBCluster operation and contains changes that will be applied during the next maintenance window.
        public var pendingModifiedValues: NeptuneClientTypes.ClusterPendingModifiedValues?
        /// Specifies the progress of the operation as a percentage.
        public var percentProgress: Swift.String?
        /// Specifies the port that the database engine is listening on.
        public var port: Swift.Int?
        /// Specifies the daily time range during which automated backups are created if automated backups are enabled, as determined by the BackupRetentionPeriod.
        public var preferredBackupWindow: Swift.String?
        /// Specifies the weekly time range during which system maintenance can occur, in Universal Coordinated Time (UTC).
        public var preferredMaintenanceWindow: Swift.String?
        /// Contains one or more identifiers of the Read Replicas associated with this DB cluster.
        public var readReplicaIdentifiers: [Swift.String]?
        /// The reader endpoint for the DB cluster. The reader endpoint for a DB cluster load-balances connections across the Read Replicas that are available in a DB cluster. As clients request new connections to the reader endpoint, Neptune distributes the connection requests among the Read Replicas in the DB cluster. This functionality can help balance your read workload across multiple Read Replicas in your DB cluster. If a failover occurs, and the Read Replica that you are connected to is promoted to be the primary instance, your connection is dropped. To continue sending your read workload to other Read Replicas in the cluster, you can then reconnect to the reader endpoint.
        public var readerEndpoint: Swift.String?
        /// Not supported by Neptune.
        public var replicationSourceIdentifier: Swift.String?
        /// Shows the scaling configuration for a Neptune Serverless DB cluster. For more information, see [Using Amazon Neptune Serverless](https://docs.aws.amazon.com/neptune/latest/userguide/neptune-serverless-using.html) in the Amazon Neptune User Guide.
        public var serverlessV2ScalingConfiguration: NeptuneClientTypes.ServerlessV2ScalingConfigurationInfo?
        /// Specifies the current state of this DB cluster.
        public var status: Swift.String?
        /// Specifies whether the DB cluster is encrypted.
        public var storageEncrypted: Swift.Bool?
        /// The storage type associated with the DB cluster.
        public var storageType: Swift.String?
        /// Provides a list of VPC security groups that the DB cluster belongs to.
        public var vpcSecurityGroups: [NeptuneClientTypes.VpcSecurityGroupMembership]?

        public init(
            allocatedStorage: Swift.Int? = nil,
            associatedRoles: [NeptuneClientTypes.DBClusterRole]? = nil,
            automaticRestartTime: Foundation.Date? = nil,
            availabilityZones: [Swift.String]? = nil,
            backupRetentionPeriod: Swift.Int? = nil,
            characterSetName: Swift.String? = nil,
            cloneGroupId: Swift.String? = nil,
            clusterCreateTime: Foundation.Date? = nil,
            copyTagsToSnapshot: Swift.Bool? = nil,
            crossAccountClone: Swift.Bool? = nil,
            databaseName: Swift.String? = nil,
            dbClusterArn: Swift.String? = nil,
            dbClusterIdentifier: Swift.String? = nil,
            dbClusterMembers: [NeptuneClientTypes.DBClusterMember]? = nil,
            dbClusterOptionGroupMemberships: [NeptuneClientTypes.DBClusterOptionGroupStatus]? = nil,
            dbClusterParameterGroup: Swift.String? = nil,
            dbClusterResourceId: Swift.String? = nil,
            dbSubnetGroup: Swift.String? = nil,
            deletionProtection: Swift.Bool? = nil,
            earliestRestorableTime: Foundation.Date? = nil,
            enabledCloudwatchLogsExports: [Swift.String]? = nil,
            endpoint: Swift.String? = nil,
            engine: Swift.String? = nil,
            engineVersion: Swift.String? = nil,
            globalClusterIdentifier: Swift.String? = nil,
            hostedZoneId: Swift.String? = nil,
            iamDatabaseAuthenticationEnabled: Swift.Bool? = nil,
            ioOptimizedNextAllowedModificationTime: Foundation.Date? = nil,
            kmsKeyId: Swift.String? = nil,
            latestRestorableTime: Foundation.Date? = nil,
            masterUsername: Swift.String? = nil,
            multiAZ: Swift.Bool? = nil,
            pendingModifiedValues: NeptuneClientTypes.ClusterPendingModifiedValues? = nil,
            percentProgress: Swift.String? = nil,
            port: Swift.Int? = nil,
            preferredBackupWindow: Swift.String? = nil,
            preferredMaintenanceWindow: Swift.String? = nil,
            readReplicaIdentifiers: [Swift.String]? = nil,
            readerEndpoint: Swift.String? = nil,
            replicationSourceIdentifier: Swift.String? = nil,
            serverlessV2ScalingConfiguration: NeptuneClientTypes.ServerlessV2ScalingConfigurationInfo? = nil,
            status: Swift.String? = nil,
            storageEncrypted: Swift.Bool? = nil,
            storageType: Swift.String? = nil,
            vpcSecurityGroups: [NeptuneClientTypes.VpcSecurityGroupMembership]? = nil
        )
        {
            self.allocatedStorage = allocatedStorage
            self.associatedRoles = associatedRoles
            self.automaticRestartTime = automaticRestartTime
            self.availabilityZones = availabilityZones
            self.backupRetentionPeriod = backupRetentionPeriod
            self.characterSetName = characterSetName
            self.cloneGroupId = cloneGroupId
            self.clusterCreateTime = clusterCreateTime
            self.copyTagsToSnapshot = copyTagsToSnapshot
            self.crossAccountClone = crossAccountClone
            self.databaseName = databaseName
            self.dbClusterArn = dbClusterArn
            self.dbClusterIdentifier = dbClusterIdentifier
            self.dbClusterMembers = dbClusterMembers
            self.dbClusterOptionGroupMemberships = dbClusterOptionGroupMemberships
            self.dbClusterParameterGroup = dbClusterParameterGroup
            self.dbClusterResourceId = dbClusterResourceId
            self.dbSubnetGroup = dbSubnetGroup
            self.deletionProtection = deletionProtection
            self.earliestRestorableTime = earliestRestorableTime
            self.enabledCloudwatchLogsExports = enabledCloudwatchLogsExports
            self.endpoint = endpoint
            self.engine = engine
            self.engineVersion = engineVersion
            self.globalClusterIdentifier = globalClusterIdentifier
            self.hostedZoneId = hostedZoneId
            self.iamDatabaseAuthenticationEnabled = iamDatabaseAuthenticationEnabled
            self.ioOptimizedNextAllowedModificationTime = ioOptimizedNextAllowedModificationTime
            self.kmsKeyId = kmsKeyId
            self.latestRestorableTime = latestRestorableTime
            self.masterUsername = masterUsername
            self.multiAZ = multiAZ
            self.pendingModifiedValues = pendingModifiedValues
            self.percentProgress = percentProgress
            self.port = port
            self.preferredBackupWindow = preferredBackupWindow
            self.preferredMaintenanceWindow = preferredMaintenanceWindow
            self.readReplicaIdentifiers = readReplicaIdentifiers
            self.readerEndpoint = readerEndpoint
            self.replicationSourceIdentifier = replicationSourceIdentifier
            self.serverlessV2ScalingConfiguration = serverlessV2ScalingConfiguration
            self.status = status
            self.storageEncrypted = storageEncrypted
            self.storageType = storageType
            self.vpcSecurityGroups = vpcSecurityGroups
        }
    }
}

public struct CreateDBClusterOutput: Swift.Sendable {
    /// Contains the details of an Amazon Neptune DB cluster. This data type is used as a response element in the [DescribeDBClusters].
    public var dbCluster: NeptuneClientTypes.DBCluster?

    public init(
        dbCluster: NeptuneClientTypes.DBCluster? = nil
    )
    {
        self.dbCluster = dbCluster
    }
}

/// The specified custom endpoint cannot be created because it already exists.
public struct DBClusterEndpointAlreadyExistsFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// A message describing the details of the problem.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "DBClusterEndpointAlreadyExistsFault" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The cluster already has the maximum number of custom endpoints.
public struct DBClusterEndpointQuotaExceededFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// A message describing the details of the problem.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "DBClusterEndpointQuotaExceededFault" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

public struct CreateDBClusterEndpointInput: Swift.Sendable {
    /// The identifier to use for the new endpoint. This parameter is stored as a lowercase string.
    /// This member is required.
    public var dbClusterEndpointIdentifier: Swift.String?
    /// The DB cluster identifier of the DB cluster associated with the endpoint. This parameter is stored as a lowercase string.
    /// This member is required.
    public var dbClusterIdentifier: Swift.String?
    /// The type of the endpoint. One of: READER, WRITER, ANY.
    /// This member is required.
    public var endpointType: Swift.String?
    /// List of DB instance identifiers that aren't part of the custom endpoint group. All other eligible instances are reachable through the custom endpoint. Only relevant if the list of static members is empty.
    public var excludedMembers: [Swift.String]?
    /// List of DB instance identifiers that are part of the custom endpoint group.
    public var staticMembers: [Swift.String]?
    /// The tags to be assigned to the Amazon Neptune resource.
    public var tags: [NeptuneClientTypes.Tag]?

    public init(
        dbClusterEndpointIdentifier: Swift.String? = nil,
        dbClusterIdentifier: Swift.String? = nil,
        endpointType: Swift.String? = nil,
        excludedMembers: [Swift.String]? = nil,
        staticMembers: [Swift.String]? = nil,
        tags: [NeptuneClientTypes.Tag]? = nil
    )
    {
        self.dbClusterEndpointIdentifier = dbClusterEndpointIdentifier
        self.dbClusterIdentifier = dbClusterIdentifier
        self.endpointType = endpointType
        self.excludedMembers = excludedMembers
        self.staticMembers = staticMembers
        self.tags = tags
    }
}

/// This data type represents the information you need to connect to an Amazon Neptune DB cluster. This data type is used as a response element in the following actions:
///
/// * CreateDBClusterEndpoint
///
/// * DescribeDBClusterEndpoints
///
/// * ModifyDBClusterEndpoint
///
/// * DeleteDBClusterEndpoint
///
///
/// For the data structure that represents Amazon Neptune DB instance endpoints, see Endpoint.
public struct CreateDBClusterEndpointOutput: Swift.Sendable {
    /// The type associated with a custom endpoint. One of: READER, WRITER, ANY.
    public var customEndpointType: Swift.String?
    /// The Amazon Resource Name (ARN) for the endpoint.
    public var dbClusterEndpointArn: Swift.String?
    /// The identifier associated with the endpoint. This parameter is stored as a lowercase string.
    public var dbClusterEndpointIdentifier: Swift.String?
    /// A unique system-generated identifier for an endpoint. It remains the same for the whole life of the endpoint.
    public var dbClusterEndpointResourceIdentifier: Swift.String?
    /// The DB cluster identifier of the DB cluster associated with the endpoint. This parameter is stored as a lowercase string.
    public var dbClusterIdentifier: Swift.String?
    /// The DNS address of the endpoint.
    public var endpoint: Swift.String?
    /// The type of the endpoint. One of: READER, WRITER, CUSTOM.
    public var endpointType: Swift.String?
    /// List of DB instance identifiers that aren't part of the custom endpoint group. All other eligible instances are reachable through the custom endpoint. Only relevant if the list of static members is empty.
    public var excludedMembers: [Swift.String]?
    /// List of DB instance identifiers that are part of the custom endpoint group.
    public var staticMembers: [Swift.String]?
    /// The current status of the endpoint. One of: creating, available, deleting, inactive, modifying. The inactive state applies to an endpoint that cannot be used for a certain kind of cluster, such as a writer endpoint for a read-only secondary cluster in a global database.
    public var status: Swift.String?

    public init(
        customEndpointType: Swift.String? = nil,
        dbClusterEndpointArn: Swift.String? = nil,
        dbClusterEndpointIdentifier: Swift.String? = nil,
        dbClusterEndpointResourceIdentifier: Swift.String? = nil,
        dbClusterIdentifier: Swift.String? = nil,
        endpoint: Swift.String? = nil,
        endpointType: Swift.String? = nil,
        excludedMembers: [Swift.String]? = nil,
        staticMembers: [Swift.String]? = nil,
        status: Swift.String? = nil
    )
    {
        self.customEndpointType = customEndpointType
        self.dbClusterEndpointArn = dbClusterEndpointArn
        self.dbClusterEndpointIdentifier = dbClusterEndpointIdentifier
        self.dbClusterEndpointResourceIdentifier = dbClusterEndpointResourceIdentifier
        self.dbClusterIdentifier = dbClusterIdentifier
        self.endpoint = endpoint
        self.endpointType = endpointType
        self.excludedMembers = excludedMembers
        self.staticMembers = staticMembers
        self.status = status
    }
}

public struct CreateDBClusterParameterGroupInput: Swift.Sendable {
    /// The name of the DB cluster parameter group. Constraints:
    ///
    /// * Must match the name of an existing DBClusterParameterGroup.
    ///
    ///
    /// This value is stored as a lowercase string.
    /// This member is required.
    public var dbClusterParameterGroupName: Swift.String?
    /// The DB cluster parameter group family name. A DB cluster parameter group can be associated with one and only one DB cluster parameter group family, and can be applied only to a DB cluster running a database engine and engine version compatible with that DB cluster parameter group family.
    /// This member is required.
    public var dbParameterGroupFamily: Swift.String?
    /// The description for the DB cluster parameter group.
    /// This member is required.
    public var description: Swift.String?
    /// The tags to be assigned to the new DB cluster parameter group.
    public var tags: [NeptuneClientTypes.Tag]?

    public init(
        dbClusterParameterGroupName: Swift.String? = nil,
        dbParameterGroupFamily: Swift.String? = nil,
        description: Swift.String? = nil,
        tags: [NeptuneClientTypes.Tag]? = nil
    )
    {
        self.dbClusterParameterGroupName = dbClusterParameterGroupName
        self.dbParameterGroupFamily = dbParameterGroupFamily
        self.description = description
        self.tags = tags
    }
}

public struct CreateDBClusterParameterGroupOutput: Swift.Sendable {
    /// Contains the details of an Amazon Neptune DB cluster parameter group. This data type is used as a response element in the [DescribeDBClusterParameterGroups] action.
    public var dbClusterParameterGroup: NeptuneClientTypes.DBClusterParameterGroup?

    public init(
        dbClusterParameterGroup: NeptuneClientTypes.DBClusterParameterGroup? = nil
    )
    {
        self.dbClusterParameterGroup = dbClusterParameterGroup
    }
}

public struct CreateDBClusterSnapshotInput: Swift.Sendable {
    /// The identifier of the DB cluster to create a snapshot for. This parameter is not case-sensitive. Constraints:
    ///
    /// * Must match the identifier of an existing DBCluster.
    ///
    ///
    /// Example: my-cluster1
    /// This member is required.
    public var dbClusterIdentifier: Swift.String?
    /// The identifier of the DB cluster snapshot. This parameter is stored as a lowercase string. Constraints:
    ///
    /// * Must contain from 1 to 63 letters, numbers, or hyphens.
    ///
    /// * First character must be a letter.
    ///
    /// * Cannot end with a hyphen or contain two consecutive hyphens.
    ///
    ///
    /// Example: my-cluster1-snapshot1
    /// This member is required.
    public var dbClusterSnapshotIdentifier: Swift.String?
    /// The tags to be assigned to the DB cluster snapshot.
    public var tags: [NeptuneClientTypes.Tag]?

    public init(
        dbClusterIdentifier: Swift.String? = nil,
        dbClusterSnapshotIdentifier: Swift.String? = nil,
        tags: [NeptuneClientTypes.Tag]? = nil
    )
    {
        self.dbClusterIdentifier = dbClusterIdentifier
        self.dbClusterSnapshotIdentifier = dbClusterSnapshotIdentifier
        self.tags = tags
    }
}

public struct CreateDBClusterSnapshotOutput: Swift.Sendable {
    /// Contains the details for an Amazon Neptune DB cluster snapshot This data type is used as a response element in the [DescribeDBClusterSnapshots] action.
    public var dbClusterSnapshot: NeptuneClientTypes.DBClusterSnapshot?

    public init(
        dbClusterSnapshot: NeptuneClientTypes.DBClusterSnapshot? = nil
    )
    {
        self.dbClusterSnapshot = dbClusterSnapshot
    }
}

/// Specified CIDRIP or EC2 security group is not authorized for the specified DB security group. Neptune may not also be authorized via IAM to perform necessary actions on your behalf.
public struct AuthorizationNotFoundFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// A message describing the details of the problem.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "AuthorizationNotFound" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// User already has a DB instance with the given identifier.
public struct DBInstanceAlreadyExistsFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// A message describing the details of the problem.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "DBInstanceAlreadyExists" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// DBSecurityGroupName does not refer to an existing DB security group.
public struct DBSecurityGroupNotFoundFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// A message describing the details of the problem.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "DBSecurityGroupNotFound" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// Domain does not refer to an existing Active Directory Domain.
public struct DomainNotFoundFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// A message describing the details of the problem.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "DomainNotFoundFault" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// Request would result in user exceeding the allowed number of DB instances.
public struct InstanceQuotaExceededFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// A message describing the details of the problem.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InstanceQuotaExceeded" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// Specified DB instance class is not available in the specified Availability Zone.
public struct InsufficientDBInstanceCapacityFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// A message describing the details of the problem.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InsufficientDBInstanceCapacity" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The designated option group could not be found.
public struct OptionGroupNotFoundFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// A message describing the details of the problem.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "OptionGroupNotFoundFault" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// Provisioned IOPS not available in the specified Availability Zone.
public struct ProvisionedIopsNotAvailableInAZFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// A message describing the details of the problem.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ProvisionedIopsNotAvailableInAZFault" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// StorageType specified cannot be associated with the DB Instance.
public struct StorageTypeNotSupportedFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// A message describing the details of the problem.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "StorageTypeNotSupported" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

public struct CreateDBInstanceInput: Swift.Sendable {
    /// Not supported by Neptune.
    public var allocatedStorage: Swift.Int?
    /// Indicates that minor engine upgrades are applied automatically to the DB instance during the maintenance window. Default: true
    public var autoMinorVersionUpgrade: Swift.Bool?
    /// The EC2 Availability Zone that the DB instance is created in Default: A random, system-chosen Availability Zone in the endpoint's Amazon Region. Example: us-east-1d Constraint: The AvailabilityZone parameter can't be specified if the MultiAZ parameter is set to true. The specified Availability Zone must be in the same Amazon Region as the current endpoint.
    public var availabilityZone: Swift.String?
    /// The number of days for which automated backups are retained. Not applicable. The retention period for automated backups is managed by the DB cluster. For more information, see [CreateDBCluster]. Default: 1 Constraints:
    ///
    /// * Must be a value from 0 to 35
    ///
    /// * Cannot be set to 0 if the DB instance is a source to Read Replicas
    public var backupRetentionPeriod: Swift.Int?
    /// (Not supported by Neptune)
    public var characterSetName: Swift.String?
    /// True to copy all tags from the DB instance to snapshots of the DB instance, and otherwise false. The default is false.
    public var copyTagsToSnapshot: Swift.Bool?
    /// The identifier of the DB cluster that the instance will belong to. For information on creating a DB cluster, see [CreateDBCluster]. Type: String
    /// This member is required.
    public var dbClusterIdentifier: Swift.String?
    /// The compute and memory capacity of the DB instance, for example, db.m4.large. Not all DB instance classes are available in all Amazon Regions.
    /// This member is required.
    public var dbInstanceClass: Swift.String?
    /// The DB instance identifier. This parameter is stored as a lowercase string. Constraints:
    ///
    /// * Must contain from 1 to 63 letters, numbers, or hyphens.
    ///
    /// * First character must be a letter.
    ///
    /// * Cannot end with a hyphen or contain two consecutive hyphens.
    ///
    ///
    /// Example: mydbinstance
    /// This member is required.
    public var dbInstanceIdentifier: Swift.String?
    /// Not supported.
    public var dbName: Swift.String?
    /// The name of the DB parameter group to associate with this DB instance. If this argument is omitted, the default DBParameterGroup for the specified engine is used. Constraints:
    ///
    /// * Must be 1 to 255 letters, numbers, or hyphens.
    ///
    /// * First character must be a letter
    ///
    /// * Cannot end with a hyphen or contain two consecutive hyphens
    public var dbParameterGroupName: Swift.String?
    /// A list of DB security groups to associate with this DB instance. Default: The default DB security group for the database engine.
    public var dbSecurityGroups: [Swift.String]?
    /// A DB subnet group to associate with this DB instance. If there is no DB subnet group, then it is a non-VPC DB instance.
    public var dbSubnetGroupName: Swift.String?
    /// A value that indicates whether the DB instance has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. See [Deleting a DB Instance](https://docs.aws.amazon.com/neptune/latest/userguide/manage-console-instances-delete.html). DB instances in a DB cluster can be deleted even when deletion protection is enabled in their parent DB cluster.
    public var deletionProtection: Swift.Bool?
    /// Specify the Active Directory Domain to create the instance in.
    public var domain: Swift.String?
    /// Specify the name of the IAM role to be used when making API calls to the Directory Service.
    public var domainIAMRoleName: Swift.String?
    /// The list of log types that need to be enabled for exporting to CloudWatch Logs.
    public var enableCloudwatchLogsExports: [Swift.String]?
    /// Not supported by Neptune (ignored).
    public var enableIAMDatabaseAuthentication: Swift.Bool?
    /// (Not supported by Neptune)
    public var enablePerformanceInsights: Swift.Bool?
    /// The name of the database engine to be used for this instance. Valid Values: neptune
    /// This member is required.
    public var engine: Swift.String?
    /// The version number of the database engine to use. Currently, setting this parameter has no effect.
    public var engineVersion: Swift.String?
    /// The amount of Provisioned IOPS (input/output operations per second) to be initially allocated for the DB instance.
    public var iops: Swift.Int?
    /// The Amazon KMS key identifier for an encrypted DB instance. The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are creating a DB instance with the same Amazon account that owns the KMS encryption key used to encrypt the new DB instance, then you can use the KMS key alias instead of the ARN for the KM encryption key. Not applicable. The KMS key identifier is managed by the DB cluster. For more information, see [CreateDBCluster]. If the StorageEncrypted parameter is true, and you do not specify a value for the KmsKeyId parameter, then Amazon Neptune will use your default encryption key. Amazon KMS creates the default encryption key for your Amazon account. Your Amazon account has a different default encryption key for each Amazon Region.
    public var kmsKeyId: Swift.String?
    /// License model information for this DB instance. Valid values: license-included | bring-your-own-license | general-public-license
    public var licenseModel: Swift.String?
    /// Not supported by Neptune.
    public var masterUserPassword: Swift.String?
    /// Not supported by Neptune.
    public var masterUsername: Swift.String?
    /// The interval, in seconds, between points when Enhanced Monitoring metrics are collected for the DB instance. To disable collecting Enhanced Monitoring metrics, specify 0. The default is 0. If MonitoringRoleArn is specified, then you must also set MonitoringInterval to a value other than 0. Valid Values: 0, 1, 5, 10, 15, 30, 60
    public var monitoringInterval: Swift.Int?
    /// The ARN for the IAM role that permits Neptune to send enhanced monitoring metrics to Amazon CloudWatch Logs. For example, arn:aws:iam:123456789012:role/emaccess. If MonitoringInterval is set to a value other than 0, then you must supply a MonitoringRoleArn value.
    public var monitoringRoleArn: Swift.String?
    /// Specifies if the DB instance is a Multi-AZ deployment. You can't set the AvailabilityZone parameter if the MultiAZ parameter is set to true.
    public var multiAZ: Swift.Bool?
    /// (Not supported by Neptune)
    public var optionGroupName: Swift.String?
    /// (Not supported by Neptune)
    public var performanceInsightsKMSKeyId: Swift.String?
    /// The port number on which the database accepts connections. Not applicable. The port is managed by the DB cluster. For more information, see [CreateDBCluster]. Default: 8182 Type: Integer
    public var port: Swift.Int?
    /// The daily time range during which automated backups are created. Not applicable. The daily time range for creating automated backups is managed by the DB cluster. For more information, see [CreateDBCluster].
    public var preferredBackupWindow: Swift.String?
    /// The time range each week during which system maintenance can occur, in Universal Coordinated Time (UTC). Format: ddd:hh24:mi-ddd:hh24:mi The default is a 30-minute window selected at random from an 8-hour block of time for each Amazon Region, occurring on a random day of the week. Valid Days: Mon, Tue, Wed, Thu, Fri, Sat, Sun. Constraints: Minimum 30-minute window.
    public var preferredMaintenanceWindow: Swift.String?
    /// A value that specifies the order in which an Read Replica is promoted to the primary instance after a failure of the existing primary instance. Default: 1 Valid Values: 0 - 15
    public var promotionTier: Swift.Int?
    /// This flag should no longer be used.
    @available(*, deprecated)
    public var publiclyAccessible: Swift.Bool?
    /// Specifies whether the DB instance is encrypted. Not applicable. The encryption for DB instances is managed by the DB cluster. For more information, see [CreateDBCluster]. Default: false
    public var storageEncrypted: Swift.Bool?
    /// Specifies the storage type to be associated with the DB instance. Not applicable. Storage is managed by the DB Cluster.
    public var storageType: Swift.String?
    /// The tags to assign to the new instance.
    public var tags: [NeptuneClientTypes.Tag]?
    /// The ARN from the key store with which to associate the instance for TDE encryption.
    public var tdeCredentialArn: Swift.String?
    /// The password for the given ARN from the key store in order to access the device.
    public var tdeCredentialPassword: Swift.String?
    /// The time zone of the DB instance.
    public var timezone: Swift.String?
    /// A list of EC2 VPC security groups to associate with this DB instance. Not applicable. The associated list of EC2 VPC security groups is managed by the DB cluster. For more information, see [CreateDBCluster]. Default: The default EC2 VPC security group for the DB subnet group's VPC.
    public var vpcSecurityGroupIds: [Swift.String]?

    public init(
        allocatedStorage: Swift.Int? = nil,
        autoMinorVersionUpgrade: Swift.Bool? = nil,
        availabilityZone: Swift.String? = nil,
        backupRetentionPeriod: Swift.Int? = nil,
        characterSetName: Swift.String? = nil,
        copyTagsToSnapshot: Swift.Bool? = nil,
        dbClusterIdentifier: Swift.String? = nil,
        dbInstanceClass: Swift.String? = nil,
        dbInstanceIdentifier: Swift.String? = nil,
        dbName: Swift.String? = nil,
        dbParameterGroupName: Swift.String? = nil,
        dbSecurityGroups: [Swift.String]? = nil,
        dbSubnetGroupName: Swift.String? = nil,
        deletionProtection: Swift.Bool? = nil,
        domain: Swift.String? = nil,
        domainIAMRoleName: Swift.String? = nil,
        enableCloudwatchLogsExports: [Swift.String]? = nil,
        enableIAMDatabaseAuthentication: Swift.Bool? = nil,
        enablePerformanceInsights: Swift.Bool? = nil,
        engine: Swift.String? = nil,
        engineVersion: Swift.String? = nil,
        iops: Swift.Int? = nil,
        kmsKeyId: Swift.String? = nil,
        licenseModel: Swift.String? = nil,
        masterUserPassword: Swift.String? = nil,
        masterUsername: Swift.String? = nil,
        monitoringInterval: Swift.Int? = nil,
        monitoringRoleArn: Swift.String? = nil,
        multiAZ: Swift.Bool? = nil,
        optionGroupName: Swift.String? = nil,
        performanceInsightsKMSKeyId: Swift.String? = nil,
        port: Swift.Int? = nil,
        preferredBackupWindow: Swift.String? = nil,
        preferredMaintenanceWindow: Swift.String? = nil,
        promotionTier: Swift.Int? = nil,
        publiclyAccessible: Swift.Bool? = nil,
        storageEncrypted: Swift.Bool? = nil,
        storageType: Swift.String? = nil,
        tags: [NeptuneClientTypes.Tag]? = nil,
        tdeCredentialArn: Swift.String? = nil,
        tdeCredentialPassword: Swift.String? = nil,
        timezone: Swift.String? = nil,
        vpcSecurityGroupIds: [Swift.String]? = nil
    )
    {
        self.allocatedStorage = allocatedStorage
        self.autoMinorVersionUpgrade = autoMinorVersionUpgrade
        self.availabilityZone = availabilityZone
        self.backupRetentionPeriod = backupRetentionPeriod
        self.characterSetName = characterSetName
        self.copyTagsToSnapshot = copyTagsToSnapshot
        self.dbClusterIdentifier = dbClusterIdentifier
        self.dbInstanceClass = dbInstanceClass
        self.dbInstanceIdentifier = dbInstanceIdentifier
        self.dbName = dbName
        self.dbParameterGroupName = dbParameterGroupName
        self.dbSecurityGroups = dbSecurityGroups
        self.dbSubnetGroupName = dbSubnetGroupName
        self.deletionProtection = deletionProtection
        self.domain = domain
        self.domainIAMRoleName = domainIAMRoleName
        self.enableCloudwatchLogsExports = enableCloudwatchLogsExports
        self.enableIAMDatabaseAuthentication = enableIAMDatabaseAuthentication
        self.enablePerformanceInsights = enablePerformanceInsights
        self.engine = engine
        self.engineVersion = engineVersion
        self.iops = iops
        self.kmsKeyId = kmsKeyId
        self.licenseModel = licenseModel
        self.masterUserPassword = masterUserPassword
        self.masterUsername = masterUsername
        self.monitoringInterval = monitoringInterval
        self.monitoringRoleArn = monitoringRoleArn
        self.multiAZ = multiAZ
        self.optionGroupName = optionGroupName
        self.performanceInsightsKMSKeyId = performanceInsightsKMSKeyId
        self.port = port
        self.preferredBackupWindow = preferredBackupWindow
        self.preferredMaintenanceWindow = preferredMaintenanceWindow
        self.promotionTier = promotionTier
        self.publiclyAccessible = publiclyAccessible
        self.storageEncrypted = storageEncrypted
        self.storageType = storageType
        self.tags = tags
        self.tdeCredentialArn = tdeCredentialArn
        self.tdeCredentialPassword = tdeCredentialPassword
        self.timezone = timezone
        self.vpcSecurityGroupIds = vpcSecurityGroupIds
    }
}

extension CreateDBInstanceInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateDBInstanceInput(allocatedStorage: \(Swift.String(describing: allocatedStorage)), autoMinorVersionUpgrade: \(Swift.String(describing: autoMinorVersionUpgrade)), availabilityZone: \(Swift.String(describing: availabilityZone)), backupRetentionPeriod: \(Swift.String(describing: backupRetentionPeriod)), characterSetName: \(Swift.String(describing: characterSetName)), copyTagsToSnapshot: \(Swift.String(describing: copyTagsToSnapshot)), dbClusterIdentifier: \(Swift.String(describing: dbClusterIdentifier)), dbInstanceClass: \(Swift.String(describing: dbInstanceClass)), dbInstanceIdentifier: \(Swift.String(describing: dbInstanceIdentifier)), dbName: \(Swift.String(describing: dbName)), dbParameterGroupName: \(Swift.String(describing: dbParameterGroupName)), dbSecurityGroups: \(Swift.String(describing: dbSecurityGroups)), dbSubnetGroupName: \(Swift.String(describing: dbSubnetGroupName)), deletionProtection: \(Swift.String(describing: deletionProtection)), domain: \(Swift.String(describing: domain)), domainIAMRoleName: \(Swift.String(describing: domainIAMRoleName)), enableCloudwatchLogsExports: \(Swift.String(describing: enableCloudwatchLogsExports)), enableIAMDatabaseAuthentication: \(Swift.String(describing: enableIAMDatabaseAuthentication)), enablePerformanceInsights: \(Swift.String(describing: enablePerformanceInsights)), engine: \(Swift.String(describing: engine)), engineVersion: \(Swift.String(describing: engineVersion)), iops: \(Swift.String(describing: iops)), kmsKeyId: \(Swift.String(describing: kmsKeyId)), licenseModel: \(Swift.String(describing: licenseModel)), masterUserPassword: \(Swift.String(describing: masterUserPassword)), masterUsername: \(Swift.String(describing: masterUsername)), monitoringInterval: \(Swift.String(describing: monitoringInterval)), monitoringRoleArn: \(Swift.String(describing: monitoringRoleArn)), multiAZ: \(Swift.String(describing: multiAZ)), optionGroupName: \(Swift.String(describing: optionGroupName)), performanceInsightsKMSKeyId: \(Swift.String(describing: performanceInsightsKMSKeyId)), port: \(Swift.String(describing: port)), preferredBackupWindow: \(Swift.String(describing: preferredBackupWindow)), preferredMaintenanceWindow: \(Swift.String(describing: preferredMaintenanceWindow)), promotionTier: \(Swift.String(describing: promotionTier)), publiclyAccessible: \(Swift.String(describing: publiclyAccessible)), storageEncrypted: \(Swift.String(describing: storageEncrypted)), storageType: \(Swift.String(describing: storageType)), tags: \(Swift.String(describing: tags)), tdeCredentialArn: \(Swift.String(describing: tdeCredentialArn)), timezone: \(Swift.String(describing: timezone)), vpcSecurityGroupIds: \(Swift.String(describing: vpcSecurityGroupIds)), tdeCredentialPassword: \"CONTENT_REDACTED\")"}
}

extension NeptuneClientTypes {

    /// The status of the DB parameter group. This data type is used as a response element in the following actions:
    ///
    /// * [CreateDBInstance]
    ///
    /// * [DeleteDBInstance]
    ///
    /// * [ModifyDBInstance]
    ///
    /// * [RebootDBInstance]
    public struct DBParameterGroupStatus: Swift.Sendable {
        /// The name of the DP parameter group.
        public var dbParameterGroupName: Swift.String?
        /// The status of parameter updates.
        public var parameterApplyStatus: Swift.String?

        public init(
            dbParameterGroupName: Swift.String? = nil,
            parameterApplyStatus: Swift.String? = nil
        )
        {
            self.dbParameterGroupName = dbParameterGroupName
            self.parameterApplyStatus = parameterApplyStatus
        }
    }
}

extension NeptuneClientTypes {

    /// Specifies membership in a designated DB security group.
    public struct DBSecurityGroupMembership: Swift.Sendable {
        /// The name of the DB security group.
        public var dbSecurityGroupName: Swift.String?
        /// The status of the DB security group.
        public var status: Swift.String?

        public init(
            dbSecurityGroupName: Swift.String? = nil,
            status: Swift.String? = nil
        )
        {
            self.dbSecurityGroupName = dbSecurityGroupName
            self.status = status
        }
    }
}

extension NeptuneClientTypes {

    /// Specifies an Availability Zone.
    public struct AvailabilityZone: Swift.Sendable {
        /// The name of the availability zone.
        public var name: Swift.String?

        public init(
            name: Swift.String? = nil
        )
        {
            self.name = name
        }
    }
}

extension NeptuneClientTypes {

    /// Specifies a subnet. This data type is used as a response element in the [DescribeDBSubnetGroups] action.
    public struct Subnet: Swift.Sendable {
        /// Specifies the EC2 Availability Zone that the subnet is in.
        public var subnetAvailabilityZone: NeptuneClientTypes.AvailabilityZone?
        /// Specifies the identifier of the subnet.
        public var subnetIdentifier: Swift.String?
        /// Specifies the status of the subnet.
        public var subnetStatus: Swift.String?

        public init(
            subnetAvailabilityZone: NeptuneClientTypes.AvailabilityZone? = nil,
            subnetIdentifier: Swift.String? = nil,
            subnetStatus: Swift.String? = nil
        )
        {
            self.subnetAvailabilityZone = subnetAvailabilityZone
            self.subnetIdentifier = subnetIdentifier
            self.subnetStatus = subnetStatus
        }
    }
}

extension NeptuneClientTypes {

    /// Contains the details of an Amazon Neptune DB subnet group. This data type is used as a response element in the [DescribeDBSubnetGroups] action.
    public struct DBSubnetGroup: Swift.Sendable {
        /// The Amazon Resource Name (ARN) for the DB subnet group.
        public var dbSubnetGroupArn: Swift.String?
        /// Provides the description of the DB subnet group.
        public var dbSubnetGroupDescription: Swift.String?
        /// The name of the DB subnet group.
        public var dbSubnetGroupName: Swift.String?
        /// Provides the status of the DB subnet group.
        public var subnetGroupStatus: Swift.String?
        /// Contains a list of [Subnet] elements.
        public var subnets: [NeptuneClientTypes.Subnet]?
        /// Provides the VpcId of the DB subnet group.
        public var vpcId: Swift.String?

        public init(
            dbSubnetGroupArn: Swift.String? = nil,
            dbSubnetGroupDescription: Swift.String? = nil,
            dbSubnetGroupName: Swift.String? = nil,
            subnetGroupStatus: Swift.String? = nil,
            subnets: [NeptuneClientTypes.Subnet]? = nil,
            vpcId: Swift.String? = nil
        )
        {
            self.dbSubnetGroupArn = dbSubnetGroupArn
            self.dbSubnetGroupDescription = dbSubnetGroupDescription
            self.dbSubnetGroupName = dbSubnetGroupName
            self.subnetGroupStatus = subnetGroupStatus
            self.subnets = subnets
            self.vpcId = vpcId
        }
    }
}

extension NeptuneClientTypes {

    /// An Active Directory Domain membership record associated with a DB instance.
    public struct DomainMembership: Swift.Sendable {
        /// The identifier of the Active Directory Domain.
        public var domain: Swift.String?
        /// The fully qualified domain name of the Active Directory Domain.
        public var fqdn: Swift.String?
        /// The name of the IAM role to be used when making API calls to the Directory Service.
        public var iamRoleName: Swift.String?
        /// The status of the DB instance's Active Directory Domain membership, such as joined, pending-join, failed etc).
        public var status: Swift.String?

        public init(
            domain: Swift.String? = nil,
            fqdn: Swift.String? = nil,
            iamRoleName: Swift.String? = nil,
            status: Swift.String? = nil
        )
        {
            self.domain = domain
            self.fqdn = fqdn
            self.iamRoleName = iamRoleName
            self.status = status
        }
    }
}

extension NeptuneClientTypes {

    /// Specifies a connection endpoint. For the data structure that represents Amazon Neptune DB cluster endpoints, see DBClusterEndpoint.
    public struct Endpoint: Swift.Sendable {
        /// Specifies the DNS address of the DB instance.
        public var address: Swift.String?
        /// Specifies the ID that Amazon Route 53 assigns when you create a hosted zone.
        public var hostedZoneId: Swift.String?
        /// Specifies the port that the database engine is listening on.
        public var port: Swift.Int?

        public init(
            address: Swift.String? = nil,
            hostedZoneId: Swift.String? = nil,
            port: Swift.Int? = nil
        )
        {
            self.address = address
            self.hostedZoneId = hostedZoneId
            self.port = port
        }
    }
}

extension NeptuneClientTypes {

    /// Not supported by Neptune.
    public struct OptionGroupMembership: Swift.Sendable {
        /// Not supported by Neptune.
        public var optionGroupName: Swift.String?
        /// Not supported by Neptune.
        public var status: Swift.String?

        public init(
            optionGroupName: Swift.String? = nil,
            status: Swift.String? = nil
        )
        {
            self.optionGroupName = optionGroupName
            self.status = status
        }
    }
}

extension NeptuneClientTypes {

    /// This data type is used as a response element in the [ModifyDBInstance] action.
    public struct PendingModifiedValues: Swift.Sendable {
        /// Contains the new AllocatedStorage size for the DB instance that will be applied or is currently being applied.
        public var allocatedStorage: Swift.Int?
        /// Specifies the pending number of days for which automated backups are retained.
        public var backupRetentionPeriod: Swift.Int?
        /// Specifies the identifier of the CA certificate for the DB instance.
        public var caCertificateIdentifier: Swift.String?
        /// Contains the new DBInstanceClass for the DB instance that will be applied or is currently being applied.
        public var dbInstanceClass: Swift.String?
        /// Contains the new DBInstanceIdentifier for the DB instance that will be applied or is currently being applied.
        public var dbInstanceIdentifier: Swift.String?
        /// The new DB subnet group for the DB instance.
        public var dbSubnetGroupName: Swift.String?
        /// Indicates the database engine version.
        public var engineVersion: Swift.String?
        /// Specifies the new Provisioned IOPS value for the DB instance that will be applied or is currently being applied.
        public var iops: Swift.Int?
        /// Not supported by Neptune.
        public var licenseModel: Swift.String?
        /// Not supported by Neptune.
        public var masterUserPassword: Swift.String?
        /// Indicates that the Single-AZ DB instance is to change to a Multi-AZ deployment.
        public var multiAZ: Swift.Bool?
        /// This PendingCloudwatchLogsExports structure specifies pending changes to which CloudWatch logs are enabled and which are disabled.
        public var pendingCloudwatchLogsExports: NeptuneClientTypes.PendingCloudwatchLogsExports?
        /// Specifies the pending port for the DB instance.
        public var port: Swift.Int?
        /// Specifies the storage type to be associated with the DB instance.
        public var storageType: Swift.String?

        public init(
            allocatedStorage: Swift.Int? = nil,
            backupRetentionPeriod: Swift.Int? = nil,
            caCertificateIdentifier: Swift.String? = nil,
            dbInstanceClass: Swift.String? = nil,
            dbInstanceIdentifier: Swift.String? = nil,
            dbSubnetGroupName: Swift.String? = nil,
            engineVersion: Swift.String? = nil,
            iops: Swift.Int? = nil,
            licenseModel: Swift.String? = nil,
            masterUserPassword: Swift.String? = nil,
            multiAZ: Swift.Bool? = nil,
            pendingCloudwatchLogsExports: NeptuneClientTypes.PendingCloudwatchLogsExports? = nil,
            port: Swift.Int? = nil,
            storageType: Swift.String? = nil
        )
        {
            self.allocatedStorage = allocatedStorage
            self.backupRetentionPeriod = backupRetentionPeriod
            self.caCertificateIdentifier = caCertificateIdentifier
            self.dbInstanceClass = dbInstanceClass
            self.dbInstanceIdentifier = dbInstanceIdentifier
            self.dbSubnetGroupName = dbSubnetGroupName
            self.engineVersion = engineVersion
            self.iops = iops
            self.licenseModel = licenseModel
            self.masterUserPassword = masterUserPassword
            self.multiAZ = multiAZ
            self.pendingCloudwatchLogsExports = pendingCloudwatchLogsExports
            self.port = port
            self.storageType = storageType
        }
    }
}

extension NeptuneClientTypes {

    /// Provides a list of status information for a DB instance.
    public struct DBInstanceStatusInfo: Swift.Sendable {
        /// Details of the error if there is an error for the instance. If the instance is not in an error state, this value is blank.
        public var message: Swift.String?
        /// Boolean value that is true if the instance is operating normally, or false if the instance is in an error state.
        public var normal: Swift.Bool?
        /// Status of the DB instance. For a StatusType of read replica, the values can be replicating, error, stopped, or terminated.
        public var status: Swift.String?
        /// This value is currently "read replication."
        public var statusType: Swift.String?

        public init(
            message: Swift.String? = nil,
            normal: Swift.Bool? = nil,
            status: Swift.String? = nil,
            statusType: Swift.String? = nil
        )
        {
            self.message = message
            self.normal = normal
            self.status = status
            self.statusType = statusType
        }
    }
}

extension NeptuneClientTypes {

    /// Contains the details of an Amazon Neptune DB instance. This data type is used as a response element in the [DescribeDBInstances] action.
    public struct DBInstance: Swift.Sendable {
        /// Not supported by Neptune.
        public var allocatedStorage: Swift.Int?
        /// Indicates that minor version patches are applied automatically.
        public var autoMinorVersionUpgrade: Swift.Bool?
        /// Specifies the name of the Availability Zone the DB instance is located in.
        public var availabilityZone: Swift.String?
        /// Specifies the number of days for which automatic DB snapshots are retained.
        public var backupRetentionPeriod: Swift.Int?
        /// The identifier of the CA certificate for this DB instance.
        public var caCertificateIdentifier: Swift.String?
        /// (Not supported by Neptune)
        public var characterSetName: Swift.String?
        /// Specifies whether tags are copied from the DB instance to snapshots of the DB instance.
        public var copyTagsToSnapshot: Swift.Bool?
        /// If the DB instance is a member of a DB cluster, contains the name of the DB cluster that the DB instance is a member of.
        public var dbClusterIdentifier: Swift.String?
        /// The Amazon Resource Name (ARN) for the DB instance.
        public var dbInstanceArn: Swift.String?
        /// Contains the name of the compute and memory capacity class of the DB instance.
        public var dbInstanceClass: Swift.String?
        /// Contains a user-supplied database identifier. This identifier is the unique key that identifies a DB instance.
        public var dbInstanceIdentifier: Swift.String?
        /// Specifies the port that the DB instance listens on. If the DB instance is part of a DB cluster, this can be a different port than the DB cluster port.
        public var dbInstancePort: Swift.Int?
        /// Specifies the current state of this database.
        public var dbInstanceStatus: Swift.String?
        /// The database name.
        public var dbName: Swift.String?
        /// Provides the list of DB parameter groups applied to this DB instance.
        public var dbParameterGroups: [NeptuneClientTypes.DBParameterGroupStatus]?
        /// Provides List of DB security group elements containing only DBSecurityGroup.Name and DBSecurityGroup.Status subelements.
        public var dbSecurityGroups: [NeptuneClientTypes.DBSecurityGroupMembership]?
        /// Specifies information on the subnet group associated with the DB instance, including the name, description, and subnets in the subnet group.
        public var dbSubnetGroup: NeptuneClientTypes.DBSubnetGroup?
        /// The Amazon Region-unique, immutable identifier for the DB instance. This identifier is found in Amazon CloudTrail log entries whenever the Amazon KMS key for the DB instance is accessed.
        public var dbiResourceId: Swift.String?
        /// Indicates whether or not the DB instance has deletion protection enabled. The instance can't be deleted when deletion protection is enabled. See [Deleting a DB Instance](https://docs.aws.amazon.com/neptune/latest/userguide/manage-console-instances-delete.html).
        public var deletionProtection: Swift.Bool?
        /// Not supported
        public var domainMemberships: [NeptuneClientTypes.DomainMembership]?
        /// A list of log types that this DB instance is configured to export to CloudWatch Logs.
        public var enabledCloudwatchLogsExports: [Swift.String]?
        /// Specifies the connection endpoint.
        public var endpoint: NeptuneClientTypes.Endpoint?
        /// Provides the name of the database engine to be used for this DB instance.
        public var engine: Swift.String?
        /// Indicates the database engine version.
        public var engineVersion: Swift.String?
        /// The Amazon Resource Name (ARN) of the Amazon CloudWatch Logs log stream that receives the Enhanced Monitoring metrics data for the DB instance.
        public var enhancedMonitoringResourceArn: Swift.String?
        /// True if Amazon Identity and Access Management (IAM) authentication is enabled, and otherwise false.
        public var iamDatabaseAuthenticationEnabled: Swift.Bool?
        /// Provides the date and time the DB instance was created.
        public var instanceCreateTime: Foundation.Date?
        /// Specifies the Provisioned IOPS (I/O operations per second) value.
        public var iops: Swift.Int?
        /// Not supported: The encryption for DB instances is managed by the DB cluster.
        public var kmsKeyId: Swift.String?
        /// Specifies the latest time to which a database can be restored with point-in-time restore.
        public var latestRestorableTime: Foundation.Date?
        /// License model information for this DB instance.
        public var licenseModel: Swift.String?
        /// Not supported by Neptune.
        public var masterUsername: Swift.String?
        /// The interval, in seconds, between points when Enhanced Monitoring metrics are collected for the DB instance.
        public var monitoringInterval: Swift.Int?
        /// The ARN for the IAM role that permits Neptune to send Enhanced Monitoring metrics to Amazon CloudWatch Logs.
        public var monitoringRoleArn: Swift.String?
        /// Specifies if the DB instance is a Multi-AZ deployment.
        public var multiAZ: Swift.Bool?
        /// (Not supported by Neptune)
        public var optionGroupMemberships: [NeptuneClientTypes.OptionGroupMembership]?
        /// Specifies that changes to the DB instance are pending. This element is only included when changes are pending. Specific changes are identified by subelements.
        public var pendingModifiedValues: NeptuneClientTypes.PendingModifiedValues?
        /// (Not supported by Neptune)
        public var performanceInsightsEnabled: Swift.Bool?
        /// (Not supported by Neptune)
        public var performanceInsightsKMSKeyId: Swift.String?
        /// Specifies the daily time range during which automated backups are created if automated backups are enabled, as determined by the BackupRetentionPeriod.
        public var preferredBackupWindow: Swift.String?
        /// Specifies the weekly time range during which system maintenance can occur, in Universal Coordinated Time (UTC).
        public var preferredMaintenanceWindow: Swift.String?
        /// A value that specifies the order in which a Read Replica is promoted to the primary instance after a failure of the existing primary instance.
        public var promotionTier: Swift.Int?
        /// This flag should no longer be used.
        @available(*, deprecated)
        public var publiclyAccessible: Swift.Bool?
        /// Contains one or more identifiers of DB clusters that are Read Replicas of this DB instance.
        public var readReplicaDBClusterIdentifiers: [Swift.String]?
        /// Contains one or more identifiers of the Read Replicas associated with this DB instance.
        public var readReplicaDBInstanceIdentifiers: [Swift.String]?
        /// Contains the identifier of the source DB instance if this DB instance is a Read Replica.
        public var readReplicaSourceDBInstanceIdentifier: Swift.String?
        /// If present, specifies the name of the secondary Availability Zone for a DB instance with multi-AZ support.
        public var secondaryAvailabilityZone: Swift.String?
        /// The status of a Read Replica. If the instance is not a Read Replica, this is blank.
        public var statusInfos: [NeptuneClientTypes.DBInstanceStatusInfo]?
        /// Not supported: The encryption for DB instances is managed by the DB cluster.
        public var storageEncrypted: Swift.Bool?
        /// Specifies the storage type associated with DB instance.
        public var storageType: Swift.String?
        /// The ARN from the key store with which the instance is associated for TDE encryption.
        public var tdeCredentialArn: Swift.String?
        /// Not supported.
        public var timezone: Swift.String?
        /// Provides a list of VPC security group elements that the DB instance belongs to.
        public var vpcSecurityGroups: [NeptuneClientTypes.VpcSecurityGroupMembership]?

        public init(
            allocatedStorage: Swift.Int? = nil,
            autoMinorVersionUpgrade: Swift.Bool? = nil,
            availabilityZone: Swift.String? = nil,
            backupRetentionPeriod: Swift.Int? = nil,
            caCertificateIdentifier: Swift.String? = nil,
            characterSetName: Swift.String? = nil,
            copyTagsToSnapshot: Swift.Bool? = nil,
            dbClusterIdentifier: Swift.String? = nil,
            dbInstanceArn: Swift.String? = nil,
            dbInstanceClass: Swift.String? = nil,
            dbInstanceIdentifier: Swift.String? = nil,
            dbInstancePort: Swift.Int? = nil,
            dbInstanceStatus: Swift.String? = nil,
            dbName: Swift.String? = nil,
            dbParameterGroups: [NeptuneClientTypes.DBParameterGroupStatus]? = nil,
            dbSecurityGroups: [NeptuneClientTypes.DBSecurityGroupMembership]? = nil,
            dbSubnetGroup: NeptuneClientTypes.DBSubnetGroup? = nil,
            dbiResourceId: Swift.String? = nil,
            deletionProtection: Swift.Bool? = nil,
            domainMemberships: [NeptuneClientTypes.DomainMembership]? = nil,
            enabledCloudwatchLogsExports: [Swift.String]? = nil,
            endpoint: NeptuneClientTypes.Endpoint? = nil,
            engine: Swift.String? = nil,
            engineVersion: Swift.String? = nil,
            enhancedMonitoringResourceArn: Swift.String? = nil,
            iamDatabaseAuthenticationEnabled: Swift.Bool? = nil,
            instanceCreateTime: Foundation.Date? = nil,
            iops: Swift.Int? = nil,
            kmsKeyId: Swift.String? = nil,
            latestRestorableTime: Foundation.Date? = nil,
            licenseModel: Swift.String? = nil,
            masterUsername: Swift.String? = nil,
            monitoringInterval: Swift.Int? = nil,
            monitoringRoleArn: Swift.String? = nil,
            multiAZ: Swift.Bool? = nil,
            optionGroupMemberships: [NeptuneClientTypes.OptionGroupMembership]? = nil,
            pendingModifiedValues: NeptuneClientTypes.PendingModifiedValues? = nil,
            performanceInsightsEnabled: Swift.Bool? = nil,
            performanceInsightsKMSKeyId: Swift.String? = nil,
            preferredBackupWindow: Swift.String? = nil,
            preferredMaintenanceWindow: Swift.String? = nil,
            promotionTier: Swift.Int? = nil,
            publiclyAccessible: Swift.Bool? = nil,
            readReplicaDBClusterIdentifiers: [Swift.String]? = nil,
            readReplicaDBInstanceIdentifiers: [Swift.String]? = nil,
            readReplicaSourceDBInstanceIdentifier: Swift.String? = nil,
            secondaryAvailabilityZone: Swift.String? = nil,
            statusInfos: [NeptuneClientTypes.DBInstanceStatusInfo]? = nil,
            storageEncrypted: Swift.Bool? = nil,
            storageType: Swift.String? = nil,
            tdeCredentialArn: Swift.String? = nil,
            timezone: Swift.String? = nil,
            vpcSecurityGroups: [NeptuneClientTypes.VpcSecurityGroupMembership]? = nil
        )
        {
            self.allocatedStorage = allocatedStorage
            self.autoMinorVersionUpgrade = autoMinorVersionUpgrade
            self.availabilityZone = availabilityZone
            self.backupRetentionPeriod = backupRetentionPeriod
            self.caCertificateIdentifier = caCertificateIdentifier
            self.characterSetName = characterSetName
            self.copyTagsToSnapshot = copyTagsToSnapshot
            self.dbClusterIdentifier = dbClusterIdentifier
            self.dbInstanceArn = dbInstanceArn
            self.dbInstanceClass = dbInstanceClass
            self.dbInstanceIdentifier = dbInstanceIdentifier
            self.dbInstancePort = dbInstancePort
            self.dbInstanceStatus = dbInstanceStatus
            self.dbName = dbName
            self.dbParameterGroups = dbParameterGroups
            self.dbSecurityGroups = dbSecurityGroups
            self.dbSubnetGroup = dbSubnetGroup
            self.dbiResourceId = dbiResourceId
            self.deletionProtection = deletionProtection
            self.domainMemberships = domainMemberships
            self.enabledCloudwatchLogsExports = enabledCloudwatchLogsExports
            self.endpoint = endpoint
            self.engine = engine
            self.engineVersion = engineVersion
            self.enhancedMonitoringResourceArn = enhancedMonitoringResourceArn
            self.iamDatabaseAuthenticationEnabled = iamDatabaseAuthenticationEnabled
            self.instanceCreateTime = instanceCreateTime
            self.iops = iops
            self.kmsKeyId = kmsKeyId
            self.latestRestorableTime = latestRestorableTime
            self.licenseModel = licenseModel
            self.masterUsername = masterUsername
            self.monitoringInterval = monitoringInterval
            self.monitoringRoleArn = monitoringRoleArn
            self.multiAZ = multiAZ
            self.optionGroupMemberships = optionGroupMemberships
            self.pendingModifiedValues = pendingModifiedValues
            self.performanceInsightsEnabled = performanceInsightsEnabled
            self.performanceInsightsKMSKeyId = performanceInsightsKMSKeyId
            self.preferredBackupWindow = preferredBackupWindow
            self.preferredMaintenanceWindow = preferredMaintenanceWindow
            self.promotionTier = promotionTier
            self.publiclyAccessible = publiclyAccessible
            self.readReplicaDBClusterIdentifiers = readReplicaDBClusterIdentifiers
            self.readReplicaDBInstanceIdentifiers = readReplicaDBInstanceIdentifiers
            self.readReplicaSourceDBInstanceIdentifier = readReplicaSourceDBInstanceIdentifier
            self.secondaryAvailabilityZone = secondaryAvailabilityZone
            self.statusInfos = statusInfos
            self.storageEncrypted = storageEncrypted
            self.storageType = storageType
            self.tdeCredentialArn = tdeCredentialArn
            self.timezone = timezone
            self.vpcSecurityGroups = vpcSecurityGroups
        }
    }
}

public struct CreateDBInstanceOutput: Swift.Sendable {
    /// Contains the details of an Amazon Neptune DB instance. This data type is used as a response element in the [DescribeDBInstances] action.
    public var dbInstance: NeptuneClientTypes.DBInstance?

    public init(
        dbInstance: NeptuneClientTypes.DBInstance? = nil
    )
    {
        self.dbInstance = dbInstance
    }
}

public struct CreateDBParameterGroupInput: Swift.Sendable {
    /// The DB parameter group family name. A DB parameter group can be associated with one and only one DB parameter group family, and can be applied only to a DB instance running a database engine and engine version compatible with that DB parameter group family.
    /// This member is required.
    public var dbParameterGroupFamily: Swift.String?
    /// The name of the DB parameter group. Constraints:
    ///
    /// * Must be 1 to 255 letters, numbers, or hyphens.
    ///
    /// * First character must be a letter
    ///
    /// * Cannot end with a hyphen or contain two consecutive hyphens
    ///
    ///
    /// This value is stored as a lowercase string.
    /// This member is required.
    public var dbParameterGroupName: Swift.String?
    /// The description for the DB parameter group.
    /// This member is required.
    public var description: Swift.String?
    /// The tags to be assigned to the new DB parameter group.
    public var tags: [NeptuneClientTypes.Tag]?

    public init(
        dbParameterGroupFamily: Swift.String? = nil,
        dbParameterGroupName: Swift.String? = nil,
        description: Swift.String? = nil,
        tags: [NeptuneClientTypes.Tag]? = nil
    )
    {
        self.dbParameterGroupFamily = dbParameterGroupFamily
        self.dbParameterGroupName = dbParameterGroupName
        self.description = description
        self.tags = tags
    }
}

public struct CreateDBParameterGroupOutput: Swift.Sendable {
    /// Contains the details of an Amazon Neptune DB parameter group. This data type is used as a response element in the [DescribeDBParameterGroups] action.
    public var dbParameterGroup: NeptuneClientTypes.DBParameterGroup?

    public init(
        dbParameterGroup: NeptuneClientTypes.DBParameterGroup? = nil
    )
    {
        self.dbParameterGroup = dbParameterGroup
    }
}

/// DBSubnetGroupName is already used by an existing DB subnet group.
public struct DBSubnetGroupAlreadyExistsFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// A message describing the details of the problem.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "DBSubnetGroupAlreadyExists" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// Request would result in user exceeding the allowed number of DB subnet groups.
public struct DBSubnetGroupQuotaExceededFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// A message describing the details of the problem.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "DBSubnetGroupQuotaExceeded" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// Request would result in user exceeding the allowed number of subnets in a DB subnet groups.
public struct DBSubnetQuotaExceededFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// A message describing the details of the problem.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "DBSubnetQuotaExceededFault" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

public struct CreateDBSubnetGroupInput: Swift.Sendable {
    /// The description for the DB subnet group.
    /// This member is required.
    public var dbSubnetGroupDescription: Swift.String?
    /// The name for the DB subnet group. This value is stored as a lowercase string. Constraints: Must contain no more than 255 letters, numbers, periods, underscores, spaces, or hyphens. Must not be default. Example: mySubnetgroup
    /// This member is required.
    public var dbSubnetGroupName: Swift.String?
    /// The EC2 Subnet IDs for the DB subnet group.
    /// This member is required.
    public var subnetIds: [Swift.String]?
    /// The tags to be assigned to the new DB subnet group.
    public var tags: [NeptuneClientTypes.Tag]?

    public init(
        dbSubnetGroupDescription: Swift.String? = nil,
        dbSubnetGroupName: Swift.String? = nil,
        subnetIds: [Swift.String]? = nil,
        tags: [NeptuneClientTypes.Tag]? = nil
    )
    {
        self.dbSubnetGroupDescription = dbSubnetGroupDescription
        self.dbSubnetGroupName = dbSubnetGroupName
        self.subnetIds = subnetIds
        self.tags = tags
    }
}

public struct CreateDBSubnetGroupOutput: Swift.Sendable {
    /// Contains the details of an Amazon Neptune DB subnet group. This data type is used as a response element in the [DescribeDBSubnetGroups] action.
    public var dbSubnetGroup: NeptuneClientTypes.DBSubnetGroup?

    public init(
        dbSubnetGroup: NeptuneClientTypes.DBSubnetGroup? = nil
    )
    {
        self.dbSubnetGroup = dbSubnetGroup
    }
}

/// You have exceeded the number of events you can subscribe to.
public struct EventSubscriptionQuotaExceededFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// A message describing the details of the problem.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "EventSubscriptionQuotaExceeded" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The SNS topic is invalid.
public struct SNSInvalidTopicFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// A message describing the details of the problem.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "SNSInvalidTopic" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// There is no SNS authorization.
public struct SNSNoAuthorizationFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// A message describing the details of the problem.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "SNSNoAuthorization" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The ARN of the SNS topic could not be found.
public struct SNSTopicArnNotFoundFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// A message describing the details of the problem.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "SNSTopicArnNotFound" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// This subscription already exists.
public struct SubscriptionAlreadyExistFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// A message describing the details of the problem.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "SubscriptionAlreadyExist" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The designated subscription category could not be found.
public struct SubscriptionCategoryNotFoundFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// A message describing the details of the problem.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "SubscriptionCategoryNotFound" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

public struct CreateEventSubscriptionInput: Swift.Sendable {
    /// A Boolean value; set to true to activate the subscription, set to false to create the subscription but not active it.
    public var enabled: Swift.Bool?
    /// A list of event categories for a SourceType that you want to subscribe to. You can see a list of the categories for a given SourceType by using the DescribeEventCategories action.
    public var eventCategories: [Swift.String]?
    /// The Amazon Resource Name (ARN) of the SNS topic created for event notification. The ARN is created by Amazon SNS when you create a topic and subscribe to it.
    /// This member is required.
    public var snsTopicArn: Swift.String?
    /// The list of identifiers of the event sources for which events are returned. If not specified, then all sources are included in the response. An identifier must begin with a letter and must contain only ASCII letters, digits, and hyphens; it can't end with a hyphen or contain two consecutive hyphens. Constraints:
    ///
    /// * If SourceIds are supplied, SourceType must also be provided.
    ///
    /// * If the source type is a DB instance, then a DBInstanceIdentifier must be supplied.
    ///
    /// * If the source type is a DB security group, a DBSecurityGroupName must be supplied.
    ///
    /// * If the source type is a DB parameter group, a DBParameterGroupName must be supplied.
    ///
    /// * If the source type is a DB snapshot, a DBSnapshotIdentifier must be supplied.
    public var sourceIds: [Swift.String]?
    /// The type of source that is generating the events. For example, if you want to be notified of events generated by a DB instance, you would set this parameter to db-instance. if this value is not specified, all events are returned. Valid values: db-instance | db-cluster | db-parameter-group | db-security-group | db-snapshot | db-cluster-snapshot
    public var sourceType: Swift.String?
    /// The name of the subscription. Constraints: The name must be less than 255 characters.
    /// This member is required.
    public var subscriptionName: Swift.String?
    /// The tags to be applied to the new event subscription.
    public var tags: [NeptuneClientTypes.Tag]?

    public init(
        enabled: Swift.Bool? = nil,
        eventCategories: [Swift.String]? = nil,
        snsTopicArn: Swift.String? = nil,
        sourceIds: [Swift.String]? = nil,
        sourceType: Swift.String? = nil,
        subscriptionName: Swift.String? = nil,
        tags: [NeptuneClientTypes.Tag]? = nil
    )
    {
        self.enabled = enabled
        self.eventCategories = eventCategories
        self.snsTopicArn = snsTopicArn
        self.sourceIds = sourceIds
        self.sourceType = sourceType
        self.subscriptionName = subscriptionName
        self.tags = tags
    }
}

public struct CreateEventSubscriptionOutput: Swift.Sendable {
    /// Contains the results of a successful invocation of the [DescribeEventSubscriptions] action.
    public var eventSubscription: NeptuneClientTypes.EventSubscription?

    public init(
        eventSubscription: NeptuneClientTypes.EventSubscription? = nil
    )
    {
        self.eventSubscription = eventSubscription
    }
}

/// The GlobalClusterIdentifier already exists. Choose a new global database identifier (unique name) to create a new global database cluster.
public struct GlobalClusterAlreadyExistsFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// A message describing the details of the problem.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "GlobalClusterAlreadyExistsFault" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The number of global database clusters for this account is already at the maximum allowed.
public struct GlobalClusterQuotaExceededFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// A message describing the details of the problem.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "GlobalClusterQuotaExceededFault" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

public struct CreateGlobalClusterInput: Swift.Sendable {
    /// The deletion protection setting for the new global database. The global database can't be deleted when deletion protection is enabled.
    public var deletionProtection: Swift.Bool?
    /// The name of the database engine to be used in the global database. Valid values: neptune
    public var engine: Swift.String?
    /// The Neptune engine version to be used by the global database. Valid values: 1.2.0.0 or above.
    public var engineVersion: Swift.String?
    /// The cluster identifier of the new global database cluster.
    /// This member is required.
    public var globalClusterIdentifier: Swift.String?
    /// (Optional) The Amazon Resource Name (ARN) of an existing Neptune DB cluster to use as the primary cluster of the new global database.
    public var sourceDBClusterIdentifier: Swift.String?
    /// The storage encryption setting for the new global database cluster.
    public var storageEncrypted: Swift.Bool?

    public init(
        deletionProtection: Swift.Bool? = nil,
        engine: Swift.String? = nil,
        engineVersion: Swift.String? = nil,
        globalClusterIdentifier: Swift.String? = nil,
        sourceDBClusterIdentifier: Swift.String? = nil,
        storageEncrypted: Swift.Bool? = nil
    )
    {
        self.deletionProtection = deletionProtection
        self.engine = engine
        self.engineVersion = engineVersion
        self.globalClusterIdentifier = globalClusterIdentifier
        self.sourceDBClusterIdentifier = sourceDBClusterIdentifier
        self.storageEncrypted = storageEncrypted
    }
}

extension NeptuneClientTypes {

    /// A data structure with information about any primary and secondary clusters associated with an Neptune global database.
    public struct GlobalClusterMember: Swift.Sendable {
        /// The Amazon Resource Name (ARN) for each Neptune cluster.
        public var dbClusterArn: Swift.String?
        /// Specifies whether the Neptune cluster is the primary cluster (that is, has read-write capability) for the Neptune global database with which it is associated.
        public var isWriter: Swift.Bool?
        /// The Amazon Resource Name (ARN) for each read-only secondary cluster associated with the Neptune global database.
        public var readers: [Swift.String]?

        public init(
            dbClusterArn: Swift.String? = nil,
            isWriter: Swift.Bool? = nil,
            readers: [Swift.String]? = nil
        )
        {
            self.dbClusterArn = dbClusterArn
            self.isWriter = isWriter
            self.readers = readers
        }
    }
}

extension NeptuneClientTypes {

    /// Contains the details of an Amazon Neptune global database. This data type is used as a response element for the [CreateGlobalCluster], [DescribeGlobalClusters], [ModifyGlobalCluster], [DeleteGlobalCluster], [FailoverGlobalCluster], and [RemoveFromGlobalCluster] actions.
    public struct GlobalCluster: Swift.Sendable {
        /// The deletion protection setting for the global database.
        public var deletionProtection: Swift.Bool?
        /// The Neptune database engine used by the global database ("neptune").
        public var engine: Swift.String?
        /// The Neptune engine version used by the global database.
        public var engineVersion: Swift.String?
        /// The Amazon Resource Name (ARN) for the global database.
        public var globalClusterArn: Swift.String?
        /// Contains a user-supplied global database cluster identifier. This identifier is the unique key that identifies a global database.
        public var globalClusterIdentifier: Swift.String?
        /// A list of cluster ARNs and instance ARNs for all the DB clusters that are part of the global database.
        public var globalClusterMembers: [NeptuneClientTypes.GlobalClusterMember]?
        /// An immutable identifier for the global database that is unique within in all regions. This identifier is found in CloudTrail log entries whenever the KMS key for the DB cluster is accessed.
        public var globalClusterResourceId: Swift.String?
        /// Specifies the current state of this global database.
        public var status: Swift.String?
        /// The storage encryption setting for the global database.
        public var storageEncrypted: Swift.Bool?

        public init(
            deletionProtection: Swift.Bool? = nil,
            engine: Swift.String? = nil,
            engineVersion: Swift.String? = nil,
            globalClusterArn: Swift.String? = nil,
            globalClusterIdentifier: Swift.String? = nil,
            globalClusterMembers: [NeptuneClientTypes.GlobalClusterMember]? = nil,
            globalClusterResourceId: Swift.String? = nil,
            status: Swift.String? = nil,
            storageEncrypted: Swift.Bool? = nil
        )
        {
            self.deletionProtection = deletionProtection
            self.engine = engine
            self.engineVersion = engineVersion
            self.globalClusterArn = globalClusterArn
            self.globalClusterIdentifier = globalClusterIdentifier
            self.globalClusterMembers = globalClusterMembers
            self.globalClusterResourceId = globalClusterResourceId
            self.status = status
            self.storageEncrypted = storageEncrypted
        }
    }
}

public struct CreateGlobalClusterOutput: Swift.Sendable {
    /// Contains the details of an Amazon Neptune global database. This data type is used as a response element for the [CreateGlobalCluster], [DescribeGlobalClusters], [ModifyGlobalCluster], [DeleteGlobalCluster], [FailoverGlobalCluster], and [RemoveFromGlobalCluster] actions.
    public var globalCluster: NeptuneClientTypes.GlobalCluster?

    public init(
        globalCluster: NeptuneClientTypes.GlobalCluster? = nil
    )
    {
        self.globalCluster = globalCluster
    }
}

public struct DeleteDBClusterInput: Swift.Sendable {
    /// The DB cluster identifier for the DB cluster to be deleted. This parameter isn't case-sensitive. Constraints:
    ///
    /// * Must match an existing DBClusterIdentifier.
    /// This member is required.
    public var dbClusterIdentifier: Swift.String?
    /// The DB cluster snapshot identifier of the new DB cluster snapshot created when SkipFinalSnapshot is set to false. Specifying this parameter and also setting the SkipFinalShapshot parameter to true results in an error. Constraints:
    ///
    /// * Must be 1 to 255 letters, numbers, or hyphens.
    ///
    /// * First character must be a letter
    ///
    /// * Cannot end with a hyphen or contain two consecutive hyphens
    public var finalDBSnapshotIdentifier: Swift.String?
    /// Determines whether a final DB cluster snapshot is created before the DB cluster is deleted. If true is specified, no DB cluster snapshot is created. If false is specified, a DB cluster snapshot is created before the DB cluster is deleted. You must specify a FinalDBSnapshotIdentifier parameter if SkipFinalSnapshot is false. Default: false
    public var skipFinalSnapshot: Swift.Bool?

    public init(
        dbClusterIdentifier: Swift.String? = nil,
        finalDBSnapshotIdentifier: Swift.String? = nil,
        skipFinalSnapshot: Swift.Bool? = nil
    )
    {
        self.dbClusterIdentifier = dbClusterIdentifier
        self.finalDBSnapshotIdentifier = finalDBSnapshotIdentifier
        self.skipFinalSnapshot = skipFinalSnapshot
    }
}

public struct DeleteDBClusterOutput: Swift.Sendable {
    /// Contains the details of an Amazon Neptune DB cluster. This data type is used as a response element in the [DescribeDBClusters].
    public var dbCluster: NeptuneClientTypes.DBCluster?

    public init(
        dbCluster: NeptuneClientTypes.DBCluster? = nil
    )
    {
        self.dbCluster = dbCluster
    }
}

/// The specified custom endpoint doesn't exist.
public struct DBClusterEndpointNotFoundFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// A message describing the details of the problem.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "DBClusterEndpointNotFoundFault" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The requested operation cannot be performed on the endpoint while the endpoint is in this state.
public struct InvalidDBClusterEndpointStateFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// A message describing the details of the problem.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidDBClusterEndpointStateFault" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

public struct DeleteDBClusterEndpointInput: Swift.Sendable {
    /// The identifier associated with the custom endpoint. This parameter is stored as a lowercase string.
    /// This member is required.
    public var dbClusterEndpointIdentifier: Swift.String?

    public init(
        dbClusterEndpointIdentifier: Swift.String? = nil
    )
    {
        self.dbClusterEndpointIdentifier = dbClusterEndpointIdentifier
    }
}

/// This data type represents the information you need to connect to an Amazon Neptune DB cluster. This data type is used as a response element in the following actions:
///
/// * CreateDBClusterEndpoint
///
/// * DescribeDBClusterEndpoints
///
/// * ModifyDBClusterEndpoint
///
/// * DeleteDBClusterEndpoint
///
///
/// For the data structure that represents Amazon RDS DB instance endpoints, see Endpoint.
public struct DeleteDBClusterEndpointOutput: Swift.Sendable {
    /// The type associated with a custom endpoint. One of: READER, WRITER, ANY.
    public var customEndpointType: Swift.String?
    /// The Amazon Resource Name (ARN) for the endpoint.
    public var dbClusterEndpointArn: Swift.String?
    /// The identifier associated with the endpoint. This parameter is stored as a lowercase string.
    public var dbClusterEndpointIdentifier: Swift.String?
    /// A unique system-generated identifier for an endpoint. It remains the same for the whole life of the endpoint.
    public var dbClusterEndpointResourceIdentifier: Swift.String?
    /// The DB cluster identifier of the DB cluster associated with the endpoint. This parameter is stored as a lowercase string.
    public var dbClusterIdentifier: Swift.String?
    /// The DNS address of the endpoint.
    public var endpoint: Swift.String?
    /// The type of the endpoint. One of: READER, WRITER, CUSTOM.
    public var endpointType: Swift.String?
    /// List of DB instance identifiers that aren't part of the custom endpoint group. All other eligible instances are reachable through the custom endpoint. Only relevant if the list of static members is empty.
    public var excludedMembers: [Swift.String]?
    /// List of DB instance identifiers that are part of the custom endpoint group.
    public var staticMembers: [Swift.String]?
    /// The current status of the endpoint. One of: creating, available, deleting, inactive, modifying. The inactive state applies to an endpoint that cannot be used for a certain kind of cluster, such as a writer endpoint for a read-only secondary cluster in a global database.
    public var status: Swift.String?

    public init(
        customEndpointType: Swift.String? = nil,
        dbClusterEndpointArn: Swift.String? = nil,
        dbClusterEndpointIdentifier: Swift.String? = nil,
        dbClusterEndpointResourceIdentifier: Swift.String? = nil,
        dbClusterIdentifier: Swift.String? = nil,
        endpoint: Swift.String? = nil,
        endpointType: Swift.String? = nil,
        excludedMembers: [Swift.String]? = nil,
        staticMembers: [Swift.String]? = nil,
        status: Swift.String? = nil
    )
    {
        self.customEndpointType = customEndpointType
        self.dbClusterEndpointArn = dbClusterEndpointArn
        self.dbClusterEndpointIdentifier = dbClusterEndpointIdentifier
        self.dbClusterEndpointResourceIdentifier = dbClusterEndpointResourceIdentifier
        self.dbClusterIdentifier = dbClusterIdentifier
        self.endpoint = endpoint
        self.endpointType = endpointType
        self.excludedMembers = excludedMembers
        self.staticMembers = staticMembers
        self.status = status
    }
}

/// The DB parameter group is in use or is in an invalid state. If you are attempting to delete the parameter group, you cannot delete it when the parameter group is in this state.
public struct InvalidDBParameterGroupStateFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// A message describing the details of the problem.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidDBParameterGroupState" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

public struct DeleteDBClusterParameterGroupInput: Swift.Sendable {
    /// The name of the DB cluster parameter group. Constraints:
    ///
    /// * Must be the name of an existing DB cluster parameter group.
    ///
    /// * You can't delete a default DB cluster parameter group.
    ///
    /// * Cannot be associated with any DB clusters.
    /// This member is required.
    public var dbClusterParameterGroupName: Swift.String?

    public init(
        dbClusterParameterGroupName: Swift.String? = nil
    )
    {
        self.dbClusterParameterGroupName = dbClusterParameterGroupName
    }
}

public struct DeleteDBClusterSnapshotInput: Swift.Sendable {
    /// The identifier of the DB cluster snapshot to delete. Constraints: Must be the name of an existing DB cluster snapshot in the available state.
    /// This member is required.
    public var dbClusterSnapshotIdentifier: Swift.String?

    public init(
        dbClusterSnapshotIdentifier: Swift.String? = nil
    )
    {
        self.dbClusterSnapshotIdentifier = dbClusterSnapshotIdentifier
    }
}

public struct DeleteDBClusterSnapshotOutput: Swift.Sendable {
    /// Contains the details for an Amazon Neptune DB cluster snapshot This data type is used as a response element in the [DescribeDBClusterSnapshots] action.
    public var dbClusterSnapshot: NeptuneClientTypes.DBClusterSnapshot?

    public init(
        dbClusterSnapshot: NeptuneClientTypes.DBClusterSnapshot? = nil
    )
    {
        self.dbClusterSnapshot = dbClusterSnapshot
    }
}

/// DBSnapshotIdentifier is already used by an existing snapshot.
public struct DBSnapshotAlreadyExistsFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// A message describing the details of the problem.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "DBSnapshotAlreadyExists" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

public struct DeleteDBInstanceInput: Swift.Sendable {
    /// The DB instance identifier for the DB instance to be deleted. This parameter isn't case-sensitive. Constraints:
    ///
    /// * Must match the name of an existing DB instance.
    /// This member is required.
    public var dbInstanceIdentifier: Swift.String?
    /// The DBSnapshotIdentifier of the new DBSnapshot created when SkipFinalSnapshot is set to false. Specifying this parameter and also setting the SkipFinalShapshot parameter to true results in an error. Constraints:
    ///
    /// * Must be 1 to 255 letters or numbers.
    ///
    /// * First character must be a letter
    ///
    /// * Cannot end with a hyphen or contain two consecutive hyphens
    ///
    /// * Cannot be specified when deleting a Read Replica.
    public var finalDBSnapshotIdentifier: Swift.String?
    /// Determines whether a final DB snapshot is created before the DB instance is deleted. If true is specified, no DBSnapshot is created. If false is specified, a DB snapshot is created before the DB instance is deleted. Note that when a DB instance is in a failure state and has a status of 'failed', 'incompatible-restore', or 'incompatible-network', it can only be deleted when the SkipFinalSnapshot parameter is set to "true". Specify true when deleting a Read Replica. The FinalDBSnapshotIdentifier parameter must be specified if SkipFinalSnapshot is false. Default: false
    public var skipFinalSnapshot: Swift.Bool?

    public init(
        dbInstanceIdentifier: Swift.String? = nil,
        finalDBSnapshotIdentifier: Swift.String? = nil,
        skipFinalSnapshot: Swift.Bool? = nil
    )
    {
        self.dbInstanceIdentifier = dbInstanceIdentifier
        self.finalDBSnapshotIdentifier = finalDBSnapshotIdentifier
        self.skipFinalSnapshot = skipFinalSnapshot
    }
}

public struct DeleteDBInstanceOutput: Swift.Sendable {
    /// Contains the details of an Amazon Neptune DB instance. This data type is used as a response element in the [DescribeDBInstances] action.
    public var dbInstance: NeptuneClientTypes.DBInstance?

    public init(
        dbInstance: NeptuneClientTypes.DBInstance? = nil
    )
    {
        self.dbInstance = dbInstance
    }
}

public struct DeleteDBParameterGroupInput: Swift.Sendable {
    /// The name of the DB parameter group. Constraints:
    ///
    /// * Must be the name of an existing DB parameter group
    ///
    /// * You can't delete a default DB parameter group
    ///
    /// * Cannot be associated with any DB instances
    /// This member is required.
    public var dbParameterGroupName: Swift.String?

    public init(
        dbParameterGroupName: Swift.String? = nil
    )
    {
        self.dbParameterGroupName = dbParameterGroupName
    }
}

/// The DB subnet is not in the available state.
public struct InvalidDBSubnetStateFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// A message describing the details of the problem.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidDBSubnetStateFault" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

public struct DeleteDBSubnetGroupInput: Swift.Sendable {
    /// The name of the database subnet group to delete. You can't delete the default subnet group. Constraints: Constraints: Must match the name of an existing DBSubnetGroup. Must not be default. Example: mySubnetgroup
    /// This member is required.
    public var dbSubnetGroupName: Swift.String?

    public init(
        dbSubnetGroupName: Swift.String? = nil
    )
    {
        self.dbSubnetGroupName = dbSubnetGroupName
    }
}

/// The event subscription is in an invalid state.
public struct InvalidEventSubscriptionStateFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// A message describing the details of the problem.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidEventSubscriptionState" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

public struct DeleteEventSubscriptionInput: Swift.Sendable {
    /// The name of the event notification subscription you want to delete.
    /// This member is required.
    public var subscriptionName: Swift.String?

    public init(
        subscriptionName: Swift.String? = nil
    )
    {
        self.subscriptionName = subscriptionName
    }
}

public struct DeleteEventSubscriptionOutput: Swift.Sendable {
    /// Contains the results of a successful invocation of the [DescribeEventSubscriptions] action.
    public var eventSubscription: NeptuneClientTypes.EventSubscription?

    public init(
        eventSubscription: NeptuneClientTypes.EventSubscription? = nil
    )
    {
        self.eventSubscription = eventSubscription
    }
}

public struct DeleteGlobalClusterInput: Swift.Sendable {
    /// The cluster identifier of the global database cluster being deleted.
    /// This member is required.
    public var globalClusterIdentifier: Swift.String?

    public init(
        globalClusterIdentifier: Swift.String? = nil
    )
    {
        self.globalClusterIdentifier = globalClusterIdentifier
    }
}

public struct DeleteGlobalClusterOutput: Swift.Sendable {
    /// Contains the details of an Amazon Neptune global database. This data type is used as a response element for the [CreateGlobalCluster], [DescribeGlobalClusters], [ModifyGlobalCluster], [DeleteGlobalCluster], [FailoverGlobalCluster], and [RemoveFromGlobalCluster] actions.
    public var globalCluster: NeptuneClientTypes.GlobalCluster?

    public init(
        globalCluster: NeptuneClientTypes.GlobalCluster? = nil
    )
    {
        self.globalCluster = globalCluster
    }
}

extension NeptuneClientTypes {

    /// This type is not currently supported.
    public struct Filter: Swift.Sendable {
        /// This parameter is not currently supported.
        /// This member is required.
        public var name: Swift.String?
        /// This parameter is not currently supported.
        /// This member is required.
        public var values: [Swift.String]?

        public init(
            name: Swift.String? = nil,
            values: [Swift.String]? = nil
        )
        {
            self.name = name
            self.values = values
        }
    }
}

public struct DescribeDBClusterEndpointsInput: Swift.Sendable {
    /// The identifier of the endpoint to describe. This parameter is stored as a lowercase string.
    public var dbClusterEndpointIdentifier: Swift.String?
    /// The DB cluster identifier of the DB cluster associated with the endpoint. This parameter is stored as a lowercase string.
    public var dbClusterIdentifier: Swift.String?
    /// A set of name-value pairs that define which endpoints to include in the output. The filters are specified as name-value pairs, in the format Name=endpoint_type,Values=endpoint_type1,endpoint_type2,.... Name can be one of: db-cluster-endpoint-type, db-cluster-endpoint-custom-type, db-cluster-endpoint-id, db-cluster-endpoint-status. Values for the  db-cluster-endpoint-type filter can be one or more of: reader, writer, custom. Values for the db-cluster-endpoint-custom-type filter can be one or more of: reader, any. Values for the db-cluster-endpoint-status filter can be one or more of: available, creating, deleting, inactive, modifying.
    public var filters: [NeptuneClientTypes.Filter]?
    /// An optional pagination token provided by a previous DescribeDBClusterEndpoints request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords.
    public var marker: Swift.String?
    /// The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a pagination token called a marker is included in the response so you can retrieve the remaining results. Default: 100 Constraints: Minimum 20, maximum 100.
    public var maxRecords: Swift.Int?

    public init(
        dbClusterEndpointIdentifier: Swift.String? = nil,
        dbClusterIdentifier: Swift.String? = nil,
        filters: [NeptuneClientTypes.Filter]? = nil,
        marker: Swift.String? = nil,
        maxRecords: Swift.Int? = nil
    )
    {
        self.dbClusterEndpointIdentifier = dbClusterEndpointIdentifier
        self.dbClusterIdentifier = dbClusterIdentifier
        self.filters = filters
        self.marker = marker
        self.maxRecords = maxRecords
    }
}

extension NeptuneClientTypes {

    /// This data type represents the information you need to connect to an Amazon Neptune DB cluster. This data type is used as a response element in the following actions:
    ///
    /// * CreateDBClusterEndpoint
    ///
    /// * DescribeDBClusterEndpoints
    ///
    /// * ModifyDBClusterEndpoint
    ///
    /// * DeleteDBClusterEndpoint
    ///
    ///
    /// For the data structure that represents Amazon Neptune DB instance endpoints, see Endpoint.
    public struct DBClusterEndpoint: Swift.Sendable {
        /// The type associated with a custom endpoint. One of: READER, WRITER, ANY.
        public var customEndpointType: Swift.String?
        /// The Amazon Resource Name (ARN) for the endpoint.
        public var dbClusterEndpointArn: Swift.String?
        /// The identifier associated with the endpoint. This parameter is stored as a lowercase string.
        public var dbClusterEndpointIdentifier: Swift.String?
        /// A unique system-generated identifier for an endpoint. It remains the same for the whole life of the endpoint.
        public var dbClusterEndpointResourceIdentifier: Swift.String?
        /// The DB cluster identifier of the DB cluster associated with the endpoint. This parameter is stored as a lowercase string.
        public var dbClusterIdentifier: Swift.String?
        /// The DNS address of the endpoint.
        public var endpoint: Swift.String?
        /// The type of the endpoint. One of: READER, WRITER, CUSTOM.
        public var endpointType: Swift.String?
        /// List of DB instance identifiers that aren't part of the custom endpoint group. All other eligible instances are reachable through the custom endpoint. Only relevant if the list of static members is empty.
        public var excludedMembers: [Swift.String]?
        /// List of DB instance identifiers that are part of the custom endpoint group.
        public var staticMembers: [Swift.String]?
        /// The current status of the endpoint. One of: creating, available, deleting, inactive, modifying. The inactive state applies to an endpoint that cannot be used for a certain kind of cluster, such as a writer endpoint for a read-only secondary cluster in a global database.
        public var status: Swift.String?

        public init(
            customEndpointType: Swift.String? = nil,
            dbClusterEndpointArn: Swift.String? = nil,
            dbClusterEndpointIdentifier: Swift.String? = nil,
            dbClusterEndpointResourceIdentifier: Swift.String? = nil,
            dbClusterIdentifier: Swift.String? = nil,
            endpoint: Swift.String? = nil,
            endpointType: Swift.String? = nil,
            excludedMembers: [Swift.String]? = nil,
            staticMembers: [Swift.String]? = nil,
            status: Swift.String? = nil
        )
        {
            self.customEndpointType = customEndpointType
            self.dbClusterEndpointArn = dbClusterEndpointArn
            self.dbClusterEndpointIdentifier = dbClusterEndpointIdentifier
            self.dbClusterEndpointResourceIdentifier = dbClusterEndpointResourceIdentifier
            self.dbClusterIdentifier = dbClusterIdentifier
            self.endpoint = endpoint
            self.endpointType = endpointType
            self.excludedMembers = excludedMembers
            self.staticMembers = staticMembers
            self.status = status
        }
    }
}

public struct DescribeDBClusterEndpointsOutput: Swift.Sendable {
    /// Contains the details of the endpoints associated with the cluster and matching any filter conditions.
    public var dbClusterEndpoints: [NeptuneClientTypes.DBClusterEndpoint]?
    /// An optional pagination token provided by a previous DescribeDBClusterEndpoints request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords.
    public var marker: Swift.String?

    public init(
        dbClusterEndpoints: [NeptuneClientTypes.DBClusterEndpoint]? = nil,
        marker: Swift.String? = nil
    )
    {
        self.dbClusterEndpoints = dbClusterEndpoints
        self.marker = marker
    }
}

public struct DescribeDBClusterParameterGroupsInput: Swift.Sendable {
    /// The name of a specific DB cluster parameter group to return details for. Constraints:
    ///
    /// * If supplied, must match the name of an existing DBClusterParameterGroup.
    public var dbClusterParameterGroupName: Swift.String?
    /// This parameter is not currently supported.
    public var filters: [NeptuneClientTypes.Filter]?
    /// An optional pagination token provided by a previous DescribeDBClusterParameterGroups request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords.
    public var marker: Swift.String?
    /// The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. Default: 100 Constraints: Minimum 20, maximum 100.
    public var maxRecords: Swift.Int?

    public init(
        dbClusterParameterGroupName: Swift.String? = nil,
        filters: [NeptuneClientTypes.Filter]? = nil,
        marker: Swift.String? = nil,
        maxRecords: Swift.Int? = nil
    )
    {
        self.dbClusterParameterGroupName = dbClusterParameterGroupName
        self.filters = filters
        self.marker = marker
        self.maxRecords = maxRecords
    }
}

public struct DescribeDBClusterParameterGroupsOutput: Swift.Sendable {
    /// A list of DB cluster parameter groups.
    public var dbClusterParameterGroups: [NeptuneClientTypes.DBClusterParameterGroup]?
    /// An optional pagination token provided by a previous DescribeDBClusterParameterGroups request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords.
    public var marker: Swift.String?

    public init(
        dbClusterParameterGroups: [NeptuneClientTypes.DBClusterParameterGroup]? = nil,
        marker: Swift.String? = nil
    )
    {
        self.dbClusterParameterGroups = dbClusterParameterGroups
        self.marker = marker
    }
}

public struct DescribeDBClusterParametersInput: Swift.Sendable {
    /// The name of a specific DB cluster parameter group to return parameter details for. Constraints:
    ///
    /// * If supplied, must match the name of an existing DBClusterParameterGroup.
    /// This member is required.
    public var dbClusterParameterGroupName: Swift.String?
    /// This parameter is not currently supported.
    public var filters: [NeptuneClientTypes.Filter]?
    /// An optional pagination token provided by a previous DescribeDBClusterParameters request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords.
    public var marker: Swift.String?
    /// The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. Default: 100 Constraints: Minimum 20, maximum 100.
    public var maxRecords: Swift.Int?
    /// A value that indicates to return only parameters for a specific source. Parameter sources can be engine, service, or customer.
    public var source: Swift.String?

    public init(
        dbClusterParameterGroupName: Swift.String? = nil,
        filters: [NeptuneClientTypes.Filter]? = nil,
        marker: Swift.String? = nil,
        maxRecords: Swift.Int? = nil,
        source: Swift.String? = nil
    )
    {
        self.dbClusterParameterGroupName = dbClusterParameterGroupName
        self.filters = filters
        self.marker = marker
        self.maxRecords = maxRecords
        self.source = source
    }
}

extension NeptuneClientTypes {

    public enum ApplyMethod: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case immediate
        case pendingReboot
        case sdkUnknown(Swift.String)

        public static var allCases: [ApplyMethod] {
            return [
                .immediate,
                .pendingReboot
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .immediate: return "immediate"
            case .pendingReboot: return "pending-reboot"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension NeptuneClientTypes {

    /// Specifies a parameter.
    public struct Parameter: Swift.Sendable, Swift.Equatable {
        /// Specifies the valid range of values for the parameter.
        public var allowedValues: Swift.String?
        /// Indicates when to apply parameter updates.
        public var applyMethod: NeptuneClientTypes.ApplyMethod?
        /// Specifies the engine specific parameters type.
        public var applyType: Swift.String?
        /// Specifies the valid data type for the parameter.
        public var dataType: Swift.String?
        /// Provides a description of the parameter.
        public var description: Swift.String?
        /// Indicates whether (true) or not (false) the parameter can be modified. Some parameters have security or operational implications that prevent them from being changed.
        public var isModifiable: Swift.Bool?
        /// The earliest engine version to which the parameter can apply.
        public var minimumEngineVersion: Swift.String?
        /// Specifies the name of the parameter.
        public var parameterName: Swift.String?
        /// Specifies the value of the parameter.
        public var parameterValue: Swift.String?
        /// Indicates the source of the parameter value.
        public var source: Swift.String?

        public init(
            allowedValues: Swift.String? = nil,
            applyMethod: NeptuneClientTypes.ApplyMethod? = nil,
            applyType: Swift.String? = nil,
            dataType: Swift.String? = nil,
            description: Swift.String? = nil,
            isModifiable: Swift.Bool? = nil,
            minimumEngineVersion: Swift.String? = nil,
            parameterName: Swift.String? = nil,
            parameterValue: Swift.String? = nil,
            source: Swift.String? = nil
        )
        {
            self.allowedValues = allowedValues
            self.applyMethod = applyMethod
            self.applyType = applyType
            self.dataType = dataType
            self.description = description
            self.isModifiable = isModifiable
            self.minimumEngineVersion = minimumEngineVersion
            self.parameterName = parameterName
            self.parameterValue = parameterValue
            self.source = source
        }
    }
}

public struct DescribeDBClusterParametersOutput: Swift.Sendable {
    /// An optional pagination token provided by a previous DescribeDBClusterParameters request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords .
    public var marker: Swift.String?
    /// Provides a list of parameters for the DB cluster parameter group.
    public var parameters: [NeptuneClientTypes.Parameter]?

    public init(
        marker: Swift.String? = nil,
        parameters: [NeptuneClientTypes.Parameter]? = nil
    )
    {
        self.marker = marker
        self.parameters = parameters
    }
}

public struct DescribeDBClustersInput: Swift.Sendable {
    /// The user-supplied DB cluster identifier. If this parameter is specified, information from only the specific DB cluster is returned. This parameter isn't case-sensitive. Constraints:
    ///
    /// * If supplied, must match an existing DBClusterIdentifier.
    public var dbClusterIdentifier: Swift.String?
    /// A filter that specifies one or more DB clusters to describe. Supported filters:
    ///
    /// * db-cluster-id - Accepts DB cluster identifiers and DB cluster Amazon Resource Names (ARNs). The results list will only include information about the DB clusters identified by these ARNs.
    ///
    /// * engine - Accepts an engine name (such as neptune), and restricts the results list to DB clusters created by that engine.
    ///
    ///
    /// For example, to invoke this API from the Amazon CLI and filter so that only Neptune DB clusters are returned, you could use the following command:
    public var filters: [NeptuneClientTypes.Filter]?
    /// An optional pagination token provided by a previous [DescribeDBClusters] request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords.
    public var marker: Swift.String?
    /// The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. Default: 100 Constraints: Minimum 20, maximum 100.
    public var maxRecords: Swift.Int?

    public init(
        dbClusterIdentifier: Swift.String? = nil,
        filters: [NeptuneClientTypes.Filter]? = nil,
        marker: Swift.String? = nil,
        maxRecords: Swift.Int? = nil
    )
    {
        self.dbClusterIdentifier = dbClusterIdentifier
        self.filters = filters
        self.marker = marker
        self.maxRecords = maxRecords
    }
}

public struct DescribeDBClustersOutput: Swift.Sendable {
    /// Contains a list of DB clusters for the user.
    public var dbClusters: [NeptuneClientTypes.DBCluster]?
    /// A pagination token that can be used in a subsequent DescribeDBClusters request.
    public var marker: Swift.String?

    public init(
        dbClusters: [NeptuneClientTypes.DBCluster]? = nil,
        marker: Swift.String? = nil
    )
    {
        self.dbClusters = dbClusters
        self.marker = marker
    }
}

public struct DescribeDBClusterSnapshotAttributesInput: Swift.Sendable {
    /// The identifier for the DB cluster snapshot to describe the attributes for.
    /// This member is required.
    public var dbClusterSnapshotIdentifier: Swift.String?

    public init(
        dbClusterSnapshotIdentifier: Swift.String? = nil
    )
    {
        self.dbClusterSnapshotIdentifier = dbClusterSnapshotIdentifier
    }
}

extension NeptuneClientTypes {

    /// Contains the name and values of a manual DB cluster snapshot attribute. Manual DB cluster snapshot attributes are used to authorize other Amazon accounts to restore a manual DB cluster snapshot. For more information, see the [ModifyDBClusterSnapshotAttribute] API action.
    public struct DBClusterSnapshotAttribute: Swift.Sendable {
        /// The name of the manual DB cluster snapshot attribute. The attribute named restore refers to the list of Amazon accounts that have permission to copy or restore the manual DB cluster snapshot. For more information, see the [ModifyDBClusterSnapshotAttribute] API action.
        public var attributeName: Swift.String?
        /// The value(s) for the manual DB cluster snapshot attribute. If the AttributeName field is set to restore, then this element returns a list of IDs of the Amazon accounts that are authorized to copy or restore the manual DB cluster snapshot. If a value of all is in the list, then the manual DB cluster snapshot is public and available for any Amazon account to copy or restore.
        public var attributeValues: [Swift.String]?

        public init(
            attributeName: Swift.String? = nil,
            attributeValues: [Swift.String]? = nil
        )
        {
            self.attributeName = attributeName
            self.attributeValues = attributeValues
        }
    }
}

extension NeptuneClientTypes {

    /// Contains the results of a successful call to the [DescribeDBClusterSnapshotAttributes] API action. Manual DB cluster snapshot attributes are used to authorize other Amazon accounts to copy or restore a manual DB cluster snapshot. For more information, see the [ModifyDBClusterSnapshotAttribute] API action.
    public struct DBClusterSnapshotAttributesResult: Swift.Sendable {
        /// The list of attributes and values for the manual DB cluster snapshot.
        public var dbClusterSnapshotAttributes: [NeptuneClientTypes.DBClusterSnapshotAttribute]?
        /// The identifier of the manual DB cluster snapshot that the attributes apply to.
        public var dbClusterSnapshotIdentifier: Swift.String?

        public init(
            dbClusterSnapshotAttributes: [NeptuneClientTypes.DBClusterSnapshotAttribute]? = nil,
            dbClusterSnapshotIdentifier: Swift.String? = nil
        )
        {
            self.dbClusterSnapshotAttributes = dbClusterSnapshotAttributes
            self.dbClusterSnapshotIdentifier = dbClusterSnapshotIdentifier
        }
    }
}

public struct DescribeDBClusterSnapshotAttributesOutput: Swift.Sendable {
    /// Contains the results of a successful call to the [DescribeDBClusterSnapshotAttributes] API action. Manual DB cluster snapshot attributes are used to authorize other Amazon accounts to copy or restore a manual DB cluster snapshot. For more information, see the [ModifyDBClusterSnapshotAttribute] API action.
    public var dbClusterSnapshotAttributesResult: NeptuneClientTypes.DBClusterSnapshotAttributesResult?

    public init(
        dbClusterSnapshotAttributesResult: NeptuneClientTypes.DBClusterSnapshotAttributesResult? = nil
    )
    {
        self.dbClusterSnapshotAttributesResult = dbClusterSnapshotAttributesResult
    }
}

public struct DescribeDBClusterSnapshotsInput: Swift.Sendable {
    /// The ID of the DB cluster to retrieve the list of DB cluster snapshots for. This parameter can't be used in conjunction with the DBClusterSnapshotIdentifier parameter. This parameter is not case-sensitive. Constraints:
    ///
    /// * If supplied, must match the identifier of an existing DBCluster.
    public var dbClusterIdentifier: Swift.String?
    /// A specific DB cluster snapshot identifier to describe. This parameter can't be used in conjunction with the DBClusterIdentifier parameter. This value is stored as a lowercase string. Constraints:
    ///
    /// * If supplied, must match the identifier of an existing DBClusterSnapshot.
    ///
    /// * If this identifier is for an automated snapshot, the SnapshotType parameter must also be specified.
    public var dbClusterSnapshotIdentifier: Swift.String?
    /// This parameter is not currently supported.
    public var filters: [NeptuneClientTypes.Filter]?
    /// True to include manual DB cluster snapshots that are public and can be copied or restored by any Amazon account, and otherwise false. The default is false. The default is false. You can share a manual DB cluster snapshot as public by using the [ModifyDBClusterSnapshotAttribute] API action.
    public var includePublic: Swift.Bool?
    /// True to include shared manual DB cluster snapshots from other Amazon accounts that this Amazon account has been given permission to copy or restore, and otherwise false. The default is false. You can give an Amazon account permission to restore a manual DB cluster snapshot from another Amazon account by the [ModifyDBClusterSnapshotAttribute] API action.
    public var includeShared: Swift.Bool?
    /// An optional pagination token provided by a previous DescribeDBClusterSnapshots request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords.
    public var marker: Swift.String?
    /// The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. Default: 100 Constraints: Minimum 20, maximum 100.
    public var maxRecords: Swift.Int?
    /// The type of DB cluster snapshots to be returned. You can specify one of the following values:
    ///
    /// * automated - Return all DB cluster snapshots that have been automatically taken by Amazon Neptune for my Amazon account.
    ///
    /// * manual - Return all DB cluster snapshots that have been taken by my Amazon account.
    ///
    /// * shared - Return all manual DB cluster snapshots that have been shared to my Amazon account.
    ///
    /// * public - Return all DB cluster snapshots that have been marked as public.
    ///
    ///
    /// If you don't specify a SnapshotType value, then both automated and manual DB cluster snapshots are returned. You can include shared DB cluster snapshots with these results by setting the IncludeShared parameter to true. You can include public DB cluster snapshots with these results by setting the IncludePublic parameter to true. The IncludeShared and IncludePublic parameters don't apply for SnapshotType values of manual or automated. The IncludePublic parameter doesn't apply when SnapshotType is set to shared. The IncludeShared parameter doesn't apply when SnapshotType is set to public.
    public var snapshotType: Swift.String?

    public init(
        dbClusterIdentifier: Swift.String? = nil,
        dbClusterSnapshotIdentifier: Swift.String? = nil,
        filters: [NeptuneClientTypes.Filter]? = nil,
        includePublic: Swift.Bool? = nil,
        includeShared: Swift.Bool? = nil,
        marker: Swift.String? = nil,
        maxRecords: Swift.Int? = nil,
        snapshotType: Swift.String? = nil
    )
    {
        self.dbClusterIdentifier = dbClusterIdentifier
        self.dbClusterSnapshotIdentifier = dbClusterSnapshotIdentifier
        self.filters = filters
        self.includePublic = includePublic
        self.includeShared = includeShared
        self.marker = marker
        self.maxRecords = maxRecords
        self.snapshotType = snapshotType
    }
}

public struct DescribeDBClusterSnapshotsOutput: Swift.Sendable {
    /// Provides a list of DB cluster snapshots for the user.
    public var dbClusterSnapshots: [NeptuneClientTypes.DBClusterSnapshot]?
    /// An optional pagination token provided by a previous [DescribeDBClusterSnapshots] request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords.
    public var marker: Swift.String?

    public init(
        dbClusterSnapshots: [NeptuneClientTypes.DBClusterSnapshot]? = nil,
        marker: Swift.String? = nil
    )
    {
        self.dbClusterSnapshots = dbClusterSnapshots
        self.marker = marker
    }
}

public struct DescribeDBEngineVersionsInput: Swift.Sendable {
    /// The name of a specific DB parameter group family to return details for. Constraints:
    ///
    /// * If supplied, must match an existing DBParameterGroupFamily.
    public var dbParameterGroupFamily: Swift.String?
    /// Indicates that only the default version of the specified engine or engine and major version combination is returned.
    public var defaultOnly: Swift.Bool?
    /// The database engine to return.
    public var engine: Swift.String?
    /// The database engine version to return. Example: 5.1.49
    public var engineVersion: Swift.String?
    /// Not currently supported.
    public var filters: [NeptuneClientTypes.Filter]?
    /// If this parameter is specified and the requested engine supports the CharacterSetName parameter for CreateDBInstance, the response includes a list of supported character sets for each engine version.
    public var listSupportedCharacterSets: Swift.Bool?
    /// If this parameter is specified and the requested engine supports the TimeZone parameter for CreateDBInstance, the response includes a list of supported time zones for each engine version.
    public var listSupportedTimezones: Swift.Bool?
    /// An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords.
    public var marker: Swift.String?
    /// The maximum number of records to include in the response. If more than the MaxRecords value is available, a pagination token called a marker is included in the response so that the following results can be retrieved. Default: 100 Constraints: Minimum 20, maximum 100.
    public var maxRecords: Swift.Int?

    public init(
        dbParameterGroupFamily: Swift.String? = nil,
        defaultOnly: Swift.Bool? = nil,
        engine: Swift.String? = nil,
        engineVersion: Swift.String? = nil,
        filters: [NeptuneClientTypes.Filter]? = nil,
        listSupportedCharacterSets: Swift.Bool? = nil,
        listSupportedTimezones: Swift.Bool? = nil,
        marker: Swift.String? = nil,
        maxRecords: Swift.Int? = nil
    )
    {
        self.dbParameterGroupFamily = dbParameterGroupFamily
        self.defaultOnly = defaultOnly
        self.engine = engine
        self.engineVersion = engineVersion
        self.filters = filters
        self.listSupportedCharacterSets = listSupportedCharacterSets
        self.listSupportedTimezones = listSupportedTimezones
        self.marker = marker
        self.maxRecords = maxRecords
    }
}

extension NeptuneClientTypes {

    /// Specifies a character set.
    public struct CharacterSet: Swift.Sendable {
        /// The description of the character set.
        public var characterSetDescription: Swift.String?
        /// The name of the character set.
        public var characterSetName: Swift.String?

        public init(
            characterSetDescription: Swift.String? = nil,
            characterSetName: Swift.String? = nil
        )
        {
            self.characterSetDescription = characterSetDescription
            self.characterSetName = characterSetName
        }
    }
}

extension NeptuneClientTypes {

    /// A time zone associated with a [DBInstance].
    public struct Timezone: Swift.Sendable {
        /// The name of the time zone.
        public var timezoneName: Swift.String?

        public init(
            timezoneName: Swift.String? = nil
        )
        {
            self.timezoneName = timezoneName
        }
    }
}

extension NeptuneClientTypes {

    /// The version of the database engine that a DB instance can be upgraded to.
    public struct UpgradeTarget: Swift.Sendable {
        /// A value that indicates whether the target version is applied to any source DB instances that have AutoMinorVersionUpgrade set to true.
        public var autoUpgrade: Swift.Bool?
        /// The version of the database engine that a DB instance can be upgraded to.
        public var description: Swift.String?
        /// The name of the upgrade target database engine.
        public var engine: Swift.String?
        /// The version number of the upgrade target database engine.
        public var engineVersion: Swift.String?
        /// A value that indicates whether a database engine is upgraded to a major version.
        public var isMajorVersionUpgrade: Swift.Bool?
        /// A value that indicates whether you can use Neptune global databases with the target engine version.
        public var supportsGlobalDatabases: Swift.Bool?

        public init(
            autoUpgrade: Swift.Bool? = nil,
            description: Swift.String? = nil,
            engine: Swift.String? = nil,
            engineVersion: Swift.String? = nil,
            isMajorVersionUpgrade: Swift.Bool? = nil,
            supportsGlobalDatabases: Swift.Bool? = nil
        )
        {
            self.autoUpgrade = autoUpgrade
            self.description = description
            self.engine = engine
            self.engineVersion = engineVersion
            self.isMajorVersionUpgrade = isMajorVersionUpgrade
            self.supportsGlobalDatabases = supportsGlobalDatabases
        }
    }
}

extension NeptuneClientTypes {

    /// This data type is used as a response element in the action [DescribeDBEngineVersions].
    public struct DBEngineVersion: Swift.Sendable {
        /// The description of the database engine.
        public var dbEngineDescription: Swift.String?
        /// The description of the database engine version.
        public var dbEngineVersionDescription: Swift.String?
        /// The name of the DB parameter group family for the database engine.
        public var dbParameterGroupFamily: Swift.String?
        /// (Not supported by Neptune)
        public var defaultCharacterSet: NeptuneClientTypes.CharacterSet?
        /// The name of the database engine.
        public var engine: Swift.String?
        /// The version number of the database engine.
        public var engineVersion: Swift.String?
        /// The types of logs that the database engine has available for export to CloudWatch Logs.
        public var exportableLogTypes: [Swift.String]?
        /// (Not supported by Neptune)
        public var supportedCharacterSets: [NeptuneClientTypes.CharacterSet]?
        /// A list of the time zones supported by this engine for the Timezone parameter of the CreateDBInstance action.
        public var supportedTimezones: [NeptuneClientTypes.Timezone]?
        /// A value that indicates whether you can use Aurora global databases with a specific DB engine version.
        public var supportsGlobalDatabases: Swift.Bool?
        /// A value that indicates whether the engine version supports exporting the log types specified by ExportableLogTypes to CloudWatch Logs.
        public var supportsLogExportsToCloudwatchLogs: Swift.Bool?
        /// Indicates whether the database engine version supports read replicas.
        public var supportsReadReplica: Swift.Bool?
        /// A list of engine versions that this database engine version can be upgraded to.
        public var validUpgradeTarget: [NeptuneClientTypes.UpgradeTarget]?

        public init(
            dbEngineDescription: Swift.String? = nil,
            dbEngineVersionDescription: Swift.String? = nil,
            dbParameterGroupFamily: Swift.String? = nil,
            defaultCharacterSet: NeptuneClientTypes.CharacterSet? = nil,
            engine: Swift.String? = nil,
            engineVersion: Swift.String? = nil,
            exportableLogTypes: [Swift.String]? = nil,
            supportedCharacterSets: [NeptuneClientTypes.CharacterSet]? = nil,
            supportedTimezones: [NeptuneClientTypes.Timezone]? = nil,
            supportsGlobalDatabases: Swift.Bool? = nil,
            supportsLogExportsToCloudwatchLogs: Swift.Bool? = nil,
            supportsReadReplica: Swift.Bool? = nil,
            validUpgradeTarget: [NeptuneClientTypes.UpgradeTarget]? = nil
        )
        {
            self.dbEngineDescription = dbEngineDescription
            self.dbEngineVersionDescription = dbEngineVersionDescription
            self.dbParameterGroupFamily = dbParameterGroupFamily
            self.defaultCharacterSet = defaultCharacterSet
            self.engine = engine
            self.engineVersion = engineVersion
            self.exportableLogTypes = exportableLogTypes
            self.supportedCharacterSets = supportedCharacterSets
            self.supportedTimezones = supportedTimezones
            self.supportsGlobalDatabases = supportsGlobalDatabases
            self.supportsLogExportsToCloudwatchLogs = supportsLogExportsToCloudwatchLogs
            self.supportsReadReplica = supportsReadReplica
            self.validUpgradeTarget = validUpgradeTarget
        }
    }
}

public struct DescribeDBEngineVersionsOutput: Swift.Sendable {
    /// A list of DBEngineVersion elements.
    public var dbEngineVersions: [NeptuneClientTypes.DBEngineVersion]?
    /// An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords.
    public var marker: Swift.String?

    public init(
        dbEngineVersions: [NeptuneClientTypes.DBEngineVersion]? = nil,
        marker: Swift.String? = nil
    )
    {
        self.dbEngineVersions = dbEngineVersions
        self.marker = marker
    }
}

public struct DescribeDBInstancesInput: Swift.Sendable {
    /// The user-supplied instance identifier. If this parameter is specified, information from only the specific DB instance is returned. This parameter isn't case-sensitive. Constraints:
    ///
    /// * If supplied, must match the identifier of an existing DBInstance.
    public var dbInstanceIdentifier: Swift.String?
    /// A filter that specifies one or more DB instances to describe. Supported filters:
    ///
    /// * db-cluster-id - Accepts DB cluster identifiers and DB cluster Amazon Resource Names (ARNs). The results list will only include information about the DB instances associated with the DB clusters identified by these ARNs.
    ///
    /// * engine - Accepts an engine name (such as neptune), and restricts the results list to DB instances created by that engine.
    ///
    ///
    /// For example, to invoke this API from the Amazon CLI and filter so that only Neptune DB instances are returned, you could use the following command:
    public var filters: [NeptuneClientTypes.Filter]?
    /// An optional pagination token provided by a previous DescribeDBInstances request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords.
    public var marker: Swift.String?
    /// The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. Default: 100 Constraints: Minimum 20, maximum 100.
    public var maxRecords: Swift.Int?

    public init(
        dbInstanceIdentifier: Swift.String? = nil,
        filters: [NeptuneClientTypes.Filter]? = nil,
        marker: Swift.String? = nil,
        maxRecords: Swift.Int? = nil
    )
    {
        self.dbInstanceIdentifier = dbInstanceIdentifier
        self.filters = filters
        self.marker = marker
        self.maxRecords = maxRecords
    }
}

public struct DescribeDBInstancesOutput: Swift.Sendable {
    /// A list of [DBInstance] instances.
    public var dbInstances: [NeptuneClientTypes.DBInstance]?
    /// An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords .
    public var marker: Swift.String?

    public init(
        dbInstances: [NeptuneClientTypes.DBInstance]? = nil,
        marker: Swift.String? = nil
    )
    {
        self.dbInstances = dbInstances
        self.marker = marker
    }
}

public struct DescribeDBParameterGroupsInput: Swift.Sendable {
    /// The name of a specific DB parameter group to return details for. Constraints:
    ///
    /// * If supplied, must match the name of an existing DBClusterParameterGroup.
    public var dbParameterGroupName: Swift.String?
    /// This parameter is not currently supported.
    public var filters: [NeptuneClientTypes.Filter]?
    /// An optional pagination token provided by a previous DescribeDBParameterGroups request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords.
    public var marker: Swift.String?
    /// The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. Default: 100 Constraints: Minimum 20, maximum 100.
    public var maxRecords: Swift.Int?

    public init(
        dbParameterGroupName: Swift.String? = nil,
        filters: [NeptuneClientTypes.Filter]? = nil,
        marker: Swift.String? = nil,
        maxRecords: Swift.Int? = nil
    )
    {
        self.dbParameterGroupName = dbParameterGroupName
        self.filters = filters
        self.marker = marker
        self.maxRecords = maxRecords
    }
}

public struct DescribeDBParameterGroupsOutput: Swift.Sendable {
    /// A list of [DBParameterGroup] instances.
    public var dbParameterGroups: [NeptuneClientTypes.DBParameterGroup]?
    /// An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords.
    public var marker: Swift.String?

    public init(
        dbParameterGroups: [NeptuneClientTypes.DBParameterGroup]? = nil,
        marker: Swift.String? = nil
    )
    {
        self.dbParameterGroups = dbParameterGroups
        self.marker = marker
    }
}

public struct DescribeDBParametersInput: Swift.Sendable {
    /// The name of a specific DB parameter group to return details for. Constraints:
    ///
    /// * If supplied, must match the name of an existing DBParameterGroup.
    /// This member is required.
    public var dbParameterGroupName: Swift.String?
    /// This parameter is not currently supported.
    public var filters: [NeptuneClientTypes.Filter]?
    /// An optional pagination token provided by a previous DescribeDBParameters request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords.
    public var marker: Swift.String?
    /// The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. Default: 100 Constraints: Minimum 20, maximum 100.
    public var maxRecords: Swift.Int?
    /// The parameter types to return. Default: All parameter types returned Valid Values: user | system | engine-default
    public var source: Swift.String?

    public init(
        dbParameterGroupName: Swift.String? = nil,
        filters: [NeptuneClientTypes.Filter]? = nil,
        marker: Swift.String? = nil,
        maxRecords: Swift.Int? = nil,
        source: Swift.String? = nil
    )
    {
        self.dbParameterGroupName = dbParameterGroupName
        self.filters = filters
        self.marker = marker
        self.maxRecords = maxRecords
        self.source = source
    }
}

public struct DescribeDBParametersOutput: Swift.Sendable {
    /// An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords.
    public var marker: Swift.String?
    /// A list of [Parameter] values.
    public var parameters: [NeptuneClientTypes.Parameter]?

    public init(
        marker: Swift.String? = nil,
        parameters: [NeptuneClientTypes.Parameter]? = nil
    )
    {
        self.marker = marker
        self.parameters = parameters
    }
}

public struct DescribeDBSubnetGroupsInput: Swift.Sendable {
    /// The name of the DB subnet group to return details for.
    public var dbSubnetGroupName: Swift.String?
    /// This parameter is not currently supported.
    public var filters: [NeptuneClientTypes.Filter]?
    /// An optional pagination token provided by a previous DescribeDBSubnetGroups request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords.
    public var marker: Swift.String?
    /// The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. Default: 100 Constraints: Minimum 20, maximum 100.
    public var maxRecords: Swift.Int?

    public init(
        dbSubnetGroupName: Swift.String? = nil,
        filters: [NeptuneClientTypes.Filter]? = nil,
        marker: Swift.String? = nil,
        maxRecords: Swift.Int? = nil
    )
    {
        self.dbSubnetGroupName = dbSubnetGroupName
        self.filters = filters
        self.marker = marker
        self.maxRecords = maxRecords
    }
}

public struct DescribeDBSubnetGroupsOutput: Swift.Sendable {
    /// A list of [DBSubnetGroup] instances.
    public var dbSubnetGroups: [NeptuneClientTypes.DBSubnetGroup]?
    /// An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords.
    public var marker: Swift.String?

    public init(
        dbSubnetGroups: [NeptuneClientTypes.DBSubnetGroup]? = nil,
        marker: Swift.String? = nil
    )
    {
        self.dbSubnetGroups = dbSubnetGroups
        self.marker = marker
    }
}

public struct DescribeEngineDefaultClusterParametersInput: Swift.Sendable {
    /// The name of the DB cluster parameter group family to return engine parameter information for.
    /// This member is required.
    public var dbParameterGroupFamily: Swift.String?
    /// This parameter is not currently supported.
    public var filters: [NeptuneClientTypes.Filter]?
    /// An optional pagination token provided by a previous DescribeEngineDefaultClusterParameters request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords.
    public var marker: Swift.String?
    /// The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. Default: 100 Constraints: Minimum 20, maximum 100.
    public var maxRecords: Swift.Int?

    public init(
        dbParameterGroupFamily: Swift.String? = nil,
        filters: [NeptuneClientTypes.Filter]? = nil,
        marker: Swift.String? = nil,
        maxRecords: Swift.Int? = nil
    )
    {
        self.dbParameterGroupFamily = dbParameterGroupFamily
        self.filters = filters
        self.marker = marker
        self.maxRecords = maxRecords
    }
}

extension NeptuneClientTypes {

    /// Contains the result of a successful invocation of the [DescribeEngineDefaultParameters] action.
    public struct EngineDefaults: Swift.Sendable, Swift.Equatable {
        /// Specifies the name of the DB parameter group family that the engine default parameters apply to.
        public var dbParameterGroupFamily: Swift.String?
        /// An optional pagination token provided by a previous EngineDefaults request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords .
        public var marker: Swift.String?
        /// Contains a list of engine default parameters.
        public var parameters: [NeptuneClientTypes.Parameter]?

        public init(
            dbParameterGroupFamily: Swift.String? = nil,
            marker: Swift.String? = nil,
            parameters: [NeptuneClientTypes.Parameter]? = nil
        )
        {
            self.dbParameterGroupFamily = dbParameterGroupFamily
            self.marker = marker
            self.parameters = parameters
        }
    }
}

public struct DescribeEngineDefaultClusterParametersOutput: Swift.Sendable {
    /// Contains the result of a successful invocation of the [DescribeEngineDefaultParameters] action.
    public var engineDefaults: NeptuneClientTypes.EngineDefaults?

    public init(
        engineDefaults: NeptuneClientTypes.EngineDefaults? = nil
    )
    {
        self.engineDefaults = engineDefaults
    }
}

public struct DescribeEngineDefaultParametersInput: Swift.Sendable {
    /// The name of the DB parameter group family.
    /// This member is required.
    public var dbParameterGroupFamily: Swift.String?
    /// Not currently supported.
    public var filters: [NeptuneClientTypes.Filter]?
    /// An optional pagination token provided by a previous DescribeEngineDefaultParameters request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords.
    public var marker: Swift.String?
    /// The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. Default: 100 Constraints: Minimum 20, maximum 100.
    public var maxRecords: Swift.Int?

    public init(
        dbParameterGroupFamily: Swift.String? = nil,
        filters: [NeptuneClientTypes.Filter]? = nil,
        marker: Swift.String? = nil,
        maxRecords: Swift.Int? = nil
    )
    {
        self.dbParameterGroupFamily = dbParameterGroupFamily
        self.filters = filters
        self.marker = marker
        self.maxRecords = maxRecords
    }
}

public struct DescribeEngineDefaultParametersOutput: Swift.Sendable {
    /// Contains the result of a successful invocation of the [DescribeEngineDefaultParameters] action.
    public var engineDefaults: NeptuneClientTypes.EngineDefaults?

    public init(
        engineDefaults: NeptuneClientTypes.EngineDefaults? = nil
    )
    {
        self.engineDefaults = engineDefaults
    }
}

public struct DescribeEventCategoriesInput: Swift.Sendable {
    /// This parameter is not currently supported.
    public var filters: [NeptuneClientTypes.Filter]?
    /// The type of source that is generating the events. Valid values: db-instance | db-parameter-group | db-security-group | db-snapshot
    public var sourceType: Swift.String?

    public init(
        filters: [NeptuneClientTypes.Filter]? = nil,
        sourceType: Swift.String? = nil
    )
    {
        self.filters = filters
        self.sourceType = sourceType
    }
}

extension NeptuneClientTypes {

    /// Contains the results of a successful invocation of the [DescribeEventCategories] action.
    public struct EventCategoriesMap: Swift.Sendable {
        /// The event categories for the specified source type
        public var eventCategories: [Swift.String]?
        /// The source type that the returned categories belong to
        public var sourceType: Swift.String?

        public init(
            eventCategories: [Swift.String]? = nil,
            sourceType: Swift.String? = nil
        )
        {
            self.eventCategories = eventCategories
            self.sourceType = sourceType
        }
    }
}

public struct DescribeEventCategoriesOutput: Swift.Sendable {
    /// A list of EventCategoriesMap data types.
    public var eventCategoriesMapList: [NeptuneClientTypes.EventCategoriesMap]?

    public init(
        eventCategoriesMapList: [NeptuneClientTypes.EventCategoriesMap]? = nil
    )
    {
        self.eventCategoriesMapList = eventCategoriesMapList
    }
}

extension NeptuneClientTypes {

    public enum SourceType: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case dbCluster
        case dbClusterSnapshot
        case dbInstance
        case dbParameterGroup
        case dbSecurityGroup
        case dbSnapshot
        case sdkUnknown(Swift.String)

        public static var allCases: [SourceType] {
            return [
                .dbCluster,
                .dbClusterSnapshot,
                .dbInstance,
                .dbParameterGroup,
                .dbSecurityGroup,
                .dbSnapshot
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .dbCluster: return "db-cluster"
            case .dbClusterSnapshot: return "db-cluster-snapshot"
            case .dbInstance: return "db-instance"
            case .dbParameterGroup: return "db-parameter-group"
            case .dbSecurityGroup: return "db-security-group"
            case .dbSnapshot: return "db-snapshot"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

public struct DescribeEventsInput: Swift.Sendable {
    /// The number of minutes to retrieve events for. Default: 60
    public var duration: Swift.Int?
    /// The end of the time interval for which to retrieve events, specified in ISO 8601 format. For more information about ISO 8601, go to the [ISO8601 Wikipedia page.](http://en.wikipedia.org/wiki/ISO_8601) Example: 2009-07-08T18:00Z
    public var endTime: Foundation.Date?
    /// A list of event categories that trigger notifications for a event notification subscription.
    public var eventCategories: [Swift.String]?
    /// This parameter is not currently supported.
    public var filters: [NeptuneClientTypes.Filter]?
    /// An optional pagination token provided by a previous DescribeEvents request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords.
    public var marker: Swift.String?
    /// The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. Default: 100 Constraints: Minimum 20, maximum 100.
    public var maxRecords: Swift.Int?
    /// The identifier of the event source for which events are returned. If not specified, then all sources are included in the response. Constraints:
    ///
    /// * If SourceIdentifier is supplied, SourceType must also be provided.
    ///
    /// * If the source type is DBInstance, then a DBInstanceIdentifier must be supplied.
    ///
    /// * If the source type is DBSecurityGroup, a DBSecurityGroupName must be supplied.
    ///
    /// * If the source type is DBParameterGroup, a DBParameterGroupName must be supplied.
    ///
    /// * If the source type is DBSnapshot, a DBSnapshotIdentifier must be supplied.
    ///
    /// * Cannot end with a hyphen or contain two consecutive hyphens.
    public var sourceIdentifier: Swift.String?
    /// The event source to retrieve events for. If no value is specified, all events are returned.
    public var sourceType: NeptuneClientTypes.SourceType?
    /// The beginning of the time interval to retrieve events for, specified in ISO 8601 format. For more information about ISO 8601, go to the [ISO8601 Wikipedia page.](http://en.wikipedia.org/wiki/ISO_8601) Example: 2009-07-08T18:00Z
    public var startTime: Foundation.Date?

    public init(
        duration: Swift.Int? = nil,
        endTime: Foundation.Date? = nil,
        eventCategories: [Swift.String]? = nil,
        filters: [NeptuneClientTypes.Filter]? = nil,
        marker: Swift.String? = nil,
        maxRecords: Swift.Int? = nil,
        sourceIdentifier: Swift.String? = nil,
        sourceType: NeptuneClientTypes.SourceType? = nil,
        startTime: Foundation.Date? = nil
    )
    {
        self.duration = duration
        self.endTime = endTime
        self.eventCategories = eventCategories
        self.filters = filters
        self.marker = marker
        self.maxRecords = maxRecords
        self.sourceIdentifier = sourceIdentifier
        self.sourceType = sourceType
        self.startTime = startTime
    }
}

extension NeptuneClientTypes {

    /// This data type is used as a response element in the [DescribeEvents] action.
    public struct Event: Swift.Sendable {
        /// Specifies the date and time of the event.
        public var date: Foundation.Date?
        /// Specifies the category for the event.
        public var eventCategories: [Swift.String]?
        /// Provides the text of this event.
        public var message: Swift.String?
        /// The Amazon Resource Name (ARN) for the event.
        public var sourceArn: Swift.String?
        /// Provides the identifier for the source of the event.
        public var sourceIdentifier: Swift.String?
        /// Specifies the source type for this event.
        public var sourceType: NeptuneClientTypes.SourceType?

        public init(
            date: Foundation.Date? = nil,
            eventCategories: [Swift.String]? = nil,
            message: Swift.String? = nil,
            sourceArn: Swift.String? = nil,
            sourceIdentifier: Swift.String? = nil,
            sourceType: NeptuneClientTypes.SourceType? = nil
        )
        {
            self.date = date
            self.eventCategories = eventCategories
            self.message = message
            self.sourceArn = sourceArn
            self.sourceIdentifier = sourceIdentifier
            self.sourceType = sourceType
        }
    }
}

public struct DescribeEventsOutput: Swift.Sendable {
    /// A list of [Event] instances.
    public var events: [NeptuneClientTypes.Event]?
    /// An optional pagination token provided by a previous Events request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords .
    public var marker: Swift.String?

    public init(
        events: [NeptuneClientTypes.Event]? = nil,
        marker: Swift.String? = nil
    )
    {
        self.events = events
        self.marker = marker
    }
}

public struct DescribeEventSubscriptionsInput: Swift.Sendable {
    /// This parameter is not currently supported.
    public var filters: [NeptuneClientTypes.Filter]?
    /// An optional pagination token provided by a previous DescribeOrderableDBInstanceOptions request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords .
    public var marker: Swift.String?
    /// The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. Default: 100 Constraints: Minimum 20, maximum 100.
    public var maxRecords: Swift.Int?
    /// The name of the event notification subscription you want to describe.
    public var subscriptionName: Swift.String?

    public init(
        filters: [NeptuneClientTypes.Filter]? = nil,
        marker: Swift.String? = nil,
        maxRecords: Swift.Int? = nil,
        subscriptionName: Swift.String? = nil
    )
    {
        self.filters = filters
        self.marker = marker
        self.maxRecords = maxRecords
        self.subscriptionName = subscriptionName
    }
}

public struct DescribeEventSubscriptionsOutput: Swift.Sendable {
    /// A list of EventSubscriptions data types.
    public var eventSubscriptionsList: [NeptuneClientTypes.EventSubscription]?
    /// An optional pagination token provided by a previous DescribeOrderableDBInstanceOptions request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords.
    public var marker: Swift.String?

    public init(
        eventSubscriptionsList: [NeptuneClientTypes.EventSubscription]? = nil,
        marker: Swift.String? = nil
    )
    {
        self.eventSubscriptionsList = eventSubscriptionsList
        self.marker = marker
    }
}

public struct DescribeGlobalClustersInput: Swift.Sendable {
    /// The user-supplied DB cluster identifier. If this parameter is specified, only information about the specified DB cluster is returned. This parameter is not case-sensitive. Constraints: If supplied, must match an existing DB cluster identifier.
    public var globalClusterIdentifier: Swift.String?
    /// (Optional) A pagination token returned by a previous call to DescribeGlobalClusters. If this parameter is specified, the response will only include records beyond the marker, up to the number specified by MaxRecords.
    public var marker: Swift.String?
    /// The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a pagination marker token is included in the response that you can use to retrieve the remaining results. Default: 100 Constraints: Minimum 20, maximum 100.
    public var maxRecords: Swift.Int?

    public init(
        globalClusterIdentifier: Swift.String? = nil,
        marker: Swift.String? = nil,
        maxRecords: Swift.Int? = nil
    )
    {
        self.globalClusterIdentifier = globalClusterIdentifier
        self.marker = marker
        self.maxRecords = maxRecords
    }
}

public struct DescribeGlobalClustersOutput: Swift.Sendable {
    /// The list of global clusters and instances returned by this request.
    public var globalClusters: [NeptuneClientTypes.GlobalCluster]?
    /// A pagination token. If this parameter is returned in the response, more records are available, which can be retrieved by one or more additional calls to DescribeGlobalClusters.
    public var marker: Swift.String?

    public init(
        globalClusters: [NeptuneClientTypes.GlobalCluster]? = nil,
        marker: Swift.String? = nil
    )
    {
        self.globalClusters = globalClusters
        self.marker = marker
    }
}

public struct DescribeOrderableDBInstanceOptionsInput: Swift.Sendable {
    /// The DB instance class filter value. Specify this parameter to show only the available offerings matching the specified DB instance class.
    public var dbInstanceClass: Swift.String?
    /// The name of the engine to retrieve DB instance options for.
    /// This member is required.
    public var engine: Swift.String?
    /// The engine version filter value. Specify this parameter to show only the available offerings matching the specified engine version.
    public var engineVersion: Swift.String?
    /// This parameter is not currently supported.
    public var filters: [NeptuneClientTypes.Filter]?
    /// The license model filter value. Specify this parameter to show only the available offerings matching the specified license model.
    public var licenseModel: Swift.String?
    /// An optional pagination token provided by a previous DescribeOrderableDBInstanceOptions request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords .
    public var marker: Swift.String?
    /// The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. Default: 100 Constraints: Minimum 20, maximum 100.
    public var maxRecords: Swift.Int?
    /// The VPC filter value. Specify this parameter to show only the available VPC or non-VPC offerings.
    public var vpc: Swift.Bool?

    public init(
        dbInstanceClass: Swift.String? = nil,
        engine: Swift.String? = nil,
        engineVersion: Swift.String? = nil,
        filters: [NeptuneClientTypes.Filter]? = nil,
        licenseModel: Swift.String? = nil,
        marker: Swift.String? = nil,
        maxRecords: Swift.Int? = nil,
        vpc: Swift.Bool? = nil
    )
    {
        self.dbInstanceClass = dbInstanceClass
        self.engine = engine
        self.engineVersion = engineVersion
        self.filters = filters
        self.licenseModel = licenseModel
        self.marker = marker
        self.maxRecords = maxRecords
        self.vpc = vpc
    }
}

extension NeptuneClientTypes {

    /// Contains a list of available options for a DB instance. This data type is used as a response element in the [DescribeOrderableDBInstanceOptions] action.
    public struct OrderableDBInstanceOption: Swift.Sendable {
        /// A list of Availability Zones for a DB instance.
        public var availabilityZones: [NeptuneClientTypes.AvailabilityZone]?
        /// The DB instance class for a DB instance.
        public var dbInstanceClass: Swift.String?
        /// The engine type of a DB instance.
        public var engine: Swift.String?
        /// The engine version of a DB instance.
        public var engineVersion: Swift.String?
        /// The license model for a DB instance.
        public var licenseModel: Swift.String?
        /// Maximum total provisioned IOPS for a DB instance.
        public var maxIopsPerDbInstance: Swift.Int?
        /// Maximum provisioned IOPS per GiB for a DB instance.
        public var maxIopsPerGib: Swift.Double?
        /// Maximum storage size for a DB instance.
        public var maxStorageSize: Swift.Int?
        /// Minimum total provisioned IOPS for a DB instance.
        public var minIopsPerDbInstance: Swift.Int?
        /// Minimum provisioned IOPS per GiB for a DB instance.
        public var minIopsPerGib: Swift.Double?
        /// Minimum storage size for a DB instance.
        public var minStorageSize: Swift.Int?
        /// Indicates whether a DB instance is Multi-AZ capable.
        public var multiAZCapable: Swift.Bool?
        /// Indicates whether a DB instance can have a Read Replica.
        public var readReplicaCapable: Swift.Bool?
        /// Indicates the storage type for a DB instance.
        public var storageType: Swift.String?
        /// Indicates whether a DB instance supports Enhanced Monitoring at intervals from 1 to 60 seconds.
        public var supportsEnhancedMonitoring: Swift.Bool?
        /// A value that indicates whether you can use Neptune global databases with a specific combination of other DB engine attributes.
        public var supportsGlobalDatabases: Swift.Bool?
        /// Indicates whether a DB instance supports IAM database authentication.
        public var supportsIAMDatabaseAuthentication: Swift.Bool?
        /// Indicates whether a DB instance supports provisioned IOPS.
        public var supportsIops: Swift.Bool?
        /// (Not supported by Neptune)
        public var supportsPerformanceInsights: Swift.Bool?
        /// Indicates whether a DB instance supports encrypted storage.
        public var supportsStorageEncryption: Swift.Bool?
        /// Indicates whether a DB instance is in a VPC.
        public var vpc: Swift.Bool?

        public init(
            availabilityZones: [NeptuneClientTypes.AvailabilityZone]? = nil,
            dbInstanceClass: Swift.String? = nil,
            engine: Swift.String? = nil,
            engineVersion: Swift.String? = nil,
            licenseModel: Swift.String? = nil,
            maxIopsPerDbInstance: Swift.Int? = nil,
            maxIopsPerGib: Swift.Double? = nil,
            maxStorageSize: Swift.Int? = nil,
            minIopsPerDbInstance: Swift.Int? = nil,
            minIopsPerGib: Swift.Double? = nil,
            minStorageSize: Swift.Int? = nil,
            multiAZCapable: Swift.Bool? = nil,
            readReplicaCapable: Swift.Bool? = nil,
            storageType: Swift.String? = nil,
            supportsEnhancedMonitoring: Swift.Bool? = nil,
            supportsGlobalDatabases: Swift.Bool? = nil,
            supportsIAMDatabaseAuthentication: Swift.Bool? = nil,
            supportsIops: Swift.Bool? = nil,
            supportsPerformanceInsights: Swift.Bool? = nil,
            supportsStorageEncryption: Swift.Bool? = nil,
            vpc: Swift.Bool? = nil
        )
        {
            self.availabilityZones = availabilityZones
            self.dbInstanceClass = dbInstanceClass
            self.engine = engine
            self.engineVersion = engineVersion
            self.licenseModel = licenseModel
            self.maxIopsPerDbInstance = maxIopsPerDbInstance
            self.maxIopsPerGib = maxIopsPerGib
            self.maxStorageSize = maxStorageSize
            self.minIopsPerDbInstance = minIopsPerDbInstance
            self.minIopsPerGib = minIopsPerGib
            self.minStorageSize = minStorageSize
            self.multiAZCapable = multiAZCapable
            self.readReplicaCapable = readReplicaCapable
            self.storageType = storageType
            self.supportsEnhancedMonitoring = supportsEnhancedMonitoring
            self.supportsGlobalDatabases = supportsGlobalDatabases
            self.supportsIAMDatabaseAuthentication = supportsIAMDatabaseAuthentication
            self.supportsIops = supportsIops
            self.supportsPerformanceInsights = supportsPerformanceInsights
            self.supportsStorageEncryption = supportsStorageEncryption
            self.vpc = vpc
        }
    }
}

public struct DescribeOrderableDBInstanceOptionsOutput: Swift.Sendable {
    /// An optional pagination token provided by a previous OrderableDBInstanceOptions request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords .
    public var marker: Swift.String?
    /// An [OrderableDBInstanceOption] structure containing information about orderable options for the DB instance.
    public var orderableDBInstanceOptions: [NeptuneClientTypes.OrderableDBInstanceOption]?

    public init(
        marker: Swift.String? = nil,
        orderableDBInstanceOptions: [NeptuneClientTypes.OrderableDBInstanceOption]? = nil
    )
    {
        self.marker = marker
        self.orderableDBInstanceOptions = orderableDBInstanceOptions
    }
}

public struct DescribePendingMaintenanceActionsInput: Swift.Sendable {
    /// A filter that specifies one or more resources to return pending maintenance actions for. Supported filters:
    ///
    /// * db-cluster-id - Accepts DB cluster identifiers and DB cluster Amazon Resource Names (ARNs). The results list will only include pending maintenance actions for the DB clusters identified by these ARNs.
    ///
    /// * db-instance-id - Accepts DB instance identifiers and DB instance ARNs. The results list will only include pending maintenance actions for the DB instances identified by these ARNs.
    public var filters: [NeptuneClientTypes.Filter]?
    /// An optional pagination token provided by a previous DescribePendingMaintenanceActions request. If this parameter is specified, the response includes only records beyond the marker, up to a number of records specified by MaxRecords.
    public var marker: Swift.String?
    /// The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. Default: 100 Constraints: Minimum 20, maximum 100.
    public var maxRecords: Swift.Int?
    /// The ARN of a resource to return pending maintenance actions for.
    public var resourceIdentifier: Swift.String?

    public init(
        filters: [NeptuneClientTypes.Filter]? = nil,
        marker: Swift.String? = nil,
        maxRecords: Swift.Int? = nil,
        resourceIdentifier: Swift.String? = nil
    )
    {
        self.filters = filters
        self.marker = marker
        self.maxRecords = maxRecords
        self.resourceIdentifier = resourceIdentifier
    }
}

public struct DescribePendingMaintenanceActionsOutput: Swift.Sendable {
    /// An optional pagination token provided by a previous DescribePendingMaintenanceActions request. If this parameter is specified, the response includes only records beyond the marker, up to a number of records specified by MaxRecords.
    public var marker: Swift.String?
    /// A list of the pending maintenance actions for the resource.
    public var pendingMaintenanceActions: [NeptuneClientTypes.ResourcePendingMaintenanceActions]?

    public init(
        marker: Swift.String? = nil,
        pendingMaintenanceActions: [NeptuneClientTypes.ResourcePendingMaintenanceActions]? = nil
    )
    {
        self.marker = marker
        self.pendingMaintenanceActions = pendingMaintenanceActions
    }
}

public struct DescribeValidDBInstanceModificationsInput: Swift.Sendable {
    /// The customer identifier or the ARN of your DB instance.
    /// This member is required.
    public var dbInstanceIdentifier: Swift.String?

    public init(
        dbInstanceIdentifier: Swift.String? = nil
    )
    {
        self.dbInstanceIdentifier = dbInstanceIdentifier
    }
}

extension NeptuneClientTypes {

    /// A range of double values.
    public struct DoubleRange: Swift.Sendable {
        /// The minimum value in the range.
        public var from: Swift.Double?
        /// The maximum value in the range.
        public var to: Swift.Double?

        public init(
            from: Swift.Double? = nil,
            to: Swift.Double? = nil
        )
        {
            self.from = from
            self.to = to
        }
    }
}

extension NeptuneClientTypes {

    /// A range of integer values.
    public struct Range: Swift.Sendable {
        /// The minimum value in the range.
        public var from: Swift.Int?
        /// The step value for the range. For example, if you have a range of 5,000 to 10,000, with a step value of 1,000, the valid values start at 5,000 and step up by 1,000. Even though 7,500 is within the range, it isn't a valid value for the range. The valid values are 5,000, 6,000, 7,000, 8,000...
        public var step: Swift.Int?
        /// The maximum value in the range.
        public var to: Swift.Int?

        public init(
            from: Swift.Int? = nil,
            step: Swift.Int? = nil,
            to: Swift.Int? = nil
        )
        {
            self.from = from
            self.step = step
            self.to = to
        }
    }
}

extension NeptuneClientTypes {

    /// Information about valid modifications that you can make to your DB instance. Contains the result of a successful call to the [DescribeValidDBInstanceModifications] action.
    public struct ValidStorageOptions: Swift.Sendable {
        /// The valid range of Provisioned IOPS to gibibytes of storage multiplier. For example, 3-10, which means that provisioned IOPS can be between 3 and 10 times storage.
        public var iopsToStorageRatio: [NeptuneClientTypes.DoubleRange]?
        /// The valid range of provisioned IOPS. For example, 1000-20000.
        public var provisionedIops: [NeptuneClientTypes.Range]?
        /// The valid range of storage in gibibytes. For example, 100 to 16384.
        public var storageSize: [NeptuneClientTypes.Range]?
        /// The valid storage types for your DB instance. For example, gp2, io1.
        public var storageType: Swift.String?

        public init(
            iopsToStorageRatio: [NeptuneClientTypes.DoubleRange]? = nil,
            provisionedIops: [NeptuneClientTypes.Range]? = nil,
            storageSize: [NeptuneClientTypes.Range]? = nil,
            storageType: Swift.String? = nil
        )
        {
            self.iopsToStorageRatio = iopsToStorageRatio
            self.provisionedIops = provisionedIops
            self.storageSize = storageSize
            self.storageType = storageType
        }
    }
}

extension NeptuneClientTypes {

    /// Information about valid modifications that you can make to your DB instance. Contains the result of a successful call to the [DescribeValidDBInstanceModifications] action. You can use this information when you call [ModifyDBInstance].
    public struct ValidDBInstanceModificationsMessage: Swift.Sendable {
        /// Valid storage options for your DB instance.
        public var storage: [NeptuneClientTypes.ValidStorageOptions]?

        public init(
            storage: [NeptuneClientTypes.ValidStorageOptions]? = nil
        )
        {
            self.storage = storage
        }
    }
}

public struct DescribeValidDBInstanceModificationsOutput: Swift.Sendable {
    /// Information about valid modifications that you can make to your DB instance. Contains the result of a successful call to the [DescribeValidDBInstanceModifications] action. You can use this information when you call [ModifyDBInstance].
    public var validDBInstanceModificationsMessage: NeptuneClientTypes.ValidDBInstanceModificationsMessage?

    public init(
        validDBInstanceModificationsMessage: NeptuneClientTypes.ValidDBInstanceModificationsMessage? = nil
    )
    {
        self.validDBInstanceModificationsMessage = validDBInstanceModificationsMessage
    }
}

public struct FailoverDBClusterInput: Swift.Sendable {
    /// A DB cluster identifier to force a failover for. This parameter is not case-sensitive. Constraints:
    ///
    /// * Must match the identifier of an existing DBCluster.
    public var dbClusterIdentifier: Swift.String?
    /// The name of the instance to promote to the primary instance. You must specify the instance identifier for an Read Replica in the DB cluster. For example, mydbcluster-replica1.
    public var targetDBInstanceIdentifier: Swift.String?

    public init(
        dbClusterIdentifier: Swift.String? = nil,
        targetDBInstanceIdentifier: Swift.String? = nil
    )
    {
        self.dbClusterIdentifier = dbClusterIdentifier
        self.targetDBInstanceIdentifier = targetDBInstanceIdentifier
    }
}

public struct FailoverDBClusterOutput: Swift.Sendable {
    /// Contains the details of an Amazon Neptune DB cluster. This data type is used as a response element in the [DescribeDBClusters].
    public var dbCluster: NeptuneClientTypes.DBCluster?

    public init(
        dbCluster: NeptuneClientTypes.DBCluster? = nil
    )
    {
        self.dbCluster = dbCluster
    }
}

public struct FailoverGlobalClusterInput: Swift.Sendable {
    /// Identifier of the Neptune global database that should be failed over. The identifier is the unique key assigned by the user when the Neptune global database was created. In other words, it's the name of the global database that you want to fail over. Constraints: Must match the identifier of an existing Neptune global database.
    /// This member is required.
    public var globalClusterIdentifier: Swift.String?
    /// The Amazon Resource Name (ARN) of the secondary Neptune DB cluster that you want to promote to primary for the global database.
    /// This member is required.
    public var targetDbClusterIdentifier: Swift.String?

    public init(
        globalClusterIdentifier: Swift.String? = nil,
        targetDbClusterIdentifier: Swift.String? = nil
    )
    {
        self.globalClusterIdentifier = globalClusterIdentifier
        self.targetDbClusterIdentifier = targetDbClusterIdentifier
    }
}

public struct FailoverGlobalClusterOutput: Swift.Sendable {
    /// Contains the details of an Amazon Neptune global database. This data type is used as a response element for the [CreateGlobalCluster], [DescribeGlobalClusters], [ModifyGlobalCluster], [DeleteGlobalCluster], [FailoverGlobalCluster], and [RemoveFromGlobalCluster] actions.
    public var globalCluster: NeptuneClientTypes.GlobalCluster?

    public init(
        globalCluster: NeptuneClientTypes.GlobalCluster? = nil
    )
    {
        self.globalCluster = globalCluster
    }
}

public struct ListTagsForResourceInput: Swift.Sendable {
    /// This parameter is not currently supported.
    public var filters: [NeptuneClientTypes.Filter]?
    /// The Amazon Neptune resource with tags to be listed. This value is an Amazon Resource Name (ARN). For information about creating an ARN, see [ Constructing an Amazon Resource Name (ARN)](https://docs.aws.amazon.com/neptune/latest/UserGuide/tagging.ARN.html#tagging.ARN.Constructing).
    /// This member is required.
    public var resourceName: Swift.String?

    public init(
        filters: [NeptuneClientTypes.Filter]? = nil,
        resourceName: Swift.String? = nil
    )
    {
        self.filters = filters
        self.resourceName = resourceName
    }
}

public struct ListTagsForResourceOutput: Swift.Sendable {
    /// List of tags returned by the ListTagsForResource operation.
    public var tagList: [NeptuneClientTypes.Tag]?

    public init(
        tagList: [NeptuneClientTypes.Tag]? = nil
    )
    {
        self.tagList = tagList
    }
}

/// The state of the DB security group does not allow deletion.
public struct InvalidDBSecurityGroupStateFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// A message describing the details of the problem.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidDBSecurityGroupState" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension NeptuneClientTypes {

    /// The configuration setting for the log types to be enabled for export to CloudWatch Logs for a specific DB instance or DB cluster. The EnableLogTypes and DisableLogTypes arrays determine which logs will be exported (or not exported) to CloudWatch Logs. Valid log types are: audit (to publish audit logs) and slowquery (to publish slow-query logs). See [Publishing Neptune logs to Amazon CloudWatch logs](https://docs.aws.amazon.com/neptune/latest/userguide/cloudwatch-logs.html).
    public struct CloudwatchLogsExportConfiguration: Swift.Sendable {
        /// The list of log types to disable.
        public var disableLogTypes: [Swift.String]?
        /// The list of log types to enable.
        public var enableLogTypes: [Swift.String]?

        public init(
            disableLogTypes: [Swift.String]? = nil,
            enableLogTypes: [Swift.String]? = nil
        )
        {
            self.disableLogTypes = disableLogTypes
            self.enableLogTypes = enableLogTypes
        }
    }
}

public struct ModifyDBClusterInput: Swift.Sendable {
    /// A value that indicates whether upgrades between different major versions are allowed. Constraints: You must set the allow-major-version-upgrade flag when providing an EngineVersion parameter that uses a different major version than the DB cluster's current version.
    public var allowMajorVersionUpgrade: Swift.Bool?
    /// A value that specifies whether the modifications in this request and any pending modifications are asynchronously applied as soon as possible, regardless of the PreferredMaintenanceWindow setting for the DB cluster. If this parameter is set to false, changes to the DB cluster are applied during the next maintenance window. The ApplyImmediately parameter only affects NewDBClusterIdentifier values. If you set the ApplyImmediately parameter value to false, then changes to NewDBClusterIdentifier values are applied during the next maintenance window. All other changes are applied immediately, regardless of the value of the ApplyImmediately parameter. Default: false
    public var applyImmediately: Swift.Bool?
    /// The number of days for which automated backups are retained. You must specify a minimum value of 1. Default: 1 Constraints:
    ///
    /// * Must be a value from 1 to 35
    public var backupRetentionPeriod: Swift.Int?
    /// The configuration setting for the log types to be enabled for export to CloudWatch Logs for a specific DB cluster. See [Using the CLI to publish Neptune audit logs to CloudWatch Logs](https://docs.aws.amazon.com/neptune/latest/userguide/cloudwatch-logs.html#cloudwatch-logs-cli).
    public var cloudwatchLogsExportConfiguration: NeptuneClientTypes.CloudwatchLogsExportConfiguration?
    /// If set to true, tags are copied to any snapshot of the DB cluster that is created.
    public var copyTagsToSnapshot: Swift.Bool?
    /// The DB cluster identifier for the cluster being modified. This parameter is not case-sensitive. Constraints:
    ///
    /// * Must match the identifier of an existing DBCluster.
    /// This member is required.
    public var dbClusterIdentifier: Swift.String?
    /// The name of the DB cluster parameter group to use for the DB cluster.
    public var dbClusterParameterGroupName: Swift.String?
    /// The name of the DB parameter group to apply to all instances of the DB cluster. When you apply a parameter group using DBInstanceParameterGroupName, parameter changes aren't applied during the next maintenance window but instead are applied immediately. Default: The existing name setting Constraints:
    ///
    /// * The DB parameter group must be in the same DB parameter group family as the target DB cluster version.
    ///
    /// * The DBInstanceParameterGroupName parameter is only valid in combination with the AllowMajorVersionUpgrade parameter.
    public var dbInstanceParameterGroupName: Swift.String?
    /// A value that indicates whether the DB cluster has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled.
    public var deletionProtection: Swift.Bool?
    /// True to enable mapping of Amazon Identity and Access Management (IAM) accounts to database accounts, and otherwise false. Default: false
    public var enableIAMDatabaseAuthentication: Swift.Bool?
    /// The version number of the database engine to which you want to upgrade. Changing this parameter results in an outage. The change is applied during the next maintenance window unless the ApplyImmediately parameter is set to true. For a list of valid engine versions, see [Engine Releases for Amazon Neptune](https://docs.aws.amazon.com/neptune/latest/userguide/engine-releases.html), or call [DescribeDBEngineVersions].
    public var engineVersion: Swift.String?
    /// Not supported by Neptune.
    public var masterUserPassword: Swift.String?
    /// The new DB cluster identifier for the DB cluster when renaming a DB cluster. This value is stored as a lowercase string. Constraints:
    ///
    /// * Must contain from 1 to 63 letters, numbers, or hyphens
    ///
    /// * The first character must be a letter
    ///
    /// * Cannot end with a hyphen or contain two consecutive hyphens
    ///
    ///
    /// Example: my-cluster2
    public var newDBClusterIdentifier: Swift.String?
    /// Not supported by Neptune.
    public var optionGroupName: Swift.String?
    /// The port number on which the DB cluster accepts connections. Constraints: Value must be 1150-65535 Default: The same port as the original DB cluster.
    public var port: Swift.Int?
    /// The daily time range during which automated backups are created if automated backups are enabled, using the BackupRetentionPeriod parameter. The default is a 30-minute window selected at random from an 8-hour block of time for each Amazon Region. Constraints:
    ///
    /// * Must be in the format hh24:mi-hh24:mi.
    ///
    /// * Must be in Universal Coordinated Time (UTC).
    ///
    /// * Must not conflict with the preferred maintenance window.
    ///
    /// * Must be at least 30 minutes.
    public var preferredBackupWindow: Swift.String?
    /// The weekly time range during which system maintenance can occur, in Universal Coordinated Time (UTC). Format: ddd:hh24:mi-ddd:hh24:mi The default is a 30-minute window selected at random from an 8-hour block of time for each Amazon Region, occurring on a random day of the week. Valid Days: Mon, Tue, Wed, Thu, Fri, Sat, Sun. Constraints: Minimum 30-minute window.
    public var preferredMaintenanceWindow: Swift.String?
    /// Contains the scaling configuration of a Neptune Serverless DB cluster. For more information, see [Using Amazon Neptune Serverless](https://docs.aws.amazon.com/neptune/latest/userguide/neptune-serverless-using.html) in the Amazon Neptune User Guide.
    public var serverlessV2ScalingConfiguration: NeptuneClientTypes.ServerlessV2ScalingConfiguration?
    /// The storage type to associate with the DB cluster. Valid Values:
    ///
    /// * standard | iopt1
    ///
    ///
    /// Default:
    ///
    /// * standard
    public var storageType: Swift.String?
    /// A list of VPC security groups that the DB cluster will belong to.
    public var vpcSecurityGroupIds: [Swift.String]?

    public init(
        allowMajorVersionUpgrade: Swift.Bool? = nil,
        applyImmediately: Swift.Bool? = nil,
        backupRetentionPeriod: Swift.Int? = nil,
        cloudwatchLogsExportConfiguration: NeptuneClientTypes.CloudwatchLogsExportConfiguration? = nil,
        copyTagsToSnapshot: Swift.Bool? = nil,
        dbClusterIdentifier: Swift.String? = nil,
        dbClusterParameterGroupName: Swift.String? = nil,
        dbInstanceParameterGroupName: Swift.String? = nil,
        deletionProtection: Swift.Bool? = nil,
        enableIAMDatabaseAuthentication: Swift.Bool? = nil,
        engineVersion: Swift.String? = nil,
        masterUserPassword: Swift.String? = nil,
        newDBClusterIdentifier: Swift.String? = nil,
        optionGroupName: Swift.String? = nil,
        port: Swift.Int? = nil,
        preferredBackupWindow: Swift.String? = nil,
        preferredMaintenanceWindow: Swift.String? = nil,
        serverlessV2ScalingConfiguration: NeptuneClientTypes.ServerlessV2ScalingConfiguration? = nil,
        storageType: Swift.String? = nil,
        vpcSecurityGroupIds: [Swift.String]? = nil
    )
    {
        self.allowMajorVersionUpgrade = allowMajorVersionUpgrade
        self.applyImmediately = applyImmediately
        self.backupRetentionPeriod = backupRetentionPeriod
        self.cloudwatchLogsExportConfiguration = cloudwatchLogsExportConfiguration
        self.copyTagsToSnapshot = copyTagsToSnapshot
        self.dbClusterIdentifier = dbClusterIdentifier
        self.dbClusterParameterGroupName = dbClusterParameterGroupName
        self.dbInstanceParameterGroupName = dbInstanceParameterGroupName
        self.deletionProtection = deletionProtection
        self.enableIAMDatabaseAuthentication = enableIAMDatabaseAuthentication
        self.engineVersion = engineVersion
        self.masterUserPassword = masterUserPassword
        self.newDBClusterIdentifier = newDBClusterIdentifier
        self.optionGroupName = optionGroupName
        self.port = port
        self.preferredBackupWindow = preferredBackupWindow
        self.preferredMaintenanceWindow = preferredMaintenanceWindow
        self.serverlessV2ScalingConfiguration = serverlessV2ScalingConfiguration
        self.storageType = storageType
        self.vpcSecurityGroupIds = vpcSecurityGroupIds
    }
}

public struct ModifyDBClusterOutput: Swift.Sendable {
    /// Contains the details of an Amazon Neptune DB cluster. This data type is used as a response element in the [DescribeDBClusters].
    public var dbCluster: NeptuneClientTypes.DBCluster?

    public init(
        dbCluster: NeptuneClientTypes.DBCluster? = nil
    )
    {
        self.dbCluster = dbCluster
    }
}

public struct ModifyDBClusterEndpointInput: Swift.Sendable {
    /// The identifier of the endpoint to modify. This parameter is stored as a lowercase string.
    /// This member is required.
    public var dbClusterEndpointIdentifier: Swift.String?
    /// The type of the endpoint. One of: READER, WRITER, ANY.
    public var endpointType: Swift.String?
    /// List of DB instance identifiers that aren't part of the custom endpoint group. All other eligible instances are reachable through the custom endpoint. Only relevant if the list of static members is empty.
    public var excludedMembers: [Swift.String]?
    /// List of DB instance identifiers that are part of the custom endpoint group.
    public var staticMembers: [Swift.String]?

    public init(
        dbClusterEndpointIdentifier: Swift.String? = nil,
        endpointType: Swift.String? = nil,
        excludedMembers: [Swift.String]? = nil,
        staticMembers: [Swift.String]? = nil
    )
    {
        self.dbClusterEndpointIdentifier = dbClusterEndpointIdentifier
        self.endpointType = endpointType
        self.excludedMembers = excludedMembers
        self.staticMembers = staticMembers
    }
}

/// This data type represents the information you need to connect to an Amazon Neptune DB cluster. This data type is used as a response element in the following actions:
///
/// * CreateDBClusterEndpoint
///
/// * DescribeDBClusterEndpoints
///
/// * ModifyDBClusterEndpoint
///
/// * DeleteDBClusterEndpoint
///
///
/// For the data structure that represents Amazon RDS DB instance endpoints, see Endpoint.
public struct ModifyDBClusterEndpointOutput: Swift.Sendable {
    /// The type associated with a custom endpoint. One of: READER, WRITER, ANY.
    public var customEndpointType: Swift.String?
    /// The Amazon Resource Name (ARN) for the endpoint.
    public var dbClusterEndpointArn: Swift.String?
    /// The identifier associated with the endpoint. This parameter is stored as a lowercase string.
    public var dbClusterEndpointIdentifier: Swift.String?
    /// A unique system-generated identifier for an endpoint. It remains the same for the whole life of the endpoint.
    public var dbClusterEndpointResourceIdentifier: Swift.String?
    /// The DB cluster identifier of the DB cluster associated with the endpoint. This parameter is stored as a lowercase string.
    public var dbClusterIdentifier: Swift.String?
    /// The DNS address of the endpoint.
    public var endpoint: Swift.String?
    /// The type of the endpoint. One of: READER, WRITER, CUSTOM.
    public var endpointType: Swift.String?
    /// List of DB instance identifiers that aren't part of the custom endpoint group. All other eligible instances are reachable through the custom endpoint. Only relevant if the list of static members is empty.
    public var excludedMembers: [Swift.String]?
    /// List of DB instance identifiers that are part of the custom endpoint group.
    public var staticMembers: [Swift.String]?
    /// The current status of the endpoint. One of: creating, available, deleting, inactive, modifying. The inactive state applies to an endpoint that cannot be used for a certain kind of cluster, such as a writer endpoint for a read-only secondary cluster in a global database.
    public var status: Swift.String?

    public init(
        customEndpointType: Swift.String? = nil,
        dbClusterEndpointArn: Swift.String? = nil,
        dbClusterEndpointIdentifier: Swift.String? = nil,
        dbClusterEndpointResourceIdentifier: Swift.String? = nil,
        dbClusterIdentifier: Swift.String? = nil,
        endpoint: Swift.String? = nil,
        endpointType: Swift.String? = nil,
        excludedMembers: [Swift.String]? = nil,
        staticMembers: [Swift.String]? = nil,
        status: Swift.String? = nil
    )
    {
        self.customEndpointType = customEndpointType
        self.dbClusterEndpointArn = dbClusterEndpointArn
        self.dbClusterEndpointIdentifier = dbClusterEndpointIdentifier
        self.dbClusterEndpointResourceIdentifier = dbClusterEndpointResourceIdentifier
        self.dbClusterIdentifier = dbClusterIdentifier
        self.endpoint = endpoint
        self.endpointType = endpointType
        self.excludedMembers = excludedMembers
        self.staticMembers = staticMembers
        self.status = status
    }
}

public struct ModifyDBClusterParameterGroupInput: Swift.Sendable {
    /// The name of the DB cluster parameter group to modify.
    /// This member is required.
    public var dbClusterParameterGroupName: Swift.String?
    /// A list of parameters in the DB cluster parameter group to modify.
    /// This member is required.
    public var parameters: [NeptuneClientTypes.Parameter]?

    public init(
        dbClusterParameterGroupName: Swift.String? = nil,
        parameters: [NeptuneClientTypes.Parameter]? = nil
    )
    {
        self.dbClusterParameterGroupName = dbClusterParameterGroupName
        self.parameters = parameters
    }
}

public struct ModifyDBClusterParameterGroupOutput: Swift.Sendable {
    /// The name of the DB cluster parameter group. Constraints:
    ///
    /// * Must be 1 to 255 letters or numbers.
    ///
    /// * First character must be a letter
    ///
    /// * Cannot end with a hyphen or contain two consecutive hyphens
    ///
    ///
    /// This value is stored as a lowercase string.
    public var dbClusterParameterGroupName: Swift.String?

    public init(
        dbClusterParameterGroupName: Swift.String? = nil
    )
    {
        self.dbClusterParameterGroupName = dbClusterParameterGroupName
    }
}

/// You have exceeded the maximum number of accounts that you can share a manual DB snapshot with.
public struct SharedSnapshotQuotaExceededFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// A message describing the details of the problem.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "SharedSnapshotQuotaExceeded" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

public struct ModifyDBClusterSnapshotAttributeInput: Swift.Sendable {
    /// The name of the DB cluster snapshot attribute to modify. To manage authorization for other Amazon accounts to copy or restore a manual DB cluster snapshot, set this value to restore.
    /// This member is required.
    public var attributeName: Swift.String?
    /// The identifier for the DB cluster snapshot to modify the attributes for.
    /// This member is required.
    public var dbClusterSnapshotIdentifier: Swift.String?
    /// A list of DB cluster snapshot attributes to add to the attribute specified by AttributeName. To authorize other Amazon accounts to copy or restore a manual DB cluster snapshot, set this list to include one or more Amazon account IDs, or all to make the manual DB cluster snapshot restorable by any Amazon account. Do not add the all value for any manual DB cluster snapshots that contain private information that you don't want available to all Amazon accounts.
    public var valuesToAdd: [Swift.String]?
    /// A list of DB cluster snapshot attributes to remove from the attribute specified by AttributeName. To remove authorization for other Amazon accounts to copy or restore a manual DB cluster snapshot, set this list to include one or more Amazon account identifiers, or all to remove authorization for any Amazon account to copy or restore the DB cluster snapshot. If you specify all, an Amazon account whose account ID is explicitly added to the restore attribute can still copy or restore a manual DB cluster snapshot.
    public var valuesToRemove: [Swift.String]?

    public init(
        attributeName: Swift.String? = nil,
        dbClusterSnapshotIdentifier: Swift.String? = nil,
        valuesToAdd: [Swift.String]? = nil,
        valuesToRemove: [Swift.String]? = nil
    )
    {
        self.attributeName = attributeName
        self.dbClusterSnapshotIdentifier = dbClusterSnapshotIdentifier
        self.valuesToAdd = valuesToAdd
        self.valuesToRemove = valuesToRemove
    }
}

public struct ModifyDBClusterSnapshotAttributeOutput: Swift.Sendable {
    /// Contains the results of a successful call to the [DescribeDBClusterSnapshotAttributes] API action. Manual DB cluster snapshot attributes are used to authorize other Amazon accounts to copy or restore a manual DB cluster snapshot. For more information, see the [ModifyDBClusterSnapshotAttribute] API action.
    public var dbClusterSnapshotAttributesResult: NeptuneClientTypes.DBClusterSnapshotAttributesResult?

    public init(
        dbClusterSnapshotAttributesResult: NeptuneClientTypes.DBClusterSnapshotAttributesResult? = nil
    )
    {
        self.dbClusterSnapshotAttributesResult = dbClusterSnapshotAttributesResult
    }
}

/// CertificateIdentifier does not refer to an existing certificate.
public struct CertificateNotFoundFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// A message describing the details of the problem.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "CertificateNotFound" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The DB upgrade failed because a resource the DB depends on could not be modified.
public struct DBUpgradeDependencyFailureFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// A message describing the details of the problem.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "DBUpgradeDependencyFailure" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

public struct ModifyDBInstanceInput: Swift.Sendable {
    /// Not supported by Neptune.
    public var allocatedStorage: Swift.Int?
    /// Indicates that major version upgrades are allowed. Changing this parameter doesn't result in an outage and the change is asynchronously applied as soon as possible.
    public var allowMajorVersionUpgrade: Swift.Bool?
    /// Specifies whether the modifications in this request and any pending modifications are asynchronously applied as soon as possible, regardless of the PreferredMaintenanceWindow setting for the DB instance. If this parameter is set to false, changes to the DB instance are applied during the next maintenance window. Some parameter changes can cause an outage and are applied on the next call to [RebootDBInstance], or the next failure reboot. Default: false
    public var applyImmediately: Swift.Bool?
    /// Indicates that minor version upgrades are applied automatically to the DB instance during the maintenance window. Changing this parameter doesn't result in an outage except in the following case and the change is asynchronously applied as soon as possible. An outage will result if this parameter is set to true during the maintenance window, and a newer minor version is available, and Neptune has enabled auto patching for that engine version.
    public var autoMinorVersionUpgrade: Swift.Bool?
    /// Not applicable. The retention period for automated backups is managed by the DB cluster. For more information, see [ModifyDBCluster]. Default: Uses existing setting
    public var backupRetentionPeriod: Swift.Int?
    /// Indicates the certificate that needs to be associated with the instance.
    public var caCertificateIdentifier: Swift.String?
    /// The configuration setting for the log types to be enabled for export to CloudWatch Logs for a specific DB instance or DB cluster.
    public var cloudwatchLogsExportConfiguration: NeptuneClientTypes.CloudwatchLogsExportConfiguration?
    /// True to copy all tags from the DB instance to snapshots of the DB instance, and otherwise false. The default is false.
    public var copyTagsToSnapshot: Swift.Bool?
    /// The new compute and memory capacity of the DB instance, for example, db.m4.large. Not all DB instance classes are available in all Amazon Regions. If you modify the DB instance class, an outage occurs during the change. The change is applied during the next maintenance window, unless ApplyImmediately is specified as true for this request. Default: Uses existing setting
    public var dbInstanceClass: Swift.String?
    /// The DB instance identifier. This value is stored as a lowercase string. Constraints:
    ///
    /// * Must match the identifier of an existing DBInstance.
    /// This member is required.
    public var dbInstanceIdentifier: Swift.String?
    /// The name of the DB parameter group to apply to the DB instance. Changing this setting doesn't result in an outage. The parameter group name itself is changed immediately, but the actual parameter changes are not applied until you reboot the instance without failover. The db instance will NOT be rebooted automatically and the parameter changes will NOT be applied during the next maintenance window. Default: Uses existing setting Constraints: The DB parameter group must be in the same DB parameter group family as this DB instance.
    public var dbParameterGroupName: Swift.String?
    /// The port number on which the database accepts connections. The value of the DBPortNumber parameter must not match any of the port values specified for options in the option group for the DB instance. Your database will restart when you change the DBPortNumber value regardless of the value of the ApplyImmediately parameter. Default: 8182
    public var dbPortNumber: Swift.Int?
    /// A list of DB security groups to authorize on this DB instance. Changing this setting doesn't result in an outage and the change is asynchronously applied as soon as possible. Constraints:
    ///
    /// * If supplied, must match existing DBSecurityGroups.
    public var dbSecurityGroups: [Swift.String]?
    /// The new DB subnet group for the DB instance. You can use this parameter to move your DB instance to a different VPC. Changing the subnet group causes an outage during the change. The change is applied during the next maintenance window, unless you specify true for the ApplyImmediately parameter. Constraints: If supplied, must match the name of an existing DBSubnetGroup. Example: mySubnetGroup
    public var dbSubnetGroupName: Swift.String?
    /// A value that indicates whether the DB instance has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. See [Deleting a DB Instance](https://docs.aws.amazon.com/neptune/latest/userguide/manage-console-instances-delete.html).
    public var deletionProtection: Swift.Bool?
    /// Not supported.
    public var domain: Swift.String?
    /// Not supported
    public var domainIAMRoleName: Swift.String?
    /// True to enable mapping of Amazon Identity and Access Management (IAM) accounts to database accounts, and otherwise false. You can enable IAM database authentication for the following database engines Not applicable. Mapping Amazon IAM accounts to database accounts is managed by the DB cluster. For more information, see [ModifyDBCluster]. Default: false
    public var enableIAMDatabaseAuthentication: Swift.Bool?
    /// (Not supported by Neptune)
    public var enablePerformanceInsights: Swift.Bool?
    /// The version number of the database engine to upgrade to. Currently, setting this parameter has no effect. To upgrade your database engine to the most recent release, use the [ApplyPendingMaintenanceAction] API.
    public var engineVersion: Swift.String?
    /// The new Provisioned IOPS (I/O operations per second) value for the instance. Changing this setting doesn't result in an outage and the change is applied during the next maintenance window unless the ApplyImmediately parameter is set to true for this request. Default: Uses existing setting
    public var iops: Swift.Int?
    /// Not supported by Neptune.
    public var licenseModel: Swift.String?
    /// Not supported by Neptune.
    public var masterUserPassword: Swift.String?
    /// The interval, in seconds, between points when Enhanced Monitoring metrics are collected for the DB instance. To disable collecting Enhanced Monitoring metrics, specify 0. The default is 0. If MonitoringRoleArn is specified, then you must also set MonitoringInterval to a value other than 0. Valid Values: 0, 1, 5, 10, 15, 30, 60
    public var monitoringInterval: Swift.Int?
    /// The ARN for the IAM role that permits Neptune to send enhanced monitoring metrics to Amazon CloudWatch Logs. For example, arn:aws:iam:123456789012:role/emaccess. If MonitoringInterval is set to a value other than 0, then you must supply a MonitoringRoleArn value.
    public var monitoringRoleArn: Swift.String?
    /// Specifies if the DB instance is a Multi-AZ deployment. Changing this parameter doesn't result in an outage and the change is applied during the next maintenance window unless the ApplyImmediately parameter is set to true for this request.
    public var multiAZ: Swift.Bool?
    /// The new DB instance identifier for the DB instance when renaming a DB instance. When you change the DB instance identifier, an instance reboot will occur immediately if you set Apply Immediately to true, or will occur during the next maintenance window if Apply Immediately to false. This value is stored as a lowercase string. Constraints:
    ///
    /// * Must contain from 1 to 63 letters, numbers, or hyphens.
    ///
    /// * The first character must be a letter.
    ///
    /// * Cannot end with a hyphen or contain two consecutive hyphens.
    ///
    ///
    /// Example: mydbinstance
    public var newDBInstanceIdentifier: Swift.String?
    /// (Not supported by Neptune)
    public var optionGroupName: Swift.String?
    /// (Not supported by Neptune)
    public var performanceInsightsKMSKeyId: Swift.String?
    /// The daily time range during which automated backups are created if automated backups are enabled. Not applicable. The daily time range for creating automated backups is managed by the DB cluster. For more information, see [ModifyDBCluster]. Constraints:
    ///
    /// * Must be in the format hh24:mi-hh24:mi
    ///
    /// * Must be in Universal Time Coordinated (UTC)
    ///
    /// * Must not conflict with the preferred maintenance window
    ///
    /// * Must be at least 30 minutes
    public var preferredBackupWindow: Swift.String?
    /// The weekly time range (in UTC) during which system maintenance can occur, which might result in an outage. Changing this parameter doesn't result in an outage, except in the following situation, and the change is asynchronously applied as soon as possible. If there are pending actions that cause a reboot, and the maintenance window is changed to include the current time, then changing this parameter will cause a reboot of the DB instance. If moving this window to the current time, there must be at least 30 minutes between the current time and end of the window to ensure pending changes are applied. Default: Uses existing setting Format: ddd:hh24:mi-ddd:hh24:mi Valid Days: Mon | Tue | Wed | Thu | Fri | Sat | Sun Constraints: Must be at least 30 minutes
    public var preferredMaintenanceWindow: Swift.String?
    /// A value that specifies the order in which a Read Replica is promoted to the primary instance after a failure of the existing primary instance. Default: 1 Valid Values: 0 - 15
    public var promotionTier: Swift.Int?
    /// This flag should no longer be used.
    @available(*, deprecated)
    public var publiclyAccessible: Swift.Bool?
    /// Not supported.
    public var storageType: Swift.String?
    /// The ARN from the key store with which to associate the instance for TDE encryption.
    public var tdeCredentialArn: Swift.String?
    /// The password for the given ARN from the key store in order to access the device.
    public var tdeCredentialPassword: Swift.String?
    /// A list of EC2 VPC security groups to authorize on this DB instance. This change is asynchronously applied as soon as possible. Not applicable. The associated list of EC2 VPC security groups is managed by the DB cluster. For more information, see [ModifyDBCluster]. Constraints:
    ///
    /// * If supplied, must match existing VpcSecurityGroupIds.
    public var vpcSecurityGroupIds: [Swift.String]?

    public init(
        allocatedStorage: Swift.Int? = nil,
        allowMajorVersionUpgrade: Swift.Bool? = nil,
        applyImmediately: Swift.Bool? = nil,
        autoMinorVersionUpgrade: Swift.Bool? = nil,
        backupRetentionPeriod: Swift.Int? = nil,
        caCertificateIdentifier: Swift.String? = nil,
        cloudwatchLogsExportConfiguration: NeptuneClientTypes.CloudwatchLogsExportConfiguration? = nil,
        copyTagsToSnapshot: Swift.Bool? = nil,
        dbInstanceClass: Swift.String? = nil,
        dbInstanceIdentifier: Swift.String? = nil,
        dbParameterGroupName: Swift.String? = nil,
        dbPortNumber: Swift.Int? = nil,
        dbSecurityGroups: [Swift.String]? = nil,
        dbSubnetGroupName: Swift.String? = nil,
        deletionProtection: Swift.Bool? = nil,
        domain: Swift.String? = nil,
        domainIAMRoleName: Swift.String? = nil,
        enableIAMDatabaseAuthentication: Swift.Bool? = nil,
        enablePerformanceInsights: Swift.Bool? = nil,
        engineVersion: Swift.String? = nil,
        iops: Swift.Int? = nil,
        licenseModel: Swift.String? = nil,
        masterUserPassword: Swift.String? = nil,
        monitoringInterval: Swift.Int? = nil,
        monitoringRoleArn: Swift.String? = nil,
        multiAZ: Swift.Bool? = nil,
        newDBInstanceIdentifier: Swift.String? = nil,
        optionGroupName: Swift.String? = nil,
        performanceInsightsKMSKeyId: Swift.String? = nil,
        preferredBackupWindow: Swift.String? = nil,
        preferredMaintenanceWindow: Swift.String? = nil,
        promotionTier: Swift.Int? = nil,
        publiclyAccessible: Swift.Bool? = nil,
        storageType: Swift.String? = nil,
        tdeCredentialArn: Swift.String? = nil,
        tdeCredentialPassword: Swift.String? = nil,
        vpcSecurityGroupIds: [Swift.String]? = nil
    )
    {
        self.allocatedStorage = allocatedStorage
        self.allowMajorVersionUpgrade = allowMajorVersionUpgrade
        self.applyImmediately = applyImmediately
        self.autoMinorVersionUpgrade = autoMinorVersionUpgrade
        self.backupRetentionPeriod = backupRetentionPeriod
        self.caCertificateIdentifier = caCertificateIdentifier
        self.cloudwatchLogsExportConfiguration = cloudwatchLogsExportConfiguration
        self.copyTagsToSnapshot = copyTagsToSnapshot
        self.dbInstanceClass = dbInstanceClass
        self.dbInstanceIdentifier = dbInstanceIdentifier
        self.dbParameterGroupName = dbParameterGroupName
        self.dbPortNumber = dbPortNumber
        self.dbSecurityGroups = dbSecurityGroups
        self.dbSubnetGroupName = dbSubnetGroupName
        self.deletionProtection = deletionProtection
        self.domain = domain
        self.domainIAMRoleName = domainIAMRoleName
        self.enableIAMDatabaseAuthentication = enableIAMDatabaseAuthentication
        self.enablePerformanceInsights = enablePerformanceInsights
        self.engineVersion = engineVersion
        self.iops = iops
        self.licenseModel = licenseModel
        self.masterUserPassword = masterUserPassword
        self.monitoringInterval = monitoringInterval
        self.monitoringRoleArn = monitoringRoleArn
        self.multiAZ = multiAZ
        self.newDBInstanceIdentifier = newDBInstanceIdentifier
        self.optionGroupName = optionGroupName
        self.performanceInsightsKMSKeyId = performanceInsightsKMSKeyId
        self.preferredBackupWindow = preferredBackupWindow
        self.preferredMaintenanceWindow = preferredMaintenanceWindow
        self.promotionTier = promotionTier
        self.publiclyAccessible = publiclyAccessible
        self.storageType = storageType
        self.tdeCredentialArn = tdeCredentialArn
        self.tdeCredentialPassword = tdeCredentialPassword
        self.vpcSecurityGroupIds = vpcSecurityGroupIds
    }
}

extension ModifyDBInstanceInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ModifyDBInstanceInput(allocatedStorage: \(Swift.String(describing: allocatedStorage)), allowMajorVersionUpgrade: \(Swift.String(describing: allowMajorVersionUpgrade)), applyImmediately: \(Swift.String(describing: applyImmediately)), autoMinorVersionUpgrade: \(Swift.String(describing: autoMinorVersionUpgrade)), backupRetentionPeriod: \(Swift.String(describing: backupRetentionPeriod)), caCertificateIdentifier: \(Swift.String(describing: caCertificateIdentifier)), cloudwatchLogsExportConfiguration: \(Swift.String(describing: cloudwatchLogsExportConfiguration)), copyTagsToSnapshot: \(Swift.String(describing: copyTagsToSnapshot)), dbInstanceClass: \(Swift.String(describing: dbInstanceClass)), dbInstanceIdentifier: \(Swift.String(describing: dbInstanceIdentifier)), dbParameterGroupName: \(Swift.String(describing: dbParameterGroupName)), dbPortNumber: \(Swift.String(describing: dbPortNumber)), dbSecurityGroups: \(Swift.String(describing: dbSecurityGroups)), dbSubnetGroupName: \(Swift.String(describing: dbSubnetGroupName)), deletionProtection: \(Swift.String(describing: deletionProtection)), domain: \(Swift.String(describing: domain)), domainIAMRoleName: \(Swift.String(describing: domainIAMRoleName)), enableIAMDatabaseAuthentication: \(Swift.String(describing: enableIAMDatabaseAuthentication)), enablePerformanceInsights: \(Swift.String(describing: enablePerformanceInsights)), engineVersion: \(Swift.String(describing: engineVersion)), iops: \(Swift.String(describing: iops)), licenseModel: \(Swift.String(describing: licenseModel)), masterUserPassword: \(Swift.String(describing: masterUserPassword)), monitoringInterval: \(Swift.String(describing: monitoringInterval)), monitoringRoleArn: \(Swift.String(describing: monitoringRoleArn)), multiAZ: \(Swift.String(describing: multiAZ)), newDBInstanceIdentifier: \(Swift.String(describing: newDBInstanceIdentifier)), optionGroupName: \(Swift.String(describing: optionGroupName)), performanceInsightsKMSKeyId: \(Swift.String(describing: performanceInsightsKMSKeyId)), preferredBackupWindow: \(Swift.String(describing: preferredBackupWindow)), preferredMaintenanceWindow: \(Swift.String(describing: preferredMaintenanceWindow)), promotionTier: \(Swift.String(describing: promotionTier)), publiclyAccessible: \(Swift.String(describing: publiclyAccessible)), storageType: \(Swift.String(describing: storageType)), tdeCredentialArn: \(Swift.String(describing: tdeCredentialArn)), vpcSecurityGroupIds: \(Swift.String(describing: vpcSecurityGroupIds)), tdeCredentialPassword: \"CONTENT_REDACTED\")"}
}

public struct ModifyDBInstanceOutput: Swift.Sendable {
    /// Contains the details of an Amazon Neptune DB instance. This data type is used as a response element in the [DescribeDBInstances] action.
    public var dbInstance: NeptuneClientTypes.DBInstance?

    public init(
        dbInstance: NeptuneClientTypes.DBInstance? = nil
    )
    {
        self.dbInstance = dbInstance
    }
}

public struct ModifyDBParameterGroupInput: Swift.Sendable {
    /// The name of the DB parameter group. Constraints:
    ///
    /// * If supplied, must match the name of an existing DBParameterGroup.
    /// This member is required.
    public var dbParameterGroupName: Swift.String?
    /// An array of parameter names, values, and the apply method for the parameter update. At least one parameter name, value, and apply method must be supplied; subsequent arguments are optional. A maximum of 20 parameters can be modified in a single request. Valid Values (for the application method): immediate | pending-reboot You can use the immediate value with dynamic parameters only. You can use the pending-reboot value for both dynamic and static parameters, and changes are applied when you reboot the DB instance without failover.
    /// This member is required.
    public var parameters: [NeptuneClientTypes.Parameter]?

    public init(
        dbParameterGroupName: Swift.String? = nil,
        parameters: [NeptuneClientTypes.Parameter]? = nil
    )
    {
        self.dbParameterGroupName = dbParameterGroupName
        self.parameters = parameters
    }
}

public struct ModifyDBParameterGroupOutput: Swift.Sendable {
    /// Provides the name of the DB parameter group.
    public var dbParameterGroupName: Swift.String?

    public init(
        dbParameterGroupName: Swift.String? = nil
    )
    {
        self.dbParameterGroupName = dbParameterGroupName
    }
}

/// The DB subnet is already in use in the Availability Zone.
public struct SubnetAlreadyInUse: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// A message describing the details of the problem.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "SubnetAlreadyInUse" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

public struct ModifyDBSubnetGroupInput: Swift.Sendable {
    /// The description for the DB subnet group.
    public var dbSubnetGroupDescription: Swift.String?
    /// The name for the DB subnet group. This value is stored as a lowercase string. You can't modify the default subnet group. Constraints: Must match the name of an existing DBSubnetGroup. Must not be default. Example: mySubnetgroup
    /// This member is required.
    public var dbSubnetGroupName: Swift.String?
    /// The EC2 subnet IDs for the DB subnet group.
    /// This member is required.
    public var subnetIds: [Swift.String]?

    public init(
        dbSubnetGroupDescription: Swift.String? = nil,
        dbSubnetGroupName: Swift.String? = nil,
        subnetIds: [Swift.String]? = nil
    )
    {
        self.dbSubnetGroupDescription = dbSubnetGroupDescription
        self.dbSubnetGroupName = dbSubnetGroupName
        self.subnetIds = subnetIds
    }
}

public struct ModifyDBSubnetGroupOutput: Swift.Sendable {
    /// Contains the details of an Amazon Neptune DB subnet group. This data type is used as a response element in the [DescribeDBSubnetGroups] action.
    public var dbSubnetGroup: NeptuneClientTypes.DBSubnetGroup?

    public init(
        dbSubnetGroup: NeptuneClientTypes.DBSubnetGroup? = nil
    )
    {
        self.dbSubnetGroup = dbSubnetGroup
    }
}

public struct ModifyEventSubscriptionInput: Swift.Sendable {
    /// A Boolean value; set to true to activate the subscription.
    public var enabled: Swift.Bool?
    /// A list of event categories for a SourceType that you want to subscribe to. You can see a list of the categories for a given SourceType by using the DescribeEventCategories action.
    public var eventCategories: [Swift.String]?
    /// The Amazon Resource Name (ARN) of the SNS topic created for event notification. The ARN is created by Amazon SNS when you create a topic and subscribe to it.
    public var snsTopicArn: Swift.String?
    /// The type of source that is generating the events. For example, if you want to be notified of events generated by a DB instance, you would set this parameter to db-instance. if this value is not specified, all events are returned. Valid values: db-instance | db-parameter-group | db-security-group | db-snapshot
    public var sourceType: Swift.String?
    /// The name of the event notification subscription.
    /// This member is required.
    public var subscriptionName: Swift.String?

    public init(
        enabled: Swift.Bool? = nil,
        eventCategories: [Swift.String]? = nil,
        snsTopicArn: Swift.String? = nil,
        sourceType: Swift.String? = nil,
        subscriptionName: Swift.String? = nil
    )
    {
        self.enabled = enabled
        self.eventCategories = eventCategories
        self.snsTopicArn = snsTopicArn
        self.sourceType = sourceType
        self.subscriptionName = subscriptionName
    }
}

public struct ModifyEventSubscriptionOutput: Swift.Sendable {
    /// Contains the results of a successful invocation of the [DescribeEventSubscriptions] action.
    public var eventSubscription: NeptuneClientTypes.EventSubscription?

    public init(
        eventSubscription: NeptuneClientTypes.EventSubscription? = nil
    )
    {
        self.eventSubscription = eventSubscription
    }
}

public struct ModifyGlobalClusterInput: Swift.Sendable {
    /// A value that indicates whether major version upgrades are allowed. Constraints: You must allow major version upgrades if you specify a value for the EngineVersion parameter that is a different major version than the DB cluster's current version. If you upgrade the major version of a global database, the cluster and DB instance parameter groups are set to the default parameter groups for the new version, so you will need to apply any custom parameter groups after completing the upgrade.
    public var allowMajorVersionUpgrade: Swift.Bool?
    /// Indicates whether the global database has deletion protection enabled. The global database cannot be deleted when deletion protection is enabled.
    public var deletionProtection: Swift.Bool?
    /// The version number of the database engine to which you want to upgrade. Changing this parameter will result in an outage. The change is applied during the next maintenance window unless ApplyImmediately is enabled. To list all of the available Neptune engine versions, use the following command:
    public var engineVersion: Swift.String?
    /// The DB cluster identifier for the global cluster being modified. This parameter is not case-sensitive. Constraints: Must match the identifier of an existing global database cluster.
    /// This member is required.
    public var globalClusterIdentifier: Swift.String?
    /// A new cluster identifier to assign to the global database. This value is stored as a lowercase string. Constraints:
    ///
    /// * Must contain from 1 to 63 letters, numbers, or hyphens.
    ///
    /// * The first character must be a letter.
    ///
    /// * Can't end with a hyphen or contain two consecutive hyphens
    ///
    ///
    /// Example: my-cluster2
    public var newGlobalClusterIdentifier: Swift.String?

    public init(
        allowMajorVersionUpgrade: Swift.Bool? = nil,
        deletionProtection: Swift.Bool? = nil,
        engineVersion: Swift.String? = nil,
        globalClusterIdentifier: Swift.String? = nil,
        newGlobalClusterIdentifier: Swift.String? = nil
    )
    {
        self.allowMajorVersionUpgrade = allowMajorVersionUpgrade
        self.deletionProtection = deletionProtection
        self.engineVersion = engineVersion
        self.globalClusterIdentifier = globalClusterIdentifier
        self.newGlobalClusterIdentifier = newGlobalClusterIdentifier
    }
}

public struct ModifyGlobalClusterOutput: Swift.Sendable {
    /// Contains the details of an Amazon Neptune global database. This data type is used as a response element for the [CreateGlobalCluster], [DescribeGlobalClusters], [ModifyGlobalCluster], [DeleteGlobalCluster], [FailoverGlobalCluster], and [RemoveFromGlobalCluster] actions.
    public var globalCluster: NeptuneClientTypes.GlobalCluster?

    public init(
        globalCluster: NeptuneClientTypes.GlobalCluster? = nil
    )
    {
        self.globalCluster = globalCluster
    }
}

public struct PromoteReadReplicaDBClusterInput: Swift.Sendable {
    /// Not supported.
    /// This member is required.
    public var dbClusterIdentifier: Swift.String?

    public init(
        dbClusterIdentifier: Swift.String? = nil
    )
    {
        self.dbClusterIdentifier = dbClusterIdentifier
    }
}

public struct PromoteReadReplicaDBClusterOutput: Swift.Sendable {
    /// Contains the details of an Amazon Neptune DB cluster. This data type is used as a response element in the [DescribeDBClusters].
    public var dbCluster: NeptuneClientTypes.DBCluster?

    public init(
        dbCluster: NeptuneClientTypes.DBCluster? = nil
    )
    {
        self.dbCluster = dbCluster
    }
}

public struct RebootDBInstanceInput: Swift.Sendable {
    /// The DB instance identifier. This parameter is stored as a lowercase string. Constraints:
    ///
    /// * Must match the identifier of an existing DBInstance.
    /// This member is required.
    public var dbInstanceIdentifier: Swift.String?
    /// When true, the reboot is conducted through a MultiAZ failover. Constraint: You can't specify true if the instance is not configured for MultiAZ.
    public var forceFailover: Swift.Bool?

    public init(
        dbInstanceIdentifier: Swift.String? = nil,
        forceFailover: Swift.Bool? = nil
    )
    {
        self.dbInstanceIdentifier = dbInstanceIdentifier
        self.forceFailover = forceFailover
    }
}

public struct RebootDBInstanceOutput: Swift.Sendable {
    /// Contains the details of an Amazon Neptune DB instance. This data type is used as a response element in the [DescribeDBInstances] action.
    public var dbInstance: NeptuneClientTypes.DBInstance?

    public init(
        dbInstance: NeptuneClientTypes.DBInstance? = nil
    )
    {
        self.dbInstance = dbInstance
    }
}

public struct RemoveFromGlobalClusterInput: Swift.Sendable {
    /// The Amazon Resource Name (ARN) identifying the cluster to be detached from the Neptune global database cluster.
    /// This member is required.
    public var dbClusterIdentifier: Swift.String?
    /// The identifier of the Neptune global database from which to detach the specified Neptune DB cluster.
    /// This member is required.
    public var globalClusterIdentifier: Swift.String?

    public init(
        dbClusterIdentifier: Swift.String? = nil,
        globalClusterIdentifier: Swift.String? = nil
    )
    {
        self.dbClusterIdentifier = dbClusterIdentifier
        self.globalClusterIdentifier = globalClusterIdentifier
    }
}

public struct RemoveFromGlobalClusterOutput: Swift.Sendable {
    /// Contains the details of an Amazon Neptune global database. This data type is used as a response element for the [CreateGlobalCluster], [DescribeGlobalClusters], [ModifyGlobalCluster], [DeleteGlobalCluster], [FailoverGlobalCluster], and [RemoveFromGlobalCluster] actions.
    public var globalCluster: NeptuneClientTypes.GlobalCluster?

    public init(
        globalCluster: NeptuneClientTypes.GlobalCluster? = nil
    )
    {
        self.globalCluster = globalCluster
    }
}

/// The specified IAM role Amazon Resource Name (ARN) is not associated with the specified DB cluster.
public struct DBClusterRoleNotFoundFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// A message describing the details of the problem.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "DBClusterRoleNotFound" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

public struct RemoveRoleFromDBClusterInput: Swift.Sendable {
    /// The name of the DB cluster to disassociate the IAM role from.
    /// This member is required.
    public var dbClusterIdentifier: Swift.String?
    /// The name of the feature for the DB cluster that the IAM role is to be disassociated from. For the list of supported feature names, see [DescribeDBEngineVersions].
    public var featureName: Swift.String?
    /// The Amazon Resource Name (ARN) of the IAM role to disassociate from the DB cluster, for example arn:aws:iam::123456789012:role/NeptuneAccessRole.
    /// This member is required.
    public var roleArn: Swift.String?

    public init(
        dbClusterIdentifier: Swift.String? = nil,
        featureName: Swift.String? = nil,
        roleArn: Swift.String? = nil
    )
    {
        self.dbClusterIdentifier = dbClusterIdentifier
        self.featureName = featureName
        self.roleArn = roleArn
    }
}

public struct RemoveSourceIdentifierFromSubscriptionInput: Swift.Sendable {
    /// The source identifier to be removed from the subscription, such as the DB instance identifier for a DB instance or the name of a security group.
    /// This member is required.
    public var sourceIdentifier: Swift.String?
    /// The name of the event notification subscription you want to remove a source identifier from.
    /// This member is required.
    public var subscriptionName: Swift.String?

    public init(
        sourceIdentifier: Swift.String? = nil,
        subscriptionName: Swift.String? = nil
    )
    {
        self.sourceIdentifier = sourceIdentifier
        self.subscriptionName = subscriptionName
    }
}

public struct RemoveSourceIdentifierFromSubscriptionOutput: Swift.Sendable {
    /// Contains the results of a successful invocation of the [DescribeEventSubscriptions] action.
    public var eventSubscription: NeptuneClientTypes.EventSubscription?

    public init(
        eventSubscription: NeptuneClientTypes.EventSubscription? = nil
    )
    {
        self.eventSubscription = eventSubscription
    }
}

public struct RemoveTagsFromResourceInput: Swift.Sendable {
    /// The Amazon Neptune resource that the tags are removed from. This value is an Amazon Resource Name (ARN). For information about creating an ARN, see [ Constructing an Amazon Resource Name (ARN)](https://docs.aws.amazon.com/neptune/latest/UserGuide/tagging.ARN.html#tagging.ARN.Constructing).
    /// This member is required.
    public var resourceName: Swift.String?
    /// The tag key (name) of the tag to be removed.
    /// This member is required.
    public var tagKeys: [Swift.String]?

    public init(
        resourceName: Swift.String? = nil,
        tagKeys: [Swift.String]? = nil
    )
    {
        self.resourceName = resourceName
        self.tagKeys = tagKeys
    }
}

public struct ResetDBClusterParameterGroupInput: Swift.Sendable {
    /// The name of the DB cluster parameter group to reset.
    /// This member is required.
    public var dbClusterParameterGroupName: Swift.String?
    /// A list of parameter names in the DB cluster parameter group to reset to the default values. You can't use this parameter if the ResetAllParameters parameter is set to true.
    public var parameters: [NeptuneClientTypes.Parameter]?
    /// A value that is set to true to reset all parameters in the DB cluster parameter group to their default values, and false otherwise. You can't use this parameter if there is a list of parameter names specified for the Parameters parameter.
    public var resetAllParameters: Swift.Bool?

    public init(
        dbClusterParameterGroupName: Swift.String? = nil,
        parameters: [NeptuneClientTypes.Parameter]? = nil,
        resetAllParameters: Swift.Bool? = nil
    )
    {
        self.dbClusterParameterGroupName = dbClusterParameterGroupName
        self.parameters = parameters
        self.resetAllParameters = resetAllParameters
    }
}

public struct ResetDBClusterParameterGroupOutput: Swift.Sendable {
    /// The name of the DB cluster parameter group. Constraints:
    ///
    /// * Must be 1 to 255 letters or numbers.
    ///
    /// * First character must be a letter
    ///
    /// * Cannot end with a hyphen or contain two consecutive hyphens
    ///
    ///
    /// This value is stored as a lowercase string.
    public var dbClusterParameterGroupName: Swift.String?

    public init(
        dbClusterParameterGroupName: Swift.String? = nil
    )
    {
        self.dbClusterParameterGroupName = dbClusterParameterGroupName
    }
}

public struct ResetDBParameterGroupInput: Swift.Sendable {
    /// The name of the DB parameter group. Constraints:
    ///
    /// * Must match the name of an existing DBParameterGroup.
    /// This member is required.
    public var dbParameterGroupName: Swift.String?
    /// To reset the entire DB parameter group, specify the DBParameterGroup name and ResetAllParameters parameters. To reset specific parameters, provide a list of the following: ParameterName and ApplyMethod. A maximum of 20 parameters can be modified in a single request. Valid Values (for Apply method): pending-reboot
    public var parameters: [NeptuneClientTypes.Parameter]?
    /// Specifies whether (true) or not (false) to reset all parameters in the DB parameter group to default values. Default: true
    public var resetAllParameters: Swift.Bool?

    public init(
        dbParameterGroupName: Swift.String? = nil,
        parameters: [NeptuneClientTypes.Parameter]? = nil,
        resetAllParameters: Swift.Bool? = nil
    )
    {
        self.dbParameterGroupName = dbParameterGroupName
        self.parameters = parameters
        self.resetAllParameters = resetAllParameters
    }
}

public struct ResetDBParameterGroupOutput: Swift.Sendable {
    /// Provides the name of the DB parameter group.
    public var dbParameterGroupName: Swift.String?

    public init(
        dbParameterGroupName: Swift.String? = nil
    )
    {
        self.dbParameterGroupName = dbParameterGroupName
    }
}

/// The DB cluster does not have enough capacity for the current operation.
public struct InsufficientDBClusterCapacityFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// A message describing the details of the problem.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InsufficientDBClusterCapacityFault" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The state of the DB snapshot does not allow deletion.
public struct InvalidDBSnapshotStateFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// A message describing the details of the problem.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidDBSnapshotState" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// Cannot restore from vpc backup to non-vpc DB instance.
public struct InvalidRestoreFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// A message describing the details of the problem.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidRestoreFault" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

public struct RestoreDBClusterFromSnapshotInput: Swift.Sendable {
    /// Provides the list of EC2 Availability Zones that instances in the restored DB cluster can be created in.
    public var availabilityZones: [Swift.String]?
    /// If set to true, tags are copied to any snapshot of the restored DB cluster that is created.
    public var copyTagsToSnapshot: Swift.Bool?
    /// Not supported.
    public var databaseName: Swift.String?
    /// The name of the DB cluster to create from the DB snapshot or DB cluster snapshot. This parameter isn't case-sensitive. Constraints:
    ///
    /// * Must contain from 1 to 63 letters, numbers, or hyphens
    ///
    /// * First character must be a letter
    ///
    /// * Cannot end with a hyphen or contain two consecutive hyphens
    ///
    ///
    /// Example: my-snapshot-id
    /// This member is required.
    public var dbClusterIdentifier: Swift.String?
    /// The name of the DB cluster parameter group to associate with the new DB cluster. Constraints:
    ///
    /// * If supplied, must match the name of an existing DBClusterParameterGroup.
    public var dbClusterParameterGroupName: Swift.String?
    /// The name of the DB subnet group to use for the new DB cluster. Constraints: If supplied, must match the name of an existing DBSubnetGroup. Example: mySubnetgroup
    public var dbSubnetGroupName: Swift.String?
    /// A value that indicates whether the DB cluster has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled.
    public var deletionProtection: Swift.Bool?
    /// The list of logs that the restored DB cluster is to export to Amazon CloudWatch Logs.
    public var enableCloudwatchLogsExports: [Swift.String]?
    /// True to enable mapping of Amazon Identity and Access Management (IAM) accounts to database accounts, and otherwise false. Default: false
    public var enableIAMDatabaseAuthentication: Swift.Bool?
    /// The database engine to use for the new DB cluster. Default: The same as source Constraint: Must be compatible with the engine of the source
    /// This member is required.
    public var engine: Swift.String?
    /// The version of the database engine to use for the new DB cluster.
    public var engineVersion: Swift.String?
    /// The Amazon KMS key identifier to use when restoring an encrypted DB cluster from a DB snapshot or DB cluster snapshot. The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are restoring a DB cluster with the same Amazon account that owns the KMS encryption key used to encrypt the new DB cluster, then you can use the KMS key alias instead of the ARN for the KMS encryption key. If you do not specify a value for the KmsKeyId parameter, then the following will occur:
    ///
    /// * If the DB snapshot or DB cluster snapshot in SnapshotIdentifier is encrypted, then the restored DB cluster is encrypted using the KMS key that was used to encrypt the DB snapshot or DB cluster snapshot.
    ///
    /// * If the DB snapshot or DB cluster snapshot in SnapshotIdentifier is not encrypted, then the restored DB cluster is not encrypted.
    public var kmsKeyId: Swift.String?
    /// (Not supported by Neptune)
    public var optionGroupName: Swift.String?
    /// The port number on which the new DB cluster accepts connections. Constraints: Value must be 1150-65535 Default: The same port as the original DB cluster.
    public var port: Swift.Int?
    /// Contains the scaling configuration of a Neptune Serverless DB cluster. For more information, see [Using Amazon Neptune Serverless](https://docs.aws.amazon.com/neptune/latest/userguide/neptune-serverless-using.html) in the Amazon Neptune User Guide.
    public var serverlessV2ScalingConfiguration: NeptuneClientTypes.ServerlessV2ScalingConfiguration?
    /// The identifier for the DB snapshot or DB cluster snapshot to restore from. You can use either the name or the Amazon Resource Name (ARN) to specify a DB cluster snapshot. However, you can use only the ARN to specify a DB snapshot. Constraints:
    ///
    /// * Must match the identifier of an existing Snapshot.
    /// This member is required.
    public var snapshotIdentifier: Swift.String?
    /// Specifies the storage type to be associated with the DB cluster. Valid values: standard, iopt1 Default: standard
    public var storageType: Swift.String?
    /// The tags to be assigned to the restored DB cluster.
    public var tags: [NeptuneClientTypes.Tag]?
    /// A list of VPC security groups that the new DB cluster will belong to.
    public var vpcSecurityGroupIds: [Swift.String]?

    public init(
        availabilityZones: [Swift.String]? = nil,
        copyTagsToSnapshot: Swift.Bool? = nil,
        databaseName: Swift.String? = nil,
        dbClusterIdentifier: Swift.String? = nil,
        dbClusterParameterGroupName: Swift.String? = nil,
        dbSubnetGroupName: Swift.String? = nil,
        deletionProtection: Swift.Bool? = nil,
        enableCloudwatchLogsExports: [Swift.String]? = nil,
        enableIAMDatabaseAuthentication: Swift.Bool? = nil,
        engine: Swift.String? = nil,
        engineVersion: Swift.String? = nil,
        kmsKeyId: Swift.String? = nil,
        optionGroupName: Swift.String? = nil,
        port: Swift.Int? = nil,
        serverlessV2ScalingConfiguration: NeptuneClientTypes.ServerlessV2ScalingConfiguration? = nil,
        snapshotIdentifier: Swift.String? = nil,
        storageType: Swift.String? = nil,
        tags: [NeptuneClientTypes.Tag]? = nil,
        vpcSecurityGroupIds: [Swift.String]? = nil
    )
    {
        self.availabilityZones = availabilityZones
        self.copyTagsToSnapshot = copyTagsToSnapshot
        self.databaseName = databaseName
        self.dbClusterIdentifier = dbClusterIdentifier
        self.dbClusterParameterGroupName = dbClusterParameterGroupName
        self.dbSubnetGroupName = dbSubnetGroupName
        self.deletionProtection = deletionProtection
        self.enableCloudwatchLogsExports = enableCloudwatchLogsExports
        self.enableIAMDatabaseAuthentication = enableIAMDatabaseAuthentication
        self.engine = engine
        self.engineVersion = engineVersion
        self.kmsKeyId = kmsKeyId
        self.optionGroupName = optionGroupName
        self.port = port
        self.serverlessV2ScalingConfiguration = serverlessV2ScalingConfiguration
        self.snapshotIdentifier = snapshotIdentifier
        self.storageType = storageType
        self.tags = tags
        self.vpcSecurityGroupIds = vpcSecurityGroupIds
    }
}

public struct RestoreDBClusterFromSnapshotOutput: Swift.Sendable {
    /// Contains the details of an Amazon Neptune DB cluster. This data type is used as a response element in the [DescribeDBClusters].
    public var dbCluster: NeptuneClientTypes.DBCluster?

    public init(
        dbCluster: NeptuneClientTypes.DBCluster? = nil
    )
    {
        self.dbCluster = dbCluster
    }
}

public struct RestoreDBClusterToPointInTimeInput: Swift.Sendable {
    /// The name of the new DB cluster to be created. Constraints:
    ///
    /// * Must contain from 1 to 63 letters, numbers, or hyphens
    ///
    /// * First character must be a letter
    ///
    /// * Cannot end with a hyphen or contain two consecutive hyphens
    /// This member is required.
    public var dbClusterIdentifier: Swift.String?
    /// The name of the DB cluster parameter group to associate with the new DB cluster. Constraints:
    ///
    /// * If supplied, must match the name of an existing DBClusterParameterGroup.
    public var dbClusterParameterGroupName: Swift.String?
    /// The DB subnet group name to use for the new DB cluster. Constraints: If supplied, must match the name of an existing DBSubnetGroup. Example: mySubnetgroup
    public var dbSubnetGroupName: Swift.String?
    /// A value that indicates whether the DB cluster has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled.
    public var deletionProtection: Swift.Bool?
    /// The list of logs that the restored DB cluster is to export to CloudWatch Logs.
    public var enableCloudwatchLogsExports: [Swift.String]?
    /// True to enable mapping of Amazon Identity and Access Management (IAM) accounts to database accounts, and otherwise false. Default: false
    public var enableIAMDatabaseAuthentication: Swift.Bool?
    /// The Amazon KMS key identifier to use when restoring an encrypted DB cluster from an encrypted DB cluster. The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are restoring a DB cluster with the same Amazon account that owns the KMS encryption key used to encrypt the new DB cluster, then you can use the KMS key alias instead of the ARN for the KMS encryption key. You can restore to a new DB cluster and encrypt the new DB cluster with a KMS key that is different than the KMS key used to encrypt the source DB cluster. The new DB cluster is encrypted with the KMS key identified by the KmsKeyId parameter. If you do not specify a value for the KmsKeyId parameter, then the following will occur:
    ///
    /// * If the DB cluster is encrypted, then the restored DB cluster is encrypted using the KMS key that was used to encrypt the source DB cluster.
    ///
    /// * If the DB cluster is not encrypted, then the restored DB cluster is not encrypted.
    ///
    ///
    /// If DBClusterIdentifier refers to a DB cluster that is not encrypted, then the restore request is rejected.
    public var kmsKeyId: Swift.String?
    /// (Not supported by Neptune)
    public var optionGroupName: Swift.String?
    /// The port number on which the new DB cluster accepts connections. Constraints: Value must be 1150-65535 Default: The same port as the original DB cluster.
    public var port: Swift.Int?
    /// The date and time to restore the DB cluster to. Valid Values: Value must be a time in Universal Coordinated Time (UTC) format Constraints:
    ///
    /// * Must be before the latest restorable time for the DB instance
    ///
    /// * Must be specified if UseLatestRestorableTime parameter is not provided
    ///
    /// * Cannot be specified if UseLatestRestorableTime parameter is true
    ///
    /// * Cannot be specified if RestoreType parameter is copy-on-write
    ///
    ///
    /// Example: 2015-03-07T23:45:00Z
    public var restoreToTime: Foundation.Date?
    /// The type of restore to be performed. You can specify one of the following values:
    ///
    /// * full-copy - The new DB cluster is restored as a full copy of the source DB cluster.
    ///
    /// * copy-on-write - The new DB cluster is restored as a clone of the source DB cluster.
    ///
    ///
    /// If you don't specify a RestoreType value, then the new DB cluster is restored as a full copy of the source DB cluster.
    public var restoreType: Swift.String?
    /// Contains the scaling configuration of a Neptune Serverless DB cluster. For more information, see [Using Amazon Neptune Serverless](https://docs.aws.amazon.com/neptune/latest/userguide/neptune-serverless-using.html) in the Amazon Neptune User Guide.
    public var serverlessV2ScalingConfiguration: NeptuneClientTypes.ServerlessV2ScalingConfiguration?
    /// The identifier of the source DB cluster from which to restore. Constraints:
    ///
    /// * Must match the identifier of an existing DBCluster.
    /// This member is required.
    public var sourceDBClusterIdentifier: Swift.String?
    /// Specifies the storage type to be associated with the DB cluster. Valid values: standard, iopt1 Default: standard
    public var storageType: Swift.String?
    /// The tags to be applied to the restored DB cluster.
    public var tags: [NeptuneClientTypes.Tag]?
    /// A value that is set to true to restore the DB cluster to the latest restorable backup time, and false otherwise. Default: false Constraints: Cannot be specified if RestoreToTime parameter is provided.
    public var useLatestRestorableTime: Swift.Bool?
    /// A list of VPC security groups that the new DB cluster belongs to.
    public var vpcSecurityGroupIds: [Swift.String]?

    public init(
        dbClusterIdentifier: Swift.String? = nil,
        dbClusterParameterGroupName: Swift.String? = nil,
        dbSubnetGroupName: Swift.String? = nil,
        deletionProtection: Swift.Bool? = nil,
        enableCloudwatchLogsExports: [Swift.String]? = nil,
        enableIAMDatabaseAuthentication: Swift.Bool? = nil,
        kmsKeyId: Swift.String? = nil,
        optionGroupName: Swift.String? = nil,
        port: Swift.Int? = nil,
        restoreToTime: Foundation.Date? = nil,
        restoreType: Swift.String? = nil,
        serverlessV2ScalingConfiguration: NeptuneClientTypes.ServerlessV2ScalingConfiguration? = nil,
        sourceDBClusterIdentifier: Swift.String? = nil,
        storageType: Swift.String? = nil,
        tags: [NeptuneClientTypes.Tag]? = nil,
        useLatestRestorableTime: Swift.Bool? = nil,
        vpcSecurityGroupIds: [Swift.String]? = nil
    )
    {
        self.dbClusterIdentifier = dbClusterIdentifier
        self.dbClusterParameterGroupName = dbClusterParameterGroupName
        self.dbSubnetGroupName = dbSubnetGroupName
        self.deletionProtection = deletionProtection
        self.enableCloudwatchLogsExports = enableCloudwatchLogsExports
        self.enableIAMDatabaseAuthentication = enableIAMDatabaseAuthentication
        self.kmsKeyId = kmsKeyId
        self.optionGroupName = optionGroupName
        self.port = port
        self.restoreToTime = restoreToTime
        self.restoreType = restoreType
        self.serverlessV2ScalingConfiguration = serverlessV2ScalingConfiguration
        self.sourceDBClusterIdentifier = sourceDBClusterIdentifier
        self.storageType = storageType
        self.tags = tags
        self.useLatestRestorableTime = useLatestRestorableTime
        self.vpcSecurityGroupIds = vpcSecurityGroupIds
    }
}

public struct RestoreDBClusterToPointInTimeOutput: Swift.Sendable {
    /// Contains the details of an Amazon Neptune DB cluster. This data type is used as a response element in the [DescribeDBClusters].
    public var dbCluster: NeptuneClientTypes.DBCluster?

    public init(
        dbCluster: NeptuneClientTypes.DBCluster? = nil
    )
    {
        self.dbCluster = dbCluster
    }
}

public struct StartDBClusterInput: Swift.Sendable {
    /// The DB cluster identifier of the Neptune DB cluster to be started. This parameter is stored as a lowercase string.
    /// This member is required.
    public var dbClusterIdentifier: Swift.String?

    public init(
        dbClusterIdentifier: Swift.String? = nil
    )
    {
        self.dbClusterIdentifier = dbClusterIdentifier
    }
}

public struct StartDBClusterOutput: Swift.Sendable {
    /// Contains the details of an Amazon Neptune DB cluster. This data type is used as a response element in the [DescribeDBClusters].
    public var dbCluster: NeptuneClientTypes.DBCluster?

    public init(
        dbCluster: NeptuneClientTypes.DBCluster? = nil
    )
    {
        self.dbCluster = dbCluster
    }
}

public struct StopDBClusterInput: Swift.Sendable {
    /// The DB cluster identifier of the Neptune DB cluster to be stopped. This parameter is stored as a lowercase string.
    /// This member is required.
    public var dbClusterIdentifier: Swift.String?

    public init(
        dbClusterIdentifier: Swift.String? = nil
    )
    {
        self.dbClusterIdentifier = dbClusterIdentifier
    }
}

public struct StopDBClusterOutput: Swift.Sendable {
    /// Contains the details of an Amazon Neptune DB cluster. This data type is used as a response element in the [DescribeDBClusters].
    public var dbCluster: NeptuneClientTypes.DBCluster?

    public init(
        dbCluster: NeptuneClientTypes.DBCluster? = nil
    )
    {
        self.dbCluster = dbCluster
    }
}

extension AddRoleToDBClusterInput {

    static func urlPathProvider(_ value: AddRoleToDBClusterInput) -> Swift.String? {
        return "/"
    }
}

extension AddSourceIdentifierToSubscriptionInput {

    static func urlPathProvider(_ value: AddSourceIdentifierToSubscriptionInput) -> Swift.String? {
        return "/"
    }
}

extension AddTagsToResourceInput {

    static func urlPathProvider(_ value: AddTagsToResourceInput) -> Swift.String? {
        return "/"
    }
}

extension ApplyPendingMaintenanceActionInput {

    static func urlPathProvider(_ value: ApplyPendingMaintenanceActionInput) -> Swift.String? {
        return "/"
    }
}

extension CopyDBClusterParameterGroupInput {

    static func urlPathProvider(_ value: CopyDBClusterParameterGroupInput) -> Swift.String? {
        return "/"
    }
}

extension CopyDBClusterSnapshotInput {

    static func urlPathProvider(_ value: CopyDBClusterSnapshotInput) -> Swift.String? {
        return "/"
    }
}

extension CopyDBParameterGroupInput {

    static func urlPathProvider(_ value: CopyDBParameterGroupInput) -> Swift.String? {
        return "/"
    }
}

extension CreateDBClusterInput {

    static func urlPathProvider(_ value: CreateDBClusterInput) -> Swift.String? {
        return "/"
    }
}

extension CreateDBClusterEndpointInput {

    static func urlPathProvider(_ value: CreateDBClusterEndpointInput) -> Swift.String? {
        return "/"
    }
}

extension CreateDBClusterParameterGroupInput {

    static func urlPathProvider(_ value: CreateDBClusterParameterGroupInput) -> Swift.String? {
        return "/"
    }
}

extension CreateDBClusterSnapshotInput {

    static func urlPathProvider(_ value: CreateDBClusterSnapshotInput) -> Swift.String? {
        return "/"
    }
}

extension CreateDBInstanceInput {

    static func urlPathProvider(_ value: CreateDBInstanceInput) -> Swift.String? {
        return "/"
    }
}

extension CreateDBParameterGroupInput {

    static func urlPathProvider(_ value: CreateDBParameterGroupInput) -> Swift.String? {
        return "/"
    }
}

extension CreateDBSubnetGroupInput {

    static func urlPathProvider(_ value: CreateDBSubnetGroupInput) -> Swift.String? {
        return "/"
    }
}

extension CreateEventSubscriptionInput {

    static func urlPathProvider(_ value: CreateEventSubscriptionInput) -> Swift.String? {
        return "/"
    }
}

extension CreateGlobalClusterInput {

    static func urlPathProvider(_ value: CreateGlobalClusterInput) -> Swift.String? {
        return "/"
    }
}

extension DeleteDBClusterInput {

    static func urlPathProvider(_ value: DeleteDBClusterInput) -> Swift.String? {
        return "/"
    }
}

extension DeleteDBClusterEndpointInput {

    static func urlPathProvider(_ value: DeleteDBClusterEndpointInput) -> Swift.String? {
        return "/"
    }
}

extension DeleteDBClusterParameterGroupInput {

    static func urlPathProvider(_ value: DeleteDBClusterParameterGroupInput) -> Swift.String? {
        return "/"
    }
}

extension DeleteDBClusterSnapshotInput {

    static func urlPathProvider(_ value: DeleteDBClusterSnapshotInput) -> Swift.String? {
        return "/"
    }
}

extension DeleteDBInstanceInput {

    static func urlPathProvider(_ value: DeleteDBInstanceInput) -> Swift.String? {
        return "/"
    }
}

extension DeleteDBParameterGroupInput {

    static func urlPathProvider(_ value: DeleteDBParameterGroupInput) -> Swift.String? {
        return "/"
    }
}

extension DeleteDBSubnetGroupInput {

    static func urlPathProvider(_ value: DeleteDBSubnetGroupInput) -> Swift.String? {
        return "/"
    }
}

extension DeleteEventSubscriptionInput {

    static func urlPathProvider(_ value: DeleteEventSubscriptionInput) -> Swift.String? {
        return "/"
    }
}

extension DeleteGlobalClusterInput {

    static func urlPathProvider(_ value: DeleteGlobalClusterInput) -> Swift.String? {
        return "/"
    }
}

extension DescribeDBClusterEndpointsInput {

    static func urlPathProvider(_ value: DescribeDBClusterEndpointsInput) -> Swift.String? {
        return "/"
    }
}

extension DescribeDBClusterParameterGroupsInput {

    static func urlPathProvider(_ value: DescribeDBClusterParameterGroupsInput) -> Swift.String? {
        return "/"
    }
}

extension DescribeDBClusterParametersInput {

    static func urlPathProvider(_ value: DescribeDBClusterParametersInput) -> Swift.String? {
        return "/"
    }
}

extension DescribeDBClustersInput {

    static func urlPathProvider(_ value: DescribeDBClustersInput) -> Swift.String? {
        return "/"
    }
}

extension DescribeDBClusterSnapshotAttributesInput {

    static func urlPathProvider(_ value: DescribeDBClusterSnapshotAttributesInput) -> Swift.String? {
        return "/"
    }
}

extension DescribeDBClusterSnapshotsInput {

    static func urlPathProvider(_ value: DescribeDBClusterSnapshotsInput) -> Swift.String? {
        return "/"
    }
}

extension DescribeDBEngineVersionsInput {

    static func urlPathProvider(_ value: DescribeDBEngineVersionsInput) -> Swift.String? {
        return "/"
    }
}

extension DescribeDBInstancesInput {

    static func urlPathProvider(_ value: DescribeDBInstancesInput) -> Swift.String? {
        return "/"
    }
}

extension DescribeDBParameterGroupsInput {

    static func urlPathProvider(_ value: DescribeDBParameterGroupsInput) -> Swift.String? {
        return "/"
    }
}

extension DescribeDBParametersInput {

    static func urlPathProvider(_ value: DescribeDBParametersInput) -> Swift.String? {
        return "/"
    }
}

extension DescribeDBSubnetGroupsInput {

    static func urlPathProvider(_ value: DescribeDBSubnetGroupsInput) -> Swift.String? {
        return "/"
    }
}

extension DescribeEngineDefaultClusterParametersInput {

    static func urlPathProvider(_ value: DescribeEngineDefaultClusterParametersInput) -> Swift.String? {
        return "/"
    }
}

extension DescribeEngineDefaultParametersInput {

    static func urlPathProvider(_ value: DescribeEngineDefaultParametersInput) -> Swift.String? {
        return "/"
    }
}

extension DescribeEventCategoriesInput {

    static func urlPathProvider(_ value: DescribeEventCategoriesInput) -> Swift.String? {
        return "/"
    }
}

extension DescribeEventsInput {

    static func urlPathProvider(_ value: DescribeEventsInput) -> Swift.String? {
        return "/"
    }
}

extension DescribeEventSubscriptionsInput {

    static func urlPathProvider(_ value: DescribeEventSubscriptionsInput) -> Swift.String? {
        return "/"
    }
}

extension DescribeGlobalClustersInput {

    static func urlPathProvider(_ value: DescribeGlobalClustersInput) -> Swift.String? {
        return "/"
    }
}

extension DescribeOrderableDBInstanceOptionsInput {

    static func urlPathProvider(_ value: DescribeOrderableDBInstanceOptionsInput) -> Swift.String? {
        return "/"
    }
}

extension DescribePendingMaintenanceActionsInput {

    static func urlPathProvider(_ value: DescribePendingMaintenanceActionsInput) -> Swift.String? {
        return "/"
    }
}

extension DescribeValidDBInstanceModificationsInput {

    static func urlPathProvider(_ value: DescribeValidDBInstanceModificationsInput) -> Swift.String? {
        return "/"
    }
}

extension FailoverDBClusterInput {

    static func urlPathProvider(_ value: FailoverDBClusterInput) -> Swift.String? {
        return "/"
    }
}

extension FailoverGlobalClusterInput {

    static func urlPathProvider(_ value: FailoverGlobalClusterInput) -> Swift.String? {
        return "/"
    }
}

extension ListTagsForResourceInput {

    static func urlPathProvider(_ value: ListTagsForResourceInput) -> Swift.String? {
        return "/"
    }
}

extension ModifyDBClusterInput {

    static func urlPathProvider(_ value: ModifyDBClusterInput) -> Swift.String? {
        return "/"
    }
}

extension ModifyDBClusterEndpointInput {

    static func urlPathProvider(_ value: ModifyDBClusterEndpointInput) -> Swift.String? {
        return "/"
    }
}

extension ModifyDBClusterParameterGroupInput {

    static func urlPathProvider(_ value: ModifyDBClusterParameterGroupInput) -> Swift.String? {
        return "/"
    }
}

extension ModifyDBClusterSnapshotAttributeInput {

    static func urlPathProvider(_ value: ModifyDBClusterSnapshotAttributeInput) -> Swift.String? {
        return "/"
    }
}

extension ModifyDBInstanceInput {

    static func urlPathProvider(_ value: ModifyDBInstanceInput) -> Swift.String? {
        return "/"
    }
}

extension ModifyDBParameterGroupInput {

    static func urlPathProvider(_ value: ModifyDBParameterGroupInput) -> Swift.String? {
        return "/"
    }
}

extension ModifyDBSubnetGroupInput {

    static func urlPathProvider(_ value: ModifyDBSubnetGroupInput) -> Swift.String? {
        return "/"
    }
}

extension ModifyEventSubscriptionInput {

    static func urlPathProvider(_ value: ModifyEventSubscriptionInput) -> Swift.String? {
        return "/"
    }
}

extension ModifyGlobalClusterInput {

    static func urlPathProvider(_ value: ModifyGlobalClusterInput) -> Swift.String? {
        return "/"
    }
}

extension PromoteReadReplicaDBClusterInput {

    static func urlPathProvider(_ value: PromoteReadReplicaDBClusterInput) -> Swift.String? {
        return "/"
    }
}

extension RebootDBInstanceInput {

    static func urlPathProvider(_ value: RebootDBInstanceInput) -> Swift.String? {
        return "/"
    }
}

extension RemoveFromGlobalClusterInput {

    static func urlPathProvider(_ value: RemoveFromGlobalClusterInput) -> Swift.String? {
        return "/"
    }
}

extension RemoveRoleFromDBClusterInput {

    static func urlPathProvider(_ value: RemoveRoleFromDBClusterInput) -> Swift.String? {
        return "/"
    }
}

extension RemoveSourceIdentifierFromSubscriptionInput {

    static func urlPathProvider(_ value: RemoveSourceIdentifierFromSubscriptionInput) -> Swift.String? {
        return "/"
    }
}

extension RemoveTagsFromResourceInput {

    static func urlPathProvider(_ value: RemoveTagsFromResourceInput) -> Swift.String? {
        return "/"
    }
}

extension ResetDBClusterParameterGroupInput {

    static func urlPathProvider(_ value: ResetDBClusterParameterGroupInput) -> Swift.String? {
        return "/"
    }
}

extension ResetDBParameterGroupInput {

    static func urlPathProvider(_ value: ResetDBParameterGroupInput) -> Swift.String? {
        return "/"
    }
}

extension RestoreDBClusterFromSnapshotInput {

    static func urlPathProvider(_ value: RestoreDBClusterFromSnapshotInput) -> Swift.String? {
        return "/"
    }
}

extension RestoreDBClusterToPointInTimeInput {

    static func urlPathProvider(_ value: RestoreDBClusterToPointInTimeInput) -> Swift.String? {
        return "/"
    }
}

extension StartDBClusterInput {

    static func urlPathProvider(_ value: StartDBClusterInput) -> Swift.String? {
        return "/"
    }
}

extension StopDBClusterInput {

    static func urlPathProvider(_ value: StopDBClusterInput) -> Swift.String? {
        return "/"
    }
}

extension AddRoleToDBClusterInput {

    static func write(value: AddRoleToDBClusterInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["DBClusterIdentifier"].write(value.dbClusterIdentifier)
        try writer["FeatureName"].write(value.featureName)
        try writer["RoleArn"].write(value.roleArn)
        try writer["Action"].write("AddRoleToDBCluster")
        try writer["Version"].write("2014-10-31")
    }
}

extension AddSourceIdentifierToSubscriptionInput {

    static func write(value: AddSourceIdentifierToSubscriptionInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["SourceIdentifier"].write(value.sourceIdentifier)
        try writer["SubscriptionName"].write(value.subscriptionName)
        try writer["Action"].write("AddSourceIdentifierToSubscription")
        try writer["Version"].write("2014-10-31")
    }
}

extension AddTagsToResourceInput {

    static func write(value: AddTagsToResourceInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["ResourceName"].write(value.resourceName)
        try writer["Tags"].writeList(value.tags, memberWritingClosure: NeptuneClientTypes.Tag.write(value:to:), memberNodeInfo: "Tag", isFlattened: false)
        try writer["Action"].write("AddTagsToResource")
        try writer["Version"].write("2014-10-31")
    }
}

extension ApplyPendingMaintenanceActionInput {

    static func write(value: ApplyPendingMaintenanceActionInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["ApplyAction"].write(value.applyAction)
        try writer["OptInType"].write(value.optInType)
        try writer["ResourceIdentifier"].write(value.resourceIdentifier)
        try writer["Action"].write("ApplyPendingMaintenanceAction")
        try writer["Version"].write("2014-10-31")
    }
}

extension CopyDBClusterParameterGroupInput {

    static func write(value: CopyDBClusterParameterGroupInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["SourceDBClusterParameterGroupIdentifier"].write(value.sourceDBClusterParameterGroupIdentifier)
        try writer["Tags"].writeList(value.tags, memberWritingClosure: NeptuneClientTypes.Tag.write(value:to:), memberNodeInfo: "Tag", isFlattened: false)
        try writer["TargetDBClusterParameterGroupDescription"].write(value.targetDBClusterParameterGroupDescription)
        try writer["TargetDBClusterParameterGroupIdentifier"].write(value.targetDBClusterParameterGroupIdentifier)
        try writer["Action"].write("CopyDBClusterParameterGroup")
        try writer["Version"].write("2014-10-31")
    }
}

extension CopyDBClusterSnapshotInput {

    static func write(value: CopyDBClusterSnapshotInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["CopyTags"].write(value.copyTags)
        try writer["KmsKeyId"].write(value.kmsKeyId)
        try writer["PreSignedUrl"].write(value.preSignedUrl)
        try writer["SourceDBClusterSnapshotIdentifier"].write(value.sourceDBClusterSnapshotIdentifier)
        try writer["Tags"].writeList(value.tags, memberWritingClosure: NeptuneClientTypes.Tag.write(value:to:), memberNodeInfo: "Tag", isFlattened: false)
        try writer["TargetDBClusterSnapshotIdentifier"].write(value.targetDBClusterSnapshotIdentifier)
        try writer["Action"].write("CopyDBClusterSnapshot")
        try writer["Version"].write("2014-10-31")
    }
}

extension CopyDBParameterGroupInput {

    static func write(value: CopyDBParameterGroupInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["SourceDBParameterGroupIdentifier"].write(value.sourceDBParameterGroupIdentifier)
        try writer["Tags"].writeList(value.tags, memberWritingClosure: NeptuneClientTypes.Tag.write(value:to:), memberNodeInfo: "Tag", isFlattened: false)
        try writer["TargetDBParameterGroupDescription"].write(value.targetDBParameterGroupDescription)
        try writer["TargetDBParameterGroupIdentifier"].write(value.targetDBParameterGroupIdentifier)
        try writer["Action"].write("CopyDBParameterGroup")
        try writer["Version"].write("2014-10-31")
    }
}

extension CreateDBClusterInput {

    static func write(value: CreateDBClusterInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["AvailabilityZones"].writeList(value.availabilityZones, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "AvailabilityZone", isFlattened: false)
        try writer["BackupRetentionPeriod"].write(value.backupRetentionPeriod)
        try writer["CharacterSetName"].write(value.characterSetName)
        try writer["CopyTagsToSnapshot"].write(value.copyTagsToSnapshot)
        try writer["DBClusterIdentifier"].write(value.dbClusterIdentifier)
        try writer["DBClusterParameterGroupName"].write(value.dbClusterParameterGroupName)
        try writer["DBSubnetGroupName"].write(value.dbSubnetGroupName)
        try writer["DatabaseName"].write(value.databaseName)
        try writer["DeletionProtection"].write(value.deletionProtection)
        try writer["EnableCloudwatchLogsExports"].writeList(value.enableCloudwatchLogsExports, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["EnableIAMDatabaseAuthentication"].write(value.enableIAMDatabaseAuthentication)
        try writer["Engine"].write(value.engine)
        try writer["EngineVersion"].write(value.engineVersion)
        try writer["GlobalClusterIdentifier"].write(value.globalClusterIdentifier)
        try writer["KmsKeyId"].write(value.kmsKeyId)
        try writer["MasterUserPassword"].write(value.masterUserPassword)
        try writer["MasterUsername"].write(value.masterUsername)
        try writer["OptionGroupName"].write(value.optionGroupName)
        try writer["Port"].write(value.port)
        try writer["PreSignedUrl"].write(value.preSignedUrl)
        try writer["PreferredBackupWindow"].write(value.preferredBackupWindow)
        try writer["PreferredMaintenanceWindow"].write(value.preferredMaintenanceWindow)
        try writer["ReplicationSourceIdentifier"].write(value.replicationSourceIdentifier)
        try writer["ServerlessV2ScalingConfiguration"].write(value.serverlessV2ScalingConfiguration, with: NeptuneClientTypes.ServerlessV2ScalingConfiguration.write(value:to:))
        try writer["StorageEncrypted"].write(value.storageEncrypted)
        try writer["StorageType"].write(value.storageType)
        try writer["Tags"].writeList(value.tags, memberWritingClosure: NeptuneClientTypes.Tag.write(value:to:), memberNodeInfo: "Tag", isFlattened: false)
        try writer["VpcSecurityGroupIds"].writeList(value.vpcSecurityGroupIds, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "VpcSecurityGroupId", isFlattened: false)
        try writer["Action"].write("CreateDBCluster")
        try writer["Version"].write("2014-10-31")
    }
}

extension CreateDBClusterEndpointInput {

    static func write(value: CreateDBClusterEndpointInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["DBClusterEndpointIdentifier"].write(value.dbClusterEndpointIdentifier)
        try writer["DBClusterIdentifier"].write(value.dbClusterIdentifier)
        try writer["EndpointType"].write(value.endpointType)
        try writer["ExcludedMembers"].writeList(value.excludedMembers, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["StaticMembers"].writeList(value.staticMembers, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["Tags"].writeList(value.tags, memberWritingClosure: NeptuneClientTypes.Tag.write(value:to:), memberNodeInfo: "Tag", isFlattened: false)
        try writer["Action"].write("CreateDBClusterEndpoint")
        try writer["Version"].write("2014-10-31")
    }
}

extension CreateDBClusterParameterGroupInput {

    static func write(value: CreateDBClusterParameterGroupInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["DBClusterParameterGroupName"].write(value.dbClusterParameterGroupName)
        try writer["DBParameterGroupFamily"].write(value.dbParameterGroupFamily)
        try writer["Description"].write(value.description)
        try writer["Tags"].writeList(value.tags, memberWritingClosure: NeptuneClientTypes.Tag.write(value:to:), memberNodeInfo: "Tag", isFlattened: false)
        try writer["Action"].write("CreateDBClusterParameterGroup")
        try writer["Version"].write("2014-10-31")
    }
}

extension CreateDBClusterSnapshotInput {

    static func write(value: CreateDBClusterSnapshotInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["DBClusterIdentifier"].write(value.dbClusterIdentifier)
        try writer["DBClusterSnapshotIdentifier"].write(value.dbClusterSnapshotIdentifier)
        try writer["Tags"].writeList(value.tags, memberWritingClosure: NeptuneClientTypes.Tag.write(value:to:), memberNodeInfo: "Tag", isFlattened: false)
        try writer["Action"].write("CreateDBClusterSnapshot")
        try writer["Version"].write("2014-10-31")
    }
}

extension CreateDBInstanceInput {

    static func write(value: CreateDBInstanceInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["AllocatedStorage"].write(value.allocatedStorage)
        try writer["AutoMinorVersionUpgrade"].write(value.autoMinorVersionUpgrade)
        try writer["AvailabilityZone"].write(value.availabilityZone)
        try writer["BackupRetentionPeriod"].write(value.backupRetentionPeriod)
        try writer["CharacterSetName"].write(value.characterSetName)
        try writer["CopyTagsToSnapshot"].write(value.copyTagsToSnapshot)
        try writer["DBClusterIdentifier"].write(value.dbClusterIdentifier)
        try writer["DBInstanceClass"].write(value.dbInstanceClass)
        try writer["DBInstanceIdentifier"].write(value.dbInstanceIdentifier)
        try writer["DBName"].write(value.dbName)
        try writer["DBParameterGroupName"].write(value.dbParameterGroupName)
        try writer["DBSecurityGroups"].writeList(value.dbSecurityGroups, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "DBSecurityGroupName", isFlattened: false)
        try writer["DBSubnetGroupName"].write(value.dbSubnetGroupName)
        try writer["DeletionProtection"].write(value.deletionProtection)
        try writer["Domain"].write(value.domain)
        try writer["DomainIAMRoleName"].write(value.domainIAMRoleName)
        try writer["EnableCloudwatchLogsExports"].writeList(value.enableCloudwatchLogsExports, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["EnableIAMDatabaseAuthentication"].write(value.enableIAMDatabaseAuthentication)
        try writer["EnablePerformanceInsights"].write(value.enablePerformanceInsights)
        try writer["Engine"].write(value.engine)
        try writer["EngineVersion"].write(value.engineVersion)
        try writer["Iops"].write(value.iops)
        try writer["KmsKeyId"].write(value.kmsKeyId)
        try writer["LicenseModel"].write(value.licenseModel)
        try writer["MasterUserPassword"].write(value.masterUserPassword)
        try writer["MasterUsername"].write(value.masterUsername)
        try writer["MonitoringInterval"].write(value.monitoringInterval)
        try writer["MonitoringRoleArn"].write(value.monitoringRoleArn)
        try writer["MultiAZ"].write(value.multiAZ)
        try writer["OptionGroupName"].write(value.optionGroupName)
        try writer["PerformanceInsightsKMSKeyId"].write(value.performanceInsightsKMSKeyId)
        try writer["Port"].write(value.port)
        try writer["PreferredBackupWindow"].write(value.preferredBackupWindow)
        try writer["PreferredMaintenanceWindow"].write(value.preferredMaintenanceWindow)
        try writer["PromotionTier"].write(value.promotionTier)
        try writer["PubliclyAccessible"].write(value.publiclyAccessible)
        try writer["StorageEncrypted"].write(value.storageEncrypted)
        try writer["StorageType"].write(value.storageType)
        try writer["Tags"].writeList(value.tags, memberWritingClosure: NeptuneClientTypes.Tag.write(value:to:), memberNodeInfo: "Tag", isFlattened: false)
        try writer["TdeCredentialArn"].write(value.tdeCredentialArn)
        try writer["TdeCredentialPassword"].write(value.tdeCredentialPassword)
        try writer["Timezone"].write(value.timezone)
        try writer["VpcSecurityGroupIds"].writeList(value.vpcSecurityGroupIds, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "VpcSecurityGroupId", isFlattened: false)
        try writer["Action"].write("CreateDBInstance")
        try writer["Version"].write("2014-10-31")
    }
}

extension CreateDBParameterGroupInput {

    static func write(value: CreateDBParameterGroupInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["DBParameterGroupFamily"].write(value.dbParameterGroupFamily)
        try writer["DBParameterGroupName"].write(value.dbParameterGroupName)
        try writer["Description"].write(value.description)
        try writer["Tags"].writeList(value.tags, memberWritingClosure: NeptuneClientTypes.Tag.write(value:to:), memberNodeInfo: "Tag", isFlattened: false)
        try writer["Action"].write("CreateDBParameterGroup")
        try writer["Version"].write("2014-10-31")
    }
}

extension CreateDBSubnetGroupInput {

    static func write(value: CreateDBSubnetGroupInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["DBSubnetGroupDescription"].write(value.dbSubnetGroupDescription)
        try writer["DBSubnetGroupName"].write(value.dbSubnetGroupName)
        try writer["SubnetIds"].writeList(value.subnetIds, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "SubnetIdentifier", isFlattened: false)
        try writer["Tags"].writeList(value.tags, memberWritingClosure: NeptuneClientTypes.Tag.write(value:to:), memberNodeInfo: "Tag", isFlattened: false)
        try writer["Action"].write("CreateDBSubnetGroup")
        try writer["Version"].write("2014-10-31")
    }
}

extension CreateEventSubscriptionInput {

    static func write(value: CreateEventSubscriptionInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["Enabled"].write(value.enabled)
        try writer["EventCategories"].writeList(value.eventCategories, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "EventCategory", isFlattened: false)
        try writer["SnsTopicArn"].write(value.snsTopicArn)
        try writer["SourceIds"].writeList(value.sourceIds, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "SourceId", isFlattened: false)
        try writer["SourceType"].write(value.sourceType)
        try writer["SubscriptionName"].write(value.subscriptionName)
        try writer["Tags"].writeList(value.tags, memberWritingClosure: NeptuneClientTypes.Tag.write(value:to:), memberNodeInfo: "Tag", isFlattened: false)
        try writer["Action"].write("CreateEventSubscription")
        try writer["Version"].write("2014-10-31")
    }
}

extension CreateGlobalClusterInput {

    static func write(value: CreateGlobalClusterInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["DeletionProtection"].write(value.deletionProtection)
        try writer["Engine"].write(value.engine)
        try writer["EngineVersion"].write(value.engineVersion)
        try writer["GlobalClusterIdentifier"].write(value.globalClusterIdentifier)
        try writer["SourceDBClusterIdentifier"].write(value.sourceDBClusterIdentifier)
        try writer["StorageEncrypted"].write(value.storageEncrypted)
        try writer["Action"].write("CreateGlobalCluster")
        try writer["Version"].write("2014-10-31")
    }
}

extension DeleteDBClusterInput {

    static func write(value: DeleteDBClusterInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["DBClusterIdentifier"].write(value.dbClusterIdentifier)
        try writer["FinalDBSnapshotIdentifier"].write(value.finalDBSnapshotIdentifier)
        try writer["SkipFinalSnapshot"].write(value.skipFinalSnapshot)
        try writer["Action"].write("DeleteDBCluster")
        try writer["Version"].write("2014-10-31")
    }
}

extension DeleteDBClusterEndpointInput {

    static func write(value: DeleteDBClusterEndpointInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["DBClusterEndpointIdentifier"].write(value.dbClusterEndpointIdentifier)
        try writer["Action"].write("DeleteDBClusterEndpoint")
        try writer["Version"].write("2014-10-31")
    }
}

extension DeleteDBClusterParameterGroupInput {

    static func write(value: DeleteDBClusterParameterGroupInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["DBClusterParameterGroupName"].write(value.dbClusterParameterGroupName)
        try writer["Action"].write("DeleteDBClusterParameterGroup")
        try writer["Version"].write("2014-10-31")
    }
}

extension DeleteDBClusterSnapshotInput {

    static func write(value: DeleteDBClusterSnapshotInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["DBClusterSnapshotIdentifier"].write(value.dbClusterSnapshotIdentifier)
        try writer["Action"].write("DeleteDBClusterSnapshot")
        try writer["Version"].write("2014-10-31")
    }
}

extension DeleteDBInstanceInput {

    static func write(value: DeleteDBInstanceInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["DBInstanceIdentifier"].write(value.dbInstanceIdentifier)
        try writer["FinalDBSnapshotIdentifier"].write(value.finalDBSnapshotIdentifier)
        try writer["SkipFinalSnapshot"].write(value.skipFinalSnapshot)
        try writer["Action"].write("DeleteDBInstance")
        try writer["Version"].write("2014-10-31")
    }
}

extension DeleteDBParameterGroupInput {

    static func write(value: DeleteDBParameterGroupInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["DBParameterGroupName"].write(value.dbParameterGroupName)
        try writer["Action"].write("DeleteDBParameterGroup")
        try writer["Version"].write("2014-10-31")
    }
}

extension DeleteDBSubnetGroupInput {

    static func write(value: DeleteDBSubnetGroupInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["DBSubnetGroupName"].write(value.dbSubnetGroupName)
        try writer["Action"].write("DeleteDBSubnetGroup")
        try writer["Version"].write("2014-10-31")
    }
}

extension DeleteEventSubscriptionInput {

    static func write(value: DeleteEventSubscriptionInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["SubscriptionName"].write(value.subscriptionName)
        try writer["Action"].write("DeleteEventSubscription")
        try writer["Version"].write("2014-10-31")
    }
}

extension DeleteGlobalClusterInput {

    static func write(value: DeleteGlobalClusterInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["GlobalClusterIdentifier"].write(value.globalClusterIdentifier)
        try writer["Action"].write("DeleteGlobalCluster")
        try writer["Version"].write("2014-10-31")
    }
}

extension DescribeDBClusterEndpointsInput {

    static func write(value: DescribeDBClusterEndpointsInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["DBClusterEndpointIdentifier"].write(value.dbClusterEndpointIdentifier)
        try writer["DBClusterIdentifier"].write(value.dbClusterIdentifier)
        try writer["Filters"].writeList(value.filters, memberWritingClosure: NeptuneClientTypes.Filter.write(value:to:), memberNodeInfo: "Filter", isFlattened: false)
        try writer["Marker"].write(value.marker)
        try writer["MaxRecords"].write(value.maxRecords)
        try writer["Action"].write("DescribeDBClusterEndpoints")
        try writer["Version"].write("2014-10-31")
    }
}

extension DescribeDBClusterParameterGroupsInput {

    static func write(value: DescribeDBClusterParameterGroupsInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["DBClusterParameterGroupName"].write(value.dbClusterParameterGroupName)
        try writer["Filters"].writeList(value.filters, memberWritingClosure: NeptuneClientTypes.Filter.write(value:to:), memberNodeInfo: "Filter", isFlattened: false)
        try writer["Marker"].write(value.marker)
        try writer["MaxRecords"].write(value.maxRecords)
        try writer["Action"].write("DescribeDBClusterParameterGroups")
        try writer["Version"].write("2014-10-31")
    }
}

extension DescribeDBClusterParametersInput {

    static func write(value: DescribeDBClusterParametersInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["DBClusterParameterGroupName"].write(value.dbClusterParameterGroupName)
        try writer["Filters"].writeList(value.filters, memberWritingClosure: NeptuneClientTypes.Filter.write(value:to:), memberNodeInfo: "Filter", isFlattened: false)
        try writer["Marker"].write(value.marker)
        try writer["MaxRecords"].write(value.maxRecords)
        try writer["Source"].write(value.source)
        try writer["Action"].write("DescribeDBClusterParameters")
        try writer["Version"].write("2014-10-31")
    }
}

extension DescribeDBClustersInput {

    static func write(value: DescribeDBClustersInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["DBClusterIdentifier"].write(value.dbClusterIdentifier)
        try writer["Filters"].writeList(value.filters, memberWritingClosure: NeptuneClientTypes.Filter.write(value:to:), memberNodeInfo: "Filter", isFlattened: false)
        try writer["Marker"].write(value.marker)
        try writer["MaxRecords"].write(value.maxRecords)
        try writer["Action"].write("DescribeDBClusters")
        try writer["Version"].write("2014-10-31")
    }
}

extension DescribeDBClusterSnapshotAttributesInput {

    static func write(value: DescribeDBClusterSnapshotAttributesInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["DBClusterSnapshotIdentifier"].write(value.dbClusterSnapshotIdentifier)
        try writer["Action"].write("DescribeDBClusterSnapshotAttributes")
        try writer["Version"].write("2014-10-31")
    }
}

extension DescribeDBClusterSnapshotsInput {

    static func write(value: DescribeDBClusterSnapshotsInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["DBClusterIdentifier"].write(value.dbClusterIdentifier)
        try writer["DBClusterSnapshotIdentifier"].write(value.dbClusterSnapshotIdentifier)
        try writer["Filters"].writeList(value.filters, memberWritingClosure: NeptuneClientTypes.Filter.write(value:to:), memberNodeInfo: "Filter", isFlattened: false)
        try writer["IncludePublic"].write(value.includePublic)
        try writer["IncludeShared"].write(value.includeShared)
        try writer["Marker"].write(value.marker)
        try writer["MaxRecords"].write(value.maxRecords)
        try writer["SnapshotType"].write(value.snapshotType)
        try writer["Action"].write("DescribeDBClusterSnapshots")
        try writer["Version"].write("2014-10-31")
    }
}

extension DescribeDBEngineVersionsInput {

    static func write(value: DescribeDBEngineVersionsInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["DBParameterGroupFamily"].write(value.dbParameterGroupFamily)
        try writer["DefaultOnly"].write(value.defaultOnly)
        try writer["Engine"].write(value.engine)
        try writer["EngineVersion"].write(value.engineVersion)
        try writer["Filters"].writeList(value.filters, memberWritingClosure: NeptuneClientTypes.Filter.write(value:to:), memberNodeInfo: "Filter", isFlattened: false)
        try writer["ListSupportedCharacterSets"].write(value.listSupportedCharacterSets)
        try writer["ListSupportedTimezones"].write(value.listSupportedTimezones)
        try writer["Marker"].write(value.marker)
        try writer["MaxRecords"].write(value.maxRecords)
        try writer["Action"].write("DescribeDBEngineVersions")
        try writer["Version"].write("2014-10-31")
    }
}

extension DescribeDBInstancesInput {

    static func write(value: DescribeDBInstancesInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["DBInstanceIdentifier"].write(value.dbInstanceIdentifier)
        try writer["Filters"].writeList(value.filters, memberWritingClosure: NeptuneClientTypes.Filter.write(value:to:), memberNodeInfo: "Filter", isFlattened: false)
        try writer["Marker"].write(value.marker)
        try writer["MaxRecords"].write(value.maxRecords)
        try writer["Action"].write("DescribeDBInstances")
        try writer["Version"].write("2014-10-31")
    }
}

extension DescribeDBParameterGroupsInput {

    static func write(value: DescribeDBParameterGroupsInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["DBParameterGroupName"].write(value.dbParameterGroupName)
        try writer["Filters"].writeList(value.filters, memberWritingClosure: NeptuneClientTypes.Filter.write(value:to:), memberNodeInfo: "Filter", isFlattened: false)
        try writer["Marker"].write(value.marker)
        try writer["MaxRecords"].write(value.maxRecords)
        try writer["Action"].write("DescribeDBParameterGroups")
        try writer["Version"].write("2014-10-31")
    }
}

extension DescribeDBParametersInput {

    static func write(value: DescribeDBParametersInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["DBParameterGroupName"].write(value.dbParameterGroupName)
        try writer["Filters"].writeList(value.filters, memberWritingClosure: NeptuneClientTypes.Filter.write(value:to:), memberNodeInfo: "Filter", isFlattened: false)
        try writer["Marker"].write(value.marker)
        try writer["MaxRecords"].write(value.maxRecords)
        try writer["Source"].write(value.source)
        try writer["Action"].write("DescribeDBParameters")
        try writer["Version"].write("2014-10-31")
    }
}

extension DescribeDBSubnetGroupsInput {

    static func write(value: DescribeDBSubnetGroupsInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["DBSubnetGroupName"].write(value.dbSubnetGroupName)
        try writer["Filters"].writeList(value.filters, memberWritingClosure: NeptuneClientTypes.Filter.write(value:to:), memberNodeInfo: "Filter", isFlattened: false)
        try writer["Marker"].write(value.marker)
        try writer["MaxRecords"].write(value.maxRecords)
        try writer["Action"].write("DescribeDBSubnetGroups")
        try writer["Version"].write("2014-10-31")
    }
}

extension DescribeEngineDefaultClusterParametersInput {

    static func write(value: DescribeEngineDefaultClusterParametersInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["DBParameterGroupFamily"].write(value.dbParameterGroupFamily)
        try writer["Filters"].writeList(value.filters, memberWritingClosure: NeptuneClientTypes.Filter.write(value:to:), memberNodeInfo: "Filter", isFlattened: false)
        try writer["Marker"].write(value.marker)
        try writer["MaxRecords"].write(value.maxRecords)
        try writer["Action"].write("DescribeEngineDefaultClusterParameters")
        try writer["Version"].write("2014-10-31")
    }
}

extension DescribeEngineDefaultParametersInput {

    static func write(value: DescribeEngineDefaultParametersInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["DBParameterGroupFamily"].write(value.dbParameterGroupFamily)
        try writer["Filters"].writeList(value.filters, memberWritingClosure: NeptuneClientTypes.Filter.write(value:to:), memberNodeInfo: "Filter", isFlattened: false)
        try writer["Marker"].write(value.marker)
        try writer["MaxRecords"].write(value.maxRecords)
        try writer["Action"].write("DescribeEngineDefaultParameters")
        try writer["Version"].write("2014-10-31")
    }
}

extension DescribeEventCategoriesInput {

    static func write(value: DescribeEventCategoriesInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["Filters"].writeList(value.filters, memberWritingClosure: NeptuneClientTypes.Filter.write(value:to:), memberNodeInfo: "Filter", isFlattened: false)
        try writer["SourceType"].write(value.sourceType)
        try writer["Action"].write("DescribeEventCategories")
        try writer["Version"].write("2014-10-31")
    }
}

extension DescribeEventsInput {

    static func write(value: DescribeEventsInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["Duration"].write(value.duration)
        try writer["EndTime"].writeTimestamp(value.endTime, format: SmithyTimestamps.TimestampFormat.dateTime)
        try writer["EventCategories"].writeList(value.eventCategories, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "EventCategory", isFlattened: false)
        try writer["Filters"].writeList(value.filters, memberWritingClosure: NeptuneClientTypes.Filter.write(value:to:), memberNodeInfo: "Filter", isFlattened: false)
        try writer["Marker"].write(value.marker)
        try writer["MaxRecords"].write(value.maxRecords)
        try writer["SourceIdentifier"].write(value.sourceIdentifier)
        try writer["SourceType"].write(value.sourceType)
        try writer["StartTime"].writeTimestamp(value.startTime, format: SmithyTimestamps.TimestampFormat.dateTime)
        try writer["Action"].write("DescribeEvents")
        try writer["Version"].write("2014-10-31")
    }
}

extension DescribeEventSubscriptionsInput {

    static func write(value: DescribeEventSubscriptionsInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["Filters"].writeList(value.filters, memberWritingClosure: NeptuneClientTypes.Filter.write(value:to:), memberNodeInfo: "Filter", isFlattened: false)
        try writer["Marker"].write(value.marker)
        try writer["MaxRecords"].write(value.maxRecords)
        try writer["SubscriptionName"].write(value.subscriptionName)
        try writer["Action"].write("DescribeEventSubscriptions")
        try writer["Version"].write("2014-10-31")
    }
}

extension DescribeGlobalClustersInput {

    static func write(value: DescribeGlobalClustersInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["GlobalClusterIdentifier"].write(value.globalClusterIdentifier)
        try writer["Marker"].write(value.marker)
        try writer["MaxRecords"].write(value.maxRecords)
        try writer["Action"].write("DescribeGlobalClusters")
        try writer["Version"].write("2014-10-31")
    }
}

extension DescribeOrderableDBInstanceOptionsInput {

    static func write(value: DescribeOrderableDBInstanceOptionsInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["DBInstanceClass"].write(value.dbInstanceClass)
        try writer["Engine"].write(value.engine)
        try writer["EngineVersion"].write(value.engineVersion)
        try writer["Filters"].writeList(value.filters, memberWritingClosure: NeptuneClientTypes.Filter.write(value:to:), memberNodeInfo: "Filter", isFlattened: false)
        try writer["LicenseModel"].write(value.licenseModel)
        try writer["Marker"].write(value.marker)
        try writer["MaxRecords"].write(value.maxRecords)
        try writer["Vpc"].write(value.vpc)
        try writer["Action"].write("DescribeOrderableDBInstanceOptions")
        try writer["Version"].write("2014-10-31")
    }
}

extension DescribePendingMaintenanceActionsInput {

    static func write(value: DescribePendingMaintenanceActionsInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["Filters"].writeList(value.filters, memberWritingClosure: NeptuneClientTypes.Filter.write(value:to:), memberNodeInfo: "Filter", isFlattened: false)
        try writer["Marker"].write(value.marker)
        try writer["MaxRecords"].write(value.maxRecords)
        try writer["ResourceIdentifier"].write(value.resourceIdentifier)
        try writer["Action"].write("DescribePendingMaintenanceActions")
        try writer["Version"].write("2014-10-31")
    }
}

extension DescribeValidDBInstanceModificationsInput {

    static func write(value: DescribeValidDBInstanceModificationsInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["DBInstanceIdentifier"].write(value.dbInstanceIdentifier)
        try writer["Action"].write("DescribeValidDBInstanceModifications")
        try writer["Version"].write("2014-10-31")
    }
}

extension FailoverDBClusterInput {

    static func write(value: FailoverDBClusterInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["DBClusterIdentifier"].write(value.dbClusterIdentifier)
        try writer["TargetDBInstanceIdentifier"].write(value.targetDBInstanceIdentifier)
        try writer["Action"].write("FailoverDBCluster")
        try writer["Version"].write("2014-10-31")
    }
}

extension FailoverGlobalClusterInput {

    static func write(value: FailoverGlobalClusterInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["GlobalClusterIdentifier"].write(value.globalClusterIdentifier)
        try writer["TargetDbClusterIdentifier"].write(value.targetDbClusterIdentifier)
        try writer["Action"].write("FailoverGlobalCluster")
        try writer["Version"].write("2014-10-31")
    }
}

extension ListTagsForResourceInput {

    static func write(value: ListTagsForResourceInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["Filters"].writeList(value.filters, memberWritingClosure: NeptuneClientTypes.Filter.write(value:to:), memberNodeInfo: "Filter", isFlattened: false)
        try writer["ResourceName"].write(value.resourceName)
        try writer["Action"].write("ListTagsForResource")
        try writer["Version"].write("2014-10-31")
    }
}

extension ModifyDBClusterInput {

    static func write(value: ModifyDBClusterInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["AllowMajorVersionUpgrade"].write(value.allowMajorVersionUpgrade)
        try writer["ApplyImmediately"].write(value.applyImmediately)
        try writer["BackupRetentionPeriod"].write(value.backupRetentionPeriod)
        try writer["CloudwatchLogsExportConfiguration"].write(value.cloudwatchLogsExportConfiguration, with: NeptuneClientTypes.CloudwatchLogsExportConfiguration.write(value:to:))
        try writer["CopyTagsToSnapshot"].write(value.copyTagsToSnapshot)
        try writer["DBClusterIdentifier"].write(value.dbClusterIdentifier)
        try writer["DBClusterParameterGroupName"].write(value.dbClusterParameterGroupName)
        try writer["DBInstanceParameterGroupName"].write(value.dbInstanceParameterGroupName)
        try writer["DeletionProtection"].write(value.deletionProtection)
        try writer["EnableIAMDatabaseAuthentication"].write(value.enableIAMDatabaseAuthentication)
        try writer["EngineVersion"].write(value.engineVersion)
        try writer["MasterUserPassword"].write(value.masterUserPassword)
        try writer["NewDBClusterIdentifier"].write(value.newDBClusterIdentifier)
        try writer["OptionGroupName"].write(value.optionGroupName)
        try writer["Port"].write(value.port)
        try writer["PreferredBackupWindow"].write(value.preferredBackupWindow)
        try writer["PreferredMaintenanceWindow"].write(value.preferredMaintenanceWindow)
        try writer["ServerlessV2ScalingConfiguration"].write(value.serverlessV2ScalingConfiguration, with: NeptuneClientTypes.ServerlessV2ScalingConfiguration.write(value:to:))
        try writer["StorageType"].write(value.storageType)
        try writer["VpcSecurityGroupIds"].writeList(value.vpcSecurityGroupIds, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "VpcSecurityGroupId", isFlattened: false)
        try writer["Action"].write("ModifyDBCluster")
        try writer["Version"].write("2014-10-31")
    }
}

extension ModifyDBClusterEndpointInput {

    static func write(value: ModifyDBClusterEndpointInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["DBClusterEndpointIdentifier"].write(value.dbClusterEndpointIdentifier)
        try writer["EndpointType"].write(value.endpointType)
        try writer["ExcludedMembers"].writeList(value.excludedMembers, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["StaticMembers"].writeList(value.staticMembers, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["Action"].write("ModifyDBClusterEndpoint")
        try writer["Version"].write("2014-10-31")
    }
}

extension ModifyDBClusterParameterGroupInput {

    static func write(value: ModifyDBClusterParameterGroupInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["DBClusterParameterGroupName"].write(value.dbClusterParameterGroupName)
        try writer["Parameters"].writeList(value.parameters, memberWritingClosure: NeptuneClientTypes.Parameter.write(value:to:), memberNodeInfo: "Parameter", isFlattened: false)
        try writer["Action"].write("ModifyDBClusterParameterGroup")
        try writer["Version"].write("2014-10-31")
    }
}

extension ModifyDBClusterSnapshotAttributeInput {

    static func write(value: ModifyDBClusterSnapshotAttributeInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["AttributeName"].write(value.attributeName)
        try writer["DBClusterSnapshotIdentifier"].write(value.dbClusterSnapshotIdentifier)
        try writer["ValuesToAdd"].writeList(value.valuesToAdd, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "AttributeValue", isFlattened: false)
        try writer["ValuesToRemove"].writeList(value.valuesToRemove, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "AttributeValue", isFlattened: false)
        try writer["Action"].write("ModifyDBClusterSnapshotAttribute")
        try writer["Version"].write("2014-10-31")
    }
}

extension ModifyDBInstanceInput {

    static func write(value: ModifyDBInstanceInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["AllocatedStorage"].write(value.allocatedStorage)
        try writer["AllowMajorVersionUpgrade"].write(value.allowMajorVersionUpgrade)
        try writer["ApplyImmediately"].write(value.applyImmediately)
        try writer["AutoMinorVersionUpgrade"].write(value.autoMinorVersionUpgrade)
        try writer["BackupRetentionPeriod"].write(value.backupRetentionPeriod)
        try writer["CACertificateIdentifier"].write(value.caCertificateIdentifier)
        try writer["CloudwatchLogsExportConfiguration"].write(value.cloudwatchLogsExportConfiguration, with: NeptuneClientTypes.CloudwatchLogsExportConfiguration.write(value:to:))
        try writer["CopyTagsToSnapshot"].write(value.copyTagsToSnapshot)
        try writer["DBInstanceClass"].write(value.dbInstanceClass)
        try writer["DBInstanceIdentifier"].write(value.dbInstanceIdentifier)
        try writer["DBParameterGroupName"].write(value.dbParameterGroupName)
        try writer["DBPortNumber"].write(value.dbPortNumber)
        try writer["DBSecurityGroups"].writeList(value.dbSecurityGroups, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "DBSecurityGroupName", isFlattened: false)
        try writer["DBSubnetGroupName"].write(value.dbSubnetGroupName)
        try writer["DeletionProtection"].write(value.deletionProtection)
        try writer["Domain"].write(value.domain)
        try writer["DomainIAMRoleName"].write(value.domainIAMRoleName)
        try writer["EnableIAMDatabaseAuthentication"].write(value.enableIAMDatabaseAuthentication)
        try writer["EnablePerformanceInsights"].write(value.enablePerformanceInsights)
        try writer["EngineVersion"].write(value.engineVersion)
        try writer["Iops"].write(value.iops)
        try writer["LicenseModel"].write(value.licenseModel)
        try writer["MasterUserPassword"].write(value.masterUserPassword)
        try writer["MonitoringInterval"].write(value.monitoringInterval)
        try writer["MonitoringRoleArn"].write(value.monitoringRoleArn)
        try writer["MultiAZ"].write(value.multiAZ)
        try writer["NewDBInstanceIdentifier"].write(value.newDBInstanceIdentifier)
        try writer["OptionGroupName"].write(value.optionGroupName)
        try writer["PerformanceInsightsKMSKeyId"].write(value.performanceInsightsKMSKeyId)
        try writer["PreferredBackupWindow"].write(value.preferredBackupWindow)
        try writer["PreferredMaintenanceWindow"].write(value.preferredMaintenanceWindow)
        try writer["PromotionTier"].write(value.promotionTier)
        try writer["PubliclyAccessible"].write(value.publiclyAccessible)
        try writer["StorageType"].write(value.storageType)
        try writer["TdeCredentialArn"].write(value.tdeCredentialArn)
        try writer["TdeCredentialPassword"].write(value.tdeCredentialPassword)
        try writer["VpcSecurityGroupIds"].writeList(value.vpcSecurityGroupIds, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "VpcSecurityGroupId", isFlattened: false)
        try writer["Action"].write("ModifyDBInstance")
        try writer["Version"].write("2014-10-31")
    }
}

extension ModifyDBParameterGroupInput {

    static func write(value: ModifyDBParameterGroupInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["DBParameterGroupName"].write(value.dbParameterGroupName)
        try writer["Parameters"].writeList(value.parameters, memberWritingClosure: NeptuneClientTypes.Parameter.write(value:to:), memberNodeInfo: "Parameter", isFlattened: false)
        try writer["Action"].write("ModifyDBParameterGroup")
        try writer["Version"].write("2014-10-31")
    }
}

extension ModifyDBSubnetGroupInput {

    static func write(value: ModifyDBSubnetGroupInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["DBSubnetGroupDescription"].write(value.dbSubnetGroupDescription)
        try writer["DBSubnetGroupName"].write(value.dbSubnetGroupName)
        try writer["SubnetIds"].writeList(value.subnetIds, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "SubnetIdentifier", isFlattened: false)
        try writer["Action"].write("ModifyDBSubnetGroup")
        try writer["Version"].write("2014-10-31")
    }
}

extension ModifyEventSubscriptionInput {

    static func write(value: ModifyEventSubscriptionInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["Enabled"].write(value.enabled)
        try writer["EventCategories"].writeList(value.eventCategories, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "EventCategory", isFlattened: false)
        try writer["SnsTopicArn"].write(value.snsTopicArn)
        try writer["SourceType"].write(value.sourceType)
        try writer["SubscriptionName"].write(value.subscriptionName)
        try writer["Action"].write("ModifyEventSubscription")
        try writer["Version"].write("2014-10-31")
    }
}

extension ModifyGlobalClusterInput {

    static func write(value: ModifyGlobalClusterInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["AllowMajorVersionUpgrade"].write(value.allowMajorVersionUpgrade)
        try writer["DeletionProtection"].write(value.deletionProtection)
        try writer["EngineVersion"].write(value.engineVersion)
        try writer["GlobalClusterIdentifier"].write(value.globalClusterIdentifier)
        try writer["NewGlobalClusterIdentifier"].write(value.newGlobalClusterIdentifier)
        try writer["Action"].write("ModifyGlobalCluster")
        try writer["Version"].write("2014-10-31")
    }
}

extension PromoteReadReplicaDBClusterInput {

    static func write(value: PromoteReadReplicaDBClusterInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["DBClusterIdentifier"].write(value.dbClusterIdentifier)
        try writer["Action"].write("PromoteReadReplicaDBCluster")
        try writer["Version"].write("2014-10-31")
    }
}

extension RebootDBInstanceInput {

    static func write(value: RebootDBInstanceInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["DBInstanceIdentifier"].write(value.dbInstanceIdentifier)
        try writer["ForceFailover"].write(value.forceFailover)
        try writer["Action"].write("RebootDBInstance")
        try writer["Version"].write("2014-10-31")
    }
}

extension RemoveFromGlobalClusterInput {

    static func write(value: RemoveFromGlobalClusterInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["DbClusterIdentifier"].write(value.dbClusterIdentifier)
        try writer["GlobalClusterIdentifier"].write(value.globalClusterIdentifier)
        try writer["Action"].write("RemoveFromGlobalCluster")
        try writer["Version"].write("2014-10-31")
    }
}

extension RemoveRoleFromDBClusterInput {

    static func write(value: RemoveRoleFromDBClusterInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["DBClusterIdentifier"].write(value.dbClusterIdentifier)
        try writer["FeatureName"].write(value.featureName)
        try writer["RoleArn"].write(value.roleArn)
        try writer["Action"].write("RemoveRoleFromDBCluster")
        try writer["Version"].write("2014-10-31")
    }
}

extension RemoveSourceIdentifierFromSubscriptionInput {

    static func write(value: RemoveSourceIdentifierFromSubscriptionInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["SourceIdentifier"].write(value.sourceIdentifier)
        try writer["SubscriptionName"].write(value.subscriptionName)
        try writer["Action"].write("RemoveSourceIdentifierFromSubscription")
        try writer["Version"].write("2014-10-31")
    }
}

extension RemoveTagsFromResourceInput {

    static func write(value: RemoveTagsFromResourceInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["ResourceName"].write(value.resourceName)
        try writer["TagKeys"].writeList(value.tagKeys, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["Action"].write("RemoveTagsFromResource")
        try writer["Version"].write("2014-10-31")
    }
}

extension ResetDBClusterParameterGroupInput {

    static func write(value: ResetDBClusterParameterGroupInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["DBClusterParameterGroupName"].write(value.dbClusterParameterGroupName)
        try writer["Parameters"].writeList(value.parameters, memberWritingClosure: NeptuneClientTypes.Parameter.write(value:to:), memberNodeInfo: "Parameter", isFlattened: false)
        try writer["ResetAllParameters"].write(value.resetAllParameters)
        try writer["Action"].write("ResetDBClusterParameterGroup")
        try writer["Version"].write("2014-10-31")
    }
}

extension ResetDBParameterGroupInput {

    static func write(value: ResetDBParameterGroupInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["DBParameterGroupName"].write(value.dbParameterGroupName)
        try writer["Parameters"].writeList(value.parameters, memberWritingClosure: NeptuneClientTypes.Parameter.write(value:to:), memberNodeInfo: "Parameter", isFlattened: false)
        try writer["ResetAllParameters"].write(value.resetAllParameters)
        try writer["Action"].write("ResetDBParameterGroup")
        try writer["Version"].write("2014-10-31")
    }
}

extension RestoreDBClusterFromSnapshotInput {

    static func write(value: RestoreDBClusterFromSnapshotInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["AvailabilityZones"].writeList(value.availabilityZones, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "AvailabilityZone", isFlattened: false)
        try writer["CopyTagsToSnapshot"].write(value.copyTagsToSnapshot)
        try writer["DBClusterIdentifier"].write(value.dbClusterIdentifier)
        try writer["DBClusterParameterGroupName"].write(value.dbClusterParameterGroupName)
        try writer["DBSubnetGroupName"].write(value.dbSubnetGroupName)
        try writer["DatabaseName"].write(value.databaseName)
        try writer["DeletionProtection"].write(value.deletionProtection)
        try writer["EnableCloudwatchLogsExports"].writeList(value.enableCloudwatchLogsExports, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["EnableIAMDatabaseAuthentication"].write(value.enableIAMDatabaseAuthentication)
        try writer["Engine"].write(value.engine)
        try writer["EngineVersion"].write(value.engineVersion)
        try writer["KmsKeyId"].write(value.kmsKeyId)
        try writer["OptionGroupName"].write(value.optionGroupName)
        try writer["Port"].write(value.port)
        try writer["ServerlessV2ScalingConfiguration"].write(value.serverlessV2ScalingConfiguration, with: NeptuneClientTypes.ServerlessV2ScalingConfiguration.write(value:to:))
        try writer["SnapshotIdentifier"].write(value.snapshotIdentifier)
        try writer["StorageType"].write(value.storageType)
        try writer["Tags"].writeList(value.tags, memberWritingClosure: NeptuneClientTypes.Tag.write(value:to:), memberNodeInfo: "Tag", isFlattened: false)
        try writer["VpcSecurityGroupIds"].writeList(value.vpcSecurityGroupIds, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "VpcSecurityGroupId", isFlattened: false)
        try writer["Action"].write("RestoreDBClusterFromSnapshot")
        try writer["Version"].write("2014-10-31")
    }
}

extension RestoreDBClusterToPointInTimeInput {

    static func write(value: RestoreDBClusterToPointInTimeInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["DBClusterIdentifier"].write(value.dbClusterIdentifier)
        try writer["DBClusterParameterGroupName"].write(value.dbClusterParameterGroupName)
        try writer["DBSubnetGroupName"].write(value.dbSubnetGroupName)
        try writer["DeletionProtection"].write(value.deletionProtection)
        try writer["EnableCloudwatchLogsExports"].writeList(value.enableCloudwatchLogsExports, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["EnableIAMDatabaseAuthentication"].write(value.enableIAMDatabaseAuthentication)
        try writer["KmsKeyId"].write(value.kmsKeyId)
        try writer["OptionGroupName"].write(value.optionGroupName)
        try writer["Port"].write(value.port)
        try writer["RestoreToTime"].writeTimestamp(value.restoreToTime, format: SmithyTimestamps.TimestampFormat.dateTime)
        try writer["RestoreType"].write(value.restoreType)
        try writer["ServerlessV2ScalingConfiguration"].write(value.serverlessV2ScalingConfiguration, with: NeptuneClientTypes.ServerlessV2ScalingConfiguration.write(value:to:))
        try writer["SourceDBClusterIdentifier"].write(value.sourceDBClusterIdentifier)
        try writer["StorageType"].write(value.storageType)
        try writer["Tags"].writeList(value.tags, memberWritingClosure: NeptuneClientTypes.Tag.write(value:to:), memberNodeInfo: "Tag", isFlattened: false)
        try writer["UseLatestRestorableTime"].write(value.useLatestRestorableTime)
        try writer["VpcSecurityGroupIds"].writeList(value.vpcSecurityGroupIds, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "VpcSecurityGroupId", isFlattened: false)
        try writer["Action"].write("RestoreDBClusterToPointInTime")
        try writer["Version"].write("2014-10-31")
    }
}

extension StartDBClusterInput {

    static func write(value: StartDBClusterInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["DBClusterIdentifier"].write(value.dbClusterIdentifier)
        try writer["Action"].write("StartDBCluster")
        try writer["Version"].write("2014-10-31")
    }
}

extension StopDBClusterInput {

    static func write(value: StopDBClusterInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["DBClusterIdentifier"].write(value.dbClusterIdentifier)
        try writer["Action"].write("StopDBCluster")
        try writer["Version"].write("2014-10-31")
    }
}

extension AddRoleToDBClusterOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> AddRoleToDBClusterOutput {
        return AddRoleToDBClusterOutput()
    }
}

extension AddSourceIdentifierToSubscriptionOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> AddSourceIdentifierToSubscriptionOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader["AddSourceIdentifierToSubscriptionResult"]
        var value = AddSourceIdentifierToSubscriptionOutput()
        value.eventSubscription = try reader["EventSubscription"].readIfPresent(with: NeptuneClientTypes.EventSubscription.read(from:))
        return value
    }
}

extension AddTagsToResourceOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> AddTagsToResourceOutput {
        return AddTagsToResourceOutput()
    }
}

extension ApplyPendingMaintenanceActionOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ApplyPendingMaintenanceActionOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader["ApplyPendingMaintenanceActionResult"]
        var value = ApplyPendingMaintenanceActionOutput()
        value.resourcePendingMaintenanceActions = try reader["ResourcePendingMaintenanceActions"].readIfPresent(with: NeptuneClientTypes.ResourcePendingMaintenanceActions.read(from:))
        return value
    }
}

extension CopyDBClusterParameterGroupOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CopyDBClusterParameterGroupOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader["CopyDBClusterParameterGroupResult"]
        var value = CopyDBClusterParameterGroupOutput()
        value.dbClusterParameterGroup = try reader["DBClusterParameterGroup"].readIfPresent(with: NeptuneClientTypes.DBClusterParameterGroup.read(from:))
        return value
    }
}

extension CopyDBClusterSnapshotOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CopyDBClusterSnapshotOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader["CopyDBClusterSnapshotResult"]
        var value = CopyDBClusterSnapshotOutput()
        value.dbClusterSnapshot = try reader["DBClusterSnapshot"].readIfPresent(with: NeptuneClientTypes.DBClusterSnapshot.read(from:))
        return value
    }
}

extension CopyDBParameterGroupOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CopyDBParameterGroupOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader["CopyDBParameterGroupResult"]
        var value = CopyDBParameterGroupOutput()
        value.dbParameterGroup = try reader["DBParameterGroup"].readIfPresent(with: NeptuneClientTypes.DBParameterGroup.read(from:))
        return value
    }
}

extension CreateDBClusterOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateDBClusterOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader["CreateDBClusterResult"]
        var value = CreateDBClusterOutput()
        value.dbCluster = try reader["DBCluster"].readIfPresent(with: NeptuneClientTypes.DBCluster.read(from:))
        return value
    }
}

extension CreateDBClusterEndpointOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateDBClusterEndpointOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader["CreateDBClusterEndpointResult"]
        var value = CreateDBClusterEndpointOutput()
        value.customEndpointType = try reader["CustomEndpointType"].readIfPresent()
        value.dbClusterEndpointArn = try reader["DBClusterEndpointArn"].readIfPresent()
        value.dbClusterEndpointIdentifier = try reader["DBClusterEndpointIdentifier"].readIfPresent()
        value.dbClusterEndpointResourceIdentifier = try reader["DBClusterEndpointResourceIdentifier"].readIfPresent()
        value.dbClusterIdentifier = try reader["DBClusterIdentifier"].readIfPresent()
        value.endpoint = try reader["Endpoint"].readIfPresent()
        value.endpointType = try reader["EndpointType"].readIfPresent()
        value.excludedMembers = try reader["ExcludedMembers"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.staticMembers = try reader["StaticMembers"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.status = try reader["Status"].readIfPresent()
        return value
    }
}

extension CreateDBClusterParameterGroupOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateDBClusterParameterGroupOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader["CreateDBClusterParameterGroupResult"]
        var value = CreateDBClusterParameterGroupOutput()
        value.dbClusterParameterGroup = try reader["DBClusterParameterGroup"].readIfPresent(with: NeptuneClientTypes.DBClusterParameterGroup.read(from:))
        return value
    }
}

extension CreateDBClusterSnapshotOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateDBClusterSnapshotOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader["CreateDBClusterSnapshotResult"]
        var value = CreateDBClusterSnapshotOutput()
        value.dbClusterSnapshot = try reader["DBClusterSnapshot"].readIfPresent(with: NeptuneClientTypes.DBClusterSnapshot.read(from:))
        return value
    }
}

extension CreateDBInstanceOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateDBInstanceOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader["CreateDBInstanceResult"]
        var value = CreateDBInstanceOutput()
        value.dbInstance = try reader["DBInstance"].readIfPresent(with: NeptuneClientTypes.DBInstance.read(from:))
        return value
    }
}

extension CreateDBParameterGroupOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateDBParameterGroupOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader["CreateDBParameterGroupResult"]
        var value = CreateDBParameterGroupOutput()
        value.dbParameterGroup = try reader["DBParameterGroup"].readIfPresent(with: NeptuneClientTypes.DBParameterGroup.read(from:))
        return value
    }
}

extension CreateDBSubnetGroupOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateDBSubnetGroupOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader["CreateDBSubnetGroupResult"]
        var value = CreateDBSubnetGroupOutput()
        value.dbSubnetGroup = try reader["DBSubnetGroup"].readIfPresent(with: NeptuneClientTypes.DBSubnetGroup.read(from:))
        return value
    }
}

extension CreateEventSubscriptionOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateEventSubscriptionOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader["CreateEventSubscriptionResult"]
        var value = CreateEventSubscriptionOutput()
        value.eventSubscription = try reader["EventSubscription"].readIfPresent(with: NeptuneClientTypes.EventSubscription.read(from:))
        return value
    }
}

extension CreateGlobalClusterOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateGlobalClusterOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader["CreateGlobalClusterResult"]
        var value = CreateGlobalClusterOutput()
        value.globalCluster = try reader["GlobalCluster"].readIfPresent(with: NeptuneClientTypes.GlobalCluster.read(from:))
        return value
    }
}

extension DeleteDBClusterOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteDBClusterOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader["DeleteDBClusterResult"]
        var value = DeleteDBClusterOutput()
        value.dbCluster = try reader["DBCluster"].readIfPresent(with: NeptuneClientTypes.DBCluster.read(from:))
        return value
    }
}

extension DeleteDBClusterEndpointOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteDBClusterEndpointOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader["DeleteDBClusterEndpointResult"]
        var value = DeleteDBClusterEndpointOutput()
        value.customEndpointType = try reader["CustomEndpointType"].readIfPresent()
        value.dbClusterEndpointArn = try reader["DBClusterEndpointArn"].readIfPresent()
        value.dbClusterEndpointIdentifier = try reader["DBClusterEndpointIdentifier"].readIfPresent()
        value.dbClusterEndpointResourceIdentifier = try reader["DBClusterEndpointResourceIdentifier"].readIfPresent()
        value.dbClusterIdentifier = try reader["DBClusterIdentifier"].readIfPresent()
        value.endpoint = try reader["Endpoint"].readIfPresent()
        value.endpointType = try reader["EndpointType"].readIfPresent()
        value.excludedMembers = try reader["ExcludedMembers"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.staticMembers = try reader["StaticMembers"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.status = try reader["Status"].readIfPresent()
        return value
    }
}

extension DeleteDBClusterParameterGroupOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteDBClusterParameterGroupOutput {
        return DeleteDBClusterParameterGroupOutput()
    }
}

extension DeleteDBClusterSnapshotOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteDBClusterSnapshotOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader["DeleteDBClusterSnapshotResult"]
        var value = DeleteDBClusterSnapshotOutput()
        value.dbClusterSnapshot = try reader["DBClusterSnapshot"].readIfPresent(with: NeptuneClientTypes.DBClusterSnapshot.read(from:))
        return value
    }
}

extension DeleteDBInstanceOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteDBInstanceOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader["DeleteDBInstanceResult"]
        var value = DeleteDBInstanceOutput()
        value.dbInstance = try reader["DBInstance"].readIfPresent(with: NeptuneClientTypes.DBInstance.read(from:))
        return value
    }
}

extension DeleteDBParameterGroupOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteDBParameterGroupOutput {
        return DeleteDBParameterGroupOutput()
    }
}

extension DeleteDBSubnetGroupOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteDBSubnetGroupOutput {
        return DeleteDBSubnetGroupOutput()
    }
}

extension DeleteEventSubscriptionOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteEventSubscriptionOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader["DeleteEventSubscriptionResult"]
        var value = DeleteEventSubscriptionOutput()
        value.eventSubscription = try reader["EventSubscription"].readIfPresent(with: NeptuneClientTypes.EventSubscription.read(from:))
        return value
    }
}

extension DeleteGlobalClusterOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteGlobalClusterOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader["DeleteGlobalClusterResult"]
        var value = DeleteGlobalClusterOutput()
        value.globalCluster = try reader["GlobalCluster"].readIfPresent(with: NeptuneClientTypes.GlobalCluster.read(from:))
        return value
    }
}

extension DescribeDBClusterEndpointsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeDBClusterEndpointsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader["DescribeDBClusterEndpointsResult"]
        var value = DescribeDBClusterEndpointsOutput()
        value.dbClusterEndpoints = try reader["DBClusterEndpoints"].readListIfPresent(memberReadingClosure: NeptuneClientTypes.DBClusterEndpoint.read(from:), memberNodeInfo: "DBClusterEndpointList", isFlattened: false)
        value.marker = try reader["Marker"].readIfPresent()
        return value
    }
}

extension DescribeDBClusterParameterGroupsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeDBClusterParameterGroupsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader["DescribeDBClusterParameterGroupsResult"]
        var value = DescribeDBClusterParameterGroupsOutput()
        value.dbClusterParameterGroups = try reader["DBClusterParameterGroups"].readListIfPresent(memberReadingClosure: NeptuneClientTypes.DBClusterParameterGroup.read(from:), memberNodeInfo: "DBClusterParameterGroup", isFlattened: false)
        value.marker = try reader["Marker"].readIfPresent()
        return value
    }
}

extension DescribeDBClusterParametersOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeDBClusterParametersOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader["DescribeDBClusterParametersResult"]
        var value = DescribeDBClusterParametersOutput()
        value.marker = try reader["Marker"].readIfPresent()
        value.parameters = try reader["Parameters"].readListIfPresent(memberReadingClosure: NeptuneClientTypes.Parameter.read(from:), memberNodeInfo: "Parameter", isFlattened: false)
        return value
    }
}

extension DescribeDBClustersOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeDBClustersOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader["DescribeDBClustersResult"]
        var value = DescribeDBClustersOutput()
        value.dbClusters = try reader["DBClusters"].readListIfPresent(memberReadingClosure: NeptuneClientTypes.DBCluster.read(from:), memberNodeInfo: "DBCluster", isFlattened: false)
        value.marker = try reader["Marker"].readIfPresent()
        return value
    }
}

extension DescribeDBClusterSnapshotAttributesOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeDBClusterSnapshotAttributesOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader["DescribeDBClusterSnapshotAttributesResult"]
        var value = DescribeDBClusterSnapshotAttributesOutput()
        value.dbClusterSnapshotAttributesResult = try reader["DBClusterSnapshotAttributesResult"].readIfPresent(with: NeptuneClientTypes.DBClusterSnapshotAttributesResult.read(from:))
        return value
    }
}

extension DescribeDBClusterSnapshotsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeDBClusterSnapshotsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader["DescribeDBClusterSnapshotsResult"]
        var value = DescribeDBClusterSnapshotsOutput()
        value.dbClusterSnapshots = try reader["DBClusterSnapshots"].readListIfPresent(memberReadingClosure: NeptuneClientTypes.DBClusterSnapshot.read(from:), memberNodeInfo: "DBClusterSnapshot", isFlattened: false)
        value.marker = try reader["Marker"].readIfPresent()
        return value
    }
}

extension DescribeDBEngineVersionsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeDBEngineVersionsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader["DescribeDBEngineVersionsResult"]
        var value = DescribeDBEngineVersionsOutput()
        value.dbEngineVersions = try reader["DBEngineVersions"].readListIfPresent(memberReadingClosure: NeptuneClientTypes.DBEngineVersion.read(from:), memberNodeInfo: "DBEngineVersion", isFlattened: false)
        value.marker = try reader["Marker"].readIfPresent()
        return value
    }
}

extension DescribeDBInstancesOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeDBInstancesOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader["DescribeDBInstancesResult"]
        var value = DescribeDBInstancesOutput()
        value.dbInstances = try reader["DBInstances"].readListIfPresent(memberReadingClosure: NeptuneClientTypes.DBInstance.read(from:), memberNodeInfo: "DBInstance", isFlattened: false)
        value.marker = try reader["Marker"].readIfPresent()
        return value
    }
}

extension DescribeDBParameterGroupsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeDBParameterGroupsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader["DescribeDBParameterGroupsResult"]
        var value = DescribeDBParameterGroupsOutput()
        value.dbParameterGroups = try reader["DBParameterGroups"].readListIfPresent(memberReadingClosure: NeptuneClientTypes.DBParameterGroup.read(from:), memberNodeInfo: "DBParameterGroup", isFlattened: false)
        value.marker = try reader["Marker"].readIfPresent()
        return value
    }
}

extension DescribeDBParametersOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeDBParametersOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader["DescribeDBParametersResult"]
        var value = DescribeDBParametersOutput()
        value.marker = try reader["Marker"].readIfPresent()
        value.parameters = try reader["Parameters"].readListIfPresent(memberReadingClosure: NeptuneClientTypes.Parameter.read(from:), memberNodeInfo: "Parameter", isFlattened: false)
        return value
    }
}

extension DescribeDBSubnetGroupsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeDBSubnetGroupsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader["DescribeDBSubnetGroupsResult"]
        var value = DescribeDBSubnetGroupsOutput()
        value.dbSubnetGroups = try reader["DBSubnetGroups"].readListIfPresent(memberReadingClosure: NeptuneClientTypes.DBSubnetGroup.read(from:), memberNodeInfo: "DBSubnetGroup", isFlattened: false)
        value.marker = try reader["Marker"].readIfPresent()
        return value
    }
}

extension DescribeEngineDefaultClusterParametersOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeEngineDefaultClusterParametersOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader["DescribeEngineDefaultClusterParametersResult"]
        var value = DescribeEngineDefaultClusterParametersOutput()
        value.engineDefaults = try reader["EngineDefaults"].readIfPresent(with: NeptuneClientTypes.EngineDefaults.read(from:))
        return value
    }
}

extension DescribeEngineDefaultParametersOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeEngineDefaultParametersOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader["DescribeEngineDefaultParametersResult"]
        var value = DescribeEngineDefaultParametersOutput()
        value.engineDefaults = try reader["EngineDefaults"].readIfPresent(with: NeptuneClientTypes.EngineDefaults.read(from:))
        return value
    }
}

extension DescribeEventCategoriesOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeEventCategoriesOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader["DescribeEventCategoriesResult"]
        var value = DescribeEventCategoriesOutput()
        value.eventCategoriesMapList = try reader["EventCategoriesMapList"].readListIfPresent(memberReadingClosure: NeptuneClientTypes.EventCategoriesMap.read(from:), memberNodeInfo: "EventCategoriesMap", isFlattened: false)
        return value
    }
}

extension DescribeEventsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeEventsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader["DescribeEventsResult"]
        var value = DescribeEventsOutput()
        value.events = try reader["Events"].readListIfPresent(memberReadingClosure: NeptuneClientTypes.Event.read(from:), memberNodeInfo: "Event", isFlattened: false)
        value.marker = try reader["Marker"].readIfPresent()
        return value
    }
}

extension DescribeEventSubscriptionsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeEventSubscriptionsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader["DescribeEventSubscriptionsResult"]
        var value = DescribeEventSubscriptionsOutput()
        value.eventSubscriptionsList = try reader["EventSubscriptionsList"].readListIfPresent(memberReadingClosure: NeptuneClientTypes.EventSubscription.read(from:), memberNodeInfo: "EventSubscription", isFlattened: false)
        value.marker = try reader["Marker"].readIfPresent()
        return value
    }
}

extension DescribeGlobalClustersOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeGlobalClustersOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader["DescribeGlobalClustersResult"]
        var value = DescribeGlobalClustersOutput()
        value.globalClusters = try reader["GlobalClusters"].readListIfPresent(memberReadingClosure: NeptuneClientTypes.GlobalCluster.read(from:), memberNodeInfo: "GlobalClusterMember", isFlattened: false)
        value.marker = try reader["Marker"].readIfPresent()
        return value
    }
}

extension DescribeOrderableDBInstanceOptionsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeOrderableDBInstanceOptionsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader["DescribeOrderableDBInstanceOptionsResult"]
        var value = DescribeOrderableDBInstanceOptionsOutput()
        value.marker = try reader["Marker"].readIfPresent()
        value.orderableDBInstanceOptions = try reader["OrderableDBInstanceOptions"].readListIfPresent(memberReadingClosure: NeptuneClientTypes.OrderableDBInstanceOption.read(from:), memberNodeInfo: "OrderableDBInstanceOption", isFlattened: false)
        return value
    }
}

extension DescribePendingMaintenanceActionsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribePendingMaintenanceActionsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader["DescribePendingMaintenanceActionsResult"]
        var value = DescribePendingMaintenanceActionsOutput()
        value.marker = try reader["Marker"].readIfPresent()
        value.pendingMaintenanceActions = try reader["PendingMaintenanceActions"].readListIfPresent(memberReadingClosure: NeptuneClientTypes.ResourcePendingMaintenanceActions.read(from:), memberNodeInfo: "ResourcePendingMaintenanceActions", isFlattened: false)
        return value
    }
}

extension DescribeValidDBInstanceModificationsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeValidDBInstanceModificationsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader["DescribeValidDBInstanceModificationsResult"]
        var value = DescribeValidDBInstanceModificationsOutput()
        value.validDBInstanceModificationsMessage = try reader["ValidDBInstanceModificationsMessage"].readIfPresent(with: NeptuneClientTypes.ValidDBInstanceModificationsMessage.read(from:))
        return value
    }
}

extension FailoverDBClusterOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> FailoverDBClusterOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader["FailoverDBClusterResult"]
        var value = FailoverDBClusterOutput()
        value.dbCluster = try reader["DBCluster"].readIfPresent(with: NeptuneClientTypes.DBCluster.read(from:))
        return value
    }
}

extension FailoverGlobalClusterOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> FailoverGlobalClusterOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader["FailoverGlobalClusterResult"]
        var value = FailoverGlobalClusterOutput()
        value.globalCluster = try reader["GlobalCluster"].readIfPresent(with: NeptuneClientTypes.GlobalCluster.read(from:))
        return value
    }
}

extension ListTagsForResourceOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListTagsForResourceOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader["ListTagsForResourceResult"]
        var value = ListTagsForResourceOutput()
        value.tagList = try reader["TagList"].readListIfPresent(memberReadingClosure: NeptuneClientTypes.Tag.read(from:), memberNodeInfo: "Tag", isFlattened: false)
        return value
    }
}

extension ModifyDBClusterOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ModifyDBClusterOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader["ModifyDBClusterResult"]
        var value = ModifyDBClusterOutput()
        value.dbCluster = try reader["DBCluster"].readIfPresent(with: NeptuneClientTypes.DBCluster.read(from:))
        return value
    }
}

extension ModifyDBClusterEndpointOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ModifyDBClusterEndpointOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader["ModifyDBClusterEndpointResult"]
        var value = ModifyDBClusterEndpointOutput()
        value.customEndpointType = try reader["CustomEndpointType"].readIfPresent()
        value.dbClusterEndpointArn = try reader["DBClusterEndpointArn"].readIfPresent()
        value.dbClusterEndpointIdentifier = try reader["DBClusterEndpointIdentifier"].readIfPresent()
        value.dbClusterEndpointResourceIdentifier = try reader["DBClusterEndpointResourceIdentifier"].readIfPresent()
        value.dbClusterIdentifier = try reader["DBClusterIdentifier"].readIfPresent()
        value.endpoint = try reader["Endpoint"].readIfPresent()
        value.endpointType = try reader["EndpointType"].readIfPresent()
        value.excludedMembers = try reader["ExcludedMembers"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.staticMembers = try reader["StaticMembers"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.status = try reader["Status"].readIfPresent()
        return value
    }
}

extension ModifyDBClusterParameterGroupOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ModifyDBClusterParameterGroupOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader["ModifyDBClusterParameterGroupResult"]
        var value = ModifyDBClusterParameterGroupOutput()
        value.dbClusterParameterGroupName = try reader["DBClusterParameterGroupName"].readIfPresent()
        return value
    }
}

extension ModifyDBClusterSnapshotAttributeOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ModifyDBClusterSnapshotAttributeOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader["ModifyDBClusterSnapshotAttributeResult"]
        var value = ModifyDBClusterSnapshotAttributeOutput()
        value.dbClusterSnapshotAttributesResult = try reader["DBClusterSnapshotAttributesResult"].readIfPresent(with: NeptuneClientTypes.DBClusterSnapshotAttributesResult.read(from:))
        return value
    }
}

extension ModifyDBInstanceOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ModifyDBInstanceOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader["ModifyDBInstanceResult"]
        var value = ModifyDBInstanceOutput()
        value.dbInstance = try reader["DBInstance"].readIfPresent(with: NeptuneClientTypes.DBInstance.read(from:))
        return value
    }
}

extension ModifyDBParameterGroupOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ModifyDBParameterGroupOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader["ModifyDBParameterGroupResult"]
        var value = ModifyDBParameterGroupOutput()
        value.dbParameterGroupName = try reader["DBParameterGroupName"].readIfPresent()
        return value
    }
}

extension ModifyDBSubnetGroupOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ModifyDBSubnetGroupOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader["ModifyDBSubnetGroupResult"]
        var value = ModifyDBSubnetGroupOutput()
        value.dbSubnetGroup = try reader["DBSubnetGroup"].readIfPresent(with: NeptuneClientTypes.DBSubnetGroup.read(from:))
        return value
    }
}

extension ModifyEventSubscriptionOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ModifyEventSubscriptionOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader["ModifyEventSubscriptionResult"]
        var value = ModifyEventSubscriptionOutput()
        value.eventSubscription = try reader["EventSubscription"].readIfPresent(with: NeptuneClientTypes.EventSubscription.read(from:))
        return value
    }
}

extension ModifyGlobalClusterOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ModifyGlobalClusterOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader["ModifyGlobalClusterResult"]
        var value = ModifyGlobalClusterOutput()
        value.globalCluster = try reader["GlobalCluster"].readIfPresent(with: NeptuneClientTypes.GlobalCluster.read(from:))
        return value
    }
}

extension PromoteReadReplicaDBClusterOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> PromoteReadReplicaDBClusterOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader["PromoteReadReplicaDBClusterResult"]
        var value = PromoteReadReplicaDBClusterOutput()
        value.dbCluster = try reader["DBCluster"].readIfPresent(with: NeptuneClientTypes.DBCluster.read(from:))
        return value
    }
}

extension RebootDBInstanceOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> RebootDBInstanceOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader["RebootDBInstanceResult"]
        var value = RebootDBInstanceOutput()
        value.dbInstance = try reader["DBInstance"].readIfPresent(with: NeptuneClientTypes.DBInstance.read(from:))
        return value
    }
}

extension RemoveFromGlobalClusterOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> RemoveFromGlobalClusterOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader["RemoveFromGlobalClusterResult"]
        var value = RemoveFromGlobalClusterOutput()
        value.globalCluster = try reader["GlobalCluster"].readIfPresent(with: NeptuneClientTypes.GlobalCluster.read(from:))
        return value
    }
}

extension RemoveRoleFromDBClusterOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> RemoveRoleFromDBClusterOutput {
        return RemoveRoleFromDBClusterOutput()
    }
}

extension RemoveSourceIdentifierFromSubscriptionOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> RemoveSourceIdentifierFromSubscriptionOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader["RemoveSourceIdentifierFromSubscriptionResult"]
        var value = RemoveSourceIdentifierFromSubscriptionOutput()
        value.eventSubscription = try reader["EventSubscription"].readIfPresent(with: NeptuneClientTypes.EventSubscription.read(from:))
        return value
    }
}

extension RemoveTagsFromResourceOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> RemoveTagsFromResourceOutput {
        return RemoveTagsFromResourceOutput()
    }
}

extension ResetDBClusterParameterGroupOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ResetDBClusterParameterGroupOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader["ResetDBClusterParameterGroupResult"]
        var value = ResetDBClusterParameterGroupOutput()
        value.dbClusterParameterGroupName = try reader["DBClusterParameterGroupName"].readIfPresent()
        return value
    }
}

extension ResetDBParameterGroupOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ResetDBParameterGroupOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader["ResetDBParameterGroupResult"]
        var value = ResetDBParameterGroupOutput()
        value.dbParameterGroupName = try reader["DBParameterGroupName"].readIfPresent()
        return value
    }
}

extension RestoreDBClusterFromSnapshotOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> RestoreDBClusterFromSnapshotOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader["RestoreDBClusterFromSnapshotResult"]
        var value = RestoreDBClusterFromSnapshotOutput()
        value.dbCluster = try reader["DBCluster"].readIfPresent(with: NeptuneClientTypes.DBCluster.read(from:))
        return value
    }
}

extension RestoreDBClusterToPointInTimeOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> RestoreDBClusterToPointInTimeOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader["RestoreDBClusterToPointInTimeResult"]
        var value = RestoreDBClusterToPointInTimeOutput()
        value.dbCluster = try reader["DBCluster"].readIfPresent(with: NeptuneClientTypes.DBCluster.read(from:))
        return value
    }
}

extension StartDBClusterOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> StartDBClusterOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader["StartDBClusterResult"]
        var value = StartDBClusterOutput()
        value.dbCluster = try reader["DBCluster"].readIfPresent(with: NeptuneClientTypes.DBCluster.read(from:))
        return value
    }
}

extension StopDBClusterOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> StopDBClusterOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader["StopDBClusterResult"]
        var value = StopDBClusterOutput()
        value.dbCluster = try reader["DBCluster"].readIfPresent(with: NeptuneClientTypes.DBCluster.read(from:))
        return value
    }
}

enum AddRoleToDBClusterOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "DBClusterNotFoundFault": return try DBClusterNotFoundFault.makeError(baseError: baseError)
            case "DBClusterRoleAlreadyExists": return try DBClusterRoleAlreadyExistsFault.makeError(baseError: baseError)
            case "DBClusterRoleQuotaExceeded": return try DBClusterRoleQuotaExceededFault.makeError(baseError: baseError)
            case "InvalidDBClusterStateFault": return try InvalidDBClusterStateFault.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum AddSourceIdentifierToSubscriptionOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "SourceNotFound": return try SourceNotFoundFault.makeError(baseError: baseError)
            case "SubscriptionNotFound": return try SubscriptionNotFoundFault.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum AddTagsToResourceOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "DBClusterNotFoundFault": return try DBClusterNotFoundFault.makeError(baseError: baseError)
            case "DBInstanceNotFound": return try DBInstanceNotFoundFault.makeError(baseError: baseError)
            case "DBSnapshotNotFound": return try DBSnapshotNotFoundFault.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ApplyPendingMaintenanceActionOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ResourceNotFoundFault": return try ResourceNotFoundFault.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CopyDBClusterParameterGroupOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "DBParameterGroupAlreadyExists": return try DBParameterGroupAlreadyExistsFault.makeError(baseError: baseError)
            case "DBParameterGroupNotFound": return try DBParameterGroupNotFoundFault.makeError(baseError: baseError)
            case "DBParameterGroupQuotaExceeded": return try DBParameterGroupQuotaExceededFault.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CopyDBClusterSnapshotOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "DBClusterSnapshotAlreadyExistsFault": return try DBClusterSnapshotAlreadyExistsFault.makeError(baseError: baseError)
            case "DBClusterSnapshotNotFoundFault": return try DBClusterSnapshotNotFoundFault.makeError(baseError: baseError)
            case "InvalidDBClusterSnapshotStateFault": return try InvalidDBClusterSnapshotStateFault.makeError(baseError: baseError)
            case "InvalidDBClusterStateFault": return try InvalidDBClusterStateFault.makeError(baseError: baseError)
            case "KMSKeyNotAccessibleFault": return try KMSKeyNotAccessibleFault.makeError(baseError: baseError)
            case "SnapshotQuotaExceeded": return try SnapshotQuotaExceededFault.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CopyDBParameterGroupOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "DBParameterGroupAlreadyExists": return try DBParameterGroupAlreadyExistsFault.makeError(baseError: baseError)
            case "DBParameterGroupNotFound": return try DBParameterGroupNotFoundFault.makeError(baseError: baseError)
            case "DBParameterGroupQuotaExceeded": return try DBParameterGroupQuotaExceededFault.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateDBClusterOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "DBClusterAlreadyExistsFault": return try DBClusterAlreadyExistsFault.makeError(baseError: baseError)
            case "DBClusterNotFoundFault": return try DBClusterNotFoundFault.makeError(baseError: baseError)
            case "DBClusterParameterGroupNotFound": return try DBClusterParameterGroupNotFoundFault.makeError(baseError: baseError)
            case "DBClusterQuotaExceededFault": return try DBClusterQuotaExceededFault.makeError(baseError: baseError)
            case "DBInstanceNotFound": return try DBInstanceNotFoundFault.makeError(baseError: baseError)
            case "DBSubnetGroupDoesNotCoverEnoughAZs": return try DBSubnetGroupDoesNotCoverEnoughAZs.makeError(baseError: baseError)
            case "DBSubnetGroupNotFoundFault": return try DBSubnetGroupNotFoundFault.makeError(baseError: baseError)
            case "GlobalClusterNotFoundFault": return try GlobalClusterNotFoundFault.makeError(baseError: baseError)
            case "InsufficientStorageClusterCapacity": return try InsufficientStorageClusterCapacityFault.makeError(baseError: baseError)
            case "InvalidDBClusterStateFault": return try InvalidDBClusterStateFault.makeError(baseError: baseError)
            case "InvalidDBInstanceState": return try InvalidDBInstanceStateFault.makeError(baseError: baseError)
            case "InvalidDBSubnetGroupStateFault": return try InvalidDBSubnetGroupStateFault.makeError(baseError: baseError)
            case "InvalidGlobalClusterStateFault": return try InvalidGlobalClusterStateFault.makeError(baseError: baseError)
            case "InvalidSubnet": return try InvalidSubnet.makeError(baseError: baseError)
            case "InvalidVPCNetworkStateFault": return try InvalidVPCNetworkStateFault.makeError(baseError: baseError)
            case "KMSKeyNotAccessibleFault": return try KMSKeyNotAccessibleFault.makeError(baseError: baseError)
            case "StorageQuotaExceeded": return try StorageQuotaExceededFault.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateDBClusterEndpointOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "DBClusterEndpointAlreadyExistsFault": return try DBClusterEndpointAlreadyExistsFault.makeError(baseError: baseError)
            case "DBClusterEndpointQuotaExceededFault": return try DBClusterEndpointQuotaExceededFault.makeError(baseError: baseError)
            case "DBClusterNotFoundFault": return try DBClusterNotFoundFault.makeError(baseError: baseError)
            case "DBInstanceNotFound": return try DBInstanceNotFoundFault.makeError(baseError: baseError)
            case "InvalidDBClusterStateFault": return try InvalidDBClusterStateFault.makeError(baseError: baseError)
            case "InvalidDBInstanceState": return try InvalidDBInstanceStateFault.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateDBClusterParameterGroupOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "DBParameterGroupAlreadyExists": return try DBParameterGroupAlreadyExistsFault.makeError(baseError: baseError)
            case "DBParameterGroupQuotaExceeded": return try DBParameterGroupQuotaExceededFault.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateDBClusterSnapshotOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "DBClusterNotFoundFault": return try DBClusterNotFoundFault.makeError(baseError: baseError)
            case "DBClusterSnapshotAlreadyExistsFault": return try DBClusterSnapshotAlreadyExistsFault.makeError(baseError: baseError)
            case "InvalidDBClusterSnapshotStateFault": return try InvalidDBClusterSnapshotStateFault.makeError(baseError: baseError)
            case "InvalidDBClusterStateFault": return try InvalidDBClusterStateFault.makeError(baseError: baseError)
            case "SnapshotQuotaExceeded": return try SnapshotQuotaExceededFault.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateDBInstanceOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AuthorizationNotFound": return try AuthorizationNotFoundFault.makeError(baseError: baseError)
            case "DBClusterNotFoundFault": return try DBClusterNotFoundFault.makeError(baseError: baseError)
            case "DBInstanceAlreadyExists": return try DBInstanceAlreadyExistsFault.makeError(baseError: baseError)
            case "DBParameterGroupNotFound": return try DBParameterGroupNotFoundFault.makeError(baseError: baseError)
            case "DBSecurityGroupNotFound": return try DBSecurityGroupNotFoundFault.makeError(baseError: baseError)
            case "DBSubnetGroupDoesNotCoverEnoughAZs": return try DBSubnetGroupDoesNotCoverEnoughAZs.makeError(baseError: baseError)
            case "DBSubnetGroupNotFoundFault": return try DBSubnetGroupNotFoundFault.makeError(baseError: baseError)
            case "DomainNotFoundFault": return try DomainNotFoundFault.makeError(baseError: baseError)
            case "InstanceQuotaExceeded": return try InstanceQuotaExceededFault.makeError(baseError: baseError)
            case "InsufficientDBInstanceCapacity": return try InsufficientDBInstanceCapacityFault.makeError(baseError: baseError)
            case "InvalidDBClusterStateFault": return try InvalidDBClusterStateFault.makeError(baseError: baseError)
            case "InvalidSubnet": return try InvalidSubnet.makeError(baseError: baseError)
            case "InvalidVPCNetworkStateFault": return try InvalidVPCNetworkStateFault.makeError(baseError: baseError)
            case "KMSKeyNotAccessibleFault": return try KMSKeyNotAccessibleFault.makeError(baseError: baseError)
            case "OptionGroupNotFoundFault": return try OptionGroupNotFoundFault.makeError(baseError: baseError)
            case "ProvisionedIopsNotAvailableInAZFault": return try ProvisionedIopsNotAvailableInAZFault.makeError(baseError: baseError)
            case "StorageQuotaExceeded": return try StorageQuotaExceededFault.makeError(baseError: baseError)
            case "StorageTypeNotSupported": return try StorageTypeNotSupportedFault.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateDBParameterGroupOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "DBParameterGroupAlreadyExists": return try DBParameterGroupAlreadyExistsFault.makeError(baseError: baseError)
            case "DBParameterGroupQuotaExceeded": return try DBParameterGroupQuotaExceededFault.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateDBSubnetGroupOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "DBSubnetGroupAlreadyExists": return try DBSubnetGroupAlreadyExistsFault.makeError(baseError: baseError)
            case "DBSubnetGroupDoesNotCoverEnoughAZs": return try DBSubnetGroupDoesNotCoverEnoughAZs.makeError(baseError: baseError)
            case "DBSubnetGroupQuotaExceeded": return try DBSubnetGroupQuotaExceededFault.makeError(baseError: baseError)
            case "DBSubnetQuotaExceededFault": return try DBSubnetQuotaExceededFault.makeError(baseError: baseError)
            case "InvalidSubnet": return try InvalidSubnet.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateEventSubscriptionOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "EventSubscriptionQuotaExceeded": return try EventSubscriptionQuotaExceededFault.makeError(baseError: baseError)
            case "SNSInvalidTopic": return try SNSInvalidTopicFault.makeError(baseError: baseError)
            case "SNSNoAuthorization": return try SNSNoAuthorizationFault.makeError(baseError: baseError)
            case "SNSTopicArnNotFound": return try SNSTopicArnNotFoundFault.makeError(baseError: baseError)
            case "SourceNotFound": return try SourceNotFoundFault.makeError(baseError: baseError)
            case "SubscriptionAlreadyExist": return try SubscriptionAlreadyExistFault.makeError(baseError: baseError)
            case "SubscriptionCategoryNotFound": return try SubscriptionCategoryNotFoundFault.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateGlobalClusterOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "DBClusterNotFoundFault": return try DBClusterNotFoundFault.makeError(baseError: baseError)
            case "GlobalClusterAlreadyExistsFault": return try GlobalClusterAlreadyExistsFault.makeError(baseError: baseError)
            case "GlobalClusterQuotaExceededFault": return try GlobalClusterQuotaExceededFault.makeError(baseError: baseError)
            case "InvalidDBClusterStateFault": return try InvalidDBClusterStateFault.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteDBClusterOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "DBClusterNotFoundFault": return try DBClusterNotFoundFault.makeError(baseError: baseError)
            case "DBClusterSnapshotAlreadyExistsFault": return try DBClusterSnapshotAlreadyExistsFault.makeError(baseError: baseError)
            case "InvalidDBClusterSnapshotStateFault": return try InvalidDBClusterSnapshotStateFault.makeError(baseError: baseError)
            case "InvalidDBClusterStateFault": return try InvalidDBClusterStateFault.makeError(baseError: baseError)
            case "SnapshotQuotaExceeded": return try SnapshotQuotaExceededFault.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteDBClusterEndpointOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "DBClusterEndpointNotFoundFault": return try DBClusterEndpointNotFoundFault.makeError(baseError: baseError)
            case "InvalidDBClusterEndpointStateFault": return try InvalidDBClusterEndpointStateFault.makeError(baseError: baseError)
            case "InvalidDBClusterStateFault": return try InvalidDBClusterStateFault.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteDBClusterParameterGroupOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "DBParameterGroupNotFound": return try DBParameterGroupNotFoundFault.makeError(baseError: baseError)
            case "InvalidDBParameterGroupState": return try InvalidDBParameterGroupStateFault.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteDBClusterSnapshotOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "DBClusterSnapshotNotFoundFault": return try DBClusterSnapshotNotFoundFault.makeError(baseError: baseError)
            case "InvalidDBClusterSnapshotStateFault": return try InvalidDBClusterSnapshotStateFault.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteDBInstanceOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "DBInstanceNotFound": return try DBInstanceNotFoundFault.makeError(baseError: baseError)
            case "DBSnapshotAlreadyExists": return try DBSnapshotAlreadyExistsFault.makeError(baseError: baseError)
            case "InvalidDBClusterStateFault": return try InvalidDBClusterStateFault.makeError(baseError: baseError)
            case "InvalidDBInstanceState": return try InvalidDBInstanceStateFault.makeError(baseError: baseError)
            case "SnapshotQuotaExceeded": return try SnapshotQuotaExceededFault.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteDBParameterGroupOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "DBParameterGroupNotFound": return try DBParameterGroupNotFoundFault.makeError(baseError: baseError)
            case "InvalidDBParameterGroupState": return try InvalidDBParameterGroupStateFault.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteDBSubnetGroupOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "DBSubnetGroupNotFoundFault": return try DBSubnetGroupNotFoundFault.makeError(baseError: baseError)
            case "InvalidDBSubnetGroupStateFault": return try InvalidDBSubnetGroupStateFault.makeError(baseError: baseError)
            case "InvalidDBSubnetStateFault": return try InvalidDBSubnetStateFault.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteEventSubscriptionOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InvalidEventSubscriptionState": return try InvalidEventSubscriptionStateFault.makeError(baseError: baseError)
            case "SubscriptionNotFound": return try SubscriptionNotFoundFault.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteGlobalClusterOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "GlobalClusterNotFoundFault": return try GlobalClusterNotFoundFault.makeError(baseError: baseError)
            case "InvalidGlobalClusterStateFault": return try InvalidGlobalClusterStateFault.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeDBClusterEndpointsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "DBClusterNotFoundFault": return try DBClusterNotFoundFault.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeDBClusterParameterGroupsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "DBParameterGroupNotFound": return try DBParameterGroupNotFoundFault.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeDBClusterParametersOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "DBParameterGroupNotFound": return try DBParameterGroupNotFoundFault.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeDBClustersOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "DBClusterNotFoundFault": return try DBClusterNotFoundFault.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeDBClusterSnapshotAttributesOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "DBClusterSnapshotNotFoundFault": return try DBClusterSnapshotNotFoundFault.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeDBClusterSnapshotsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "DBClusterSnapshotNotFoundFault": return try DBClusterSnapshotNotFoundFault.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeDBEngineVersionsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeDBInstancesOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "DBInstanceNotFound": return try DBInstanceNotFoundFault.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeDBParameterGroupsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "DBParameterGroupNotFound": return try DBParameterGroupNotFoundFault.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeDBParametersOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "DBParameterGroupNotFound": return try DBParameterGroupNotFoundFault.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeDBSubnetGroupsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "DBSubnetGroupNotFoundFault": return try DBSubnetGroupNotFoundFault.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeEngineDefaultClusterParametersOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeEngineDefaultParametersOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeEventCategoriesOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeEventsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeEventSubscriptionsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "SubscriptionNotFound": return try SubscriptionNotFoundFault.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeGlobalClustersOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "GlobalClusterNotFoundFault": return try GlobalClusterNotFoundFault.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeOrderableDBInstanceOptionsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribePendingMaintenanceActionsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ResourceNotFoundFault": return try ResourceNotFoundFault.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeValidDBInstanceModificationsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "DBInstanceNotFound": return try DBInstanceNotFoundFault.makeError(baseError: baseError)
            case "InvalidDBInstanceState": return try InvalidDBInstanceStateFault.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum FailoverDBClusterOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "DBClusterNotFoundFault": return try DBClusterNotFoundFault.makeError(baseError: baseError)
            case "InvalidDBClusterStateFault": return try InvalidDBClusterStateFault.makeError(baseError: baseError)
            case "InvalidDBInstanceState": return try InvalidDBInstanceStateFault.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum FailoverGlobalClusterOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "DBClusterNotFoundFault": return try DBClusterNotFoundFault.makeError(baseError: baseError)
            case "GlobalClusterNotFoundFault": return try GlobalClusterNotFoundFault.makeError(baseError: baseError)
            case "InvalidDBClusterStateFault": return try InvalidDBClusterStateFault.makeError(baseError: baseError)
            case "InvalidGlobalClusterStateFault": return try InvalidGlobalClusterStateFault.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListTagsForResourceOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "DBClusterNotFoundFault": return try DBClusterNotFoundFault.makeError(baseError: baseError)
            case "DBInstanceNotFound": return try DBInstanceNotFoundFault.makeError(baseError: baseError)
            case "DBSnapshotNotFound": return try DBSnapshotNotFoundFault.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ModifyDBClusterOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "DBClusterAlreadyExistsFault": return try DBClusterAlreadyExistsFault.makeError(baseError: baseError)
            case "DBClusterNotFoundFault": return try DBClusterNotFoundFault.makeError(baseError: baseError)
            case "DBClusterParameterGroupNotFound": return try DBClusterParameterGroupNotFoundFault.makeError(baseError: baseError)
            case "DBSubnetGroupNotFoundFault": return try DBSubnetGroupNotFoundFault.makeError(baseError: baseError)
            case "InvalidDBClusterStateFault": return try InvalidDBClusterStateFault.makeError(baseError: baseError)
            case "InvalidDBInstanceState": return try InvalidDBInstanceStateFault.makeError(baseError: baseError)
            case "InvalidDBSecurityGroupState": return try InvalidDBSecurityGroupStateFault.makeError(baseError: baseError)
            case "InvalidDBSubnetGroupStateFault": return try InvalidDBSubnetGroupStateFault.makeError(baseError: baseError)
            case "InvalidSubnet": return try InvalidSubnet.makeError(baseError: baseError)
            case "InvalidVPCNetworkStateFault": return try InvalidVPCNetworkStateFault.makeError(baseError: baseError)
            case "StorageQuotaExceeded": return try StorageQuotaExceededFault.makeError(baseError: baseError)
            case "StorageTypeNotSupported": return try StorageTypeNotSupportedFault.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ModifyDBClusterEndpointOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "DBClusterEndpointNotFoundFault": return try DBClusterEndpointNotFoundFault.makeError(baseError: baseError)
            case "DBInstanceNotFound": return try DBInstanceNotFoundFault.makeError(baseError: baseError)
            case "InvalidDBClusterEndpointStateFault": return try InvalidDBClusterEndpointStateFault.makeError(baseError: baseError)
            case "InvalidDBClusterStateFault": return try InvalidDBClusterStateFault.makeError(baseError: baseError)
            case "InvalidDBInstanceState": return try InvalidDBInstanceStateFault.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ModifyDBClusterParameterGroupOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "DBParameterGroupNotFound": return try DBParameterGroupNotFoundFault.makeError(baseError: baseError)
            case "InvalidDBParameterGroupState": return try InvalidDBParameterGroupStateFault.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ModifyDBClusterSnapshotAttributeOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "DBClusterSnapshotNotFoundFault": return try DBClusterSnapshotNotFoundFault.makeError(baseError: baseError)
            case "InvalidDBClusterSnapshotStateFault": return try InvalidDBClusterSnapshotStateFault.makeError(baseError: baseError)
            case "SharedSnapshotQuotaExceeded": return try SharedSnapshotQuotaExceededFault.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ModifyDBInstanceOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AuthorizationNotFound": return try AuthorizationNotFoundFault.makeError(baseError: baseError)
            case "CertificateNotFound": return try CertificateNotFoundFault.makeError(baseError: baseError)
            case "DBInstanceAlreadyExists": return try DBInstanceAlreadyExistsFault.makeError(baseError: baseError)
            case "DBInstanceNotFound": return try DBInstanceNotFoundFault.makeError(baseError: baseError)
            case "DBParameterGroupNotFound": return try DBParameterGroupNotFoundFault.makeError(baseError: baseError)
            case "DBSecurityGroupNotFound": return try DBSecurityGroupNotFoundFault.makeError(baseError: baseError)
            case "DBUpgradeDependencyFailure": return try DBUpgradeDependencyFailureFault.makeError(baseError: baseError)
            case "DomainNotFoundFault": return try DomainNotFoundFault.makeError(baseError: baseError)
            case "InsufficientDBInstanceCapacity": return try InsufficientDBInstanceCapacityFault.makeError(baseError: baseError)
            case "InvalidDBInstanceState": return try InvalidDBInstanceStateFault.makeError(baseError: baseError)
            case "InvalidDBSecurityGroupState": return try InvalidDBSecurityGroupStateFault.makeError(baseError: baseError)
            case "InvalidVPCNetworkStateFault": return try InvalidVPCNetworkStateFault.makeError(baseError: baseError)
            case "OptionGroupNotFoundFault": return try OptionGroupNotFoundFault.makeError(baseError: baseError)
            case "ProvisionedIopsNotAvailableInAZFault": return try ProvisionedIopsNotAvailableInAZFault.makeError(baseError: baseError)
            case "StorageQuotaExceeded": return try StorageQuotaExceededFault.makeError(baseError: baseError)
            case "StorageTypeNotSupported": return try StorageTypeNotSupportedFault.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ModifyDBParameterGroupOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "DBParameterGroupNotFound": return try DBParameterGroupNotFoundFault.makeError(baseError: baseError)
            case "InvalidDBParameterGroupState": return try InvalidDBParameterGroupStateFault.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ModifyDBSubnetGroupOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "DBSubnetGroupDoesNotCoverEnoughAZs": return try DBSubnetGroupDoesNotCoverEnoughAZs.makeError(baseError: baseError)
            case "DBSubnetGroupNotFoundFault": return try DBSubnetGroupNotFoundFault.makeError(baseError: baseError)
            case "DBSubnetQuotaExceededFault": return try DBSubnetQuotaExceededFault.makeError(baseError: baseError)
            case "InvalidSubnet": return try InvalidSubnet.makeError(baseError: baseError)
            case "SubnetAlreadyInUse": return try SubnetAlreadyInUse.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ModifyEventSubscriptionOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "EventSubscriptionQuotaExceeded": return try EventSubscriptionQuotaExceededFault.makeError(baseError: baseError)
            case "SNSInvalidTopic": return try SNSInvalidTopicFault.makeError(baseError: baseError)
            case "SNSNoAuthorization": return try SNSNoAuthorizationFault.makeError(baseError: baseError)
            case "SNSTopicArnNotFound": return try SNSTopicArnNotFoundFault.makeError(baseError: baseError)
            case "SubscriptionCategoryNotFound": return try SubscriptionCategoryNotFoundFault.makeError(baseError: baseError)
            case "SubscriptionNotFound": return try SubscriptionNotFoundFault.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ModifyGlobalClusterOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "GlobalClusterNotFoundFault": return try GlobalClusterNotFoundFault.makeError(baseError: baseError)
            case "InvalidGlobalClusterStateFault": return try InvalidGlobalClusterStateFault.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum PromoteReadReplicaDBClusterOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "DBClusterNotFoundFault": return try DBClusterNotFoundFault.makeError(baseError: baseError)
            case "InvalidDBClusterStateFault": return try InvalidDBClusterStateFault.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum RebootDBInstanceOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "DBInstanceNotFound": return try DBInstanceNotFoundFault.makeError(baseError: baseError)
            case "InvalidDBInstanceState": return try InvalidDBInstanceStateFault.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum RemoveFromGlobalClusterOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "DBClusterNotFoundFault": return try DBClusterNotFoundFault.makeError(baseError: baseError)
            case "GlobalClusterNotFoundFault": return try GlobalClusterNotFoundFault.makeError(baseError: baseError)
            case "InvalidGlobalClusterStateFault": return try InvalidGlobalClusterStateFault.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum RemoveRoleFromDBClusterOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "DBClusterNotFoundFault": return try DBClusterNotFoundFault.makeError(baseError: baseError)
            case "DBClusterRoleNotFound": return try DBClusterRoleNotFoundFault.makeError(baseError: baseError)
            case "InvalidDBClusterStateFault": return try InvalidDBClusterStateFault.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum RemoveSourceIdentifierFromSubscriptionOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "SourceNotFound": return try SourceNotFoundFault.makeError(baseError: baseError)
            case "SubscriptionNotFound": return try SubscriptionNotFoundFault.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum RemoveTagsFromResourceOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "DBClusterNotFoundFault": return try DBClusterNotFoundFault.makeError(baseError: baseError)
            case "DBInstanceNotFound": return try DBInstanceNotFoundFault.makeError(baseError: baseError)
            case "DBSnapshotNotFound": return try DBSnapshotNotFoundFault.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ResetDBClusterParameterGroupOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "DBParameterGroupNotFound": return try DBParameterGroupNotFoundFault.makeError(baseError: baseError)
            case "InvalidDBParameterGroupState": return try InvalidDBParameterGroupStateFault.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ResetDBParameterGroupOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "DBParameterGroupNotFound": return try DBParameterGroupNotFoundFault.makeError(baseError: baseError)
            case "InvalidDBParameterGroupState": return try InvalidDBParameterGroupStateFault.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum RestoreDBClusterFromSnapshotOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "DBClusterAlreadyExistsFault": return try DBClusterAlreadyExistsFault.makeError(baseError: baseError)
            case "DBClusterParameterGroupNotFound": return try DBClusterParameterGroupNotFoundFault.makeError(baseError: baseError)
            case "DBClusterQuotaExceededFault": return try DBClusterQuotaExceededFault.makeError(baseError: baseError)
            case "DBClusterSnapshotNotFoundFault": return try DBClusterSnapshotNotFoundFault.makeError(baseError: baseError)
            case "DBSnapshotNotFound": return try DBSnapshotNotFoundFault.makeError(baseError: baseError)
            case "DBSubnetGroupNotFoundFault": return try DBSubnetGroupNotFoundFault.makeError(baseError: baseError)
            case "InsufficientDBClusterCapacityFault": return try InsufficientDBClusterCapacityFault.makeError(baseError: baseError)
            case "InsufficientStorageClusterCapacity": return try InsufficientStorageClusterCapacityFault.makeError(baseError: baseError)
            case "InvalidDBClusterSnapshotStateFault": return try InvalidDBClusterSnapshotStateFault.makeError(baseError: baseError)
            case "InvalidDBSnapshotState": return try InvalidDBSnapshotStateFault.makeError(baseError: baseError)
            case "InvalidRestoreFault": return try InvalidRestoreFault.makeError(baseError: baseError)
            case "InvalidSubnet": return try InvalidSubnet.makeError(baseError: baseError)
            case "InvalidVPCNetworkStateFault": return try InvalidVPCNetworkStateFault.makeError(baseError: baseError)
            case "KMSKeyNotAccessibleFault": return try KMSKeyNotAccessibleFault.makeError(baseError: baseError)
            case "OptionGroupNotFoundFault": return try OptionGroupNotFoundFault.makeError(baseError: baseError)
            case "StorageQuotaExceeded": return try StorageQuotaExceededFault.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum RestoreDBClusterToPointInTimeOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "DBClusterAlreadyExistsFault": return try DBClusterAlreadyExistsFault.makeError(baseError: baseError)
            case "DBClusterNotFoundFault": return try DBClusterNotFoundFault.makeError(baseError: baseError)
            case "DBClusterParameterGroupNotFound": return try DBClusterParameterGroupNotFoundFault.makeError(baseError: baseError)
            case "DBClusterQuotaExceededFault": return try DBClusterQuotaExceededFault.makeError(baseError: baseError)
            case "DBClusterSnapshotNotFoundFault": return try DBClusterSnapshotNotFoundFault.makeError(baseError: baseError)
            case "DBSubnetGroupNotFoundFault": return try DBSubnetGroupNotFoundFault.makeError(baseError: baseError)
            case "InsufficientDBClusterCapacityFault": return try InsufficientDBClusterCapacityFault.makeError(baseError: baseError)
            case "InsufficientStorageClusterCapacity": return try InsufficientStorageClusterCapacityFault.makeError(baseError: baseError)
            case "InvalidDBClusterSnapshotStateFault": return try InvalidDBClusterSnapshotStateFault.makeError(baseError: baseError)
            case "InvalidDBClusterStateFault": return try InvalidDBClusterStateFault.makeError(baseError: baseError)
            case "InvalidDBSnapshotState": return try InvalidDBSnapshotStateFault.makeError(baseError: baseError)
            case "InvalidRestoreFault": return try InvalidRestoreFault.makeError(baseError: baseError)
            case "InvalidSubnet": return try InvalidSubnet.makeError(baseError: baseError)
            case "InvalidVPCNetworkStateFault": return try InvalidVPCNetworkStateFault.makeError(baseError: baseError)
            case "KMSKeyNotAccessibleFault": return try KMSKeyNotAccessibleFault.makeError(baseError: baseError)
            case "OptionGroupNotFoundFault": return try OptionGroupNotFoundFault.makeError(baseError: baseError)
            case "StorageQuotaExceeded": return try StorageQuotaExceededFault.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum StartDBClusterOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "DBClusterNotFoundFault": return try DBClusterNotFoundFault.makeError(baseError: baseError)
            case "InvalidDBClusterStateFault": return try InvalidDBClusterStateFault.makeError(baseError: baseError)
            case "InvalidDBInstanceState": return try InvalidDBInstanceStateFault.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum StopDBClusterOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "DBClusterNotFoundFault": return try DBClusterNotFoundFault.makeError(baseError: baseError)
            case "InvalidDBClusterStateFault": return try InvalidDBClusterStateFault.makeError(baseError: baseError)
            case "InvalidDBInstanceState": return try InvalidDBInstanceStateFault.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

extension DBClusterNotFoundFault {

    static func makeError(baseError: AWSClientRuntime.AWSQueryError) throws -> DBClusterNotFoundFault {
        let reader = baseError.errorBodyReader
        var value = DBClusterNotFoundFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension DBClusterRoleQuotaExceededFault {

    static func makeError(baseError: AWSClientRuntime.AWSQueryError) throws -> DBClusterRoleQuotaExceededFault {
        let reader = baseError.errorBodyReader
        var value = DBClusterRoleQuotaExceededFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension InvalidDBClusterStateFault {

    static func makeError(baseError: AWSClientRuntime.AWSQueryError) throws -> InvalidDBClusterStateFault {
        let reader = baseError.errorBodyReader
        var value = InvalidDBClusterStateFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension DBClusterRoleAlreadyExistsFault {

    static func makeError(baseError: AWSClientRuntime.AWSQueryError) throws -> DBClusterRoleAlreadyExistsFault {
        let reader = baseError.errorBodyReader
        var value = DBClusterRoleAlreadyExistsFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension SubscriptionNotFoundFault {

    static func makeError(baseError: AWSClientRuntime.AWSQueryError) throws -> SubscriptionNotFoundFault {
        let reader = baseError.errorBodyReader
        var value = SubscriptionNotFoundFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension SourceNotFoundFault {

    static func makeError(baseError: AWSClientRuntime.AWSQueryError) throws -> SourceNotFoundFault {
        let reader = baseError.errorBodyReader
        var value = SourceNotFoundFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension DBInstanceNotFoundFault {

    static func makeError(baseError: AWSClientRuntime.AWSQueryError) throws -> DBInstanceNotFoundFault {
        let reader = baseError.errorBodyReader
        var value = DBInstanceNotFoundFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension DBSnapshotNotFoundFault {

    static func makeError(baseError: AWSClientRuntime.AWSQueryError) throws -> DBSnapshotNotFoundFault {
        let reader = baseError.errorBodyReader
        var value = DBSnapshotNotFoundFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ResourceNotFoundFault {

    static func makeError(baseError: AWSClientRuntime.AWSQueryError) throws -> ResourceNotFoundFault {
        let reader = baseError.errorBodyReader
        var value = ResourceNotFoundFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension DBParameterGroupAlreadyExistsFault {

    static func makeError(baseError: AWSClientRuntime.AWSQueryError) throws -> DBParameterGroupAlreadyExistsFault {
        let reader = baseError.errorBodyReader
        var value = DBParameterGroupAlreadyExistsFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension DBParameterGroupQuotaExceededFault {

    static func makeError(baseError: AWSClientRuntime.AWSQueryError) throws -> DBParameterGroupQuotaExceededFault {
        let reader = baseError.errorBodyReader
        var value = DBParameterGroupQuotaExceededFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension DBParameterGroupNotFoundFault {

    static func makeError(baseError: AWSClientRuntime.AWSQueryError) throws -> DBParameterGroupNotFoundFault {
        let reader = baseError.errorBodyReader
        var value = DBParameterGroupNotFoundFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension InvalidDBClusterSnapshotStateFault {

    static func makeError(baseError: AWSClientRuntime.AWSQueryError) throws -> InvalidDBClusterSnapshotStateFault {
        let reader = baseError.errorBodyReader
        var value = InvalidDBClusterSnapshotStateFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension SnapshotQuotaExceededFault {

    static func makeError(baseError: AWSClientRuntime.AWSQueryError) throws -> SnapshotQuotaExceededFault {
        let reader = baseError.errorBodyReader
        var value = SnapshotQuotaExceededFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension KMSKeyNotAccessibleFault {

    static func makeError(baseError: AWSClientRuntime.AWSQueryError) throws -> KMSKeyNotAccessibleFault {
        let reader = baseError.errorBodyReader
        var value = KMSKeyNotAccessibleFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension DBClusterSnapshotAlreadyExistsFault {

    static func makeError(baseError: AWSClientRuntime.AWSQueryError) throws -> DBClusterSnapshotAlreadyExistsFault {
        let reader = baseError.errorBodyReader
        var value = DBClusterSnapshotAlreadyExistsFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension DBClusterSnapshotNotFoundFault {

    static func makeError(baseError: AWSClientRuntime.AWSQueryError) throws -> DBClusterSnapshotNotFoundFault {
        let reader = baseError.errorBodyReader
        var value = DBClusterSnapshotNotFoundFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension InsufficientStorageClusterCapacityFault {

    static func makeError(baseError: AWSClientRuntime.AWSQueryError) throws -> InsufficientStorageClusterCapacityFault {
        let reader = baseError.errorBodyReader
        var value = InsufficientStorageClusterCapacityFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension DBSubnetGroupDoesNotCoverEnoughAZs {

    static func makeError(baseError: AWSClientRuntime.AWSQueryError) throws -> DBSubnetGroupDoesNotCoverEnoughAZs {
        let reader = baseError.errorBodyReader
        var value = DBSubnetGroupDoesNotCoverEnoughAZs()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension GlobalClusterNotFoundFault {

    static func makeError(baseError: AWSClientRuntime.AWSQueryError) throws -> GlobalClusterNotFoundFault {
        let reader = baseError.errorBodyReader
        var value = GlobalClusterNotFoundFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension DBSubnetGroupNotFoundFault {

    static func makeError(baseError: AWSClientRuntime.AWSQueryError) throws -> DBSubnetGroupNotFoundFault {
        let reader = baseError.errorBodyReader
        var value = DBSubnetGroupNotFoundFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension InvalidDBSubnetGroupStateFault {

    static func makeError(baseError: AWSClientRuntime.AWSQueryError) throws -> InvalidDBSubnetGroupStateFault {
        let reader = baseError.errorBodyReader
        var value = InvalidDBSubnetGroupStateFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension StorageQuotaExceededFault {

    static func makeError(baseError: AWSClientRuntime.AWSQueryError) throws -> StorageQuotaExceededFault {
        let reader = baseError.errorBodyReader
        var value = StorageQuotaExceededFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension InvalidVPCNetworkStateFault {

    static func makeError(baseError: AWSClientRuntime.AWSQueryError) throws -> InvalidVPCNetworkStateFault {
        let reader = baseError.errorBodyReader
        var value = InvalidVPCNetworkStateFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension InvalidDBInstanceStateFault {

    static func makeError(baseError: AWSClientRuntime.AWSQueryError) throws -> InvalidDBInstanceStateFault {
        let reader = baseError.errorBodyReader
        var value = InvalidDBInstanceStateFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension DBClusterParameterGroupNotFoundFault {

    static func makeError(baseError: AWSClientRuntime.AWSQueryError) throws -> DBClusterParameterGroupNotFoundFault {
        let reader = baseError.errorBodyReader
        var value = DBClusterParameterGroupNotFoundFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension InvalidSubnet {

    static func makeError(baseError: AWSClientRuntime.AWSQueryError) throws -> InvalidSubnet {
        let reader = baseError.errorBodyReader
        var value = InvalidSubnet()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension InvalidGlobalClusterStateFault {

    static func makeError(baseError: AWSClientRuntime.AWSQueryError) throws -> InvalidGlobalClusterStateFault {
        let reader = baseError.errorBodyReader
        var value = InvalidGlobalClusterStateFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension DBClusterAlreadyExistsFault {

    static func makeError(baseError: AWSClientRuntime.AWSQueryError) throws -> DBClusterAlreadyExistsFault {
        let reader = baseError.errorBodyReader
        var value = DBClusterAlreadyExistsFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension DBClusterQuotaExceededFault {

    static func makeError(baseError: AWSClientRuntime.AWSQueryError) throws -> DBClusterQuotaExceededFault {
        let reader = baseError.errorBodyReader
        var value = DBClusterQuotaExceededFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension DBClusterEndpointQuotaExceededFault {

    static func makeError(baseError: AWSClientRuntime.AWSQueryError) throws -> DBClusterEndpointQuotaExceededFault {
        let reader = baseError.errorBodyReader
        var value = DBClusterEndpointQuotaExceededFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension DBClusterEndpointAlreadyExistsFault {

    static func makeError(baseError: AWSClientRuntime.AWSQueryError) throws -> DBClusterEndpointAlreadyExistsFault {
        let reader = baseError.errorBodyReader
        var value = DBClusterEndpointAlreadyExistsFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension InstanceQuotaExceededFault {

    static func makeError(baseError: AWSClientRuntime.AWSQueryError) throws -> InstanceQuotaExceededFault {
        let reader = baseError.errorBodyReader
        var value = InstanceQuotaExceededFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension OptionGroupNotFoundFault {

    static func makeError(baseError: AWSClientRuntime.AWSQueryError) throws -> OptionGroupNotFoundFault {
        let reader = baseError.errorBodyReader
        var value = OptionGroupNotFoundFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension DBInstanceAlreadyExistsFault {

    static func makeError(baseError: AWSClientRuntime.AWSQueryError) throws -> DBInstanceAlreadyExistsFault {
        let reader = baseError.errorBodyReader
        var value = DBInstanceAlreadyExistsFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension InsufficientDBInstanceCapacityFault {

    static func makeError(baseError: AWSClientRuntime.AWSQueryError) throws -> InsufficientDBInstanceCapacityFault {
        let reader = baseError.errorBodyReader
        var value = InsufficientDBInstanceCapacityFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension DomainNotFoundFault {

    static func makeError(baseError: AWSClientRuntime.AWSQueryError) throws -> DomainNotFoundFault {
        let reader = baseError.errorBodyReader
        var value = DomainNotFoundFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ProvisionedIopsNotAvailableInAZFault {

    static func makeError(baseError: AWSClientRuntime.AWSQueryError) throws -> ProvisionedIopsNotAvailableInAZFault {
        let reader = baseError.errorBodyReader
        var value = ProvisionedIopsNotAvailableInAZFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension DBSecurityGroupNotFoundFault {

    static func makeError(baseError: AWSClientRuntime.AWSQueryError) throws -> DBSecurityGroupNotFoundFault {
        let reader = baseError.errorBodyReader
        var value = DBSecurityGroupNotFoundFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension StorageTypeNotSupportedFault {

    static func makeError(baseError: AWSClientRuntime.AWSQueryError) throws -> StorageTypeNotSupportedFault {
        let reader = baseError.errorBodyReader
        var value = StorageTypeNotSupportedFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension AuthorizationNotFoundFault {

    static func makeError(baseError: AWSClientRuntime.AWSQueryError) throws -> AuthorizationNotFoundFault {
        let reader = baseError.errorBodyReader
        var value = AuthorizationNotFoundFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension DBSubnetGroupQuotaExceededFault {

    static func makeError(baseError: AWSClientRuntime.AWSQueryError) throws -> DBSubnetGroupQuotaExceededFault {
        let reader = baseError.errorBodyReader
        var value = DBSubnetGroupQuotaExceededFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension DBSubnetQuotaExceededFault {

    static func makeError(baseError: AWSClientRuntime.AWSQueryError) throws -> DBSubnetQuotaExceededFault {
        let reader = baseError.errorBodyReader
        var value = DBSubnetQuotaExceededFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension DBSubnetGroupAlreadyExistsFault {

    static func makeError(baseError: AWSClientRuntime.AWSQueryError) throws -> DBSubnetGroupAlreadyExistsFault {
        let reader = baseError.errorBodyReader
        var value = DBSubnetGroupAlreadyExistsFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension SubscriptionCategoryNotFoundFault {

    static func makeError(baseError: AWSClientRuntime.AWSQueryError) throws -> SubscriptionCategoryNotFoundFault {
        let reader = baseError.errorBodyReader
        var value = SubscriptionCategoryNotFoundFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension SNSInvalidTopicFault {

    static func makeError(baseError: AWSClientRuntime.AWSQueryError) throws -> SNSInvalidTopicFault {
        let reader = baseError.errorBodyReader
        var value = SNSInvalidTopicFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension SubscriptionAlreadyExistFault {

    static func makeError(baseError: AWSClientRuntime.AWSQueryError) throws -> SubscriptionAlreadyExistFault {
        let reader = baseError.errorBodyReader
        var value = SubscriptionAlreadyExistFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension SNSNoAuthorizationFault {

    static func makeError(baseError: AWSClientRuntime.AWSQueryError) throws -> SNSNoAuthorizationFault {
        let reader = baseError.errorBodyReader
        var value = SNSNoAuthorizationFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension EventSubscriptionQuotaExceededFault {

    static func makeError(baseError: AWSClientRuntime.AWSQueryError) throws -> EventSubscriptionQuotaExceededFault {
        let reader = baseError.errorBodyReader
        var value = EventSubscriptionQuotaExceededFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension SNSTopicArnNotFoundFault {

    static func makeError(baseError: AWSClientRuntime.AWSQueryError) throws -> SNSTopicArnNotFoundFault {
        let reader = baseError.errorBodyReader
        var value = SNSTopicArnNotFoundFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension GlobalClusterQuotaExceededFault {

    static func makeError(baseError: AWSClientRuntime.AWSQueryError) throws -> GlobalClusterQuotaExceededFault {
        let reader = baseError.errorBodyReader
        var value = GlobalClusterQuotaExceededFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension GlobalClusterAlreadyExistsFault {

    static func makeError(baseError: AWSClientRuntime.AWSQueryError) throws -> GlobalClusterAlreadyExistsFault {
        let reader = baseError.errorBodyReader
        var value = GlobalClusterAlreadyExistsFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension InvalidDBClusterEndpointStateFault {

    static func makeError(baseError: AWSClientRuntime.AWSQueryError) throws -> InvalidDBClusterEndpointStateFault {
        let reader = baseError.errorBodyReader
        var value = InvalidDBClusterEndpointStateFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension DBClusterEndpointNotFoundFault {

    static func makeError(baseError: AWSClientRuntime.AWSQueryError) throws -> DBClusterEndpointNotFoundFault {
        let reader = baseError.errorBodyReader
        var value = DBClusterEndpointNotFoundFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension InvalidDBParameterGroupStateFault {

    static func makeError(baseError: AWSClientRuntime.AWSQueryError) throws -> InvalidDBParameterGroupStateFault {
        let reader = baseError.errorBodyReader
        var value = InvalidDBParameterGroupStateFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension DBSnapshotAlreadyExistsFault {

    static func makeError(baseError: AWSClientRuntime.AWSQueryError) throws -> DBSnapshotAlreadyExistsFault {
        let reader = baseError.errorBodyReader
        var value = DBSnapshotAlreadyExistsFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension InvalidDBSubnetStateFault {

    static func makeError(baseError: AWSClientRuntime.AWSQueryError) throws -> InvalidDBSubnetStateFault {
        let reader = baseError.errorBodyReader
        var value = InvalidDBSubnetStateFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension InvalidEventSubscriptionStateFault {

    static func makeError(baseError: AWSClientRuntime.AWSQueryError) throws -> InvalidEventSubscriptionStateFault {
        let reader = baseError.errorBodyReader
        var value = InvalidEventSubscriptionStateFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension InvalidDBSecurityGroupStateFault {

    static func makeError(baseError: AWSClientRuntime.AWSQueryError) throws -> InvalidDBSecurityGroupStateFault {
        let reader = baseError.errorBodyReader
        var value = InvalidDBSecurityGroupStateFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension SharedSnapshotQuotaExceededFault {

    static func makeError(baseError: AWSClientRuntime.AWSQueryError) throws -> SharedSnapshotQuotaExceededFault {
        let reader = baseError.errorBodyReader
        var value = SharedSnapshotQuotaExceededFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension DBUpgradeDependencyFailureFault {

    static func makeError(baseError: AWSClientRuntime.AWSQueryError) throws -> DBUpgradeDependencyFailureFault {
        let reader = baseError.errorBodyReader
        var value = DBUpgradeDependencyFailureFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension CertificateNotFoundFault {

    static func makeError(baseError: AWSClientRuntime.AWSQueryError) throws -> CertificateNotFoundFault {
        let reader = baseError.errorBodyReader
        var value = CertificateNotFoundFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension SubnetAlreadyInUse {

    static func makeError(baseError: AWSClientRuntime.AWSQueryError) throws -> SubnetAlreadyInUse {
        let reader = baseError.errorBodyReader
        var value = SubnetAlreadyInUse()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension DBClusterRoleNotFoundFault {

    static func makeError(baseError: AWSClientRuntime.AWSQueryError) throws -> DBClusterRoleNotFoundFault {
        let reader = baseError.errorBodyReader
        var value = DBClusterRoleNotFoundFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension InsufficientDBClusterCapacityFault {

    static func makeError(baseError: AWSClientRuntime.AWSQueryError) throws -> InsufficientDBClusterCapacityFault {
        let reader = baseError.errorBodyReader
        var value = InsufficientDBClusterCapacityFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension InvalidDBSnapshotStateFault {

    static func makeError(baseError: AWSClientRuntime.AWSQueryError) throws -> InvalidDBSnapshotStateFault {
        let reader = baseError.errorBodyReader
        var value = InvalidDBSnapshotStateFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension InvalidRestoreFault {

    static func makeError(baseError: AWSClientRuntime.AWSQueryError) throws -> InvalidRestoreFault {
        let reader = baseError.errorBodyReader
        var value = InvalidRestoreFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension NeptuneClientTypes.EventSubscription {

    static func read(from reader: SmithyXML.Reader) throws -> NeptuneClientTypes.EventSubscription {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = NeptuneClientTypes.EventSubscription()
        value.customerAwsId = try reader["CustomerAwsId"].readIfPresent()
        value.custSubscriptionId = try reader["CustSubscriptionId"].readIfPresent()
        value.snsTopicArn = try reader["SnsTopicArn"].readIfPresent()
        value.status = try reader["Status"].readIfPresent()
        value.subscriptionCreationTime = try reader["SubscriptionCreationTime"].readIfPresent()
        value.sourceType = try reader["SourceType"].readIfPresent()
        value.sourceIdsList = try reader["SourceIdsList"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "SourceId", isFlattened: false)
        value.eventCategoriesList = try reader["EventCategoriesList"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "EventCategory", isFlattened: false)
        value.enabled = try reader["Enabled"].readIfPresent()
        value.eventSubscriptionArn = try reader["EventSubscriptionArn"].readIfPresent()
        return value
    }
}

extension NeptuneClientTypes.ResourcePendingMaintenanceActions {

    static func read(from reader: SmithyXML.Reader) throws -> NeptuneClientTypes.ResourcePendingMaintenanceActions {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = NeptuneClientTypes.ResourcePendingMaintenanceActions()
        value.resourceIdentifier = try reader["ResourceIdentifier"].readIfPresent()
        value.pendingMaintenanceActionDetails = try reader["PendingMaintenanceActionDetails"].readListIfPresent(memberReadingClosure: NeptuneClientTypes.PendingMaintenanceAction.read(from:), memberNodeInfo: "PendingMaintenanceAction", isFlattened: false)
        return value
    }
}

extension NeptuneClientTypes.PendingMaintenanceAction {

    static func read(from reader: SmithyXML.Reader) throws -> NeptuneClientTypes.PendingMaintenanceAction {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = NeptuneClientTypes.PendingMaintenanceAction()
        value.action = try reader["Action"].readIfPresent()
        value.autoAppliedAfterDate = try reader["AutoAppliedAfterDate"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.dateTime)
        value.forcedApplyDate = try reader["ForcedApplyDate"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.dateTime)
        value.optInStatus = try reader["OptInStatus"].readIfPresent()
        value.currentApplyDate = try reader["CurrentApplyDate"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.dateTime)
        value.description = try reader["Description"].readIfPresent()
        return value
    }
}

extension NeptuneClientTypes.DBClusterParameterGroup {

    static func read(from reader: SmithyXML.Reader) throws -> NeptuneClientTypes.DBClusterParameterGroup {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = NeptuneClientTypes.DBClusterParameterGroup()
        value.dbClusterParameterGroupName = try reader["DBClusterParameterGroupName"].readIfPresent()
        value.dbParameterGroupFamily = try reader["DBParameterGroupFamily"].readIfPresent()
        value.description = try reader["Description"].readIfPresent()
        value.dbClusterParameterGroupArn = try reader["DBClusterParameterGroupArn"].readIfPresent()
        return value
    }
}

extension NeptuneClientTypes.DBClusterSnapshot {

    static func read(from reader: SmithyXML.Reader) throws -> NeptuneClientTypes.DBClusterSnapshot {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = NeptuneClientTypes.DBClusterSnapshot()
        value.availabilityZones = try reader["AvailabilityZones"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "AvailabilityZone", isFlattened: false)
        value.dbClusterSnapshotIdentifier = try reader["DBClusterSnapshotIdentifier"].readIfPresent()
        value.dbClusterIdentifier = try reader["DBClusterIdentifier"].readIfPresent()
        value.snapshotCreateTime = try reader["SnapshotCreateTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.dateTime)
        value.engine = try reader["Engine"].readIfPresent()
        value.allocatedStorage = try reader["AllocatedStorage"].readIfPresent()
        value.status = try reader["Status"].readIfPresent()
        value.port = try reader["Port"].readIfPresent()
        value.vpcId = try reader["VpcId"].readIfPresent()
        value.clusterCreateTime = try reader["ClusterCreateTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.dateTime)
        value.masterUsername = try reader["MasterUsername"].readIfPresent()
        value.engineVersion = try reader["EngineVersion"].readIfPresent()
        value.licenseModel = try reader["LicenseModel"].readIfPresent()
        value.snapshotType = try reader["SnapshotType"].readIfPresent()
        value.percentProgress = try reader["PercentProgress"].readIfPresent()
        value.storageEncrypted = try reader["StorageEncrypted"].readIfPresent()
        value.kmsKeyId = try reader["KmsKeyId"].readIfPresent()
        value.dbClusterSnapshotArn = try reader["DBClusterSnapshotArn"].readIfPresent()
        value.sourceDBClusterSnapshotArn = try reader["SourceDBClusterSnapshotArn"].readIfPresent()
        value.iamDatabaseAuthenticationEnabled = try reader["IAMDatabaseAuthenticationEnabled"].readIfPresent()
        value.storageType = try reader["StorageType"].readIfPresent()
        return value
    }
}

extension NeptuneClientTypes.DBParameterGroup {

    static func read(from reader: SmithyXML.Reader) throws -> NeptuneClientTypes.DBParameterGroup {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = NeptuneClientTypes.DBParameterGroup()
        value.dbParameterGroupName = try reader["DBParameterGroupName"].readIfPresent()
        value.dbParameterGroupFamily = try reader["DBParameterGroupFamily"].readIfPresent()
        value.description = try reader["Description"].readIfPresent()
        value.dbParameterGroupArn = try reader["DBParameterGroupArn"].readIfPresent()
        return value
    }
}

extension NeptuneClientTypes.DBCluster {

    static func read(from reader: SmithyXML.Reader) throws -> NeptuneClientTypes.DBCluster {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = NeptuneClientTypes.DBCluster()
        value.allocatedStorage = try reader["AllocatedStorage"].readIfPresent()
        value.availabilityZones = try reader["AvailabilityZones"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "AvailabilityZone", isFlattened: false)
        value.backupRetentionPeriod = try reader["BackupRetentionPeriod"].readIfPresent()
        value.characterSetName = try reader["CharacterSetName"].readIfPresent()
        value.databaseName = try reader["DatabaseName"].readIfPresent()
        value.dbClusterIdentifier = try reader["DBClusterIdentifier"].readIfPresent()
        value.dbClusterParameterGroup = try reader["DBClusterParameterGroup"].readIfPresent()
        value.dbSubnetGroup = try reader["DBSubnetGroup"].readIfPresent()
        value.status = try reader["Status"].readIfPresent()
        value.percentProgress = try reader["PercentProgress"].readIfPresent()
        value.earliestRestorableTime = try reader["EarliestRestorableTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.dateTime)
        value.endpoint = try reader["Endpoint"].readIfPresent()
        value.readerEndpoint = try reader["ReaderEndpoint"].readIfPresent()
        value.multiAZ = try reader["MultiAZ"].readIfPresent()
        value.engine = try reader["Engine"].readIfPresent()
        value.engineVersion = try reader["EngineVersion"].readIfPresent()
        value.latestRestorableTime = try reader["LatestRestorableTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.dateTime)
        value.port = try reader["Port"].readIfPresent()
        value.masterUsername = try reader["MasterUsername"].readIfPresent()
        value.dbClusterOptionGroupMemberships = try reader["DBClusterOptionGroupMemberships"].readListIfPresent(memberReadingClosure: NeptuneClientTypes.DBClusterOptionGroupStatus.read(from:), memberNodeInfo: "DBClusterOptionGroup", isFlattened: false)
        value.preferredBackupWindow = try reader["PreferredBackupWindow"].readIfPresent()
        value.preferredMaintenanceWindow = try reader["PreferredMaintenanceWindow"].readIfPresent()
        value.replicationSourceIdentifier = try reader["ReplicationSourceIdentifier"].readIfPresent()
        value.readReplicaIdentifiers = try reader["ReadReplicaIdentifiers"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "ReadReplicaIdentifier", isFlattened: false)
        value.dbClusterMembers = try reader["DBClusterMembers"].readListIfPresent(memberReadingClosure: NeptuneClientTypes.DBClusterMember.read(from:), memberNodeInfo: "DBClusterMember", isFlattened: false)
        value.vpcSecurityGroups = try reader["VpcSecurityGroups"].readListIfPresent(memberReadingClosure: NeptuneClientTypes.VpcSecurityGroupMembership.read(from:), memberNodeInfo: "VpcSecurityGroupMembership", isFlattened: false)
        value.hostedZoneId = try reader["HostedZoneId"].readIfPresent()
        value.storageEncrypted = try reader["StorageEncrypted"].readIfPresent()
        value.kmsKeyId = try reader["KmsKeyId"].readIfPresent()
        value.dbClusterResourceId = try reader["DbClusterResourceId"].readIfPresent()
        value.dbClusterArn = try reader["DBClusterArn"].readIfPresent()
        value.associatedRoles = try reader["AssociatedRoles"].readListIfPresent(memberReadingClosure: NeptuneClientTypes.DBClusterRole.read(from:), memberNodeInfo: "DBClusterRole", isFlattened: false)
        value.iamDatabaseAuthenticationEnabled = try reader["IAMDatabaseAuthenticationEnabled"].readIfPresent()
        value.cloneGroupId = try reader["CloneGroupId"].readIfPresent()
        value.clusterCreateTime = try reader["ClusterCreateTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.dateTime)
        value.copyTagsToSnapshot = try reader["CopyTagsToSnapshot"].readIfPresent()
        value.enabledCloudwatchLogsExports = try reader["EnabledCloudwatchLogsExports"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.pendingModifiedValues = try reader["PendingModifiedValues"].readIfPresent(with: NeptuneClientTypes.ClusterPendingModifiedValues.read(from:))
        value.deletionProtection = try reader["DeletionProtection"].readIfPresent()
        value.crossAccountClone = try reader["CrossAccountClone"].readIfPresent()
        value.automaticRestartTime = try reader["AutomaticRestartTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.dateTime)
        value.serverlessV2ScalingConfiguration = try reader["ServerlessV2ScalingConfiguration"].readIfPresent(with: NeptuneClientTypes.ServerlessV2ScalingConfigurationInfo.read(from:))
        value.globalClusterIdentifier = try reader["GlobalClusterIdentifier"].readIfPresent()
        value.ioOptimizedNextAllowedModificationTime = try reader["IOOptimizedNextAllowedModificationTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.dateTime)
        value.storageType = try reader["StorageType"].readIfPresent()
        return value
    }
}

extension NeptuneClientTypes.ServerlessV2ScalingConfigurationInfo {

    static func read(from reader: SmithyXML.Reader) throws -> NeptuneClientTypes.ServerlessV2ScalingConfigurationInfo {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = NeptuneClientTypes.ServerlessV2ScalingConfigurationInfo()
        value.minCapacity = try reader["MinCapacity"].readIfPresent()
        value.maxCapacity = try reader["MaxCapacity"].readIfPresent()
        return value
    }
}

extension NeptuneClientTypes.ClusterPendingModifiedValues {

    static func read(from reader: SmithyXML.Reader) throws -> NeptuneClientTypes.ClusterPendingModifiedValues {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = NeptuneClientTypes.ClusterPendingModifiedValues()
        value.pendingCloudwatchLogsExports = try reader["PendingCloudwatchLogsExports"].readIfPresent(with: NeptuneClientTypes.PendingCloudwatchLogsExports.read(from:))
        value.dbClusterIdentifier = try reader["DBClusterIdentifier"].readIfPresent()
        value.iamDatabaseAuthenticationEnabled = try reader["IAMDatabaseAuthenticationEnabled"].readIfPresent()
        value.engineVersion = try reader["EngineVersion"].readIfPresent()
        value.backupRetentionPeriod = try reader["BackupRetentionPeriod"].readIfPresent()
        value.storageType = try reader["StorageType"].readIfPresent()
        value.allocatedStorage = try reader["AllocatedStorage"].readIfPresent()
        value.iops = try reader["Iops"].readIfPresent()
        return value
    }
}

extension NeptuneClientTypes.PendingCloudwatchLogsExports {

    static func read(from reader: SmithyXML.Reader) throws -> NeptuneClientTypes.PendingCloudwatchLogsExports {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = NeptuneClientTypes.PendingCloudwatchLogsExports()
        value.logTypesToEnable = try reader["LogTypesToEnable"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.logTypesToDisable = try reader["LogTypesToDisable"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension NeptuneClientTypes.DBClusterRole {

    static func read(from reader: SmithyXML.Reader) throws -> NeptuneClientTypes.DBClusterRole {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = NeptuneClientTypes.DBClusterRole()
        value.roleArn = try reader["RoleArn"].readIfPresent()
        value.status = try reader["Status"].readIfPresent()
        value.featureName = try reader["FeatureName"].readIfPresent()
        return value
    }
}

extension NeptuneClientTypes.VpcSecurityGroupMembership {

    static func read(from reader: SmithyXML.Reader) throws -> NeptuneClientTypes.VpcSecurityGroupMembership {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = NeptuneClientTypes.VpcSecurityGroupMembership()
        value.vpcSecurityGroupId = try reader["VpcSecurityGroupId"].readIfPresent()
        value.status = try reader["Status"].readIfPresent()
        return value
    }
}

extension NeptuneClientTypes.DBClusterMember {

    static func read(from reader: SmithyXML.Reader) throws -> NeptuneClientTypes.DBClusterMember {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = NeptuneClientTypes.DBClusterMember()
        value.dbInstanceIdentifier = try reader["DBInstanceIdentifier"].readIfPresent()
        value.isClusterWriter = try reader["IsClusterWriter"].readIfPresent()
        value.dbClusterParameterGroupStatus = try reader["DBClusterParameterGroupStatus"].readIfPresent()
        value.promotionTier = try reader["PromotionTier"].readIfPresent()
        return value
    }
}

extension NeptuneClientTypes.DBClusterOptionGroupStatus {

    static func read(from reader: SmithyXML.Reader) throws -> NeptuneClientTypes.DBClusterOptionGroupStatus {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = NeptuneClientTypes.DBClusterOptionGroupStatus()
        value.dbClusterOptionGroupName = try reader["DBClusterOptionGroupName"].readIfPresent()
        value.status = try reader["Status"].readIfPresent()
        return value
    }
}

extension NeptuneClientTypes.DBInstance {

    static func read(from reader: SmithyXML.Reader) throws -> NeptuneClientTypes.DBInstance {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = NeptuneClientTypes.DBInstance()
        value.dbInstanceIdentifier = try reader["DBInstanceIdentifier"].readIfPresent()
        value.dbInstanceClass = try reader["DBInstanceClass"].readIfPresent()
        value.engine = try reader["Engine"].readIfPresent()
        value.dbInstanceStatus = try reader["DBInstanceStatus"].readIfPresent()
        value.masterUsername = try reader["MasterUsername"].readIfPresent()
        value.dbName = try reader["DBName"].readIfPresent()
        value.endpoint = try reader["Endpoint"].readIfPresent(with: NeptuneClientTypes.Endpoint.read(from:))
        value.allocatedStorage = try reader["AllocatedStorage"].readIfPresent()
        value.instanceCreateTime = try reader["InstanceCreateTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.dateTime)
        value.preferredBackupWindow = try reader["PreferredBackupWindow"].readIfPresent()
        value.backupRetentionPeriod = try reader["BackupRetentionPeriod"].readIfPresent()
        value.dbSecurityGroups = try reader["DBSecurityGroups"].readListIfPresent(memberReadingClosure: NeptuneClientTypes.DBSecurityGroupMembership.read(from:), memberNodeInfo: "DBSecurityGroup", isFlattened: false)
        value.vpcSecurityGroups = try reader["VpcSecurityGroups"].readListIfPresent(memberReadingClosure: NeptuneClientTypes.VpcSecurityGroupMembership.read(from:), memberNodeInfo: "VpcSecurityGroupMembership", isFlattened: false)
        value.dbParameterGroups = try reader["DBParameterGroups"].readListIfPresent(memberReadingClosure: NeptuneClientTypes.DBParameterGroupStatus.read(from:), memberNodeInfo: "DBParameterGroup", isFlattened: false)
        value.availabilityZone = try reader["AvailabilityZone"].readIfPresent()
        value.dbSubnetGroup = try reader["DBSubnetGroup"].readIfPresent(with: NeptuneClientTypes.DBSubnetGroup.read(from:))
        value.preferredMaintenanceWindow = try reader["PreferredMaintenanceWindow"].readIfPresent()
        value.pendingModifiedValues = try reader["PendingModifiedValues"].readIfPresent(with: NeptuneClientTypes.PendingModifiedValues.read(from:))
        value.latestRestorableTime = try reader["LatestRestorableTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.dateTime)
        value.multiAZ = try reader["MultiAZ"].readIfPresent()
        value.engineVersion = try reader["EngineVersion"].readIfPresent()
        value.autoMinorVersionUpgrade = try reader["AutoMinorVersionUpgrade"].readIfPresent()
        value.readReplicaSourceDBInstanceIdentifier = try reader["ReadReplicaSourceDBInstanceIdentifier"].readIfPresent()
        value.readReplicaDBInstanceIdentifiers = try reader["ReadReplicaDBInstanceIdentifiers"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "ReadReplicaDBInstanceIdentifier", isFlattened: false)
        value.readReplicaDBClusterIdentifiers = try reader["ReadReplicaDBClusterIdentifiers"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "ReadReplicaDBClusterIdentifier", isFlattened: false)
        value.licenseModel = try reader["LicenseModel"].readIfPresent()
        value.iops = try reader["Iops"].readIfPresent()
        value.optionGroupMemberships = try reader["OptionGroupMemberships"].readListIfPresent(memberReadingClosure: NeptuneClientTypes.OptionGroupMembership.read(from:), memberNodeInfo: "OptionGroupMembership", isFlattened: false)
        value.characterSetName = try reader["CharacterSetName"].readIfPresent()
        value.secondaryAvailabilityZone = try reader["SecondaryAvailabilityZone"].readIfPresent()
        value.publiclyAccessible = try reader["PubliclyAccessible"].readIfPresent()
        value.statusInfos = try reader["StatusInfos"].readListIfPresent(memberReadingClosure: NeptuneClientTypes.DBInstanceStatusInfo.read(from:), memberNodeInfo: "DBInstanceStatusInfo", isFlattened: false)
        value.storageType = try reader["StorageType"].readIfPresent()
        value.tdeCredentialArn = try reader["TdeCredentialArn"].readIfPresent()
        value.dbInstancePort = try reader["DbInstancePort"].readIfPresent()
        value.dbClusterIdentifier = try reader["DBClusterIdentifier"].readIfPresent()
        value.storageEncrypted = try reader["StorageEncrypted"].readIfPresent()
        value.kmsKeyId = try reader["KmsKeyId"].readIfPresent()
        value.dbiResourceId = try reader["DbiResourceId"].readIfPresent()
        value.caCertificateIdentifier = try reader["CACertificateIdentifier"].readIfPresent()
        value.domainMemberships = try reader["DomainMemberships"].readListIfPresent(memberReadingClosure: NeptuneClientTypes.DomainMembership.read(from:), memberNodeInfo: "DomainMembership", isFlattened: false)
        value.copyTagsToSnapshot = try reader["CopyTagsToSnapshot"].readIfPresent()
        value.monitoringInterval = try reader["MonitoringInterval"].readIfPresent()
        value.enhancedMonitoringResourceArn = try reader["EnhancedMonitoringResourceArn"].readIfPresent()
        value.monitoringRoleArn = try reader["MonitoringRoleArn"].readIfPresent()
        value.promotionTier = try reader["PromotionTier"].readIfPresent()
        value.dbInstanceArn = try reader["DBInstanceArn"].readIfPresent()
        value.timezone = try reader["Timezone"].readIfPresent()
        value.iamDatabaseAuthenticationEnabled = try reader["IAMDatabaseAuthenticationEnabled"].readIfPresent()
        value.performanceInsightsEnabled = try reader["PerformanceInsightsEnabled"].readIfPresent()
        value.performanceInsightsKMSKeyId = try reader["PerformanceInsightsKMSKeyId"].readIfPresent()
        value.enabledCloudwatchLogsExports = try reader["EnabledCloudwatchLogsExports"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.deletionProtection = try reader["DeletionProtection"].readIfPresent()
        return value
    }
}

extension NeptuneClientTypes.DomainMembership {

    static func read(from reader: SmithyXML.Reader) throws -> NeptuneClientTypes.DomainMembership {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = NeptuneClientTypes.DomainMembership()
        value.domain = try reader["Domain"].readIfPresent()
        value.status = try reader["Status"].readIfPresent()
        value.fqdn = try reader["FQDN"].readIfPresent()
        value.iamRoleName = try reader["IAMRoleName"].readIfPresent()
        return value
    }
}

extension NeptuneClientTypes.DBInstanceStatusInfo {

    static func read(from reader: SmithyXML.Reader) throws -> NeptuneClientTypes.DBInstanceStatusInfo {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = NeptuneClientTypes.DBInstanceStatusInfo()
        value.statusType = try reader["StatusType"].readIfPresent()
        value.normal = try reader["Normal"].readIfPresent()
        value.status = try reader["Status"].readIfPresent()
        value.message = try reader["Message"].readIfPresent()
        return value
    }
}

extension NeptuneClientTypes.OptionGroupMembership {

    static func read(from reader: SmithyXML.Reader) throws -> NeptuneClientTypes.OptionGroupMembership {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = NeptuneClientTypes.OptionGroupMembership()
        value.optionGroupName = try reader["OptionGroupName"].readIfPresent()
        value.status = try reader["Status"].readIfPresent()
        return value
    }
}

extension NeptuneClientTypes.PendingModifiedValues {

    static func read(from reader: SmithyXML.Reader) throws -> NeptuneClientTypes.PendingModifiedValues {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = NeptuneClientTypes.PendingModifiedValues()
        value.dbInstanceClass = try reader["DBInstanceClass"].readIfPresent()
        value.allocatedStorage = try reader["AllocatedStorage"].readIfPresent()
        value.masterUserPassword = try reader["MasterUserPassword"].readIfPresent()
        value.port = try reader["Port"].readIfPresent()
        value.backupRetentionPeriod = try reader["BackupRetentionPeriod"].readIfPresent()
        value.multiAZ = try reader["MultiAZ"].readIfPresent()
        value.engineVersion = try reader["EngineVersion"].readIfPresent()
        value.licenseModel = try reader["LicenseModel"].readIfPresent()
        value.iops = try reader["Iops"].readIfPresent()
        value.dbInstanceIdentifier = try reader["DBInstanceIdentifier"].readIfPresent()
        value.storageType = try reader["StorageType"].readIfPresent()
        value.caCertificateIdentifier = try reader["CACertificateIdentifier"].readIfPresent()
        value.dbSubnetGroupName = try reader["DBSubnetGroupName"].readIfPresent()
        value.pendingCloudwatchLogsExports = try reader["PendingCloudwatchLogsExports"].readIfPresent(with: NeptuneClientTypes.PendingCloudwatchLogsExports.read(from:))
        return value
    }
}

extension NeptuneClientTypes.DBSubnetGroup {

    static func read(from reader: SmithyXML.Reader) throws -> NeptuneClientTypes.DBSubnetGroup {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = NeptuneClientTypes.DBSubnetGroup()
        value.dbSubnetGroupName = try reader["DBSubnetGroupName"].readIfPresent()
        value.dbSubnetGroupDescription = try reader["DBSubnetGroupDescription"].readIfPresent()
        value.vpcId = try reader["VpcId"].readIfPresent()
        value.subnetGroupStatus = try reader["SubnetGroupStatus"].readIfPresent()
        value.subnets = try reader["Subnets"].readListIfPresent(memberReadingClosure: NeptuneClientTypes.Subnet.read(from:), memberNodeInfo: "Subnet", isFlattened: false)
        value.dbSubnetGroupArn = try reader["DBSubnetGroupArn"].readIfPresent()
        return value
    }
}

extension NeptuneClientTypes.Subnet {

    static func read(from reader: SmithyXML.Reader) throws -> NeptuneClientTypes.Subnet {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = NeptuneClientTypes.Subnet()
        value.subnetIdentifier = try reader["SubnetIdentifier"].readIfPresent()
        value.subnetAvailabilityZone = try reader["SubnetAvailabilityZone"].readIfPresent(with: NeptuneClientTypes.AvailabilityZone.read(from:))
        value.subnetStatus = try reader["SubnetStatus"].readIfPresent()
        return value
    }
}

extension NeptuneClientTypes.AvailabilityZone {

    static func read(from reader: SmithyXML.Reader) throws -> NeptuneClientTypes.AvailabilityZone {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = NeptuneClientTypes.AvailabilityZone()
        value.name = try reader["Name"].readIfPresent()
        return value
    }
}

extension NeptuneClientTypes.DBParameterGroupStatus {

    static func read(from reader: SmithyXML.Reader) throws -> NeptuneClientTypes.DBParameterGroupStatus {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = NeptuneClientTypes.DBParameterGroupStatus()
        value.dbParameterGroupName = try reader["DBParameterGroupName"].readIfPresent()
        value.parameterApplyStatus = try reader["ParameterApplyStatus"].readIfPresent()
        return value
    }
}

extension NeptuneClientTypes.DBSecurityGroupMembership {

    static func read(from reader: SmithyXML.Reader) throws -> NeptuneClientTypes.DBSecurityGroupMembership {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = NeptuneClientTypes.DBSecurityGroupMembership()
        value.dbSecurityGroupName = try reader["DBSecurityGroupName"].readIfPresent()
        value.status = try reader["Status"].readIfPresent()
        return value
    }
}

extension NeptuneClientTypes.Endpoint {

    static func read(from reader: SmithyXML.Reader) throws -> NeptuneClientTypes.Endpoint {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = NeptuneClientTypes.Endpoint()
        value.address = try reader["Address"].readIfPresent()
        value.port = try reader["Port"].readIfPresent()
        value.hostedZoneId = try reader["HostedZoneId"].readIfPresent()
        return value
    }
}

extension NeptuneClientTypes.GlobalCluster {

    static func read(from reader: SmithyXML.Reader) throws -> NeptuneClientTypes.GlobalCluster {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = NeptuneClientTypes.GlobalCluster()
        value.globalClusterIdentifier = try reader["GlobalClusterIdentifier"].readIfPresent()
        value.globalClusterResourceId = try reader["GlobalClusterResourceId"].readIfPresent()
        value.globalClusterArn = try reader["GlobalClusterArn"].readIfPresent()
        value.status = try reader["Status"].readIfPresent()
        value.engine = try reader["Engine"].readIfPresent()
        value.engineVersion = try reader["EngineVersion"].readIfPresent()
        value.storageEncrypted = try reader["StorageEncrypted"].readIfPresent()
        value.deletionProtection = try reader["DeletionProtection"].readIfPresent()
        value.globalClusterMembers = try reader["GlobalClusterMembers"].readListIfPresent(memberReadingClosure: NeptuneClientTypes.GlobalClusterMember.read(from:), memberNodeInfo: "GlobalClusterMember", isFlattened: false)
        return value
    }
}

extension NeptuneClientTypes.GlobalClusterMember {

    static func read(from reader: SmithyXML.Reader) throws -> NeptuneClientTypes.GlobalClusterMember {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = NeptuneClientTypes.GlobalClusterMember()
        value.dbClusterArn = try reader["DBClusterArn"].readIfPresent()
        value.readers = try reader["Readers"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.isWriter = try reader["IsWriter"].readIfPresent()
        return value
    }
}

extension NeptuneClientTypes.DBClusterEndpoint {

    static func read(from reader: SmithyXML.Reader) throws -> NeptuneClientTypes.DBClusterEndpoint {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = NeptuneClientTypes.DBClusterEndpoint()
        value.dbClusterEndpointIdentifier = try reader["DBClusterEndpointIdentifier"].readIfPresent()
        value.dbClusterIdentifier = try reader["DBClusterIdentifier"].readIfPresent()
        value.dbClusterEndpointResourceIdentifier = try reader["DBClusterEndpointResourceIdentifier"].readIfPresent()
        value.endpoint = try reader["Endpoint"].readIfPresent()
        value.status = try reader["Status"].readIfPresent()
        value.endpointType = try reader["EndpointType"].readIfPresent()
        value.customEndpointType = try reader["CustomEndpointType"].readIfPresent()
        value.staticMembers = try reader["StaticMembers"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.excludedMembers = try reader["ExcludedMembers"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.dbClusterEndpointArn = try reader["DBClusterEndpointArn"].readIfPresent()
        return value
    }
}

extension NeptuneClientTypes.Parameter {

    static func write(value: NeptuneClientTypes.Parameter?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["AllowedValues"].write(value.allowedValues)
        try writer["ApplyMethod"].write(value.applyMethod)
        try writer["ApplyType"].write(value.applyType)
        try writer["DataType"].write(value.dataType)
        try writer["Description"].write(value.description)
        try writer["IsModifiable"].write(value.isModifiable)
        try writer["MinimumEngineVersion"].write(value.minimumEngineVersion)
        try writer["ParameterName"].write(value.parameterName)
        try writer["ParameterValue"].write(value.parameterValue)
        try writer["Source"].write(value.source)
    }

    static func read(from reader: SmithyXML.Reader) throws -> NeptuneClientTypes.Parameter {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = NeptuneClientTypes.Parameter()
        value.parameterName = try reader["ParameterName"].readIfPresent()
        value.parameterValue = try reader["ParameterValue"].readIfPresent()
        value.description = try reader["Description"].readIfPresent()
        value.source = try reader["Source"].readIfPresent()
        value.applyType = try reader["ApplyType"].readIfPresent()
        value.dataType = try reader["DataType"].readIfPresent()
        value.allowedValues = try reader["AllowedValues"].readIfPresent()
        value.isModifiable = try reader["IsModifiable"].readIfPresent()
        value.minimumEngineVersion = try reader["MinimumEngineVersion"].readIfPresent()
        value.applyMethod = try reader["ApplyMethod"].readIfPresent()
        return value
    }
}

extension NeptuneClientTypes.DBClusterSnapshotAttributesResult {

    static func read(from reader: SmithyXML.Reader) throws -> NeptuneClientTypes.DBClusterSnapshotAttributesResult {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = NeptuneClientTypes.DBClusterSnapshotAttributesResult()
        value.dbClusterSnapshotIdentifier = try reader["DBClusterSnapshotIdentifier"].readIfPresent()
        value.dbClusterSnapshotAttributes = try reader["DBClusterSnapshotAttributes"].readListIfPresent(memberReadingClosure: NeptuneClientTypes.DBClusterSnapshotAttribute.read(from:), memberNodeInfo: "DBClusterSnapshotAttribute", isFlattened: false)
        return value
    }
}

extension NeptuneClientTypes.DBClusterSnapshotAttribute {

    static func read(from reader: SmithyXML.Reader) throws -> NeptuneClientTypes.DBClusterSnapshotAttribute {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = NeptuneClientTypes.DBClusterSnapshotAttribute()
        value.attributeName = try reader["AttributeName"].readIfPresent()
        value.attributeValues = try reader["AttributeValues"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "AttributeValue", isFlattened: false)
        return value
    }
}

extension NeptuneClientTypes.DBEngineVersion {

    static func read(from reader: SmithyXML.Reader) throws -> NeptuneClientTypes.DBEngineVersion {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = NeptuneClientTypes.DBEngineVersion()
        value.engine = try reader["Engine"].readIfPresent()
        value.engineVersion = try reader["EngineVersion"].readIfPresent()
        value.dbParameterGroupFamily = try reader["DBParameterGroupFamily"].readIfPresent()
        value.dbEngineDescription = try reader["DBEngineDescription"].readIfPresent()
        value.dbEngineVersionDescription = try reader["DBEngineVersionDescription"].readIfPresent()
        value.defaultCharacterSet = try reader["DefaultCharacterSet"].readIfPresent(with: NeptuneClientTypes.CharacterSet.read(from:))
        value.supportedCharacterSets = try reader["SupportedCharacterSets"].readListIfPresent(memberReadingClosure: NeptuneClientTypes.CharacterSet.read(from:), memberNodeInfo: "CharacterSet", isFlattened: false)
        value.validUpgradeTarget = try reader["ValidUpgradeTarget"].readListIfPresent(memberReadingClosure: NeptuneClientTypes.UpgradeTarget.read(from:), memberNodeInfo: "UpgradeTarget", isFlattened: false)
        value.supportedTimezones = try reader["SupportedTimezones"].readListIfPresent(memberReadingClosure: NeptuneClientTypes.Timezone.read(from:), memberNodeInfo: "Timezone", isFlattened: false)
        value.exportableLogTypes = try reader["ExportableLogTypes"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.supportsLogExportsToCloudwatchLogs = try reader["SupportsLogExportsToCloudwatchLogs"].readIfPresent()
        value.supportsReadReplica = try reader["SupportsReadReplica"].readIfPresent()
        value.supportsGlobalDatabases = try reader["SupportsGlobalDatabases"].readIfPresent()
        return value
    }
}

extension NeptuneClientTypes.Timezone {

    static func read(from reader: SmithyXML.Reader) throws -> NeptuneClientTypes.Timezone {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = NeptuneClientTypes.Timezone()
        value.timezoneName = try reader["TimezoneName"].readIfPresent()
        return value
    }
}

extension NeptuneClientTypes.UpgradeTarget {

    static func read(from reader: SmithyXML.Reader) throws -> NeptuneClientTypes.UpgradeTarget {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = NeptuneClientTypes.UpgradeTarget()
        value.engine = try reader["Engine"].readIfPresent()
        value.engineVersion = try reader["EngineVersion"].readIfPresent()
        value.description = try reader["Description"].readIfPresent()
        value.autoUpgrade = try reader["AutoUpgrade"].readIfPresent()
        value.isMajorVersionUpgrade = try reader["IsMajorVersionUpgrade"].readIfPresent()
        value.supportsGlobalDatabases = try reader["SupportsGlobalDatabases"].readIfPresent()
        return value
    }
}

extension NeptuneClientTypes.CharacterSet {

    static func read(from reader: SmithyXML.Reader) throws -> NeptuneClientTypes.CharacterSet {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = NeptuneClientTypes.CharacterSet()
        value.characterSetName = try reader["CharacterSetName"].readIfPresent()
        value.characterSetDescription = try reader["CharacterSetDescription"].readIfPresent()
        return value
    }
}

extension NeptuneClientTypes.EngineDefaults {

    static func read(from reader: SmithyXML.Reader) throws -> NeptuneClientTypes.EngineDefaults {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = NeptuneClientTypes.EngineDefaults()
        value.dbParameterGroupFamily = try reader["DBParameterGroupFamily"].readIfPresent()
        value.marker = try reader["Marker"].readIfPresent()
        value.parameters = try reader["Parameters"].readListIfPresent(memberReadingClosure: NeptuneClientTypes.Parameter.read(from:), memberNodeInfo: "Parameter", isFlattened: false)
        return value
    }
}

extension NeptuneClientTypes.EventCategoriesMap {

    static func read(from reader: SmithyXML.Reader) throws -> NeptuneClientTypes.EventCategoriesMap {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = NeptuneClientTypes.EventCategoriesMap()
        value.sourceType = try reader["SourceType"].readIfPresent()
        value.eventCategories = try reader["EventCategories"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "EventCategory", isFlattened: false)
        return value
    }
}

extension NeptuneClientTypes.Event {

    static func read(from reader: SmithyXML.Reader) throws -> NeptuneClientTypes.Event {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = NeptuneClientTypes.Event()
        value.sourceIdentifier = try reader["SourceIdentifier"].readIfPresent()
        value.sourceType = try reader["SourceType"].readIfPresent()
        value.message = try reader["Message"].readIfPresent()
        value.eventCategories = try reader["EventCategories"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "EventCategory", isFlattened: false)
        value.date = try reader["Date"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.dateTime)
        value.sourceArn = try reader["SourceArn"].readIfPresent()
        return value
    }
}

extension NeptuneClientTypes.OrderableDBInstanceOption {

    static func read(from reader: SmithyXML.Reader) throws -> NeptuneClientTypes.OrderableDBInstanceOption {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = NeptuneClientTypes.OrderableDBInstanceOption()
        value.engine = try reader["Engine"].readIfPresent()
        value.engineVersion = try reader["EngineVersion"].readIfPresent()
        value.dbInstanceClass = try reader["DBInstanceClass"].readIfPresent()
        value.licenseModel = try reader["LicenseModel"].readIfPresent()
        value.availabilityZones = try reader["AvailabilityZones"].readListIfPresent(memberReadingClosure: NeptuneClientTypes.AvailabilityZone.read(from:), memberNodeInfo: "AvailabilityZone", isFlattened: false)
        value.multiAZCapable = try reader["MultiAZCapable"].readIfPresent()
        value.readReplicaCapable = try reader["ReadReplicaCapable"].readIfPresent()
        value.vpc = try reader["Vpc"].readIfPresent()
        value.supportsStorageEncryption = try reader["SupportsStorageEncryption"].readIfPresent()
        value.storageType = try reader["StorageType"].readIfPresent()
        value.supportsIops = try reader["SupportsIops"].readIfPresent()
        value.supportsEnhancedMonitoring = try reader["SupportsEnhancedMonitoring"].readIfPresent()
        value.supportsIAMDatabaseAuthentication = try reader["SupportsIAMDatabaseAuthentication"].readIfPresent()
        value.supportsPerformanceInsights = try reader["SupportsPerformanceInsights"].readIfPresent()
        value.minStorageSize = try reader["MinStorageSize"].readIfPresent()
        value.maxStorageSize = try reader["MaxStorageSize"].readIfPresent()
        value.minIopsPerDbInstance = try reader["MinIopsPerDbInstance"].readIfPresent()
        value.maxIopsPerDbInstance = try reader["MaxIopsPerDbInstance"].readIfPresent()
        value.minIopsPerGib = try reader["MinIopsPerGib"].readIfPresent()
        value.maxIopsPerGib = try reader["MaxIopsPerGib"].readIfPresent()
        value.supportsGlobalDatabases = try reader["SupportsGlobalDatabases"].readIfPresent()
        return value
    }
}

extension NeptuneClientTypes.ValidDBInstanceModificationsMessage {

    static func read(from reader: SmithyXML.Reader) throws -> NeptuneClientTypes.ValidDBInstanceModificationsMessage {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = NeptuneClientTypes.ValidDBInstanceModificationsMessage()
        value.storage = try reader["Storage"].readListIfPresent(memberReadingClosure: NeptuneClientTypes.ValidStorageOptions.read(from:), memberNodeInfo: "ValidStorageOptions", isFlattened: false)
        return value
    }
}

extension NeptuneClientTypes.ValidStorageOptions {

    static func read(from reader: SmithyXML.Reader) throws -> NeptuneClientTypes.ValidStorageOptions {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = NeptuneClientTypes.ValidStorageOptions()
        value.storageType = try reader["StorageType"].readIfPresent()
        value.storageSize = try reader["StorageSize"].readListIfPresent(memberReadingClosure: NeptuneClientTypes.Range.read(from:), memberNodeInfo: "Range", isFlattened: false)
        value.provisionedIops = try reader["ProvisionedIops"].readListIfPresent(memberReadingClosure: NeptuneClientTypes.Range.read(from:), memberNodeInfo: "Range", isFlattened: false)
        value.iopsToStorageRatio = try reader["IopsToStorageRatio"].readListIfPresent(memberReadingClosure: NeptuneClientTypes.DoubleRange.read(from:), memberNodeInfo: "DoubleRange", isFlattened: false)
        return value
    }
}

extension NeptuneClientTypes.DoubleRange {

    static func read(from reader: SmithyXML.Reader) throws -> NeptuneClientTypes.DoubleRange {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = NeptuneClientTypes.DoubleRange()
        value.from = try reader["From"].readIfPresent()
        value.to = try reader["To"].readIfPresent()
        return value
    }
}

extension NeptuneClientTypes.Range {

    static func read(from reader: SmithyXML.Reader) throws -> NeptuneClientTypes.Range {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = NeptuneClientTypes.Range()
        value.from = try reader["From"].readIfPresent()
        value.to = try reader["To"].readIfPresent()
        value.step = try reader["Step"].readIfPresent()
        return value
    }
}

extension NeptuneClientTypes.Tag {

    static func write(value: NeptuneClientTypes.Tag?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["Key"].write(value.key)
        try writer["Value"].write(value.value)
    }

    static func read(from reader: SmithyXML.Reader) throws -> NeptuneClientTypes.Tag {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = NeptuneClientTypes.Tag()
        value.key = try reader["Key"].readIfPresent()
        value.value = try reader["Value"].readIfPresent()
        return value
    }
}

extension NeptuneClientTypes.ServerlessV2ScalingConfiguration {

    static func write(value: NeptuneClientTypes.ServerlessV2ScalingConfiguration?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["MaxCapacity"].write(value.maxCapacity)
        try writer["MinCapacity"].write(value.minCapacity)
    }
}

extension NeptuneClientTypes.Filter {

    static func write(value: NeptuneClientTypes.Filter?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["Name"].write(value.name)
        try writer["Values"].writeList(value.values, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "Value", isFlattened: false)
    }
}

extension NeptuneClientTypes.CloudwatchLogsExportConfiguration {

    static func write(value: NeptuneClientTypes.CloudwatchLogsExportConfiguration?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["DisableLogTypes"].writeList(value.disableLogTypes, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["EnableLogTypes"].writeList(value.enableLogTypes, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

public enum NeptuneClientTypes {}
