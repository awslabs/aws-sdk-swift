//
// Copyright Amazon.com Inc. or its affiliates.
// All Rights Reserved.
//
// SPDX-License-Identifier: Apache-2.0
//

// Code generated by smithy-swift-codegen. DO NOT EDIT!

@_spi(SmithyReadWrite) import ClientRuntime
import class SmithyHTTPAPI.HTTPResponse
@_spi(SmithyReadWrite) import class SmithyJSON.Reader
@_spi(SmithyReadWrite) import class SmithyJSON.Writer
import enum ClientRuntime.ErrorFault
import enum SmithyReadWrite.ReaderError
import protocol AWSClientRuntime.AWSServiceError
import protocol ClientRuntime.HTTPError
import protocol ClientRuntime.ModeledError
@_spi(SmithyReadWrite) import protocol SmithyReadWrite.SmithyReader
@_spi(SmithyReadWrite) import protocol SmithyReadWrite.SmithyWriter
@_spi(SmithyReadWrite) import struct AWSClientRuntime.RestJSONError
@_spi(UnknownAWSHTTPServiceError) import struct AWSClientRuntime.UnknownAWSHTTPServiceError
@_spi(SmithyReadWrite) import struct SmithyReadWrite.WritingClosureBox


public struct DeleteAlternateContactOutput: Swift.Sendable {

    public init() { }
}

public struct DisableRegionOutput: Swift.Sendable {

    public init() { }
}

public struct EnableRegionOutput: Swift.Sendable {

    public init() { }
}

public struct PutAlternateContactOutput: Swift.Sendable {

    public init() { }
}

public struct PutContactInformationOutput: Swift.Sendable {

    public init() { }
}

/// The operation failed because the calling identity doesn't have the minimum required permissions.
public struct AccessDeniedException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// This member is required.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "AccessDeniedException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The request could not be processed because of a conflict in the current status of the resource. For example, this happens if you try to enable a Region that is currently being disabled (in a status of DISABLING).
public struct ConflictException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// This member is required.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ConflictException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The operation failed because of an error internal to Amazon Web Services. Try your operation again later.
public struct InternalServerException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// This member is required.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InternalServerException" }
    public static var fault: ClientRuntime.ErrorFault { .server }
    public static var isRetryable: Swift.Bool { true }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The operation failed because it specified a resource that can't be found.
public struct ResourceNotFoundException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// This member is required.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ResourceNotFoundException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The operation failed because it was called too frequently and exceeded a throttle limit.
public struct TooManyRequestsException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// This member is required.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "TooManyRequestsException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { true }
    public static var isThrottling: Swift.Bool { true }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension AccountClientTypes {

    /// The input failed to meet the constraints specified by the Amazon Web Services service in a specified field.
    public struct ValidationExceptionField: Swift.Sendable {
        /// A message about the validation exception.
        /// This member is required.
        public var message: Swift.String?
        /// The field name where the invalid entry was detected.
        /// This member is required.
        public var name: Swift.String?

        public init(
            message: Swift.String? = nil,
            name: Swift.String? = nil
        )
        {
            self.message = message
            self.name = name
        }
    }
}

extension AccountClientTypes.ValidationExceptionField: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ValidationExceptionField(name: \(Swift.String(describing: name)), message: \"CONTENT_REDACTED\")"}
}

extension AccountClientTypes {

    public enum ValidationExceptionReason: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case fieldValidationFailed
        case invalidRegionOptTarget
        case sdkUnknown(Swift.String)

        public static var allCases: [ValidationExceptionReason] {
            return [
                .fieldValidationFailed,
                .invalidRegionOptTarget
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .fieldValidationFailed: return "fieldValidationFailed"
            case .invalidRegionOptTarget: return "invalidRegionOptTarget"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

/// The operation failed because one of the input parameters was invalid.
public struct ValidationException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// The field where the invalid entry was detected.
        public internal(set) var fieldList: [AccountClientTypes.ValidationExceptionField]? = nil
        /// The message that informs you about what was invalid about the request.
        /// This member is required.
        public internal(set) var message: Swift.String? = nil
        /// The reason that validation failed.
        public internal(set) var reason: AccountClientTypes.ValidationExceptionReason? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ValidationException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        fieldList: [AccountClientTypes.ValidationExceptionField]? = nil,
        message: Swift.String? = nil,
        reason: AccountClientTypes.ValidationExceptionReason? = nil
    )
    {
        self.properties.fieldList = fieldList
        self.properties.message = message
        self.properties.reason = reason
    }
}

extension ValidationException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ValidationException(fieldList: \(Swift.String(describing: properties.fieldList)), reason: \(Swift.String(describing: properties.reason)), message: \"CONTENT_REDACTED\")"}
}

public struct AcceptPrimaryEmailUpdateInput: Swift.Sendable {
    /// Specifies the 12-digit account ID number of the Amazon Web Services account that you want to access or modify with this operation. To use this parameter, the caller must be an identity in the [organization's management account](https://docs.aws.amazon.com/organizations/latest/userguide/orgs_getting-started_concepts.html#account) or a delegated administrator account. The specified account ID must be a member account in the same organization. The organization must have [all features enabled](https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_org_support-all-features.html), and the organization must have [trusted access](https://docs.aws.amazon.com/organizations/latest/userguide/using-orgs-trusted-access.html) enabled for the Account Management service, and optionally a [delegated admin](https://docs.aws.amazon.com/organizations/latest/userguide/using-orgs-delegated-admin.html) account assigned. This operation can only be called from the management account or the delegated administrator account of an organization for a member account. The management account can't specify its own AccountId.
    /// This member is required.
    public var accountId: Swift.String?
    /// The OTP code sent to the PrimaryEmail specified on the StartPrimaryEmailUpdate API call.
    /// This member is required.
    public var otp: Swift.String?
    /// The new primary email address for use with the specified account. This must match the PrimaryEmail from the StartPrimaryEmailUpdate API call.
    /// This member is required.
    public var primaryEmail: Swift.String?

    public init(
        accountId: Swift.String? = nil,
        otp: Swift.String? = nil,
        primaryEmail: Swift.String? = nil
    )
    {
        self.accountId = accountId
        self.otp = otp
        self.primaryEmail = primaryEmail
    }
}

extension AcceptPrimaryEmailUpdateInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AcceptPrimaryEmailUpdateInput(accountId: \(Swift.String(describing: accountId)), otp: \"CONTENT_REDACTED\", primaryEmail: \"CONTENT_REDACTED\")"}
}

extension AccountClientTypes {

    public enum PrimaryEmailUpdateStatus: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case accepted
        case pending
        case sdkUnknown(Swift.String)

        public static var allCases: [PrimaryEmailUpdateStatus] {
            return [
                .accepted,
                .pending
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .accepted: return "ACCEPTED"
            case .pending: return "PENDING"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

public struct AcceptPrimaryEmailUpdateOutput: Swift.Sendable {
    /// Retrieves the status of the accepted primary email update request.
    public var status: AccountClientTypes.PrimaryEmailUpdateStatus?

    public init(
        status: AccountClientTypes.PrimaryEmailUpdateStatus? = nil
    )
    {
        self.status = status
    }
}

extension AccountClientTypes {

    public enum AlternateContactType: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case billing
        case operations
        case security
        case sdkUnknown(Swift.String)

        public static var allCases: [AlternateContactType] {
            return [
                .billing,
                .operations,
                .security
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .billing: return "BILLING"
            case .operations: return "OPERATIONS"
            case .security: return "SECURITY"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

public struct DeleteAlternateContactInput: Swift.Sendable {
    /// Specifies the 12 digit account ID number of the Amazon Web Services account that you want to access or modify with this operation. If you do not specify this parameter, it defaults to the Amazon Web Services account of the identity used to call the operation. To use this parameter, the caller must be an identity in the [organization's management account](https://docs.aws.amazon.com/organizations/latest/userguide/orgs_getting-started_concepts.html#account) or a delegated administrator account, and the specified account ID must be a member account in the same organization. The organization must have [all features enabled](https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_org_support-all-features.html), and the organization must have [trusted access](https://docs.aws.amazon.com/organizations/latest/userguide/using-orgs-trusted-access.html) enabled for the Account Management service, and optionally a [delegated admin](https://docs.aws.amazon.com/organizations/latest/userguide/using-orgs-delegated-admin.html) account assigned. The management account can't specify its own AccountId; it must call the operation in standalone context by not including the AccountId parameter. To call this operation on an account that is not a member of an organization, then don't specify this parameter, and call the operation using an identity belonging to the account whose contacts you wish to retrieve or modify.
    public var accountId: Swift.String?
    /// Specifies which of the alternate contacts to delete.
    /// This member is required.
    public var alternateContactType: AccountClientTypes.AlternateContactType?

    public init(
        accountId: Swift.String? = nil,
        alternateContactType: AccountClientTypes.AlternateContactType? = nil
    )
    {
        self.accountId = accountId
        self.alternateContactType = alternateContactType
    }
}

public struct GetAlternateContactInput: Swift.Sendable {
    /// Specifies the 12 digit account ID number of the Amazon Web Services account that you want to access or modify with this operation. If you do not specify this parameter, it defaults to the Amazon Web Services account of the identity used to call the operation. To use this parameter, the caller must be an identity in the [organization's management account](https://docs.aws.amazon.com/organizations/latest/userguide/orgs_getting-started_concepts.html#account) or a delegated administrator account, and the specified account ID must be a member account in the same organization. The organization must have [all features enabled](https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_org_support-all-features.html), and the organization must have [trusted access](https://docs.aws.amazon.com/organizations/latest/userguide/using-orgs-trusted-access.html) enabled for the Account Management service, and optionally a [delegated admin](https://docs.aws.amazon.com/organizations/latest/userguide/using-orgs-delegated-admin.html) account assigned. The management account can't specify its own AccountId; it must call the operation in standalone context by not including the AccountId parameter. To call this operation on an account that is not a member of an organization, then don't specify this parameter, and call the operation using an identity belonging to the account whose contacts you wish to retrieve or modify.
    public var accountId: Swift.String?
    /// Specifies which alternate contact you want to retrieve.
    /// This member is required.
    public var alternateContactType: AccountClientTypes.AlternateContactType?

    public init(
        accountId: Swift.String? = nil,
        alternateContactType: AccountClientTypes.AlternateContactType? = nil
    )
    {
        self.accountId = accountId
        self.alternateContactType = alternateContactType
    }
}

extension AccountClientTypes {

    /// A structure that contains the details of an alternate contact associated with an Amazon Web Services account
    public struct AlternateContact: Swift.Sendable {
        /// The type of alternate contact.
        public var alternateContactType: AccountClientTypes.AlternateContactType?
        /// The email address associated with this alternate contact.
        public var emailAddress: Swift.String?
        /// The name associated with this alternate contact.
        public var name: Swift.String?
        /// The phone number associated with this alternate contact.
        public var phoneNumber: Swift.String?
        /// The title associated with this alternate contact.
        public var title: Swift.String?

        public init(
            alternateContactType: AccountClientTypes.AlternateContactType? = nil,
            emailAddress: Swift.String? = nil,
            name: Swift.String? = nil,
            phoneNumber: Swift.String? = nil,
            title: Swift.String? = nil
        )
        {
            self.alternateContactType = alternateContactType
            self.emailAddress = emailAddress
            self.name = name
            self.phoneNumber = phoneNumber
            self.title = title
        }
    }
}

extension AccountClientTypes.AlternateContact: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AlternateContact(alternateContactType: \(Swift.String(describing: alternateContactType)), emailAddress: \"CONTENT_REDACTED\", name: \"CONTENT_REDACTED\", phoneNumber: \"CONTENT_REDACTED\", title: \"CONTENT_REDACTED\")"}
}

public struct GetAlternateContactOutput: Swift.Sendable {
    /// A structure that contains the details for the specified alternate contact.
    public var alternateContact: AccountClientTypes.AlternateContact?

    public init(
        alternateContact: AccountClientTypes.AlternateContact? = nil
    )
    {
        self.alternateContact = alternateContact
    }
}

public struct PutAlternateContactInput: Swift.Sendable {
    /// Specifies the 12 digit account ID number of the Amazon Web Services account that you want to access or modify with this operation. If you do not specify this parameter, it defaults to the Amazon Web Services account of the identity used to call the operation. To use this parameter, the caller must be an identity in the [organization's management account](https://docs.aws.amazon.com/organizations/latest/userguide/orgs_getting-started_concepts.html#account) or a delegated administrator account, and the specified account ID must be a member account in the same organization. The organization must have [all features enabled](https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_org_support-all-features.html), and the organization must have [trusted access](https://docs.aws.amazon.com/organizations/latest/userguide/using-orgs-trusted-access.html) enabled for the Account Management service, and optionally a [delegated admin](https://docs.aws.amazon.com/organizations/latest/userguide/using-orgs-delegated-admin.html) account assigned. The management account can't specify its own AccountId; it must call the operation in standalone context by not including the AccountId parameter. To call this operation on an account that is not a member of an organization, then don't specify this parameter, and call the operation using an identity belonging to the account whose contacts you wish to retrieve or modify.
    public var accountId: Swift.String?
    /// Specifies which alternate contact you want to create or update.
    /// This member is required.
    public var alternateContactType: AccountClientTypes.AlternateContactType?
    /// Specifies an email address for the alternate contact.
    /// This member is required.
    public var emailAddress: Swift.String?
    /// Specifies a name for the alternate contact.
    /// This member is required.
    public var name: Swift.String?
    /// Specifies a phone number for the alternate contact.
    /// This member is required.
    public var phoneNumber: Swift.String?
    /// Specifies a title for the alternate contact.
    /// This member is required.
    public var title: Swift.String?

    public init(
        accountId: Swift.String? = nil,
        alternateContactType: AccountClientTypes.AlternateContactType? = nil,
        emailAddress: Swift.String? = nil,
        name: Swift.String? = nil,
        phoneNumber: Swift.String? = nil,
        title: Swift.String? = nil
    )
    {
        self.accountId = accountId
        self.alternateContactType = alternateContactType
        self.emailAddress = emailAddress
        self.name = name
        self.phoneNumber = phoneNumber
        self.title = title
    }
}

extension PutAlternateContactInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "PutAlternateContactInput(accountId: \(Swift.String(describing: accountId)), alternateContactType: \(Swift.String(describing: alternateContactType)), emailAddress: \"CONTENT_REDACTED\", name: \"CONTENT_REDACTED\", phoneNumber: \"CONTENT_REDACTED\", title: \"CONTENT_REDACTED\")"}
}

public struct GetContactInformationInput: Swift.Sendable {
    /// Specifies the 12-digit account ID number of the Amazon Web Services account that you want to access or modify with this operation. If you don't specify this parameter, it defaults to the Amazon Web Services account of the identity used to call the operation. To use this parameter, the caller must be an identity in the [organization's management account](https://docs.aws.amazon.com/organizations/latest/userguide/orgs_getting-started_concepts.html#account) or a delegated administrator account. The specified account ID must be a member account in the same organization. The organization must have [all features enabled](https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_org_support-all-features.html), and the organization must have [trusted access](https://docs.aws.amazon.com/organizations/latest/userguide/using-orgs-trusted-access.html) enabled for the Account Management service, and optionally a [delegated admin](https://docs.aws.amazon.com/organizations/latest/userguide/using-orgs-delegated-admin.html) account assigned. The management account can't specify its own AccountId. It must call the operation in standalone context by not including the AccountId parameter. To call this operation on an account that is not a member of an organization, don't specify this parameter. Instead, call the operation using an identity belonging to the account whose contacts you wish to retrieve or modify.
    public var accountId: Swift.String?

    public init(
        accountId: Swift.String? = nil
    )
    {
        self.accountId = accountId
    }
}

extension AccountClientTypes {

    /// Contains the details of the primary contact information associated with an Amazon Web Services account.
    public struct ContactInformation: Swift.Sendable {
        /// The first line of the primary contact address.
        /// This member is required.
        public var addressLine1: Swift.String?
        /// The second line of the primary contact address, if any.
        public var addressLine2: Swift.String?
        /// The third line of the primary contact address, if any.
        public var addressLine3: Swift.String?
        /// The city of the primary contact address.
        /// This member is required.
        public var city: Swift.String?
        /// The name of the company associated with the primary contact information, if any.
        public var companyName: Swift.String?
        /// The ISO-3166 two-letter country code for the primary contact address.
        /// This member is required.
        public var countryCode: Swift.String?
        /// The district or county of the primary contact address, if any.
        public var districtOrCounty: Swift.String?
        /// The full name of the primary contact address.
        /// This member is required.
        public var fullName: Swift.String?
        /// The phone number of the primary contact information. The number will be validated and, in some countries, checked for activation.
        /// This member is required.
        public var phoneNumber: Swift.String?
        /// The postal code of the primary contact address.
        /// This member is required.
        public var postalCode: Swift.String?
        /// The state or region of the primary contact address. If the mailing address is within the United States (US), the value in this field can be either a two character state code (for example, NJ) or the full state name (for example, New Jersey). This field is required in the following countries: US, CA, GB, DE, JP, IN, and BR.
        public var stateOrRegion: Swift.String?
        /// The URL of the website associated with the primary contact information, if any.
        public var websiteUrl: Swift.String?

        public init(
            addressLine1: Swift.String? = nil,
            addressLine2: Swift.String? = nil,
            addressLine3: Swift.String? = nil,
            city: Swift.String? = nil,
            companyName: Swift.String? = nil,
            countryCode: Swift.String? = nil,
            districtOrCounty: Swift.String? = nil,
            fullName: Swift.String? = nil,
            phoneNumber: Swift.String? = nil,
            postalCode: Swift.String? = nil,
            stateOrRegion: Swift.String? = nil,
            websiteUrl: Swift.String? = nil
        )
        {
            self.addressLine1 = addressLine1
            self.addressLine2 = addressLine2
            self.addressLine3 = addressLine3
            self.city = city
            self.companyName = companyName
            self.countryCode = countryCode
            self.districtOrCounty = districtOrCounty
            self.fullName = fullName
            self.phoneNumber = phoneNumber
            self.postalCode = postalCode
            self.stateOrRegion = stateOrRegion
            self.websiteUrl = websiteUrl
        }
    }
}

extension AccountClientTypes.ContactInformation: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ContactInformation(addressLine1: \"CONTENT_REDACTED\", addressLine2: \"CONTENT_REDACTED\", addressLine3: \"CONTENT_REDACTED\", city: \"CONTENT_REDACTED\", companyName: \"CONTENT_REDACTED\", countryCode: \"CONTENT_REDACTED\", districtOrCounty: \"CONTENT_REDACTED\", fullName: \"CONTENT_REDACTED\", phoneNumber: \"CONTENT_REDACTED\", postalCode: \"CONTENT_REDACTED\", stateOrRegion: \"CONTENT_REDACTED\", websiteUrl: \"CONTENT_REDACTED\")"}
}

public struct GetContactInformationOutput: Swift.Sendable {
    /// Contains the details of the primary contact information associated with an Amazon Web Services account.
    public var contactInformation: AccountClientTypes.ContactInformation?

    public init(
        contactInformation: AccountClientTypes.ContactInformation? = nil
    )
    {
        self.contactInformation = contactInformation
    }
}

public struct PutContactInformationInput: Swift.Sendable {
    /// Specifies the 12-digit account ID number of the Amazon Web Services account that you want to access or modify with this operation. If you don't specify this parameter, it defaults to the Amazon Web Services account of the identity used to call the operation. To use this parameter, the caller must be an identity in the [organization's management account](https://docs.aws.amazon.com/organizations/latest/userguide/orgs_getting-started_concepts.html#account) or a delegated administrator account. The specified account ID must be a member account in the same organization. The organization must have [all features enabled](https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_org_support-all-features.html), and the organization must have [trusted access](https://docs.aws.amazon.com/organizations/latest/userguide/using-orgs-trusted-access.html) enabled for the Account Management service, and optionally a [delegated admin](https://docs.aws.amazon.com/organizations/latest/userguide/using-orgs-delegated-admin.html) account assigned. The management account can't specify its own AccountId. It must call the operation in standalone context by not including the AccountId parameter. To call this operation on an account that is not a member of an organization, don't specify this parameter. Instead, call the operation using an identity belonging to the account whose contacts you wish to retrieve or modify.
    public var accountId: Swift.String?
    /// Contains the details of the primary contact information associated with an Amazon Web Services account.
    /// This member is required.
    public var contactInformation: AccountClientTypes.ContactInformation?

    public init(
        accountId: Swift.String? = nil,
        contactInformation: AccountClientTypes.ContactInformation? = nil
    )
    {
        self.accountId = accountId
        self.contactInformation = contactInformation
    }
}

public struct GetPrimaryEmailInput: Swift.Sendable {
    /// Specifies the 12-digit account ID number of the Amazon Web Services account that you want to access or modify with this operation. To use this parameter, the caller must be an identity in the [organization's management account](https://docs.aws.amazon.com/organizations/latest/userguide/orgs_getting-started_concepts.html#account) or a delegated administrator account. The specified account ID must be a member account in the same organization. The organization must have [all features enabled](https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_org_support-all-features.html), and the organization must have [trusted access](https://docs.aws.amazon.com/organizations/latest/userguide/using-orgs-trusted-access.html) enabled for the Account Management service, and optionally a [delegated admin](https://docs.aws.amazon.com/organizations/latest/userguide/using-orgs-delegated-admin.html) account assigned. This operation can only be called from the management account or the delegated administrator account of an organization for a member account. The management account can't specify its own AccountId.
    /// This member is required.
    public var accountId: Swift.String?

    public init(
        accountId: Swift.String? = nil
    )
    {
        self.accountId = accountId
    }
}

public struct GetPrimaryEmailOutput: Swift.Sendable {
    /// Retrieves the primary email address associated with the specified account.
    public var primaryEmail: Swift.String?

    public init(
        primaryEmail: Swift.String? = nil
    )
    {
        self.primaryEmail = primaryEmail
    }
}

extension GetPrimaryEmailOutput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetPrimaryEmailOutput(primaryEmail: \"CONTENT_REDACTED\")"}
}

public struct StartPrimaryEmailUpdateInput: Swift.Sendable {
    /// Specifies the 12-digit account ID number of the Amazon Web Services account that you want to access or modify with this operation. To use this parameter, the caller must be an identity in the [organization's management account](https://docs.aws.amazon.com/organizations/latest/userguide/orgs_getting-started_concepts.html#account) or a delegated administrator account. The specified account ID must be a member account in the same organization. The organization must have [all features enabled](https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_org_support-all-features.html), and the organization must have [trusted access](https://docs.aws.amazon.com/organizations/latest/userguide/using-orgs-trusted-access.html) enabled for the Account Management service, and optionally a [delegated admin](https://docs.aws.amazon.com/organizations/latest/userguide/using-orgs-delegated-admin.html) account assigned. This operation can only be called from the management account or the delegated administrator account of an organization for a member account. The management account can't specify its own AccountId.
    /// This member is required.
    public var accountId: Swift.String?
    /// The new primary email address (also known as the root user email address) to use in the specified account.
    /// This member is required.
    public var primaryEmail: Swift.String?

    public init(
        accountId: Swift.String? = nil,
        primaryEmail: Swift.String? = nil
    )
    {
        self.accountId = accountId
        self.primaryEmail = primaryEmail
    }
}

extension StartPrimaryEmailUpdateInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "StartPrimaryEmailUpdateInput(accountId: \(Swift.String(describing: accountId)), primaryEmail: \"CONTENT_REDACTED\")"}
}

public struct StartPrimaryEmailUpdateOutput: Swift.Sendable {
    /// The status of the primary email update request.
    public var status: AccountClientTypes.PrimaryEmailUpdateStatus?

    public init(
        status: AccountClientTypes.PrimaryEmailUpdateStatus? = nil
    )
    {
        self.status = status
    }
}

public struct DisableRegionInput: Swift.Sendable {
    /// Specifies the 12-digit account ID number of the Amazon Web Services account that you want to access or modify with this operation. If you don't specify this parameter, it defaults to the Amazon Web Services account of the identity used to call the operation. To use this parameter, the caller must be an identity in the [organization's management account](https://docs.aws.amazon.com/organizations/latest/userguide/orgs_getting-started_concepts.html#account) or a delegated administrator account. The specified account ID must be a member account in the same organization. The organization must have [all features enabled](https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_org_support-all-features.html), and the organization must have [trusted access](https://docs.aws.amazon.com/organizations/latest/userguide/using-orgs-trusted-access.html) enabled for the Account Management service, and optionally a [delegated admin](https://docs.aws.amazon.com/organizations/latest/userguide/using-orgs-delegated-admin.html) account assigned. The management account can't specify its own AccountId. It must call the operation in standalone context by not including the AccountId parameter. To call this operation on an account that is not a member of an organization, don't specify this parameter. Instead, call the operation using an identity belonging to the account whose contacts you wish to retrieve or modify.
    public var accountId: Swift.String?
    /// Specifies the Region-code for a given Region name (for example, af-south-1). When you disable a Region, Amazon Web Services performs actions to deactivate that Region in your account, such as destroying IAM resources in the Region. This process takes a few minutes for most accounts, but this can take several hours. You cannot enable the Region until the disabling process is fully completed.
    /// This member is required.
    public var regionName: Swift.String?

    public init(
        accountId: Swift.String? = nil,
        regionName: Swift.String? = nil
    )
    {
        self.accountId = accountId
        self.regionName = regionName
    }
}

public struct EnableRegionInput: Swift.Sendable {
    /// Specifies the 12-digit account ID number of the Amazon Web Services account that you want to access or modify with this operation. If you don't specify this parameter, it defaults to the Amazon Web Services account of the identity used to call the operation. To use this parameter, the caller must be an identity in the [organization's management account](https://docs.aws.amazon.com/organizations/latest/userguide/orgs_getting-started_concepts.html#account) or a delegated administrator account. The specified account ID must be a member account in the same organization. The organization must have [all features enabled](https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_org_support-all-features.html), and the organization must have [trusted access](https://docs.aws.amazon.com/organizations/latest/userguide/using-orgs-trusted-access.html) enabled for the Account Management service, and optionally a [delegated admin](https://docs.aws.amazon.com/organizations/latest/userguide/using-orgs-delegated-admin.html) account assigned. The management account can't specify its own AccountId. It must call the operation in standalone context by not including the AccountId parameter. To call this operation on an account that is not a member of an organization, don't specify this parameter. Instead, call the operation using an identity belonging to the account whose contacts you wish to retrieve or modify.
    public var accountId: Swift.String?
    /// Specifies the Region-code for a given Region name (for example, af-south-1). When you enable a Region, Amazon Web Services performs actions to prepare your account in that Region, such as distributing your IAM resources to the Region. This process takes a few minutes for most accounts, but it can take several hours. You cannot use the Region until this process is complete. Furthermore, you cannot disable the Region until the enabling process is fully completed.
    /// This member is required.
    public var regionName: Swift.String?

    public init(
        accountId: Swift.String? = nil,
        regionName: Swift.String? = nil
    )
    {
        self.accountId = accountId
        self.regionName = regionName
    }
}

public struct GetRegionOptStatusInput: Swift.Sendable {
    /// Specifies the 12-digit account ID number of the Amazon Web Services account that you want to access or modify with this operation. If you don't specify this parameter, it defaults to the Amazon Web Services account of the identity used to call the operation. To use this parameter, the caller must be an identity in the [organization's management account](https://docs.aws.amazon.com/organizations/latest/userguide/orgs_getting-started_concepts.html#account) or a delegated administrator account. The specified account ID must be a member account in the same organization. The organization must have [all features enabled](https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_org_support-all-features.html), and the organization must have [trusted access](https://docs.aws.amazon.com/organizations/latest/userguide/using-orgs-trusted-access.html) enabled for the Account Management service, and optionally a [delegated admin](https://docs.aws.amazon.com/organizations/latest/userguide/using-orgs-delegated-admin.html) account assigned. The management account can't specify its own AccountId. It must call the operation in standalone context by not including the AccountId parameter. To call this operation on an account that is not a member of an organization, don't specify this parameter. Instead, call the operation using an identity belonging to the account whose contacts you wish to retrieve or modify.
    public var accountId: Swift.String?
    /// Specifies the Region-code for a given Region name (for example, af-south-1). This function will return the status of whatever Region you pass into this parameter.
    /// This member is required.
    public var regionName: Swift.String?

    public init(
        accountId: Swift.String? = nil,
        regionName: Swift.String? = nil
    )
    {
        self.accountId = accountId
        self.regionName = regionName
    }
}

extension AccountClientTypes {

    public enum RegionOptStatus: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case disabled
        case disabling
        case enabled
        case enabledByDefault
        case enabling
        case sdkUnknown(Swift.String)

        public static var allCases: [RegionOptStatus] {
            return [
                .disabled,
                .disabling,
                .enabled,
                .enabledByDefault,
                .enabling
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .disabled: return "DISABLED"
            case .disabling: return "DISABLING"
            case .enabled: return "ENABLED"
            case .enabledByDefault: return "ENABLED_BY_DEFAULT"
            case .enabling: return "ENABLING"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

public struct GetRegionOptStatusOutput: Swift.Sendable {
    /// The Region code that was passed in.
    public var regionName: Swift.String?
    /// One of the potential statuses a Region can undergo (Enabled, Enabling, Disabled, Disabling, Enabled_By_Default).
    public var regionOptStatus: AccountClientTypes.RegionOptStatus?

    public init(
        regionName: Swift.String? = nil,
        regionOptStatus: AccountClientTypes.RegionOptStatus? = nil
    )
    {
        self.regionName = regionName
        self.regionOptStatus = regionOptStatus
    }
}

public struct ListRegionsInput: Swift.Sendable {
    /// Specifies the 12-digit account ID number of the Amazon Web Services account that you want to access or modify with this operation. If you don't specify this parameter, it defaults to the Amazon Web Services account of the identity used to call the operation. To use this parameter, the caller must be an identity in the [organization's management account](https://docs.aws.amazon.com/organizations/latest/userguide/orgs_getting-started_concepts.html#account) or a delegated administrator account. The specified account ID must be a member account in the same organization. The organization must have [all features enabled](https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_org_support-all-features.html), and the organization must have [trusted access](https://docs.aws.amazon.com/organizations/latest/userguide/using-orgs-trusted-access.html) enabled for the Account Management service, and optionally a [delegated admin](https://docs.aws.amazon.com/organizations/latest/userguide/using-orgs-delegated-admin.html) account assigned. The management account can't specify its own AccountId. It must call the operation in standalone context by not including the AccountId parameter. To call this operation on an account that is not a member of an organization, don't specify this parameter. Instead, call the operation using an identity belonging to the account whose contacts you wish to retrieve or modify.
    public var accountId: Swift.String?
    /// The total number of items to return in the command’s output. If the total number of items available is more than the value specified, a NextToken is provided in the command’s output. To resume pagination, provide the NextToken value in the starting-token argument of a subsequent command. Do not use the NextToken response element directly outside of the Amazon Web Services CLI. For usage examples, see [Pagination](http://docs.aws.amazon.com/cli/latest/userguide/pagination.html) in the Amazon Web Services Command Line Interface User Guide.
    public var maxResults: Swift.Int?
    /// A token used to specify where to start paginating. This is the NextToken from a previously truncated response. For usage examples, see [Pagination](http://docs.aws.amazon.com/cli/latest/userguide/pagination.html) in the Amazon Web Services Command Line Interface User Guide.
    public var nextToken: Swift.String?
    /// A list of Region statuses (Enabling, Enabled, Disabling, Disabled, Enabled_by_default) to use to filter the list of Regions for a given account. For example, passing in a value of ENABLING will only return a list of Regions with a Region status of ENABLING.
    public var regionOptStatusContains: [AccountClientTypes.RegionOptStatus]?

    public init(
        accountId: Swift.String? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        regionOptStatusContains: [AccountClientTypes.RegionOptStatus]? = nil
    )
    {
        self.accountId = accountId
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.regionOptStatusContains = regionOptStatusContains
    }
}

extension AccountClientTypes {

    /// This is a structure that expresses the Region for a given account, consisting of a name and opt-in status.
    public struct Region: Swift.Sendable {
        /// The Region code of a given Region (for example, us-east-1).
        public var regionName: Swift.String?
        /// One of potential statuses a Region can undergo (Enabled, Enabling, Disabled, Disabling, Enabled_By_Default).
        public var regionOptStatus: AccountClientTypes.RegionOptStatus?

        public init(
            regionName: Swift.String? = nil,
            regionOptStatus: AccountClientTypes.RegionOptStatus? = nil
        )
        {
            self.regionName = regionName
            self.regionOptStatus = regionOptStatus
        }
    }
}

public struct ListRegionsOutput: Swift.Sendable {
    /// If there is more data to be returned, this will be populated. It should be passed into the next-token request parameter of list-regions.
    public var nextToken: Swift.String?
    /// This is a list of Regions for a given account, or if the filtered parameter was used, a list of Regions that match the filter criteria set in the filter parameter.
    public var regions: [AccountClientTypes.Region]?

    public init(
        nextToken: Swift.String? = nil,
        regions: [AccountClientTypes.Region]? = nil
    )
    {
        self.nextToken = nextToken
        self.regions = regions
    }
}

extension AcceptPrimaryEmailUpdateInput {

    static func urlPathProvider(_ value: AcceptPrimaryEmailUpdateInput) -> Swift.String? {
        return "/acceptPrimaryEmailUpdate"
    }
}

extension DeleteAlternateContactInput {

    static func urlPathProvider(_ value: DeleteAlternateContactInput) -> Swift.String? {
        return "/deleteAlternateContact"
    }
}

extension DisableRegionInput {

    static func urlPathProvider(_ value: DisableRegionInput) -> Swift.String? {
        return "/disableRegion"
    }
}

extension EnableRegionInput {

    static func urlPathProvider(_ value: EnableRegionInput) -> Swift.String? {
        return "/enableRegion"
    }
}

extension GetAlternateContactInput {

    static func urlPathProvider(_ value: GetAlternateContactInput) -> Swift.String? {
        return "/getAlternateContact"
    }
}

extension GetContactInformationInput {

    static func urlPathProvider(_ value: GetContactInformationInput) -> Swift.String? {
        return "/getContactInformation"
    }
}

extension GetPrimaryEmailInput {

    static func urlPathProvider(_ value: GetPrimaryEmailInput) -> Swift.String? {
        return "/getPrimaryEmail"
    }
}

extension GetRegionOptStatusInput {

    static func urlPathProvider(_ value: GetRegionOptStatusInput) -> Swift.String? {
        return "/getRegionOptStatus"
    }
}

extension ListRegionsInput {

    static func urlPathProvider(_ value: ListRegionsInput) -> Swift.String? {
        return "/listRegions"
    }
}

extension PutAlternateContactInput {

    static func urlPathProvider(_ value: PutAlternateContactInput) -> Swift.String? {
        return "/putAlternateContact"
    }
}

extension PutContactInformationInput {

    static func urlPathProvider(_ value: PutContactInformationInput) -> Swift.String? {
        return "/putContactInformation"
    }
}

extension StartPrimaryEmailUpdateInput {

    static func urlPathProvider(_ value: StartPrimaryEmailUpdateInput) -> Swift.String? {
        return "/startPrimaryEmailUpdate"
    }
}

extension AcceptPrimaryEmailUpdateInput {

    static func write(value: AcceptPrimaryEmailUpdateInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["AccountId"].write(value.accountId)
        try writer["Otp"].write(value.otp)
        try writer["PrimaryEmail"].write(value.primaryEmail)
    }
}

extension DeleteAlternateContactInput {

    static func write(value: DeleteAlternateContactInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["AccountId"].write(value.accountId)
        try writer["AlternateContactType"].write(value.alternateContactType)
    }
}

extension DisableRegionInput {

    static func write(value: DisableRegionInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["AccountId"].write(value.accountId)
        try writer["RegionName"].write(value.regionName)
    }
}

extension EnableRegionInput {

    static func write(value: EnableRegionInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["AccountId"].write(value.accountId)
        try writer["RegionName"].write(value.regionName)
    }
}

extension GetAlternateContactInput {

    static func write(value: GetAlternateContactInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["AccountId"].write(value.accountId)
        try writer["AlternateContactType"].write(value.alternateContactType)
    }
}

extension GetContactInformationInput {

    static func write(value: GetContactInformationInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["AccountId"].write(value.accountId)
    }
}

extension GetPrimaryEmailInput {

    static func write(value: GetPrimaryEmailInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["AccountId"].write(value.accountId)
    }
}

extension GetRegionOptStatusInput {

    static func write(value: GetRegionOptStatusInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["AccountId"].write(value.accountId)
        try writer["RegionName"].write(value.regionName)
    }
}

extension ListRegionsInput {

    static func write(value: ListRegionsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["AccountId"].write(value.accountId)
        try writer["MaxResults"].write(value.maxResults)
        try writer["NextToken"].write(value.nextToken)
        try writer["RegionOptStatusContains"].writeList(value.regionOptStatusContains, memberWritingClosure: SmithyReadWrite.WritingClosureBox<AccountClientTypes.RegionOptStatus>().write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension PutAlternateContactInput {

    static func write(value: PutAlternateContactInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["AccountId"].write(value.accountId)
        try writer["AlternateContactType"].write(value.alternateContactType)
        try writer["EmailAddress"].write(value.emailAddress)
        try writer["Name"].write(value.name)
        try writer["PhoneNumber"].write(value.phoneNumber)
        try writer["Title"].write(value.title)
    }
}

extension PutContactInformationInput {

    static func write(value: PutContactInformationInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["AccountId"].write(value.accountId)
        try writer["ContactInformation"].write(value.contactInformation, with: AccountClientTypes.ContactInformation.write(value:to:))
    }
}

extension StartPrimaryEmailUpdateInput {

    static func write(value: StartPrimaryEmailUpdateInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["AccountId"].write(value.accountId)
        try writer["PrimaryEmail"].write(value.primaryEmail)
    }
}

extension AcceptPrimaryEmailUpdateOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> AcceptPrimaryEmailUpdateOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = AcceptPrimaryEmailUpdateOutput()
        value.status = try reader["Status"].readIfPresent()
        return value
    }
}

extension DeleteAlternateContactOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteAlternateContactOutput {
        return DeleteAlternateContactOutput()
    }
}

extension DisableRegionOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DisableRegionOutput {
        return DisableRegionOutput()
    }
}

extension EnableRegionOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> EnableRegionOutput {
        return EnableRegionOutput()
    }
}

extension GetAlternateContactOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetAlternateContactOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetAlternateContactOutput()
        value.alternateContact = try reader["AlternateContact"].readIfPresent(with: AccountClientTypes.AlternateContact.read(from:))
        return value
    }
}

extension GetContactInformationOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetContactInformationOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetContactInformationOutput()
        value.contactInformation = try reader["ContactInformation"].readIfPresent(with: AccountClientTypes.ContactInformation.read(from:))
        return value
    }
}

extension GetPrimaryEmailOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetPrimaryEmailOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetPrimaryEmailOutput()
        value.primaryEmail = try reader["PrimaryEmail"].readIfPresent()
        return value
    }
}

extension GetRegionOptStatusOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetRegionOptStatusOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetRegionOptStatusOutput()
        value.regionName = try reader["RegionName"].readIfPresent()
        value.regionOptStatus = try reader["RegionOptStatus"].readIfPresent()
        return value
    }
}

extension ListRegionsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListRegionsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListRegionsOutput()
        value.nextToken = try reader["NextToken"].readIfPresent()
        value.regions = try reader["Regions"].readListIfPresent(memberReadingClosure: AccountClientTypes.Region.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension PutAlternateContactOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> PutAlternateContactOutput {
        return PutAlternateContactOutput()
    }
}

extension PutContactInformationOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> PutContactInformationOutput {
        return PutContactInformationOutput()
    }
}

extension StartPrimaryEmailUpdateOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> StartPrimaryEmailUpdateOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = StartPrimaryEmailUpdateOutput()
        value.status = try reader["Status"].readIfPresent()
        return value
    }
}

enum AcceptPrimaryEmailUpdateOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteAlternateContactOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DisableRegionOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum EnableRegionOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetAlternateContactOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetContactInformationOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetPrimaryEmailOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetRegionOptStatusOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListRegionsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum PutAlternateContactOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum PutContactInformationOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum StartPrimaryEmailUpdateOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

extension ValidationException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> ValidationException {
        let reader = baseError.errorBodyReader
        var value = ValidationException()
        value.properties.fieldList = try reader["fieldList"].readListIfPresent(memberReadingClosure: AccountClientTypes.ValidationExceptionField.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.properties.message = try reader["message"].readIfPresent() ?? ""
        value.properties.reason = try reader["reason"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ConflictException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> ConflictException {
        let reader = baseError.errorBodyReader
        var value = ConflictException()
        value.properties.message = try reader["message"].readIfPresent() ?? ""
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension InternalServerException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> InternalServerException {
        let reader = baseError.errorBodyReader
        var value = InternalServerException()
        value.properties.message = try reader["message"].readIfPresent() ?? ""
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension TooManyRequestsException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> TooManyRequestsException {
        let reader = baseError.errorBodyReader
        var value = TooManyRequestsException()
        value.properties.message = try reader["message"].readIfPresent() ?? ""
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ResourceNotFoundException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> ResourceNotFoundException {
        let reader = baseError.errorBodyReader
        var value = ResourceNotFoundException()
        value.properties.message = try reader["message"].readIfPresent() ?? ""
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension AccessDeniedException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> AccessDeniedException {
        let reader = baseError.errorBodyReader
        var value = AccessDeniedException()
        value.properties.message = try reader["message"].readIfPresent() ?? ""
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension AccountClientTypes.AlternateContact {

    static func read(from reader: SmithyJSON.Reader) throws -> AccountClientTypes.AlternateContact {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = AccountClientTypes.AlternateContact()
        value.name = try reader["Name"].readIfPresent()
        value.title = try reader["Title"].readIfPresent()
        value.emailAddress = try reader["EmailAddress"].readIfPresent()
        value.phoneNumber = try reader["PhoneNumber"].readIfPresent()
        value.alternateContactType = try reader["AlternateContactType"].readIfPresent()
        return value
    }
}

extension AccountClientTypes.ContactInformation {

    static func write(value: AccountClientTypes.ContactInformation?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["AddressLine1"].write(value.addressLine1)
        try writer["AddressLine2"].write(value.addressLine2)
        try writer["AddressLine3"].write(value.addressLine3)
        try writer["City"].write(value.city)
        try writer["CompanyName"].write(value.companyName)
        try writer["CountryCode"].write(value.countryCode)
        try writer["DistrictOrCounty"].write(value.districtOrCounty)
        try writer["FullName"].write(value.fullName)
        try writer["PhoneNumber"].write(value.phoneNumber)
        try writer["PostalCode"].write(value.postalCode)
        try writer["StateOrRegion"].write(value.stateOrRegion)
        try writer["WebsiteUrl"].write(value.websiteUrl)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> AccountClientTypes.ContactInformation {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = AccountClientTypes.ContactInformation()
        value.fullName = try reader["FullName"].readIfPresent() ?? ""
        value.addressLine1 = try reader["AddressLine1"].readIfPresent() ?? ""
        value.addressLine2 = try reader["AddressLine2"].readIfPresent()
        value.addressLine3 = try reader["AddressLine3"].readIfPresent()
        value.city = try reader["City"].readIfPresent() ?? ""
        value.stateOrRegion = try reader["StateOrRegion"].readIfPresent()
        value.districtOrCounty = try reader["DistrictOrCounty"].readIfPresent()
        value.postalCode = try reader["PostalCode"].readIfPresent() ?? ""
        value.countryCode = try reader["CountryCode"].readIfPresent() ?? ""
        value.phoneNumber = try reader["PhoneNumber"].readIfPresent() ?? ""
        value.companyName = try reader["CompanyName"].readIfPresent()
        value.websiteUrl = try reader["WebsiteUrl"].readIfPresent()
        return value
    }
}

extension AccountClientTypes.Region {

    static func read(from reader: SmithyJSON.Reader) throws -> AccountClientTypes.Region {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = AccountClientTypes.Region()
        value.regionName = try reader["RegionName"].readIfPresent()
        value.regionOptStatus = try reader["RegionOptStatus"].readIfPresent()
        return value
    }
}

extension AccountClientTypes.ValidationExceptionField {

    static func read(from reader: SmithyJSON.Reader) throws -> AccountClientTypes.ValidationExceptionField {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = AccountClientTypes.ValidationExceptionField()
        value.name = try reader["name"].readIfPresent() ?? ""
        value.message = try reader["message"].readIfPresent() ?? ""
        return value
    }
}

public enum AccountClientTypes {}
