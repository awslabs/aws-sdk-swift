// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

/// Welcome to the Amazon CodeCatalyst API reference. This reference provides descriptions of operations and data types for Amazon CodeCatalyst. You can use the Amazon CodeCatalyst API to work with the following objects. Spaces, by calling the following:
///
/// * [DeleteSpace], which deletes a space.
///
/// * [GetSpace], which returns information about a space.
///
/// * [GetSubscription], which returns information about the Amazon Web Services account used for billing purposes and the billing plan for the space.
///
/// * [ListSpaces], which retrieves a list of spaces.
///
/// * [UpdateSpace], which hanges one or more values for a space.
///
///
/// Projects, by calling the following:
///
/// * [CreateProject] which creates a project in a specified space.
///
/// * [GetProject], which returns information about a project.
///
/// * [ListProjects], which retrieves a list of projects in a space.
///
///
/// Users, by calling the following:
///
/// * [GetUserDetails], which returns information about a user in Amazon CodeCatalyst.
///
///
/// Source repositories, by calling the following:
///
/// * [CreateSourceRepository], which creates an empty Git-based source repository in a specified project.
///
/// * [CreateSourceRepositoryBranch], which creates a branch in a specified repository where you can work on code.
///
/// * [DeleteSourceRepository], which deletes a source repository.
///
/// * [GetSourceRepository], which returns information about a source repository.
///
/// * [GetSourceRepositoryCloneUrls], which returns information about the URLs that can be used with a Git client to clone a source repository.
///
/// * [ListSourceRepositories], which retrieves a list of source repositories in a project.
///
/// * [ListSourceRepositoryBranches], which retrieves a list of branches in a source repository.
///
///
/// Dev Environments and the Amazon Web Services Toolkits, by calling the following:
///
/// * [CreateDevEnvironment], which creates a Dev Environment, where you can quickly work on the code stored in the source repositories of your project.
///
/// * [DeleteDevEnvironment], which deletes a Dev Environment.
///
/// * [GetDevEnvironment], which returns information about a Dev Environment.
///
/// * [ListDevEnvironments], which retrieves a list of Dev Environments in a project.
///
/// * [ListDevEnvironmentSessions], which retrieves a list of active Dev Environment sessions in a project.
///
/// * [StartDevEnvironment], which starts a specified Dev Environment and puts it into an active state.
///
/// * [StartDevEnvironmentSession], which starts a session to a specified Dev Environment.
///
/// * [StopDevEnvironment], which stops a specified Dev Environment and puts it into an stopped state.
///
/// * [StopDevEnvironmentSession], which stops a session for a specified Dev Environment.
///
/// * [UpdateDevEnvironment], which changes one or more values for a Dev Environment.
///
///
/// Security, activity, and resource management in Amazon CodeCatalyst, by calling the following:
///
/// * [CreateAccessToken], which creates a personal access token (PAT) for the current user.
///
/// * [DeleteAccessToken], which deletes a specified personal access token (PAT).
///
/// * [ListAccessTokens], which lists all personal access tokens (PATs) associated with a user.
///
/// * [ListEventLogs], which retrieves a list of events that occurred during a specified time period in a space.
///
/// * [VerifySession], which verifies whether the calling user has a valid Amazon CodeCatalyst login and session.
///
///
/// If you are using the Amazon CodeCatalyst APIs with an SDK or the CLI, you must configure your computer to work with Amazon CodeCatalyst and single sign-on (SSO). For more information, see [Setting up to use the CLI with Amazon CodeCatalyst](https://docs.aws.amazon.com/codecatalyst/latest/userguide/set-up-cli.html) and the SSO documentation for your SDK.
public protocol CodeCatalystClientProtocol {
    /// Creates a personal access token (PAT) for the current user. A personal access token (PAT) is similar to a password. It is associated with your user identity for use across all spaces and projects in Amazon CodeCatalyst. You use PATs to access CodeCatalyst from resources that include integrated development environments (IDEs) and Git-based source repositories. PATs represent you in Amazon CodeCatalyst and you can manage them in your user settings.For more information, see [Managing personal access tokens in Amazon CodeCatalyst](https://docs.aws.amazon.com/codecatalyst/latest/userguide/ipa-tokens-keys.html).
    func createAccessToken(input: CreateAccessTokenInput) async throws -> CreateAccessTokenOutputResponse
    /// Creates a Dev Environment in Amazon CodeCatalyst, a cloud-based development environment that you can use to quickly work on the code stored in the source repositories of your project. When created in the Amazon CodeCatalyst console, by default a Dev Environment is configured to have a 2 core processor, 4GB of RAM, and 16GB of persistent storage. None of these defaults apply to a Dev Environment created programmatically.
    func createDevEnvironment(input: CreateDevEnvironmentInput) async throws -> CreateDevEnvironmentOutputResponse
    /// Creates a project in a specified space.
    func createProject(input: CreateProjectInput) async throws -> CreateProjectOutputResponse
    /// Creates an empty Git-based source repository in a specified project. The repository is created with an initial empty commit with a default branch named main.
    func createSourceRepository(input: CreateSourceRepositoryInput) async throws -> CreateSourceRepositoryOutputResponse
    /// Creates a branch in a specified source repository in Amazon CodeCatalyst. This API only creates a branch in a source repository hosted in Amazon CodeCatalyst. You cannot use this API to create a branch in a linked repository.
    func createSourceRepositoryBranch(input: CreateSourceRepositoryBranchInput) async throws -> CreateSourceRepositoryBranchOutputResponse
    /// Deletes a specified personal access token (PAT). A personal access token can only be deleted by the user who created it.
    func deleteAccessToken(input: DeleteAccessTokenInput) async throws -> DeleteAccessTokenOutputResponse
    /// Deletes a Dev Environment.
    func deleteDevEnvironment(input: DeleteDevEnvironmentInput) async throws -> DeleteDevEnvironmentOutputResponse
    /// Deletes a project in a space.
    func deleteProject(input: DeleteProjectInput) async throws -> DeleteProjectOutputResponse
    /// Deletes a source repository in Amazon CodeCatalyst. You cannot use this API to delete a linked repository. It can only be used to delete a Amazon CodeCatalyst source repository.
    func deleteSourceRepository(input: DeleteSourceRepositoryInput) async throws -> DeleteSourceRepositoryOutputResponse
    /// Deletes a space. Deleting a space cannot be undone. Additionally, since space names must be unique across Amazon CodeCatalyst, you cannot reuse names of deleted spaces.
    func deleteSpace(input: DeleteSpaceInput) async throws -> DeleteSpaceOutputResponse
    /// Returns information about a Dev Environment for a source repository in a project. Dev Environments are specific to the user who creates them.
    func getDevEnvironment(input: GetDevEnvironmentInput) async throws -> GetDevEnvironmentOutputResponse
    /// Returns information about a project.
    func getProject(input: GetProjectInput) async throws -> GetProjectOutputResponse
    /// Returns information about a source repository.
    func getSourceRepository(input: GetSourceRepositoryInput) async throws -> GetSourceRepositoryOutputResponse
    /// Returns information about the URLs that can be used with a Git client to clone a source repository.
    func getSourceRepositoryCloneUrls(input: GetSourceRepositoryCloneUrlsInput) async throws -> GetSourceRepositoryCloneUrlsOutputResponse
    /// Returns information about an space.
    func getSpace(input: GetSpaceInput) async throws -> GetSpaceOutputResponse
    /// Returns information about the Amazon Web Services account used for billing purposes and the billing plan for the space.
    func getSubscription(input: GetSubscriptionInput) async throws -> GetSubscriptionOutputResponse
    /// Returns information about a user.
    func getUserDetails(input: GetUserDetailsInput) async throws -> GetUserDetailsOutputResponse
    /// Lists all personal access tokens (PATs) associated with the user who calls the API. You can only list PATs associated with your Amazon Web Services Builder ID.
    func listAccessTokens(input: ListAccessTokensInput) async throws -> ListAccessTokensOutputResponse
    /// Retrieves a list of Dev Environments in a project.
    func listDevEnvironments(input: ListDevEnvironmentsInput) async throws -> ListDevEnvironmentsOutputResponse
    /// Retrieves a list of active sessions for a Dev Environment in a project.
    func listDevEnvironmentSessions(input: ListDevEnvironmentSessionsInput) async throws -> ListDevEnvironmentSessionsOutputResponse
    /// Retrieves a list of events that occurred during a specified time period in a space. You can use these events to audit user and system activity in a space.
    func listEventLogs(input: ListEventLogsInput) async throws -> ListEventLogsOutputResponse
    /// Retrieves a list of projects.
    func listProjects(input: ListProjectsInput) async throws -> ListProjectsOutputResponse
    /// Retrieves a list of source repositories in a project.
    func listSourceRepositories(input: ListSourceRepositoriesInput) async throws -> ListSourceRepositoriesOutputResponse
    /// Retrieves a list of branches in a specified source repository.
    func listSourceRepositoryBranches(input: ListSourceRepositoryBranchesInput) async throws -> ListSourceRepositoryBranchesOutputResponse
    /// Retrieves a list of spaces.
    func listSpaces(input: ListSpacesInput) async throws -> ListSpacesOutputResponse
    /// Starts a specified Dev Environment and puts it into an active state.
    func startDevEnvironment(input: StartDevEnvironmentInput) async throws -> StartDevEnvironmentOutputResponse
    /// Starts a session for a specified Dev Environment.
    func startDevEnvironmentSession(input: StartDevEnvironmentSessionInput) async throws -> StartDevEnvironmentSessionOutputResponse
    /// Pauses a specified Dev Environment and places it in a non-running state. Stopped Dev Environments do not consume compute minutes.
    func stopDevEnvironment(input: StopDevEnvironmentInput) async throws -> StopDevEnvironmentOutputResponse
    /// Stops a session for a specified Dev Environment.
    func stopDevEnvironmentSession(input: StopDevEnvironmentSessionInput) async throws -> StopDevEnvironmentSessionOutputResponse
    /// Changes one or more values for a Dev Environment. Updating certain values of the Dev Environment will cause a restart.
    func updateDevEnvironment(input: UpdateDevEnvironmentInput) async throws -> UpdateDevEnvironmentOutputResponse
    /// Changes one or more values for a project.
    func updateProject(input: UpdateProjectInput) async throws -> UpdateProjectOutputResponse
    /// Changes one or more values for a space.
    func updateSpace(input: UpdateSpaceInput) async throws -> UpdateSpaceOutputResponse
    /// Verifies whether the calling user has a valid Amazon CodeCatalyst login and session. If successful, this returns the ID of the user in Amazon CodeCatalyst.
    func verifySession(input: VerifySessionInput) async throws -> VerifySessionOutputResponse
}

public enum CodeCatalystClientTypes {}
