//
// Copyright Amazon.com Inc. or its affiliates.
// All Rights Reserved.
//
// SPDX-License-Identifier: Apache-2.0
//

// Code generated by smithy-swift-codegen. DO NOT EDIT!

@_spi(SmithyReadWrite) import ClientRuntime
import Foundation
import class SmithyHTTPAPI.HTTPResponse
@_spi(SmithyReadWrite) import class SmithyJSON.Reader
@_spi(SmithyReadWrite) import class SmithyJSON.Writer
import enum ClientRuntime.ErrorFault
import enum SmithyReadWrite.ReaderError
@_spi(SmithyReadWrite) import enum SmithyReadWrite.ReadingClosures
@_spi(SmithyReadWrite) import enum SmithyReadWrite.WritingClosures
@_spi(SmithyTimestamps) import enum SmithyTimestamps.TimestampFormat
import protocol AWSClientRuntime.AWSServiceError
import protocol ClientRuntime.HTTPError
import protocol ClientRuntime.ModeledError
@_spi(SmithyReadWrite) import protocol SmithyReadWrite.SmithyReader
@_spi(SmithyReadWrite) import protocol SmithyReadWrite.SmithyWriter
@_spi(SmithyReadWrite) import struct AWSClientRuntime.AWSJSONError
@_spi(UnknownAWSHTTPServiceError) import struct AWSClientRuntime.UnknownAWSHTTPServiceError


public struct ActivateEventSourceOutput: Swift.Sendable {

    public init() { }
}

public struct DeactivateEventSourceOutput: Swift.Sendable {

    public init() { }
}

public struct DeleteEventBusOutput: Swift.Sendable {

    public init() { }
}

public struct DeletePartnerEventSourceOutput: Swift.Sendable {

    public init() { }
}

public struct DeleteRuleOutput: Swift.Sendable {

    public init() { }
}

public struct DisableRuleOutput: Swift.Sendable {

    public init() { }
}

public struct EnableRuleOutput: Swift.Sendable {

    public init() { }
}

public struct PutPermissionOutput: Swift.Sendable {

    public init() { }
}

public struct RemovePermissionOutput: Swift.Sendable {

    public init() { }
}

/// There is concurrent modification on a rule, target, archive, or replay.
public struct ConcurrentModificationException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ConcurrentModificationException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// This exception occurs due to unexpected causes.
public struct InternalException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InternalException" }
    public static var fault: ClientRuntime.ErrorFault { .server }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The specified state is not a valid state for an event source.
public struct InvalidStateException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidStateException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The operation you are attempting is not available in this region.
public struct OperationDisabledException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "OperationDisabledException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// An entity that you specified does not exist.
public struct ResourceNotFoundException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ResourceNotFoundException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

public struct ActivateEventSourceInput: Swift.Sendable {
    /// The name of the partner event source to activate.
    /// This member is required.
    public var name: Swift.String?

    public init(
        name: Swift.String? = nil
    )
    {
        self.name = name
    }
}

extension EventBridgeClientTypes {

    public enum ApiDestinationState: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case active
        case inactive
        case sdkUnknown(Swift.String)

        public static var allCases: [ApiDestinationState] {
            return [
                .active,
                .inactive
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .active: return "ACTIVE"
            case .inactive: return "INACTIVE"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension EventBridgeClientTypes {

    public enum ApiDestinationHttpMethod: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case delete
        case `get`
        case head
        case options
        case patch
        case post
        case put
        case sdkUnknown(Swift.String)

        public static var allCases: [ApiDestinationHttpMethod] {
            return [
                .delete,
                .get,
                .head,
                .options,
                .patch,
                .post,
                .put
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .delete: return "DELETE"
            case .get: return "GET"
            case .head: return "HEAD"
            case .options: return "OPTIONS"
            case .patch: return "PATCH"
            case .post: return "POST"
            case .put: return "PUT"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension EventBridgeClientTypes {

    /// Contains details about an API destination.
    public struct ApiDestination: Swift.Sendable {
        /// The ARN of the API destination.
        public var apiDestinationArn: Swift.String?
        /// The state of the API destination.
        public var apiDestinationState: EventBridgeClientTypes.ApiDestinationState?
        /// The ARN of the connection specified for the API destination.
        public var connectionArn: Swift.String?
        /// A time stamp for the time that the API destination was created.
        public var creationTime: Foundation.Date?
        /// The method to use to connect to the HTTP endpoint.
        public var httpMethod: EventBridgeClientTypes.ApiDestinationHttpMethod?
        /// The URL to the endpoint for the API destination.
        public var invocationEndpoint: Swift.String?
        /// The maximum number of invocations per second to send to the HTTP endpoint.
        public var invocationRateLimitPerSecond: Swift.Int?
        /// A time stamp for the time that the API destination was last modified.
        public var lastModifiedTime: Foundation.Date?
        /// The name of the API destination.
        public var name: Swift.String?

        public init(
            apiDestinationArn: Swift.String? = nil,
            apiDestinationState: EventBridgeClientTypes.ApiDestinationState? = nil,
            connectionArn: Swift.String? = nil,
            creationTime: Foundation.Date? = nil,
            httpMethod: EventBridgeClientTypes.ApiDestinationHttpMethod? = nil,
            invocationEndpoint: Swift.String? = nil,
            invocationRateLimitPerSecond: Swift.Int? = nil,
            lastModifiedTime: Foundation.Date? = nil,
            name: Swift.String? = nil
        )
        {
            self.apiDestinationArn = apiDestinationArn
            self.apiDestinationState = apiDestinationState
            self.connectionArn = connectionArn
            self.creationTime = creationTime
            self.httpMethod = httpMethod
            self.invocationEndpoint = invocationEndpoint
            self.invocationRateLimitPerSecond = invocationRateLimitPerSecond
            self.lastModifiedTime = lastModifiedTime
            self.name = name
        }
    }
}

extension EventBridgeClientTypes {

    /// Contains the GraphQL operation to be parsed and executed, if the event target is an AppSync API.
    public struct AppSyncParameters: Swift.Sendable {
        /// The GraphQL operation; that is, the query, mutation, or subscription to be parsed and executed by the GraphQL service. For more information, see [Operations](https://docs.aws.amazon.com/appsync/latest/devguide/graphql-architecture.html#graphql-operations) in the AppSync User Guide.
        public var graphQLOperation: Swift.String?

        public init(
            graphQLOperation: Swift.String? = nil
        )
        {
            self.graphQLOperation = graphQLOperation
        }
    }
}

extension EventBridgeClientTypes.AppSyncParameters: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AppSyncParameters(graphQLOperation: \"CONTENT_REDACTED\")"}
}

extension EventBridgeClientTypes {

    public enum ArchiveState: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case createFailed
        case creating
        case disabled
        case enabled
        case updateFailed
        case updating
        case sdkUnknown(Swift.String)

        public static var allCases: [ArchiveState] {
            return [
                .createFailed,
                .creating,
                .disabled,
                .enabled,
                .updateFailed,
                .updating
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .createFailed: return "CREATE_FAILED"
            case .creating: return "CREATING"
            case .disabled: return "DISABLED"
            case .enabled: return "ENABLED"
            case .updateFailed: return "UPDATE_FAILED"
            case .updating: return "UPDATING"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension EventBridgeClientTypes {

    /// An Archive object that contains details about an archive.
    public struct Archive: Swift.Sendable {
        /// The name of the archive.
        public var archiveName: Swift.String?
        /// The time stamp for the time that the archive was created.
        public var creationTime: Foundation.Date?
        /// The number of events in the archive.
        public var eventCount: Swift.Int
        /// The ARN of the event bus associated with the archive. Only events from this event bus are sent to the archive.
        public var eventSourceArn: Swift.String?
        /// The number of days to retain events in the archive before they are deleted.
        public var retentionDays: Swift.Int?
        /// The size of the archive, in bytes.
        public var sizeBytes: Swift.Int
        /// The current state of the archive.
        public var state: EventBridgeClientTypes.ArchiveState?
        /// A description for the reason that the archive is in the current state.
        public var stateReason: Swift.String?

        public init(
            archiveName: Swift.String? = nil,
            creationTime: Foundation.Date? = nil,
            eventCount: Swift.Int = 0,
            eventSourceArn: Swift.String? = nil,
            retentionDays: Swift.Int? = nil,
            sizeBytes: Swift.Int = 0,
            state: EventBridgeClientTypes.ArchiveState? = nil,
            stateReason: Swift.String? = nil
        )
        {
            self.archiveName = archiveName
            self.creationTime = creationTime
            self.eventCount = eventCount
            self.eventSourceArn = eventSourceArn
            self.retentionDays = retentionDays
            self.sizeBytes = sizeBytes
            self.state = state
            self.stateReason = stateReason
        }
    }
}

extension EventBridgeClientTypes {

    public enum AssignPublicIp: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case disabled
        case enabled
        case sdkUnknown(Swift.String)

        public static var allCases: [AssignPublicIp] {
            return [
                .disabled,
                .enabled
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .disabled: return "DISABLED"
            case .enabled: return "ENABLED"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

/// An error occurred because a replay can be canceled only when the state is Running or Starting.
public struct IllegalStatusException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "IllegalStatusException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

public struct CancelReplayInput: Swift.Sendable {
    /// The name of the replay to cancel.
    /// This member is required.
    public var replayName: Swift.String?

    public init(
        replayName: Swift.String? = nil
    )
    {
        self.replayName = replayName
    }
}

extension EventBridgeClientTypes {

    public enum ReplayState: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case cancelled
        case cancelling
        case completed
        case failed
        case running
        case starting
        case sdkUnknown(Swift.String)

        public static var allCases: [ReplayState] {
            return [
                .cancelled,
                .cancelling,
                .completed,
                .failed,
                .running,
                .starting
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .cancelled: return "CANCELLED"
            case .cancelling: return "CANCELLING"
            case .completed: return "COMPLETED"
            case .failed: return "FAILED"
            case .running: return "RUNNING"
            case .starting: return "STARTING"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

public struct CancelReplayOutput: Swift.Sendable {
    /// The ARN of the replay to cancel.
    public var replayArn: Swift.String?
    /// The current state of the replay.
    public var state: EventBridgeClientTypes.ReplayState?
    /// The reason that the replay is in the current state.
    public var stateReason: Swift.String?

    public init(
        replayArn: Swift.String? = nil,
        state: EventBridgeClientTypes.ReplayState? = nil,
        stateReason: Swift.String? = nil
    )
    {
        self.replayArn = replayArn
        self.state = state
        self.stateReason = stateReason
    }
}

/// The request failed because it attempted to create resource beyond the allowed service quota.
public struct LimitExceededException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "LimitExceededException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The resource you are trying to create already exists.
public struct ResourceAlreadyExistsException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ResourceAlreadyExistsException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

public struct CreateApiDestinationInput: Swift.Sendable {
    /// The ARN of the connection to use for the API destination. The destination endpoint must support the authorization type specified for the connection.
    /// This member is required.
    public var connectionArn: Swift.String?
    /// A description for the API destination to create.
    public var description: Swift.String?
    /// The method to use for the request to the HTTP invocation endpoint.
    /// This member is required.
    public var httpMethod: EventBridgeClientTypes.ApiDestinationHttpMethod?
    /// The URL to the HTTP invocation endpoint for the API destination.
    /// This member is required.
    public var invocationEndpoint: Swift.String?
    /// The maximum number of requests per second to send to the HTTP invocation endpoint.
    public var invocationRateLimitPerSecond: Swift.Int?
    /// The name for the API destination to create.
    /// This member is required.
    public var name: Swift.String?

    public init(
        connectionArn: Swift.String? = nil,
        description: Swift.String? = nil,
        httpMethod: EventBridgeClientTypes.ApiDestinationHttpMethod? = nil,
        invocationEndpoint: Swift.String? = nil,
        invocationRateLimitPerSecond: Swift.Int? = nil,
        name: Swift.String? = nil
    )
    {
        self.connectionArn = connectionArn
        self.description = description
        self.httpMethod = httpMethod
        self.invocationEndpoint = invocationEndpoint
        self.invocationRateLimitPerSecond = invocationRateLimitPerSecond
        self.name = name
    }
}

public struct CreateApiDestinationOutput: Swift.Sendable {
    /// The ARN of the API destination that was created by the request.
    public var apiDestinationArn: Swift.String?
    /// The state of the API destination that was created by the request.
    public var apiDestinationState: EventBridgeClientTypes.ApiDestinationState?
    /// A time stamp indicating the time that the API destination was created.
    public var creationTime: Foundation.Date?
    /// A time stamp indicating the time that the API destination was last modified.
    public var lastModifiedTime: Foundation.Date?

    public init(
        apiDestinationArn: Swift.String? = nil,
        apiDestinationState: EventBridgeClientTypes.ApiDestinationState? = nil,
        creationTime: Foundation.Date? = nil,
        lastModifiedTime: Foundation.Date? = nil
    )
    {
        self.apiDestinationArn = apiDestinationArn
        self.apiDestinationState = apiDestinationState
        self.creationTime = creationTime
        self.lastModifiedTime = lastModifiedTime
    }
}

/// The event pattern is not valid.
public struct InvalidEventPatternException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidEventPatternException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

public struct CreateArchiveInput: Swift.Sendable {
    /// The name for the archive to create.
    /// This member is required.
    public var archiveName: Swift.String?
    /// A description for the archive.
    public var description: Swift.String?
    /// An event pattern to use to filter events sent to the archive.
    public var eventPattern: Swift.String?
    /// The ARN of the event bus that sends events to the archive.
    /// This member is required.
    public var eventSourceArn: Swift.String?
    /// The number of days to retain events for. Default value is 0. If set to 0, events are retained indefinitely
    public var retentionDays: Swift.Int?

    public init(
        archiveName: Swift.String? = nil,
        description: Swift.String? = nil,
        eventPattern: Swift.String? = nil,
        eventSourceArn: Swift.String? = nil,
        retentionDays: Swift.Int? = nil
    )
    {
        self.archiveName = archiveName
        self.description = description
        self.eventPattern = eventPattern
        self.eventSourceArn = eventSourceArn
        self.retentionDays = retentionDays
    }
}

public struct CreateArchiveOutput: Swift.Sendable {
    /// The ARN of the archive that was created.
    public var archiveArn: Swift.String?
    /// The time at which the archive was created.
    public var creationTime: Foundation.Date?
    /// The state of the archive that was created.
    public var state: EventBridgeClientTypes.ArchiveState?
    /// The reason that the archive is in the state.
    public var stateReason: Swift.String?

    public init(
        archiveArn: Swift.String? = nil,
        creationTime: Foundation.Date? = nil,
        state: EventBridgeClientTypes.ArchiveState? = nil,
        stateReason: Swift.String? = nil
    )
    {
        self.archiveArn = archiveArn
        self.creationTime = creationTime
        self.state = state
        self.stateReason = stateReason
    }
}

extension EventBridgeClientTypes {

    public enum ConnectionAuthorizationType: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case apiKey
        case basic
        case oauthClientCredentials
        case sdkUnknown(Swift.String)

        public static var allCases: [ConnectionAuthorizationType] {
            return [
                .apiKey,
                .basic,
                .oauthClientCredentials
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .apiKey: return "API_KEY"
            case .basic: return "BASIC"
            case .oauthClientCredentials: return "OAUTH_CLIENT_CREDENTIALS"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension EventBridgeClientTypes {

    /// Contains the API key authorization parameters for the connection.
    public struct CreateConnectionApiKeyAuthRequestParameters: Swift.Sendable {
        /// The name of the API key to use for authorization.
        /// This member is required.
        public var apiKeyName: Swift.String?
        /// The value for the API key to use for authorization.
        /// This member is required.
        public var apiKeyValue: Swift.String?

        public init(
            apiKeyName: Swift.String? = nil,
            apiKeyValue: Swift.String? = nil
        )
        {
            self.apiKeyName = apiKeyName
            self.apiKeyValue = apiKeyValue
        }
    }
}

extension EventBridgeClientTypes.CreateConnectionApiKeyAuthRequestParameters: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateConnectionApiKeyAuthRequestParameters(apiKeyName: \(Swift.String(describing: apiKeyName)), apiKeyValue: \"CONTENT_REDACTED\")"}
}

extension EventBridgeClientTypes {

    /// Contains the Basic authorization parameters to use for the connection.
    public struct CreateConnectionBasicAuthRequestParameters: Swift.Sendable {
        /// The password associated with the user name to use for Basic authorization.
        /// This member is required.
        public var password: Swift.String?
        /// The user name to use for Basic authorization.
        /// This member is required.
        public var username: Swift.String?

        public init(
            password: Swift.String? = nil,
            username: Swift.String? = nil
        )
        {
            self.password = password
            self.username = username
        }
    }
}

extension EventBridgeClientTypes.CreateConnectionBasicAuthRequestParameters: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateConnectionBasicAuthRequestParameters(username: \(Swift.String(describing: username)), password: \"CONTENT_REDACTED\")"}
}

extension EventBridgeClientTypes {

    /// Additional parameter included in the body. You can include up to 100 additional body parameters per request. An event payload cannot exceed 64 KB.
    public struct ConnectionBodyParameter: Swift.Sendable {
        /// Specified whether the value is secret.
        public var isValueSecret: Swift.Bool
        /// The key for the parameter.
        public var key: Swift.String?
        /// The value associated with the key.
        public var value: Swift.String?

        public init(
            isValueSecret: Swift.Bool = false,
            key: Swift.String? = nil,
            value: Swift.String? = nil
        )
        {
            self.isValueSecret = isValueSecret
            self.key = key
            self.value = value
        }
    }
}

extension EventBridgeClientTypes.ConnectionBodyParameter: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ConnectionBodyParameter(isValueSecret: \(Swift.String(describing: isValueSecret)), key: \(Swift.String(describing: key)), value: \"CONTENT_REDACTED\")"}
}

extension EventBridgeClientTypes {

    /// Additional parameter included in the header. You can include up to 100 additional header parameters per request. An event payload cannot exceed 64 KB.
    public struct ConnectionHeaderParameter: Swift.Sendable {
        /// Specified whether the value is a secret.
        public var isValueSecret: Swift.Bool
        /// The key for the parameter.
        public var key: Swift.String?
        /// The value associated with the key.
        public var value: Swift.String?

        public init(
            isValueSecret: Swift.Bool = false,
            key: Swift.String? = nil,
            value: Swift.String? = nil
        )
        {
            self.isValueSecret = isValueSecret
            self.key = key
            self.value = value
        }
    }
}

extension EventBridgeClientTypes.ConnectionHeaderParameter: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ConnectionHeaderParameter(isValueSecret: \(Swift.String(describing: isValueSecret)), key: \(Swift.String(describing: key)), value: \"CONTENT_REDACTED\")"}
}

extension EventBridgeClientTypes {

    /// Additional query string parameter for the connection. You can include up to 100 additional query string parameters per request. Each additional parameter counts towards the event payload size, which cannot exceed 64 KB.
    public struct ConnectionQueryStringParameter: Swift.Sendable {
        /// Specifies whether the value is secret.
        public var isValueSecret: Swift.Bool
        /// The key for a query string parameter.
        public var key: Swift.String?
        /// The value associated with the key for the query string parameter.
        public var value: Swift.String?

        public init(
            isValueSecret: Swift.Bool = false,
            key: Swift.String? = nil,
            value: Swift.String? = nil
        )
        {
            self.isValueSecret = isValueSecret
            self.key = key
            self.value = value
        }
    }
}

extension EventBridgeClientTypes.ConnectionQueryStringParameter: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ConnectionQueryStringParameter(isValueSecret: \(Swift.String(describing: isValueSecret)), key: \(Swift.String(describing: key)), value: \"CONTENT_REDACTED\")"}
}

extension EventBridgeClientTypes {

    /// Contains additional parameters for the connection.
    public struct ConnectionHttpParameters: Swift.Sendable {
        /// Contains additional body string parameters for the connection.
        public var bodyParameters: [EventBridgeClientTypes.ConnectionBodyParameter]?
        /// Contains additional header parameters for the connection.
        public var headerParameters: [EventBridgeClientTypes.ConnectionHeaderParameter]?
        /// Contains additional query string parameters for the connection.
        public var queryStringParameters: [EventBridgeClientTypes.ConnectionQueryStringParameter]?

        public init(
            bodyParameters: [EventBridgeClientTypes.ConnectionBodyParameter]? = nil,
            headerParameters: [EventBridgeClientTypes.ConnectionHeaderParameter]? = nil,
            queryStringParameters: [EventBridgeClientTypes.ConnectionQueryStringParameter]? = nil
        )
        {
            self.bodyParameters = bodyParameters
            self.headerParameters = headerParameters
            self.queryStringParameters = queryStringParameters
        }
    }
}

extension EventBridgeClientTypes {

    /// Contains the Basic authorization parameters to use for the connection.
    public struct CreateConnectionOAuthClientRequestParameters: Swift.Sendable {
        /// The client ID to use for OAuth authorization for the connection.
        /// This member is required.
        public var clientID: Swift.String?
        /// The client secret associated with the client ID to use for OAuth authorization for the connection.
        /// This member is required.
        public var clientSecret: Swift.String?

        public init(
            clientID: Swift.String? = nil,
            clientSecret: Swift.String? = nil
        )
        {
            self.clientID = clientID
            self.clientSecret = clientSecret
        }
    }
}

extension EventBridgeClientTypes.CreateConnectionOAuthClientRequestParameters: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateConnectionOAuthClientRequestParameters(clientID: \(Swift.String(describing: clientID)), clientSecret: \"CONTENT_REDACTED\")"}
}

extension EventBridgeClientTypes {

    public enum ConnectionOAuthHttpMethod: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case `get`
        case post
        case put
        case sdkUnknown(Swift.String)

        public static var allCases: [ConnectionOAuthHttpMethod] {
            return [
                .get,
                .post,
                .put
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .get: return "GET"
            case .post: return "POST"
            case .put: return "PUT"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension EventBridgeClientTypes {

    /// Contains the OAuth authorization parameters to use for the connection.
    public struct CreateConnectionOAuthRequestParameters: Swift.Sendable {
        /// The URL to the authorization endpoint when OAuth is specified as the authorization type.
        /// This member is required.
        public var authorizationEndpoint: Swift.String?
        /// A CreateConnectionOAuthClientRequestParameters object that contains the client parameters for OAuth authorization.
        /// This member is required.
        public var clientParameters: EventBridgeClientTypes.CreateConnectionOAuthClientRequestParameters?
        /// The method to use for the authorization request.
        /// This member is required.
        public var httpMethod: EventBridgeClientTypes.ConnectionOAuthHttpMethod?
        /// A ConnectionHttpParameters object that contains details about the additional parameters to use for the connection.
        public var oAuthHttpParameters: EventBridgeClientTypes.ConnectionHttpParameters?

        public init(
            authorizationEndpoint: Swift.String? = nil,
            clientParameters: EventBridgeClientTypes.CreateConnectionOAuthClientRequestParameters? = nil,
            httpMethod: EventBridgeClientTypes.ConnectionOAuthHttpMethod? = nil,
            oAuthHttpParameters: EventBridgeClientTypes.ConnectionHttpParameters? = nil
        )
        {
            self.authorizationEndpoint = authorizationEndpoint
            self.clientParameters = clientParameters
            self.httpMethod = httpMethod
            self.oAuthHttpParameters = oAuthHttpParameters
        }
    }
}

extension EventBridgeClientTypes {

    /// Contains the authorization parameters for the connection.
    public struct CreateConnectionAuthRequestParameters: Swift.Sendable {
        /// A CreateConnectionApiKeyAuthRequestParameters object that contains the API key authorization parameters to use for the connection.
        public var apiKeyAuthParameters: EventBridgeClientTypes.CreateConnectionApiKeyAuthRequestParameters?
        /// A CreateConnectionBasicAuthRequestParameters object that contains the Basic authorization parameters to use for the connection.
        public var basicAuthParameters: EventBridgeClientTypes.CreateConnectionBasicAuthRequestParameters?
        /// A ConnectionHttpParameters object that contains the API key authorization parameters to use for the connection. Note that if you include additional parameters for the target of a rule via HttpParameters, including query strings, the parameters added for the connection take precedence.
        public var invocationHttpParameters: EventBridgeClientTypes.ConnectionHttpParameters?
        /// A CreateConnectionOAuthRequestParameters object that contains the OAuth authorization parameters to use for the connection.
        public var oAuthParameters: EventBridgeClientTypes.CreateConnectionOAuthRequestParameters?

        public init(
            apiKeyAuthParameters: EventBridgeClientTypes.CreateConnectionApiKeyAuthRequestParameters? = nil,
            basicAuthParameters: EventBridgeClientTypes.CreateConnectionBasicAuthRequestParameters? = nil,
            invocationHttpParameters: EventBridgeClientTypes.ConnectionHttpParameters? = nil,
            oAuthParameters: EventBridgeClientTypes.CreateConnectionOAuthRequestParameters? = nil
        )
        {
            self.apiKeyAuthParameters = apiKeyAuthParameters
            self.basicAuthParameters = basicAuthParameters
            self.invocationHttpParameters = invocationHttpParameters
            self.oAuthParameters = oAuthParameters
        }
    }
}

public struct CreateConnectionInput: Swift.Sendable {
    /// A CreateConnectionAuthRequestParameters object that contains the authorization parameters to use to authorize with the endpoint.
    /// This member is required.
    public var authParameters: EventBridgeClientTypes.CreateConnectionAuthRequestParameters?
    /// The type of authorization to use for the connection. OAUTH tokens are refreshed when a 401 or 407 response is returned.
    /// This member is required.
    public var authorizationType: EventBridgeClientTypes.ConnectionAuthorizationType?
    /// A description for the connection to create.
    public var description: Swift.String?
    /// The name for the connection to create.
    /// This member is required.
    public var name: Swift.String?

    public init(
        authParameters: EventBridgeClientTypes.CreateConnectionAuthRequestParameters? = nil,
        authorizationType: EventBridgeClientTypes.ConnectionAuthorizationType? = nil,
        description: Swift.String? = nil,
        name: Swift.String? = nil
    )
    {
        self.authParameters = authParameters
        self.authorizationType = authorizationType
        self.description = description
        self.name = name
    }
}

extension EventBridgeClientTypes {

    public enum ConnectionState: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case authorized
        case authorizing
        case creating
        case deauthorized
        case deauthorizing
        case deleting
        case updating
        case sdkUnknown(Swift.String)

        public static var allCases: [ConnectionState] {
            return [
                .authorized,
                .authorizing,
                .creating,
                .deauthorized,
                .deauthorizing,
                .deleting,
                .updating
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .authorized: return "AUTHORIZED"
            case .authorizing: return "AUTHORIZING"
            case .creating: return "CREATING"
            case .deauthorized: return "DEAUTHORIZED"
            case .deauthorizing: return "DEAUTHORIZING"
            case .deleting: return "DELETING"
            case .updating: return "UPDATING"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

public struct CreateConnectionOutput: Swift.Sendable {
    /// The ARN of the connection that was created by the request.
    public var connectionArn: Swift.String?
    /// The state of the connection that was created by the request.
    public var connectionState: EventBridgeClientTypes.ConnectionState?
    /// A time stamp for the time that the connection was created.
    public var creationTime: Foundation.Date?
    /// A time stamp for the time that the connection was last updated.
    public var lastModifiedTime: Foundation.Date?

    public init(
        connectionArn: Swift.String? = nil,
        connectionState: EventBridgeClientTypes.ConnectionState? = nil,
        creationTime: Foundation.Date? = nil,
        lastModifiedTime: Foundation.Date? = nil
    )
    {
        self.connectionArn = connectionArn
        self.connectionState = connectionState
        self.creationTime = creationTime
        self.lastModifiedTime = lastModifiedTime
    }
}

extension EventBridgeClientTypes {

    /// The event buses the endpoint is associated with.
    public struct EndpointEventBus: Swift.Sendable {
        /// The ARN of the event bus the endpoint is associated with.
        /// This member is required.
        public var eventBusArn: Swift.String?

        public init(
            eventBusArn: Swift.String? = nil
        )
        {
            self.eventBusArn = eventBusArn
        }
    }
}

extension EventBridgeClientTypes {

    public enum ReplicationState: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case disabled
        case enabled
        case sdkUnknown(Swift.String)

        public static var allCases: [ReplicationState] {
            return [
                .disabled,
                .enabled
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .disabled: return "DISABLED"
            case .enabled: return "ENABLED"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension EventBridgeClientTypes {

    /// Endpoints can replicate all events to the secondary Region.
    public struct ReplicationConfig: Swift.Sendable {
        /// The state of event replication.
        public var state: EventBridgeClientTypes.ReplicationState?

        public init(
            state: EventBridgeClientTypes.ReplicationState? = nil
        )
        {
            self.state = state
        }
    }
}

extension EventBridgeClientTypes {

    /// The primary Region of the endpoint.
    public struct Primary: Swift.Sendable {
        /// The ARN of the health check used by the endpoint to determine whether failover is triggered.
        /// This member is required.
        public var healthCheck: Swift.String?

        public init(
            healthCheck: Swift.String? = nil
        )
        {
            self.healthCheck = healthCheck
        }
    }
}

extension EventBridgeClientTypes {

    /// The secondary Region that processes events when failover is triggered or replication is enabled.
    public struct Secondary: Swift.Sendable {
        /// Defines the secondary Region.
        /// This member is required.
        public var route: Swift.String?

        public init(
            route: Swift.String? = nil
        )
        {
            self.route = route
        }
    }
}

extension EventBridgeClientTypes {

    /// The failover configuration for an endpoint. This includes what triggers failover and what happens when it's triggered.
    public struct FailoverConfig: Swift.Sendable {
        /// The main Region of the endpoint.
        /// This member is required.
        public var primary: EventBridgeClientTypes.Primary?
        /// The Region that events are routed to when failover is triggered or event replication is enabled.
        /// This member is required.
        public var secondary: EventBridgeClientTypes.Secondary?

        public init(
            primary: EventBridgeClientTypes.Primary? = nil,
            secondary: EventBridgeClientTypes.Secondary? = nil
        )
        {
            self.primary = primary
            self.secondary = secondary
        }
    }
}

extension EventBridgeClientTypes {

    /// The routing configuration of the endpoint.
    public struct RoutingConfig: Swift.Sendable {
        /// The failover configuration for an endpoint. This includes what triggers failover and what happens when it's triggered.
        /// This member is required.
        public var failoverConfig: EventBridgeClientTypes.FailoverConfig?

        public init(
            failoverConfig: EventBridgeClientTypes.FailoverConfig? = nil
        )
        {
            self.failoverConfig = failoverConfig
        }
    }
}

public struct CreateEndpointInput: Swift.Sendable {
    /// A description of the global endpoint.
    public var description: Swift.String?
    /// Define the event buses used. The names of the event buses must be identical in each Region.
    /// This member is required.
    public var eventBuses: [EventBridgeClientTypes.EndpointEventBus]?
    /// The name of the global endpoint. For example, "Name":"us-east-2-custom_bus_A-endpoint".
    /// This member is required.
    public var name: Swift.String?
    /// Enable or disable event replication. The default state is ENABLED which means you must supply a RoleArn. If you don't have a RoleArn or you don't want event replication enabled, set the state to DISABLED.
    public var replicationConfig: EventBridgeClientTypes.ReplicationConfig?
    /// The ARN of the role used for replication.
    public var roleArn: Swift.String?
    /// Configure the routing policy, including the health check and secondary Region..
    /// This member is required.
    public var routingConfig: EventBridgeClientTypes.RoutingConfig?

    public init(
        description: Swift.String? = nil,
        eventBuses: [EventBridgeClientTypes.EndpointEventBus]? = nil,
        name: Swift.String? = nil,
        replicationConfig: EventBridgeClientTypes.ReplicationConfig? = nil,
        roleArn: Swift.String? = nil,
        routingConfig: EventBridgeClientTypes.RoutingConfig? = nil
    )
    {
        self.description = description
        self.eventBuses = eventBuses
        self.name = name
        self.replicationConfig = replicationConfig
        self.roleArn = roleArn
        self.routingConfig = routingConfig
    }
}

extension EventBridgeClientTypes {

    public enum EndpointState: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case active
        case createFailed
        case creating
        case deleteFailed
        case deleting
        case updateFailed
        case updating
        case sdkUnknown(Swift.String)

        public static var allCases: [EndpointState] {
            return [
                .active,
                .createFailed,
                .creating,
                .deleteFailed,
                .deleting,
                .updateFailed,
                .updating
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .active: return "ACTIVE"
            case .createFailed: return "CREATE_FAILED"
            case .creating: return "CREATING"
            case .deleteFailed: return "DELETE_FAILED"
            case .deleting: return "DELETING"
            case .updateFailed: return "UPDATE_FAILED"
            case .updating: return "UPDATING"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

public struct CreateEndpointOutput: Swift.Sendable {
    /// The ARN of the endpoint that was created by this request.
    public var arn: Swift.String?
    /// The event buses used by this request.
    public var eventBuses: [EventBridgeClientTypes.EndpointEventBus]?
    /// The name of the endpoint that was created by this request.
    public var name: Swift.String?
    /// Whether event replication was enabled or disabled by this request.
    public var replicationConfig: EventBridgeClientTypes.ReplicationConfig?
    /// The ARN of the role used by event replication for this request.
    public var roleArn: Swift.String?
    /// The routing configuration defined by this request.
    public var routingConfig: EventBridgeClientTypes.RoutingConfig?
    /// The state of the endpoint that was created by this request.
    public var state: EventBridgeClientTypes.EndpointState?

    public init(
        arn: Swift.String? = nil,
        eventBuses: [EventBridgeClientTypes.EndpointEventBus]? = nil,
        name: Swift.String? = nil,
        replicationConfig: EventBridgeClientTypes.ReplicationConfig? = nil,
        roleArn: Swift.String? = nil,
        routingConfig: EventBridgeClientTypes.RoutingConfig? = nil,
        state: EventBridgeClientTypes.EndpointState? = nil
    )
    {
        self.arn = arn
        self.eventBuses = eventBuses
        self.name = name
        self.replicationConfig = replicationConfig
        self.roleArn = roleArn
        self.routingConfig = routingConfig
        self.state = state
    }
}

extension EventBridgeClientTypes {

    /// Configuration details of the Amazon SQS queue for EventBridge to use as a dead-letter queue (DLQ). For more information, see [Event retry policy and using dead-letter queues] in the EventBridge User Guide.
    public struct DeadLetterConfig: Swift.Sendable {
        /// The ARN of the SQS queue specified as the target for the dead-letter queue.
        public var arn: Swift.String?

        public init(
            arn: Swift.String? = nil
        )
        {
            self.arn = arn
        }
    }
}

extension EventBridgeClientTypes {

    /// A key-value pair associated with an Amazon Web Services resource. In EventBridge, rules and event buses support tagging.
    public struct Tag: Swift.Sendable {
        /// A string you can use to assign a value. The combination of tag keys and values can help you organize and categorize your resources.
        /// This member is required.
        public var key: Swift.String?
        /// The value for the specified tag key.
        /// This member is required.
        public var value: Swift.String?

        public init(
            key: Swift.String? = nil,
            value: Swift.String? = nil
        )
        {
            self.key = key
            self.value = value
        }
    }
}

public struct CreateEventBusInput: Swift.Sendable {
    /// Configuration details of the Amazon SQS queue for EventBridge to use as a dead-letter queue (DLQ). For more information, see [Event retry policy and using dead-letter queues] in the EventBridge User Guide.
    public var deadLetterConfig: EventBridgeClientTypes.DeadLetterConfig?
    /// The event bus description.
    public var description: Swift.String?
    /// If you are creating a partner event bus, this specifies the partner event source that the new event bus will be matched with.
    public var eventSourceName: Swift.String?
    /// The identifier of the KMS customer managed key for EventBridge to use, if you choose to use a customer managed key to encrypt events on this event bus. The identifier can be the key Amazon Resource Name (ARN), KeyId, key alias, or key alias ARN. If you do not specify a customer managed key identifier, EventBridge uses an Amazon Web Services owned key to encrypt events on the event bus. For more information, see [Managing keys](https://docs.aws.amazon.com/kms/latest/developerguide/getting-started.html) in the Key Management Service Developer Guide. Archives and schema discovery are not supported for event buses encrypted using a customer managed key. EventBridge returns an error if:
    ///
    /// * You call [CreateArchive](https://docs.aws.amazon.com/eventbridge/latest/APIReference/API_CreateArchive.html) on an event bus set to use a customer managed key for encryption.
    ///
    /// * You call [CreateDiscoverer](https://docs.aws.amazon.com/eventbridge/latest/schema-reference/v1-discoverers.html#CreateDiscoverer) on an event bus set to use a customer managed key for encryption.
    ///
    /// * You call [UpdatedEventBus](https://docs.aws.amazon.com/eventbridge/latest/APIReference/API_UpdatedEventBus.html) to set a customer managed key on an event bus with an archives or schema discovery enabled.
    ///
    ///
    /// To enable archives or schema discovery on an event bus, choose to use an Amazon Web Services owned key. For more information, see [Data encryption in EventBridge](https://docs.aws.amazon.com/eventbridge/latest/userguide/eb-encryption.html) in the Amazon EventBridge User Guide.
    public var kmsKeyIdentifier: Swift.String?
    /// The name of the new event bus. Custom event bus names can't contain the / character, but you can use the / character in partner event bus names. In addition, for partner event buses, the name must exactly match the name of the partner event source that this event bus is matched to. You can't use the name default for a custom event bus, as this name is already used for your account's default event bus.
    /// This member is required.
    public var name: Swift.String?
    /// Tags to associate with the event bus.
    public var tags: [EventBridgeClientTypes.Tag]?

    public init(
        deadLetterConfig: EventBridgeClientTypes.DeadLetterConfig? = nil,
        description: Swift.String? = nil,
        eventSourceName: Swift.String? = nil,
        kmsKeyIdentifier: Swift.String? = nil,
        name: Swift.String? = nil,
        tags: [EventBridgeClientTypes.Tag]? = nil
    )
    {
        self.deadLetterConfig = deadLetterConfig
        self.description = description
        self.eventSourceName = eventSourceName
        self.kmsKeyIdentifier = kmsKeyIdentifier
        self.name = name
        self.tags = tags
    }
}

public struct CreateEventBusOutput: Swift.Sendable {
    /// Configuration details of the Amazon SQS queue for EventBridge to use as a dead-letter queue (DLQ). For more information, see [Event retry policy and using dead-letter queues] in the EventBridge User Guide.
    public var deadLetterConfig: EventBridgeClientTypes.DeadLetterConfig?
    /// The event bus description.
    public var description: Swift.String?
    /// The ARN of the new event bus.
    public var eventBusArn: Swift.String?
    /// The identifier of the KMS customer managed key for EventBridge to use to encrypt events on this event bus, if one has been specified. For more information, see [Data encryption in EventBridge](https://docs.aws.amazon.com/eventbridge/latest/userguide/eb-encryption.html) in the Amazon EventBridge User Guide.
    public var kmsKeyIdentifier: Swift.String?

    public init(
        deadLetterConfig: EventBridgeClientTypes.DeadLetterConfig? = nil,
        description: Swift.String? = nil,
        eventBusArn: Swift.String? = nil,
        kmsKeyIdentifier: Swift.String? = nil
    )
    {
        self.deadLetterConfig = deadLetterConfig
        self.description = description
        self.eventBusArn = eventBusArn
        self.kmsKeyIdentifier = kmsKeyIdentifier
    }
}

public struct CreatePartnerEventSourceInput: Swift.Sendable {
    /// The Amazon Web Services account ID that is permitted to create a matching partner event bus for this partner event source.
    /// This member is required.
    public var account: Swift.String?
    /// The name of the partner event source. This name must be unique and must be in the format  partner_name/event_namespace/event_name . The Amazon Web Services account that wants to use this partner event source must create a partner event bus with a name that matches the name of the partner event source.
    /// This member is required.
    public var name: Swift.String?

    public init(
        account: Swift.String? = nil,
        name: Swift.String? = nil
    )
    {
        self.account = account
        self.name = name
    }
}

public struct CreatePartnerEventSourceOutput: Swift.Sendable {
    /// The ARN of the partner event source.
    public var eventSourceArn: Swift.String?

    public init(
        eventSourceArn: Swift.String? = nil
    )
    {
        self.eventSourceArn = eventSourceArn
    }
}

public struct DeactivateEventSourceInput: Swift.Sendable {
    /// The name of the partner event source to deactivate.
    /// This member is required.
    public var name: Swift.String?

    public init(
        name: Swift.String? = nil
    )
    {
        self.name = name
    }
}

public struct DeauthorizeConnectionInput: Swift.Sendable {
    /// The name of the connection to remove authorization from.
    /// This member is required.
    public var name: Swift.String?

    public init(
        name: Swift.String? = nil
    )
    {
        self.name = name
    }
}

public struct DeauthorizeConnectionOutput: Swift.Sendable {
    /// The ARN of the connection that authorization was removed from.
    public var connectionArn: Swift.String?
    /// The state of the connection.
    public var connectionState: EventBridgeClientTypes.ConnectionState?
    /// A time stamp for the time that the connection was created.
    public var creationTime: Foundation.Date?
    /// A time stamp for the time that the connection was last authorized.
    public var lastAuthorizedTime: Foundation.Date?
    /// A time stamp for the time that the connection was last updated.
    public var lastModifiedTime: Foundation.Date?

    public init(
        connectionArn: Swift.String? = nil,
        connectionState: EventBridgeClientTypes.ConnectionState? = nil,
        creationTime: Foundation.Date? = nil,
        lastAuthorizedTime: Foundation.Date? = nil,
        lastModifiedTime: Foundation.Date? = nil
    )
    {
        self.connectionArn = connectionArn
        self.connectionState = connectionState
        self.creationTime = creationTime
        self.lastAuthorizedTime = lastAuthorizedTime
        self.lastModifiedTime = lastModifiedTime
    }
}

public struct DeleteApiDestinationInput: Swift.Sendable {
    /// The name of the destination to delete.
    /// This member is required.
    public var name: Swift.String?

    public init(
        name: Swift.String? = nil
    )
    {
        self.name = name
    }
}

public struct DeleteApiDestinationOutput: Swift.Sendable {

    public init() { }
}

public struct DeleteArchiveInput: Swift.Sendable {
    /// The name of the archive to delete.
    /// This member is required.
    public var archiveName: Swift.String?

    public init(
        archiveName: Swift.String? = nil
    )
    {
        self.archiveName = archiveName
    }
}

public struct DeleteArchiveOutput: Swift.Sendable {

    public init() { }
}

public struct DeleteConnectionInput: Swift.Sendable {
    /// The name of the connection to delete.
    /// This member is required.
    public var name: Swift.String?

    public init(
        name: Swift.String? = nil
    )
    {
        self.name = name
    }
}

public struct DeleteConnectionOutput: Swift.Sendable {
    /// The ARN of the connection that was deleted.
    public var connectionArn: Swift.String?
    /// The state of the connection before it was deleted.
    public var connectionState: EventBridgeClientTypes.ConnectionState?
    /// A time stamp for the time that the connection was created.
    public var creationTime: Foundation.Date?
    /// A time stamp for the time that the connection was last authorized before it wa deleted.
    public var lastAuthorizedTime: Foundation.Date?
    /// A time stamp for the time that the connection was last modified before it was deleted.
    public var lastModifiedTime: Foundation.Date?

    public init(
        connectionArn: Swift.String? = nil,
        connectionState: EventBridgeClientTypes.ConnectionState? = nil,
        creationTime: Foundation.Date? = nil,
        lastAuthorizedTime: Foundation.Date? = nil,
        lastModifiedTime: Foundation.Date? = nil
    )
    {
        self.connectionArn = connectionArn
        self.connectionState = connectionState
        self.creationTime = creationTime
        self.lastAuthorizedTime = lastAuthorizedTime
        self.lastModifiedTime = lastModifiedTime
    }
}

public struct DeleteEndpointInput: Swift.Sendable {
    /// The name of the endpoint you want to delete. For example, "Name":"us-east-2-custom_bus_A-endpoint"..
    /// This member is required.
    public var name: Swift.String?

    public init(
        name: Swift.String? = nil
    )
    {
        self.name = name
    }
}

public struct DeleteEndpointOutput: Swift.Sendable {

    public init() { }
}

public struct DeleteEventBusInput: Swift.Sendable {
    /// The name of the event bus to delete.
    /// This member is required.
    public var name: Swift.String?

    public init(
        name: Swift.String? = nil
    )
    {
        self.name = name
    }
}

public struct DeletePartnerEventSourceInput: Swift.Sendable {
    /// The Amazon Web Services account ID of the Amazon Web Services customer that the event source was created for.
    /// This member is required.
    public var account: Swift.String?
    /// The name of the event source to delete.
    /// This member is required.
    public var name: Swift.String?

    public init(
        account: Swift.String? = nil,
        name: Swift.String? = nil
    )
    {
        self.account = account
        self.name = name
    }
}

/// This rule was created by an Amazon Web Services service on behalf of your account. It is managed by that service. If you see this error in response to DeleteRule or RemoveTargets, you can use the Force parameter in those calls to delete the rule or remove targets from the rule. You cannot modify these managed rules by using DisableRule, EnableRule, PutTargets, PutRule, TagResource, or UntagResource.
public struct ManagedRuleException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ManagedRuleException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

public struct DeleteRuleInput: Swift.Sendable {
    /// The name or ARN of the event bus associated with the rule. If you omit this, the default event bus is used.
    public var eventBusName: Swift.String?
    /// If this is a managed rule, created by an Amazon Web Services service on your behalf, you must specify Force as True to delete the rule. This parameter is ignored for rules that are not managed rules. You can check whether a rule is a managed rule by using DescribeRule or ListRules and checking the ManagedBy field of the response.
    public var force: Swift.Bool?
    /// The name of the rule.
    /// This member is required.
    public var name: Swift.String?

    public init(
        eventBusName: Swift.String? = nil,
        force: Swift.Bool? = false,
        name: Swift.String? = nil
    )
    {
        self.eventBusName = eventBusName
        self.force = force
        self.name = name
    }
}

public struct DescribeApiDestinationInput: Swift.Sendable {
    /// The name of the API destination to retrieve.
    /// This member is required.
    public var name: Swift.String?

    public init(
        name: Swift.String? = nil
    )
    {
        self.name = name
    }
}

public struct DescribeApiDestinationOutput: Swift.Sendable {
    /// The ARN of the API destination retrieved.
    public var apiDestinationArn: Swift.String?
    /// The state of the API destination retrieved.
    public var apiDestinationState: EventBridgeClientTypes.ApiDestinationState?
    /// The ARN of the connection specified for the API destination retrieved.
    public var connectionArn: Swift.String?
    /// A time stamp for the time that the API destination was created.
    public var creationTime: Foundation.Date?
    /// The description for the API destination retrieved.
    public var description: Swift.String?
    /// The method to use to connect to the HTTP endpoint.
    public var httpMethod: EventBridgeClientTypes.ApiDestinationHttpMethod?
    /// The URL to use to connect to the HTTP endpoint.
    public var invocationEndpoint: Swift.String?
    /// The maximum number of invocations per second to specified for the API destination. Note that if you set the invocation rate maximum to a value lower the rate necessary to send all events received on to the destination HTTP endpoint, some events may not be delivered within the 24-hour retry window. If you plan to set the rate lower than the rate necessary to deliver all events, consider using a dead-letter queue to catch events that are not delivered within 24 hours.
    public var invocationRateLimitPerSecond: Swift.Int?
    /// A time stamp for the time that the API destination was last modified.
    public var lastModifiedTime: Foundation.Date?
    /// The name of the API destination retrieved.
    public var name: Swift.String?

    public init(
        apiDestinationArn: Swift.String? = nil,
        apiDestinationState: EventBridgeClientTypes.ApiDestinationState? = nil,
        connectionArn: Swift.String? = nil,
        creationTime: Foundation.Date? = nil,
        description: Swift.String? = nil,
        httpMethod: EventBridgeClientTypes.ApiDestinationHttpMethod? = nil,
        invocationEndpoint: Swift.String? = nil,
        invocationRateLimitPerSecond: Swift.Int? = nil,
        lastModifiedTime: Foundation.Date? = nil,
        name: Swift.String? = nil
    )
    {
        self.apiDestinationArn = apiDestinationArn
        self.apiDestinationState = apiDestinationState
        self.connectionArn = connectionArn
        self.creationTime = creationTime
        self.description = description
        self.httpMethod = httpMethod
        self.invocationEndpoint = invocationEndpoint
        self.invocationRateLimitPerSecond = invocationRateLimitPerSecond
        self.lastModifiedTime = lastModifiedTime
        self.name = name
    }
}

public struct DescribeArchiveInput: Swift.Sendable {
    /// The name of the archive to retrieve.
    /// This member is required.
    public var archiveName: Swift.String?

    public init(
        archiveName: Swift.String? = nil
    )
    {
        self.archiveName = archiveName
    }
}

public struct DescribeArchiveOutput: Swift.Sendable {
    /// The ARN of the archive.
    public var archiveArn: Swift.String?
    /// The name of the archive.
    public var archiveName: Swift.String?
    /// The time at which the archive was created.
    public var creationTime: Foundation.Date?
    /// The description of the archive.
    public var description: Swift.String?
    /// The number of events in the archive.
    public var eventCount: Swift.Int
    /// The event pattern used to filter events sent to the archive.
    public var eventPattern: Swift.String?
    /// The ARN of the event source associated with the archive.
    public var eventSourceArn: Swift.String?
    /// The number of days to retain events for in the archive.
    public var retentionDays: Swift.Int?
    /// The size of the archive in bytes.
    public var sizeBytes: Swift.Int
    /// The state of the archive.
    public var state: EventBridgeClientTypes.ArchiveState?
    /// The reason that the archive is in the state.
    public var stateReason: Swift.String?

    public init(
        archiveArn: Swift.String? = nil,
        archiveName: Swift.String? = nil,
        creationTime: Foundation.Date? = nil,
        description: Swift.String? = nil,
        eventCount: Swift.Int = 0,
        eventPattern: Swift.String? = nil,
        eventSourceArn: Swift.String? = nil,
        retentionDays: Swift.Int? = nil,
        sizeBytes: Swift.Int = 0,
        state: EventBridgeClientTypes.ArchiveState? = nil,
        stateReason: Swift.String? = nil
    )
    {
        self.archiveArn = archiveArn
        self.archiveName = archiveName
        self.creationTime = creationTime
        self.description = description
        self.eventCount = eventCount
        self.eventPattern = eventPattern
        self.eventSourceArn = eventSourceArn
        self.retentionDays = retentionDays
        self.sizeBytes = sizeBytes
        self.state = state
        self.stateReason = stateReason
    }
}

public struct DescribeConnectionInput: Swift.Sendable {
    /// The name of the connection to retrieve.
    /// This member is required.
    public var name: Swift.String?

    public init(
        name: Swift.String? = nil
    )
    {
        self.name = name
    }
}

extension EventBridgeClientTypes {

    /// Contains the authorization parameters for the connection if API Key is specified as the authorization type.
    public struct ConnectionApiKeyAuthResponseParameters: Swift.Sendable {
        /// The name of the header to use for the APIKeyValue used for authorization.
        public var apiKeyName: Swift.String?

        public init(
            apiKeyName: Swift.String? = nil
        )
        {
            self.apiKeyName = apiKeyName
        }
    }
}

extension EventBridgeClientTypes {

    /// Contains the authorization parameters for the connection if Basic is specified as the authorization type.
    public struct ConnectionBasicAuthResponseParameters: Swift.Sendable {
        /// The user name to use for Basic authorization.
        public var username: Swift.String?

        public init(
            username: Swift.String? = nil
        )
        {
            self.username = username
        }
    }
}

extension EventBridgeClientTypes {

    /// Contains the client response parameters for the connection when OAuth is specified as the authorization type.
    public struct ConnectionOAuthClientResponseParameters: Swift.Sendable {
        /// The client ID associated with the response to the connection request.
        public var clientID: Swift.String?

        public init(
            clientID: Swift.String? = nil
        )
        {
            self.clientID = clientID
        }
    }
}

extension EventBridgeClientTypes {

    /// Contains the response parameters when OAuth is specified as the authorization type.
    public struct ConnectionOAuthResponseParameters: Swift.Sendable {
        /// The URL to the HTTP endpoint that authorized the request.
        public var authorizationEndpoint: Swift.String?
        /// A ConnectionOAuthClientResponseParameters object that contains details about the client parameters returned when OAuth is specified as the authorization type.
        public var clientParameters: EventBridgeClientTypes.ConnectionOAuthClientResponseParameters?
        /// The method used to connect to the HTTP endpoint.
        public var httpMethod: EventBridgeClientTypes.ConnectionOAuthHttpMethod?
        /// The additional HTTP parameters used for the OAuth authorization request.
        public var oAuthHttpParameters: EventBridgeClientTypes.ConnectionHttpParameters?

        public init(
            authorizationEndpoint: Swift.String? = nil,
            clientParameters: EventBridgeClientTypes.ConnectionOAuthClientResponseParameters? = nil,
            httpMethod: EventBridgeClientTypes.ConnectionOAuthHttpMethod? = nil,
            oAuthHttpParameters: EventBridgeClientTypes.ConnectionHttpParameters? = nil
        )
        {
            self.authorizationEndpoint = authorizationEndpoint
            self.clientParameters = clientParameters
            self.httpMethod = httpMethod
            self.oAuthHttpParameters = oAuthHttpParameters
        }
    }
}

extension EventBridgeClientTypes {

    /// Contains the authorization parameters to use for the connection.
    public struct ConnectionAuthResponseParameters: Swift.Sendable {
        /// The API Key parameters to use for authorization.
        public var apiKeyAuthParameters: EventBridgeClientTypes.ConnectionApiKeyAuthResponseParameters?
        /// The authorization parameters for Basic authorization.
        public var basicAuthParameters: EventBridgeClientTypes.ConnectionBasicAuthResponseParameters?
        /// Additional parameters for the connection that are passed through with every invocation to the HTTP endpoint.
        public var invocationHttpParameters: EventBridgeClientTypes.ConnectionHttpParameters?
        /// The OAuth parameters to use for authorization.
        public var oAuthParameters: EventBridgeClientTypes.ConnectionOAuthResponseParameters?

        public init(
            apiKeyAuthParameters: EventBridgeClientTypes.ConnectionApiKeyAuthResponseParameters? = nil,
            basicAuthParameters: EventBridgeClientTypes.ConnectionBasicAuthResponseParameters? = nil,
            invocationHttpParameters: EventBridgeClientTypes.ConnectionHttpParameters? = nil,
            oAuthParameters: EventBridgeClientTypes.ConnectionOAuthResponseParameters? = nil
        )
        {
            self.apiKeyAuthParameters = apiKeyAuthParameters
            self.basicAuthParameters = basicAuthParameters
            self.invocationHttpParameters = invocationHttpParameters
            self.oAuthParameters = oAuthParameters
        }
    }
}

public struct DescribeConnectionOutput: Swift.Sendable {
    /// The parameters to use for authorization for the connection.
    public var authParameters: EventBridgeClientTypes.ConnectionAuthResponseParameters?
    /// The type of authorization specified for the connection.
    public var authorizationType: EventBridgeClientTypes.ConnectionAuthorizationType?
    /// The ARN of the connection retrieved.
    public var connectionArn: Swift.String?
    /// The state of the connection retrieved.
    public var connectionState: EventBridgeClientTypes.ConnectionState?
    /// A time stamp for the time that the connection was created.
    public var creationTime: Foundation.Date?
    /// The description for the connection retrieved.
    public var description: Swift.String?
    /// A time stamp for the time that the connection was last authorized.
    public var lastAuthorizedTime: Foundation.Date?
    /// A time stamp for the time that the connection was last modified.
    public var lastModifiedTime: Foundation.Date?
    /// The name of the connection retrieved.
    public var name: Swift.String?
    /// The ARN of the secret created from the authorization parameters specified for the connection.
    public var secretArn: Swift.String?
    /// The reason that the connection is in the current connection state.
    public var stateReason: Swift.String?

    public init(
        authParameters: EventBridgeClientTypes.ConnectionAuthResponseParameters? = nil,
        authorizationType: EventBridgeClientTypes.ConnectionAuthorizationType? = nil,
        connectionArn: Swift.String? = nil,
        connectionState: EventBridgeClientTypes.ConnectionState? = nil,
        creationTime: Foundation.Date? = nil,
        description: Swift.String? = nil,
        lastAuthorizedTime: Foundation.Date? = nil,
        lastModifiedTime: Foundation.Date? = nil,
        name: Swift.String? = nil,
        secretArn: Swift.String? = nil,
        stateReason: Swift.String? = nil
    )
    {
        self.authParameters = authParameters
        self.authorizationType = authorizationType
        self.connectionArn = connectionArn
        self.connectionState = connectionState
        self.creationTime = creationTime
        self.description = description
        self.lastAuthorizedTime = lastAuthorizedTime
        self.lastModifiedTime = lastModifiedTime
        self.name = name
        self.secretArn = secretArn
        self.stateReason = stateReason
    }
}

public struct DescribeEndpointInput: Swift.Sendable {
    /// The primary Region of the endpoint you want to get information about. For example "HomeRegion": "us-east-1".
    public var homeRegion: Swift.String?
    /// The name of the endpoint you want to get information about. For example, "Name":"us-east-2-custom_bus_A-endpoint".
    /// This member is required.
    public var name: Swift.String?

    public init(
        homeRegion: Swift.String? = nil,
        name: Swift.String? = nil
    )
    {
        self.homeRegion = homeRegion
        self.name = name
    }
}

public struct DescribeEndpointOutput: Swift.Sendable {
    /// The ARN of the endpoint you asked for information about.
    public var arn: Swift.String?
    /// The time the endpoint you asked for information about was created.
    public var creationTime: Foundation.Date?
    /// The description of the endpoint you asked for information about.
    public var description: Swift.String?
    /// The ID of the endpoint you asked for information about.
    public var endpointId: Swift.String?
    /// The URL of the endpoint you asked for information about.
    public var endpointUrl: Swift.String?
    /// The event buses being used by the endpoint you asked for information about.
    public var eventBuses: [EventBridgeClientTypes.EndpointEventBus]?
    /// The last time the endpoint you asked for information about was modified.
    public var lastModifiedTime: Foundation.Date?
    /// The name of the endpoint you asked for information about.
    public var name: Swift.String?
    /// Whether replication is enabled or disabled for the endpoint you asked for information about.
    public var replicationConfig: EventBridgeClientTypes.ReplicationConfig?
    /// The ARN of the role used by the endpoint you asked for information about.
    public var roleArn: Swift.String?
    /// The routing configuration of the endpoint you asked for information about.
    public var routingConfig: EventBridgeClientTypes.RoutingConfig?
    /// The current state of the endpoint you asked for information about.
    public var state: EventBridgeClientTypes.EndpointState?
    /// The reason the endpoint you asked for information about is in its current state.
    public var stateReason: Swift.String?

    public init(
        arn: Swift.String? = nil,
        creationTime: Foundation.Date? = nil,
        description: Swift.String? = nil,
        endpointId: Swift.String? = nil,
        endpointUrl: Swift.String? = nil,
        eventBuses: [EventBridgeClientTypes.EndpointEventBus]? = nil,
        lastModifiedTime: Foundation.Date? = nil,
        name: Swift.String? = nil,
        replicationConfig: EventBridgeClientTypes.ReplicationConfig? = nil,
        roleArn: Swift.String? = nil,
        routingConfig: EventBridgeClientTypes.RoutingConfig? = nil,
        state: EventBridgeClientTypes.EndpointState? = nil,
        stateReason: Swift.String? = nil
    )
    {
        self.arn = arn
        self.creationTime = creationTime
        self.description = description
        self.endpointId = endpointId
        self.endpointUrl = endpointUrl
        self.eventBuses = eventBuses
        self.lastModifiedTime = lastModifiedTime
        self.name = name
        self.replicationConfig = replicationConfig
        self.roleArn = roleArn
        self.routingConfig = routingConfig
        self.state = state
        self.stateReason = stateReason
    }
}

public struct DescribeEventBusInput: Swift.Sendable {
    /// The name or ARN of the event bus to show details for. If you omit this, the default event bus is displayed.
    public var name: Swift.String?

    public init(
        name: Swift.String? = nil
    )
    {
        self.name = name
    }
}

public struct DescribeEventBusOutput: Swift.Sendable {
    /// The Amazon Resource Name (ARN) of the account permitted to write events to the current account.
    public var arn: Swift.String?
    /// The time the event bus was created.
    public var creationTime: Foundation.Date?
    /// Configuration details of the Amazon SQS queue for EventBridge to use as a dead-letter queue (DLQ). For more information, see [Event retry policy and using dead-letter queues] in the EventBridge User Guide.
    public var deadLetterConfig: EventBridgeClientTypes.DeadLetterConfig?
    /// The event bus description.
    public var description: Swift.String?
    /// The identifier of the KMS customer managed key for EventBridge to use to encrypt events on this event bus, if one has been specified. For more information, see [Data encryption in EventBridge](https://docs.aws.amazon.com/eventbridge/latest/userguide/eb-encryption.html) in the Amazon EventBridge User Guide.
    public var kmsKeyIdentifier: Swift.String?
    /// The time the event bus was last modified.
    public var lastModifiedTime: Foundation.Date?
    /// The name of the event bus. Currently, this is always default.
    public var name: Swift.String?
    /// The policy that enables the external account to send events to your account.
    public var policy: Swift.String?

    public init(
        arn: Swift.String? = nil,
        creationTime: Foundation.Date? = nil,
        deadLetterConfig: EventBridgeClientTypes.DeadLetterConfig? = nil,
        description: Swift.String? = nil,
        kmsKeyIdentifier: Swift.String? = nil,
        lastModifiedTime: Foundation.Date? = nil,
        name: Swift.String? = nil,
        policy: Swift.String? = nil
    )
    {
        self.arn = arn
        self.creationTime = creationTime
        self.deadLetterConfig = deadLetterConfig
        self.description = description
        self.kmsKeyIdentifier = kmsKeyIdentifier
        self.lastModifiedTime = lastModifiedTime
        self.name = name
        self.policy = policy
    }
}

public struct DescribeEventSourceInput: Swift.Sendable {
    /// The name of the partner event source to display the details of.
    /// This member is required.
    public var name: Swift.String?

    public init(
        name: Swift.String? = nil
    )
    {
        self.name = name
    }
}

extension EventBridgeClientTypes {

    public enum EventSourceState: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case active
        case deleted
        case pending
        case sdkUnknown(Swift.String)

        public static var allCases: [EventSourceState] {
            return [
                .active,
                .deleted,
                .pending
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .active: return "ACTIVE"
            case .deleted: return "DELETED"
            case .pending: return "PENDING"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

public struct DescribeEventSourceOutput: Swift.Sendable {
    /// The ARN of the partner event source.
    public var arn: Swift.String?
    /// The name of the SaaS partner that created the event source.
    public var createdBy: Swift.String?
    /// The date and time that the event source was created.
    public var creationTime: Foundation.Date?
    /// The date and time that the event source will expire if you do not create a matching event bus.
    public var expirationTime: Foundation.Date?
    /// The name of the partner event source.
    public var name: Swift.String?
    /// The state of the event source. If it is ACTIVE, you have already created a matching event bus for this event source, and that event bus is active. If it is PENDING, either you haven't yet created a matching event bus, or that event bus is deactivated. If it is DELETED, you have created a matching event bus, but the event source has since been deleted.
    public var state: EventBridgeClientTypes.EventSourceState?

    public init(
        arn: Swift.String? = nil,
        createdBy: Swift.String? = nil,
        creationTime: Foundation.Date? = nil,
        expirationTime: Foundation.Date? = nil,
        name: Swift.String? = nil,
        state: EventBridgeClientTypes.EventSourceState? = nil
    )
    {
        self.arn = arn
        self.createdBy = createdBy
        self.creationTime = creationTime
        self.expirationTime = expirationTime
        self.name = name
        self.state = state
    }
}

public struct DescribePartnerEventSourceInput: Swift.Sendable {
    /// The name of the event source to display.
    /// This member is required.
    public var name: Swift.String?

    public init(
        name: Swift.String? = nil
    )
    {
        self.name = name
    }
}

public struct DescribePartnerEventSourceOutput: Swift.Sendable {
    /// The ARN of the event source.
    public var arn: Swift.String?
    /// The name of the event source.
    public var name: Swift.String?

    public init(
        arn: Swift.String? = nil,
        name: Swift.String? = nil
    )
    {
        self.arn = arn
        self.name = name
    }
}

public struct DescribeReplayInput: Swift.Sendable {
    /// The name of the replay to retrieve.
    /// This member is required.
    public var replayName: Swift.String?

    public init(
        replayName: Swift.String? = nil
    )
    {
        self.replayName = replayName
    }
}

extension EventBridgeClientTypes {

    /// A ReplayDestination object that contains details about a replay.
    public struct ReplayDestination: Swift.Sendable {
        /// The ARN of the event bus to replay event to. You can replay events only to the event bus specified to create the archive.
        /// This member is required.
        public var arn: Swift.String?
        /// A list of ARNs for rules to replay events to.
        public var filterArns: [Swift.String]?

        public init(
            arn: Swift.String? = nil,
            filterArns: [Swift.String]? = nil
        )
        {
            self.arn = arn
            self.filterArns = filterArns
        }
    }
}

public struct DescribeReplayOutput: Swift.Sendable {
    /// The description of the replay.
    public var description: Swift.String?
    /// A ReplayDestination object that contains details about the replay.
    public var destination: EventBridgeClientTypes.ReplayDestination?
    /// The time stamp for the last event that was replayed from the archive.
    public var eventEndTime: Foundation.Date?
    /// The time that the event was last replayed.
    public var eventLastReplayedTime: Foundation.Date?
    /// The ARN of the archive events were replayed from.
    public var eventSourceArn: Swift.String?
    /// The time stamp of the first event that was last replayed from the archive.
    public var eventStartTime: Foundation.Date?
    /// The ARN of the replay.
    public var replayArn: Swift.String?
    /// A time stamp for the time that the replay stopped.
    public var replayEndTime: Foundation.Date?
    /// The name of the replay.
    public var replayName: Swift.String?
    /// A time stamp for the time that the replay started.
    public var replayStartTime: Foundation.Date?
    /// The current state of the replay.
    public var state: EventBridgeClientTypes.ReplayState?
    /// The reason that the replay is in the current state.
    public var stateReason: Swift.String?

    public init(
        description: Swift.String? = nil,
        destination: EventBridgeClientTypes.ReplayDestination? = nil,
        eventEndTime: Foundation.Date? = nil,
        eventLastReplayedTime: Foundation.Date? = nil,
        eventSourceArn: Swift.String? = nil,
        eventStartTime: Foundation.Date? = nil,
        replayArn: Swift.String? = nil,
        replayEndTime: Foundation.Date? = nil,
        replayName: Swift.String? = nil,
        replayStartTime: Foundation.Date? = nil,
        state: EventBridgeClientTypes.ReplayState? = nil,
        stateReason: Swift.String? = nil
    )
    {
        self.description = description
        self.destination = destination
        self.eventEndTime = eventEndTime
        self.eventLastReplayedTime = eventLastReplayedTime
        self.eventSourceArn = eventSourceArn
        self.eventStartTime = eventStartTime
        self.replayArn = replayArn
        self.replayEndTime = replayEndTime
        self.replayName = replayName
        self.replayStartTime = replayStartTime
        self.state = state
        self.stateReason = stateReason
    }
}

public struct DescribeRuleInput: Swift.Sendable {
    /// The name or ARN of the event bus associated with the rule. If you omit this, the default event bus is used.
    public var eventBusName: Swift.String?
    /// The name of the rule.
    /// This member is required.
    public var name: Swift.String?

    public init(
        eventBusName: Swift.String? = nil,
        name: Swift.String? = nil
    )
    {
        self.eventBusName = eventBusName
        self.name = name
    }
}

extension EventBridgeClientTypes {

    public enum RuleState: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case disabled
        case enabled
        case enabledWithAllCloudtrailManagementEvents
        case sdkUnknown(Swift.String)

        public static var allCases: [RuleState] {
            return [
                .disabled,
                .enabled,
                .enabledWithAllCloudtrailManagementEvents
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .disabled: return "DISABLED"
            case .enabled: return "ENABLED"
            case .enabledWithAllCloudtrailManagementEvents: return "ENABLED_WITH_ALL_CLOUDTRAIL_MANAGEMENT_EVENTS"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

public struct DescribeRuleOutput: Swift.Sendable {
    /// The Amazon Resource Name (ARN) of the rule.
    public var arn: Swift.String?
    /// The account ID of the user that created the rule. If you use PutRule to put a rule on an event bus in another account, the other account is the owner of the rule, and the rule ARN includes the account ID for that account. However, the value for CreatedBy is the account ID as the account that created the rule in the other account.
    public var createdBy: Swift.String?
    /// The description of the rule.
    public var description: Swift.String?
    /// The name of the event bus associated with the rule.
    public var eventBusName: Swift.String?
    /// The event pattern. For more information, see [Events and Event Patterns](https://docs.aws.amazon.com/eventbridge/latest/userguide/eventbridge-and-event-patterns.html) in the Amazon EventBridge User Guide .
    public var eventPattern: Swift.String?
    /// If this is a managed rule, created by an Amazon Web Services service on your behalf, this field displays the principal name of the Amazon Web Services service that created the rule.
    public var managedBy: Swift.String?
    /// The name of the rule.
    public var name: Swift.String?
    /// The Amazon Resource Name (ARN) of the IAM role associated with the rule.
    public var roleArn: Swift.String?
    /// The scheduling expression. For example, "cron(0 20 * * ? *)", "rate(5 minutes)".
    public var scheduleExpression: Swift.String?
    /// Specifies whether the rule is enabled or disabled.
    public var state: EventBridgeClientTypes.RuleState?

    public init(
        arn: Swift.String? = nil,
        createdBy: Swift.String? = nil,
        description: Swift.String? = nil,
        eventBusName: Swift.String? = nil,
        eventPattern: Swift.String? = nil,
        managedBy: Swift.String? = nil,
        name: Swift.String? = nil,
        roleArn: Swift.String? = nil,
        scheduleExpression: Swift.String? = nil,
        state: EventBridgeClientTypes.RuleState? = nil
    )
    {
        self.arn = arn
        self.createdBy = createdBy
        self.description = description
        self.eventBusName = eventBusName
        self.eventPattern = eventPattern
        self.managedBy = managedBy
        self.name = name
        self.roleArn = roleArn
        self.scheduleExpression = scheduleExpression
        self.state = state
    }
}

public struct DisableRuleInput: Swift.Sendable {
    /// The name or ARN of the event bus associated with the rule. If you omit this, the default event bus is used.
    public var eventBusName: Swift.String?
    /// The name of the rule.
    /// This member is required.
    public var name: Swift.String?

    public init(
        eventBusName: Swift.String? = nil,
        name: Swift.String? = nil
    )
    {
        self.eventBusName = eventBusName
        self.name = name
    }
}

public struct EnableRuleInput: Swift.Sendable {
    /// The name or ARN of the event bus associated with the rule. If you omit this, the default event bus is used.
    public var eventBusName: Swift.String?
    /// The name of the rule.
    /// This member is required.
    public var name: Swift.String?

    public init(
        eventBusName: Swift.String? = nil,
        name: Swift.String? = nil
    )
    {
        self.eventBusName = eventBusName
        self.name = name
    }
}

public struct ListApiDestinationsInput: Swift.Sendable {
    /// The ARN of the connection specified for the API destination.
    public var connectionArn: Swift.String?
    /// The maximum number of API destinations to include in the response.
    public var limit: Swift.Int?
    /// A name prefix to filter results returned. Only API destinations with a name that starts with the prefix are returned.
    public var namePrefix: Swift.String?
    /// The token returned by a previous call to retrieve the next set of results.
    public var nextToken: Swift.String?

    public init(
        connectionArn: Swift.String? = nil,
        limit: Swift.Int? = nil,
        namePrefix: Swift.String? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.connectionArn = connectionArn
        self.limit = limit
        self.namePrefix = namePrefix
        self.nextToken = nextToken
    }
}

public struct ListApiDestinationsOutput: Swift.Sendable {
    /// An array of ApiDestination objects that include information about an API destination.
    public var apiDestinations: [EventBridgeClientTypes.ApiDestination]?
    /// A token you can use in a subsequent request to retrieve the next set of results.
    public var nextToken: Swift.String?

    public init(
        apiDestinations: [EventBridgeClientTypes.ApiDestination]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.apiDestinations = apiDestinations
        self.nextToken = nextToken
    }
}

public struct ListArchivesInput: Swift.Sendable {
    /// The ARN of the event source associated with the archive.
    public var eventSourceArn: Swift.String?
    /// The maximum number of results to return.
    public var limit: Swift.Int?
    /// A name prefix to filter the archives returned. Only archives with name that match the prefix are returned.
    public var namePrefix: Swift.String?
    /// The token returned by a previous call to retrieve the next set of results.
    public var nextToken: Swift.String?
    /// The state of the archive.
    public var state: EventBridgeClientTypes.ArchiveState?

    public init(
        eventSourceArn: Swift.String? = nil,
        limit: Swift.Int? = nil,
        namePrefix: Swift.String? = nil,
        nextToken: Swift.String? = nil,
        state: EventBridgeClientTypes.ArchiveState? = nil
    )
    {
        self.eventSourceArn = eventSourceArn
        self.limit = limit
        self.namePrefix = namePrefix
        self.nextToken = nextToken
        self.state = state
    }
}

public struct ListArchivesOutput: Swift.Sendable {
    /// An array of Archive objects that include details about an archive.
    public var archives: [EventBridgeClientTypes.Archive]?
    /// The token returned by a previous call to retrieve the next set of results.
    public var nextToken: Swift.String?

    public init(
        archives: [EventBridgeClientTypes.Archive]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.archives = archives
        self.nextToken = nextToken
    }
}

public struct ListConnectionsInput: Swift.Sendable {
    /// The state of the connection.
    public var connectionState: EventBridgeClientTypes.ConnectionState?
    /// The maximum number of connections to return.
    public var limit: Swift.Int?
    /// A name prefix to filter results returned. Only connections with a name that starts with the prefix are returned.
    public var namePrefix: Swift.String?
    /// The token returned by a previous call to retrieve the next set of results.
    public var nextToken: Swift.String?

    public init(
        connectionState: EventBridgeClientTypes.ConnectionState? = nil,
        limit: Swift.Int? = nil,
        namePrefix: Swift.String? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.connectionState = connectionState
        self.limit = limit
        self.namePrefix = namePrefix
        self.nextToken = nextToken
    }
}

extension EventBridgeClientTypes {

    /// Contains information about a connection.
    public struct Connection: Swift.Sendable {
        /// The authorization type specified for the connection. OAUTH tokens are refreshed when a 401 or 407 response is returned.
        public var authorizationType: EventBridgeClientTypes.ConnectionAuthorizationType?
        /// The ARN of the connection.
        public var connectionArn: Swift.String?
        /// The state of the connection.
        public var connectionState: EventBridgeClientTypes.ConnectionState?
        /// A time stamp for the time that the connection was created.
        public var creationTime: Foundation.Date?
        /// A time stamp for the time that the connection was last authorized.
        public var lastAuthorizedTime: Foundation.Date?
        /// A time stamp for the time that the connection was last modified.
        public var lastModifiedTime: Foundation.Date?
        /// The name of the connection.
        public var name: Swift.String?
        /// The reason that the connection is in the connection state.
        public var stateReason: Swift.String?

        public init(
            authorizationType: EventBridgeClientTypes.ConnectionAuthorizationType? = nil,
            connectionArn: Swift.String? = nil,
            connectionState: EventBridgeClientTypes.ConnectionState? = nil,
            creationTime: Foundation.Date? = nil,
            lastAuthorizedTime: Foundation.Date? = nil,
            lastModifiedTime: Foundation.Date? = nil,
            name: Swift.String? = nil,
            stateReason: Swift.String? = nil
        )
        {
            self.authorizationType = authorizationType
            self.connectionArn = connectionArn
            self.connectionState = connectionState
            self.creationTime = creationTime
            self.lastAuthorizedTime = lastAuthorizedTime
            self.lastModifiedTime = lastModifiedTime
            self.name = name
            self.stateReason = stateReason
        }
    }
}

public struct ListConnectionsOutput: Swift.Sendable {
    /// An array of connections objects that include details about the connections.
    public var connections: [EventBridgeClientTypes.Connection]?
    /// A token you can use in a subsequent request to retrieve the next set of results.
    public var nextToken: Swift.String?

    public init(
        connections: [EventBridgeClientTypes.Connection]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.connections = connections
        self.nextToken = nextToken
    }
}

public struct ListEndpointsInput: Swift.Sendable {
    /// The primary Region of the endpoints associated with this account. For example "HomeRegion": "us-east-1".
    public var homeRegion: Swift.String?
    /// The maximum number of results returned by the call.
    public var maxResults: Swift.Int?
    /// A value that will return a subset of the endpoints associated with this account. For example, "NamePrefix": "ABC" will return all endpoints with "ABC" in the name.
    public var namePrefix: Swift.String?
    /// If nextToken is returned, there are more results available. The value of nextToken is a unique pagination token for each page. Make the call again using the returned token to retrieve the next page. Keep all other arguments unchanged. Each pagination token expires after 24 hours. Using an expired pagination token will return an HTTP 400 InvalidToken error.
    public var nextToken: Swift.String?

    public init(
        homeRegion: Swift.String? = nil,
        maxResults: Swift.Int? = nil,
        namePrefix: Swift.String? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.homeRegion = homeRegion
        self.maxResults = maxResults
        self.namePrefix = namePrefix
        self.nextToken = nextToken
    }
}

extension EventBridgeClientTypes {

    /// A global endpoint used to improve your application's availability by making it regional-fault tolerant. For more information about global endpoints, see [Making applications Regional-fault tolerant with global endpoints and event replication](https://docs.aws.amazon.com/eventbridge/latest/userguide/eb-global-endpoints.html) in the Amazon EventBridge User Guide .
    public struct Endpoint: Swift.Sendable {
        /// The ARN of the endpoint.
        public var arn: Swift.String?
        /// The time the endpoint was created.
        public var creationTime: Foundation.Date?
        /// A description for the endpoint.
        public var description: Swift.String?
        /// The URL subdomain of the endpoint. For example, if the URL for Endpoint is https://abcde.veo.endpoints.event.amazonaws.com, then the EndpointId is abcde.veo.
        public var endpointId: Swift.String?
        /// The URL of the endpoint.
        public var endpointUrl: Swift.String?
        /// The event buses being used by the endpoint.
        public var eventBuses: [EventBridgeClientTypes.EndpointEventBus]?
        /// The last time the endpoint was modified.
        public var lastModifiedTime: Foundation.Date?
        /// The name of the endpoint.
        public var name: Swift.String?
        /// Whether event replication was enabled or disabled for this endpoint. The default state is ENABLED which means you must supply a RoleArn. If you don't have a RoleArn or you don't want event replication enabled, set the state to DISABLED.
        public var replicationConfig: EventBridgeClientTypes.ReplicationConfig?
        /// The ARN of the role used by event replication for the endpoint.
        public var roleArn: Swift.String?
        /// The routing configuration of the endpoint.
        public var routingConfig: EventBridgeClientTypes.RoutingConfig?
        /// The current state of the endpoint.
        public var state: EventBridgeClientTypes.EndpointState?
        /// The reason the endpoint is in its current state.
        public var stateReason: Swift.String?

        public init(
            arn: Swift.String? = nil,
            creationTime: Foundation.Date? = nil,
            description: Swift.String? = nil,
            endpointId: Swift.String? = nil,
            endpointUrl: Swift.String? = nil,
            eventBuses: [EventBridgeClientTypes.EndpointEventBus]? = nil,
            lastModifiedTime: Foundation.Date? = nil,
            name: Swift.String? = nil,
            replicationConfig: EventBridgeClientTypes.ReplicationConfig? = nil,
            roleArn: Swift.String? = nil,
            routingConfig: EventBridgeClientTypes.RoutingConfig? = nil,
            state: EventBridgeClientTypes.EndpointState? = nil,
            stateReason: Swift.String? = nil
        )
        {
            self.arn = arn
            self.creationTime = creationTime
            self.description = description
            self.endpointId = endpointId
            self.endpointUrl = endpointUrl
            self.eventBuses = eventBuses
            self.lastModifiedTime = lastModifiedTime
            self.name = name
            self.replicationConfig = replicationConfig
            self.roleArn = roleArn
            self.routingConfig = routingConfig
            self.state = state
            self.stateReason = stateReason
        }
    }
}

public struct ListEndpointsOutput: Swift.Sendable {
    /// The endpoints returned by the call.
    public var endpoints: [EventBridgeClientTypes.Endpoint]?
    /// If nextToken is returned, there are more results available. The value of nextToken is a unique pagination token for each page. Make the call again using the returned token to retrieve the next page. Keep all other arguments unchanged. Each pagination token expires after 24 hours. Using an expired pagination token will return an HTTP 400 InvalidToken error.
    public var nextToken: Swift.String?

    public init(
        endpoints: [EventBridgeClientTypes.Endpoint]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.endpoints = endpoints
        self.nextToken = nextToken
    }
}

public struct ListEventBusesInput: Swift.Sendable {
    /// Specifying this limits the number of results returned by this operation. The operation also returns a NextToken which you can use in a subsequent operation to retrieve the next set of results.
    public var limit: Swift.Int?
    /// Specifying this limits the results to only those event buses with names that start with the specified prefix.
    public var namePrefix: Swift.String?
    /// The token returned by a previous call to retrieve the next set of results.
    public var nextToken: Swift.String?

    public init(
        limit: Swift.Int? = nil,
        namePrefix: Swift.String? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.limit = limit
        self.namePrefix = namePrefix
        self.nextToken = nextToken
    }
}

extension EventBridgeClientTypes {

    /// An event bus receives events from a source, uses rules to evaluate them, applies any configured input transformation, and routes them to the appropriate target(s). Your account's default event bus receives events from Amazon Web Services services. A custom event bus can receive events from your custom applications and services. A partner event bus receives events from an event source created by an SaaS partner. These events come from the partners services or applications.
    public struct EventBus: Swift.Sendable {
        /// The ARN of the event bus.
        public var arn: Swift.String?
        /// The time the event bus was created.
        public var creationTime: Foundation.Date?
        /// The event bus description.
        public var description: Swift.String?
        /// The time the event bus was last modified.
        public var lastModifiedTime: Foundation.Date?
        /// The name of the event bus.
        public var name: Swift.String?
        /// The permissions policy of the event bus, describing which other Amazon Web Services accounts can write events to this event bus.
        public var policy: Swift.String?

        public init(
            arn: Swift.String? = nil,
            creationTime: Foundation.Date? = nil,
            description: Swift.String? = nil,
            lastModifiedTime: Foundation.Date? = nil,
            name: Swift.String? = nil,
            policy: Swift.String? = nil
        )
        {
            self.arn = arn
            self.creationTime = creationTime
            self.description = description
            self.lastModifiedTime = lastModifiedTime
            self.name = name
            self.policy = policy
        }
    }
}

public struct ListEventBusesOutput: Swift.Sendable {
    /// This list of event buses.
    public var eventBuses: [EventBridgeClientTypes.EventBus]?
    /// A token you can use in a subsequent operation to retrieve the next set of results.
    public var nextToken: Swift.String?

    public init(
        eventBuses: [EventBridgeClientTypes.EventBus]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.eventBuses = eventBuses
        self.nextToken = nextToken
    }
}

public struct ListEventSourcesInput: Swift.Sendable {
    /// Specifying this limits the number of results returned by this operation. The operation also returns a NextToken which you can use in a subsequent operation to retrieve the next set of results.
    public var limit: Swift.Int?
    /// Specifying this limits the results to only those partner event sources with names that start with the specified prefix.
    public var namePrefix: Swift.String?
    /// The token returned by a previous call to retrieve the next set of results.
    public var nextToken: Swift.String?

    public init(
        limit: Swift.Int? = nil,
        namePrefix: Swift.String? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.limit = limit
        self.namePrefix = namePrefix
        self.nextToken = nextToken
    }
}

extension EventBridgeClientTypes {

    /// A partner event source is created by an SaaS partner. If a customer creates a partner event bus that matches this event source, that Amazon Web Services account can receive events from the partner's applications or services.
    public struct EventSource: Swift.Sendable {
        /// The ARN of the event source.
        public var arn: Swift.String?
        /// The name of the partner that created the event source.
        public var createdBy: Swift.String?
        /// The date and time the event source was created.
        public var creationTime: Foundation.Date?
        /// The date and time that the event source will expire, if the Amazon Web Services account doesn't create a matching event bus for it.
        public var expirationTime: Foundation.Date?
        /// The name of the event source.
        public var name: Swift.String?
        /// The state of the event source. If it is ACTIVE, you have already created a matching event bus for this event source, and that event bus is active. If it is PENDING, either you haven't yet created a matching event bus, or that event bus is deactivated. If it is DELETED, you have created a matching event bus, but the event source has since been deleted.
        public var state: EventBridgeClientTypes.EventSourceState?

        public init(
            arn: Swift.String? = nil,
            createdBy: Swift.String? = nil,
            creationTime: Foundation.Date? = nil,
            expirationTime: Foundation.Date? = nil,
            name: Swift.String? = nil,
            state: EventBridgeClientTypes.EventSourceState? = nil
        )
        {
            self.arn = arn
            self.createdBy = createdBy
            self.creationTime = creationTime
            self.expirationTime = expirationTime
            self.name = name
            self.state = state
        }
    }
}

public struct ListEventSourcesOutput: Swift.Sendable {
    /// The list of event sources.
    public var eventSources: [EventBridgeClientTypes.EventSource]?
    /// A token you can use in a subsequent operation to retrieve the next set of results.
    public var nextToken: Swift.String?

    public init(
        eventSources: [EventBridgeClientTypes.EventSource]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.eventSources = eventSources
        self.nextToken = nextToken
    }
}

public struct ListPartnerEventSourceAccountsInput: Swift.Sendable {
    /// The name of the partner event source to display account information about.
    /// This member is required.
    public var eventSourceName: Swift.String?
    /// Specifying this limits the number of results returned by this operation. The operation also returns a NextToken which you can use in a subsequent operation to retrieve the next set of results.
    public var limit: Swift.Int?
    /// The token returned by a previous call to this operation. Specifying this retrieves the next set of results.
    public var nextToken: Swift.String?

    public init(
        eventSourceName: Swift.String? = nil,
        limit: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.eventSourceName = eventSourceName
        self.limit = limit
        self.nextToken = nextToken
    }
}

extension EventBridgeClientTypes {

    /// The Amazon Web Services account that a partner event source has been offered to.
    public struct PartnerEventSourceAccount: Swift.Sendable {
        /// The Amazon Web Services account ID that the partner event source was offered to.
        public var account: Swift.String?
        /// The date and time the event source was created.
        public var creationTime: Foundation.Date?
        /// The date and time that the event source will expire, if the Amazon Web Services account doesn't create a matching event bus for it.
        public var expirationTime: Foundation.Date?
        /// The state of the event source. If it is ACTIVE, you have already created a matching event bus for this event source, and that event bus is active. If it is PENDING, either you haven't yet created a matching event bus, or that event bus is deactivated. If it is DELETED, you have created a matching event bus, but the event source has since been deleted.
        public var state: EventBridgeClientTypes.EventSourceState?

        public init(
            account: Swift.String? = nil,
            creationTime: Foundation.Date? = nil,
            expirationTime: Foundation.Date? = nil,
            state: EventBridgeClientTypes.EventSourceState? = nil
        )
        {
            self.account = account
            self.creationTime = creationTime
            self.expirationTime = expirationTime
            self.state = state
        }
    }
}

public struct ListPartnerEventSourceAccountsOutput: Swift.Sendable {
    /// A token you can use in a subsequent operation to retrieve the next set of results.
    public var nextToken: Swift.String?
    /// The list of partner event sources returned by the operation.
    public var partnerEventSourceAccounts: [EventBridgeClientTypes.PartnerEventSourceAccount]?

    public init(
        nextToken: Swift.String? = nil,
        partnerEventSourceAccounts: [EventBridgeClientTypes.PartnerEventSourceAccount]? = nil
    )
    {
        self.nextToken = nextToken
        self.partnerEventSourceAccounts = partnerEventSourceAccounts
    }
}

public struct ListPartnerEventSourcesInput: Swift.Sendable {
    /// pecifying this limits the number of results returned by this operation. The operation also returns a NextToken which you can use in a subsequent operation to retrieve the next set of results.
    public var limit: Swift.Int?
    /// If you specify this, the results are limited to only those partner event sources that start with the string you specify.
    /// This member is required.
    public var namePrefix: Swift.String?
    /// The token returned by a previous call to this operation. Specifying this retrieves the next set of results.
    public var nextToken: Swift.String?

    public init(
        limit: Swift.Int? = nil,
        namePrefix: Swift.String? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.limit = limit
        self.namePrefix = namePrefix
        self.nextToken = nextToken
    }
}

extension EventBridgeClientTypes {

    /// A partner event source is created by an SaaS partner. If a customer creates a partner event bus that matches this event source, that Amazon Web Services account can receive events from the partner's applications or services.
    public struct PartnerEventSource: Swift.Sendable {
        /// The ARN of the partner event source.
        public var arn: Swift.String?
        /// The name of the partner event source.
        public var name: Swift.String?

        public init(
            arn: Swift.String? = nil,
            name: Swift.String? = nil
        )
        {
            self.arn = arn
            self.name = name
        }
    }
}

public struct ListPartnerEventSourcesOutput: Swift.Sendable {
    /// A token you can use in a subsequent operation to retrieve the next set of results.
    public var nextToken: Swift.String?
    /// The list of partner event sources returned by the operation.
    public var partnerEventSources: [EventBridgeClientTypes.PartnerEventSource]?

    public init(
        nextToken: Swift.String? = nil,
        partnerEventSources: [EventBridgeClientTypes.PartnerEventSource]? = nil
    )
    {
        self.nextToken = nextToken
        self.partnerEventSources = partnerEventSources
    }
}

public struct ListReplaysInput: Swift.Sendable {
    /// The ARN of the archive from which the events are replayed.
    public var eventSourceArn: Swift.String?
    /// The maximum number of replays to retrieve.
    public var limit: Swift.Int?
    /// A name prefix to filter the replays returned. Only replays with name that match the prefix are returned.
    public var namePrefix: Swift.String?
    /// The token returned by a previous call to retrieve the next set of results.
    public var nextToken: Swift.String?
    /// The state of the replay.
    public var state: EventBridgeClientTypes.ReplayState?

    public init(
        eventSourceArn: Swift.String? = nil,
        limit: Swift.Int? = nil,
        namePrefix: Swift.String? = nil,
        nextToken: Swift.String? = nil,
        state: EventBridgeClientTypes.ReplayState? = nil
    )
    {
        self.eventSourceArn = eventSourceArn
        self.limit = limit
        self.namePrefix = namePrefix
        self.nextToken = nextToken
        self.state = state
    }
}

extension EventBridgeClientTypes {

    /// A Replay object that contains details about a replay.
    public struct Replay: Swift.Sendable {
        /// A time stamp for the time to start replaying events. Any event with a creation time prior to the EventEndTime specified is replayed.
        public var eventEndTime: Foundation.Date?
        /// A time stamp for the time that the last event was replayed.
        public var eventLastReplayedTime: Foundation.Date?
        /// The ARN of the archive to replay event from.
        public var eventSourceArn: Swift.String?
        /// A time stamp for the time to start replaying events. This is determined by the time in the event as described in [Time](https://docs.aws.amazon.com/eventbridge/latest/APIReference/API_PutEventsRequestEntry.html#eventbridge-Type-PutEventsRequestEntry-Time).
        public var eventStartTime: Foundation.Date?
        /// A time stamp for the time that the replay completed.
        public var replayEndTime: Foundation.Date?
        /// The name of the replay.
        public var replayName: Swift.String?
        /// A time stamp for the time that the replay started.
        public var replayStartTime: Foundation.Date?
        /// The current state of the replay.
        public var state: EventBridgeClientTypes.ReplayState?
        /// A description of why the replay is in the current state.
        public var stateReason: Swift.String?

        public init(
            eventEndTime: Foundation.Date? = nil,
            eventLastReplayedTime: Foundation.Date? = nil,
            eventSourceArn: Swift.String? = nil,
            eventStartTime: Foundation.Date? = nil,
            replayEndTime: Foundation.Date? = nil,
            replayName: Swift.String? = nil,
            replayStartTime: Foundation.Date? = nil,
            state: EventBridgeClientTypes.ReplayState? = nil,
            stateReason: Swift.String? = nil
        )
        {
            self.eventEndTime = eventEndTime
            self.eventLastReplayedTime = eventLastReplayedTime
            self.eventSourceArn = eventSourceArn
            self.eventStartTime = eventStartTime
            self.replayEndTime = replayEndTime
            self.replayName = replayName
            self.replayStartTime = replayStartTime
            self.state = state
            self.stateReason = stateReason
        }
    }
}

public struct ListReplaysOutput: Swift.Sendable {
    /// The token returned by a previous call to retrieve the next set of results.
    public var nextToken: Swift.String?
    /// An array of Replay objects that contain information about the replay.
    public var replays: [EventBridgeClientTypes.Replay]?

    public init(
        nextToken: Swift.String? = nil,
        replays: [EventBridgeClientTypes.Replay]? = nil
    )
    {
        self.nextToken = nextToken
        self.replays = replays
    }
}

public struct ListRuleNamesByTargetInput: Swift.Sendable {
    /// The name or ARN of the event bus to list rules for. If you omit this, the default event bus is used.
    public var eventBusName: Swift.String?
    /// The maximum number of results to return.
    public var limit: Swift.Int?
    /// The token returned by a previous call to retrieve the next set of results.
    public var nextToken: Swift.String?
    /// The Amazon Resource Name (ARN) of the target resource.
    /// This member is required.
    public var targetArn: Swift.String?

    public init(
        eventBusName: Swift.String? = nil,
        limit: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        targetArn: Swift.String? = nil
    )
    {
        self.eventBusName = eventBusName
        self.limit = limit
        self.nextToken = nextToken
        self.targetArn = targetArn
    }
}

public struct ListRuleNamesByTargetOutput: Swift.Sendable {
    /// Indicates whether there are additional results to retrieve. If there are no more results, the value is null.
    public var nextToken: Swift.String?
    /// The names of the rules that can invoke the given target.
    public var ruleNames: [Swift.String]?

    public init(
        nextToken: Swift.String? = nil,
        ruleNames: [Swift.String]? = nil
    )
    {
        self.nextToken = nextToken
        self.ruleNames = ruleNames
    }
}

public struct ListRulesInput: Swift.Sendable {
    /// The name or ARN of the event bus to list the rules for. If you omit this, the default event bus is used.
    public var eventBusName: Swift.String?
    /// The maximum number of results to return.
    public var limit: Swift.Int?
    /// The prefix matching the rule name.
    public var namePrefix: Swift.String?
    /// The token returned by a previous call to retrieve the next set of results.
    public var nextToken: Swift.String?

    public init(
        eventBusName: Swift.String? = nil,
        limit: Swift.Int? = nil,
        namePrefix: Swift.String? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.eventBusName = eventBusName
        self.limit = limit
        self.namePrefix = namePrefix
        self.nextToken = nextToken
    }
}

extension EventBridgeClientTypes {

    /// Contains information about a rule in Amazon EventBridge.
    public struct Rule: Swift.Sendable {
        /// The Amazon Resource Name (ARN) of the rule.
        public var arn: Swift.String?
        /// The description of the rule.
        public var description: Swift.String?
        /// The name or ARN of the event bus associated with the rule. If you omit this, the default event bus is used.
        public var eventBusName: Swift.String?
        /// The event pattern of the rule. For more information, see [Events and Event Patterns](https://docs.aws.amazon.com/eventbridge/latest/userguide/eventbridge-and-event-patterns.html) in the Amazon EventBridge User Guide .
        public var eventPattern: Swift.String?
        /// If the rule was created on behalf of your account by an Amazon Web Services service, this field displays the principal name of the service that created the rule.
        public var managedBy: Swift.String?
        /// The name of the rule.
        public var name: Swift.String?
        /// The Amazon Resource Name (ARN) of the role that is used for target invocation. If you're setting an event bus in another account as the target and that account granted permission to your account through an organization instead of directly by the account ID, you must specify a RoleArn with proper permissions in the Target structure, instead of here in this parameter.
        public var roleArn: Swift.String?
        /// The scheduling expression. For example, "cron(0 20 * * ? *)", "rate(5 minutes)". For more information, see [Creating an Amazon EventBridge rule that runs on a schedule](https://docs.aws.amazon.com/eventbridge/latest/userguide/eb-create-rule-schedule.html).
        public var scheduleExpression: Swift.String?
        /// The state of the rule. Valid values include:
        ///
        /// * DISABLED: The rule is disabled. EventBridge does not match any events against the rule.
        ///
        /// * ENABLED: The rule is enabled. EventBridge matches events against the rule, except for Amazon Web Services management events delivered through CloudTrail.
        ///
        /// * ENABLED_WITH_ALL_CLOUDTRAIL_MANAGEMENT_EVENTS: The rule is enabled for all events, including Amazon Web Services management events delivered through CloudTrail. Management events provide visibility into management operations that are performed on resources in your Amazon Web Services account. These are also known as control plane operations. For more information, see [Logging management events](https://docs.aws.amazon.com/awscloudtrail/latest/userguide/logging-management-events-with-cloudtrail.html#logging-management-events) in the CloudTrail User Guide, and [Filtering management events from Amazon Web Services services](https://docs.aws.amazon.com/eventbridge/latest/userguide/eb-service-event.html#eb-service-event-cloudtrail) in the Amazon EventBridge User Guide . This value is only valid for rules on the [default](https://docs.aws.amazon.com/eventbridge/latest/userguide/eb-what-is-how-it-works-concepts.html#eb-bus-concepts-buses) event bus or [custom event buses](https://docs.aws.amazon.com/eventbridge/latest/userguide/eb-create-event-bus.html). It does not apply to [partner event buses](https://docs.aws.amazon.com/eventbridge/latest/userguide/eb-saas.html).
        public var state: EventBridgeClientTypes.RuleState?

        public init(
            arn: Swift.String? = nil,
            description: Swift.String? = nil,
            eventBusName: Swift.String? = nil,
            eventPattern: Swift.String? = nil,
            managedBy: Swift.String? = nil,
            name: Swift.String? = nil,
            roleArn: Swift.String? = nil,
            scheduleExpression: Swift.String? = nil,
            state: EventBridgeClientTypes.RuleState? = nil
        )
        {
            self.arn = arn
            self.description = description
            self.eventBusName = eventBusName
            self.eventPattern = eventPattern
            self.managedBy = managedBy
            self.name = name
            self.roleArn = roleArn
            self.scheduleExpression = scheduleExpression
            self.state = state
        }
    }
}

public struct ListRulesOutput: Swift.Sendable {
    /// Indicates whether there are additional results to retrieve. If there are no more results, the value is null.
    public var nextToken: Swift.String?
    /// The rules that match the specified criteria.
    public var rules: [EventBridgeClientTypes.Rule]?

    public init(
        nextToken: Swift.String? = nil,
        rules: [EventBridgeClientTypes.Rule]? = nil
    )
    {
        self.nextToken = nextToken
        self.rules = rules
    }
}

public struct ListTagsForResourceInput: Swift.Sendable {
    /// The ARN of the EventBridge resource for which you want to view tags.
    /// This member is required.
    public var resourceARN: Swift.String?

    public init(
        resourceARN: Swift.String? = nil
    )
    {
        self.resourceARN = resourceARN
    }
}

public struct ListTagsForResourceOutput: Swift.Sendable {
    /// The list of tag keys and values associated with the resource you specified
    public var tags: [EventBridgeClientTypes.Tag]?

    public init(
        tags: [EventBridgeClientTypes.Tag]? = nil
    )
    {
        self.tags = tags
    }
}

public struct ListTargetsByRuleInput: Swift.Sendable {
    /// The name or ARN of the event bus associated with the rule. If you omit this, the default event bus is used.
    public var eventBusName: Swift.String?
    /// The maximum number of results to return.
    public var limit: Swift.Int?
    /// The token returned by a previous call to retrieve the next set of results.
    public var nextToken: Swift.String?
    /// The name of the rule.
    /// This member is required.
    public var rule: Swift.String?

    public init(
        eventBusName: Swift.String? = nil,
        limit: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        rule: Swift.String? = nil
    )
    {
        self.eventBusName = eventBusName
        self.limit = limit
        self.nextToken = nextToken
        self.rule = rule
    }
}

extension EventBridgeClientTypes {

    /// The array properties for the submitted job, such as the size of the array. The array size can be between 2 and 10,000. If you specify array properties for a job, it becomes an array job. This parameter is used only if the target is an Batch job.
    public struct BatchArrayProperties: Swift.Sendable {
        /// The size of the array, if this is an array batch job. Valid values are integers between 2 and 10,000.
        public var size: Swift.Int

        public init(
            size: Swift.Int = 0
        )
        {
            self.size = size
        }
    }
}

extension EventBridgeClientTypes {

    /// The retry strategy to use for failed jobs, if the target is an Batch job. If you specify a retry strategy here, it overrides the retry strategy defined in the job definition.
    public struct BatchRetryStrategy: Swift.Sendable {
        /// The number of times to attempt to retry, if the job fails. Valid values are 1–10.
        public var attempts: Swift.Int

        public init(
            attempts: Swift.Int = 0
        )
        {
            self.attempts = attempts
        }
    }
}

extension EventBridgeClientTypes {

    /// The custom parameters to be used when the target is an Batch job.
    public struct BatchParameters: Swift.Sendable {
        /// The array properties for the submitted job, such as the size of the array. The array size can be between 2 and 10,000. If you specify array properties for a job, it becomes an array job. This parameter is used only if the target is an Batch job.
        public var arrayProperties: EventBridgeClientTypes.BatchArrayProperties?
        /// The ARN or name of the job definition to use if the event target is an Batch job. This job definition must already exist.
        /// This member is required.
        public var jobDefinition: Swift.String?
        /// The name to use for this execution of the job, if the target is an Batch job.
        /// This member is required.
        public var jobName: Swift.String?
        /// The retry strategy to use for failed jobs, if the target is an Batch job. The retry strategy is the number of times to retry the failed job execution. Valid values are 1–10. When you specify a retry strategy here, it overrides the retry strategy defined in the job definition.
        public var retryStrategy: EventBridgeClientTypes.BatchRetryStrategy?

        public init(
            arrayProperties: EventBridgeClientTypes.BatchArrayProperties? = nil,
            jobDefinition: Swift.String? = nil,
            jobName: Swift.String? = nil,
            retryStrategy: EventBridgeClientTypes.BatchRetryStrategy? = nil
        )
        {
            self.arrayProperties = arrayProperties
            self.jobDefinition = jobDefinition
            self.jobName = jobName
            self.retryStrategy = retryStrategy
        }
    }
}

extension EventBridgeClientTypes {

    /// The details of a capacity provider strategy. To learn more, see [CapacityProviderStrategyItem](https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_CapacityProviderStrategyItem.html) in the Amazon ECS API Reference.
    public struct CapacityProviderStrategyItem: Swift.Sendable {
        /// The base value designates how many tasks, at a minimum, to run on the specified capacity provider. Only one capacity provider in a capacity provider strategy can have a base defined. If no value is specified, the default value of 0 is used.
        public var base: Swift.Int
        /// The short name of the capacity provider.
        /// This member is required.
        public var capacityProvider: Swift.String?
        /// The weight value designates the relative percentage of the total number of tasks launched that should use the specified capacity provider. The weight value is taken into consideration after the base value, if defined, is satisfied.
        public var weight: Swift.Int

        public init(
            base: Swift.Int = 0,
            capacityProvider: Swift.String? = nil,
            weight: Swift.Int = 0
        )
        {
            self.base = base
            self.capacityProvider = capacityProvider
            self.weight = weight
        }
    }
}

extension EventBridgeClientTypes {

    public enum LaunchType: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case ec2
        case external
        case fargate
        case sdkUnknown(Swift.String)

        public static var allCases: [LaunchType] {
            return [
                .ec2,
                .external,
                .fargate
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .ec2: return "EC2"
            case .external: return "EXTERNAL"
            case .fargate: return "FARGATE"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension EventBridgeClientTypes {

    /// This structure specifies the VPC subnets and security groups for the task, and whether a public IP address is to be used. This structure is relevant only for ECS tasks that use the awsvpc network mode.
    public struct AwsVpcConfiguration: Swift.Sendable {
        /// Specifies whether the task's elastic network interface receives a public IP address. You can specify ENABLED only when LaunchType in EcsParameters is set to FARGATE.
        public var assignPublicIp: EventBridgeClientTypes.AssignPublicIp?
        /// Specifies the security groups associated with the task. These security groups must all be in the same VPC. You can specify as many as five security groups. If you do not specify a security group, the default security group for the VPC is used.
        public var securityGroups: [Swift.String]?
        /// Specifies the subnets associated with the task. These subnets must all be in the same VPC. You can specify as many as 16 subnets.
        /// This member is required.
        public var subnets: [Swift.String]?

        public init(
            assignPublicIp: EventBridgeClientTypes.AssignPublicIp? = nil,
            securityGroups: [Swift.String]? = nil,
            subnets: [Swift.String]? = nil
        )
        {
            self.assignPublicIp = assignPublicIp
            self.securityGroups = securityGroups
            self.subnets = subnets
        }
    }
}

extension EventBridgeClientTypes {

    /// This structure specifies the network configuration for an ECS task.
    public struct NetworkConfiguration: Swift.Sendable {
        /// Use this structure to specify the VPC subnets and security groups for the task, and whether a public IP address is to be used. This structure is relevant only for ECS tasks that use the awsvpc network mode.
        public var awsvpcConfiguration: EventBridgeClientTypes.AwsVpcConfiguration?

        public init(
            awsvpcConfiguration: EventBridgeClientTypes.AwsVpcConfiguration? = nil
        )
        {
            self.awsvpcConfiguration = awsvpcConfiguration
        }
    }
}

extension EventBridgeClientTypes {

    public enum PlacementConstraintType: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case distinctInstance
        case memberOf
        case sdkUnknown(Swift.String)

        public static var allCases: [PlacementConstraintType] {
            return [
                .distinctInstance,
                .memberOf
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .distinctInstance: return "distinctInstance"
            case .memberOf: return "memberOf"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension EventBridgeClientTypes {

    /// An object representing a constraint on task placement. To learn more, see [Task Placement Constraints](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-placement-constraints.html) in the Amazon Elastic Container Service Developer Guide.
    public struct PlacementConstraint: Swift.Sendable {
        /// A cluster query language expression to apply to the constraint. You cannot specify an expression if the constraint type is distinctInstance. To learn more, see [Cluster Query Language](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/cluster-query-language.html) in the Amazon Elastic Container Service Developer Guide.
        public var expression: Swift.String?
        /// The type of constraint. Use distinctInstance to ensure that each task in a particular group is running on a different container instance. Use memberOf to restrict the selection to a group of valid candidates.
        public var type: EventBridgeClientTypes.PlacementConstraintType?

        public init(
            expression: Swift.String? = nil,
            type: EventBridgeClientTypes.PlacementConstraintType? = nil
        )
        {
            self.expression = expression
            self.type = type
        }
    }
}

extension EventBridgeClientTypes {

    public enum PlacementStrategyType: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case binpack
        case random
        case spread
        case sdkUnknown(Swift.String)

        public static var allCases: [PlacementStrategyType] {
            return [
                .binpack,
                .random,
                .spread
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .binpack: return "binpack"
            case .random: return "random"
            case .spread: return "spread"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension EventBridgeClientTypes {

    /// The task placement strategy for a task or service. To learn more, see [Task Placement Strategies](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-placement-strategies.html) in the Amazon Elastic Container Service Service Developer Guide.
    public struct PlacementStrategy: Swift.Sendable {
        /// The field to apply the placement strategy against. For the spread placement strategy, valid values are instanceId (or host, which has the same effect), or any platform or custom attribute that is applied to a container instance, such as attribute:ecs.availability-zone. For the binpack placement strategy, valid values are cpu and memory. For the random placement strategy, this field is not used.
        public var field: Swift.String?
        /// The type of placement strategy. The random placement strategy randomly places tasks on available candidates. The spread placement strategy spreads placement across available candidates evenly based on the field parameter. The binpack strategy places tasks on available candidates that have the least available amount of the resource that is specified with the field parameter. For example, if you binpack on memory, a task is placed on the instance with the least amount of remaining memory (but still enough to run the task).
        public var type: EventBridgeClientTypes.PlacementStrategyType?

        public init(
            field: Swift.String? = nil,
            type: EventBridgeClientTypes.PlacementStrategyType? = nil
        )
        {
            self.field = field
            self.type = type
        }
    }
}

extension EventBridgeClientTypes {

    public enum PropagateTags: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case taskDefinition
        case sdkUnknown(Swift.String)

        public static var allCases: [PropagateTags] {
            return [
                .taskDefinition
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .taskDefinition: return "TASK_DEFINITION"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension EventBridgeClientTypes {

    /// The custom parameters to be used when the target is an Amazon ECS task.
    public struct EcsParameters: Swift.Sendable {
        /// The capacity provider strategy to use for the task. If a capacityProviderStrategy is specified, the launchType parameter must be omitted. If no capacityProviderStrategy or launchType is specified, the defaultCapacityProviderStrategy for the cluster is used.
        public var capacityProviderStrategy: [EventBridgeClientTypes.CapacityProviderStrategyItem]?
        /// Specifies whether to enable Amazon ECS managed tags for the task. For more information, see [Tagging Your Amazon ECS Resources](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-using-tags.html) in the Amazon Elastic Container Service Developer Guide.
        public var enableECSManagedTags: Swift.Bool
        /// Whether or not to enable the execute command functionality for the containers in this task. If true, this enables execute command functionality on all containers in the task.
        public var enableExecuteCommand: Swift.Bool
        /// Specifies an ECS task group for the task. The maximum length is 255 characters.
        public var group: Swift.String?
        /// Specifies the launch type on which your task is running. The launch type that you specify here must match one of the launch type (compatibilities) of the target task. The FARGATE value is supported only in the Regions where Fargate with Amazon ECS is supported. For more information, see [Fargate on Amazon ECS](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/AWS-Fargate.html) in the Amazon Elastic Container Service Developer Guide.
        public var launchType: EventBridgeClientTypes.LaunchType?
        /// Use this structure if the Amazon ECS task uses the awsvpc network mode. This structure specifies the VPC subnets and security groups associated with the task, and whether a public IP address is to be used. This structure is required if LaunchType is FARGATE because the awsvpc mode is required for Fargate tasks. If you specify NetworkConfiguration when the target ECS task does not use the awsvpc network mode, the task fails.
        public var networkConfiguration: EventBridgeClientTypes.NetworkConfiguration?
        /// An array of placement constraint objects to use for the task. You can specify up to 10 constraints per task (including constraints in the task definition and those specified at runtime).
        public var placementConstraints: [EventBridgeClientTypes.PlacementConstraint]?
        /// The placement strategy objects to use for the task. You can specify a maximum of five strategy rules per task.
        public var placementStrategy: [EventBridgeClientTypes.PlacementStrategy]?
        /// Specifies the platform version for the task. Specify only the numeric portion of the platform version, such as 1.1.0. This structure is used only if LaunchType is FARGATE. For more information about valid platform versions, see [Fargate Platform Versions](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/platform_versions.html) in the Amazon Elastic Container Service Developer Guide.
        public var platformVersion: Swift.String?
        /// Specifies whether to propagate the tags from the task definition to the task. If no value is specified, the tags are not propagated. Tags can only be propagated to the task during task creation. To add tags to a task after task creation, use the TagResource API action.
        public var propagateTags: EventBridgeClientTypes.PropagateTags?
        /// The reference ID to use for the task.
        public var referenceId: Swift.String?
        /// The metadata that you apply to the task to help you categorize and organize them. Each tag consists of a key and an optional value, both of which you define. To learn more, see [RunTask](https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_RunTask.html#ECS-RunTask-request-tags) in the Amazon ECS API Reference.
        public var tags: [EventBridgeClientTypes.Tag]?
        /// The number of tasks to create based on TaskDefinition. The default is 1.
        public var taskCount: Swift.Int?
        /// The ARN of the task definition to use if the event target is an Amazon ECS task.
        /// This member is required.
        public var taskDefinitionArn: Swift.String?

        public init(
            capacityProviderStrategy: [EventBridgeClientTypes.CapacityProviderStrategyItem]? = nil,
            enableECSManagedTags: Swift.Bool = false,
            enableExecuteCommand: Swift.Bool = false,
            group: Swift.String? = nil,
            launchType: EventBridgeClientTypes.LaunchType? = nil,
            networkConfiguration: EventBridgeClientTypes.NetworkConfiguration? = nil,
            placementConstraints: [EventBridgeClientTypes.PlacementConstraint]? = nil,
            placementStrategy: [EventBridgeClientTypes.PlacementStrategy]? = nil,
            platformVersion: Swift.String? = nil,
            propagateTags: EventBridgeClientTypes.PropagateTags? = nil,
            referenceId: Swift.String? = nil,
            tags: [EventBridgeClientTypes.Tag]? = nil,
            taskCount: Swift.Int? = nil,
            taskDefinitionArn: Swift.String? = nil
        )
        {
            self.capacityProviderStrategy = capacityProviderStrategy
            self.enableECSManagedTags = enableECSManagedTags
            self.enableExecuteCommand = enableExecuteCommand
            self.group = group
            self.launchType = launchType
            self.networkConfiguration = networkConfiguration
            self.placementConstraints = placementConstraints
            self.placementStrategy = placementStrategy
            self.platformVersion = platformVersion
            self.propagateTags = propagateTags
            self.referenceId = referenceId
            self.tags = tags
            self.taskCount = taskCount
            self.taskDefinitionArn = taskDefinitionArn
        }
    }
}

extension EventBridgeClientTypes {

    /// These are custom parameter to be used when the target is an API Gateway APIs or EventBridge ApiDestinations. In the latter case, these are merged with any InvocationParameters specified on the Connection, with any values from the Connection taking precedence.
    public struct HttpParameters: Swift.Sendable {
        /// The headers that need to be sent as part of request invoking the API Gateway API or EventBridge ApiDestination.
        public var headerParameters: [Swift.String: Swift.String]?
        /// The path parameter values to be used to populate API Gateway API or EventBridge ApiDestination path wildcards ("*").
        public var pathParameterValues: [Swift.String]?
        /// The query string keys/values that need to be sent as part of request invoking the API Gateway API or EventBridge ApiDestination.
        public var queryStringParameters: [Swift.String: Swift.String]?

        public init(
            headerParameters: [Swift.String: Swift.String]? = nil,
            pathParameterValues: [Swift.String]? = nil,
            queryStringParameters: [Swift.String: Swift.String]? = nil
        )
        {
            self.headerParameters = headerParameters
            self.pathParameterValues = pathParameterValues
            self.queryStringParameters = queryStringParameters
        }
    }
}

extension EventBridgeClientTypes {

    /// Contains the parameters needed for you to provide custom input to a target based on one or more pieces of data extracted from the event.
    public struct InputTransformer: Swift.Sendable {
        /// Map of JSON paths to be extracted from the event. You can then insert these in the template in InputTemplate to produce the output you want to be sent to the target. InputPathsMap is an array key-value pairs, where each value is a valid JSON path. You can have as many as 100 key-value pairs. You must use JSON dot notation, not bracket notation. The keys cannot start with "Amazon Web Services."
        public var inputPathsMap: [Swift.String: Swift.String]?
        /// Input template where you specify placeholders that will be filled with the values of the keys from InputPathsMap to customize the data sent to the target. Enclose each InputPathsMaps value in brackets: <value> If InputTemplate is a JSON object (surrounded by curly braces), the following restrictions apply:
        ///
        /// * The placeholder cannot be used as an object key.
        ///
        ///
        /// The following example shows the syntax for using InputPathsMap and InputTemplate.  "InputTransformer":
        ///     {
        ///
        ///
        ///     "InputPathsMap": {"instance": "$.detail.instance","status": "$.detail.status"},
        ///
        ///
        ///     "InputTemplate": " is in state "
        ///
        /// } To have the InputTemplate include quote marks within a JSON string, escape each quote marks with a slash, as in the following example:  "InputTransformer":
        ///     {
        ///
        ///
        ///     "InputPathsMap": {"instance": "$.detail.instance","status": "$.detail.status"},
        ///
        ///
        ///     "InputTemplate": " is in state \"\""
        ///
        /// } The InputTemplate can also be valid JSON with varibles in quotes or out, as in the following example:  "InputTransformer":
        ///     {
        ///
        ///
        ///     "InputPathsMap": {"instance": "$.detail.instance","status": "$.detail.status"},
        ///
        ///
        ///     "InputTemplate": '{"myInstance": ,"myStatus": " is in state \"\""}'
        ///
        ///
        ///     }
        /// This member is required.
        public var inputTemplate: Swift.String?

        public init(
            inputPathsMap: [Swift.String: Swift.String]? = nil,
            inputTemplate: Swift.String? = nil
        )
        {
            self.inputPathsMap = inputPathsMap
            self.inputTemplate = inputTemplate
        }
    }
}

extension EventBridgeClientTypes {

    /// This object enables you to specify a JSON path to extract from the event and use as the partition key for the Amazon Kinesis data stream, so that you can control the shard to which the event goes. If you do not include this parameter, the default is to use the eventId as the partition key.
    public struct KinesisParameters: Swift.Sendable {
        /// The JSON path to be extracted from the event and used as the partition key. For more information, see [Amazon Kinesis Streams Key Concepts](https://docs.aws.amazon.com/streams/latest/dev/key-concepts.html#partition-key) in the Amazon Kinesis Streams Developer Guide.
        /// This member is required.
        public var partitionKeyPath: Swift.String?

        public init(
            partitionKeyPath: Swift.String? = nil
        )
        {
            self.partitionKeyPath = partitionKeyPath
        }
    }
}

extension EventBridgeClientTypes {

    /// These are custom parameters to be used when the target is a Amazon Redshift cluster to invoke the Amazon Redshift Data API ExecuteStatement based on EventBridge events.
    public struct RedshiftDataParameters: Swift.Sendable {
        /// The name of the database. Required when authenticating using temporary credentials.
        /// This member is required.
        public var database: Swift.String?
        /// The database user name. Required when authenticating using temporary credentials.
        public var dbUser: Swift.String?
        /// The name or ARN of the secret that enables access to the database. Required when authenticating using Amazon Web Services Secrets Manager.
        public var secretManagerArn: Swift.String?
        /// The SQL statement text to run.
        public var sql: Swift.String?
        /// One or more SQL statements to run. The SQL statements are run as a single transaction. They run serially in the order of the array. Subsequent SQL statements don't start until the previous statement in the array completes. If any SQL statement fails, then because they are run as one transaction, all work is rolled back.
        public var sqls: [Swift.String]?
        /// The name of the SQL statement. You can name the SQL statement when you create it to identify the query.
        public var statementName: Swift.String?
        /// Indicates whether to send an event back to EventBridge after the SQL statement runs.
        public var withEvent: Swift.Bool

        public init(
            database: Swift.String? = nil,
            dbUser: Swift.String? = nil,
            secretManagerArn: Swift.String? = nil,
            sql: Swift.String? = nil,
            sqls: [Swift.String]? = nil,
            statementName: Swift.String? = nil,
            withEvent: Swift.Bool = false
        )
        {
            self.database = database
            self.dbUser = dbUser
            self.secretManagerArn = secretManagerArn
            self.sql = sql
            self.sqls = sqls
            self.statementName = statementName
            self.withEvent = withEvent
        }
    }
}

extension EventBridgeClientTypes.RedshiftDataParameters: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "RedshiftDataParameters(database: \(Swift.String(describing: database)), dbUser: \(Swift.String(describing: dbUser)), secretManagerArn: \(Swift.String(describing: secretManagerArn)), statementName: \(Swift.String(describing: statementName)), withEvent: \(Swift.String(describing: withEvent)), sql: \"CONTENT_REDACTED\", sqls: \"CONTENT_REDACTED\")"}
}

extension EventBridgeClientTypes {

    /// A RetryPolicy object that includes information about the retry policy settings.
    public struct RetryPolicy: Swift.Sendable {
        /// The maximum amount of time, in seconds, to continue to make retry attempts.
        public var maximumEventAgeInSeconds: Swift.Int?
        /// The maximum number of retry attempts to make before the request fails. Retry attempts continue until either the maximum number of attempts is made or until the duration of the MaximumEventAgeInSeconds is met.
        public var maximumRetryAttempts: Swift.Int?

        public init(
            maximumEventAgeInSeconds: Swift.Int? = nil,
            maximumRetryAttempts: Swift.Int? = nil
        )
        {
            self.maximumEventAgeInSeconds = maximumEventAgeInSeconds
            self.maximumRetryAttempts = maximumRetryAttempts
        }
    }
}

extension EventBridgeClientTypes {

    /// Information about the EC2 instances that are to be sent the command, specified as key-value pairs. Each RunCommandTarget block can include only one key, but this key may specify multiple values.
    public struct RunCommandTarget: Swift.Sendable {
        /// Can be either tag: tag-key or InstanceIds.
        /// This member is required.
        public var key: Swift.String?
        /// If Key is tag: tag-key, Values is a list of tag values. If Key is InstanceIds, Values is a list of Amazon EC2 instance IDs.
        /// This member is required.
        public var values: [Swift.String]?

        public init(
            key: Swift.String? = nil,
            values: [Swift.String]? = nil
        )
        {
            self.key = key
            self.values = values
        }
    }
}

extension EventBridgeClientTypes {

    /// This parameter contains the criteria (either InstanceIds or a tag) used to specify which EC2 instances are to be sent the command.
    public struct RunCommandParameters: Swift.Sendable {
        /// Currently, we support including only one RunCommandTarget block, which specifies either an array of InstanceIds or a tag.
        /// This member is required.
        public var runCommandTargets: [EventBridgeClientTypes.RunCommandTarget]?

        public init(
            runCommandTargets: [EventBridgeClientTypes.RunCommandTarget]? = nil
        )
        {
            self.runCommandTargets = runCommandTargets
        }
    }
}

extension EventBridgeClientTypes {

    /// Name/Value pair of a parameter to start execution of a SageMaker Model Building Pipeline.
    public struct SageMakerPipelineParameter: Swift.Sendable {
        /// Name of parameter to start execution of a SageMaker Model Building Pipeline.
        /// This member is required.
        public var name: Swift.String?
        /// Value of parameter to start execution of a SageMaker Model Building Pipeline.
        /// This member is required.
        public var value: Swift.String?

        public init(
            name: Swift.String? = nil,
            value: Swift.String? = nil
        )
        {
            self.name = name
            self.value = value
        }
    }
}

extension EventBridgeClientTypes {

    /// These are custom parameters to use when the target is a SageMaker Model Building Pipeline that starts based on EventBridge events.
    public struct SageMakerPipelineParameters: Swift.Sendable {
        /// List of Parameter names and values for SageMaker Model Building Pipeline execution.
        public var pipelineParameterList: [EventBridgeClientTypes.SageMakerPipelineParameter]?

        public init(
            pipelineParameterList: [EventBridgeClientTypes.SageMakerPipelineParameter]? = nil
        )
        {
            self.pipelineParameterList = pipelineParameterList
        }
    }
}

extension EventBridgeClientTypes {

    /// This structure includes the custom parameter to be used when the target is an SQS FIFO queue.
    public struct SqsParameters: Swift.Sendable {
        /// The FIFO message group ID to use as the target.
        public var messageGroupId: Swift.String?

        public init(
            messageGroupId: Swift.String? = nil
        )
        {
            self.messageGroupId = messageGroupId
        }
    }
}

extension EventBridgeClientTypes {

    /// Targets are the resources to be invoked when a rule is triggered. For a complete list of services and resources that can be set as a target, see [PutTargets](https://docs.aws.amazon.com/eventbridge/latest/APIReference/API_PutTargets.html). If you are setting the event bus of another account as the target, and that account granted permission to your account through an organization instead of directly by the account ID, then you must specify a RoleArn with proper permissions in the Target structure. For more information, see [Sending and Receiving Events Between Amazon Web Services Accounts](https://docs.aws.amazon.com/eventbridge/latest/userguide/eventbridge-cross-account-event-delivery.html) in the Amazon EventBridge User Guide.
    public struct Target: Swift.Sendable {
        /// Contains the GraphQL operation to be parsed and executed, if the event target is an AppSync API.
        public var appSyncParameters: EventBridgeClientTypes.AppSyncParameters?
        /// The Amazon Resource Name (ARN) of the target.
        /// This member is required.
        public var arn: Swift.String?
        /// If the event target is an Batch job, this contains the job definition, job name, and other parameters. For more information, see [Jobs](https://docs.aws.amazon.com/batch/latest/userguide/jobs.html) in the Batch User Guide.
        public var batchParameters: EventBridgeClientTypes.BatchParameters?
        /// The DeadLetterConfig that defines the target queue to send dead-letter queue events to.
        public var deadLetterConfig: EventBridgeClientTypes.DeadLetterConfig?
        /// Contains the Amazon ECS task definition and task count to be used, if the event target is an Amazon ECS task. For more information about Amazon ECS tasks, see [Task Definitions ](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task_defintions.html) in the Amazon EC2 Container Service Developer Guide.
        public var ecsParameters: EventBridgeClientTypes.EcsParameters?
        /// Contains the HTTP parameters to use when the target is a API Gateway endpoint or EventBridge ApiDestination. If you specify an API Gateway API or EventBridge ApiDestination as a target, you can use this parameter to specify headers, path parameters, and query string keys/values as part of your target invoking request. If you're using ApiDestinations, the corresponding Connection can also have these values configured. In case of any conflicting keys, values from the Connection take precedence.
        public var httpParameters: EventBridgeClientTypes.HttpParameters?
        /// The ID of the target within the specified rule. Use this ID to reference the target when updating the rule. We recommend using a memorable and unique string.
        /// This member is required.
        public var id: Swift.String?
        /// Valid JSON text passed to the target. In this case, nothing from the event itself is passed to the target. For more information, see [The JavaScript Object Notation (JSON) Data Interchange Format](http://www.rfc-editor.org/rfc/rfc7159.txt).
        public var input: Swift.String?
        /// The value of the JSONPath that is used for extracting part of the matched event when passing it to the target. You may use JSON dot notation or bracket notation. For more information about JSON paths, see [JSONPath](http://goessner.net/articles/JsonPath/).
        public var inputPath: Swift.String?
        /// Settings to enable you to provide custom input to a target based on certain event data. You can extract one or more key-value pairs from the event and then use that data to send customized input to the target.
        public var inputTransformer: EventBridgeClientTypes.InputTransformer?
        /// The custom parameter you can use to control the shard assignment, when the target is a Kinesis data stream. If you do not include this parameter, the default is to use the eventId as the partition key.
        public var kinesisParameters: EventBridgeClientTypes.KinesisParameters?
        /// Contains the Amazon Redshift Data API parameters to use when the target is a Amazon Redshift cluster. If you specify a Amazon Redshift Cluster as a Target, you can use this to specify parameters to invoke the Amazon Redshift Data API ExecuteStatement based on EventBridge events.
        public var redshiftDataParameters: EventBridgeClientTypes.RedshiftDataParameters?
        /// The RetryPolicy object that contains the retry policy configuration to use for the dead-letter queue.
        public var retryPolicy: EventBridgeClientTypes.RetryPolicy?
        /// The Amazon Resource Name (ARN) of the IAM role to be used for this target when the rule is triggered. If one rule triggers multiple targets, you can use a different IAM role for each target.
        public var roleArn: Swift.String?
        /// Parameters used when you are using the rule to invoke Amazon EC2 Run Command.
        public var runCommandParameters: EventBridgeClientTypes.RunCommandParameters?
        /// Contains the SageMaker Model Building Pipeline parameters to start execution of a SageMaker Model Building Pipeline. If you specify a SageMaker Model Building Pipeline as a target, you can use this to specify parameters to start a pipeline execution based on EventBridge events.
        public var sageMakerPipelineParameters: EventBridgeClientTypes.SageMakerPipelineParameters?
        /// Contains the message group ID to use when the target is a FIFO queue. If you specify an SQS FIFO queue as a target, the queue must have content-based deduplication enabled.
        public var sqsParameters: EventBridgeClientTypes.SqsParameters?

        public init(
            appSyncParameters: EventBridgeClientTypes.AppSyncParameters? = nil,
            arn: Swift.String? = nil,
            batchParameters: EventBridgeClientTypes.BatchParameters? = nil,
            deadLetterConfig: EventBridgeClientTypes.DeadLetterConfig? = nil,
            ecsParameters: EventBridgeClientTypes.EcsParameters? = nil,
            httpParameters: EventBridgeClientTypes.HttpParameters? = nil,
            id: Swift.String? = nil,
            input: Swift.String? = nil,
            inputPath: Swift.String? = nil,
            inputTransformer: EventBridgeClientTypes.InputTransformer? = nil,
            kinesisParameters: EventBridgeClientTypes.KinesisParameters? = nil,
            redshiftDataParameters: EventBridgeClientTypes.RedshiftDataParameters? = nil,
            retryPolicy: EventBridgeClientTypes.RetryPolicy? = nil,
            roleArn: Swift.String? = nil,
            runCommandParameters: EventBridgeClientTypes.RunCommandParameters? = nil,
            sageMakerPipelineParameters: EventBridgeClientTypes.SageMakerPipelineParameters? = nil,
            sqsParameters: EventBridgeClientTypes.SqsParameters? = nil
        )
        {
            self.appSyncParameters = appSyncParameters
            self.arn = arn
            self.batchParameters = batchParameters
            self.deadLetterConfig = deadLetterConfig
            self.ecsParameters = ecsParameters
            self.httpParameters = httpParameters
            self.id = id
            self.input = input
            self.inputPath = inputPath
            self.inputTransformer = inputTransformer
            self.kinesisParameters = kinesisParameters
            self.redshiftDataParameters = redshiftDataParameters
            self.retryPolicy = retryPolicy
            self.roleArn = roleArn
            self.runCommandParameters = runCommandParameters
            self.sageMakerPipelineParameters = sageMakerPipelineParameters
            self.sqsParameters = sqsParameters
        }
    }
}

public struct ListTargetsByRuleOutput: Swift.Sendable {
    /// Indicates whether there are additional results to retrieve. If there are no more results, the value is null.
    public var nextToken: Swift.String?
    /// The targets assigned to the rule.
    public var targets: [EventBridgeClientTypes.Target]?

    public init(
        nextToken: Swift.String? = nil,
        targets: [EventBridgeClientTypes.Target]? = nil
    )
    {
        self.nextToken = nextToken
        self.targets = targets
    }
}

extension EventBridgeClientTypes {

    /// Represents an event to be submitted.
    public struct PutEventsRequestEntry: Swift.Sendable {
        /// A valid JSON object. There is no other schema imposed. The JSON object may contain fields and nested sub-objects. Detail, DetailType, and Source are required for EventBridge to successfully send an event to an event bus. If you include event entries in a request that do not include each of those properties, EventBridge fails that entry. If you submit a request in which none of the entries have each of these properties, EventBridge fails the entire request.
        public var detail: Swift.String?
        /// Free-form string, with a maximum of 128 characters, used to decide what fields to expect in the event detail. Detail, DetailType, and Source are required for EventBridge to successfully send an event to an event bus. If you include event entries in a request that do not include each of those properties, EventBridge fails that entry. If you submit a request in which none of the entries have each of these properties, EventBridge fails the entire request.
        public var detailType: Swift.String?
        /// The name or ARN of the event bus to receive the event. Only the rules that are associated with this event bus are used to match the event. If you omit this, the default event bus is used. If you're using a global endpoint with a custom bus, you can enter either the name or Amazon Resource Name (ARN) of the event bus in either the primary or secondary Region here. EventBridge then determines the corresponding event bus in the other Region based on the endpoint referenced by the EndpointId. Specifying the event bus ARN is preferred.
        public var eventBusName: Swift.String?
        /// Amazon Web Services resources, identified by Amazon Resource Name (ARN), which the event primarily concerns. Any number, including zero, may be present.
        public var resources: [Swift.String]?
        /// The source of the event. Detail, DetailType, and Source are required for EventBridge to successfully send an event to an event bus. If you include event entries in a request that do not include each of those properties, EventBridge fails that entry. If you submit a request in which none of the entries have each of these properties, EventBridge fails the entire request.
        public var source: Swift.String?
        /// The time stamp of the event, per [RFC3339](https://www.rfc-editor.org/rfc/rfc3339.txt). If no time stamp is provided, the time stamp of the [PutEvents](https://docs.aws.amazon.com/eventbridge/latest/APIReference/API_PutEvents.html) call is used.
        public var time: Foundation.Date?
        /// An X-Ray trace header, which is an http header (X-Amzn-Trace-Id) that contains the trace-id associated with the event. To learn more about X-Ray trace headers, see [Tracing header](https://docs.aws.amazon.com/xray/latest/devguide/xray-concepts.html#xray-concepts-tracingheader) in the X-Ray Developer Guide.
        public var traceHeader: Swift.String?

        public init(
            detail: Swift.String? = nil,
            detailType: Swift.String? = nil,
            eventBusName: Swift.String? = nil,
            resources: [Swift.String]? = nil,
            source: Swift.String? = nil,
            time: Foundation.Date? = nil,
            traceHeader: Swift.String? = nil
        )
        {
            self.detail = detail
            self.detailType = detailType
            self.eventBusName = eventBusName
            self.resources = resources
            self.source = source
            self.time = time
            self.traceHeader = traceHeader
        }
    }
}

public struct PutEventsInput: Swift.Sendable {
    /// The URL subdomain of the endpoint. For example, if the URL for Endpoint is https://abcde.veo.endpoints.event.amazonaws.com, then the EndpointId is abcde.veo. When using Java, you must include auth-crt on the class path.
    public var endpointId: Swift.String?
    /// The entry that defines an event in your system. You can specify several parameters for the entry such as the source and type of the event, resources associated with the event, and so on.
    /// This member is required.
    public var entries: [EventBridgeClientTypes.PutEventsRequestEntry]?

    public init(
        endpointId: Swift.String? = nil,
        entries: [EventBridgeClientTypes.PutEventsRequestEntry]? = nil
    )
    {
        self.endpointId = endpointId
        self.entries = entries
    }
}

extension EventBridgeClientTypes {

    /// Represents the results of an event submitted to an event bus. If the submission was successful, the entry has the event ID in it. Otherwise, you can use the error code and error message to identify the problem with the entry. For information about the errors that are common to all actions, see [Common Errors](https://docs.aws.amazon.com/eventbridge/latest/APIReference/CommonErrors.html).
    public struct PutEventsResultEntry: Swift.Sendable {
        /// The error code that indicates why the event submission failed. Retryable errors include:
        ///
        /// * [InternalFailure](https://docs.aws.amazon.com/eventbridge/latest/APIReference/CommonErrors.html) The request processing has failed because of an unknown error, exception or failure.
        ///
        /// * [ThrottlingException](https://docs.aws.amazon.com/eventbridge/latest/APIReference/CommonErrors.html) The request was denied due to request throttling.
        ///
        ///
        /// Non-retryable errors include:
        ///
        /// * [AccessDeniedException](https://docs.aws.amazon.com/eventbridge/latest/APIReference/CommonErrors.html) You do not have sufficient access to perform this action.
        ///
        /// * InvalidAccountIdException The account ID provided is not valid.
        ///
        /// * InvalidArgument A specified parameter is not valid.
        ///
        /// * MalformedDetail The JSON provided is not valid.
        ///
        /// * RedactionFailure Redacting the CloudTrail event failed.
        ///
        /// * NotAuthorizedForSourceException You do not have permissions to publish events with this source onto this event bus.
        ///
        /// * NotAuthorizedForDetailTypeException You do not have permissions to publish events with this detail type onto this event bus.
        public var errorCode: Swift.String?
        /// The error message that explains why the event submission failed.
        public var errorMessage: Swift.String?
        /// The ID of the event.
        public var eventId: Swift.String?

        public init(
            errorCode: Swift.String? = nil,
            errorMessage: Swift.String? = nil,
            eventId: Swift.String? = nil
        )
        {
            self.errorCode = errorCode
            self.errorMessage = errorMessage
            self.eventId = eventId
        }
    }
}

public struct PutEventsOutput: Swift.Sendable {
    /// The successfully and unsuccessfully ingested events results. If the ingestion was successful, the entry has the event ID in it. Otherwise, you can use the error code and error message to identify the problem with the entry. For each record, the index of the response element is the same as the index in the request array.
    public var entries: [EventBridgeClientTypes.PutEventsResultEntry]?
    /// The number of failed entries.
    public var failedEntryCount: Swift.Int

    public init(
        entries: [EventBridgeClientTypes.PutEventsResultEntry]? = nil,
        failedEntryCount: Swift.Int = 0
    )
    {
        self.entries = entries
        self.failedEntryCount = failedEntryCount
    }
}

extension EventBridgeClientTypes {

    /// The details about an event generated by an SaaS partner.
    public struct PutPartnerEventsRequestEntry: Swift.Sendable {
        /// A valid JSON string. There is no other schema imposed. The JSON string may contain fields and nested sub-objects. Detail, DetailType, and Source are required for EventBridge to successfully send an event to an event bus. If you include event entries in a request that do not include each of those properties, EventBridge fails that entry. If you submit a request in which none of the entries have each of these properties, EventBridge fails the entire request.
        public var detail: Swift.String?
        /// A free-form string, with a maximum of 128 characters, used to decide what fields to expect in the event detail. Detail, DetailType, and Source are required for EventBridge to successfully send an event to an event bus. If you include event entries in a request that do not include each of those properties, EventBridge fails that entry. If you submit a request in which none of the entries have each of these properties, EventBridge fails the entire request.
        public var detailType: Swift.String?
        /// Amazon Web Services resources, identified by Amazon Resource Name (ARN), which the event primarily concerns. Any number, including zero, may be present.
        public var resources: [Swift.String]?
        /// The event source that is generating the entry. Detail, DetailType, and Source are required for EventBridge to successfully send an event to an event bus. If you include event entries in a request that do not include each of those properties, EventBridge fails that entry. If you submit a request in which none of the entries have each of these properties, EventBridge fails the entire request.
        public var source: Swift.String?
        /// The date and time of the event.
        public var time: Foundation.Date?

        public init(
            detail: Swift.String? = nil,
            detailType: Swift.String? = nil,
            resources: [Swift.String]? = nil,
            source: Swift.String? = nil,
            time: Foundation.Date? = nil
        )
        {
            self.detail = detail
            self.detailType = detailType
            self.resources = resources
            self.source = source
            self.time = time
        }
    }
}

public struct PutPartnerEventsInput: Swift.Sendable {
    /// The list of events to write to the event bus.
    /// This member is required.
    public var entries: [EventBridgeClientTypes.PutPartnerEventsRequestEntry]?

    public init(
        entries: [EventBridgeClientTypes.PutPartnerEventsRequestEntry]? = nil
    )
    {
        self.entries = entries
    }
}

extension EventBridgeClientTypes {

    /// The result of an event entry the partner submitted in this request. If the event was successfully submitted, the entry has the event ID in it. Otherwise, you can use the error code and error message to identify the problem with the entry.
    public struct PutPartnerEventsResultEntry: Swift.Sendable {
        /// The error code that indicates why the event submission failed.
        public var errorCode: Swift.String?
        /// The error message that explains why the event submission failed.
        public var errorMessage: Swift.String?
        /// The ID of the event.
        public var eventId: Swift.String?

        public init(
            errorCode: Swift.String? = nil,
            errorMessage: Swift.String? = nil,
            eventId: Swift.String? = nil
        )
        {
            self.errorCode = errorCode
            self.errorMessage = errorMessage
            self.eventId = eventId
        }
    }
}

public struct PutPartnerEventsOutput: Swift.Sendable {
    /// The results for each event entry the partner submitted in this request. If the event was successfully submitted, the entry has the event ID in it. Otherwise, you can use the error code and error message to identify the problem with the entry. For each record, the index of the response element is the same as the index in the request array.
    public var entries: [EventBridgeClientTypes.PutPartnerEventsResultEntry]?
    /// The number of events from this operation that could not be written to the partner event bus.
    public var failedEntryCount: Swift.Int

    public init(
        entries: [EventBridgeClientTypes.PutPartnerEventsResultEntry]? = nil,
        failedEntryCount: Swift.Int = 0
    )
    {
        self.entries = entries
        self.failedEntryCount = failedEntryCount
    }
}

/// The event bus policy is too long. For more information, see the limits.
public struct PolicyLengthExceededException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "PolicyLengthExceededException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension EventBridgeClientTypes {

    /// A JSON string which you can use to limit the event bus permissions you are granting to only accounts that fulfill the condition. Currently, the only supported condition is membership in a certain Amazon Web Services organization. The string must contain Type, Key, and Value fields. The Value field specifies the ID of the Amazon Web Services organization. Following is an example value for Condition: '{"Type" : "StringEquals", "Key": "aws:PrincipalOrgID", "Value": "o-1234567890"}'
    public struct Condition: Swift.Sendable {
        /// Specifies the key for the condition. Currently the only supported key is aws:PrincipalOrgID.
        /// This member is required.
        public var key: Swift.String?
        /// Specifies the type of condition. Currently the only supported value is StringEquals.
        /// This member is required.
        public var type: Swift.String?
        /// Specifies the value for the key. Currently, this must be the ID of the organization.
        /// This member is required.
        public var value: Swift.String?

        public init(
            key: Swift.String? = nil,
            type: Swift.String? = nil,
            value: Swift.String? = nil
        )
        {
            self.key = key
            self.type = type
            self.value = value
        }
    }
}

public struct PutPermissionInput: Swift.Sendable {
    /// The action that you are enabling the other account to perform.
    public var action: Swift.String?
    /// This parameter enables you to limit the permission to accounts that fulfill a certain condition, such as being a member of a certain Amazon Web Services organization. For more information about Amazon Web Services Organizations, see [What Is Amazon Web Services Organizations](https://docs.aws.amazon.com/organizations/latest/userguide/orgs_introduction.html) in the Amazon Web Services Organizations User Guide. If you specify Condition with an Amazon Web Services organization ID, and specify "*" as the value for Principal, you grant permission to all the accounts in the named organization. The Condition is a JSON string which must contain Type, Key, and Value fields.
    public var condition: EventBridgeClientTypes.Condition?
    /// The name of the event bus associated with the rule. If you omit this, the default event bus is used.
    public var eventBusName: Swift.String?
    /// A JSON string that describes the permission policy statement. You can include a Policy parameter in the request instead of using the StatementId, Action, Principal, or Condition parameters.
    public var policy: Swift.String?
    /// The 12-digit Amazon Web Services account ID that you are permitting to put events to your default event bus. Specify "*" to permit any account to put events to your default event bus. If you specify "*" without specifying Condition, avoid creating rules that may match undesirable events. To create more secure rules, make sure that the event pattern for each rule contains an account field with a specific account ID from which to receive events. Rules with an account field do not match any events sent from other accounts.
    public var principal: Swift.String?
    /// An identifier string for the external account that you are granting permissions to. If you later want to revoke the permission for this external account, specify this StatementId when you run [RemovePermission](https://docs.aws.amazon.com/eventbridge/latest/APIReference/API_RemovePermission.html). Each StatementId must be unique.
    public var statementId: Swift.String?

    public init(
        action: Swift.String? = nil,
        condition: EventBridgeClientTypes.Condition? = nil,
        eventBusName: Swift.String? = nil,
        policy: Swift.String? = nil,
        principal: Swift.String? = nil,
        statementId: Swift.String? = nil
    )
    {
        self.action = action
        self.condition = condition
        self.eventBusName = eventBusName
        self.policy = policy
        self.principal = principal
        self.statementId = statementId
    }
}

public struct PutRuleInput: Swift.Sendable {
    /// A description of the rule.
    public var description: Swift.String?
    /// The name or ARN of the event bus to associate with this rule. If you omit this, the default event bus is used.
    public var eventBusName: Swift.String?
    /// The event pattern. For more information, see [Amazon EventBridge event patterns](https://docs.aws.amazon.com/eventbridge/latest/userguide/eb-event-patterns.html) in the Amazon EventBridge User Guide .
    public var eventPattern: Swift.String?
    /// The name of the rule that you are creating or updating.
    /// This member is required.
    public var name: Swift.String?
    /// The Amazon Resource Name (ARN) of the IAM role associated with the rule. If you're setting an event bus in another account as the target and that account granted permission to your account through an organization instead of directly by the account ID, you must specify a RoleArn with proper permissions in the Target structure, instead of here in this parameter.
    public var roleArn: Swift.String?
    /// The scheduling expression. For example, "cron(0 20 * * ? *)" or "rate(5 minutes)".
    public var scheduleExpression: Swift.String?
    /// The state of the rule. Valid values include:
    ///
    /// * DISABLED: The rule is disabled. EventBridge does not match any events against the rule.
    ///
    /// * ENABLED: The rule is enabled. EventBridge matches events against the rule, except for Amazon Web Services management events delivered through CloudTrail.
    ///
    /// * ENABLED_WITH_ALL_CLOUDTRAIL_MANAGEMENT_EVENTS: The rule is enabled for all events, including Amazon Web Services management events delivered through CloudTrail. Management events provide visibility into management operations that are performed on resources in your Amazon Web Services account. These are also known as control plane operations. For more information, see [Logging management events](https://docs.aws.amazon.com/awscloudtrail/latest/userguide/logging-management-events-with-cloudtrail.html#logging-management-events) in the CloudTrail User Guide, and [Filtering management events from Amazon Web Services services](https://docs.aws.amazon.com/eventbridge/latest/userguide/eb-service-event.html#eb-service-event-cloudtrail) in the Amazon EventBridge User Guide . This value is only valid for rules on the [default](https://docs.aws.amazon.com/eventbridge/latest/userguide/eb-what-is-how-it-works-concepts.html#eb-bus-concepts-buses) event bus or [custom event buses](https://docs.aws.amazon.com/eventbridge/latest/userguide/eb-create-event-bus.html). It does not apply to [partner event buses](https://docs.aws.amazon.com/eventbridge/latest/userguide/eb-saas.html).
    public var state: EventBridgeClientTypes.RuleState?
    /// The list of key-value pairs to associate with the rule.
    public var tags: [EventBridgeClientTypes.Tag]?

    public init(
        description: Swift.String? = nil,
        eventBusName: Swift.String? = nil,
        eventPattern: Swift.String? = nil,
        name: Swift.String? = nil,
        roleArn: Swift.String? = nil,
        scheduleExpression: Swift.String? = nil,
        state: EventBridgeClientTypes.RuleState? = nil,
        tags: [EventBridgeClientTypes.Tag]? = nil
    )
    {
        self.description = description
        self.eventBusName = eventBusName
        self.eventPattern = eventPattern
        self.name = name
        self.roleArn = roleArn
        self.scheduleExpression = scheduleExpression
        self.state = state
        self.tags = tags
    }
}

public struct PutRuleOutput: Swift.Sendable {
    /// The Amazon Resource Name (ARN) of the rule.
    public var ruleArn: Swift.String?

    public init(
        ruleArn: Swift.String? = nil
    )
    {
        self.ruleArn = ruleArn
    }
}

public struct PutTargetsInput: Swift.Sendable {
    /// The name or ARN of the event bus associated with the rule. If you omit this, the default event bus is used.
    public var eventBusName: Swift.String?
    /// The name of the rule.
    /// This member is required.
    public var rule: Swift.String?
    /// The targets to update or add to the rule.
    /// This member is required.
    public var targets: [EventBridgeClientTypes.Target]?

    public init(
        eventBusName: Swift.String? = nil,
        rule: Swift.String? = nil,
        targets: [EventBridgeClientTypes.Target]? = nil
    )
    {
        self.eventBusName = eventBusName
        self.rule = rule
        self.targets = targets
    }
}

extension EventBridgeClientTypes {

    /// Represents a target that failed to be added to a rule.
    public struct PutTargetsResultEntry: Swift.Sendable {
        /// The error code that indicates why the target addition failed. If the value is ConcurrentModificationException, too many requests were made at the same time.
        public var errorCode: Swift.String?
        /// The error message that explains why the target addition failed.
        public var errorMessage: Swift.String?
        /// The ID of the target.
        public var targetId: Swift.String?

        public init(
            errorCode: Swift.String? = nil,
            errorMessage: Swift.String? = nil,
            targetId: Swift.String? = nil
        )
        {
            self.errorCode = errorCode
            self.errorMessage = errorMessage
            self.targetId = targetId
        }
    }
}

public struct PutTargetsOutput: Swift.Sendable {
    /// The failed target entries.
    public var failedEntries: [EventBridgeClientTypes.PutTargetsResultEntry]?
    /// The number of failed entries.
    public var failedEntryCount: Swift.Int

    public init(
        failedEntries: [EventBridgeClientTypes.PutTargetsResultEntry]? = nil,
        failedEntryCount: Swift.Int = 0
    )
    {
        self.failedEntries = failedEntries
        self.failedEntryCount = failedEntryCount
    }
}

public struct RemovePermissionInput: Swift.Sendable {
    /// The name of the event bus to revoke permissions for. If you omit this, the default event bus is used.
    public var eventBusName: Swift.String?
    /// Specifies whether to remove all permissions.
    public var removeAllPermissions: Swift.Bool?
    /// The statement ID corresponding to the account that is no longer allowed to put events to the default event bus.
    public var statementId: Swift.String?

    public init(
        eventBusName: Swift.String? = nil,
        removeAllPermissions: Swift.Bool? = false,
        statementId: Swift.String? = nil
    )
    {
        self.eventBusName = eventBusName
        self.removeAllPermissions = removeAllPermissions
        self.statementId = statementId
    }
}

public struct RemoveTargetsInput: Swift.Sendable {
    /// The name or ARN of the event bus associated with the rule. If you omit this, the default event bus is used.
    public var eventBusName: Swift.String?
    /// If this is a managed rule, created by an Amazon Web Services service on your behalf, you must specify Force as True to remove targets. This parameter is ignored for rules that are not managed rules. You can check whether a rule is a managed rule by using DescribeRule or ListRules and checking the ManagedBy field of the response.
    public var force: Swift.Bool?
    /// The IDs of the targets to remove from the rule.
    /// This member is required.
    public var ids: [Swift.String]?
    /// The name of the rule.
    /// This member is required.
    public var rule: Swift.String?

    public init(
        eventBusName: Swift.String? = nil,
        force: Swift.Bool? = false,
        ids: [Swift.String]? = nil,
        rule: Swift.String? = nil
    )
    {
        self.eventBusName = eventBusName
        self.force = force
        self.ids = ids
        self.rule = rule
    }
}

extension EventBridgeClientTypes {

    /// Represents a target that failed to be removed from a rule.
    public struct RemoveTargetsResultEntry: Swift.Sendable {
        /// The error code that indicates why the target removal failed. If the value is ConcurrentModificationException, too many requests were made at the same time.
        public var errorCode: Swift.String?
        /// The error message that explains why the target removal failed.
        public var errorMessage: Swift.String?
        /// The ID of the target.
        public var targetId: Swift.String?

        public init(
            errorCode: Swift.String? = nil,
            errorMessage: Swift.String? = nil,
            targetId: Swift.String? = nil
        )
        {
            self.errorCode = errorCode
            self.errorMessage = errorMessage
            self.targetId = targetId
        }
    }
}

public struct RemoveTargetsOutput: Swift.Sendable {
    /// The failed target entries.
    public var failedEntries: [EventBridgeClientTypes.RemoveTargetsResultEntry]?
    /// The number of failed entries.
    public var failedEntryCount: Swift.Int

    public init(
        failedEntries: [EventBridgeClientTypes.RemoveTargetsResultEntry]? = nil,
        failedEntryCount: Swift.Int = 0
    )
    {
        self.failedEntries = failedEntries
        self.failedEntryCount = failedEntryCount
    }
}

public struct StartReplayInput: Swift.Sendable {
    /// A description for the replay to start.
    public var description: Swift.String?
    /// A ReplayDestination object that includes details about the destination for the replay.
    /// This member is required.
    public var destination: EventBridgeClientTypes.ReplayDestination?
    /// A time stamp for the time to stop replaying events. Only events that occurred between the EventStartTime and EventEndTime are replayed.
    /// This member is required.
    public var eventEndTime: Foundation.Date?
    /// The ARN of the archive to replay events from.
    /// This member is required.
    public var eventSourceArn: Swift.String?
    /// A time stamp for the time to start replaying events. Only events that occurred between the EventStartTime and EventEndTime are replayed.
    /// This member is required.
    public var eventStartTime: Foundation.Date?
    /// The name of the replay to start.
    /// This member is required.
    public var replayName: Swift.String?

    public init(
        description: Swift.String? = nil,
        destination: EventBridgeClientTypes.ReplayDestination? = nil,
        eventEndTime: Foundation.Date? = nil,
        eventSourceArn: Swift.String? = nil,
        eventStartTime: Foundation.Date? = nil,
        replayName: Swift.String? = nil
    )
    {
        self.description = description
        self.destination = destination
        self.eventEndTime = eventEndTime
        self.eventSourceArn = eventSourceArn
        self.eventStartTime = eventStartTime
        self.replayName = replayName
    }
}

public struct StartReplayOutput: Swift.Sendable {
    /// The ARN of the replay.
    public var replayArn: Swift.String?
    /// The time at which the replay started.
    public var replayStartTime: Foundation.Date?
    /// The state of the replay.
    public var state: EventBridgeClientTypes.ReplayState?
    /// The reason that the replay is in the state.
    public var stateReason: Swift.String?

    public init(
        replayArn: Swift.String? = nil,
        replayStartTime: Foundation.Date? = nil,
        state: EventBridgeClientTypes.ReplayState? = nil,
        stateReason: Swift.String? = nil
    )
    {
        self.replayArn = replayArn
        self.replayStartTime = replayStartTime
        self.state = state
        self.stateReason = stateReason
    }
}

public struct TagResourceInput: Swift.Sendable {
    /// The ARN of the EventBridge resource that you're adding tags to.
    /// This member is required.
    public var resourceARN: Swift.String?
    /// The list of key-value pairs to associate with the resource.
    /// This member is required.
    public var tags: [EventBridgeClientTypes.Tag]?

    public init(
        resourceARN: Swift.String? = nil,
        tags: [EventBridgeClientTypes.Tag]? = nil
    )
    {
        self.resourceARN = resourceARN
        self.tags = tags
    }
}

public struct TagResourceOutput: Swift.Sendable {

    public init() { }
}

public struct TestEventPatternInput: Swift.Sendable {
    /// The event, in JSON format, to test against the event pattern. The JSON must follow the format specified in [Amazon Web Services Events](https://docs.aws.amazon.com/eventbridge/latest/userguide/aws-events.html), and the following fields are mandatory:
    ///
    /// * id
    ///
    /// * account
    ///
    /// * source
    ///
    /// * time
    ///
    /// * region
    ///
    /// * resources
    ///
    /// * detail-type
    /// This member is required.
    public var event: Swift.String?
    /// The event pattern. For more information, see [Events and Event Patterns](https://docs.aws.amazon.com/eventbridge/latest/userguide/eventbridge-and-event-patterns.html) in the Amazon EventBridge User Guide .
    /// This member is required.
    public var eventPattern: Swift.String?

    public init(
        event: Swift.String? = nil,
        eventPattern: Swift.String? = nil
    )
    {
        self.event = event
        self.eventPattern = eventPattern
    }
}

public struct TestEventPatternOutput: Swift.Sendable {
    /// Indicates whether the event matches the event pattern.
    public var result: Swift.Bool

    public init(
        result: Swift.Bool = false
    )
    {
        self.result = result
    }
}

public struct UntagResourceInput: Swift.Sendable {
    /// The ARN of the EventBridge resource from which you are removing tags.
    /// This member is required.
    public var resourceARN: Swift.String?
    /// The list of tag keys to remove from the resource.
    /// This member is required.
    public var tagKeys: [Swift.String]?

    public init(
        resourceARN: Swift.String? = nil,
        tagKeys: [Swift.String]? = nil
    )
    {
        self.resourceARN = resourceARN
        self.tagKeys = tagKeys
    }
}

public struct UntagResourceOutput: Swift.Sendable {

    public init() { }
}

public struct UpdateApiDestinationInput: Swift.Sendable {
    /// The ARN of the connection to use for the API destination.
    public var connectionArn: Swift.String?
    /// The name of the API destination to update.
    public var description: Swift.String?
    /// The method to use for the API destination.
    public var httpMethod: EventBridgeClientTypes.ApiDestinationHttpMethod?
    /// The URL to the endpoint to use for the API destination.
    public var invocationEndpoint: Swift.String?
    /// The maximum number of invocations per second to send to the API destination.
    public var invocationRateLimitPerSecond: Swift.Int?
    /// The name of the API destination to update.
    /// This member is required.
    public var name: Swift.String?

    public init(
        connectionArn: Swift.String? = nil,
        description: Swift.String? = nil,
        httpMethod: EventBridgeClientTypes.ApiDestinationHttpMethod? = nil,
        invocationEndpoint: Swift.String? = nil,
        invocationRateLimitPerSecond: Swift.Int? = nil,
        name: Swift.String? = nil
    )
    {
        self.connectionArn = connectionArn
        self.description = description
        self.httpMethod = httpMethod
        self.invocationEndpoint = invocationEndpoint
        self.invocationRateLimitPerSecond = invocationRateLimitPerSecond
        self.name = name
    }
}

public struct UpdateApiDestinationOutput: Swift.Sendable {
    /// The ARN of the API destination that was updated.
    public var apiDestinationArn: Swift.String?
    /// The state of the API destination that was updated.
    public var apiDestinationState: EventBridgeClientTypes.ApiDestinationState?
    /// A time stamp for the time that the API destination was created.
    public var creationTime: Foundation.Date?
    /// A time stamp for the time that the API destination was last modified.
    public var lastModifiedTime: Foundation.Date?

    public init(
        apiDestinationArn: Swift.String? = nil,
        apiDestinationState: EventBridgeClientTypes.ApiDestinationState? = nil,
        creationTime: Foundation.Date? = nil,
        lastModifiedTime: Foundation.Date? = nil
    )
    {
        self.apiDestinationArn = apiDestinationArn
        self.apiDestinationState = apiDestinationState
        self.creationTime = creationTime
        self.lastModifiedTime = lastModifiedTime
    }
}

public struct UpdateArchiveInput: Swift.Sendable {
    /// The name of the archive to update.
    /// This member is required.
    public var archiveName: Swift.String?
    /// The description for the archive.
    public var description: Swift.String?
    /// The event pattern to use to filter events sent to the archive.
    public var eventPattern: Swift.String?
    /// The number of days to retain events in the archive.
    public var retentionDays: Swift.Int?

    public init(
        archiveName: Swift.String? = nil,
        description: Swift.String? = nil,
        eventPattern: Swift.String? = nil,
        retentionDays: Swift.Int? = nil
    )
    {
        self.archiveName = archiveName
        self.description = description
        self.eventPattern = eventPattern
        self.retentionDays = retentionDays
    }
}

public struct UpdateArchiveOutput: Swift.Sendable {
    /// The ARN of the archive.
    public var archiveArn: Swift.String?
    /// The time at which the archive was updated.
    public var creationTime: Foundation.Date?
    /// The state of the archive.
    public var state: EventBridgeClientTypes.ArchiveState?
    /// The reason that the archive is in the current state.
    public var stateReason: Swift.String?

    public init(
        archiveArn: Swift.String? = nil,
        creationTime: Foundation.Date? = nil,
        state: EventBridgeClientTypes.ArchiveState? = nil,
        stateReason: Swift.String? = nil
    )
    {
        self.archiveArn = archiveArn
        self.creationTime = creationTime
        self.state = state
        self.stateReason = stateReason
    }
}

extension EventBridgeClientTypes {

    /// Contains the API key authorization parameters to use to update the connection.
    public struct UpdateConnectionApiKeyAuthRequestParameters: Swift.Sendable {
        /// The name of the API key to use for authorization.
        public var apiKeyName: Swift.String?
        /// The value associated with teh API key to use for authorization.
        public var apiKeyValue: Swift.String?

        public init(
            apiKeyName: Swift.String? = nil,
            apiKeyValue: Swift.String? = nil
        )
        {
            self.apiKeyName = apiKeyName
            self.apiKeyValue = apiKeyValue
        }
    }
}

extension EventBridgeClientTypes.UpdateConnectionApiKeyAuthRequestParameters: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UpdateConnectionApiKeyAuthRequestParameters(apiKeyName: \(Swift.String(describing: apiKeyName)), apiKeyValue: \"CONTENT_REDACTED\")"}
}

extension EventBridgeClientTypes {

    /// Contains the Basic authorization parameters for the connection.
    public struct UpdateConnectionBasicAuthRequestParameters: Swift.Sendable {
        /// The password associated with the user name to use for Basic authorization.
        public var password: Swift.String?
        /// The user name to use for Basic authorization.
        public var username: Swift.String?

        public init(
            password: Swift.String? = nil,
            username: Swift.String? = nil
        )
        {
            self.password = password
            self.username = username
        }
    }
}

extension EventBridgeClientTypes.UpdateConnectionBasicAuthRequestParameters: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UpdateConnectionBasicAuthRequestParameters(username: \(Swift.String(describing: username)), password: \"CONTENT_REDACTED\")"}
}

extension EventBridgeClientTypes {

    /// Contains the OAuth authorization parameters to use for the connection.
    public struct UpdateConnectionOAuthClientRequestParameters: Swift.Sendable {
        /// The client ID to use for OAuth authorization.
        public var clientID: Swift.String?
        /// The client secret assciated with the client ID to use for OAuth authorization.
        public var clientSecret: Swift.String?

        public init(
            clientID: Swift.String? = nil,
            clientSecret: Swift.String? = nil
        )
        {
            self.clientID = clientID
            self.clientSecret = clientSecret
        }
    }
}

extension EventBridgeClientTypes.UpdateConnectionOAuthClientRequestParameters: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UpdateConnectionOAuthClientRequestParameters(clientID: \(Swift.String(describing: clientID)), clientSecret: \"CONTENT_REDACTED\")"}
}

extension EventBridgeClientTypes {

    /// Contains the OAuth request parameters to use for the connection.
    public struct UpdateConnectionOAuthRequestParameters: Swift.Sendable {
        /// The URL to the authorization endpoint when OAuth is specified as the authorization type.
        public var authorizationEndpoint: Swift.String?
        /// A UpdateConnectionOAuthClientRequestParameters object that contains the client parameters to use for the connection when OAuth is specified as the authorization type.
        public var clientParameters: EventBridgeClientTypes.UpdateConnectionOAuthClientRequestParameters?
        /// The method used to connect to the HTTP endpoint.
        public var httpMethod: EventBridgeClientTypes.ConnectionOAuthHttpMethod?
        /// The additional HTTP parameters used for the OAuth authorization request.
        public var oAuthHttpParameters: EventBridgeClientTypes.ConnectionHttpParameters?

        public init(
            authorizationEndpoint: Swift.String? = nil,
            clientParameters: EventBridgeClientTypes.UpdateConnectionOAuthClientRequestParameters? = nil,
            httpMethod: EventBridgeClientTypes.ConnectionOAuthHttpMethod? = nil,
            oAuthHttpParameters: EventBridgeClientTypes.ConnectionHttpParameters? = nil
        )
        {
            self.authorizationEndpoint = authorizationEndpoint
            self.clientParameters = clientParameters
            self.httpMethod = httpMethod
            self.oAuthHttpParameters = oAuthHttpParameters
        }
    }
}

extension EventBridgeClientTypes {

    /// Contains the additional parameters to use for the connection.
    public struct UpdateConnectionAuthRequestParameters: Swift.Sendable {
        /// A UpdateConnectionApiKeyAuthRequestParameters object that contains the authorization parameters for API key authorization.
        public var apiKeyAuthParameters: EventBridgeClientTypes.UpdateConnectionApiKeyAuthRequestParameters?
        /// A UpdateConnectionBasicAuthRequestParameters object that contains the authorization parameters for Basic authorization.
        public var basicAuthParameters: EventBridgeClientTypes.UpdateConnectionBasicAuthRequestParameters?
        /// A ConnectionHttpParameters object that contains the additional parameters to use for the connection.
        public var invocationHttpParameters: EventBridgeClientTypes.ConnectionHttpParameters?
        /// A UpdateConnectionOAuthRequestParameters object that contains the authorization parameters for OAuth authorization.
        public var oAuthParameters: EventBridgeClientTypes.UpdateConnectionOAuthRequestParameters?

        public init(
            apiKeyAuthParameters: EventBridgeClientTypes.UpdateConnectionApiKeyAuthRequestParameters? = nil,
            basicAuthParameters: EventBridgeClientTypes.UpdateConnectionBasicAuthRequestParameters? = nil,
            invocationHttpParameters: EventBridgeClientTypes.ConnectionHttpParameters? = nil,
            oAuthParameters: EventBridgeClientTypes.UpdateConnectionOAuthRequestParameters? = nil
        )
        {
            self.apiKeyAuthParameters = apiKeyAuthParameters
            self.basicAuthParameters = basicAuthParameters
            self.invocationHttpParameters = invocationHttpParameters
            self.oAuthParameters = oAuthParameters
        }
    }
}

public struct UpdateConnectionInput: Swift.Sendable {
    /// The authorization parameters to use for the connection.
    public var authParameters: EventBridgeClientTypes.UpdateConnectionAuthRequestParameters?
    /// The type of authorization to use for the connection.
    public var authorizationType: EventBridgeClientTypes.ConnectionAuthorizationType?
    /// A description for the connection.
    public var description: Swift.String?
    /// The name of the connection to update.
    /// This member is required.
    public var name: Swift.String?

    public init(
        authParameters: EventBridgeClientTypes.UpdateConnectionAuthRequestParameters? = nil,
        authorizationType: EventBridgeClientTypes.ConnectionAuthorizationType? = nil,
        description: Swift.String? = nil,
        name: Swift.String? = nil
    )
    {
        self.authParameters = authParameters
        self.authorizationType = authorizationType
        self.description = description
        self.name = name
    }
}

public struct UpdateConnectionOutput: Swift.Sendable {
    /// The ARN of the connection that was updated.
    public var connectionArn: Swift.String?
    /// The state of the connection that was updated.
    public var connectionState: EventBridgeClientTypes.ConnectionState?
    /// A time stamp for the time that the connection was created.
    public var creationTime: Foundation.Date?
    /// A time stamp for the time that the connection was last authorized.
    public var lastAuthorizedTime: Foundation.Date?
    /// A time stamp for the time that the connection was last modified.
    public var lastModifiedTime: Foundation.Date?

    public init(
        connectionArn: Swift.String? = nil,
        connectionState: EventBridgeClientTypes.ConnectionState? = nil,
        creationTime: Foundation.Date? = nil,
        lastAuthorizedTime: Foundation.Date? = nil,
        lastModifiedTime: Foundation.Date? = nil
    )
    {
        self.connectionArn = connectionArn
        self.connectionState = connectionState
        self.creationTime = creationTime
        self.lastAuthorizedTime = lastAuthorizedTime
        self.lastModifiedTime = lastModifiedTime
    }
}

public struct UpdateEndpointInput: Swift.Sendable {
    /// A description for the endpoint.
    public var description: Swift.String?
    /// Define event buses used for replication.
    public var eventBuses: [EventBridgeClientTypes.EndpointEventBus]?
    /// The name of the endpoint you want to update.
    /// This member is required.
    public var name: Swift.String?
    /// Whether event replication was enabled or disabled by this request.
    public var replicationConfig: EventBridgeClientTypes.ReplicationConfig?
    /// The ARN of the role used by event replication for this request.
    public var roleArn: Swift.String?
    /// Configure the routing policy, including the health check and secondary Region.
    public var routingConfig: EventBridgeClientTypes.RoutingConfig?

    public init(
        description: Swift.String? = nil,
        eventBuses: [EventBridgeClientTypes.EndpointEventBus]? = nil,
        name: Swift.String? = nil,
        replicationConfig: EventBridgeClientTypes.ReplicationConfig? = nil,
        roleArn: Swift.String? = nil,
        routingConfig: EventBridgeClientTypes.RoutingConfig? = nil
    )
    {
        self.description = description
        self.eventBuses = eventBuses
        self.name = name
        self.replicationConfig = replicationConfig
        self.roleArn = roleArn
        self.routingConfig = routingConfig
    }
}

public struct UpdateEndpointOutput: Swift.Sendable {
    /// The ARN of the endpoint you updated in this request.
    public var arn: Swift.String?
    /// The ID of the endpoint you updated in this request.
    public var endpointId: Swift.String?
    /// The URL of the endpoint you updated in this request.
    public var endpointUrl: Swift.String?
    /// The event buses used for replication for the endpoint you updated in this request.
    public var eventBuses: [EventBridgeClientTypes.EndpointEventBus]?
    /// The name of the endpoint you updated in this request.
    public var name: Swift.String?
    /// Whether event replication was enabled or disabled for the endpoint you updated in this request.
    public var replicationConfig: EventBridgeClientTypes.ReplicationConfig?
    /// The ARN of the role used by event replication for the endpoint you updated in this request.
    public var roleArn: Swift.String?
    /// The routing configuration you updated in this request.
    public var routingConfig: EventBridgeClientTypes.RoutingConfig?
    /// The state of the endpoint you updated in this request.
    public var state: EventBridgeClientTypes.EndpointState?

    public init(
        arn: Swift.String? = nil,
        endpointId: Swift.String? = nil,
        endpointUrl: Swift.String? = nil,
        eventBuses: [EventBridgeClientTypes.EndpointEventBus]? = nil,
        name: Swift.String? = nil,
        replicationConfig: EventBridgeClientTypes.ReplicationConfig? = nil,
        roleArn: Swift.String? = nil,
        routingConfig: EventBridgeClientTypes.RoutingConfig? = nil,
        state: EventBridgeClientTypes.EndpointState? = nil
    )
    {
        self.arn = arn
        self.endpointId = endpointId
        self.endpointUrl = endpointUrl
        self.eventBuses = eventBuses
        self.name = name
        self.replicationConfig = replicationConfig
        self.roleArn = roleArn
        self.routingConfig = routingConfig
        self.state = state
    }
}

public struct UpdateEventBusInput: Swift.Sendable {
    /// Configuration details of the Amazon SQS queue for EventBridge to use as a dead-letter queue (DLQ). For more information, see [Event retry policy and using dead-letter queues] in the EventBridge User Guide.
    public var deadLetterConfig: EventBridgeClientTypes.DeadLetterConfig?
    /// The event bus description.
    public var description: Swift.String?
    /// The identifier of the KMS customer managed key for EventBridge to use, if you choose to use a customer managed key to encrypt events on this event bus. The identifier can be the key Amazon Resource Name (ARN), KeyId, key alias, or key alias ARN. If you do not specify a customer managed key identifier, EventBridge uses an Amazon Web Services owned key to encrypt events on the event bus. For more information, see [Managing keys](https://docs.aws.amazon.com/kms/latest/developerguide/getting-started.html) in the Key Management Service Developer Guide. Archives and schema discovery are not supported for event buses encrypted using a customer managed key. EventBridge returns an error if:
    ///
    /// * You call [CreateArchive](https://docs.aws.amazon.com/eventbridge/latest/APIReference/API_CreateArchive.html) on an event bus set to use a customer managed key for encryption.
    ///
    /// * You call [CreateDiscoverer](https://docs.aws.amazon.com/eventbridge/latest/schema-reference/v1-discoverers.html#CreateDiscoverer) on an event bus set to use a customer managed key for encryption.
    ///
    /// * You call [UpdatedEventBus](https://docs.aws.amazon.com/eventbridge/latest/APIReference/API_UpdatedEventBus.html) to set a customer managed key on an event bus with an archives or schema discovery enabled.
    ///
    ///
    /// To enable archives or schema discovery on an event bus, choose to use an Amazon Web Services owned key. For more information, see [Data encryption in EventBridge](https://docs.aws.amazon.com/eventbridge/latest/userguide/eb-encryption.html) in the Amazon EventBridge User Guide.
    public var kmsKeyIdentifier: Swift.String?
    /// The name of the event bus.
    public var name: Swift.String?

    public init(
        deadLetterConfig: EventBridgeClientTypes.DeadLetterConfig? = nil,
        description: Swift.String? = nil,
        kmsKeyIdentifier: Swift.String? = nil,
        name: Swift.String? = nil
    )
    {
        self.deadLetterConfig = deadLetterConfig
        self.description = description
        self.kmsKeyIdentifier = kmsKeyIdentifier
        self.name = name
    }
}

public struct UpdateEventBusOutput: Swift.Sendable {
    /// The event bus Amazon Resource Name (ARN).
    public var arn: Swift.String?
    /// Configuration details of the Amazon SQS queue for EventBridge to use as a dead-letter queue (DLQ). For more information, see [Event retry policy and using dead-letter queues] in the EventBridge User Guide.
    public var deadLetterConfig: EventBridgeClientTypes.DeadLetterConfig?
    /// The event bus description.
    public var description: Swift.String?
    /// The identifier of the KMS customer managed key for EventBridge to use to encrypt events on this event bus, if one has been specified. For more information, see [Data encryption in EventBridge](https://docs.aws.amazon.com/eventbridge/latest/userguide/eb-encryption.html) in the Amazon EventBridge User Guide.
    public var kmsKeyIdentifier: Swift.String?
    /// The event bus name.
    public var name: Swift.String?

    public init(
        arn: Swift.String? = nil,
        deadLetterConfig: EventBridgeClientTypes.DeadLetterConfig? = nil,
        description: Swift.String? = nil,
        kmsKeyIdentifier: Swift.String? = nil,
        name: Swift.String? = nil
    )
    {
        self.arn = arn
        self.deadLetterConfig = deadLetterConfig
        self.description = description
        self.kmsKeyIdentifier = kmsKeyIdentifier
        self.name = name
    }
}

extension ActivateEventSourceInput {

    static func urlPathProvider(_ value: ActivateEventSourceInput) -> Swift.String? {
        return "/"
    }
}

extension CancelReplayInput {

    static func urlPathProvider(_ value: CancelReplayInput) -> Swift.String? {
        return "/"
    }
}

extension CreateApiDestinationInput {

    static func urlPathProvider(_ value: CreateApiDestinationInput) -> Swift.String? {
        return "/"
    }
}

extension CreateArchiveInput {

    static func urlPathProvider(_ value: CreateArchiveInput) -> Swift.String? {
        return "/"
    }
}

extension CreateConnectionInput {

    static func urlPathProvider(_ value: CreateConnectionInput) -> Swift.String? {
        return "/"
    }
}

extension CreateEndpointInput {

    static func urlPathProvider(_ value: CreateEndpointInput) -> Swift.String? {
        return "/"
    }
}

extension CreateEventBusInput {

    static func urlPathProvider(_ value: CreateEventBusInput) -> Swift.String? {
        return "/"
    }
}

extension CreatePartnerEventSourceInput {

    static func urlPathProvider(_ value: CreatePartnerEventSourceInput) -> Swift.String? {
        return "/"
    }
}

extension DeactivateEventSourceInput {

    static func urlPathProvider(_ value: DeactivateEventSourceInput) -> Swift.String? {
        return "/"
    }
}

extension DeauthorizeConnectionInput {

    static func urlPathProvider(_ value: DeauthorizeConnectionInput) -> Swift.String? {
        return "/"
    }
}

extension DeleteApiDestinationInput {

    static func urlPathProvider(_ value: DeleteApiDestinationInput) -> Swift.String? {
        return "/"
    }
}

extension DeleteArchiveInput {

    static func urlPathProvider(_ value: DeleteArchiveInput) -> Swift.String? {
        return "/"
    }
}

extension DeleteConnectionInput {

    static func urlPathProvider(_ value: DeleteConnectionInput) -> Swift.String? {
        return "/"
    }
}

extension DeleteEndpointInput {

    static func urlPathProvider(_ value: DeleteEndpointInput) -> Swift.String? {
        return "/"
    }
}

extension DeleteEventBusInput {

    static func urlPathProvider(_ value: DeleteEventBusInput) -> Swift.String? {
        return "/"
    }
}

extension DeletePartnerEventSourceInput {

    static func urlPathProvider(_ value: DeletePartnerEventSourceInput) -> Swift.String? {
        return "/"
    }
}

extension DeleteRuleInput {

    static func urlPathProvider(_ value: DeleteRuleInput) -> Swift.String? {
        return "/"
    }
}

extension DescribeApiDestinationInput {

    static func urlPathProvider(_ value: DescribeApiDestinationInput) -> Swift.String? {
        return "/"
    }
}

extension DescribeArchiveInput {

    static func urlPathProvider(_ value: DescribeArchiveInput) -> Swift.String? {
        return "/"
    }
}

extension DescribeConnectionInput {

    static func urlPathProvider(_ value: DescribeConnectionInput) -> Swift.String? {
        return "/"
    }
}

extension DescribeEndpointInput {

    static func urlPathProvider(_ value: DescribeEndpointInput) -> Swift.String? {
        return "/"
    }
}

extension DescribeEventBusInput {

    static func urlPathProvider(_ value: DescribeEventBusInput) -> Swift.String? {
        return "/"
    }
}

extension DescribeEventSourceInput {

    static func urlPathProvider(_ value: DescribeEventSourceInput) -> Swift.String? {
        return "/"
    }
}

extension DescribePartnerEventSourceInput {

    static func urlPathProvider(_ value: DescribePartnerEventSourceInput) -> Swift.String? {
        return "/"
    }
}

extension DescribeReplayInput {

    static func urlPathProvider(_ value: DescribeReplayInput) -> Swift.String? {
        return "/"
    }
}

extension DescribeRuleInput {

    static func urlPathProvider(_ value: DescribeRuleInput) -> Swift.String? {
        return "/"
    }
}

extension DisableRuleInput {

    static func urlPathProvider(_ value: DisableRuleInput) -> Swift.String? {
        return "/"
    }
}

extension EnableRuleInput {

    static func urlPathProvider(_ value: EnableRuleInput) -> Swift.String? {
        return "/"
    }
}

extension ListApiDestinationsInput {

    static func urlPathProvider(_ value: ListApiDestinationsInput) -> Swift.String? {
        return "/"
    }
}

extension ListArchivesInput {

    static func urlPathProvider(_ value: ListArchivesInput) -> Swift.String? {
        return "/"
    }
}

extension ListConnectionsInput {

    static func urlPathProvider(_ value: ListConnectionsInput) -> Swift.String? {
        return "/"
    }
}

extension ListEndpointsInput {

    static func urlPathProvider(_ value: ListEndpointsInput) -> Swift.String? {
        return "/"
    }
}

extension ListEventBusesInput {

    static func urlPathProvider(_ value: ListEventBusesInput) -> Swift.String? {
        return "/"
    }
}

extension ListEventSourcesInput {

    static func urlPathProvider(_ value: ListEventSourcesInput) -> Swift.String? {
        return "/"
    }
}

extension ListPartnerEventSourceAccountsInput {

    static func urlPathProvider(_ value: ListPartnerEventSourceAccountsInput) -> Swift.String? {
        return "/"
    }
}

extension ListPartnerEventSourcesInput {

    static func urlPathProvider(_ value: ListPartnerEventSourcesInput) -> Swift.String? {
        return "/"
    }
}

extension ListReplaysInput {

    static func urlPathProvider(_ value: ListReplaysInput) -> Swift.String? {
        return "/"
    }
}

extension ListRuleNamesByTargetInput {

    static func urlPathProvider(_ value: ListRuleNamesByTargetInput) -> Swift.String? {
        return "/"
    }
}

extension ListRulesInput {

    static func urlPathProvider(_ value: ListRulesInput) -> Swift.String? {
        return "/"
    }
}

extension ListTagsForResourceInput {

    static func urlPathProvider(_ value: ListTagsForResourceInput) -> Swift.String? {
        return "/"
    }
}

extension ListTargetsByRuleInput {

    static func urlPathProvider(_ value: ListTargetsByRuleInput) -> Swift.String? {
        return "/"
    }
}

extension PutEventsInput {

    static func urlPathProvider(_ value: PutEventsInput) -> Swift.String? {
        return "/"
    }
}

extension PutPartnerEventsInput {

    static func urlPathProvider(_ value: PutPartnerEventsInput) -> Swift.String? {
        return "/"
    }
}

extension PutPermissionInput {

    static func urlPathProvider(_ value: PutPermissionInput) -> Swift.String? {
        return "/"
    }
}

extension PutRuleInput {

    static func urlPathProvider(_ value: PutRuleInput) -> Swift.String? {
        return "/"
    }
}

extension PutTargetsInput {

    static func urlPathProvider(_ value: PutTargetsInput) -> Swift.String? {
        return "/"
    }
}

extension RemovePermissionInput {

    static func urlPathProvider(_ value: RemovePermissionInput) -> Swift.String? {
        return "/"
    }
}

extension RemoveTargetsInput {

    static func urlPathProvider(_ value: RemoveTargetsInput) -> Swift.String? {
        return "/"
    }
}

extension StartReplayInput {

    static func urlPathProvider(_ value: StartReplayInput) -> Swift.String? {
        return "/"
    }
}

extension TagResourceInput {

    static func urlPathProvider(_ value: TagResourceInput) -> Swift.String? {
        return "/"
    }
}

extension TestEventPatternInput {

    static func urlPathProvider(_ value: TestEventPatternInput) -> Swift.String? {
        return "/"
    }
}

extension UntagResourceInput {

    static func urlPathProvider(_ value: UntagResourceInput) -> Swift.String? {
        return "/"
    }
}

extension UpdateApiDestinationInput {

    static func urlPathProvider(_ value: UpdateApiDestinationInput) -> Swift.String? {
        return "/"
    }
}

extension UpdateArchiveInput {

    static func urlPathProvider(_ value: UpdateArchiveInput) -> Swift.String? {
        return "/"
    }
}

extension UpdateConnectionInput {

    static func urlPathProvider(_ value: UpdateConnectionInput) -> Swift.String? {
        return "/"
    }
}

extension UpdateEndpointInput {

    static func urlPathProvider(_ value: UpdateEndpointInput) -> Swift.String? {
        return "/"
    }
}

extension UpdateEventBusInput {

    static func urlPathProvider(_ value: UpdateEventBusInput) -> Swift.String? {
        return "/"
    }
}

extension ActivateEventSourceInput {

    static func write(value: ActivateEventSourceInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Name"].write(value.name)
    }
}

extension CancelReplayInput {

    static func write(value: CancelReplayInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ReplayName"].write(value.replayName)
    }
}

extension CreateApiDestinationInput {

    static func write(value: CreateApiDestinationInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ConnectionArn"].write(value.connectionArn)
        try writer["Description"].write(value.description)
        try writer["HttpMethod"].write(value.httpMethod)
        try writer["InvocationEndpoint"].write(value.invocationEndpoint)
        try writer["InvocationRateLimitPerSecond"].write(value.invocationRateLimitPerSecond)
        try writer["Name"].write(value.name)
    }
}

extension CreateArchiveInput {

    static func write(value: CreateArchiveInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ArchiveName"].write(value.archiveName)
        try writer["Description"].write(value.description)
        try writer["EventPattern"].write(value.eventPattern)
        try writer["EventSourceArn"].write(value.eventSourceArn)
        try writer["RetentionDays"].write(value.retentionDays)
    }
}

extension CreateConnectionInput {

    static func write(value: CreateConnectionInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["AuthParameters"].write(value.authParameters, with: EventBridgeClientTypes.CreateConnectionAuthRequestParameters.write(value:to:))
        try writer["AuthorizationType"].write(value.authorizationType)
        try writer["Description"].write(value.description)
        try writer["Name"].write(value.name)
    }
}

extension CreateEndpointInput {

    static func write(value: CreateEndpointInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Description"].write(value.description)
        try writer["EventBuses"].writeList(value.eventBuses, memberWritingClosure: EventBridgeClientTypes.EndpointEventBus.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["Name"].write(value.name)
        try writer["ReplicationConfig"].write(value.replicationConfig, with: EventBridgeClientTypes.ReplicationConfig.write(value:to:))
        try writer["RoleArn"].write(value.roleArn)
        try writer["RoutingConfig"].write(value.routingConfig, with: EventBridgeClientTypes.RoutingConfig.write(value:to:))
    }
}

extension CreateEventBusInput {

    static func write(value: CreateEventBusInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["DeadLetterConfig"].write(value.deadLetterConfig, with: EventBridgeClientTypes.DeadLetterConfig.write(value:to:))
        try writer["Description"].write(value.description)
        try writer["EventSourceName"].write(value.eventSourceName)
        try writer["KmsKeyIdentifier"].write(value.kmsKeyIdentifier)
        try writer["Name"].write(value.name)
        try writer["Tags"].writeList(value.tags, memberWritingClosure: EventBridgeClientTypes.Tag.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension CreatePartnerEventSourceInput {

    static func write(value: CreatePartnerEventSourceInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Account"].write(value.account)
        try writer["Name"].write(value.name)
    }
}

extension DeactivateEventSourceInput {

    static func write(value: DeactivateEventSourceInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Name"].write(value.name)
    }
}

extension DeauthorizeConnectionInput {

    static func write(value: DeauthorizeConnectionInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Name"].write(value.name)
    }
}

extension DeleteApiDestinationInput {

    static func write(value: DeleteApiDestinationInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Name"].write(value.name)
    }
}

extension DeleteArchiveInput {

    static func write(value: DeleteArchiveInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ArchiveName"].write(value.archiveName)
    }
}

extension DeleteConnectionInput {

    static func write(value: DeleteConnectionInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Name"].write(value.name)
    }
}

extension DeleteEndpointInput {

    static func write(value: DeleteEndpointInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Name"].write(value.name)
    }
}

extension DeleteEventBusInput {

    static func write(value: DeleteEventBusInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Name"].write(value.name)
    }
}

extension DeletePartnerEventSourceInput {

    static func write(value: DeletePartnerEventSourceInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Account"].write(value.account)
        try writer["Name"].write(value.name)
    }
}

extension DeleteRuleInput {

    static func write(value: DeleteRuleInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["EventBusName"].write(value.eventBusName)
        try writer["Force"].write(value.force)
        try writer["Name"].write(value.name)
    }
}

extension DescribeApiDestinationInput {

    static func write(value: DescribeApiDestinationInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Name"].write(value.name)
    }
}

extension DescribeArchiveInput {

    static func write(value: DescribeArchiveInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ArchiveName"].write(value.archiveName)
    }
}

extension DescribeConnectionInput {

    static func write(value: DescribeConnectionInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Name"].write(value.name)
    }
}

extension DescribeEndpointInput {

    static func write(value: DescribeEndpointInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["HomeRegion"].write(value.homeRegion)
        try writer["Name"].write(value.name)
    }
}

extension DescribeEventBusInput {

    static func write(value: DescribeEventBusInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Name"].write(value.name)
    }
}

extension DescribeEventSourceInput {

    static func write(value: DescribeEventSourceInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Name"].write(value.name)
    }
}

extension DescribePartnerEventSourceInput {

    static func write(value: DescribePartnerEventSourceInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Name"].write(value.name)
    }
}

extension DescribeReplayInput {

    static func write(value: DescribeReplayInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ReplayName"].write(value.replayName)
    }
}

extension DescribeRuleInput {

    static func write(value: DescribeRuleInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["EventBusName"].write(value.eventBusName)
        try writer["Name"].write(value.name)
    }
}

extension DisableRuleInput {

    static func write(value: DisableRuleInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["EventBusName"].write(value.eventBusName)
        try writer["Name"].write(value.name)
    }
}

extension EnableRuleInput {

    static func write(value: EnableRuleInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["EventBusName"].write(value.eventBusName)
        try writer["Name"].write(value.name)
    }
}

extension ListApiDestinationsInput {

    static func write(value: ListApiDestinationsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ConnectionArn"].write(value.connectionArn)
        try writer["Limit"].write(value.limit)
        try writer["NamePrefix"].write(value.namePrefix)
        try writer["NextToken"].write(value.nextToken)
    }
}

extension ListArchivesInput {

    static func write(value: ListArchivesInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["EventSourceArn"].write(value.eventSourceArn)
        try writer["Limit"].write(value.limit)
        try writer["NamePrefix"].write(value.namePrefix)
        try writer["NextToken"].write(value.nextToken)
        try writer["State"].write(value.state)
    }
}

extension ListConnectionsInput {

    static func write(value: ListConnectionsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ConnectionState"].write(value.connectionState)
        try writer["Limit"].write(value.limit)
        try writer["NamePrefix"].write(value.namePrefix)
        try writer["NextToken"].write(value.nextToken)
    }
}

extension ListEndpointsInput {

    static func write(value: ListEndpointsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["HomeRegion"].write(value.homeRegion)
        try writer["MaxResults"].write(value.maxResults)
        try writer["NamePrefix"].write(value.namePrefix)
        try writer["NextToken"].write(value.nextToken)
    }
}

extension ListEventBusesInput {

    static func write(value: ListEventBusesInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Limit"].write(value.limit)
        try writer["NamePrefix"].write(value.namePrefix)
        try writer["NextToken"].write(value.nextToken)
    }
}

extension ListEventSourcesInput {

    static func write(value: ListEventSourcesInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Limit"].write(value.limit)
        try writer["NamePrefix"].write(value.namePrefix)
        try writer["NextToken"].write(value.nextToken)
    }
}

extension ListPartnerEventSourceAccountsInput {

    static func write(value: ListPartnerEventSourceAccountsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["EventSourceName"].write(value.eventSourceName)
        try writer["Limit"].write(value.limit)
        try writer["NextToken"].write(value.nextToken)
    }
}

extension ListPartnerEventSourcesInput {

    static func write(value: ListPartnerEventSourcesInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Limit"].write(value.limit)
        try writer["NamePrefix"].write(value.namePrefix)
        try writer["NextToken"].write(value.nextToken)
    }
}

extension ListReplaysInput {

    static func write(value: ListReplaysInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["EventSourceArn"].write(value.eventSourceArn)
        try writer["Limit"].write(value.limit)
        try writer["NamePrefix"].write(value.namePrefix)
        try writer["NextToken"].write(value.nextToken)
        try writer["State"].write(value.state)
    }
}

extension ListRuleNamesByTargetInput {

    static func write(value: ListRuleNamesByTargetInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["EventBusName"].write(value.eventBusName)
        try writer["Limit"].write(value.limit)
        try writer["NextToken"].write(value.nextToken)
        try writer["TargetArn"].write(value.targetArn)
    }
}

extension ListRulesInput {

    static func write(value: ListRulesInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["EventBusName"].write(value.eventBusName)
        try writer["Limit"].write(value.limit)
        try writer["NamePrefix"].write(value.namePrefix)
        try writer["NextToken"].write(value.nextToken)
    }
}

extension ListTagsForResourceInput {

    static func write(value: ListTagsForResourceInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ResourceARN"].write(value.resourceARN)
    }
}

extension ListTargetsByRuleInput {

    static func write(value: ListTargetsByRuleInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["EventBusName"].write(value.eventBusName)
        try writer["Limit"].write(value.limit)
        try writer["NextToken"].write(value.nextToken)
        try writer["Rule"].write(value.rule)
    }
}

extension PutEventsInput {

    static func write(value: PutEventsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["EndpointId"].write(value.endpointId)
        try writer["Entries"].writeList(value.entries, memberWritingClosure: EventBridgeClientTypes.PutEventsRequestEntry.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension PutPartnerEventsInput {

    static func write(value: PutPartnerEventsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Entries"].writeList(value.entries, memberWritingClosure: EventBridgeClientTypes.PutPartnerEventsRequestEntry.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension PutPermissionInput {

    static func write(value: PutPermissionInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Action"].write(value.action)
        try writer["Condition"].write(value.condition, with: EventBridgeClientTypes.Condition.write(value:to:))
        try writer["EventBusName"].write(value.eventBusName)
        try writer["Policy"].write(value.policy)
        try writer["Principal"].write(value.principal)
        try writer["StatementId"].write(value.statementId)
    }
}

extension PutRuleInput {

    static func write(value: PutRuleInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Description"].write(value.description)
        try writer["EventBusName"].write(value.eventBusName)
        try writer["EventPattern"].write(value.eventPattern)
        try writer["Name"].write(value.name)
        try writer["RoleArn"].write(value.roleArn)
        try writer["ScheduleExpression"].write(value.scheduleExpression)
        try writer["State"].write(value.state)
        try writer["Tags"].writeList(value.tags, memberWritingClosure: EventBridgeClientTypes.Tag.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension PutTargetsInput {

    static func write(value: PutTargetsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["EventBusName"].write(value.eventBusName)
        try writer["Rule"].write(value.rule)
        try writer["Targets"].writeList(value.targets, memberWritingClosure: EventBridgeClientTypes.Target.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension RemovePermissionInput {

    static func write(value: RemovePermissionInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["EventBusName"].write(value.eventBusName)
        try writer["RemoveAllPermissions"].write(value.removeAllPermissions)
        try writer["StatementId"].write(value.statementId)
    }
}

extension RemoveTargetsInput {

    static func write(value: RemoveTargetsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["EventBusName"].write(value.eventBusName)
        try writer["Force"].write(value.force)
        try writer["Ids"].writeList(value.ids, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["Rule"].write(value.rule)
    }
}

extension StartReplayInput {

    static func write(value: StartReplayInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Description"].write(value.description)
        try writer["Destination"].write(value.destination, with: EventBridgeClientTypes.ReplayDestination.write(value:to:))
        try writer["EventEndTime"].writeTimestamp(value.eventEndTime, format: SmithyTimestamps.TimestampFormat.epochSeconds)
        try writer["EventSourceArn"].write(value.eventSourceArn)
        try writer["EventStartTime"].writeTimestamp(value.eventStartTime, format: SmithyTimestamps.TimestampFormat.epochSeconds)
        try writer["ReplayName"].write(value.replayName)
    }
}

extension TagResourceInput {

    static func write(value: TagResourceInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ResourceARN"].write(value.resourceARN)
        try writer["Tags"].writeList(value.tags, memberWritingClosure: EventBridgeClientTypes.Tag.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension TestEventPatternInput {

    static func write(value: TestEventPatternInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Event"].write(value.event)
        try writer["EventPattern"].write(value.eventPattern)
    }
}

extension UntagResourceInput {

    static func write(value: UntagResourceInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ResourceARN"].write(value.resourceARN)
        try writer["TagKeys"].writeList(value.tagKeys, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension UpdateApiDestinationInput {

    static func write(value: UpdateApiDestinationInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ConnectionArn"].write(value.connectionArn)
        try writer["Description"].write(value.description)
        try writer["HttpMethod"].write(value.httpMethod)
        try writer["InvocationEndpoint"].write(value.invocationEndpoint)
        try writer["InvocationRateLimitPerSecond"].write(value.invocationRateLimitPerSecond)
        try writer["Name"].write(value.name)
    }
}

extension UpdateArchiveInput {

    static func write(value: UpdateArchiveInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ArchiveName"].write(value.archiveName)
        try writer["Description"].write(value.description)
        try writer["EventPattern"].write(value.eventPattern)
        try writer["RetentionDays"].write(value.retentionDays)
    }
}

extension UpdateConnectionInput {

    static func write(value: UpdateConnectionInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["AuthParameters"].write(value.authParameters, with: EventBridgeClientTypes.UpdateConnectionAuthRequestParameters.write(value:to:))
        try writer["AuthorizationType"].write(value.authorizationType)
        try writer["Description"].write(value.description)
        try writer["Name"].write(value.name)
    }
}

extension UpdateEndpointInput {

    static func write(value: UpdateEndpointInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Description"].write(value.description)
        try writer["EventBuses"].writeList(value.eventBuses, memberWritingClosure: EventBridgeClientTypes.EndpointEventBus.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["Name"].write(value.name)
        try writer["ReplicationConfig"].write(value.replicationConfig, with: EventBridgeClientTypes.ReplicationConfig.write(value:to:))
        try writer["RoleArn"].write(value.roleArn)
        try writer["RoutingConfig"].write(value.routingConfig, with: EventBridgeClientTypes.RoutingConfig.write(value:to:))
    }
}

extension UpdateEventBusInput {

    static func write(value: UpdateEventBusInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["DeadLetterConfig"].write(value.deadLetterConfig, with: EventBridgeClientTypes.DeadLetterConfig.write(value:to:))
        try writer["Description"].write(value.description)
        try writer["KmsKeyIdentifier"].write(value.kmsKeyIdentifier)
        try writer["Name"].write(value.name)
    }
}

extension ActivateEventSourceOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ActivateEventSourceOutput {
        return ActivateEventSourceOutput()
    }
}

extension CancelReplayOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CancelReplayOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CancelReplayOutput()
        value.replayArn = try reader["ReplayArn"].readIfPresent()
        value.state = try reader["State"].readIfPresent()
        value.stateReason = try reader["StateReason"].readIfPresent()
        return value
    }
}

extension CreateApiDestinationOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateApiDestinationOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateApiDestinationOutput()
        value.apiDestinationArn = try reader["ApiDestinationArn"].readIfPresent()
        value.apiDestinationState = try reader["ApiDestinationState"].readIfPresent()
        value.creationTime = try reader["CreationTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.lastModifiedTime = try reader["LastModifiedTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        return value
    }
}

extension CreateArchiveOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateArchiveOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateArchiveOutput()
        value.archiveArn = try reader["ArchiveArn"].readIfPresent()
        value.creationTime = try reader["CreationTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.state = try reader["State"].readIfPresent()
        value.stateReason = try reader["StateReason"].readIfPresent()
        return value
    }
}

extension CreateConnectionOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateConnectionOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateConnectionOutput()
        value.connectionArn = try reader["ConnectionArn"].readIfPresent()
        value.connectionState = try reader["ConnectionState"].readIfPresent()
        value.creationTime = try reader["CreationTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.lastModifiedTime = try reader["LastModifiedTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        return value
    }
}

extension CreateEndpointOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateEndpointOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateEndpointOutput()
        value.arn = try reader["Arn"].readIfPresent()
        value.eventBuses = try reader["EventBuses"].readListIfPresent(memberReadingClosure: EventBridgeClientTypes.EndpointEventBus.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.name = try reader["Name"].readIfPresent()
        value.replicationConfig = try reader["ReplicationConfig"].readIfPresent(with: EventBridgeClientTypes.ReplicationConfig.read(from:))
        value.roleArn = try reader["RoleArn"].readIfPresent()
        value.routingConfig = try reader["RoutingConfig"].readIfPresent(with: EventBridgeClientTypes.RoutingConfig.read(from:))
        value.state = try reader["State"].readIfPresent()
        return value
    }
}

extension CreateEventBusOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateEventBusOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateEventBusOutput()
        value.deadLetterConfig = try reader["DeadLetterConfig"].readIfPresent(with: EventBridgeClientTypes.DeadLetterConfig.read(from:))
        value.description = try reader["Description"].readIfPresent()
        value.eventBusArn = try reader["EventBusArn"].readIfPresent()
        value.kmsKeyIdentifier = try reader["KmsKeyIdentifier"].readIfPresent()
        return value
    }
}

extension CreatePartnerEventSourceOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreatePartnerEventSourceOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreatePartnerEventSourceOutput()
        value.eventSourceArn = try reader["EventSourceArn"].readIfPresent()
        return value
    }
}

extension DeactivateEventSourceOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeactivateEventSourceOutput {
        return DeactivateEventSourceOutput()
    }
}

extension DeauthorizeConnectionOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeauthorizeConnectionOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DeauthorizeConnectionOutput()
        value.connectionArn = try reader["ConnectionArn"].readIfPresent()
        value.connectionState = try reader["ConnectionState"].readIfPresent()
        value.creationTime = try reader["CreationTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.lastAuthorizedTime = try reader["LastAuthorizedTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.lastModifiedTime = try reader["LastModifiedTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        return value
    }
}

extension DeleteApiDestinationOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteApiDestinationOutput {
        return DeleteApiDestinationOutput()
    }
}

extension DeleteArchiveOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteArchiveOutput {
        return DeleteArchiveOutput()
    }
}

extension DeleteConnectionOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteConnectionOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DeleteConnectionOutput()
        value.connectionArn = try reader["ConnectionArn"].readIfPresent()
        value.connectionState = try reader["ConnectionState"].readIfPresent()
        value.creationTime = try reader["CreationTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.lastAuthorizedTime = try reader["LastAuthorizedTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.lastModifiedTime = try reader["LastModifiedTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        return value
    }
}

extension DeleteEndpointOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteEndpointOutput {
        return DeleteEndpointOutput()
    }
}

extension DeleteEventBusOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteEventBusOutput {
        return DeleteEventBusOutput()
    }
}

extension DeletePartnerEventSourceOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeletePartnerEventSourceOutput {
        return DeletePartnerEventSourceOutput()
    }
}

extension DeleteRuleOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteRuleOutput {
        return DeleteRuleOutput()
    }
}

extension DescribeApiDestinationOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeApiDestinationOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DescribeApiDestinationOutput()
        value.apiDestinationArn = try reader["ApiDestinationArn"].readIfPresent()
        value.apiDestinationState = try reader["ApiDestinationState"].readIfPresent()
        value.connectionArn = try reader["ConnectionArn"].readIfPresent()
        value.creationTime = try reader["CreationTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.description = try reader["Description"].readIfPresent()
        value.httpMethod = try reader["HttpMethod"].readIfPresent()
        value.invocationEndpoint = try reader["InvocationEndpoint"].readIfPresent()
        value.invocationRateLimitPerSecond = try reader["InvocationRateLimitPerSecond"].readIfPresent()
        value.lastModifiedTime = try reader["LastModifiedTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.name = try reader["Name"].readIfPresent()
        return value
    }
}

extension DescribeArchiveOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeArchiveOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DescribeArchiveOutput()
        value.archiveArn = try reader["ArchiveArn"].readIfPresent()
        value.archiveName = try reader["ArchiveName"].readIfPresent()
        value.creationTime = try reader["CreationTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.description = try reader["Description"].readIfPresent()
        value.eventCount = try reader["EventCount"].readIfPresent() ?? 0
        value.eventPattern = try reader["EventPattern"].readIfPresent()
        value.eventSourceArn = try reader["EventSourceArn"].readIfPresent()
        value.retentionDays = try reader["RetentionDays"].readIfPresent()
        value.sizeBytes = try reader["SizeBytes"].readIfPresent() ?? 0
        value.state = try reader["State"].readIfPresent()
        value.stateReason = try reader["StateReason"].readIfPresent()
        return value
    }
}

extension DescribeConnectionOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeConnectionOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DescribeConnectionOutput()
        value.authParameters = try reader["AuthParameters"].readIfPresent(with: EventBridgeClientTypes.ConnectionAuthResponseParameters.read(from:))
        value.authorizationType = try reader["AuthorizationType"].readIfPresent()
        value.connectionArn = try reader["ConnectionArn"].readIfPresent()
        value.connectionState = try reader["ConnectionState"].readIfPresent()
        value.creationTime = try reader["CreationTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.description = try reader["Description"].readIfPresent()
        value.lastAuthorizedTime = try reader["LastAuthorizedTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.lastModifiedTime = try reader["LastModifiedTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.name = try reader["Name"].readIfPresent()
        value.secretArn = try reader["SecretArn"].readIfPresent()
        value.stateReason = try reader["StateReason"].readIfPresent()
        return value
    }
}

extension DescribeEndpointOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeEndpointOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DescribeEndpointOutput()
        value.arn = try reader["Arn"].readIfPresent()
        value.creationTime = try reader["CreationTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.description = try reader["Description"].readIfPresent()
        value.endpointId = try reader["EndpointId"].readIfPresent()
        value.endpointUrl = try reader["EndpointUrl"].readIfPresent()
        value.eventBuses = try reader["EventBuses"].readListIfPresent(memberReadingClosure: EventBridgeClientTypes.EndpointEventBus.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.lastModifiedTime = try reader["LastModifiedTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.name = try reader["Name"].readIfPresent()
        value.replicationConfig = try reader["ReplicationConfig"].readIfPresent(with: EventBridgeClientTypes.ReplicationConfig.read(from:))
        value.roleArn = try reader["RoleArn"].readIfPresent()
        value.routingConfig = try reader["RoutingConfig"].readIfPresent(with: EventBridgeClientTypes.RoutingConfig.read(from:))
        value.state = try reader["State"].readIfPresent()
        value.stateReason = try reader["StateReason"].readIfPresent()
        return value
    }
}

extension DescribeEventBusOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeEventBusOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DescribeEventBusOutput()
        value.arn = try reader["Arn"].readIfPresent()
        value.creationTime = try reader["CreationTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.deadLetterConfig = try reader["DeadLetterConfig"].readIfPresent(with: EventBridgeClientTypes.DeadLetterConfig.read(from:))
        value.description = try reader["Description"].readIfPresent()
        value.kmsKeyIdentifier = try reader["KmsKeyIdentifier"].readIfPresent()
        value.lastModifiedTime = try reader["LastModifiedTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.name = try reader["Name"].readIfPresent()
        value.policy = try reader["Policy"].readIfPresent()
        return value
    }
}

extension DescribeEventSourceOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeEventSourceOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DescribeEventSourceOutput()
        value.arn = try reader["Arn"].readIfPresent()
        value.createdBy = try reader["CreatedBy"].readIfPresent()
        value.creationTime = try reader["CreationTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.expirationTime = try reader["ExpirationTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.name = try reader["Name"].readIfPresent()
        value.state = try reader["State"].readIfPresent()
        return value
    }
}

extension DescribePartnerEventSourceOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribePartnerEventSourceOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DescribePartnerEventSourceOutput()
        value.arn = try reader["Arn"].readIfPresent()
        value.name = try reader["Name"].readIfPresent()
        return value
    }
}

extension DescribeReplayOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeReplayOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DescribeReplayOutput()
        value.description = try reader["Description"].readIfPresent()
        value.destination = try reader["Destination"].readIfPresent(with: EventBridgeClientTypes.ReplayDestination.read(from:))
        value.eventEndTime = try reader["EventEndTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.eventLastReplayedTime = try reader["EventLastReplayedTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.eventSourceArn = try reader["EventSourceArn"].readIfPresent()
        value.eventStartTime = try reader["EventStartTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.replayArn = try reader["ReplayArn"].readIfPresent()
        value.replayEndTime = try reader["ReplayEndTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.replayName = try reader["ReplayName"].readIfPresent()
        value.replayStartTime = try reader["ReplayStartTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.state = try reader["State"].readIfPresent()
        value.stateReason = try reader["StateReason"].readIfPresent()
        return value
    }
}

extension DescribeRuleOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeRuleOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DescribeRuleOutput()
        value.arn = try reader["Arn"].readIfPresent()
        value.createdBy = try reader["CreatedBy"].readIfPresent()
        value.description = try reader["Description"].readIfPresent()
        value.eventBusName = try reader["EventBusName"].readIfPresent()
        value.eventPattern = try reader["EventPattern"].readIfPresent()
        value.managedBy = try reader["ManagedBy"].readIfPresent()
        value.name = try reader["Name"].readIfPresent()
        value.roleArn = try reader["RoleArn"].readIfPresent()
        value.scheduleExpression = try reader["ScheduleExpression"].readIfPresent()
        value.state = try reader["State"].readIfPresent()
        return value
    }
}

extension DisableRuleOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DisableRuleOutput {
        return DisableRuleOutput()
    }
}

extension EnableRuleOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> EnableRuleOutput {
        return EnableRuleOutput()
    }
}

extension ListApiDestinationsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListApiDestinationsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListApiDestinationsOutput()
        value.apiDestinations = try reader["ApiDestinations"].readListIfPresent(memberReadingClosure: EventBridgeClientTypes.ApiDestination.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.nextToken = try reader["NextToken"].readIfPresent()
        return value
    }
}

extension ListArchivesOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListArchivesOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListArchivesOutput()
        value.archives = try reader["Archives"].readListIfPresent(memberReadingClosure: EventBridgeClientTypes.Archive.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.nextToken = try reader["NextToken"].readIfPresent()
        return value
    }
}

extension ListConnectionsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListConnectionsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListConnectionsOutput()
        value.connections = try reader["Connections"].readListIfPresent(memberReadingClosure: EventBridgeClientTypes.Connection.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.nextToken = try reader["NextToken"].readIfPresent()
        return value
    }
}

extension ListEndpointsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListEndpointsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListEndpointsOutput()
        value.endpoints = try reader["Endpoints"].readListIfPresent(memberReadingClosure: EventBridgeClientTypes.Endpoint.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.nextToken = try reader["NextToken"].readIfPresent()
        return value
    }
}

extension ListEventBusesOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListEventBusesOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListEventBusesOutput()
        value.eventBuses = try reader["EventBuses"].readListIfPresent(memberReadingClosure: EventBridgeClientTypes.EventBus.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.nextToken = try reader["NextToken"].readIfPresent()
        return value
    }
}

extension ListEventSourcesOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListEventSourcesOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListEventSourcesOutput()
        value.eventSources = try reader["EventSources"].readListIfPresent(memberReadingClosure: EventBridgeClientTypes.EventSource.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.nextToken = try reader["NextToken"].readIfPresent()
        return value
    }
}

extension ListPartnerEventSourceAccountsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListPartnerEventSourceAccountsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListPartnerEventSourceAccountsOutput()
        value.nextToken = try reader["NextToken"].readIfPresent()
        value.partnerEventSourceAccounts = try reader["PartnerEventSourceAccounts"].readListIfPresent(memberReadingClosure: EventBridgeClientTypes.PartnerEventSourceAccount.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension ListPartnerEventSourcesOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListPartnerEventSourcesOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListPartnerEventSourcesOutput()
        value.nextToken = try reader["NextToken"].readIfPresent()
        value.partnerEventSources = try reader["PartnerEventSources"].readListIfPresent(memberReadingClosure: EventBridgeClientTypes.PartnerEventSource.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension ListReplaysOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListReplaysOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListReplaysOutput()
        value.nextToken = try reader["NextToken"].readIfPresent()
        value.replays = try reader["Replays"].readListIfPresent(memberReadingClosure: EventBridgeClientTypes.Replay.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension ListRuleNamesByTargetOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListRuleNamesByTargetOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListRuleNamesByTargetOutput()
        value.nextToken = try reader["NextToken"].readIfPresent()
        value.ruleNames = try reader["RuleNames"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension ListRulesOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListRulesOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListRulesOutput()
        value.nextToken = try reader["NextToken"].readIfPresent()
        value.rules = try reader["Rules"].readListIfPresent(memberReadingClosure: EventBridgeClientTypes.Rule.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension ListTagsForResourceOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListTagsForResourceOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListTagsForResourceOutput()
        value.tags = try reader["Tags"].readListIfPresent(memberReadingClosure: EventBridgeClientTypes.Tag.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension ListTargetsByRuleOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListTargetsByRuleOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListTargetsByRuleOutput()
        value.nextToken = try reader["NextToken"].readIfPresent()
        value.targets = try reader["Targets"].readListIfPresent(memberReadingClosure: EventBridgeClientTypes.Target.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension PutEventsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> PutEventsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = PutEventsOutput()
        value.entries = try reader["Entries"].readListIfPresent(memberReadingClosure: EventBridgeClientTypes.PutEventsResultEntry.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.failedEntryCount = try reader["FailedEntryCount"].readIfPresent() ?? 0
        return value
    }
}

extension PutPartnerEventsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> PutPartnerEventsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = PutPartnerEventsOutput()
        value.entries = try reader["Entries"].readListIfPresent(memberReadingClosure: EventBridgeClientTypes.PutPartnerEventsResultEntry.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.failedEntryCount = try reader["FailedEntryCount"].readIfPresent() ?? 0
        return value
    }
}

extension PutPermissionOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> PutPermissionOutput {
        return PutPermissionOutput()
    }
}

extension PutRuleOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> PutRuleOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = PutRuleOutput()
        value.ruleArn = try reader["RuleArn"].readIfPresent()
        return value
    }
}

extension PutTargetsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> PutTargetsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = PutTargetsOutput()
        value.failedEntries = try reader["FailedEntries"].readListIfPresent(memberReadingClosure: EventBridgeClientTypes.PutTargetsResultEntry.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.failedEntryCount = try reader["FailedEntryCount"].readIfPresent() ?? 0
        return value
    }
}

extension RemovePermissionOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> RemovePermissionOutput {
        return RemovePermissionOutput()
    }
}

extension RemoveTargetsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> RemoveTargetsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = RemoveTargetsOutput()
        value.failedEntries = try reader["FailedEntries"].readListIfPresent(memberReadingClosure: EventBridgeClientTypes.RemoveTargetsResultEntry.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.failedEntryCount = try reader["FailedEntryCount"].readIfPresent() ?? 0
        return value
    }
}

extension StartReplayOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> StartReplayOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = StartReplayOutput()
        value.replayArn = try reader["ReplayArn"].readIfPresent()
        value.replayStartTime = try reader["ReplayStartTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.state = try reader["State"].readIfPresent()
        value.stateReason = try reader["StateReason"].readIfPresent()
        return value
    }
}

extension TagResourceOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> TagResourceOutput {
        return TagResourceOutput()
    }
}

extension TestEventPatternOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> TestEventPatternOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = TestEventPatternOutput()
        value.result = try reader["Result"].readIfPresent() ?? false
        return value
    }
}

extension UntagResourceOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UntagResourceOutput {
        return UntagResourceOutput()
    }
}

extension UpdateApiDestinationOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdateApiDestinationOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = UpdateApiDestinationOutput()
        value.apiDestinationArn = try reader["ApiDestinationArn"].readIfPresent()
        value.apiDestinationState = try reader["ApiDestinationState"].readIfPresent()
        value.creationTime = try reader["CreationTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.lastModifiedTime = try reader["LastModifiedTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        return value
    }
}

extension UpdateArchiveOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdateArchiveOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = UpdateArchiveOutput()
        value.archiveArn = try reader["ArchiveArn"].readIfPresent()
        value.creationTime = try reader["CreationTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.state = try reader["State"].readIfPresent()
        value.stateReason = try reader["StateReason"].readIfPresent()
        return value
    }
}

extension UpdateConnectionOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdateConnectionOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = UpdateConnectionOutput()
        value.connectionArn = try reader["ConnectionArn"].readIfPresent()
        value.connectionState = try reader["ConnectionState"].readIfPresent()
        value.creationTime = try reader["CreationTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.lastAuthorizedTime = try reader["LastAuthorizedTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.lastModifiedTime = try reader["LastModifiedTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        return value
    }
}

extension UpdateEndpointOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdateEndpointOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = UpdateEndpointOutput()
        value.arn = try reader["Arn"].readIfPresent()
        value.endpointId = try reader["EndpointId"].readIfPresent()
        value.endpointUrl = try reader["EndpointUrl"].readIfPresent()
        value.eventBuses = try reader["EventBuses"].readListIfPresent(memberReadingClosure: EventBridgeClientTypes.EndpointEventBus.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.name = try reader["Name"].readIfPresent()
        value.replicationConfig = try reader["ReplicationConfig"].readIfPresent(with: EventBridgeClientTypes.ReplicationConfig.read(from:))
        value.roleArn = try reader["RoleArn"].readIfPresent()
        value.routingConfig = try reader["RoutingConfig"].readIfPresent(with: EventBridgeClientTypes.RoutingConfig.read(from:))
        value.state = try reader["State"].readIfPresent()
        return value
    }
}

extension UpdateEventBusOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdateEventBusOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = UpdateEventBusOutput()
        value.arn = try reader["Arn"].readIfPresent()
        value.deadLetterConfig = try reader["DeadLetterConfig"].readIfPresent(with: EventBridgeClientTypes.DeadLetterConfig.read(from:))
        value.description = try reader["Description"].readIfPresent()
        value.kmsKeyIdentifier = try reader["KmsKeyIdentifier"].readIfPresent()
        value.name = try reader["Name"].readIfPresent()
        return value
    }
}

enum ActivateEventSourceOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ConcurrentModificationException": return try ConcurrentModificationException.makeError(baseError: baseError)
            case "InternalException": return try InternalException.makeError(baseError: baseError)
            case "InvalidStateException": return try InvalidStateException.makeError(baseError: baseError)
            case "OperationDisabledException": return try OperationDisabledException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CancelReplayOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ConcurrentModificationException": return try ConcurrentModificationException.makeError(baseError: baseError)
            case "IllegalStatusException": return try IllegalStatusException.makeError(baseError: baseError)
            case "InternalException": return try InternalException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateApiDestinationOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalException": return try InternalException.makeError(baseError: baseError)
            case "LimitExceededException": return try LimitExceededException.makeError(baseError: baseError)
            case "ResourceAlreadyExistsException": return try ResourceAlreadyExistsException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateArchiveOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ConcurrentModificationException": return try ConcurrentModificationException.makeError(baseError: baseError)
            case "InternalException": return try InternalException.makeError(baseError: baseError)
            case "InvalidEventPatternException": return try InvalidEventPatternException.makeError(baseError: baseError)
            case "LimitExceededException": return try LimitExceededException.makeError(baseError: baseError)
            case "ResourceAlreadyExistsException": return try ResourceAlreadyExistsException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateConnectionOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalException": return try InternalException.makeError(baseError: baseError)
            case "LimitExceededException": return try LimitExceededException.makeError(baseError: baseError)
            case "ResourceAlreadyExistsException": return try ResourceAlreadyExistsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateEndpointOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalException": return try InternalException.makeError(baseError: baseError)
            case "LimitExceededException": return try LimitExceededException.makeError(baseError: baseError)
            case "ResourceAlreadyExistsException": return try ResourceAlreadyExistsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateEventBusOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ConcurrentModificationException": return try ConcurrentModificationException.makeError(baseError: baseError)
            case "InternalException": return try InternalException.makeError(baseError: baseError)
            case "InvalidStateException": return try InvalidStateException.makeError(baseError: baseError)
            case "LimitExceededException": return try LimitExceededException.makeError(baseError: baseError)
            case "OperationDisabledException": return try OperationDisabledException.makeError(baseError: baseError)
            case "ResourceAlreadyExistsException": return try ResourceAlreadyExistsException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreatePartnerEventSourceOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ConcurrentModificationException": return try ConcurrentModificationException.makeError(baseError: baseError)
            case "InternalException": return try InternalException.makeError(baseError: baseError)
            case "LimitExceededException": return try LimitExceededException.makeError(baseError: baseError)
            case "OperationDisabledException": return try OperationDisabledException.makeError(baseError: baseError)
            case "ResourceAlreadyExistsException": return try ResourceAlreadyExistsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeactivateEventSourceOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ConcurrentModificationException": return try ConcurrentModificationException.makeError(baseError: baseError)
            case "InternalException": return try InternalException.makeError(baseError: baseError)
            case "InvalidStateException": return try InvalidStateException.makeError(baseError: baseError)
            case "OperationDisabledException": return try OperationDisabledException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeauthorizeConnectionOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ConcurrentModificationException": return try ConcurrentModificationException.makeError(baseError: baseError)
            case "InternalException": return try InternalException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteApiDestinationOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ConcurrentModificationException": return try ConcurrentModificationException.makeError(baseError: baseError)
            case "InternalException": return try InternalException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteArchiveOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ConcurrentModificationException": return try ConcurrentModificationException.makeError(baseError: baseError)
            case "InternalException": return try InternalException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteConnectionOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ConcurrentModificationException": return try ConcurrentModificationException.makeError(baseError: baseError)
            case "InternalException": return try InternalException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteEndpointOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ConcurrentModificationException": return try ConcurrentModificationException.makeError(baseError: baseError)
            case "InternalException": return try InternalException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteEventBusOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ConcurrentModificationException": return try ConcurrentModificationException.makeError(baseError: baseError)
            case "InternalException": return try InternalException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeletePartnerEventSourceOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ConcurrentModificationException": return try ConcurrentModificationException.makeError(baseError: baseError)
            case "InternalException": return try InternalException.makeError(baseError: baseError)
            case "OperationDisabledException": return try OperationDisabledException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteRuleOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ConcurrentModificationException": return try ConcurrentModificationException.makeError(baseError: baseError)
            case "InternalException": return try InternalException.makeError(baseError: baseError)
            case "ManagedRuleException": return try ManagedRuleException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeApiDestinationOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalException": return try InternalException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeArchiveOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalException": return try InternalException.makeError(baseError: baseError)
            case "ResourceAlreadyExistsException": return try ResourceAlreadyExistsException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeConnectionOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalException": return try InternalException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeEndpointOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalException": return try InternalException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeEventBusOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalException": return try InternalException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeEventSourceOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalException": return try InternalException.makeError(baseError: baseError)
            case "OperationDisabledException": return try OperationDisabledException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribePartnerEventSourceOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalException": return try InternalException.makeError(baseError: baseError)
            case "OperationDisabledException": return try OperationDisabledException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeReplayOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalException": return try InternalException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeRuleOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalException": return try InternalException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DisableRuleOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ConcurrentModificationException": return try ConcurrentModificationException.makeError(baseError: baseError)
            case "InternalException": return try InternalException.makeError(baseError: baseError)
            case "ManagedRuleException": return try ManagedRuleException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum EnableRuleOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ConcurrentModificationException": return try ConcurrentModificationException.makeError(baseError: baseError)
            case "InternalException": return try InternalException.makeError(baseError: baseError)
            case "ManagedRuleException": return try ManagedRuleException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListApiDestinationsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalException": return try InternalException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListArchivesOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalException": return try InternalException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListConnectionsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalException": return try InternalException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListEndpointsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalException": return try InternalException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListEventBusesOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalException": return try InternalException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListEventSourcesOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalException": return try InternalException.makeError(baseError: baseError)
            case "OperationDisabledException": return try OperationDisabledException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListPartnerEventSourceAccountsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalException": return try InternalException.makeError(baseError: baseError)
            case "OperationDisabledException": return try OperationDisabledException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListPartnerEventSourcesOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalException": return try InternalException.makeError(baseError: baseError)
            case "OperationDisabledException": return try OperationDisabledException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListReplaysOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalException": return try InternalException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListRuleNamesByTargetOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalException": return try InternalException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListRulesOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalException": return try InternalException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListTagsForResourceOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalException": return try InternalException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListTargetsByRuleOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalException": return try InternalException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum PutEventsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalException": return try InternalException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum PutPartnerEventsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalException": return try InternalException.makeError(baseError: baseError)
            case "OperationDisabledException": return try OperationDisabledException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum PutPermissionOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ConcurrentModificationException": return try ConcurrentModificationException.makeError(baseError: baseError)
            case "InternalException": return try InternalException.makeError(baseError: baseError)
            case "OperationDisabledException": return try OperationDisabledException.makeError(baseError: baseError)
            case "PolicyLengthExceededException": return try PolicyLengthExceededException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum PutRuleOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ConcurrentModificationException": return try ConcurrentModificationException.makeError(baseError: baseError)
            case "InternalException": return try InternalException.makeError(baseError: baseError)
            case "InvalidEventPatternException": return try InvalidEventPatternException.makeError(baseError: baseError)
            case "LimitExceededException": return try LimitExceededException.makeError(baseError: baseError)
            case "ManagedRuleException": return try ManagedRuleException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum PutTargetsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ConcurrentModificationException": return try ConcurrentModificationException.makeError(baseError: baseError)
            case "InternalException": return try InternalException.makeError(baseError: baseError)
            case "LimitExceededException": return try LimitExceededException.makeError(baseError: baseError)
            case "ManagedRuleException": return try ManagedRuleException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum RemovePermissionOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ConcurrentModificationException": return try ConcurrentModificationException.makeError(baseError: baseError)
            case "InternalException": return try InternalException.makeError(baseError: baseError)
            case "OperationDisabledException": return try OperationDisabledException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum RemoveTargetsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ConcurrentModificationException": return try ConcurrentModificationException.makeError(baseError: baseError)
            case "InternalException": return try InternalException.makeError(baseError: baseError)
            case "ManagedRuleException": return try ManagedRuleException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum StartReplayOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalException": return try InternalException.makeError(baseError: baseError)
            case "InvalidEventPatternException": return try InvalidEventPatternException.makeError(baseError: baseError)
            case "LimitExceededException": return try LimitExceededException.makeError(baseError: baseError)
            case "ResourceAlreadyExistsException": return try ResourceAlreadyExistsException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum TagResourceOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ConcurrentModificationException": return try ConcurrentModificationException.makeError(baseError: baseError)
            case "InternalException": return try InternalException.makeError(baseError: baseError)
            case "ManagedRuleException": return try ManagedRuleException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum TestEventPatternOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalException": return try InternalException.makeError(baseError: baseError)
            case "InvalidEventPatternException": return try InvalidEventPatternException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UntagResourceOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ConcurrentModificationException": return try ConcurrentModificationException.makeError(baseError: baseError)
            case "InternalException": return try InternalException.makeError(baseError: baseError)
            case "ManagedRuleException": return try ManagedRuleException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdateApiDestinationOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ConcurrentModificationException": return try ConcurrentModificationException.makeError(baseError: baseError)
            case "InternalException": return try InternalException.makeError(baseError: baseError)
            case "LimitExceededException": return try LimitExceededException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdateArchiveOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ConcurrentModificationException": return try ConcurrentModificationException.makeError(baseError: baseError)
            case "InternalException": return try InternalException.makeError(baseError: baseError)
            case "InvalidEventPatternException": return try InvalidEventPatternException.makeError(baseError: baseError)
            case "LimitExceededException": return try LimitExceededException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdateConnectionOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ConcurrentModificationException": return try ConcurrentModificationException.makeError(baseError: baseError)
            case "InternalException": return try InternalException.makeError(baseError: baseError)
            case "LimitExceededException": return try LimitExceededException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdateEndpointOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ConcurrentModificationException": return try ConcurrentModificationException.makeError(baseError: baseError)
            case "InternalException": return try InternalException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdateEventBusOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ConcurrentModificationException": return try ConcurrentModificationException.makeError(baseError: baseError)
            case "InternalException": return try InternalException.makeError(baseError: baseError)
            case "OperationDisabledException": return try OperationDisabledException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

extension ConcurrentModificationException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> ConcurrentModificationException {
        let reader = baseError.errorBodyReader
        var value = ConcurrentModificationException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension InvalidStateException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> InvalidStateException {
        let reader = baseError.errorBodyReader
        var value = InvalidStateException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension InternalException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> InternalException {
        let reader = baseError.errorBodyReader
        var value = InternalException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension OperationDisabledException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> OperationDisabledException {
        let reader = baseError.errorBodyReader
        var value = OperationDisabledException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ResourceNotFoundException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> ResourceNotFoundException {
        let reader = baseError.errorBodyReader
        var value = ResourceNotFoundException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension IllegalStatusException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> IllegalStatusException {
        let reader = baseError.errorBodyReader
        var value = IllegalStatusException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ResourceAlreadyExistsException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> ResourceAlreadyExistsException {
        let reader = baseError.errorBodyReader
        var value = ResourceAlreadyExistsException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension LimitExceededException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> LimitExceededException {
        let reader = baseError.errorBodyReader
        var value = LimitExceededException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension InvalidEventPatternException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> InvalidEventPatternException {
        let reader = baseError.errorBodyReader
        var value = InvalidEventPatternException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ManagedRuleException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> ManagedRuleException {
        let reader = baseError.errorBodyReader
        var value = ManagedRuleException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension PolicyLengthExceededException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> PolicyLengthExceededException {
        let reader = baseError.errorBodyReader
        var value = PolicyLengthExceededException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension EventBridgeClientTypes.RoutingConfig {

    static func write(value: EventBridgeClientTypes.RoutingConfig?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["FailoverConfig"].write(value.failoverConfig, with: EventBridgeClientTypes.FailoverConfig.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> EventBridgeClientTypes.RoutingConfig {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = EventBridgeClientTypes.RoutingConfig()
        value.failoverConfig = try reader["FailoverConfig"].readIfPresent(with: EventBridgeClientTypes.FailoverConfig.read(from:))
        return value
    }
}

extension EventBridgeClientTypes.FailoverConfig {

    static func write(value: EventBridgeClientTypes.FailoverConfig?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Primary"].write(value.primary, with: EventBridgeClientTypes.Primary.write(value:to:))
        try writer["Secondary"].write(value.secondary, with: EventBridgeClientTypes.Secondary.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> EventBridgeClientTypes.FailoverConfig {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = EventBridgeClientTypes.FailoverConfig()
        value.primary = try reader["Primary"].readIfPresent(with: EventBridgeClientTypes.Primary.read(from:))
        value.secondary = try reader["Secondary"].readIfPresent(with: EventBridgeClientTypes.Secondary.read(from:))
        return value
    }
}

extension EventBridgeClientTypes.Secondary {

    static func write(value: EventBridgeClientTypes.Secondary?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Route"].write(value.route)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> EventBridgeClientTypes.Secondary {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = EventBridgeClientTypes.Secondary()
        value.route = try reader["Route"].readIfPresent() ?? ""
        return value
    }
}

extension EventBridgeClientTypes.Primary {

    static func write(value: EventBridgeClientTypes.Primary?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["HealthCheck"].write(value.healthCheck)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> EventBridgeClientTypes.Primary {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = EventBridgeClientTypes.Primary()
        value.healthCheck = try reader["HealthCheck"].readIfPresent() ?? ""
        return value
    }
}

extension EventBridgeClientTypes.ReplicationConfig {

    static func write(value: EventBridgeClientTypes.ReplicationConfig?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["State"].write(value.state)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> EventBridgeClientTypes.ReplicationConfig {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = EventBridgeClientTypes.ReplicationConfig()
        value.state = try reader["State"].readIfPresent()
        return value
    }
}

extension EventBridgeClientTypes.EndpointEventBus {

    static func write(value: EventBridgeClientTypes.EndpointEventBus?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["EventBusArn"].write(value.eventBusArn)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> EventBridgeClientTypes.EndpointEventBus {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = EventBridgeClientTypes.EndpointEventBus()
        value.eventBusArn = try reader["EventBusArn"].readIfPresent() ?? ""
        return value
    }
}

extension EventBridgeClientTypes.DeadLetterConfig {

    static func write(value: EventBridgeClientTypes.DeadLetterConfig?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Arn"].write(value.arn)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> EventBridgeClientTypes.DeadLetterConfig {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = EventBridgeClientTypes.DeadLetterConfig()
        value.arn = try reader["Arn"].readIfPresent()
        return value
    }
}

extension EventBridgeClientTypes.ConnectionAuthResponseParameters {

    static func read(from reader: SmithyJSON.Reader) throws -> EventBridgeClientTypes.ConnectionAuthResponseParameters {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = EventBridgeClientTypes.ConnectionAuthResponseParameters()
        value.basicAuthParameters = try reader["BasicAuthParameters"].readIfPresent(with: EventBridgeClientTypes.ConnectionBasicAuthResponseParameters.read(from:))
        value.oAuthParameters = try reader["OAuthParameters"].readIfPresent(with: EventBridgeClientTypes.ConnectionOAuthResponseParameters.read(from:))
        value.apiKeyAuthParameters = try reader["ApiKeyAuthParameters"].readIfPresent(with: EventBridgeClientTypes.ConnectionApiKeyAuthResponseParameters.read(from:))
        value.invocationHttpParameters = try reader["InvocationHttpParameters"].readIfPresent(with: EventBridgeClientTypes.ConnectionHttpParameters.read(from:))
        return value
    }
}

extension EventBridgeClientTypes.ConnectionHttpParameters {

    static func write(value: EventBridgeClientTypes.ConnectionHttpParameters?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["BodyParameters"].writeList(value.bodyParameters, memberWritingClosure: EventBridgeClientTypes.ConnectionBodyParameter.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["HeaderParameters"].writeList(value.headerParameters, memberWritingClosure: EventBridgeClientTypes.ConnectionHeaderParameter.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["QueryStringParameters"].writeList(value.queryStringParameters, memberWritingClosure: EventBridgeClientTypes.ConnectionQueryStringParameter.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> EventBridgeClientTypes.ConnectionHttpParameters {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = EventBridgeClientTypes.ConnectionHttpParameters()
        value.headerParameters = try reader["HeaderParameters"].readListIfPresent(memberReadingClosure: EventBridgeClientTypes.ConnectionHeaderParameter.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.queryStringParameters = try reader["QueryStringParameters"].readListIfPresent(memberReadingClosure: EventBridgeClientTypes.ConnectionQueryStringParameter.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.bodyParameters = try reader["BodyParameters"].readListIfPresent(memberReadingClosure: EventBridgeClientTypes.ConnectionBodyParameter.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension EventBridgeClientTypes.ConnectionBodyParameter {

    static func write(value: EventBridgeClientTypes.ConnectionBodyParameter?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["IsValueSecret"].write(value.isValueSecret)
        try writer["Key"].write(value.key)
        try writer["Value"].write(value.value)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> EventBridgeClientTypes.ConnectionBodyParameter {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = EventBridgeClientTypes.ConnectionBodyParameter()
        value.key = try reader["Key"].readIfPresent()
        value.value = try reader["Value"].readIfPresent()
        value.isValueSecret = try reader["IsValueSecret"].readIfPresent() ?? false
        return value
    }
}

extension EventBridgeClientTypes.ConnectionQueryStringParameter {

    static func write(value: EventBridgeClientTypes.ConnectionQueryStringParameter?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["IsValueSecret"].write(value.isValueSecret)
        try writer["Key"].write(value.key)
        try writer["Value"].write(value.value)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> EventBridgeClientTypes.ConnectionQueryStringParameter {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = EventBridgeClientTypes.ConnectionQueryStringParameter()
        value.key = try reader["Key"].readIfPresent()
        value.value = try reader["Value"].readIfPresent()
        value.isValueSecret = try reader["IsValueSecret"].readIfPresent() ?? false
        return value
    }
}

extension EventBridgeClientTypes.ConnectionHeaderParameter {

    static func write(value: EventBridgeClientTypes.ConnectionHeaderParameter?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["IsValueSecret"].write(value.isValueSecret)
        try writer["Key"].write(value.key)
        try writer["Value"].write(value.value)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> EventBridgeClientTypes.ConnectionHeaderParameter {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = EventBridgeClientTypes.ConnectionHeaderParameter()
        value.key = try reader["Key"].readIfPresent()
        value.value = try reader["Value"].readIfPresent()
        value.isValueSecret = try reader["IsValueSecret"].readIfPresent() ?? false
        return value
    }
}

extension EventBridgeClientTypes.ConnectionApiKeyAuthResponseParameters {

    static func read(from reader: SmithyJSON.Reader) throws -> EventBridgeClientTypes.ConnectionApiKeyAuthResponseParameters {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = EventBridgeClientTypes.ConnectionApiKeyAuthResponseParameters()
        value.apiKeyName = try reader["ApiKeyName"].readIfPresent()
        return value
    }
}

extension EventBridgeClientTypes.ConnectionOAuthResponseParameters {

    static func read(from reader: SmithyJSON.Reader) throws -> EventBridgeClientTypes.ConnectionOAuthResponseParameters {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = EventBridgeClientTypes.ConnectionOAuthResponseParameters()
        value.clientParameters = try reader["ClientParameters"].readIfPresent(with: EventBridgeClientTypes.ConnectionOAuthClientResponseParameters.read(from:))
        value.authorizationEndpoint = try reader["AuthorizationEndpoint"].readIfPresent()
        value.httpMethod = try reader["HttpMethod"].readIfPresent()
        value.oAuthHttpParameters = try reader["OAuthHttpParameters"].readIfPresent(with: EventBridgeClientTypes.ConnectionHttpParameters.read(from:))
        return value
    }
}

extension EventBridgeClientTypes.ConnectionOAuthClientResponseParameters {

    static func read(from reader: SmithyJSON.Reader) throws -> EventBridgeClientTypes.ConnectionOAuthClientResponseParameters {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = EventBridgeClientTypes.ConnectionOAuthClientResponseParameters()
        value.clientID = try reader["ClientID"].readIfPresent()
        return value
    }
}

extension EventBridgeClientTypes.ConnectionBasicAuthResponseParameters {

    static func read(from reader: SmithyJSON.Reader) throws -> EventBridgeClientTypes.ConnectionBasicAuthResponseParameters {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = EventBridgeClientTypes.ConnectionBasicAuthResponseParameters()
        value.username = try reader["Username"].readIfPresent()
        return value
    }
}

extension EventBridgeClientTypes.ReplayDestination {

    static func write(value: EventBridgeClientTypes.ReplayDestination?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Arn"].write(value.arn)
        try writer["FilterArns"].writeList(value.filterArns, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> EventBridgeClientTypes.ReplayDestination {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = EventBridgeClientTypes.ReplayDestination()
        value.arn = try reader["Arn"].readIfPresent() ?? ""
        value.filterArns = try reader["FilterArns"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension EventBridgeClientTypes.ApiDestination {

    static func read(from reader: SmithyJSON.Reader) throws -> EventBridgeClientTypes.ApiDestination {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = EventBridgeClientTypes.ApiDestination()
        value.apiDestinationArn = try reader["ApiDestinationArn"].readIfPresent()
        value.name = try reader["Name"].readIfPresent()
        value.apiDestinationState = try reader["ApiDestinationState"].readIfPresent()
        value.connectionArn = try reader["ConnectionArn"].readIfPresent()
        value.invocationEndpoint = try reader["InvocationEndpoint"].readIfPresent()
        value.httpMethod = try reader["HttpMethod"].readIfPresent()
        value.invocationRateLimitPerSecond = try reader["InvocationRateLimitPerSecond"].readIfPresent()
        value.creationTime = try reader["CreationTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.lastModifiedTime = try reader["LastModifiedTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        return value
    }
}

extension EventBridgeClientTypes.Archive {

    static func read(from reader: SmithyJSON.Reader) throws -> EventBridgeClientTypes.Archive {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = EventBridgeClientTypes.Archive()
        value.archiveName = try reader["ArchiveName"].readIfPresent()
        value.eventSourceArn = try reader["EventSourceArn"].readIfPresent()
        value.state = try reader["State"].readIfPresent()
        value.stateReason = try reader["StateReason"].readIfPresent()
        value.retentionDays = try reader["RetentionDays"].readIfPresent()
        value.sizeBytes = try reader["SizeBytes"].readIfPresent() ?? 0
        value.eventCount = try reader["EventCount"].readIfPresent() ?? 0
        value.creationTime = try reader["CreationTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        return value
    }
}

extension EventBridgeClientTypes.Connection {

    static func read(from reader: SmithyJSON.Reader) throws -> EventBridgeClientTypes.Connection {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = EventBridgeClientTypes.Connection()
        value.connectionArn = try reader["ConnectionArn"].readIfPresent()
        value.name = try reader["Name"].readIfPresent()
        value.connectionState = try reader["ConnectionState"].readIfPresent()
        value.stateReason = try reader["StateReason"].readIfPresent()
        value.authorizationType = try reader["AuthorizationType"].readIfPresent()
        value.creationTime = try reader["CreationTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.lastModifiedTime = try reader["LastModifiedTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.lastAuthorizedTime = try reader["LastAuthorizedTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        return value
    }
}

extension EventBridgeClientTypes.Endpoint {

    static func read(from reader: SmithyJSON.Reader) throws -> EventBridgeClientTypes.Endpoint {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = EventBridgeClientTypes.Endpoint()
        value.name = try reader["Name"].readIfPresent()
        value.description = try reader["Description"].readIfPresent()
        value.arn = try reader["Arn"].readIfPresent()
        value.routingConfig = try reader["RoutingConfig"].readIfPresent(with: EventBridgeClientTypes.RoutingConfig.read(from:))
        value.replicationConfig = try reader["ReplicationConfig"].readIfPresent(with: EventBridgeClientTypes.ReplicationConfig.read(from:))
        value.eventBuses = try reader["EventBuses"].readListIfPresent(memberReadingClosure: EventBridgeClientTypes.EndpointEventBus.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.roleArn = try reader["RoleArn"].readIfPresent()
        value.endpointId = try reader["EndpointId"].readIfPresent()
        value.endpointUrl = try reader["EndpointUrl"].readIfPresent()
        value.state = try reader["State"].readIfPresent()
        value.stateReason = try reader["StateReason"].readIfPresent()
        value.creationTime = try reader["CreationTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.lastModifiedTime = try reader["LastModifiedTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        return value
    }
}

extension EventBridgeClientTypes.EventBus {

    static func read(from reader: SmithyJSON.Reader) throws -> EventBridgeClientTypes.EventBus {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = EventBridgeClientTypes.EventBus()
        value.name = try reader["Name"].readIfPresent()
        value.arn = try reader["Arn"].readIfPresent()
        value.description = try reader["Description"].readIfPresent()
        value.policy = try reader["Policy"].readIfPresent()
        value.creationTime = try reader["CreationTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.lastModifiedTime = try reader["LastModifiedTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        return value
    }
}

extension EventBridgeClientTypes.EventSource {

    static func read(from reader: SmithyJSON.Reader) throws -> EventBridgeClientTypes.EventSource {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = EventBridgeClientTypes.EventSource()
        value.arn = try reader["Arn"].readIfPresent()
        value.createdBy = try reader["CreatedBy"].readIfPresent()
        value.creationTime = try reader["CreationTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.expirationTime = try reader["ExpirationTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.name = try reader["Name"].readIfPresent()
        value.state = try reader["State"].readIfPresent()
        return value
    }
}

extension EventBridgeClientTypes.PartnerEventSourceAccount {

    static func read(from reader: SmithyJSON.Reader) throws -> EventBridgeClientTypes.PartnerEventSourceAccount {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = EventBridgeClientTypes.PartnerEventSourceAccount()
        value.account = try reader["Account"].readIfPresent()
        value.creationTime = try reader["CreationTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.expirationTime = try reader["ExpirationTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.state = try reader["State"].readIfPresent()
        return value
    }
}

extension EventBridgeClientTypes.PartnerEventSource {

    static func read(from reader: SmithyJSON.Reader) throws -> EventBridgeClientTypes.PartnerEventSource {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = EventBridgeClientTypes.PartnerEventSource()
        value.arn = try reader["Arn"].readIfPresent()
        value.name = try reader["Name"].readIfPresent()
        return value
    }
}

extension EventBridgeClientTypes.Replay {

    static func read(from reader: SmithyJSON.Reader) throws -> EventBridgeClientTypes.Replay {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = EventBridgeClientTypes.Replay()
        value.replayName = try reader["ReplayName"].readIfPresent()
        value.eventSourceArn = try reader["EventSourceArn"].readIfPresent()
        value.state = try reader["State"].readIfPresent()
        value.stateReason = try reader["StateReason"].readIfPresent()
        value.eventStartTime = try reader["EventStartTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.eventEndTime = try reader["EventEndTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.eventLastReplayedTime = try reader["EventLastReplayedTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.replayStartTime = try reader["ReplayStartTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.replayEndTime = try reader["ReplayEndTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        return value
    }
}

extension EventBridgeClientTypes.Rule {

    static func read(from reader: SmithyJSON.Reader) throws -> EventBridgeClientTypes.Rule {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = EventBridgeClientTypes.Rule()
        value.name = try reader["Name"].readIfPresent()
        value.arn = try reader["Arn"].readIfPresent()
        value.eventPattern = try reader["EventPattern"].readIfPresent()
        value.state = try reader["State"].readIfPresent()
        value.description = try reader["Description"].readIfPresent()
        value.scheduleExpression = try reader["ScheduleExpression"].readIfPresent()
        value.roleArn = try reader["RoleArn"].readIfPresent()
        value.managedBy = try reader["ManagedBy"].readIfPresent()
        value.eventBusName = try reader["EventBusName"].readIfPresent()
        return value
    }
}

extension EventBridgeClientTypes.Tag {

    static func write(value: EventBridgeClientTypes.Tag?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Key"].write(value.key)
        try writer["Value"].write(value.value)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> EventBridgeClientTypes.Tag {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = EventBridgeClientTypes.Tag()
        value.key = try reader["Key"].readIfPresent() ?? ""
        value.value = try reader["Value"].readIfPresent() ?? ""
        return value
    }
}

extension EventBridgeClientTypes.Target {

    static func write(value: EventBridgeClientTypes.Target?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["AppSyncParameters"].write(value.appSyncParameters, with: EventBridgeClientTypes.AppSyncParameters.write(value:to:))
        try writer["Arn"].write(value.arn)
        try writer["BatchParameters"].write(value.batchParameters, with: EventBridgeClientTypes.BatchParameters.write(value:to:))
        try writer["DeadLetterConfig"].write(value.deadLetterConfig, with: EventBridgeClientTypes.DeadLetterConfig.write(value:to:))
        try writer["EcsParameters"].write(value.ecsParameters, with: EventBridgeClientTypes.EcsParameters.write(value:to:))
        try writer["HttpParameters"].write(value.httpParameters, with: EventBridgeClientTypes.HttpParameters.write(value:to:))
        try writer["Id"].write(value.id)
        try writer["Input"].write(value.input)
        try writer["InputPath"].write(value.inputPath)
        try writer["InputTransformer"].write(value.inputTransformer, with: EventBridgeClientTypes.InputTransformer.write(value:to:))
        try writer["KinesisParameters"].write(value.kinesisParameters, with: EventBridgeClientTypes.KinesisParameters.write(value:to:))
        try writer["RedshiftDataParameters"].write(value.redshiftDataParameters, with: EventBridgeClientTypes.RedshiftDataParameters.write(value:to:))
        try writer["RetryPolicy"].write(value.retryPolicy, with: EventBridgeClientTypes.RetryPolicy.write(value:to:))
        try writer["RoleArn"].write(value.roleArn)
        try writer["RunCommandParameters"].write(value.runCommandParameters, with: EventBridgeClientTypes.RunCommandParameters.write(value:to:))
        try writer["SageMakerPipelineParameters"].write(value.sageMakerPipelineParameters, with: EventBridgeClientTypes.SageMakerPipelineParameters.write(value:to:))
        try writer["SqsParameters"].write(value.sqsParameters, with: EventBridgeClientTypes.SqsParameters.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> EventBridgeClientTypes.Target {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = EventBridgeClientTypes.Target()
        value.id = try reader["Id"].readIfPresent() ?? ""
        value.arn = try reader["Arn"].readIfPresent() ?? ""
        value.roleArn = try reader["RoleArn"].readIfPresent()
        value.input = try reader["Input"].readIfPresent()
        value.inputPath = try reader["InputPath"].readIfPresent()
        value.inputTransformer = try reader["InputTransformer"].readIfPresent(with: EventBridgeClientTypes.InputTransformer.read(from:))
        value.kinesisParameters = try reader["KinesisParameters"].readIfPresent(with: EventBridgeClientTypes.KinesisParameters.read(from:))
        value.runCommandParameters = try reader["RunCommandParameters"].readIfPresent(with: EventBridgeClientTypes.RunCommandParameters.read(from:))
        value.ecsParameters = try reader["EcsParameters"].readIfPresent(with: EventBridgeClientTypes.EcsParameters.read(from:))
        value.batchParameters = try reader["BatchParameters"].readIfPresent(with: EventBridgeClientTypes.BatchParameters.read(from:))
        value.sqsParameters = try reader["SqsParameters"].readIfPresent(with: EventBridgeClientTypes.SqsParameters.read(from:))
        value.httpParameters = try reader["HttpParameters"].readIfPresent(with: EventBridgeClientTypes.HttpParameters.read(from:))
        value.redshiftDataParameters = try reader["RedshiftDataParameters"].readIfPresent(with: EventBridgeClientTypes.RedshiftDataParameters.read(from:))
        value.sageMakerPipelineParameters = try reader["SageMakerPipelineParameters"].readIfPresent(with: EventBridgeClientTypes.SageMakerPipelineParameters.read(from:))
        value.deadLetterConfig = try reader["DeadLetterConfig"].readIfPresent(with: EventBridgeClientTypes.DeadLetterConfig.read(from:))
        value.retryPolicy = try reader["RetryPolicy"].readIfPresent(with: EventBridgeClientTypes.RetryPolicy.read(from:))
        value.appSyncParameters = try reader["AppSyncParameters"].readIfPresent(with: EventBridgeClientTypes.AppSyncParameters.read(from:))
        return value
    }
}

extension EventBridgeClientTypes.AppSyncParameters {

    static func write(value: EventBridgeClientTypes.AppSyncParameters?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["GraphQLOperation"].write(value.graphQLOperation)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> EventBridgeClientTypes.AppSyncParameters {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = EventBridgeClientTypes.AppSyncParameters()
        value.graphQLOperation = try reader["GraphQLOperation"].readIfPresent()
        return value
    }
}

extension EventBridgeClientTypes.RetryPolicy {

    static func write(value: EventBridgeClientTypes.RetryPolicy?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["MaximumEventAgeInSeconds"].write(value.maximumEventAgeInSeconds)
        try writer["MaximumRetryAttempts"].write(value.maximumRetryAttempts)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> EventBridgeClientTypes.RetryPolicy {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = EventBridgeClientTypes.RetryPolicy()
        value.maximumRetryAttempts = try reader["MaximumRetryAttempts"].readIfPresent()
        value.maximumEventAgeInSeconds = try reader["MaximumEventAgeInSeconds"].readIfPresent()
        return value
    }
}

extension EventBridgeClientTypes.SageMakerPipelineParameters {

    static func write(value: EventBridgeClientTypes.SageMakerPipelineParameters?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["PipelineParameterList"].writeList(value.pipelineParameterList, memberWritingClosure: EventBridgeClientTypes.SageMakerPipelineParameter.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> EventBridgeClientTypes.SageMakerPipelineParameters {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = EventBridgeClientTypes.SageMakerPipelineParameters()
        value.pipelineParameterList = try reader["PipelineParameterList"].readListIfPresent(memberReadingClosure: EventBridgeClientTypes.SageMakerPipelineParameter.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension EventBridgeClientTypes.SageMakerPipelineParameter {

    static func write(value: EventBridgeClientTypes.SageMakerPipelineParameter?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Name"].write(value.name)
        try writer["Value"].write(value.value)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> EventBridgeClientTypes.SageMakerPipelineParameter {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = EventBridgeClientTypes.SageMakerPipelineParameter()
        value.name = try reader["Name"].readIfPresent() ?? ""
        value.value = try reader["Value"].readIfPresent() ?? ""
        return value
    }
}

extension EventBridgeClientTypes.RedshiftDataParameters {

    static func write(value: EventBridgeClientTypes.RedshiftDataParameters?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Database"].write(value.database)
        try writer["DbUser"].write(value.dbUser)
        try writer["SecretManagerArn"].write(value.secretManagerArn)
        try writer["Sql"].write(value.sql)
        try writer["Sqls"].writeList(value.sqls, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["StatementName"].write(value.statementName)
        try writer["WithEvent"].write(value.withEvent)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> EventBridgeClientTypes.RedshiftDataParameters {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = EventBridgeClientTypes.RedshiftDataParameters()
        value.secretManagerArn = try reader["SecretManagerArn"].readIfPresent()
        value.database = try reader["Database"].readIfPresent() ?? ""
        value.dbUser = try reader["DbUser"].readIfPresent()
        value.sql = try reader["Sql"].readIfPresent()
        value.statementName = try reader["StatementName"].readIfPresent()
        value.withEvent = try reader["WithEvent"].readIfPresent() ?? false
        value.sqls = try reader["Sqls"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension EventBridgeClientTypes.HttpParameters {

    static func write(value: EventBridgeClientTypes.HttpParameters?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["HeaderParameters"].writeMap(value.headerParameters, valueWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        try writer["PathParameterValues"].writeList(value.pathParameterValues, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["QueryStringParameters"].writeMap(value.queryStringParameters, valueWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> EventBridgeClientTypes.HttpParameters {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = EventBridgeClientTypes.HttpParameters()
        value.pathParameterValues = try reader["PathParameterValues"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.headerParameters = try reader["HeaderParameters"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        value.queryStringParameters = try reader["QueryStringParameters"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        return value
    }
}

extension EventBridgeClientTypes.SqsParameters {

    static func write(value: EventBridgeClientTypes.SqsParameters?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["MessageGroupId"].write(value.messageGroupId)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> EventBridgeClientTypes.SqsParameters {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = EventBridgeClientTypes.SqsParameters()
        value.messageGroupId = try reader["MessageGroupId"].readIfPresent()
        return value
    }
}

extension EventBridgeClientTypes.BatchParameters {

    static func write(value: EventBridgeClientTypes.BatchParameters?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ArrayProperties"].write(value.arrayProperties, with: EventBridgeClientTypes.BatchArrayProperties.write(value:to:))
        try writer["JobDefinition"].write(value.jobDefinition)
        try writer["JobName"].write(value.jobName)
        try writer["RetryStrategy"].write(value.retryStrategy, with: EventBridgeClientTypes.BatchRetryStrategy.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> EventBridgeClientTypes.BatchParameters {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = EventBridgeClientTypes.BatchParameters()
        value.jobDefinition = try reader["JobDefinition"].readIfPresent() ?? ""
        value.jobName = try reader["JobName"].readIfPresent() ?? ""
        value.arrayProperties = try reader["ArrayProperties"].readIfPresent(with: EventBridgeClientTypes.BatchArrayProperties.read(from:))
        value.retryStrategy = try reader["RetryStrategy"].readIfPresent(with: EventBridgeClientTypes.BatchRetryStrategy.read(from:))
        return value
    }
}

extension EventBridgeClientTypes.BatchRetryStrategy {

    static func write(value: EventBridgeClientTypes.BatchRetryStrategy?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Attempts"].write(value.attempts)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> EventBridgeClientTypes.BatchRetryStrategy {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = EventBridgeClientTypes.BatchRetryStrategy()
        value.attempts = try reader["Attempts"].readIfPresent() ?? 0
        return value
    }
}

extension EventBridgeClientTypes.BatchArrayProperties {

    static func write(value: EventBridgeClientTypes.BatchArrayProperties?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Size"].write(value.size)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> EventBridgeClientTypes.BatchArrayProperties {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = EventBridgeClientTypes.BatchArrayProperties()
        value.size = try reader["Size"].readIfPresent() ?? 0
        return value
    }
}

extension EventBridgeClientTypes.EcsParameters {

    static func write(value: EventBridgeClientTypes.EcsParameters?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["CapacityProviderStrategy"].writeList(value.capacityProviderStrategy, memberWritingClosure: EventBridgeClientTypes.CapacityProviderStrategyItem.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["EnableECSManagedTags"].write(value.enableECSManagedTags)
        try writer["EnableExecuteCommand"].write(value.enableExecuteCommand)
        try writer["Group"].write(value.group)
        try writer["LaunchType"].write(value.launchType)
        try writer["NetworkConfiguration"].write(value.networkConfiguration, with: EventBridgeClientTypes.NetworkConfiguration.write(value:to:))
        try writer["PlacementConstraints"].writeList(value.placementConstraints, memberWritingClosure: EventBridgeClientTypes.PlacementConstraint.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["PlacementStrategy"].writeList(value.placementStrategy, memberWritingClosure: EventBridgeClientTypes.PlacementStrategy.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["PlatformVersion"].write(value.platformVersion)
        try writer["PropagateTags"].write(value.propagateTags)
        try writer["ReferenceId"].write(value.referenceId)
        try writer["Tags"].writeList(value.tags, memberWritingClosure: EventBridgeClientTypes.Tag.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["TaskCount"].write(value.taskCount)
        try writer["TaskDefinitionArn"].write(value.taskDefinitionArn)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> EventBridgeClientTypes.EcsParameters {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = EventBridgeClientTypes.EcsParameters()
        value.taskDefinitionArn = try reader["TaskDefinitionArn"].readIfPresent() ?? ""
        value.taskCount = try reader["TaskCount"].readIfPresent()
        value.launchType = try reader["LaunchType"].readIfPresent()
        value.networkConfiguration = try reader["NetworkConfiguration"].readIfPresent(with: EventBridgeClientTypes.NetworkConfiguration.read(from:))
        value.platformVersion = try reader["PlatformVersion"].readIfPresent()
        value.group = try reader["Group"].readIfPresent()
        value.capacityProviderStrategy = try reader["CapacityProviderStrategy"].readListIfPresent(memberReadingClosure: EventBridgeClientTypes.CapacityProviderStrategyItem.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.enableECSManagedTags = try reader["EnableECSManagedTags"].readIfPresent() ?? false
        value.enableExecuteCommand = try reader["EnableExecuteCommand"].readIfPresent() ?? false
        value.placementConstraints = try reader["PlacementConstraints"].readListIfPresent(memberReadingClosure: EventBridgeClientTypes.PlacementConstraint.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.placementStrategy = try reader["PlacementStrategy"].readListIfPresent(memberReadingClosure: EventBridgeClientTypes.PlacementStrategy.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.propagateTags = try reader["PropagateTags"].readIfPresent()
        value.referenceId = try reader["ReferenceId"].readIfPresent()
        value.tags = try reader["Tags"].readListIfPresent(memberReadingClosure: EventBridgeClientTypes.Tag.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension EventBridgeClientTypes.PlacementStrategy {

    static func write(value: EventBridgeClientTypes.PlacementStrategy?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["field"].write(value.field)
        try writer["type"].write(value.type)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> EventBridgeClientTypes.PlacementStrategy {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = EventBridgeClientTypes.PlacementStrategy()
        value.type = try reader["type"].readIfPresent()
        value.field = try reader["field"].readIfPresent()
        return value
    }
}

extension EventBridgeClientTypes.PlacementConstraint {

    static func write(value: EventBridgeClientTypes.PlacementConstraint?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["expression"].write(value.expression)
        try writer["type"].write(value.type)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> EventBridgeClientTypes.PlacementConstraint {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = EventBridgeClientTypes.PlacementConstraint()
        value.type = try reader["type"].readIfPresent()
        value.expression = try reader["expression"].readIfPresent()
        return value
    }
}

extension EventBridgeClientTypes.CapacityProviderStrategyItem {

    static func write(value: EventBridgeClientTypes.CapacityProviderStrategyItem?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["base"].write(value.base)
        try writer["capacityProvider"].write(value.capacityProvider)
        try writer["weight"].write(value.weight)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> EventBridgeClientTypes.CapacityProviderStrategyItem {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = EventBridgeClientTypes.CapacityProviderStrategyItem()
        value.capacityProvider = try reader["capacityProvider"].readIfPresent() ?? ""
        value.weight = try reader["weight"].readIfPresent() ?? 0
        value.base = try reader["base"].readIfPresent() ?? 0
        return value
    }
}

extension EventBridgeClientTypes.NetworkConfiguration {

    static func write(value: EventBridgeClientTypes.NetworkConfiguration?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["awsvpcConfiguration"].write(value.awsvpcConfiguration, with: EventBridgeClientTypes.AwsVpcConfiguration.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> EventBridgeClientTypes.NetworkConfiguration {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = EventBridgeClientTypes.NetworkConfiguration()
        value.awsvpcConfiguration = try reader["awsvpcConfiguration"].readIfPresent(with: EventBridgeClientTypes.AwsVpcConfiguration.read(from:))
        return value
    }
}

extension EventBridgeClientTypes.AwsVpcConfiguration {

    static func write(value: EventBridgeClientTypes.AwsVpcConfiguration?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["AssignPublicIp"].write(value.assignPublicIp)
        try writer["SecurityGroups"].writeList(value.securityGroups, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["Subnets"].writeList(value.subnets, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> EventBridgeClientTypes.AwsVpcConfiguration {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = EventBridgeClientTypes.AwsVpcConfiguration()
        value.subnets = try reader["Subnets"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        value.securityGroups = try reader["SecurityGroups"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.assignPublicIp = try reader["AssignPublicIp"].readIfPresent()
        return value
    }
}

extension EventBridgeClientTypes.RunCommandParameters {

    static func write(value: EventBridgeClientTypes.RunCommandParameters?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["RunCommandTargets"].writeList(value.runCommandTargets, memberWritingClosure: EventBridgeClientTypes.RunCommandTarget.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> EventBridgeClientTypes.RunCommandParameters {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = EventBridgeClientTypes.RunCommandParameters()
        value.runCommandTargets = try reader["RunCommandTargets"].readListIfPresent(memberReadingClosure: EventBridgeClientTypes.RunCommandTarget.read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        return value
    }
}

extension EventBridgeClientTypes.RunCommandTarget {

    static func write(value: EventBridgeClientTypes.RunCommandTarget?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Key"].write(value.key)
        try writer["Values"].writeList(value.values, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> EventBridgeClientTypes.RunCommandTarget {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = EventBridgeClientTypes.RunCommandTarget()
        value.key = try reader["Key"].readIfPresent() ?? ""
        value.values = try reader["Values"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        return value
    }
}

extension EventBridgeClientTypes.KinesisParameters {

    static func write(value: EventBridgeClientTypes.KinesisParameters?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["PartitionKeyPath"].write(value.partitionKeyPath)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> EventBridgeClientTypes.KinesisParameters {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = EventBridgeClientTypes.KinesisParameters()
        value.partitionKeyPath = try reader["PartitionKeyPath"].readIfPresent() ?? ""
        return value
    }
}

extension EventBridgeClientTypes.InputTransformer {

    static func write(value: EventBridgeClientTypes.InputTransformer?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["InputPathsMap"].writeMap(value.inputPathsMap, valueWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        try writer["InputTemplate"].write(value.inputTemplate)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> EventBridgeClientTypes.InputTransformer {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = EventBridgeClientTypes.InputTransformer()
        value.inputPathsMap = try reader["InputPathsMap"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        value.inputTemplate = try reader["InputTemplate"].readIfPresent() ?? ""
        return value
    }
}

extension EventBridgeClientTypes.PutEventsResultEntry {

    static func read(from reader: SmithyJSON.Reader) throws -> EventBridgeClientTypes.PutEventsResultEntry {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = EventBridgeClientTypes.PutEventsResultEntry()
        value.eventId = try reader["EventId"].readIfPresent()
        value.errorCode = try reader["ErrorCode"].readIfPresent()
        value.errorMessage = try reader["ErrorMessage"].readIfPresent()
        return value
    }
}

extension EventBridgeClientTypes.PutPartnerEventsResultEntry {

    static func read(from reader: SmithyJSON.Reader) throws -> EventBridgeClientTypes.PutPartnerEventsResultEntry {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = EventBridgeClientTypes.PutPartnerEventsResultEntry()
        value.eventId = try reader["EventId"].readIfPresent()
        value.errorCode = try reader["ErrorCode"].readIfPresent()
        value.errorMessage = try reader["ErrorMessage"].readIfPresent()
        return value
    }
}

extension EventBridgeClientTypes.PutTargetsResultEntry {

    static func read(from reader: SmithyJSON.Reader) throws -> EventBridgeClientTypes.PutTargetsResultEntry {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = EventBridgeClientTypes.PutTargetsResultEntry()
        value.targetId = try reader["TargetId"].readIfPresent()
        value.errorCode = try reader["ErrorCode"].readIfPresent()
        value.errorMessage = try reader["ErrorMessage"].readIfPresent()
        return value
    }
}

extension EventBridgeClientTypes.RemoveTargetsResultEntry {

    static func read(from reader: SmithyJSON.Reader) throws -> EventBridgeClientTypes.RemoveTargetsResultEntry {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = EventBridgeClientTypes.RemoveTargetsResultEntry()
        value.targetId = try reader["TargetId"].readIfPresent()
        value.errorCode = try reader["ErrorCode"].readIfPresent()
        value.errorMessage = try reader["ErrorMessage"].readIfPresent()
        return value
    }
}

extension EventBridgeClientTypes.CreateConnectionAuthRequestParameters {

    static func write(value: EventBridgeClientTypes.CreateConnectionAuthRequestParameters?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ApiKeyAuthParameters"].write(value.apiKeyAuthParameters, with: EventBridgeClientTypes.CreateConnectionApiKeyAuthRequestParameters.write(value:to:))
        try writer["BasicAuthParameters"].write(value.basicAuthParameters, with: EventBridgeClientTypes.CreateConnectionBasicAuthRequestParameters.write(value:to:))
        try writer["InvocationHttpParameters"].write(value.invocationHttpParameters, with: EventBridgeClientTypes.ConnectionHttpParameters.write(value:to:))
        try writer["OAuthParameters"].write(value.oAuthParameters, with: EventBridgeClientTypes.CreateConnectionOAuthRequestParameters.write(value:to:))
    }
}

extension EventBridgeClientTypes.CreateConnectionApiKeyAuthRequestParameters {

    static func write(value: EventBridgeClientTypes.CreateConnectionApiKeyAuthRequestParameters?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ApiKeyName"].write(value.apiKeyName)
        try writer["ApiKeyValue"].write(value.apiKeyValue)
    }
}

extension EventBridgeClientTypes.CreateConnectionOAuthRequestParameters {

    static func write(value: EventBridgeClientTypes.CreateConnectionOAuthRequestParameters?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["AuthorizationEndpoint"].write(value.authorizationEndpoint)
        try writer["ClientParameters"].write(value.clientParameters, with: EventBridgeClientTypes.CreateConnectionOAuthClientRequestParameters.write(value:to:))
        try writer["HttpMethod"].write(value.httpMethod)
        try writer["OAuthHttpParameters"].write(value.oAuthHttpParameters, with: EventBridgeClientTypes.ConnectionHttpParameters.write(value:to:))
    }
}

extension EventBridgeClientTypes.CreateConnectionOAuthClientRequestParameters {

    static func write(value: EventBridgeClientTypes.CreateConnectionOAuthClientRequestParameters?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ClientID"].write(value.clientID)
        try writer["ClientSecret"].write(value.clientSecret)
    }
}

extension EventBridgeClientTypes.CreateConnectionBasicAuthRequestParameters {

    static func write(value: EventBridgeClientTypes.CreateConnectionBasicAuthRequestParameters?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Password"].write(value.password)
        try writer["Username"].write(value.username)
    }
}

extension EventBridgeClientTypes.PutEventsRequestEntry {

    static func write(value: EventBridgeClientTypes.PutEventsRequestEntry?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Detail"].write(value.detail)
        try writer["DetailType"].write(value.detailType)
        try writer["EventBusName"].write(value.eventBusName)
        try writer["Resources"].writeList(value.resources, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["Source"].write(value.source)
        try writer["Time"].writeTimestamp(value.time, format: SmithyTimestamps.TimestampFormat.epochSeconds)
        try writer["TraceHeader"].write(value.traceHeader)
    }
}

extension EventBridgeClientTypes.PutPartnerEventsRequestEntry {

    static func write(value: EventBridgeClientTypes.PutPartnerEventsRequestEntry?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Detail"].write(value.detail)
        try writer["DetailType"].write(value.detailType)
        try writer["Resources"].writeList(value.resources, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["Source"].write(value.source)
        try writer["Time"].writeTimestamp(value.time, format: SmithyTimestamps.TimestampFormat.epochSeconds)
    }
}

extension EventBridgeClientTypes.Condition {

    static func write(value: EventBridgeClientTypes.Condition?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Key"].write(value.key)
        try writer["Type"].write(value.type)
        try writer["Value"].write(value.value)
    }
}

extension EventBridgeClientTypes.UpdateConnectionAuthRequestParameters {

    static func write(value: EventBridgeClientTypes.UpdateConnectionAuthRequestParameters?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ApiKeyAuthParameters"].write(value.apiKeyAuthParameters, with: EventBridgeClientTypes.UpdateConnectionApiKeyAuthRequestParameters.write(value:to:))
        try writer["BasicAuthParameters"].write(value.basicAuthParameters, with: EventBridgeClientTypes.UpdateConnectionBasicAuthRequestParameters.write(value:to:))
        try writer["InvocationHttpParameters"].write(value.invocationHttpParameters, with: EventBridgeClientTypes.ConnectionHttpParameters.write(value:to:))
        try writer["OAuthParameters"].write(value.oAuthParameters, with: EventBridgeClientTypes.UpdateConnectionOAuthRequestParameters.write(value:to:))
    }
}

extension EventBridgeClientTypes.UpdateConnectionApiKeyAuthRequestParameters {

    static func write(value: EventBridgeClientTypes.UpdateConnectionApiKeyAuthRequestParameters?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ApiKeyName"].write(value.apiKeyName)
        try writer["ApiKeyValue"].write(value.apiKeyValue)
    }
}

extension EventBridgeClientTypes.UpdateConnectionOAuthRequestParameters {

    static func write(value: EventBridgeClientTypes.UpdateConnectionOAuthRequestParameters?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["AuthorizationEndpoint"].write(value.authorizationEndpoint)
        try writer["ClientParameters"].write(value.clientParameters, with: EventBridgeClientTypes.UpdateConnectionOAuthClientRequestParameters.write(value:to:))
        try writer["HttpMethod"].write(value.httpMethod)
        try writer["OAuthHttpParameters"].write(value.oAuthHttpParameters, with: EventBridgeClientTypes.ConnectionHttpParameters.write(value:to:))
    }
}

extension EventBridgeClientTypes.UpdateConnectionOAuthClientRequestParameters {

    static func write(value: EventBridgeClientTypes.UpdateConnectionOAuthClientRequestParameters?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ClientID"].write(value.clientID)
        try writer["ClientSecret"].write(value.clientSecret)
    }
}

extension EventBridgeClientTypes.UpdateConnectionBasicAuthRequestParameters {

    static func write(value: EventBridgeClientTypes.UpdateConnectionBasicAuthRequestParameters?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Password"].write(value.password)
        try writer["Username"].write(value.username)
    }
}

public enum EventBridgeClientTypes {}
