//
// Copyright Amazon.com Inc. or its affiliates.
// All Rights Reserved.
//
// SPDX-License-Identifier: Apache-2.0
//

// Code generated by smithy-swift-codegen. DO NOT EDIT!

import protocol ClientRuntime.PaginateToken
import struct ClientRuntime.PaginatorSequence

extension RTBFabricClient {
    /// Paginate over `[ListRequesterGatewaysOutput]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[ListRequesterGatewaysInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `ListRequesterGatewaysOutput`
    public func listRequesterGatewaysPaginated(input: ListRequesterGatewaysInput) -> ClientRuntime.PaginatorSequence<ListRequesterGatewaysInput, ListRequesterGatewaysOutput> {
        return ClientRuntime.PaginatorSequence<ListRequesterGatewaysInput, ListRequesterGatewaysOutput>(input: input, inputKey: \.nextToken, outputKey: \.nextToken, paginationFunction: self.listRequesterGateways(input:))
    }
}

extension ListRequesterGatewaysInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListRequesterGatewaysInput {
        return ListRequesterGatewaysInput(
            maxResults: self.maxResults,
            nextToken: token
        )}
}

extension PaginatorSequence where OperationStackInput == ListRequesterGatewaysInput, OperationStackOutput == ListRequesterGatewaysOutput {
    /// This paginator transforms the `AsyncSequence` returned by `listRequesterGatewaysPaginated`
    /// to access the nested member `[Swift.String]`
    /// - Returns: `[Swift.String]`
    public func gatewayIds() async throws -> [Swift.String] {
        return try await self.asyncCompactMap { item in item.gatewayIds }
    }
}
extension RTBFabricClient {
    /// Paginate over `[ListResponderGatewaysOutput]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[ListResponderGatewaysInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `ListResponderGatewaysOutput`
    public func listResponderGatewaysPaginated(input: ListResponderGatewaysInput) -> ClientRuntime.PaginatorSequence<ListResponderGatewaysInput, ListResponderGatewaysOutput> {
        return ClientRuntime.PaginatorSequence<ListResponderGatewaysInput, ListResponderGatewaysOutput>(input: input, inputKey: \.nextToken, outputKey: \.nextToken, paginationFunction: self.listResponderGateways(input:))
    }
}

extension ListResponderGatewaysInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListResponderGatewaysInput {
        return ListResponderGatewaysInput(
            maxResults: self.maxResults,
            nextToken: token
        )}
}

extension PaginatorSequence where OperationStackInput == ListResponderGatewaysInput, OperationStackOutput == ListResponderGatewaysOutput {
    /// This paginator transforms the `AsyncSequence` returned by `listResponderGatewaysPaginated`
    /// to access the nested member `[Swift.String]`
    /// - Returns: `[Swift.String]`
    public func gatewayIds() async throws -> [Swift.String] {
        return try await self.asyncCompactMap { item in item.gatewayIds }
    }
}
