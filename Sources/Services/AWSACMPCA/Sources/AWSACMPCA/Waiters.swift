//
// Copyright Amazon.com Inc. or its affiliates.
// All Rights Reserved.
//
// SPDX-License-Identifier: Apache-2.0
//

// Code generated by smithy-swift-codegen. DO NOT EDIT!

import class SmithyWaitersAPI.Waiter
import enum SmithyWaitersAPI.JMESUtils
import protocol ClientRuntime.ServiceError
import struct SmithyWaitersAPI.WaiterConfiguration
import struct SmithyWaitersAPI.WaiterOptions
import struct SmithyWaitersAPI.WaiterOutcome

extension ACMPCAClient {

    static func auditReportCreatedWaiterConfig() throws -> SmithyWaitersAPI.WaiterConfiguration<DescribeCertificateAuthorityAuditReportInput, DescribeCertificateAuthorityAuditReportOutput> {
        let acceptors: [SmithyWaitersAPI.WaiterConfiguration<DescribeCertificateAuthorityAuditReportInput, DescribeCertificateAuthorityAuditReportOutput>.Acceptor] = [
            .init(state: .success, matcher: { (input: DescribeCertificateAuthorityAuditReportInput, result: Swift.Result<DescribeCertificateAuthorityAuditReportOutput, Swift.Error>) -> Bool in
                // JMESPath expression: "AuditReportStatus"
                // JMESPath comparator: "stringEquals"
                // JMESPath expected value: "SUCCESS"
                guard case .success(let output) = result else { return false }
                let auditReportStatus = output.auditReportStatus
                return SmithyWaitersAPI.JMESUtils.compare(auditReportStatus, ==, "SUCCESS")
            }),
            .init(state: .failure, matcher: { (input: DescribeCertificateAuthorityAuditReportInput, result: Swift.Result<DescribeCertificateAuthorityAuditReportOutput, Swift.Error>) -> Bool in
                // JMESPath expression: "AuditReportStatus"
                // JMESPath comparator: "stringEquals"
                // JMESPath expected value: "FAILED"
                guard case .success(let output) = result else { return false }
                let auditReportStatus = output.auditReportStatus
                return SmithyWaitersAPI.JMESUtils.compare(auditReportStatus, ==, "FAILED")
            }),
            .init(state: .failure, matcher: { (input: DescribeCertificateAuthorityAuditReportInput, result: Swift.Result<DescribeCertificateAuthorityAuditReportOutput, Swift.Error>) -> Bool in
                guard case .failure(let error) = result else { return false }
                return (error as? ClientRuntime.ServiceError)?.typeName == "AccessDeniedException"
            }),
        ]
        return try SmithyWaitersAPI.WaiterConfiguration<DescribeCertificateAuthorityAuditReportInput, DescribeCertificateAuthorityAuditReportOutput>(acceptors: acceptors, minDelay: 3.0, maxDelay: 180.0)
    }

    /// Initiates waiting for the AuditReportCreated event on the describeCertificateAuthorityAuditReport operation.
    /// The operation will be tried and (if necessary) retried until the wait succeeds, fails, or times out.
    /// Returns a `WaiterOutcome` asynchronously on waiter success, throws an error asynchronously on
    /// waiter failure or timeout.
    /// - Parameters:
    ///   - options: `WaiterOptions` to be used to configure this wait.
    ///   - input: The `DescribeCertificateAuthorityAuditReportInput` object to be used as a parameter when performing the operation.
    /// - Returns: A `WaiterOutcome` with the result of the final, successful performance of the operation.
    /// - Throws: `WaiterFailureError` if the waiter fails due to matching an `Acceptor` with state `failure`
    /// or there is an error not handled by any `Acceptor.`
    /// `WaiterTimeoutError` if the waiter times out.
    public func waitUntilAuditReportCreated(options: SmithyWaitersAPI.WaiterOptions, input: DescribeCertificateAuthorityAuditReportInput) async throws -> SmithyWaitersAPI.WaiterOutcome<DescribeCertificateAuthorityAuditReportOutput> {
        let waiter = SmithyWaitersAPI.Waiter(config: try Self.auditReportCreatedWaiterConfig(), operation: self.describeCertificateAuthorityAuditReport(input:))
        return try await waiter.waitUntil(options: options, input: input)
    }

    static func certificateIssuedWaiterConfig() throws -> SmithyWaitersAPI.WaiterConfiguration<GetCertificateInput, GetCertificateOutput> {
        let acceptors: [SmithyWaitersAPI.WaiterConfiguration<GetCertificateInput, GetCertificateOutput>.Acceptor] = [
            .init(state: .success, matcher: { (input: GetCertificateInput, result: Swift.Result<GetCertificateOutput, Swift.Error>) -> Bool in
                switch result {
                    case .success: return true
                    case .failure: return false
                }
            }),
            .init(state: .retry, matcher: { (input: GetCertificateInput, result: Swift.Result<GetCertificateOutput, Swift.Error>) -> Bool in
                guard case .failure(let error) = result else { return false }
                return (error as? ClientRuntime.ServiceError)?.typeName == "RequestInProgressException"
            }),
            .init(state: .failure, matcher: { (input: GetCertificateInput, result: Swift.Result<GetCertificateOutput, Swift.Error>) -> Bool in
                guard case .failure(let error) = result else { return false }
                return (error as? ClientRuntime.ServiceError)?.typeName == "AccessDeniedException"
            }),
        ]
        return try SmithyWaitersAPI.WaiterConfiguration<GetCertificateInput, GetCertificateOutput>(acceptors: acceptors, minDelay: 1.0, maxDelay: 60.0)
    }

    /// Initiates waiting for the CertificateIssued event on the getCertificate operation.
    /// The operation will be tried and (if necessary) retried until the wait succeeds, fails, or times out.
    /// Returns a `WaiterOutcome` asynchronously on waiter success, throws an error asynchronously on
    /// waiter failure or timeout.
    /// - Parameters:
    ///   - options: `WaiterOptions` to be used to configure this wait.
    ///   - input: The `GetCertificateInput` object to be used as a parameter when performing the operation.
    /// - Returns: A `WaiterOutcome` with the result of the final, successful performance of the operation.
    /// - Throws: `WaiterFailureError` if the waiter fails due to matching an `Acceptor` with state `failure`
    /// or there is an error not handled by any `Acceptor.`
    /// `WaiterTimeoutError` if the waiter times out.
    public func waitUntilCertificateIssued(options: SmithyWaitersAPI.WaiterOptions, input: GetCertificateInput) async throws -> SmithyWaitersAPI.WaiterOutcome<GetCertificateOutput> {
        let waiter = SmithyWaitersAPI.Waiter(config: try Self.certificateIssuedWaiterConfig(), operation: self.getCertificate(input:))
        return try await waiter.waitUntil(options: options, input: input)
    }

    static func certificateAuthorityCSRCreatedWaiterConfig() throws -> SmithyWaitersAPI.WaiterConfiguration<GetCertificateAuthorityCsrInput, GetCertificateAuthorityCsrOutput> {
        let acceptors: [SmithyWaitersAPI.WaiterConfiguration<GetCertificateAuthorityCsrInput, GetCertificateAuthorityCsrOutput>.Acceptor] = [
            .init(state: .success, matcher: { (input: GetCertificateAuthorityCsrInput, result: Swift.Result<GetCertificateAuthorityCsrOutput, Swift.Error>) -> Bool in
                switch result {
                    case .success: return true
                    case .failure: return false
                }
            }),
            .init(state: .retry, matcher: { (input: GetCertificateAuthorityCsrInput, result: Swift.Result<GetCertificateAuthorityCsrOutput, Swift.Error>) -> Bool in
                guard case .failure(let error) = result else { return false }
                return (error as? ClientRuntime.ServiceError)?.typeName == "RequestInProgressException"
            }),
            .init(state: .failure, matcher: { (input: GetCertificateAuthorityCsrInput, result: Swift.Result<GetCertificateAuthorityCsrOutput, Swift.Error>) -> Bool in
                guard case .failure(let error) = result else { return false }
                return (error as? ClientRuntime.ServiceError)?.typeName == "AccessDeniedException"
            }),
        ]
        return try SmithyWaitersAPI.WaiterConfiguration<GetCertificateAuthorityCsrInput, GetCertificateAuthorityCsrOutput>(acceptors: acceptors, minDelay: 3.0, maxDelay: 180.0)
    }

    /// Initiates waiting for the CertificateAuthorityCSRCreated event on the getCertificateAuthorityCsr operation.
    /// The operation will be tried and (if necessary) retried until the wait succeeds, fails, or times out.
    /// Returns a `WaiterOutcome` asynchronously on waiter success, throws an error asynchronously on
    /// waiter failure or timeout.
    /// - Parameters:
    ///   - options: `WaiterOptions` to be used to configure this wait.
    ///   - input: The `GetCertificateAuthorityCsrInput` object to be used as a parameter when performing the operation.
    /// - Returns: A `WaiterOutcome` with the result of the final, successful performance of the operation.
    /// - Throws: `WaiterFailureError` if the waiter fails due to matching an `Acceptor` with state `failure`
    /// or there is an error not handled by any `Acceptor.`
    /// `WaiterTimeoutError` if the waiter times out.
    public func waitUntilCertificateAuthorityCSRCreated(options: SmithyWaitersAPI.WaiterOptions, input: GetCertificateAuthorityCsrInput) async throws -> SmithyWaitersAPI.WaiterOutcome<GetCertificateAuthorityCsrOutput> {
        let waiter = SmithyWaitersAPI.Waiter(config: try Self.certificateAuthorityCSRCreatedWaiterConfig(), operation: self.getCertificateAuthorityCsr(input:))
        return try await waiter.waitUntil(options: options, input: input)
    }
}
