//
// Copyright Amazon.com Inc. or its affiliates.
// All Rights Reserved.
//
// SPDX-License-Identifier: Apache-2.0
//

// Code generated by smithy-swift-codegen. DO NOT EDIT!

@_spi(SmithyReadWrite) import ClientRuntime
import Foundation
import class SmithyHTTPAPI.HTTPResponse
@_spi(SmithyReadWrite) import class SmithyJSON.Reader
@_spi(SmithyReadWrite) import class SmithyJSON.Writer
import enum ClientRuntime.ErrorFault
import enum SmithyReadWrite.ReaderError
@_spi(SmithyTimestamps) import enum SmithyTimestamps.TimestampFormat
import protocol AWSClientRuntime.AWSServiceError
import protocol ClientRuntime.HTTPError
import protocol ClientRuntime.ModeledError
@_spi(SmithyReadWrite) import protocol SmithyReadWrite.SmithyReader
@_spi(SmithyReadWrite) import protocol SmithyReadWrite.SmithyWriter
@_spi(SmithyReadWrite) import struct AWSClientRuntime.AWSJSONError
@_spi(UnknownAWSHTTPServiceError) import struct AWSClientRuntime.UnknownAWSHTTPServiceError
@_spi(SmithyReadWrite) import struct SmithyReadWrite.ReadingClosureBox
@_spi(SmithyReadWrite) import struct SmithyReadWrite.WritingClosureBox


public struct CreatePermissionOutput: Swift.Sendable {

    public init() { }
}

public struct DeleteCertificateAuthorityOutput: Swift.Sendable {

    public init() { }
}

public struct DeletePermissionOutput: Swift.Sendable {

    public init() { }
}

public struct DeletePolicyOutput: Swift.Sendable {

    public init() { }
}

public struct ImportCertificateAuthorityCertificateOutput: Swift.Sendable {

    public init() { }
}

public struct PutPolicyOutput: Swift.Sendable {

    public init() { }
}

public struct RestoreCertificateAuthorityOutput: Swift.Sendable {

    public init() { }
}

public struct RevokeCertificateOutput: Swift.Sendable {

    public init() { }
}

public struct TagCertificateAuthorityOutput: Swift.Sendable {

    public init() { }
}

public struct UntagCertificateAuthorityOutput: Swift.Sendable {

    public init() { }
}

public struct UpdateCertificateAuthorityOutput: Swift.Sendable {

    public init() { }
}

extension ACMPCAClientTypes {

    /// Defines the X.500 relative distinguished name (RDN).
    public struct CustomAttribute: Swift.Sendable {
        /// Specifies the object identifier (OID) of the attribute type of the relative distinguished name (RDN).
        /// This member is required.
        public var objectIdentifier: Swift.String?
        /// Specifies the attribute value of relative distinguished name (RDN).
        /// This member is required.
        public var value: Swift.String?

        public init(
            objectIdentifier: Swift.String? = nil,
            value: Swift.String? = nil
        )
        {
            self.objectIdentifier = objectIdentifier
            self.value = value
        }
    }
}

extension ACMPCAClientTypes {

    /// Contains information about the certificate subject. The Subject field in the certificate identifies the entity that owns or controls the public key in the certificate. The entity can be a user, computer, device, or service. The Subject must contain an X.500 distinguished name (DN). A DN is a sequence of relative distinguished names (RDNs). The RDNs are separated by commas in the certificate.
    public struct ASN1Subject: Swift.Sendable {
        /// For CA and end-entity certificates in a private PKI, the common name (CN) can be any string within the length limit. Note: In publicly trusted certificates, the common name must be a fully qualified domain name (FQDN) associated with the certificate subject.
        public var commonName: Swift.String?
        /// Two-digit code that specifies the country in which the certificate subject located.
        public var country: Swift.String?
        /// Contains a sequence of one or more X.500 relative distinguished names (RDNs), each of which consists of an object identifier (OID) and a value. For more information, see NIST’s definition of [Object Identifier (OID)](https://csrc.nist.gov/glossary/term/Object_Identifier). Custom attributes cannot be used in combination with standard attributes.
        public var customAttributes: [ACMPCAClientTypes.CustomAttribute]?
        /// Disambiguating information for the certificate subject.
        public var distinguishedNameQualifier: Swift.String?
        /// Typically a qualifier appended to the name of an individual. Examples include Jr. for junior, Sr. for senior, and III for third.
        public var generationQualifier: Swift.String?
        /// First name.
        public var givenName: Swift.String?
        /// Concatenation that typically contains the first letter of the GivenName, the first letter of the middle name if one exists, and the first letter of the Surname.
        public var initials: Swift.String?
        /// The locality (such as a city or town) in which the certificate subject is located.
        public var locality: Swift.String?
        /// Legal name of the organization with which the certificate subject is affiliated.
        public var organization: Swift.String?
        /// A subdivision or unit of the organization (such as sales or finance) with which the certificate subject is affiliated.
        public var organizationalUnit: Swift.String?
        /// Typically a shortened version of a longer GivenName. For example, Jonathan is often shortened to John. Elizabeth is often shortened to Beth, Liz, or Eliza.
        public var pseudonym: Swift.String?
        /// The certificate serial number.
        public var serialNumber: Swift.String?
        /// State in which the subject of the certificate is located.
        public var state: Swift.String?
        /// Family name. In the US and the UK, for example, the surname of an individual is ordered last. In Asian cultures the surname is typically ordered first.
        public var surname: Swift.String?
        /// A title such as Mr. or Ms., which is pre-pended to the name to refer formally to the certificate subject.
        public var title: Swift.String?

        public init(
            commonName: Swift.String? = nil,
            country: Swift.String? = nil,
            customAttributes: [ACMPCAClientTypes.CustomAttribute]? = nil,
            distinguishedNameQualifier: Swift.String? = nil,
            generationQualifier: Swift.String? = nil,
            givenName: Swift.String? = nil,
            initials: Swift.String? = nil,
            locality: Swift.String? = nil,
            organization: Swift.String? = nil,
            organizationalUnit: Swift.String? = nil,
            pseudonym: Swift.String? = nil,
            serialNumber: Swift.String? = nil,
            state: Swift.String? = nil,
            surname: Swift.String? = nil,
            title: Swift.String? = nil
        )
        {
            self.commonName = commonName
            self.country = country
            self.customAttributes = customAttributes
            self.distinguishedNameQualifier = distinguishedNameQualifier
            self.generationQualifier = generationQualifier
            self.givenName = givenName
            self.initials = initials
            self.locality = locality
            self.organization = organization
            self.organizationalUnit = organizationalUnit
            self.pseudonym = pseudonym
            self.serialNumber = serialNumber
            self.state = state
            self.surname = surname
            self.title = title
        }
    }
}

extension ACMPCAClientTypes {

    /// Describes an Electronic Data Interchange (EDI) entity as described in as defined in [Subject Alternative Name](https://datatracker.ietf.org/doc/html/rfc5280) in RFC 5280.
    public struct EdiPartyName: Swift.Sendable {
        /// Specifies the name assigner.
        public var nameAssigner: Swift.String?
        /// Specifies the party name.
        /// This member is required.
        public var partyName: Swift.String?

        public init(
            nameAssigner: Swift.String? = nil,
            partyName: Swift.String? = nil
        )
        {
            self.nameAssigner = nameAssigner
            self.partyName = partyName
        }
    }
}

extension ACMPCAClientTypes {

    /// Defines a custom ASN.1 X.400 GeneralName using an object identifier (OID) and value. The OID must satisfy the regular expression shown below. For more information, see NIST's definition of [Object Identifier (OID)](https://csrc.nist.gov/glossary/term/Object_Identifier).
    public struct OtherName: Swift.Sendable {
        /// Specifies an OID.
        /// This member is required.
        public var typeId: Swift.String?
        /// Specifies an OID value.
        /// This member is required.
        public var value: Swift.String?

        public init(
            typeId: Swift.String? = nil,
            value: Swift.String? = nil
        )
        {
            self.typeId = typeId
            self.value = value
        }
    }
}

extension ACMPCAClientTypes {

    /// Describes an ASN.1 X.400 GeneralName as defined in [RFC 5280](https://datatracker.ietf.org/doc/html/rfc5280). Only one of the following naming options should be provided. Providing more than one option results in an InvalidArgsException error.
    public struct GeneralName: Swift.Sendable {
        /// Contains information about the certificate subject. The Subject field in the certificate identifies the entity that owns or controls the public key in the certificate. The entity can be a user, computer, device, or service. The Subject must contain an X.500 distinguished name (DN). A DN is a sequence of relative distinguished names (RDNs). The RDNs are separated by commas in the certificate.
        public var directoryName: ACMPCAClientTypes.ASN1Subject?
        /// Represents GeneralName as a DNS name.
        public var dnsName: Swift.String?
        /// Represents GeneralName as an EdiPartyName object.
        public var ediPartyName: ACMPCAClientTypes.EdiPartyName?
        /// Represents GeneralName as an IPv4 or IPv6 address.
        public var ipAddress: Swift.String?
        /// Represents GeneralName using an OtherName object.
        public var otherName: ACMPCAClientTypes.OtherName?
        /// Represents GeneralName as an object identifier (OID).
        public var registeredId: Swift.String?
        /// Represents GeneralName as an [RFC 822](https://datatracker.ietf.org/doc/html/rfc822) email address.
        public var rfc822Name: Swift.String?
        /// Represents GeneralName as a URI.
        public var uniformResourceIdentifier: Swift.String?

        public init(
            directoryName: ACMPCAClientTypes.ASN1Subject? = nil,
            dnsName: Swift.String? = nil,
            ediPartyName: ACMPCAClientTypes.EdiPartyName? = nil,
            ipAddress: Swift.String? = nil,
            otherName: ACMPCAClientTypes.OtherName? = nil,
            registeredId: Swift.String? = nil,
            rfc822Name: Swift.String? = nil,
            uniformResourceIdentifier: Swift.String? = nil
        )
        {
            self.directoryName = directoryName
            self.dnsName = dnsName
            self.ediPartyName = ediPartyName
            self.ipAddress = ipAddress
            self.otherName = otherName
            self.registeredId = registeredId
            self.rfc822Name = rfc822Name
            self.uniformResourceIdentifier = uniformResourceIdentifier
        }
    }
}

extension ACMPCAClientTypes {

    public enum AccessMethodType: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case caRepository
        case resourcePkiManifest
        case resourcePkiNotify
        case sdkUnknown(Swift.String)

        public static var allCases: [AccessMethodType] {
            return [
                .caRepository,
                .resourcePkiManifest,
                .resourcePkiNotify
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .caRepository: return "CA_REPOSITORY"
            case .resourcePkiManifest: return "RESOURCE_PKI_MANIFEST"
            case .resourcePkiNotify: return "RESOURCE_PKI_NOTIFY"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension ACMPCAClientTypes {

    /// Describes the type and format of extension access. Only one of CustomObjectIdentifier or AccessMethodType may be provided. Providing both results in InvalidArgsException.
    public struct AccessMethod: Swift.Sendable {
        /// Specifies the AccessMethod.
        public var accessMethodType: ACMPCAClientTypes.AccessMethodType?
        /// An object identifier (OID) specifying the AccessMethod. The OID must satisfy the regular expression shown below. For more information, see NIST's definition of [Object Identifier (OID)](https://csrc.nist.gov/glossary/term/Object_Identifier).
        public var customObjectIdentifier: Swift.String?

        public init(
            accessMethodType: ACMPCAClientTypes.AccessMethodType? = nil,
            customObjectIdentifier: Swift.String? = nil
        )
        {
            self.accessMethodType = accessMethodType
            self.customObjectIdentifier = customObjectIdentifier
        }
    }
}

extension ACMPCAClientTypes {

    /// Provides access information used by the authorityInfoAccess and subjectInfoAccess extensions described in [RFC 5280](https://datatracker.ietf.org/doc/html/rfc5280).
    public struct AccessDescription: Swift.Sendable {
        /// The location of AccessDescription information.
        /// This member is required.
        public var accessLocation: ACMPCAClientTypes.GeneralName?
        /// The type and format of AccessDescription information.
        /// This member is required.
        public var accessMethod: ACMPCAClientTypes.AccessMethod?

        public init(
            accessLocation: ACMPCAClientTypes.GeneralName? = nil,
            accessMethod: ACMPCAClientTypes.AccessMethod? = nil
        )
        {
            self.accessLocation = accessLocation
            self.accessMethod = accessMethod
        }
    }
}

/// One or more of the specified arguments was not valid.
public struct InvalidArgsException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidArgsException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The resource policy is invalid or is missing a required statement. For general information about IAM policy and statement structure, see [Overview of JSON Policies](https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies.html#access_policies-json).
public struct InvalidPolicyException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidPolicyException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The tag associated with the CA is not valid. The invalid argument is contained in the message field.
public struct InvalidTagException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidTagException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// An Amazon Web Services Private CA quota has been exceeded. See the exception message returned to determine the quota that was exceeded.
public struct LimitExceededException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "LimitExceededException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension ACMPCAClientTypes {

    /// Defines one or more purposes for which the key contained in the certificate can be used. Default value for each option is false.
    public struct KeyUsage: Swift.Sendable {
        /// Key can be used to sign CRLs.
        public var crlSign: Swift.Bool
        /// Key can be used to decipher data.
        public var dataEncipherment: Swift.Bool
        /// Key can be used only to decipher data.
        public var decipherOnly: Swift.Bool
        /// Key can be used for digital signing.
        public var digitalSignature: Swift.Bool
        /// Key can be used only to encipher data.
        public var encipherOnly: Swift.Bool
        /// Key can be used in a key-agreement protocol.
        public var keyAgreement: Swift.Bool
        /// Key can be used to sign certificates.
        public var keyCertSign: Swift.Bool
        /// Key can be used to encipher data.
        public var keyEncipherment: Swift.Bool
        /// Key can be used for non-repudiation.
        public var nonRepudiation: Swift.Bool

        public init(
            crlSign: Swift.Bool = false,
            dataEncipherment: Swift.Bool = false,
            decipherOnly: Swift.Bool = false,
            digitalSignature: Swift.Bool = false,
            encipherOnly: Swift.Bool = false,
            keyAgreement: Swift.Bool = false,
            keyCertSign: Swift.Bool = false,
            keyEncipherment: Swift.Bool = false,
            nonRepudiation: Swift.Bool = false
        )
        {
            self.crlSign = crlSign
            self.dataEncipherment = dataEncipherment
            self.decipherOnly = decipherOnly
            self.digitalSignature = digitalSignature
            self.encipherOnly = encipherOnly
            self.keyAgreement = keyAgreement
            self.keyCertSign = keyCertSign
            self.keyEncipherment = keyEncipherment
            self.nonRepudiation = nonRepudiation
        }
    }
}

extension ACMPCAClientTypes {

    /// Describes the certificate extensions to be added to the certificate signing request (CSR).
    public struct CsrExtensions: Swift.Sendable {
        /// Indicates the purpose of the certificate and of the key contained in the certificate.
        public var keyUsage: ACMPCAClientTypes.KeyUsage?
        /// For CA certificates, provides a path to additional information pertaining to the CA, such as revocation and policy. For more information, see [Subject Information Access](https://datatracker.ietf.org/doc/html/rfc5280#section-4.2.2.2) in RFC 5280.
        public var subjectInformationAccess: [ACMPCAClientTypes.AccessDescription]?

        public init(
            keyUsage: ACMPCAClientTypes.KeyUsage? = nil,
            subjectInformationAccess: [ACMPCAClientTypes.AccessDescription]? = nil
        )
        {
            self.keyUsage = keyUsage
            self.subjectInformationAccess = subjectInformationAccess
        }
    }
}

extension ACMPCAClientTypes {

    public enum KeyAlgorithm: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case ecPrime256v1
        case ecSecp384r1
        case rsa2048
        case rsa4096
        case sm2
        case sdkUnknown(Swift.String)

        public static var allCases: [KeyAlgorithm] {
            return [
                .ecPrime256v1,
                .ecSecp384r1,
                .rsa2048,
                .rsa4096,
                .sm2
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .ecPrime256v1: return "EC_prime256v1"
            case .ecSecp384r1: return "EC_secp384r1"
            case .rsa2048: return "RSA_2048"
            case .rsa4096: return "RSA_4096"
            case .sm2: return "SM2"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension ACMPCAClientTypes {

    public enum SigningAlgorithm: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case sha256withecdsa
        case sha256withrsa
        case sha384withecdsa
        case sha384withrsa
        case sha512withecdsa
        case sha512withrsa
        case sm3withsm2
        case sdkUnknown(Swift.String)

        public static var allCases: [SigningAlgorithm] {
            return [
                .sha256withecdsa,
                .sha256withrsa,
                .sha384withecdsa,
                .sha384withrsa,
                .sha512withecdsa,
                .sha512withrsa,
                .sm3withsm2
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .sha256withecdsa: return "SHA256WITHECDSA"
            case .sha256withrsa: return "SHA256WITHRSA"
            case .sha384withecdsa: return "SHA384WITHECDSA"
            case .sha384withrsa: return "SHA384WITHRSA"
            case .sha512withecdsa: return "SHA512WITHECDSA"
            case .sha512withrsa: return "SHA512WITHRSA"
            case .sm3withsm2: return "SM3WITHSM2"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension ACMPCAClientTypes {

    /// Contains configuration information for your private certificate authority (CA). This includes information about the class of public key algorithm and the key pair that your private CA creates when it issues a certificate. It also includes the signature algorithm that it uses when issuing certificates, and its X.500 distinguished name. You must specify this information when you call the [CreateCertificateAuthority](https://docs.aws.amazon.com/privateca/latest/APIReference/API_CreateCertificateAuthority.html) action.
    public struct CertificateAuthorityConfiguration: Swift.Sendable {
        /// Specifies information to be added to the extension section of the certificate signing request (CSR).
        public var csrExtensions: ACMPCAClientTypes.CsrExtensions?
        /// Type of the public key algorithm and size, in bits, of the key pair that your CA creates when it issues a certificate. When you create a subordinate CA, you must use a key algorithm supported by the parent CA.
        /// This member is required.
        public var keyAlgorithm: ACMPCAClientTypes.KeyAlgorithm?
        /// Name of the algorithm your private CA uses to sign certificate requests. This parameter should not be confused with the SigningAlgorithm parameter used to sign certificates when they are issued.
        /// This member is required.
        public var signingAlgorithm: ACMPCAClientTypes.SigningAlgorithm?
        /// Structure that contains X.500 distinguished name information for your private CA.
        /// This member is required.
        public var subject: ACMPCAClientTypes.ASN1Subject?

        public init(
            csrExtensions: ACMPCAClientTypes.CsrExtensions? = nil,
            keyAlgorithm: ACMPCAClientTypes.KeyAlgorithm? = nil,
            signingAlgorithm: ACMPCAClientTypes.SigningAlgorithm? = nil,
            subject: ACMPCAClientTypes.ASN1Subject? = nil
        )
        {
            self.csrExtensions = csrExtensions
            self.keyAlgorithm = keyAlgorithm
            self.signingAlgorithm = signingAlgorithm
            self.subject = subject
        }
    }
}

extension ACMPCAClientTypes {

    public enum CertificateAuthorityType: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case root
        case subordinate
        case sdkUnknown(Swift.String)

        public static var allCases: [CertificateAuthorityType] {
            return [
                .root,
                .subordinate
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .root: return "ROOT"
            case .subordinate: return "SUBORDINATE"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension ACMPCAClientTypes {

    public enum KeyStorageSecurityStandard: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case ccpcLevel1OrHigher
        case fips1402Level2OrHigher
        case fips1402Level3OrHigher
        case sdkUnknown(Swift.String)

        public static var allCases: [KeyStorageSecurityStandard] {
            return [
                .ccpcLevel1OrHigher,
                .fips1402Level2OrHigher,
                .fips1402Level3OrHigher
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .ccpcLevel1OrHigher: return "CCPC_LEVEL_1_OR_HIGHER"
            case .fips1402Level2OrHigher: return "FIPS_140_2_LEVEL_2_OR_HIGHER"
            case .fips1402Level3OrHigher: return "FIPS_140_2_LEVEL_3_OR_HIGHER"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension ACMPCAClientTypes {

    /// Contains configuration information for the default behavior of the CRL Distribution Point (CDP) extension in certificates issued by your CA. This extension contains a link to download the CRL, so you can check whether a certificate has been revoked. To choose whether you want this extension omitted or not in certificates issued by your CA, you can set the OmitExtension parameter.
    public struct CrlDistributionPointExtensionConfiguration: Swift.Sendable {
        /// Configures whether the CRL Distribution Point extension should be populated with the default URL to the CRL. If set to true, then the CDP extension will not be present in any certificates issued by that CA unless otherwise specified through CSR or API passthrough. Only set this if you have another way to distribute the CRL Distribution Points ffor certificates issued by your CA, such as the Matter Distributed Compliance Ledger This configuration cannot be enabled with a custom CNAME set.
        /// This member is required.
        public var omitExtension: Swift.Bool?

        public init(
            omitExtension: Swift.Bool? = false
        )
        {
            self.omitExtension = omitExtension
        }
    }
}

extension ACMPCAClientTypes {

    public enum S3ObjectAcl: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case bucketOwnerFullControl
        case publicRead
        case sdkUnknown(Swift.String)

        public static var allCases: [S3ObjectAcl] {
            return [
                .bucketOwnerFullControl,
                .publicRead
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .bucketOwnerFullControl: return "BUCKET_OWNER_FULL_CONTROL"
            case .publicRead: return "PUBLIC_READ"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension ACMPCAClientTypes {

    /// Contains configuration information for a certificate revocation list (CRL). Your private certificate authority (CA) creates base CRLs. Delta CRLs are not supported. You can enable CRLs for your new or an existing private CA by setting the Enabled parameter to true. Your private CA writes CRLs to an S3 bucket that you specify in the S3BucketName parameter. You can hide the name of your bucket by specifying a value for the CustomCname parameter. Your private CA by default copies the CNAME or the S3 bucket name to the CRL Distribution Points extension of each certificate it issues. If you want to configure this default behavior to be something different, you can set the CrlDistributionPointExtensionConfiguration parameter. Your S3 bucket policy must give write permission to Amazon Web Services Private CA. Amazon Web Services Private CA assets that are stored in Amazon S3 can be protected with encryption. For more information, see [Encrypting Your CRLs](https://docs.aws.amazon.com/privateca/latest/userguide/crl-planning.html#crl-encryption). Your private CA uses the value in the ExpirationInDays parameter to calculate the nextUpdate field in the CRL. The CRL is refreshed prior to a certificate's expiration date or when a certificate is revoked. When a certificate is revoked, it appears in the CRL until the certificate expires, and then in one additional CRL after expiration, and it always appears in the audit report. A CRL is typically updated approximately 30 minutes after a certificate is revoked. If for any reason a CRL update fails, Amazon Web Services Private CA makes further attempts every 15 minutes. CRLs contain the following fields:
    ///
    /// * Version: The current version number defined in RFC 5280 is V2. The integer value is 0x1.
    ///
    /// * Signature Algorithm: The name of the algorithm used to sign the CRL.
    ///
    /// * Issuer: The X.500 distinguished name of your private CA that issued the CRL.
    ///
    /// * Last Update: The issue date and time of this CRL.
    ///
    /// * Next Update: The day and time by which the next CRL will be issued.
    ///
    /// * Revoked Certificates: List of revoked certificates. Each list item contains the following information.
    ///
    /// * Serial Number: The serial number, in hexadecimal format, of the revoked certificate.
    ///
    /// * Revocation Date: Date and time the certificate was revoked.
    ///
    /// * CRL Entry Extensions: Optional extensions for the CRL entry.
    ///
    /// * X509v3 CRL Reason Code: Reason the certificate was revoked.
    ///
    ///
    ///
    ///
    ///
    ///
    ///
    /// * CRL Extensions: Optional extensions for the CRL.
    ///
    /// * X509v3 Authority Key Identifier: Identifies the public key associated with the private key used to sign the certificate.
    ///
    /// * X509v3 CRL Number:: Decimal sequence number for the CRL.
    ///
    ///
    ///
    ///
    /// * Signature Algorithm: Algorithm used by your private CA to sign the CRL.
    ///
    /// * Signature Value: Signature computed over the CRL.
    ///
    ///
    /// Certificate revocation lists created by Amazon Web Services Private CA are DER-encoded. You can use the following OpenSSL command to list a CRL. openssl crl -inform DER -text -in crl_path -noout For more information, see [Planning a certificate revocation list (CRL)](https://docs.aws.amazon.com/privateca/latest/userguide/crl-planning.html) in the Amazon Web Services Private Certificate Authority User Guide
    public struct CrlConfiguration: Swift.Sendable {
        /// Configures the behavior of the CRL Distribution Point extension for certificates issued by your certificate authority. If this field is not provided, then the CRl Distribution Point Extension will be present and contain the default CRL URL.
        public var crlDistributionPointExtensionConfiguration: ACMPCAClientTypes.CrlDistributionPointExtensionConfiguration?
        /// Name inserted into the certificate CRL Distribution Points extension that enables the use of an alias for the CRL distribution point. Use this value if you don't want the name of your S3 bucket to be public. The content of a Canonical Name (CNAME) record must conform to [RFC2396](https://www.ietf.org/rfc/rfc2396.txt) restrictions on the use of special characters in URIs. Additionally, the value of the CNAME must not include a protocol prefix such as "http://" or "https://".
        public var customCname: Swift.String?
        /// Boolean value that specifies whether certificate revocation lists (CRLs) are enabled. You can use this value to enable certificate revocation for a new CA when you call the [CreateCertificateAuthority](https://docs.aws.amazon.com/privateca/latest/APIReference/API_CreateCertificateAuthority.html) action or for an existing CA when you call the [UpdateCertificateAuthority](https://docs.aws.amazon.com/privateca/latest/APIReference/API_UpdateCertificateAuthority.html) action.
        /// This member is required.
        public var enabled: Swift.Bool?
        /// Validity period of the CRL in days.
        public var expirationInDays: Swift.Int?
        /// Name of the S3 bucket that contains the CRL. If you do not provide a value for the CustomCname argument, the name of your S3 bucket is placed into the CRL Distribution Points extension of the issued certificate. You can change the name of your bucket by calling the [UpdateCertificateAuthority](https://docs.aws.amazon.com/privateca/latest/APIReference/API_UpdateCertificateAuthority.html) operation. You must specify a [bucket policy](https://docs.aws.amazon.com/privateca/latest/userguide/PcaCreateCa.html#s3-policies) that allows Amazon Web Services Private CA to write the CRL to your bucket. The S3BucketName parameter must conform to the [S3 bucket naming rules](https://docs.aws.amazon.com/AmazonS3/latest/userguide/bucketnamingrules.html).
        public var s3BucketName: Swift.String?
        /// Determines whether the CRL will be publicly readable or privately held in the CRL Amazon S3 bucket. If you choose PUBLIC_READ, the CRL will be accessible over the public internet. If you choose BUCKET_OWNER_FULL_CONTROL, only the owner of the CRL S3 bucket can access the CRL, and your PKI clients may need an alternative method of access. If no value is specified, the default is PUBLIC_READ. Note: This default can cause CA creation to fail in some circumstances. If you have have enabled the Block Public Access (BPA) feature in your S3 account, then you must specify the value of this parameter as BUCKET_OWNER_FULL_CONTROL, and not doing so results in an error. If you have disabled BPA in S3, then you can specify either BUCKET_OWNER_FULL_CONTROL or PUBLIC_READ as the value. For more information, see [Blocking public access to the S3 bucket](https://docs.aws.amazon.com/privateca/latest/userguide/PcaCreateCa.html#s3-bpa).
        public var s3ObjectAcl: ACMPCAClientTypes.S3ObjectAcl?

        public init(
            crlDistributionPointExtensionConfiguration: ACMPCAClientTypes.CrlDistributionPointExtensionConfiguration? = nil,
            customCname: Swift.String? = nil,
            enabled: Swift.Bool? = false,
            expirationInDays: Swift.Int? = nil,
            s3BucketName: Swift.String? = nil,
            s3ObjectAcl: ACMPCAClientTypes.S3ObjectAcl? = nil
        )
        {
            self.crlDistributionPointExtensionConfiguration = crlDistributionPointExtensionConfiguration
            self.customCname = customCname
            self.enabled = enabled
            self.expirationInDays = expirationInDays
            self.s3BucketName = s3BucketName
            self.s3ObjectAcl = s3ObjectAcl
        }
    }
}

extension ACMPCAClientTypes {

    /// Contains information to enable and configure Online Certificate Status Protocol (OCSP) for validating certificate revocation status. When you revoke a certificate, OCSP responses may take up to 60 minutes to reflect the new status.
    public struct OcspConfiguration: Swift.Sendable {
        /// Flag enabling use of the Online Certificate Status Protocol (OCSP) for validating certificate revocation status.
        /// This member is required.
        public var enabled: Swift.Bool?
        /// By default, Amazon Web Services Private CA injects an Amazon Web Services domain into certificates being validated by the Online Certificate Status Protocol (OCSP). A customer can alternatively use this object to define a CNAME specifying a customized OCSP domain. The content of a Canonical Name (CNAME) record must conform to [RFC2396](https://www.ietf.org/rfc/rfc2396.txt) restrictions on the use of special characters in URIs. Additionally, the value of the CNAME must not include a protocol prefix such as "http://" or "https://". For more information, see [Customizing Online Certificate Status Protocol (OCSP) ](https://docs.aws.amazon.com/privateca/latest/userguide/ocsp-customize.html) in the Amazon Web Services Private Certificate Authority User Guide.
        public var ocspCustomCname: Swift.String?

        public init(
            enabled: Swift.Bool? = false,
            ocspCustomCname: Swift.String? = nil
        )
        {
            self.enabled = enabled
            self.ocspCustomCname = ocspCustomCname
        }
    }
}

extension ACMPCAClientTypes {

    /// Certificate revocation information used by the [CreateCertificateAuthority](https://docs.aws.amazon.com/privateca/latest/APIReference/API_CreateCertificateAuthority.html) and [UpdateCertificateAuthority](https://docs.aws.amazon.com/privateca/latest/APIReference/API_UpdateCertificateAuthority.html) actions. Your private certificate authority (CA) can configure Online Certificate Status Protocol (OCSP) support and/or maintain a certificate revocation list (CRL). OCSP returns validation information about certificates as requested by clients, and a CRL contains an updated list of certificates revoked by your CA. For more information, see [RevokeCertificate](https://docs.aws.amazon.com/privateca/latest/APIReference/API_RevokeCertificate.html) and [Setting up a certificate revocation method](https://docs.aws.amazon.com/privateca/latest/userguide/revocation-setup.html) in the Amazon Web Services Private Certificate Authority User Guide.
    public struct RevocationConfiguration: Swift.Sendable {
        /// Configuration of the certificate revocation list (CRL), if any, maintained by your private CA. A CRL is typically updated approximately 30 minutes after a certificate is revoked. If for any reason a CRL update fails, Amazon Web Services Private CA makes further attempts every 15 minutes.
        public var crlConfiguration: ACMPCAClientTypes.CrlConfiguration?
        /// Configuration of Online Certificate Status Protocol (OCSP) support, if any, maintained by your private CA. When you revoke a certificate, OCSP responses may take up to 60 minutes to reflect the new status.
        public var ocspConfiguration: ACMPCAClientTypes.OcspConfiguration?

        public init(
            crlConfiguration: ACMPCAClientTypes.CrlConfiguration? = nil,
            ocspConfiguration: ACMPCAClientTypes.OcspConfiguration? = nil
        )
        {
            self.crlConfiguration = crlConfiguration
            self.ocspConfiguration = ocspConfiguration
        }
    }
}

extension ACMPCAClientTypes {

    /// Tags are labels that you can use to identify and organize your private CAs. Each tag consists of a key and an optional value. You can associate up to 50 tags with a private CA. To add one or more tags to a private CA, call the [TagCertificateAuthority](https://docs.aws.amazon.com/privateca/latest/APIReference/API_TagCertificateAuthority.html) action. To remove a tag, call the [UntagCertificateAuthority](https://docs.aws.amazon.com/privateca/latest/APIReference/API_UntagCertificateAuthority.html) action.
    public struct Tag: Swift.Sendable {
        /// Key (name) of the tag.
        /// This member is required.
        public var key: Swift.String?
        /// Value of the tag.
        public var value: Swift.String?

        public init(
            key: Swift.String? = nil,
            value: Swift.String? = nil
        )
        {
            self.key = key
            self.value = value
        }
    }
}

extension ACMPCAClientTypes {

    public enum CertificateAuthorityUsageMode: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case generalPurpose
        case shortLivedCertificate
        case sdkUnknown(Swift.String)

        public static var allCases: [CertificateAuthorityUsageMode] {
            return [
                .generalPurpose,
                .shortLivedCertificate
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .generalPurpose: return "GENERAL_PURPOSE"
            case .shortLivedCertificate: return "SHORT_LIVED_CERTIFICATE"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

public struct CreateCertificateAuthorityInput: Swift.Sendable {
    /// Name and bit size of the private key algorithm, the name of the signing algorithm, and X.500 certificate subject information.
    /// This member is required.
    public var certificateAuthorityConfiguration: ACMPCAClientTypes.CertificateAuthorityConfiguration?
    /// The type of the certificate authority.
    /// This member is required.
    public var certificateAuthorityType: ACMPCAClientTypes.CertificateAuthorityType?
    /// Custom string that can be used to distinguish between calls to the CreateCertificateAuthority action. Idempotency tokens for CreateCertificateAuthority time out after five minutes. Therefore, if you call CreateCertificateAuthority multiple times with the same idempotency token within five minutes, Amazon Web Services Private CA recognizes that you are requesting only certificate authority and will issue only one. If you change the idempotency token for each call, Amazon Web Services Private CA recognizes that you are requesting multiple certificate authorities.
    public var idempotencyToken: Swift.String?
    /// Specifies a cryptographic key management compliance standard used for handling CA keys. Default: FIPS_140_2_LEVEL_3_OR_HIGHER Some Amazon Web Services Regions do not support the default. When creating a CA in these Regions, you must provide FIPS_140_2_LEVEL_2_OR_HIGHER as the argument for KeyStorageSecurityStandard. Failure to do this results in an InvalidArgsException with the message, "A certificate authority cannot be created in this region with the specified security standard." For information about security standard support in various Regions, see [Storage and security compliance of Amazon Web Services Private CA private keys](https://docs.aws.amazon.com/privateca/latest/userguide/data-protection.html#private-keys).
    public var keyStorageSecurityStandard: ACMPCAClientTypes.KeyStorageSecurityStandard?
    /// Contains information to enable support for Online Certificate Status Protocol (OCSP), certificate revocation list (CRL), both protocols, or neither. By default, both certificate validation mechanisms are disabled. The following requirements apply to revocation configurations.
    ///
    /// * A configuration disabling CRLs or OCSP must contain only the Enabled=False parameter, and will fail if other parameters such as CustomCname or ExpirationInDays are included.
    ///
    /// * In a CRL configuration, the S3BucketName parameter must conform to [Amazon S3 bucket naming rules](https://docs.aws.amazon.com/AmazonS3/latest/userguide/bucketnamingrules.html).
    ///
    /// * A configuration containing a custom Canonical Name (CNAME) parameter for CRLs or OCSP must conform to [RFC2396](https://www.ietf.org/rfc/rfc2396.txt) restrictions on the use of special characters in a CNAME.
    ///
    /// * In a CRL or OCSP configuration, the value of a CNAME parameter must not include a protocol prefix such as "http://" or "https://".
    ///
    ///
    /// For more information, see the [OcspConfiguration](https://docs.aws.amazon.com/privateca/latest/APIReference/API_OcspConfiguration.html) and [CrlConfiguration](https://docs.aws.amazon.com/privateca/latest/APIReference/API_CrlConfiguration.html) types.
    public var revocationConfiguration: ACMPCAClientTypes.RevocationConfiguration?
    /// Key-value pairs that will be attached to the new private CA. You can associate up to 50 tags with a private CA. For information using tags with IAM to manage permissions, see [Controlling Access Using IAM Tags](https://docs.aws.amazon.com/IAM/latest/UserGuide/access_iam-tags.html).
    public var tags: [ACMPCAClientTypes.Tag]?
    /// Specifies whether the CA issues general-purpose certificates that typically require a revocation mechanism, or short-lived certificates that may optionally omit revocation because they expire quickly. Short-lived certificate validity is limited to seven days. The default value is GENERAL_PURPOSE.
    public var usageMode: ACMPCAClientTypes.CertificateAuthorityUsageMode?

    public init(
        certificateAuthorityConfiguration: ACMPCAClientTypes.CertificateAuthorityConfiguration? = nil,
        certificateAuthorityType: ACMPCAClientTypes.CertificateAuthorityType? = nil,
        idempotencyToken: Swift.String? = nil,
        keyStorageSecurityStandard: ACMPCAClientTypes.KeyStorageSecurityStandard? = nil,
        revocationConfiguration: ACMPCAClientTypes.RevocationConfiguration? = nil,
        tags: [ACMPCAClientTypes.Tag]? = nil,
        usageMode: ACMPCAClientTypes.CertificateAuthorityUsageMode? = nil
    )
    {
        self.certificateAuthorityConfiguration = certificateAuthorityConfiguration
        self.certificateAuthorityType = certificateAuthorityType
        self.idempotencyToken = idempotencyToken
        self.keyStorageSecurityStandard = keyStorageSecurityStandard
        self.revocationConfiguration = revocationConfiguration
        self.tags = tags
        self.usageMode = usageMode
    }
}

public struct CreateCertificateAuthorityOutput: Swift.Sendable {
    /// If successful, the Amazon Resource Name (ARN) of the certificate authority (CA). This is of the form: arn:aws:acm-pca:region:account:certificate-authority/12345678-1234-1234-1234-123456789012 .
    public var certificateAuthorityArn: Swift.String?

    public init(
        certificateAuthorityArn: Swift.String? = nil
    )
    {
        self.certificateAuthorityArn = certificateAuthorityArn
    }
}

/// The requested Amazon Resource Name (ARN) does not refer to an existing resource.
public struct InvalidArnException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidArnException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The state of the private CA does not allow this action to occur.
public struct InvalidStateException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidStateException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The request has failed for an unspecified reason.
public struct RequestFailedException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "RequestFailedException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// Your request is already in progress.
public struct RequestInProgressException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "RequestInProgressException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// A resource such as a private CA, S3 bucket, certificate, audit report, or policy cannot be found.
public struct ResourceNotFoundException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ResourceNotFoundException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension ACMPCAClientTypes {

    public enum AuditReportResponseFormat: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case csv
        case json
        case sdkUnknown(Swift.String)

        public static var allCases: [AuditReportResponseFormat] {
            return [
                .csv,
                .json
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .csv: return "CSV"
            case .json: return "JSON"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

public struct CreateCertificateAuthorityAuditReportInput: Swift.Sendable {
    /// The format in which to create the report. This can be either JSON or CSV.
    /// This member is required.
    public var auditReportResponseFormat: ACMPCAClientTypes.AuditReportResponseFormat?
    /// The Amazon Resource Name (ARN) of the CA to be audited. This is of the form: arn:aws:acm-pca:region:account:certificate-authority/12345678-1234-1234-1234-123456789012 .
    /// This member is required.
    public var certificateAuthorityArn: Swift.String?
    /// The name of the S3 bucket that will contain the audit report.
    /// This member is required.
    public var s3BucketName: Swift.String?

    public init(
        auditReportResponseFormat: ACMPCAClientTypes.AuditReportResponseFormat? = nil,
        certificateAuthorityArn: Swift.String? = nil,
        s3BucketName: Swift.String? = nil
    )
    {
        self.auditReportResponseFormat = auditReportResponseFormat
        self.certificateAuthorityArn = certificateAuthorityArn
        self.s3BucketName = s3BucketName
    }
}

public struct CreateCertificateAuthorityAuditReportOutput: Swift.Sendable {
    /// An alphanumeric string that contains a report identifier.
    public var auditReportId: Swift.String?
    /// The key that uniquely identifies the report file in your S3 bucket.
    public var s3Key: Swift.String?

    public init(
        auditReportId: Swift.String? = nil,
        s3Key: Swift.String? = nil
    )
    {
        self.auditReportId = auditReportId
        self.s3Key = s3Key
    }
}

/// The designated permission has already been given to the user.
public struct PermissionAlreadyExistsException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "PermissionAlreadyExistsException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension ACMPCAClientTypes {

    public enum ActionType: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case getcertificate
        case issuecertificate
        case listpermissions
        case sdkUnknown(Swift.String)

        public static var allCases: [ActionType] {
            return [
                .getcertificate,
                .issuecertificate,
                .listpermissions
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .getcertificate: return "GetCertificate"
            case .issuecertificate: return "IssueCertificate"
            case .listpermissions: return "ListPermissions"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

public struct CreatePermissionInput: Swift.Sendable {
    /// The actions that the specified Amazon Web Services service principal can use. These include IssueCertificate, GetCertificate, and ListPermissions.
    /// This member is required.
    public var actions: [ACMPCAClientTypes.ActionType]?
    /// The Amazon Resource Name (ARN) of the CA that grants the permissions. You can find the ARN by calling the [ListCertificateAuthorities](https://docs.aws.amazon.com/privateca/latest/APIReference/API_ListCertificateAuthorities.html) action. This must have the following form: arn:aws:acm-pca:region:account:certificate-authority/12345678-1234-1234-1234-123456789012 .
    /// This member is required.
    public var certificateAuthorityArn: Swift.String?
    /// The Amazon Web Services service or identity that receives the permission. At this time, the only valid principal is acm.amazonaws.com.
    /// This member is required.
    public var principal: Swift.String?
    /// The ID of the calling account.
    public var sourceAccount: Swift.String?

    public init(
        actions: [ACMPCAClientTypes.ActionType]? = nil,
        certificateAuthorityArn: Swift.String? = nil,
        principal: Swift.String? = nil,
        sourceAccount: Swift.String? = nil
    )
    {
        self.actions = actions
        self.certificateAuthorityArn = certificateAuthorityArn
        self.principal = principal
        self.sourceAccount = sourceAccount
    }
}

/// A previous update to your private CA is still ongoing.
public struct ConcurrentModificationException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ConcurrentModificationException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

public struct DeleteCertificateAuthorityInput: Swift.Sendable {
    /// The Amazon Resource Name (ARN) that was returned when you called [CreateCertificateAuthority](https://docs.aws.amazon.com/privateca/latest/APIReference/API_CreateCertificateAuthority.html). This must have the following form: arn:aws:acm-pca:region:account:certificate-authority/12345678-1234-1234-1234-123456789012 .
    /// This member is required.
    public var certificateAuthorityArn: Swift.String?
    /// The number of days to make a CA restorable after it has been deleted. This can be anywhere from 7 to 30 days, with 30 being the default.
    public var permanentDeletionTimeInDays: Swift.Int?

    public init(
        certificateAuthorityArn: Swift.String? = nil,
        permanentDeletionTimeInDays: Swift.Int? = nil
    )
    {
        self.certificateAuthorityArn = certificateAuthorityArn
        self.permanentDeletionTimeInDays = permanentDeletionTimeInDays
    }
}

public struct DeletePermissionInput: Swift.Sendable {
    /// The Amazon Resource Number (ARN) of the private CA that issued the permissions. You can find the CA's ARN by calling the [ListCertificateAuthorities](https://docs.aws.amazon.com/privateca/latest/APIReference/API_ListCertificateAuthorities.html) action. This must have the following form: arn:aws:acm-pca:region:account:certificate-authority/12345678-1234-1234-1234-123456789012 .
    /// This member is required.
    public var certificateAuthorityArn: Swift.String?
    /// The Amazon Web Services service or identity that will have its CA permissions revoked. At this time, the only valid service principal is acm.amazonaws.com
    /// This member is required.
    public var principal: Swift.String?
    /// The Amazon Web Services account that calls this action.
    public var sourceAccount: Swift.String?

    public init(
        certificateAuthorityArn: Swift.String? = nil,
        principal: Swift.String? = nil,
        sourceAccount: Swift.String? = nil
    )
    {
        self.certificateAuthorityArn = certificateAuthorityArn
        self.principal = principal
        self.sourceAccount = sourceAccount
    }
}

/// The current action was prevented because it would lock the caller out from performing subsequent actions. Verify that the specified parameters would not result in the caller being denied access to the resource.
public struct LockoutPreventedException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "LockoutPreventedException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

public struct DeletePolicyInput: Swift.Sendable {
    /// The Amazon Resource Number (ARN) of the private CA that will have its policy deleted. You can find the CA's ARN by calling the [ListCertificateAuthorities](https://docs.aws.amazon.com/privateca/latest/APIReference/API_ListCertificateAuthorities.html) action. The ARN value must have the form arn:aws:acm-pca:region:account:certificate-authority/01234567-89ab-cdef-0123-0123456789ab.
    /// This member is required.
    public var resourceArn: Swift.String?

    public init(
        resourceArn: Swift.String? = nil
    )
    {
        self.resourceArn = resourceArn
    }
}

public struct DescribeCertificateAuthorityInput: Swift.Sendable {
    /// The Amazon Resource Name (ARN) that was returned when you called [CreateCertificateAuthority](https://docs.aws.amazon.com/privateca/latest/APIReference/API_CreateCertificateAuthority.html). This must be of the form: arn:aws:acm-pca:region:account:certificate-authority/12345678-1234-1234-1234-123456789012 .
    /// This member is required.
    public var certificateAuthorityArn: Swift.String?

    public init(
        certificateAuthorityArn: Swift.String? = nil
    )
    {
        self.certificateAuthorityArn = certificateAuthorityArn
    }
}

extension ACMPCAClientTypes {

    public enum FailureReason: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case other
        case requestTimedOut
        case unsupportedAlgorithm
        case sdkUnknown(Swift.String)

        public static var allCases: [FailureReason] {
            return [
                .other,
                .requestTimedOut,
                .unsupportedAlgorithm
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .other: return "OTHER"
            case .requestTimedOut: return "REQUEST_TIMED_OUT"
            case .unsupportedAlgorithm: return "UNSUPPORTED_ALGORITHM"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension ACMPCAClientTypes {

    public enum CertificateAuthorityStatus: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case active
        case creating
        case deleted
        case disabled
        case expired
        case failed
        case pendingCertificate
        case sdkUnknown(Swift.String)

        public static var allCases: [CertificateAuthorityStatus] {
            return [
                .active,
                .creating,
                .deleted,
                .disabled,
                .expired,
                .failed,
                .pendingCertificate
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .active: return "ACTIVE"
            case .creating: return "CREATING"
            case .deleted: return "DELETED"
            case .disabled: return "DISABLED"
            case .expired: return "EXPIRED"
            case .failed: return "FAILED"
            case .pendingCertificate: return "PENDING_CERTIFICATE"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension ACMPCAClientTypes {

    /// Contains information about your private certificate authority (CA). Your private CA can issue and revoke X.509 digital certificates. Digital certificates verify that the entity named in the certificate Subject field owns or controls the public key contained in the Subject Public Key Info field. Call the [CreateCertificateAuthority](https://docs.aws.amazon.com/privateca/latest/APIReference/API_CreateCertificateAuthority.html) action to create your private CA. You must then call the [GetCertificateAuthorityCertificate](https://docs.aws.amazon.com/privateca/latest/APIReference/API_GetCertificateAuthorityCertificate.html) action to retrieve a private CA certificate signing request (CSR). Sign the CSR with your Amazon Web Services Private CA-hosted or on-premises root or subordinate CA certificate. Call the [ImportCertificateAuthorityCertificate](https://docs.aws.amazon.com/privateca/latest/APIReference/API_ImportCertificateAuthorityCertificate.html) action to import the signed certificate into Certificate Manager (ACM).
    public struct CertificateAuthority: Swift.Sendable {
        /// Amazon Resource Name (ARN) for your private certificate authority (CA). The format is  12345678-1234-1234-1234-123456789012 .
        public var arn: Swift.String?
        /// Your private CA configuration.
        public var certificateAuthorityConfiguration: ACMPCAClientTypes.CertificateAuthorityConfiguration?
        /// Date and time at which your private CA was created.
        public var createdAt: Foundation.Date?
        /// Reason the request to create your private CA failed.
        public var failureReason: ACMPCAClientTypes.FailureReason?
        /// Defines a cryptographic key management compliance standard used for handling CA keys. Default: FIPS_140_2_LEVEL_3_OR_HIGHER Note: Amazon Web Services Region ap-northeast-3 supports only FIPS_140_2_LEVEL_2_OR_HIGHER. You must explicitly specify this parameter and value when creating a CA in that Region. Specifying a different value (or no value) results in an InvalidArgsException with the message "A certificate authority cannot be created in this region with the specified security standard."
        public var keyStorageSecurityStandard: ACMPCAClientTypes.KeyStorageSecurityStandard?
        /// Date and time at which your private CA was last updated.
        public var lastStateChangeAt: Foundation.Date?
        /// Date and time after which your private CA certificate is not valid.
        public var notAfter: Foundation.Date?
        /// Date and time before which your private CA certificate is not valid.
        public var notBefore: Foundation.Date?
        /// The Amazon Web Services account ID that owns the certificate authority.
        public var ownerAccount: Swift.String?
        /// The period during which a deleted CA can be restored. For more information, see the PermanentDeletionTimeInDays parameter of the [DeleteCertificateAuthorityRequest](https://docs.aws.amazon.com/privateca/latest/APIReference/API_DeleteCertificateAuthorityRequest.html) action.
        public var restorableUntil: Foundation.Date?
        /// Information about the Online Certificate Status Protocol (OCSP) configuration or certificate revocation list (CRL) created and maintained by your private CA.
        public var revocationConfiguration: ACMPCAClientTypes.RevocationConfiguration?
        /// Serial number of your private CA.
        public var serial: Swift.String?
        /// Status of your private CA.
        public var status: ACMPCAClientTypes.CertificateAuthorityStatus?
        /// Type of your private CA.
        public var type: ACMPCAClientTypes.CertificateAuthorityType?
        /// Specifies whether the CA issues general-purpose certificates that typically require a revocation mechanism, or short-lived certificates that may optionally omit revocation because they expire quickly. Short-lived certificate validity is limited to seven days. The default value is GENERAL_PURPOSE.
        public var usageMode: ACMPCAClientTypes.CertificateAuthorityUsageMode?

        public init(
            arn: Swift.String? = nil,
            certificateAuthorityConfiguration: ACMPCAClientTypes.CertificateAuthorityConfiguration? = nil,
            createdAt: Foundation.Date? = nil,
            failureReason: ACMPCAClientTypes.FailureReason? = nil,
            keyStorageSecurityStandard: ACMPCAClientTypes.KeyStorageSecurityStandard? = nil,
            lastStateChangeAt: Foundation.Date? = nil,
            notAfter: Foundation.Date? = nil,
            notBefore: Foundation.Date? = nil,
            ownerAccount: Swift.String? = nil,
            restorableUntil: Foundation.Date? = nil,
            revocationConfiguration: ACMPCAClientTypes.RevocationConfiguration? = nil,
            serial: Swift.String? = nil,
            status: ACMPCAClientTypes.CertificateAuthorityStatus? = nil,
            type: ACMPCAClientTypes.CertificateAuthorityType? = nil,
            usageMode: ACMPCAClientTypes.CertificateAuthorityUsageMode? = nil
        )
        {
            self.arn = arn
            self.certificateAuthorityConfiguration = certificateAuthorityConfiguration
            self.createdAt = createdAt
            self.failureReason = failureReason
            self.keyStorageSecurityStandard = keyStorageSecurityStandard
            self.lastStateChangeAt = lastStateChangeAt
            self.notAfter = notAfter
            self.notBefore = notBefore
            self.ownerAccount = ownerAccount
            self.restorableUntil = restorableUntil
            self.revocationConfiguration = revocationConfiguration
            self.serial = serial
            self.status = status
            self.type = type
            self.usageMode = usageMode
        }
    }
}

public struct DescribeCertificateAuthorityOutput: Swift.Sendable {
    /// A [CertificateAuthority](https://docs.aws.amazon.com/privateca/latest/APIReference/API_CertificateAuthority.html) structure that contains information about your private CA.
    public var certificateAuthority: ACMPCAClientTypes.CertificateAuthority?

    public init(
        certificateAuthority: ACMPCAClientTypes.CertificateAuthority? = nil
    )
    {
        self.certificateAuthority = certificateAuthority
    }
}

public struct DescribeCertificateAuthorityAuditReportInput: Swift.Sendable {
    /// The report ID returned by calling the [CreateCertificateAuthorityAuditReport](https://docs.aws.amazon.com/privateca/latest/APIReference/API_CreateCertificateAuthorityAuditReport.html) action.
    /// This member is required.
    public var auditReportId: Swift.String?
    /// The Amazon Resource Name (ARN) of the private CA. This must be of the form: arn:aws:acm-pca:region:account:certificate-authority/12345678-1234-1234-1234-123456789012 .
    /// This member is required.
    public var certificateAuthorityArn: Swift.String?

    public init(
        auditReportId: Swift.String? = nil,
        certificateAuthorityArn: Swift.String? = nil
    )
    {
        self.auditReportId = auditReportId
        self.certificateAuthorityArn = certificateAuthorityArn
    }
}

extension ACMPCAClientTypes {

    public enum AuditReportStatus: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case creating
        case failed
        case success
        case sdkUnknown(Swift.String)

        public static var allCases: [AuditReportStatus] {
            return [
                .creating,
                .failed,
                .success
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .creating: return "CREATING"
            case .failed: return "FAILED"
            case .success: return "SUCCESS"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

public struct DescribeCertificateAuthorityAuditReportOutput: Swift.Sendable {
    /// Specifies whether report creation is in progress, has succeeded, or has failed.
    public var auditReportStatus: ACMPCAClientTypes.AuditReportStatus?
    /// The date and time at which the report was created.
    public var createdAt: Foundation.Date?
    /// Name of the S3 bucket that contains the report.
    public var s3BucketName: Swift.String?
    /// S3 key that uniquely identifies the report file in your S3 bucket.
    public var s3Key: Swift.String?

    public init(
        auditReportStatus: ACMPCAClientTypes.AuditReportStatus? = nil,
        createdAt: Foundation.Date? = nil,
        s3BucketName: Swift.String? = nil,
        s3Key: Swift.String? = nil
    )
    {
        self.auditReportStatus = auditReportStatus
        self.createdAt = createdAt
        self.s3BucketName = s3BucketName
        self.s3Key = s3Key
    }
}

public struct GetCertificateInput: Swift.Sendable {
    /// The ARN of the issued certificate. The ARN contains the certificate serial number and must be in the following form: arn:aws:acm-pca:region:account:certificate-authority/12345678-1234-1234-1234-123456789012/certificate/286535153982981100925020015808220737245
    /// This member is required.
    public var certificateArn: Swift.String?
    /// The Amazon Resource Name (ARN) that was returned when you called [CreateCertificateAuthority](https://docs.aws.amazon.com/privateca/latest/APIReference/API_CreateCertificateAuthority.html). This must be of the form: arn:aws:acm-pca:region:account:certificate-authority/12345678-1234-1234-1234-123456789012 .
    /// This member is required.
    public var certificateAuthorityArn: Swift.String?

    public init(
        certificateArn: Swift.String? = nil,
        certificateAuthorityArn: Swift.String? = nil
    )
    {
        self.certificateArn = certificateArn
        self.certificateAuthorityArn = certificateAuthorityArn
    }
}

public struct GetCertificateOutput: Swift.Sendable {
    /// The base64 PEM-encoded certificate specified by the CertificateArn parameter.
    public var certificate: Swift.String?
    /// The base64 PEM-encoded certificate chain that chains up to the root CA certificate that you used to sign your private CA certificate.
    public var certificateChain: Swift.String?

    public init(
        certificate: Swift.String? = nil,
        certificateChain: Swift.String? = nil
    )
    {
        self.certificate = certificate
        self.certificateChain = certificateChain
    }
}

public struct GetCertificateAuthorityCertificateInput: Swift.Sendable {
    /// The Amazon Resource Name (ARN) of your private CA. This is of the form: arn:aws:acm-pca:region:account:certificate-authority/12345678-1234-1234-1234-123456789012 .
    /// This member is required.
    public var certificateAuthorityArn: Swift.String?

    public init(
        certificateAuthorityArn: Swift.String? = nil
    )
    {
        self.certificateAuthorityArn = certificateAuthorityArn
    }
}

public struct GetCertificateAuthorityCertificateOutput: Swift.Sendable {
    /// Base64-encoded certificate authority (CA) certificate.
    public var certificate: Swift.String?
    /// Base64-encoded certificate chain that includes any intermediate certificates and chains up to root certificate that you used to sign your private CA certificate. The chain does not include your private CA certificate. If this is a root CA, the value will be null.
    public var certificateChain: Swift.String?

    public init(
        certificate: Swift.String? = nil,
        certificateChain: Swift.String? = nil
    )
    {
        self.certificate = certificate
        self.certificateChain = certificateChain
    }
}

public struct GetCertificateAuthorityCsrInput: Swift.Sendable {
    /// The Amazon Resource Name (ARN) that was returned when you called the [CreateCertificateAuthority](https://docs.aws.amazon.com/privateca/latest/APIReference/API_CreateCertificateAuthority.html) action. This must be of the form: arn:aws:acm-pca:region:account:certificate-authority/12345678-1234-1234-1234-123456789012
    /// This member is required.
    public var certificateAuthorityArn: Swift.String?

    public init(
        certificateAuthorityArn: Swift.String? = nil
    )
    {
        self.certificateAuthorityArn = certificateAuthorityArn
    }
}

public struct GetCertificateAuthorityCsrOutput: Swift.Sendable {
    /// The base64 PEM-encoded certificate signing request (CSR) for your private CA certificate.
    public var csr: Swift.String?

    public init(
        csr: Swift.String? = nil
    )
    {
        self.csr = csr
    }
}

public struct GetPolicyInput: Swift.Sendable {
    /// The Amazon Resource Number (ARN) of the private CA that will have its policy retrieved. You can find the CA's ARN by calling the ListCertificateAuthorities action.
    /// This member is required.
    public var resourceArn: Swift.String?

    public init(
        resourceArn: Swift.String? = nil
    )
    {
        self.resourceArn = resourceArn
    }
}

public struct GetPolicyOutput: Swift.Sendable {
    /// The policy attached to the private CA as a JSON document.
    public var policy: Swift.String?

    public init(
        policy: Swift.String? = nil
    )
    {
        self.policy = policy
    }
}

/// The certificate authority certificate you are importing does not comply with conditions specified in the certificate that signed it.
public struct CertificateMismatchException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "CertificateMismatchException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The request action cannot be performed or is prohibited.
public struct InvalidRequestException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidRequestException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// One or more fields in the certificate are invalid.
public struct MalformedCertificateException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "MalformedCertificateException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

public struct ImportCertificateAuthorityCertificateInput: Swift.Sendable {
    /// The PEM-encoded certificate for a private CA. This may be a self-signed certificate in the case of a root CA, or it may be signed by another CA that you control.
    /// This member is required.
    public var certificate: Foundation.Data?
    /// The Amazon Resource Name (ARN) that was returned when you called [CreateCertificateAuthority](https://docs.aws.amazon.com/privateca/latest/APIReference/API_CreateCertificateAuthority.html). This must be of the form: arn:aws:acm-pca:region:account:certificate-authority/12345678-1234-1234-1234-123456789012
    /// This member is required.
    public var certificateAuthorityArn: Swift.String?
    /// A PEM-encoded file that contains all of your certificates, other than the certificate you're importing, chaining up to your root CA. Your Amazon Web Services Private CA-hosted or on-premises root certificate is the last in the chain, and each certificate in the chain signs the one preceding. This parameter must be supplied when you import a subordinate CA. When you import a root CA, there is no chain.
    public var certificateChain: Foundation.Data?

    public init(
        certificate: Foundation.Data? = nil,
        certificateAuthorityArn: Swift.String? = nil,
        certificateChain: Foundation.Data? = nil
    )
    {
        self.certificate = certificate
        self.certificateAuthorityArn = certificateAuthorityArn
        self.certificateChain = certificateChain
    }
}

/// The certificate signing request is invalid.
public struct MalformedCSRException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "MalformedCSRException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension ACMPCAClientTypes {

    public enum PolicyQualifierId: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case cps
        case sdkUnknown(Swift.String)

        public static var allCases: [PolicyQualifierId] {
            return [
                .cps
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .cps: return "CPS"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension ACMPCAClientTypes {

    /// Defines a PolicyInformation qualifier. Amazon Web Services Private CA supports the [certification practice statement (CPS) qualifier](https://datatracker.ietf.org/doc/html/rfc5280#section-4.2.1.4) defined in RFC 5280.
    public struct Qualifier: Swift.Sendable {
        /// Contains a pointer to a certification practice statement (CPS) published by the CA.
        /// This member is required.
        public var cpsUri: Swift.String?

        public init(
            cpsUri: Swift.String? = nil
        )
        {
            self.cpsUri = cpsUri
        }
    }
}

extension ACMPCAClientTypes {

    /// Modifies the CertPolicyId of a PolicyInformation object with a qualifier. Amazon Web Services Private CA supports the certification practice statement (CPS) qualifier.
    public struct PolicyQualifierInfo: Swift.Sendable {
        /// Identifies the qualifier modifying a CertPolicyId.
        /// This member is required.
        public var policyQualifierId: ACMPCAClientTypes.PolicyQualifierId?
        /// Defines the qualifier type. Amazon Web Services Private CA supports the use of a URI for a CPS qualifier in this field.
        /// This member is required.
        public var qualifier: ACMPCAClientTypes.Qualifier?

        public init(
            policyQualifierId: ACMPCAClientTypes.PolicyQualifierId? = nil,
            qualifier: ACMPCAClientTypes.Qualifier? = nil
        )
        {
            self.policyQualifierId = policyQualifierId
            self.qualifier = qualifier
        }
    }
}

extension ACMPCAClientTypes {

    /// Defines the X.509 CertificatePolicies extension.
    public struct PolicyInformation: Swift.Sendable {
        /// Specifies the object identifier (OID) of the certificate policy under which the certificate was issued. For more information, see NIST's definition of [Object Identifier (OID)](https://csrc.nist.gov/glossary/term/Object_Identifier).
        /// This member is required.
        public var certPolicyId: Swift.String?
        /// Modifies the given CertPolicyId with a qualifier. Amazon Web Services Private CA supports the certification practice statement (CPS) qualifier.
        public var policyQualifiers: [ACMPCAClientTypes.PolicyQualifierInfo]?

        public init(
            certPolicyId: Swift.String? = nil,
            policyQualifiers: [ACMPCAClientTypes.PolicyQualifierInfo]? = nil
        )
        {
            self.certPolicyId = certPolicyId
            self.policyQualifiers = policyQualifiers
        }
    }
}

extension ACMPCAClientTypes {

    /// Specifies the X.509 extension information for a certificate. Extensions present in CustomExtensions follow the ApiPassthrough[template rules](https://docs.aws.amazon.com/privateca/latest/userguide/UsingTemplates.html#template-order-of-operations).
    public struct CustomExtension: Swift.Sendable {
        /// Specifies the critical flag of the X.509 extension.
        public var critical: Swift.Bool?
        /// Specifies the object identifier (OID) of the X.509 extension. For more information, see the [Global OID reference database.](https://oidref.com/2.5.29)
        /// This member is required.
        public var objectIdentifier: Swift.String?
        /// Specifies the base64-encoded value of the X.509 extension.
        /// This member is required.
        public var value: Swift.String?

        public init(
            critical: Swift.Bool? = false,
            objectIdentifier: Swift.String? = nil,
            value: Swift.String? = nil
        )
        {
            self.critical = critical
            self.objectIdentifier = objectIdentifier
            self.value = value
        }
    }
}

extension ACMPCAClientTypes {

    public enum ExtendedKeyUsageType: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case certificateTransparency
        case clientAuth
        case codeSigning
        case documentSigning
        case emailProtection
        case ocspSigning
        case serverAuth
        case smartCardLogin
        case timeStamping
        case sdkUnknown(Swift.String)

        public static var allCases: [ExtendedKeyUsageType] {
            return [
                .certificateTransparency,
                .clientAuth,
                .codeSigning,
                .documentSigning,
                .emailProtection,
                .ocspSigning,
                .serverAuth,
                .smartCardLogin,
                .timeStamping
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .certificateTransparency: return "CERTIFICATE_TRANSPARENCY"
            case .clientAuth: return "CLIENT_AUTH"
            case .codeSigning: return "CODE_SIGNING"
            case .documentSigning: return "DOCUMENT_SIGNING"
            case .emailProtection: return "EMAIL_PROTECTION"
            case .ocspSigning: return "OCSP_SIGNING"
            case .serverAuth: return "SERVER_AUTH"
            case .smartCardLogin: return "SMART_CARD_LOGIN"
            case .timeStamping: return "TIME_STAMPING"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension ACMPCAClientTypes {

    /// Specifies additional purposes for which the certified public key may be used other than basic purposes indicated in the KeyUsage extension.
    public struct ExtendedKeyUsage: Swift.Sendable {
        /// Specifies a custom ExtendedKeyUsage with an object identifier (OID).
        public var extendedKeyUsageObjectIdentifier: Swift.String?
        /// Specifies a standard ExtendedKeyUsage as defined as in [RFC 5280](https://datatracker.ietf.org/doc/html/rfc5280#section-4.2.1.12).
        public var extendedKeyUsageType: ACMPCAClientTypes.ExtendedKeyUsageType?

        public init(
            extendedKeyUsageObjectIdentifier: Swift.String? = nil,
            extendedKeyUsageType: ACMPCAClientTypes.ExtendedKeyUsageType? = nil
        )
        {
            self.extendedKeyUsageObjectIdentifier = extendedKeyUsageObjectIdentifier
            self.extendedKeyUsageType = extendedKeyUsageType
        }
    }
}

extension ACMPCAClientTypes {

    /// Contains X.509 extension information for a certificate.
    public struct Extensions: Swift.Sendable {
        /// Contains a sequence of one or more policy information terms, each of which consists of an object identifier (OID) and optional qualifiers. For more information, see NIST's definition of [Object Identifier (OID)](https://csrc.nist.gov/glossary/term/Object_Identifier). In an end-entity certificate, these terms indicate the policy under which the certificate was issued and the purposes for which it may be used. In a CA certificate, these terms limit the set of policies for certification paths that include this certificate.
        public var certificatePolicies: [ACMPCAClientTypes.PolicyInformation]?
        /// Contains a sequence of one or more X.509 extensions, each of which consists of an object identifier (OID), a base64-encoded value, and the critical flag. For more information, see the [Global OID reference database.](https://oidref.com/2.5.29)
        public var customExtensions: [ACMPCAClientTypes.CustomExtension]?
        /// Specifies additional purposes for which the certified public key may be used other than basic purposes indicated in the KeyUsage extension.
        public var extendedKeyUsage: [ACMPCAClientTypes.ExtendedKeyUsage]?
        /// Defines one or more purposes for which the key contained in the certificate can be used. Default value for each option is false.
        public var keyUsage: ACMPCAClientTypes.KeyUsage?
        /// The subject alternative name extension allows identities to be bound to the subject of the certificate. These identities may be included in addition to or in place of the identity in the subject field of the certificate.
        public var subjectAlternativeNames: [ACMPCAClientTypes.GeneralName]?

        public init(
            certificatePolicies: [ACMPCAClientTypes.PolicyInformation]? = nil,
            customExtensions: [ACMPCAClientTypes.CustomExtension]? = nil,
            extendedKeyUsage: [ACMPCAClientTypes.ExtendedKeyUsage]? = nil,
            keyUsage: ACMPCAClientTypes.KeyUsage? = nil,
            subjectAlternativeNames: [ACMPCAClientTypes.GeneralName]? = nil
        )
        {
            self.certificatePolicies = certificatePolicies
            self.customExtensions = customExtensions
            self.extendedKeyUsage = extendedKeyUsage
            self.keyUsage = keyUsage
            self.subjectAlternativeNames = subjectAlternativeNames
        }
    }
}

extension ACMPCAClientTypes {

    /// Contains X.509 certificate information to be placed in an issued certificate. An APIPassthrough or APICSRPassthrough template variant must be selected, or else this parameter is ignored. If conflicting or duplicate certificate information is supplied from other sources, Amazon Web Services Private CA applies [order of operation rules](https://docs.aws.amazon.com/privateca/latest/userguide/UsingTemplates.html#template-order-of-operations) to determine what information is used.
    public struct ApiPassthrough: Swift.Sendable {
        /// Specifies X.509 extension information for a certificate.
        public var extensions: ACMPCAClientTypes.Extensions?
        /// Contains information about the certificate subject. The Subject field in the certificate identifies the entity that owns or controls the public key in the certificate. The entity can be a user, computer, device, or service. The Subject must contain an X.500 distinguished name (DN). A DN is a sequence of relative distinguished names (RDNs). The RDNs are separated by commas in the certificate.
        public var subject: ACMPCAClientTypes.ASN1Subject?

        public init(
            extensions: ACMPCAClientTypes.Extensions? = nil,
            subject: ACMPCAClientTypes.ASN1Subject? = nil
        )
        {
            self.extensions = extensions
            self.subject = subject
        }
    }
}

extension ACMPCAClientTypes {

    public enum ValidityPeriodType: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case absolute
        case days
        case endDate
        case months
        case years
        case sdkUnknown(Swift.String)

        public static var allCases: [ValidityPeriodType] {
            return [
                .absolute,
                .days,
                .endDate,
                .months,
                .years
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .absolute: return "ABSOLUTE"
            case .days: return "DAYS"
            case .endDate: return "END_DATE"
            case .months: return "MONTHS"
            case .years: return "YEARS"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension ACMPCAClientTypes {

    /// Validity specifies the period of time during which a certificate is valid. Validity can be expressed as an explicit date and time when the validity of a certificate starts or expires, or as a span of time after issuance, stated in days, months, or years. For more information, see [Validity](https://tools.ietf.org/html/rfc5280#section-4.1.2.5) in RFC 5280. Amazon Web Services Private CA API consumes the Validity data type differently in two distinct parameters of the IssueCertificate action. The required parameter IssueCertificate:Validity specifies the end of a certificate's validity period. The optional parameter IssueCertificate:ValidityNotBefore specifies a customized starting time for the validity period.
    public struct Validity: Swift.Sendable {
        /// Determines how Amazon Web Services Private CA interprets the Value parameter, an integer. Supported validity types include those listed below. Type definitions with values include a sample input value and the resulting output. END_DATE: The specific date and time when the certificate will expire, expressed using UTCTime (YYMMDDHHMMSS) or GeneralizedTime (YYYYMMDDHHMMSS) format. When UTCTime is used, if the year field (YY) is greater than or equal to 50, the year is interpreted as 19YY. If the year field is less than 50, the year is interpreted as 20YY.
        ///
        /// * Sample input value: 491231235959 (UTCTime format)
        ///
        /// * Output expiration date/time: 12/31/2049 23:59:59
        ///
        ///
        /// ABSOLUTE: The specific date and time when the validity of a certificate will start or expire, expressed in seconds since the Unix Epoch.
        ///
        /// * Sample input value: 2524608000
        ///
        /// * Output expiration date/time: 01/01/2050 00:00:00
        ///
        ///
        /// DAYS, MONTHS, YEARS: The relative time from the moment of issuance until the certificate will expire, expressed in days, months, or years. Example if DAYS, issued on 10/12/2020 at 12:34:54 UTC:
        ///
        /// * Sample input value: 90
        ///
        /// * Output expiration date: 01/10/2020 12:34:54 UTC
        ///
        ///
        /// The minimum validity duration for a certificate using relative time (DAYS) is one day. The minimum validity for a certificate using absolute time (ABSOLUTE or END_DATE) is one second.
        /// This member is required.
        public var type: ACMPCAClientTypes.ValidityPeriodType?
        /// A long integer interpreted according to the value of Type, below.
        /// This member is required.
        public var value: Swift.Int?

        public init(
            type: ACMPCAClientTypes.ValidityPeriodType? = nil,
            value: Swift.Int? = nil
        )
        {
            self.type = type
            self.value = value
        }
    }
}

public struct IssueCertificateInput: Swift.Sendable {
    /// Specifies X.509 certificate information to be included in the issued certificate. An APIPassthrough or APICSRPassthrough template variant must be selected, or else this parameter is ignored. For more information about using these templates, see [Understanding Certificate Templates](https://docs.aws.amazon.com/privateca/latest/userguide/UsingTemplates.html). If conflicting or duplicate certificate information is supplied during certificate issuance, Amazon Web Services Private CA applies [order of operation rules](https://docs.aws.amazon.com/privateca/latest/userguide/UsingTemplates.html#template-order-of-operations) to determine what information is used.
    public var apiPassthrough: ACMPCAClientTypes.ApiPassthrough?
    /// The Amazon Resource Name (ARN) that was returned when you called [CreateCertificateAuthority](https://docs.aws.amazon.com/privateca/latest/APIReference/API_CreateCertificateAuthority.html). This must be of the form: arn:aws:acm-pca:region:account:certificate-authority/12345678-1234-1234-1234-123456789012
    /// This member is required.
    public var certificateAuthorityArn: Swift.String?
    /// The certificate signing request (CSR) for the certificate you want to issue. As an example, you can use the following OpenSSL command to create the CSR and a 2048 bit RSA private key. openssl req -new -newkey rsa:2048 -days 365 -keyout private/test_cert_priv_key.pem -out csr/test_cert_.csr If you have a configuration file, you can then use the following OpenSSL command. The usr_cert block in the configuration file contains your X509 version 3 extensions. openssl req -new -config openssl_rsa.cnf -extensions usr_cert -newkey rsa:2048 -days 365 -keyout private/test_cert_priv_key.pem -out csr/test_cert_.csr Note: A CSR must provide either a subject name or a subject alternative name or the request will be rejected.
    /// This member is required.
    public var csr: Foundation.Data?
    /// Alphanumeric string that can be used to distinguish between calls to the IssueCertificate action. Idempotency tokens for IssueCertificate time out after five minutes. Therefore, if you call IssueCertificate multiple times with the same idempotency token within five minutes, Amazon Web Services Private CA recognizes that you are requesting only one certificate and will issue only one. If you change the idempotency token for each call, Amazon Web Services Private CA recognizes that you are requesting multiple certificates.
    public var idempotencyToken: Swift.String?
    /// The name of the algorithm that will be used to sign the certificate to be issued. This parameter should not be confused with the SigningAlgorithm parameter used to sign a CSR in the CreateCertificateAuthority action. The specified signing algorithm family (RSA or ECDSA) must match the algorithm family of the CA's secret key.
    /// This member is required.
    public var signingAlgorithm: ACMPCAClientTypes.SigningAlgorithm?
    /// Specifies a custom configuration template to use when issuing a certificate. If this parameter is not provided, Amazon Web Services Private CA defaults to the EndEntityCertificate/V1 template. For CA certificates, you should choose the shortest path length that meets your needs. The path length is indicated by the PathLenN portion of the ARN, where N is the [CA depth](https://docs.aws.amazon.com/privateca/latest/userguide/PcaTerms.html#terms-cadepth). Note: The CA depth configured on a subordinate CA certificate must not exceed the limit set by its parents in the CA hierarchy. For a list of TemplateArn values supported by Amazon Web Services Private CA, see [Understanding Certificate Templates](https://docs.aws.amazon.com/privateca/latest/userguide/UsingTemplates.html).
    public var templateArn: Swift.String?
    /// Information describing the end of the validity period of the certificate. This parameter sets the “Not After” date for the certificate. Certificate validity is the period of time during which a certificate is valid. Validity can be expressed as an explicit date and time when the certificate expires, or as a span of time after issuance, stated in days, months, or years. For more information, see [Validity](https://datatracker.ietf.org/doc/html/rfc5280#section-4.1.2.5) in RFC 5280. This value is unaffected when ValidityNotBefore is also specified. For example, if Validity is set to 20 days in the future, the certificate will expire 20 days from issuance time regardless of the ValidityNotBefore value. The end of the validity period configured on a certificate must not exceed the limit set on its parents in the CA hierarchy.
    /// This member is required.
    public var validity: ACMPCAClientTypes.Validity?
    /// Information describing the start of the validity period of the certificate. This parameter sets the “Not Before" date for the certificate. By default, when issuing a certificate, Amazon Web Services Private CA sets the "Not Before" date to the issuance time minus 60 minutes. This compensates for clock inconsistencies across computer systems. The ValidityNotBefore parameter can be used to customize the “Not Before” value. Unlike the Validity parameter, the ValidityNotBefore parameter is optional. The ValidityNotBefore value is expressed as an explicit date and time, using the Validity type value ABSOLUTE. For more information, see [Validity](https://docs.aws.amazon.com/privateca/latest/APIReference/API_Validity.html) in this API reference and [Validity](https://datatracker.ietf.org/doc/html/rfc5280#section-4.1.2.5) in RFC 5280.
    public var validityNotBefore: ACMPCAClientTypes.Validity?

    public init(
        apiPassthrough: ACMPCAClientTypes.ApiPassthrough? = nil,
        certificateAuthorityArn: Swift.String? = nil,
        csr: Foundation.Data? = nil,
        idempotencyToken: Swift.String? = nil,
        signingAlgorithm: ACMPCAClientTypes.SigningAlgorithm? = nil,
        templateArn: Swift.String? = nil,
        validity: ACMPCAClientTypes.Validity? = nil,
        validityNotBefore: ACMPCAClientTypes.Validity? = nil
    )
    {
        self.apiPassthrough = apiPassthrough
        self.certificateAuthorityArn = certificateAuthorityArn
        self.csr = csr
        self.idempotencyToken = idempotencyToken
        self.signingAlgorithm = signingAlgorithm
        self.templateArn = templateArn
        self.validity = validity
        self.validityNotBefore = validityNotBefore
    }
}

public struct IssueCertificateOutput: Swift.Sendable {
    /// The Amazon Resource Name (ARN) of the issued certificate and the certificate serial number. This is of the form: arn:aws:acm-pca:region:account:certificate-authority/12345678-1234-1234-1234-123456789012/certificate/286535153982981100925020015808220737245
    public var certificateArn: Swift.String?

    public init(
        certificateArn: Swift.String? = nil
    )
    {
        self.certificateArn = certificateArn
    }
}

/// The token specified in the NextToken argument is not valid. Use the token returned from your previous call to [ListCertificateAuthorities](https://docs.aws.amazon.com/privateca/latest/APIReference/API_ListCertificateAuthorities.html).
public struct InvalidNextTokenException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidNextTokenException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension ACMPCAClientTypes {

    public enum ResourceOwner: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case otherAccounts
        case `self`
        case sdkUnknown(Swift.String)

        public static var allCases: [ResourceOwner] {
            return [
                .otherAccounts,
                .self
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .otherAccounts: return "OTHER_ACCOUNTS"
            case .self: return "SELF"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

public struct ListCertificateAuthoritiesInput: Swift.Sendable {
    /// Use this parameter when paginating results to specify the maximum number of items to return in the response on each page. If additional items exist beyond the number you specify, the NextToken element is sent in the response. Use this NextToken value in a subsequent request to retrieve additional items. Although the maximum value is 1000, the action only returns a maximum of 100 items.
    public var maxResults: Swift.Int?
    /// Use this parameter when paginating results in a subsequent request after you receive a response with truncated results. Set it to the value of the NextToken parameter from the response you just received.
    public var nextToken: Swift.String?
    /// Use this parameter to filter the returned set of certificate authorities based on their owner. The default is SELF.
    public var resourceOwner: ACMPCAClientTypes.ResourceOwner?

    public init(
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        resourceOwner: ACMPCAClientTypes.ResourceOwner? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.resourceOwner = resourceOwner
    }
}

public struct ListCertificateAuthoritiesOutput: Swift.Sendable {
    /// Summary information about each certificate authority you have created.
    public var certificateAuthorities: [ACMPCAClientTypes.CertificateAuthority]?
    /// When the list is truncated, this value is present and should be used for the NextToken parameter in a subsequent pagination request.
    public var nextToken: Swift.String?

    public init(
        certificateAuthorities: [ACMPCAClientTypes.CertificateAuthority]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.certificateAuthorities = certificateAuthorities
        self.nextToken = nextToken
    }
}

public struct ListPermissionsInput: Swift.Sendable {
    /// The Amazon Resource Number (ARN) of the private CA to inspect. You can find the ARN by calling the [ListCertificateAuthorities](https://docs.aws.amazon.com/privateca/latest/APIReference/API_ListCertificateAuthorities.html) action. This must be of the form: arn:aws:acm-pca:region:account:certificate-authority/12345678-1234-1234-1234-123456789012 You can get a private CA's ARN by running the [ListCertificateAuthorities](https://docs.aws.amazon.com/privateca/latest/APIReference/API_ListCertificateAuthorities.html) action.
    /// This member is required.
    public var certificateAuthorityArn: Swift.String?
    /// When paginating results, use this parameter to specify the maximum number of items to return in the response. If additional items exist beyond the number you specify, the NextToken element is sent in the response. Use this NextToken value in a subsequent request to retrieve additional items.
    public var maxResults: Swift.Int?
    /// When paginating results, use this parameter in a subsequent request after you receive a response with truncated results. Set it to the value of NextToken from the response you just received.
    public var nextToken: Swift.String?

    public init(
        certificateAuthorityArn: Swift.String? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.certificateAuthorityArn = certificateAuthorityArn
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

extension ACMPCAClientTypes {

    /// Permissions designate which private CA actions can be performed by an Amazon Web Services service or entity. In order for ACM to automatically renew private certificates, you must give the ACM service principal all available permissions (IssueCertificate, GetCertificate, and ListPermissions). Permissions can be assigned with the [CreatePermission](https://docs.aws.amazon.com/privateca/latest/APIReference/API_CreatePermission.html) action, removed with the [DeletePermission](https://docs.aws.amazon.com/privateca/latest/APIReference/API_DeletePermission.html) action, and listed with the [ListPermissions](https://docs.aws.amazon.com/privateca/latest/APIReference/API_ListPermissions.html) action.
    public struct Permission: Swift.Sendable {
        /// The private CA actions that can be performed by the designated Amazon Web Services service.
        public var actions: [ACMPCAClientTypes.ActionType]?
        /// The Amazon Resource Number (ARN) of the private CA from which the permission was issued.
        public var certificateAuthorityArn: Swift.String?
        /// The time at which the permission was created.
        public var createdAt: Foundation.Date?
        /// The name of the policy that is associated with the permission.
        public var policy: Swift.String?
        /// The Amazon Web Services service or entity that holds the permission. At this time, the only valid principal is acm.amazonaws.com.
        public var principal: Swift.String?
        /// The ID of the account that assigned the permission.
        public var sourceAccount: Swift.String?

        public init(
            actions: [ACMPCAClientTypes.ActionType]? = nil,
            certificateAuthorityArn: Swift.String? = nil,
            createdAt: Foundation.Date? = nil,
            policy: Swift.String? = nil,
            principal: Swift.String? = nil,
            sourceAccount: Swift.String? = nil
        )
        {
            self.actions = actions
            self.certificateAuthorityArn = certificateAuthorityArn
            self.createdAt = createdAt
            self.policy = policy
            self.principal = principal
            self.sourceAccount = sourceAccount
        }
    }
}

public struct ListPermissionsOutput: Swift.Sendable {
    /// When the list is truncated, this value is present and should be used for the NextToken parameter in a subsequent pagination request.
    public var nextToken: Swift.String?
    /// Summary information about each permission assigned by the specified private CA, including the action enabled, the policy provided, and the time of creation.
    public var permissions: [ACMPCAClientTypes.Permission]?

    public init(
        nextToken: Swift.String? = nil,
        permissions: [ACMPCAClientTypes.Permission]? = nil
    )
    {
        self.nextToken = nextToken
        self.permissions = permissions
    }
}

public struct ListTagsInput: Swift.Sendable {
    /// The Amazon Resource Name (ARN) that was returned when you called the [CreateCertificateAuthority](https://docs.aws.amazon.com/privateca/latest/APIReference/API_CreateCertificateAuthority.html) action. This must be of the form: arn:aws:acm-pca:region:account:certificate-authority/12345678-1234-1234-1234-123456789012
    /// This member is required.
    public var certificateAuthorityArn: Swift.String?
    /// Use this parameter when paginating results to specify the maximum number of items to return in the response. If additional items exist beyond the number you specify, the NextToken element is sent in the response. Use this NextToken value in a subsequent request to retrieve additional items.
    public var maxResults: Swift.Int?
    /// Use this parameter when paginating results in a subsequent request after you receive a response with truncated results. Set it to the value of NextToken from the response you just received.
    public var nextToken: Swift.String?

    public init(
        certificateAuthorityArn: Swift.String? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.certificateAuthorityArn = certificateAuthorityArn
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

public struct ListTagsOutput: Swift.Sendable {
    /// When the list is truncated, this value is present and should be used for the NextToken parameter in a subsequent pagination request.
    public var nextToken: Swift.String?
    /// The tags associated with your private CA.
    public var tags: [ACMPCAClientTypes.Tag]?

    public init(
        nextToken: Swift.String? = nil,
        tags: [ACMPCAClientTypes.Tag]? = nil
    )
    {
        self.nextToken = nextToken
        self.tags = tags
    }
}

public struct PutPolicyInput: Swift.Sendable {
    /// The path and file name of a JSON-formatted IAM policy to attach to the specified private CA resource. If this policy does not contain all required statements or if it includes any statement that is not allowed, the PutPolicy action returns an InvalidPolicyException. For information about IAM policy and statement structure, see [Overview of JSON Policies](https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies.html#access_policies-json).
    /// This member is required.
    public var policy: Swift.String?
    /// The Amazon Resource Number (ARN) of the private CA to associate with the policy. The ARN of the CA can be found by calling the [ListCertificateAuthorities](https://docs.aws.amazon.com/privateca/latest/APIReference/API_ListCertificateAuthorities.html) action.
    /// This member is required.
    public var resourceArn: Swift.String?

    public init(
        policy: Swift.String? = nil,
        resourceArn: Swift.String? = nil
    )
    {
        self.policy = policy
        self.resourceArn = resourceArn
    }
}

public struct RestoreCertificateAuthorityInput: Swift.Sendable {
    /// The Amazon Resource Name (ARN) that was returned when you called the [CreateCertificateAuthority](https://docs.aws.amazon.com/privateca/latest/APIReference/API_CreateCertificateAuthority.html) action. This must be of the form: arn:aws:acm-pca:region:account:certificate-authority/12345678-1234-1234-1234-123456789012
    /// This member is required.
    public var certificateAuthorityArn: Swift.String?

    public init(
        certificateAuthorityArn: Swift.String? = nil
    )
    {
        self.certificateAuthorityArn = certificateAuthorityArn
    }
}

/// Your request has already been completed.
public struct RequestAlreadyProcessedException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "RequestAlreadyProcessedException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension ACMPCAClientTypes {

    public enum RevocationReason: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case affiliationChanged
        case aACompromise
        case certificateAuthorityCompromise
        case cessationOfOperation
        case keyCompromise
        case privilegeWithdrawn
        case superseded
        case unspecified
        case sdkUnknown(Swift.String)

        public static var allCases: [RevocationReason] {
            return [
                .affiliationChanged,
                .aACompromise,
                .certificateAuthorityCompromise,
                .cessationOfOperation,
                .keyCompromise,
                .privilegeWithdrawn,
                .superseded,
                .unspecified
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .affiliationChanged: return "AFFILIATION_CHANGED"
            case .aACompromise: return "A_A_COMPROMISE"
            case .certificateAuthorityCompromise: return "CERTIFICATE_AUTHORITY_COMPROMISE"
            case .cessationOfOperation: return "CESSATION_OF_OPERATION"
            case .keyCompromise: return "KEY_COMPROMISE"
            case .privilegeWithdrawn: return "PRIVILEGE_WITHDRAWN"
            case .superseded: return "SUPERSEDED"
            case .unspecified: return "UNSPECIFIED"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

public struct RevokeCertificateInput: Swift.Sendable {
    /// Amazon Resource Name (ARN) of the private CA that issued the certificate to be revoked. This must be of the form: arn:aws:acm-pca:region:account:certificate-authority/12345678-1234-1234-1234-123456789012
    /// This member is required.
    public var certificateAuthorityArn: Swift.String?
    /// Serial number of the certificate to be revoked. This must be in hexadecimal format. You can retrieve the serial number by calling [GetCertificate](https://docs.aws.amazon.com/privateca/latest/APIReference/API_GetCertificate.html) with the Amazon Resource Name (ARN) of the certificate you want and the ARN of your private CA. The GetCertificate action retrieves the certificate in the PEM format. You can use the following OpenSSL command to list the certificate in text format and copy the hexadecimal serial number. openssl x509 -in file_path -text -noout You can also copy the serial number from the console or use the [DescribeCertificate](https://docs.aws.amazon.com/acm/latest/APIReference/API_DescribeCertificate.html) action in the Certificate Manager API Reference.
    /// This member is required.
    public var certificateSerial: Swift.String?
    /// Specifies why you revoked the certificate.
    /// This member is required.
    public var revocationReason: ACMPCAClientTypes.RevocationReason?

    public init(
        certificateAuthorityArn: Swift.String? = nil,
        certificateSerial: Swift.String? = nil,
        revocationReason: ACMPCAClientTypes.RevocationReason? = nil
    )
    {
        self.certificateAuthorityArn = certificateAuthorityArn
        self.certificateSerial = certificateSerial
        self.revocationReason = revocationReason
    }
}

/// You can associate up to 50 tags with a private CA. Exception information is contained in the exception message field.
public struct TooManyTagsException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "TooManyTagsException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

public struct TagCertificateAuthorityInput: Swift.Sendable {
    /// The Amazon Resource Name (ARN) that was returned when you called [CreateCertificateAuthority](https://docs.aws.amazon.com/privateca/latest/APIReference/API_CreateCertificateAuthority.html). This must be of the form: arn:aws:acm-pca:region:account:certificate-authority/12345678-1234-1234-1234-123456789012
    /// This member is required.
    public var certificateAuthorityArn: Swift.String?
    /// List of tags to be associated with the CA.
    /// This member is required.
    public var tags: [ACMPCAClientTypes.Tag]?

    public init(
        certificateAuthorityArn: Swift.String? = nil,
        tags: [ACMPCAClientTypes.Tag]? = nil
    )
    {
        self.certificateAuthorityArn = certificateAuthorityArn
        self.tags = tags
    }
}

public struct UntagCertificateAuthorityInput: Swift.Sendable {
    /// The Amazon Resource Name (ARN) that was returned when you called [CreateCertificateAuthority](https://docs.aws.amazon.com/privateca/latest/APIReference/API_CreateCertificateAuthority.html). This must be of the form: arn:aws:acm-pca:region:account:certificate-authority/12345678-1234-1234-1234-123456789012
    /// This member is required.
    public var certificateAuthorityArn: Swift.String?
    /// List of tags to be removed from the CA.
    /// This member is required.
    public var tags: [ACMPCAClientTypes.Tag]?

    public init(
        certificateAuthorityArn: Swift.String? = nil,
        tags: [ACMPCAClientTypes.Tag]? = nil
    )
    {
        self.certificateAuthorityArn = certificateAuthorityArn
        self.tags = tags
    }
}

public struct UpdateCertificateAuthorityInput: Swift.Sendable {
    /// Amazon Resource Name (ARN) of the private CA that issued the certificate to be revoked. This must be of the form: arn:aws:acm-pca:region:account:certificate-authority/12345678-1234-1234-1234-123456789012
    /// This member is required.
    public var certificateAuthorityArn: Swift.String?
    /// Contains information to enable support for Online Certificate Status Protocol (OCSP), certificate revocation list (CRL), both protocols, or neither. If you don't supply this parameter, existing capibilites remain unchanged. For more information, see the [OcspConfiguration](https://docs.aws.amazon.com/privateca/latest/APIReference/API_OcspConfiguration.html) and [CrlConfiguration](https://docs.aws.amazon.com/privateca/latest/APIReference/API_CrlConfiguration.html) types. The following requirements apply to revocation configurations.
    ///
    /// * A configuration disabling CRLs or OCSP must contain only the Enabled=False parameter, and will fail if other parameters such as CustomCname or ExpirationInDays are included.
    ///
    /// * In a CRL configuration, the S3BucketName parameter must conform to [Amazon S3 bucket naming rules](https://docs.aws.amazon.com/AmazonS3/latest/userguide/bucketnamingrules.html).
    ///
    /// * A configuration containing a custom Canonical Name (CNAME) parameter for CRLs or OCSP must conform to [RFC2396](https://www.ietf.org/rfc/rfc2396.txt) restrictions on the use of special characters in a CNAME.
    ///
    /// * In a CRL or OCSP configuration, the value of a CNAME parameter must not include a protocol prefix such as "http://" or "https://".
    ///
    ///
    /// If you update the S3BucketName of [CrlConfiguration](https://docs.aws.amazon.com/privateca/latest/APIReference/API_CrlConfiguration.html), you can break revocation for existing certificates. In other words, if you call [UpdateCertificateAuthority](https://docs.aws.amazon.com/privateca/latest/APIReference/API_UpdateCertificateAuthority.html) to update the CRL configuration's S3 bucket name, Amazon Web Services Private CA only writes CRLs to the new S3 bucket. Certificates issued prior to this point will have the old S3 bucket name in your CRL Distribution Point (CDP) extension, essentially breaking revocation. If you must update the S3 bucket, you'll need to reissue old certificates to keep the revocation working. Alternatively, you can use a [CustomCname](https://docs.aws.amazon.com/privateca/latest/APIReference/API_CrlConfiguration.html#privateca-Type-CrlConfiguration-CustomCname) in your CRL configuration if you might need to change the S3 bucket name in the future.
    public var revocationConfiguration: ACMPCAClientTypes.RevocationConfiguration?
    /// Status of your private CA.
    public var status: ACMPCAClientTypes.CertificateAuthorityStatus?

    public init(
        certificateAuthorityArn: Swift.String? = nil,
        revocationConfiguration: ACMPCAClientTypes.RevocationConfiguration? = nil,
        status: ACMPCAClientTypes.CertificateAuthorityStatus? = nil
    )
    {
        self.certificateAuthorityArn = certificateAuthorityArn
        self.revocationConfiguration = revocationConfiguration
        self.status = status
    }
}

extension CreateCertificateAuthorityInput {

    static func urlPathProvider(_ value: CreateCertificateAuthorityInput) -> Swift.String? {
        return "/"
    }
}

extension CreateCertificateAuthorityAuditReportInput {

    static func urlPathProvider(_ value: CreateCertificateAuthorityAuditReportInput) -> Swift.String? {
        return "/"
    }
}

extension CreatePermissionInput {

    static func urlPathProvider(_ value: CreatePermissionInput) -> Swift.String? {
        return "/"
    }
}

extension DeleteCertificateAuthorityInput {

    static func urlPathProvider(_ value: DeleteCertificateAuthorityInput) -> Swift.String? {
        return "/"
    }
}

extension DeletePermissionInput {

    static func urlPathProvider(_ value: DeletePermissionInput) -> Swift.String? {
        return "/"
    }
}

extension DeletePolicyInput {

    static func urlPathProvider(_ value: DeletePolicyInput) -> Swift.String? {
        return "/"
    }
}

extension DescribeCertificateAuthorityInput {

    static func urlPathProvider(_ value: DescribeCertificateAuthorityInput) -> Swift.String? {
        return "/"
    }
}

extension DescribeCertificateAuthorityAuditReportInput {

    static func urlPathProvider(_ value: DescribeCertificateAuthorityAuditReportInput) -> Swift.String? {
        return "/"
    }
}

extension GetCertificateInput {

    static func urlPathProvider(_ value: GetCertificateInput) -> Swift.String? {
        return "/"
    }
}

extension GetCertificateAuthorityCertificateInput {

    static func urlPathProvider(_ value: GetCertificateAuthorityCertificateInput) -> Swift.String? {
        return "/"
    }
}

extension GetCertificateAuthorityCsrInput {

    static func urlPathProvider(_ value: GetCertificateAuthorityCsrInput) -> Swift.String? {
        return "/"
    }
}

extension GetPolicyInput {

    static func urlPathProvider(_ value: GetPolicyInput) -> Swift.String? {
        return "/"
    }
}

extension ImportCertificateAuthorityCertificateInput {

    static func urlPathProvider(_ value: ImportCertificateAuthorityCertificateInput) -> Swift.String? {
        return "/"
    }
}

extension IssueCertificateInput {

    static func urlPathProvider(_ value: IssueCertificateInput) -> Swift.String? {
        return "/"
    }
}

extension ListCertificateAuthoritiesInput {

    static func urlPathProvider(_ value: ListCertificateAuthoritiesInput) -> Swift.String? {
        return "/"
    }
}

extension ListPermissionsInput {

    static func urlPathProvider(_ value: ListPermissionsInput) -> Swift.String? {
        return "/"
    }
}

extension ListTagsInput {

    static func urlPathProvider(_ value: ListTagsInput) -> Swift.String? {
        return "/"
    }
}

extension PutPolicyInput {

    static func urlPathProvider(_ value: PutPolicyInput) -> Swift.String? {
        return "/"
    }
}

extension RestoreCertificateAuthorityInput {

    static func urlPathProvider(_ value: RestoreCertificateAuthorityInput) -> Swift.String? {
        return "/"
    }
}

extension RevokeCertificateInput {

    static func urlPathProvider(_ value: RevokeCertificateInput) -> Swift.String? {
        return "/"
    }
}

extension TagCertificateAuthorityInput {

    static func urlPathProvider(_ value: TagCertificateAuthorityInput) -> Swift.String? {
        return "/"
    }
}

extension UntagCertificateAuthorityInput {

    static func urlPathProvider(_ value: UntagCertificateAuthorityInput) -> Swift.String? {
        return "/"
    }
}

extension UpdateCertificateAuthorityInput {

    static func urlPathProvider(_ value: UpdateCertificateAuthorityInput) -> Swift.String? {
        return "/"
    }
}

extension CreateCertificateAuthorityInput {

    static func write(value: CreateCertificateAuthorityInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["CertificateAuthorityConfiguration"].write(value.certificateAuthorityConfiguration, with: ACMPCAClientTypes.CertificateAuthorityConfiguration.write(value:to:))
        try writer["CertificateAuthorityType"].write(value.certificateAuthorityType)
        try writer["IdempotencyToken"].write(value.idempotencyToken)
        try writer["KeyStorageSecurityStandard"].write(value.keyStorageSecurityStandard)
        try writer["RevocationConfiguration"].write(value.revocationConfiguration, with: ACMPCAClientTypes.RevocationConfiguration.write(value:to:))
        try writer["Tags"].writeList(value.tags, memberWritingClosure: ACMPCAClientTypes.Tag.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["UsageMode"].write(value.usageMode)
    }
}

extension CreateCertificateAuthorityAuditReportInput {

    static func write(value: CreateCertificateAuthorityAuditReportInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["AuditReportResponseFormat"].write(value.auditReportResponseFormat)
        try writer["CertificateAuthorityArn"].write(value.certificateAuthorityArn)
        try writer["S3BucketName"].write(value.s3BucketName)
    }
}

extension CreatePermissionInput {

    static func write(value: CreatePermissionInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Actions"].writeList(value.actions, memberWritingClosure: SmithyReadWrite.WritingClosureBox<ACMPCAClientTypes.ActionType>().write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["CertificateAuthorityArn"].write(value.certificateAuthorityArn)
        try writer["Principal"].write(value.principal)
        try writer["SourceAccount"].write(value.sourceAccount)
    }
}

extension DeleteCertificateAuthorityInput {

    static func write(value: DeleteCertificateAuthorityInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["CertificateAuthorityArn"].write(value.certificateAuthorityArn)
        try writer["PermanentDeletionTimeInDays"].write(value.permanentDeletionTimeInDays)
    }
}

extension DeletePermissionInput {

    static func write(value: DeletePermissionInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["CertificateAuthorityArn"].write(value.certificateAuthorityArn)
        try writer["Principal"].write(value.principal)
        try writer["SourceAccount"].write(value.sourceAccount)
    }
}

extension DeletePolicyInput {

    static func write(value: DeletePolicyInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ResourceArn"].write(value.resourceArn)
    }
}

extension DescribeCertificateAuthorityInput {

    static func write(value: DescribeCertificateAuthorityInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["CertificateAuthorityArn"].write(value.certificateAuthorityArn)
    }
}

extension DescribeCertificateAuthorityAuditReportInput {

    static func write(value: DescribeCertificateAuthorityAuditReportInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["AuditReportId"].write(value.auditReportId)
        try writer["CertificateAuthorityArn"].write(value.certificateAuthorityArn)
    }
}

extension GetCertificateInput {

    static func write(value: GetCertificateInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["CertificateArn"].write(value.certificateArn)
        try writer["CertificateAuthorityArn"].write(value.certificateAuthorityArn)
    }
}

extension GetCertificateAuthorityCertificateInput {

    static func write(value: GetCertificateAuthorityCertificateInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["CertificateAuthorityArn"].write(value.certificateAuthorityArn)
    }
}

extension GetCertificateAuthorityCsrInput {

    static func write(value: GetCertificateAuthorityCsrInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["CertificateAuthorityArn"].write(value.certificateAuthorityArn)
    }
}

extension GetPolicyInput {

    static func write(value: GetPolicyInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ResourceArn"].write(value.resourceArn)
    }
}

extension ImportCertificateAuthorityCertificateInput {

    static func write(value: ImportCertificateAuthorityCertificateInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Certificate"].write(value.certificate)
        try writer["CertificateAuthorityArn"].write(value.certificateAuthorityArn)
        try writer["CertificateChain"].write(value.certificateChain)
    }
}

extension IssueCertificateInput {

    static func write(value: IssueCertificateInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ApiPassthrough"].write(value.apiPassthrough, with: ACMPCAClientTypes.ApiPassthrough.write(value:to:))
        try writer["CertificateAuthorityArn"].write(value.certificateAuthorityArn)
        try writer["Csr"].write(value.csr)
        try writer["IdempotencyToken"].write(value.idempotencyToken)
        try writer["SigningAlgorithm"].write(value.signingAlgorithm)
        try writer["TemplateArn"].write(value.templateArn)
        try writer["Validity"].write(value.validity, with: ACMPCAClientTypes.Validity.write(value:to:))
        try writer["ValidityNotBefore"].write(value.validityNotBefore, with: ACMPCAClientTypes.Validity.write(value:to:))
    }
}

extension ListCertificateAuthoritiesInput {

    static func write(value: ListCertificateAuthoritiesInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["MaxResults"].write(value.maxResults)
        try writer["NextToken"].write(value.nextToken)
        try writer["ResourceOwner"].write(value.resourceOwner)
    }
}

extension ListPermissionsInput {

    static func write(value: ListPermissionsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["CertificateAuthorityArn"].write(value.certificateAuthorityArn)
        try writer["MaxResults"].write(value.maxResults)
        try writer["NextToken"].write(value.nextToken)
    }
}

extension ListTagsInput {

    static func write(value: ListTagsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["CertificateAuthorityArn"].write(value.certificateAuthorityArn)
        try writer["MaxResults"].write(value.maxResults)
        try writer["NextToken"].write(value.nextToken)
    }
}

extension PutPolicyInput {

    static func write(value: PutPolicyInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Policy"].write(value.policy)
        try writer["ResourceArn"].write(value.resourceArn)
    }
}

extension RestoreCertificateAuthorityInput {

    static func write(value: RestoreCertificateAuthorityInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["CertificateAuthorityArn"].write(value.certificateAuthorityArn)
    }
}

extension RevokeCertificateInput {

    static func write(value: RevokeCertificateInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["CertificateAuthorityArn"].write(value.certificateAuthorityArn)
        try writer["CertificateSerial"].write(value.certificateSerial)
        try writer["RevocationReason"].write(value.revocationReason)
    }
}

extension TagCertificateAuthorityInput {

    static func write(value: TagCertificateAuthorityInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["CertificateAuthorityArn"].write(value.certificateAuthorityArn)
        try writer["Tags"].writeList(value.tags, memberWritingClosure: ACMPCAClientTypes.Tag.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension UntagCertificateAuthorityInput {

    static func write(value: UntagCertificateAuthorityInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["CertificateAuthorityArn"].write(value.certificateAuthorityArn)
        try writer["Tags"].writeList(value.tags, memberWritingClosure: ACMPCAClientTypes.Tag.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension UpdateCertificateAuthorityInput {

    static func write(value: UpdateCertificateAuthorityInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["CertificateAuthorityArn"].write(value.certificateAuthorityArn)
        try writer["RevocationConfiguration"].write(value.revocationConfiguration, with: ACMPCAClientTypes.RevocationConfiguration.write(value:to:))
        try writer["Status"].write(value.status)
    }
}

extension CreateCertificateAuthorityOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateCertificateAuthorityOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateCertificateAuthorityOutput()
        value.certificateAuthorityArn = try reader["CertificateAuthorityArn"].readIfPresent()
        return value
    }
}

extension CreateCertificateAuthorityAuditReportOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateCertificateAuthorityAuditReportOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateCertificateAuthorityAuditReportOutput()
        value.auditReportId = try reader["AuditReportId"].readIfPresent()
        value.s3Key = try reader["S3Key"].readIfPresent()
        return value
    }
}

extension CreatePermissionOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreatePermissionOutput {
        return CreatePermissionOutput()
    }
}

extension DeleteCertificateAuthorityOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteCertificateAuthorityOutput {
        return DeleteCertificateAuthorityOutput()
    }
}

extension DeletePermissionOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeletePermissionOutput {
        return DeletePermissionOutput()
    }
}

extension DeletePolicyOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeletePolicyOutput {
        return DeletePolicyOutput()
    }
}

extension DescribeCertificateAuthorityOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeCertificateAuthorityOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DescribeCertificateAuthorityOutput()
        value.certificateAuthority = try reader["CertificateAuthority"].readIfPresent(with: ACMPCAClientTypes.CertificateAuthority.read(from:))
        return value
    }
}

extension DescribeCertificateAuthorityAuditReportOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeCertificateAuthorityAuditReportOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DescribeCertificateAuthorityAuditReportOutput()
        value.auditReportStatus = try reader["AuditReportStatus"].readIfPresent()
        value.createdAt = try reader["CreatedAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.s3BucketName = try reader["S3BucketName"].readIfPresent()
        value.s3Key = try reader["S3Key"].readIfPresent()
        return value
    }
}

extension GetCertificateOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetCertificateOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetCertificateOutput()
        value.certificate = try reader["Certificate"].readIfPresent()
        value.certificateChain = try reader["CertificateChain"].readIfPresent()
        return value
    }
}

extension GetCertificateAuthorityCertificateOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetCertificateAuthorityCertificateOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetCertificateAuthorityCertificateOutput()
        value.certificate = try reader["Certificate"].readIfPresent()
        value.certificateChain = try reader["CertificateChain"].readIfPresent()
        return value
    }
}

extension GetCertificateAuthorityCsrOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetCertificateAuthorityCsrOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetCertificateAuthorityCsrOutput()
        value.csr = try reader["Csr"].readIfPresent()
        return value
    }
}

extension GetPolicyOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetPolicyOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetPolicyOutput()
        value.policy = try reader["Policy"].readIfPresent()
        return value
    }
}

extension ImportCertificateAuthorityCertificateOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ImportCertificateAuthorityCertificateOutput {
        return ImportCertificateAuthorityCertificateOutput()
    }
}

extension IssueCertificateOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> IssueCertificateOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = IssueCertificateOutput()
        value.certificateArn = try reader["CertificateArn"].readIfPresent()
        return value
    }
}

extension ListCertificateAuthoritiesOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListCertificateAuthoritiesOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListCertificateAuthoritiesOutput()
        value.certificateAuthorities = try reader["CertificateAuthorities"].readListIfPresent(memberReadingClosure: ACMPCAClientTypes.CertificateAuthority.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.nextToken = try reader["NextToken"].readIfPresent()
        return value
    }
}

extension ListPermissionsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListPermissionsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListPermissionsOutput()
        value.nextToken = try reader["NextToken"].readIfPresent()
        value.permissions = try reader["Permissions"].readListIfPresent(memberReadingClosure: ACMPCAClientTypes.Permission.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension ListTagsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListTagsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListTagsOutput()
        value.nextToken = try reader["NextToken"].readIfPresent()
        value.tags = try reader["Tags"].readListIfPresent(memberReadingClosure: ACMPCAClientTypes.Tag.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension PutPolicyOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> PutPolicyOutput {
        return PutPolicyOutput()
    }
}

extension RestoreCertificateAuthorityOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> RestoreCertificateAuthorityOutput {
        return RestoreCertificateAuthorityOutput()
    }
}

extension RevokeCertificateOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> RevokeCertificateOutput {
        return RevokeCertificateOutput()
    }
}

extension TagCertificateAuthorityOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> TagCertificateAuthorityOutput {
        return TagCertificateAuthorityOutput()
    }
}

extension UntagCertificateAuthorityOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UntagCertificateAuthorityOutput {
        return UntagCertificateAuthorityOutput()
    }
}

extension UpdateCertificateAuthorityOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdateCertificateAuthorityOutput {
        return UpdateCertificateAuthorityOutput()
    }
}

enum CreateCertificateAuthorityOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InvalidArgsException": return try InvalidArgsException.makeError(baseError: baseError)
            case "InvalidPolicyException": return try InvalidPolicyException.makeError(baseError: baseError)
            case "InvalidTagException": return try InvalidTagException.makeError(baseError: baseError)
            case "LimitExceededException": return try LimitExceededException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateCertificateAuthorityAuditReportOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InvalidArgsException": return try InvalidArgsException.makeError(baseError: baseError)
            case "InvalidArnException": return try InvalidArnException.makeError(baseError: baseError)
            case "InvalidStateException": return try InvalidStateException.makeError(baseError: baseError)
            case "RequestFailedException": return try RequestFailedException.makeError(baseError: baseError)
            case "RequestInProgressException": return try RequestInProgressException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreatePermissionOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InvalidArnException": return try InvalidArnException.makeError(baseError: baseError)
            case "InvalidStateException": return try InvalidStateException.makeError(baseError: baseError)
            case "LimitExceededException": return try LimitExceededException.makeError(baseError: baseError)
            case "PermissionAlreadyExistsException": return try PermissionAlreadyExistsException.makeError(baseError: baseError)
            case "RequestFailedException": return try RequestFailedException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteCertificateAuthorityOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ConcurrentModificationException": return try ConcurrentModificationException.makeError(baseError: baseError)
            case "InvalidArnException": return try InvalidArnException.makeError(baseError: baseError)
            case "InvalidStateException": return try InvalidStateException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeletePermissionOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InvalidArnException": return try InvalidArnException.makeError(baseError: baseError)
            case "InvalidStateException": return try InvalidStateException.makeError(baseError: baseError)
            case "RequestFailedException": return try RequestFailedException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeletePolicyOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ConcurrentModificationException": return try ConcurrentModificationException.makeError(baseError: baseError)
            case "InvalidArnException": return try InvalidArnException.makeError(baseError: baseError)
            case "InvalidStateException": return try InvalidStateException.makeError(baseError: baseError)
            case "LockoutPreventedException": return try LockoutPreventedException.makeError(baseError: baseError)
            case "RequestFailedException": return try RequestFailedException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeCertificateAuthorityOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InvalidArnException": return try InvalidArnException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeCertificateAuthorityAuditReportOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InvalidArgsException": return try InvalidArgsException.makeError(baseError: baseError)
            case "InvalidArnException": return try InvalidArnException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetCertificateOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InvalidArnException": return try InvalidArnException.makeError(baseError: baseError)
            case "InvalidStateException": return try InvalidStateException.makeError(baseError: baseError)
            case "RequestFailedException": return try RequestFailedException.makeError(baseError: baseError)
            case "RequestInProgressException": return try RequestInProgressException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetCertificateAuthorityCertificateOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InvalidArnException": return try InvalidArnException.makeError(baseError: baseError)
            case "InvalidStateException": return try InvalidStateException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetCertificateAuthorityCsrOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InvalidArnException": return try InvalidArnException.makeError(baseError: baseError)
            case "InvalidStateException": return try InvalidStateException.makeError(baseError: baseError)
            case "RequestFailedException": return try RequestFailedException.makeError(baseError: baseError)
            case "RequestInProgressException": return try RequestInProgressException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetPolicyOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InvalidArnException": return try InvalidArnException.makeError(baseError: baseError)
            case "InvalidStateException": return try InvalidStateException.makeError(baseError: baseError)
            case "RequestFailedException": return try RequestFailedException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ImportCertificateAuthorityCertificateOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "CertificateMismatchException": return try CertificateMismatchException.makeError(baseError: baseError)
            case "ConcurrentModificationException": return try ConcurrentModificationException.makeError(baseError: baseError)
            case "InvalidArnException": return try InvalidArnException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            case "InvalidStateException": return try InvalidStateException.makeError(baseError: baseError)
            case "MalformedCertificateException": return try MalformedCertificateException.makeError(baseError: baseError)
            case "RequestFailedException": return try RequestFailedException.makeError(baseError: baseError)
            case "RequestInProgressException": return try RequestInProgressException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum IssueCertificateOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InvalidArgsException": return try InvalidArgsException.makeError(baseError: baseError)
            case "InvalidArnException": return try InvalidArnException.makeError(baseError: baseError)
            case "InvalidStateException": return try InvalidStateException.makeError(baseError: baseError)
            case "LimitExceededException": return try LimitExceededException.makeError(baseError: baseError)
            case "MalformedCSRException": return try MalformedCSRException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListCertificateAuthoritiesOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InvalidNextTokenException": return try InvalidNextTokenException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListPermissionsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InvalidArnException": return try InvalidArnException.makeError(baseError: baseError)
            case "InvalidNextTokenException": return try InvalidNextTokenException.makeError(baseError: baseError)
            case "InvalidStateException": return try InvalidStateException.makeError(baseError: baseError)
            case "RequestFailedException": return try RequestFailedException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListTagsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InvalidArnException": return try InvalidArnException.makeError(baseError: baseError)
            case "InvalidStateException": return try InvalidStateException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum PutPolicyOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ConcurrentModificationException": return try ConcurrentModificationException.makeError(baseError: baseError)
            case "InvalidArnException": return try InvalidArnException.makeError(baseError: baseError)
            case "InvalidPolicyException": return try InvalidPolicyException.makeError(baseError: baseError)
            case "InvalidStateException": return try InvalidStateException.makeError(baseError: baseError)
            case "LockoutPreventedException": return try LockoutPreventedException.makeError(baseError: baseError)
            case "RequestFailedException": return try RequestFailedException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum RestoreCertificateAuthorityOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InvalidArnException": return try InvalidArnException.makeError(baseError: baseError)
            case "InvalidStateException": return try InvalidStateException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum RevokeCertificateOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ConcurrentModificationException": return try ConcurrentModificationException.makeError(baseError: baseError)
            case "InvalidArnException": return try InvalidArnException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            case "InvalidStateException": return try InvalidStateException.makeError(baseError: baseError)
            case "LimitExceededException": return try LimitExceededException.makeError(baseError: baseError)
            case "RequestAlreadyProcessedException": return try RequestAlreadyProcessedException.makeError(baseError: baseError)
            case "RequestFailedException": return try RequestFailedException.makeError(baseError: baseError)
            case "RequestInProgressException": return try RequestInProgressException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum TagCertificateAuthorityOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InvalidArnException": return try InvalidArnException.makeError(baseError: baseError)
            case "InvalidStateException": return try InvalidStateException.makeError(baseError: baseError)
            case "InvalidTagException": return try InvalidTagException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "TooManyTagsException": return try TooManyTagsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UntagCertificateAuthorityOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InvalidArnException": return try InvalidArnException.makeError(baseError: baseError)
            case "InvalidStateException": return try InvalidStateException.makeError(baseError: baseError)
            case "InvalidTagException": return try InvalidTagException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdateCertificateAuthorityOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ConcurrentModificationException": return try ConcurrentModificationException.makeError(baseError: baseError)
            case "InvalidArgsException": return try InvalidArgsException.makeError(baseError: baseError)
            case "InvalidArnException": return try InvalidArnException.makeError(baseError: baseError)
            case "InvalidPolicyException": return try InvalidPolicyException.makeError(baseError: baseError)
            case "InvalidStateException": return try InvalidStateException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

extension LimitExceededException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> LimitExceededException {
        let reader = baseError.errorBodyReader
        var value = LimitExceededException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension InvalidPolicyException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> InvalidPolicyException {
        let reader = baseError.errorBodyReader
        var value = InvalidPolicyException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension InvalidTagException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> InvalidTagException {
        let reader = baseError.errorBodyReader
        var value = InvalidTagException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension InvalidArgsException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> InvalidArgsException {
        let reader = baseError.errorBodyReader
        var value = InvalidArgsException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension RequestFailedException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> RequestFailedException {
        let reader = baseError.errorBodyReader
        var value = RequestFailedException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension InvalidStateException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> InvalidStateException {
        let reader = baseError.errorBodyReader
        var value = InvalidStateException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension InvalidArnException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> InvalidArnException {
        let reader = baseError.errorBodyReader
        var value = InvalidArnException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension RequestInProgressException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> RequestInProgressException {
        let reader = baseError.errorBodyReader
        var value = RequestInProgressException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ResourceNotFoundException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> ResourceNotFoundException {
        let reader = baseError.errorBodyReader
        var value = ResourceNotFoundException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension PermissionAlreadyExistsException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> PermissionAlreadyExistsException {
        let reader = baseError.errorBodyReader
        var value = PermissionAlreadyExistsException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ConcurrentModificationException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> ConcurrentModificationException {
        let reader = baseError.errorBodyReader
        var value = ConcurrentModificationException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension LockoutPreventedException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> LockoutPreventedException {
        let reader = baseError.errorBodyReader
        var value = LockoutPreventedException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension CertificateMismatchException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> CertificateMismatchException {
        let reader = baseError.errorBodyReader
        var value = CertificateMismatchException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension InvalidRequestException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> InvalidRequestException {
        let reader = baseError.errorBodyReader
        var value = InvalidRequestException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension MalformedCertificateException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> MalformedCertificateException {
        let reader = baseError.errorBodyReader
        var value = MalformedCertificateException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension MalformedCSRException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> MalformedCSRException {
        let reader = baseError.errorBodyReader
        var value = MalformedCSRException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension InvalidNextTokenException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> InvalidNextTokenException {
        let reader = baseError.errorBodyReader
        var value = InvalidNextTokenException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension RequestAlreadyProcessedException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> RequestAlreadyProcessedException {
        let reader = baseError.errorBodyReader
        var value = RequestAlreadyProcessedException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension TooManyTagsException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> TooManyTagsException {
        let reader = baseError.errorBodyReader
        var value = TooManyTagsException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ACMPCAClientTypes.CertificateAuthority {

    static func read(from reader: SmithyJSON.Reader) throws -> ACMPCAClientTypes.CertificateAuthority {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ACMPCAClientTypes.CertificateAuthority()
        value.arn = try reader["Arn"].readIfPresent()
        value.ownerAccount = try reader["OwnerAccount"].readIfPresent()
        value.createdAt = try reader["CreatedAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.lastStateChangeAt = try reader["LastStateChangeAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.type = try reader["Type"].readIfPresent()
        value.serial = try reader["Serial"].readIfPresent()
        value.status = try reader["Status"].readIfPresent()
        value.notBefore = try reader["NotBefore"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.notAfter = try reader["NotAfter"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.failureReason = try reader["FailureReason"].readIfPresent()
        value.certificateAuthorityConfiguration = try reader["CertificateAuthorityConfiguration"].readIfPresent(with: ACMPCAClientTypes.CertificateAuthorityConfiguration.read(from:))
        value.revocationConfiguration = try reader["RevocationConfiguration"].readIfPresent(with: ACMPCAClientTypes.RevocationConfiguration.read(from:))
        value.restorableUntil = try reader["RestorableUntil"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.keyStorageSecurityStandard = try reader["KeyStorageSecurityStandard"].readIfPresent()
        value.usageMode = try reader["UsageMode"].readIfPresent()
        return value
    }
}

extension ACMPCAClientTypes.RevocationConfiguration {

    static func write(value: ACMPCAClientTypes.RevocationConfiguration?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["CrlConfiguration"].write(value.crlConfiguration, with: ACMPCAClientTypes.CrlConfiguration.write(value:to:))
        try writer["OcspConfiguration"].write(value.ocspConfiguration, with: ACMPCAClientTypes.OcspConfiguration.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> ACMPCAClientTypes.RevocationConfiguration {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ACMPCAClientTypes.RevocationConfiguration()
        value.crlConfiguration = try reader["CrlConfiguration"].readIfPresent(with: ACMPCAClientTypes.CrlConfiguration.read(from:))
        value.ocspConfiguration = try reader["OcspConfiguration"].readIfPresent(with: ACMPCAClientTypes.OcspConfiguration.read(from:))
        return value
    }
}

extension ACMPCAClientTypes.OcspConfiguration {

    static func write(value: ACMPCAClientTypes.OcspConfiguration?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Enabled"].write(value.enabled)
        try writer["OcspCustomCname"].write(value.ocspCustomCname)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> ACMPCAClientTypes.OcspConfiguration {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ACMPCAClientTypes.OcspConfiguration()
        value.enabled = try reader["Enabled"].readIfPresent()
        value.ocspCustomCname = try reader["OcspCustomCname"].readIfPresent()
        return value
    }
}

extension ACMPCAClientTypes.CrlConfiguration {

    static func write(value: ACMPCAClientTypes.CrlConfiguration?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["CrlDistributionPointExtensionConfiguration"].write(value.crlDistributionPointExtensionConfiguration, with: ACMPCAClientTypes.CrlDistributionPointExtensionConfiguration.write(value:to:))
        try writer["CustomCname"].write(value.customCname)
        try writer["Enabled"].write(value.enabled)
        try writer["ExpirationInDays"].write(value.expirationInDays)
        try writer["S3BucketName"].write(value.s3BucketName)
        try writer["S3ObjectAcl"].write(value.s3ObjectAcl)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> ACMPCAClientTypes.CrlConfiguration {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ACMPCAClientTypes.CrlConfiguration()
        value.enabled = try reader["Enabled"].readIfPresent()
        value.expirationInDays = try reader["ExpirationInDays"].readIfPresent()
        value.customCname = try reader["CustomCname"].readIfPresent()
        value.s3BucketName = try reader["S3BucketName"].readIfPresent()
        value.s3ObjectAcl = try reader["S3ObjectAcl"].readIfPresent()
        value.crlDistributionPointExtensionConfiguration = try reader["CrlDistributionPointExtensionConfiguration"].readIfPresent(with: ACMPCAClientTypes.CrlDistributionPointExtensionConfiguration.read(from:))
        return value
    }
}

extension ACMPCAClientTypes.CrlDistributionPointExtensionConfiguration {

    static func write(value: ACMPCAClientTypes.CrlDistributionPointExtensionConfiguration?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["OmitExtension"].write(value.omitExtension)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> ACMPCAClientTypes.CrlDistributionPointExtensionConfiguration {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ACMPCAClientTypes.CrlDistributionPointExtensionConfiguration()
        value.omitExtension = try reader["OmitExtension"].readIfPresent()
        return value
    }
}

extension ACMPCAClientTypes.CertificateAuthorityConfiguration {

    static func write(value: ACMPCAClientTypes.CertificateAuthorityConfiguration?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["CsrExtensions"].write(value.csrExtensions, with: ACMPCAClientTypes.CsrExtensions.write(value:to:))
        try writer["KeyAlgorithm"].write(value.keyAlgorithm)
        try writer["SigningAlgorithm"].write(value.signingAlgorithm)
        try writer["Subject"].write(value.subject, with: ACMPCAClientTypes.ASN1Subject.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> ACMPCAClientTypes.CertificateAuthorityConfiguration {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ACMPCAClientTypes.CertificateAuthorityConfiguration()
        value.keyAlgorithm = try reader["KeyAlgorithm"].readIfPresent() ?? .sdkUnknown("")
        value.signingAlgorithm = try reader["SigningAlgorithm"].readIfPresent() ?? .sdkUnknown("")
        value.subject = try reader["Subject"].readIfPresent(with: ACMPCAClientTypes.ASN1Subject.read(from:))
        value.csrExtensions = try reader["CsrExtensions"].readIfPresent(with: ACMPCAClientTypes.CsrExtensions.read(from:))
        return value
    }
}

extension ACMPCAClientTypes.CsrExtensions {

    static func write(value: ACMPCAClientTypes.CsrExtensions?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["KeyUsage"].write(value.keyUsage, with: ACMPCAClientTypes.KeyUsage.write(value:to:))
        try writer["SubjectInformationAccess"].writeList(value.subjectInformationAccess, memberWritingClosure: ACMPCAClientTypes.AccessDescription.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> ACMPCAClientTypes.CsrExtensions {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ACMPCAClientTypes.CsrExtensions()
        value.keyUsage = try reader["KeyUsage"].readIfPresent(with: ACMPCAClientTypes.KeyUsage.read(from:))
        value.subjectInformationAccess = try reader["SubjectInformationAccess"].readListIfPresent(memberReadingClosure: ACMPCAClientTypes.AccessDescription.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension ACMPCAClientTypes.AccessDescription {

    static func write(value: ACMPCAClientTypes.AccessDescription?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["AccessLocation"].write(value.accessLocation, with: ACMPCAClientTypes.GeneralName.write(value:to:))
        try writer["AccessMethod"].write(value.accessMethod, with: ACMPCAClientTypes.AccessMethod.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> ACMPCAClientTypes.AccessDescription {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ACMPCAClientTypes.AccessDescription()
        value.accessMethod = try reader["AccessMethod"].readIfPresent(with: ACMPCAClientTypes.AccessMethod.read(from:))
        value.accessLocation = try reader["AccessLocation"].readIfPresent(with: ACMPCAClientTypes.GeneralName.read(from:))
        return value
    }
}

extension ACMPCAClientTypes.GeneralName {

    static func write(value: ACMPCAClientTypes.GeneralName?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["DirectoryName"].write(value.directoryName, with: ACMPCAClientTypes.ASN1Subject.write(value:to:))
        try writer["DnsName"].write(value.dnsName)
        try writer["EdiPartyName"].write(value.ediPartyName, with: ACMPCAClientTypes.EdiPartyName.write(value:to:))
        try writer["IpAddress"].write(value.ipAddress)
        try writer["OtherName"].write(value.otherName, with: ACMPCAClientTypes.OtherName.write(value:to:))
        try writer["RegisteredId"].write(value.registeredId)
        try writer["Rfc822Name"].write(value.rfc822Name)
        try writer["UniformResourceIdentifier"].write(value.uniformResourceIdentifier)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> ACMPCAClientTypes.GeneralName {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ACMPCAClientTypes.GeneralName()
        value.otherName = try reader["OtherName"].readIfPresent(with: ACMPCAClientTypes.OtherName.read(from:))
        value.rfc822Name = try reader["Rfc822Name"].readIfPresent()
        value.dnsName = try reader["DnsName"].readIfPresent()
        value.directoryName = try reader["DirectoryName"].readIfPresent(with: ACMPCAClientTypes.ASN1Subject.read(from:))
        value.ediPartyName = try reader["EdiPartyName"].readIfPresent(with: ACMPCAClientTypes.EdiPartyName.read(from:))
        value.uniformResourceIdentifier = try reader["UniformResourceIdentifier"].readIfPresent()
        value.ipAddress = try reader["IpAddress"].readIfPresent()
        value.registeredId = try reader["RegisteredId"].readIfPresent()
        return value
    }
}

extension ACMPCAClientTypes.EdiPartyName {

    static func write(value: ACMPCAClientTypes.EdiPartyName?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["NameAssigner"].write(value.nameAssigner)
        try writer["PartyName"].write(value.partyName)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> ACMPCAClientTypes.EdiPartyName {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ACMPCAClientTypes.EdiPartyName()
        value.partyName = try reader["PartyName"].readIfPresent() ?? ""
        value.nameAssigner = try reader["NameAssigner"].readIfPresent()
        return value
    }
}

extension ACMPCAClientTypes.ASN1Subject {

    static func write(value: ACMPCAClientTypes.ASN1Subject?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["CommonName"].write(value.commonName)
        try writer["Country"].write(value.country)
        try writer["CustomAttributes"].writeList(value.customAttributes, memberWritingClosure: ACMPCAClientTypes.CustomAttribute.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["DistinguishedNameQualifier"].write(value.distinguishedNameQualifier)
        try writer["GenerationQualifier"].write(value.generationQualifier)
        try writer["GivenName"].write(value.givenName)
        try writer["Initials"].write(value.initials)
        try writer["Locality"].write(value.locality)
        try writer["Organization"].write(value.organization)
        try writer["OrganizationalUnit"].write(value.organizationalUnit)
        try writer["Pseudonym"].write(value.pseudonym)
        try writer["SerialNumber"].write(value.serialNumber)
        try writer["State"].write(value.state)
        try writer["Surname"].write(value.surname)
        try writer["Title"].write(value.title)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> ACMPCAClientTypes.ASN1Subject {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ACMPCAClientTypes.ASN1Subject()
        value.country = try reader["Country"].readIfPresent()
        value.organization = try reader["Organization"].readIfPresent()
        value.organizationalUnit = try reader["OrganizationalUnit"].readIfPresent()
        value.distinguishedNameQualifier = try reader["DistinguishedNameQualifier"].readIfPresent()
        value.state = try reader["State"].readIfPresent()
        value.commonName = try reader["CommonName"].readIfPresent()
        value.serialNumber = try reader["SerialNumber"].readIfPresent()
        value.locality = try reader["Locality"].readIfPresent()
        value.title = try reader["Title"].readIfPresent()
        value.surname = try reader["Surname"].readIfPresent()
        value.givenName = try reader["GivenName"].readIfPresent()
        value.initials = try reader["Initials"].readIfPresent()
        value.pseudonym = try reader["Pseudonym"].readIfPresent()
        value.generationQualifier = try reader["GenerationQualifier"].readIfPresent()
        value.customAttributes = try reader["CustomAttributes"].readListIfPresent(memberReadingClosure: ACMPCAClientTypes.CustomAttribute.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension ACMPCAClientTypes.CustomAttribute {

    static func write(value: ACMPCAClientTypes.CustomAttribute?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ObjectIdentifier"].write(value.objectIdentifier)
        try writer["Value"].write(value.value)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> ACMPCAClientTypes.CustomAttribute {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ACMPCAClientTypes.CustomAttribute()
        value.objectIdentifier = try reader["ObjectIdentifier"].readIfPresent() ?? ""
        value.value = try reader["Value"].readIfPresent() ?? ""
        return value
    }
}

extension ACMPCAClientTypes.OtherName {

    static func write(value: ACMPCAClientTypes.OtherName?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["TypeId"].write(value.typeId)
        try writer["Value"].write(value.value)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> ACMPCAClientTypes.OtherName {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ACMPCAClientTypes.OtherName()
        value.typeId = try reader["TypeId"].readIfPresent() ?? ""
        value.value = try reader["Value"].readIfPresent() ?? ""
        return value
    }
}

extension ACMPCAClientTypes.AccessMethod {

    static func write(value: ACMPCAClientTypes.AccessMethod?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["AccessMethodType"].write(value.accessMethodType)
        try writer["CustomObjectIdentifier"].write(value.customObjectIdentifier)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> ACMPCAClientTypes.AccessMethod {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ACMPCAClientTypes.AccessMethod()
        value.customObjectIdentifier = try reader["CustomObjectIdentifier"].readIfPresent()
        value.accessMethodType = try reader["AccessMethodType"].readIfPresent()
        return value
    }
}

extension ACMPCAClientTypes.KeyUsage {

    static func write(value: ACMPCAClientTypes.KeyUsage?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["CRLSign"].write(value.crlSign)
        try writer["DataEncipherment"].write(value.dataEncipherment)
        try writer["DecipherOnly"].write(value.decipherOnly)
        try writer["DigitalSignature"].write(value.digitalSignature)
        try writer["EncipherOnly"].write(value.encipherOnly)
        try writer["KeyAgreement"].write(value.keyAgreement)
        try writer["KeyCertSign"].write(value.keyCertSign)
        try writer["KeyEncipherment"].write(value.keyEncipherment)
        try writer["NonRepudiation"].write(value.nonRepudiation)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> ACMPCAClientTypes.KeyUsage {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ACMPCAClientTypes.KeyUsage()
        value.digitalSignature = try reader["DigitalSignature"].readIfPresent() ?? false
        value.nonRepudiation = try reader["NonRepudiation"].readIfPresent() ?? false
        value.keyEncipherment = try reader["KeyEncipherment"].readIfPresent() ?? false
        value.dataEncipherment = try reader["DataEncipherment"].readIfPresent() ?? false
        value.keyAgreement = try reader["KeyAgreement"].readIfPresent() ?? false
        value.keyCertSign = try reader["KeyCertSign"].readIfPresent() ?? false
        value.crlSign = try reader["CRLSign"].readIfPresent() ?? false
        value.encipherOnly = try reader["EncipherOnly"].readIfPresent() ?? false
        value.decipherOnly = try reader["DecipherOnly"].readIfPresent() ?? false
        return value
    }
}

extension ACMPCAClientTypes.Permission {

    static func read(from reader: SmithyJSON.Reader) throws -> ACMPCAClientTypes.Permission {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ACMPCAClientTypes.Permission()
        value.certificateAuthorityArn = try reader["CertificateAuthorityArn"].readIfPresent()
        value.createdAt = try reader["CreatedAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.principal = try reader["Principal"].readIfPresent()
        value.sourceAccount = try reader["SourceAccount"].readIfPresent()
        value.actions = try reader["Actions"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosureBox<ACMPCAClientTypes.ActionType>().read(from:), memberNodeInfo: "member", isFlattened: false)
        value.policy = try reader["Policy"].readIfPresent()
        return value
    }
}

extension ACMPCAClientTypes.Tag {

    static func write(value: ACMPCAClientTypes.Tag?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Key"].write(value.key)
        try writer["Value"].write(value.value)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> ACMPCAClientTypes.Tag {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ACMPCAClientTypes.Tag()
        value.key = try reader["Key"].readIfPresent() ?? ""
        value.value = try reader["Value"].readIfPresent()
        return value
    }
}

extension ACMPCAClientTypes.ApiPassthrough {

    static func write(value: ACMPCAClientTypes.ApiPassthrough?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Extensions"].write(value.extensions, with: ACMPCAClientTypes.Extensions.write(value:to:))
        try writer["Subject"].write(value.subject, with: ACMPCAClientTypes.ASN1Subject.write(value:to:))
    }
}

extension ACMPCAClientTypes.Extensions {

    static func write(value: ACMPCAClientTypes.Extensions?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["CertificatePolicies"].writeList(value.certificatePolicies, memberWritingClosure: ACMPCAClientTypes.PolicyInformation.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["CustomExtensions"].writeList(value.customExtensions, memberWritingClosure: ACMPCAClientTypes.CustomExtension.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["ExtendedKeyUsage"].writeList(value.extendedKeyUsage, memberWritingClosure: ACMPCAClientTypes.ExtendedKeyUsage.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["KeyUsage"].write(value.keyUsage, with: ACMPCAClientTypes.KeyUsage.write(value:to:))
        try writer["SubjectAlternativeNames"].writeList(value.subjectAlternativeNames, memberWritingClosure: ACMPCAClientTypes.GeneralName.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension ACMPCAClientTypes.CustomExtension {

    static func write(value: ACMPCAClientTypes.CustomExtension?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Critical"].write(value.critical)
        try writer["ObjectIdentifier"].write(value.objectIdentifier)
        try writer["Value"].write(value.value)
    }
}

extension ACMPCAClientTypes.ExtendedKeyUsage {

    static func write(value: ACMPCAClientTypes.ExtendedKeyUsage?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ExtendedKeyUsageObjectIdentifier"].write(value.extendedKeyUsageObjectIdentifier)
        try writer["ExtendedKeyUsageType"].write(value.extendedKeyUsageType)
    }
}

extension ACMPCAClientTypes.PolicyInformation {

    static func write(value: ACMPCAClientTypes.PolicyInformation?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["CertPolicyId"].write(value.certPolicyId)
        try writer["PolicyQualifiers"].writeList(value.policyQualifiers, memberWritingClosure: ACMPCAClientTypes.PolicyQualifierInfo.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension ACMPCAClientTypes.PolicyQualifierInfo {

    static func write(value: ACMPCAClientTypes.PolicyQualifierInfo?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["PolicyQualifierId"].write(value.policyQualifierId)
        try writer["Qualifier"].write(value.qualifier, with: ACMPCAClientTypes.Qualifier.write(value:to:))
    }
}

extension ACMPCAClientTypes.Qualifier {

    static func write(value: ACMPCAClientTypes.Qualifier?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["CpsUri"].write(value.cpsUri)
    }
}

extension ACMPCAClientTypes.Validity {

    static func write(value: ACMPCAClientTypes.Validity?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Type"].write(value.type)
        try writer["Value"].write(value.value)
    }
}

public enum ACMPCAClientTypes {}
