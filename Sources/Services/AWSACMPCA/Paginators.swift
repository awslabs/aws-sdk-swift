// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ACMPCAClient {
    /// Paginate over `[ListCertificateAuthoritiesOutput]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[ListCertificateAuthoritiesInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `ListCertificateAuthoritiesOutput`
    public func listCertificateAuthoritiesPaginated(input: ListCertificateAuthoritiesInput) -> ClientRuntime.PaginatorSequence<ListCertificateAuthoritiesInput, ListCertificateAuthoritiesOutput> {
        return ClientRuntime.PaginatorSequence<ListCertificateAuthoritiesInput, ListCertificateAuthoritiesOutput>(input: input, inputKey: \ListCertificateAuthoritiesInput.nextToken, outputKey: \ListCertificateAuthoritiesOutput.nextToken, paginationFunction: self.listCertificateAuthorities(input:))
    }
}

extension ListCertificateAuthoritiesInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListCertificateAuthoritiesInput {
        return ListCertificateAuthoritiesInput(
            maxResults: self.maxResults,
            nextToken: token,
            resourceOwner: self.resourceOwner
        )}
}

extension PaginatorSequence where Input == ListCertificateAuthoritiesInput, Output == ListCertificateAuthoritiesOutput {
    /// This paginator transforms the `AsyncSequence` returned by `listCertificateAuthoritiesPaginated`
    /// to access the nested member `[ACMPCAClientTypes.CertificateAuthority]`
    /// - Returns: `[ACMPCAClientTypes.CertificateAuthority]`
    public func certificateAuthorities() async throws -> [ACMPCAClientTypes.CertificateAuthority] {
        return try await self.asyncCompactMap { item in item.certificateAuthorities }
    }
}
extension ACMPCAClient {
    /// Paginate over `[ListPermissionsOutput]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[ListPermissionsInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `ListPermissionsOutput`
    public func listPermissionsPaginated(input: ListPermissionsInput) -> ClientRuntime.PaginatorSequence<ListPermissionsInput, ListPermissionsOutput> {
        return ClientRuntime.PaginatorSequence<ListPermissionsInput, ListPermissionsOutput>(input: input, inputKey: \ListPermissionsInput.nextToken, outputKey: \ListPermissionsOutput.nextToken, paginationFunction: self.listPermissions(input:))
    }
}

extension ListPermissionsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListPermissionsInput {
        return ListPermissionsInput(
            certificateAuthorityArn: self.certificateAuthorityArn,
            maxResults: self.maxResults,
            nextToken: token
        )}
}

extension PaginatorSequence where Input == ListPermissionsInput, Output == ListPermissionsOutput {
    /// This paginator transforms the `AsyncSequence` returned by `listPermissionsPaginated`
    /// to access the nested member `[ACMPCAClientTypes.Permission]`
    /// - Returns: `[ACMPCAClientTypes.Permission]`
    public func permissions() async throws -> [ACMPCAClientTypes.Permission] {
        return try await self.asyncCompactMap { item in item.permissions }
    }
}
extension ACMPCAClient {
    /// Paginate over `[ListTagsOutput]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[ListTagsInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `ListTagsOutput`
    public func listTagsPaginated(input: ListTagsInput) -> ClientRuntime.PaginatorSequence<ListTagsInput, ListTagsOutput> {
        return ClientRuntime.PaginatorSequence<ListTagsInput, ListTagsOutput>(input: input, inputKey: \ListTagsInput.nextToken, outputKey: \ListTagsOutput.nextToken, paginationFunction: self.listTags(input:))
    }
}

extension ListTagsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListTagsInput {
        return ListTagsInput(
            certificateAuthorityArn: self.certificateAuthorityArn,
            maxResults: self.maxResults,
            nextToken: token
        )}
}

extension PaginatorSequence where Input == ListTagsInput, Output == ListTagsOutput {
    /// This paginator transforms the `AsyncSequence` returned by `listTagsPaginated`
    /// to access the nested member `[ACMPCAClientTypes.Tag]`
    /// - Returns: `[ACMPCAClientTypes.Tag]`
    public func tags() async throws -> [ACMPCAClientTypes.Tag] {
        return try await self.asyncCompactMap { item in item.tags }
    }
}
