// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension OAMClient {
    /// Paginate over `[ListAttachedLinksOutput]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[ListAttachedLinksInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `ListAttachedLinksOutput`
    public func listAttachedLinksPaginated(input: ListAttachedLinksInput) -> ClientRuntime.PaginatorSequence<ListAttachedLinksInput, ListAttachedLinksOutput> {
<<<<<<< HEAD
        return ClientRuntime.PaginatorSequence<ListAttachedLinksInput, ListAttachedLinksOutput>(input: input, inputKey: \ListAttachedLinksInput.nextToken, outputKey: \ListAttachedLinksOutput.nextToken, paginationFunction: self.listAttachedLinks(input:))
=======
        return ClientRuntime.PaginatorSequence<ListAttachedLinksInput, ListAttachedLinksOutput>(input: input, inputKey: \.nextToken, outputKey: \.nextToken, paginationFunction: self.listAttachedLinks(input:))
>>>>>>> main
    }
}

extension ListAttachedLinksInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListAttachedLinksInput {
        return ListAttachedLinksInput(
            maxResults: self.maxResults,
            nextToken: token,
            sinkIdentifier: self.sinkIdentifier
        )}
}

<<<<<<< HEAD
extension PaginatorSequence where Input == ListAttachedLinksInput, Output == ListAttachedLinksOutput {
=======
extension PaginatorSequence where OperationStackInput == ListAttachedLinksInput, OperationStackOutput == ListAttachedLinksOutput {
>>>>>>> main
    /// This paginator transforms the `AsyncSequence` returned by `listAttachedLinksPaginated`
    /// to access the nested member `[OAMClientTypes.ListAttachedLinksItem]`
    /// - Returns: `[OAMClientTypes.ListAttachedLinksItem]`
    public func items() async throws -> [OAMClientTypes.ListAttachedLinksItem] {
        return try await self.asyncCompactMap { item in item.items }
    }
}
extension OAMClient {
    /// Paginate over `[ListLinksOutput]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[ListLinksInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `ListLinksOutput`
    public func listLinksPaginated(input: ListLinksInput) -> ClientRuntime.PaginatorSequence<ListLinksInput, ListLinksOutput> {
<<<<<<< HEAD
        return ClientRuntime.PaginatorSequence<ListLinksInput, ListLinksOutput>(input: input, inputKey: \ListLinksInput.nextToken, outputKey: \ListLinksOutput.nextToken, paginationFunction: self.listLinks(input:))
=======
        return ClientRuntime.PaginatorSequence<ListLinksInput, ListLinksOutput>(input: input, inputKey: \.nextToken, outputKey: \.nextToken, paginationFunction: self.listLinks(input:))
>>>>>>> main
    }
}

extension ListLinksInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListLinksInput {
        return ListLinksInput(
            maxResults: self.maxResults,
            nextToken: token
        )}
}

<<<<<<< HEAD
extension PaginatorSequence where Input == ListLinksInput, Output == ListLinksOutput {
=======
extension PaginatorSequence where OperationStackInput == ListLinksInput, OperationStackOutput == ListLinksOutput {
>>>>>>> main
    /// This paginator transforms the `AsyncSequence` returned by `listLinksPaginated`
    /// to access the nested member `[OAMClientTypes.ListLinksItem]`
    /// - Returns: `[OAMClientTypes.ListLinksItem]`
    public func items() async throws -> [OAMClientTypes.ListLinksItem] {
        return try await self.asyncCompactMap { item in item.items }
    }
}
extension OAMClient {
    /// Paginate over `[ListSinksOutput]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[ListSinksInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `ListSinksOutput`
    public func listSinksPaginated(input: ListSinksInput) -> ClientRuntime.PaginatorSequence<ListSinksInput, ListSinksOutput> {
<<<<<<< HEAD
        return ClientRuntime.PaginatorSequence<ListSinksInput, ListSinksOutput>(input: input, inputKey: \ListSinksInput.nextToken, outputKey: \ListSinksOutput.nextToken, paginationFunction: self.listSinks(input:))
=======
        return ClientRuntime.PaginatorSequence<ListSinksInput, ListSinksOutput>(input: input, inputKey: \.nextToken, outputKey: \.nextToken, paginationFunction: self.listSinks(input:))
>>>>>>> main
    }
}

extension ListSinksInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListSinksInput {
        return ListSinksInput(
            maxResults: self.maxResults,
            nextToken: token
        )}
}

<<<<<<< HEAD
extension PaginatorSequence where Input == ListSinksInput, Output == ListSinksOutput {
=======
extension PaginatorSequence where OperationStackInput == ListSinksInput, OperationStackOutput == ListSinksOutput {
>>>>>>> main
    /// This paginator transforms the `AsyncSequence` returned by `listSinksPaginated`
    /// to access the nested member `[OAMClientTypes.ListSinksItem]`
    /// - Returns: `[OAMClientTypes.ListSinksItem]`
    public func items() async throws -> [OAMClientTypes.ListSinksItem] {
        return try await self.asyncCompactMap { item in item.items }
    }
}
