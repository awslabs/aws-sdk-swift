//
// Copyright Amazon.com Inc. or its affiliates.
// All Rights Reserved.
//
// SPDX-License-Identifier: Apache-2.0
//

// Code generated by smithy-swift-codegen. DO NOT EDIT!

import Foundation
import class AWSClientRuntime.AWSClientConfigDefaultsProvider
import class AWSClientRuntime.AmzSdkRequestMiddleware
import class AWSClientRuntime.DefaultAWSClientPlugin
import class AWSSDKIdentity.DefaultAWSCredentialIdentityResolverChain
import class ClientRuntime.ClientBuilder
import class ClientRuntime.DefaultClientPlugin
import class ClientRuntime.HttpClientConfiguration
import class ClientRuntime.OrchestratorBuilder
import class ClientRuntime.OrchestratorTelemetry
import class ClientRuntime.SdkHttpClient
import class Smithy.Context
import class Smithy.ContextBuilder
@_spi(SmithyReadWrite) import class SmithyCBOR.Writer
import class SmithyHTTPAPI.HTTPRequest
import class SmithyHTTPAPI.HTTPResponse
import enum AWSClientRuntime.AWSRetryMode
import enum AWSSDKChecksums.AWSChecksumCalculationMode
import enum ClientRuntime.ClientLogMode
import enum ClientRuntime.DefaultClockSkewProvider
import enum ClientRuntime.DefaultRetryErrorInfoProvider
import enum ClientRuntime.DefaultTelemetry
import enum ClientRuntime.OrchestratorMetricsAttributesKeys
import protocol AWSClientRuntime.AWSDefaultClientConfiguration
import protocol AWSClientRuntime.AWSRegionClientConfiguration
import protocol ClientRuntime.Client
import protocol ClientRuntime.DefaultClientConfiguration
import protocol ClientRuntime.DefaultHttpClientConfiguration
import protocol ClientRuntime.HttpInterceptorProvider
import protocol ClientRuntime.IdempotencyTokenGenerator
import protocol ClientRuntime.InterceptorProvider
import protocol ClientRuntime.TelemetryProvider
import protocol Smithy.LogAgent
import protocol SmithyHTTPAPI.HTTPClient
import protocol SmithyHTTPAuthAPI.AuthSchemeResolver
@_spi(AWSCredentialIdentityResolver) import protocol SmithyIdentity.AWSCredentialIdentityResolver
import protocol SmithyIdentity.BearerTokenIdentityResolver
@_spi(SmithyReadWrite) import protocol SmithyReadWrite.SmithyWriter
@_spi(AWSEndpointResolverMiddleware) import struct AWSClientRuntime.AWSEndpointResolverMiddleware
import struct AWSClientRuntime.AmzSdkInvocationIdMiddleware
import struct AWSClientRuntime.UserAgentMiddleware
import struct AWSSDKHTTPAuth.SigV4AuthScheme
import struct ClientRuntime.AuthSchemeMiddleware
@_spi(SmithyReadWrite) import struct ClientRuntime.BodyMiddleware
import struct ClientRuntime.CborValidateResponseHeaderMiddleware
import struct ClientRuntime.ContentLengthMiddleware
import struct ClientRuntime.ContentTypeMiddleware
@_spi(SmithyReadWrite) import struct ClientRuntime.DeserializeMiddleware
import struct ClientRuntime.LoggerMiddleware
import struct ClientRuntime.MutateHeadersMiddleware
import struct ClientRuntime.SignerMiddleware
import struct ClientRuntime.URLHostMiddleware
import struct ClientRuntime.URLPathMiddleware
import struct Smithy.Attributes
import struct SmithyIdentity.BearerTokenIdentity
@_spi(StaticBearerTokenIdentityResolver) import struct SmithyIdentity.StaticBearerTokenIdentityResolver
import struct SmithyRetries.DefaultRetryStrategy
import struct SmithyRetriesAPI.RetryStrategyOptions
import typealias SmithyHTTPAuthAPI.AuthSchemes

public class ARCRegionswitchClient: ClientRuntime.Client {
    public static let clientName = "ARCRegionswitchClient"
    public static let version = "1.5.55"
    let client: ClientRuntime.SdkHttpClient
    let config: ARCRegionswitchClient.ARCRegionswitchClientConfiguration
    let serviceName = "ARC Region switch"

    public required init(config: ARCRegionswitchClient.ARCRegionswitchClientConfiguration) {
        client = ClientRuntime.SdkHttpClient(engine: config.httpClientEngine, config: config.httpClientConfiguration)
        self.config = config
    }

    public convenience init(region: Swift.String) throws {
        let config = try ARCRegionswitchClient.ARCRegionswitchClientConfiguration(region: region)
        self.init(config: config)
    }

    public convenience required init() async throws {
        let config = try await ARCRegionswitchClient.ARCRegionswitchClientConfiguration()
        self.init(config: config)
    }
}

extension ARCRegionswitchClient {

    public class ARCRegionswitchClientConfiguration: AWSClientRuntime.AWSDefaultClientConfiguration & AWSClientRuntime.AWSRegionClientConfiguration & ClientRuntime.DefaultClientConfiguration & ClientRuntime.DefaultHttpClientConfiguration {
        public var useFIPS: Swift.Bool?
        public var useDualStack: Swift.Bool?
        public var appID: Swift.String?
        public var awsCredentialIdentityResolver: any SmithyIdentity.AWSCredentialIdentityResolver
        public var awsRetryMode: AWSClientRuntime.AWSRetryMode
        public var maxAttempts: Swift.Int?
        public var requestChecksumCalculation: AWSSDKChecksums.AWSChecksumCalculationMode
        public var responseChecksumValidation: AWSSDKChecksums.AWSChecksumCalculationMode
        public var ignoreConfiguredEndpointURLs: Swift.Bool?
        public var region: Swift.String?
        public var signingRegion: Swift.String?
        public var endpointResolver: EndpointResolver
        public var telemetryProvider: ClientRuntime.TelemetryProvider
        public var retryStrategyOptions: SmithyRetriesAPI.RetryStrategyOptions
        public var clientLogMode: ClientRuntime.ClientLogMode
        public var endpoint: Swift.String?
        public var idempotencyTokenGenerator: ClientRuntime.IdempotencyTokenGenerator
        public var httpClientEngine: SmithyHTTPAPI.HTTPClient
        public var httpClientConfiguration: ClientRuntime.HttpClientConfiguration
        public var authSchemes: SmithyHTTPAuthAPI.AuthSchemes?
        public var authSchemePreference: [String]?
        public var authSchemeResolver: SmithyHTTPAuthAPI.AuthSchemeResolver
        public var bearerTokenIdentityResolver: any SmithyIdentity.BearerTokenIdentityResolver
        public private(set) var interceptorProviders: [ClientRuntime.InterceptorProvider]
        public private(set) var httpInterceptorProviders: [ClientRuntime.HttpInterceptorProvider]
        public let logger: Smithy.LogAgent

        private init(
            _ useFIPS: Swift.Bool?,
            _ useDualStack: Swift.Bool?,
            _ appID: Swift.String?,
            _ awsCredentialIdentityResolver: any SmithyIdentity.AWSCredentialIdentityResolver,
            _ awsRetryMode: AWSClientRuntime.AWSRetryMode,
            _ maxAttempts: Swift.Int?,
            _ requestChecksumCalculation: AWSSDKChecksums.AWSChecksumCalculationMode,
            _ responseChecksumValidation: AWSSDKChecksums.AWSChecksumCalculationMode,
            _ ignoreConfiguredEndpointURLs: Swift.Bool?,
            _ region: Swift.String?,
            _ signingRegion: Swift.String?,
            _ endpointResolver: EndpointResolver,
            _ telemetryProvider: ClientRuntime.TelemetryProvider,
            _ retryStrategyOptions: SmithyRetriesAPI.RetryStrategyOptions,
            _ clientLogMode: ClientRuntime.ClientLogMode,
            _ endpoint: Swift.String?,
            _ idempotencyTokenGenerator: ClientRuntime.IdempotencyTokenGenerator,
            _ httpClientEngine: SmithyHTTPAPI.HTTPClient,
            _ httpClientConfiguration: ClientRuntime.HttpClientConfiguration,
            _ authSchemes: SmithyHTTPAuthAPI.AuthSchemes?,
            _ authSchemePreference: [String]?,
            _ authSchemeResolver: SmithyHTTPAuthAPI.AuthSchemeResolver,
            _ bearerTokenIdentityResolver: any SmithyIdentity.BearerTokenIdentityResolver,
            _ interceptorProviders: [ClientRuntime.InterceptorProvider],
            _ httpInterceptorProviders: [ClientRuntime.HttpInterceptorProvider]
        ) {
            self.useFIPS = useFIPS
            self.useDualStack = useDualStack
            self.appID = appID
            self.awsCredentialIdentityResolver = awsCredentialIdentityResolver
            self.awsRetryMode = awsRetryMode
            self.maxAttempts = maxAttempts
            self.requestChecksumCalculation = requestChecksumCalculation
            self.responseChecksumValidation = responseChecksumValidation
            self.ignoreConfiguredEndpointURLs = ignoreConfiguredEndpointURLs
            self.region = region
            self.signingRegion = signingRegion
            self.endpointResolver = endpointResolver
            self.telemetryProvider = telemetryProvider
            self.retryStrategyOptions = retryStrategyOptions
            self.clientLogMode = clientLogMode
            self.endpoint = endpoint
            self.idempotencyTokenGenerator = idempotencyTokenGenerator
            self.httpClientEngine = httpClientEngine
            self.httpClientConfiguration = httpClientConfiguration
            self.authSchemes = authSchemes
            self.authSchemePreference = authSchemePreference
            self.authSchemeResolver = authSchemeResolver
            self.bearerTokenIdentityResolver = bearerTokenIdentityResolver
            self.interceptorProviders = interceptorProviders
            self.httpInterceptorProviders = httpInterceptorProviders
            self.logger = telemetryProvider.loggerProvider.getLogger(name: ARCRegionswitchClient.clientName)
        }

        public convenience init(
            useFIPS: Swift.Bool? = nil,
            useDualStack: Swift.Bool? = nil,
            appID: Swift.String? = nil,
            awsCredentialIdentityResolver: (any SmithyIdentity.AWSCredentialIdentityResolver)? = nil,
            awsRetryMode: AWSClientRuntime.AWSRetryMode? = nil,
            maxAttempts: Swift.Int? = nil,
            requestChecksumCalculation: AWSSDKChecksums.AWSChecksumCalculationMode? = nil,
            responseChecksumValidation: AWSSDKChecksums.AWSChecksumCalculationMode? = nil,
            ignoreConfiguredEndpointURLs: Swift.Bool? = nil,
            region: Swift.String? = nil,
            signingRegion: Swift.String? = nil,
            endpointResolver: EndpointResolver? = nil,
            telemetryProvider: ClientRuntime.TelemetryProvider? = nil,
            retryStrategyOptions: SmithyRetriesAPI.RetryStrategyOptions? = nil,
            clientLogMode: ClientRuntime.ClientLogMode? = nil,
            endpoint: Swift.String? = nil,
            idempotencyTokenGenerator: ClientRuntime.IdempotencyTokenGenerator? = nil,
            httpClientEngine: SmithyHTTPAPI.HTTPClient? = nil,
            httpClientConfiguration: ClientRuntime.HttpClientConfiguration? = nil,
            authSchemes: SmithyHTTPAuthAPI.AuthSchemes? = nil,
            authSchemePreference: [String]? = nil,
            authSchemeResolver: SmithyHTTPAuthAPI.AuthSchemeResolver? = nil,
            bearerTokenIdentityResolver: (any SmithyIdentity.BearerTokenIdentityResolver)? = nil,
            interceptorProviders: [ClientRuntime.InterceptorProvider]? = nil,
            httpInterceptorProviders: [ClientRuntime.HttpInterceptorProvider]? = nil
        ) throws {
            self.init(
                useFIPS,
                useDualStack,
                try appID ?? AWSClientRuntime.AWSClientConfigDefaultsProvider.appID(),
                awsCredentialIdentityResolver ?? AWSSDKIdentity.DefaultAWSCredentialIdentityResolverChain(),
                try awsRetryMode ?? AWSClientRuntime.AWSClientConfigDefaultsProvider.retryMode(),
                maxAttempts,
                try requestChecksumCalculation ?? AWSClientRuntime.AWSClientConfigDefaultsProvider.requestChecksumCalculation(requestChecksumCalculation),
                try responseChecksumValidation ?? AWSClientRuntime.AWSClientConfigDefaultsProvider.responseChecksumValidation(responseChecksumValidation),
                ignoreConfiguredEndpointURLs,
                region,
                signingRegion,
                try endpointResolver ?? DefaultEndpointResolver(),
                telemetryProvider ?? ClientRuntime.DefaultTelemetry.provider,
                try retryStrategyOptions ?? AWSClientConfigDefaultsProvider.retryStrategyOptions(awsRetryMode, maxAttempts),
                clientLogMode ?? AWSClientConfigDefaultsProvider.clientLogMode(),
                endpoint,
                idempotencyTokenGenerator ?? AWSClientConfigDefaultsProvider.idempotencyTokenGenerator(),
                httpClientEngine ?? AWSClientConfigDefaultsProvider.httpClientEngine(httpClientConfiguration),
                httpClientConfiguration ?? AWSClientConfigDefaultsProvider.httpClientConfiguration(),
                authSchemes ?? [AWSSDKHTTPAuth.SigV4AuthScheme()],
                authSchemePreference ?? nil,
                authSchemeResolver ?? DefaultARCRegionswitchAuthSchemeResolver(),
                bearerTokenIdentityResolver ?? SmithyIdentity.StaticBearerTokenIdentityResolver(token: SmithyIdentity.BearerTokenIdentity(token: "")),
                interceptorProviders ?? [],
                httpInterceptorProviders ?? []
            )
        }

        public convenience init(
            useFIPS: Swift.Bool? = nil,
            useDualStack: Swift.Bool? = nil,
            appID: Swift.String? = nil,
            awsCredentialIdentityResolver: (any SmithyIdentity.AWSCredentialIdentityResolver)? = nil,
            awsRetryMode: AWSClientRuntime.AWSRetryMode? = nil,
            maxAttempts: Swift.Int? = nil,
            requestChecksumCalculation: AWSSDKChecksums.AWSChecksumCalculationMode? = nil,
            responseChecksumValidation: AWSSDKChecksums.AWSChecksumCalculationMode? = nil,
            ignoreConfiguredEndpointURLs: Swift.Bool? = nil,
            region: Swift.String? = nil,
            signingRegion: Swift.String? = nil,
            endpointResolver: EndpointResolver? = nil,
            telemetryProvider: ClientRuntime.TelemetryProvider? = nil,
            retryStrategyOptions: SmithyRetriesAPI.RetryStrategyOptions? = nil,
            clientLogMode: ClientRuntime.ClientLogMode? = nil,
            endpoint: Swift.String? = nil,
            idempotencyTokenGenerator: ClientRuntime.IdempotencyTokenGenerator? = nil,
            httpClientEngine: SmithyHTTPAPI.HTTPClient? = nil,
            httpClientConfiguration: ClientRuntime.HttpClientConfiguration? = nil,
            authSchemes: SmithyHTTPAuthAPI.AuthSchemes? = nil,
            authSchemePreference: [String]? = nil,
            authSchemeResolver: SmithyHTTPAuthAPI.AuthSchemeResolver? = nil,
            bearerTokenIdentityResolver: (any SmithyIdentity.BearerTokenIdentityResolver)? = nil,
            interceptorProviders: [ClientRuntime.InterceptorProvider]? = nil,
            httpInterceptorProviders: [ClientRuntime.HttpInterceptorProvider]? = nil
        ) async throws {
            self.init(
                useFIPS,
                useDualStack,
                try appID ?? AWSClientRuntime.AWSClientConfigDefaultsProvider.appID(),
                awsCredentialIdentityResolver ?? AWSSDKIdentity.DefaultAWSCredentialIdentityResolverChain(),
                try awsRetryMode ?? AWSClientRuntime.AWSClientConfigDefaultsProvider.retryMode(),
                maxAttempts,
                try requestChecksumCalculation ?? AWSClientRuntime.AWSClientConfigDefaultsProvider.requestChecksumCalculation(requestChecksumCalculation),
                try responseChecksumValidation ?? AWSClientRuntime.AWSClientConfigDefaultsProvider.responseChecksumValidation(responseChecksumValidation),
                ignoreConfiguredEndpointURLs,
                try await AWSClientRuntime.AWSClientConfigDefaultsProvider.region(region),
                try await AWSClientRuntime.AWSClientConfigDefaultsProvider.region(region),
                try endpointResolver ?? DefaultEndpointResolver(),
                telemetryProvider ?? ClientRuntime.DefaultTelemetry.provider,
                try retryStrategyOptions ?? AWSClientConfigDefaultsProvider.retryStrategyOptions(awsRetryMode, maxAttempts),
                clientLogMode ?? AWSClientConfigDefaultsProvider.clientLogMode(),
                endpoint,
                idempotencyTokenGenerator ?? AWSClientConfigDefaultsProvider.idempotencyTokenGenerator(),
                httpClientEngine ?? AWSClientConfigDefaultsProvider.httpClientEngine(httpClientConfiguration),
                httpClientConfiguration ?? AWSClientConfigDefaultsProvider.httpClientConfiguration(),
                authSchemes ?? [AWSSDKHTTPAuth.SigV4AuthScheme()],
                authSchemePreference ?? nil,
                authSchemeResolver ?? DefaultARCRegionswitchAuthSchemeResolver(),
                bearerTokenIdentityResolver ?? SmithyIdentity.StaticBearerTokenIdentityResolver(token: SmithyIdentity.BearerTokenIdentity(token: "")),
                interceptorProviders ?? [],
                httpInterceptorProviders ?? []
            )
        }

        public convenience required init() async throws {
            try await self.init(
                useFIPS: nil,
                useDualStack: nil,
                appID: nil,
                awsCredentialIdentityResolver: nil,
                awsRetryMode: nil,
                maxAttempts: nil,
                requestChecksumCalculation: nil,
                responseChecksumValidation: nil,
                ignoreConfiguredEndpointURLs: nil,
                region: nil,
                signingRegion: nil,
                endpointResolver: nil,
                telemetryProvider: nil,
                retryStrategyOptions: nil,
                clientLogMode: nil,
                endpoint: nil,
                idempotencyTokenGenerator: nil,
                httpClientEngine: nil,
                httpClientConfiguration: nil,
                authSchemes: nil,
                authSchemePreference: nil,
                authSchemeResolver: nil,
                bearerTokenIdentityResolver: nil,
                interceptorProviders: nil,
                httpInterceptorProviders: nil
            )
        }

        public convenience init(region: Swift.String) throws {
            self.init(
                nil,
                nil,
                try AWSClientRuntime.AWSClientConfigDefaultsProvider.appID(),
                AWSSDKIdentity.DefaultAWSCredentialIdentityResolverChain(),
                try AWSClientRuntime.AWSClientConfigDefaultsProvider.retryMode(),
                nil,
                try AWSClientConfigDefaultsProvider.requestChecksumCalculation(),
                try AWSClientConfigDefaultsProvider.responseChecksumValidation(),
                nil,
                region,
                region,
                try DefaultEndpointResolver(),
                ClientRuntime.DefaultTelemetry.provider,
                try AWSClientConfigDefaultsProvider.retryStrategyOptions(),
                AWSClientConfigDefaultsProvider.clientLogMode(),
                nil,
                AWSClientConfigDefaultsProvider.idempotencyTokenGenerator(),
                AWSClientConfigDefaultsProvider.httpClientEngine(),
                AWSClientConfigDefaultsProvider.httpClientConfiguration(),
                [AWSSDKHTTPAuth.SigV4AuthScheme()],
                nil,
                DefaultARCRegionswitchAuthSchemeResolver(),
                SmithyIdentity.StaticBearerTokenIdentityResolver(token: SmithyIdentity.BearerTokenIdentity(token: "")),
                [],
                []
            )
        }

        public var partitionID: String? {
            return "\(ARCRegionswitchClient.clientName) - \(region ?? "")"
        }

        public func addInterceptorProvider(_ provider: ClientRuntime.InterceptorProvider) {
            self.interceptorProviders.append(provider)
        }

        public func addInterceptorProvider(_ provider: ClientRuntime.HttpInterceptorProvider) {
            self.httpInterceptorProviders.append(provider)
        }

    }

    public static func builder() -> ClientRuntime.ClientBuilder<ARCRegionswitchClient> {
        return ClientRuntime.ClientBuilder<ARCRegionswitchClient>(defaultPlugins: [
            ClientRuntime.DefaultClientPlugin(),
            AWSClientRuntime.DefaultAWSClientPlugin(clientName: self.clientName),
            DefaultAWSAuthSchemePlugin()
        ])
    }
}

extension ARCRegionswitchClient {
    /// Performs the `ApprovePlanExecutionStep` operation on the `ARCRegionswitch` service.
    ///
    /// Approves a step in a plan execution that requires manual approval. When you create a plan, you can include approval steps that require manual intervention before the execution can proceed. This operation allows you to provide that approval. You must specify the plan ARN, execution ID, step name, and approval status. You can also provide an optional comment explaining the approval decision.
    ///
    /// - Parameter ApprovePlanExecutionStepInput : [no documentation found]
    ///
    /// - Returns: `ApprovePlanExecutionStepOutput` : [no documentation found]
    ///
    /// - Throws: One of the exceptions listed below __Possible Exceptions__.
    ///
    /// __Possible Exceptions:__
    /// - `AccessDeniedException` : You do not have sufficient access to perform this action. HTTP Status Code: 403
    /// - `ResourceNotFoundException` : The specified resource was not found. HTTP Status Code: 404
    public func approvePlanExecutionStep(input: ApprovePlanExecutionStepInput) async throws -> ApprovePlanExecutionStepOutput {
        let context = Smithy.ContextBuilder()
                      .withMethod(value: .post)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "approvePlanExecutionStep")
                      .withUnsignedPayloadTrait(value: false)
                      .withSmithyDefaultConfig(config)
                      .withIdentityResolver(value: config.awsCredentialIdentityResolver, schemeID: "aws.auth#sigv4a")
                      .withRegion(value: config.region)
                      .withRequestChecksumCalculation(value: config.requestChecksumCalculation)
                      .withResponseChecksumValidation(value: config.responseChecksumValidation)
                      .withSigningName(value: "arc-region-switch")
                      .withSigningRegion(value: config.signingRegion)
                      .build()
        let builder = ClientRuntime.OrchestratorBuilder<ApprovePlanExecutionStepInput, ApprovePlanExecutionStepOutput, SmithyHTTPAPI.HTTPRequest, SmithyHTTPAPI.HTTPResponse>()
        config.interceptorProviders.forEach { provider in
            builder.interceptors.add(provider.create())
        }
        config.httpInterceptorProviders.forEach { provider in
            builder.interceptors.add(provider.create())
        }
        builder.interceptors.add(ClientRuntime.URLPathMiddleware<ApprovePlanExecutionStepInput, ApprovePlanExecutionStepOutput>(ApprovePlanExecutionStepInput.urlPathProvider(_:)))
        builder.interceptors.add(ClientRuntime.URLHostMiddleware<ApprovePlanExecutionStepInput, ApprovePlanExecutionStepOutput>())
        builder.interceptors.add(ClientRuntime.ContentTypeMiddleware<ApprovePlanExecutionStepInput, ApprovePlanExecutionStepOutput>(contentType: "application/cbor"))
        builder.interceptors.add(ClientRuntime.ContentLengthMiddleware<ApprovePlanExecutionStepInput, ApprovePlanExecutionStepOutput>())
        builder.deserialize(ClientRuntime.DeserializeMiddleware<ApprovePlanExecutionStepOutput>(ApprovePlanExecutionStepOutput.httpOutput(from:), ApprovePlanExecutionStepOutputError.httpError(from:)))
        builder.interceptors.add(ClientRuntime.LoggerMiddleware<ApprovePlanExecutionStepInput, ApprovePlanExecutionStepOutput>(clientLogMode: config.clientLogMode))
        builder.clockSkewProvider(ClientRuntime.DefaultClockSkewProvider.provider())
        builder.retryStrategy(SmithyRetries.DefaultRetryStrategy(options: config.retryStrategyOptions))
        builder.retryErrorInfoProvider(ClientRuntime.DefaultRetryErrorInfoProvider.errorInfo(for:))
        builder.applySigner(ClientRuntime.SignerMiddleware<ApprovePlanExecutionStepOutput>())
        let configuredEndpoint = try config.endpoint ?? AWSClientRuntime.AWSClientConfigDefaultsProvider.configuredEndpoint("ARC Region switch", config.ignoreConfiguredEndpointURLs)
        let endpointParamsBlock = { [config] (context: Smithy.Context) in
            EndpointParams(endpoint: configuredEndpoint, region: config.region, useFIPS: config.useFIPS ?? false)
        }
        builder.applyEndpoint(AWSClientRuntime.AWSEndpointResolverMiddleware<ApprovePlanExecutionStepOutput, EndpointParams>(paramsBlock: endpointParamsBlock, resolverBlock: { [config] in try config.endpointResolver.resolve(params: $0) }))
        builder.serialize(ClientRuntime.BodyMiddleware<ApprovePlanExecutionStepInput, ApprovePlanExecutionStepOutput, SmithyCBOR.Writer>(rootNodeInfo: "", inputWritingClosure: ApprovePlanExecutionStepInput.write(value:to:)))
        builder.interceptors.add(ClientRuntime.MutateHeadersMiddleware<ApprovePlanExecutionStepInput, ApprovePlanExecutionStepOutput>(overrides: ["smithy-protocol": "rpc-v2-cbor", "Accept": "application/cbor"]))
        builder.interceptors.add(ClientRuntime.CborValidateResponseHeaderMiddleware<ApprovePlanExecutionStepInput, ApprovePlanExecutionStepOutput>())
        builder.interceptors.add(ClientRuntime.ContentTypeMiddleware<ApprovePlanExecutionStepInput, ApprovePlanExecutionStepOutput>(contentType: "application/cbor"))
        builder.interceptors.add(ClientRuntime.ContentLengthMiddleware<ApprovePlanExecutionStepInput, ApprovePlanExecutionStepOutput>())
        builder.selectAuthScheme(ClientRuntime.AuthSchemeMiddleware<ApprovePlanExecutionStepOutput>())
        builder.interceptors.add(AWSClientRuntime.AmzSdkInvocationIdMiddleware<ApprovePlanExecutionStepInput, ApprovePlanExecutionStepOutput>())
        builder.interceptors.add(AWSClientRuntime.AmzSdkRequestMiddleware<ApprovePlanExecutionStepInput, ApprovePlanExecutionStepOutput>(maxRetries: config.retryStrategyOptions.maxRetriesBase))
        builder.interceptors.add(AWSClientRuntime.UserAgentMiddleware<ApprovePlanExecutionStepInput, ApprovePlanExecutionStepOutput>(serviceID: serviceName, version: ARCRegionswitchClient.version, config: config))
        var metricsAttributes = Smithy.Attributes()
        metricsAttributes.set(key: ClientRuntime.OrchestratorMetricsAttributesKeys.service, value: "ARCRegionswitch")
        metricsAttributes.set(key: ClientRuntime.OrchestratorMetricsAttributesKeys.method, value: "ApprovePlanExecutionStep")
        let op = builder.attributes(context)
            .telemetry(ClientRuntime.OrchestratorTelemetry(
                telemetryProvider: config.telemetryProvider,
                metricsAttributes: metricsAttributes,
                meterScope: serviceName,
                tracerScope: serviceName
            ))
            .executeRequest(client)
            .build()
        return try await op.execute(input: input)
    }

    /// Performs the `CancelPlanExecution` operation on the `ARCRegionswitch` service.
    ///
    /// Cancels an in-progress plan execution. This operation stops the execution of the plan and prevents any further steps from being processed. You must specify the plan ARN and execution ID. You can also provide an optional comment explaining why the execution was canceled.
    ///
    /// - Parameter CancelPlanExecutionInput : [no documentation found]
    ///
    /// - Returns: `CancelPlanExecutionOutput` : [no documentation found]
    ///
    /// - Throws: One of the exceptions listed below __Possible Exceptions__.
    ///
    /// __Possible Exceptions:__
    /// - `AccessDeniedException` : You do not have sufficient access to perform this action. HTTP Status Code: 403
    /// - `ResourceNotFoundException` : The specified resource was not found. HTTP Status Code: 404
    public func cancelPlanExecution(input: CancelPlanExecutionInput) async throws -> CancelPlanExecutionOutput {
        let context = Smithy.ContextBuilder()
                      .withMethod(value: .post)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "cancelPlanExecution")
                      .withUnsignedPayloadTrait(value: false)
                      .withSmithyDefaultConfig(config)
                      .withIdentityResolver(value: config.awsCredentialIdentityResolver, schemeID: "aws.auth#sigv4a")
                      .withRegion(value: config.region)
                      .withRequestChecksumCalculation(value: config.requestChecksumCalculation)
                      .withResponseChecksumValidation(value: config.responseChecksumValidation)
                      .withSigningName(value: "arc-region-switch")
                      .withSigningRegion(value: config.signingRegion)
                      .build()
        let builder = ClientRuntime.OrchestratorBuilder<CancelPlanExecutionInput, CancelPlanExecutionOutput, SmithyHTTPAPI.HTTPRequest, SmithyHTTPAPI.HTTPResponse>()
        config.interceptorProviders.forEach { provider in
            builder.interceptors.add(provider.create())
        }
        config.httpInterceptorProviders.forEach { provider in
            builder.interceptors.add(provider.create())
        }
        builder.interceptors.add(ClientRuntime.URLPathMiddleware<CancelPlanExecutionInput, CancelPlanExecutionOutput>(CancelPlanExecutionInput.urlPathProvider(_:)))
        builder.interceptors.add(ClientRuntime.URLHostMiddleware<CancelPlanExecutionInput, CancelPlanExecutionOutput>())
        builder.interceptors.add(ClientRuntime.ContentTypeMiddleware<CancelPlanExecutionInput, CancelPlanExecutionOutput>(contentType: "application/cbor"))
        builder.interceptors.add(ClientRuntime.ContentLengthMiddleware<CancelPlanExecutionInput, CancelPlanExecutionOutput>())
        builder.deserialize(ClientRuntime.DeserializeMiddleware<CancelPlanExecutionOutput>(CancelPlanExecutionOutput.httpOutput(from:), CancelPlanExecutionOutputError.httpError(from:)))
        builder.interceptors.add(ClientRuntime.LoggerMiddleware<CancelPlanExecutionInput, CancelPlanExecutionOutput>(clientLogMode: config.clientLogMode))
        builder.clockSkewProvider(ClientRuntime.DefaultClockSkewProvider.provider())
        builder.retryStrategy(SmithyRetries.DefaultRetryStrategy(options: config.retryStrategyOptions))
        builder.retryErrorInfoProvider(ClientRuntime.DefaultRetryErrorInfoProvider.errorInfo(for:))
        builder.applySigner(ClientRuntime.SignerMiddleware<CancelPlanExecutionOutput>())
        let configuredEndpoint = try config.endpoint ?? AWSClientRuntime.AWSClientConfigDefaultsProvider.configuredEndpoint("ARC Region switch", config.ignoreConfiguredEndpointURLs)
        let endpointParamsBlock = { [config] (context: Smithy.Context) in
            EndpointParams(endpoint: configuredEndpoint, region: config.region, useFIPS: config.useFIPS ?? false)
        }
        builder.applyEndpoint(AWSClientRuntime.AWSEndpointResolverMiddleware<CancelPlanExecutionOutput, EndpointParams>(paramsBlock: endpointParamsBlock, resolverBlock: { [config] in try config.endpointResolver.resolve(params: $0) }))
        builder.serialize(ClientRuntime.BodyMiddleware<CancelPlanExecutionInput, CancelPlanExecutionOutput, SmithyCBOR.Writer>(rootNodeInfo: "", inputWritingClosure: CancelPlanExecutionInput.write(value:to:)))
        builder.interceptors.add(ClientRuntime.MutateHeadersMiddleware<CancelPlanExecutionInput, CancelPlanExecutionOutput>(overrides: ["smithy-protocol": "rpc-v2-cbor", "Accept": "application/cbor"]))
        builder.interceptors.add(ClientRuntime.CborValidateResponseHeaderMiddleware<CancelPlanExecutionInput, CancelPlanExecutionOutput>())
        builder.interceptors.add(ClientRuntime.ContentTypeMiddleware<CancelPlanExecutionInput, CancelPlanExecutionOutput>(contentType: "application/cbor"))
        builder.interceptors.add(ClientRuntime.ContentLengthMiddleware<CancelPlanExecutionInput, CancelPlanExecutionOutput>())
        builder.selectAuthScheme(ClientRuntime.AuthSchemeMiddleware<CancelPlanExecutionOutput>())
        builder.interceptors.add(AWSClientRuntime.AmzSdkInvocationIdMiddleware<CancelPlanExecutionInput, CancelPlanExecutionOutput>())
        builder.interceptors.add(AWSClientRuntime.AmzSdkRequestMiddleware<CancelPlanExecutionInput, CancelPlanExecutionOutput>(maxRetries: config.retryStrategyOptions.maxRetriesBase))
        builder.interceptors.add(AWSClientRuntime.UserAgentMiddleware<CancelPlanExecutionInput, CancelPlanExecutionOutput>(serviceID: serviceName, version: ARCRegionswitchClient.version, config: config))
        var metricsAttributes = Smithy.Attributes()
        metricsAttributes.set(key: ClientRuntime.OrchestratorMetricsAttributesKeys.service, value: "ARCRegionswitch")
        metricsAttributes.set(key: ClientRuntime.OrchestratorMetricsAttributesKeys.method, value: "CancelPlanExecution")
        let op = builder.attributes(context)
            .telemetry(ClientRuntime.OrchestratorTelemetry(
                telemetryProvider: config.telemetryProvider,
                metricsAttributes: metricsAttributes,
                meterScope: serviceName,
                tracerScope: serviceName
            ))
            .executeRequest(client)
            .build()
        return try await op.execute(input: input)
    }

    /// Performs the `CreatePlan` operation on the `ARCRegionswitch` service.
    ///
    /// Creates a new Region switch plan. A plan defines the steps required to shift traffic from one Amazon Web Services Region to another. You must specify a name for the plan, the primary Region, and at least one additional Region. You can also provide a description, execution role, recovery time objective, associated alarms, triggers, and workflows that define the steps to execute during a Region switch.
    ///
    /// - Parameter CreatePlanInput : [no documentation found]
    ///
    /// - Returns: `CreatePlanOutput` : [no documentation found]
    public func createPlan(input: CreatePlanInput) async throws -> CreatePlanOutput {
        let context = Smithy.ContextBuilder()
                      .withMethod(value: .post)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "createPlan")
                      .withUnsignedPayloadTrait(value: false)
                      .withSmithyDefaultConfig(config)
                      .withIdentityResolver(value: config.awsCredentialIdentityResolver, schemeID: "aws.auth#sigv4a")
                      .withRegion(value: config.region)
                      .withRequestChecksumCalculation(value: config.requestChecksumCalculation)
                      .withResponseChecksumValidation(value: config.responseChecksumValidation)
                      .withSigningName(value: "arc-region-switch")
                      .withSigningRegion(value: config.signingRegion)
                      .build()
        let builder = ClientRuntime.OrchestratorBuilder<CreatePlanInput, CreatePlanOutput, SmithyHTTPAPI.HTTPRequest, SmithyHTTPAPI.HTTPResponse>()
        config.interceptorProviders.forEach { provider in
            builder.interceptors.add(provider.create())
        }
        config.httpInterceptorProviders.forEach { provider in
            builder.interceptors.add(provider.create())
        }
        builder.interceptors.add(ClientRuntime.URLPathMiddleware<CreatePlanInput, CreatePlanOutput>(CreatePlanInput.urlPathProvider(_:)))
        builder.interceptors.add(ClientRuntime.URLHostMiddleware<CreatePlanInput, CreatePlanOutput>())
        builder.interceptors.add(ClientRuntime.ContentTypeMiddleware<CreatePlanInput, CreatePlanOutput>(contentType: "application/cbor"))
        builder.interceptors.add(ClientRuntime.ContentLengthMiddleware<CreatePlanInput, CreatePlanOutput>())
        builder.deserialize(ClientRuntime.DeserializeMiddleware<CreatePlanOutput>(CreatePlanOutput.httpOutput(from:), CreatePlanOutputError.httpError(from:)))
        builder.interceptors.add(ClientRuntime.LoggerMiddleware<CreatePlanInput, CreatePlanOutput>(clientLogMode: config.clientLogMode))
        builder.clockSkewProvider(ClientRuntime.DefaultClockSkewProvider.provider())
        builder.retryStrategy(SmithyRetries.DefaultRetryStrategy(options: config.retryStrategyOptions))
        builder.retryErrorInfoProvider(ClientRuntime.DefaultRetryErrorInfoProvider.errorInfo(for:))
        builder.applySigner(ClientRuntime.SignerMiddleware<CreatePlanOutput>())
        let configuredEndpoint = try config.endpoint ?? AWSClientRuntime.AWSClientConfigDefaultsProvider.configuredEndpoint("ARC Region switch", config.ignoreConfiguredEndpointURLs)
        let endpointParamsBlock = { [config] (context: Smithy.Context) in
            EndpointParams(endpoint: configuredEndpoint, region: config.region, useControlPlaneEndpoint: true, useFIPS: config.useFIPS ?? false)
        }
        builder.applyEndpoint(AWSClientRuntime.AWSEndpointResolverMiddleware<CreatePlanOutput, EndpointParams>(paramsBlock: endpointParamsBlock, resolverBlock: { [config] in try config.endpointResolver.resolve(params: $0) }))
        builder.serialize(ClientRuntime.BodyMiddleware<CreatePlanInput, CreatePlanOutput, SmithyCBOR.Writer>(rootNodeInfo: "", inputWritingClosure: CreatePlanInput.write(value:to:)))
        builder.interceptors.add(ClientRuntime.MutateHeadersMiddleware<CreatePlanInput, CreatePlanOutput>(overrides: ["smithy-protocol": "rpc-v2-cbor", "Accept": "application/cbor"]))
        builder.interceptors.add(ClientRuntime.CborValidateResponseHeaderMiddleware<CreatePlanInput, CreatePlanOutput>())
        builder.interceptors.add(ClientRuntime.ContentTypeMiddleware<CreatePlanInput, CreatePlanOutput>(contentType: "application/cbor"))
        builder.interceptors.add(ClientRuntime.ContentLengthMiddleware<CreatePlanInput, CreatePlanOutput>())
        builder.selectAuthScheme(ClientRuntime.AuthSchemeMiddleware<CreatePlanOutput>())
        builder.interceptors.add(AWSClientRuntime.AmzSdkInvocationIdMiddleware<CreatePlanInput, CreatePlanOutput>())
        builder.interceptors.add(AWSClientRuntime.AmzSdkRequestMiddleware<CreatePlanInput, CreatePlanOutput>(maxRetries: config.retryStrategyOptions.maxRetriesBase))
        builder.interceptors.add(AWSClientRuntime.UserAgentMiddleware<CreatePlanInput, CreatePlanOutput>(serviceID: serviceName, version: ARCRegionswitchClient.version, config: config))
        var metricsAttributes = Smithy.Attributes()
        metricsAttributes.set(key: ClientRuntime.OrchestratorMetricsAttributesKeys.service, value: "ARCRegionswitch")
        metricsAttributes.set(key: ClientRuntime.OrchestratorMetricsAttributesKeys.method, value: "CreatePlan")
        let op = builder.attributes(context)
            .telemetry(ClientRuntime.OrchestratorTelemetry(
                telemetryProvider: config.telemetryProvider,
                metricsAttributes: metricsAttributes,
                meterScope: serviceName,
                tracerScope: serviceName
            ))
            .executeRequest(client)
            .build()
        return try await op.execute(input: input)
    }

    /// Performs the `DeletePlan` operation on the `ARCRegionswitch` service.
    ///
    /// Deletes a Region switch plan. You must specify the ARN of the plan to delete. You cannot delete a plan that has an active execution in progress.
    ///
    /// - Parameter DeletePlanInput : [no documentation found]
    ///
    /// - Returns: `DeletePlanOutput` : [no documentation found]
    ///
    /// - Throws: One of the exceptions listed below __Possible Exceptions__.
    ///
    /// __Possible Exceptions:__
    /// - `IllegalStateException` : The operation failed because the current state of the resource doesn't allow the operation to proceed. HTTP Status Code: 400
    /// - `ResourceNotFoundException` : The specified resource was not found. HTTP Status Code: 404
    public func deletePlan(input: DeletePlanInput) async throws -> DeletePlanOutput {
        let context = Smithy.ContextBuilder()
                      .withMethod(value: .post)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "deletePlan")
                      .withUnsignedPayloadTrait(value: false)
                      .withSmithyDefaultConfig(config)
                      .withIdentityResolver(value: config.awsCredentialIdentityResolver, schemeID: "aws.auth#sigv4a")
                      .withRegion(value: config.region)
                      .withRequestChecksumCalculation(value: config.requestChecksumCalculation)
                      .withResponseChecksumValidation(value: config.responseChecksumValidation)
                      .withSigningName(value: "arc-region-switch")
                      .withSigningRegion(value: config.signingRegion)
                      .build()
        let builder = ClientRuntime.OrchestratorBuilder<DeletePlanInput, DeletePlanOutput, SmithyHTTPAPI.HTTPRequest, SmithyHTTPAPI.HTTPResponse>()
        config.interceptorProviders.forEach { provider in
            builder.interceptors.add(provider.create())
        }
        config.httpInterceptorProviders.forEach { provider in
            builder.interceptors.add(provider.create())
        }
        builder.interceptors.add(ClientRuntime.URLPathMiddleware<DeletePlanInput, DeletePlanOutput>(DeletePlanInput.urlPathProvider(_:)))
        builder.interceptors.add(ClientRuntime.URLHostMiddleware<DeletePlanInput, DeletePlanOutput>())
        builder.interceptors.add(ClientRuntime.ContentTypeMiddleware<DeletePlanInput, DeletePlanOutput>(contentType: "application/cbor"))
        builder.interceptors.add(ClientRuntime.ContentLengthMiddleware<DeletePlanInput, DeletePlanOutput>())
        builder.deserialize(ClientRuntime.DeserializeMiddleware<DeletePlanOutput>(DeletePlanOutput.httpOutput(from:), DeletePlanOutputError.httpError(from:)))
        builder.interceptors.add(ClientRuntime.LoggerMiddleware<DeletePlanInput, DeletePlanOutput>(clientLogMode: config.clientLogMode))
        builder.clockSkewProvider(ClientRuntime.DefaultClockSkewProvider.provider())
        builder.retryStrategy(SmithyRetries.DefaultRetryStrategy(options: config.retryStrategyOptions))
        builder.retryErrorInfoProvider(ClientRuntime.DefaultRetryErrorInfoProvider.errorInfo(for:))
        builder.applySigner(ClientRuntime.SignerMiddleware<DeletePlanOutput>())
        let configuredEndpoint = try config.endpoint ?? AWSClientRuntime.AWSClientConfigDefaultsProvider.configuredEndpoint("ARC Region switch", config.ignoreConfiguredEndpointURLs)
        let endpointParamsBlock = { [config] (context: Smithy.Context) in
            EndpointParams(endpoint: configuredEndpoint, region: config.region, useControlPlaneEndpoint: true, useFIPS: config.useFIPS ?? false)
        }
        builder.applyEndpoint(AWSClientRuntime.AWSEndpointResolverMiddleware<DeletePlanOutput, EndpointParams>(paramsBlock: endpointParamsBlock, resolverBlock: { [config] in try config.endpointResolver.resolve(params: $0) }))
        builder.serialize(ClientRuntime.BodyMiddleware<DeletePlanInput, DeletePlanOutput, SmithyCBOR.Writer>(rootNodeInfo: "", inputWritingClosure: DeletePlanInput.write(value:to:)))
        builder.interceptors.add(ClientRuntime.MutateHeadersMiddleware<DeletePlanInput, DeletePlanOutput>(overrides: ["smithy-protocol": "rpc-v2-cbor", "Accept": "application/cbor"]))
        builder.interceptors.add(ClientRuntime.CborValidateResponseHeaderMiddleware<DeletePlanInput, DeletePlanOutput>())
        builder.interceptors.add(ClientRuntime.ContentTypeMiddleware<DeletePlanInput, DeletePlanOutput>(contentType: "application/cbor"))
        builder.interceptors.add(ClientRuntime.ContentLengthMiddleware<DeletePlanInput, DeletePlanOutput>())
        builder.selectAuthScheme(ClientRuntime.AuthSchemeMiddleware<DeletePlanOutput>())
        builder.interceptors.add(AWSClientRuntime.AmzSdkInvocationIdMiddleware<DeletePlanInput, DeletePlanOutput>())
        builder.interceptors.add(AWSClientRuntime.AmzSdkRequestMiddleware<DeletePlanInput, DeletePlanOutput>(maxRetries: config.retryStrategyOptions.maxRetriesBase))
        builder.interceptors.add(AWSClientRuntime.UserAgentMiddleware<DeletePlanInput, DeletePlanOutput>(serviceID: serviceName, version: ARCRegionswitchClient.version, config: config))
        var metricsAttributes = Smithy.Attributes()
        metricsAttributes.set(key: ClientRuntime.OrchestratorMetricsAttributesKeys.service, value: "ARCRegionswitch")
        metricsAttributes.set(key: ClientRuntime.OrchestratorMetricsAttributesKeys.method, value: "DeletePlan")
        let op = builder.attributes(context)
            .telemetry(ClientRuntime.OrchestratorTelemetry(
                telemetryProvider: config.telemetryProvider,
                metricsAttributes: metricsAttributes,
                meterScope: serviceName,
                tracerScope: serviceName
            ))
            .executeRequest(client)
            .build()
        return try await op.execute(input: input)
    }

    /// Performs the `GetPlan` operation on the `ARCRegionswitch` service.
    ///
    /// Retrieves detailed information about a Region switch plan. You must specify the ARN of the plan.
    ///
    /// - Parameter GetPlanInput : [no documentation found]
    ///
    /// - Returns: `GetPlanOutput` : [no documentation found]
    ///
    /// - Throws: One of the exceptions listed below __Possible Exceptions__.
    ///
    /// __Possible Exceptions:__
    /// - `ResourceNotFoundException` : The specified resource was not found. HTTP Status Code: 404
    public func getPlan(input: GetPlanInput) async throws -> GetPlanOutput {
        let context = Smithy.ContextBuilder()
                      .withMethod(value: .post)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "getPlan")
                      .withUnsignedPayloadTrait(value: false)
                      .withSmithyDefaultConfig(config)
                      .withIdentityResolver(value: config.awsCredentialIdentityResolver, schemeID: "aws.auth#sigv4a")
                      .withRegion(value: config.region)
                      .withRequestChecksumCalculation(value: config.requestChecksumCalculation)
                      .withResponseChecksumValidation(value: config.responseChecksumValidation)
                      .withSigningName(value: "arc-region-switch")
                      .withSigningRegion(value: config.signingRegion)
                      .build()
        let builder = ClientRuntime.OrchestratorBuilder<GetPlanInput, GetPlanOutput, SmithyHTTPAPI.HTTPRequest, SmithyHTTPAPI.HTTPResponse>()
        config.interceptorProviders.forEach { provider in
            builder.interceptors.add(provider.create())
        }
        config.httpInterceptorProviders.forEach { provider in
            builder.interceptors.add(provider.create())
        }
        builder.interceptors.add(ClientRuntime.URLPathMiddleware<GetPlanInput, GetPlanOutput>(GetPlanInput.urlPathProvider(_:)))
        builder.interceptors.add(ClientRuntime.URLHostMiddleware<GetPlanInput, GetPlanOutput>())
        builder.interceptors.add(ClientRuntime.ContentTypeMiddleware<GetPlanInput, GetPlanOutput>(contentType: "application/cbor"))
        builder.interceptors.add(ClientRuntime.ContentLengthMiddleware<GetPlanInput, GetPlanOutput>())
        builder.deserialize(ClientRuntime.DeserializeMiddleware<GetPlanOutput>(GetPlanOutput.httpOutput(from:), GetPlanOutputError.httpError(from:)))
        builder.interceptors.add(ClientRuntime.LoggerMiddleware<GetPlanInput, GetPlanOutput>(clientLogMode: config.clientLogMode))
        builder.clockSkewProvider(ClientRuntime.DefaultClockSkewProvider.provider())
        builder.retryStrategy(SmithyRetries.DefaultRetryStrategy(options: config.retryStrategyOptions))
        builder.retryErrorInfoProvider(ClientRuntime.DefaultRetryErrorInfoProvider.errorInfo(for:))
        builder.applySigner(ClientRuntime.SignerMiddleware<GetPlanOutput>())
        let configuredEndpoint = try config.endpoint ?? AWSClientRuntime.AWSClientConfigDefaultsProvider.configuredEndpoint("ARC Region switch", config.ignoreConfiguredEndpointURLs)
        let endpointParamsBlock = { [config] (context: Smithy.Context) in
            EndpointParams(endpoint: configuredEndpoint, region: config.region, useControlPlaneEndpoint: true, useFIPS: config.useFIPS ?? false)
        }
        builder.applyEndpoint(AWSClientRuntime.AWSEndpointResolverMiddleware<GetPlanOutput, EndpointParams>(paramsBlock: endpointParamsBlock, resolverBlock: { [config] in try config.endpointResolver.resolve(params: $0) }))
        builder.serialize(ClientRuntime.BodyMiddleware<GetPlanInput, GetPlanOutput, SmithyCBOR.Writer>(rootNodeInfo: "", inputWritingClosure: GetPlanInput.write(value:to:)))
        builder.interceptors.add(ClientRuntime.MutateHeadersMiddleware<GetPlanInput, GetPlanOutput>(overrides: ["smithy-protocol": "rpc-v2-cbor", "Accept": "application/cbor"]))
        builder.interceptors.add(ClientRuntime.CborValidateResponseHeaderMiddleware<GetPlanInput, GetPlanOutput>())
        builder.interceptors.add(ClientRuntime.ContentTypeMiddleware<GetPlanInput, GetPlanOutput>(contentType: "application/cbor"))
        builder.interceptors.add(ClientRuntime.ContentLengthMiddleware<GetPlanInput, GetPlanOutput>())
        builder.selectAuthScheme(ClientRuntime.AuthSchemeMiddleware<GetPlanOutput>())
        builder.interceptors.add(AWSClientRuntime.AmzSdkInvocationIdMiddleware<GetPlanInput, GetPlanOutput>())
        builder.interceptors.add(AWSClientRuntime.AmzSdkRequestMiddleware<GetPlanInput, GetPlanOutput>(maxRetries: config.retryStrategyOptions.maxRetriesBase))
        builder.interceptors.add(AWSClientRuntime.UserAgentMiddleware<GetPlanInput, GetPlanOutput>(serviceID: serviceName, version: ARCRegionswitchClient.version, config: config))
        var metricsAttributes = Smithy.Attributes()
        metricsAttributes.set(key: ClientRuntime.OrchestratorMetricsAttributesKeys.service, value: "ARCRegionswitch")
        metricsAttributes.set(key: ClientRuntime.OrchestratorMetricsAttributesKeys.method, value: "GetPlan")
        let op = builder.attributes(context)
            .telemetry(ClientRuntime.OrchestratorTelemetry(
                telemetryProvider: config.telemetryProvider,
                metricsAttributes: metricsAttributes,
                meterScope: serviceName,
                tracerScope: serviceName
            ))
            .executeRequest(client)
            .build()
        return try await op.execute(input: input)
    }

    /// Performs the `GetPlanEvaluationStatus` operation on the `ARCRegionswitch` service.
    ///
    /// Retrieves the evaluation status of a Region switch plan. The evaluation status provides information about the last time the plan was evaluated and any warnings or issues detected.
    ///
    /// - Parameter GetPlanEvaluationStatusInput : [no documentation found]
    ///
    /// - Returns: `GetPlanEvaluationStatusOutput` : [no documentation found]
    ///
    /// - Throws: One of the exceptions listed below __Possible Exceptions__.
    ///
    /// __Possible Exceptions:__
    /// - `AccessDeniedException` : You do not have sufficient access to perform this action. HTTP Status Code: 403
    /// - `ResourceNotFoundException` : The specified resource was not found. HTTP Status Code: 404
    public func getPlanEvaluationStatus(input: GetPlanEvaluationStatusInput) async throws -> GetPlanEvaluationStatusOutput {
        let context = Smithy.ContextBuilder()
                      .withMethod(value: .post)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "getPlanEvaluationStatus")
                      .withUnsignedPayloadTrait(value: false)
                      .withSmithyDefaultConfig(config)
                      .withIdentityResolver(value: config.awsCredentialIdentityResolver, schemeID: "aws.auth#sigv4a")
                      .withRegion(value: config.region)
                      .withRequestChecksumCalculation(value: config.requestChecksumCalculation)
                      .withResponseChecksumValidation(value: config.responseChecksumValidation)
                      .withSigningName(value: "arc-region-switch")
                      .withSigningRegion(value: config.signingRegion)
                      .build()
        let builder = ClientRuntime.OrchestratorBuilder<GetPlanEvaluationStatusInput, GetPlanEvaluationStatusOutput, SmithyHTTPAPI.HTTPRequest, SmithyHTTPAPI.HTTPResponse>()
        config.interceptorProviders.forEach { provider in
            builder.interceptors.add(provider.create())
        }
        config.httpInterceptorProviders.forEach { provider in
            builder.interceptors.add(provider.create())
        }
        builder.interceptors.add(ClientRuntime.URLPathMiddleware<GetPlanEvaluationStatusInput, GetPlanEvaluationStatusOutput>(GetPlanEvaluationStatusInput.urlPathProvider(_:)))
        builder.interceptors.add(ClientRuntime.URLHostMiddleware<GetPlanEvaluationStatusInput, GetPlanEvaluationStatusOutput>())
        builder.interceptors.add(ClientRuntime.ContentTypeMiddleware<GetPlanEvaluationStatusInput, GetPlanEvaluationStatusOutput>(contentType: "application/cbor"))
        builder.interceptors.add(ClientRuntime.ContentLengthMiddleware<GetPlanEvaluationStatusInput, GetPlanEvaluationStatusOutput>())
        builder.deserialize(ClientRuntime.DeserializeMiddleware<GetPlanEvaluationStatusOutput>(GetPlanEvaluationStatusOutput.httpOutput(from:), GetPlanEvaluationStatusOutputError.httpError(from:)))
        builder.interceptors.add(ClientRuntime.LoggerMiddleware<GetPlanEvaluationStatusInput, GetPlanEvaluationStatusOutput>(clientLogMode: config.clientLogMode))
        builder.clockSkewProvider(ClientRuntime.DefaultClockSkewProvider.provider())
        builder.retryStrategy(SmithyRetries.DefaultRetryStrategy(options: config.retryStrategyOptions))
        builder.retryErrorInfoProvider(ClientRuntime.DefaultRetryErrorInfoProvider.errorInfo(for:))
        builder.applySigner(ClientRuntime.SignerMiddleware<GetPlanEvaluationStatusOutput>())
        let configuredEndpoint = try config.endpoint ?? AWSClientRuntime.AWSClientConfigDefaultsProvider.configuredEndpoint("ARC Region switch", config.ignoreConfiguredEndpointURLs)
        let endpointParamsBlock = { [config] (context: Smithy.Context) in
            EndpointParams(endpoint: configuredEndpoint, region: config.region, useFIPS: config.useFIPS ?? false)
        }
        builder.applyEndpoint(AWSClientRuntime.AWSEndpointResolverMiddleware<GetPlanEvaluationStatusOutput, EndpointParams>(paramsBlock: endpointParamsBlock, resolverBlock: { [config] in try config.endpointResolver.resolve(params: $0) }))
        builder.serialize(ClientRuntime.BodyMiddleware<GetPlanEvaluationStatusInput, GetPlanEvaluationStatusOutput, SmithyCBOR.Writer>(rootNodeInfo: "", inputWritingClosure: GetPlanEvaluationStatusInput.write(value:to:)))
        builder.interceptors.add(ClientRuntime.MutateHeadersMiddleware<GetPlanEvaluationStatusInput, GetPlanEvaluationStatusOutput>(overrides: ["smithy-protocol": "rpc-v2-cbor", "Accept": "application/cbor"]))
        builder.interceptors.add(ClientRuntime.CborValidateResponseHeaderMiddleware<GetPlanEvaluationStatusInput, GetPlanEvaluationStatusOutput>())
        builder.interceptors.add(ClientRuntime.ContentTypeMiddleware<GetPlanEvaluationStatusInput, GetPlanEvaluationStatusOutput>(contentType: "application/cbor"))
        builder.interceptors.add(ClientRuntime.ContentLengthMiddleware<GetPlanEvaluationStatusInput, GetPlanEvaluationStatusOutput>())
        builder.selectAuthScheme(ClientRuntime.AuthSchemeMiddleware<GetPlanEvaluationStatusOutput>())
        builder.interceptors.add(AWSClientRuntime.AmzSdkInvocationIdMiddleware<GetPlanEvaluationStatusInput, GetPlanEvaluationStatusOutput>())
        builder.interceptors.add(AWSClientRuntime.AmzSdkRequestMiddleware<GetPlanEvaluationStatusInput, GetPlanEvaluationStatusOutput>(maxRetries: config.retryStrategyOptions.maxRetriesBase))
        builder.interceptors.add(AWSClientRuntime.UserAgentMiddleware<GetPlanEvaluationStatusInput, GetPlanEvaluationStatusOutput>(serviceID: serviceName, version: ARCRegionswitchClient.version, config: config))
        var metricsAttributes = Smithy.Attributes()
        metricsAttributes.set(key: ClientRuntime.OrchestratorMetricsAttributesKeys.service, value: "ARCRegionswitch")
        metricsAttributes.set(key: ClientRuntime.OrchestratorMetricsAttributesKeys.method, value: "GetPlanEvaluationStatus")
        let op = builder.attributes(context)
            .telemetry(ClientRuntime.OrchestratorTelemetry(
                telemetryProvider: config.telemetryProvider,
                metricsAttributes: metricsAttributes,
                meterScope: serviceName,
                tracerScope: serviceName
            ))
            .executeRequest(client)
            .build()
        return try await op.execute(input: input)
    }

    /// Performs the `GetPlanExecution` operation on the `ARCRegionswitch` service.
    ///
    /// Retrieves detailed information about a specific plan execution. You must specify the plan ARN and execution ID.
    ///
    /// - Parameter GetPlanExecutionInput : [no documentation found]
    ///
    /// - Returns: `GetPlanExecutionOutput` : [no documentation found]
    ///
    /// - Throws: One of the exceptions listed below __Possible Exceptions__.
    ///
    /// __Possible Exceptions:__
    /// - `AccessDeniedException` : You do not have sufficient access to perform this action. HTTP Status Code: 403
    /// - `ResourceNotFoundException` : The specified resource was not found. HTTP Status Code: 404
    public func getPlanExecution(input: GetPlanExecutionInput) async throws -> GetPlanExecutionOutput {
        let context = Smithy.ContextBuilder()
                      .withMethod(value: .post)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "getPlanExecution")
                      .withUnsignedPayloadTrait(value: false)
                      .withSmithyDefaultConfig(config)
                      .withIdentityResolver(value: config.awsCredentialIdentityResolver, schemeID: "aws.auth#sigv4a")
                      .withRegion(value: config.region)
                      .withRequestChecksumCalculation(value: config.requestChecksumCalculation)
                      .withResponseChecksumValidation(value: config.responseChecksumValidation)
                      .withSigningName(value: "arc-region-switch")
                      .withSigningRegion(value: config.signingRegion)
                      .build()
        let builder = ClientRuntime.OrchestratorBuilder<GetPlanExecutionInput, GetPlanExecutionOutput, SmithyHTTPAPI.HTTPRequest, SmithyHTTPAPI.HTTPResponse>()
        config.interceptorProviders.forEach { provider in
            builder.interceptors.add(provider.create())
        }
        config.httpInterceptorProviders.forEach { provider in
            builder.interceptors.add(provider.create())
        }
        builder.interceptors.add(ClientRuntime.URLPathMiddleware<GetPlanExecutionInput, GetPlanExecutionOutput>(GetPlanExecutionInput.urlPathProvider(_:)))
        builder.interceptors.add(ClientRuntime.URLHostMiddleware<GetPlanExecutionInput, GetPlanExecutionOutput>())
        builder.interceptors.add(ClientRuntime.ContentTypeMiddleware<GetPlanExecutionInput, GetPlanExecutionOutput>(contentType: "application/cbor"))
        builder.interceptors.add(ClientRuntime.ContentLengthMiddleware<GetPlanExecutionInput, GetPlanExecutionOutput>())
        builder.deserialize(ClientRuntime.DeserializeMiddleware<GetPlanExecutionOutput>(GetPlanExecutionOutput.httpOutput(from:), GetPlanExecutionOutputError.httpError(from:)))
        builder.interceptors.add(ClientRuntime.LoggerMiddleware<GetPlanExecutionInput, GetPlanExecutionOutput>(clientLogMode: config.clientLogMode))
        builder.clockSkewProvider(ClientRuntime.DefaultClockSkewProvider.provider())
        builder.retryStrategy(SmithyRetries.DefaultRetryStrategy(options: config.retryStrategyOptions))
        builder.retryErrorInfoProvider(ClientRuntime.DefaultRetryErrorInfoProvider.errorInfo(for:))
        builder.applySigner(ClientRuntime.SignerMiddleware<GetPlanExecutionOutput>())
        let configuredEndpoint = try config.endpoint ?? AWSClientRuntime.AWSClientConfigDefaultsProvider.configuredEndpoint("ARC Region switch", config.ignoreConfiguredEndpointURLs)
        let endpointParamsBlock = { [config] (context: Smithy.Context) in
            EndpointParams(endpoint: configuredEndpoint, region: config.region, useFIPS: config.useFIPS ?? false)
        }
        builder.applyEndpoint(AWSClientRuntime.AWSEndpointResolverMiddleware<GetPlanExecutionOutput, EndpointParams>(paramsBlock: endpointParamsBlock, resolverBlock: { [config] in try config.endpointResolver.resolve(params: $0) }))
        builder.serialize(ClientRuntime.BodyMiddleware<GetPlanExecutionInput, GetPlanExecutionOutput, SmithyCBOR.Writer>(rootNodeInfo: "", inputWritingClosure: GetPlanExecutionInput.write(value:to:)))
        builder.interceptors.add(ClientRuntime.MutateHeadersMiddleware<GetPlanExecutionInput, GetPlanExecutionOutput>(overrides: ["smithy-protocol": "rpc-v2-cbor", "Accept": "application/cbor"]))
        builder.interceptors.add(ClientRuntime.CborValidateResponseHeaderMiddleware<GetPlanExecutionInput, GetPlanExecutionOutput>())
        builder.interceptors.add(ClientRuntime.ContentTypeMiddleware<GetPlanExecutionInput, GetPlanExecutionOutput>(contentType: "application/cbor"))
        builder.interceptors.add(ClientRuntime.ContentLengthMiddleware<GetPlanExecutionInput, GetPlanExecutionOutput>())
        builder.selectAuthScheme(ClientRuntime.AuthSchemeMiddleware<GetPlanExecutionOutput>())
        builder.interceptors.add(AWSClientRuntime.AmzSdkInvocationIdMiddleware<GetPlanExecutionInput, GetPlanExecutionOutput>())
        builder.interceptors.add(AWSClientRuntime.AmzSdkRequestMiddleware<GetPlanExecutionInput, GetPlanExecutionOutput>(maxRetries: config.retryStrategyOptions.maxRetriesBase))
        builder.interceptors.add(AWSClientRuntime.UserAgentMiddleware<GetPlanExecutionInput, GetPlanExecutionOutput>(serviceID: serviceName, version: ARCRegionswitchClient.version, config: config))
        var metricsAttributes = Smithy.Attributes()
        metricsAttributes.set(key: ClientRuntime.OrchestratorMetricsAttributesKeys.service, value: "ARCRegionswitch")
        metricsAttributes.set(key: ClientRuntime.OrchestratorMetricsAttributesKeys.method, value: "GetPlanExecution")
        let op = builder.attributes(context)
            .telemetry(ClientRuntime.OrchestratorTelemetry(
                telemetryProvider: config.telemetryProvider,
                metricsAttributes: metricsAttributes,
                meterScope: serviceName,
                tracerScope: serviceName
            ))
            .executeRequest(client)
            .build()
        return try await op.execute(input: input)
    }

    /// Performs the `GetPlanInRegion` operation on the `ARCRegionswitch` service.
    ///
    /// Retrieves information about a Region switch plan in a specific Amazon Web Services Region. This operation is useful for getting Region-specific information about a plan.
    ///
    /// - Parameter GetPlanInRegionInput : [no documentation found]
    ///
    /// - Returns: `GetPlanInRegionOutput` : [no documentation found]
    ///
    /// - Throws: One of the exceptions listed below __Possible Exceptions__.
    ///
    /// __Possible Exceptions:__
    /// - `AccessDeniedException` : You do not have sufficient access to perform this action. HTTP Status Code: 403
    /// - `ResourceNotFoundException` : The specified resource was not found. HTTP Status Code: 404
    public func getPlanInRegion(input: GetPlanInRegionInput) async throws -> GetPlanInRegionOutput {
        let context = Smithy.ContextBuilder()
                      .withMethod(value: .post)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "getPlanInRegion")
                      .withUnsignedPayloadTrait(value: false)
                      .withSmithyDefaultConfig(config)
                      .withIdentityResolver(value: config.awsCredentialIdentityResolver, schemeID: "aws.auth#sigv4a")
                      .withRegion(value: config.region)
                      .withRequestChecksumCalculation(value: config.requestChecksumCalculation)
                      .withResponseChecksumValidation(value: config.responseChecksumValidation)
                      .withSigningName(value: "arc-region-switch")
                      .withSigningRegion(value: config.signingRegion)
                      .build()
        let builder = ClientRuntime.OrchestratorBuilder<GetPlanInRegionInput, GetPlanInRegionOutput, SmithyHTTPAPI.HTTPRequest, SmithyHTTPAPI.HTTPResponse>()
        config.interceptorProviders.forEach { provider in
            builder.interceptors.add(provider.create())
        }
        config.httpInterceptorProviders.forEach { provider in
            builder.interceptors.add(provider.create())
        }
        builder.interceptors.add(ClientRuntime.URLPathMiddleware<GetPlanInRegionInput, GetPlanInRegionOutput>(GetPlanInRegionInput.urlPathProvider(_:)))
        builder.interceptors.add(ClientRuntime.URLHostMiddleware<GetPlanInRegionInput, GetPlanInRegionOutput>())
        builder.interceptors.add(ClientRuntime.ContentTypeMiddleware<GetPlanInRegionInput, GetPlanInRegionOutput>(contentType: "application/cbor"))
        builder.interceptors.add(ClientRuntime.ContentLengthMiddleware<GetPlanInRegionInput, GetPlanInRegionOutput>())
        builder.deserialize(ClientRuntime.DeserializeMiddleware<GetPlanInRegionOutput>(GetPlanInRegionOutput.httpOutput(from:), GetPlanInRegionOutputError.httpError(from:)))
        builder.interceptors.add(ClientRuntime.LoggerMiddleware<GetPlanInRegionInput, GetPlanInRegionOutput>(clientLogMode: config.clientLogMode))
        builder.clockSkewProvider(ClientRuntime.DefaultClockSkewProvider.provider())
        builder.retryStrategy(SmithyRetries.DefaultRetryStrategy(options: config.retryStrategyOptions))
        builder.retryErrorInfoProvider(ClientRuntime.DefaultRetryErrorInfoProvider.errorInfo(for:))
        builder.applySigner(ClientRuntime.SignerMiddleware<GetPlanInRegionOutput>())
        let configuredEndpoint = try config.endpoint ?? AWSClientRuntime.AWSClientConfigDefaultsProvider.configuredEndpoint("ARC Region switch", config.ignoreConfiguredEndpointURLs)
        let endpointParamsBlock = { [config] (context: Smithy.Context) in
            EndpointParams(endpoint: configuredEndpoint, region: config.region, useFIPS: config.useFIPS ?? false)
        }
        builder.applyEndpoint(AWSClientRuntime.AWSEndpointResolverMiddleware<GetPlanInRegionOutput, EndpointParams>(paramsBlock: endpointParamsBlock, resolverBlock: { [config] in try config.endpointResolver.resolve(params: $0) }))
        builder.serialize(ClientRuntime.BodyMiddleware<GetPlanInRegionInput, GetPlanInRegionOutput, SmithyCBOR.Writer>(rootNodeInfo: "", inputWritingClosure: GetPlanInRegionInput.write(value:to:)))
        builder.interceptors.add(ClientRuntime.MutateHeadersMiddleware<GetPlanInRegionInput, GetPlanInRegionOutput>(overrides: ["smithy-protocol": "rpc-v2-cbor", "Accept": "application/cbor"]))
        builder.interceptors.add(ClientRuntime.CborValidateResponseHeaderMiddleware<GetPlanInRegionInput, GetPlanInRegionOutput>())
        builder.interceptors.add(ClientRuntime.ContentTypeMiddleware<GetPlanInRegionInput, GetPlanInRegionOutput>(contentType: "application/cbor"))
        builder.interceptors.add(ClientRuntime.ContentLengthMiddleware<GetPlanInRegionInput, GetPlanInRegionOutput>())
        builder.selectAuthScheme(ClientRuntime.AuthSchemeMiddleware<GetPlanInRegionOutput>())
        builder.interceptors.add(AWSClientRuntime.AmzSdkInvocationIdMiddleware<GetPlanInRegionInput, GetPlanInRegionOutput>())
        builder.interceptors.add(AWSClientRuntime.AmzSdkRequestMiddleware<GetPlanInRegionInput, GetPlanInRegionOutput>(maxRetries: config.retryStrategyOptions.maxRetriesBase))
        builder.interceptors.add(AWSClientRuntime.UserAgentMiddleware<GetPlanInRegionInput, GetPlanInRegionOutput>(serviceID: serviceName, version: ARCRegionswitchClient.version, config: config))
        var metricsAttributes = Smithy.Attributes()
        metricsAttributes.set(key: ClientRuntime.OrchestratorMetricsAttributesKeys.service, value: "ARCRegionswitch")
        metricsAttributes.set(key: ClientRuntime.OrchestratorMetricsAttributesKeys.method, value: "GetPlanInRegion")
        let op = builder.attributes(context)
            .telemetry(ClientRuntime.OrchestratorTelemetry(
                telemetryProvider: config.telemetryProvider,
                metricsAttributes: metricsAttributes,
                meterScope: serviceName,
                tracerScope: serviceName
            ))
            .executeRequest(client)
            .build()
        return try await op.execute(input: input)
    }

    /// Performs the `ListPlanExecutionEvents` operation on the `ARCRegionswitch` service.
    ///
    /// Lists the events that occurred during a plan execution. These events provide a detailed timeline of the execution process.
    ///
    /// - Parameter ListPlanExecutionEventsInput : [no documentation found]
    ///
    /// - Returns: `ListPlanExecutionEventsOutput` : [no documentation found]
    ///
    /// - Throws: One of the exceptions listed below __Possible Exceptions__.
    ///
    /// __Possible Exceptions:__
    /// - `AccessDeniedException` : You do not have sufficient access to perform this action. HTTP Status Code: 403
    /// - `ResourceNotFoundException` : The specified resource was not found. HTTP Status Code: 404
    public func listPlanExecutionEvents(input: ListPlanExecutionEventsInput) async throws -> ListPlanExecutionEventsOutput {
        let context = Smithy.ContextBuilder()
                      .withMethod(value: .post)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "listPlanExecutionEvents")
                      .withUnsignedPayloadTrait(value: false)
                      .withSmithyDefaultConfig(config)
                      .withIdentityResolver(value: config.awsCredentialIdentityResolver, schemeID: "aws.auth#sigv4a")
                      .withRegion(value: config.region)
                      .withRequestChecksumCalculation(value: config.requestChecksumCalculation)
                      .withResponseChecksumValidation(value: config.responseChecksumValidation)
                      .withSigningName(value: "arc-region-switch")
                      .withSigningRegion(value: config.signingRegion)
                      .build()
        let builder = ClientRuntime.OrchestratorBuilder<ListPlanExecutionEventsInput, ListPlanExecutionEventsOutput, SmithyHTTPAPI.HTTPRequest, SmithyHTTPAPI.HTTPResponse>()
        config.interceptorProviders.forEach { provider in
            builder.interceptors.add(provider.create())
        }
        config.httpInterceptorProviders.forEach { provider in
            builder.interceptors.add(provider.create())
        }
        builder.interceptors.add(ClientRuntime.URLPathMiddleware<ListPlanExecutionEventsInput, ListPlanExecutionEventsOutput>(ListPlanExecutionEventsInput.urlPathProvider(_:)))
        builder.interceptors.add(ClientRuntime.URLHostMiddleware<ListPlanExecutionEventsInput, ListPlanExecutionEventsOutput>())
        builder.interceptors.add(ClientRuntime.ContentTypeMiddleware<ListPlanExecutionEventsInput, ListPlanExecutionEventsOutput>(contentType: "application/cbor"))
        builder.interceptors.add(ClientRuntime.ContentLengthMiddleware<ListPlanExecutionEventsInput, ListPlanExecutionEventsOutput>())
        builder.deserialize(ClientRuntime.DeserializeMiddleware<ListPlanExecutionEventsOutput>(ListPlanExecutionEventsOutput.httpOutput(from:), ListPlanExecutionEventsOutputError.httpError(from:)))
        builder.interceptors.add(ClientRuntime.LoggerMiddleware<ListPlanExecutionEventsInput, ListPlanExecutionEventsOutput>(clientLogMode: config.clientLogMode))
        builder.clockSkewProvider(ClientRuntime.DefaultClockSkewProvider.provider())
        builder.retryStrategy(SmithyRetries.DefaultRetryStrategy(options: config.retryStrategyOptions))
        builder.retryErrorInfoProvider(ClientRuntime.DefaultRetryErrorInfoProvider.errorInfo(for:))
        builder.applySigner(ClientRuntime.SignerMiddleware<ListPlanExecutionEventsOutput>())
        let configuredEndpoint = try config.endpoint ?? AWSClientRuntime.AWSClientConfigDefaultsProvider.configuredEndpoint("ARC Region switch", config.ignoreConfiguredEndpointURLs)
        let endpointParamsBlock = { [config] (context: Smithy.Context) in
            EndpointParams(endpoint: configuredEndpoint, region: config.region, useFIPS: config.useFIPS ?? false)
        }
        builder.applyEndpoint(AWSClientRuntime.AWSEndpointResolverMiddleware<ListPlanExecutionEventsOutput, EndpointParams>(paramsBlock: endpointParamsBlock, resolverBlock: { [config] in try config.endpointResolver.resolve(params: $0) }))
        builder.serialize(ClientRuntime.BodyMiddleware<ListPlanExecutionEventsInput, ListPlanExecutionEventsOutput, SmithyCBOR.Writer>(rootNodeInfo: "", inputWritingClosure: ListPlanExecutionEventsInput.write(value:to:)))
        builder.interceptors.add(ClientRuntime.MutateHeadersMiddleware<ListPlanExecutionEventsInput, ListPlanExecutionEventsOutput>(overrides: ["smithy-protocol": "rpc-v2-cbor", "Accept": "application/cbor"]))
        builder.interceptors.add(ClientRuntime.CborValidateResponseHeaderMiddleware<ListPlanExecutionEventsInput, ListPlanExecutionEventsOutput>())
        builder.interceptors.add(ClientRuntime.ContentTypeMiddleware<ListPlanExecutionEventsInput, ListPlanExecutionEventsOutput>(contentType: "application/cbor"))
        builder.interceptors.add(ClientRuntime.ContentLengthMiddleware<ListPlanExecutionEventsInput, ListPlanExecutionEventsOutput>())
        builder.selectAuthScheme(ClientRuntime.AuthSchemeMiddleware<ListPlanExecutionEventsOutput>())
        builder.interceptors.add(AWSClientRuntime.AmzSdkInvocationIdMiddleware<ListPlanExecutionEventsInput, ListPlanExecutionEventsOutput>())
        builder.interceptors.add(AWSClientRuntime.AmzSdkRequestMiddleware<ListPlanExecutionEventsInput, ListPlanExecutionEventsOutput>(maxRetries: config.retryStrategyOptions.maxRetriesBase))
        builder.interceptors.add(AWSClientRuntime.UserAgentMiddleware<ListPlanExecutionEventsInput, ListPlanExecutionEventsOutput>(serviceID: serviceName, version: ARCRegionswitchClient.version, config: config))
        var metricsAttributes = Smithy.Attributes()
        metricsAttributes.set(key: ClientRuntime.OrchestratorMetricsAttributesKeys.service, value: "ARCRegionswitch")
        metricsAttributes.set(key: ClientRuntime.OrchestratorMetricsAttributesKeys.method, value: "ListPlanExecutionEvents")
        let op = builder.attributes(context)
            .telemetry(ClientRuntime.OrchestratorTelemetry(
                telemetryProvider: config.telemetryProvider,
                metricsAttributes: metricsAttributes,
                meterScope: serviceName,
                tracerScope: serviceName
            ))
            .executeRequest(client)
            .build()
        return try await op.execute(input: input)
    }

    /// Performs the `ListPlanExecutions` operation on the `ARCRegionswitch` service.
    ///
    /// Lists the executions of a Region switch plan. This operation returns information about both current and historical executions.
    ///
    /// - Parameter ListPlanExecutionsInput : [no documentation found]
    ///
    /// - Returns: `ListPlanExecutionsOutput` : [no documentation found]
    ///
    /// - Throws: One of the exceptions listed below __Possible Exceptions__.
    ///
    /// __Possible Exceptions:__
    /// - `AccessDeniedException` : You do not have sufficient access to perform this action. HTTP Status Code: 403
    /// - `ResourceNotFoundException` : The specified resource was not found. HTTP Status Code: 404
    public func listPlanExecutions(input: ListPlanExecutionsInput) async throws -> ListPlanExecutionsOutput {
        let context = Smithy.ContextBuilder()
                      .withMethod(value: .post)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "listPlanExecutions")
                      .withUnsignedPayloadTrait(value: false)
                      .withSmithyDefaultConfig(config)
                      .withIdentityResolver(value: config.awsCredentialIdentityResolver, schemeID: "aws.auth#sigv4a")
                      .withRegion(value: config.region)
                      .withRequestChecksumCalculation(value: config.requestChecksumCalculation)
                      .withResponseChecksumValidation(value: config.responseChecksumValidation)
                      .withSigningName(value: "arc-region-switch")
                      .withSigningRegion(value: config.signingRegion)
                      .build()
        let builder = ClientRuntime.OrchestratorBuilder<ListPlanExecutionsInput, ListPlanExecutionsOutput, SmithyHTTPAPI.HTTPRequest, SmithyHTTPAPI.HTTPResponse>()
        config.interceptorProviders.forEach { provider in
            builder.interceptors.add(provider.create())
        }
        config.httpInterceptorProviders.forEach { provider in
            builder.interceptors.add(provider.create())
        }
        builder.interceptors.add(ClientRuntime.URLPathMiddleware<ListPlanExecutionsInput, ListPlanExecutionsOutput>(ListPlanExecutionsInput.urlPathProvider(_:)))
        builder.interceptors.add(ClientRuntime.URLHostMiddleware<ListPlanExecutionsInput, ListPlanExecutionsOutput>())
        builder.interceptors.add(ClientRuntime.ContentTypeMiddleware<ListPlanExecutionsInput, ListPlanExecutionsOutput>(contentType: "application/cbor"))
        builder.interceptors.add(ClientRuntime.ContentLengthMiddleware<ListPlanExecutionsInput, ListPlanExecutionsOutput>())
        builder.deserialize(ClientRuntime.DeserializeMiddleware<ListPlanExecutionsOutput>(ListPlanExecutionsOutput.httpOutput(from:), ListPlanExecutionsOutputError.httpError(from:)))
        builder.interceptors.add(ClientRuntime.LoggerMiddleware<ListPlanExecutionsInput, ListPlanExecutionsOutput>(clientLogMode: config.clientLogMode))
        builder.clockSkewProvider(ClientRuntime.DefaultClockSkewProvider.provider())
        builder.retryStrategy(SmithyRetries.DefaultRetryStrategy(options: config.retryStrategyOptions))
        builder.retryErrorInfoProvider(ClientRuntime.DefaultRetryErrorInfoProvider.errorInfo(for:))
        builder.applySigner(ClientRuntime.SignerMiddleware<ListPlanExecutionsOutput>())
        let configuredEndpoint = try config.endpoint ?? AWSClientRuntime.AWSClientConfigDefaultsProvider.configuredEndpoint("ARC Region switch", config.ignoreConfiguredEndpointURLs)
        let endpointParamsBlock = { [config] (context: Smithy.Context) in
            EndpointParams(endpoint: configuredEndpoint, region: config.region, useFIPS: config.useFIPS ?? false)
        }
        builder.applyEndpoint(AWSClientRuntime.AWSEndpointResolverMiddleware<ListPlanExecutionsOutput, EndpointParams>(paramsBlock: endpointParamsBlock, resolverBlock: { [config] in try config.endpointResolver.resolve(params: $0) }))
        builder.serialize(ClientRuntime.BodyMiddleware<ListPlanExecutionsInput, ListPlanExecutionsOutput, SmithyCBOR.Writer>(rootNodeInfo: "", inputWritingClosure: ListPlanExecutionsInput.write(value:to:)))
        builder.interceptors.add(ClientRuntime.MutateHeadersMiddleware<ListPlanExecutionsInput, ListPlanExecutionsOutput>(overrides: ["smithy-protocol": "rpc-v2-cbor", "Accept": "application/cbor"]))
        builder.interceptors.add(ClientRuntime.CborValidateResponseHeaderMiddleware<ListPlanExecutionsInput, ListPlanExecutionsOutput>())
        builder.interceptors.add(ClientRuntime.ContentTypeMiddleware<ListPlanExecutionsInput, ListPlanExecutionsOutput>(contentType: "application/cbor"))
        builder.interceptors.add(ClientRuntime.ContentLengthMiddleware<ListPlanExecutionsInput, ListPlanExecutionsOutput>())
        builder.selectAuthScheme(ClientRuntime.AuthSchemeMiddleware<ListPlanExecutionsOutput>())
        builder.interceptors.add(AWSClientRuntime.AmzSdkInvocationIdMiddleware<ListPlanExecutionsInput, ListPlanExecutionsOutput>())
        builder.interceptors.add(AWSClientRuntime.AmzSdkRequestMiddleware<ListPlanExecutionsInput, ListPlanExecutionsOutput>(maxRetries: config.retryStrategyOptions.maxRetriesBase))
        builder.interceptors.add(AWSClientRuntime.UserAgentMiddleware<ListPlanExecutionsInput, ListPlanExecutionsOutput>(serviceID: serviceName, version: ARCRegionswitchClient.version, config: config))
        var metricsAttributes = Smithy.Attributes()
        metricsAttributes.set(key: ClientRuntime.OrchestratorMetricsAttributesKeys.service, value: "ARCRegionswitch")
        metricsAttributes.set(key: ClientRuntime.OrchestratorMetricsAttributesKeys.method, value: "ListPlanExecutions")
        let op = builder.attributes(context)
            .telemetry(ClientRuntime.OrchestratorTelemetry(
                telemetryProvider: config.telemetryProvider,
                metricsAttributes: metricsAttributes,
                meterScope: serviceName,
                tracerScope: serviceName
            ))
            .executeRequest(client)
            .build()
        return try await op.execute(input: input)
    }

    /// Performs the `ListPlans` operation on the `ARCRegionswitch` service.
    ///
    /// Lists all Region switch plans in your Amazon Web Services account.
    ///
    /// - Parameter ListPlansInput : [no documentation found]
    ///
    /// - Returns: `ListPlansOutput` : [no documentation found]
    public func listPlans(input: ListPlansInput) async throws -> ListPlansOutput {
        let context = Smithy.ContextBuilder()
                      .withMethod(value: .post)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "listPlans")
                      .withUnsignedPayloadTrait(value: false)
                      .withSmithyDefaultConfig(config)
                      .withIdentityResolver(value: config.awsCredentialIdentityResolver, schemeID: "aws.auth#sigv4a")
                      .withRegion(value: config.region)
                      .withRequestChecksumCalculation(value: config.requestChecksumCalculation)
                      .withResponseChecksumValidation(value: config.responseChecksumValidation)
                      .withSigningName(value: "arc-region-switch")
                      .withSigningRegion(value: config.signingRegion)
                      .build()
        let builder = ClientRuntime.OrchestratorBuilder<ListPlansInput, ListPlansOutput, SmithyHTTPAPI.HTTPRequest, SmithyHTTPAPI.HTTPResponse>()
        config.interceptorProviders.forEach { provider in
            builder.interceptors.add(provider.create())
        }
        config.httpInterceptorProviders.forEach { provider in
            builder.interceptors.add(provider.create())
        }
        builder.interceptors.add(ClientRuntime.URLPathMiddleware<ListPlansInput, ListPlansOutput>(ListPlansInput.urlPathProvider(_:)))
        builder.interceptors.add(ClientRuntime.URLHostMiddleware<ListPlansInput, ListPlansOutput>())
        builder.interceptors.add(ClientRuntime.ContentTypeMiddleware<ListPlansInput, ListPlansOutput>(contentType: "application/cbor"))
        builder.interceptors.add(ClientRuntime.ContentLengthMiddleware<ListPlansInput, ListPlansOutput>())
        builder.deserialize(ClientRuntime.DeserializeMiddleware<ListPlansOutput>(ListPlansOutput.httpOutput(from:), ListPlansOutputError.httpError(from:)))
        builder.interceptors.add(ClientRuntime.LoggerMiddleware<ListPlansInput, ListPlansOutput>(clientLogMode: config.clientLogMode))
        builder.clockSkewProvider(ClientRuntime.DefaultClockSkewProvider.provider())
        builder.retryStrategy(SmithyRetries.DefaultRetryStrategy(options: config.retryStrategyOptions))
        builder.retryErrorInfoProvider(ClientRuntime.DefaultRetryErrorInfoProvider.errorInfo(for:))
        builder.applySigner(ClientRuntime.SignerMiddleware<ListPlansOutput>())
        let configuredEndpoint = try config.endpoint ?? AWSClientRuntime.AWSClientConfigDefaultsProvider.configuredEndpoint("ARC Region switch", config.ignoreConfiguredEndpointURLs)
        let endpointParamsBlock = { [config] (context: Smithy.Context) in
            EndpointParams(endpoint: configuredEndpoint, region: config.region, useControlPlaneEndpoint: true, useFIPS: config.useFIPS ?? false)
        }
        builder.applyEndpoint(AWSClientRuntime.AWSEndpointResolverMiddleware<ListPlansOutput, EndpointParams>(paramsBlock: endpointParamsBlock, resolverBlock: { [config] in try config.endpointResolver.resolve(params: $0) }))
        builder.serialize(ClientRuntime.BodyMiddleware<ListPlansInput, ListPlansOutput, SmithyCBOR.Writer>(rootNodeInfo: "", inputWritingClosure: ListPlansInput.write(value:to:)))
        builder.interceptors.add(ClientRuntime.MutateHeadersMiddleware<ListPlansInput, ListPlansOutput>(overrides: ["smithy-protocol": "rpc-v2-cbor", "Accept": "application/cbor"]))
        builder.interceptors.add(ClientRuntime.CborValidateResponseHeaderMiddleware<ListPlansInput, ListPlansOutput>())
        builder.interceptors.add(ClientRuntime.ContentTypeMiddleware<ListPlansInput, ListPlansOutput>(contentType: "application/cbor"))
        builder.interceptors.add(ClientRuntime.ContentLengthMiddleware<ListPlansInput, ListPlansOutput>())
        builder.selectAuthScheme(ClientRuntime.AuthSchemeMiddleware<ListPlansOutput>())
        builder.interceptors.add(AWSClientRuntime.AmzSdkInvocationIdMiddleware<ListPlansInput, ListPlansOutput>())
        builder.interceptors.add(AWSClientRuntime.AmzSdkRequestMiddleware<ListPlansInput, ListPlansOutput>(maxRetries: config.retryStrategyOptions.maxRetriesBase))
        builder.interceptors.add(AWSClientRuntime.UserAgentMiddleware<ListPlansInput, ListPlansOutput>(serviceID: serviceName, version: ARCRegionswitchClient.version, config: config))
        var metricsAttributes = Smithy.Attributes()
        metricsAttributes.set(key: ClientRuntime.OrchestratorMetricsAttributesKeys.service, value: "ARCRegionswitch")
        metricsAttributes.set(key: ClientRuntime.OrchestratorMetricsAttributesKeys.method, value: "ListPlans")
        let op = builder.attributes(context)
            .telemetry(ClientRuntime.OrchestratorTelemetry(
                telemetryProvider: config.telemetryProvider,
                metricsAttributes: metricsAttributes,
                meterScope: serviceName,
                tracerScope: serviceName
            ))
            .executeRequest(client)
            .build()
        return try await op.execute(input: input)
    }

    /// Performs the `ListPlansInRegion` operation on the `ARCRegionswitch` service.
    ///
    /// Lists all Region switch plans in your Amazon Web Services account that are available in the current Amazon Web Services Region.
    ///
    /// - Parameter ListPlansInRegionInput : [no documentation found]
    ///
    /// - Returns: `ListPlansInRegionOutput` : [no documentation found]
    ///
    /// - Throws: One of the exceptions listed below __Possible Exceptions__.
    ///
    /// __Possible Exceptions:__
    /// - `AccessDeniedException` : You do not have sufficient access to perform this action. HTTP Status Code: 403
    public func listPlansInRegion(input: ListPlansInRegionInput) async throws -> ListPlansInRegionOutput {
        let context = Smithy.ContextBuilder()
                      .withMethod(value: .post)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "listPlansInRegion")
                      .withUnsignedPayloadTrait(value: false)
                      .withSmithyDefaultConfig(config)
                      .withIdentityResolver(value: config.awsCredentialIdentityResolver, schemeID: "aws.auth#sigv4a")
                      .withRegion(value: config.region)
                      .withRequestChecksumCalculation(value: config.requestChecksumCalculation)
                      .withResponseChecksumValidation(value: config.responseChecksumValidation)
                      .withSigningName(value: "arc-region-switch")
                      .withSigningRegion(value: config.signingRegion)
                      .build()
        let builder = ClientRuntime.OrchestratorBuilder<ListPlansInRegionInput, ListPlansInRegionOutput, SmithyHTTPAPI.HTTPRequest, SmithyHTTPAPI.HTTPResponse>()
        config.interceptorProviders.forEach { provider in
            builder.interceptors.add(provider.create())
        }
        config.httpInterceptorProviders.forEach { provider in
            builder.interceptors.add(provider.create())
        }
        builder.interceptors.add(ClientRuntime.URLPathMiddleware<ListPlansInRegionInput, ListPlansInRegionOutput>(ListPlansInRegionInput.urlPathProvider(_:)))
        builder.interceptors.add(ClientRuntime.URLHostMiddleware<ListPlansInRegionInput, ListPlansInRegionOutput>())
        builder.interceptors.add(ClientRuntime.ContentTypeMiddleware<ListPlansInRegionInput, ListPlansInRegionOutput>(contentType: "application/cbor"))
        builder.interceptors.add(ClientRuntime.ContentLengthMiddleware<ListPlansInRegionInput, ListPlansInRegionOutput>())
        builder.deserialize(ClientRuntime.DeserializeMiddleware<ListPlansInRegionOutput>(ListPlansInRegionOutput.httpOutput(from:), ListPlansInRegionOutputError.httpError(from:)))
        builder.interceptors.add(ClientRuntime.LoggerMiddleware<ListPlansInRegionInput, ListPlansInRegionOutput>(clientLogMode: config.clientLogMode))
        builder.clockSkewProvider(ClientRuntime.DefaultClockSkewProvider.provider())
        builder.retryStrategy(SmithyRetries.DefaultRetryStrategy(options: config.retryStrategyOptions))
        builder.retryErrorInfoProvider(ClientRuntime.DefaultRetryErrorInfoProvider.errorInfo(for:))
        builder.applySigner(ClientRuntime.SignerMiddleware<ListPlansInRegionOutput>())
        let configuredEndpoint = try config.endpoint ?? AWSClientRuntime.AWSClientConfigDefaultsProvider.configuredEndpoint("ARC Region switch", config.ignoreConfiguredEndpointURLs)
        let endpointParamsBlock = { [config] (context: Smithy.Context) in
            EndpointParams(endpoint: configuredEndpoint, region: config.region, useFIPS: config.useFIPS ?? false)
        }
        builder.applyEndpoint(AWSClientRuntime.AWSEndpointResolverMiddleware<ListPlansInRegionOutput, EndpointParams>(paramsBlock: endpointParamsBlock, resolverBlock: { [config] in try config.endpointResolver.resolve(params: $0) }))
        builder.serialize(ClientRuntime.BodyMiddleware<ListPlansInRegionInput, ListPlansInRegionOutput, SmithyCBOR.Writer>(rootNodeInfo: "", inputWritingClosure: ListPlansInRegionInput.write(value:to:)))
        builder.interceptors.add(ClientRuntime.MutateHeadersMiddleware<ListPlansInRegionInput, ListPlansInRegionOutput>(overrides: ["smithy-protocol": "rpc-v2-cbor", "Accept": "application/cbor"]))
        builder.interceptors.add(ClientRuntime.CborValidateResponseHeaderMiddleware<ListPlansInRegionInput, ListPlansInRegionOutput>())
        builder.interceptors.add(ClientRuntime.ContentTypeMiddleware<ListPlansInRegionInput, ListPlansInRegionOutput>(contentType: "application/cbor"))
        builder.interceptors.add(ClientRuntime.ContentLengthMiddleware<ListPlansInRegionInput, ListPlansInRegionOutput>())
        builder.selectAuthScheme(ClientRuntime.AuthSchemeMiddleware<ListPlansInRegionOutput>())
        builder.interceptors.add(AWSClientRuntime.AmzSdkInvocationIdMiddleware<ListPlansInRegionInput, ListPlansInRegionOutput>())
        builder.interceptors.add(AWSClientRuntime.AmzSdkRequestMiddleware<ListPlansInRegionInput, ListPlansInRegionOutput>(maxRetries: config.retryStrategyOptions.maxRetriesBase))
        builder.interceptors.add(AWSClientRuntime.UserAgentMiddleware<ListPlansInRegionInput, ListPlansInRegionOutput>(serviceID: serviceName, version: ARCRegionswitchClient.version, config: config))
        var metricsAttributes = Smithy.Attributes()
        metricsAttributes.set(key: ClientRuntime.OrchestratorMetricsAttributesKeys.service, value: "ARCRegionswitch")
        metricsAttributes.set(key: ClientRuntime.OrchestratorMetricsAttributesKeys.method, value: "ListPlansInRegion")
        let op = builder.attributes(context)
            .telemetry(ClientRuntime.OrchestratorTelemetry(
                telemetryProvider: config.telemetryProvider,
                metricsAttributes: metricsAttributes,
                meterScope: serviceName,
                tracerScope: serviceName
            ))
            .executeRequest(client)
            .build()
        return try await op.execute(input: input)
    }

    /// Performs the `ListRoute53HealthChecks` operation on the `ARCRegionswitch` service.
    ///
    /// List the Amazon Route 53 health checks.
    ///
    /// - Parameter ListRoute53HealthChecksInput : [no documentation found]
    ///
    /// - Returns: `ListRoute53HealthChecksOutput` : [no documentation found]
    ///
    /// - Throws: One of the exceptions listed below __Possible Exceptions__.
    ///
    /// __Possible Exceptions:__
    /// - `AccessDeniedException` : You do not have sufficient access to perform this action. HTTP Status Code: 403
    /// - `InternalServerException` : The request processing has failed because of an unknown error, exception, or failure. HTTP Status Code: 500
    /// - `ResourceNotFoundException` : The specified resource was not found. HTTP Status Code: 404
    public func listRoute53HealthChecks(input: ListRoute53HealthChecksInput) async throws -> ListRoute53HealthChecksOutput {
        let context = Smithy.ContextBuilder()
                      .withMethod(value: .post)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "listRoute53HealthChecks")
                      .withUnsignedPayloadTrait(value: false)
                      .withSmithyDefaultConfig(config)
                      .withIdentityResolver(value: config.awsCredentialIdentityResolver, schemeID: "aws.auth#sigv4a")
                      .withRegion(value: config.region)
                      .withRequestChecksumCalculation(value: config.requestChecksumCalculation)
                      .withResponseChecksumValidation(value: config.responseChecksumValidation)
                      .withSigningName(value: "arc-region-switch")
                      .withSigningRegion(value: config.signingRegion)
                      .build()
        let builder = ClientRuntime.OrchestratorBuilder<ListRoute53HealthChecksInput, ListRoute53HealthChecksOutput, SmithyHTTPAPI.HTTPRequest, SmithyHTTPAPI.HTTPResponse>()
        config.interceptorProviders.forEach { provider in
            builder.interceptors.add(provider.create())
        }
        config.httpInterceptorProviders.forEach { provider in
            builder.interceptors.add(provider.create())
        }
        builder.interceptors.add(ClientRuntime.URLPathMiddleware<ListRoute53HealthChecksInput, ListRoute53HealthChecksOutput>(ListRoute53HealthChecksInput.urlPathProvider(_:)))
        builder.interceptors.add(ClientRuntime.URLHostMiddleware<ListRoute53HealthChecksInput, ListRoute53HealthChecksOutput>())
        builder.interceptors.add(ClientRuntime.ContentTypeMiddleware<ListRoute53HealthChecksInput, ListRoute53HealthChecksOutput>(contentType: "application/cbor"))
        builder.interceptors.add(ClientRuntime.ContentLengthMiddleware<ListRoute53HealthChecksInput, ListRoute53HealthChecksOutput>())
        builder.deserialize(ClientRuntime.DeserializeMiddleware<ListRoute53HealthChecksOutput>(ListRoute53HealthChecksOutput.httpOutput(from:), ListRoute53HealthChecksOutputError.httpError(from:)))
        builder.interceptors.add(ClientRuntime.LoggerMiddleware<ListRoute53HealthChecksInput, ListRoute53HealthChecksOutput>(clientLogMode: config.clientLogMode))
        builder.clockSkewProvider(ClientRuntime.DefaultClockSkewProvider.provider())
        builder.retryStrategy(SmithyRetries.DefaultRetryStrategy(options: config.retryStrategyOptions))
        builder.retryErrorInfoProvider(ClientRuntime.DefaultRetryErrorInfoProvider.errorInfo(for:))
        builder.applySigner(ClientRuntime.SignerMiddleware<ListRoute53HealthChecksOutput>())
        let configuredEndpoint = try config.endpoint ?? AWSClientRuntime.AWSClientConfigDefaultsProvider.configuredEndpoint("ARC Region switch", config.ignoreConfiguredEndpointURLs)
        let endpointParamsBlock = { [config] (context: Smithy.Context) in
            EndpointParams(endpoint: configuredEndpoint, region: config.region, useControlPlaneEndpoint: true, useFIPS: config.useFIPS ?? false)
        }
        builder.applyEndpoint(AWSClientRuntime.AWSEndpointResolverMiddleware<ListRoute53HealthChecksOutput, EndpointParams>(paramsBlock: endpointParamsBlock, resolverBlock: { [config] in try config.endpointResolver.resolve(params: $0) }))
        builder.serialize(ClientRuntime.BodyMiddleware<ListRoute53HealthChecksInput, ListRoute53HealthChecksOutput, SmithyCBOR.Writer>(rootNodeInfo: "", inputWritingClosure: ListRoute53HealthChecksInput.write(value:to:)))
        builder.interceptors.add(ClientRuntime.MutateHeadersMiddleware<ListRoute53HealthChecksInput, ListRoute53HealthChecksOutput>(overrides: ["smithy-protocol": "rpc-v2-cbor", "Accept": "application/cbor"]))
        builder.interceptors.add(ClientRuntime.CborValidateResponseHeaderMiddleware<ListRoute53HealthChecksInput, ListRoute53HealthChecksOutput>())
        builder.interceptors.add(ClientRuntime.ContentTypeMiddleware<ListRoute53HealthChecksInput, ListRoute53HealthChecksOutput>(contentType: "application/cbor"))
        builder.interceptors.add(ClientRuntime.ContentLengthMiddleware<ListRoute53HealthChecksInput, ListRoute53HealthChecksOutput>())
        builder.selectAuthScheme(ClientRuntime.AuthSchemeMiddleware<ListRoute53HealthChecksOutput>())
        builder.interceptors.add(AWSClientRuntime.AmzSdkInvocationIdMiddleware<ListRoute53HealthChecksInput, ListRoute53HealthChecksOutput>())
        builder.interceptors.add(AWSClientRuntime.AmzSdkRequestMiddleware<ListRoute53HealthChecksInput, ListRoute53HealthChecksOutput>(maxRetries: config.retryStrategyOptions.maxRetriesBase))
        builder.interceptors.add(AWSClientRuntime.UserAgentMiddleware<ListRoute53HealthChecksInput, ListRoute53HealthChecksOutput>(serviceID: serviceName, version: ARCRegionswitchClient.version, config: config))
        var metricsAttributes = Smithy.Attributes()
        metricsAttributes.set(key: ClientRuntime.OrchestratorMetricsAttributesKeys.service, value: "ARCRegionswitch")
        metricsAttributes.set(key: ClientRuntime.OrchestratorMetricsAttributesKeys.method, value: "ListRoute53HealthChecks")
        let op = builder.attributes(context)
            .telemetry(ClientRuntime.OrchestratorTelemetry(
                telemetryProvider: config.telemetryProvider,
                metricsAttributes: metricsAttributes,
                meterScope: serviceName,
                tracerScope: serviceName
            ))
            .executeRequest(client)
            .build()
        return try await op.execute(input: input)
    }

    /// Performs the `ListTagsForResource` operation on the `ARCRegionswitch` service.
    ///
    /// Lists the tags attached to a Region switch resource.
    ///
    /// - Parameter ListTagsForResourceInput : [no documentation found]
    ///
    /// - Returns: `ListTagsForResourceOutput` : [no documentation found]
    ///
    /// - Throws: One of the exceptions listed below __Possible Exceptions__.
    ///
    /// __Possible Exceptions:__
    /// - `InternalServerException` : The request processing has failed because of an unknown error, exception, or failure. HTTP Status Code: 500
    /// - `ResourceNotFoundException` : The specified resource was not found. HTTP Status Code: 404
    public func listTagsForResource(input: ListTagsForResourceInput) async throws -> ListTagsForResourceOutput {
        let context = Smithy.ContextBuilder()
                      .withMethod(value: .post)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "listTagsForResource")
                      .withUnsignedPayloadTrait(value: false)
                      .withSmithyDefaultConfig(config)
                      .withIdentityResolver(value: config.awsCredentialIdentityResolver, schemeID: "aws.auth#sigv4a")
                      .withRegion(value: config.region)
                      .withRequestChecksumCalculation(value: config.requestChecksumCalculation)
                      .withResponseChecksumValidation(value: config.responseChecksumValidation)
                      .withSigningName(value: "arc-region-switch")
                      .withSigningRegion(value: config.signingRegion)
                      .build()
        let builder = ClientRuntime.OrchestratorBuilder<ListTagsForResourceInput, ListTagsForResourceOutput, SmithyHTTPAPI.HTTPRequest, SmithyHTTPAPI.HTTPResponse>()
        config.interceptorProviders.forEach { provider in
            builder.interceptors.add(provider.create())
        }
        config.httpInterceptorProviders.forEach { provider in
            builder.interceptors.add(provider.create())
        }
        builder.interceptors.add(ClientRuntime.URLPathMiddleware<ListTagsForResourceInput, ListTagsForResourceOutput>(ListTagsForResourceInput.urlPathProvider(_:)))
        builder.interceptors.add(ClientRuntime.URLHostMiddleware<ListTagsForResourceInput, ListTagsForResourceOutput>())
        builder.interceptors.add(ClientRuntime.ContentTypeMiddleware<ListTagsForResourceInput, ListTagsForResourceOutput>(contentType: "application/cbor"))
        builder.interceptors.add(ClientRuntime.ContentLengthMiddleware<ListTagsForResourceInput, ListTagsForResourceOutput>())
        builder.deserialize(ClientRuntime.DeserializeMiddleware<ListTagsForResourceOutput>(ListTagsForResourceOutput.httpOutput(from:), ListTagsForResourceOutputError.httpError(from:)))
        builder.interceptors.add(ClientRuntime.LoggerMiddleware<ListTagsForResourceInput, ListTagsForResourceOutput>(clientLogMode: config.clientLogMode))
        builder.clockSkewProvider(ClientRuntime.DefaultClockSkewProvider.provider())
        builder.retryStrategy(SmithyRetries.DefaultRetryStrategy(options: config.retryStrategyOptions))
        builder.retryErrorInfoProvider(ClientRuntime.DefaultRetryErrorInfoProvider.errorInfo(for:))
        builder.applySigner(ClientRuntime.SignerMiddleware<ListTagsForResourceOutput>())
        let configuredEndpoint = try config.endpoint ?? AWSClientRuntime.AWSClientConfigDefaultsProvider.configuredEndpoint("ARC Region switch", config.ignoreConfiguredEndpointURLs)
        let endpointParamsBlock = { [config] (context: Smithy.Context) in
            EndpointParams(endpoint: configuredEndpoint, region: config.region, useControlPlaneEndpoint: true, useFIPS: config.useFIPS ?? false)
        }
        builder.applyEndpoint(AWSClientRuntime.AWSEndpointResolverMiddleware<ListTagsForResourceOutput, EndpointParams>(paramsBlock: endpointParamsBlock, resolverBlock: { [config] in try config.endpointResolver.resolve(params: $0) }))
        builder.serialize(ClientRuntime.BodyMiddleware<ListTagsForResourceInput, ListTagsForResourceOutput, SmithyCBOR.Writer>(rootNodeInfo: "", inputWritingClosure: ListTagsForResourceInput.write(value:to:)))
        builder.interceptors.add(ClientRuntime.MutateHeadersMiddleware<ListTagsForResourceInput, ListTagsForResourceOutput>(overrides: ["smithy-protocol": "rpc-v2-cbor", "Accept": "application/cbor"]))
        builder.interceptors.add(ClientRuntime.CborValidateResponseHeaderMiddleware<ListTagsForResourceInput, ListTagsForResourceOutput>())
        builder.interceptors.add(ClientRuntime.ContentTypeMiddleware<ListTagsForResourceInput, ListTagsForResourceOutput>(contentType: "application/cbor"))
        builder.interceptors.add(ClientRuntime.ContentLengthMiddleware<ListTagsForResourceInput, ListTagsForResourceOutput>())
        builder.selectAuthScheme(ClientRuntime.AuthSchemeMiddleware<ListTagsForResourceOutput>())
        builder.interceptors.add(AWSClientRuntime.AmzSdkInvocationIdMiddleware<ListTagsForResourceInput, ListTagsForResourceOutput>())
        builder.interceptors.add(AWSClientRuntime.AmzSdkRequestMiddleware<ListTagsForResourceInput, ListTagsForResourceOutput>(maxRetries: config.retryStrategyOptions.maxRetriesBase))
        builder.interceptors.add(AWSClientRuntime.UserAgentMiddleware<ListTagsForResourceInput, ListTagsForResourceOutput>(serviceID: serviceName, version: ARCRegionswitchClient.version, config: config))
        var metricsAttributes = Smithy.Attributes()
        metricsAttributes.set(key: ClientRuntime.OrchestratorMetricsAttributesKeys.service, value: "ARCRegionswitch")
        metricsAttributes.set(key: ClientRuntime.OrchestratorMetricsAttributesKeys.method, value: "ListTagsForResource")
        let op = builder.attributes(context)
            .telemetry(ClientRuntime.OrchestratorTelemetry(
                telemetryProvider: config.telemetryProvider,
                metricsAttributes: metricsAttributes,
                meterScope: serviceName,
                tracerScope: serviceName
            ))
            .executeRequest(client)
            .build()
        return try await op.execute(input: input)
    }

    /// Performs the `StartPlanExecution` operation on the `ARCRegionswitch` service.
    ///
    /// Starts the execution of a Region switch plan. You can execute a plan in either PRACTICE or RECOVERY mode. In PRACTICE mode, the execution simulates the steps without making actual changes to your application's traffic routing. In RECOVERY mode, the execution performs actual changes to shift traffic between Regions.
    ///
    /// - Parameter StartPlanExecutionInput : [no documentation found]
    ///
    /// - Returns: `StartPlanExecutionOutput` : [no documentation found]
    ///
    /// - Throws: One of the exceptions listed below __Possible Exceptions__.
    ///
    /// __Possible Exceptions:__
    /// - `AccessDeniedException` : You do not have sufficient access to perform this action. HTTP Status Code: 403
    /// - `IllegalArgumentException` : The request processing has an invalid argument.
    /// - `IllegalStateException` : The operation failed because the current state of the resource doesn't allow the operation to proceed. HTTP Status Code: 400
    /// - `ResourceNotFoundException` : The specified resource was not found. HTTP Status Code: 404
    public func startPlanExecution(input: StartPlanExecutionInput) async throws -> StartPlanExecutionOutput {
        let context = Smithy.ContextBuilder()
                      .withMethod(value: .post)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "startPlanExecution")
                      .withUnsignedPayloadTrait(value: false)
                      .withSmithyDefaultConfig(config)
                      .withIdentityResolver(value: config.awsCredentialIdentityResolver, schemeID: "aws.auth#sigv4a")
                      .withRegion(value: config.region)
                      .withRequestChecksumCalculation(value: config.requestChecksumCalculation)
                      .withResponseChecksumValidation(value: config.responseChecksumValidation)
                      .withSigningName(value: "arc-region-switch")
                      .withSigningRegion(value: config.signingRegion)
                      .build()
        let builder = ClientRuntime.OrchestratorBuilder<StartPlanExecutionInput, StartPlanExecutionOutput, SmithyHTTPAPI.HTTPRequest, SmithyHTTPAPI.HTTPResponse>()
        config.interceptorProviders.forEach { provider in
            builder.interceptors.add(provider.create())
        }
        config.httpInterceptorProviders.forEach { provider in
            builder.interceptors.add(provider.create())
        }
        builder.interceptors.add(ClientRuntime.URLPathMiddleware<StartPlanExecutionInput, StartPlanExecutionOutput>(StartPlanExecutionInput.urlPathProvider(_:)))
        builder.interceptors.add(ClientRuntime.URLHostMiddleware<StartPlanExecutionInput, StartPlanExecutionOutput>())
        builder.interceptors.add(ClientRuntime.ContentTypeMiddleware<StartPlanExecutionInput, StartPlanExecutionOutput>(contentType: "application/cbor"))
        builder.interceptors.add(ClientRuntime.ContentLengthMiddleware<StartPlanExecutionInput, StartPlanExecutionOutput>())
        builder.deserialize(ClientRuntime.DeserializeMiddleware<StartPlanExecutionOutput>(StartPlanExecutionOutput.httpOutput(from:), StartPlanExecutionOutputError.httpError(from:)))
        builder.interceptors.add(ClientRuntime.LoggerMiddleware<StartPlanExecutionInput, StartPlanExecutionOutput>(clientLogMode: config.clientLogMode))
        builder.clockSkewProvider(ClientRuntime.DefaultClockSkewProvider.provider())
        builder.retryStrategy(SmithyRetries.DefaultRetryStrategy(options: config.retryStrategyOptions))
        builder.retryErrorInfoProvider(ClientRuntime.DefaultRetryErrorInfoProvider.errorInfo(for:))
        builder.applySigner(ClientRuntime.SignerMiddleware<StartPlanExecutionOutput>())
        let configuredEndpoint = try config.endpoint ?? AWSClientRuntime.AWSClientConfigDefaultsProvider.configuredEndpoint("ARC Region switch", config.ignoreConfiguredEndpointURLs)
        let endpointParamsBlock = { [config] (context: Smithy.Context) in
            EndpointParams(endpoint: configuredEndpoint, region: config.region, useFIPS: config.useFIPS ?? false)
        }
        builder.applyEndpoint(AWSClientRuntime.AWSEndpointResolverMiddleware<StartPlanExecutionOutput, EndpointParams>(paramsBlock: endpointParamsBlock, resolverBlock: { [config] in try config.endpointResolver.resolve(params: $0) }))
        builder.serialize(ClientRuntime.BodyMiddleware<StartPlanExecutionInput, StartPlanExecutionOutput, SmithyCBOR.Writer>(rootNodeInfo: "", inputWritingClosure: StartPlanExecutionInput.write(value:to:)))
        builder.interceptors.add(ClientRuntime.MutateHeadersMiddleware<StartPlanExecutionInput, StartPlanExecutionOutput>(overrides: ["smithy-protocol": "rpc-v2-cbor", "Accept": "application/cbor"]))
        builder.interceptors.add(ClientRuntime.CborValidateResponseHeaderMiddleware<StartPlanExecutionInput, StartPlanExecutionOutput>())
        builder.interceptors.add(ClientRuntime.ContentTypeMiddleware<StartPlanExecutionInput, StartPlanExecutionOutput>(contentType: "application/cbor"))
        builder.interceptors.add(ClientRuntime.ContentLengthMiddleware<StartPlanExecutionInput, StartPlanExecutionOutput>())
        builder.selectAuthScheme(ClientRuntime.AuthSchemeMiddleware<StartPlanExecutionOutput>())
        builder.interceptors.add(AWSClientRuntime.AmzSdkInvocationIdMiddleware<StartPlanExecutionInput, StartPlanExecutionOutput>())
        builder.interceptors.add(AWSClientRuntime.AmzSdkRequestMiddleware<StartPlanExecutionInput, StartPlanExecutionOutput>(maxRetries: config.retryStrategyOptions.maxRetriesBase))
        builder.interceptors.add(AWSClientRuntime.UserAgentMiddleware<StartPlanExecutionInput, StartPlanExecutionOutput>(serviceID: serviceName, version: ARCRegionswitchClient.version, config: config))
        var metricsAttributes = Smithy.Attributes()
        metricsAttributes.set(key: ClientRuntime.OrchestratorMetricsAttributesKeys.service, value: "ARCRegionswitch")
        metricsAttributes.set(key: ClientRuntime.OrchestratorMetricsAttributesKeys.method, value: "StartPlanExecution")
        let op = builder.attributes(context)
            .telemetry(ClientRuntime.OrchestratorTelemetry(
                telemetryProvider: config.telemetryProvider,
                metricsAttributes: metricsAttributes,
                meterScope: serviceName,
                tracerScope: serviceName
            ))
            .executeRequest(client)
            .build()
        return try await op.execute(input: input)
    }

    /// Performs the `TagResource` operation on the `ARCRegionswitch` service.
    ///
    /// Adds or updates tags for a Region switch resource. You can assign metadata to your resources in the form of tags, which are key-value pairs.
    ///
    /// - Parameter TagResourceInput : [no documentation found]
    ///
    /// - Returns: `TagResourceOutput` : [no documentation found]
    ///
    /// - Throws: One of the exceptions listed below __Possible Exceptions__.
    ///
    /// __Possible Exceptions:__
    /// - `InternalServerException` : The request processing has failed because of an unknown error, exception, or failure. HTTP Status Code: 500
    /// - `ResourceNotFoundException` : The specified resource was not found. HTTP Status Code: 404
    public func tagResource(input: TagResourceInput) async throws -> TagResourceOutput {
        let context = Smithy.ContextBuilder()
                      .withMethod(value: .post)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "tagResource")
                      .withUnsignedPayloadTrait(value: false)
                      .withSmithyDefaultConfig(config)
                      .withIdentityResolver(value: config.awsCredentialIdentityResolver, schemeID: "aws.auth#sigv4a")
                      .withRegion(value: config.region)
                      .withRequestChecksumCalculation(value: config.requestChecksumCalculation)
                      .withResponseChecksumValidation(value: config.responseChecksumValidation)
                      .withSigningName(value: "arc-region-switch")
                      .withSigningRegion(value: config.signingRegion)
                      .build()
        let builder = ClientRuntime.OrchestratorBuilder<TagResourceInput, TagResourceOutput, SmithyHTTPAPI.HTTPRequest, SmithyHTTPAPI.HTTPResponse>()
        config.interceptorProviders.forEach { provider in
            builder.interceptors.add(provider.create())
        }
        config.httpInterceptorProviders.forEach { provider in
            builder.interceptors.add(provider.create())
        }
        builder.interceptors.add(ClientRuntime.URLPathMiddleware<TagResourceInput, TagResourceOutput>(TagResourceInput.urlPathProvider(_:)))
        builder.interceptors.add(ClientRuntime.URLHostMiddleware<TagResourceInput, TagResourceOutput>())
        builder.interceptors.add(ClientRuntime.ContentTypeMiddleware<TagResourceInput, TagResourceOutput>(contentType: "application/cbor"))
        builder.interceptors.add(ClientRuntime.ContentLengthMiddleware<TagResourceInput, TagResourceOutput>())
        builder.deserialize(ClientRuntime.DeserializeMiddleware<TagResourceOutput>(TagResourceOutput.httpOutput(from:), TagResourceOutputError.httpError(from:)))
        builder.interceptors.add(ClientRuntime.LoggerMiddleware<TagResourceInput, TagResourceOutput>(clientLogMode: config.clientLogMode))
        builder.clockSkewProvider(ClientRuntime.DefaultClockSkewProvider.provider())
        builder.retryStrategy(SmithyRetries.DefaultRetryStrategy(options: config.retryStrategyOptions))
        builder.retryErrorInfoProvider(ClientRuntime.DefaultRetryErrorInfoProvider.errorInfo(for:))
        builder.applySigner(ClientRuntime.SignerMiddleware<TagResourceOutput>())
        let configuredEndpoint = try config.endpoint ?? AWSClientRuntime.AWSClientConfigDefaultsProvider.configuredEndpoint("ARC Region switch", config.ignoreConfiguredEndpointURLs)
        let endpointParamsBlock = { [config] (context: Smithy.Context) in
            EndpointParams(endpoint: configuredEndpoint, region: config.region, useControlPlaneEndpoint: true, useFIPS: config.useFIPS ?? false)
        }
        builder.applyEndpoint(AWSClientRuntime.AWSEndpointResolverMiddleware<TagResourceOutput, EndpointParams>(paramsBlock: endpointParamsBlock, resolverBlock: { [config] in try config.endpointResolver.resolve(params: $0) }))
        builder.serialize(ClientRuntime.BodyMiddleware<TagResourceInput, TagResourceOutput, SmithyCBOR.Writer>(rootNodeInfo: "", inputWritingClosure: TagResourceInput.write(value:to:)))
        builder.interceptors.add(ClientRuntime.MutateHeadersMiddleware<TagResourceInput, TagResourceOutput>(overrides: ["smithy-protocol": "rpc-v2-cbor", "Accept": "application/cbor"]))
        builder.interceptors.add(ClientRuntime.CborValidateResponseHeaderMiddleware<TagResourceInput, TagResourceOutput>())
        builder.interceptors.add(ClientRuntime.ContentTypeMiddleware<TagResourceInput, TagResourceOutput>(contentType: "application/cbor"))
        builder.interceptors.add(ClientRuntime.ContentLengthMiddleware<TagResourceInput, TagResourceOutput>())
        builder.selectAuthScheme(ClientRuntime.AuthSchemeMiddleware<TagResourceOutput>())
        builder.interceptors.add(AWSClientRuntime.AmzSdkInvocationIdMiddleware<TagResourceInput, TagResourceOutput>())
        builder.interceptors.add(AWSClientRuntime.AmzSdkRequestMiddleware<TagResourceInput, TagResourceOutput>(maxRetries: config.retryStrategyOptions.maxRetriesBase))
        builder.interceptors.add(AWSClientRuntime.UserAgentMiddleware<TagResourceInput, TagResourceOutput>(serviceID: serviceName, version: ARCRegionswitchClient.version, config: config))
        var metricsAttributes = Smithy.Attributes()
        metricsAttributes.set(key: ClientRuntime.OrchestratorMetricsAttributesKeys.service, value: "ARCRegionswitch")
        metricsAttributes.set(key: ClientRuntime.OrchestratorMetricsAttributesKeys.method, value: "TagResource")
        let op = builder.attributes(context)
            .telemetry(ClientRuntime.OrchestratorTelemetry(
                telemetryProvider: config.telemetryProvider,
                metricsAttributes: metricsAttributes,
                meterScope: serviceName,
                tracerScope: serviceName
            ))
            .executeRequest(client)
            .build()
        return try await op.execute(input: input)
    }

    /// Performs the `UntagResource` operation on the `ARCRegionswitch` service.
    ///
    /// Removes tags from a Region switch resource.
    ///
    /// - Parameter UntagResourceInput : [no documentation found]
    ///
    /// - Returns: `UntagResourceOutput` : [no documentation found]
    ///
    /// - Throws: One of the exceptions listed below __Possible Exceptions__.
    ///
    /// __Possible Exceptions:__
    /// - `InternalServerException` : The request processing has failed because of an unknown error, exception, or failure. HTTP Status Code: 500
    /// - `ResourceNotFoundException` : The specified resource was not found. HTTP Status Code: 404
    public func untagResource(input: UntagResourceInput) async throws -> UntagResourceOutput {
        let context = Smithy.ContextBuilder()
                      .withMethod(value: .post)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "untagResource")
                      .withUnsignedPayloadTrait(value: false)
                      .withSmithyDefaultConfig(config)
                      .withIdentityResolver(value: config.awsCredentialIdentityResolver, schemeID: "aws.auth#sigv4a")
                      .withRegion(value: config.region)
                      .withRequestChecksumCalculation(value: config.requestChecksumCalculation)
                      .withResponseChecksumValidation(value: config.responseChecksumValidation)
                      .withSigningName(value: "arc-region-switch")
                      .withSigningRegion(value: config.signingRegion)
                      .build()
        let builder = ClientRuntime.OrchestratorBuilder<UntagResourceInput, UntagResourceOutput, SmithyHTTPAPI.HTTPRequest, SmithyHTTPAPI.HTTPResponse>()
        config.interceptorProviders.forEach { provider in
            builder.interceptors.add(provider.create())
        }
        config.httpInterceptorProviders.forEach { provider in
            builder.interceptors.add(provider.create())
        }
        builder.interceptors.add(ClientRuntime.URLPathMiddleware<UntagResourceInput, UntagResourceOutput>(UntagResourceInput.urlPathProvider(_:)))
        builder.interceptors.add(ClientRuntime.URLHostMiddleware<UntagResourceInput, UntagResourceOutput>())
        builder.interceptors.add(ClientRuntime.ContentTypeMiddleware<UntagResourceInput, UntagResourceOutput>(contentType: "application/cbor"))
        builder.interceptors.add(ClientRuntime.ContentLengthMiddleware<UntagResourceInput, UntagResourceOutput>())
        builder.deserialize(ClientRuntime.DeserializeMiddleware<UntagResourceOutput>(UntagResourceOutput.httpOutput(from:), UntagResourceOutputError.httpError(from:)))
        builder.interceptors.add(ClientRuntime.LoggerMiddleware<UntagResourceInput, UntagResourceOutput>(clientLogMode: config.clientLogMode))
        builder.clockSkewProvider(ClientRuntime.DefaultClockSkewProvider.provider())
        builder.retryStrategy(SmithyRetries.DefaultRetryStrategy(options: config.retryStrategyOptions))
        builder.retryErrorInfoProvider(ClientRuntime.DefaultRetryErrorInfoProvider.errorInfo(for:))
        builder.applySigner(ClientRuntime.SignerMiddleware<UntagResourceOutput>())
        let configuredEndpoint = try config.endpoint ?? AWSClientRuntime.AWSClientConfigDefaultsProvider.configuredEndpoint("ARC Region switch", config.ignoreConfiguredEndpointURLs)
        let endpointParamsBlock = { [config] (context: Smithy.Context) in
            EndpointParams(endpoint: configuredEndpoint, region: config.region, useControlPlaneEndpoint: true, useFIPS: config.useFIPS ?? false)
        }
        builder.applyEndpoint(AWSClientRuntime.AWSEndpointResolverMiddleware<UntagResourceOutput, EndpointParams>(paramsBlock: endpointParamsBlock, resolverBlock: { [config] in try config.endpointResolver.resolve(params: $0) }))
        builder.serialize(ClientRuntime.BodyMiddleware<UntagResourceInput, UntagResourceOutput, SmithyCBOR.Writer>(rootNodeInfo: "", inputWritingClosure: UntagResourceInput.write(value:to:)))
        builder.interceptors.add(ClientRuntime.MutateHeadersMiddleware<UntagResourceInput, UntagResourceOutput>(overrides: ["smithy-protocol": "rpc-v2-cbor", "Accept": "application/cbor"]))
        builder.interceptors.add(ClientRuntime.CborValidateResponseHeaderMiddleware<UntagResourceInput, UntagResourceOutput>())
        builder.interceptors.add(ClientRuntime.ContentTypeMiddleware<UntagResourceInput, UntagResourceOutput>(contentType: "application/cbor"))
        builder.interceptors.add(ClientRuntime.ContentLengthMiddleware<UntagResourceInput, UntagResourceOutput>())
        builder.selectAuthScheme(ClientRuntime.AuthSchemeMiddleware<UntagResourceOutput>())
        builder.interceptors.add(AWSClientRuntime.AmzSdkInvocationIdMiddleware<UntagResourceInput, UntagResourceOutput>())
        builder.interceptors.add(AWSClientRuntime.AmzSdkRequestMiddleware<UntagResourceInput, UntagResourceOutput>(maxRetries: config.retryStrategyOptions.maxRetriesBase))
        builder.interceptors.add(AWSClientRuntime.UserAgentMiddleware<UntagResourceInput, UntagResourceOutput>(serviceID: serviceName, version: ARCRegionswitchClient.version, config: config))
        var metricsAttributes = Smithy.Attributes()
        metricsAttributes.set(key: ClientRuntime.OrchestratorMetricsAttributesKeys.service, value: "ARCRegionswitch")
        metricsAttributes.set(key: ClientRuntime.OrchestratorMetricsAttributesKeys.method, value: "UntagResource")
        let op = builder.attributes(context)
            .telemetry(ClientRuntime.OrchestratorTelemetry(
                telemetryProvider: config.telemetryProvider,
                metricsAttributes: metricsAttributes,
                meterScope: serviceName,
                tracerScope: serviceName
            ))
            .executeRequest(client)
            .build()
        return try await op.execute(input: input)
    }

    /// Performs the `UpdatePlan` operation on the `ARCRegionswitch` service.
    ///
    /// Updates an existing Region switch plan. You can modify the plan's description, workflows, execution role, recovery time objective, associated alarms, and triggers.
    ///
    /// - Parameter UpdatePlanInput : [no documentation found]
    ///
    /// - Returns: `UpdatePlanOutput` : [no documentation found]
    ///
    /// - Throws: One of the exceptions listed below __Possible Exceptions__.
    ///
    /// __Possible Exceptions:__
    /// - `ResourceNotFoundException` : The specified resource was not found. HTTP Status Code: 404
    public func updatePlan(input: UpdatePlanInput) async throws -> UpdatePlanOutput {
        let context = Smithy.ContextBuilder()
                      .withMethod(value: .post)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "updatePlan")
                      .withUnsignedPayloadTrait(value: false)
                      .withSmithyDefaultConfig(config)
                      .withIdentityResolver(value: config.awsCredentialIdentityResolver, schemeID: "aws.auth#sigv4a")
                      .withRegion(value: config.region)
                      .withRequestChecksumCalculation(value: config.requestChecksumCalculation)
                      .withResponseChecksumValidation(value: config.responseChecksumValidation)
                      .withSigningName(value: "arc-region-switch")
                      .withSigningRegion(value: config.signingRegion)
                      .build()
        let builder = ClientRuntime.OrchestratorBuilder<UpdatePlanInput, UpdatePlanOutput, SmithyHTTPAPI.HTTPRequest, SmithyHTTPAPI.HTTPResponse>()
        config.interceptorProviders.forEach { provider in
            builder.interceptors.add(provider.create())
        }
        config.httpInterceptorProviders.forEach { provider in
            builder.interceptors.add(provider.create())
        }
        builder.interceptors.add(ClientRuntime.URLPathMiddleware<UpdatePlanInput, UpdatePlanOutput>(UpdatePlanInput.urlPathProvider(_:)))
        builder.interceptors.add(ClientRuntime.URLHostMiddleware<UpdatePlanInput, UpdatePlanOutput>())
        builder.interceptors.add(ClientRuntime.ContentTypeMiddleware<UpdatePlanInput, UpdatePlanOutput>(contentType: "application/cbor"))
        builder.interceptors.add(ClientRuntime.ContentLengthMiddleware<UpdatePlanInput, UpdatePlanOutput>())
        builder.deserialize(ClientRuntime.DeserializeMiddleware<UpdatePlanOutput>(UpdatePlanOutput.httpOutput(from:), UpdatePlanOutputError.httpError(from:)))
        builder.interceptors.add(ClientRuntime.LoggerMiddleware<UpdatePlanInput, UpdatePlanOutput>(clientLogMode: config.clientLogMode))
        builder.clockSkewProvider(ClientRuntime.DefaultClockSkewProvider.provider())
        builder.retryStrategy(SmithyRetries.DefaultRetryStrategy(options: config.retryStrategyOptions))
        builder.retryErrorInfoProvider(ClientRuntime.DefaultRetryErrorInfoProvider.errorInfo(for:))
        builder.applySigner(ClientRuntime.SignerMiddleware<UpdatePlanOutput>())
        let configuredEndpoint = try config.endpoint ?? AWSClientRuntime.AWSClientConfigDefaultsProvider.configuredEndpoint("ARC Region switch", config.ignoreConfiguredEndpointURLs)
        let endpointParamsBlock = { [config] (context: Smithy.Context) in
            EndpointParams(endpoint: configuredEndpoint, region: config.region, useControlPlaneEndpoint: true, useFIPS: config.useFIPS ?? false)
        }
        builder.applyEndpoint(AWSClientRuntime.AWSEndpointResolverMiddleware<UpdatePlanOutput, EndpointParams>(paramsBlock: endpointParamsBlock, resolverBlock: { [config] in try config.endpointResolver.resolve(params: $0) }))
        builder.serialize(ClientRuntime.BodyMiddleware<UpdatePlanInput, UpdatePlanOutput, SmithyCBOR.Writer>(rootNodeInfo: "", inputWritingClosure: UpdatePlanInput.write(value:to:)))
        builder.interceptors.add(ClientRuntime.MutateHeadersMiddleware<UpdatePlanInput, UpdatePlanOutput>(overrides: ["smithy-protocol": "rpc-v2-cbor", "Accept": "application/cbor"]))
        builder.interceptors.add(ClientRuntime.CborValidateResponseHeaderMiddleware<UpdatePlanInput, UpdatePlanOutput>())
        builder.interceptors.add(ClientRuntime.ContentTypeMiddleware<UpdatePlanInput, UpdatePlanOutput>(contentType: "application/cbor"))
        builder.interceptors.add(ClientRuntime.ContentLengthMiddleware<UpdatePlanInput, UpdatePlanOutput>())
        builder.selectAuthScheme(ClientRuntime.AuthSchemeMiddleware<UpdatePlanOutput>())
        builder.interceptors.add(AWSClientRuntime.AmzSdkInvocationIdMiddleware<UpdatePlanInput, UpdatePlanOutput>())
        builder.interceptors.add(AWSClientRuntime.AmzSdkRequestMiddleware<UpdatePlanInput, UpdatePlanOutput>(maxRetries: config.retryStrategyOptions.maxRetriesBase))
        builder.interceptors.add(AWSClientRuntime.UserAgentMiddleware<UpdatePlanInput, UpdatePlanOutput>(serviceID: serviceName, version: ARCRegionswitchClient.version, config: config))
        var metricsAttributes = Smithy.Attributes()
        metricsAttributes.set(key: ClientRuntime.OrchestratorMetricsAttributesKeys.service, value: "ARCRegionswitch")
        metricsAttributes.set(key: ClientRuntime.OrchestratorMetricsAttributesKeys.method, value: "UpdatePlan")
        let op = builder.attributes(context)
            .telemetry(ClientRuntime.OrchestratorTelemetry(
                telemetryProvider: config.telemetryProvider,
                metricsAttributes: metricsAttributes,
                meterScope: serviceName,
                tracerScope: serviceName
            ))
            .executeRequest(client)
            .build()
        return try await op.execute(input: input)
    }

    /// Performs the `UpdatePlanExecution` operation on the `ARCRegionswitch` service.
    ///
    /// Updates an in-progress plan execution. This operation allows you to modify certain aspects of the execution, such as adding a comment or changing the action.
    ///
    /// - Parameter UpdatePlanExecutionInput : [no documentation found]
    ///
    /// - Returns: `UpdatePlanExecutionOutput` : [no documentation found]
    ///
    /// - Throws: One of the exceptions listed below __Possible Exceptions__.
    ///
    /// __Possible Exceptions:__
    /// - `AccessDeniedException` : You do not have sufficient access to perform this action. HTTP Status Code: 403
    /// - `IllegalStateException` : The operation failed because the current state of the resource doesn't allow the operation to proceed. HTTP Status Code: 400
    /// - `ResourceNotFoundException` : The specified resource was not found. HTTP Status Code: 404
    public func updatePlanExecution(input: UpdatePlanExecutionInput) async throws -> UpdatePlanExecutionOutput {
        let context = Smithy.ContextBuilder()
                      .withMethod(value: .post)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "updatePlanExecution")
                      .withUnsignedPayloadTrait(value: false)
                      .withSmithyDefaultConfig(config)
                      .withIdentityResolver(value: config.awsCredentialIdentityResolver, schemeID: "aws.auth#sigv4a")
                      .withRegion(value: config.region)
                      .withRequestChecksumCalculation(value: config.requestChecksumCalculation)
                      .withResponseChecksumValidation(value: config.responseChecksumValidation)
                      .withSigningName(value: "arc-region-switch")
                      .withSigningRegion(value: config.signingRegion)
                      .build()
        let builder = ClientRuntime.OrchestratorBuilder<UpdatePlanExecutionInput, UpdatePlanExecutionOutput, SmithyHTTPAPI.HTTPRequest, SmithyHTTPAPI.HTTPResponse>()
        config.interceptorProviders.forEach { provider in
            builder.interceptors.add(provider.create())
        }
        config.httpInterceptorProviders.forEach { provider in
            builder.interceptors.add(provider.create())
        }
        builder.interceptors.add(ClientRuntime.URLPathMiddleware<UpdatePlanExecutionInput, UpdatePlanExecutionOutput>(UpdatePlanExecutionInput.urlPathProvider(_:)))
        builder.interceptors.add(ClientRuntime.URLHostMiddleware<UpdatePlanExecutionInput, UpdatePlanExecutionOutput>())
        builder.interceptors.add(ClientRuntime.ContentTypeMiddleware<UpdatePlanExecutionInput, UpdatePlanExecutionOutput>(contentType: "application/cbor"))
        builder.interceptors.add(ClientRuntime.ContentLengthMiddleware<UpdatePlanExecutionInput, UpdatePlanExecutionOutput>())
        builder.deserialize(ClientRuntime.DeserializeMiddleware<UpdatePlanExecutionOutput>(UpdatePlanExecutionOutput.httpOutput(from:), UpdatePlanExecutionOutputError.httpError(from:)))
        builder.interceptors.add(ClientRuntime.LoggerMiddleware<UpdatePlanExecutionInput, UpdatePlanExecutionOutput>(clientLogMode: config.clientLogMode))
        builder.clockSkewProvider(ClientRuntime.DefaultClockSkewProvider.provider())
        builder.retryStrategy(SmithyRetries.DefaultRetryStrategy(options: config.retryStrategyOptions))
        builder.retryErrorInfoProvider(ClientRuntime.DefaultRetryErrorInfoProvider.errorInfo(for:))
        builder.applySigner(ClientRuntime.SignerMiddleware<UpdatePlanExecutionOutput>())
        let configuredEndpoint = try config.endpoint ?? AWSClientRuntime.AWSClientConfigDefaultsProvider.configuredEndpoint("ARC Region switch", config.ignoreConfiguredEndpointURLs)
        let endpointParamsBlock = { [config] (context: Smithy.Context) in
            EndpointParams(endpoint: configuredEndpoint, region: config.region, useFIPS: config.useFIPS ?? false)
        }
        builder.applyEndpoint(AWSClientRuntime.AWSEndpointResolverMiddleware<UpdatePlanExecutionOutput, EndpointParams>(paramsBlock: endpointParamsBlock, resolverBlock: { [config] in try config.endpointResolver.resolve(params: $0) }))
        builder.serialize(ClientRuntime.BodyMiddleware<UpdatePlanExecutionInput, UpdatePlanExecutionOutput, SmithyCBOR.Writer>(rootNodeInfo: "", inputWritingClosure: UpdatePlanExecutionInput.write(value:to:)))
        builder.interceptors.add(ClientRuntime.MutateHeadersMiddleware<UpdatePlanExecutionInput, UpdatePlanExecutionOutput>(overrides: ["smithy-protocol": "rpc-v2-cbor", "Accept": "application/cbor"]))
        builder.interceptors.add(ClientRuntime.CborValidateResponseHeaderMiddleware<UpdatePlanExecutionInput, UpdatePlanExecutionOutput>())
        builder.interceptors.add(ClientRuntime.ContentTypeMiddleware<UpdatePlanExecutionInput, UpdatePlanExecutionOutput>(contentType: "application/cbor"))
        builder.interceptors.add(ClientRuntime.ContentLengthMiddleware<UpdatePlanExecutionInput, UpdatePlanExecutionOutput>())
        builder.selectAuthScheme(ClientRuntime.AuthSchemeMiddleware<UpdatePlanExecutionOutput>())
        builder.interceptors.add(AWSClientRuntime.AmzSdkInvocationIdMiddleware<UpdatePlanExecutionInput, UpdatePlanExecutionOutput>())
        builder.interceptors.add(AWSClientRuntime.AmzSdkRequestMiddleware<UpdatePlanExecutionInput, UpdatePlanExecutionOutput>(maxRetries: config.retryStrategyOptions.maxRetriesBase))
        builder.interceptors.add(AWSClientRuntime.UserAgentMiddleware<UpdatePlanExecutionInput, UpdatePlanExecutionOutput>(serviceID: serviceName, version: ARCRegionswitchClient.version, config: config))
        var metricsAttributes = Smithy.Attributes()
        metricsAttributes.set(key: ClientRuntime.OrchestratorMetricsAttributesKeys.service, value: "ARCRegionswitch")
        metricsAttributes.set(key: ClientRuntime.OrchestratorMetricsAttributesKeys.method, value: "UpdatePlanExecution")
        let op = builder.attributes(context)
            .telemetry(ClientRuntime.OrchestratorTelemetry(
                telemetryProvider: config.telemetryProvider,
                metricsAttributes: metricsAttributes,
                meterScope: serviceName,
                tracerScope: serviceName
            ))
            .executeRequest(client)
            .build()
        return try await op.execute(input: input)
    }

    /// Performs the `UpdatePlanExecutionStep` operation on the `ARCRegionswitch` service.
    ///
    /// Updates a specific step in an in-progress plan execution. This operation allows you to modify the step's comment or action.
    ///
    /// - Parameter UpdatePlanExecutionStepInput : [no documentation found]
    ///
    /// - Returns: `UpdatePlanExecutionStepOutput` : [no documentation found]
    ///
    /// - Throws: One of the exceptions listed below __Possible Exceptions__.
    ///
    /// __Possible Exceptions:__
    /// - `AccessDeniedException` : You do not have sufficient access to perform this action. HTTP Status Code: 403
    /// - `ResourceNotFoundException` : The specified resource was not found. HTTP Status Code: 404
    public func updatePlanExecutionStep(input: UpdatePlanExecutionStepInput) async throws -> UpdatePlanExecutionStepOutput {
        let context = Smithy.ContextBuilder()
                      .withMethod(value: .post)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "updatePlanExecutionStep")
                      .withUnsignedPayloadTrait(value: false)
                      .withSmithyDefaultConfig(config)
                      .withIdentityResolver(value: config.awsCredentialIdentityResolver, schemeID: "aws.auth#sigv4a")
                      .withRegion(value: config.region)
                      .withRequestChecksumCalculation(value: config.requestChecksumCalculation)
                      .withResponseChecksumValidation(value: config.responseChecksumValidation)
                      .withSigningName(value: "arc-region-switch")
                      .withSigningRegion(value: config.signingRegion)
                      .build()
        let builder = ClientRuntime.OrchestratorBuilder<UpdatePlanExecutionStepInput, UpdatePlanExecutionStepOutput, SmithyHTTPAPI.HTTPRequest, SmithyHTTPAPI.HTTPResponse>()
        config.interceptorProviders.forEach { provider in
            builder.interceptors.add(provider.create())
        }
        config.httpInterceptorProviders.forEach { provider in
            builder.interceptors.add(provider.create())
        }
        builder.interceptors.add(ClientRuntime.URLPathMiddleware<UpdatePlanExecutionStepInput, UpdatePlanExecutionStepOutput>(UpdatePlanExecutionStepInput.urlPathProvider(_:)))
        builder.interceptors.add(ClientRuntime.URLHostMiddleware<UpdatePlanExecutionStepInput, UpdatePlanExecutionStepOutput>())
        builder.interceptors.add(ClientRuntime.ContentTypeMiddleware<UpdatePlanExecutionStepInput, UpdatePlanExecutionStepOutput>(contentType: "application/cbor"))
        builder.interceptors.add(ClientRuntime.ContentLengthMiddleware<UpdatePlanExecutionStepInput, UpdatePlanExecutionStepOutput>())
        builder.deserialize(ClientRuntime.DeserializeMiddleware<UpdatePlanExecutionStepOutput>(UpdatePlanExecutionStepOutput.httpOutput(from:), UpdatePlanExecutionStepOutputError.httpError(from:)))
        builder.interceptors.add(ClientRuntime.LoggerMiddleware<UpdatePlanExecutionStepInput, UpdatePlanExecutionStepOutput>(clientLogMode: config.clientLogMode))
        builder.clockSkewProvider(ClientRuntime.DefaultClockSkewProvider.provider())
        builder.retryStrategy(SmithyRetries.DefaultRetryStrategy(options: config.retryStrategyOptions))
        builder.retryErrorInfoProvider(ClientRuntime.DefaultRetryErrorInfoProvider.errorInfo(for:))
        builder.applySigner(ClientRuntime.SignerMiddleware<UpdatePlanExecutionStepOutput>())
        let configuredEndpoint = try config.endpoint ?? AWSClientRuntime.AWSClientConfigDefaultsProvider.configuredEndpoint("ARC Region switch", config.ignoreConfiguredEndpointURLs)
        let endpointParamsBlock = { [config] (context: Smithy.Context) in
            EndpointParams(endpoint: configuredEndpoint, region: config.region, useFIPS: config.useFIPS ?? false)
        }
        builder.applyEndpoint(AWSClientRuntime.AWSEndpointResolverMiddleware<UpdatePlanExecutionStepOutput, EndpointParams>(paramsBlock: endpointParamsBlock, resolverBlock: { [config] in try config.endpointResolver.resolve(params: $0) }))
        builder.serialize(ClientRuntime.BodyMiddleware<UpdatePlanExecutionStepInput, UpdatePlanExecutionStepOutput, SmithyCBOR.Writer>(rootNodeInfo: "", inputWritingClosure: UpdatePlanExecutionStepInput.write(value:to:)))
        builder.interceptors.add(ClientRuntime.MutateHeadersMiddleware<UpdatePlanExecutionStepInput, UpdatePlanExecutionStepOutput>(overrides: ["smithy-protocol": "rpc-v2-cbor", "Accept": "application/cbor"]))
        builder.interceptors.add(ClientRuntime.CborValidateResponseHeaderMiddleware<UpdatePlanExecutionStepInput, UpdatePlanExecutionStepOutput>())
        builder.interceptors.add(ClientRuntime.ContentTypeMiddleware<UpdatePlanExecutionStepInput, UpdatePlanExecutionStepOutput>(contentType: "application/cbor"))
        builder.interceptors.add(ClientRuntime.ContentLengthMiddleware<UpdatePlanExecutionStepInput, UpdatePlanExecutionStepOutput>())
        builder.selectAuthScheme(ClientRuntime.AuthSchemeMiddleware<UpdatePlanExecutionStepOutput>())
        builder.interceptors.add(AWSClientRuntime.AmzSdkInvocationIdMiddleware<UpdatePlanExecutionStepInput, UpdatePlanExecutionStepOutput>())
        builder.interceptors.add(AWSClientRuntime.AmzSdkRequestMiddleware<UpdatePlanExecutionStepInput, UpdatePlanExecutionStepOutput>(maxRetries: config.retryStrategyOptions.maxRetriesBase))
        builder.interceptors.add(AWSClientRuntime.UserAgentMiddleware<UpdatePlanExecutionStepInput, UpdatePlanExecutionStepOutput>(serviceID: serviceName, version: ARCRegionswitchClient.version, config: config))
        var metricsAttributes = Smithy.Attributes()
        metricsAttributes.set(key: ClientRuntime.OrchestratorMetricsAttributesKeys.service, value: "ARCRegionswitch")
        metricsAttributes.set(key: ClientRuntime.OrchestratorMetricsAttributesKeys.method, value: "UpdatePlanExecutionStep")
        let op = builder.attributes(context)
            .telemetry(ClientRuntime.OrchestratorTelemetry(
                telemetryProvider: config.telemetryProvider,
                metricsAttributes: metricsAttributes,
                meterScope: serviceName,
                tracerScope: serviceName
            ))
            .executeRequest(client)
            .build()
        return try await op.execute(input: input)
    }
}
