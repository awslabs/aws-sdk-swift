//
// Copyright Amazon.com Inc. or its affiliates.
// All Rights Reserved.
//
// SPDX-License-Identifier: Apache-2.0
//

// Code generated by smithy-swift-codegen. DO NOT EDIT!

import class SmithyWaitersAPI.Waiter
import enum SmithyWaitersAPI.JMESUtils
import struct SmithyWaitersAPI.WaiterConfiguration
import struct SmithyWaitersAPI.WaiterOptions
import struct SmithyWaitersAPI.WaiterOutcome

extension ARCRegionswitchClient {

    static func planEvaluationStatusPassedWaiterConfig() throws -> SmithyWaitersAPI.WaiterConfiguration<GetPlanEvaluationStatusInput, GetPlanEvaluationStatusOutput> {
        let acceptors: [SmithyWaitersAPI.WaiterConfiguration<GetPlanEvaluationStatusInput, GetPlanEvaluationStatusOutput>.Acceptor] = [
            .init(state: .success, matcher: { (input: GetPlanEvaluationStatusInput, result: Swift.Result<GetPlanEvaluationStatusOutput, Swift.Error>) -> Bool in
                // JMESPath expression: "evaluationState"
                // JMESPath comparator: "stringEquals"
                // JMESPath expected value: "passed"
                guard case .success(let output) = result else { return false }
                let evaluationState = output.evaluationState
                return SmithyWaitersAPI.JMESUtils.compare(evaluationState, ==, "passed")
            }),
            .init(state: .failure, matcher: { (input: GetPlanEvaluationStatusInput, result: Swift.Result<GetPlanEvaluationStatusOutput, Swift.Error>) -> Bool in
                // JMESPath expression: "evaluationState"
                // JMESPath comparator: "stringEquals"
                // JMESPath expected value: "actionRequired"
                guard case .success(let output) = result else { return false }
                let evaluationState = output.evaluationState
                return SmithyWaitersAPI.JMESUtils.compare(evaluationState, ==, "actionRequired")
            }),
            .init(state: .retry, matcher: { (input: GetPlanEvaluationStatusInput, result: Swift.Result<GetPlanEvaluationStatusOutput, Swift.Error>) -> Bool in
                // JMESPath expression: "evaluationState"
                // JMESPath comparator: "stringEquals"
                // JMESPath expected value: "pendingEvaluation"
                guard case .success(let output) = result else { return false }
                let evaluationState = output.evaluationState
                return SmithyWaitersAPI.JMESUtils.compare(evaluationState, ==, "pendingEvaluation")
            }),
        ]
        return try SmithyWaitersAPI.WaiterConfiguration<GetPlanEvaluationStatusInput, GetPlanEvaluationStatusOutput>(acceptors: acceptors, minDelay: 30.0, maxDelay: 120.0)
    }

    /// Initiates waiting for the PlanEvaluationStatusPassed event on the getPlanEvaluationStatus operation.
    /// The operation will be tried and (if necessary) retried until the wait succeeds, fails, or times out.
    /// Returns a `WaiterOutcome` asynchronously on waiter success, throws an error asynchronously on
    /// waiter failure or timeout.
    /// - Parameters:
    ///   - options: `WaiterOptions` to be used to configure this wait.
    ///   - input: The `GetPlanEvaluationStatusInput` object to be used as a parameter when performing the operation.
    /// - Returns: A `WaiterOutcome` with the result of the final, successful performance of the operation.
    /// - Throws: `WaiterFailureError` if the waiter fails due to matching an `Acceptor` with state `failure`
    /// or there is an error not handled by any `Acceptor.`
    /// `WaiterTimeoutError` if the waiter times out.
    public func waitUntilPlanEvaluationStatusPassed(options: SmithyWaitersAPI.WaiterOptions, input: GetPlanEvaluationStatusInput) async throws -> SmithyWaitersAPI.WaiterOutcome<GetPlanEvaluationStatusOutput> {
        let waiter = SmithyWaitersAPI.Waiter(config: try Self.planEvaluationStatusPassedWaiterConfig(), operation: self.getPlanEvaluationStatus(input:))
        return try await waiter.waitUntil(options: options, input: input)
    }

    static func planExecutionCompletedWaiterConfig() throws -> SmithyWaitersAPI.WaiterConfiguration<GetPlanExecutionInput, GetPlanExecutionOutput> {
        let acceptors: [SmithyWaitersAPI.WaiterConfiguration<GetPlanExecutionInput, GetPlanExecutionOutput>.Acceptor] = [
            .init(state: .success, matcher: { (input: GetPlanExecutionInput, result: Swift.Result<GetPlanExecutionOutput, Swift.Error>) -> Bool in
                // JMESPath expression: "executionState"
                // JMESPath comparator: "stringEquals"
                // JMESPath expected value: "completed"
                guard case .success(let output) = result else { return false }
                let executionState = output.executionState
                return SmithyWaitersAPI.JMESUtils.compare(executionState, ==, "completed")
            }),
            .init(state: .success, matcher: { (input: GetPlanExecutionInput, result: Swift.Result<GetPlanExecutionOutput, Swift.Error>) -> Bool in
                // JMESPath expression: "executionState"
                // JMESPath comparator: "stringEquals"
                // JMESPath expected value: "completedWithExceptions"
                guard case .success(let output) = result else { return false }
                let executionState = output.executionState
                return SmithyWaitersAPI.JMESUtils.compare(executionState, ==, "completedWithExceptions")
            }),
            .init(state: .failure, matcher: { (input: GetPlanExecutionInput, result: Swift.Result<GetPlanExecutionOutput, Swift.Error>) -> Bool in
                // JMESPath expression: "executionState"
                // JMESPath comparator: "stringEquals"
                // JMESPath expected value: "failed"
                guard case .success(let output) = result else { return false }
                let executionState = output.executionState
                return SmithyWaitersAPI.JMESUtils.compare(executionState, ==, "failed")
            }),
            .init(state: .failure, matcher: { (input: GetPlanExecutionInput, result: Swift.Result<GetPlanExecutionOutput, Swift.Error>) -> Bool in
                // JMESPath expression: "executionState"
                // JMESPath comparator: "stringEquals"
                // JMESPath expected value: "canceled"
                guard case .success(let output) = result else { return false }
                let executionState = output.executionState
                return SmithyWaitersAPI.JMESUtils.compare(executionState, ==, "canceled")
            }),
            .init(state: .failure, matcher: { (input: GetPlanExecutionInput, result: Swift.Result<GetPlanExecutionOutput, Swift.Error>) -> Bool in
                // JMESPath expression: "executionState"
                // JMESPath comparator: "stringEquals"
                // JMESPath expected value: "planExecutionTimedOut"
                guard case .success(let output) = result else { return false }
                let executionState = output.executionState
                return SmithyWaitersAPI.JMESUtils.compare(executionState, ==, "planExecutionTimedOut")
            }),
        ]
        return try SmithyWaitersAPI.WaiterConfiguration<GetPlanExecutionInput, GetPlanExecutionOutput>(acceptors: acceptors, minDelay: 30.0, maxDelay: 120.0)
    }

    /// Initiates waiting for the PlanExecutionCompleted event on the getPlanExecution operation.
    /// The operation will be tried and (if necessary) retried until the wait succeeds, fails, or times out.
    /// Returns a `WaiterOutcome` asynchronously on waiter success, throws an error asynchronously on
    /// waiter failure or timeout.
    /// - Parameters:
    ///   - options: `WaiterOptions` to be used to configure this wait.
    ///   - input: The `GetPlanExecutionInput` object to be used as a parameter when performing the operation.
    /// - Returns: A `WaiterOutcome` with the result of the final, successful performance of the operation.
    /// - Throws: `WaiterFailureError` if the waiter fails due to matching an `Acceptor` with state `failure`
    /// or there is an error not handled by any `Acceptor.`
    /// `WaiterTimeoutError` if the waiter times out.
    public func waitUntilPlanExecutionCompleted(options: SmithyWaitersAPI.WaiterOptions, input: GetPlanExecutionInput) async throws -> SmithyWaitersAPI.WaiterOutcome<GetPlanExecutionOutput> {
        let waiter = SmithyWaitersAPI.Waiter(config: try Self.planExecutionCompletedWaiterConfig(), operation: self.getPlanExecution(input:))
        return try await waiter.waitUntil(options: options, input: input)
    }
}
