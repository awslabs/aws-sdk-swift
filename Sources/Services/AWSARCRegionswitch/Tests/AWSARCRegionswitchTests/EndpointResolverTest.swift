//
// Copyright Amazon.com Inc. or its affiliates.
// All Rights Reserved.
//
// SPDX-License-Identifier: Apache-2.0
//

// Code generated by smithy-swift-codegen. DO NOT EDIT!

@testable import AWSARCRegionswitch
import XCTest
import enum ClientRuntime.EndpointError
import enum SmithyHTTPAPI.EndpointPropertyValue
import enum SmithyTestUtil.TestInitializer
import struct SmithyHTTPAPI.Endpoint
import struct SmithyHTTPAPI.Headers

class EndpointResolverTest: XCTestCase {

    override class func setUp() {
        SmithyTestUtil.TestInitializer.initialize()
    }

    /// For custom endpoint with region not set and fips disabled
    func testResolve1() throws {
        let endpointParams = EndpointParams(
            endpoint: "https://example.com",
            useFIPS: false
        )
        let resolver = try DefaultEndpointResolver()

        let actual = try resolver.resolve(params: endpointParams)

        let properties: [String: SmithyHTTPAPI.EndpointPropertyValue] =
            [:]

        let headers = SmithyHTTPAPI.Headers()
        let expected = try SmithyHTTPAPI.Endpoint(urlString: "https://example.com", headers: headers, properties: properties)

        XCTAssertEqual(expected, actual)
    }

    /// For custom endpoint with fips enabled
    func testResolve2() throws {
        let endpointParams = EndpointParams(
            endpoint: "https://example.com",
            useFIPS: true
        )
        let resolver = try DefaultEndpointResolver()

        XCTAssertThrowsError(try resolver.resolve(params: endpointParams)) { error in
            switch error {
            case ClientRuntime.EndpointError.unresolved(let message):
                XCTAssertEqual("Invalid Configuration: FIPS and custom endpoint are not supported", message)
            default:
                XCTFail()
            }
        }
    }

    /// For region us-east-1 with FIPS enabled and DualStack enabled
    func testResolve3() throws {
        let endpointParams = EndpointParams(
            region: "us-east-1",
            useFIPS: true
        )
        let resolver = try DefaultEndpointResolver()

        let actual = try resolver.resolve(params: endpointParams)

        let properties: [String: SmithyHTTPAPI.EndpointPropertyValue] =
            [:]

        let headers = SmithyHTTPAPI.Headers()
        let expected = try SmithyHTTPAPI.Endpoint(urlString: "https://arc-region-switch-fips.us-east-1.api.aws", headers: headers, properties: properties)

        XCTAssertEqual(expected, actual)
    }

    /// For region us-east-1 with FIPS disabled and DualStack enabled
    func testResolve4() throws {
        let endpointParams = EndpointParams(
            region: "us-east-1",
            useFIPS: false
        )
        let resolver = try DefaultEndpointResolver()

        let actual = try resolver.resolve(params: endpointParams)

        let properties: [String: SmithyHTTPAPI.EndpointPropertyValue] =
            [:]

        let headers = SmithyHTTPAPI.Headers()
        let expected = try SmithyHTTPAPI.Endpoint(urlString: "https://arc-region-switch.us-east-1.api.aws", headers: headers, properties: properties)

        XCTAssertEqual(expected, actual)
    }

    /// For region cn-northwest-1 with FIPS enabled and DualStack enabled
    func testResolve5() throws {
        let endpointParams = EndpointParams(
            region: "cn-northwest-1",
            useFIPS: true
        )
        let resolver = try DefaultEndpointResolver()

        let actual = try resolver.resolve(params: endpointParams)

        let properties: [String: SmithyHTTPAPI.EndpointPropertyValue] =
            [:]

        let headers = SmithyHTTPAPI.Headers()
        let expected = try SmithyHTTPAPI.Endpoint(urlString: "https://arc-region-switch-fips.cn-northwest-1.api.amazonwebservices.com.cn", headers: headers, properties: properties)

        XCTAssertEqual(expected, actual)
    }

    /// For region cn-northwest-1 with FIPS disabled and DualStack enabled
    func testResolve6() throws {
        let endpointParams = EndpointParams(
            region: "cn-northwest-1",
            useFIPS: false
        )
        let resolver = try DefaultEndpointResolver()

        let actual = try resolver.resolve(params: endpointParams)

        let properties: [String: SmithyHTTPAPI.EndpointPropertyValue] =
            [:]

        let headers = SmithyHTTPAPI.Headers()
        let expected = try SmithyHTTPAPI.Endpoint(urlString: "https://arc-region-switch.cn-northwest-1.api.amazonwebservices.com.cn", headers: headers, properties: properties)

        XCTAssertEqual(expected, actual)
    }

    /// For region us-gov-west-1 with FIPS enabled and DualStack enabled
    func testResolve7() throws {
        let endpointParams = EndpointParams(
            region: "us-gov-west-1",
            useFIPS: true
        )
        let resolver = try DefaultEndpointResolver()

        let actual = try resolver.resolve(params: endpointParams)

        let properties: [String: SmithyHTTPAPI.EndpointPropertyValue] =
            [:]

        let headers = SmithyHTTPAPI.Headers()
        let expected = try SmithyHTTPAPI.Endpoint(urlString: "https://arc-region-switch-fips.us-gov-west-1.api.aws", headers: headers, properties: properties)

        XCTAssertEqual(expected, actual)
    }

    /// For region us-gov-west-1 with FIPS disabled and DualStack enabled
    func testResolve8() throws {
        let endpointParams = EndpointParams(
            region: "us-gov-west-1",
            useFIPS: false
        )
        let resolver = try DefaultEndpointResolver()

        let actual = try resolver.resolve(params: endpointParams)

        let properties: [String: SmithyHTTPAPI.EndpointPropertyValue] =
            [:]

        let headers = SmithyHTTPAPI.Headers()
        let expected = try SmithyHTTPAPI.Endpoint(urlString: "https://arc-region-switch.us-gov-west-1.api.aws", headers: headers, properties: properties)

        XCTAssertEqual(expected, actual)
    }

    /// For region us-iso-east-1 with FIPS enabled and DualStack enabled
    func testResolve9() throws {
        let endpointParams = EndpointParams(
            region: "us-iso-east-1",
            useFIPS: true
        )
        let resolver = try DefaultEndpointResolver()

        let actual = try resolver.resolve(params: endpointParams)

        let properties: [String: SmithyHTTPAPI.EndpointPropertyValue] =
            [:]

        let headers = SmithyHTTPAPI.Headers()
        let expected = try SmithyHTTPAPI.Endpoint(urlString: "https://arc-region-switch-fips.us-iso-east-1.c2s.ic.gov", headers: headers, properties: properties)

        XCTAssertEqual(expected, actual)
    }

    /// For region us-iso-east-1 with FIPS disabled and DualStack enabled
    func testResolve10() throws {
        let endpointParams = EndpointParams(
            region: "us-iso-east-1",
            useFIPS: false
        )
        let resolver = try DefaultEndpointResolver()

        let actual = try resolver.resolve(params: endpointParams)

        let properties: [String: SmithyHTTPAPI.EndpointPropertyValue] =
            [:]

        let headers = SmithyHTTPAPI.Headers()
        let expected = try SmithyHTTPAPI.Endpoint(urlString: "https://arc-region-switch.us-iso-east-1.c2s.ic.gov", headers: headers, properties: properties)

        XCTAssertEqual(expected, actual)
    }

    /// For region us-isob-east-1 with FIPS enabled and DualStack enabled
    func testResolve11() throws {
        let endpointParams = EndpointParams(
            region: "us-isob-east-1",
            useFIPS: true
        )
        let resolver = try DefaultEndpointResolver()

        let actual = try resolver.resolve(params: endpointParams)

        let properties: [String: SmithyHTTPAPI.EndpointPropertyValue] =
            [:]

        let headers = SmithyHTTPAPI.Headers()
        let expected = try SmithyHTTPAPI.Endpoint(urlString: "https://arc-region-switch-fips.us-isob-east-1.sc2s.sgov.gov", headers: headers, properties: properties)

        XCTAssertEqual(expected, actual)
    }

    /// For region us-isob-east-1 with FIPS disabled and DualStack enabled
    func testResolve12() throws {
        let endpointParams = EndpointParams(
            region: "us-isob-east-1",
            useFIPS: false
        )
        let resolver = try DefaultEndpointResolver()

        let actual = try resolver.resolve(params: endpointParams)

        let properties: [String: SmithyHTTPAPI.EndpointPropertyValue] =
            [:]

        let headers = SmithyHTTPAPI.Headers()
        let expected = try SmithyHTTPAPI.Endpoint(urlString: "https://arc-region-switch.us-isob-east-1.sc2s.sgov.gov", headers: headers, properties: properties)

        XCTAssertEqual(expected, actual)
    }

    /// For region eu-isoe-west-1 with FIPS enabled and DualStack enabled
    func testResolve13() throws {
        let endpointParams = EndpointParams(
            region: "eu-isoe-west-1",
            useFIPS: true
        )
        let resolver = try DefaultEndpointResolver()

        let actual = try resolver.resolve(params: endpointParams)

        let properties: [String: SmithyHTTPAPI.EndpointPropertyValue] =
            [:]

        let headers = SmithyHTTPAPI.Headers()
        let expected = try SmithyHTTPAPI.Endpoint(urlString: "https://arc-region-switch-fips.eu-isoe-west-1.cloud.adc-e.uk", headers: headers, properties: properties)

        XCTAssertEqual(expected, actual)
    }

    /// For region eu-isoe-west-1 with FIPS disabled and DualStack enabled
    func testResolve14() throws {
        let endpointParams = EndpointParams(
            region: "eu-isoe-west-1",
            useFIPS: false
        )
        let resolver = try DefaultEndpointResolver()

        let actual = try resolver.resolve(params: endpointParams)

        let properties: [String: SmithyHTTPAPI.EndpointPropertyValue] =
            [:]

        let headers = SmithyHTTPAPI.Headers()
        let expected = try SmithyHTTPAPI.Endpoint(urlString: "https://arc-region-switch.eu-isoe-west-1.cloud.adc-e.uk", headers: headers, properties: properties)

        XCTAssertEqual(expected, actual)
    }

    /// For region us-isof-south-1 with FIPS enabled and DualStack enabled
    func testResolve15() throws {
        let endpointParams = EndpointParams(
            region: "us-isof-south-1",
            useFIPS: true
        )
        let resolver = try DefaultEndpointResolver()

        let actual = try resolver.resolve(params: endpointParams)

        let properties: [String: SmithyHTTPAPI.EndpointPropertyValue] =
            [:]

        let headers = SmithyHTTPAPI.Headers()
        let expected = try SmithyHTTPAPI.Endpoint(urlString: "https://arc-region-switch-fips.us-isof-south-1.csp.hci.ic.gov", headers: headers, properties: properties)

        XCTAssertEqual(expected, actual)
    }

    /// For region us-isof-south-1 with FIPS disabled and DualStack enabled
    func testResolve16() throws {
        let endpointParams = EndpointParams(
            region: "us-isof-south-1",
            useFIPS: false
        )
        let resolver = try DefaultEndpointResolver()

        let actual = try resolver.resolve(params: endpointParams)

        let properties: [String: SmithyHTTPAPI.EndpointPropertyValue] =
            [:]

        let headers = SmithyHTTPAPI.Headers()
        let expected = try SmithyHTTPAPI.Endpoint(urlString: "https://arc-region-switch.us-isof-south-1.csp.hci.ic.gov", headers: headers, properties: properties)

        XCTAssertEqual(expected, actual)
    }

    /// Missing region
    func testResolve17() throws {
        let endpointParams = EndpointParams(
        )
        let resolver = try DefaultEndpointResolver()

        XCTAssertThrowsError(try resolver.resolve(params: endpointParams)) { error in
            switch error {
            case ClientRuntime.EndpointError.unresolved(let message):
                XCTAssertEqual("Invalid Configuration: Missing Region", message)
            default:
                XCTFail()
            }
        }
    }

    /// Control plane operation with DualStack in us-west-2 routes to us-east-1 DualStack endpoint
    func testResolve18() throws {
        let endpointParams = EndpointParams(
            region: "us-west-2",
            useControlPlaneEndpoint: true
        )
        let resolver = try DefaultEndpointResolver()

        let actual = try resolver.resolve(params: endpointParams)

        let properties: [String: SmithyHTTPAPI.EndpointPropertyValue] =
            [
                "authSchemes": [
                    [
                        "name": "sigv4",
                        "signingRegion": "us-east-1",
                        "signingName": "arc-region-switch"
                    ]
                ]
            ]

        let headers = SmithyHTTPAPI.Headers()
        let expected = try SmithyHTTPAPI.Endpoint(urlString: "https://arc-region-switch-control-plane.us-east-1.api.aws", headers: headers, properties: properties)

        XCTAssertEqual(expected, actual)
    }

    /// Control plane operation with endpoint set in us-east-1 routes to provided endpoint
    func testResolve19() throws {
        let endpointParams = EndpointParams(
            endpoint: "https://amazonaws.com",
            region: "us-east-1",
            useControlPlaneEndpoint: true
        )
        let resolver = try DefaultEndpointResolver()

        let actual = try resolver.resolve(params: endpointParams)

        let properties: [String: SmithyHTTPAPI.EndpointPropertyValue] =
            [:]

        let headers = SmithyHTTPAPI.Headers()
        let expected = try SmithyHTTPAPI.Endpoint(urlString: "https://amazonaws.com", headers: headers, properties: properties)

        XCTAssertEqual(expected, actual)
    }

    /// Control plane operation with endpoint set in us-west-2 routes to provided endpoint
    func testResolve20() throws {
        let endpointParams = EndpointParams(
            endpoint: "https://amazonaws.com",
            region: "us-west-2",
            useControlPlaneEndpoint: true
        )
        let resolver = try DefaultEndpointResolver()

        let actual = try resolver.resolve(params: endpointParams)

        let properties: [String: SmithyHTTPAPI.EndpointPropertyValue] =
            [:]

        let headers = SmithyHTTPAPI.Headers()
        let expected = try SmithyHTTPAPI.Endpoint(urlString: "https://amazonaws.com", headers: headers, properties: properties)

        XCTAssertEqual(expected, actual)
    }

    /// Control plane operation in us-west-2 (standard partition) routes to us-east-1
    func testResolve21() throws {
        let endpointParams = EndpointParams(
            region: "us-west-2",
            useControlPlaneEndpoint: true
        )
        let resolver = try DefaultEndpointResolver()

        let actual = try resolver.resolve(params: endpointParams)

        let properties: [String: SmithyHTTPAPI.EndpointPropertyValue] =
            [
                "authSchemes": [
                    [
                        "name": "sigv4",
                        "signingRegion": "us-east-1",
                        "signingName": "arc-region-switch"
                    ]
                ]
            ]

        let headers = SmithyHTTPAPI.Headers()
        let expected = try SmithyHTTPAPI.Endpoint(urlString: "https://arc-region-switch-control-plane.us-east-1.api.aws", headers: headers, properties: properties)

        XCTAssertEqual(expected, actual)
    }

    /// Control plane operation in cn-north-1 (China partition) routes to cn-north-1 with China DNS suffix
    func testResolve22() throws {
        let endpointParams = EndpointParams(
            region: "cn-north-1",
            useControlPlaneEndpoint: true
        )
        let resolver = try DefaultEndpointResolver()

        let actual = try resolver.resolve(params: endpointParams)

        let properties: [String: SmithyHTTPAPI.EndpointPropertyValue] =
            [
                "authSchemes": [
                    [
                        "name": "sigv4",
                        "signingRegion": "cn-north-1",
                        "signingName": "arc-region-switch"
                    ]
                ]
            ]

        let headers = SmithyHTTPAPI.Headers()
        let expected = try SmithyHTTPAPI.Endpoint(urlString: "https://arc-region-switch-control-plane.cn-north-1.api.amazonwebservices.com.cn", headers: headers, properties: properties)

        XCTAssertEqual(expected, actual)
    }

    /// Control plane operation in cn-northwest-1 (China partition) routes to cn-north-1 with China DNS suffix
    func testResolve23() throws {
        let endpointParams = EndpointParams(
            region: "cn-northwest-1",
            useControlPlaneEndpoint: true
        )
        let resolver = try DefaultEndpointResolver()

        let actual = try resolver.resolve(params: endpointParams)

        let properties: [String: SmithyHTTPAPI.EndpointPropertyValue] =
            [
                "authSchemes": [
                    [
                        "name": "sigv4",
                        "signingRegion": "cn-north-1",
                        "signingName": "arc-region-switch"
                    ]
                ]
            ]

        let headers = SmithyHTTPAPI.Headers()
        let expected = try SmithyHTTPAPI.Endpoint(urlString: "https://arc-region-switch-control-plane.cn-north-1.api.amazonwebservices.com.cn", headers: headers, properties: properties)

        XCTAssertEqual(expected, actual)
    }

    /// Control plane operation in us-gov-west-1 (GovCloud partition) routes to us-gov-west-1 with GovCloud DNS suffix
    func testResolve24() throws {
        let endpointParams = EndpointParams(
            region: "us-gov-west-1",
            useControlPlaneEndpoint: true
        )
        let resolver = try DefaultEndpointResolver()

        let actual = try resolver.resolve(params: endpointParams)

        let properties: [String: SmithyHTTPAPI.EndpointPropertyValue] =
            [
                "authSchemes": [
                    [
                        "name": "sigv4",
                        "signingRegion": "us-gov-west-1",
                        "signingName": "arc-region-switch"
                    ]
                ]
            ]

        let headers = SmithyHTTPAPI.Headers()
        let expected = try SmithyHTTPAPI.Endpoint(urlString: "https://arc-region-switch-control-plane.us-gov-west-1.api.aws", headers: headers, properties: properties)

        XCTAssertEqual(expected, actual)
    }

    /// Control plane operation in us-gov-east-1 (GovCloud partition) routes to us-gov-west-1 with GovCloud DNS suffix
    func testResolve25() throws {
        let endpointParams = EndpointParams(
            region: "us-gov-east-1",
            useControlPlaneEndpoint: true
        )
        let resolver = try DefaultEndpointResolver()

        let actual = try resolver.resolve(params: endpointParams)

        let properties: [String: SmithyHTTPAPI.EndpointPropertyValue] =
            [
                "authSchemes": [
                    [
                        "name": "sigv4",
                        "signingRegion": "us-gov-west-1",
                        "signingName": "arc-region-switch"
                    ]
                ]
            ]

        let headers = SmithyHTTPAPI.Headers()
        let expected = try SmithyHTTPAPI.Endpoint(urlString: "https://arc-region-switch-control-plane.us-gov-west-1.api.aws", headers: headers, properties: properties)

        XCTAssertEqual(expected, actual)
    }

    /// Control plane operation with FIPS in us-west-2 routes to us-east-1 FIPS endpoint
    func testResolve26() throws {
        let endpointParams = EndpointParams(
            region: "us-west-2",
            useControlPlaneEndpoint: true,
            useFIPS: true
        )
        let resolver = try DefaultEndpointResolver()

        let actual = try resolver.resolve(params: endpointParams)

        let properties: [String: SmithyHTTPAPI.EndpointPropertyValue] =
            [
                "authSchemes": [
                    [
                        "name": "sigv4",
                        "signingRegion": "us-east-1",
                        "signingName": "arc-region-switch"
                    ]
                ]
            ]

        let headers = SmithyHTTPAPI.Headers()
        let expected = try SmithyHTTPAPI.Endpoint(urlString: "https://arc-region-switch-control-plane-fips.us-east-1.api.aws", headers: headers, properties: properties)

        XCTAssertEqual(expected, actual)
    }

    /// Control plane operation with FIPS in us-east-1 routes to us-east-1 FIPS endpoint
    func testResolve27() throws {
        let endpointParams = EndpointParams(
            region: "us-east-1",
            useControlPlaneEndpoint: true,
            useFIPS: true
        )
        let resolver = try DefaultEndpointResolver()

        let actual = try resolver.resolve(params: endpointParams)

        let properties: [String: SmithyHTTPAPI.EndpointPropertyValue] =
            [
                "authSchemes": [
                    [
                        "name": "sigv4",
                        "signingRegion": "us-east-1",
                        "signingName": "arc-region-switch"
                    ]
                ]
            ]

        let headers = SmithyHTTPAPI.Headers()
        let expected = try SmithyHTTPAPI.Endpoint(urlString: "https://arc-region-switch-control-plane-fips.us-east-1.api.aws", headers: headers, properties: properties)

        XCTAssertEqual(expected, actual)
    }

    /// Control plane operation with FIPS in CN returns an error
    func testResolve28() throws {
        let endpointParams = EndpointParams(
            region: "cn-north-1",
            useControlPlaneEndpoint: true,
            useFIPS: true
        )
        let resolver = try DefaultEndpointResolver()

        XCTAssertThrowsError(try resolver.resolve(params: endpointParams)) { error in
            switch error {
            case ClientRuntime.EndpointError.unresolved(let message):
                XCTAssertEqual("Invalid Configuration: FIPS is not supported in this partition", message)
            default:
                XCTFail()
            }
        }
    }

    /// Control plane operation with endpoint set using FIPS in us-east-1 errors
    func testResolve29() throws {
        let endpointParams = EndpointParams(
            endpoint: "https://amazonaws.com",
            region: "us-east-1",
            useControlPlaneEndpoint: true,
            useFIPS: true
        )
        let resolver = try DefaultEndpointResolver()

        XCTAssertThrowsError(try resolver.resolve(params: endpointParams)) { error in
            switch error {
            case ClientRuntime.EndpointError.unresolved(let message):
                XCTAssertEqual("Invalid Configuration: FIPS and custom endpoint are not supported", message)
            default:
                XCTFail()
            }
        }
    }

    /// Control plane operation with endpoint set using FIPS in us-west-2 routes to provided endpoint
    func testResolve30() throws {
        let endpointParams = EndpointParams(
            endpoint: "https://amazonaws.com",
            region: "us-west-2",
            useControlPlaneEndpoint: true,
            useFIPS: true
        )
        let resolver = try DefaultEndpointResolver()

        XCTAssertThrowsError(try resolver.resolve(params: endpointParams)) { error in
            switch error {
            case ClientRuntime.EndpointError.unresolved(let message):
                XCTAssertEqual("Invalid Configuration: FIPS and custom endpoint are not supported", message)
            default:
                XCTFail()
            }
        }
    }

}
