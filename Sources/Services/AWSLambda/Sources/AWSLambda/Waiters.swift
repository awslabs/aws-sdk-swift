//
// Copyright Amazon.com Inc. or its affiliates.
// All Rights Reserved.
//
// SPDX-License-Identifier: Apache-2.0
//

// Code generated by smithy-swift-codegen. DO NOT EDIT!

import class SmithyWaitersAPI.Waiter
import enum SmithyWaitersAPI.JMESUtils
import protocol ClientRuntime.ServiceError
import struct SmithyWaitersAPI.WaiterConfiguration
import struct SmithyWaitersAPI.WaiterOptions
import struct SmithyWaitersAPI.WaiterOutcome

extension LambdaClient {

    static func functionActiveV2WaiterConfig() throws -> SmithyWaitersAPI.WaiterConfiguration<GetFunctionInput, GetFunctionOutput> {
        let acceptors: [SmithyWaitersAPI.WaiterConfiguration<GetFunctionInput, GetFunctionOutput>.Acceptor] = [
            .init(state: .success, matcher: { (input: GetFunctionInput, result: Swift.Result<GetFunctionOutput, Swift.Error>) -> Bool in
                // JMESPath expression: "Configuration.State"
                // JMESPath comparator: "stringEquals"
                // JMESPath expected value: "Active"
                guard case .success(let output) = result else { return false }
                let configuration = output.configuration
                let state = configuration?.state
                return SmithyWaitersAPI.JMESUtils.compare(state, ==, "Active")
            }),
            .init(state: .failure, matcher: { (input: GetFunctionInput, result: Swift.Result<GetFunctionOutput, Swift.Error>) -> Bool in
                // JMESPath expression: "Configuration.State"
                // JMESPath comparator: "stringEquals"
                // JMESPath expected value: "Failed"
                guard case .success(let output) = result else { return false }
                let configuration = output.configuration
                let state = configuration?.state
                return SmithyWaitersAPI.JMESUtils.compare(state, ==, "Failed")
            }),
            .init(state: .retry, matcher: { (input: GetFunctionInput, result: Swift.Result<GetFunctionOutput, Swift.Error>) -> Bool in
                // JMESPath expression: "Configuration.State"
                // JMESPath comparator: "stringEquals"
                // JMESPath expected value: "Pending"
                guard case .success(let output) = result else { return false }
                let configuration = output.configuration
                let state = configuration?.state
                return SmithyWaitersAPI.JMESUtils.compare(state, ==, "Pending")
            }),
        ]
        return try SmithyWaitersAPI.WaiterConfiguration<GetFunctionInput, GetFunctionOutput>(acceptors: acceptors, minDelay: 1.0, maxDelay: 120.0)
    }

    /// Initiates waiting for the FunctionActiveV2 event on the getFunction operation.
    /// The operation will be tried and (if necessary) retried until the wait succeeds, fails, or times out.
    /// Returns a `WaiterOutcome` asynchronously on waiter success, throws an error asynchronously on
    /// waiter failure or timeout.
    /// - Parameters:
    ///   - options: `WaiterOptions` to be used to configure this wait.
    ///   - input: The `GetFunctionInput` object to be used as a parameter when performing the operation.
    /// - Returns: A `WaiterOutcome` with the result of the final, successful performance of the operation.
    /// - Throws: `WaiterFailureError` if the waiter fails due to matching an `Acceptor` with state `failure`
    /// or there is an error not handled by any `Acceptor.`
    /// `WaiterTimeoutError` if the waiter times out.
    public func waitUntilFunctionActiveV2(options: SmithyWaitersAPI.WaiterOptions, input: GetFunctionInput) async throws -> SmithyWaitersAPI.WaiterOutcome<GetFunctionOutput> {
        let waiter = SmithyWaitersAPI.Waiter(config: try Self.functionActiveV2WaiterConfig(), operation: self.getFunction(input:))
        return try await waiter.waitUntil(options: options, input: input)
    }

    static func functionExistsWaiterConfig() throws -> SmithyWaitersAPI.WaiterConfiguration<GetFunctionInput, GetFunctionOutput> {
        let acceptors: [SmithyWaitersAPI.WaiterConfiguration<GetFunctionInput, GetFunctionOutput>.Acceptor] = [
            .init(state: .success, matcher: { (input: GetFunctionInput, result: Swift.Result<GetFunctionOutput, Swift.Error>) -> Bool in
                switch result {
                    case .success: return true
                    case .failure: return false
                }
            }),
            .init(state: .retry, matcher: { (input: GetFunctionInput, result: Swift.Result<GetFunctionOutput, Swift.Error>) -> Bool in
                guard case .failure(let error) = result else { return false }
                return (error as? ClientRuntime.ServiceError)?.typeName == "ResourceNotFoundException"
            }),
        ]
        return try SmithyWaitersAPI.WaiterConfiguration<GetFunctionInput, GetFunctionOutput>(acceptors: acceptors, minDelay: 1.0, maxDelay: 120.0)
    }

    /// Initiates waiting for the FunctionExists event on the getFunction operation.
    /// The operation will be tried and (if necessary) retried until the wait succeeds, fails, or times out.
    /// Returns a `WaiterOutcome` asynchronously on waiter success, throws an error asynchronously on
    /// waiter failure or timeout.
    /// - Parameters:
    ///   - options: `WaiterOptions` to be used to configure this wait.
    ///   - input: The `GetFunctionInput` object to be used as a parameter when performing the operation.
    /// - Returns: A `WaiterOutcome` with the result of the final, successful performance of the operation.
    /// - Throws: `WaiterFailureError` if the waiter fails due to matching an `Acceptor` with state `failure`
    /// or there is an error not handled by any `Acceptor.`
    /// `WaiterTimeoutError` if the waiter times out.
    public func waitUntilFunctionExists(options: SmithyWaitersAPI.WaiterOptions, input: GetFunctionInput) async throws -> SmithyWaitersAPI.WaiterOutcome<GetFunctionOutput> {
        let waiter = SmithyWaitersAPI.Waiter(config: try Self.functionExistsWaiterConfig(), operation: self.getFunction(input:))
        return try await waiter.waitUntil(options: options, input: input)
    }

    static func functionUpdatedV2WaiterConfig() throws -> SmithyWaitersAPI.WaiterConfiguration<GetFunctionInput, GetFunctionOutput> {
        let acceptors: [SmithyWaitersAPI.WaiterConfiguration<GetFunctionInput, GetFunctionOutput>.Acceptor] = [
            .init(state: .success, matcher: { (input: GetFunctionInput, result: Swift.Result<GetFunctionOutput, Swift.Error>) -> Bool in
                // JMESPath expression: "Configuration.LastUpdateStatus"
                // JMESPath comparator: "stringEquals"
                // JMESPath expected value: "Successful"
                guard case .success(let output) = result else { return false }
                let configuration = output.configuration
                let lastUpdateStatus = configuration?.lastUpdateStatus
                return SmithyWaitersAPI.JMESUtils.compare(lastUpdateStatus, ==, "Successful")
            }),
            .init(state: .failure, matcher: { (input: GetFunctionInput, result: Swift.Result<GetFunctionOutput, Swift.Error>) -> Bool in
                // JMESPath expression: "Configuration.LastUpdateStatus"
                // JMESPath comparator: "stringEquals"
                // JMESPath expected value: "Failed"
                guard case .success(let output) = result else { return false }
                let configuration = output.configuration
                let lastUpdateStatus = configuration?.lastUpdateStatus
                return SmithyWaitersAPI.JMESUtils.compare(lastUpdateStatus, ==, "Failed")
            }),
            .init(state: .retry, matcher: { (input: GetFunctionInput, result: Swift.Result<GetFunctionOutput, Swift.Error>) -> Bool in
                // JMESPath expression: "Configuration.LastUpdateStatus"
                // JMESPath comparator: "stringEquals"
                // JMESPath expected value: "InProgress"
                guard case .success(let output) = result else { return false }
                let configuration = output.configuration
                let lastUpdateStatus = configuration?.lastUpdateStatus
                return SmithyWaitersAPI.JMESUtils.compare(lastUpdateStatus, ==, "InProgress")
            }),
        ]
        return try SmithyWaitersAPI.WaiterConfiguration<GetFunctionInput, GetFunctionOutput>(acceptors: acceptors, minDelay: 1.0, maxDelay: 120.0)
    }

    /// Initiates waiting for the FunctionUpdatedV2 event on the getFunction operation.
    /// The operation will be tried and (if necessary) retried until the wait succeeds, fails, or times out.
    /// Returns a `WaiterOutcome` asynchronously on waiter success, throws an error asynchronously on
    /// waiter failure or timeout.
    /// - Parameters:
    ///   - options: `WaiterOptions` to be used to configure this wait.
    ///   - input: The `GetFunctionInput` object to be used as a parameter when performing the operation.
    /// - Returns: A `WaiterOutcome` with the result of the final, successful performance of the operation.
    /// - Throws: `WaiterFailureError` if the waiter fails due to matching an `Acceptor` with state `failure`
    /// or there is an error not handled by any `Acceptor.`
    /// `WaiterTimeoutError` if the waiter times out.
    public func waitUntilFunctionUpdatedV2(options: SmithyWaitersAPI.WaiterOptions, input: GetFunctionInput) async throws -> SmithyWaitersAPI.WaiterOutcome<GetFunctionOutput> {
        let waiter = SmithyWaitersAPI.Waiter(config: try Self.functionUpdatedV2WaiterConfig(), operation: self.getFunction(input:))
        return try await waiter.waitUntil(options: options, input: input)
    }

    static func functionActiveWaiterConfig() throws -> SmithyWaitersAPI.WaiterConfiguration<GetFunctionConfigurationInput, GetFunctionConfigurationOutput> {
        let acceptors: [SmithyWaitersAPI.WaiterConfiguration<GetFunctionConfigurationInput, GetFunctionConfigurationOutput>.Acceptor] = [
            .init(state: .success, matcher: { (input: GetFunctionConfigurationInput, result: Swift.Result<GetFunctionConfigurationOutput, Swift.Error>) -> Bool in
                // JMESPath expression: "State"
                // JMESPath comparator: "stringEquals"
                // JMESPath expected value: "Active"
                guard case .success(let output) = result else { return false }
                let state = output.state
                return SmithyWaitersAPI.JMESUtils.compare(state, ==, "Active")
            }),
            .init(state: .failure, matcher: { (input: GetFunctionConfigurationInput, result: Swift.Result<GetFunctionConfigurationOutput, Swift.Error>) -> Bool in
                // JMESPath expression: "State"
                // JMESPath comparator: "stringEquals"
                // JMESPath expected value: "Failed"
                guard case .success(let output) = result else { return false }
                let state = output.state
                return SmithyWaitersAPI.JMESUtils.compare(state, ==, "Failed")
            }),
            .init(state: .retry, matcher: { (input: GetFunctionConfigurationInput, result: Swift.Result<GetFunctionConfigurationOutput, Swift.Error>) -> Bool in
                // JMESPath expression: "State"
                // JMESPath comparator: "stringEquals"
                // JMESPath expected value: "Pending"
                guard case .success(let output) = result else { return false }
                let state = output.state
                return SmithyWaitersAPI.JMESUtils.compare(state, ==, "Pending")
            }),
        ]
        return try SmithyWaitersAPI.WaiterConfiguration<GetFunctionConfigurationInput, GetFunctionConfigurationOutput>(acceptors: acceptors, minDelay: 5.0, maxDelay: 120.0)
    }

    /// Initiates waiting for the FunctionActive event on the getFunctionConfiguration operation.
    /// The operation will be tried and (if necessary) retried until the wait succeeds, fails, or times out.
    /// Returns a `WaiterOutcome` asynchronously on waiter success, throws an error asynchronously on
    /// waiter failure or timeout.
    /// - Parameters:
    ///   - options: `WaiterOptions` to be used to configure this wait.
    ///   - input: The `GetFunctionConfigurationInput` object to be used as a parameter when performing the operation.
    /// - Returns: A `WaiterOutcome` with the result of the final, successful performance of the operation.
    /// - Throws: `WaiterFailureError` if the waiter fails due to matching an `Acceptor` with state `failure`
    /// or there is an error not handled by any `Acceptor.`
    /// `WaiterTimeoutError` if the waiter times out.
    public func waitUntilFunctionActive(options: SmithyWaitersAPI.WaiterOptions, input: GetFunctionConfigurationInput) async throws -> SmithyWaitersAPI.WaiterOutcome<GetFunctionConfigurationOutput> {
        let waiter = SmithyWaitersAPI.Waiter(config: try Self.functionActiveWaiterConfig(), operation: self.getFunctionConfiguration(input:))
        return try await waiter.waitUntil(options: options, input: input)
    }

    static func functionUpdatedWaiterConfig() throws -> SmithyWaitersAPI.WaiterConfiguration<GetFunctionConfigurationInput, GetFunctionConfigurationOutput> {
        let acceptors: [SmithyWaitersAPI.WaiterConfiguration<GetFunctionConfigurationInput, GetFunctionConfigurationOutput>.Acceptor] = [
            .init(state: .success, matcher: { (input: GetFunctionConfigurationInput, result: Swift.Result<GetFunctionConfigurationOutput, Swift.Error>) -> Bool in
                // JMESPath expression: "LastUpdateStatus"
                // JMESPath comparator: "stringEquals"
                // JMESPath expected value: "Successful"
                guard case .success(let output) = result else { return false }
                let lastUpdateStatus = output.lastUpdateStatus
                return SmithyWaitersAPI.JMESUtils.compare(lastUpdateStatus, ==, "Successful")
            }),
            .init(state: .failure, matcher: { (input: GetFunctionConfigurationInput, result: Swift.Result<GetFunctionConfigurationOutput, Swift.Error>) -> Bool in
                // JMESPath expression: "LastUpdateStatus"
                // JMESPath comparator: "stringEquals"
                // JMESPath expected value: "Failed"
                guard case .success(let output) = result else { return false }
                let lastUpdateStatus = output.lastUpdateStatus
                return SmithyWaitersAPI.JMESUtils.compare(lastUpdateStatus, ==, "Failed")
            }),
            .init(state: .retry, matcher: { (input: GetFunctionConfigurationInput, result: Swift.Result<GetFunctionConfigurationOutput, Swift.Error>) -> Bool in
                // JMESPath expression: "LastUpdateStatus"
                // JMESPath comparator: "stringEquals"
                // JMESPath expected value: "InProgress"
                guard case .success(let output) = result else { return false }
                let lastUpdateStatus = output.lastUpdateStatus
                return SmithyWaitersAPI.JMESUtils.compare(lastUpdateStatus, ==, "InProgress")
            }),
        ]
        return try SmithyWaitersAPI.WaiterConfiguration<GetFunctionConfigurationInput, GetFunctionConfigurationOutput>(acceptors: acceptors, minDelay: 5.0, maxDelay: 120.0)
    }

    /// Initiates waiting for the FunctionUpdated event on the getFunctionConfiguration operation.
    /// The operation will be tried and (if necessary) retried until the wait succeeds, fails, or times out.
    /// Returns a `WaiterOutcome` asynchronously on waiter success, throws an error asynchronously on
    /// waiter failure or timeout.
    /// - Parameters:
    ///   - options: `WaiterOptions` to be used to configure this wait.
    ///   - input: The `GetFunctionConfigurationInput` object to be used as a parameter when performing the operation.
    /// - Returns: A `WaiterOutcome` with the result of the final, successful performance of the operation.
    /// - Throws: `WaiterFailureError` if the waiter fails due to matching an `Acceptor` with state `failure`
    /// or there is an error not handled by any `Acceptor.`
    /// `WaiterTimeoutError` if the waiter times out.
    public func waitUntilFunctionUpdated(options: SmithyWaitersAPI.WaiterOptions, input: GetFunctionConfigurationInput) async throws -> SmithyWaitersAPI.WaiterOutcome<GetFunctionConfigurationOutput> {
        let waiter = SmithyWaitersAPI.Waiter(config: try Self.functionUpdatedWaiterConfig(), operation: self.getFunctionConfiguration(input:))
        return try await waiter.waitUntil(options: options, input: input)
    }

    static func publishedVersionActiveWaiterConfig() throws -> SmithyWaitersAPI.WaiterConfiguration<GetFunctionConfigurationInput, GetFunctionConfigurationOutput> {
        let acceptors: [SmithyWaitersAPI.WaiterConfiguration<GetFunctionConfigurationInput, GetFunctionConfigurationOutput>.Acceptor] = [
            .init(state: .success, matcher: { (input: GetFunctionConfigurationInput, result: Swift.Result<GetFunctionConfigurationOutput, Swift.Error>) -> Bool in
                // JMESPath expression: "State"
                // JMESPath comparator: "stringEquals"
                // JMESPath expected value: "Active"
                guard case .success(let output) = result else { return false }
                let state = output.state
                return SmithyWaitersAPI.JMESUtils.compare(state, ==, "Active")
            }),
            .init(state: .failure, matcher: { (input: GetFunctionConfigurationInput, result: Swift.Result<GetFunctionConfigurationOutput, Swift.Error>) -> Bool in
                // JMESPath expression: "State"
                // JMESPath comparator: "stringEquals"
                // JMESPath expected value: "Failed"
                guard case .success(let output) = result else { return false }
                let state = output.state
                return SmithyWaitersAPI.JMESUtils.compare(state, ==, "Failed")
            }),
            .init(state: .retry, matcher: { (input: GetFunctionConfigurationInput, result: Swift.Result<GetFunctionConfigurationOutput, Swift.Error>) -> Bool in
                // JMESPath expression: "State"
                // JMESPath comparator: "stringEquals"
                // JMESPath expected value: "Pending"
                guard case .success(let output) = result else { return false }
                let state = output.state
                return SmithyWaitersAPI.JMESUtils.compare(state, ==, "Pending")
            }),
        ]
        return try SmithyWaitersAPI.WaiterConfiguration<GetFunctionConfigurationInput, GetFunctionConfigurationOutput>(acceptors: acceptors, minDelay: 5.0, maxDelay: 120.0)
    }

    /// Initiates waiting for the PublishedVersionActive event on the getFunctionConfiguration operation.
    /// The operation will be tried and (if necessary) retried until the wait succeeds, fails, or times out.
    /// Returns a `WaiterOutcome` asynchronously on waiter success, throws an error asynchronously on
    /// waiter failure or timeout.
    /// - Parameters:
    ///   - options: `WaiterOptions` to be used to configure this wait.
    ///   - input: The `GetFunctionConfigurationInput` object to be used as a parameter when performing the operation.
    /// - Returns: A `WaiterOutcome` with the result of the final, successful performance of the operation.
    /// - Throws: `WaiterFailureError` if the waiter fails due to matching an `Acceptor` with state `failure`
    /// or there is an error not handled by any `Acceptor.`
    /// `WaiterTimeoutError` if the waiter times out.
    public func waitUntilPublishedVersionActive(options: SmithyWaitersAPI.WaiterOptions, input: GetFunctionConfigurationInput) async throws -> SmithyWaitersAPI.WaiterOutcome<GetFunctionConfigurationOutput> {
        let waiter = SmithyWaitersAPI.Waiter(config: try Self.publishedVersionActiveWaiterConfig(), operation: self.getFunctionConfiguration(input:))
        return try await waiter.waitUntil(options: options, input: input)
    }
}
