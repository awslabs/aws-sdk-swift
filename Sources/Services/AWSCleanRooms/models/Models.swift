// Code generated by smithy-swift-codegen. DO NOT EDIT!
import AWSClientRuntime
import ClientRuntime

extension AccessDeniedException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: AccessDeniedExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
            self.reason = output.reason
        } else {
            self.message = nil
            self.reason = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// Caller does not have sufficient access to perform this action.
public struct AccessDeniedException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?
    /// A reason code for the exception.
    public var reason: CleanRoomsClientTypes.AccessDeniedExceptionReason?

    public init (
        message: Swift.String? = nil,
        reason: CleanRoomsClientTypes.AccessDeniedExceptionReason? = nil
    )
    {
        self.message = message
        self.reason = reason
    }
}

struct AccessDeniedExceptionBody: Swift.Equatable {
    let message: Swift.String?
    let reason: CleanRoomsClientTypes.AccessDeniedExceptionReason?
}

extension AccessDeniedExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
        case reason
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
        let reasonDecoded = try containerValues.decodeIfPresent(CleanRoomsClientTypes.AccessDeniedExceptionReason.self, forKey: .reason)
        reason = reasonDecoded
    }
}

extension CleanRoomsClientTypes {
    public enum AccessDeniedExceptionReason: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case insufficientPermissions
        case sdkUnknown(Swift.String)

        public static var allCases: [AccessDeniedExceptionReason] {
            return [
                .insufficientPermissions,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .insufficientPermissions: return "INSUFFICIENT_PERMISSIONS"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = AccessDeniedExceptionReason(rawValue: rawValue) ?? AccessDeniedExceptionReason.sdkUnknown(rawValue)
        }
    }
}

extension CleanRoomsClientTypes.AggregateColumn: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case columnNames
        case function
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let columnNames = columnNames {
            var columnNamesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .columnNames)
            for analysisrulecolumnname0 in columnNames {
                try columnNamesContainer.encode(analysisrulecolumnname0)
            }
        }
        if let function = self.function {
            try encodeContainer.encode(function.rawValue, forKey: .function)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let columnNamesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .columnNames)
        var columnNamesDecoded0:[Swift.String]? = nil
        if let columnNamesContainer = columnNamesContainer {
            columnNamesDecoded0 = [Swift.String]()
            for string0 in columnNamesContainer {
                if let string0 = string0 {
                    columnNamesDecoded0?.append(string0)
                }
            }
        }
        columnNames = columnNamesDecoded0
        let functionDecoded = try containerValues.decodeIfPresent(CleanRoomsClientTypes.AggregateFunctionName.self, forKey: .function)
        function = functionDecoded
    }
}

extension CleanRoomsClientTypes {
    /// Column in configured table that can be used in aggregate function in query.
    public struct AggregateColumn: Swift.Equatable {
        /// Column names in configured table of aggregate columns.
        /// This member is required.
        public var columnNames: [Swift.String]?
        /// Aggregation function that can be applied to aggregate column in query.
        /// This member is required.
        public var function: CleanRoomsClientTypes.AggregateFunctionName?

        public init (
            columnNames: [Swift.String]? = nil,
            function: CleanRoomsClientTypes.AggregateFunctionName? = nil
        )
        {
            self.columnNames = columnNames
            self.function = function
        }
    }

}

extension CleanRoomsClientTypes {
    public enum AggregateFunctionName: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case avg
        case count
        case countDistinct
        case sum
        case sumDistinct
        case sdkUnknown(Swift.String)

        public static var allCases: [AggregateFunctionName] {
            return [
                .avg,
                .count,
                .countDistinct,
                .sum,
                .sumDistinct,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .avg: return "AVG"
            case .count: return "COUNT"
            case .countDistinct: return "COUNT_DISTINCT"
            case .sum: return "SUM"
            case .sumDistinct: return "SUM_DISTINCT"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = AggregateFunctionName(rawValue: rawValue) ?? AggregateFunctionName.sdkUnknown(rawValue)
        }
    }
}

extension CleanRoomsClientTypes.AggregationConstraint: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case columnName
        case minimum
        case type
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let columnName = self.columnName {
            try encodeContainer.encode(columnName, forKey: .columnName)
        }
        if let minimum = self.minimum {
            try encodeContainer.encode(minimum, forKey: .minimum)
        }
        if let type = self.type {
            try encodeContainer.encode(type.rawValue, forKey: .type)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let columnNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .columnName)
        columnName = columnNameDecoded
        let minimumDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .minimum)
        minimum = minimumDecoded
        let typeDecoded = try containerValues.decodeIfPresent(CleanRoomsClientTypes.AggregationType.self, forKey: .type)
        type = typeDecoded
    }
}

extension CleanRoomsClientTypes {
    /// Constraint on query output removing output rows that do not meet a minimum number of distinct values of a specified column.
    public struct AggregationConstraint: Swift.Equatable {
        /// Column in aggregation constraint for which there must be a minimum number of distinct values in an output row for it to be in the query output.
        /// This member is required.
        public var columnName: Swift.String?
        /// The minimum number of distinct values that an output row must be an aggregation of. Minimum threshold of distinct values for a specified column that must exist in an output row for it to be in the query output.
        /// This member is required.
        public var minimum: Swift.Int?
        /// The type of aggregation the constraint allows. The only valid value is currently `COUNT_DISTINCT`.
        /// This member is required.
        public var type: CleanRoomsClientTypes.AggregationType?

        public init (
            columnName: Swift.String? = nil,
            minimum: Swift.Int? = nil,
            type: CleanRoomsClientTypes.AggregationType? = nil
        )
        {
            self.columnName = columnName
            self.minimum = minimum
            self.type = type
        }
    }

}

extension CleanRoomsClientTypes {
    public enum AggregationType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case countDistinct
        case sdkUnknown(Swift.String)

        public static var allCases: [AggregationType] {
            return [
                .countDistinct,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .countDistinct: return "COUNT_DISTINCT"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = AggregationType(rawValue: rawValue) ?? AggregationType.sdkUnknown(rawValue)
        }
    }
}

extension CleanRoomsClientTypes {
    public enum AnalysisMethod: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case directQuery
        case sdkUnknown(Swift.String)

        public static var allCases: [AnalysisMethod] {
            return [
                .directQuery,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .directQuery: return "DIRECT_QUERY"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = AnalysisMethod(rawValue: rawValue) ?? AnalysisMethod.sdkUnknown(rawValue)
        }
    }
}

extension CleanRoomsClientTypes.AnalysisRule: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case collaborationId
        case createTime
        case name
        case policy
        case type
        case updateTime
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let collaborationId = self.collaborationId {
            try encodeContainer.encode(collaborationId, forKey: .collaborationId)
        }
        if let createTime = self.createTime {
            try encodeContainer.encodeTimestamp(createTime, format: .epochSeconds, forKey: .createTime)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let policy = self.policy {
            try encodeContainer.encode(policy, forKey: .policy)
        }
        if let type = self.type {
            try encodeContainer.encode(type.rawValue, forKey: .type)
        }
        if let updateTime = self.updateTime {
            try encodeContainer.encodeTimestamp(updateTime, format: .epochSeconds, forKey: .updateTime)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let collaborationIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .collaborationId)
        collaborationId = collaborationIdDecoded
        let typeDecoded = try containerValues.decodeIfPresent(CleanRoomsClientTypes.AnalysisRuleType.self, forKey: .type)
        type = typeDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let createTimeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .createTime)
        createTime = createTimeDecoded
        let updateTimeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .updateTime)
        updateTime = updateTimeDecoded
        let policyDecoded = try containerValues.decodeIfPresent(CleanRoomsClientTypes.AnalysisRulePolicy.self, forKey: .policy)
        policy = policyDecoded
    }
}

extension CleanRoomsClientTypes {
    /// A specification about how data from the configured table can be used in a query.
    public struct AnalysisRule: Swift.Equatable {
        /// The unique ID for the associated collaboration.
        /// This member is required.
        public var collaborationId: Swift.String?
        /// The time the analysis rule was created.
        /// This member is required.
        public var createTime: ClientRuntime.Date?
        /// The name for the analysis rule.
        /// This member is required.
        public var name: Swift.String?
        /// A policy that describes the associated data usage limitations.
        /// This member is required.
        public var policy: CleanRoomsClientTypes.AnalysisRulePolicy?
        /// The type of analysis rule. Valid values are `AGGREGATION` and `LIST`.
        /// This member is required.
        public var type: CleanRoomsClientTypes.AnalysisRuleType?
        /// The time the analysis rule was last updated.
        /// This member is required.
        public var updateTime: ClientRuntime.Date?

        public init (
            collaborationId: Swift.String? = nil,
            createTime: ClientRuntime.Date? = nil,
            name: Swift.String? = nil,
            policy: CleanRoomsClientTypes.AnalysisRulePolicy? = nil,
            type: CleanRoomsClientTypes.AnalysisRuleType? = nil,
            updateTime: ClientRuntime.Date? = nil
        )
        {
            self.collaborationId = collaborationId
            self.createTime = createTime
            self.name = name
            self.policy = policy
            self.type = type
            self.updateTime = updateTime
        }
    }

}

extension CleanRoomsClientTypes.AnalysisRuleAggregation: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case aggregateColumns
        case dimensionColumns
        case joinColumns
        case joinRequired
        case outputConstraints
        case scalarFunctions
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let aggregateColumns = aggregateColumns {
            var aggregateColumnsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .aggregateColumns)
            for aggregatecolumn0 in aggregateColumns {
                try aggregateColumnsContainer.encode(aggregatecolumn0)
            }
        }
        if let dimensionColumns = dimensionColumns {
            var dimensionColumnsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .dimensionColumns)
            for analysisrulecolumnname0 in dimensionColumns {
                try dimensionColumnsContainer.encode(analysisrulecolumnname0)
            }
        }
        if let joinColumns = joinColumns {
            var joinColumnsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .joinColumns)
            for analysisrulecolumnname0 in joinColumns {
                try joinColumnsContainer.encode(analysisrulecolumnname0)
            }
        }
        if let joinRequired = self.joinRequired {
            try encodeContainer.encode(joinRequired.rawValue, forKey: .joinRequired)
        }
        if let outputConstraints = outputConstraints {
            var outputConstraintsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .outputConstraints)
            for aggregationconstraint0 in outputConstraints {
                try outputConstraintsContainer.encode(aggregationconstraint0)
            }
        }
        if let scalarFunctions = scalarFunctions {
            var scalarFunctionsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .scalarFunctions)
            for scalarfunctions0 in scalarFunctions {
                try scalarFunctionsContainer.encode(scalarfunctions0.rawValue)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let aggregateColumnsContainer = try containerValues.decodeIfPresent([CleanRoomsClientTypes.AggregateColumn?].self, forKey: .aggregateColumns)
        var aggregateColumnsDecoded0:[CleanRoomsClientTypes.AggregateColumn]? = nil
        if let aggregateColumnsContainer = aggregateColumnsContainer {
            aggregateColumnsDecoded0 = [CleanRoomsClientTypes.AggregateColumn]()
            for structure0 in aggregateColumnsContainer {
                if let structure0 = structure0 {
                    aggregateColumnsDecoded0?.append(structure0)
                }
            }
        }
        aggregateColumns = aggregateColumnsDecoded0
        let joinColumnsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .joinColumns)
        var joinColumnsDecoded0:[Swift.String]? = nil
        if let joinColumnsContainer = joinColumnsContainer {
            joinColumnsDecoded0 = [Swift.String]()
            for string0 in joinColumnsContainer {
                if let string0 = string0 {
                    joinColumnsDecoded0?.append(string0)
                }
            }
        }
        joinColumns = joinColumnsDecoded0
        let joinRequiredDecoded = try containerValues.decodeIfPresent(CleanRoomsClientTypes.JoinRequiredOption.self, forKey: .joinRequired)
        joinRequired = joinRequiredDecoded
        let dimensionColumnsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .dimensionColumns)
        var dimensionColumnsDecoded0:[Swift.String]? = nil
        if let dimensionColumnsContainer = dimensionColumnsContainer {
            dimensionColumnsDecoded0 = [Swift.String]()
            for string0 in dimensionColumnsContainer {
                if let string0 = string0 {
                    dimensionColumnsDecoded0?.append(string0)
                }
            }
        }
        dimensionColumns = dimensionColumnsDecoded0
        let scalarFunctionsContainer = try containerValues.decodeIfPresent([CleanRoomsClientTypes.ScalarFunctions?].self, forKey: .scalarFunctions)
        var scalarFunctionsDecoded0:[CleanRoomsClientTypes.ScalarFunctions]? = nil
        if let scalarFunctionsContainer = scalarFunctionsContainer {
            scalarFunctionsDecoded0 = [CleanRoomsClientTypes.ScalarFunctions]()
            for string0 in scalarFunctionsContainer {
                if let string0 = string0 {
                    scalarFunctionsDecoded0?.append(string0)
                }
            }
        }
        scalarFunctions = scalarFunctionsDecoded0
        let outputConstraintsContainer = try containerValues.decodeIfPresent([CleanRoomsClientTypes.AggregationConstraint?].self, forKey: .outputConstraints)
        var outputConstraintsDecoded0:[CleanRoomsClientTypes.AggregationConstraint]? = nil
        if let outputConstraintsContainer = outputConstraintsContainer {
            outputConstraintsDecoded0 = [CleanRoomsClientTypes.AggregationConstraint]()
            for structure0 in outputConstraintsContainer {
                if let structure0 = structure0 {
                    outputConstraintsDecoded0?.append(structure0)
                }
            }
        }
        outputConstraints = outputConstraintsDecoded0
    }
}

extension CleanRoomsClientTypes {
    /// Enables query structure and specified queries that product aggregate statistics.
    public struct AnalysisRuleAggregation: Swift.Equatable {
        /// The columns that query runners are allowed to use in aggregation queries.
        /// This member is required.
        public var aggregateColumns: [CleanRoomsClientTypes.AggregateColumn]?
        /// The columns that query runners are allowed to select, group by, or filter by.
        /// This member is required.
        public var dimensionColumns: [Swift.String]?
        /// Columns in configured table that can be used in join statements and/or as aggregate columns. They can never be outputted directly.
        /// This member is required.
        public var joinColumns: [Swift.String]?
        /// Control that requires member who runs query to do a join with their configured table and/or other configured table in query
        public var joinRequired: CleanRoomsClientTypes.JoinRequiredOption?
        /// Columns that must meet a specific threshold value (after an aggregation function is applied to it) for each output row to be returned.
        /// This member is required.
        public var outputConstraints: [CleanRoomsClientTypes.AggregationConstraint]?
        /// Set of scalar functions that are allowed to be used on dimension columns and the output of aggregation of metrics.
        /// This member is required.
        public var scalarFunctions: [CleanRoomsClientTypes.ScalarFunctions]?

        public init (
            aggregateColumns: [CleanRoomsClientTypes.AggregateColumn]? = nil,
            dimensionColumns: [Swift.String]? = nil,
            joinColumns: [Swift.String]? = nil,
            joinRequired: CleanRoomsClientTypes.JoinRequiredOption? = nil,
            outputConstraints: [CleanRoomsClientTypes.AggregationConstraint]? = nil,
            scalarFunctions: [CleanRoomsClientTypes.ScalarFunctions]? = nil
        )
        {
            self.aggregateColumns = aggregateColumns
            self.dimensionColumns = dimensionColumns
            self.joinColumns = joinColumns
            self.joinRequired = joinRequired
            self.outputConstraints = outputConstraints
            self.scalarFunctions = scalarFunctions
        }
    }

}

extension CleanRoomsClientTypes.AnalysisRuleList: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case joinColumns
        case listColumns
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let joinColumns = joinColumns {
            var joinColumnsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .joinColumns)
            for analysisrulecolumnname0 in joinColumns {
                try joinColumnsContainer.encode(analysisrulecolumnname0)
            }
        }
        if let listColumns = listColumns {
            var listColumnsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .listColumns)
            for analysisrulecolumnname0 in listColumns {
                try listColumnsContainer.encode(analysisrulecolumnname0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let joinColumnsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .joinColumns)
        var joinColumnsDecoded0:[Swift.String]? = nil
        if let joinColumnsContainer = joinColumnsContainer {
            joinColumnsDecoded0 = [Swift.String]()
            for string0 in joinColumnsContainer {
                if let string0 = string0 {
                    joinColumnsDecoded0?.append(string0)
                }
            }
        }
        joinColumns = joinColumnsDecoded0
        let listColumnsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .listColumns)
        var listColumnsDecoded0:[Swift.String]? = nil
        if let listColumnsContainer = listColumnsContainer {
            listColumnsDecoded0 = [Swift.String]()
            for string0 in listColumnsContainer {
                if let string0 = string0 {
                    listColumnsDecoded0?.append(string0)
                }
            }
        }
        listColumns = listColumnsDecoded0
    }
}

extension CleanRoomsClientTypes {
    /// A type of analysis rule that enables row-level analysis.
    public struct AnalysisRuleList: Swift.Equatable {
        /// Columns that can be used to join a configured table with the table of the member who can query and another members' configured tables.
        /// This member is required.
        public var joinColumns: [Swift.String]?
        /// Columns that can be listed in the output.
        /// This member is required.
        public var listColumns: [Swift.String]?

        public init (
            joinColumns: [Swift.String]? = nil,
            listColumns: [Swift.String]? = nil
        )
        {
            self.joinColumns = joinColumns
            self.listColumns = listColumns
        }
    }

}

extension CleanRoomsClientTypes.AnalysisRulePolicy: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case sdkUnknown
        case v1
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        switch self {
            case let .v1(v1):
                try container.encode(v1, forKey: .v1)
            case let .sdkUnknown(sdkUnknown):
                try container.encode(sdkUnknown, forKey: .sdkUnknown)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let values = try decoder.container(keyedBy: CodingKeys.self)
        let v1Decoded = try values.decodeIfPresent(CleanRoomsClientTypes.AnalysisRulePolicyV1.self, forKey: .v1)
        if let v1 = v1Decoded {
            self = .v1(v1)
            return
        }
        self = .sdkUnknown("")
    }
}

extension CleanRoomsClientTypes {
    /// Controls on the query specifications that can be run on configured table..
    public enum AnalysisRulePolicy: Swift.Equatable {
        /// Controls on the query specifications that can be run on configured table..
        case v1(CleanRoomsClientTypes.AnalysisRulePolicyV1)
        case sdkUnknown(Swift.String)
    }

}

extension CleanRoomsClientTypes.AnalysisRulePolicyV1: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case aggregation
        case list
        case sdkUnknown
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        switch self {
            case let .aggregation(aggregation):
                try container.encode(aggregation, forKey: .aggregation)
            case let .list(list):
                try container.encode(list, forKey: .list)
            case let .sdkUnknown(sdkUnknown):
                try container.encode(sdkUnknown, forKey: .sdkUnknown)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let values = try decoder.container(keyedBy: CodingKeys.self)
        let listDecoded = try values.decodeIfPresent(CleanRoomsClientTypes.AnalysisRuleList.self, forKey: .list)
        if let list = listDecoded {
            self = .list(list)
            return
        }
        let aggregationDecoded = try values.decodeIfPresent(CleanRoomsClientTypes.AnalysisRuleAggregation.self, forKey: .aggregation)
        if let aggregation = aggregationDecoded {
            self = .aggregation(aggregation)
            return
        }
        self = .sdkUnknown("")
    }
}

extension CleanRoomsClientTypes {
    /// Controls on the query specifications that can be run on configured table..
    public enum AnalysisRulePolicyV1: Swift.Equatable {
        /// Analysis rule type that enables only list queries on a configured table.
        case list(CleanRoomsClientTypes.AnalysisRuleList)
        /// Analysis rule type that enables only aggregation queries on a configured table.
        case aggregation(CleanRoomsClientTypes.AnalysisRuleAggregation)
        case sdkUnknown(Swift.String)
    }

}

extension CleanRoomsClientTypes {
    public enum AnalysisRuleType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case aggregation
        case list
        case sdkUnknown(Swift.String)

        public static var allCases: [AnalysisRuleType] {
            return [
                .aggregation,
                .list,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .aggregation: return "AGGREGATION"
            case .list: return "LIST"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = AnalysisRuleType(rawValue: rawValue) ?? AnalysisRuleType.sdkUnknown(rawValue)
        }
    }
}

extension CleanRoomsClientTypes.BatchGetSchemaError: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case code
        case message
        case name
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let code = self.code {
            try encodeContainer.encode(code, forKey: .code)
        }
        if let message = self.message {
            try encodeContainer.encode(message, forKey: .message)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let codeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .code)
        code = codeDecoded
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension CleanRoomsClientTypes {
    /// An error describing why a schema could not be fetched.
    public struct BatchGetSchemaError: Swift.Equatable {
        /// An error code for the error.
        /// This member is required.
        public var code: Swift.String?
        /// An error message for the error.
        /// This member is required.
        public var message: Swift.String?
        /// An error name for the error.
        /// This member is required.
        public var name: Swift.String?

        public init (
            code: Swift.String? = nil,
            message: Swift.String? = nil,
            name: Swift.String? = nil
        )
        {
            self.code = code
            self.message = message
            self.name = name
        }
    }

}

extension BatchGetSchemaInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case names
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let names = names {
            var namesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .names)
            for tablealias0 in names {
                try namesContainer.encode(tablealias0)
            }
        }
    }
}

extension BatchGetSchemaInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let collaborationIdentifier = collaborationIdentifier else {
            return nil
        }
        return "/collaborations/\(collaborationIdentifier.urlPercentEncoding())/batch-schema"
    }
}

public struct BatchGetSchemaInput: Swift.Equatable {
    /// A unique identifier for the collaboration that the schemas belong to. Currently accepts collaboration ID.
    /// This member is required.
    public var collaborationIdentifier: Swift.String?
    /// The names for the schema objects to retrieve.>
    /// This member is required.
    public var names: [Swift.String]?

    public init (
        collaborationIdentifier: Swift.String? = nil,
        names: [Swift.String]? = nil
    )
    {
        self.collaborationIdentifier = collaborationIdentifier
        self.names = names
    }
}

struct BatchGetSchemaInputBody: Swift.Equatable {
    let names: [Swift.String]?
}

extension BatchGetSchemaInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case names
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let namesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .names)
        var namesDecoded0:[Swift.String]? = nil
        if let namesContainer = namesContainer {
            namesDecoded0 = [Swift.String]()
            for string0 in namesContainer {
                if let string0 = string0 {
                    namesDecoded0?.append(string0)
                }
            }
        }
        names = namesDecoded0
    }
}

extension BatchGetSchemaOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension BatchGetSchemaOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum BatchGetSchemaOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case internalServerException(InternalServerException)
    case resourceNotFoundException(ResourceNotFoundException)
    case throttlingException(ThrottlingException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension BatchGetSchemaOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: BatchGetSchemaOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.errors = output.errors
            self.schemas = output.schemas
        } else {
            self.errors = nil
            self.schemas = nil
        }
    }
}

public struct BatchGetSchemaOutputResponse: Swift.Equatable {
    /// Error reasons for schemas that could not be retrieved. One error is returned for every schema that could not be retrieved.
    /// This member is required.
    public var errors: [CleanRoomsClientTypes.BatchGetSchemaError]?
    /// The retrieved list of schemas.
    /// This member is required.
    public var schemas: [CleanRoomsClientTypes.Schema]?

    public init (
        errors: [CleanRoomsClientTypes.BatchGetSchemaError]? = nil,
        schemas: [CleanRoomsClientTypes.Schema]? = nil
    )
    {
        self.errors = errors
        self.schemas = schemas
    }
}

struct BatchGetSchemaOutputResponseBody: Swift.Equatable {
    let schemas: [CleanRoomsClientTypes.Schema]?
    let errors: [CleanRoomsClientTypes.BatchGetSchemaError]?
}

extension BatchGetSchemaOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case errors
        case schemas
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let schemasContainer = try containerValues.decodeIfPresent([CleanRoomsClientTypes.Schema?].self, forKey: .schemas)
        var schemasDecoded0:[CleanRoomsClientTypes.Schema]? = nil
        if let schemasContainer = schemasContainer {
            schemasDecoded0 = [CleanRoomsClientTypes.Schema]()
            for structure0 in schemasContainer {
                if let structure0 = structure0 {
                    schemasDecoded0?.append(structure0)
                }
            }
        }
        schemas = schemasDecoded0
        let errorsContainer = try containerValues.decodeIfPresent([CleanRoomsClientTypes.BatchGetSchemaError?].self, forKey: .errors)
        var errorsDecoded0:[CleanRoomsClientTypes.BatchGetSchemaError]? = nil
        if let errorsContainer = errorsContainer {
            errorsDecoded0 = [CleanRoomsClientTypes.BatchGetSchemaError]()
            for structure0 in errorsContainer {
                if let structure0 = structure0 {
                    errorsDecoded0?.append(structure0)
                }
            }
        }
        errors = errorsDecoded0
    }
}

extension CleanRoomsClientTypes.Collaboration: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case arn
        case createTime
        case creatorAccountId
        case creatorDisplayName
        case dataEncryptionMetadata
        case description
        case id
        case memberStatus
        case membershipArn
        case membershipId
        case name
        case queryLogStatus
        case updateTime
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let arn = self.arn {
            try encodeContainer.encode(arn, forKey: .arn)
        }
        if let createTime = self.createTime {
            try encodeContainer.encodeTimestamp(createTime, format: .epochSeconds, forKey: .createTime)
        }
        if let creatorAccountId = self.creatorAccountId {
            try encodeContainer.encode(creatorAccountId, forKey: .creatorAccountId)
        }
        if let creatorDisplayName = self.creatorDisplayName {
            try encodeContainer.encode(creatorDisplayName, forKey: .creatorDisplayName)
        }
        if let dataEncryptionMetadata = self.dataEncryptionMetadata {
            try encodeContainer.encode(dataEncryptionMetadata, forKey: .dataEncryptionMetadata)
        }
        if let description = self.description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let id = self.id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let memberStatus = self.memberStatus {
            try encodeContainer.encode(memberStatus.rawValue, forKey: .memberStatus)
        }
        if let membershipArn = self.membershipArn {
            try encodeContainer.encode(membershipArn, forKey: .membershipArn)
        }
        if let membershipId = self.membershipId {
            try encodeContainer.encode(membershipId, forKey: .membershipId)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let queryLogStatus = self.queryLogStatus {
            try encodeContainer.encode(queryLogStatus.rawValue, forKey: .queryLogStatus)
        }
        if let updateTime = self.updateTime {
            try encodeContainer.encodeTimestamp(updateTime, format: .epochSeconds, forKey: .updateTime)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
        let arnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .arn)
        arn = arnDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let creatorAccountIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .creatorAccountId)
        creatorAccountId = creatorAccountIdDecoded
        let creatorDisplayNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .creatorDisplayName)
        creatorDisplayName = creatorDisplayNameDecoded
        let createTimeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .createTime)
        createTime = createTimeDecoded
        let updateTimeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .updateTime)
        updateTime = updateTimeDecoded
        let memberStatusDecoded = try containerValues.decodeIfPresent(CleanRoomsClientTypes.MemberStatus.self, forKey: .memberStatus)
        memberStatus = memberStatusDecoded
        let membershipIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .membershipId)
        membershipId = membershipIdDecoded
        let membershipArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .membershipArn)
        membershipArn = membershipArnDecoded
        let dataEncryptionMetadataDecoded = try containerValues.decodeIfPresent(CleanRoomsClientTypes.DataEncryptionMetadata.self, forKey: .dataEncryptionMetadata)
        dataEncryptionMetadata = dataEncryptionMetadataDecoded
        let queryLogStatusDecoded = try containerValues.decodeIfPresent(CleanRoomsClientTypes.CollaborationQueryLogStatus.self, forKey: .queryLogStatus)
        queryLogStatus = queryLogStatusDecoded
    }
}

extension CleanRoomsClientTypes {
    /// The multi-party data share environment. The collaboration contains metadata about its purpose and participants.
    public struct Collaboration: Swift.Equatable {
        /// The unique ARN for the collaboration.
        /// This member is required.
        public var arn: Swift.String?
        /// The time when the collaboration was created.
        /// This member is required.
        public var createTime: ClientRuntime.Date?
        /// The identifier used to reference members of the collaboration. Currently only supports AWS account ID.
        /// This member is required.
        public var creatorAccountId: Swift.String?
        /// A display name of the collaboration creator.
        /// This member is required.
        public var creatorDisplayName: Swift.String?
        /// The settings for client-side encryption for cryptographic computing.
        public var dataEncryptionMetadata: CleanRoomsClientTypes.DataEncryptionMetadata?
        /// A description of the collaboration provided by the collaboration owner.
        public var description: Swift.String?
        /// The unique ID for the collaboration.
        /// This member is required.
        public var id: Swift.String?
        /// The status of a member in a collaboration.
        /// This member is required.
        public var memberStatus: CleanRoomsClientTypes.MemberStatus?
        /// The unique ARN for your membership within the collaboration.
        public var membershipArn: Swift.String?
        /// The unique ID for your membership within the collaboration.
        public var membershipId: Swift.String?
        /// A human-readable identifier provided by the collaboration owner. Display names are not unique.
        /// This member is required.
        public var name: Swift.String?
        /// An indicator as to whether query logging has been enabled or disabled for the collaboration.
        /// This member is required.
        public var queryLogStatus: CleanRoomsClientTypes.CollaborationQueryLogStatus?
        /// The time the collaboration metadata was last updated.
        /// This member is required.
        public var updateTime: ClientRuntime.Date?

        public init (
            arn: Swift.String? = nil,
            createTime: ClientRuntime.Date? = nil,
            creatorAccountId: Swift.String? = nil,
            creatorDisplayName: Swift.String? = nil,
            dataEncryptionMetadata: CleanRoomsClientTypes.DataEncryptionMetadata? = nil,
            description: Swift.String? = nil,
            id: Swift.String? = nil,
            memberStatus: CleanRoomsClientTypes.MemberStatus? = nil,
            membershipArn: Swift.String? = nil,
            membershipId: Swift.String? = nil,
            name: Swift.String? = nil,
            queryLogStatus: CleanRoomsClientTypes.CollaborationQueryLogStatus? = nil,
            updateTime: ClientRuntime.Date? = nil
        )
        {
            self.arn = arn
            self.createTime = createTime
            self.creatorAccountId = creatorAccountId
            self.creatorDisplayName = creatorDisplayName
            self.dataEncryptionMetadata = dataEncryptionMetadata
            self.description = description
            self.id = id
            self.memberStatus = memberStatus
            self.membershipArn = membershipArn
            self.membershipId = membershipId
            self.name = name
            self.queryLogStatus = queryLogStatus
            self.updateTime = updateTime
        }
    }

}

extension CleanRoomsClientTypes {
    public enum CollaborationQueryLogStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case disabled
        case enabled
        case sdkUnknown(Swift.String)

        public static var allCases: [CollaborationQueryLogStatus] {
            return [
                .disabled,
                .enabled,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .disabled: return "DISABLED"
            case .enabled: return "ENABLED"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = CollaborationQueryLogStatus(rawValue: rawValue) ?? CollaborationQueryLogStatus.sdkUnknown(rawValue)
        }
    }
}

extension CleanRoomsClientTypes.CollaborationSummary: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case arn
        case createTime
        case creatorAccountId
        case creatorDisplayName
        case id
        case memberStatus
        case membershipArn
        case membershipId
        case name
        case updateTime
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let arn = self.arn {
            try encodeContainer.encode(arn, forKey: .arn)
        }
        if let createTime = self.createTime {
            try encodeContainer.encodeTimestamp(createTime, format: .epochSeconds, forKey: .createTime)
        }
        if let creatorAccountId = self.creatorAccountId {
            try encodeContainer.encode(creatorAccountId, forKey: .creatorAccountId)
        }
        if let creatorDisplayName = self.creatorDisplayName {
            try encodeContainer.encode(creatorDisplayName, forKey: .creatorDisplayName)
        }
        if let id = self.id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let memberStatus = self.memberStatus {
            try encodeContainer.encode(memberStatus.rawValue, forKey: .memberStatus)
        }
        if let membershipArn = self.membershipArn {
            try encodeContainer.encode(membershipArn, forKey: .membershipArn)
        }
        if let membershipId = self.membershipId {
            try encodeContainer.encode(membershipId, forKey: .membershipId)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let updateTime = self.updateTime {
            try encodeContainer.encodeTimestamp(updateTime, format: .epochSeconds, forKey: .updateTime)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
        let arnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .arn)
        arn = arnDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let creatorAccountIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .creatorAccountId)
        creatorAccountId = creatorAccountIdDecoded
        let creatorDisplayNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .creatorDisplayName)
        creatorDisplayName = creatorDisplayNameDecoded
        let createTimeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .createTime)
        createTime = createTimeDecoded
        let updateTimeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .updateTime)
        updateTime = updateTimeDecoded
        let memberStatusDecoded = try containerValues.decodeIfPresent(CleanRoomsClientTypes.MemberStatus.self, forKey: .memberStatus)
        memberStatus = memberStatusDecoded
        let membershipIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .membershipId)
        membershipId = membershipIdDecoded
        let membershipArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .membershipArn)
        membershipArn = membershipArnDecoded
    }
}

extension CleanRoomsClientTypes {
    /// The metadata of the collaboration.
    public struct CollaborationSummary: Swift.Equatable {
        /// The ARN of the collaboration.
        /// This member is required.
        public var arn: Swift.String?
        /// The time when the collaboration was created.
        /// This member is required.
        public var createTime: ClientRuntime.Date?
        /// The identifier used to reference members of the collaboration. Currently only supports AWS Account ID.
        /// This member is required.
        public var creatorAccountId: Swift.String?
        /// The display name of the collaboration creator.
        /// This member is required.
        public var creatorDisplayName: Swift.String?
        /// The identifier for the collaboration.
        /// This member is required.
        public var id: Swift.String?
        /// The status of a member in a collaboration.
        /// This member is required.
        public var memberStatus: CleanRoomsClientTypes.MemberStatus?
        /// The ARN of a member in a collaboration.
        public var membershipArn: Swift.String?
        /// The identifier of a member in a collaboration.
        public var membershipId: Swift.String?
        /// A human-readable identifier provided by the collaboration owner. Display names are not unique.
        /// This member is required.
        public var name: Swift.String?
        /// The time the collaboration metadata was last updated.
        /// This member is required.
        public var updateTime: ClientRuntime.Date?

        public init (
            arn: Swift.String? = nil,
            createTime: ClientRuntime.Date? = nil,
            creatorAccountId: Swift.String? = nil,
            creatorDisplayName: Swift.String? = nil,
            id: Swift.String? = nil,
            memberStatus: CleanRoomsClientTypes.MemberStatus? = nil,
            membershipArn: Swift.String? = nil,
            membershipId: Swift.String? = nil,
            name: Swift.String? = nil,
            updateTime: ClientRuntime.Date? = nil
        )
        {
            self.arn = arn
            self.createTime = createTime
            self.creatorAccountId = creatorAccountId
            self.creatorDisplayName = creatorDisplayName
            self.id = id
            self.memberStatus = memberStatus
            self.membershipArn = membershipArn
            self.membershipId = membershipId
            self.name = name
            self.updateTime = updateTime
        }
    }

}

extension CleanRoomsClientTypes.Column: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name
        case type
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let type = self.type {
            try encodeContainer.encode(type, forKey: .type)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let typeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .type)
        type = typeDecoded
    }
}

extension CleanRoomsClientTypes {
    /// A column within a schema relation, derived from the underlying AWS Glue table.
    public struct Column: Swift.Equatable {
        /// The name of the column.
        /// This member is required.
        public var name: Swift.String?
        /// The type of the column.
        /// This member is required.
        public var type: Swift.String?

        public init (
            name: Swift.String? = nil,
            type: Swift.String? = nil
        )
        {
            self.name = name
            self.type = type
        }
    }

}

extension CleanRoomsClientTypes.ConfiguredTable: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case allowedColumns
        case analysisMethod
        case analysisRuleTypes
        case arn
        case createTime
        case description
        case id
        case name
        case tableReference
        case updateTime
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let allowedColumns = allowedColumns {
            var allowedColumnsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .allowedColumns)
            for columnname0 in allowedColumns {
                try allowedColumnsContainer.encode(columnname0)
            }
        }
        if let analysisMethod = self.analysisMethod {
            try encodeContainer.encode(analysisMethod.rawValue, forKey: .analysisMethod)
        }
        if let analysisRuleTypes = analysisRuleTypes {
            var analysisRuleTypesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .analysisRuleTypes)
            for configuredtableanalysisruletype0 in analysisRuleTypes {
                try analysisRuleTypesContainer.encode(configuredtableanalysisruletype0.rawValue)
            }
        }
        if let arn = self.arn {
            try encodeContainer.encode(arn, forKey: .arn)
        }
        if let createTime = self.createTime {
            try encodeContainer.encodeTimestamp(createTime, format: .epochSeconds, forKey: .createTime)
        }
        if let description = self.description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let id = self.id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let tableReference = self.tableReference {
            try encodeContainer.encode(tableReference, forKey: .tableReference)
        }
        if let updateTime = self.updateTime {
            try encodeContainer.encodeTimestamp(updateTime, format: .epochSeconds, forKey: .updateTime)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
        let arnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .arn)
        arn = arnDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let tableReferenceDecoded = try containerValues.decodeIfPresent(CleanRoomsClientTypes.TableReference.self, forKey: .tableReference)
        tableReference = tableReferenceDecoded
        let createTimeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .createTime)
        createTime = createTimeDecoded
        let updateTimeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .updateTime)
        updateTime = updateTimeDecoded
        let analysisRuleTypesContainer = try containerValues.decodeIfPresent([CleanRoomsClientTypes.ConfiguredTableAnalysisRuleType?].self, forKey: .analysisRuleTypes)
        var analysisRuleTypesDecoded0:[CleanRoomsClientTypes.ConfiguredTableAnalysisRuleType]? = nil
        if let analysisRuleTypesContainer = analysisRuleTypesContainer {
            analysisRuleTypesDecoded0 = [CleanRoomsClientTypes.ConfiguredTableAnalysisRuleType]()
            for enum0 in analysisRuleTypesContainer {
                if let enum0 = enum0 {
                    analysisRuleTypesDecoded0?.append(enum0)
                }
            }
        }
        analysisRuleTypes = analysisRuleTypesDecoded0
        let analysisMethodDecoded = try containerValues.decodeIfPresent(CleanRoomsClientTypes.AnalysisMethod.self, forKey: .analysisMethod)
        analysisMethod = analysisMethodDecoded
        let allowedColumnsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .allowedColumns)
        var allowedColumnsDecoded0:[Swift.String]? = nil
        if let allowedColumnsContainer = allowedColumnsContainer {
            allowedColumnsDecoded0 = [Swift.String]()
            for string0 in allowedColumnsContainer {
                if let string0 = string0 {
                    allowedColumnsDecoded0?.append(string0)
                }
            }
        }
        allowedColumns = allowedColumnsDecoded0
    }
}

extension CleanRoomsClientTypes {
    /// A table that has been configured for use in a collaboration.
    public struct ConfiguredTable: Swift.Equatable {
        /// The columns within the underlying AWS Glue table that can be utilized within collaborations.
        /// This member is required.
        public var allowedColumns: [Swift.String]?
        /// The analysis method for the configured table. The only valid value is currently `DIRECT_QUERY`.
        /// This member is required.
        public var analysisMethod: CleanRoomsClientTypes.AnalysisMethod?
        /// The types of analysis rules associated with this configured table. Valid values are `AGGREGATION` and `LIST`. Currently, only one analysis rule may be associated with a configured table.
        /// This member is required.
        public var analysisRuleTypes: [CleanRoomsClientTypes.ConfiguredTableAnalysisRuleType]?
        /// The unique ARN for the configured table.
        /// This member is required.
        public var arn: Swift.String?
        /// The time the configured table was created.
        /// This member is required.
        public var createTime: ClientRuntime.Date?
        /// A description for the configured table.
        public var description: Swift.String?
        /// The unique ID for the configured table.
        /// This member is required.
        public var id: Swift.String?
        /// A name for the configured table.
        /// This member is required.
        public var name: Swift.String?
        /// The AWS Glue table that this configured table represents.
        /// This member is required.
        public var tableReference: CleanRoomsClientTypes.TableReference?
        /// The time the configured table was last updated
        /// This member is required.
        public var updateTime: ClientRuntime.Date?

        public init (
            allowedColumns: [Swift.String]? = nil,
            analysisMethod: CleanRoomsClientTypes.AnalysisMethod? = nil,
            analysisRuleTypes: [CleanRoomsClientTypes.ConfiguredTableAnalysisRuleType]? = nil,
            arn: Swift.String? = nil,
            createTime: ClientRuntime.Date? = nil,
            description: Swift.String? = nil,
            id: Swift.String? = nil,
            name: Swift.String? = nil,
            tableReference: CleanRoomsClientTypes.TableReference? = nil,
            updateTime: ClientRuntime.Date? = nil
        )
        {
            self.allowedColumns = allowedColumns
            self.analysisMethod = analysisMethod
            self.analysisRuleTypes = analysisRuleTypes
            self.arn = arn
            self.createTime = createTime
            self.description = description
            self.id = id
            self.name = name
            self.tableReference = tableReference
            self.updateTime = updateTime
        }
    }

}

extension CleanRoomsClientTypes.ConfiguredTableAnalysisRule: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case configuredTableArn
        case configuredTableId
        case createTime
        case policy
        case type
        case updateTime
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let configuredTableArn = self.configuredTableArn {
            try encodeContainer.encode(configuredTableArn, forKey: .configuredTableArn)
        }
        if let configuredTableId = self.configuredTableId {
            try encodeContainer.encode(configuredTableId, forKey: .configuredTableId)
        }
        if let createTime = self.createTime {
            try encodeContainer.encodeTimestamp(createTime, format: .epochSeconds, forKey: .createTime)
        }
        if let policy = self.policy {
            try encodeContainer.encode(policy, forKey: .policy)
        }
        if let type = self.type {
            try encodeContainer.encode(type.rawValue, forKey: .type)
        }
        if let updateTime = self.updateTime {
            try encodeContainer.encodeTimestamp(updateTime, format: .epochSeconds, forKey: .updateTime)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let configuredTableIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .configuredTableId)
        configuredTableId = configuredTableIdDecoded
        let configuredTableArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .configuredTableArn)
        configuredTableArn = configuredTableArnDecoded
        let policyDecoded = try containerValues.decodeIfPresent(CleanRoomsClientTypes.ConfiguredTableAnalysisRulePolicy.self, forKey: .policy)
        policy = policyDecoded
        let typeDecoded = try containerValues.decodeIfPresent(CleanRoomsClientTypes.ConfiguredTableAnalysisRuleType.self, forKey: .type)
        type = typeDecoded
        let createTimeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .createTime)
        createTime = createTimeDecoded
        let updateTimeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .updateTime)
        updateTime = updateTimeDecoded
    }
}

extension CleanRoomsClientTypes {
    /// A configured table analysis rule, which limits how data for this table can be used.
    public struct ConfiguredTableAnalysisRule: Swift.Equatable {
        /// The unique ARN for the configured table.
        /// This member is required.
        public var configuredTableArn: Swift.String?
        /// The unique ID for the configured table.
        /// This member is required.
        public var configuredTableId: Swift.String?
        /// The time the configured table analysis rule was created.
        /// This member is required.
        public var createTime: ClientRuntime.Date?
        /// The policy that controls SQL query rules.
        /// This member is required.
        public var policy: CleanRoomsClientTypes.ConfiguredTableAnalysisRulePolicy?
        /// The type of configured table analysis rule. Valid values are `AGGREGATION` and `LIST`.
        /// This member is required.
        public var type: CleanRoomsClientTypes.ConfiguredTableAnalysisRuleType?
        /// The time the configured table analysis rule was last updated.
        /// This member is required.
        public var updateTime: ClientRuntime.Date?

        public init (
            configuredTableArn: Swift.String? = nil,
            configuredTableId: Swift.String? = nil,
            createTime: ClientRuntime.Date? = nil,
            policy: CleanRoomsClientTypes.ConfiguredTableAnalysisRulePolicy? = nil,
            type: CleanRoomsClientTypes.ConfiguredTableAnalysisRuleType? = nil,
            updateTime: ClientRuntime.Date? = nil
        )
        {
            self.configuredTableArn = configuredTableArn
            self.configuredTableId = configuredTableId
            self.createTime = createTime
            self.policy = policy
            self.type = type
            self.updateTime = updateTime
        }
    }

}

extension CleanRoomsClientTypes.ConfiguredTableAnalysisRulePolicy: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case sdkUnknown
        case v1
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        switch self {
            case let .v1(v1):
                try container.encode(v1, forKey: .v1)
            case let .sdkUnknown(sdkUnknown):
                try container.encode(sdkUnknown, forKey: .sdkUnknown)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let values = try decoder.container(keyedBy: CodingKeys.self)
        let v1Decoded = try values.decodeIfPresent(CleanRoomsClientTypes.ConfiguredTableAnalysisRulePolicyV1.self, forKey: .v1)
        if let v1 = v1Decoded {
            self = .v1(v1)
            return
        }
        self = .sdkUnknown("")
    }
}

extension CleanRoomsClientTypes {
    /// Controls on the query specifications that can be run on a configured table.
    public enum ConfiguredTableAnalysisRulePolicy: Swift.Equatable {
        /// Controls on the query specifications that can be run on a configured table.
        case v1(CleanRoomsClientTypes.ConfiguredTableAnalysisRulePolicyV1)
        case sdkUnknown(Swift.String)
    }

}

extension CleanRoomsClientTypes.ConfiguredTableAnalysisRulePolicyV1: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case aggregation
        case list
        case sdkUnknown
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        switch self {
            case let .aggregation(aggregation):
                try container.encode(aggregation, forKey: .aggregation)
            case let .list(list):
                try container.encode(list, forKey: .list)
            case let .sdkUnknown(sdkUnknown):
                try container.encode(sdkUnknown, forKey: .sdkUnknown)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let values = try decoder.container(keyedBy: CodingKeys.self)
        let listDecoded = try values.decodeIfPresent(CleanRoomsClientTypes.AnalysisRuleList.self, forKey: .list)
        if let list = listDecoded {
            self = .list(list)
            return
        }
        let aggregationDecoded = try values.decodeIfPresent(CleanRoomsClientTypes.AnalysisRuleAggregation.self, forKey: .aggregation)
        if let aggregation = aggregationDecoded {
            self = .aggregation(aggregation)
            return
        }
        self = .sdkUnknown("")
    }
}

extension CleanRoomsClientTypes {
    /// Controls on the query specifications that can be run on a configured table.
    public enum ConfiguredTableAnalysisRulePolicyV1: Swift.Equatable {
        /// Analysis rule type that enables only list queries on a configured table.
        case list(CleanRoomsClientTypes.AnalysisRuleList)
        /// Analysis rule type that enables only aggregation queries on a configured table.
        case aggregation(CleanRoomsClientTypes.AnalysisRuleAggregation)
        case sdkUnknown(Swift.String)
    }

}

extension CleanRoomsClientTypes {
    public enum ConfiguredTableAnalysisRuleType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case aggregation
        case list
        case sdkUnknown(Swift.String)

        public static var allCases: [ConfiguredTableAnalysisRuleType] {
            return [
                .aggregation,
                .list,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .aggregation: return "AGGREGATION"
            case .list: return "LIST"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ConfiguredTableAnalysisRuleType(rawValue: rawValue) ?? ConfiguredTableAnalysisRuleType.sdkUnknown(rawValue)
        }
    }
}

extension CleanRoomsClientTypes.ConfiguredTableAssociation: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case arn
        case configuredTableArn
        case configuredTableId
        case createTime
        case description
        case id
        case membershipArn
        case membershipId
        case name
        case roleArn
        case updateTime
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let arn = self.arn {
            try encodeContainer.encode(arn, forKey: .arn)
        }
        if let configuredTableArn = self.configuredTableArn {
            try encodeContainer.encode(configuredTableArn, forKey: .configuredTableArn)
        }
        if let configuredTableId = self.configuredTableId {
            try encodeContainer.encode(configuredTableId, forKey: .configuredTableId)
        }
        if let createTime = self.createTime {
            try encodeContainer.encodeTimestamp(createTime, format: .epochSeconds, forKey: .createTime)
        }
        if let description = self.description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let id = self.id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let membershipArn = self.membershipArn {
            try encodeContainer.encode(membershipArn, forKey: .membershipArn)
        }
        if let membershipId = self.membershipId {
            try encodeContainer.encode(membershipId, forKey: .membershipId)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let roleArn = self.roleArn {
            try encodeContainer.encode(roleArn, forKey: .roleArn)
        }
        if let updateTime = self.updateTime {
            try encodeContainer.encodeTimestamp(updateTime, format: .epochSeconds, forKey: .updateTime)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let arnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .arn)
        arn = arnDecoded
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
        let configuredTableIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .configuredTableId)
        configuredTableId = configuredTableIdDecoded
        let configuredTableArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .configuredTableArn)
        configuredTableArn = configuredTableArnDecoded
        let membershipIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .membershipId)
        membershipId = membershipIdDecoded
        let membershipArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .membershipArn)
        membershipArn = membershipArnDecoded
        let roleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .roleArn)
        roleArn = roleArnDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let createTimeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .createTime)
        createTime = createTimeDecoded
        let updateTimeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .updateTime)
        updateTime = updateTimeDecoded
    }
}

extension CleanRoomsClientTypes {
    /// A configured table association links a configured table to a collaboration.
    public struct ConfiguredTableAssociation: Swift.Equatable {
        /// The unique ARN for the configured table association.
        /// This member is required.
        public var arn: Swift.String?
        /// The unique ARN for the configured table that the association refers to.
        /// This member is required.
        public var configuredTableArn: Swift.String?
        /// The unique ID for the configured table that the association refers to.
        /// This member is required.
        public var configuredTableId: Swift.String?
        /// The time the configured table association was created.
        /// This member is required.
        public var createTime: ClientRuntime.Date?
        /// A description of the configured table association.
        public var description: Swift.String?
        /// The unique ID for the configured table association.
        /// This member is required.
        public var id: Swift.String?
        /// The unique ARN for the membership this configured table association belongs to.
        /// This member is required.
        public var membershipArn: Swift.String?
        /// The unique ID for the membership this configured table association belongs to.
        /// This member is required.
        public var membershipId: Swift.String?
        /// The name of the configured table association, in lowercase. The table is identified by this name when running protected queries against the underlying data.
        /// This member is required.
        public var name: Swift.String?
        /// The service will assume this role to access catalog metadata and query the table.
        /// This member is required.
        public var roleArn: Swift.String?
        /// The time the configured table association was last updated.
        /// This member is required.
        public var updateTime: ClientRuntime.Date?

        public init (
            arn: Swift.String? = nil,
            configuredTableArn: Swift.String? = nil,
            configuredTableId: Swift.String? = nil,
            createTime: ClientRuntime.Date? = nil,
            description: Swift.String? = nil,
            id: Swift.String? = nil,
            membershipArn: Swift.String? = nil,
            membershipId: Swift.String? = nil,
            name: Swift.String? = nil,
            roleArn: Swift.String? = nil,
            updateTime: ClientRuntime.Date? = nil
        )
        {
            self.arn = arn
            self.configuredTableArn = configuredTableArn
            self.configuredTableId = configuredTableId
            self.createTime = createTime
            self.description = description
            self.id = id
            self.membershipArn = membershipArn
            self.membershipId = membershipId
            self.name = name
            self.roleArn = roleArn
            self.updateTime = updateTime
        }
    }

}

extension CleanRoomsClientTypes.ConfiguredTableAssociationSummary: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case arn
        case configuredTableId
        case createTime
        case id
        case membershipArn
        case membershipId
        case name
        case updateTime
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let arn = self.arn {
            try encodeContainer.encode(arn, forKey: .arn)
        }
        if let configuredTableId = self.configuredTableId {
            try encodeContainer.encode(configuredTableId, forKey: .configuredTableId)
        }
        if let createTime = self.createTime {
            try encodeContainer.encodeTimestamp(createTime, format: .epochSeconds, forKey: .createTime)
        }
        if let id = self.id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let membershipArn = self.membershipArn {
            try encodeContainer.encode(membershipArn, forKey: .membershipArn)
        }
        if let membershipId = self.membershipId {
            try encodeContainer.encode(membershipId, forKey: .membershipId)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let updateTime = self.updateTime {
            try encodeContainer.encodeTimestamp(updateTime, format: .epochSeconds, forKey: .updateTime)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let configuredTableIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .configuredTableId)
        configuredTableId = configuredTableIdDecoded
        let membershipIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .membershipId)
        membershipId = membershipIdDecoded
        let membershipArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .membershipArn)
        membershipArn = membershipArnDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let createTimeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .createTime)
        createTime = createTimeDecoded
        let updateTimeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .updateTime)
        updateTime = updateTimeDecoded
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
        let arnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .arn)
        arn = arnDecoded
    }
}

extension CleanRoomsClientTypes {
    /// The configured table association summary for the objects listed by the request.
    public struct ConfiguredTableAssociationSummary: Swift.Equatable {
        /// The unique ARN for the configured table association.
        /// This member is required.
        public var arn: Swift.String?
        /// The unique configured table ID that this configured table association refers to.
        /// This member is required.
        public var configuredTableId: Swift.String?
        /// The time the configured table association was created.
        /// This member is required.
        public var createTime: ClientRuntime.Date?
        /// The unique ID for the configured table association.
        /// This member is required.
        public var id: Swift.String?
        /// The unique ARN for the membership that the configured table association belongs to.
        /// This member is required.
        public var membershipArn: Swift.String?
        /// The unique ID for the membership that the configured table association belongs to.
        /// This member is required.
        public var membershipId: Swift.String?
        /// The name of the configured table association. The table is identified by this name when running Protected Queries against the underlying data.
        /// This member is required.
        public var name: Swift.String?
        /// The time the configured table association was last updated.
        /// This member is required.
        public var updateTime: ClientRuntime.Date?

        public init (
            arn: Swift.String? = nil,
            configuredTableId: Swift.String? = nil,
            createTime: ClientRuntime.Date? = nil,
            id: Swift.String? = nil,
            membershipArn: Swift.String? = nil,
            membershipId: Swift.String? = nil,
            name: Swift.String? = nil,
            updateTime: ClientRuntime.Date? = nil
        )
        {
            self.arn = arn
            self.configuredTableId = configuredTableId
            self.createTime = createTime
            self.id = id
            self.membershipArn = membershipArn
            self.membershipId = membershipId
            self.name = name
            self.updateTime = updateTime
        }
    }

}

extension CleanRoomsClientTypes.ConfiguredTableSummary: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case analysisMethod
        case analysisRuleTypes
        case arn
        case createTime
        case id
        case name
        case updateTime
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let analysisMethod = self.analysisMethod {
            try encodeContainer.encode(analysisMethod.rawValue, forKey: .analysisMethod)
        }
        if let analysisRuleTypes = analysisRuleTypes {
            var analysisRuleTypesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .analysisRuleTypes)
            for configuredtableanalysisruletype0 in analysisRuleTypes {
                try analysisRuleTypesContainer.encode(configuredtableanalysisruletype0.rawValue)
            }
        }
        if let arn = self.arn {
            try encodeContainer.encode(arn, forKey: .arn)
        }
        if let createTime = self.createTime {
            try encodeContainer.encodeTimestamp(createTime, format: .epochSeconds, forKey: .createTime)
        }
        if let id = self.id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let updateTime = self.updateTime {
            try encodeContainer.encodeTimestamp(updateTime, format: .epochSeconds, forKey: .updateTime)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
        let arnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .arn)
        arn = arnDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let createTimeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .createTime)
        createTime = createTimeDecoded
        let updateTimeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .updateTime)
        updateTime = updateTimeDecoded
        let analysisRuleTypesContainer = try containerValues.decodeIfPresent([CleanRoomsClientTypes.ConfiguredTableAnalysisRuleType?].self, forKey: .analysisRuleTypes)
        var analysisRuleTypesDecoded0:[CleanRoomsClientTypes.ConfiguredTableAnalysisRuleType]? = nil
        if let analysisRuleTypesContainer = analysisRuleTypesContainer {
            analysisRuleTypesDecoded0 = [CleanRoomsClientTypes.ConfiguredTableAnalysisRuleType]()
            for enum0 in analysisRuleTypesContainer {
                if let enum0 = enum0 {
                    analysisRuleTypesDecoded0?.append(enum0)
                }
            }
        }
        analysisRuleTypes = analysisRuleTypesDecoded0
        let analysisMethodDecoded = try containerValues.decodeIfPresent(CleanRoomsClientTypes.AnalysisMethod.self, forKey: .analysisMethod)
        analysisMethod = analysisMethodDecoded
    }
}

extension CleanRoomsClientTypes {
    /// The configured table summary for the objects listed by the request.
    public struct ConfiguredTableSummary: Swift.Equatable {
        /// The analysis method for the configured tables. The only valid value is currently `DIRECT_QUERY`.
        /// This member is required.
        public var analysisMethod: CleanRoomsClientTypes.AnalysisMethod?
        /// The types of analysis rules associated with this configured table.
        /// This member is required.
        public var analysisRuleTypes: [CleanRoomsClientTypes.ConfiguredTableAnalysisRuleType]?
        /// The unique ARN of the configured table.
        /// This member is required.
        public var arn: Swift.String?
        /// The time the configured table was created.
        /// This member is required.
        public var createTime: ClientRuntime.Date?
        /// The unique ID of the configured table.
        /// This member is required.
        public var id: Swift.String?
        /// The name of the configured table.
        /// This member is required.
        public var name: Swift.String?
        /// The time the configured table was last updated.
        /// This member is required.
        public var updateTime: ClientRuntime.Date?

        public init (
            analysisMethod: CleanRoomsClientTypes.AnalysisMethod? = nil,
            analysisRuleTypes: [CleanRoomsClientTypes.ConfiguredTableAnalysisRuleType]? = nil,
            arn: Swift.String? = nil,
            createTime: ClientRuntime.Date? = nil,
            id: Swift.String? = nil,
            name: Swift.String? = nil,
            updateTime: ClientRuntime.Date? = nil
        )
        {
            self.analysisMethod = analysisMethod
            self.analysisRuleTypes = analysisRuleTypes
            self.arn = arn
            self.createTime = createTime
            self.id = id
            self.name = name
            self.updateTime = updateTime
        }
    }

}

extension ConflictException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ConflictExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
            self.reason = output.reason
            self.resourceId = output.resourceId
            self.resourceType = output.resourceType
        } else {
            self.message = nil
            self.reason = nil
            self.resourceId = nil
            self.resourceType = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// Updating or deleting a resource can cause an inconsistent state.
public struct ConflictException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?
    /// A reason code for the exception.
    public var reason: CleanRoomsClientTypes.ConflictExceptionReason?
    /// The ID of the conflicting resource.
    public var resourceId: Swift.String?
    /// The type of the conflicting resource.
    public var resourceType: CleanRoomsClientTypes.ResourceType?

    public init (
        message: Swift.String? = nil,
        reason: CleanRoomsClientTypes.ConflictExceptionReason? = nil,
        resourceId: Swift.String? = nil,
        resourceType: CleanRoomsClientTypes.ResourceType? = nil
    )
    {
        self.message = message
        self.reason = reason
        self.resourceId = resourceId
        self.resourceType = resourceType
    }
}

struct ConflictExceptionBody: Swift.Equatable {
    let message: Swift.String?
    let resourceId: Swift.String?
    let resourceType: CleanRoomsClientTypes.ResourceType?
    let reason: CleanRoomsClientTypes.ConflictExceptionReason?
}

extension ConflictExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
        case reason
        case resourceId
        case resourceType
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
        let resourceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceId)
        resourceId = resourceIdDecoded
        let resourceTypeDecoded = try containerValues.decodeIfPresent(CleanRoomsClientTypes.ResourceType.self, forKey: .resourceType)
        resourceType = resourceTypeDecoded
        let reasonDecoded = try containerValues.decodeIfPresent(CleanRoomsClientTypes.ConflictExceptionReason.self, forKey: .reason)
        reason = reasonDecoded
    }
}

extension CleanRoomsClientTypes {
    public enum ConflictExceptionReason: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case alreadyExists
        case invalidState
        case subresourcesExist
        case sdkUnknown(Swift.String)

        public static var allCases: [ConflictExceptionReason] {
            return [
                .alreadyExists,
                .invalidState,
                .subresourcesExist,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .alreadyExists: return "ALREADY_EXISTS"
            case .invalidState: return "INVALID_STATE"
            case .subresourcesExist: return "SUBRESOURCES_EXIST"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ConflictExceptionReason(rawValue: rawValue) ?? ConflictExceptionReason.sdkUnknown(rawValue)
        }
    }
}

extension CreateCollaborationInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case creatorDisplayName
        case creatorMemberAbilities
        case dataEncryptionMetadata
        case description
        case members
        case name
        case queryLogStatus
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let creatorDisplayName = self.creatorDisplayName {
            try encodeContainer.encode(creatorDisplayName, forKey: .creatorDisplayName)
        }
        if let creatorMemberAbilities = creatorMemberAbilities {
            var creatorMemberAbilitiesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .creatorMemberAbilities)
            for memberability0 in creatorMemberAbilities {
                try creatorMemberAbilitiesContainer.encode(memberability0.rawValue)
            }
        }
        if let dataEncryptionMetadata = self.dataEncryptionMetadata {
            try encodeContainer.encode(dataEncryptionMetadata, forKey: .dataEncryptionMetadata)
        }
        if let description = self.description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let members = members {
            var membersContainer = encodeContainer.nestedUnkeyedContainer(forKey: .members)
            for memberspecification0 in members {
                try membersContainer.encode(memberspecification0)
            }
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let queryLogStatus = self.queryLogStatus {
            try encodeContainer.encode(queryLogStatus.rawValue, forKey: .queryLogStatus)
        }
    }
}

extension CreateCollaborationInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/collaborations"
    }
}

public struct CreateCollaborationInput: Swift.Equatable {
    /// The display name of the collaboration creator.
    /// This member is required.
    public var creatorDisplayName: Swift.String?
    /// The abilities granted to the collaboration creator.
    /// This member is required.
    public var creatorMemberAbilities: [CleanRoomsClientTypes.MemberAbility]?
    /// The settings for client-side encryption with Cryptographic Computing for Clean Rooms.
    public var dataEncryptionMetadata: CleanRoomsClientTypes.DataEncryptionMetadata?
    /// A description of the collaboration provided by the collaboration owner.
    /// This member is required.
    public var description: Swift.String?
    /// A list of initial members, not including the creator. This list is immutable.
    /// This member is required.
    public var members: [CleanRoomsClientTypes.MemberSpecification]?
    /// The display name for a collaboration.
    /// This member is required.
    public var name: Swift.String?
    /// An indicator as to whether query logging has been enabled or disabled for the collaboration.
    /// This member is required.
    public var queryLogStatus: CleanRoomsClientTypes.CollaborationQueryLogStatus?

    public init (
        creatorDisplayName: Swift.String? = nil,
        creatorMemberAbilities: [CleanRoomsClientTypes.MemberAbility]? = nil,
        dataEncryptionMetadata: CleanRoomsClientTypes.DataEncryptionMetadata? = nil,
        description: Swift.String? = nil,
        members: [CleanRoomsClientTypes.MemberSpecification]? = nil,
        name: Swift.String? = nil,
        queryLogStatus: CleanRoomsClientTypes.CollaborationQueryLogStatus? = nil
    )
    {
        self.creatorDisplayName = creatorDisplayName
        self.creatorMemberAbilities = creatorMemberAbilities
        self.dataEncryptionMetadata = dataEncryptionMetadata
        self.description = description
        self.members = members
        self.name = name
        self.queryLogStatus = queryLogStatus
    }
}

struct CreateCollaborationInputBody: Swift.Equatable {
    let members: [CleanRoomsClientTypes.MemberSpecification]?
    let name: Swift.String?
    let description: Swift.String?
    let creatorMemberAbilities: [CleanRoomsClientTypes.MemberAbility]?
    let creatorDisplayName: Swift.String?
    let dataEncryptionMetadata: CleanRoomsClientTypes.DataEncryptionMetadata?
    let queryLogStatus: CleanRoomsClientTypes.CollaborationQueryLogStatus?
}

extension CreateCollaborationInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case creatorDisplayName
        case creatorMemberAbilities
        case dataEncryptionMetadata
        case description
        case members
        case name
        case queryLogStatus
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let membersContainer = try containerValues.decodeIfPresent([CleanRoomsClientTypes.MemberSpecification?].self, forKey: .members)
        var membersDecoded0:[CleanRoomsClientTypes.MemberSpecification]? = nil
        if let membersContainer = membersContainer {
            membersDecoded0 = [CleanRoomsClientTypes.MemberSpecification]()
            for structure0 in membersContainer {
                if let structure0 = structure0 {
                    membersDecoded0?.append(structure0)
                }
            }
        }
        members = membersDecoded0
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let creatorMemberAbilitiesContainer = try containerValues.decodeIfPresent([CleanRoomsClientTypes.MemberAbility?].self, forKey: .creatorMemberAbilities)
        var creatorMemberAbilitiesDecoded0:[CleanRoomsClientTypes.MemberAbility]? = nil
        if let creatorMemberAbilitiesContainer = creatorMemberAbilitiesContainer {
            creatorMemberAbilitiesDecoded0 = [CleanRoomsClientTypes.MemberAbility]()
            for string0 in creatorMemberAbilitiesContainer {
                if let string0 = string0 {
                    creatorMemberAbilitiesDecoded0?.append(string0)
                }
            }
        }
        creatorMemberAbilities = creatorMemberAbilitiesDecoded0
        let creatorDisplayNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .creatorDisplayName)
        creatorDisplayName = creatorDisplayNameDecoded
        let dataEncryptionMetadataDecoded = try containerValues.decodeIfPresent(CleanRoomsClientTypes.DataEncryptionMetadata.self, forKey: .dataEncryptionMetadata)
        dataEncryptionMetadata = dataEncryptionMetadataDecoded
        let queryLogStatusDecoded = try containerValues.decodeIfPresent(CleanRoomsClientTypes.CollaborationQueryLogStatus.self, forKey: .queryLogStatus)
        queryLogStatus = queryLogStatusDecoded
    }
}

extension CreateCollaborationOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateCollaborationOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceQuotaExceededException" : self = .serviceQuotaExceededException(try ServiceQuotaExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum CreateCollaborationOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case internalServerException(InternalServerException)
    case serviceQuotaExceededException(ServiceQuotaExceededException)
    case throttlingException(ThrottlingException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateCollaborationOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: CreateCollaborationOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.collaboration = output.collaboration
        } else {
            self.collaboration = nil
        }
    }
}

public struct CreateCollaborationOutputResponse: Swift.Equatable {
    /// The entire created collaboration object.
    /// This member is required.
    public var collaboration: CleanRoomsClientTypes.Collaboration?

    public init (
        collaboration: CleanRoomsClientTypes.Collaboration? = nil
    )
    {
        self.collaboration = collaboration
    }
}

struct CreateCollaborationOutputResponseBody: Swift.Equatable {
    let collaboration: CleanRoomsClientTypes.Collaboration?
}

extension CreateCollaborationOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case collaboration
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let collaborationDecoded = try containerValues.decodeIfPresent(CleanRoomsClientTypes.Collaboration.self, forKey: .collaboration)
        collaboration = collaborationDecoded
    }
}

extension CreateConfiguredTableAnalysisRuleInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case analysisRulePolicy
        case analysisRuleType
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let analysisRulePolicy = self.analysisRulePolicy {
            try encodeContainer.encode(analysisRulePolicy, forKey: .analysisRulePolicy)
        }
        if let analysisRuleType = self.analysisRuleType {
            try encodeContainer.encode(analysisRuleType.rawValue, forKey: .analysisRuleType)
        }
    }
}

extension CreateConfiguredTableAnalysisRuleInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let configuredTableIdentifier = configuredTableIdentifier else {
            return nil
        }
        return "/configuredTables/\(configuredTableIdentifier.urlPercentEncoding())/analysisRule"
    }
}

public struct CreateConfiguredTableAnalysisRuleInput: Swift.Equatable {
    /// The entire created configured table analysis rule object.
    /// This member is required.
    public var analysisRulePolicy: CleanRoomsClientTypes.ConfiguredTableAnalysisRulePolicy?
    /// The type of analysis rule. Valid values are AGGREGATION and LIST.
    /// This member is required.
    public var analysisRuleType: CleanRoomsClientTypes.ConfiguredTableAnalysisRuleType?
    /// The identifier for the configured table to create the analysis rule for. Currently accepts the configured table ID.
    /// This member is required.
    public var configuredTableIdentifier: Swift.String?

    public init (
        analysisRulePolicy: CleanRoomsClientTypes.ConfiguredTableAnalysisRulePolicy? = nil,
        analysisRuleType: CleanRoomsClientTypes.ConfiguredTableAnalysisRuleType? = nil,
        configuredTableIdentifier: Swift.String? = nil
    )
    {
        self.analysisRulePolicy = analysisRulePolicy
        self.analysisRuleType = analysisRuleType
        self.configuredTableIdentifier = configuredTableIdentifier
    }
}

struct CreateConfiguredTableAnalysisRuleInputBody: Swift.Equatable {
    let analysisRuleType: CleanRoomsClientTypes.ConfiguredTableAnalysisRuleType?
    let analysisRulePolicy: CleanRoomsClientTypes.ConfiguredTableAnalysisRulePolicy?
}

extension CreateConfiguredTableAnalysisRuleInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case analysisRulePolicy
        case analysisRuleType
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let analysisRuleTypeDecoded = try containerValues.decodeIfPresent(CleanRoomsClientTypes.ConfiguredTableAnalysisRuleType.self, forKey: .analysisRuleType)
        analysisRuleType = analysisRuleTypeDecoded
        let analysisRulePolicyDecoded = try containerValues.decodeIfPresent(CleanRoomsClientTypes.ConfiguredTableAnalysisRulePolicy.self, forKey: .analysisRulePolicy)
        analysisRulePolicy = analysisRulePolicyDecoded
    }
}

extension CreateConfiguredTableAnalysisRuleOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateConfiguredTableAnalysisRuleOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConflictException" : self = .conflictException(try ConflictException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum CreateConfiguredTableAnalysisRuleOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case conflictException(ConflictException)
    case internalServerException(InternalServerException)
    case resourceNotFoundException(ResourceNotFoundException)
    case throttlingException(ThrottlingException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateConfiguredTableAnalysisRuleOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: CreateConfiguredTableAnalysisRuleOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.analysisRule = output.analysisRule
        } else {
            self.analysisRule = nil
        }
    }
}

public struct CreateConfiguredTableAnalysisRuleOutputResponse: Swift.Equatable {
    /// The entire created analysis rule.
    /// This member is required.
    public var analysisRule: CleanRoomsClientTypes.ConfiguredTableAnalysisRule?

    public init (
        analysisRule: CleanRoomsClientTypes.ConfiguredTableAnalysisRule? = nil
    )
    {
        self.analysisRule = analysisRule
    }
}

struct CreateConfiguredTableAnalysisRuleOutputResponseBody: Swift.Equatable {
    let analysisRule: CleanRoomsClientTypes.ConfiguredTableAnalysisRule?
}

extension CreateConfiguredTableAnalysisRuleOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case analysisRule
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let analysisRuleDecoded = try containerValues.decodeIfPresent(CleanRoomsClientTypes.ConfiguredTableAnalysisRule.self, forKey: .analysisRule)
        analysisRule = analysisRuleDecoded
    }
}

extension CreateConfiguredTableAssociationInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case configuredTableIdentifier
        case description
        case name
        case roleArn
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let configuredTableIdentifier = self.configuredTableIdentifier {
            try encodeContainer.encode(configuredTableIdentifier, forKey: .configuredTableIdentifier)
        }
        if let description = self.description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let roleArn = self.roleArn {
            try encodeContainer.encode(roleArn, forKey: .roleArn)
        }
    }
}

extension CreateConfiguredTableAssociationInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let membershipIdentifier = membershipIdentifier else {
            return nil
        }
        return "/memberships/\(membershipIdentifier.urlPercentEncoding())/configuredTableAssociations"
    }
}

public struct CreateConfiguredTableAssociationInput: Swift.Equatable {
    /// A unique identifier for the configured table to be associated to. Currently accepts a configured table ID.
    /// This member is required.
    public var configuredTableIdentifier: Swift.String?
    /// A description for the configured table association.
    public var description: Swift.String?
    /// A unique identifier for one of your memberships for a collaboration. The configured table is associated to the collaboration that this membership belongs to. Currently accepts a membership ID.
    /// This member is required.
    public var membershipIdentifier: Swift.String?
    /// The name of the configured table association. This name is used to query the underlying configured table.
    /// This member is required.
    public var name: Swift.String?
    /// The service will assume this role to access catalog metadata and query the table.
    /// This member is required.
    public var roleArn: Swift.String?

    public init (
        configuredTableIdentifier: Swift.String? = nil,
        description: Swift.String? = nil,
        membershipIdentifier: Swift.String? = nil,
        name: Swift.String? = nil,
        roleArn: Swift.String? = nil
    )
    {
        self.configuredTableIdentifier = configuredTableIdentifier
        self.description = description
        self.membershipIdentifier = membershipIdentifier
        self.name = name
        self.roleArn = roleArn
    }
}

struct CreateConfiguredTableAssociationInputBody: Swift.Equatable {
    let name: Swift.String?
    let description: Swift.String?
    let configuredTableIdentifier: Swift.String?
    let roleArn: Swift.String?
}

extension CreateConfiguredTableAssociationInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case configuredTableIdentifier
        case description
        case name
        case roleArn
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let configuredTableIdentifierDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .configuredTableIdentifier)
        configuredTableIdentifier = configuredTableIdentifierDecoded
        let roleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .roleArn)
        roleArn = roleArnDecoded
    }
}

extension CreateConfiguredTableAssociationOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateConfiguredTableAssociationOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConflictException" : self = .conflictException(try ConflictException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceQuotaExceededException" : self = .serviceQuotaExceededException(try ServiceQuotaExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum CreateConfiguredTableAssociationOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case conflictException(ConflictException)
    case internalServerException(InternalServerException)
    case resourceNotFoundException(ResourceNotFoundException)
    case serviceQuotaExceededException(ServiceQuotaExceededException)
    case throttlingException(ThrottlingException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateConfiguredTableAssociationOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: CreateConfiguredTableAssociationOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.configuredTableAssociation = output.configuredTableAssociation
        } else {
            self.configuredTableAssociation = nil
        }
    }
}

public struct CreateConfiguredTableAssociationOutputResponse: Swift.Equatable {
    /// The entire configured table association object.
    /// This member is required.
    public var configuredTableAssociation: CleanRoomsClientTypes.ConfiguredTableAssociation?

    public init (
        configuredTableAssociation: CleanRoomsClientTypes.ConfiguredTableAssociation? = nil
    )
    {
        self.configuredTableAssociation = configuredTableAssociation
    }
}

struct CreateConfiguredTableAssociationOutputResponseBody: Swift.Equatable {
    let configuredTableAssociation: CleanRoomsClientTypes.ConfiguredTableAssociation?
}

extension CreateConfiguredTableAssociationOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case configuredTableAssociation
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let configuredTableAssociationDecoded = try containerValues.decodeIfPresent(CleanRoomsClientTypes.ConfiguredTableAssociation.self, forKey: .configuredTableAssociation)
        configuredTableAssociation = configuredTableAssociationDecoded
    }
}

extension CreateConfiguredTableInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case allowedColumns
        case analysisMethod
        case description
        case name
        case tableReference
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let allowedColumns = allowedColumns {
            var allowedColumnsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .allowedColumns)
            for columnname0 in allowedColumns {
                try allowedColumnsContainer.encode(columnname0)
            }
        }
        if let analysisMethod = self.analysisMethod {
            try encodeContainer.encode(analysisMethod.rawValue, forKey: .analysisMethod)
        }
        if let description = self.description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let tableReference = self.tableReference {
            try encodeContainer.encode(tableReference, forKey: .tableReference)
        }
    }
}

extension CreateConfiguredTableInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/configuredTables"
    }
}

public struct CreateConfiguredTableInput: Swift.Equatable {
    /// The columns of the underlying table that can be used by collaborations or analysis rules.
    /// This member is required.
    public var allowedColumns: [Swift.String]?
    /// The analysis method for the configured tables. The only valid value is currently `DIRECT_QUERY`.
    /// This member is required.
    public var analysisMethod: CleanRoomsClientTypes.AnalysisMethod?
    /// A description for the configured table.
    public var description: Swift.String?
    /// The name of the configured table.
    /// This member is required.
    public var name: Swift.String?
    /// A reference to the AWS Glue table being configured.
    /// This member is required.
    public var tableReference: CleanRoomsClientTypes.TableReference?

    public init (
        allowedColumns: [Swift.String]? = nil,
        analysisMethod: CleanRoomsClientTypes.AnalysisMethod? = nil,
        description: Swift.String? = nil,
        name: Swift.String? = nil,
        tableReference: CleanRoomsClientTypes.TableReference? = nil
    )
    {
        self.allowedColumns = allowedColumns
        self.analysisMethod = analysisMethod
        self.description = description
        self.name = name
        self.tableReference = tableReference
    }
}

struct CreateConfiguredTableInputBody: Swift.Equatable {
    let name: Swift.String?
    let description: Swift.String?
    let tableReference: CleanRoomsClientTypes.TableReference?
    let allowedColumns: [Swift.String]?
    let analysisMethod: CleanRoomsClientTypes.AnalysisMethod?
}

extension CreateConfiguredTableInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case allowedColumns
        case analysisMethod
        case description
        case name
        case tableReference
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let tableReferenceDecoded = try containerValues.decodeIfPresent(CleanRoomsClientTypes.TableReference.self, forKey: .tableReference)
        tableReference = tableReferenceDecoded
        let allowedColumnsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .allowedColumns)
        var allowedColumnsDecoded0:[Swift.String]? = nil
        if let allowedColumnsContainer = allowedColumnsContainer {
            allowedColumnsDecoded0 = [Swift.String]()
            for string0 in allowedColumnsContainer {
                if let string0 = string0 {
                    allowedColumnsDecoded0?.append(string0)
                }
            }
        }
        allowedColumns = allowedColumnsDecoded0
        let analysisMethodDecoded = try containerValues.decodeIfPresent(CleanRoomsClientTypes.AnalysisMethod.self, forKey: .analysisMethod)
        analysisMethod = analysisMethodDecoded
    }
}

extension CreateConfiguredTableOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateConfiguredTableOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConflictException" : self = .conflictException(try ConflictException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceQuotaExceededException" : self = .serviceQuotaExceededException(try ServiceQuotaExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum CreateConfiguredTableOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case conflictException(ConflictException)
    case internalServerException(InternalServerException)
    case resourceNotFoundException(ResourceNotFoundException)
    case serviceQuotaExceededException(ServiceQuotaExceededException)
    case throttlingException(ThrottlingException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateConfiguredTableOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: CreateConfiguredTableOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.configuredTable = output.configuredTable
        } else {
            self.configuredTable = nil
        }
    }
}

public struct CreateConfiguredTableOutputResponse: Swift.Equatable {
    /// The created configured table.
    /// This member is required.
    public var configuredTable: CleanRoomsClientTypes.ConfiguredTable?

    public init (
        configuredTable: CleanRoomsClientTypes.ConfiguredTable? = nil
    )
    {
        self.configuredTable = configuredTable
    }
}

struct CreateConfiguredTableOutputResponseBody: Swift.Equatable {
    let configuredTable: CleanRoomsClientTypes.ConfiguredTable?
}

extension CreateConfiguredTableOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case configuredTable
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let configuredTableDecoded = try containerValues.decodeIfPresent(CleanRoomsClientTypes.ConfiguredTable.self, forKey: .configuredTable)
        configuredTable = configuredTableDecoded
    }
}

extension CreateMembershipInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case collaborationIdentifier
        case queryLogStatus
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let collaborationIdentifier = self.collaborationIdentifier {
            try encodeContainer.encode(collaborationIdentifier, forKey: .collaborationIdentifier)
        }
        if let queryLogStatus = self.queryLogStatus {
            try encodeContainer.encode(queryLogStatus.rawValue, forKey: .queryLogStatus)
        }
    }
}

extension CreateMembershipInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/memberships"
    }
}

public struct CreateMembershipInput: Swift.Equatable {
    /// The unique ID for the associated collaboration.
    /// This member is required.
    public var collaborationIdentifier: Swift.String?
    /// An indicator as to whether query logging has been enabled or disabled for the collaboration.
    /// This member is required.
    public var queryLogStatus: CleanRoomsClientTypes.MembershipQueryLogStatus?

    public init (
        collaborationIdentifier: Swift.String? = nil,
        queryLogStatus: CleanRoomsClientTypes.MembershipQueryLogStatus? = nil
    )
    {
        self.collaborationIdentifier = collaborationIdentifier
        self.queryLogStatus = queryLogStatus
    }
}

struct CreateMembershipInputBody: Swift.Equatable {
    let collaborationIdentifier: Swift.String?
    let queryLogStatus: CleanRoomsClientTypes.MembershipQueryLogStatus?
}

extension CreateMembershipInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case collaborationIdentifier
        case queryLogStatus
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let collaborationIdentifierDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .collaborationIdentifier)
        collaborationIdentifier = collaborationIdentifierDecoded
        let queryLogStatusDecoded = try containerValues.decodeIfPresent(CleanRoomsClientTypes.MembershipQueryLogStatus.self, forKey: .queryLogStatus)
        queryLogStatus = queryLogStatusDecoded
    }
}

extension CreateMembershipOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateMembershipOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConflictException" : self = .conflictException(try ConflictException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceQuotaExceededException" : self = .serviceQuotaExceededException(try ServiceQuotaExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum CreateMembershipOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case conflictException(ConflictException)
    case internalServerException(InternalServerException)
    case resourceNotFoundException(ResourceNotFoundException)
    case serviceQuotaExceededException(ServiceQuotaExceededException)
    case throttlingException(ThrottlingException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateMembershipOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: CreateMembershipOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.membership = output.membership
        } else {
            self.membership = nil
        }
    }
}

public struct CreateMembershipOutputResponse: Swift.Equatable {
    /// The membership that was created.
    /// This member is required.
    public var membership: CleanRoomsClientTypes.Membership?

    public init (
        membership: CleanRoomsClientTypes.Membership? = nil
    )
    {
        self.membership = membership
    }
}

struct CreateMembershipOutputResponseBody: Swift.Equatable {
    let membership: CleanRoomsClientTypes.Membership?
}

extension CreateMembershipOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case membership
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let membershipDecoded = try containerValues.decodeIfPresent(CleanRoomsClientTypes.Membership.self, forKey: .membership)
        membership = membershipDecoded
    }
}

extension CleanRoomsClientTypes.DataEncryptionMetadata: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case allowCleartext
        case allowDuplicates
        case allowJoinsOnColumnsWithDifferentNames
        case preserveNulls
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let allowCleartext = self.allowCleartext {
            try encodeContainer.encode(allowCleartext, forKey: .allowCleartext)
        }
        if let allowDuplicates = self.allowDuplicates {
            try encodeContainer.encode(allowDuplicates, forKey: .allowDuplicates)
        }
        if let allowJoinsOnColumnsWithDifferentNames = self.allowJoinsOnColumnsWithDifferentNames {
            try encodeContainer.encode(allowJoinsOnColumnsWithDifferentNames, forKey: .allowJoinsOnColumnsWithDifferentNames)
        }
        if let preserveNulls = self.preserveNulls {
            try encodeContainer.encode(preserveNulls, forKey: .preserveNulls)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let allowCleartextDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .allowCleartext)
        allowCleartext = allowCleartextDecoded
        let allowDuplicatesDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .allowDuplicates)
        allowDuplicates = allowDuplicatesDecoded
        let allowJoinsOnColumnsWithDifferentNamesDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .allowJoinsOnColumnsWithDifferentNames)
        allowJoinsOnColumnsWithDifferentNames = allowJoinsOnColumnsWithDifferentNamesDecoded
        let preserveNullsDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .preserveNulls)
        preserveNulls = preserveNullsDecoded
    }
}

extension CleanRoomsClientTypes {
    /// The settings for client-side encryption for cryptographic computing.
    public struct DataEncryptionMetadata: Swift.Equatable {
        /// Indicates whether encrypted tables can contain cleartext data (true) or are to cryptographically process every column (false).
        /// This member is required.
        public var allowCleartext: Swift.Bool?
        /// Indicates whether Fingerprint columns can contain duplicate entries (true) or are to contain only non-repeated values (false).
        /// This member is required.
        public var allowDuplicates: Swift.Bool?
        /// Indicates whether Fingerprint columns can be joined on any other Fingerprint column with a different name (true) or can only be joined on Fingerprint columns of the same name (false).
        /// This member is required.
        public var allowJoinsOnColumnsWithDifferentNames: Swift.Bool?
        /// Indicates whether NULL values are to be copied as NULL to encrypted tables (true) or cryptographically processed (false).
        /// This member is required.
        public var preserveNulls: Swift.Bool?

        public init (
            allowCleartext: Swift.Bool? = nil,
            allowDuplicates: Swift.Bool? = nil,
            allowJoinsOnColumnsWithDifferentNames: Swift.Bool? = nil,
            preserveNulls: Swift.Bool? = nil
        )
        {
            self.allowCleartext = allowCleartext
            self.allowDuplicates = allowDuplicates
            self.allowJoinsOnColumnsWithDifferentNames = allowJoinsOnColumnsWithDifferentNames
            self.preserveNulls = preserveNulls
        }
    }

}

extension DeleteCollaborationInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let collaborationIdentifier = collaborationIdentifier else {
            return nil
        }
        return "/collaborations/\(collaborationIdentifier.urlPercentEncoding())"
    }
}

public struct DeleteCollaborationInput: Swift.Equatable {
    /// The identifier for the collaboration.
    /// This member is required.
    public var collaborationIdentifier: Swift.String?

    public init (
        collaborationIdentifier: Swift.String? = nil
    )
    {
        self.collaborationIdentifier = collaborationIdentifier
    }
}

struct DeleteCollaborationInputBody: Swift.Equatable {
}

extension DeleteCollaborationInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DeleteCollaborationOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteCollaborationOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DeleteCollaborationOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case internalServerException(InternalServerException)
    case throttlingException(ThrottlingException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteCollaborationOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DeleteCollaborationOutputResponse: Swift.Equatable {

    public init () { }
}

extension DeleteConfiguredTableAnalysisRuleInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let configuredTableIdentifier = configuredTableIdentifier else {
            return nil
        }
        guard let analysisRuleType = analysisRuleType else {
            return nil
        }
        return "/configuredTables/\(configuredTableIdentifier.urlPercentEncoding())/analysisRule/\(analysisRuleType.rawValue.urlPercentEncoding())"
    }
}

public struct DeleteConfiguredTableAnalysisRuleInput: Swift.Equatable {
    /// The analysis rule type to be deleted. Configured table analysis rules are uniquely identified by their configured table identifier and analysis rule type.
    /// This member is required.
    public var analysisRuleType: CleanRoomsClientTypes.ConfiguredTableAnalysisRuleType?
    /// The unique identifier for the configured table that the analysis rule applies to. Currently accepts the configured table ID.
    /// This member is required.
    public var configuredTableIdentifier: Swift.String?

    public init (
        analysisRuleType: CleanRoomsClientTypes.ConfiguredTableAnalysisRuleType? = nil,
        configuredTableIdentifier: Swift.String? = nil
    )
    {
        self.analysisRuleType = analysisRuleType
        self.configuredTableIdentifier = configuredTableIdentifier
    }
}

struct DeleteConfiguredTableAnalysisRuleInputBody: Swift.Equatable {
}

extension DeleteConfiguredTableAnalysisRuleInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DeleteConfiguredTableAnalysisRuleOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteConfiguredTableAnalysisRuleOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConflictException" : self = .conflictException(try ConflictException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DeleteConfiguredTableAnalysisRuleOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case conflictException(ConflictException)
    case internalServerException(InternalServerException)
    case resourceNotFoundException(ResourceNotFoundException)
    case throttlingException(ThrottlingException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteConfiguredTableAnalysisRuleOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

/// An empty response that indicates a successful delete.
public struct DeleteConfiguredTableAnalysisRuleOutputResponse: Swift.Equatable {

    public init () { }
}

extension DeleteConfiguredTableAssociationInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let membershipIdentifier = membershipIdentifier else {
            return nil
        }
        guard let configuredTableAssociationIdentifier = configuredTableAssociationIdentifier else {
            return nil
        }
        return "/memberships/\(membershipIdentifier.urlPercentEncoding())/configuredTableAssociations/\(configuredTableAssociationIdentifier.urlPercentEncoding())"
    }
}

public struct DeleteConfiguredTableAssociationInput: Swift.Equatable {
    /// The unique ID for the configured table association to be deleted. Currently accepts the configured table ID.
    /// This member is required.
    public var configuredTableAssociationIdentifier: Swift.String?
    /// A unique identifier for the membership that the configured table association belongs to. Currently accepts the membership ID.
    /// This member is required.
    public var membershipIdentifier: Swift.String?

    public init (
        configuredTableAssociationIdentifier: Swift.String? = nil,
        membershipIdentifier: Swift.String? = nil
    )
    {
        self.configuredTableAssociationIdentifier = configuredTableAssociationIdentifier
        self.membershipIdentifier = membershipIdentifier
    }
}

struct DeleteConfiguredTableAssociationInputBody: Swift.Equatable {
}

extension DeleteConfiguredTableAssociationInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DeleteConfiguredTableAssociationOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteConfiguredTableAssociationOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConflictException" : self = .conflictException(try ConflictException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DeleteConfiguredTableAssociationOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case conflictException(ConflictException)
    case internalServerException(InternalServerException)
    case resourceNotFoundException(ResourceNotFoundException)
    case throttlingException(ThrottlingException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteConfiguredTableAssociationOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DeleteConfiguredTableAssociationOutputResponse: Swift.Equatable {

    public init () { }
}

extension DeleteConfiguredTableInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let configuredTableIdentifier = configuredTableIdentifier else {
            return nil
        }
        return "/configuredTables/\(configuredTableIdentifier.urlPercentEncoding())"
    }
}

public struct DeleteConfiguredTableInput: Swift.Equatable {
    /// The unique ID for the configured table to delete.
    /// This member is required.
    public var configuredTableIdentifier: Swift.String?

    public init (
        configuredTableIdentifier: Swift.String? = nil
    )
    {
        self.configuredTableIdentifier = configuredTableIdentifier
    }
}

struct DeleteConfiguredTableInputBody: Swift.Equatable {
}

extension DeleteConfiguredTableInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DeleteConfiguredTableOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteConfiguredTableOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConflictException" : self = .conflictException(try ConflictException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DeleteConfiguredTableOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case conflictException(ConflictException)
    case internalServerException(InternalServerException)
    case resourceNotFoundException(ResourceNotFoundException)
    case throttlingException(ThrottlingException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteConfiguredTableOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

/// The empty output for a successful deletion.
public struct DeleteConfiguredTableOutputResponse: Swift.Equatable {

    public init () { }
}

extension DeleteMemberInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let collaborationIdentifier = collaborationIdentifier else {
            return nil
        }
        guard let accountId = accountId else {
            return nil
        }
        return "/collaborations/\(collaborationIdentifier.urlPercentEncoding())/member/\(accountId.urlPercentEncoding())"
    }
}

public struct DeleteMemberInput: Swift.Equatable {
    /// The account ID of the member to remove.
    /// This member is required.
    public var accountId: Swift.String?
    /// The unique identifier for the associated collaboration.
    /// This member is required.
    public var collaborationIdentifier: Swift.String?

    public init (
        accountId: Swift.String? = nil,
        collaborationIdentifier: Swift.String? = nil
    )
    {
        self.accountId = accountId
        self.collaborationIdentifier = collaborationIdentifier
    }
}

struct DeleteMemberInputBody: Swift.Equatable {
}

extension DeleteMemberInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DeleteMemberOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteMemberOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConflictException" : self = .conflictException(try ConflictException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DeleteMemberOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case conflictException(ConflictException)
    case internalServerException(InternalServerException)
    case resourceNotFoundException(ResourceNotFoundException)
    case throttlingException(ThrottlingException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteMemberOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DeleteMemberOutputResponse: Swift.Equatable {

    public init () { }
}

extension DeleteMembershipInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let membershipIdentifier = membershipIdentifier else {
            return nil
        }
        return "/memberships/\(membershipIdentifier.urlPercentEncoding())"
    }
}

public struct DeleteMembershipInput: Swift.Equatable {
    /// The identifier for a membership resource.
    /// This member is required.
    public var membershipIdentifier: Swift.String?

    public init (
        membershipIdentifier: Swift.String? = nil
    )
    {
        self.membershipIdentifier = membershipIdentifier
    }
}

struct DeleteMembershipInputBody: Swift.Equatable {
}

extension DeleteMembershipInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DeleteMembershipOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteMembershipOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConflictException" : self = .conflictException(try ConflictException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DeleteMembershipOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case conflictException(ConflictException)
    case internalServerException(InternalServerException)
    case resourceNotFoundException(ResourceNotFoundException)
    case throttlingException(ThrottlingException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteMembershipOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DeleteMembershipOutputResponse: Swift.Equatable {

    public init () { }
}

extension CleanRoomsClientTypes {
    public enum FilterableMemberStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case active
        case invited
        case sdkUnknown(Swift.String)

        public static var allCases: [FilterableMemberStatus] {
            return [
                .active,
                .invited,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .active: return "ACTIVE"
            case .invited: return "INVITED"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = FilterableMemberStatus(rawValue: rawValue) ?? FilterableMemberStatus.sdkUnknown(rawValue)
        }
    }
}

extension GetCollaborationInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let collaborationIdentifier = collaborationIdentifier else {
            return nil
        }
        return "/collaborations/\(collaborationIdentifier.urlPercentEncoding())"
    }
}

public struct GetCollaborationInput: Swift.Equatable {
    /// The identifier for the collaboration.
    /// This member is required.
    public var collaborationIdentifier: Swift.String?

    public init (
        collaborationIdentifier: Swift.String? = nil
    )
    {
        self.collaborationIdentifier = collaborationIdentifier
    }
}

struct GetCollaborationInputBody: Swift.Equatable {
}

extension GetCollaborationInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension GetCollaborationOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetCollaborationOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum GetCollaborationOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case internalServerException(InternalServerException)
    case throttlingException(ThrottlingException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetCollaborationOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: GetCollaborationOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.collaboration = output.collaboration
        } else {
            self.collaboration = nil
        }
    }
}

public struct GetCollaborationOutputResponse: Swift.Equatable {
    /// The entire collaboration for this identifier.
    /// This member is required.
    public var collaboration: CleanRoomsClientTypes.Collaboration?

    public init (
        collaboration: CleanRoomsClientTypes.Collaboration? = nil
    )
    {
        self.collaboration = collaboration
    }
}

struct GetCollaborationOutputResponseBody: Swift.Equatable {
    let collaboration: CleanRoomsClientTypes.Collaboration?
}

extension GetCollaborationOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case collaboration
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let collaborationDecoded = try containerValues.decodeIfPresent(CleanRoomsClientTypes.Collaboration.self, forKey: .collaboration)
        collaboration = collaborationDecoded
    }
}

extension GetConfiguredTableAnalysisRuleInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let configuredTableIdentifier = configuredTableIdentifier else {
            return nil
        }
        guard let analysisRuleType = analysisRuleType else {
            return nil
        }
        return "/configuredTables/\(configuredTableIdentifier.urlPercentEncoding())/analysisRule/\(analysisRuleType.rawValue.urlPercentEncoding())"
    }
}

public struct GetConfiguredTableAnalysisRuleInput: Swift.Equatable {
    /// The analysis rule to be retrieved. Configured table analysis rules are uniquely identified by their configured table identifier and analysis rule type.
    /// This member is required.
    public var analysisRuleType: CleanRoomsClientTypes.ConfiguredTableAnalysisRuleType?
    /// The unique identifier for the configured table to retrieve. Currently accepts the configured table ID.
    /// This member is required.
    public var configuredTableIdentifier: Swift.String?

    public init (
        analysisRuleType: CleanRoomsClientTypes.ConfiguredTableAnalysisRuleType? = nil,
        configuredTableIdentifier: Swift.String? = nil
    )
    {
        self.analysisRuleType = analysisRuleType
        self.configuredTableIdentifier = configuredTableIdentifier
    }
}

struct GetConfiguredTableAnalysisRuleInputBody: Swift.Equatable {
}

extension GetConfiguredTableAnalysisRuleInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension GetConfiguredTableAnalysisRuleOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetConfiguredTableAnalysisRuleOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum GetConfiguredTableAnalysisRuleOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case internalServerException(InternalServerException)
    case resourceNotFoundException(ResourceNotFoundException)
    case throttlingException(ThrottlingException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetConfiguredTableAnalysisRuleOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: GetConfiguredTableAnalysisRuleOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.analysisRule = output.analysisRule
        } else {
            self.analysisRule = nil
        }
    }
}

public struct GetConfiguredTableAnalysisRuleOutputResponse: Swift.Equatable {
    /// The entire analysis rule output.
    /// This member is required.
    public var analysisRule: CleanRoomsClientTypes.ConfiguredTableAnalysisRule?

    public init (
        analysisRule: CleanRoomsClientTypes.ConfiguredTableAnalysisRule? = nil
    )
    {
        self.analysisRule = analysisRule
    }
}

struct GetConfiguredTableAnalysisRuleOutputResponseBody: Swift.Equatable {
    let analysisRule: CleanRoomsClientTypes.ConfiguredTableAnalysisRule?
}

extension GetConfiguredTableAnalysisRuleOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case analysisRule
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let analysisRuleDecoded = try containerValues.decodeIfPresent(CleanRoomsClientTypes.ConfiguredTableAnalysisRule.self, forKey: .analysisRule)
        analysisRule = analysisRuleDecoded
    }
}

extension GetConfiguredTableAssociationInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let membershipIdentifier = membershipIdentifier else {
            return nil
        }
        guard let configuredTableAssociationIdentifier = configuredTableAssociationIdentifier else {
            return nil
        }
        return "/memberships/\(membershipIdentifier.urlPercentEncoding())/configuredTableAssociations/\(configuredTableAssociationIdentifier.urlPercentEncoding())"
    }
}

public struct GetConfiguredTableAssociationInput: Swift.Equatable {
    /// The unique ID for the configured table association to retrieve. Currently accepts the configured table ID.
    /// This member is required.
    public var configuredTableAssociationIdentifier: Swift.String?
    /// A unique identifier for the membership that the configured table association belongs to. Currently accepts the membership ID.
    /// This member is required.
    public var membershipIdentifier: Swift.String?

    public init (
        configuredTableAssociationIdentifier: Swift.String? = nil,
        membershipIdentifier: Swift.String? = nil
    )
    {
        self.configuredTableAssociationIdentifier = configuredTableAssociationIdentifier
        self.membershipIdentifier = membershipIdentifier
    }
}

struct GetConfiguredTableAssociationInputBody: Swift.Equatable {
}

extension GetConfiguredTableAssociationInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension GetConfiguredTableAssociationOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetConfiguredTableAssociationOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum GetConfiguredTableAssociationOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case internalServerException(InternalServerException)
    case resourceNotFoundException(ResourceNotFoundException)
    case throttlingException(ThrottlingException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetConfiguredTableAssociationOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: GetConfiguredTableAssociationOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.configuredTableAssociation = output.configuredTableAssociation
        } else {
            self.configuredTableAssociation = nil
        }
    }
}

public struct GetConfiguredTableAssociationOutputResponse: Swift.Equatable {
    /// The entire configured table association object.
    /// This member is required.
    public var configuredTableAssociation: CleanRoomsClientTypes.ConfiguredTableAssociation?

    public init (
        configuredTableAssociation: CleanRoomsClientTypes.ConfiguredTableAssociation? = nil
    )
    {
        self.configuredTableAssociation = configuredTableAssociation
    }
}

struct GetConfiguredTableAssociationOutputResponseBody: Swift.Equatable {
    let configuredTableAssociation: CleanRoomsClientTypes.ConfiguredTableAssociation?
}

extension GetConfiguredTableAssociationOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case configuredTableAssociation
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let configuredTableAssociationDecoded = try containerValues.decodeIfPresent(CleanRoomsClientTypes.ConfiguredTableAssociation.self, forKey: .configuredTableAssociation)
        configuredTableAssociation = configuredTableAssociationDecoded
    }
}

extension GetConfiguredTableInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let configuredTableIdentifier = configuredTableIdentifier else {
            return nil
        }
        return "/configuredTables/\(configuredTableIdentifier.urlPercentEncoding())"
    }
}

public struct GetConfiguredTableInput: Swift.Equatable {
    /// The unique ID for the configured table to retrieve.
    /// This member is required.
    public var configuredTableIdentifier: Swift.String?

    public init (
        configuredTableIdentifier: Swift.String? = nil
    )
    {
        self.configuredTableIdentifier = configuredTableIdentifier
    }
}

struct GetConfiguredTableInputBody: Swift.Equatable {
}

extension GetConfiguredTableInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension GetConfiguredTableOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetConfiguredTableOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum GetConfiguredTableOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case internalServerException(InternalServerException)
    case resourceNotFoundException(ResourceNotFoundException)
    case throttlingException(ThrottlingException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetConfiguredTableOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: GetConfiguredTableOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.configuredTable = output.configuredTable
        } else {
            self.configuredTable = nil
        }
    }
}

public struct GetConfiguredTableOutputResponse: Swift.Equatable {
    /// The retrieved configured table.
    /// This member is required.
    public var configuredTable: CleanRoomsClientTypes.ConfiguredTable?

    public init (
        configuredTable: CleanRoomsClientTypes.ConfiguredTable? = nil
    )
    {
        self.configuredTable = configuredTable
    }
}

struct GetConfiguredTableOutputResponseBody: Swift.Equatable {
    let configuredTable: CleanRoomsClientTypes.ConfiguredTable?
}

extension GetConfiguredTableOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case configuredTable
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let configuredTableDecoded = try containerValues.decodeIfPresent(CleanRoomsClientTypes.ConfiguredTable.self, forKey: .configuredTable)
        configuredTable = configuredTableDecoded
    }
}

extension GetMembershipInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let membershipIdentifier = membershipIdentifier else {
            return nil
        }
        return "/memberships/\(membershipIdentifier.urlPercentEncoding())"
    }
}

public struct GetMembershipInput: Swift.Equatable {
    /// The identifier for a membership resource.
    /// This member is required.
    public var membershipIdentifier: Swift.String?

    public init (
        membershipIdentifier: Swift.String? = nil
    )
    {
        self.membershipIdentifier = membershipIdentifier
    }
}

struct GetMembershipInputBody: Swift.Equatable {
}

extension GetMembershipInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension GetMembershipOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetMembershipOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum GetMembershipOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case internalServerException(InternalServerException)
    case resourceNotFoundException(ResourceNotFoundException)
    case throttlingException(ThrottlingException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetMembershipOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: GetMembershipOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.membership = output.membership
        } else {
            self.membership = nil
        }
    }
}

public struct GetMembershipOutputResponse: Swift.Equatable {
    /// The membership retrieved for the provided identifier.
    /// This member is required.
    public var membership: CleanRoomsClientTypes.Membership?

    public init (
        membership: CleanRoomsClientTypes.Membership? = nil
    )
    {
        self.membership = membership
    }
}

struct GetMembershipOutputResponseBody: Swift.Equatable {
    let membership: CleanRoomsClientTypes.Membership?
}

extension GetMembershipOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case membership
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let membershipDecoded = try containerValues.decodeIfPresent(CleanRoomsClientTypes.Membership.self, forKey: .membership)
        membership = membershipDecoded
    }
}

extension GetProtectedQueryInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let membershipIdentifier = membershipIdentifier else {
            return nil
        }
        guard let protectedQueryIdentifier = protectedQueryIdentifier else {
            return nil
        }
        return "/memberships/\(membershipIdentifier.urlPercentEncoding())/protectedQueries/\(protectedQueryIdentifier.urlPercentEncoding())"
    }
}

public struct GetProtectedQueryInput: Swift.Equatable {
    /// The identifier for a membership in a protected query instance.
    /// This member is required.
    public var membershipIdentifier: Swift.String?
    /// The identifier for a protected query instance.
    /// This member is required.
    public var protectedQueryIdentifier: Swift.String?

    public init (
        membershipIdentifier: Swift.String? = nil,
        protectedQueryIdentifier: Swift.String? = nil
    )
    {
        self.membershipIdentifier = membershipIdentifier
        self.protectedQueryIdentifier = protectedQueryIdentifier
    }
}

struct GetProtectedQueryInputBody: Swift.Equatable {
}

extension GetProtectedQueryInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension GetProtectedQueryOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetProtectedQueryOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum GetProtectedQueryOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case internalServerException(InternalServerException)
    case resourceNotFoundException(ResourceNotFoundException)
    case throttlingException(ThrottlingException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetProtectedQueryOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: GetProtectedQueryOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.protectedQuery = output.protectedQuery
        } else {
            self.protectedQuery = nil
        }
    }
}

public struct GetProtectedQueryOutputResponse: Swift.Equatable {
    /// The query processing metadata.
    /// This member is required.
    public var protectedQuery: CleanRoomsClientTypes.ProtectedQuery?

    public init (
        protectedQuery: CleanRoomsClientTypes.ProtectedQuery? = nil
    )
    {
        self.protectedQuery = protectedQuery
    }
}

struct GetProtectedQueryOutputResponseBody: Swift.Equatable {
    let protectedQuery: CleanRoomsClientTypes.ProtectedQuery?
}

extension GetProtectedQueryOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case protectedQuery
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let protectedQueryDecoded = try containerValues.decodeIfPresent(CleanRoomsClientTypes.ProtectedQuery.self, forKey: .protectedQuery)
        protectedQuery = protectedQueryDecoded
    }
}

extension GetSchemaAnalysisRuleInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let collaborationIdentifier = collaborationIdentifier else {
            return nil
        }
        guard let name = name else {
            return nil
        }
        guard let type = type else {
            return nil
        }
        return "/collaborations/\(collaborationIdentifier.urlPercentEncoding())/schemas/\(name.urlPercentEncoding())/analysisRule/\(type.rawValue.urlPercentEncoding())"
    }
}

public struct GetSchemaAnalysisRuleInput: Swift.Equatable {
    /// A unique identifier for the collaboration that the schema belongs to. Currently accepts a collaboration ID.
    /// This member is required.
    public var collaborationIdentifier: Swift.String?
    /// The name of the schema to retrieve the analysis rule for.
    /// This member is required.
    public var name: Swift.String?
    /// The type of the schema analysis rule to retrieve. Schema analysis rules are uniquely identified by a combination of the collaboration, the schema name, and their type.
    /// This member is required.
    public var type: CleanRoomsClientTypes.AnalysisRuleType?

    public init (
        collaborationIdentifier: Swift.String? = nil,
        name: Swift.String? = nil,
        type: CleanRoomsClientTypes.AnalysisRuleType? = nil
    )
    {
        self.collaborationIdentifier = collaborationIdentifier
        self.name = name
        self.type = type
    }
}

struct GetSchemaAnalysisRuleInputBody: Swift.Equatable {
}

extension GetSchemaAnalysisRuleInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension GetSchemaAnalysisRuleOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetSchemaAnalysisRuleOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum GetSchemaAnalysisRuleOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case internalServerException(InternalServerException)
    case resourceNotFoundException(ResourceNotFoundException)
    case throttlingException(ThrottlingException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetSchemaAnalysisRuleOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: GetSchemaAnalysisRuleOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.analysisRule = output.analysisRule
        } else {
            self.analysisRule = nil
        }
    }
}

public struct GetSchemaAnalysisRuleOutputResponse: Swift.Equatable {
    /// A specification about how data from the configured table can be used.
    /// This member is required.
    public var analysisRule: CleanRoomsClientTypes.AnalysisRule?

    public init (
        analysisRule: CleanRoomsClientTypes.AnalysisRule? = nil
    )
    {
        self.analysisRule = analysisRule
    }
}

struct GetSchemaAnalysisRuleOutputResponseBody: Swift.Equatable {
    let analysisRule: CleanRoomsClientTypes.AnalysisRule?
}

extension GetSchemaAnalysisRuleOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case analysisRule
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let analysisRuleDecoded = try containerValues.decodeIfPresent(CleanRoomsClientTypes.AnalysisRule.self, forKey: .analysisRule)
        analysisRule = analysisRuleDecoded
    }
}

extension GetSchemaInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let collaborationIdentifier = collaborationIdentifier else {
            return nil
        }
        guard let name = name else {
            return nil
        }
        return "/collaborations/\(collaborationIdentifier.urlPercentEncoding())/schemas/\(name.urlPercentEncoding())"
    }
}

public struct GetSchemaInput: Swift.Equatable {
    /// A unique identifier for the collaboration that the schema belongs to. Currently accepts a collaboration ID.
    /// This member is required.
    public var collaborationIdentifier: Swift.String?
    /// The name of the relation to retrieve the schema for.
    /// This member is required.
    public var name: Swift.String?

    public init (
        collaborationIdentifier: Swift.String? = nil,
        name: Swift.String? = nil
    )
    {
        self.collaborationIdentifier = collaborationIdentifier
        self.name = name
    }
}

struct GetSchemaInputBody: Swift.Equatable {
}

extension GetSchemaInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension GetSchemaOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetSchemaOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum GetSchemaOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case internalServerException(InternalServerException)
    case resourceNotFoundException(ResourceNotFoundException)
    case throttlingException(ThrottlingException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetSchemaOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: GetSchemaOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.schema = output.schema
        } else {
            self.schema = nil
        }
    }
}

public struct GetSchemaOutputResponse: Swift.Equatable {
    /// The entire schema object.
    /// This member is required.
    public var schema: CleanRoomsClientTypes.Schema?

    public init (
        schema: CleanRoomsClientTypes.Schema? = nil
    )
    {
        self.schema = schema
    }
}

struct GetSchemaOutputResponseBody: Swift.Equatable {
    let schema: CleanRoomsClientTypes.Schema?
}

extension GetSchemaOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case schema
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let schemaDecoded = try containerValues.decodeIfPresent(CleanRoomsClientTypes.Schema.self, forKey: .schema)
        schema = schemaDecoded
    }
}

extension CleanRoomsClientTypes.GlueTableReference: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case databaseName
        case tableName
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let databaseName = self.databaseName {
            try encodeContainer.encode(databaseName, forKey: .databaseName)
        }
        if let tableName = self.tableName {
            try encodeContainer.encode(tableName, forKey: .tableName)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let tableNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .tableName)
        tableName = tableNameDecoded
        let databaseNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .databaseName)
        databaseName = databaseNameDecoded
    }
}

extension CleanRoomsClientTypes {
    /// A reference to a table within an AWS Glue data catalog.
    public struct GlueTableReference: Swift.Equatable {
        /// The name of the database the AWS Glue table belongs to.
        /// This member is required.
        public var databaseName: Swift.String?
        /// The name of the AWS Glue table.
        /// This member is required.
        public var tableName: Swift.String?

        public init (
            databaseName: Swift.String? = nil,
            tableName: Swift.String? = nil
        )
        {
            self.databaseName = databaseName
            self.tableName = tableName
        }
    }

}

extension InternalServerException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: InternalServerExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// Unexpected error during processing of request.
public struct InternalServerException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .server
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct InternalServerExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension InternalServerExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension CleanRoomsClientTypes {
    public enum JoinRequiredOption: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case queryRunner
        case sdkUnknown(Swift.String)

        public static var allCases: [JoinRequiredOption] {
            return [
                .queryRunner,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .queryRunner: return "QUERY_RUNNER"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = JoinRequiredOption(rawValue: rawValue) ?? JoinRequiredOption.sdkUnknown(rawValue)
        }
    }
}

extension ListCollaborationsInput: ClientRuntime.QueryItemProvider {
    public var queryItems: [ClientRuntime.URLQueryItem] {
        get throws {
            var items = [ClientRuntime.URLQueryItem]()
            if let nextToken = nextToken {
                let nextTokenQueryItem = ClientRuntime.URLQueryItem(name: "nextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
                items.append(nextTokenQueryItem)
            }
            if let maxResults = maxResults {
                let maxResultsQueryItem = ClientRuntime.URLQueryItem(name: "maxResults".urlPercentEncoding(), value: Swift.String(maxResults).urlPercentEncoding())
                items.append(maxResultsQueryItem)
            }
            if let memberStatus = memberStatus {
                let memberStatusQueryItem = ClientRuntime.URLQueryItem(name: "memberStatus".urlPercentEncoding(), value: Swift.String(memberStatus.rawValue).urlPercentEncoding())
                items.append(memberStatusQueryItem)
            }
            return items
        }
    }
}

extension ListCollaborationsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/collaborations"
    }
}

public struct ListCollaborationsInput: Swift.Equatable {
    /// The maximum size of the results that is returned per call. Service chooses a default if it has not been set. Service may return a nextToken even if the maximum results has not been met.
    public var maxResults: Swift.Int?
    /// The caller's status in a collaboration.
    public var memberStatus: CleanRoomsClientTypes.FilterableMemberStatus?
    /// The token value retrieved from a previous call to access the next page of results.
    public var nextToken: Swift.String?

    public init (
        maxResults: Swift.Int? = nil,
        memberStatus: CleanRoomsClientTypes.FilterableMemberStatus? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.maxResults = maxResults
        self.memberStatus = memberStatus
        self.nextToken = nextToken
    }
}

struct ListCollaborationsInputBody: Swift.Equatable {
}

extension ListCollaborationsInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension ListCollaborationsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListCollaborationsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum ListCollaborationsOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case internalServerException(InternalServerException)
    case throttlingException(ThrottlingException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListCollaborationsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ListCollaborationsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.collaborationList = output.collaborationList
            self.nextToken = output.nextToken
        } else {
            self.collaborationList = nil
            self.nextToken = nil
        }
    }
}

public struct ListCollaborationsOutputResponse: Swift.Equatable {
    /// The list of collaborations.
    /// This member is required.
    public var collaborationList: [CleanRoomsClientTypes.CollaborationSummary]?
    /// The token value retrieved from a previous call to access the next page of results.
    public var nextToken: Swift.String?

    public init (
        collaborationList: [CleanRoomsClientTypes.CollaborationSummary]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.collaborationList = collaborationList
        self.nextToken = nextToken
    }
}

struct ListCollaborationsOutputResponseBody: Swift.Equatable {
    let nextToken: Swift.String?
    let collaborationList: [CleanRoomsClientTypes.CollaborationSummary]?
}

extension ListCollaborationsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case collaborationList
        case nextToken
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let collaborationListContainer = try containerValues.decodeIfPresent([CleanRoomsClientTypes.CollaborationSummary?].self, forKey: .collaborationList)
        var collaborationListDecoded0:[CleanRoomsClientTypes.CollaborationSummary]? = nil
        if let collaborationListContainer = collaborationListContainer {
            collaborationListDecoded0 = [CleanRoomsClientTypes.CollaborationSummary]()
            for structure0 in collaborationListContainer {
                if let structure0 = structure0 {
                    collaborationListDecoded0?.append(structure0)
                }
            }
        }
        collaborationList = collaborationListDecoded0
    }
}

extension ListConfiguredTableAssociationsInput: ClientRuntime.QueryItemProvider {
    public var queryItems: [ClientRuntime.URLQueryItem] {
        get throws {
            var items = [ClientRuntime.URLQueryItem]()
            if let nextToken = nextToken {
                let nextTokenQueryItem = ClientRuntime.URLQueryItem(name: "nextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
                items.append(nextTokenQueryItem)
            }
            if let maxResults = maxResults {
                let maxResultsQueryItem = ClientRuntime.URLQueryItem(name: "maxResults".urlPercentEncoding(), value: Swift.String(maxResults).urlPercentEncoding())
                items.append(maxResultsQueryItem)
            }
            return items
        }
    }
}

extension ListConfiguredTableAssociationsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let membershipIdentifier = membershipIdentifier else {
            return nil
        }
        return "/memberships/\(membershipIdentifier.urlPercentEncoding())/configuredTableAssociations"
    }
}

public struct ListConfiguredTableAssociationsInput: Swift.Equatable {
    /// The maximum size of the results that is returned per call.
    public var maxResults: Swift.Int?
    /// A unique identifier for the membership to list configured table associations for. Currently accepts the membership ID.
    /// This member is required.
    public var membershipIdentifier: Swift.String?
    /// The token value retrieved from a previous call to access the next page of results.
    public var nextToken: Swift.String?

    public init (
        maxResults: Swift.Int? = nil,
        membershipIdentifier: Swift.String? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.maxResults = maxResults
        self.membershipIdentifier = membershipIdentifier
        self.nextToken = nextToken
    }
}

struct ListConfiguredTableAssociationsInputBody: Swift.Equatable {
}

extension ListConfiguredTableAssociationsInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension ListConfiguredTableAssociationsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListConfiguredTableAssociationsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum ListConfiguredTableAssociationsOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case internalServerException(InternalServerException)
    case throttlingException(ThrottlingException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListConfiguredTableAssociationsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ListConfiguredTableAssociationsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.configuredTableAssociationSummaries = output.configuredTableAssociationSummaries
            self.nextToken = output.nextToken
        } else {
            self.configuredTableAssociationSummaries = nil
            self.nextToken = nil
        }
    }
}

public struct ListConfiguredTableAssociationsOutputResponse: Swift.Equatable {
    /// The retrieved list of configured table associations.
    /// This member is required.
    public var configuredTableAssociationSummaries: [CleanRoomsClientTypes.ConfiguredTableAssociationSummary]?
    /// The token value retrieved from a previous call to access the next page of results.
    public var nextToken: Swift.String?

    public init (
        configuredTableAssociationSummaries: [CleanRoomsClientTypes.ConfiguredTableAssociationSummary]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.configuredTableAssociationSummaries = configuredTableAssociationSummaries
        self.nextToken = nextToken
    }
}

struct ListConfiguredTableAssociationsOutputResponseBody: Swift.Equatable {
    let configuredTableAssociationSummaries: [CleanRoomsClientTypes.ConfiguredTableAssociationSummary]?
    let nextToken: Swift.String?
}

extension ListConfiguredTableAssociationsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case configuredTableAssociationSummaries
        case nextToken
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let configuredTableAssociationSummariesContainer = try containerValues.decodeIfPresent([CleanRoomsClientTypes.ConfiguredTableAssociationSummary?].self, forKey: .configuredTableAssociationSummaries)
        var configuredTableAssociationSummariesDecoded0:[CleanRoomsClientTypes.ConfiguredTableAssociationSummary]? = nil
        if let configuredTableAssociationSummariesContainer = configuredTableAssociationSummariesContainer {
            configuredTableAssociationSummariesDecoded0 = [CleanRoomsClientTypes.ConfiguredTableAssociationSummary]()
            for structure0 in configuredTableAssociationSummariesContainer {
                if let structure0 = structure0 {
                    configuredTableAssociationSummariesDecoded0?.append(structure0)
                }
            }
        }
        configuredTableAssociationSummaries = configuredTableAssociationSummariesDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListConfiguredTablesInput: ClientRuntime.QueryItemProvider {
    public var queryItems: [ClientRuntime.URLQueryItem] {
        get throws {
            var items = [ClientRuntime.URLQueryItem]()
            if let nextToken = nextToken {
                let nextTokenQueryItem = ClientRuntime.URLQueryItem(name: "nextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
                items.append(nextTokenQueryItem)
            }
            if let maxResults = maxResults {
                let maxResultsQueryItem = ClientRuntime.URLQueryItem(name: "maxResults".urlPercentEncoding(), value: Swift.String(maxResults).urlPercentEncoding())
                items.append(maxResultsQueryItem)
            }
            return items
        }
    }
}

extension ListConfiguredTablesInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/configuredTables"
    }
}

public struct ListConfiguredTablesInput: Swift.Equatable {
    /// The maximum size of the results that is returned per call.
    public var maxResults: Swift.Int?
    /// The token value retrieved from a previous call to access the next page of results.
    public var nextToken: Swift.String?

    public init (
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

struct ListConfiguredTablesInputBody: Swift.Equatable {
}

extension ListConfiguredTablesInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension ListConfiguredTablesOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListConfiguredTablesOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum ListConfiguredTablesOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case internalServerException(InternalServerException)
    case throttlingException(ThrottlingException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListConfiguredTablesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ListConfiguredTablesOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.configuredTableSummaries = output.configuredTableSummaries
            self.nextToken = output.nextToken
        } else {
            self.configuredTableSummaries = nil
            self.nextToken = nil
        }
    }
}

public struct ListConfiguredTablesOutputResponse: Swift.Equatable {
    /// The configured tables listed by the request.
    /// This member is required.
    public var configuredTableSummaries: [CleanRoomsClientTypes.ConfiguredTableSummary]?
    /// The token value retrieved from a previous call to access the next page of results.
    public var nextToken: Swift.String?

    public init (
        configuredTableSummaries: [CleanRoomsClientTypes.ConfiguredTableSummary]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.configuredTableSummaries = configuredTableSummaries
        self.nextToken = nextToken
    }
}

struct ListConfiguredTablesOutputResponseBody: Swift.Equatable {
    let configuredTableSummaries: [CleanRoomsClientTypes.ConfiguredTableSummary]?
    let nextToken: Swift.String?
}

extension ListConfiguredTablesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case configuredTableSummaries
        case nextToken
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let configuredTableSummariesContainer = try containerValues.decodeIfPresent([CleanRoomsClientTypes.ConfiguredTableSummary?].self, forKey: .configuredTableSummaries)
        var configuredTableSummariesDecoded0:[CleanRoomsClientTypes.ConfiguredTableSummary]? = nil
        if let configuredTableSummariesContainer = configuredTableSummariesContainer {
            configuredTableSummariesDecoded0 = [CleanRoomsClientTypes.ConfiguredTableSummary]()
            for structure0 in configuredTableSummariesContainer {
                if let structure0 = structure0 {
                    configuredTableSummariesDecoded0?.append(structure0)
                }
            }
        }
        configuredTableSummaries = configuredTableSummariesDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListMembersInput: ClientRuntime.QueryItemProvider {
    public var queryItems: [ClientRuntime.URLQueryItem] {
        get throws {
            var items = [ClientRuntime.URLQueryItem]()
            if let nextToken = nextToken {
                let nextTokenQueryItem = ClientRuntime.URLQueryItem(name: "nextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
                items.append(nextTokenQueryItem)
            }
            if let maxResults = maxResults {
                let maxResultsQueryItem = ClientRuntime.URLQueryItem(name: "maxResults".urlPercentEncoding(), value: Swift.String(maxResults).urlPercentEncoding())
                items.append(maxResultsQueryItem)
            }
            return items
        }
    }
}

extension ListMembersInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let collaborationIdentifier = collaborationIdentifier else {
            return nil
        }
        return "/collaborations/\(collaborationIdentifier.urlPercentEncoding())/members"
    }
}

public struct ListMembersInput: Swift.Equatable {
    /// The identifier of the collaboration in which the members are listed.
    /// This member is required.
    public var collaborationIdentifier: Swift.String?
    /// The maximum size of the results that is returned per call.
    public var maxResults: Swift.Int?
    /// The token value retrieved from a previous call to access the next page of results.
    public var nextToken: Swift.String?

    public init (
        collaborationIdentifier: Swift.String? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.collaborationIdentifier = collaborationIdentifier
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

struct ListMembersInputBody: Swift.Equatable {
}

extension ListMembersInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension ListMembersOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListMembersOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum ListMembersOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case internalServerException(InternalServerException)
    case resourceNotFoundException(ResourceNotFoundException)
    case throttlingException(ThrottlingException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListMembersOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ListMembersOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.memberSummaries = output.memberSummaries
            self.nextToken = output.nextToken
        } else {
            self.memberSummaries = nil
            self.nextToken = nil
        }
    }
}

public struct ListMembersOutputResponse: Swift.Equatable {
    /// The list of members returned by the ListMembers operation.
    /// This member is required.
    public var memberSummaries: [CleanRoomsClientTypes.MemberSummary]?
    /// The token value retrieved from a previous call to access the next page of results.
    public var nextToken: Swift.String?

    public init (
        memberSummaries: [CleanRoomsClientTypes.MemberSummary]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.memberSummaries = memberSummaries
        self.nextToken = nextToken
    }
}

struct ListMembersOutputResponseBody: Swift.Equatable {
    let nextToken: Swift.String?
    let memberSummaries: [CleanRoomsClientTypes.MemberSummary]?
}

extension ListMembersOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case memberSummaries
        case nextToken
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let memberSummariesContainer = try containerValues.decodeIfPresent([CleanRoomsClientTypes.MemberSummary?].self, forKey: .memberSummaries)
        var memberSummariesDecoded0:[CleanRoomsClientTypes.MemberSummary]? = nil
        if let memberSummariesContainer = memberSummariesContainer {
            memberSummariesDecoded0 = [CleanRoomsClientTypes.MemberSummary]()
            for structure0 in memberSummariesContainer {
                if let structure0 = structure0 {
                    memberSummariesDecoded0?.append(structure0)
                }
            }
        }
        memberSummaries = memberSummariesDecoded0
    }
}

extension ListMembershipsInput: ClientRuntime.QueryItemProvider {
    public var queryItems: [ClientRuntime.URLQueryItem] {
        get throws {
            var items = [ClientRuntime.URLQueryItem]()
            if let nextToken = nextToken {
                let nextTokenQueryItem = ClientRuntime.URLQueryItem(name: "nextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
                items.append(nextTokenQueryItem)
            }
            if let maxResults = maxResults {
                let maxResultsQueryItem = ClientRuntime.URLQueryItem(name: "maxResults".urlPercentEncoding(), value: Swift.String(maxResults).urlPercentEncoding())
                items.append(maxResultsQueryItem)
            }
            if let status = status {
                let statusQueryItem = ClientRuntime.URLQueryItem(name: "status".urlPercentEncoding(), value: Swift.String(status.rawValue).urlPercentEncoding())
                items.append(statusQueryItem)
            }
            return items
        }
    }
}

extension ListMembershipsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/memberships"
    }
}

public struct ListMembershipsInput: Swift.Equatable {
    /// The maximum size of the results that is returned per call.
    public var maxResults: Swift.Int?
    /// The token value retrieved from a previous call to access the next page of results.
    public var nextToken: Swift.String?
    /// A filter which will return only memberships in the specified status.
    public var status: CleanRoomsClientTypes.MembershipStatus?

    public init (
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        status: CleanRoomsClientTypes.MembershipStatus? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.status = status
    }
}

struct ListMembershipsInputBody: Swift.Equatable {
}

extension ListMembershipsInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension ListMembershipsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListMembershipsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum ListMembershipsOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case internalServerException(InternalServerException)
    case throttlingException(ThrottlingException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListMembershipsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ListMembershipsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.membershipSummaries = output.membershipSummaries
            self.nextToken = output.nextToken
        } else {
            self.membershipSummaries = nil
            self.nextToken = nil
        }
    }
}

public struct ListMembershipsOutputResponse: Swift.Equatable {
    /// The list of memberships returned from the ListMemberships operation.
    /// This member is required.
    public var membershipSummaries: [CleanRoomsClientTypes.MembershipSummary]?
    /// The token value retrieved from a previous call to access the next page of results.
    public var nextToken: Swift.String?

    public init (
        membershipSummaries: [CleanRoomsClientTypes.MembershipSummary]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.membershipSummaries = membershipSummaries
        self.nextToken = nextToken
    }
}

struct ListMembershipsOutputResponseBody: Swift.Equatable {
    let nextToken: Swift.String?
    let membershipSummaries: [CleanRoomsClientTypes.MembershipSummary]?
}

extension ListMembershipsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case membershipSummaries
        case nextToken
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let membershipSummariesContainer = try containerValues.decodeIfPresent([CleanRoomsClientTypes.MembershipSummary?].self, forKey: .membershipSummaries)
        var membershipSummariesDecoded0:[CleanRoomsClientTypes.MembershipSummary]? = nil
        if let membershipSummariesContainer = membershipSummariesContainer {
            membershipSummariesDecoded0 = [CleanRoomsClientTypes.MembershipSummary]()
            for structure0 in membershipSummariesContainer {
                if let structure0 = structure0 {
                    membershipSummariesDecoded0?.append(structure0)
                }
            }
        }
        membershipSummaries = membershipSummariesDecoded0
    }
}

extension ListProtectedQueriesInput: ClientRuntime.QueryItemProvider {
    public var queryItems: [ClientRuntime.URLQueryItem] {
        get throws {
            var items = [ClientRuntime.URLQueryItem]()
            if let nextToken = nextToken {
                let nextTokenQueryItem = ClientRuntime.URLQueryItem(name: "nextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
                items.append(nextTokenQueryItem)
            }
            if let maxResults = maxResults {
                let maxResultsQueryItem = ClientRuntime.URLQueryItem(name: "maxResults".urlPercentEncoding(), value: Swift.String(maxResults).urlPercentEncoding())
                items.append(maxResultsQueryItem)
            }
            if let status = status {
                let statusQueryItem = ClientRuntime.URLQueryItem(name: "status".urlPercentEncoding(), value: Swift.String(status.rawValue).urlPercentEncoding())
                items.append(statusQueryItem)
            }
            return items
        }
    }
}

extension ListProtectedQueriesInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let membershipIdentifier = membershipIdentifier else {
            return nil
        }
        return "/memberships/\(membershipIdentifier.urlPercentEncoding())/protectedQueries"
    }
}

public struct ListProtectedQueriesInput: Swift.Equatable {
    /// The maximum size of the results that is returned per call. Service chooses a default if it has not been set. Service can return a nextToken even if the maximum results has not been met.
    public var maxResults: Swift.Int?
    /// The identifier for the membership in the collaboration.
    /// This member is required.
    public var membershipIdentifier: Swift.String?
    /// The token value retrieved from a previous call to access the next page of results.
    public var nextToken: Swift.String?
    /// A filter on the status of the protected query.
    public var status: CleanRoomsClientTypes.ProtectedQueryStatus?

    public init (
        maxResults: Swift.Int? = nil,
        membershipIdentifier: Swift.String? = nil,
        nextToken: Swift.String? = nil,
        status: CleanRoomsClientTypes.ProtectedQueryStatus? = nil
    )
    {
        self.maxResults = maxResults
        self.membershipIdentifier = membershipIdentifier
        self.nextToken = nextToken
        self.status = status
    }
}

struct ListProtectedQueriesInputBody: Swift.Equatable {
}

extension ListProtectedQueriesInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension ListProtectedQueriesOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListProtectedQueriesOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum ListProtectedQueriesOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case internalServerException(InternalServerException)
    case throttlingException(ThrottlingException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListProtectedQueriesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ListProtectedQueriesOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.nextToken = output.nextToken
            self.protectedQueries = output.protectedQueries
        } else {
            self.nextToken = nil
            self.protectedQueries = nil
        }
    }
}

public struct ListProtectedQueriesOutputResponse: Swift.Equatable {
    /// The token value retrieved from a previous call to access the next page of results.
    public var nextToken: Swift.String?
    /// A list of protected queries.
    /// This member is required.
    public var protectedQueries: [CleanRoomsClientTypes.ProtectedQuerySummary]?

    public init (
        nextToken: Swift.String? = nil,
        protectedQueries: [CleanRoomsClientTypes.ProtectedQuerySummary]? = nil
    )
    {
        self.nextToken = nextToken
        self.protectedQueries = protectedQueries
    }
}

struct ListProtectedQueriesOutputResponseBody: Swift.Equatable {
    let nextToken: Swift.String?
    let protectedQueries: [CleanRoomsClientTypes.ProtectedQuerySummary]?
}

extension ListProtectedQueriesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken
        case protectedQueries
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let protectedQueriesContainer = try containerValues.decodeIfPresent([CleanRoomsClientTypes.ProtectedQuerySummary?].self, forKey: .protectedQueries)
        var protectedQueriesDecoded0:[CleanRoomsClientTypes.ProtectedQuerySummary]? = nil
        if let protectedQueriesContainer = protectedQueriesContainer {
            protectedQueriesDecoded0 = [CleanRoomsClientTypes.ProtectedQuerySummary]()
            for structure0 in protectedQueriesContainer {
                if let structure0 = structure0 {
                    protectedQueriesDecoded0?.append(structure0)
                }
            }
        }
        protectedQueries = protectedQueriesDecoded0
    }
}

extension ListSchemasInput: ClientRuntime.QueryItemProvider {
    public var queryItems: [ClientRuntime.URLQueryItem] {
        get throws {
            var items = [ClientRuntime.URLQueryItem]()
            if let nextToken = nextToken {
                let nextTokenQueryItem = ClientRuntime.URLQueryItem(name: "nextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
                items.append(nextTokenQueryItem)
            }
            if let maxResults = maxResults {
                let maxResultsQueryItem = ClientRuntime.URLQueryItem(name: "maxResults".urlPercentEncoding(), value: Swift.String(maxResults).urlPercentEncoding())
                items.append(maxResultsQueryItem)
            }
            if let schemaType = schemaType {
                let schemaTypeQueryItem = ClientRuntime.URLQueryItem(name: "schemaType".urlPercentEncoding(), value: Swift.String(schemaType.rawValue).urlPercentEncoding())
                items.append(schemaTypeQueryItem)
            }
            return items
        }
    }
}

extension ListSchemasInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let collaborationIdentifier = collaborationIdentifier else {
            return nil
        }
        return "/collaborations/\(collaborationIdentifier.urlPercentEncoding())/schemas"
    }
}

public struct ListSchemasInput: Swift.Equatable {
    /// A unique identifier for the collaboration that the schema belongs to. Currently accepts a collaboration ID.
    /// This member is required.
    public var collaborationIdentifier: Swift.String?
    /// The maximum size of the results that is returned per call.
    public var maxResults: Swift.Int?
    /// The token value retrieved from a previous call to access the next page of results.
    public var nextToken: Swift.String?
    /// If present, filter schemas by schema type. The only valid schema type is currently `TABLE`.
    public var schemaType: CleanRoomsClientTypes.SchemaType?

    public init (
        collaborationIdentifier: Swift.String? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        schemaType: CleanRoomsClientTypes.SchemaType? = nil
    )
    {
        self.collaborationIdentifier = collaborationIdentifier
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.schemaType = schemaType
    }
}

struct ListSchemasInputBody: Swift.Equatable {
}

extension ListSchemasInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension ListSchemasOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListSchemasOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum ListSchemasOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case internalServerException(InternalServerException)
    case resourceNotFoundException(ResourceNotFoundException)
    case throttlingException(ThrottlingException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListSchemasOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ListSchemasOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.nextToken = output.nextToken
            self.schemaSummaries = output.schemaSummaries
        } else {
            self.nextToken = nil
            self.schemaSummaries = nil
        }
    }
}

public struct ListSchemasOutputResponse: Swift.Equatable {
    /// The token value retrieved from a previous call to access the next page of results.
    public var nextToken: Swift.String?
    /// The retrieved list of schemas.
    /// This member is required.
    public var schemaSummaries: [CleanRoomsClientTypes.SchemaSummary]?

    public init (
        nextToken: Swift.String? = nil,
        schemaSummaries: [CleanRoomsClientTypes.SchemaSummary]? = nil
    )
    {
        self.nextToken = nextToken
        self.schemaSummaries = schemaSummaries
    }
}

struct ListSchemasOutputResponseBody: Swift.Equatable {
    let schemaSummaries: [CleanRoomsClientTypes.SchemaSummary]?
    let nextToken: Swift.String?
}

extension ListSchemasOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken
        case schemaSummaries
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let schemaSummariesContainer = try containerValues.decodeIfPresent([CleanRoomsClientTypes.SchemaSummary?].self, forKey: .schemaSummaries)
        var schemaSummariesDecoded0:[CleanRoomsClientTypes.SchemaSummary]? = nil
        if let schemaSummariesContainer = schemaSummariesContainer {
            schemaSummariesDecoded0 = [CleanRoomsClientTypes.SchemaSummary]()
            for structure0 in schemaSummariesContainer {
                if let structure0 = structure0 {
                    schemaSummariesDecoded0?.append(structure0)
                }
            }
        }
        schemaSummaries = schemaSummariesDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension CleanRoomsClientTypes {
    public enum MemberAbility: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case canQuery
        case canReceiveResults
        case sdkUnknown(Swift.String)

        public static var allCases: [MemberAbility] {
            return [
                .canQuery,
                .canReceiveResults,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .canQuery: return "CAN_QUERY"
            case .canReceiveResults: return "CAN_RECEIVE_RESULTS"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = MemberAbility(rawValue: rawValue) ?? MemberAbility.sdkUnknown(rawValue)
        }
    }
}

extension CleanRoomsClientTypes.MemberSpecification: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accountId
        case displayName
        case memberAbilities
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let accountId = self.accountId {
            try encodeContainer.encode(accountId, forKey: .accountId)
        }
        if let displayName = self.displayName {
            try encodeContainer.encode(displayName, forKey: .displayName)
        }
        if let memberAbilities = memberAbilities {
            var memberAbilitiesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .memberAbilities)
            for memberability0 in memberAbilities {
                try memberAbilitiesContainer.encode(memberability0.rawValue)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let accountIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .accountId)
        accountId = accountIdDecoded
        let memberAbilitiesContainer = try containerValues.decodeIfPresent([CleanRoomsClientTypes.MemberAbility?].self, forKey: .memberAbilities)
        var memberAbilitiesDecoded0:[CleanRoomsClientTypes.MemberAbility]? = nil
        if let memberAbilitiesContainer = memberAbilitiesContainer {
            memberAbilitiesDecoded0 = [CleanRoomsClientTypes.MemberAbility]()
            for string0 in memberAbilitiesContainer {
                if let string0 = string0 {
                    memberAbilitiesDecoded0?.append(string0)
                }
            }
        }
        memberAbilities = memberAbilitiesDecoded0
        let displayNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .displayName)
        displayName = displayNameDecoded
    }
}

extension CleanRoomsClientTypes {
    /// Basic metadata used to construct a new member.
    public struct MemberSpecification: Swift.Equatable {
        /// The identifier used to reference members of the collaboration. Currently only supports AWS Account ID.
        /// This member is required.
        public var accountId: Swift.String?
        /// The member's display name.
        /// This member is required.
        public var displayName: Swift.String?
        /// The abilities granted to the collaboration member.
        /// This member is required.
        public var memberAbilities: [CleanRoomsClientTypes.MemberAbility]?

        public init (
            accountId: Swift.String? = nil,
            displayName: Swift.String? = nil,
            memberAbilities: [CleanRoomsClientTypes.MemberAbility]? = nil
        )
        {
            self.accountId = accountId
            self.displayName = displayName
            self.memberAbilities = memberAbilities
        }
    }

}

extension CleanRoomsClientTypes {
    public enum MemberStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case active
        case invited
        case `left`
        case removed
        case sdkUnknown(Swift.String)

        public static var allCases: [MemberStatus] {
            return [
                .active,
                .invited,
                .left,
                .removed,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .active: return "ACTIVE"
            case .invited: return "INVITED"
            case .left: return "LEFT"
            case .removed: return "REMOVED"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = MemberStatus(rawValue: rawValue) ?? MemberStatus.sdkUnknown(rawValue)
        }
    }
}

extension CleanRoomsClientTypes.MemberSummary: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case abilities
        case accountId
        case createTime
        case displayName
        case membershipArn
        case membershipId
        case status
        case updateTime
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let abilities = abilities {
            var abilitiesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .abilities)
            for memberability0 in abilities {
                try abilitiesContainer.encode(memberability0.rawValue)
            }
        }
        if let accountId = self.accountId {
            try encodeContainer.encode(accountId, forKey: .accountId)
        }
        if let createTime = self.createTime {
            try encodeContainer.encodeTimestamp(createTime, format: .epochSeconds, forKey: .createTime)
        }
        if let displayName = self.displayName {
            try encodeContainer.encode(displayName, forKey: .displayName)
        }
        if let membershipArn = self.membershipArn {
            try encodeContainer.encode(membershipArn, forKey: .membershipArn)
        }
        if let membershipId = self.membershipId {
            try encodeContainer.encode(membershipId, forKey: .membershipId)
        }
        if let status = self.status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
        if let updateTime = self.updateTime {
            try encodeContainer.encodeTimestamp(updateTime, format: .epochSeconds, forKey: .updateTime)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let accountIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .accountId)
        accountId = accountIdDecoded
        let statusDecoded = try containerValues.decodeIfPresent(CleanRoomsClientTypes.MemberStatus.self, forKey: .status)
        status = statusDecoded
        let displayNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .displayName)
        displayName = displayNameDecoded
        let abilitiesContainer = try containerValues.decodeIfPresent([CleanRoomsClientTypes.MemberAbility?].self, forKey: .abilities)
        var abilitiesDecoded0:[CleanRoomsClientTypes.MemberAbility]? = nil
        if let abilitiesContainer = abilitiesContainer {
            abilitiesDecoded0 = [CleanRoomsClientTypes.MemberAbility]()
            for string0 in abilitiesContainer {
                if let string0 = string0 {
                    abilitiesDecoded0?.append(string0)
                }
            }
        }
        abilities = abilitiesDecoded0
        let createTimeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .createTime)
        createTime = createTimeDecoded
        let updateTimeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .updateTime)
        updateTime = updateTimeDecoded
        let membershipIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .membershipId)
        membershipId = membershipIdDecoded
        let membershipArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .membershipArn)
        membershipArn = membershipArnDecoded
    }
}

extension CleanRoomsClientTypes {
    /// The member object listed by the request.
    public struct MemberSummary: Swift.Equatable {
        /// The abilities granted to the collaboration member.
        /// This member is required.
        public var abilities: [CleanRoomsClientTypes.MemberAbility]?
        /// The identifier used to reference members of the collaboration. Currently only supports AWS Account ID.
        /// This member is required.
        public var accountId: Swift.String?
        /// The time when the member was created.
        /// This member is required.
        public var createTime: ClientRuntime.Date?
        /// The member's display name.
        /// This member is required.
        public var displayName: Swift.String?
        /// The unique ARN for the member's associated membership, if present.
        public var membershipArn: Swift.String?
        /// The unique ID for the member's associated membership, if present.
        public var membershipId: Swift.String?
        /// The status of the member. Valid values are `INVITED`, `ACTIVE`, `LEFT`, and `REMOVED`.
        /// This member is required.
        public var status: CleanRoomsClientTypes.MemberStatus?
        /// The time the member metadata was last updated.
        /// This member is required.
        public var updateTime: ClientRuntime.Date?

        public init (
            abilities: [CleanRoomsClientTypes.MemberAbility]? = nil,
            accountId: Swift.String? = nil,
            createTime: ClientRuntime.Date? = nil,
            displayName: Swift.String? = nil,
            membershipArn: Swift.String? = nil,
            membershipId: Swift.String? = nil,
            status: CleanRoomsClientTypes.MemberStatus? = nil,
            updateTime: ClientRuntime.Date? = nil
        )
        {
            self.abilities = abilities
            self.accountId = accountId
            self.createTime = createTime
            self.displayName = displayName
            self.membershipArn = membershipArn
            self.membershipId = membershipId
            self.status = status
            self.updateTime = updateTime
        }
    }

}

extension CleanRoomsClientTypes.Membership: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case arn
        case collaborationArn
        case collaborationCreatorAccountId
        case collaborationCreatorDisplayName
        case collaborationId
        case collaborationName
        case createTime
        case id
        case memberAbilities
        case queryLogStatus
        case status
        case updateTime
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let arn = self.arn {
            try encodeContainer.encode(arn, forKey: .arn)
        }
        if let collaborationArn = self.collaborationArn {
            try encodeContainer.encode(collaborationArn, forKey: .collaborationArn)
        }
        if let collaborationCreatorAccountId = self.collaborationCreatorAccountId {
            try encodeContainer.encode(collaborationCreatorAccountId, forKey: .collaborationCreatorAccountId)
        }
        if let collaborationCreatorDisplayName = self.collaborationCreatorDisplayName {
            try encodeContainer.encode(collaborationCreatorDisplayName, forKey: .collaborationCreatorDisplayName)
        }
        if let collaborationId = self.collaborationId {
            try encodeContainer.encode(collaborationId, forKey: .collaborationId)
        }
        if let collaborationName = self.collaborationName {
            try encodeContainer.encode(collaborationName, forKey: .collaborationName)
        }
        if let createTime = self.createTime {
            try encodeContainer.encodeTimestamp(createTime, format: .epochSeconds, forKey: .createTime)
        }
        if let id = self.id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let memberAbilities = memberAbilities {
            var memberAbilitiesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .memberAbilities)
            for memberability0 in memberAbilities {
                try memberAbilitiesContainer.encode(memberability0.rawValue)
            }
        }
        if let queryLogStatus = self.queryLogStatus {
            try encodeContainer.encode(queryLogStatus.rawValue, forKey: .queryLogStatus)
        }
        if let status = self.status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
        if let updateTime = self.updateTime {
            try encodeContainer.encodeTimestamp(updateTime, format: .epochSeconds, forKey: .updateTime)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
        let arnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .arn)
        arn = arnDecoded
        let collaborationArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .collaborationArn)
        collaborationArn = collaborationArnDecoded
        let collaborationIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .collaborationId)
        collaborationId = collaborationIdDecoded
        let collaborationCreatorAccountIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .collaborationCreatorAccountId)
        collaborationCreatorAccountId = collaborationCreatorAccountIdDecoded
        let collaborationCreatorDisplayNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .collaborationCreatorDisplayName)
        collaborationCreatorDisplayName = collaborationCreatorDisplayNameDecoded
        let collaborationNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .collaborationName)
        collaborationName = collaborationNameDecoded
        let createTimeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .createTime)
        createTime = createTimeDecoded
        let updateTimeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .updateTime)
        updateTime = updateTimeDecoded
        let statusDecoded = try containerValues.decodeIfPresent(CleanRoomsClientTypes.MembershipStatus.self, forKey: .status)
        status = statusDecoded
        let memberAbilitiesContainer = try containerValues.decodeIfPresent([CleanRoomsClientTypes.MemberAbility?].self, forKey: .memberAbilities)
        var memberAbilitiesDecoded0:[CleanRoomsClientTypes.MemberAbility]? = nil
        if let memberAbilitiesContainer = memberAbilitiesContainer {
            memberAbilitiesDecoded0 = [CleanRoomsClientTypes.MemberAbility]()
            for string0 in memberAbilitiesContainer {
                if let string0 = string0 {
                    memberAbilitiesDecoded0?.append(string0)
                }
            }
        }
        memberAbilities = memberAbilitiesDecoded0
        let queryLogStatusDecoded = try containerValues.decodeIfPresent(CleanRoomsClientTypes.MembershipQueryLogStatus.self, forKey: .queryLogStatus)
        queryLogStatus = queryLogStatusDecoded
    }
}

extension CleanRoomsClientTypes {
    /// The membership object.
    public struct Membership: Swift.Equatable {
        /// The unique ARN for the membership.
        /// This member is required.
        public var arn: Swift.String?
        /// The unique ARN for the membership's associated collaboration.
        /// This member is required.
        public var collaborationArn: Swift.String?
        /// The identifier used to reference members of the collaboration. Currently only supports AWS account ID.
        /// This member is required.
        public var collaborationCreatorAccountId: Swift.String?
        /// The display name of the collaboration creator.
        /// This member is required.
        public var collaborationCreatorDisplayName: Swift.String?
        /// The unique ID for the membership's collaboration.
        /// This member is required.
        public var collaborationId: Swift.String?
        /// The name of the membership's collaboration.
        /// This member is required.
        public var collaborationName: Swift.String?
        /// The time when the membership was created.
        /// This member is required.
        public var createTime: ClientRuntime.Date?
        /// The unique ID of the membership.
        /// This member is required.
        public var id: Swift.String?
        /// The abilities granted to the collaboration member.
        /// This member is required.
        public var memberAbilities: [CleanRoomsClientTypes.MemberAbility]?
        /// An indicator as to whether query logging has been enabled or disabled for the collaboration.
        /// This member is required.
        public var queryLogStatus: CleanRoomsClientTypes.MembershipQueryLogStatus?
        /// The status of the membership. Valid values are `ACTIVE`, `REMOVED`, and `COLLABORATION_DELETED`.
        /// This member is required.
        public var status: CleanRoomsClientTypes.MembershipStatus?
        /// The time the membership metadata was last updated.
        /// This member is required.
        public var updateTime: ClientRuntime.Date?

        public init (
            arn: Swift.String? = nil,
            collaborationArn: Swift.String? = nil,
            collaborationCreatorAccountId: Swift.String? = nil,
            collaborationCreatorDisplayName: Swift.String? = nil,
            collaborationId: Swift.String? = nil,
            collaborationName: Swift.String? = nil,
            createTime: ClientRuntime.Date? = nil,
            id: Swift.String? = nil,
            memberAbilities: [CleanRoomsClientTypes.MemberAbility]? = nil,
            queryLogStatus: CleanRoomsClientTypes.MembershipQueryLogStatus? = nil,
            status: CleanRoomsClientTypes.MembershipStatus? = nil,
            updateTime: ClientRuntime.Date? = nil
        )
        {
            self.arn = arn
            self.collaborationArn = collaborationArn
            self.collaborationCreatorAccountId = collaborationCreatorAccountId
            self.collaborationCreatorDisplayName = collaborationCreatorDisplayName
            self.collaborationId = collaborationId
            self.collaborationName = collaborationName
            self.createTime = createTime
            self.id = id
            self.memberAbilities = memberAbilities
            self.queryLogStatus = queryLogStatus
            self.status = status
            self.updateTime = updateTime
        }
    }

}

extension CleanRoomsClientTypes {
    public enum MembershipQueryLogStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case disabled
        case enabled
        case sdkUnknown(Swift.String)

        public static var allCases: [MembershipQueryLogStatus] {
            return [
                .disabled,
                .enabled,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .disabled: return "DISABLED"
            case .enabled: return "ENABLED"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = MembershipQueryLogStatus(rawValue: rawValue) ?? MembershipQueryLogStatus.sdkUnknown(rawValue)
        }
    }
}

extension CleanRoomsClientTypes {
    public enum MembershipStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case active
        case collaborationDeleted
        case removed
        case sdkUnknown(Swift.String)

        public static var allCases: [MembershipStatus] {
            return [
                .active,
                .collaborationDeleted,
                .removed,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .active: return "ACTIVE"
            case .collaborationDeleted: return "COLLABORATION_DELETED"
            case .removed: return "REMOVED"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = MembershipStatus(rawValue: rawValue) ?? MembershipStatus.sdkUnknown(rawValue)
        }
    }
}

extension CleanRoomsClientTypes.MembershipSummary: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case arn
        case collaborationArn
        case collaborationCreatorAccountId
        case collaborationCreatorDisplayName
        case collaborationId
        case collaborationName
        case createTime
        case id
        case memberAbilities
        case status
        case updateTime
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let arn = self.arn {
            try encodeContainer.encode(arn, forKey: .arn)
        }
        if let collaborationArn = self.collaborationArn {
            try encodeContainer.encode(collaborationArn, forKey: .collaborationArn)
        }
        if let collaborationCreatorAccountId = self.collaborationCreatorAccountId {
            try encodeContainer.encode(collaborationCreatorAccountId, forKey: .collaborationCreatorAccountId)
        }
        if let collaborationCreatorDisplayName = self.collaborationCreatorDisplayName {
            try encodeContainer.encode(collaborationCreatorDisplayName, forKey: .collaborationCreatorDisplayName)
        }
        if let collaborationId = self.collaborationId {
            try encodeContainer.encode(collaborationId, forKey: .collaborationId)
        }
        if let collaborationName = self.collaborationName {
            try encodeContainer.encode(collaborationName, forKey: .collaborationName)
        }
        if let createTime = self.createTime {
            try encodeContainer.encodeTimestamp(createTime, format: .epochSeconds, forKey: .createTime)
        }
        if let id = self.id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let memberAbilities = memberAbilities {
            var memberAbilitiesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .memberAbilities)
            for memberability0 in memberAbilities {
                try memberAbilitiesContainer.encode(memberability0.rawValue)
            }
        }
        if let status = self.status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
        if let updateTime = self.updateTime {
            try encodeContainer.encodeTimestamp(updateTime, format: .epochSeconds, forKey: .updateTime)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
        let arnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .arn)
        arn = arnDecoded
        let collaborationArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .collaborationArn)
        collaborationArn = collaborationArnDecoded
        let collaborationIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .collaborationId)
        collaborationId = collaborationIdDecoded
        let collaborationCreatorAccountIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .collaborationCreatorAccountId)
        collaborationCreatorAccountId = collaborationCreatorAccountIdDecoded
        let collaborationCreatorDisplayNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .collaborationCreatorDisplayName)
        collaborationCreatorDisplayName = collaborationCreatorDisplayNameDecoded
        let collaborationNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .collaborationName)
        collaborationName = collaborationNameDecoded
        let createTimeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .createTime)
        createTime = createTimeDecoded
        let updateTimeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .updateTime)
        updateTime = updateTimeDecoded
        let statusDecoded = try containerValues.decodeIfPresent(CleanRoomsClientTypes.MembershipStatus.self, forKey: .status)
        status = statusDecoded
        let memberAbilitiesContainer = try containerValues.decodeIfPresent([CleanRoomsClientTypes.MemberAbility?].self, forKey: .memberAbilities)
        var memberAbilitiesDecoded0:[CleanRoomsClientTypes.MemberAbility]? = nil
        if let memberAbilitiesContainer = memberAbilitiesContainer {
            memberAbilitiesDecoded0 = [CleanRoomsClientTypes.MemberAbility]()
            for string0 in memberAbilitiesContainer {
                if let string0 = string0 {
                    memberAbilitiesDecoded0?.append(string0)
                }
            }
        }
        memberAbilities = memberAbilitiesDecoded0
    }
}

extension CleanRoomsClientTypes {
    /// The membership object listed by the request.
    public struct MembershipSummary: Swift.Equatable {
        /// The unique ARN for the membership.
        /// This member is required.
        public var arn: Swift.String?
        /// The unique ARN for the membership's associated collaboration.
        /// This member is required.
        public var collaborationArn: Swift.String?
        /// The identifier of the AWS principal that created the collaboration. Currently only supports AWS account ID.
        /// This member is required.
        public var collaborationCreatorAccountId: Swift.String?
        /// The display name of the collaboration creator.
        /// This member is required.
        public var collaborationCreatorDisplayName: Swift.String?
        /// The unique ID for the membership's collaboration.
        /// This member is required.
        public var collaborationId: Swift.String?
        /// The name for the membership's collaboration.
        /// This member is required.
        public var collaborationName: Swift.String?
        /// The time when the membership was created.
        /// This member is required.
        public var createTime: ClientRuntime.Date?
        /// The unique ID for the membership's collaboration.
        /// This member is required.
        public var id: Swift.String?
        /// The abilities granted to the collaboration member.
        /// This member is required.
        public var memberAbilities: [CleanRoomsClientTypes.MemberAbility]?
        /// The status of the membership. Valid values are `ACTIVE`, `REMOVED`, and `COLLABORATION_DELETED`.
        /// This member is required.
        public var status: CleanRoomsClientTypes.MembershipStatus?
        /// The time the membership metadata was last updated.
        /// This member is required.
        public var updateTime: ClientRuntime.Date?

        public init (
            arn: Swift.String? = nil,
            collaborationArn: Swift.String? = nil,
            collaborationCreatorAccountId: Swift.String? = nil,
            collaborationCreatorDisplayName: Swift.String? = nil,
            collaborationId: Swift.String? = nil,
            collaborationName: Swift.String? = nil,
            createTime: ClientRuntime.Date? = nil,
            id: Swift.String? = nil,
            memberAbilities: [CleanRoomsClientTypes.MemberAbility]? = nil,
            status: CleanRoomsClientTypes.MembershipStatus? = nil,
            updateTime: ClientRuntime.Date? = nil
        )
        {
            self.arn = arn
            self.collaborationArn = collaborationArn
            self.collaborationCreatorAccountId = collaborationCreatorAccountId
            self.collaborationCreatorDisplayName = collaborationCreatorDisplayName
            self.collaborationId = collaborationId
            self.collaborationName = collaborationName
            self.createTime = createTime
            self.id = id
            self.memberAbilities = memberAbilities
            self.status = status
            self.updateTime = updateTime
        }
    }

}

extension CleanRoomsClientTypes.ProtectedQuery: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case createTime
        case error
        case id
        case membershipArn
        case membershipId
        case result
        case resultConfiguration
        case sqlParameters
        case statistics
        case status
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let createTime = self.createTime {
            try encodeContainer.encodeTimestamp(createTime, format: .epochSeconds, forKey: .createTime)
        }
        if let error = self.error {
            try encodeContainer.encode(error, forKey: .error)
        }
        if let id = self.id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let membershipArn = self.membershipArn {
            try encodeContainer.encode(membershipArn, forKey: .membershipArn)
        }
        if let membershipId = self.membershipId {
            try encodeContainer.encode(membershipId, forKey: .membershipId)
        }
        if let result = self.result {
            try encodeContainer.encode(result, forKey: .result)
        }
        if let resultConfiguration = self.resultConfiguration {
            try encodeContainer.encode(resultConfiguration, forKey: .resultConfiguration)
        }
        if let sqlParameters = self.sqlParameters {
            try encodeContainer.encode(sqlParameters, forKey: .sqlParameters)
        }
        if let statistics = self.statistics {
            try encodeContainer.encode(statistics, forKey: .statistics)
        }
        if let status = self.status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
        let membershipIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .membershipId)
        membershipId = membershipIdDecoded
        let membershipArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .membershipArn)
        membershipArn = membershipArnDecoded
        let createTimeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .createTime)
        createTime = createTimeDecoded
        let sqlParametersDecoded = try containerValues.decodeIfPresent(CleanRoomsClientTypes.ProtectedQuerySQLParameters.self, forKey: .sqlParameters)
        sqlParameters = sqlParametersDecoded
        let statusDecoded = try containerValues.decodeIfPresent(CleanRoomsClientTypes.ProtectedQueryStatus.self, forKey: .status)
        status = statusDecoded
        let resultConfigurationDecoded = try containerValues.decodeIfPresent(CleanRoomsClientTypes.ProtectedQueryResultConfiguration.self, forKey: .resultConfiguration)
        resultConfiguration = resultConfigurationDecoded
        let statisticsDecoded = try containerValues.decodeIfPresent(CleanRoomsClientTypes.ProtectedQueryStatistics.self, forKey: .statistics)
        statistics = statisticsDecoded
        let resultDecoded = try containerValues.decodeIfPresent(CleanRoomsClientTypes.ProtectedQueryResult.self, forKey: .result)
        result = resultDecoded
        let errorDecoded = try containerValues.decodeIfPresent(CleanRoomsClientTypes.ProtectedQueryError.self, forKey: .error)
        error = errorDecoded
    }
}

extension CleanRoomsClientTypes.ProtectedQuery: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ProtectedQuery(createTime: \(Swift.String(describing: createTime)), error: \(Swift.String(describing: error)), id: \(Swift.String(describing: id)), membershipArn: \(Swift.String(describing: membershipArn)), membershipId: \(Swift.String(describing: membershipId)), result: \(Swift.String(describing: result)), resultConfiguration: \(Swift.String(describing: resultConfiguration)), statistics: \(Swift.String(describing: statistics)), status: \(Swift.String(describing: status)), sqlParameters: \"CONTENT_REDACTED\")"}
}

extension CleanRoomsClientTypes {
    /// The parameters for an AWS Clean Rooms protected query.
    public struct ProtectedQuery: Swift.Equatable {
        /// The time at which the protected query was created.
        /// This member is required.
        public var createTime: ClientRuntime.Date?
        /// An error thrown by the protected query.
        public var error: CleanRoomsClientTypes.ProtectedQueryError?
        /// The identifier for a protected query instance.
        /// This member is required.
        public var id: Swift.String?
        /// The ARN of the membership.
        /// This member is required.
        public var membershipArn: Swift.String?
        /// The identifier for the membership.
        /// This member is required.
        public var membershipId: Swift.String?
        /// The result of the protected query.
        public var result: CleanRoomsClientTypes.ProtectedQueryResult?
        /// Contains any details needed to write the query results.
        /// This member is required.
        public var resultConfiguration: CleanRoomsClientTypes.ProtectedQueryResultConfiguration?
        /// The protected query SQL parameters.
        /// This member is required.
        public var sqlParameters: CleanRoomsClientTypes.ProtectedQuerySQLParameters?
        /// Statistics about protected query execution.
        public var statistics: CleanRoomsClientTypes.ProtectedQueryStatistics?
        /// The status of the query.
        /// This member is required.
        public var status: CleanRoomsClientTypes.ProtectedQueryStatus?

        public init (
            createTime: ClientRuntime.Date? = nil,
            error: CleanRoomsClientTypes.ProtectedQueryError? = nil,
            id: Swift.String? = nil,
            membershipArn: Swift.String? = nil,
            membershipId: Swift.String? = nil,
            result: CleanRoomsClientTypes.ProtectedQueryResult? = nil,
            resultConfiguration: CleanRoomsClientTypes.ProtectedQueryResultConfiguration? = nil,
            sqlParameters: CleanRoomsClientTypes.ProtectedQuerySQLParameters? = nil,
            statistics: CleanRoomsClientTypes.ProtectedQueryStatistics? = nil,
            status: CleanRoomsClientTypes.ProtectedQueryStatus? = nil
        )
        {
            self.createTime = createTime
            self.error = error
            self.id = id
            self.membershipArn = membershipArn
            self.membershipId = membershipId
            self.result = result
            self.resultConfiguration = resultConfiguration
            self.sqlParameters = sqlParameters
            self.statistics = statistics
            self.status = status
        }
    }

}

extension CleanRoomsClientTypes.ProtectedQueryError: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case code
        case message
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let code = self.code {
            try encodeContainer.encode(code, forKey: .code)
        }
        if let message = self.message {
            try encodeContainer.encode(message, forKey: .message)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
        let codeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .code)
        code = codeDecoded
    }
}

extension CleanRoomsClientTypes {
    /// Details of errors thrown by the protected query.
    public struct ProtectedQueryError: Swift.Equatable {
        /// An error code for the error.
        /// This member is required.
        public var code: Swift.String?
        /// A description of why the query failed.
        /// This member is required.
        public var message: Swift.String?

        public init (
            code: Swift.String? = nil,
            message: Swift.String? = nil
        )
        {
            self.code = code
            self.message = message
        }
    }

}

extension CleanRoomsClientTypes.ProtectedQueryOutput: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case s3
        case sdkUnknown
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        switch self {
            case let .s3(s3):
                try container.encode(s3, forKey: .s3)
            case let .sdkUnknown(sdkUnknown):
                try container.encode(sdkUnknown, forKey: .sdkUnknown)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let values = try decoder.container(keyedBy: CodingKeys.self)
        let s3Decoded = try values.decodeIfPresent(CleanRoomsClientTypes.ProtectedQueryS3Output.self, forKey: .s3)
        if let s3 = s3Decoded {
            self = .s3(s3)
            return
        }
        self = .sdkUnknown("")
    }
}

extension CleanRoomsClientTypes {
    /// Contains details about the protected query output.
    public enum ProtectedQueryOutput: Swift.Equatable {
        /// If present, the output for a protected query with an `S3` output type.
        case s3(CleanRoomsClientTypes.ProtectedQueryS3Output)
        case sdkUnknown(Swift.String)
    }

}

extension CleanRoomsClientTypes.ProtectedQueryOutputConfiguration: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case s3
        case sdkUnknown
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        switch self {
            case let .s3(s3):
                try container.encode(s3, forKey: .s3)
            case let .sdkUnknown(sdkUnknown):
                try container.encode(sdkUnknown, forKey: .sdkUnknown)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let values = try decoder.container(keyedBy: CodingKeys.self)
        let s3Decoded = try values.decodeIfPresent(CleanRoomsClientTypes.ProtectedQueryS3OutputConfiguration.self, forKey: .s3)
        if let s3 = s3Decoded {
            self = .s3(s3)
            return
        }
        self = .sdkUnknown("")
    }
}

extension CleanRoomsClientTypes {
    /// Contains configuration details for protected query output.
    public enum ProtectedQueryOutputConfiguration: Swift.Equatable {
        /// Required configuration for a protected query with an `S3` output type.
        case s3(CleanRoomsClientTypes.ProtectedQueryS3OutputConfiguration)
        case sdkUnknown(Swift.String)
    }

}

extension CleanRoomsClientTypes.ProtectedQueryResult: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case output
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let output = self.output {
            try encodeContainer.encode(output, forKey: .output)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let outputDecoded = try containerValues.decodeIfPresent(CleanRoomsClientTypes.ProtectedQueryOutput.self, forKey: .output)
        output = outputDecoded
    }
}

extension CleanRoomsClientTypes {
    /// Details about the query results.
    public struct ProtectedQueryResult: Swift.Equatable {
        /// The output of the protected query.
        /// This member is required.
        public var output: CleanRoomsClientTypes.ProtectedQueryOutput?

        public init (
            output: CleanRoomsClientTypes.ProtectedQueryOutput? = nil
        )
        {
            self.output = output
        }
    }

}

extension CleanRoomsClientTypes.ProtectedQueryResultConfiguration: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case outputConfiguration
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let outputConfiguration = self.outputConfiguration {
            try encodeContainer.encode(outputConfiguration, forKey: .outputConfiguration)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let outputConfigurationDecoded = try containerValues.decodeIfPresent(CleanRoomsClientTypes.ProtectedQueryOutputConfiguration.self, forKey: .outputConfiguration)
        outputConfiguration = outputConfigurationDecoded
    }
}

extension CleanRoomsClientTypes {
    /// Contains configurations for protected query results.
    public struct ProtectedQueryResultConfiguration: Swift.Equatable {
        /// Configuration for protected query results.
        /// This member is required.
        public var outputConfiguration: CleanRoomsClientTypes.ProtectedQueryOutputConfiguration?

        public init (
            outputConfiguration: CleanRoomsClientTypes.ProtectedQueryOutputConfiguration? = nil
        )
        {
            self.outputConfiguration = outputConfiguration
        }
    }

}

extension CleanRoomsClientTypes.ProtectedQueryS3Output: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case location
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let location = self.location {
            try encodeContainer.encode(location, forKey: .location)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let locationDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .location)
        location = locationDecoded
    }
}

extension CleanRoomsClientTypes {
    /// Contains output information for protected queries with an S3 output type.
    public struct ProtectedQueryS3Output: Swift.Equatable {
        /// The S3 location of the result.
        /// This member is required.
        public var location: Swift.String?

        public init (
            location: Swift.String? = nil
        )
        {
            self.location = location
        }
    }

}

extension CleanRoomsClientTypes.ProtectedQueryS3OutputConfiguration: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case bucket
        case keyPrefix
        case resultFormat
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let bucket = self.bucket {
            try encodeContainer.encode(bucket, forKey: .bucket)
        }
        if let keyPrefix = self.keyPrefix {
            try encodeContainer.encode(keyPrefix, forKey: .keyPrefix)
        }
        if let resultFormat = self.resultFormat {
            try encodeContainer.encode(resultFormat.rawValue, forKey: .resultFormat)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resultFormatDecoded = try containerValues.decodeIfPresent(CleanRoomsClientTypes.ResultFormat.self, forKey: .resultFormat)
        resultFormat = resultFormatDecoded
        let bucketDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .bucket)
        bucket = bucketDecoded
        let keyPrefixDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .keyPrefix)
        keyPrefix = keyPrefixDecoded
    }
}

extension CleanRoomsClientTypes {
    /// Contains the configuration to write the query results to S3.
    public struct ProtectedQueryS3OutputConfiguration: Swift.Equatable {
        /// The S3 bucket to unload the protected query results.
        /// This member is required.
        public var bucket: Swift.String?
        /// The S3 prefix to unload the protected query results.
        public var keyPrefix: Swift.String?
        /// Intended file format of the result.
        /// This member is required.
        public var resultFormat: CleanRoomsClientTypes.ResultFormat?

        public init (
            bucket: Swift.String? = nil,
            keyPrefix: Swift.String? = nil,
            resultFormat: CleanRoomsClientTypes.ResultFormat? = nil
        )
        {
            self.bucket = bucket
            self.keyPrefix = keyPrefix
            self.resultFormat = resultFormat
        }
    }

}

extension CleanRoomsClientTypes.ProtectedQuerySQLParameters: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case queryString
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let queryString = self.queryString {
            try encodeContainer.encode(queryString, forKey: .queryString)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let queryStringDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .queryString)
        queryString = queryStringDecoded
    }
}

extension CleanRoomsClientTypes.ProtectedQuerySQLParameters: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CONTENT_REDACTED"
    }
}

extension CleanRoomsClientTypes {
    /// The parameters for the SQL type Protected Query.
    public struct ProtectedQuerySQLParameters: Swift.Equatable {
        /// The query string to be submitted.
        /// This member is required.
        public var queryString: Swift.String?

        public init (
            queryString: Swift.String? = nil
        )
        {
            self.queryString = queryString
        }
    }

}

extension CleanRoomsClientTypes.ProtectedQueryStatistics: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case totalDurationInMillis
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let totalDurationInMillis = self.totalDurationInMillis {
            try encodeContainer.encode(totalDurationInMillis, forKey: .totalDurationInMillis)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let totalDurationInMillisDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .totalDurationInMillis)
        totalDurationInMillis = totalDurationInMillisDecoded
    }
}

extension CleanRoomsClientTypes {
    /// Contains statistics about the execution of the protected query.
    public struct ProtectedQueryStatistics: Swift.Equatable {
        /// The duration of the Protected Query, from creation until query completion.
        public var totalDurationInMillis: Swift.Int?

        public init (
            totalDurationInMillis: Swift.Int? = nil
        )
        {
            self.totalDurationInMillis = totalDurationInMillis
        }
    }

}

extension CleanRoomsClientTypes {
    public enum ProtectedQueryStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case cancelled
        case cancelling
        case failed
        case started
        case submitted
        case success
        case timedOut
        case sdkUnknown(Swift.String)

        public static var allCases: [ProtectedQueryStatus] {
            return [
                .cancelled,
                .cancelling,
                .failed,
                .started,
                .submitted,
                .success,
                .timedOut,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .cancelled: return "CANCELLED"
            case .cancelling: return "CANCELLING"
            case .failed: return "FAILED"
            case .started: return "STARTED"
            case .submitted: return "SUBMITTED"
            case .success: return "SUCCESS"
            case .timedOut: return "TIMED_OUT"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ProtectedQueryStatus(rawValue: rawValue) ?? ProtectedQueryStatus.sdkUnknown(rawValue)
        }
    }
}

extension CleanRoomsClientTypes.ProtectedQuerySummary: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case createTime
        case id
        case membershipArn
        case membershipId
        case status
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let createTime = self.createTime {
            try encodeContainer.encodeTimestamp(createTime, format: .epochSeconds, forKey: .createTime)
        }
        if let id = self.id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let membershipArn = self.membershipArn {
            try encodeContainer.encode(membershipArn, forKey: .membershipArn)
        }
        if let membershipId = self.membershipId {
            try encodeContainer.encode(membershipId, forKey: .membershipId)
        }
        if let status = self.status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
        let membershipIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .membershipId)
        membershipId = membershipIdDecoded
        let membershipArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .membershipArn)
        membershipArn = membershipArnDecoded
        let createTimeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .createTime)
        createTime = createTimeDecoded
        let statusDecoded = try containerValues.decodeIfPresent(CleanRoomsClientTypes.ProtectedQueryStatus.self, forKey: .status)
        status = statusDecoded
    }
}

extension CleanRoomsClientTypes {
    /// The protected query summary for the objects listed by the request.
    public struct ProtectedQuerySummary: Swift.Equatable {
        /// The time the protected query was created.
        /// This member is required.
        public var createTime: ClientRuntime.Date?
        /// The unique ID of the protected query.
        /// This member is required.
        public var id: Swift.String?
        /// The unique ARN for the membership that initiated the protected query.
        /// This member is required.
        public var membershipArn: Swift.String?
        /// The unique ID for the membership that initiated the protected query.
        /// This member is required.
        public var membershipId: Swift.String?
        /// The status of the protected query. Value values are `SUBMITTED`, `STARTED`, `CANCELLED`, `CANCELLING`, `FAILED`, `SUCCESS`, `TIMED_OUT`.
        /// This member is required.
        public var status: CleanRoomsClientTypes.ProtectedQueryStatus?

        public init (
            createTime: ClientRuntime.Date? = nil,
            id: Swift.String? = nil,
            membershipArn: Swift.String? = nil,
            membershipId: Swift.String? = nil,
            status: CleanRoomsClientTypes.ProtectedQueryStatus? = nil
        )
        {
            self.createTime = createTime
            self.id = id
            self.membershipArn = membershipArn
            self.membershipId = membershipId
            self.status = status
        }
    }

}

extension CleanRoomsClientTypes {
    public enum ProtectedQueryType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case sql
        case sdkUnknown(Swift.String)

        public static var allCases: [ProtectedQueryType] {
            return [
                .sql,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .sql: return "SQL"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ProtectedQueryType(rawValue: rawValue) ?? ProtectedQueryType.sdkUnknown(rawValue)
        }
    }
}

extension ResourceNotFoundException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ResourceNotFoundExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
            self.resourceId = output.resourceId
            self.resourceType = output.resourceType
        } else {
            self.message = nil
            self.resourceId = nil
            self.resourceType = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// Request references a resource which does not exist.
public struct ResourceNotFoundException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// This member is required.
    public var message: Swift.String?
    /// The Id of the missing resource.
    /// This member is required.
    public var resourceId: Swift.String?
    /// The type of the missing resource.
    /// This member is required.
    public var resourceType: CleanRoomsClientTypes.ResourceType?

    public init (
        message: Swift.String? = nil,
        resourceId: Swift.String? = nil,
        resourceType: CleanRoomsClientTypes.ResourceType? = nil
    )
    {
        self.message = message
        self.resourceId = resourceId
        self.resourceType = resourceType
    }
}

struct ResourceNotFoundExceptionBody: Swift.Equatable {
    let message: Swift.String?
    let resourceId: Swift.String?
    let resourceType: CleanRoomsClientTypes.ResourceType?
}

extension ResourceNotFoundExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
        case resourceId
        case resourceType
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
        let resourceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceId)
        resourceId = resourceIdDecoded
        let resourceTypeDecoded = try containerValues.decodeIfPresent(CleanRoomsClientTypes.ResourceType.self, forKey: .resourceType)
        resourceType = resourceTypeDecoded
    }
}

extension CleanRoomsClientTypes {
    public enum ResourceType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case collaboration
        case configuredTable
        case configuredTableAssociation
        case membership
        case sdkUnknown(Swift.String)

        public static var allCases: [ResourceType] {
            return [
                .collaboration,
                .configuredTable,
                .configuredTableAssociation,
                .membership,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .collaboration: return "COLLABORATION"
            case .configuredTable: return "CONFIGURED_TABLE"
            case .configuredTableAssociation: return "CONFIGURED_TABLE_ASSOCIATION"
            case .membership: return "MEMBERSHIP"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ResourceType(rawValue: rawValue) ?? ResourceType.sdkUnknown(rawValue)
        }
    }
}

extension CleanRoomsClientTypes {
    public enum ResultFormat: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case csv
        case parquet
        case sdkUnknown(Swift.String)

        public static var allCases: [ResultFormat] {
            return [
                .csv,
                .parquet,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .csv: return "CSV"
            case .parquet: return "PARQUET"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ResultFormat(rawValue: rawValue) ?? ResultFormat.sdkUnknown(rawValue)
        }
    }
}

extension CleanRoomsClientTypes {
    public enum ScalarFunctions: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case abs
        case cast
        case ceiling
        case coalesce
        case floor
        case ln
        case log
        case lower
        case round
        case rtrim
        case sqrt
        case trunc
        case upper
        case sdkUnknown(Swift.String)

        public static var allCases: [ScalarFunctions] {
            return [
                .abs,
                .cast,
                .ceiling,
                .coalesce,
                .floor,
                .ln,
                .log,
                .lower,
                .round,
                .rtrim,
                .sqrt,
                .trunc,
                .upper,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .abs: return "ABS"
            case .cast: return "CAST"
            case .ceiling: return "CEILING"
            case .coalesce: return "COALESCE"
            case .floor: return "FLOOR"
            case .ln: return "LN"
            case .log: return "LOG"
            case .lower: return "LOWER"
            case .round: return "ROUND"
            case .rtrim: return "RTRIM"
            case .sqrt: return "SQRT"
            case .trunc: return "TRUNC"
            case .upper: return "UPPER"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ScalarFunctions(rawValue: rawValue) ?? ScalarFunctions.sdkUnknown(rawValue)
        }
    }
}

extension CleanRoomsClientTypes.Schema: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case analysisMethod
        case analysisRuleTypes
        case collaborationArn
        case collaborationId
        case columns
        case createTime
        case creatorAccountId
        case description
        case name
        case partitionKeys
        case type
        case updateTime
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let analysisMethod = self.analysisMethod {
            try encodeContainer.encode(analysisMethod.rawValue, forKey: .analysisMethod)
        }
        if let analysisRuleTypes = analysisRuleTypes {
            var analysisRuleTypesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .analysisRuleTypes)
            for analysisruletype0 in analysisRuleTypes {
                try analysisRuleTypesContainer.encode(analysisruletype0.rawValue)
            }
        }
        if let collaborationArn = self.collaborationArn {
            try encodeContainer.encode(collaborationArn, forKey: .collaborationArn)
        }
        if let collaborationId = self.collaborationId {
            try encodeContainer.encode(collaborationId, forKey: .collaborationId)
        }
        if let columns = columns {
            var columnsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .columns)
            for column0 in columns {
                try columnsContainer.encode(column0)
            }
        }
        if let createTime = self.createTime {
            try encodeContainer.encodeTimestamp(createTime, format: .epochSeconds, forKey: .createTime)
        }
        if let creatorAccountId = self.creatorAccountId {
            try encodeContainer.encode(creatorAccountId, forKey: .creatorAccountId)
        }
        if let description = self.description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let partitionKeys = partitionKeys {
            var partitionKeysContainer = encodeContainer.nestedUnkeyedContainer(forKey: .partitionKeys)
            for column0 in partitionKeys {
                try partitionKeysContainer.encode(column0)
            }
        }
        if let type = self.type {
            try encodeContainer.encode(type.rawValue, forKey: .type)
        }
        if let updateTime = self.updateTime {
            try encodeContainer.encodeTimestamp(updateTime, format: .epochSeconds, forKey: .updateTime)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let columnsContainer = try containerValues.decodeIfPresent([CleanRoomsClientTypes.Column?].self, forKey: .columns)
        var columnsDecoded0:[CleanRoomsClientTypes.Column]? = nil
        if let columnsContainer = columnsContainer {
            columnsDecoded0 = [CleanRoomsClientTypes.Column]()
            for structure0 in columnsContainer {
                if let structure0 = structure0 {
                    columnsDecoded0?.append(structure0)
                }
            }
        }
        columns = columnsDecoded0
        let partitionKeysContainer = try containerValues.decodeIfPresent([CleanRoomsClientTypes.Column?].self, forKey: .partitionKeys)
        var partitionKeysDecoded0:[CleanRoomsClientTypes.Column]? = nil
        if let partitionKeysContainer = partitionKeysContainer {
            partitionKeysDecoded0 = [CleanRoomsClientTypes.Column]()
            for structure0 in partitionKeysContainer {
                if let structure0 = structure0 {
                    partitionKeysDecoded0?.append(structure0)
                }
            }
        }
        partitionKeys = partitionKeysDecoded0
        let analysisRuleTypesContainer = try containerValues.decodeIfPresent([CleanRoomsClientTypes.AnalysisRuleType?].self, forKey: .analysisRuleTypes)
        var analysisRuleTypesDecoded0:[CleanRoomsClientTypes.AnalysisRuleType]? = nil
        if let analysisRuleTypesContainer = analysisRuleTypesContainer {
            analysisRuleTypesDecoded0 = [CleanRoomsClientTypes.AnalysisRuleType]()
            for enum0 in analysisRuleTypesContainer {
                if let enum0 = enum0 {
                    analysisRuleTypesDecoded0?.append(enum0)
                }
            }
        }
        analysisRuleTypes = analysisRuleTypesDecoded0
        let analysisMethodDecoded = try containerValues.decodeIfPresent(CleanRoomsClientTypes.AnalysisMethod.self, forKey: .analysisMethod)
        analysisMethod = analysisMethodDecoded
        let creatorAccountIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .creatorAccountId)
        creatorAccountId = creatorAccountIdDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let collaborationIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .collaborationId)
        collaborationId = collaborationIdDecoded
        let collaborationArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .collaborationArn)
        collaborationArn = collaborationArnDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let createTimeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .createTime)
        createTime = createTimeDecoded
        let updateTimeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .updateTime)
        updateTime = updateTimeDecoded
        let typeDecoded = try containerValues.decodeIfPresent(CleanRoomsClientTypes.SchemaType.self, forKey: .type)
        type = typeDecoded
    }
}

extension CleanRoomsClientTypes {
    /// A schema is a relation within a collaboration.
    public struct Schema: Swift.Equatable {
        /// The analysis method for the schema. The only valid value is currently DIRECT_QUERY.
        public var analysisMethod: CleanRoomsClientTypes.AnalysisMethod?
        /// The analysis rule types associated with the schema. Valued values are LIST and AGGREGATION. Currently, only one entry is present.
        /// This member is required.
        public var analysisRuleTypes: [CleanRoomsClientTypes.AnalysisRuleType]?
        /// The unique ARN for the collaboration that the schema belongs to.
        /// This member is required.
        public var collaborationArn: Swift.String?
        /// The unique ID for the collaboration that the schema belongs to.
        /// This member is required.
        public var collaborationId: Swift.String?
        /// The columns for the relation this schema represents.
        /// This member is required.
        public var columns: [CleanRoomsClientTypes.Column]?
        /// The time the schema was created.
        /// This member is required.
        public var createTime: ClientRuntime.Date?
        /// The unique account ID for the AWS account that owns the schema.
        /// This member is required.
        public var creatorAccountId: Swift.String?
        /// A description for the schema.
        /// This member is required.
        public var description: Swift.String?
        /// A name for the schema. The schema relation is referred to by this name when queried by a protected query.
        /// This member is required.
        public var name: Swift.String?
        /// The partition keys for the data set underlying this schema.
        /// This member is required.
        public var partitionKeys: [CleanRoomsClientTypes.Column]?
        /// The type of schema. The only valid value is currently `TABLE`.
        /// This member is required.
        public var type: CleanRoomsClientTypes.SchemaType?
        /// The time the schema was last updated.
        /// This member is required.
        public var updateTime: ClientRuntime.Date?

        public init (
            analysisMethod: CleanRoomsClientTypes.AnalysisMethod? = nil,
            analysisRuleTypes: [CleanRoomsClientTypes.AnalysisRuleType]? = nil,
            collaborationArn: Swift.String? = nil,
            collaborationId: Swift.String? = nil,
            columns: [CleanRoomsClientTypes.Column]? = nil,
            createTime: ClientRuntime.Date? = nil,
            creatorAccountId: Swift.String? = nil,
            description: Swift.String? = nil,
            name: Swift.String? = nil,
            partitionKeys: [CleanRoomsClientTypes.Column]? = nil,
            type: CleanRoomsClientTypes.SchemaType? = nil,
            updateTime: ClientRuntime.Date? = nil
        )
        {
            self.analysisMethod = analysisMethod
            self.analysisRuleTypes = analysisRuleTypes
            self.collaborationArn = collaborationArn
            self.collaborationId = collaborationId
            self.columns = columns
            self.createTime = createTime
            self.creatorAccountId = creatorAccountId
            self.description = description
            self.name = name
            self.partitionKeys = partitionKeys
            self.type = type
            self.updateTime = updateTime
        }
    }

}

extension CleanRoomsClientTypes.SchemaSummary: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case analysisMethod
        case analysisRuleTypes
        case collaborationArn
        case collaborationId
        case createTime
        case creatorAccountId
        case name
        case type
        case updateTime
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let analysisMethod = self.analysisMethod {
            try encodeContainer.encode(analysisMethod.rawValue, forKey: .analysisMethod)
        }
        if let analysisRuleTypes = analysisRuleTypes {
            var analysisRuleTypesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .analysisRuleTypes)
            for analysisruletype0 in analysisRuleTypes {
                try analysisRuleTypesContainer.encode(analysisruletype0.rawValue)
            }
        }
        if let collaborationArn = self.collaborationArn {
            try encodeContainer.encode(collaborationArn, forKey: .collaborationArn)
        }
        if let collaborationId = self.collaborationId {
            try encodeContainer.encode(collaborationId, forKey: .collaborationId)
        }
        if let createTime = self.createTime {
            try encodeContainer.encodeTimestamp(createTime, format: .epochSeconds, forKey: .createTime)
        }
        if let creatorAccountId = self.creatorAccountId {
            try encodeContainer.encode(creatorAccountId, forKey: .creatorAccountId)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let type = self.type {
            try encodeContainer.encode(type.rawValue, forKey: .type)
        }
        if let updateTime = self.updateTime {
            try encodeContainer.encodeTimestamp(updateTime, format: .epochSeconds, forKey: .updateTime)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let typeDecoded = try containerValues.decodeIfPresent(CleanRoomsClientTypes.SchemaType.self, forKey: .type)
        type = typeDecoded
        let creatorAccountIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .creatorAccountId)
        creatorAccountId = creatorAccountIdDecoded
        let createTimeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .createTime)
        createTime = createTimeDecoded
        let updateTimeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .updateTime)
        updateTime = updateTimeDecoded
        let collaborationIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .collaborationId)
        collaborationId = collaborationIdDecoded
        let collaborationArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .collaborationArn)
        collaborationArn = collaborationArnDecoded
        let analysisRuleTypesContainer = try containerValues.decodeIfPresent([CleanRoomsClientTypes.AnalysisRuleType?].self, forKey: .analysisRuleTypes)
        var analysisRuleTypesDecoded0:[CleanRoomsClientTypes.AnalysisRuleType]? = nil
        if let analysisRuleTypesContainer = analysisRuleTypesContainer {
            analysisRuleTypesDecoded0 = [CleanRoomsClientTypes.AnalysisRuleType]()
            for enum0 in analysisRuleTypesContainer {
                if let enum0 = enum0 {
                    analysisRuleTypesDecoded0?.append(enum0)
                }
            }
        }
        analysisRuleTypes = analysisRuleTypesDecoded0
        let analysisMethodDecoded = try containerValues.decodeIfPresent(CleanRoomsClientTypes.AnalysisMethod.self, forKey: .analysisMethod)
        analysisMethod = analysisMethodDecoded
    }
}

extension CleanRoomsClientTypes {
    /// The schema summary for the objects listed by the request.
    public struct SchemaSummary: Swift.Equatable {
        /// The analysis method for the associated schema. The only valid value is currently `DIRECT_QUERY`.
        public var analysisMethod: CleanRoomsClientTypes.AnalysisMethod?
        /// The types of analysis rules that are associated with this schema object.
        /// This member is required.
        public var analysisRuleTypes: [CleanRoomsClientTypes.AnalysisRuleType]?
        /// The unique ARN for the collaboration that the schema belongs to.
        /// This member is required.
        public var collaborationArn: Swift.String?
        /// The unique ID for the collaboration that the schema belongs to.
        /// This member is required.
        public var collaborationId: Swift.String?
        /// The time the schema object was created.
        /// This member is required.
        public var createTime: ClientRuntime.Date?
        /// The unique account ID for the AWS account that owns the schema.
        /// This member is required.
        public var creatorAccountId: Swift.String?
        /// The name for the schema object.
        /// This member is required.
        public var name: Swift.String?
        /// The type of schema object. The only valid schema type is currently `TABLE`.
        /// This member is required.
        public var type: CleanRoomsClientTypes.SchemaType?
        /// The time the schema object was last updated.
        /// This member is required.
        public var updateTime: ClientRuntime.Date?

        public init (
            analysisMethod: CleanRoomsClientTypes.AnalysisMethod? = nil,
            analysisRuleTypes: [CleanRoomsClientTypes.AnalysisRuleType]? = nil,
            collaborationArn: Swift.String? = nil,
            collaborationId: Swift.String? = nil,
            createTime: ClientRuntime.Date? = nil,
            creatorAccountId: Swift.String? = nil,
            name: Swift.String? = nil,
            type: CleanRoomsClientTypes.SchemaType? = nil,
            updateTime: ClientRuntime.Date? = nil
        )
        {
            self.analysisMethod = analysisMethod
            self.analysisRuleTypes = analysisRuleTypes
            self.collaborationArn = collaborationArn
            self.collaborationId = collaborationId
            self.createTime = createTime
            self.creatorAccountId = creatorAccountId
            self.name = name
            self.type = type
            self.updateTime = updateTime
        }
    }

}

extension CleanRoomsClientTypes {
    public enum SchemaType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case table
        case sdkUnknown(Swift.String)

        public static var allCases: [SchemaType] {
            return [
                .table,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .table: return "TABLE"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = SchemaType(rawValue: rawValue) ?? SchemaType.sdkUnknown(rawValue)
        }
    }
}

extension ServiceQuotaExceededException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ServiceQuotaExceededExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
            self.quotaName = output.quotaName
            self.quotaValue = output.quotaValue
        } else {
            self.message = nil
            self.quotaName = nil
            self.quotaValue = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// Request denied because service quota has been exceeded.
public struct ServiceQuotaExceededException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// This member is required.
    public var message: Swift.String?
    /// The name of the quota.
    /// This member is required.
    public var quotaName: Swift.String?
    /// The value of the quota.
    /// This member is required.
    public var quotaValue: Swift.Double?

    public init (
        message: Swift.String? = nil,
        quotaName: Swift.String? = nil,
        quotaValue: Swift.Double? = nil
    )
    {
        self.message = message
        self.quotaName = quotaName
        self.quotaValue = quotaValue
    }
}

struct ServiceQuotaExceededExceptionBody: Swift.Equatable {
    let message: Swift.String?
    let quotaName: Swift.String?
    let quotaValue: Swift.Double?
}

extension ServiceQuotaExceededExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
        case quotaName
        case quotaValue
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
        let quotaNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .quotaName)
        quotaName = quotaNameDecoded
        let quotaValueDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .quotaValue)
        quotaValue = quotaValueDecoded
    }
}

extension StartProtectedQueryInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "StartProtectedQueryInput(membershipIdentifier: \(Swift.String(describing: membershipIdentifier)), resultConfiguration: \(Swift.String(describing: resultConfiguration)), type: \(Swift.String(describing: type)), sqlParameters: \"CONTENT_REDACTED\")"}
}

extension StartProtectedQueryInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case resultConfiguration
        case sqlParameters
        case type
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let resultConfiguration = self.resultConfiguration {
            try encodeContainer.encode(resultConfiguration, forKey: .resultConfiguration)
        }
        if let sqlParameters = self.sqlParameters {
            try encodeContainer.encode(sqlParameters, forKey: .sqlParameters)
        }
        if let type = self.type {
            try encodeContainer.encode(type.rawValue, forKey: .type)
        }
    }
}

extension StartProtectedQueryInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let membershipIdentifier = membershipIdentifier else {
            return nil
        }
        return "/memberships/\(membershipIdentifier.urlPercentEncoding())/protectedQueries"
    }
}

public struct StartProtectedQueryInput: Swift.Equatable {
    /// A unique identifier for the membership to run this query against. Currently accepts a membership ID.
    /// This member is required.
    public var membershipIdentifier: Swift.String?
    /// The details needed to write the query results.
    /// This member is required.
    public var resultConfiguration: CleanRoomsClientTypes.ProtectedQueryResultConfiguration?
    /// The protected SQL query parameters.
    /// This member is required.
    public var sqlParameters: CleanRoomsClientTypes.ProtectedQuerySQLParameters?
    /// The type of the protected query to be started.
    /// This member is required.
    public var type: CleanRoomsClientTypes.ProtectedQueryType?

    public init (
        membershipIdentifier: Swift.String? = nil,
        resultConfiguration: CleanRoomsClientTypes.ProtectedQueryResultConfiguration? = nil,
        sqlParameters: CleanRoomsClientTypes.ProtectedQuerySQLParameters? = nil,
        type: CleanRoomsClientTypes.ProtectedQueryType? = nil
    )
    {
        self.membershipIdentifier = membershipIdentifier
        self.resultConfiguration = resultConfiguration
        self.sqlParameters = sqlParameters
        self.type = type
    }
}

struct StartProtectedQueryInputBody: Swift.Equatable {
    let type: CleanRoomsClientTypes.ProtectedQueryType?
    let sqlParameters: CleanRoomsClientTypes.ProtectedQuerySQLParameters?
    let resultConfiguration: CleanRoomsClientTypes.ProtectedQueryResultConfiguration?
}

extension StartProtectedQueryInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case resultConfiguration
        case sqlParameters
        case type
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let typeDecoded = try containerValues.decodeIfPresent(CleanRoomsClientTypes.ProtectedQueryType.self, forKey: .type)
        type = typeDecoded
        let sqlParametersDecoded = try containerValues.decodeIfPresent(CleanRoomsClientTypes.ProtectedQuerySQLParameters.self, forKey: .sqlParameters)
        sqlParameters = sqlParametersDecoded
        let resultConfigurationDecoded = try containerValues.decodeIfPresent(CleanRoomsClientTypes.ProtectedQueryResultConfiguration.self, forKey: .resultConfiguration)
        resultConfiguration = resultConfigurationDecoded
    }
}

extension StartProtectedQueryOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension StartProtectedQueryOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceQuotaExceededException" : self = .serviceQuotaExceededException(try ServiceQuotaExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum StartProtectedQueryOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case internalServerException(InternalServerException)
    case resourceNotFoundException(ResourceNotFoundException)
    case serviceQuotaExceededException(ServiceQuotaExceededException)
    case throttlingException(ThrottlingException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension StartProtectedQueryOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: StartProtectedQueryOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.protectedQuery = output.protectedQuery
        } else {
            self.protectedQuery = nil
        }
    }
}

public struct StartProtectedQueryOutputResponse: Swift.Equatable {
    /// The protected query.
    /// This member is required.
    public var protectedQuery: CleanRoomsClientTypes.ProtectedQuery?

    public init (
        protectedQuery: CleanRoomsClientTypes.ProtectedQuery? = nil
    )
    {
        self.protectedQuery = protectedQuery
    }
}

struct StartProtectedQueryOutputResponseBody: Swift.Equatable {
    let protectedQuery: CleanRoomsClientTypes.ProtectedQuery?
}

extension StartProtectedQueryOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case protectedQuery
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let protectedQueryDecoded = try containerValues.decodeIfPresent(CleanRoomsClientTypes.ProtectedQuery.self, forKey: .protectedQuery)
        protectedQuery = protectedQueryDecoded
    }
}

extension CleanRoomsClientTypes.TableReference: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case glue
        case sdkUnknown
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        switch self {
            case let .glue(glue):
                try container.encode(glue, forKey: .glue)
            case let .sdkUnknown(sdkUnknown):
                try container.encode(sdkUnknown, forKey: .sdkUnknown)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let values = try decoder.container(keyedBy: CodingKeys.self)
        let glueDecoded = try values.decodeIfPresent(CleanRoomsClientTypes.GlueTableReference.self, forKey: .glue)
        if let glue = glueDecoded {
            self = .glue(glue)
            return
        }
        self = .sdkUnknown("")
    }
}

extension CleanRoomsClientTypes {
    /// A pointer to the data set that underlies this table. Currently, this can only be an AWS Glue table.
    public enum TableReference: Swift.Equatable {
        /// If present, a reference to the AWS Glue table referred to by this table reference.
        case glue(CleanRoomsClientTypes.GlueTableReference)
        case sdkUnknown(Swift.String)
    }

}

extension CleanRoomsClientTypes {
    public enum TargetProtectedQueryStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case cancelled
        case sdkUnknown(Swift.String)

        public static var allCases: [TargetProtectedQueryStatus] {
            return [
                .cancelled,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .cancelled: return "CANCELLED"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = TargetProtectedQueryStatus(rawValue: rawValue) ?? TargetProtectedQueryStatus.sdkUnknown(rawValue)
        }
    }
}

extension ThrottlingException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ThrottlingExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// Request was denied due to request throttling.
public struct ThrottlingException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct ThrottlingExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension ThrottlingExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension UpdateCollaborationInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case description
        case name
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let description = self.description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
    }
}

extension UpdateCollaborationInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let collaborationIdentifier = collaborationIdentifier else {
            return nil
        }
        return "/collaborations/\(collaborationIdentifier.urlPercentEncoding())"
    }
}

public struct UpdateCollaborationInput: Swift.Equatable {
    /// The identifier for the collaboration.
    /// This member is required.
    public var collaborationIdentifier: Swift.String?
    /// A description of the collaboration.
    public var description: Swift.String?
    /// A human-readable identifier provided by the collaboration owner. Display names are not unique.
    public var name: Swift.String?

    public init (
        collaborationIdentifier: Swift.String? = nil,
        description: Swift.String? = nil,
        name: Swift.String? = nil
    )
    {
        self.collaborationIdentifier = collaborationIdentifier
        self.description = description
        self.name = name
    }
}

struct UpdateCollaborationInputBody: Swift.Equatable {
    let name: Swift.String?
    let description: Swift.String?
}

extension UpdateCollaborationInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case description
        case name
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
    }
}

extension UpdateCollaborationOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdateCollaborationOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum UpdateCollaborationOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case internalServerException(InternalServerException)
    case throttlingException(ThrottlingException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateCollaborationOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: UpdateCollaborationOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.collaboration = output.collaboration
        } else {
            self.collaboration = nil
        }
    }
}

public struct UpdateCollaborationOutputResponse: Swift.Equatable {
    /// The entire collaboration that has been updated.
    /// This member is required.
    public var collaboration: CleanRoomsClientTypes.Collaboration?

    public init (
        collaboration: CleanRoomsClientTypes.Collaboration? = nil
    )
    {
        self.collaboration = collaboration
    }
}

struct UpdateCollaborationOutputResponseBody: Swift.Equatable {
    let collaboration: CleanRoomsClientTypes.Collaboration?
}

extension UpdateCollaborationOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case collaboration
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let collaborationDecoded = try containerValues.decodeIfPresent(CleanRoomsClientTypes.Collaboration.self, forKey: .collaboration)
        collaboration = collaborationDecoded
    }
}

extension UpdateConfiguredTableAnalysisRuleInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case analysisRulePolicy
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let analysisRulePolicy = self.analysisRulePolicy {
            try encodeContainer.encode(analysisRulePolicy, forKey: .analysisRulePolicy)
        }
    }
}

extension UpdateConfiguredTableAnalysisRuleInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let configuredTableIdentifier = configuredTableIdentifier else {
            return nil
        }
        guard let analysisRuleType = analysisRuleType else {
            return nil
        }
        return "/configuredTables/\(configuredTableIdentifier.urlPercentEncoding())/analysisRule/\(analysisRuleType.rawValue.urlPercentEncoding())"
    }
}

public struct UpdateConfiguredTableAnalysisRuleInput: Swift.Equatable {
    /// The new analysis rule policy for the configured table analysis rule.
    /// This member is required.
    public var analysisRulePolicy: CleanRoomsClientTypes.ConfiguredTableAnalysisRulePolicy?
    /// The analysis rule type to be updated. Configured table analysis rules are uniquely identified by their configured table identifier and analysis rule type.
    /// This member is required.
    public var analysisRuleType: CleanRoomsClientTypes.ConfiguredTableAnalysisRuleType?
    /// The unique identifier for the configured table that the analysis rule applies to. Currently accepts the configured table ID.
    /// This member is required.
    public var configuredTableIdentifier: Swift.String?

    public init (
        analysisRulePolicy: CleanRoomsClientTypes.ConfiguredTableAnalysisRulePolicy? = nil,
        analysisRuleType: CleanRoomsClientTypes.ConfiguredTableAnalysisRuleType? = nil,
        configuredTableIdentifier: Swift.String? = nil
    )
    {
        self.analysisRulePolicy = analysisRulePolicy
        self.analysisRuleType = analysisRuleType
        self.configuredTableIdentifier = configuredTableIdentifier
    }
}

struct UpdateConfiguredTableAnalysisRuleInputBody: Swift.Equatable {
    let analysisRulePolicy: CleanRoomsClientTypes.ConfiguredTableAnalysisRulePolicy?
}

extension UpdateConfiguredTableAnalysisRuleInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case analysisRulePolicy
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let analysisRulePolicyDecoded = try containerValues.decodeIfPresent(CleanRoomsClientTypes.ConfiguredTableAnalysisRulePolicy.self, forKey: .analysisRulePolicy)
        analysisRulePolicy = analysisRulePolicyDecoded
    }
}

extension UpdateConfiguredTableAnalysisRuleOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdateConfiguredTableAnalysisRuleOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConflictException" : self = .conflictException(try ConflictException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum UpdateConfiguredTableAnalysisRuleOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case conflictException(ConflictException)
    case internalServerException(InternalServerException)
    case resourceNotFoundException(ResourceNotFoundException)
    case throttlingException(ThrottlingException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateConfiguredTableAnalysisRuleOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: UpdateConfiguredTableAnalysisRuleOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.analysisRule = output.analysisRule
        } else {
            self.analysisRule = nil
        }
    }
}

public struct UpdateConfiguredTableAnalysisRuleOutputResponse: Swift.Equatable {
    /// The entire updated analysis rule.
    /// This member is required.
    public var analysisRule: CleanRoomsClientTypes.ConfiguredTableAnalysisRule?

    public init (
        analysisRule: CleanRoomsClientTypes.ConfiguredTableAnalysisRule? = nil
    )
    {
        self.analysisRule = analysisRule
    }
}

struct UpdateConfiguredTableAnalysisRuleOutputResponseBody: Swift.Equatable {
    let analysisRule: CleanRoomsClientTypes.ConfiguredTableAnalysisRule?
}

extension UpdateConfiguredTableAnalysisRuleOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case analysisRule
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let analysisRuleDecoded = try containerValues.decodeIfPresent(CleanRoomsClientTypes.ConfiguredTableAnalysisRule.self, forKey: .analysisRule)
        analysisRule = analysisRuleDecoded
    }
}

extension UpdateConfiguredTableAssociationInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case description
        case roleArn
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let description = self.description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let roleArn = self.roleArn {
            try encodeContainer.encode(roleArn, forKey: .roleArn)
        }
    }
}

extension UpdateConfiguredTableAssociationInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let membershipIdentifier = membershipIdentifier else {
            return nil
        }
        guard let configuredTableAssociationIdentifier = configuredTableAssociationIdentifier else {
            return nil
        }
        return "/memberships/\(membershipIdentifier.urlPercentEncoding())/configuredTableAssociations/\(configuredTableAssociationIdentifier.urlPercentEncoding())"
    }
}

public struct UpdateConfiguredTableAssociationInput: Swift.Equatable {
    /// The unique identifier for the configured table association to update. Currently accepts the configured table association ID.
    /// This member is required.
    public var configuredTableAssociationIdentifier: Swift.String?
    /// A new description for the configured table association.
    public var description: Swift.String?
    /// The unique ID for the membership that the configured table association belongs to.
    /// This member is required.
    public var membershipIdentifier: Swift.String?
    /// The service will assume this role to access catalog metadata and query the table.
    public var roleArn: Swift.String?

    public init (
        configuredTableAssociationIdentifier: Swift.String? = nil,
        description: Swift.String? = nil,
        membershipIdentifier: Swift.String? = nil,
        roleArn: Swift.String? = nil
    )
    {
        self.configuredTableAssociationIdentifier = configuredTableAssociationIdentifier
        self.description = description
        self.membershipIdentifier = membershipIdentifier
        self.roleArn = roleArn
    }
}

struct UpdateConfiguredTableAssociationInputBody: Swift.Equatable {
    let description: Swift.String?
    let roleArn: Swift.String?
}

extension UpdateConfiguredTableAssociationInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case description
        case roleArn
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let roleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .roleArn)
        roleArn = roleArnDecoded
    }
}

extension UpdateConfiguredTableAssociationOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdateConfiguredTableAssociationOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConflictException" : self = .conflictException(try ConflictException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum UpdateConfiguredTableAssociationOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case conflictException(ConflictException)
    case internalServerException(InternalServerException)
    case resourceNotFoundException(ResourceNotFoundException)
    case throttlingException(ThrottlingException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateConfiguredTableAssociationOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: UpdateConfiguredTableAssociationOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.configuredTableAssociation = output.configuredTableAssociation
        } else {
            self.configuredTableAssociation = nil
        }
    }
}

public struct UpdateConfiguredTableAssociationOutputResponse: Swift.Equatable {
    /// The entire updated configured table association.
    /// This member is required.
    public var configuredTableAssociation: CleanRoomsClientTypes.ConfiguredTableAssociation?

    public init (
        configuredTableAssociation: CleanRoomsClientTypes.ConfiguredTableAssociation? = nil
    )
    {
        self.configuredTableAssociation = configuredTableAssociation
    }
}

struct UpdateConfiguredTableAssociationOutputResponseBody: Swift.Equatable {
    let configuredTableAssociation: CleanRoomsClientTypes.ConfiguredTableAssociation?
}

extension UpdateConfiguredTableAssociationOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case configuredTableAssociation
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let configuredTableAssociationDecoded = try containerValues.decodeIfPresent(CleanRoomsClientTypes.ConfiguredTableAssociation.self, forKey: .configuredTableAssociation)
        configuredTableAssociation = configuredTableAssociationDecoded
    }
}

extension UpdateConfiguredTableInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case description
        case name
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let description = self.description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
    }
}

extension UpdateConfiguredTableInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let configuredTableIdentifier = configuredTableIdentifier else {
            return nil
        }
        return "/configuredTables/\(configuredTableIdentifier.urlPercentEncoding())"
    }
}

public struct UpdateConfiguredTableInput: Swift.Equatable {
    /// The identifier for the configured table to update. Currently accepts the configured table ID.
    /// This member is required.
    public var configuredTableIdentifier: Swift.String?
    /// A new description for the configured table.
    public var description: Swift.String?
    /// A new name for the configured table.
    public var name: Swift.String?

    public init (
        configuredTableIdentifier: Swift.String? = nil,
        description: Swift.String? = nil,
        name: Swift.String? = nil
    )
    {
        self.configuredTableIdentifier = configuredTableIdentifier
        self.description = description
        self.name = name
    }
}

struct UpdateConfiguredTableInputBody: Swift.Equatable {
    let name: Swift.String?
    let description: Swift.String?
}

extension UpdateConfiguredTableInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case description
        case name
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
    }
}

extension UpdateConfiguredTableOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdateConfiguredTableOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConflictException" : self = .conflictException(try ConflictException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum UpdateConfiguredTableOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case conflictException(ConflictException)
    case internalServerException(InternalServerException)
    case resourceNotFoundException(ResourceNotFoundException)
    case throttlingException(ThrottlingException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateConfiguredTableOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: UpdateConfiguredTableOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.configuredTable = output.configuredTable
        } else {
            self.configuredTable = nil
        }
    }
}

public struct UpdateConfiguredTableOutputResponse: Swift.Equatable {
    /// The updated configured table.
    /// This member is required.
    public var configuredTable: CleanRoomsClientTypes.ConfiguredTable?

    public init (
        configuredTable: CleanRoomsClientTypes.ConfiguredTable? = nil
    )
    {
        self.configuredTable = configuredTable
    }
}

struct UpdateConfiguredTableOutputResponseBody: Swift.Equatable {
    let configuredTable: CleanRoomsClientTypes.ConfiguredTable?
}

extension UpdateConfiguredTableOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case configuredTable
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let configuredTableDecoded = try containerValues.decodeIfPresent(CleanRoomsClientTypes.ConfiguredTable.self, forKey: .configuredTable)
        configuredTable = configuredTableDecoded
    }
}

extension UpdateMembershipInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case queryLogStatus
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let queryLogStatus = self.queryLogStatus {
            try encodeContainer.encode(queryLogStatus.rawValue, forKey: .queryLogStatus)
        }
    }
}

extension UpdateMembershipInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let membershipIdentifier = membershipIdentifier else {
            return nil
        }
        return "/memberships/\(membershipIdentifier.urlPercentEncoding())"
    }
}

public struct UpdateMembershipInput: Swift.Equatable {
    /// The unique identifier of the membership.
    /// This member is required.
    public var membershipIdentifier: Swift.String?
    /// An indicator as to whether query logging has been enabled or disabled for the collaboration.
    public var queryLogStatus: CleanRoomsClientTypes.MembershipQueryLogStatus?

    public init (
        membershipIdentifier: Swift.String? = nil,
        queryLogStatus: CleanRoomsClientTypes.MembershipQueryLogStatus? = nil
    )
    {
        self.membershipIdentifier = membershipIdentifier
        self.queryLogStatus = queryLogStatus
    }
}

struct UpdateMembershipInputBody: Swift.Equatable {
    let queryLogStatus: CleanRoomsClientTypes.MembershipQueryLogStatus?
}

extension UpdateMembershipInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case queryLogStatus
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let queryLogStatusDecoded = try containerValues.decodeIfPresent(CleanRoomsClientTypes.MembershipQueryLogStatus.self, forKey: .queryLogStatus)
        queryLogStatus = queryLogStatusDecoded
    }
}

extension UpdateMembershipOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdateMembershipOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConflictException" : self = .conflictException(try ConflictException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum UpdateMembershipOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case conflictException(ConflictException)
    case internalServerException(InternalServerException)
    case resourceNotFoundException(ResourceNotFoundException)
    case throttlingException(ThrottlingException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateMembershipOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: UpdateMembershipOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.membership = output.membership
        } else {
            self.membership = nil
        }
    }
}

public struct UpdateMembershipOutputResponse: Swift.Equatable {
    /// The membership object.
    /// This member is required.
    public var membership: CleanRoomsClientTypes.Membership?

    public init (
        membership: CleanRoomsClientTypes.Membership? = nil
    )
    {
        self.membership = membership
    }
}

struct UpdateMembershipOutputResponseBody: Swift.Equatable {
    let membership: CleanRoomsClientTypes.Membership?
}

extension UpdateMembershipOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case membership
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let membershipDecoded = try containerValues.decodeIfPresent(CleanRoomsClientTypes.Membership.self, forKey: .membership)
        membership = membershipDecoded
    }
}

extension UpdateProtectedQueryInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case targetStatus
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let targetStatus = self.targetStatus {
            try encodeContainer.encode(targetStatus.rawValue, forKey: .targetStatus)
        }
    }
}

extension UpdateProtectedQueryInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let membershipIdentifier = membershipIdentifier else {
            return nil
        }
        guard let protectedQueryIdentifier = protectedQueryIdentifier else {
            return nil
        }
        return "/memberships/\(membershipIdentifier.urlPercentEncoding())/protectedQueries/\(protectedQueryIdentifier.urlPercentEncoding())"
    }
}

public struct UpdateProtectedQueryInput: Swift.Equatable {
    /// The identifier for a member of a protected query instance.
    /// This member is required.
    public var membershipIdentifier: Swift.String?
    /// The identifier for a protected query instance.
    /// This member is required.
    public var protectedQueryIdentifier: Swift.String?
    /// The target status of a query. Used to update the execution status of a currently running query.
    /// This member is required.
    public var targetStatus: CleanRoomsClientTypes.TargetProtectedQueryStatus?

    public init (
        membershipIdentifier: Swift.String? = nil,
        protectedQueryIdentifier: Swift.String? = nil,
        targetStatus: CleanRoomsClientTypes.TargetProtectedQueryStatus? = nil
    )
    {
        self.membershipIdentifier = membershipIdentifier
        self.protectedQueryIdentifier = protectedQueryIdentifier
        self.targetStatus = targetStatus
    }
}

struct UpdateProtectedQueryInputBody: Swift.Equatable {
    let targetStatus: CleanRoomsClientTypes.TargetProtectedQueryStatus?
}

extension UpdateProtectedQueryInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case targetStatus
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let targetStatusDecoded = try containerValues.decodeIfPresent(CleanRoomsClientTypes.TargetProtectedQueryStatus.self, forKey: .targetStatus)
        targetStatus = targetStatusDecoded
    }
}

extension UpdateProtectedQueryOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdateProtectedQueryOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConflictException" : self = .conflictException(try ConflictException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum UpdateProtectedQueryOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case conflictException(ConflictException)
    case internalServerException(InternalServerException)
    case resourceNotFoundException(ResourceNotFoundException)
    case throttlingException(ThrottlingException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateProtectedQueryOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: UpdateProtectedQueryOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.protectedQuery = output.protectedQuery
        } else {
            self.protectedQuery = nil
        }
    }
}

public struct UpdateProtectedQueryOutputResponse: Swift.Equatable {
    /// The protected query output.
    /// This member is required.
    public var protectedQuery: CleanRoomsClientTypes.ProtectedQuery?

    public init (
        protectedQuery: CleanRoomsClientTypes.ProtectedQuery? = nil
    )
    {
        self.protectedQuery = protectedQuery
    }
}

struct UpdateProtectedQueryOutputResponseBody: Swift.Equatable {
    let protectedQuery: CleanRoomsClientTypes.ProtectedQuery?
}

extension UpdateProtectedQueryOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case protectedQuery
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let protectedQueryDecoded = try containerValues.decodeIfPresent(CleanRoomsClientTypes.ProtectedQuery.self, forKey: .protectedQuery)
        protectedQuery = protectedQueryDecoded
    }
}

extension ValidationException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ValidationExceptionBody = try responseDecoder.decode(responseBody: data)
            self.fieldList = output.fieldList
            self.message = output.message
            self.reason = output.reason
        } else {
            self.fieldList = nil
            self.message = nil
            self.reason = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The input fails to satisfy the specified constraints.
public struct ValidationException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// Validation errors for specific input parameters.
    public var fieldList: [CleanRoomsClientTypes.ValidationExceptionField]?
    public var message: Swift.String?
    /// A reason code for the exception.
    public var reason: CleanRoomsClientTypes.ValidationExceptionReason?

    public init (
        fieldList: [CleanRoomsClientTypes.ValidationExceptionField]? = nil,
        message: Swift.String? = nil,
        reason: CleanRoomsClientTypes.ValidationExceptionReason? = nil
    )
    {
        self.fieldList = fieldList
        self.message = message
        self.reason = reason
    }
}

struct ValidationExceptionBody: Swift.Equatable {
    let message: Swift.String?
    let reason: CleanRoomsClientTypes.ValidationExceptionReason?
    let fieldList: [CleanRoomsClientTypes.ValidationExceptionField]?
}

extension ValidationExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case fieldList
        case message
        case reason
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
        let reasonDecoded = try containerValues.decodeIfPresent(CleanRoomsClientTypes.ValidationExceptionReason.self, forKey: .reason)
        reason = reasonDecoded
        let fieldListContainer = try containerValues.decodeIfPresent([CleanRoomsClientTypes.ValidationExceptionField?].self, forKey: .fieldList)
        var fieldListDecoded0:[CleanRoomsClientTypes.ValidationExceptionField]? = nil
        if let fieldListContainer = fieldListContainer {
            fieldListDecoded0 = [CleanRoomsClientTypes.ValidationExceptionField]()
            for structure0 in fieldListContainer {
                if let structure0 = structure0 {
                    fieldListDecoded0?.append(structure0)
                }
            }
        }
        fieldList = fieldListDecoded0
    }
}

extension CleanRoomsClientTypes.ValidationExceptionField: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
        case name
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let message = self.message {
            try encodeContainer.encode(message, forKey: .message)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension CleanRoomsClientTypes {
    /// Describes validation errors for specific input parameters.
    public struct ValidationExceptionField: Swift.Equatable {
        /// A message for the input validation error.
        /// This member is required.
        public var message: Swift.String?
        /// The name of the input parameter.
        /// This member is required.
        public var name: Swift.String?

        public init (
            message: Swift.String? = nil,
            name: Swift.String? = nil
        )
        {
            self.message = message
            self.name = name
        }
    }

}

extension CleanRoomsClientTypes {
    public enum ValidationExceptionReason: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case fieldValidationFailed
        case invalidConfiguration
        case sdkUnknown(Swift.String)

        public static var allCases: [ValidationExceptionReason] {
            return [
                .fieldValidationFailed,
                .invalidConfiguration,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .fieldValidationFailed: return "FIELD_VALIDATION_FAILED"
            case .invalidConfiguration: return "INVALID_CONFIGURATION"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ValidationExceptionReason(rawValue: rawValue) ?? ValidationExceptionReason.sdkUnknown(rawValue)
        }
    }
}
