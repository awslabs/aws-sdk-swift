//
// Copyright Amazon.com Inc. or its affiliates.
// All Rights Reserved.
//
// SPDX-License-Identifier: Apache-2.0
//

// Code generated by smithy-swift-codegen. DO NOT EDIT!

@_spi(SmithyReadWrite) import ClientRuntime
import Foundation
import class SmithyHTTPAPI.HTTPResponse
@_spi(SmithyReadWrite) import class SmithyJSON.Reader
@_spi(SmithyReadWrite) import class SmithyJSON.Writer
import enum ClientRuntime.ErrorFault
import enum Smithy.ClientError
import enum SmithyReadWrite.ReaderError
@_spi(SmithyReadWrite) import enum SmithyReadWrite.ReadingClosures
@_spi(SmithyReadWrite) import enum SmithyReadWrite.WritingClosures
@_spi(SmithyTimestamps) import enum SmithyTimestamps.TimestampFormat
import protocol AWSClientRuntime.AWSServiceError
import protocol ClientRuntime.HTTPError
import protocol ClientRuntime.ModeledError
@_spi(SmithyReadWrite) import protocol SmithyReadWrite.SmithyReader
@_spi(SmithyReadWrite) import protocol SmithyReadWrite.SmithyWriter
@_spi(SmithyReadWrite) import struct AWSClientRuntime.RestJSONError
@_spi(UnknownAWSHTTPServiceError) import struct AWSClientRuntime.UnknownAWSHTTPServiceError
import struct Smithy.URIQueryItem

/// The operation failed because the client token input parameter matched one that was used with a previous call to the operation, but at least one of the other input parameters is different from the previous call.
public struct IdempotentParameterMismatchException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// This member is required.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "IdempotentParameterMismatch" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The operation failed because the specified client token isn't valid.
public struct InvalidClientTokenException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// This member is required.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidClientToken" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The operation failed because the specified [Amazon Resource Name (ARN)](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html) has a format that isn't valid.
public struct MalformedArnException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// This member is required.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidArn.Malformed" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The operation failed because the requested operation isn't permitted.
public struct OperationNotPermittedException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// This member is required.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "OperationNotPermitted" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The operation failed because the specified invitation was already accepted.
public struct ResourceShareInvitationAlreadyAcceptedException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// This member is required.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidResourceShareInvitationArn.AlreadyAccepted" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The operation failed because the specified invitation was already rejected.
public struct ResourceShareInvitationAlreadyRejectedException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// This member is required.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidResourceShareInvitationArn.AlreadyRejected" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The operation failed because the specified [Amazon Resource Name (ARN)](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html) for an invitation was not found.
public struct ResourceShareInvitationArnNotFoundException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// This member is required.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidResourceShareInvitationArn.NotFound" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The operation failed because the specified invitation is past its expiration date and time.
public struct ResourceShareInvitationExpiredException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// This member is required.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidResourceShareInvitationArn.Expired" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The operation failed because the service could not respond to the request due to an internal problem. Try again later.
public struct ServerInternalException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// This member is required.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InternalError" }
    public static var fault: ClientRuntime.ErrorFault { .server }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The operation failed because the service isn't available. Try again later.
public struct ServiceUnavailableException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// This member is required.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "Unavailable" }
    public static var fault: ClientRuntime.ErrorFault { .server }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

public struct AcceptResourceShareInvitationInput: Swift.Sendable {
    /// Specifies a unique, case-sensitive identifier that you provide to ensure the idempotency of the request. This lets you safely retry the request without accidentally performing the same operation a second time. Passing the same value to a later call to an operation requires that you also pass the same value for all other parameters. We recommend that you use a [UUID type of value.](https://wikipedia.org/wiki/Universally_unique_identifier). If you don't provide this value, then Amazon Web Services generates a random one for you. If you retry the operation with the same ClientToken, but with different parameters, the retry fails with an IdempotentParameterMismatch error.
    public var clientToken: Swift.String?
    /// The [Amazon Resource Name (ARN)](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html) of the invitation that you want to accept.
    /// This member is required.
    public var resourceShareInvitationArn: Swift.String?

    public init(
        clientToken: Swift.String? = nil,
        resourceShareInvitationArn: Swift.String? = nil
    )
    {
        self.clientToken = clientToken
        self.resourceShareInvitationArn = resourceShareInvitationArn
    }
}

extension RAMClientTypes {

    public enum ResourceShareAssociationType: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case principal
        case resource
        case sdkUnknown(Swift.String)

        public static var allCases: [ResourceShareAssociationType] {
            return [
                .principal,
                .resource
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .principal: return "PRINCIPAL"
            case .resource: return "RESOURCE"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension RAMClientTypes {

    public enum ResourceShareAssociationStatus: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case associated
        case associating
        case disassociated
        case disassociating
        case failed
        case sdkUnknown(Swift.String)

        public static var allCases: [ResourceShareAssociationStatus] {
            return [
                .associated,
                .associating,
                .disassociated,
                .disassociating,
                .failed
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .associated: return "ASSOCIATED"
            case .associating: return "ASSOCIATING"
            case .disassociated: return "DISASSOCIATED"
            case .disassociating: return "DISASSOCIATING"
            case .failed: return "FAILED"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension RAMClientTypes {

    /// Describes an association between a resource share and either a principal or a resource.
    public struct ResourceShareAssociation: Swift.Sendable {
        /// The associated entity. This can be either of the following:
        ///
        /// * For a resource association, this is the [Amazon Resource Name (ARN)](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html) of the resource.
        ///
        /// * For principal associations, this is one of the following:
        ///
        /// * The ID of an Amazon Web Services account
        ///
        /// * The [Amazon Resource Name (ARN)](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html) of an organization in Organizations
        ///
        /// * The ARN of an organizational unit (OU) in Organizations
        ///
        /// * The ARN of an IAM role
        ///
        /// * The ARN of an IAM user
        public var associatedEntity: Swift.String?
        /// The type of entity included in this association.
        public var associationType: RAMClientTypes.ResourceShareAssociationType?
        /// The date and time when the association was created.
        public var creationTime: Foundation.Date?
        /// Indicates whether the principal belongs to the same organization in Organizations as the Amazon Web Services account that owns the resource share.
        public var external: Swift.Bool?
        /// The date and time when the association was last updated.
        public var lastUpdatedTime: Foundation.Date?
        /// The [Amazon Resource Name (ARN)](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html) of the resource share.
        public var resourceShareArn: Swift.String?
        /// The name of the resource share.
        public var resourceShareName: Swift.String?
        /// The current status of the association.
        public var status: RAMClientTypes.ResourceShareAssociationStatus?
        /// A message about the status of the association.
        public var statusMessage: Swift.String?

        public init(
            associatedEntity: Swift.String? = nil,
            associationType: RAMClientTypes.ResourceShareAssociationType? = nil,
            creationTime: Foundation.Date? = nil,
            external: Swift.Bool? = nil,
            lastUpdatedTime: Foundation.Date? = nil,
            resourceShareArn: Swift.String? = nil,
            resourceShareName: Swift.String? = nil,
            status: RAMClientTypes.ResourceShareAssociationStatus? = nil,
            statusMessage: Swift.String? = nil
        )
        {
            self.associatedEntity = associatedEntity
            self.associationType = associationType
            self.creationTime = creationTime
            self.external = external
            self.lastUpdatedTime = lastUpdatedTime
            self.resourceShareArn = resourceShareArn
            self.resourceShareName = resourceShareName
            self.status = status
            self.statusMessage = statusMessage
        }
    }
}

extension RAMClientTypes {

    public enum ResourceShareInvitationStatus: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case accepted
        case expired
        case pending
        case rejected
        case sdkUnknown(Swift.String)

        public static var allCases: [ResourceShareInvitationStatus] {
            return [
                .accepted,
                .expired,
                .pending,
                .rejected
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .accepted: return "ACCEPTED"
            case .expired: return "EXPIRED"
            case .pending: return "PENDING"
            case .rejected: return "REJECTED"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension RAMClientTypes {

    /// Describes an invitation for an Amazon Web Services account to join a resource share.
    public struct ResourceShareInvitation: Swift.Sendable {
        /// The date and time when the invitation was sent.
        public var invitationTimestamp: Foundation.Date?
        /// The ID of the Amazon Web Services account that received the invitation.
        public var receiverAccountId: Swift.String?
        /// The [Amazon Resource Name (ARN)](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html) of the IAM user or role that received the invitation.
        public var receiverArn: Swift.String?
        /// The [Amazon Resource Name (ARN)](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html) of the resource share
        public var resourceShareArn: Swift.String?
        /// To view the resources associated with a pending resource share invitation, use [ListPendingInvitationResources].
        @available(*, deprecated, message: "This member has been deprecated. Use ListPendingInvitationResources.")
        public var resourceShareAssociations: [RAMClientTypes.ResourceShareAssociation]?
        /// The [Amazon Resource Name (ARN)](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html) of the invitation.
        public var resourceShareInvitationArn: Swift.String?
        /// The name of the resource share.
        public var resourceShareName: Swift.String?
        /// The ID of the Amazon Web Services account that sent the invitation.
        public var senderAccountId: Swift.String?
        /// The current status of the invitation.
        public var status: RAMClientTypes.ResourceShareInvitationStatus?

        public init(
            invitationTimestamp: Foundation.Date? = nil,
            receiverAccountId: Swift.String? = nil,
            receiverArn: Swift.String? = nil,
            resourceShareArn: Swift.String? = nil,
            resourceShareAssociations: [RAMClientTypes.ResourceShareAssociation]? = nil,
            resourceShareInvitationArn: Swift.String? = nil,
            resourceShareName: Swift.String? = nil,
            senderAccountId: Swift.String? = nil,
            status: RAMClientTypes.ResourceShareInvitationStatus? = nil
        )
        {
            self.invitationTimestamp = invitationTimestamp
            self.receiverAccountId = receiverAccountId
            self.receiverArn = receiverArn
            self.resourceShareArn = resourceShareArn
            self.resourceShareAssociations = resourceShareAssociations
            self.resourceShareInvitationArn = resourceShareInvitationArn
            self.resourceShareName = resourceShareName
            self.senderAccountId = senderAccountId
            self.status = status
        }
    }
}

public struct AcceptResourceShareInvitationOutput: Swift.Sendable {
    /// The idempotency identifier associated with this request. If you want to repeat the same operation in an idempotent manner then you must include this value in the clientToken request parameter of that later call. All other parameters must also have the same values that you used in the first call.
    public var clientToken: Swift.String?
    /// An object that contains information about the specified invitation.
    public var resourceShareInvitation: RAMClientTypes.ResourceShareInvitation?

    public init(
        clientToken: Swift.String? = nil,
        resourceShareInvitation: RAMClientTypes.ResourceShareInvitation? = nil
    )
    {
        self.clientToken = clientToken
        self.resourceShareInvitation = resourceShareInvitation
    }
}

/// The operation failed because a parameter you specified isn't valid.
public struct InvalidParameterException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// This member is required.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidParameter" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The operation failed because the requested operation isn't valid for the resource share in its current state.
public struct InvalidStateTransitionException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// This member is required.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidStateTransitionException.Unknown" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The operation failed because it would exceed the limit for resource shares for your account. To view the limits for your Amazon Web Services account, see the [RAM page in the Service Quotas console](https://console.aws.amazon.com/servicequotas/home/services/ram/quotas).
public struct ResourceShareLimitExceededException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// This member is required.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ResourceShareLimitExceeded" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The operation failed because it exceeded the rate at which you are allowed to perform this operation. Please try again later.
public struct ThrottlingException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// This member is required.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ThrottlingException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The operation failed because a specified resource couldn't be found.
public struct UnknownResourceException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// This member is required.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidResourceShareArn.NotFound" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

public struct AssociateResourceShareInput: Swift.Sendable {
    /// Specifies a unique, case-sensitive identifier that you provide to ensure the idempotency of the request. This lets you safely retry the request without accidentally performing the same operation a second time. Passing the same value to a later call to an operation requires that you also pass the same value for all other parameters. We recommend that you use a [UUID type of value.](https://wikipedia.org/wiki/Universally_unique_identifier). If you don't provide this value, then Amazon Web Services generates a random one for you. If you retry the operation with the same ClientToken, but with different parameters, the retry fails with an IdempotentParameterMismatch error.
    public var clientToken: Swift.String?
    /// Specifies a list of principals to whom you want to the resource share. This can be null if you want to add only resources. What the principals can do with the resources in the share is determined by the RAM permissions that you associate with the resource share. See [AssociateResourceSharePermission]. You can include the following values:
    ///
    /// * An Amazon Web Services account ID, for example: 123456789012
    ///
    /// * An [Amazon Resource Name (ARN)](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html) of an organization in Organizations, for example: organizations::123456789012:organization/o-exampleorgid
    ///
    /// * An ARN of an organizational unit (OU) in Organizations, for example: organizations::123456789012:ou/o-exampleorgid/ou-examplerootid-exampleouid123
    ///
    /// * An ARN of an IAM role, for example: iam::123456789012:role/rolename
    ///
    /// * An ARN of an IAM user, for example: iam::123456789012user/username
    ///
    ///
    /// Not all resource types can be shared with IAM roles and users. For more information, see [Sharing with IAM roles and users](https://docs.aws.amazon.com/ram/latest/userguide/permissions.html#permissions-rbp-supported-resource-types) in the Resource Access Manager User Guide.
    public var principals: [Swift.String]?
    /// Specifies a list of [Amazon Resource Names (ARNs)](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html) of the resources that you want to share. This can be null if you want to add only principals.
    public var resourceArns: [Swift.String]?
    /// Specifies the [Amazon Resource Name (ARN)](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html) of the resource share that you want to add principals or resources to.
    /// This member is required.
    public var resourceShareArn: Swift.String?
    /// Specifies from which source accounts the service principal has access to the resources in this resource share.
    public var sources: [Swift.String]?

    public init(
        clientToken: Swift.String? = nil,
        principals: [Swift.String]? = nil,
        resourceArns: [Swift.String]? = nil,
        resourceShareArn: Swift.String? = nil,
        sources: [Swift.String]? = nil
    )
    {
        self.clientToken = clientToken
        self.principals = principals
        self.resourceArns = resourceArns
        self.resourceShareArn = resourceShareArn
        self.sources = sources
    }
}

public struct AssociateResourceShareOutput: Swift.Sendable {
    /// The idempotency identifier associated with this request. If you want to repeat the same operation in an idempotent manner then you must include this value in the clientToken request parameter of that later call. All other parameters must also have the same values that you used in the first call.
    public var clientToken: Swift.String?
    /// An array of objects that contain information about the associations.
    public var resourceShareAssociations: [RAMClientTypes.ResourceShareAssociation]?

    public init(
        clientToken: Swift.String? = nil,
        resourceShareAssociations: [RAMClientTypes.ResourceShareAssociation]? = nil
    )
    {
        self.clientToken = clientToken
        self.resourceShareAssociations = resourceShareAssociations
    }
}

public struct AssociateResourceSharePermissionInput: Swift.Sendable {
    /// Specifies a unique, case-sensitive identifier that you provide to ensure the idempotency of the request. This lets you safely retry the request without accidentally performing the same operation a second time. Passing the same value to a later call to an operation requires that you also pass the same value for all other parameters. We recommend that you use a [UUID type of value.](https://wikipedia.org/wiki/Universally_unique_identifier). If you don't provide this value, then Amazon Web Services generates a random one for you. If you retry the operation with the same ClientToken, but with different parameters, the retry fails with an IdempotentParameterMismatch error.
    public var clientToken: Swift.String?
    /// Specifies the [Amazon Resource Name (ARN)](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html) of the RAM permission to associate with the resource share. To find the ARN for a permission, use either the [ListPermissions] operation or go to the [Permissions library](https://console.aws.amazon.com/ram/home#Permissions:) page in the RAM console and then choose the name of the permission. The ARN is displayed on the detail page.
    /// This member is required.
    public var permissionArn: Swift.String?
    /// Specifies the version of the RAM permission to associate with the resource share. You can specify only the version that is currently set as the default version for the permission. If you also set the replace pararameter to true, then this operation updates an outdated version of the permission to the current default version. You don't need to specify this parameter because the default behavior is to use the version that is currently set as the default version for the permission. This parameter is supported for backwards compatibility.
    public var permissionVersion: Swift.Int?
    /// Specifies whether the specified permission should replace the existing permission associated with the resource share. Use true to replace the current permissions. Use false to add the permission to a resource share that currently doesn't have a permission. The default value is false. A resource share can have only one permission per resource type. If a resource share already has a permission for the specified resource type and you don't set replace to true then the operation returns an error. This helps prevent accidental overwriting of a permission.
    public var replace: Swift.Bool?
    /// Specifies the [Amazon Resource Name (ARN)](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html) of the resource share to which you want to add or replace permissions.
    /// This member is required.
    public var resourceShareArn: Swift.String?

    public init(
        clientToken: Swift.String? = nil,
        permissionArn: Swift.String? = nil,
        permissionVersion: Swift.Int? = nil,
        replace: Swift.Bool? = nil,
        resourceShareArn: Swift.String? = nil
    )
    {
        self.clientToken = clientToken
        self.permissionArn = permissionArn
        self.permissionVersion = permissionVersion
        self.replace = replace
        self.resourceShareArn = resourceShareArn
    }
}

public struct AssociateResourceSharePermissionOutput: Swift.Sendable {
    /// The idempotency identifier associated with this request. If you want to repeat the same operation in an idempotent manner then you must include this value in the clientToken request parameter of that later call. All other parameters must also have the same values that you used in the first call.
    public var clientToken: Swift.String?
    /// A return value of true indicates that the request succeeded. A value of false indicates that the request failed.
    public var returnValue: Swift.Bool?

    public init(
        clientToken: Swift.String? = nil,
        returnValue: Swift.Bool? = nil
    )
    {
        self.clientToken = clientToken
        self.returnValue = returnValue
    }
}

/// The operation failed because a policy you specified isn't valid.
public struct InvalidPolicyException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// This member is required.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidPolicy" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The operation failed because the policy template that you provided isn't valid.
public struct MalformedPolicyTemplateException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// This member is required.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "MalformedPolicyTemplateException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The operation failed because a permission with the specified name already exists in the requested Amazon Web Services Region. Choose a different name.
public struct PermissionAlreadyExistsException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// This member is required.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "PermissionAlreadyExistsException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The operation failed because it would exceed the maximum number of permissions you can create in each Amazon Web Services Region. To view the limits for your Amazon Web Services account, see the [RAM page in the Service Quotas console](https://console.aws.amazon.com/servicequotas/home/services/ram/quotas).
public struct PermissionLimitExceededException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// This member is required.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "PermissionLimitExceededException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension RAMClientTypes {

    /// A structure containing a tag. A tag is metadata that you can attach to your resources to help organize and categorize them. You can also use them to help you secure your resources. For more information, see [Controlling access to Amazon Web Services resources using tags](https://docs.aws.amazon.com/IAM/latest/UserGuide/access_tags.html). For more information about tags, see [Tagging Amazon Web Services resources](https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html) in the Amazon Web Services General Reference Guide.
    public struct Tag: Swift.Sendable {
        /// The key, or name, attached to the tag. Every tag must have a key. Key names are case sensitive.
        public var key: Swift.String?
        /// The string value attached to the tag. The value can be an empty string. Key values are case sensitive.
        public var value: Swift.String?

        public init(
            key: Swift.String? = nil,
            value: Swift.String? = nil
        )
        {
            self.key = key
            self.value = value
        }
    }
}

public struct CreatePermissionInput: Swift.Sendable {
    /// Specifies a unique, case-sensitive identifier that you provide to ensure the idempotency of the request. This lets you safely retry the request without accidentally performing the same operation a second time. Passing the same value to a later call to an operation requires that you also pass the same value for all other parameters. We recommend that you use a [UUID type of value.](https://wikipedia.org/wiki/Universally_unique_identifier). If you don't provide this value, then Amazon Web Services generates a random one for you. If you retry the operation with the same ClientToken, but with different parameters, the retry fails with an IdempotentParameterMismatch error.
    public var clientToken: Swift.String?
    /// Specifies the name of the customer managed permission. The name must be unique within the Amazon Web Services Region.
    /// This member is required.
    public var name: Swift.String?
    /// A string in JSON format string that contains the following elements of a resource-based policy:
    ///
    /// * Effect: must be set to ALLOW.
    ///
    /// * Action: specifies the actions that are allowed by this customer managed permission. The list must contain only actions that are supported by the specified resource type. For a list of all actions supported by each resource type, see [Actions, resources, and condition keys for Amazon Web Services services](https://docs.aws.amazon.com/service-authorization/latest/reference/reference_policies_actions-resources-contextkeys.html) in the Identity and Access Management User Guide.
    ///
    /// * Condition: (optional) specifies conditional parameters that must evaluate to true when a user attempts an action for that action to be allowed. For more information about the Condition element, see [IAM policies: Condition element](https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_elements_condition.html) in the Identity and Access Management User Guide.
    ///
    ///
    /// This template can't include either the Resource or Principal elements. Those are both filled in by RAM when it instantiates the resource-based policy on each resource shared using this managed permission. The Resource comes from the ARN of the specific resource that you are sharing. The Principal comes from the list of identities added to the resource share.
    /// This member is required.
    public var policyTemplate: Swift.String?
    /// Specifies the name of the resource type that this customer managed permission applies to. The format is  :  and is not case sensitive. For example, to specify an Amazon EC2 Subnet, you can use the string ec2:subnet. To see the list of valid values for this parameter, query the [ListResourceTypes] operation.
    /// This member is required.
    public var resourceType: Swift.String?
    /// Specifies a list of one or more tag key and value pairs to attach to the permission.
    public var tags: [RAMClientTypes.Tag]?

    public init(
        clientToken: Swift.String? = nil,
        name: Swift.String? = nil,
        policyTemplate: Swift.String? = nil,
        resourceType: Swift.String? = nil,
        tags: [RAMClientTypes.Tag]? = nil
    )
    {
        self.clientToken = clientToken
        self.name = name
        self.policyTemplate = policyTemplate
        self.resourceType = resourceType
        self.tags = tags
    }
}

extension RAMClientTypes {

    public enum PermissionFeatureSet: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case createdFromPolicy
        case promotingToStandard
        case standard
        case sdkUnknown(Swift.String)

        public static var allCases: [PermissionFeatureSet] {
            return [
                .createdFromPolicy,
                .promotingToStandard,
                .standard
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .createdFromPolicy: return "CREATED_FROM_POLICY"
            case .promotingToStandard: return "PROMOTING_TO_STANDARD"
            case .standard: return "STANDARD"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension RAMClientTypes {

    public enum PermissionType: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case awsManaged
        case customerManaged
        case sdkUnknown(Swift.String)

        public static var allCases: [PermissionType] {
            return [
                .awsManaged,
                .customerManaged
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .awsManaged: return "AWS_MANAGED"
            case .customerManaged: return "CUSTOMER_MANAGED"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension RAMClientTypes {

    /// Information about an RAM permission.
    public struct ResourceSharePermissionSummary: Swift.Sendable {
        /// The [Amazon Resource Name (ARN)](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html) of the permission you want information about.
        public var arn: Swift.String?
        /// The date and time when the permission was created.
        public var creationTime: Foundation.Date?
        /// Specifies whether the version of the managed permission used by this resource share is the default version for this managed permission.
        public var defaultVersion: Swift.Bool?
        /// Indicates what features are available for this resource share. This parameter can have one of the following values:
        ///
        /// * STANDARD – A resource share that supports all functionality. These resource shares are visible to all principals you share the resource share with. You can modify these resource shares in RAM using the console or APIs. This resource share might have been created by RAM, or it might have been CREATED_FROM_POLICY and then promoted.
        ///
        /// * CREATED_FROM_POLICY – The customer manually shared a resource by attaching a resource-based policy. That policy did not match any existing managed permissions, so RAM created this customer managed permission automatically on the customer's behalf based on the attached policy document. This type of resource share is visible only to the Amazon Web Services account that created it. You can't modify it in RAM unless you promote it. For more information, see [PromoteResourceShareCreatedFromPolicy].
        ///
        /// * PROMOTING_TO_STANDARD – This resource share was originally CREATED_FROM_POLICY, but the customer ran the [PromoteResourceShareCreatedFromPolicy] and that operation is still in progress. This value changes to STANDARD when complete.
        public var featureSet: RAMClientTypes.PermissionFeatureSet?
        /// Specifies whether the managed permission associated with this resource share is the default managed permission for all resources of this resource type.
        public var isResourceTypeDefault: Swift.Bool?
        /// The date and time when the permission was last updated.
        public var lastUpdatedTime: Foundation.Date?
        /// The name of this managed permission.
        public var name: Swift.String?
        /// The type of managed permission. This can be one of the following values:
        ///
        /// * AWS_MANAGED – Amazon Web Services created and manages this managed permission. You can associate it with your resource shares, but you can't modify it.
        ///
        /// * CUSTOMER_MANAGED – You, or another principal in your account created this managed permission. You can associate it with your resource shares and create new versions that have different permissions.
        public var permissionType: RAMClientTypes.PermissionType?
        /// The type of resource to which this permission applies. This takes the form of: service-code:resource-code, and is case-insensitive. For example, an Amazon EC2 Subnet would be represented by the string ec2:subnet.
        public var resourceType: Swift.String?
        /// The current status of the permission.
        public var status: Swift.String?
        /// A list of the tag key value pairs currently attached to the permission.
        public var tags: [RAMClientTypes.Tag]?
        /// The version of the permission associated with this resource share.
        public var version: Swift.String?

        public init(
            arn: Swift.String? = nil,
            creationTime: Foundation.Date? = nil,
            defaultVersion: Swift.Bool? = nil,
            featureSet: RAMClientTypes.PermissionFeatureSet? = nil,
            isResourceTypeDefault: Swift.Bool? = nil,
            lastUpdatedTime: Foundation.Date? = nil,
            name: Swift.String? = nil,
            permissionType: RAMClientTypes.PermissionType? = nil,
            resourceType: Swift.String? = nil,
            status: Swift.String? = nil,
            tags: [RAMClientTypes.Tag]? = nil,
            version: Swift.String? = nil
        )
        {
            self.arn = arn
            self.creationTime = creationTime
            self.defaultVersion = defaultVersion
            self.featureSet = featureSet
            self.isResourceTypeDefault = isResourceTypeDefault
            self.lastUpdatedTime = lastUpdatedTime
            self.name = name
            self.permissionType = permissionType
            self.resourceType = resourceType
            self.status = status
            self.tags = tags
            self.version = version
        }
    }
}

public struct CreatePermissionOutput: Swift.Sendable {
    /// The idempotency identifier associated with this request. If you want to repeat the same operation in an idempotent manner then you must include this value in the clientToken request parameter of that later call. All other parameters must also have the same values that you used in the first call.
    public var clientToken: Swift.String?
    /// A structure with information about this customer managed permission.
    public var permission: RAMClientTypes.ResourceSharePermissionSummary?

    public init(
        clientToken: Swift.String? = nil,
        permission: RAMClientTypes.ResourceSharePermissionSummary? = nil
    )
    {
        self.clientToken = clientToken
        self.permission = permission
    }
}

/// The operation failed because it would exceed the limit for the number of versions you can have for a permission. To view the limits for your Amazon Web Services account, see the [RAM page in the Service Quotas console](https://console.aws.amazon.com/servicequotas/home/services/ram/quotas).
public struct PermissionVersionsLimitExceededException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// This member is required.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "PermissionVersionsLimitExceededException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

public struct CreatePermissionVersionInput: Swift.Sendable {
    /// Specifies a unique, case-sensitive identifier that you provide to ensure the idempotency of the request. This lets you safely retry the request without accidentally performing the same operation a second time. Passing the same value to a later call to an operation requires that you also pass the same value for all other parameters. We recommend that you use a [UUID type of value.](https://wikipedia.org/wiki/Universally_unique_identifier). If you don't provide this value, then Amazon Web Services generates a random one for you. If you retry the operation with the same ClientToken, but with different parameters, the retry fails with an IdempotentParameterMismatch error.
    public var clientToken: Swift.String?
    /// Specifies the [Amazon Resource Name (ARN)](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html) of the customer managed permission you're creating a new version for.
    /// This member is required.
    public var permissionArn: Swift.String?
    /// A string in JSON format string that contains the following elements of a resource-based policy:
    ///
    /// * Effect: must be set to ALLOW.
    ///
    /// * Action: specifies the actions that are allowed by this customer managed permission. The list must contain only actions that are supported by the specified resource type. For a list of all actions supported by each resource type, see [Actions, resources, and condition keys for Amazon Web Services services](https://docs.aws.amazon.com/service-authorization/latest/reference/reference_policies_actions-resources-contextkeys.html) in the Identity and Access Management User Guide.
    ///
    /// * Condition: (optional) specifies conditional parameters that must evaluate to true when a user attempts an action for that action to be allowed. For more information about the Condition element, see [IAM policies: Condition element](https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_elements_condition.html) in the Identity and Access Management User Guide.
    ///
    ///
    /// This template can't include either the Resource or Principal elements. Those are both filled in by RAM when it instantiates the resource-based policy on each resource shared using this managed permission. The Resource comes from the ARN of the specific resource that you are sharing. The Principal comes from the list of identities added to the resource share.
    /// This member is required.
    public var policyTemplate: Swift.String?

    public init(
        clientToken: Swift.String? = nil,
        permissionArn: Swift.String? = nil,
        policyTemplate: Swift.String? = nil
    )
    {
        self.clientToken = clientToken
        self.permissionArn = permissionArn
        self.policyTemplate = policyTemplate
    }
}

extension RAMClientTypes {

    public enum PermissionStatus: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case attachable
        case deleted
        case deleting
        case unattachable
        case sdkUnknown(Swift.String)

        public static var allCases: [PermissionStatus] {
            return [
                .attachable,
                .deleted,
                .deleting,
                .unattachable
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .attachable: return "ATTACHABLE"
            case .deleted: return "DELETED"
            case .deleting: return "DELETING"
            case .unattachable: return "UNATTACHABLE"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension RAMClientTypes {

    /// Information about a RAM managed permission.
    public struct ResourceSharePermissionDetail: Swift.Sendable {
        /// The [Amazon Resource Name (ARN)](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html) of this RAM managed permission.
        public var arn: Swift.String?
        /// The date and time when the permission was created.
        public var creationTime: Foundation.Date?
        /// Specifies whether the version of the permission represented in this response is the default version for this permission.
        public var defaultVersion: Swift.Bool?
        /// Indicates what features are available for this resource share. This parameter can have one of the following values:
        ///
        /// * STANDARD – A resource share that supports all functionality. These resource shares are visible to all principals you share the resource share with. You can modify these resource shares in RAM using the console or APIs. This resource share might have been created by RAM, or it might have been CREATED_FROM_POLICY and then promoted.
        ///
        /// * CREATED_FROM_POLICY – The customer manually shared a resource by attaching a resource-based policy. That policy did not match any existing managed permissions, so RAM created this customer managed permission automatically on the customer's behalf based on the attached policy document. This type of resource share is visible only to the Amazon Web Services account that created it. You can't modify it in RAM unless you promote it. For more information, see [PromoteResourceShareCreatedFromPolicy].
        ///
        /// * PROMOTING_TO_STANDARD – This resource share was originally CREATED_FROM_POLICY, but the customer ran the [PromoteResourceShareCreatedFromPolicy] and that operation is still in progress. This value changes to STANDARD when complete.
        public var featureSet: RAMClientTypes.PermissionFeatureSet?
        /// Specifies whether the version of the permission represented in this response is the default version for all resources of this resource type.
        public var isResourceTypeDefault: Swift.Bool?
        /// The date and time when the permission was last updated.
        public var lastUpdatedTime: Foundation.Date?
        /// The name of this permission.
        public var name: Swift.String?
        /// The permission's effect and actions in JSON format. The effect indicates whether the specified actions are allowed or denied. The actions list the operations to which the principal is granted or denied access.
        public var permission: Swift.String?
        /// The type of managed permission. This can be one of the following values:
        ///
        /// * AWS_MANAGED – Amazon Web Services created and manages this managed permission. You can associate it with your resource shares, but you can't modify it.
        ///
        /// * CUSTOMER_MANAGED – You, or another principal in your account created this managed permission. You can associate it with your resource shares and create new versions that have different permissions.
        public var permissionType: RAMClientTypes.PermissionType?
        /// The resource type to which this permission applies.
        public var resourceType: Swift.String?
        /// The current status of the association between the permission and the resource share. The following are the possible values:
        ///
        /// * ATTACHABLE – This permission or version can be associated with resource shares.
        ///
        /// * UNATTACHABLE – This permission or version can't currently be associated with resource shares.
        ///
        /// * DELETING – This permission or version is in the process of being deleted.
        ///
        /// * DELETED – This permission or version is deleted.
        public var status: RAMClientTypes.PermissionStatus?
        /// The tag key and value pairs attached to the resource share.
        public var tags: [RAMClientTypes.Tag]?
        /// The version of the permission described in this response.
        public var version: Swift.String?

        public init(
            arn: Swift.String? = nil,
            creationTime: Foundation.Date? = nil,
            defaultVersion: Swift.Bool? = nil,
            featureSet: RAMClientTypes.PermissionFeatureSet? = nil,
            isResourceTypeDefault: Swift.Bool? = nil,
            lastUpdatedTime: Foundation.Date? = nil,
            name: Swift.String? = nil,
            permission: Swift.String? = nil,
            permissionType: RAMClientTypes.PermissionType? = nil,
            resourceType: Swift.String? = nil,
            status: RAMClientTypes.PermissionStatus? = nil,
            tags: [RAMClientTypes.Tag]? = nil,
            version: Swift.String? = nil
        )
        {
            self.arn = arn
            self.creationTime = creationTime
            self.defaultVersion = defaultVersion
            self.featureSet = featureSet
            self.isResourceTypeDefault = isResourceTypeDefault
            self.lastUpdatedTime = lastUpdatedTime
            self.name = name
            self.permission = permission
            self.permissionType = permissionType
            self.resourceType = resourceType
            self.status = status
            self.tags = tags
            self.version = version
        }
    }
}

public struct CreatePermissionVersionOutput: Swift.Sendable {
    /// The idempotency identifier associated with this request. If you want to repeat the same operation in an idempotent manner then you must include this value in the clientToken request parameter of that later call. All other parameters must also have the same values that you used in the first call.
    public var clientToken: Swift.String?
    /// Information about a RAM managed permission.
    public var permission: RAMClientTypes.ResourceSharePermissionDetail?

    public init(
        clientToken: Swift.String? = nil,
        permission: RAMClientTypes.ResourceSharePermissionDetail? = nil
    )
    {
        self.clientToken = clientToken
        self.permission = permission
    }
}

/// The operation failed because it would exceed the limit for tags for your Amazon Web Services account.
public struct TagLimitExceededException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// This member is required.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "TagLimitExceeded" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The operation failed because the specified tag key is a reserved word and can't be used.
public struct TagPolicyViolationException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// This member is required.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "TagPolicyViolation" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

public struct CreateResourceShareInput: Swift.Sendable {
    /// Specifies whether principals outside your organization in Organizations can be associated with a resource share. A value of true lets you share with individual Amazon Web Services accounts that are not in your organization. A value of false only has meaning if your account is a member of an Amazon Web Services Organization. The default value is true.
    public var allowExternalPrincipals: Swift.Bool?
    /// Specifies a unique, case-sensitive identifier that you provide to ensure the idempotency of the request. This lets you safely retry the request without accidentally performing the same operation a second time. Passing the same value to a later call to an operation requires that you also pass the same value for all other parameters. We recommend that you use a [UUID type of value.](https://wikipedia.org/wiki/Universally_unique_identifier). If you don't provide this value, then Amazon Web Services generates a random one for you. If you retry the operation with the same ClientToken, but with different parameters, the retry fails with an IdempotentParameterMismatch error.
    public var clientToken: Swift.String?
    /// Specifies the name of the resource share.
    /// This member is required.
    public var name: Swift.String?
    /// Specifies the [Amazon Resource Names (ARNs)](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html) of the RAM permission to associate with the resource share. If you do not specify an ARN for the permission, RAM automatically attaches the default version of the permission for each resource type. You can associate only one permission with each resource type included in the resource share.
    public var permissionArns: [Swift.String]?
    /// Specifies a list of one or more principals to associate with the resource share. You can include the following values:
    ///
    /// * An Amazon Web Services account ID, for example: 123456789012
    ///
    /// * An [Amazon Resource Name (ARN)](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html) of an organization in Organizations, for example: organizations::123456789012:organization/o-exampleorgid
    ///
    /// * An ARN of an organizational unit (OU) in Organizations, for example: organizations::123456789012:ou/o-exampleorgid/ou-examplerootid-exampleouid123
    ///
    /// * An ARN of an IAM role, for example: iam::123456789012:role/rolename
    ///
    /// * An ARN of an IAM user, for example: iam::123456789012user/username
    ///
    ///
    /// Not all resource types can be shared with IAM roles and users. For more information, see [Sharing with IAM roles and users](https://docs.aws.amazon.com/ram/latest/userguide/permissions.html#permissions-rbp-supported-resource-types) in the Resource Access Manager User Guide.
    public var principals: [Swift.String]?
    /// Specifies a list of one or more ARNs of the resources to associate with the resource share.
    public var resourceArns: [Swift.String]?
    /// Specifies from which source accounts the service principal has access to the resources in this resource share.
    public var sources: [Swift.String]?
    /// Specifies one or more tags to attach to the resource share itself. It doesn't attach the tags to the resources associated with the resource share.
    public var tags: [RAMClientTypes.Tag]?

    public init(
        allowExternalPrincipals: Swift.Bool? = nil,
        clientToken: Swift.String? = nil,
        name: Swift.String? = nil,
        permissionArns: [Swift.String]? = nil,
        principals: [Swift.String]? = nil,
        resourceArns: [Swift.String]? = nil,
        sources: [Swift.String]? = nil,
        tags: [RAMClientTypes.Tag]? = nil
    )
    {
        self.allowExternalPrincipals = allowExternalPrincipals
        self.clientToken = clientToken
        self.name = name
        self.permissionArns = permissionArns
        self.principals = principals
        self.resourceArns = resourceArns
        self.sources = sources
        self.tags = tags
    }
}

extension RAMClientTypes {

    public enum ResourceShareFeatureSet: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case createdFromPolicy
        case promotingToStandard
        case standard
        case sdkUnknown(Swift.String)

        public static var allCases: [ResourceShareFeatureSet] {
            return [
                .createdFromPolicy,
                .promotingToStandard,
                .standard
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .createdFromPolicy: return "CREATED_FROM_POLICY"
            case .promotingToStandard: return "PROMOTING_TO_STANDARD"
            case .standard: return "STANDARD"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension RAMClientTypes {

    public enum ResourceShareStatus: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case active
        case deleted
        case deleting
        case failed
        case pending
        case sdkUnknown(Swift.String)

        public static var allCases: [ResourceShareStatus] {
            return [
                .active,
                .deleted,
                .deleting,
                .failed,
                .pending
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .active: return "ACTIVE"
            case .deleted: return "DELETED"
            case .deleting: return "DELETING"
            case .failed: return "FAILED"
            case .pending: return "PENDING"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension RAMClientTypes {

    /// Describes a resource share in RAM.
    public struct ResourceShare: Swift.Sendable {
        /// Indicates whether principals outside your organization in Organizations can be associated with a resource share.
        ///
        /// * True – the resource share can be shared with any Amazon Web Services account.
        ///
        /// * False – the resource share can be shared with only accounts in the same organization as the account that owns the resource share.
        public var allowExternalPrincipals: Swift.Bool?
        /// The date and time when the resource share was created.
        public var creationTime: Foundation.Date?
        /// Indicates what features are available for this resource share. This parameter can have one of the following values:
        ///
        /// * STANDARD – A resource share that supports all functionality. These resource shares are visible to all principals you share the resource share with. You can modify these resource shares in RAM using the console or APIs. This resource share might have been created by RAM, or it might have been CREATED_FROM_POLICY and then promoted.
        ///
        /// * CREATED_FROM_POLICY – The customer manually shared a resource by attaching a resource-based policy. That policy did not match any existing managed permissions, so RAM created this customer managed permission automatically on the customer's behalf based on the attached policy document. This type of resource share is visible only to the Amazon Web Services account that created it. You can't modify it in RAM unless you promote it. For more information, see [PromoteResourceShareCreatedFromPolicy].
        ///
        /// * PROMOTING_TO_STANDARD – This resource share was originally CREATED_FROM_POLICY, but the customer ran the [PromoteResourceShareCreatedFromPolicy] and that operation is still in progress. This value changes to STANDARD when complete.
        public var featureSet: RAMClientTypes.ResourceShareFeatureSet?
        /// The date and time when the resource share was last updated.
        public var lastUpdatedTime: Foundation.Date?
        /// The name of the resource share.
        public var name: Swift.String?
        /// The ID of the Amazon Web Services account that owns the resource share.
        public var owningAccountId: Swift.String?
        /// The [Amazon Resource Name (ARN)](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html) of the resource share
        public var resourceShareArn: Swift.String?
        /// The current status of the resource share.
        public var status: RAMClientTypes.ResourceShareStatus?
        /// A message about the status of the resource share.
        public var statusMessage: Swift.String?
        /// The tag key and value pairs attached to the resource share.
        public var tags: [RAMClientTypes.Tag]?

        public init(
            allowExternalPrincipals: Swift.Bool? = nil,
            creationTime: Foundation.Date? = nil,
            featureSet: RAMClientTypes.ResourceShareFeatureSet? = nil,
            lastUpdatedTime: Foundation.Date? = nil,
            name: Swift.String? = nil,
            owningAccountId: Swift.String? = nil,
            resourceShareArn: Swift.String? = nil,
            status: RAMClientTypes.ResourceShareStatus? = nil,
            statusMessage: Swift.String? = nil,
            tags: [RAMClientTypes.Tag]? = nil
        )
        {
            self.allowExternalPrincipals = allowExternalPrincipals
            self.creationTime = creationTime
            self.featureSet = featureSet
            self.lastUpdatedTime = lastUpdatedTime
            self.name = name
            self.owningAccountId = owningAccountId
            self.resourceShareArn = resourceShareArn
            self.status = status
            self.statusMessage = statusMessage
            self.tags = tags
        }
    }
}

public struct CreateResourceShareOutput: Swift.Sendable {
    /// The idempotency identifier associated with this request. If you want to repeat the same operation in an idempotent manner then you must include this value in the clientToken request parameter of that later call. All other parameters must also have the same values that you used in the first call.
    public var clientToken: Swift.String?
    /// An object with information about the new resource share.
    public var resourceShare: RAMClientTypes.ResourceShare?

    public init(
        clientToken: Swift.String? = nil,
        resourceShare: RAMClientTypes.ResourceShare? = nil
    )
    {
        self.clientToken = clientToken
        self.resourceShare = resourceShare
    }
}

public struct DeletePermissionInput: Swift.Sendable {
    /// Specifies a unique, case-sensitive identifier that you provide to ensure the idempotency of the request. This lets you safely retry the request without accidentally performing the same operation a second time. Passing the same value to a later call to an operation requires that you also pass the same value for all other parameters. We recommend that you use a [UUID type of value.](https://wikipedia.org/wiki/Universally_unique_identifier). If you don't provide this value, then Amazon Web Services generates a random one for you. If you retry the operation with the same ClientToken, but with different parameters, the retry fails with an IdempotentParameterMismatch error.
    public var clientToken: Swift.String?
    /// Specifies the [Amazon Resource Name (ARN)](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html) of the customer managed permission that you want to delete.
    /// This member is required.
    public var permissionArn: Swift.String?

    public init(
        clientToken: Swift.String? = nil,
        permissionArn: Swift.String? = nil
    )
    {
        self.clientToken = clientToken
        self.permissionArn = permissionArn
    }
}

public struct DeletePermissionOutput: Swift.Sendable {
    /// The idempotency identifier associated with this request. If you want to repeat the same operation in an idempotent manner then you must include this value in the clientToken request parameter of that later call. All other parameters must also have the same values that you used in the first call.
    public var clientToken: Swift.String?
    /// This operation is performed asynchronously, and this response parameter indicates the current status.
    public var permissionStatus: RAMClientTypes.PermissionStatus?
    /// A boolean that indicates whether the delete operations succeeded.
    public var returnValue: Swift.Bool?

    public init(
        clientToken: Swift.String? = nil,
        permissionStatus: RAMClientTypes.PermissionStatus? = nil,
        returnValue: Swift.Bool? = nil
    )
    {
        self.clientToken = clientToken
        self.permissionStatus = permissionStatus
        self.returnValue = returnValue
    }
}

public struct DeletePermissionVersionInput: Swift.Sendable {
    /// Specifies a unique, case-sensitive identifier that you provide to ensure the idempotency of the request. This lets you safely retry the request without accidentally performing the same operation a second time. Passing the same value to a later call to an operation requires that you also pass the same value for all other parameters. We recommend that you use a [UUID type of value.](https://wikipedia.org/wiki/Universally_unique_identifier). If you don't provide this value, then Amazon Web Services generates a random one for you. If you retry the operation with the same ClientToken, but with different parameters, the retry fails with an IdempotentParameterMismatch error.
    public var clientToken: Swift.String?
    /// Specifies the [Amazon Resource Name (ARN)](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html) of the permission with the version you want to delete.
    /// This member is required.
    public var permissionArn: Swift.String?
    /// Specifies the version number to delete. You can't delete the default version for a customer managed permission. You can't delete a version if it's the only version of the permission. You must either first create another version, or delete the permission completely. You can't delete a version if it is attached to any resource shares. If the version is the default, you must first use [SetDefaultPermissionVersion] to set a different version as the default for the customer managed permission, and then use [AssociateResourceSharePermission] to update your resource shares to use the new default version.
    /// This member is required.
    public var permissionVersion: Swift.Int?

    public init(
        clientToken: Swift.String? = nil,
        permissionArn: Swift.String? = nil,
        permissionVersion: Swift.Int? = nil
    )
    {
        self.clientToken = clientToken
        self.permissionArn = permissionArn
        self.permissionVersion = permissionVersion
    }
}

public struct DeletePermissionVersionOutput: Swift.Sendable {
    /// The idempotency identifier associated with this request. If you want to repeat the same operation in an idempotent manner then you must include this value in the clientToken request parameter of that later call. All other parameters must also have the same values that you used in the first call.
    public var clientToken: Swift.String?
    /// This operation is performed asynchronously, and this response parameter indicates the current status.
    public var permissionStatus: RAMClientTypes.PermissionStatus?
    /// A boolean value that indicates whether the operation is successful.
    public var returnValue: Swift.Bool?

    public init(
        clientToken: Swift.String? = nil,
        permissionStatus: RAMClientTypes.PermissionStatus? = nil,
        returnValue: Swift.Bool? = nil
    )
    {
        self.clientToken = clientToken
        self.permissionStatus = permissionStatus
        self.returnValue = returnValue
    }
}

public struct DeleteResourceShareInput: Swift.Sendable {
    /// Specifies a unique, case-sensitive identifier that you provide to ensure the idempotency of the request. This lets you safely retry the request without accidentally performing the same operation a second time. Passing the same value to a later call to an operation requires that you also pass the same value for all other parameters. We recommend that you use a [UUID type of value.](https://wikipedia.org/wiki/Universally_unique_identifier). If you don't provide this value, then Amazon Web Services generates a random one for you. If you retry the operation with the same ClientToken, but with different parameters, the retry fails with an IdempotentParameterMismatch error.
    public var clientToken: Swift.String?
    /// Specifies the [Amazon Resource Name (ARN)](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html) of the resource share to delete.
    /// This member is required.
    public var resourceShareArn: Swift.String?

    public init(
        clientToken: Swift.String? = nil,
        resourceShareArn: Swift.String? = nil
    )
    {
        self.clientToken = clientToken
        self.resourceShareArn = resourceShareArn
    }
}

public struct DeleteResourceShareOutput: Swift.Sendable {
    /// The idempotency identifier associated with this request. If you want to repeat the same operation in an idempotent manner then you must include this value in the clientToken request parameter of that later call. All other parameters must also have the same values that you used in the first call.
    public var clientToken: Swift.String?
    /// A return value of true indicates that the request succeeded. A value of false indicates that the request failed.
    public var returnValue: Swift.Bool?

    public init(
        clientToken: Swift.String? = nil,
        returnValue: Swift.Bool? = nil
    )
    {
        self.clientToken = clientToken
        self.returnValue = returnValue
    }
}

public struct DisassociateResourceShareInput: Swift.Sendable {
    /// Specifies a unique, case-sensitive identifier that you provide to ensure the idempotency of the request. This lets you safely retry the request without accidentally performing the same operation a second time. Passing the same value to a later call to an operation requires that you also pass the same value for all other parameters. We recommend that you use a [UUID type of value.](https://wikipedia.org/wiki/Universally_unique_identifier). If you don't provide this value, then Amazon Web Services generates a random one for you. If you retry the operation with the same ClientToken, but with different parameters, the retry fails with an IdempotentParameterMismatch error.
    public var clientToken: Swift.String?
    /// Specifies a list of one or more principals that no longer are to have access to the resources in this resource share. You can include the following values:
    ///
    /// * An Amazon Web Services account ID, for example: 123456789012
    ///
    /// * An [Amazon Resource Name (ARN)](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html) of an organization in Organizations, for example: organizations::123456789012:organization/o-exampleorgid
    ///
    /// * An ARN of an organizational unit (OU) in Organizations, for example: organizations::123456789012:ou/o-exampleorgid/ou-examplerootid-exampleouid123
    ///
    /// * An ARN of an IAM role, for example: iam::123456789012:role/rolename
    ///
    /// * An ARN of an IAM user, for example: iam::123456789012user/username
    ///
    ///
    /// Not all resource types can be shared with IAM roles and users. For more information, see [Sharing with IAM roles and users](https://docs.aws.amazon.com/ram/latest/userguide/permissions.html#permissions-rbp-supported-resource-types) in the Resource Access Manager User Guide.
    public var principals: [Swift.String]?
    /// Specifies a list of [Amazon Resource Names (ARNs)](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html) for one or more resources that you want to remove from the resource share. After the operation runs, these resources are no longer shared with principals associated with the resource share.
    public var resourceArns: [Swift.String]?
    /// Specifies [Amazon Resource Name (ARN)](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html) of the resource share that you want to remove resources or principals from.
    /// This member is required.
    public var resourceShareArn: Swift.String?
    /// Specifies from which source accounts the service principal no longer has access to the resources in this resource share.
    public var sources: [Swift.String]?

    public init(
        clientToken: Swift.String? = nil,
        principals: [Swift.String]? = nil,
        resourceArns: [Swift.String]? = nil,
        resourceShareArn: Swift.String? = nil,
        sources: [Swift.String]? = nil
    )
    {
        self.clientToken = clientToken
        self.principals = principals
        self.resourceArns = resourceArns
        self.resourceShareArn = resourceShareArn
        self.sources = sources
    }
}

public struct DisassociateResourceShareOutput: Swift.Sendable {
    /// The idempotency identifier associated with this request. If you want to repeat the same operation in an idempotent manner then you must include this value in the clientToken request parameter of that later call. All other parameters must also have the same values that you used in the first call.
    public var clientToken: Swift.String?
    /// An array of objects with information about the updated associations for this resource share.
    public var resourceShareAssociations: [RAMClientTypes.ResourceShareAssociation]?

    public init(
        clientToken: Swift.String? = nil,
        resourceShareAssociations: [RAMClientTypes.ResourceShareAssociation]? = nil
    )
    {
        self.clientToken = clientToken
        self.resourceShareAssociations = resourceShareAssociations
    }
}

public struct DisassociateResourceSharePermissionInput: Swift.Sendable {
    /// Specifies a unique, case-sensitive identifier that you provide to ensure the idempotency of the request. This lets you safely retry the request without accidentally performing the same operation a second time. Passing the same value to a later call to an operation requires that you also pass the same value for all other parameters. We recommend that you use a [UUID type of value.](https://wikipedia.org/wiki/Universally_unique_identifier). If you don't provide this value, then Amazon Web Services generates a random one for you. If you retry the operation with the same ClientToken, but with different parameters, the retry fails with an IdempotentParameterMismatch error.
    public var clientToken: Swift.String?
    /// The [Amazon Resource Name (ARN)](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html) of the managed permission to disassociate from the resource share. Changes to permissions take effect immediately.
    /// This member is required.
    public var permissionArn: Swift.String?
    /// The [Amazon Resource Name (ARN)](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html) of the resource share that you want to remove the managed permission from.
    /// This member is required.
    public var resourceShareArn: Swift.String?

    public init(
        clientToken: Swift.String? = nil,
        permissionArn: Swift.String? = nil,
        resourceShareArn: Swift.String? = nil
    )
    {
        self.clientToken = clientToken
        self.permissionArn = permissionArn
        self.resourceShareArn = resourceShareArn
    }
}

public struct DisassociateResourceSharePermissionOutput: Swift.Sendable {
    /// The idempotency identifier associated with this request. If you want to repeat the same operation in an idempotent manner then you must include this value in the clientToken request parameter of that later call. All other parameters must also have the same values that you used in the first call.
    public var clientToken: Swift.String?
    /// A return value of true indicates that the request succeeded. A value of false indicates that the request failed.
    public var returnValue: Swift.Bool?

    public init(
        clientToken: Swift.String? = nil,
        returnValue: Swift.Bool? = nil
    )
    {
        self.clientToken = clientToken
        self.returnValue = returnValue
    }
}

public struct EnableSharingWithAwsOrganizationInput: Swift.Sendable {

    public init() { }
}

public struct EnableSharingWithAwsOrganizationOutput: Swift.Sendable {
    /// A return value of true indicates that the request succeeded. A value of false indicates that the request failed.
    public var returnValue: Swift.Bool?

    public init(
        returnValue: Swift.Bool? = nil
    )
    {
        self.returnValue = returnValue
    }
}

public struct GetPermissionInput: Swift.Sendable {
    /// Specifies the [Amazon Resource Name (ARN)](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html) of the permission whose contents you want to retrieve. To find the ARN for a permission, use either the [ListPermissions] operation or go to the [Permissions library](https://console.aws.amazon.com/ram/home#Permissions:) page in the RAM console and then choose the name of the permission. The ARN is displayed on the detail page.
    /// This member is required.
    public var permissionArn: Swift.String?
    /// Specifies the version number of the RAM permission to retrieve. If you don't specify this parameter, the operation retrieves the default version. To see the list of available versions, use [ListPermissionVersions].
    public var permissionVersion: Swift.Int?

    public init(
        permissionArn: Swift.String? = nil,
        permissionVersion: Swift.Int? = nil
    )
    {
        self.permissionArn = permissionArn
        self.permissionVersion = permissionVersion
    }
}

public struct GetPermissionOutput: Swift.Sendable {
    /// An object with details about the permission.
    public var permission: RAMClientTypes.ResourceSharePermissionDetail?

    public init(
        permission: RAMClientTypes.ResourceSharePermissionDetail? = nil
    )
    {
        self.permission = permission
    }
}

/// The operation failed because the specified value for NextToken isn't valid. You must specify a value you received in the NextToken response of a previous call to this operation.
public struct InvalidNextTokenException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// This member is required.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidNextToken" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The operation failed because the specified [Amazon Resource Name (ARN)](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html) was not found.
public struct ResourceArnNotFoundException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// This member is required.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidResourceArn.NotFound" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

public struct GetResourcePoliciesInput: Swift.Sendable {
    /// Specifies the total number of results that you want included on each page of the response. If you do not include this parameter, it defaults to a value that is specific to the operation. If additional items exist beyond the number you specify, the NextToken response element is returned with a value (not null). Include the specified value as the NextToken request parameter in the next call to the operation to get the next part of the results. Note that the service might return fewer results than the maximum even when there are more results available. You should check NextToken after every operation to ensure that you receive all of the results.
    public var maxResults: Swift.Int?
    /// Specifies that you want to receive the next page of results. Valid only if you received a NextToken response in the previous request. If you did, it indicates that more output is available. Set this parameter to the value provided by the previous call's NextToken response to request the next page of results.
    public var nextToken: Swift.String?
    /// Specifies the principal.
    public var principal: Swift.String?
    /// Specifies the [Amazon Resource Names (ARNs)](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html) of the resources whose policies you want to retrieve.
    /// This member is required.
    public var resourceArns: [Swift.String]?

    public init(
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        principal: Swift.String? = nil,
        resourceArns: [Swift.String]? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.principal = principal
        self.resourceArns = resourceArns
    }
}

public struct GetResourcePoliciesOutput: Swift.Sendable {
    /// If present, this value indicates that more output is available than is included in the current response. Use this value in the NextToken request parameter in a subsequent call to the operation to get the next part of the output. You should repeat this until the NextToken response element comes back as null. This indicates that this is the last page of results.
    public var nextToken: Swift.String?
    /// An array of resource policy documents in JSON format.
    public var policies: [Swift.String]?

    public init(
        nextToken: Swift.String? = nil,
        policies: [Swift.String]? = nil
    )
    {
        self.nextToken = nextToken
        self.policies = policies
    }
}

public struct GetResourceShareAssociationsInput: Swift.Sendable {
    /// Specifies that you want to retrieve only associations that have this status.
    public var associationStatus: RAMClientTypes.ResourceShareAssociationStatus?
    /// Specifies whether you want to retrieve the associations that involve a specified resource or principal.
    ///
    /// * PRINCIPAL – list the principals whose associations you want to see.
    ///
    /// * RESOURCE – list the resources whose associations you want to see.
    /// This member is required.
    public var associationType: RAMClientTypes.ResourceShareAssociationType?
    /// Specifies the total number of results that you want included on each page of the response. If you do not include this parameter, it defaults to a value that is specific to the operation. If additional items exist beyond the number you specify, the NextToken response element is returned with a value (not null). Include the specified value as the NextToken request parameter in the next call to the operation to get the next part of the results. Note that the service might return fewer results than the maximum even when there are more results available. You should check NextToken after every operation to ensure that you receive all of the results.
    public var maxResults: Swift.Int?
    /// Specifies that you want to receive the next page of results. Valid only if you received a NextToken response in the previous request. If you did, it indicates that more output is available. Set this parameter to the value provided by the previous call's NextToken response to request the next page of results.
    public var nextToken: Swift.String?
    /// Specifies the ID of the principal whose resource shares you want to retrieve. This can be an Amazon Web Services account ID, an organization ID, an organizational unit ID, or the [Amazon Resource Name (ARN)](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html) of an individual IAM role or user. You cannot specify this parameter if the association type is RESOURCE.
    public var principal: Swift.String?
    /// Specifies the [Amazon Resource Name (ARN)](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html) of a resource whose resource shares you want to retrieve. You cannot specify this parameter if the association type is PRINCIPAL.
    public var resourceArn: Swift.String?
    /// Specifies a list of [Amazon Resource Names (ARNs)](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html) of the resource share whose associations you want to retrieve.
    public var resourceShareArns: [Swift.String]?

    public init(
        associationStatus: RAMClientTypes.ResourceShareAssociationStatus? = nil,
        associationType: RAMClientTypes.ResourceShareAssociationType? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        principal: Swift.String? = nil,
        resourceArn: Swift.String? = nil,
        resourceShareArns: [Swift.String]? = nil
    )
    {
        self.associationStatus = associationStatus
        self.associationType = associationType
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.principal = principal
        self.resourceArn = resourceArn
        self.resourceShareArns = resourceShareArns
    }
}

public struct GetResourceShareAssociationsOutput: Swift.Sendable {
    /// If present, this value indicates that more output is available than is included in the current response. Use this value in the NextToken request parameter in a subsequent call to the operation to get the next part of the output. You should repeat this until the NextToken response element comes back as null. This indicates that this is the last page of results.
    public var nextToken: Swift.String?
    /// An array of objects that contain the details about the associations.
    public var resourceShareAssociations: [RAMClientTypes.ResourceShareAssociation]?

    public init(
        nextToken: Swift.String? = nil,
        resourceShareAssociations: [RAMClientTypes.ResourceShareAssociation]? = nil
    )
    {
        self.nextToken = nextToken
        self.resourceShareAssociations = resourceShareAssociations
    }
}

/// The operation failed because the specified value for MaxResults isn't valid.
public struct InvalidMaxResultsException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// This member is required.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidMaxResults" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

public struct GetResourceShareInvitationsInput: Swift.Sendable {
    /// Specifies the total number of results that you want included on each page of the response. If you do not include this parameter, it defaults to a value that is specific to the operation. If additional items exist beyond the number you specify, the NextToken response element is returned with a value (not null). Include the specified value as the NextToken request parameter in the next call to the operation to get the next part of the results. Note that the service might return fewer results than the maximum even when there are more results available. You should check NextToken after every operation to ensure that you receive all of the results.
    public var maxResults: Swift.Int?
    /// Specifies that you want to receive the next page of results. Valid only if you received a NextToken response in the previous request. If you did, it indicates that more output is available. Set this parameter to the value provided by the previous call's NextToken response to request the next page of results.
    public var nextToken: Swift.String?
    /// Specifies that you want details about invitations only for the resource shares described by this list of [Amazon Resource Names (ARNs)](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html)
    public var resourceShareArns: [Swift.String]?
    /// Specifies the [Amazon Resource Names (ARNs)](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html) of the resource share invitations you want information about.
    public var resourceShareInvitationArns: [Swift.String]?

    public init(
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        resourceShareArns: [Swift.String]? = nil,
        resourceShareInvitationArns: [Swift.String]? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.resourceShareArns = resourceShareArns
        self.resourceShareInvitationArns = resourceShareInvitationArns
    }
}

public struct GetResourceShareInvitationsOutput: Swift.Sendable {
    /// If present, this value indicates that more output is available than is included in the current response. Use this value in the NextToken request parameter in a subsequent call to the operation to get the next part of the output. You should repeat this until the NextToken response element comes back as null. This indicates that this is the last page of results.
    public var nextToken: Swift.String?
    /// An array of objects that contain the details about the invitations.
    public var resourceShareInvitations: [RAMClientTypes.ResourceShareInvitation]?

    public init(
        nextToken: Swift.String? = nil,
        resourceShareInvitations: [RAMClientTypes.ResourceShareInvitation]? = nil
    )
    {
        self.nextToken = nextToken
        self.resourceShareInvitations = resourceShareInvitations
    }
}

extension RAMClientTypes {

    public enum ResourceOwner: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case otherAccounts
        case `self`
        case sdkUnknown(Swift.String)

        public static var allCases: [ResourceOwner] {
            return [
                .otherAccounts,
                .self
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .otherAccounts: return "OTHER-ACCOUNTS"
            case .self: return "SELF"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension RAMClientTypes {

    /// A tag key and optional list of possible values that you can use to filter results for tagged resources.
    public struct TagFilter: Swift.Sendable {
        /// The tag key. This must have a valid string value and can't be empty.
        public var tagKey: Swift.String?
        /// A list of zero or more tag values. If no values are provided, then the filter matches any tag with the specified key, regardless of its value.
        public var tagValues: [Swift.String]?

        public init(
            tagKey: Swift.String? = nil,
            tagValues: [Swift.String]? = nil
        )
        {
            self.tagKey = tagKey
            self.tagValues = tagValues
        }
    }
}

public struct GetResourceSharesInput: Swift.Sendable {
    /// Specifies the total number of results that you want included on each page of the response. If you do not include this parameter, it defaults to a value that is specific to the operation. If additional items exist beyond the number you specify, the NextToken response element is returned with a value (not null). Include the specified value as the NextToken request parameter in the next call to the operation to get the next part of the results. Note that the service might return fewer results than the maximum even when there are more results available. You should check NextToken after every operation to ensure that you receive all of the results.
    public var maxResults: Swift.Int?
    /// Specifies the name of an individual resource share that you want to retrieve details about.
    public var name: Swift.String?
    /// Specifies that you want to receive the next page of results. Valid only if you received a NextToken response in the previous request. If you did, it indicates that more output is available. Set this parameter to the value provided by the previous call's NextToken response to request the next page of results.
    public var nextToken: Swift.String?
    /// Specifies that you want to retrieve details of only those resource shares that use the managed permission with this [Amazon Resource Name (ARN)](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html).
    public var permissionArn: Swift.String?
    /// Specifies that you want to retrieve details for only those resource shares that use the specified version of the managed permission.
    public var permissionVersion: Swift.Int?
    /// Specifies that you want to retrieve details of only those resource shares that match the following:
    ///
    /// * SELF – resource shares that your account shares with other accounts
    ///
    /// * OTHER-ACCOUNTS – resource shares that other accounts share with your account
    /// This member is required.
    public var resourceOwner: RAMClientTypes.ResourceOwner?
    /// Specifies the [Amazon Resource Names (ARNs)](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html) of individual resource shares that you want information about.
    public var resourceShareArns: [Swift.String]?
    /// Specifies that you want to retrieve details of only those resource shares that have this status.
    public var resourceShareStatus: RAMClientTypes.ResourceShareStatus?
    /// Specifies that you want to retrieve details of only those resource shares that match the specified tag keys and values.
    public var tagFilters: [RAMClientTypes.TagFilter]?

    public init(
        maxResults: Swift.Int? = nil,
        name: Swift.String? = nil,
        nextToken: Swift.String? = nil,
        permissionArn: Swift.String? = nil,
        permissionVersion: Swift.Int? = nil,
        resourceOwner: RAMClientTypes.ResourceOwner? = nil,
        resourceShareArns: [Swift.String]? = nil,
        resourceShareStatus: RAMClientTypes.ResourceShareStatus? = nil,
        tagFilters: [RAMClientTypes.TagFilter]? = nil
    )
    {
        self.maxResults = maxResults
        self.name = name
        self.nextToken = nextToken
        self.permissionArn = permissionArn
        self.permissionVersion = permissionVersion
        self.resourceOwner = resourceOwner
        self.resourceShareArns = resourceShareArns
        self.resourceShareStatus = resourceShareStatus
        self.tagFilters = tagFilters
    }
}

public struct GetResourceSharesOutput: Swift.Sendable {
    /// If present, this value indicates that more output is available than is included in the current response. Use this value in the NextToken request parameter in a subsequent call to the operation to get the next part of the output. You should repeat this until the NextToken response element comes back as null. This indicates that this is the last page of results.
    public var nextToken: Swift.String?
    /// An array of objects that contain the information about the resource shares.
    public var resourceShares: [RAMClientTypes.ResourceShare]?

    public init(
        nextToken: Swift.String? = nil,
        resourceShares: [RAMClientTypes.ResourceShare]? = nil
    )
    {
        self.nextToken = nextToken
        self.resourceShares = resourceShares
    }
}

/// The operation failed because a required input parameter is missing.
public struct MissingRequiredParameterException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// This member is required.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "MissingRequiredParameter" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension RAMClientTypes {

    public enum ResourceRegionScopeFilter: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case all
        case global
        case regional
        case sdkUnknown(Swift.String)

        public static var allCases: [ResourceRegionScopeFilter] {
            return [
                .all,
                .global,
                .regional
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .all: return "ALL"
            case .global: return "GLOBAL"
            case .regional: return "REGIONAL"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

public struct ListPendingInvitationResourcesInput: Swift.Sendable {
    /// Specifies the total number of results that you want included on each page of the response. If you do not include this parameter, it defaults to a value that is specific to the operation. If additional items exist beyond the number you specify, the NextToken response element is returned with a value (not null). Include the specified value as the NextToken request parameter in the next call to the operation to get the next part of the results. Note that the service might return fewer results than the maximum even when there are more results available. You should check NextToken after every operation to ensure that you receive all of the results.
    public var maxResults: Swift.Int?
    /// Specifies that you want to receive the next page of results. Valid only if you received a NextToken response in the previous request. If you did, it indicates that more output is available. Set this parameter to the value provided by the previous call's NextToken response to request the next page of results.
    public var nextToken: Swift.String?
    /// Specifies that you want the results to include only resources that have the specified scope.
    ///
    /// * ALL – the results include both global and regional resources or resource types.
    ///
    /// * GLOBAL – the results include only global resources or resource types.
    ///
    /// * REGIONAL – the results include only regional resources or resource types.
    ///
    ///
    /// The default value is ALL.
    public var resourceRegionScope: RAMClientTypes.ResourceRegionScopeFilter?
    /// Specifies the [Amazon Resource Name (ARN)](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html) of the invitation. You can use [GetResourceShareInvitations] to find the ARN of the invitation.
    /// This member is required.
    public var resourceShareInvitationArn: Swift.String?

    public init(
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        resourceRegionScope: RAMClientTypes.ResourceRegionScopeFilter? = nil,
        resourceShareInvitationArn: Swift.String? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.resourceRegionScope = resourceRegionScope
        self.resourceShareInvitationArn = resourceShareInvitationArn
    }
}

extension RAMClientTypes {

    public enum ResourceRegionScope: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case global
        case regional
        case sdkUnknown(Swift.String)

        public static var allCases: [ResourceRegionScope] {
            return [
                .global,
                .regional
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .global: return "GLOBAL"
            case .regional: return "REGIONAL"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension RAMClientTypes {

    public enum ResourceStatus: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case available
        case limitExceeded
        case pending
        case unavailable
        case zonalResourceInaccessible
        case sdkUnknown(Swift.String)

        public static var allCases: [ResourceStatus] {
            return [
                .available,
                .limitExceeded,
                .pending,
                .unavailable,
                .zonalResourceInaccessible
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .available: return "AVAILABLE"
            case .limitExceeded: return "LIMIT_EXCEEDED"
            case .pending: return "PENDING"
            case .unavailable: return "UNAVAILABLE"
            case .zonalResourceInaccessible: return "ZONAL_RESOURCE_INACCESSIBLE"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension RAMClientTypes {

    /// Describes a resource associated with a resource share in RAM.
    public struct Resource: Swift.Sendable {
        /// The [Amazon Resource Name (ARN)](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html) of the resource.
        public var arn: Swift.String?
        /// The date and time when the resource was associated with the resource share.
        public var creationTime: Foundation.Date?
        /// The date an time when the association between the resource and the resource share was last updated.
        public var lastUpdatedTime: Foundation.Date?
        /// The [Amazon Resource Name (ARN)](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html) of the resource group. This value is available only if the resource is part of a resource group.
        public var resourceGroupArn: Swift.String?
        /// Specifies the scope of visibility of this resource:
        ///
        /// * REGIONAL – The resource can be accessed only by using requests that target the Amazon Web Services Region in which the resource exists.
        ///
        /// * GLOBAL – The resource can be accessed from any Amazon Web Services Region.
        public var resourceRegionScope: RAMClientTypes.ResourceRegionScope?
        /// The [Amazon Resource Name (ARN)](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html) of the resource share this resource is associated with.
        public var resourceShareArn: Swift.String?
        /// The current status of the resource.
        public var status: RAMClientTypes.ResourceStatus?
        /// A message about the status of the resource.
        public var statusMessage: Swift.String?
        /// The resource type. This takes the form of: service-code:resource-code, and is case-insensitive. For example, an Amazon EC2 Subnet would be represented by the string ec2:subnet.
        public var type: Swift.String?

        public init(
            arn: Swift.String? = nil,
            creationTime: Foundation.Date? = nil,
            lastUpdatedTime: Foundation.Date? = nil,
            resourceGroupArn: Swift.String? = nil,
            resourceRegionScope: RAMClientTypes.ResourceRegionScope? = nil,
            resourceShareArn: Swift.String? = nil,
            status: RAMClientTypes.ResourceStatus? = nil,
            statusMessage: Swift.String? = nil,
            type: Swift.String? = nil
        )
        {
            self.arn = arn
            self.creationTime = creationTime
            self.lastUpdatedTime = lastUpdatedTime
            self.resourceGroupArn = resourceGroupArn
            self.resourceRegionScope = resourceRegionScope
            self.resourceShareArn = resourceShareArn
            self.status = status
            self.statusMessage = statusMessage
            self.type = type
        }
    }
}

public struct ListPendingInvitationResourcesOutput: Swift.Sendable {
    /// If present, this value indicates that more output is available than is included in the current response. Use this value in the NextToken request parameter in a subsequent call to the operation to get the next part of the output. You should repeat this until the NextToken response element comes back as null. This indicates that this is the last page of results.
    public var nextToken: Swift.String?
    /// An array of objects that contain the information about the resources included the specified resource share.
    public var resources: [RAMClientTypes.Resource]?

    public init(
        nextToken: Swift.String? = nil,
        resources: [RAMClientTypes.Resource]? = nil
    )
    {
        self.nextToken = nextToken
        self.resources = resources
    }
}

public struct ListPermissionAssociationsInput: Swift.Sendable {
    /// Specifies that you want to list only those associations with resource shares that match this status.
    public var associationStatus: RAMClientTypes.ResourceShareAssociationStatus?
    /// When true, specifies that you want to list only those associations with resource shares that use the default version of the specified managed permission. When false (the default value), lists associations with resource shares that use any version of the specified managed permission.
    public var defaultVersion: Swift.Bool?
    /// Specifies that you want to list only those associations with resource shares that have a featureSet with this value.
    public var featureSet: RAMClientTypes.PermissionFeatureSet?
    /// Specifies the total number of results that you want included on each page of the response. If you do not include this parameter, it defaults to a value that is specific to the operation. If additional items exist beyond the number you specify, the NextToken response element is returned with a value (not null). Include the specified value as the NextToken request parameter in the next call to the operation to get the next part of the results. Note that the service might return fewer results than the maximum even when there are more results available. You should check NextToken after every operation to ensure that you receive all of the results.
    public var maxResults: Swift.Int?
    /// Specifies that you want to receive the next page of results. Valid only if you received a NextToken response in the previous request. If you did, it indicates that more output is available. Set this parameter to the value provided by the previous call's NextToken response to request the next page of results.
    public var nextToken: Swift.String?
    /// Specifies the [Amazon Resource Name (ARN)](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html) of the managed permission.
    public var permissionArn: Swift.String?
    /// Specifies that you want to list only those associations with resource shares that use this version of the managed permission. If you don't provide a value for this parameter, then the operation returns information about associations with resource shares that use any version of the managed permission.
    public var permissionVersion: Swift.Int?
    /// Specifies that you want to list only those associations with resource shares that include at least one resource of this resource type.
    public var resourceType: Swift.String?

    public init(
        associationStatus: RAMClientTypes.ResourceShareAssociationStatus? = nil,
        defaultVersion: Swift.Bool? = nil,
        featureSet: RAMClientTypes.PermissionFeatureSet? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        permissionArn: Swift.String? = nil,
        permissionVersion: Swift.Int? = nil,
        resourceType: Swift.String? = nil
    )
    {
        self.associationStatus = associationStatus
        self.defaultVersion = defaultVersion
        self.featureSet = featureSet
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.permissionArn = permissionArn
        self.permissionVersion = permissionVersion
        self.resourceType = resourceType
    }
}

extension RAMClientTypes {

    /// An object that describes a managed permission associated with a resource share.
    public struct AssociatedPermission: Swift.Sendable {
        /// The [Amazon Resource Name (ARN)](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html) of the associated managed permission.
        public var arn: Swift.String?
        /// Indicates whether the associated resource share is using the default version of the permission.
        public var defaultVersion: Swift.Bool?
        /// Indicates what features are available for this resource share. This parameter can have one of the following values:
        ///
        /// * STANDARD – A resource share that supports all functionality. These resource shares are visible to all principals you share the resource share with. You can modify these resource shares in RAM using the console or APIs. This resource share might have been created by RAM, or it might have been CREATED_FROM_POLICY and then promoted.
        ///
        /// * CREATED_FROM_POLICY – The customer manually shared a resource by attaching a resource-based policy. That policy did not match any existing managed permissions, so RAM created this customer managed permission automatically on the customer's behalf based on the attached policy document. This type of resource share is visible only to the Amazon Web Services account that created it. You can't modify it in RAM unless you promote it. For more information, see [PromoteResourceShareCreatedFromPolicy].
        ///
        /// * PROMOTING_TO_STANDARD – This resource share was originally CREATED_FROM_POLICY, but the customer ran the [PromoteResourceShareCreatedFromPolicy] and that operation is still in progress. This value changes to STANDARD when complete.
        public var featureSet: RAMClientTypes.PermissionFeatureSet?
        /// The date and time when the association between the permission and the resource share was last updated.
        public var lastUpdatedTime: Foundation.Date?
        /// The version of the permission currently associated with the resource share.
        public var permissionVersion: Swift.String?
        /// The [Amazon Resource Name (ARN)](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html) of a resource share associated with this permission.
        public var resourceShareArn: Swift.String?
        /// The resource type to which this permission applies.
        public var resourceType: Swift.String?
        /// The current status of the association between the permission and the resource share. The following are the possible values:
        ///
        /// * ATTACHABLE – This permission or version can be associated with resource shares.
        ///
        /// * UNATTACHABLE – This permission or version can't currently be associated with resource shares.
        ///
        /// * DELETING – This permission or version is in the process of being deleted.
        ///
        /// * DELETED – This permission or version is deleted.
        public var status: Swift.String?

        public init(
            arn: Swift.String? = nil,
            defaultVersion: Swift.Bool? = nil,
            featureSet: RAMClientTypes.PermissionFeatureSet? = nil,
            lastUpdatedTime: Foundation.Date? = nil,
            permissionVersion: Swift.String? = nil,
            resourceShareArn: Swift.String? = nil,
            resourceType: Swift.String? = nil,
            status: Swift.String? = nil
        )
        {
            self.arn = arn
            self.defaultVersion = defaultVersion
            self.featureSet = featureSet
            self.lastUpdatedTime = lastUpdatedTime
            self.permissionVersion = permissionVersion
            self.resourceShareArn = resourceShareArn
            self.resourceType = resourceType
            self.status = status
        }
    }
}

public struct ListPermissionAssociationsOutput: Swift.Sendable {
    /// If present, this value indicates that more output is available than is included in the current response. Use this value in the NextToken request parameter in a subsequent call to the operation to get the next part of the output. You should repeat this until the NextToken response element comes back as null. This indicates that this is the last page of results.
    public var nextToken: Swift.String?
    /// A structure with information about this customer managed permission.
    public var permissions: [RAMClientTypes.AssociatedPermission]?

    public init(
        nextToken: Swift.String? = nil,
        permissions: [RAMClientTypes.AssociatedPermission]? = nil
    )
    {
        self.nextToken = nextToken
        self.permissions = permissions
    }
}

extension RAMClientTypes {

    public enum PermissionTypeFilter: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case all
        case awsManaged
        case customerManaged
        case sdkUnknown(Swift.String)

        public static var allCases: [PermissionTypeFilter] {
            return [
                .all,
                .awsManaged,
                .customerManaged
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .all: return "ALL"
            case .awsManaged: return "AWS_MANAGED"
            case .customerManaged: return "CUSTOMER_MANAGED"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

public struct ListPermissionsInput: Swift.Sendable {
    /// Specifies the total number of results that you want included on each page of the response. If you do not include this parameter, it defaults to a value that is specific to the operation. If additional items exist beyond the number you specify, the NextToken response element is returned with a value (not null). Include the specified value as the NextToken request parameter in the next call to the operation to get the next part of the results. Note that the service might return fewer results than the maximum even when there are more results available. You should check NextToken after every operation to ensure that you receive all of the results.
    public var maxResults: Swift.Int?
    /// Specifies that you want to receive the next page of results. Valid only if you received a NextToken response in the previous request. If you did, it indicates that more output is available. Set this parameter to the value provided by the previous call's NextToken response to request the next page of results.
    public var nextToken: Swift.String?
    /// Specifies that you want to list only permissions of this type:
    ///
    /// * AWS – returns only Amazon Web Services managed permissions.
    ///
    /// * LOCAL – returns only customer managed permissions
    ///
    /// * ALL – returns both Amazon Web Services managed permissions and customer managed permissions.
    ///
    ///
    /// If you don't specify this parameter, the default is All.
    public var permissionType: RAMClientTypes.PermissionTypeFilter?
    /// Specifies that you want to list only those permissions that apply to the specified resource type. This parameter is not case sensitive. For example, to list only permissions that apply to Amazon EC2 subnets, specify ec2:subnet. You can use the [ListResourceTypes] operation to get the specific string required.
    public var resourceType: Swift.String?

    public init(
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        permissionType: RAMClientTypes.PermissionTypeFilter? = nil,
        resourceType: Swift.String? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.permissionType = permissionType
        self.resourceType = resourceType
    }
}

public struct ListPermissionsOutput: Swift.Sendable {
    /// If present, this value indicates that more output is available than is included in the current response. Use this value in the NextToken request parameter in a subsequent call to the operation to get the next part of the output. You should repeat this until the NextToken response element comes back as null. This indicates that this is the last page of results.
    public var nextToken: Swift.String?
    /// An array of objects with information about the permissions.
    public var permissions: [RAMClientTypes.ResourceSharePermissionSummary]?

    public init(
        nextToken: Swift.String? = nil,
        permissions: [RAMClientTypes.ResourceSharePermissionSummary]? = nil
    )
    {
        self.nextToken = nextToken
        self.permissions = permissions
    }
}

public struct ListPermissionVersionsInput: Swift.Sendable {
    /// Specifies the total number of results that you want included on each page of the response. If you do not include this parameter, it defaults to a value that is specific to the operation. If additional items exist beyond the number you specify, the NextToken response element is returned with a value (not null). Include the specified value as the NextToken request parameter in the next call to the operation to get the next part of the results. Note that the service might return fewer results than the maximum even when there are more results available. You should check NextToken after every operation to ensure that you receive all of the results.
    public var maxResults: Swift.Int?
    /// Specifies that you want to receive the next page of results. Valid only if you received a NextToken response in the previous request. If you did, it indicates that more output is available. Set this parameter to the value provided by the previous call's NextToken response to request the next page of results.
    public var nextToken: Swift.String?
    /// Specifies the [Amazon Resource Name (ARN)](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html) of the RAM permission whose versions you want to list. You can use the permissionVersion parameter on the [AssociateResourceSharePermission] operation to specify a non-default version to attach.
    /// This member is required.
    public var permissionArn: Swift.String?

    public init(
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        permissionArn: Swift.String? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.permissionArn = permissionArn
    }
}

public struct ListPermissionVersionsOutput: Swift.Sendable {
    /// If present, this value indicates that more output is available than is included in the current response. Use this value in the NextToken request parameter in a subsequent call to the operation to get the next part of the output. You should repeat this until the NextToken response element comes back as null. This indicates that this is the last page of results.
    public var nextToken: Swift.String?
    /// An array of objects that contain details for each of the available versions.
    public var permissions: [RAMClientTypes.ResourceSharePermissionSummary]?

    public init(
        nextToken: Swift.String? = nil,
        permissions: [RAMClientTypes.ResourceSharePermissionSummary]? = nil
    )
    {
        self.nextToken = nextToken
        self.permissions = permissions
    }
}

public struct ListPrincipalsInput: Swift.Sendable {
    /// Specifies the total number of results that you want included on each page of the response. If you do not include this parameter, it defaults to a value that is specific to the operation. If additional items exist beyond the number you specify, the NextToken response element is returned with a value (not null). Include the specified value as the NextToken request parameter in the next call to the operation to get the next part of the results. Note that the service might return fewer results than the maximum even when there are more results available. You should check NextToken after every operation to ensure that you receive all of the results.
    public var maxResults: Swift.Int?
    /// Specifies that you want to receive the next page of results. Valid only if you received a NextToken response in the previous request. If you did, it indicates that more output is available. Set this parameter to the value provided by the previous call's NextToken response to request the next page of results.
    public var nextToken: Swift.String?
    /// Specifies that you want to list information for only the listed principals. You can include the following values:
    ///
    /// * An Amazon Web Services account ID, for example: 123456789012
    ///
    /// * An [Amazon Resource Name (ARN)](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html) of an organization in Organizations, for example: organizations::123456789012:organization/o-exampleorgid
    ///
    /// * An ARN of an organizational unit (OU) in Organizations, for example: organizations::123456789012:ou/o-exampleorgid/ou-examplerootid-exampleouid123
    ///
    /// * An ARN of an IAM role, for example: iam::123456789012:role/rolename
    ///
    /// * An ARN of an IAM user, for example: iam::123456789012user/username
    ///
    ///
    /// Not all resource types can be shared with IAM roles and users. For more information, see [Sharing with IAM roles and users](https://docs.aws.amazon.com/ram/latest/userguide/permissions.html#permissions-rbp-supported-resource-types) in the Resource Access Manager User Guide.
    public var principals: [Swift.String]?
    /// Specifies that you want to list principal information for the resource share with the specified [Amazon Resource Name (ARN)](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html).
    public var resourceArn: Swift.String?
    /// Specifies that you want to list information for only resource shares that match the following:
    ///
    /// * SELF – principals that your account is sharing resources with
    ///
    /// * OTHER-ACCOUNTS – principals that are sharing resources with your account
    /// This member is required.
    public var resourceOwner: RAMClientTypes.ResourceOwner?
    /// Specifies that you want to list information for only principals associated with the resource shares specified by a list the [Amazon Resource Names (ARNs)](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html).
    public var resourceShareArns: [Swift.String]?
    /// Specifies that you want to list information for only principals associated with resource shares that include the specified resource type. For a list of valid values, query the [ListResourceTypes] operation.
    public var resourceType: Swift.String?

    public init(
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        principals: [Swift.String]? = nil,
        resourceArn: Swift.String? = nil,
        resourceOwner: RAMClientTypes.ResourceOwner? = nil,
        resourceShareArns: [Swift.String]? = nil,
        resourceType: Swift.String? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.principals = principals
        self.resourceArn = resourceArn
        self.resourceOwner = resourceOwner
        self.resourceShareArns = resourceShareArns
        self.resourceType = resourceType
    }
}

extension RAMClientTypes {

    /// Describes a principal for use with Resource Access Manager.
    public struct Principal: Swift.Sendable {
        /// The date and time when the principal was associated with the resource share.
        public var creationTime: Foundation.Date?
        /// Indicates the relationship between the Amazon Web Services account the principal belongs to and the account that owns the resource share:
        ///
        /// * True – The two accounts belong to same organization.
        ///
        /// * False – The two accounts do not belong to the same organization.
        public var external: Swift.Bool?
        /// The ID of the principal that can be associated with a resource share.
        public var id: Swift.String?
        /// The date and time when the association between the resource share and the principal was last updated.
        public var lastUpdatedTime: Foundation.Date?
        /// The [Amazon Resource Name (ARN)](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html) of a resource share the principal is associated with.
        public var resourceShareArn: Swift.String?

        public init(
            creationTime: Foundation.Date? = nil,
            external: Swift.Bool? = nil,
            id: Swift.String? = nil,
            lastUpdatedTime: Foundation.Date? = nil,
            resourceShareArn: Swift.String? = nil
        )
        {
            self.creationTime = creationTime
            self.external = external
            self.id = id
            self.lastUpdatedTime = lastUpdatedTime
            self.resourceShareArn = resourceShareArn
        }
    }
}

public struct ListPrincipalsOutput: Swift.Sendable {
    /// If present, this value indicates that more output is available than is included in the current response. Use this value in the NextToken request parameter in a subsequent call to the operation to get the next part of the output. You should repeat this until the NextToken response element comes back as null. This indicates that this is the last page of results.
    public var nextToken: Swift.String?
    /// An array of objects that contain the details about the principals.
    public var principals: [RAMClientTypes.Principal]?

    public init(
        nextToken: Swift.String? = nil,
        principals: [RAMClientTypes.Principal]? = nil
    )
    {
        self.nextToken = nextToken
        self.principals = principals
    }
}

extension RAMClientTypes {

    public enum ReplacePermissionAssociationsWorkStatus: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case completed
        case failed
        case inProgress
        case sdkUnknown(Swift.String)

        public static var allCases: [ReplacePermissionAssociationsWorkStatus] {
            return [
                .completed,
                .failed,
                .inProgress
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .completed: return "COMPLETED"
            case .failed: return "FAILED"
            case .inProgress: return "IN_PROGRESS"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

public struct ListReplacePermissionAssociationsWorkInput: Swift.Sendable {
    /// Specifies the total number of results that you want included on each page of the response. If you do not include this parameter, it defaults to a value that is specific to the operation. If additional items exist beyond the number you specify, the NextToken response element is returned with a value (not null). Include the specified value as the NextToken request parameter in the next call to the operation to get the next part of the results. Note that the service might return fewer results than the maximum even when there are more results available. You should check NextToken after every operation to ensure that you receive all of the results.
    public var maxResults: Swift.Int?
    /// Specifies that you want to receive the next page of results. Valid only if you received a NextToken response in the previous request. If you did, it indicates that more output is available. Set this parameter to the value provided by the previous call's NextToken response to request the next page of results.
    public var nextToken: Swift.String?
    /// Specifies that you want to see only the details about requests with a status that matches this value.
    public var status: RAMClientTypes.ReplacePermissionAssociationsWorkStatus?
    /// A list of IDs. These values come from the idfield of the replacePermissionAssociationsWorkstructure returned by the [ReplacePermissionAssociations] operation.
    public var workIds: [Swift.String]?

    public init(
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        status: RAMClientTypes.ReplacePermissionAssociationsWorkStatus? = nil,
        workIds: [Swift.String]? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.status = status
        self.workIds = workIds
    }
}

extension RAMClientTypes {

    /// A structure that represents the background work that RAM performs when you invoke the [ReplacePermissionAssociations] operation.
    public struct ReplacePermissionAssociationsWork: Swift.Sendable {
        /// The date and time when this asynchronous background task was created.
        public var creationTime: Foundation.Date?
        /// The [Amazon Resource Name (ARN)](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html) of the managed permission that this background task is replacing.
        public var fromPermissionArn: Swift.String?
        /// The version of the managed permission that this background task is replacing.
        public var fromPermissionVersion: Swift.String?
        /// The unique identifier for the background task associated with one [ReplacePermissionAssociations] request.
        public var id: Swift.String?
        /// The date and time when the status of this background task was last updated.
        public var lastUpdatedTime: Foundation.Date?
        /// Specifies the current status of the background tasks for the specified ID. The output is one of the following strings:
        ///
        /// * IN_PROGRESS
        ///
        /// * COMPLETED
        ///
        /// * FAILED
        public var status: RAMClientTypes.ReplacePermissionAssociationsWorkStatus?
        /// Specifies the reason for a FAILED status. This field is present only when there status is FAILED.
        public var statusMessage: Swift.String?
        /// The ARN of the managed permission that this background task is associating with the resource shares in place of the managed permission and version specified in fromPermissionArn and fromPermissionVersion.
        public var toPermissionArn: Swift.String?
        /// The version of the managed permission that this background task is associating with the resource shares. This is always the version that is currently the default for this managed permission.
        public var toPermissionVersion: Swift.String?

        public init(
            creationTime: Foundation.Date? = nil,
            fromPermissionArn: Swift.String? = nil,
            fromPermissionVersion: Swift.String? = nil,
            id: Swift.String? = nil,
            lastUpdatedTime: Foundation.Date? = nil,
            status: RAMClientTypes.ReplacePermissionAssociationsWorkStatus? = nil,
            statusMessage: Swift.String? = nil,
            toPermissionArn: Swift.String? = nil,
            toPermissionVersion: Swift.String? = nil
        )
        {
            self.creationTime = creationTime
            self.fromPermissionArn = fromPermissionArn
            self.fromPermissionVersion = fromPermissionVersion
            self.id = id
            self.lastUpdatedTime = lastUpdatedTime
            self.status = status
            self.statusMessage = statusMessage
            self.toPermissionArn = toPermissionArn
            self.toPermissionVersion = toPermissionVersion
        }
    }
}

public struct ListReplacePermissionAssociationsWorkOutput: Swift.Sendable {
    /// If present, this value indicates that more output is available than is included in the current response. Use this value in the NextToken request parameter in a subsequent call to the operation to get the next part of the output. You should repeat this until the NextToken response element comes back as null. This indicates that this is the last page of results.
    public var nextToken: Swift.String?
    /// An array of data structures that provide details of the matching work IDs.
    public var replacePermissionAssociationsWorks: [RAMClientTypes.ReplacePermissionAssociationsWork]?

    public init(
        nextToken: Swift.String? = nil,
        replacePermissionAssociationsWorks: [RAMClientTypes.ReplacePermissionAssociationsWork]? = nil
    )
    {
        self.nextToken = nextToken
        self.replacePermissionAssociationsWorks = replacePermissionAssociationsWorks
    }
}

/// The operation failed because the specified resource type isn't valid.
public struct InvalidResourceTypeException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// This member is required.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidResourceType.Unknown" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

public struct ListResourcesInput: Swift.Sendable {
    /// Specifies the total number of results that you want included on each page of the response. If you do not include this parameter, it defaults to a value that is specific to the operation. If additional items exist beyond the number you specify, the NextToken response element is returned with a value (not null). Include the specified value as the NextToken request parameter in the next call to the operation to get the next part of the results. Note that the service might return fewer results than the maximum even when there are more results available. You should check NextToken after every operation to ensure that you receive all of the results.
    public var maxResults: Swift.Int?
    /// Specifies that you want to receive the next page of results. Valid only if you received a NextToken response in the previous request. If you did, it indicates that more output is available. Set this parameter to the value provided by the previous call's NextToken response to request the next page of results.
    public var nextToken: Swift.String?
    /// Specifies that you want to list only the resource shares that are associated with the specified principal.
    public var principal: Swift.String?
    /// Specifies that you want to list only the resource shares that include resources with the specified [Amazon Resource Names (ARNs)](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html).
    public var resourceArns: [Swift.String]?
    /// Specifies that you want to list only the resource shares that match the following:
    ///
    /// * SELF – resources that your account shares with other accounts
    ///
    /// * OTHER-ACCOUNTS – resources that other accounts share with your account
    /// This member is required.
    public var resourceOwner: RAMClientTypes.ResourceOwner?
    /// Specifies that you want the results to include only resources that have the specified scope.
    ///
    /// * ALL – the results include both global and regional resources or resource types.
    ///
    /// * GLOBAL – the results include only global resources or resource types.
    ///
    /// * REGIONAL – the results include only regional resources or resource types.
    ///
    ///
    /// The default value is ALL.
    public var resourceRegionScope: RAMClientTypes.ResourceRegionScopeFilter?
    /// Specifies that you want to list only resources in the resource shares identified by the specified [Amazon Resource Names (ARNs)](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html).
    public var resourceShareArns: [Swift.String]?
    /// Specifies that you want to list only the resource shares that include resources of the specified resource type. For valid values, query the [ListResourceTypes] operation.
    public var resourceType: Swift.String?

    public init(
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        principal: Swift.String? = nil,
        resourceArns: [Swift.String]? = nil,
        resourceOwner: RAMClientTypes.ResourceOwner? = nil,
        resourceRegionScope: RAMClientTypes.ResourceRegionScopeFilter? = nil,
        resourceShareArns: [Swift.String]? = nil,
        resourceType: Swift.String? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.principal = principal
        self.resourceArns = resourceArns
        self.resourceOwner = resourceOwner
        self.resourceRegionScope = resourceRegionScope
        self.resourceShareArns = resourceShareArns
        self.resourceType = resourceType
    }
}

public struct ListResourcesOutput: Swift.Sendable {
    /// If present, this value indicates that more output is available than is included in the current response. Use this value in the NextToken request parameter in a subsequent call to the operation to get the next part of the output. You should repeat this until the NextToken response element comes back as null. This indicates that this is the last page of results.
    public var nextToken: Swift.String?
    /// An array of objects that contain information about the resources.
    public var resources: [RAMClientTypes.Resource]?

    public init(
        nextToken: Swift.String? = nil,
        resources: [RAMClientTypes.Resource]? = nil
    )
    {
        self.nextToken = nextToken
        self.resources = resources
    }
}

public struct ListResourceSharePermissionsInput: Swift.Sendable {
    /// Specifies the total number of results that you want included on each page of the response. If you do not include this parameter, it defaults to a value that is specific to the operation. If additional items exist beyond the number you specify, the NextToken response element is returned with a value (not null). Include the specified value as the NextToken request parameter in the next call to the operation to get the next part of the results. Note that the service might return fewer results than the maximum even when there are more results available. You should check NextToken after every operation to ensure that you receive all of the results.
    public var maxResults: Swift.Int?
    /// Specifies that you want to receive the next page of results. Valid only if you received a NextToken response in the previous request. If you did, it indicates that more output is available. Set this parameter to the value provided by the previous call's NextToken response to request the next page of results.
    public var nextToken: Swift.String?
    /// Specifies the [Amazon Resource Name (ARN)](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html) of the resource share for which you want to retrieve the associated permissions.
    /// This member is required.
    public var resourceShareArn: Swift.String?

    public init(
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        resourceShareArn: Swift.String? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.resourceShareArn = resourceShareArn
    }
}

public struct ListResourceSharePermissionsOutput: Swift.Sendable {
    /// If present, this value indicates that more output is available than is included in the current response. Use this value in the NextToken request parameter in a subsequent call to the operation to get the next part of the output. You should repeat this until the NextToken response element comes back as null. This indicates that this is the last page of results.
    public var nextToken: Swift.String?
    /// An array of objects that describe the permissions associated with the resource share.
    public var permissions: [RAMClientTypes.ResourceSharePermissionSummary]?

    public init(
        nextToken: Swift.String? = nil,
        permissions: [RAMClientTypes.ResourceSharePermissionSummary]? = nil
    )
    {
        self.nextToken = nextToken
        self.permissions = permissions
    }
}

public struct ListResourceTypesInput: Swift.Sendable {
    /// Specifies the total number of results that you want included on each page of the response. If you do not include this parameter, it defaults to a value that is specific to the operation. If additional items exist beyond the number you specify, the NextToken response element is returned with a value (not null). Include the specified value as the NextToken request parameter in the next call to the operation to get the next part of the results. Note that the service might return fewer results than the maximum even when there are more results available. You should check NextToken after every operation to ensure that you receive all of the results.
    public var maxResults: Swift.Int?
    /// Specifies that you want to receive the next page of results. Valid only if you received a NextToken response in the previous request. If you did, it indicates that more output is available. Set this parameter to the value provided by the previous call's NextToken response to request the next page of results.
    public var nextToken: Swift.String?
    /// Specifies that you want the results to include only resources that have the specified scope.
    ///
    /// * ALL – the results include both global and regional resources or resource types.
    ///
    /// * GLOBAL – the results include only global resources or resource types.
    ///
    /// * REGIONAL – the results include only regional resources or resource types.
    ///
    ///
    /// The default value is ALL.
    public var resourceRegionScope: RAMClientTypes.ResourceRegionScopeFilter?

    public init(
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        resourceRegionScope: RAMClientTypes.ResourceRegionScopeFilter? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.resourceRegionScope = resourceRegionScope
    }
}

extension RAMClientTypes {

    /// Information about a shareable resource type and the Amazon Web Services service to which resources of that type belong.
    public struct ServiceNameAndResourceType: Swift.Sendable {
        /// Specifies the scope of visibility of resources of this type:
        ///
        /// * REGIONAL – The resource can be accessed only by using requests that target the Amazon Web Services Region in which the resource exists.
        ///
        /// * GLOBAL – The resource can be accessed from any Amazon Web Services Region.
        public var resourceRegionScope: RAMClientTypes.ResourceRegionScope?
        /// The type of the resource. This takes the form of: service-code:resource-code, and is case-insensitive. For example, an Amazon EC2 Subnet would be represented by the string ec2:subnet.
        public var resourceType: Swift.String?
        /// The name of the Amazon Web Services service to which resources of this type belong.
        public var serviceName: Swift.String?

        public init(
            resourceRegionScope: RAMClientTypes.ResourceRegionScope? = nil,
            resourceType: Swift.String? = nil,
            serviceName: Swift.String? = nil
        )
        {
            self.resourceRegionScope = resourceRegionScope
            self.resourceType = resourceType
            self.serviceName = serviceName
        }
    }
}

public struct ListResourceTypesOutput: Swift.Sendable {
    /// If present, this value indicates that more output is available than is included in the current response. Use this value in the NextToken request parameter in a subsequent call to the operation to get the next part of the output. You should repeat this until the NextToken response element comes back as null. This indicates that this is the last page of results.
    public var nextToken: Swift.String?
    /// An array of objects that contain information about the resource types that can be shared using RAM.
    public var resourceTypes: [RAMClientTypes.ServiceNameAndResourceType]?

    public init(
        nextToken: Swift.String? = nil,
        resourceTypes: [RAMClientTypes.ServiceNameAndResourceType]? = nil
    )
    {
        self.nextToken = nextToken
        self.resourceTypes = resourceTypes
    }
}

public struct PromotePermissionCreatedFromPolicyInput: Swift.Sendable {
    /// Specifies a unique, case-sensitive identifier that you provide to ensure the idempotency of the request. This lets you safely retry the request without accidentally performing the same operation a second time. Passing the same value to a later call to an operation requires that you also pass the same value for all other parameters. We recommend that you use a [UUID type of value.](https://wikipedia.org/wiki/Universally_unique_identifier). If you don't provide this value, then Amazon Web Services generates a random one for you. If you retry the operation with the same ClientToken, but with different parameters, the retry fails with an IdempotentParameterMismatch error.
    public var clientToken: Swift.String?
    /// Specifies a name for the promoted customer managed permission.
    /// This member is required.
    public var name: Swift.String?
    /// Specifies the [Amazon Resource Name (ARN)](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html) of the CREATED_FROM_POLICY permission that you want to promote. You can get this [Amazon Resource Name (ARN)](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html) by calling the [ListResourceSharePermissions] operation.
    /// This member is required.
    public var permissionArn: Swift.String?

    public init(
        clientToken: Swift.String? = nil,
        name: Swift.String? = nil,
        permissionArn: Swift.String? = nil
    )
    {
        self.clientToken = clientToken
        self.name = name
        self.permissionArn = permissionArn
    }
}

public struct PromotePermissionCreatedFromPolicyOutput: Swift.Sendable {
    /// The idempotency identifier associated with this request. If you want to repeat the same operation in an idempotent manner then you must include this value in the clientToken request parameter of that later call. All other parameters must also have the same values that you used in the first call.
    public var clientToken: Swift.String?
    /// Information about an RAM permission.
    public var permission: RAMClientTypes.ResourceSharePermissionSummary?

    public init(
        clientToken: Swift.String? = nil,
        permission: RAMClientTypes.ResourceSharePermissionSummary? = nil
    )
    {
        self.clientToken = clientToken
        self.permission = permission
    }
}

/// There isn't an existing managed permission defined in RAM that has the same IAM permissions as the resource-based policy attached to the resource. You should first run [PromotePermissionCreatedFromPolicy] to create that managed permission.
public struct UnmatchedPolicyPermissionException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// This member is required.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "UnmatchedPolicyPermissionException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

public struct PromoteResourceShareCreatedFromPolicyInput: Swift.Sendable {
    /// Specifies the [Amazon Resource Name (ARN)](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html) of the resource share to promote.
    /// This member is required.
    public var resourceShareArn: Swift.String?

    public init(
        resourceShareArn: Swift.String? = nil
    )
    {
        self.resourceShareArn = resourceShareArn
    }
}

public struct PromoteResourceShareCreatedFromPolicyOutput: Swift.Sendable {
    /// A return value of true indicates that the request succeeded. A value of false indicates that the request failed.
    public var returnValue: Swift.Bool?

    public init(
        returnValue: Swift.Bool? = nil
    )
    {
        self.returnValue = returnValue
    }
}

public struct RejectResourceShareInvitationInput: Swift.Sendable {
    /// Specifies a unique, case-sensitive identifier that you provide to ensure the idempotency of the request. This lets you safely retry the request without accidentally performing the same operation a second time. Passing the same value to a later call to an operation requires that you also pass the same value for all other parameters. We recommend that you use a [UUID type of value.](https://wikipedia.org/wiki/Universally_unique_identifier). If you don't provide this value, then Amazon Web Services generates a random one for you. If you retry the operation with the same ClientToken, but with different parameters, the retry fails with an IdempotentParameterMismatch error.
    public var clientToken: Swift.String?
    /// Specifies the [Amazon Resource Name (ARN)](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html) of the invitation that you want to reject.
    /// This member is required.
    public var resourceShareInvitationArn: Swift.String?

    public init(
        clientToken: Swift.String? = nil,
        resourceShareInvitationArn: Swift.String? = nil
    )
    {
        self.clientToken = clientToken
        self.resourceShareInvitationArn = resourceShareInvitationArn
    }
}

public struct RejectResourceShareInvitationOutput: Swift.Sendable {
    /// The idempotency identifier associated with this request. If you want to repeat the same operation in an idempotent manner then you must include this value in the clientToken request parameter of that later call. All other parameters must also have the same values that you used in the first call.
    public var clientToken: Swift.String?
    /// An object that contains the details about the rejected invitation.
    public var resourceShareInvitation: RAMClientTypes.ResourceShareInvitation?

    public init(
        clientToken: Swift.String? = nil,
        resourceShareInvitation: RAMClientTypes.ResourceShareInvitation? = nil
    )
    {
        self.clientToken = clientToken
        self.resourceShareInvitation = resourceShareInvitation
    }
}

public struct ReplacePermissionAssociationsInput: Swift.Sendable {
    /// Specifies a unique, case-sensitive identifier that you provide to ensure the idempotency of the request. This lets you safely retry the request without accidentally performing the same operation a second time. Passing the same value to a later call to an operation requires that you also pass the same value for all other parameters. We recommend that you use a [UUID type of value.](https://wikipedia.org/wiki/Universally_unique_identifier). If you don't provide this value, then Amazon Web Services generates a random one for you. If you retry the operation with the same ClientToken, but with different parameters, the retry fails with an IdempotentParameterMismatch error.
    public var clientToken: Swift.String?
    /// Specifies the [Amazon Resource Name (ARN)](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html) of the managed permission that you want to replace.
    /// This member is required.
    public var fromPermissionArn: Swift.String?
    /// Specifies that you want to updated the permissions for only those resource shares that use the specified version of the managed permission.
    public var fromPermissionVersion: Swift.Int?
    /// Specifies the ARN of the managed permission that you want to associate with resource shares in place of the one specified by fromPerssionArn and fromPermissionVersion. The operation always associates the version that is currently the default for the specified managed permission.
    /// This member is required.
    public var toPermissionArn: Swift.String?

    public init(
        clientToken: Swift.String? = nil,
        fromPermissionArn: Swift.String? = nil,
        fromPermissionVersion: Swift.Int? = nil,
        toPermissionArn: Swift.String? = nil
    )
    {
        self.clientToken = clientToken
        self.fromPermissionArn = fromPermissionArn
        self.fromPermissionVersion = fromPermissionVersion
        self.toPermissionArn = toPermissionArn
    }
}

public struct ReplacePermissionAssociationsOutput: Swift.Sendable {
    /// The idempotency identifier associated with this request. If you want to repeat the same operation in an idempotent manner then you must include this value in the clientToken request parameter of that later call. All other parameters must also have the same values that you used in the first call.
    public var clientToken: Swift.String?
    /// Specifies a data structure that you can use to track the asynchronous tasks that RAM performs to complete this operation. You can use the [ListReplacePermissionAssociationsWork] operation and pass the id value returned in this structure.
    public var replacePermissionAssociationsWork: RAMClientTypes.ReplacePermissionAssociationsWork?

    public init(
        clientToken: Swift.String? = nil,
        replacePermissionAssociationsWork: RAMClientTypes.ReplacePermissionAssociationsWork? = nil
    )
    {
        self.clientToken = clientToken
        self.replacePermissionAssociationsWork = replacePermissionAssociationsWork
    }
}

public struct SetDefaultPermissionVersionInput: Swift.Sendable {
    /// Specifies a unique, case-sensitive identifier that you provide to ensure the idempotency of the request. This lets you safely retry the request without accidentally performing the same operation a second time. Passing the same value to a later call to an operation requires that you also pass the same value for all other parameters. We recommend that you use a [UUID type of value.](https://wikipedia.org/wiki/Universally_unique_identifier). If you don't provide this value, then Amazon Web Services generates a random one for you. If you retry the operation with the same ClientToken, but with different parameters, the retry fails with an IdempotentParameterMismatch error.
    public var clientToken: Swift.String?
    /// Specifies the [Amazon Resource Name (ARN)](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html) of the customer managed permission whose default version you want to change.
    /// This member is required.
    public var permissionArn: Swift.String?
    /// Specifies the version number that you want to designate as the default for customer managed permission. To see a list of all available version numbers, use [ListPermissionVersions].
    /// This member is required.
    public var permissionVersion: Swift.Int?

    public init(
        clientToken: Swift.String? = nil,
        permissionArn: Swift.String? = nil,
        permissionVersion: Swift.Int? = nil
    )
    {
        self.clientToken = clientToken
        self.permissionArn = permissionArn
        self.permissionVersion = permissionVersion
    }
}

public struct SetDefaultPermissionVersionOutput: Swift.Sendable {
    /// The idempotency identifier associated with this request. If you want to repeat the same operation in an idempotent manner then you must include this value in the clientToken request parameter of that later call. All other parameters must also have the same values that you used in the first call.
    public var clientToken: Swift.String?
    /// A boolean value that indicates whether the operation was successful.
    public var returnValue: Swift.Bool?

    public init(
        clientToken: Swift.String? = nil,
        returnValue: Swift.Bool? = nil
    )
    {
        self.clientToken = clientToken
        self.returnValue = returnValue
    }
}

public struct TagResourceInput: Swift.Sendable {
    /// Specifies the [Amazon Resource Name (ARN)](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html) of the managed permission that you want to add tags to. You must specify either resourceArn, or resourceShareArn, but not both.
    public var resourceArn: Swift.String?
    /// Specifies the [Amazon Resource Name (ARN)](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html) of the resource share that you want to add tags to. You must specify either resourceShareArn, or resourceArn, but not both.
    public var resourceShareArn: Swift.String?
    /// A list of one or more tag key and value pairs. The tag key must be present and not be an empty string. The tag value must be present but can be an empty string.
    /// This member is required.
    public var tags: [RAMClientTypes.Tag]?

    public init(
        resourceArn: Swift.String? = nil,
        resourceShareArn: Swift.String? = nil,
        tags: [RAMClientTypes.Tag]? = nil
    )
    {
        self.resourceArn = resourceArn
        self.resourceShareArn = resourceShareArn
        self.tags = tags
    }
}

public struct TagResourceOutput: Swift.Sendable {

    public init() { }
}

public struct UntagResourceInput: Swift.Sendable {
    /// Specifies the [Amazon Resource Name (ARN)](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html) of the managed permission that you want to remove tags from. You must specify either resourceArn, or resourceShareArn, but not both.
    public var resourceArn: Swift.String?
    /// Specifies the [Amazon Resource Name (ARN)](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html) of the resource share that you want to remove tags from. The tags are removed from the resource share, not the resources in the resource share. You must specify either resourceShareArn, or resourceArn, but not both.
    public var resourceShareArn: Swift.String?
    /// Specifies a list of one or more tag keys that you want to remove.
    /// This member is required.
    public var tagKeys: [Swift.String]?

    public init(
        resourceArn: Swift.String? = nil,
        resourceShareArn: Swift.String? = nil,
        tagKeys: [Swift.String]? = nil
    )
    {
        self.resourceArn = resourceArn
        self.resourceShareArn = resourceShareArn
        self.tagKeys = tagKeys
    }
}

public struct UntagResourceOutput: Swift.Sendable {

    public init() { }
}

public struct UpdateResourceShareInput: Swift.Sendable {
    /// Specifies whether principals outside your organization in Organizations can be associated with a resource share.
    public var allowExternalPrincipals: Swift.Bool?
    /// Specifies a unique, case-sensitive identifier that you provide to ensure the idempotency of the request. This lets you safely retry the request without accidentally performing the same operation a second time. Passing the same value to a later call to an operation requires that you also pass the same value for all other parameters. We recommend that you use a [UUID type of value.](https://wikipedia.org/wiki/Universally_unique_identifier). If you don't provide this value, then Amazon Web Services generates a random one for you. If you retry the operation with the same ClientToken, but with different parameters, the retry fails with an IdempotentParameterMismatch error.
    public var clientToken: Swift.String?
    /// If specified, the new name that you want to attach to the resource share.
    public var name: Swift.String?
    /// Specifies the [Amazon Resource Name (ARN)](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html) of the resource share that you want to modify.
    /// This member is required.
    public var resourceShareArn: Swift.String?

    public init(
        allowExternalPrincipals: Swift.Bool? = nil,
        clientToken: Swift.String? = nil,
        name: Swift.String? = nil,
        resourceShareArn: Swift.String? = nil
    )
    {
        self.allowExternalPrincipals = allowExternalPrincipals
        self.clientToken = clientToken
        self.name = name
        self.resourceShareArn = resourceShareArn
    }
}

public struct UpdateResourceShareOutput: Swift.Sendable {
    /// The idempotency identifier associated with this request. If you want to repeat the same operation in an idempotent manner then you must include this value in the clientToken request parameter of that later call. All other parameters must also have the same values that you used in the first call.
    public var clientToken: Swift.String?
    /// Information about the resource share.
    public var resourceShare: RAMClientTypes.ResourceShare?

    public init(
        clientToken: Swift.String? = nil,
        resourceShare: RAMClientTypes.ResourceShare? = nil
    )
    {
        self.clientToken = clientToken
        self.resourceShare = resourceShare
    }
}

extension AcceptResourceShareInvitationInput {

    static func urlPathProvider(_ value: AcceptResourceShareInvitationInput) -> Swift.String? {
        return "/acceptresourceshareinvitation"
    }
}

extension AssociateResourceShareInput {

    static func urlPathProvider(_ value: AssociateResourceShareInput) -> Swift.String? {
        return "/associateresourceshare"
    }
}

extension AssociateResourceSharePermissionInput {

    static func urlPathProvider(_ value: AssociateResourceSharePermissionInput) -> Swift.String? {
        return "/associateresourcesharepermission"
    }
}

extension CreatePermissionInput {

    static func urlPathProvider(_ value: CreatePermissionInput) -> Swift.String? {
        return "/createpermission"
    }
}

extension CreatePermissionVersionInput {

    static func urlPathProvider(_ value: CreatePermissionVersionInput) -> Swift.String? {
        return "/createpermissionversion"
    }
}

extension CreateResourceShareInput {

    static func urlPathProvider(_ value: CreateResourceShareInput) -> Swift.String? {
        return "/createresourceshare"
    }
}

extension DeletePermissionInput {

    static func urlPathProvider(_ value: DeletePermissionInput) -> Swift.String? {
        return "/deletepermission"
    }
}

extension DeletePermissionInput {

    static func queryItemProvider(_ value: DeletePermissionInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        if let clientToken = value.clientToken {
            let clientTokenQueryItem = Smithy.URIQueryItem(name: "clientToken".urlPercentEncoding(), value: Swift.String(clientToken).urlPercentEncoding())
            items.append(clientTokenQueryItem)
        }
        guard let permissionArn = value.permissionArn else {
            let message = "Creating a URL Query Item failed. permissionArn is required and must not be nil."
            throw Smithy.ClientError.unknownError(message)
        }
        let permissionArnQueryItem = Smithy.URIQueryItem(name: "permissionArn".urlPercentEncoding(), value: Swift.String(permissionArn).urlPercentEncoding())
        items.append(permissionArnQueryItem)
        return items
    }
}

extension DeletePermissionVersionInput {

    static func urlPathProvider(_ value: DeletePermissionVersionInput) -> Swift.String? {
        return "/deletepermissionversion"
    }
}

extension DeletePermissionVersionInput {

    static func queryItemProvider(_ value: DeletePermissionVersionInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        if let clientToken = value.clientToken {
            let clientTokenQueryItem = Smithy.URIQueryItem(name: "clientToken".urlPercentEncoding(), value: Swift.String(clientToken).urlPercentEncoding())
            items.append(clientTokenQueryItem)
        }
        guard let permissionArn = value.permissionArn else {
            let message = "Creating a URL Query Item failed. permissionArn is required and must not be nil."
            throw Smithy.ClientError.unknownError(message)
        }
        let permissionArnQueryItem = Smithy.URIQueryItem(name: "permissionArn".urlPercentEncoding(), value: Swift.String(permissionArn).urlPercentEncoding())
        items.append(permissionArnQueryItem)
        guard let permissionVersion = value.permissionVersion else {
            let message = "Creating a URL Query Item failed. permissionVersion is required and must not be nil."
            throw Smithy.ClientError.unknownError(message)
        }
        let permissionVersionQueryItem = Smithy.URIQueryItem(name: "permissionVersion".urlPercentEncoding(), value: Swift.String(permissionVersion).urlPercentEncoding())
        items.append(permissionVersionQueryItem)
        return items
    }
}

extension DeleteResourceShareInput {

    static func urlPathProvider(_ value: DeleteResourceShareInput) -> Swift.String? {
        return "/deleteresourceshare"
    }
}

extension DeleteResourceShareInput {

    static func queryItemProvider(_ value: DeleteResourceShareInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        guard let resourceShareArn = value.resourceShareArn else {
            let message = "Creating a URL Query Item failed. resourceShareArn is required and must not be nil."
            throw Smithy.ClientError.unknownError(message)
        }
        let resourceShareArnQueryItem = Smithy.URIQueryItem(name: "resourceShareArn".urlPercentEncoding(), value: Swift.String(resourceShareArn).urlPercentEncoding())
        items.append(resourceShareArnQueryItem)
        if let clientToken = value.clientToken {
            let clientTokenQueryItem = Smithy.URIQueryItem(name: "clientToken".urlPercentEncoding(), value: Swift.String(clientToken).urlPercentEncoding())
            items.append(clientTokenQueryItem)
        }
        return items
    }
}

extension DisassociateResourceShareInput {

    static func urlPathProvider(_ value: DisassociateResourceShareInput) -> Swift.String? {
        return "/disassociateresourceshare"
    }
}

extension DisassociateResourceSharePermissionInput {

    static func urlPathProvider(_ value: DisassociateResourceSharePermissionInput) -> Swift.String? {
        return "/disassociateresourcesharepermission"
    }
}

extension EnableSharingWithAwsOrganizationInput {

    static func urlPathProvider(_ value: EnableSharingWithAwsOrganizationInput) -> Swift.String? {
        return "/enablesharingwithawsorganization"
    }
}

extension GetPermissionInput {

    static func urlPathProvider(_ value: GetPermissionInput) -> Swift.String? {
        return "/getpermission"
    }
}

extension GetResourcePoliciesInput {

    static func urlPathProvider(_ value: GetResourcePoliciesInput) -> Swift.String? {
        return "/getresourcepolicies"
    }
}

extension GetResourceShareAssociationsInput {

    static func urlPathProvider(_ value: GetResourceShareAssociationsInput) -> Swift.String? {
        return "/getresourceshareassociations"
    }
}

extension GetResourceShareInvitationsInput {

    static func urlPathProvider(_ value: GetResourceShareInvitationsInput) -> Swift.String? {
        return "/getresourceshareinvitations"
    }
}

extension GetResourceSharesInput {

    static func urlPathProvider(_ value: GetResourceSharesInput) -> Swift.String? {
        return "/getresourceshares"
    }
}

extension ListPendingInvitationResourcesInput {

    static func urlPathProvider(_ value: ListPendingInvitationResourcesInput) -> Swift.String? {
        return "/listpendinginvitationresources"
    }
}

extension ListPermissionAssociationsInput {

    static func urlPathProvider(_ value: ListPermissionAssociationsInput) -> Swift.String? {
        return "/listpermissionassociations"
    }
}

extension ListPermissionsInput {

    static func urlPathProvider(_ value: ListPermissionsInput) -> Swift.String? {
        return "/listpermissions"
    }
}

extension ListPermissionVersionsInput {

    static func urlPathProvider(_ value: ListPermissionVersionsInput) -> Swift.String? {
        return "/listpermissionversions"
    }
}

extension ListPrincipalsInput {

    static func urlPathProvider(_ value: ListPrincipalsInput) -> Swift.String? {
        return "/listprincipals"
    }
}

extension ListReplacePermissionAssociationsWorkInput {

    static func urlPathProvider(_ value: ListReplacePermissionAssociationsWorkInput) -> Swift.String? {
        return "/listreplacepermissionassociationswork"
    }
}

extension ListResourcesInput {

    static func urlPathProvider(_ value: ListResourcesInput) -> Swift.String? {
        return "/listresources"
    }
}

extension ListResourceSharePermissionsInput {

    static func urlPathProvider(_ value: ListResourceSharePermissionsInput) -> Swift.String? {
        return "/listresourcesharepermissions"
    }
}

extension ListResourceTypesInput {

    static func urlPathProvider(_ value: ListResourceTypesInput) -> Swift.String? {
        return "/listresourcetypes"
    }
}

extension PromotePermissionCreatedFromPolicyInput {

    static func urlPathProvider(_ value: PromotePermissionCreatedFromPolicyInput) -> Swift.String? {
        return "/promotepermissioncreatedfrompolicy"
    }
}

extension PromoteResourceShareCreatedFromPolicyInput {

    static func urlPathProvider(_ value: PromoteResourceShareCreatedFromPolicyInput) -> Swift.String? {
        return "/promoteresourcesharecreatedfrompolicy"
    }
}

extension PromoteResourceShareCreatedFromPolicyInput {

    static func queryItemProvider(_ value: PromoteResourceShareCreatedFromPolicyInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        guard let resourceShareArn = value.resourceShareArn else {
            let message = "Creating a URL Query Item failed. resourceShareArn is required and must not be nil."
            throw Smithy.ClientError.unknownError(message)
        }
        let resourceShareArnQueryItem = Smithy.URIQueryItem(name: "resourceShareArn".urlPercentEncoding(), value: Swift.String(resourceShareArn).urlPercentEncoding())
        items.append(resourceShareArnQueryItem)
        return items
    }
}

extension RejectResourceShareInvitationInput {

    static func urlPathProvider(_ value: RejectResourceShareInvitationInput) -> Swift.String? {
        return "/rejectresourceshareinvitation"
    }
}

extension ReplacePermissionAssociationsInput {

    static func urlPathProvider(_ value: ReplacePermissionAssociationsInput) -> Swift.String? {
        return "/replacepermissionassociations"
    }
}

extension SetDefaultPermissionVersionInput {

    static func urlPathProvider(_ value: SetDefaultPermissionVersionInput) -> Swift.String? {
        return "/setdefaultpermissionversion"
    }
}

extension TagResourceInput {

    static func urlPathProvider(_ value: TagResourceInput) -> Swift.String? {
        return "/tagresource"
    }
}

extension UntagResourceInput {

    static func urlPathProvider(_ value: UntagResourceInput) -> Swift.String? {
        return "/untagresource"
    }
}

extension UpdateResourceShareInput {

    static func urlPathProvider(_ value: UpdateResourceShareInput) -> Swift.String? {
        return "/updateresourceshare"
    }
}

extension AcceptResourceShareInvitationInput {

    static func write(value: AcceptResourceShareInvitationInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["clientToken"].write(value.clientToken)
        try writer["resourceShareInvitationArn"].write(value.resourceShareInvitationArn)
    }
}

extension AssociateResourceShareInput {

    static func write(value: AssociateResourceShareInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["clientToken"].write(value.clientToken)
        try writer["principals"].writeList(value.principals, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["resourceArns"].writeList(value.resourceArns, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["resourceShareArn"].write(value.resourceShareArn)
        try writer["sources"].writeList(value.sources, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension AssociateResourceSharePermissionInput {

    static func write(value: AssociateResourceSharePermissionInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["clientToken"].write(value.clientToken)
        try writer["permissionArn"].write(value.permissionArn)
        try writer["permissionVersion"].write(value.permissionVersion)
        try writer["replace"].write(value.replace)
        try writer["resourceShareArn"].write(value.resourceShareArn)
    }
}

extension CreatePermissionInput {

    static func write(value: CreatePermissionInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["clientToken"].write(value.clientToken)
        try writer["name"].write(value.name)
        try writer["policyTemplate"].write(value.policyTemplate)
        try writer["resourceType"].write(value.resourceType)
        try writer["tags"].writeList(value.tags, memberWritingClosure: RAMClientTypes.Tag.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension CreatePermissionVersionInput {

    static func write(value: CreatePermissionVersionInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["clientToken"].write(value.clientToken)
        try writer["permissionArn"].write(value.permissionArn)
        try writer["policyTemplate"].write(value.policyTemplate)
    }
}

extension CreateResourceShareInput {

    static func write(value: CreateResourceShareInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["allowExternalPrincipals"].write(value.allowExternalPrincipals)
        try writer["clientToken"].write(value.clientToken)
        try writer["name"].write(value.name)
        try writer["permissionArns"].writeList(value.permissionArns, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["principals"].writeList(value.principals, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["resourceArns"].writeList(value.resourceArns, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["sources"].writeList(value.sources, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["tags"].writeList(value.tags, memberWritingClosure: RAMClientTypes.Tag.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension DisassociateResourceShareInput {

    static func write(value: DisassociateResourceShareInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["clientToken"].write(value.clientToken)
        try writer["principals"].writeList(value.principals, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["resourceArns"].writeList(value.resourceArns, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["resourceShareArn"].write(value.resourceShareArn)
        try writer["sources"].writeList(value.sources, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension DisassociateResourceSharePermissionInput {

    static func write(value: DisassociateResourceSharePermissionInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["clientToken"].write(value.clientToken)
        try writer["permissionArn"].write(value.permissionArn)
        try writer["resourceShareArn"].write(value.resourceShareArn)
    }
}

extension GetPermissionInput {

    static func write(value: GetPermissionInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["permissionArn"].write(value.permissionArn)
        try writer["permissionVersion"].write(value.permissionVersion)
    }
}

extension GetResourcePoliciesInput {

    static func write(value: GetResourcePoliciesInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["maxResults"].write(value.maxResults)
        try writer["nextToken"].write(value.nextToken)
        try writer["principal"].write(value.principal)
        try writer["resourceArns"].writeList(value.resourceArns, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension GetResourceShareAssociationsInput {

    static func write(value: GetResourceShareAssociationsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["associationStatus"].write(value.associationStatus)
        try writer["associationType"].write(value.associationType)
        try writer["maxResults"].write(value.maxResults)
        try writer["nextToken"].write(value.nextToken)
        try writer["principal"].write(value.principal)
        try writer["resourceArn"].write(value.resourceArn)
        try writer["resourceShareArns"].writeList(value.resourceShareArns, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension GetResourceShareInvitationsInput {

    static func write(value: GetResourceShareInvitationsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["maxResults"].write(value.maxResults)
        try writer["nextToken"].write(value.nextToken)
        try writer["resourceShareArns"].writeList(value.resourceShareArns, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["resourceShareInvitationArns"].writeList(value.resourceShareInvitationArns, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension GetResourceSharesInput {

    static func write(value: GetResourceSharesInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["maxResults"].write(value.maxResults)
        try writer["name"].write(value.name)
        try writer["nextToken"].write(value.nextToken)
        try writer["permissionArn"].write(value.permissionArn)
        try writer["permissionVersion"].write(value.permissionVersion)
        try writer["resourceOwner"].write(value.resourceOwner)
        try writer["resourceShareArns"].writeList(value.resourceShareArns, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["resourceShareStatus"].write(value.resourceShareStatus)
        try writer["tagFilters"].writeList(value.tagFilters, memberWritingClosure: RAMClientTypes.TagFilter.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension ListPendingInvitationResourcesInput {

    static func write(value: ListPendingInvitationResourcesInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["maxResults"].write(value.maxResults)
        try writer["nextToken"].write(value.nextToken)
        try writer["resourceRegionScope"].write(value.resourceRegionScope)
        try writer["resourceShareInvitationArn"].write(value.resourceShareInvitationArn)
    }
}

extension ListPermissionAssociationsInput {

    static func write(value: ListPermissionAssociationsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["associationStatus"].write(value.associationStatus)
        try writer["defaultVersion"].write(value.defaultVersion)
        try writer["featureSet"].write(value.featureSet)
        try writer["maxResults"].write(value.maxResults)
        try writer["nextToken"].write(value.nextToken)
        try writer["permissionArn"].write(value.permissionArn)
        try writer["permissionVersion"].write(value.permissionVersion)
        try writer["resourceType"].write(value.resourceType)
    }
}

extension ListPermissionsInput {

    static func write(value: ListPermissionsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["maxResults"].write(value.maxResults)
        try writer["nextToken"].write(value.nextToken)
        try writer["permissionType"].write(value.permissionType)
        try writer["resourceType"].write(value.resourceType)
    }
}

extension ListPermissionVersionsInput {

    static func write(value: ListPermissionVersionsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["maxResults"].write(value.maxResults)
        try writer["nextToken"].write(value.nextToken)
        try writer["permissionArn"].write(value.permissionArn)
    }
}

extension ListPrincipalsInput {

    static func write(value: ListPrincipalsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["maxResults"].write(value.maxResults)
        try writer["nextToken"].write(value.nextToken)
        try writer["principals"].writeList(value.principals, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["resourceArn"].write(value.resourceArn)
        try writer["resourceOwner"].write(value.resourceOwner)
        try writer["resourceShareArns"].writeList(value.resourceShareArns, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["resourceType"].write(value.resourceType)
    }
}

extension ListReplacePermissionAssociationsWorkInput {

    static func write(value: ListReplacePermissionAssociationsWorkInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["maxResults"].write(value.maxResults)
        try writer["nextToken"].write(value.nextToken)
        try writer["status"].write(value.status)
        try writer["workIds"].writeList(value.workIds, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension ListResourcesInput {

    static func write(value: ListResourcesInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["maxResults"].write(value.maxResults)
        try writer["nextToken"].write(value.nextToken)
        try writer["principal"].write(value.principal)
        try writer["resourceArns"].writeList(value.resourceArns, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["resourceOwner"].write(value.resourceOwner)
        try writer["resourceRegionScope"].write(value.resourceRegionScope)
        try writer["resourceShareArns"].writeList(value.resourceShareArns, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["resourceType"].write(value.resourceType)
    }
}

extension ListResourceSharePermissionsInput {

    static func write(value: ListResourceSharePermissionsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["maxResults"].write(value.maxResults)
        try writer["nextToken"].write(value.nextToken)
        try writer["resourceShareArn"].write(value.resourceShareArn)
    }
}

extension ListResourceTypesInput {

    static func write(value: ListResourceTypesInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["maxResults"].write(value.maxResults)
        try writer["nextToken"].write(value.nextToken)
        try writer["resourceRegionScope"].write(value.resourceRegionScope)
    }
}

extension PromotePermissionCreatedFromPolicyInput {

    static func write(value: PromotePermissionCreatedFromPolicyInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["clientToken"].write(value.clientToken)
        try writer["name"].write(value.name)
        try writer["permissionArn"].write(value.permissionArn)
    }
}

extension RejectResourceShareInvitationInput {

    static func write(value: RejectResourceShareInvitationInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["clientToken"].write(value.clientToken)
        try writer["resourceShareInvitationArn"].write(value.resourceShareInvitationArn)
    }
}

extension ReplacePermissionAssociationsInput {

    static func write(value: ReplacePermissionAssociationsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["clientToken"].write(value.clientToken)
        try writer["fromPermissionArn"].write(value.fromPermissionArn)
        try writer["fromPermissionVersion"].write(value.fromPermissionVersion)
        try writer["toPermissionArn"].write(value.toPermissionArn)
    }
}

extension SetDefaultPermissionVersionInput {

    static func write(value: SetDefaultPermissionVersionInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["clientToken"].write(value.clientToken)
        try writer["permissionArn"].write(value.permissionArn)
        try writer["permissionVersion"].write(value.permissionVersion)
    }
}

extension TagResourceInput {

    static func write(value: TagResourceInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["resourceArn"].write(value.resourceArn)
        try writer["resourceShareArn"].write(value.resourceShareArn)
        try writer["tags"].writeList(value.tags, memberWritingClosure: RAMClientTypes.Tag.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension UntagResourceInput {

    static func write(value: UntagResourceInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["resourceArn"].write(value.resourceArn)
        try writer["resourceShareArn"].write(value.resourceShareArn)
        try writer["tagKeys"].writeList(value.tagKeys, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension UpdateResourceShareInput {

    static func write(value: UpdateResourceShareInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["allowExternalPrincipals"].write(value.allowExternalPrincipals)
        try writer["clientToken"].write(value.clientToken)
        try writer["name"].write(value.name)
        try writer["resourceShareArn"].write(value.resourceShareArn)
    }
}

extension AcceptResourceShareInvitationOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> AcceptResourceShareInvitationOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = AcceptResourceShareInvitationOutput()
        value.clientToken = try reader["clientToken"].readIfPresent()
        value.resourceShareInvitation = try reader["resourceShareInvitation"].readIfPresent(with: RAMClientTypes.ResourceShareInvitation.read(from:))
        return value
    }
}

extension AssociateResourceShareOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> AssociateResourceShareOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = AssociateResourceShareOutput()
        value.clientToken = try reader["clientToken"].readIfPresent()
        value.resourceShareAssociations = try reader["resourceShareAssociations"].readListIfPresent(memberReadingClosure: RAMClientTypes.ResourceShareAssociation.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension AssociateResourceSharePermissionOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> AssociateResourceSharePermissionOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = AssociateResourceSharePermissionOutput()
        value.clientToken = try reader["clientToken"].readIfPresent()
        value.returnValue = try reader["returnValue"].readIfPresent()
        return value
    }
}

extension CreatePermissionOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreatePermissionOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreatePermissionOutput()
        value.clientToken = try reader["clientToken"].readIfPresent()
        value.permission = try reader["permission"].readIfPresent(with: RAMClientTypes.ResourceSharePermissionSummary.read(from:))
        return value
    }
}

extension CreatePermissionVersionOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreatePermissionVersionOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreatePermissionVersionOutput()
        value.clientToken = try reader["clientToken"].readIfPresent()
        value.permission = try reader["permission"].readIfPresent(with: RAMClientTypes.ResourceSharePermissionDetail.read(from:))
        return value
    }
}

extension CreateResourceShareOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateResourceShareOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateResourceShareOutput()
        value.clientToken = try reader["clientToken"].readIfPresent()
        value.resourceShare = try reader["resourceShare"].readIfPresent(with: RAMClientTypes.ResourceShare.read(from:))
        return value
    }
}

extension DeletePermissionOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeletePermissionOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DeletePermissionOutput()
        value.clientToken = try reader["clientToken"].readIfPresent()
        value.permissionStatus = try reader["permissionStatus"].readIfPresent()
        value.returnValue = try reader["returnValue"].readIfPresent()
        return value
    }
}

extension DeletePermissionVersionOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeletePermissionVersionOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DeletePermissionVersionOutput()
        value.clientToken = try reader["clientToken"].readIfPresent()
        value.permissionStatus = try reader["permissionStatus"].readIfPresent()
        value.returnValue = try reader["returnValue"].readIfPresent()
        return value
    }
}

extension DeleteResourceShareOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteResourceShareOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DeleteResourceShareOutput()
        value.clientToken = try reader["clientToken"].readIfPresent()
        value.returnValue = try reader["returnValue"].readIfPresent()
        return value
    }
}

extension DisassociateResourceShareOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DisassociateResourceShareOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DisassociateResourceShareOutput()
        value.clientToken = try reader["clientToken"].readIfPresent()
        value.resourceShareAssociations = try reader["resourceShareAssociations"].readListIfPresent(memberReadingClosure: RAMClientTypes.ResourceShareAssociation.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension DisassociateResourceSharePermissionOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DisassociateResourceSharePermissionOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DisassociateResourceSharePermissionOutput()
        value.clientToken = try reader["clientToken"].readIfPresent()
        value.returnValue = try reader["returnValue"].readIfPresent()
        return value
    }
}

extension EnableSharingWithAwsOrganizationOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> EnableSharingWithAwsOrganizationOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = EnableSharingWithAwsOrganizationOutput()
        value.returnValue = try reader["returnValue"].readIfPresent()
        return value
    }
}

extension GetPermissionOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetPermissionOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetPermissionOutput()
        value.permission = try reader["permission"].readIfPresent(with: RAMClientTypes.ResourceSharePermissionDetail.read(from:))
        return value
    }
}

extension GetResourcePoliciesOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetResourcePoliciesOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetResourcePoliciesOutput()
        value.nextToken = try reader["nextToken"].readIfPresent()
        value.policies = try reader["policies"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension GetResourceShareAssociationsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetResourceShareAssociationsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetResourceShareAssociationsOutput()
        value.nextToken = try reader["nextToken"].readIfPresent()
        value.resourceShareAssociations = try reader["resourceShareAssociations"].readListIfPresent(memberReadingClosure: RAMClientTypes.ResourceShareAssociation.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension GetResourceShareInvitationsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetResourceShareInvitationsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetResourceShareInvitationsOutput()
        value.nextToken = try reader["nextToken"].readIfPresent()
        value.resourceShareInvitations = try reader["resourceShareInvitations"].readListIfPresent(memberReadingClosure: RAMClientTypes.ResourceShareInvitation.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension GetResourceSharesOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetResourceSharesOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetResourceSharesOutput()
        value.nextToken = try reader["nextToken"].readIfPresent()
        value.resourceShares = try reader["resourceShares"].readListIfPresent(memberReadingClosure: RAMClientTypes.ResourceShare.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension ListPendingInvitationResourcesOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListPendingInvitationResourcesOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListPendingInvitationResourcesOutput()
        value.nextToken = try reader["nextToken"].readIfPresent()
        value.resources = try reader["resources"].readListIfPresent(memberReadingClosure: RAMClientTypes.Resource.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension ListPermissionAssociationsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListPermissionAssociationsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListPermissionAssociationsOutput()
        value.nextToken = try reader["nextToken"].readIfPresent()
        value.permissions = try reader["permissions"].readListIfPresent(memberReadingClosure: RAMClientTypes.AssociatedPermission.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension ListPermissionsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListPermissionsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListPermissionsOutput()
        value.nextToken = try reader["nextToken"].readIfPresent()
        value.permissions = try reader["permissions"].readListIfPresent(memberReadingClosure: RAMClientTypes.ResourceSharePermissionSummary.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension ListPermissionVersionsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListPermissionVersionsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListPermissionVersionsOutput()
        value.nextToken = try reader["nextToken"].readIfPresent()
        value.permissions = try reader["permissions"].readListIfPresent(memberReadingClosure: RAMClientTypes.ResourceSharePermissionSummary.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension ListPrincipalsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListPrincipalsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListPrincipalsOutput()
        value.nextToken = try reader["nextToken"].readIfPresent()
        value.principals = try reader["principals"].readListIfPresent(memberReadingClosure: RAMClientTypes.Principal.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension ListReplacePermissionAssociationsWorkOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListReplacePermissionAssociationsWorkOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListReplacePermissionAssociationsWorkOutput()
        value.nextToken = try reader["nextToken"].readIfPresent()
        value.replacePermissionAssociationsWorks = try reader["replacePermissionAssociationsWorks"].readListIfPresent(memberReadingClosure: RAMClientTypes.ReplacePermissionAssociationsWork.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension ListResourcesOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListResourcesOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListResourcesOutput()
        value.nextToken = try reader["nextToken"].readIfPresent()
        value.resources = try reader["resources"].readListIfPresent(memberReadingClosure: RAMClientTypes.Resource.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension ListResourceSharePermissionsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListResourceSharePermissionsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListResourceSharePermissionsOutput()
        value.nextToken = try reader["nextToken"].readIfPresent()
        value.permissions = try reader["permissions"].readListIfPresent(memberReadingClosure: RAMClientTypes.ResourceSharePermissionSummary.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension ListResourceTypesOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListResourceTypesOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListResourceTypesOutput()
        value.nextToken = try reader["nextToken"].readIfPresent()
        value.resourceTypes = try reader["resourceTypes"].readListIfPresent(memberReadingClosure: RAMClientTypes.ServiceNameAndResourceType.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension PromotePermissionCreatedFromPolicyOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> PromotePermissionCreatedFromPolicyOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = PromotePermissionCreatedFromPolicyOutput()
        value.clientToken = try reader["clientToken"].readIfPresent()
        value.permission = try reader["permission"].readIfPresent(with: RAMClientTypes.ResourceSharePermissionSummary.read(from:))
        return value
    }
}

extension PromoteResourceShareCreatedFromPolicyOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> PromoteResourceShareCreatedFromPolicyOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = PromoteResourceShareCreatedFromPolicyOutput()
        value.returnValue = try reader["returnValue"].readIfPresent()
        return value
    }
}

extension RejectResourceShareInvitationOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> RejectResourceShareInvitationOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = RejectResourceShareInvitationOutput()
        value.clientToken = try reader["clientToken"].readIfPresent()
        value.resourceShareInvitation = try reader["resourceShareInvitation"].readIfPresent(with: RAMClientTypes.ResourceShareInvitation.read(from:))
        return value
    }
}

extension ReplacePermissionAssociationsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ReplacePermissionAssociationsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ReplacePermissionAssociationsOutput()
        value.clientToken = try reader["clientToken"].readIfPresent()
        value.replacePermissionAssociationsWork = try reader["replacePermissionAssociationsWork"].readIfPresent(with: RAMClientTypes.ReplacePermissionAssociationsWork.read(from:))
        return value
    }
}

extension SetDefaultPermissionVersionOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> SetDefaultPermissionVersionOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = SetDefaultPermissionVersionOutput()
        value.clientToken = try reader["clientToken"].readIfPresent()
        value.returnValue = try reader["returnValue"].readIfPresent()
        return value
    }
}

extension TagResourceOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> TagResourceOutput {
        return TagResourceOutput()
    }
}

extension UntagResourceOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UntagResourceOutput {
        return UntagResourceOutput()
    }
}

extension UpdateResourceShareOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdateResourceShareOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = UpdateResourceShareOutput()
        value.clientToken = try reader["clientToken"].readIfPresent()
        value.resourceShare = try reader["resourceShare"].readIfPresent(with: RAMClientTypes.ResourceShare.read(from:))
        return value
    }
}

enum AcceptResourceShareInvitationOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "IdempotentParameterMismatch": return try IdempotentParameterMismatchException.makeError(baseError: baseError)
            case "InvalidClientToken": return try InvalidClientTokenException.makeError(baseError: baseError)
            case "InvalidArn.Malformed": return try MalformedArnException.makeError(baseError: baseError)
            case "OperationNotPermitted": return try OperationNotPermittedException.makeError(baseError: baseError)
            case "InvalidResourceShareInvitationArn.AlreadyAccepted": return try ResourceShareInvitationAlreadyAcceptedException.makeError(baseError: baseError)
            case "InvalidResourceShareInvitationArn.AlreadyRejected": return try ResourceShareInvitationAlreadyRejectedException.makeError(baseError: baseError)
            case "InvalidResourceShareInvitationArn.NotFound": return try ResourceShareInvitationArnNotFoundException.makeError(baseError: baseError)
            case "InvalidResourceShareInvitationArn.Expired": return try ResourceShareInvitationExpiredException.makeError(baseError: baseError)
            case "InternalError": return try ServerInternalException.makeError(baseError: baseError)
            case "Unavailable": return try ServiceUnavailableException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum AssociateResourceShareOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "IdempotentParameterMismatch": return try IdempotentParameterMismatchException.makeError(baseError: baseError)
            case "InvalidClientToken": return try InvalidClientTokenException.makeError(baseError: baseError)
            case "InvalidParameter": return try InvalidParameterException.makeError(baseError: baseError)
            case "InvalidStateTransitionException.Unknown": return try InvalidStateTransitionException.makeError(baseError: baseError)
            case "InvalidArn.Malformed": return try MalformedArnException.makeError(baseError: baseError)
            case "OperationNotPermitted": return try OperationNotPermittedException.makeError(baseError: baseError)
            case "ResourceShareLimitExceeded": return try ResourceShareLimitExceededException.makeError(baseError: baseError)
            case "InternalError": return try ServerInternalException.makeError(baseError: baseError)
            case "Unavailable": return try ServiceUnavailableException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "InvalidResourceShareArn.NotFound": return try UnknownResourceException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum AssociateResourceSharePermissionOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InvalidClientToken": return try InvalidClientTokenException.makeError(baseError: baseError)
            case "InvalidParameter": return try InvalidParameterException.makeError(baseError: baseError)
            case "InvalidArn.Malformed": return try MalformedArnException.makeError(baseError: baseError)
            case "OperationNotPermitted": return try OperationNotPermittedException.makeError(baseError: baseError)
            case "InternalError": return try ServerInternalException.makeError(baseError: baseError)
            case "Unavailable": return try ServiceUnavailableException.makeError(baseError: baseError)
            case "InvalidResourceShareArn.NotFound": return try UnknownResourceException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreatePermissionOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "IdempotentParameterMismatch": return try IdempotentParameterMismatchException.makeError(baseError: baseError)
            case "InvalidClientToken": return try InvalidClientTokenException.makeError(baseError: baseError)
            case "InvalidParameter": return try InvalidParameterException.makeError(baseError: baseError)
            case "InvalidPolicy": return try InvalidPolicyException.makeError(baseError: baseError)
            case "MalformedPolicyTemplateException": return try MalformedPolicyTemplateException.makeError(baseError: baseError)
            case "OperationNotPermitted": return try OperationNotPermittedException.makeError(baseError: baseError)
            case "PermissionAlreadyExistsException": return try PermissionAlreadyExistsException.makeError(baseError: baseError)
            case "PermissionLimitExceededException": return try PermissionLimitExceededException.makeError(baseError: baseError)
            case "InternalError": return try ServerInternalException.makeError(baseError: baseError)
            case "Unavailable": return try ServiceUnavailableException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreatePermissionVersionOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "IdempotentParameterMismatch": return try IdempotentParameterMismatchException.makeError(baseError: baseError)
            case "InvalidClientToken": return try InvalidClientTokenException.makeError(baseError: baseError)
            case "InvalidParameter": return try InvalidParameterException.makeError(baseError: baseError)
            case "InvalidPolicy": return try InvalidPolicyException.makeError(baseError: baseError)
            case "InvalidArn.Malformed": return try MalformedArnException.makeError(baseError: baseError)
            case "MalformedPolicyTemplateException": return try MalformedPolicyTemplateException.makeError(baseError: baseError)
            case "PermissionVersionsLimitExceededException": return try PermissionVersionsLimitExceededException.makeError(baseError: baseError)
            case "InternalError": return try ServerInternalException.makeError(baseError: baseError)
            case "Unavailable": return try ServiceUnavailableException.makeError(baseError: baseError)
            case "InvalidResourceShareArn.NotFound": return try UnknownResourceException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateResourceShareOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "IdempotentParameterMismatch": return try IdempotentParameterMismatchException.makeError(baseError: baseError)
            case "InvalidClientToken": return try InvalidClientTokenException.makeError(baseError: baseError)
            case "InvalidParameter": return try InvalidParameterException.makeError(baseError: baseError)
            case "InvalidStateTransitionException.Unknown": return try InvalidStateTransitionException.makeError(baseError: baseError)
            case "InvalidArn.Malformed": return try MalformedArnException.makeError(baseError: baseError)
            case "OperationNotPermitted": return try OperationNotPermittedException.makeError(baseError: baseError)
            case "ResourceShareLimitExceeded": return try ResourceShareLimitExceededException.makeError(baseError: baseError)
            case "InternalError": return try ServerInternalException.makeError(baseError: baseError)
            case "Unavailable": return try ServiceUnavailableException.makeError(baseError: baseError)
            case "TagLimitExceeded": return try TagLimitExceededException.makeError(baseError: baseError)
            case "TagPolicyViolation": return try TagPolicyViolationException.makeError(baseError: baseError)
            case "InvalidResourceShareArn.NotFound": return try UnknownResourceException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeletePermissionOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "IdempotentParameterMismatch": return try IdempotentParameterMismatchException.makeError(baseError: baseError)
            case "InvalidClientToken": return try InvalidClientTokenException.makeError(baseError: baseError)
            case "InvalidArn.Malformed": return try MalformedArnException.makeError(baseError: baseError)
            case "OperationNotPermitted": return try OperationNotPermittedException.makeError(baseError: baseError)
            case "InternalError": return try ServerInternalException.makeError(baseError: baseError)
            case "Unavailable": return try ServiceUnavailableException.makeError(baseError: baseError)
            case "InvalidResourceShareArn.NotFound": return try UnknownResourceException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeletePermissionVersionOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "IdempotentParameterMismatch": return try IdempotentParameterMismatchException.makeError(baseError: baseError)
            case "InvalidClientToken": return try InvalidClientTokenException.makeError(baseError: baseError)
            case "InvalidParameter": return try InvalidParameterException.makeError(baseError: baseError)
            case "InvalidArn.Malformed": return try MalformedArnException.makeError(baseError: baseError)
            case "OperationNotPermitted": return try OperationNotPermittedException.makeError(baseError: baseError)
            case "InternalError": return try ServerInternalException.makeError(baseError: baseError)
            case "Unavailable": return try ServiceUnavailableException.makeError(baseError: baseError)
            case "InvalidResourceShareArn.NotFound": return try UnknownResourceException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteResourceShareOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "IdempotentParameterMismatch": return try IdempotentParameterMismatchException.makeError(baseError: baseError)
            case "InvalidClientToken": return try InvalidClientTokenException.makeError(baseError: baseError)
            case "InvalidParameter": return try InvalidParameterException.makeError(baseError: baseError)
            case "InvalidStateTransitionException.Unknown": return try InvalidStateTransitionException.makeError(baseError: baseError)
            case "InvalidArn.Malformed": return try MalformedArnException.makeError(baseError: baseError)
            case "OperationNotPermitted": return try OperationNotPermittedException.makeError(baseError: baseError)
            case "InternalError": return try ServerInternalException.makeError(baseError: baseError)
            case "Unavailable": return try ServiceUnavailableException.makeError(baseError: baseError)
            case "InvalidResourceShareArn.NotFound": return try UnknownResourceException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DisassociateResourceShareOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "IdempotentParameterMismatch": return try IdempotentParameterMismatchException.makeError(baseError: baseError)
            case "InvalidClientToken": return try InvalidClientTokenException.makeError(baseError: baseError)
            case "InvalidParameter": return try InvalidParameterException.makeError(baseError: baseError)
            case "InvalidStateTransitionException.Unknown": return try InvalidStateTransitionException.makeError(baseError: baseError)
            case "InvalidArn.Malformed": return try MalformedArnException.makeError(baseError: baseError)
            case "OperationNotPermitted": return try OperationNotPermittedException.makeError(baseError: baseError)
            case "ResourceShareLimitExceeded": return try ResourceShareLimitExceededException.makeError(baseError: baseError)
            case "InternalError": return try ServerInternalException.makeError(baseError: baseError)
            case "Unavailable": return try ServiceUnavailableException.makeError(baseError: baseError)
            case "InvalidResourceShareArn.NotFound": return try UnknownResourceException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DisassociateResourceSharePermissionOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InvalidClientToken": return try InvalidClientTokenException.makeError(baseError: baseError)
            case "InvalidParameter": return try InvalidParameterException.makeError(baseError: baseError)
            case "InvalidStateTransitionException.Unknown": return try InvalidStateTransitionException.makeError(baseError: baseError)
            case "InvalidArn.Malformed": return try MalformedArnException.makeError(baseError: baseError)
            case "OperationNotPermitted": return try OperationNotPermittedException.makeError(baseError: baseError)
            case "InternalError": return try ServerInternalException.makeError(baseError: baseError)
            case "Unavailable": return try ServiceUnavailableException.makeError(baseError: baseError)
            case "InvalidResourceShareArn.NotFound": return try UnknownResourceException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum EnableSharingWithAwsOrganizationOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "OperationNotPermitted": return try OperationNotPermittedException.makeError(baseError: baseError)
            case "InternalError": return try ServerInternalException.makeError(baseError: baseError)
            case "Unavailable": return try ServiceUnavailableException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetPermissionOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InvalidParameter": return try InvalidParameterException.makeError(baseError: baseError)
            case "InvalidArn.Malformed": return try MalformedArnException.makeError(baseError: baseError)
            case "OperationNotPermitted": return try OperationNotPermittedException.makeError(baseError: baseError)
            case "InternalError": return try ServerInternalException.makeError(baseError: baseError)
            case "Unavailable": return try ServiceUnavailableException.makeError(baseError: baseError)
            case "InvalidResourceShareArn.NotFound": return try UnknownResourceException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetResourcePoliciesOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InvalidNextToken": return try InvalidNextTokenException.makeError(baseError: baseError)
            case "InvalidParameter": return try InvalidParameterException.makeError(baseError: baseError)
            case "InvalidArn.Malformed": return try MalformedArnException.makeError(baseError: baseError)
            case "InvalidResourceArn.NotFound": return try ResourceArnNotFoundException.makeError(baseError: baseError)
            case "InternalError": return try ServerInternalException.makeError(baseError: baseError)
            case "Unavailable": return try ServiceUnavailableException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetResourceShareAssociationsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InvalidNextToken": return try InvalidNextTokenException.makeError(baseError: baseError)
            case "InvalidParameter": return try InvalidParameterException.makeError(baseError: baseError)
            case "InvalidArn.Malformed": return try MalformedArnException.makeError(baseError: baseError)
            case "OperationNotPermitted": return try OperationNotPermittedException.makeError(baseError: baseError)
            case "InternalError": return try ServerInternalException.makeError(baseError: baseError)
            case "Unavailable": return try ServiceUnavailableException.makeError(baseError: baseError)
            case "InvalidResourceShareArn.NotFound": return try UnknownResourceException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetResourceShareInvitationsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InvalidMaxResults": return try InvalidMaxResultsException.makeError(baseError: baseError)
            case "InvalidNextToken": return try InvalidNextTokenException.makeError(baseError: baseError)
            case "InvalidParameter": return try InvalidParameterException.makeError(baseError: baseError)
            case "InvalidArn.Malformed": return try MalformedArnException.makeError(baseError: baseError)
            case "InvalidResourceShareInvitationArn.NotFound": return try ResourceShareInvitationArnNotFoundException.makeError(baseError: baseError)
            case "InternalError": return try ServerInternalException.makeError(baseError: baseError)
            case "Unavailable": return try ServiceUnavailableException.makeError(baseError: baseError)
            case "InvalidResourceShareArn.NotFound": return try UnknownResourceException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetResourceSharesOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InvalidNextToken": return try InvalidNextTokenException.makeError(baseError: baseError)
            case "InvalidParameter": return try InvalidParameterException.makeError(baseError: baseError)
            case "InvalidArn.Malformed": return try MalformedArnException.makeError(baseError: baseError)
            case "InternalError": return try ServerInternalException.makeError(baseError: baseError)
            case "Unavailable": return try ServiceUnavailableException.makeError(baseError: baseError)
            case "InvalidResourceShareArn.NotFound": return try UnknownResourceException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListPendingInvitationResourcesOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InvalidNextToken": return try InvalidNextTokenException.makeError(baseError: baseError)
            case "InvalidParameter": return try InvalidParameterException.makeError(baseError: baseError)
            case "InvalidArn.Malformed": return try MalformedArnException.makeError(baseError: baseError)
            case "MissingRequiredParameter": return try MissingRequiredParameterException.makeError(baseError: baseError)
            case "InvalidResourceShareInvitationArn.AlreadyRejected": return try ResourceShareInvitationAlreadyRejectedException.makeError(baseError: baseError)
            case "InvalidResourceShareInvitationArn.NotFound": return try ResourceShareInvitationArnNotFoundException.makeError(baseError: baseError)
            case "InvalidResourceShareInvitationArn.Expired": return try ResourceShareInvitationExpiredException.makeError(baseError: baseError)
            case "InternalError": return try ServerInternalException.makeError(baseError: baseError)
            case "Unavailable": return try ServiceUnavailableException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListPermissionAssociationsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InvalidNextToken": return try InvalidNextTokenException.makeError(baseError: baseError)
            case "InvalidParameter": return try InvalidParameterException.makeError(baseError: baseError)
            case "InvalidArn.Malformed": return try MalformedArnException.makeError(baseError: baseError)
            case "InternalError": return try ServerInternalException.makeError(baseError: baseError)
            case "Unavailable": return try ServiceUnavailableException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListPermissionsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InvalidNextToken": return try InvalidNextTokenException.makeError(baseError: baseError)
            case "InvalidParameter": return try InvalidParameterException.makeError(baseError: baseError)
            case "OperationNotPermitted": return try OperationNotPermittedException.makeError(baseError: baseError)
            case "InternalError": return try ServerInternalException.makeError(baseError: baseError)
            case "Unavailable": return try ServiceUnavailableException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListPermissionVersionsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InvalidNextToken": return try InvalidNextTokenException.makeError(baseError: baseError)
            case "InvalidParameter": return try InvalidParameterException.makeError(baseError: baseError)
            case "InvalidArn.Malformed": return try MalformedArnException.makeError(baseError: baseError)
            case "OperationNotPermitted": return try OperationNotPermittedException.makeError(baseError: baseError)
            case "InternalError": return try ServerInternalException.makeError(baseError: baseError)
            case "Unavailable": return try ServiceUnavailableException.makeError(baseError: baseError)
            case "InvalidResourceShareArn.NotFound": return try UnknownResourceException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListPrincipalsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InvalidNextToken": return try InvalidNextTokenException.makeError(baseError: baseError)
            case "InvalidParameter": return try InvalidParameterException.makeError(baseError: baseError)
            case "InvalidArn.Malformed": return try MalformedArnException.makeError(baseError: baseError)
            case "InternalError": return try ServerInternalException.makeError(baseError: baseError)
            case "Unavailable": return try ServiceUnavailableException.makeError(baseError: baseError)
            case "InvalidResourceShareArn.NotFound": return try UnknownResourceException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListReplacePermissionAssociationsWorkOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InvalidNextToken": return try InvalidNextTokenException.makeError(baseError: baseError)
            case "InvalidParameter": return try InvalidParameterException.makeError(baseError: baseError)
            case "InternalError": return try ServerInternalException.makeError(baseError: baseError)
            case "Unavailable": return try ServiceUnavailableException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListResourcesOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InvalidNextToken": return try InvalidNextTokenException.makeError(baseError: baseError)
            case "InvalidParameter": return try InvalidParameterException.makeError(baseError: baseError)
            case "InvalidResourceType.Unknown": return try InvalidResourceTypeException.makeError(baseError: baseError)
            case "InvalidArn.Malformed": return try MalformedArnException.makeError(baseError: baseError)
            case "InternalError": return try ServerInternalException.makeError(baseError: baseError)
            case "Unavailable": return try ServiceUnavailableException.makeError(baseError: baseError)
            case "InvalidResourceShareArn.NotFound": return try UnknownResourceException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListResourceSharePermissionsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InvalidNextToken": return try InvalidNextTokenException.makeError(baseError: baseError)
            case "InvalidParameter": return try InvalidParameterException.makeError(baseError: baseError)
            case "InvalidArn.Malformed": return try MalformedArnException.makeError(baseError: baseError)
            case "OperationNotPermitted": return try OperationNotPermittedException.makeError(baseError: baseError)
            case "InternalError": return try ServerInternalException.makeError(baseError: baseError)
            case "Unavailable": return try ServiceUnavailableException.makeError(baseError: baseError)
            case "InvalidResourceShareArn.NotFound": return try UnknownResourceException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListResourceTypesOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InvalidNextToken": return try InvalidNextTokenException.makeError(baseError: baseError)
            case "InvalidParameter": return try InvalidParameterException.makeError(baseError: baseError)
            case "InternalError": return try ServerInternalException.makeError(baseError: baseError)
            case "Unavailable": return try ServiceUnavailableException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum PromotePermissionCreatedFromPolicyOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InvalidParameter": return try InvalidParameterException.makeError(baseError: baseError)
            case "InvalidArn.Malformed": return try MalformedArnException.makeError(baseError: baseError)
            case "MissingRequiredParameter": return try MissingRequiredParameterException.makeError(baseError: baseError)
            case "OperationNotPermitted": return try OperationNotPermittedException.makeError(baseError: baseError)
            case "InternalError": return try ServerInternalException.makeError(baseError: baseError)
            case "Unavailable": return try ServiceUnavailableException.makeError(baseError: baseError)
            case "InvalidResourceShareArn.NotFound": return try UnknownResourceException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum PromoteResourceShareCreatedFromPolicyOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InvalidParameter": return try InvalidParameterException.makeError(baseError: baseError)
            case "InvalidStateTransitionException.Unknown": return try InvalidStateTransitionException.makeError(baseError: baseError)
            case "InvalidArn.Malformed": return try MalformedArnException.makeError(baseError: baseError)
            case "MissingRequiredParameter": return try MissingRequiredParameterException.makeError(baseError: baseError)
            case "OperationNotPermitted": return try OperationNotPermittedException.makeError(baseError: baseError)
            case "ResourceShareLimitExceeded": return try ResourceShareLimitExceededException.makeError(baseError: baseError)
            case "InternalError": return try ServerInternalException.makeError(baseError: baseError)
            case "Unavailable": return try ServiceUnavailableException.makeError(baseError: baseError)
            case "InvalidResourceShareArn.NotFound": return try UnknownResourceException.makeError(baseError: baseError)
            case "UnmatchedPolicyPermissionException": return try UnmatchedPolicyPermissionException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum RejectResourceShareInvitationOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "IdempotentParameterMismatch": return try IdempotentParameterMismatchException.makeError(baseError: baseError)
            case "InvalidClientToken": return try InvalidClientTokenException.makeError(baseError: baseError)
            case "InvalidArn.Malformed": return try MalformedArnException.makeError(baseError: baseError)
            case "OperationNotPermitted": return try OperationNotPermittedException.makeError(baseError: baseError)
            case "InvalidResourceShareInvitationArn.AlreadyAccepted": return try ResourceShareInvitationAlreadyAcceptedException.makeError(baseError: baseError)
            case "InvalidResourceShareInvitationArn.AlreadyRejected": return try ResourceShareInvitationAlreadyRejectedException.makeError(baseError: baseError)
            case "InvalidResourceShareInvitationArn.NotFound": return try ResourceShareInvitationArnNotFoundException.makeError(baseError: baseError)
            case "InvalidResourceShareInvitationArn.Expired": return try ResourceShareInvitationExpiredException.makeError(baseError: baseError)
            case "InternalError": return try ServerInternalException.makeError(baseError: baseError)
            case "Unavailable": return try ServiceUnavailableException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ReplacePermissionAssociationsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "IdempotentParameterMismatch": return try IdempotentParameterMismatchException.makeError(baseError: baseError)
            case "InvalidClientToken": return try InvalidClientTokenException.makeError(baseError: baseError)
            case "InvalidParameter": return try InvalidParameterException.makeError(baseError: baseError)
            case "InvalidArn.Malformed": return try MalformedArnException.makeError(baseError: baseError)
            case "OperationNotPermitted": return try OperationNotPermittedException.makeError(baseError: baseError)
            case "InternalError": return try ServerInternalException.makeError(baseError: baseError)
            case "Unavailable": return try ServiceUnavailableException.makeError(baseError: baseError)
            case "InvalidResourceShareArn.NotFound": return try UnknownResourceException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum SetDefaultPermissionVersionOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "IdempotentParameterMismatch": return try IdempotentParameterMismatchException.makeError(baseError: baseError)
            case "InvalidClientToken": return try InvalidClientTokenException.makeError(baseError: baseError)
            case "InvalidParameter": return try InvalidParameterException.makeError(baseError: baseError)
            case "InvalidArn.Malformed": return try MalformedArnException.makeError(baseError: baseError)
            case "InternalError": return try ServerInternalException.makeError(baseError: baseError)
            case "Unavailable": return try ServiceUnavailableException.makeError(baseError: baseError)
            case "InvalidResourceShareArn.NotFound": return try UnknownResourceException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum TagResourceOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InvalidParameter": return try InvalidParameterException.makeError(baseError: baseError)
            case "InvalidArn.Malformed": return try MalformedArnException.makeError(baseError: baseError)
            case "InvalidResourceArn.NotFound": return try ResourceArnNotFoundException.makeError(baseError: baseError)
            case "InternalError": return try ServerInternalException.makeError(baseError: baseError)
            case "Unavailable": return try ServiceUnavailableException.makeError(baseError: baseError)
            case "TagLimitExceeded": return try TagLimitExceededException.makeError(baseError: baseError)
            case "TagPolicyViolation": return try TagPolicyViolationException.makeError(baseError: baseError)
            case "InvalidResourceShareArn.NotFound": return try UnknownResourceException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UntagResourceOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InvalidParameter": return try InvalidParameterException.makeError(baseError: baseError)
            case "InvalidArn.Malformed": return try MalformedArnException.makeError(baseError: baseError)
            case "InternalError": return try ServerInternalException.makeError(baseError: baseError)
            case "Unavailable": return try ServiceUnavailableException.makeError(baseError: baseError)
            case "InvalidResourceShareArn.NotFound": return try UnknownResourceException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdateResourceShareOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "IdempotentParameterMismatch": return try IdempotentParameterMismatchException.makeError(baseError: baseError)
            case "InvalidClientToken": return try InvalidClientTokenException.makeError(baseError: baseError)
            case "InvalidParameter": return try InvalidParameterException.makeError(baseError: baseError)
            case "InvalidArn.Malformed": return try MalformedArnException.makeError(baseError: baseError)
            case "MissingRequiredParameter": return try MissingRequiredParameterException.makeError(baseError: baseError)
            case "OperationNotPermitted": return try OperationNotPermittedException.makeError(baseError: baseError)
            case "InternalError": return try ServerInternalException.makeError(baseError: baseError)
            case "Unavailable": return try ServiceUnavailableException.makeError(baseError: baseError)
            case "InvalidResourceShareArn.NotFound": return try UnknownResourceException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

extension IdempotentParameterMismatchException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> IdempotentParameterMismatchException {
        let reader = baseError.errorBodyReader
        var value = IdempotentParameterMismatchException()
        value.properties.message = try reader["message"].readIfPresent() ?? ""
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension MalformedArnException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> MalformedArnException {
        let reader = baseError.errorBodyReader
        var value = MalformedArnException()
        value.properties.message = try reader["message"].readIfPresent() ?? ""
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ResourceShareInvitationAlreadyAcceptedException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> ResourceShareInvitationAlreadyAcceptedException {
        let reader = baseError.errorBodyReader
        var value = ResourceShareInvitationAlreadyAcceptedException()
        value.properties.message = try reader["message"].readIfPresent() ?? ""
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension OperationNotPermittedException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> OperationNotPermittedException {
        let reader = baseError.errorBodyReader
        var value = OperationNotPermittedException()
        value.properties.message = try reader["message"].readIfPresent() ?? ""
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ResourceShareInvitationArnNotFoundException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> ResourceShareInvitationArnNotFoundException {
        let reader = baseError.errorBodyReader
        var value = ResourceShareInvitationArnNotFoundException()
        value.properties.message = try reader["message"].readIfPresent() ?? ""
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ResourceShareInvitationAlreadyRejectedException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> ResourceShareInvitationAlreadyRejectedException {
        let reader = baseError.errorBodyReader
        var value = ResourceShareInvitationAlreadyRejectedException()
        value.properties.message = try reader["message"].readIfPresent() ?? ""
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ResourceShareInvitationExpiredException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> ResourceShareInvitationExpiredException {
        let reader = baseError.errorBodyReader
        var value = ResourceShareInvitationExpiredException()
        value.properties.message = try reader["message"].readIfPresent() ?? ""
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ServerInternalException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> ServerInternalException {
        let reader = baseError.errorBodyReader
        var value = ServerInternalException()
        value.properties.message = try reader["message"].readIfPresent() ?? ""
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension InvalidClientTokenException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> InvalidClientTokenException {
        let reader = baseError.errorBodyReader
        var value = InvalidClientTokenException()
        value.properties.message = try reader["message"].readIfPresent() ?? ""
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ServiceUnavailableException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> ServiceUnavailableException {
        let reader = baseError.errorBodyReader
        var value = ServiceUnavailableException()
        value.properties.message = try reader["message"].readIfPresent() ?? ""
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ResourceShareLimitExceededException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> ResourceShareLimitExceededException {
        let reader = baseError.errorBodyReader
        var value = ResourceShareLimitExceededException()
        value.properties.message = try reader["message"].readIfPresent() ?? ""
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension UnknownResourceException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> UnknownResourceException {
        let reader = baseError.errorBodyReader
        var value = UnknownResourceException()
        value.properties.message = try reader["message"].readIfPresent() ?? ""
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension InvalidStateTransitionException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> InvalidStateTransitionException {
        let reader = baseError.errorBodyReader
        var value = InvalidStateTransitionException()
        value.properties.message = try reader["message"].readIfPresent() ?? ""
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension InvalidParameterException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> InvalidParameterException {
        let reader = baseError.errorBodyReader
        var value = InvalidParameterException()
        value.properties.message = try reader["message"].readIfPresent() ?? ""
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ThrottlingException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> ThrottlingException {
        let reader = baseError.errorBodyReader
        var value = ThrottlingException()
        value.properties.message = try reader["message"].readIfPresent() ?? ""
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension PermissionAlreadyExistsException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> PermissionAlreadyExistsException {
        let reader = baseError.errorBodyReader
        var value = PermissionAlreadyExistsException()
        value.properties.message = try reader["message"].readIfPresent() ?? ""
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension InvalidPolicyException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> InvalidPolicyException {
        let reader = baseError.errorBodyReader
        var value = InvalidPolicyException()
        value.properties.message = try reader["message"].readIfPresent() ?? ""
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension PermissionLimitExceededException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> PermissionLimitExceededException {
        let reader = baseError.errorBodyReader
        var value = PermissionLimitExceededException()
        value.properties.message = try reader["message"].readIfPresent() ?? ""
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension MalformedPolicyTemplateException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> MalformedPolicyTemplateException {
        let reader = baseError.errorBodyReader
        var value = MalformedPolicyTemplateException()
        value.properties.message = try reader["message"].readIfPresent() ?? ""
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension PermissionVersionsLimitExceededException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> PermissionVersionsLimitExceededException {
        let reader = baseError.errorBodyReader
        var value = PermissionVersionsLimitExceededException()
        value.properties.message = try reader["message"].readIfPresent() ?? ""
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension TagPolicyViolationException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> TagPolicyViolationException {
        let reader = baseError.errorBodyReader
        var value = TagPolicyViolationException()
        value.properties.message = try reader["message"].readIfPresent() ?? ""
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension TagLimitExceededException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> TagLimitExceededException {
        let reader = baseError.errorBodyReader
        var value = TagLimitExceededException()
        value.properties.message = try reader["message"].readIfPresent() ?? ""
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension InvalidNextTokenException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> InvalidNextTokenException {
        let reader = baseError.errorBodyReader
        var value = InvalidNextTokenException()
        value.properties.message = try reader["message"].readIfPresent() ?? ""
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ResourceArnNotFoundException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> ResourceArnNotFoundException {
        let reader = baseError.errorBodyReader
        var value = ResourceArnNotFoundException()
        value.properties.message = try reader["message"].readIfPresent() ?? ""
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension InvalidMaxResultsException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> InvalidMaxResultsException {
        let reader = baseError.errorBodyReader
        var value = InvalidMaxResultsException()
        value.properties.message = try reader["message"].readIfPresent() ?? ""
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension MissingRequiredParameterException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> MissingRequiredParameterException {
        let reader = baseError.errorBodyReader
        var value = MissingRequiredParameterException()
        value.properties.message = try reader["message"].readIfPresent() ?? ""
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension InvalidResourceTypeException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> InvalidResourceTypeException {
        let reader = baseError.errorBodyReader
        var value = InvalidResourceTypeException()
        value.properties.message = try reader["message"].readIfPresent() ?? ""
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension UnmatchedPolicyPermissionException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> UnmatchedPolicyPermissionException {
        let reader = baseError.errorBodyReader
        var value = UnmatchedPolicyPermissionException()
        value.properties.message = try reader["message"].readIfPresent() ?? ""
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension RAMClientTypes.ResourceShareInvitation {

    static func read(from reader: SmithyJSON.Reader) throws -> RAMClientTypes.ResourceShareInvitation {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = RAMClientTypes.ResourceShareInvitation()
        value.resourceShareInvitationArn = try reader["resourceShareInvitationArn"].readIfPresent()
        value.resourceShareName = try reader["resourceShareName"].readIfPresent()
        value.resourceShareArn = try reader["resourceShareArn"].readIfPresent()
        value.senderAccountId = try reader["senderAccountId"].readIfPresent()
        value.receiverAccountId = try reader["receiverAccountId"].readIfPresent()
        value.invitationTimestamp = try reader["invitationTimestamp"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.status = try reader["status"].readIfPresent()
        value.resourceShareAssociations = try reader["resourceShareAssociations"].readListIfPresent(memberReadingClosure: RAMClientTypes.ResourceShareAssociation.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.receiverArn = try reader["receiverArn"].readIfPresent()
        return value
    }
}

extension RAMClientTypes.ResourceShareAssociation {

    static func read(from reader: SmithyJSON.Reader) throws -> RAMClientTypes.ResourceShareAssociation {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = RAMClientTypes.ResourceShareAssociation()
        value.resourceShareArn = try reader["resourceShareArn"].readIfPresent()
        value.resourceShareName = try reader["resourceShareName"].readIfPresent()
        value.associatedEntity = try reader["associatedEntity"].readIfPresent()
        value.associationType = try reader["associationType"].readIfPresent()
        value.status = try reader["status"].readIfPresent()
        value.statusMessage = try reader["statusMessage"].readIfPresent()
        value.creationTime = try reader["creationTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.lastUpdatedTime = try reader["lastUpdatedTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.external = try reader["external"].readIfPresent()
        return value
    }
}

extension RAMClientTypes.ResourceSharePermissionSummary {

    static func read(from reader: SmithyJSON.Reader) throws -> RAMClientTypes.ResourceSharePermissionSummary {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = RAMClientTypes.ResourceSharePermissionSummary()
        value.arn = try reader["arn"].readIfPresent()
        value.version = try reader["version"].readIfPresent()
        value.defaultVersion = try reader["defaultVersion"].readIfPresent()
        value.name = try reader["name"].readIfPresent()
        value.resourceType = try reader["resourceType"].readIfPresent()
        value.status = try reader["status"].readIfPresent()
        value.creationTime = try reader["creationTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.lastUpdatedTime = try reader["lastUpdatedTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.isResourceTypeDefault = try reader["isResourceTypeDefault"].readIfPresent()
        value.permissionType = try reader["permissionType"].readIfPresent()
        value.featureSet = try reader["featureSet"].readIfPresent()
        value.tags = try reader["tags"].readListIfPresent(memberReadingClosure: RAMClientTypes.Tag.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension RAMClientTypes.Tag {

    static func write(value: RAMClientTypes.Tag?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["key"].write(value.key)
        try writer["value"].write(value.value)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> RAMClientTypes.Tag {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = RAMClientTypes.Tag()
        value.key = try reader["key"].readIfPresent()
        value.value = try reader["value"].readIfPresent()
        return value
    }
}

extension RAMClientTypes.ResourceSharePermissionDetail {

    static func read(from reader: SmithyJSON.Reader) throws -> RAMClientTypes.ResourceSharePermissionDetail {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = RAMClientTypes.ResourceSharePermissionDetail()
        value.arn = try reader["arn"].readIfPresent()
        value.version = try reader["version"].readIfPresent()
        value.defaultVersion = try reader["defaultVersion"].readIfPresent()
        value.name = try reader["name"].readIfPresent()
        value.resourceType = try reader["resourceType"].readIfPresent()
        value.permission = try reader["permission"].readIfPresent()
        value.creationTime = try reader["creationTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.lastUpdatedTime = try reader["lastUpdatedTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.isResourceTypeDefault = try reader["isResourceTypeDefault"].readIfPresent()
        value.permissionType = try reader["permissionType"].readIfPresent()
        value.featureSet = try reader["featureSet"].readIfPresent()
        value.status = try reader["status"].readIfPresent()
        value.tags = try reader["tags"].readListIfPresent(memberReadingClosure: RAMClientTypes.Tag.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension RAMClientTypes.ResourceShare {

    static func read(from reader: SmithyJSON.Reader) throws -> RAMClientTypes.ResourceShare {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = RAMClientTypes.ResourceShare()
        value.resourceShareArn = try reader["resourceShareArn"].readIfPresent()
        value.name = try reader["name"].readIfPresent()
        value.owningAccountId = try reader["owningAccountId"].readIfPresent()
        value.allowExternalPrincipals = try reader["allowExternalPrincipals"].readIfPresent()
        value.status = try reader["status"].readIfPresent()
        value.statusMessage = try reader["statusMessage"].readIfPresent()
        value.tags = try reader["tags"].readListIfPresent(memberReadingClosure: RAMClientTypes.Tag.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.creationTime = try reader["creationTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.lastUpdatedTime = try reader["lastUpdatedTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.featureSet = try reader["featureSet"].readIfPresent()
        return value
    }
}

extension RAMClientTypes.Resource {

    static func read(from reader: SmithyJSON.Reader) throws -> RAMClientTypes.Resource {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = RAMClientTypes.Resource()
        value.arn = try reader["arn"].readIfPresent()
        value.type = try reader["type"].readIfPresent()
        value.resourceShareArn = try reader["resourceShareArn"].readIfPresent()
        value.resourceGroupArn = try reader["resourceGroupArn"].readIfPresent()
        value.status = try reader["status"].readIfPresent()
        value.statusMessage = try reader["statusMessage"].readIfPresent()
        value.creationTime = try reader["creationTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.lastUpdatedTime = try reader["lastUpdatedTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.resourceRegionScope = try reader["resourceRegionScope"].readIfPresent()
        return value
    }
}

extension RAMClientTypes.AssociatedPermission {

    static func read(from reader: SmithyJSON.Reader) throws -> RAMClientTypes.AssociatedPermission {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = RAMClientTypes.AssociatedPermission()
        value.arn = try reader["arn"].readIfPresent()
        value.permissionVersion = try reader["permissionVersion"].readIfPresent()
        value.defaultVersion = try reader["defaultVersion"].readIfPresent()
        value.resourceType = try reader["resourceType"].readIfPresent()
        value.status = try reader["status"].readIfPresent()
        value.featureSet = try reader["featureSet"].readIfPresent()
        value.lastUpdatedTime = try reader["lastUpdatedTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.resourceShareArn = try reader["resourceShareArn"].readIfPresent()
        return value
    }
}

extension RAMClientTypes.Principal {

    static func read(from reader: SmithyJSON.Reader) throws -> RAMClientTypes.Principal {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = RAMClientTypes.Principal()
        value.id = try reader["id"].readIfPresent()
        value.resourceShareArn = try reader["resourceShareArn"].readIfPresent()
        value.creationTime = try reader["creationTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.lastUpdatedTime = try reader["lastUpdatedTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.external = try reader["external"].readIfPresent()
        return value
    }
}

extension RAMClientTypes.ReplacePermissionAssociationsWork {

    static func read(from reader: SmithyJSON.Reader) throws -> RAMClientTypes.ReplacePermissionAssociationsWork {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = RAMClientTypes.ReplacePermissionAssociationsWork()
        value.id = try reader["id"].readIfPresent()
        value.fromPermissionArn = try reader["fromPermissionArn"].readIfPresent()
        value.fromPermissionVersion = try reader["fromPermissionVersion"].readIfPresent()
        value.toPermissionArn = try reader["toPermissionArn"].readIfPresent()
        value.toPermissionVersion = try reader["toPermissionVersion"].readIfPresent()
        value.status = try reader["status"].readIfPresent()
        value.statusMessage = try reader["statusMessage"].readIfPresent()
        value.creationTime = try reader["creationTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.lastUpdatedTime = try reader["lastUpdatedTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        return value
    }
}

extension RAMClientTypes.ServiceNameAndResourceType {

    static func read(from reader: SmithyJSON.Reader) throws -> RAMClientTypes.ServiceNameAndResourceType {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = RAMClientTypes.ServiceNameAndResourceType()
        value.resourceType = try reader["resourceType"].readIfPresent()
        value.serviceName = try reader["serviceName"].readIfPresent()
        value.resourceRegionScope = try reader["resourceRegionScope"].readIfPresent()
        return value
    }
}

extension RAMClientTypes.TagFilter {

    static func write(value: RAMClientTypes.TagFilter?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["tagKey"].write(value.tagKey)
        try writer["tagValues"].writeList(value.tagValues, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

public enum RAMClientTypes {}
