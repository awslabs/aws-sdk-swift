// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime


/// Paginate over `[ListChunksOutputResponse]` results.
///
/// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
/// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
/// until then. If there are errors in your request, you will see the failures only after you start iterating.
/// - Parameters:
///     - input: A `[ListChunksInput]` to start pagination
/// - Returns: An `AsyncSequence` that can iterate over `ListChunksOutputResponse`
extension BackupStorageClient {
    public func listChunksPaginated(input: ListChunksInput) -> ClientRuntime.PaginatorSequence<ListChunksInput, ListChunksOutputResponse> {
        return ClientRuntime.PaginatorSequence<ListChunksInput, ListChunksOutputResponse>(input: input, inputKey: \ListChunksInput.nextToken, outputKey: \ListChunksOutputResponse.nextToken, paginationFunction: self.listChunks(input:))
    }
}

extension ListChunksInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListChunksInput {
        return ListChunksInput(
            maxResults: self.maxResults,
            nextToken: token,
            objectToken: self.objectToken,
            storageJobId: self.storageJobId
        )}
}

/// Paginate over `[ListObjectsOutputResponse]` results.
///
/// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
/// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
/// until then. If there are errors in your request, you will see the failures only after you start iterating.
/// - Parameters:
///     - input: A `[ListObjectsInput]` to start pagination
/// - Returns: An `AsyncSequence` that can iterate over `ListObjectsOutputResponse`
extension BackupStorageClient {
    public func listObjectsPaginated(input: ListObjectsInput) -> ClientRuntime.PaginatorSequence<ListObjectsInput, ListObjectsOutputResponse> {
        return ClientRuntime.PaginatorSequence<ListObjectsInput, ListObjectsOutputResponse>(input: input, inputKey: \ListObjectsInput.nextToken, outputKey: \ListObjectsOutputResponse.nextToken, paginationFunction: self.listObjects(input:))
    }
}

extension ListObjectsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListObjectsInput {
        return ListObjectsInput(
            createdAfter: self.createdAfter,
            createdBefore: self.createdBefore,
            maxResults: self.maxResults,
            nextToken: token,
            startingObjectName: self.startingObjectName,
            startingObjectPrefix: self.startingObjectPrefix,
            storageJobId: self.storageJobId
        )}
}
