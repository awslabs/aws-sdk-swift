// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension BackupStorageClient {
    /// Paginate over `[ListChunksOutput]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[ListChunksInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `ListChunksOutput`
    public func listChunksPaginated(input: ListChunksInput) -> ClientRuntime.PaginatorSequence<ListChunksInput, ListChunksOutput> {
        return ClientRuntime.PaginatorSequence<ListChunksInput, ListChunksOutput>(input: input, inputKey: \ListChunksInput.nextToken, outputKey: \ListChunksOutput.nextToken, paginationFunction: self.listChunks(input:))
    }
}

extension ListChunksInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListChunksInput {
        return ListChunksInput(
            maxResults: self.maxResults,
            nextToken: token,
            objectToken: self.objectToken,
            storageJobId: self.storageJobId
        )}
}
extension BackupStorageClient {
    /// Paginate over `[ListObjectsOutput]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[ListObjectsInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `ListObjectsOutput`
    public func listObjectsPaginated(input: ListObjectsInput) -> ClientRuntime.PaginatorSequence<ListObjectsInput, ListObjectsOutput> {
        return ClientRuntime.PaginatorSequence<ListObjectsInput, ListObjectsOutput>(input: input, inputKey: \ListObjectsInput.nextToken, outputKey: \ListObjectsOutput.nextToken, paginationFunction: self.listObjects(input:))
    }
}

extension ListObjectsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListObjectsInput {
        return ListObjectsInput(
            createdAfter: self.createdAfter,
            createdBefore: self.createdBefore,
            maxResults: self.maxResults,
            nextToken: token,
            startingObjectName: self.startingObjectName,
            startingObjectPrefix: self.startingObjectPrefix,
            storageJobId: self.storageJobId
        )}
}
