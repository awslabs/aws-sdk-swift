// Code generated by smithy-swift-codegen. DO NOT EDIT!

@testable import AWSS3Control
import AWSClientRuntime
import ClientRuntime
import SmithyTestUtil
import XCTest

class EndpointResolverTest: CrtXCBaseTestCase {
    /// Vanilla outposts without ARN region + access point ARN@us-west-2
    func testResolve1() throws {
        let endpointParams = EndpointParams(
            accessPointName: "arn:aws:s3-outposts:us-west-2:123456789012:outpost:op-01234567890123456:accesspoint:myaccesspoint",
            accountId: "123456789012",
            region: "us-west-2",
            requiresAccountId: true,
            useDualStack: false,
            useFIPS: false
        )
        let resolver = try DefaultEndpointResolver()

        let actual = try resolver.resolve(params: endpointParams)

        let properties: [String: AnyHashable] =
            [
                "authSchemes": [
                    [
                        "signingRegion": "us-west-2",
                        "name": "sigv4",
                        "signingName": "s3-outposts",
                        "disableDoubleEncoding": true
                    ] as [String: AnyHashable]
                ] as [AnyHashable]
            ]

        var headers = Headers()
        headers.add(name: "x-amz-account-id", values: ["123456789012"])
        headers.add(name: "x-amz-outpost-id", values: ["op-01234567890123456"])
        let expected = try ClientRuntime.Endpoint(urlString: "https://s3-outposts.us-west-2.amazonaws.com", headers: headers, properties: properties)

        XCTAssertEqual(expected, actual)
    }

    /// Vanilla outposts with ARN region + access point ARN@us-west-2
    func testResolve2() throws {
        let endpointParams = EndpointParams(
            accessPointName: "arn:aws:s3-outposts:us-east-1:123456789012:outpost:op-01234567890123456:accesspoint:myaccesspoint",
            accountId: "123456789012",
            region: "us-west-2",
            requiresAccountId: true,
            useDualStack: false,
            useFIPS: false
        )
        let resolver = try DefaultEndpointResolver()

        let actual = try resolver.resolve(params: endpointParams)

        let properties: [String: AnyHashable] =
            [
                "authSchemes": [
                    [
                        "signingRegion": "us-east-1",
                        "name": "sigv4",
                        "signingName": "s3-outposts",
                        "disableDoubleEncoding": true
                    ] as [String: AnyHashable]
                ] as [AnyHashable]
            ]

        var headers = Headers()
        headers.add(name: "x-amz-account-id", values: ["123456789012"])
        headers.add(name: "x-amz-outpost-id", values: ["op-01234567890123456"])
        let expected = try ClientRuntime.Endpoint(urlString: "https://s3-outposts.us-east-1.amazonaws.com", headers: headers, properties: properties)

        XCTAssertEqual(expected, actual)
    }

    /// accept an access point ARN@us-west-2
    func testResolve3() throws {
        let endpointParams = EndpointParams(
            accessPointName: "arn:aws:s3-outposts:us-west-2:123456789012:outpost:op-01234567890123456:accesspoint:myaccesspoint",
            accountId: "123456789012",
            region: "us-west-2",
            requiresAccountId: true,
            useDualStack: false,
            useFIPS: false
        )
        let resolver = try DefaultEndpointResolver()

        let actual = try resolver.resolve(params: endpointParams)

        let properties: [String: AnyHashable] =
            [
                "authSchemes": [
                    [
                        "signingRegion": "us-west-2",
                        "name": "sigv4",
                        "signingName": "s3-outposts",
                        "disableDoubleEncoding": true
                    ] as [String: AnyHashable]
                ] as [AnyHashable]
            ]

        var headers = Headers()
        headers.add(name: "x-amz-account-id", values: ["123456789012"])
        headers.add(name: "x-amz-outpost-id", values: ["op-01234567890123456"])
        let expected = try ClientRuntime.Endpoint(urlString: "https://s3-outposts.us-west-2.amazonaws.com", headers: headers, properties: properties)

        XCTAssertEqual(expected, actual)
    }

    /// vanilla outposts china@cn-north-1
    func testResolve4() throws {
        let endpointParams = EndpointParams(
            accessPointName: "arn:aws-cn:s3-outposts:cn-north-1:123456789012:outpost:op-01234567890123456:accesspoint:myaccesspoint",
            accountId: "123456789012",
            region: "cn-north-1",
            requiresAccountId: true,
            useDualStack: false,
            useFIPS: false
        )
        let resolver = try DefaultEndpointResolver()

        let actual = try resolver.resolve(params: endpointParams)

        let properties: [String: AnyHashable] =
            [
                "authSchemes": [
                    [
                        "signingRegion": "cn-north-1",
                        "name": "sigv4",
                        "signingName": "s3-outposts",
                        "disableDoubleEncoding": true
                    ] as [String: AnyHashable]
                ] as [AnyHashable]
            ]

        var headers = Headers()
        headers.add(name: "x-amz-account-id", values: ["123456789012"])
        headers.add(name: "x-amz-outpost-id", values: ["op-01234567890123456"])
        let expected = try ClientRuntime.Endpoint(urlString: "https://s3-outposts.cn-north-1.amazonaws.com.cn", headers: headers, properties: properties)

        XCTAssertEqual(expected, actual)
    }

    /// gov region@us-west-2
    func testResolve5() throws {
        let endpointParams = EndpointParams(
            accessPointName: "arn:aws:s3-outposts:us-west-2:123456789012:outpost:op-01234567890123456:accesspoint:myaccesspoint",
            accountId: "123456789012",
            region: "us-west-2",
            requiresAccountId: true,
            useDualStack: false,
            useFIPS: false
        )
        let resolver = try DefaultEndpointResolver()

        let actual = try resolver.resolve(params: endpointParams)

        let properties: [String: AnyHashable] =
            [
                "authSchemes": [
                    [
                        "signingRegion": "us-west-2",
                        "name": "sigv4",
                        "signingName": "s3-outposts",
                        "disableDoubleEncoding": true
                    ] as [String: AnyHashable]
                ] as [AnyHashable]
            ]

        var headers = Headers()
        headers.add(name: "x-amz-account-id", values: ["123456789012"])
        headers.add(name: "x-amz-outpost-id", values: ["op-01234567890123456"])
        let expected = try ClientRuntime.Endpoint(urlString: "https://s3-outposts.us-west-2.amazonaws.com", headers: headers, properties: properties)

        XCTAssertEqual(expected, actual)
    }

    /// gov cloud with fips@us-west-2
    func testResolve6() throws {
        let endpointParams = EndpointParams(
            accessPointName: "arn:aws:s3-outposts:us-west-2:123456789012:outpost:op-01234567890123456:accesspoint:myaccesspoint",
            accountId: "123456789012",
            region: "us-west-2",
            requiresAccountId: true,
            useDualStack: false,
            useFIPS: true
        )
        let resolver = try DefaultEndpointResolver()

        let actual = try resolver.resolve(params: endpointParams)

        let properties: [String: AnyHashable] =
            [
                "authSchemes": [
                    [
                        "signingRegion": "us-west-2",
                        "name": "sigv4",
                        "signingName": "s3-outposts",
                        "disableDoubleEncoding": true
                    ] as [String: AnyHashable]
                ] as [AnyHashable]
            ]

        var headers = Headers()
        headers.add(name: "x-amz-account-id", values: ["123456789012"])
        headers.add(name: "x-amz-outpost-id", values: ["op-01234567890123456"])
        let expected = try ClientRuntime.Endpoint(urlString: "https://s3-outposts-fips.us-west-2.amazonaws.com", headers: headers, properties: properties)

        XCTAssertEqual(expected, actual)
    }

    /// govcloud with fips + arn region@us-gov-west-1
    func testResolve7() throws {
        let endpointParams = EndpointParams(
            accessPointName: "arn:aws-us-gov:s3-outposts:us-gov-east-1:123456789012:outpost:op-01234567890123456:accesspoint:myaccesspoint",
            accountId: "123456789012",
            region: "us-gov-west-1",
            requiresAccountId: true,
            useDualStack: false,
            useFIPS: true
        )
        let resolver = try DefaultEndpointResolver()

        let actual = try resolver.resolve(params: endpointParams)

        let properties: [String: AnyHashable] =
            [
                "authSchemes": [
                    [
                        "signingRegion": "us-gov-east-1",
                        "name": "sigv4",
                        "signingName": "s3-outposts",
                        "disableDoubleEncoding": true
                    ] as [String: AnyHashable]
                ] as [AnyHashable]
            ]

        var headers = Headers()
        headers.add(name: "x-amz-account-id", values: ["123456789012"])
        headers.add(name: "x-amz-outpost-id", values: ["op-01234567890123456"])
        let expected = try ClientRuntime.Endpoint(urlString: "https://s3-outposts-fips.us-gov-east-1.amazonaws.com", headers: headers, properties: properties)

        XCTAssertEqual(expected, actual)
    }

    /// gov region@cn-north-1
    func testResolve8() throws {
        let endpointParams = EndpointParams(
            accessPointName: "arn:aws-cn:s3-outposts:cn-north-1:123456789012:outpost:op-01234567890123456:accesspoint:myaccesspoint",
            accountId: "123456789012",
            region: "cn-north-1",
            requiresAccountId: true,
            useDualStack: false,
            useFIPS: false
        )
        let resolver = try DefaultEndpointResolver()

        let actual = try resolver.resolve(params: endpointParams)

        let properties: [String: AnyHashable] =
            [
                "authSchemes": [
                    [
                        "signingRegion": "cn-north-1",
                        "name": "sigv4",
                        "signingName": "s3-outposts",
                        "disableDoubleEncoding": true
                    ] as [String: AnyHashable]
                ] as [AnyHashable]
            ]

        var headers = Headers()
        headers.add(name: "x-amz-account-id", values: ["123456789012"])
        headers.add(name: "x-amz-outpost-id", values: ["op-01234567890123456"])
        let expected = try ClientRuntime.Endpoint(urlString: "https://s3-outposts.cn-north-1.amazonaws.com.cn", headers: headers, properties: properties)

        XCTAssertEqual(expected, actual)
    }

    /// gov cloud with fips@cn-north-1
    func testResolve9() throws {
        let endpointParams = EndpointParams(
            accessPointName: "arn:aws-cn:s3-outposts:cn-north-1:123456789012:outpost:op-01234567890123456:accesspoint:myaccesspoint",
            accountId: "123456789012",
            region: "cn-north-1",
            requiresAccountId: true,
            useDualStack: false,
            useFIPS: true
        )
        let resolver = try DefaultEndpointResolver()

        let actual = try resolver.resolve(params: endpointParams)

        let properties: [String: AnyHashable] =
            [
                "authSchemes": [
                    [
                        "signingRegion": "cn-north-1",
                        "name": "sigv4",
                        "signingName": "s3-outposts",
                        "disableDoubleEncoding": true
                    ] as [String: AnyHashable]
                ] as [AnyHashable]
            ]

        var headers = Headers()
        headers.add(name: "x-amz-account-id", values: ["123456789012"])
        headers.add(name: "x-amz-outpost-id", values: ["op-01234567890123456"])
        let expected = try ClientRuntime.Endpoint(urlString: "https://s3-outposts-fips.cn-north-1.amazonaws.com.cn", headers: headers, properties: properties)

        XCTAssertEqual(expected, actual)
    }

    /// govcloud with fips + arn region@us-gov-west-1
    func testResolve10() throws {
        let endpointParams = EndpointParams(
            accessPointName: "arn:aws-us-gov:s3-outposts:us-gov-east-1:123456789012:outpost:op-01234567890123456:accesspoint:myaccesspoint",
            accountId: "123456789012",
            region: "us-gov-west-1",
            requiresAccountId: true,
            useDualStack: false,
            useFIPS: true
        )
        let resolver = try DefaultEndpointResolver()

        let actual = try resolver.resolve(params: endpointParams)

        let properties: [String: AnyHashable] =
            [
                "authSchemes": [
                    [
                        "signingRegion": "us-gov-east-1",
                        "name": "sigv4",
                        "signingName": "s3-outposts",
                        "disableDoubleEncoding": true
                    ] as [String: AnyHashable]
                ] as [AnyHashable]
            ]

        var headers = Headers()
        headers.add(name: "x-amz-account-id", values: ["123456789012"])
        headers.add(name: "x-amz-outpost-id", values: ["op-01234567890123456"])
        let expected = try ClientRuntime.Endpoint(urlString: "https://s3-outposts-fips.us-gov-east-1.amazonaws.com", headers: headers, properties: properties)

        XCTAssertEqual(expected, actual)
    }

    /// gov region@af-south-1
    func testResolve11() throws {
        let endpointParams = EndpointParams(
            accessPointName: "arn:aws:s3-outposts:af-south-1:123456789012:outpost:op-01234567890123456:accesspoint:myaccesspoint",
            accountId: "123456789012",
            region: "af-south-1",
            requiresAccountId: true,
            useDualStack: false,
            useFIPS: false
        )
        let resolver = try DefaultEndpointResolver()

        let actual = try resolver.resolve(params: endpointParams)

        let properties: [String: AnyHashable] =
            [
                "authSchemes": [
                    [
                        "signingRegion": "af-south-1",
                        "name": "sigv4",
                        "signingName": "s3-outposts",
                        "disableDoubleEncoding": true
                    ] as [String: AnyHashable]
                ] as [AnyHashable]
            ]

        var headers = Headers()
        headers.add(name: "x-amz-account-id", values: ["123456789012"])
        headers.add(name: "x-amz-outpost-id", values: ["op-01234567890123456"])
        let expected = try ClientRuntime.Endpoint(urlString: "https://s3-outposts.af-south-1.amazonaws.com", headers: headers, properties: properties)

        XCTAssertEqual(expected, actual)
    }

    /// gov cloud with fips@af-south-1
    func testResolve12() throws {
        let endpointParams = EndpointParams(
            accessPointName: "arn:aws:s3-outposts:af-south-1:123456789012:outpost:op-01234567890123456:accesspoint:myaccesspoint",
            accountId: "123456789012",
            region: "af-south-1",
            requiresAccountId: true,
            useDualStack: false,
            useFIPS: true
        )
        let resolver = try DefaultEndpointResolver()

        let actual = try resolver.resolve(params: endpointParams)

        let properties: [String: AnyHashable] =
            [
                "authSchemes": [
                    [
                        "signingRegion": "af-south-1",
                        "name": "sigv4",
                        "signingName": "s3-outposts",
                        "disableDoubleEncoding": true
                    ] as [String: AnyHashable]
                ] as [AnyHashable]
            ]

        var headers = Headers()
        headers.add(name: "x-amz-account-id", values: ["123456789012"])
        headers.add(name: "x-amz-outpost-id", values: ["op-01234567890123456"])
        let expected = try ClientRuntime.Endpoint(urlString: "https://s3-outposts-fips.af-south-1.amazonaws.com", headers: headers, properties: properties)

        XCTAssertEqual(expected, actual)
    }

    /// govcloud with fips + arn region@us-gov-west-1
    func testResolve13() throws {
        let endpointParams = EndpointParams(
            accessPointName: "arn:aws-us-gov:s3-outposts:us-gov-east-1:123456789012:outpost:op-01234567890123456:accesspoint:myaccesspoint",
            accountId: "123456789012",
            region: "us-gov-west-1",
            requiresAccountId: true,
            useDualStack: false,
            useFIPS: true
        )
        let resolver = try DefaultEndpointResolver()

        let actual = try resolver.resolve(params: endpointParams)

        let properties: [String: AnyHashable] =
            [
                "authSchemes": [
                    [
                        "signingRegion": "us-gov-east-1",
                        "name": "sigv4",
                        "signingName": "s3-outposts",
                        "disableDoubleEncoding": true
                    ] as [String: AnyHashable]
                ] as [AnyHashable]
            ]

        var headers = Headers()
        headers.add(name: "x-amz-account-id", values: ["123456789012"])
        headers.add(name: "x-amz-outpost-id", values: ["op-01234567890123456"])
        let expected = try ClientRuntime.Endpoint(urlString: "https://s3-outposts-fips.us-gov-east-1.amazonaws.com", headers: headers, properties: properties)

        XCTAssertEqual(expected, actual)
    }

    /// CreateBucket + OutpostId = outposts endpoint@us-east-2
    func testResolve14() throws {
        let endpointParams = EndpointParams(
            bucket: "blah",
            outpostId: "123",
            region: "us-east-2",
            requiresAccountId: false,
            useDualStack: false,
            useFIPS: false
        )
        let resolver = try DefaultEndpointResolver()

        let actual = try resolver.resolve(params: endpointParams)

        let properties: [String: AnyHashable] =
            [
                "authSchemes": [
                    [
                        "signingRegion": "us-east-2",
                        "name": "sigv4",
                        "signingName": "s3-outposts",
                        "disableDoubleEncoding": true
                    ] as [String: AnyHashable]
                ] as [AnyHashable]
            ]

        let headers = Headers()
        let expected = try ClientRuntime.Endpoint(urlString: "https://s3-outposts.us-east-2.amazonaws.com", headers: headers, properties: properties)

        XCTAssertEqual(expected, actual)
    }

    /// CreateBucket + OutpostId with fips = outposts endpoint@us-east-2
    func testResolve15() throws {
        let endpointParams = EndpointParams(
            bucket: "blah",
            outpostId: "123",
            region: "us-east-2",
            requiresAccountId: false,
            useDualStack: false,
            useFIPS: true
        )
        let resolver = try DefaultEndpointResolver()

        let actual = try resolver.resolve(params: endpointParams)

        let properties: [String: AnyHashable] =
            [
                "authSchemes": [
                    [
                        "signingRegion": "us-east-2",
                        "name": "sigv4",
                        "signingName": "s3-outposts",
                        "disableDoubleEncoding": true
                    ] as [String: AnyHashable]
                ] as [AnyHashable]
            ]

        let headers = Headers()
        let expected = try ClientRuntime.Endpoint(urlString: "https://s3-outposts-fips.us-east-2.amazonaws.com", headers: headers, properties: properties)

        XCTAssertEqual(expected, actual)
    }

    /// CreateBucket without OutpostId = regular endpoint@us-east-2
    func testResolve16() throws {
        let endpointParams = EndpointParams(
            bucket: "blah",
            region: "us-east-2",
            requiresAccountId: false,
            useDualStack: false,
            useFIPS: false
        )
        let resolver = try DefaultEndpointResolver()

        let actual = try resolver.resolve(params: endpointParams)

        let properties: [String: AnyHashable] =
            [
                "authSchemes": [
                    [
                        "signingRegion": "us-east-2",
                        "name": "sigv4",
                        "signingName": "s3",
                        "disableDoubleEncoding": true
                    ] as [String: AnyHashable]
                ] as [AnyHashable]
            ]

        let headers = Headers()
        let expected = try ClientRuntime.Endpoint(urlString: "https://s3-control.us-east-2.amazonaws.com", headers: headers, properties: properties)

        XCTAssertEqual(expected, actual)
    }

    /// ListRegionalBuckets + OutpostId = outposts endpoint@us-east-2
    func testResolve17() throws {
        let endpointParams = EndpointParams(
            accountId: "123",
            outpostId: "op-123",
            region: "us-east-2",
            requiresAccountId: true,
            useDualStack: false,
            useFIPS: false
        )
        let resolver = try DefaultEndpointResolver()

        let actual = try resolver.resolve(params: endpointParams)

        let properties: [String: AnyHashable] =
            [
                "authSchemes": [
                    [
                        "signingRegion": "us-east-2",
                        "name": "sigv4",
                        "signingName": "s3-outposts",
                        "disableDoubleEncoding": true
                    ] as [String: AnyHashable]
                ] as [AnyHashable]
            ]

        let headers = Headers()
        let expected = try ClientRuntime.Endpoint(urlString: "https://s3-outposts.us-east-2.amazonaws.com", headers: headers, properties: properties)

        XCTAssertEqual(expected, actual)
    }

    /// ListRegionalBuckets without OutpostId = regular endpoint@us-east-2
    func testResolve18() throws {
        let endpointParams = EndpointParams(
            accountId: "123",
            region: "us-east-2",
            requiresAccountId: true,
            useDualStack: false,
            useFIPS: false
        )
        let resolver = try DefaultEndpointResolver()

        let actual = try resolver.resolve(params: endpointParams)

        let properties: [String: AnyHashable] =
            [
                "authSchemes": [
                    [
                        "signingRegion": "us-east-2",
                        "name": "sigv4",
                        "signingName": "s3",
                        "disableDoubleEncoding": true
                    ] as [String: AnyHashable]
                ] as [AnyHashable]
            ]

        let headers = Headers()
        let expected = try ClientRuntime.Endpoint(urlString: "https://123.s3-control.us-east-2.amazonaws.com", headers: headers, properties: properties)

        XCTAssertEqual(expected, actual)
    }

    /// ListRegionalBucket + OutpostId with fips = outposts endpoint@us-east-2
    func testResolve19() throws {
        let endpointParams = EndpointParams(
            accountId: "123",
            outpostId: "op-123",
            region: "us-east-2",
            requiresAccountId: true,
            useDualStack: false,
            useFIPS: true
        )
        let resolver = try DefaultEndpointResolver()

        let actual = try resolver.resolve(params: endpointParams)

        let properties: [String: AnyHashable] =
            [
                "authSchemes": [
                    [
                        "signingRegion": "us-east-2",
                        "name": "sigv4",
                        "signingName": "s3-outposts",
                        "disableDoubleEncoding": true
                    ] as [String: AnyHashable]
                ] as [AnyHashable]
            ]

        let headers = Headers()
        let expected = try ClientRuntime.Endpoint(urlString: "https://s3-outposts-fips.us-east-2.amazonaws.com", headers: headers, properties: properties)

        XCTAssertEqual(expected, actual)
    }

    /// outpost access points do not support dualstack@us-west-2
    func testResolve20() throws {
        let endpointParams = EndpointParams(
            accessPointName: "arn:aws:s3-outposts:us-west-2:123456789012:outpost:op-01234567890123456:accesspoint:myaccesspoint",
            accountId: "123456789012",
            region: "us-west-2",
            requiresAccountId: true,
            useDualStack: true,
            useFIPS: false
        )
        let resolver = try DefaultEndpointResolver()

        XCTAssertThrowsError(try resolver.resolve(params: endpointParams)) { error in
            switch error {
            case EndpointError.unresolved(let message):
                XCTAssertEqual("Invalid configuration: Outpost Access Points do not support dual-stack", message)
            default:
                XCTFail()
            }
        }
    }

    /// outpost access points do not support dualstack@cn-north-1
    func testResolve21() throws {
        let endpointParams = EndpointParams(
            accessPointName: "arn:aws:s3-outposts:us-west-2:123456789012:outpost:op-01234567890123456:accesspoint:myaccesspoint",
            accountId: "123456789012",
            region: "cn-north-1",
            requiresAccountId: true,
            useDualStack: true,
            useFIPS: false
        )
        let resolver = try DefaultEndpointResolver()

        XCTAssertThrowsError(try resolver.resolve(params: endpointParams)) { error in
            switch error {
            case EndpointError.unresolved(let message):
                XCTAssertEqual("Invalid configuration: Outpost Access Points do not support dual-stack", message)
            default:
                XCTFail()
            }
        }
    }

    /// outpost access points do not support dualstack@af-south-1
    func testResolve22() throws {
        let endpointParams = EndpointParams(
            accessPointName: "arn:aws:s3-outposts:us-west-2:123456789012:outpost:op-01234567890123456:accesspoint:myaccesspoint",
            accountId: "123456789012",
            region: "af-south-1",
            requiresAccountId: true,
            useDualStack: true,
            useFIPS: false
        )
        let resolver = try DefaultEndpointResolver()

        XCTAssertThrowsError(try resolver.resolve(params: endpointParams)) { error in
            switch error {
            case EndpointError.unresolved(let message):
                XCTAssertEqual("Invalid configuration: Outpost Access Points do not support dual-stack", message)
            default:
                XCTFail()
            }
        }
    }

    /// invalid ARN: must be include outpost ID@us-west-2
    func testResolve23() throws {
        let endpointParams = EndpointParams(
            accessPointName: "arn:aws:s3-outposts:us-west-2:123456789012:outpost",
            accountId: "123456789012",
            region: "us-west-2",
            requiresAccountId: true,
            useDualStack: false,
            useFIPS: false
        )
        let resolver = try DefaultEndpointResolver()

        XCTAssertThrowsError(try resolver.resolve(params: endpointParams)) { error in
            switch error {
            case EndpointError.unresolved(let message):
                XCTAssertEqual("Invalid ARN: The Outpost Id was not set", message)
            default:
                XCTFail()
            }
        }
    }

    /// invalid ARN: must specify access point@us-west-2
    func testResolve24() throws {
        let endpointParams = EndpointParams(
            accessPointName: "arn:aws:s3-outposts:us-west-2:123456789012:outpost:op-01234567890123456",
            region: "us-west-2",
            requiresAccountId: true,
            useDualStack: false,
            useFIPS: false
        )
        let resolver = try DefaultEndpointResolver()

        XCTAssertThrowsError(try resolver.resolve(params: endpointParams)) { error in
            switch error {
            case EndpointError.unresolved(let message):
                XCTAssertEqual("Invalid ARN: Expected a 4-component resource", message)
            default:
                XCTFail()
            }
        }
    }

    /// invalid ARN@us-west-2
    func testResolve25() throws {
        let endpointParams = EndpointParams(
            accessPointName: "arn:aws:s3-outposts:us-west-2:123456789012:outpost:myaccesspoint",
            region: "us-west-2",
            requiresAccountId: true,
            useDualStack: false,
            useFIPS: false
        )
        let resolver = try DefaultEndpointResolver()

        XCTAssertThrowsError(try resolver.resolve(params: endpointParams)) { error in
            switch error {
            case EndpointError.unresolved(let message):
                XCTAssertEqual("Invalid ARN: Expected a 4-component resource", message)
            default:
                XCTFail()
            }
        }
    }

    /// when set, AccountId drives AP construction@us-west-2
    func testResolve26() throws {
        let endpointParams = EndpointParams(
            accessPointName: "myaccesspoint",
            accountId: "myid-1234",
            region: "us-west-2",
            requiresAccountId: true,
            useDualStack: false,
            useFIPS: false
        )
        let resolver = try DefaultEndpointResolver()

        let actual = try resolver.resolve(params: endpointParams)

        let properties: [String: AnyHashable] =
            [
                "authSchemes": [
                    [
                        "signingRegion": "us-west-2",
                        "name": "sigv4",
                        "signingName": "s3",
                        "disableDoubleEncoding": true
                    ] as [String: AnyHashable]
                ] as [AnyHashable]
            ]

        let headers = Headers()
        let expected = try ClientRuntime.Endpoint(urlString: "https://myid-1234.s3-control.us-west-2.amazonaws.com", headers: headers, properties: properties)

        XCTAssertEqual(expected, actual)
    }

    /// Account ID set inline and in ARN but they both match@us-west-2
    func testResolve27() throws {
        let endpointParams = EndpointParams(
            accessPointName: "arn:aws:s3-outposts:us-west-2:123456789012:outpost:op-01234567890123456:accesspoint:myaccesspoint",
            accountId: "123456789012",
            region: "us-west-2",
            requiresAccountId: true,
            useArnRegion: false,
            useDualStack: false,
            useFIPS: false
        )
        let resolver = try DefaultEndpointResolver()

        let actual = try resolver.resolve(params: endpointParams)

        let properties: [String: AnyHashable] =
            [
                "authSchemes": [
                    [
                        "signingRegion": "us-west-2",
                        "name": "sigv4",
                        "signingName": "s3-outposts",
                        "disableDoubleEncoding": true
                    ] as [String: AnyHashable]
                ] as [AnyHashable]
            ]

        var headers = Headers()
        headers.add(name: "x-amz-account-id", values: ["123456789012"])
        headers.add(name: "x-amz-outpost-id", values: ["op-01234567890123456"])
        let expected = try ClientRuntime.Endpoint(urlString: "https://s3-outposts.us-west-2.amazonaws.com", headers: headers, properties: properties)

        XCTAssertEqual(expected, actual)
    }

    /// Account ID set inline and in ARN and they do not match@us-west-2
    func testResolve28() throws {
        let endpointParams = EndpointParams(
            accessPointName: "arn:aws:s3-outposts:us-west-2:123456789012:outpost:op-01234567890123456:accesspoint:myaccesspoint",
            accountId: "9999999",
            region: "us-west-2",
            requiresAccountId: true,
            useArnRegion: false,
            useDualStack: false,
            useFIPS: false
        )
        let resolver = try DefaultEndpointResolver()

        XCTAssertThrowsError(try resolver.resolve(params: endpointParams)) { error in
            switch error {
            case EndpointError.unresolved(let message):
                XCTAssertEqual("Invalid ARN: the accountId specified in the ARN (`123456789012`) does not match the parameter (`9999999`)", message)
            default:
                XCTFail()
            }
        }
    }

    /// get access point prefixed with account id using endpoint url@us-west-2
    func testResolve29() throws {
        let endpointParams = EndpointParams(
            accessPointName: "apname",
            accountId: "123456789012",
            endpoint: "https://control.vpce-1a2b3c4d-5e6f.s3.us-west-2.vpce.amazonaws.com",
            region: "us-west-2",
            requiresAccountId: true,
            useDualStack: false,
            useFIPS: false
        )
        let resolver = try DefaultEndpointResolver()

        let actual = try resolver.resolve(params: endpointParams)

        let properties: [String: AnyHashable] =
            [
                "authSchemes": [
                    [
                        "signingRegion": "us-west-2",
                        "name": "sigv4",
                        "signingName": "s3",
                        "disableDoubleEncoding": true
                    ] as [String: AnyHashable]
                ] as [AnyHashable]
            ]

        let headers = Headers()
        let expected = try ClientRuntime.Endpoint(urlString: "https://123456789012.control.vpce-1a2b3c4d-5e6f.s3.us-west-2.vpce.amazonaws.com", headers: headers, properties: properties)

        XCTAssertEqual(expected, actual)
    }

    /// endpoint url with s3-outposts@us-west-2
    func testResolve30() throws {
        let endpointParams = EndpointParams(
            accessPointName: "arn:aws:s3-outposts:us-west-2:123456789012:outpost:op-01234567890123456:accesspoint:myaccesspoint",
            accountId: "123456789012",
            endpoint: "https://beta.example.com",
            region: "us-west-2",
            requiresAccountId: true,
            useDualStack: false,
            useFIPS: false
        )
        let resolver = try DefaultEndpointResolver()

        let actual = try resolver.resolve(params: endpointParams)

        let properties: [String: AnyHashable] =
            [
                "authSchemes": [
                    [
                        "signingRegion": "us-west-2",
                        "name": "sigv4",
                        "signingName": "s3-outposts",
                        "disableDoubleEncoding": true
                    ] as [String: AnyHashable]
                ] as [AnyHashable]
            ]

        var headers = Headers()
        headers.add(name: "x-amz-account-id", values: ["123456789012"])
        headers.add(name: "x-amz-outpost-id", values: ["op-01234567890123456"])
        let expected = try ClientRuntime.Endpoint(urlString: "https://beta.example.com", headers: headers, properties: properties)

        XCTAssertEqual(expected, actual)
    }

    /// access point name with a bucket arn@us-west-2
    func testResolve31() throws {
        let endpointParams = EndpointParams(
            accessPointName: "arn:aws:s3-outposts:us-west-2:123456789012:outpost:op-01234567890123456:bucket:mybucket",
            endpoint: "beta.example.com",
            region: "us-west-2",
            requiresAccountId: true,
            useDualStack: false,
            useFIPS: false
        )
        let resolver = try DefaultEndpointResolver()

        XCTAssertThrowsError(try resolver.resolve(params: endpointParams)) { error in
            switch error {
            case EndpointError.unresolved(let message):
                XCTAssertEqual("Expected an outpost type `accesspoint`, found `bucket`", message)
            default:
                XCTFail()
            }
        }
    }

    /// bucket arn with access point name@us-west-2
    func testResolve32() throws {
        let endpointParams = EndpointParams(
            bucket: "arn:aws:s3-outposts:us-west-2:123456789012:outpost:op-01234567890123456:accesspoint:myaccesspoint",
            endpoint: "beta.example.com",
            region: "us-west-2",
            requiresAccountId: true,
            useDualStack: false,
            useFIPS: false
        )
        let resolver = try DefaultEndpointResolver()

        XCTAssertThrowsError(try resolver.resolve(params: endpointParams)) { error in
            switch error {
            case EndpointError.unresolved(let message):
                XCTAssertEqual("Invalid ARN: Expected an outpost type `bucket`, found `accesspoint`", message)
            default:
                XCTFail()
            }
        }
    }

    /// create bucket with outposts@us-west-2
    func testResolve33() throws {
        let endpointParams = EndpointParams(
            bucket: "bucketname",
            endpoint: "https://beta.example.com",
            outpostId: "op-123",
            region: "us-west-2",
            requiresAccountId: false,
            useDualStack: false,
            useFIPS: false
        )
        let resolver = try DefaultEndpointResolver()

        let actual = try resolver.resolve(params: endpointParams)

        let properties: [String: AnyHashable] =
            [
                "authSchemes": [
                    [
                        "signingRegion": "us-west-2",
                        "name": "sigv4",
                        "signingName": "s3-outposts",
                        "disableDoubleEncoding": true
                    ] as [String: AnyHashable]
                ] as [AnyHashable]
            ]

        let headers = Headers()
        let expected = try ClientRuntime.Endpoint(urlString: "https://beta.example.com", headers: headers, properties: properties)

        XCTAssertEqual(expected, actual)
    }

    /// get bucket with endpoint_url@us-west-2
    func testResolve34() throws {
        let endpointParams = EndpointParams(
            bucket: "arn:aws:s3-outposts:us-west-2:123456789012:outpost:op-01234567890123456:bucket:mybucket",
            endpoint: "https://beta.example.com",
            region: "us-west-2",
            requiresAccountId: true,
            useDualStack: false,
            useFIPS: false
        )
        let resolver = try DefaultEndpointResolver()

        let actual = try resolver.resolve(params: endpointParams)

        let properties: [String: AnyHashable] =
            [
                "authSchemes": [
                    [
                        "signingRegion": "us-west-2",
                        "name": "sigv4",
                        "signingName": "s3-outposts",
                        "disableDoubleEncoding": true
                    ] as [String: AnyHashable]
                ] as [AnyHashable]
            ]

        var headers = Headers()
        headers.add(name: "x-amz-account-id", values: ["123456789012"])
        headers.add(name: "x-amz-outpost-id", values: ["op-01234567890123456"])
        let expected = try ClientRuntime.Endpoint(urlString: "https://beta.example.com", headers: headers, properties: properties)

        XCTAssertEqual(expected, actual)
    }

    /// ListRegionalBucket + OutpostId endpoint url@us-east-2
    func testResolve35() throws {
        let endpointParams = EndpointParams(
            accountId: "123",
            endpoint: "https://beta.example.com",
            outpostId: "op-123",
            region: "us-east-2",
            requiresAccountId: true,
            useDualStack: false,
            useFIPS: false
        )
        let resolver = try DefaultEndpointResolver()

        let actual = try resolver.resolve(params: endpointParams)

        let properties: [String: AnyHashable] =
            [
                "authSchemes": [
                    [
                        "signingRegion": "us-east-2",
                        "name": "sigv4",
                        "signingName": "s3-outposts",
                        "disableDoubleEncoding": true
                    ] as [String: AnyHashable]
                ] as [AnyHashable]
            ]

        let headers = Headers()
        let expected = try ClientRuntime.Endpoint(urlString: "https://beta.example.com", headers: headers, properties: properties)

        XCTAssertEqual(expected, actual)
    }

    /// ListRegionalBucket + OutpostId + fips + endpoint url@us-east-2
    func testResolve36() throws {
        let endpointParams = EndpointParams(
            accountId: "123",
            endpoint: "https://beta.example.com",
            outpostId: "op-123",
            region: "us-east-2",
            requiresAccountId: true,
            useDualStack: false,
            useFIPS: true
        )
        let resolver = try DefaultEndpointResolver()

        let actual = try resolver.resolve(params: endpointParams)

        let properties: [String: AnyHashable] =
            [
                "authSchemes": [
                    [
                        "signingRegion": "us-east-2",
                        "name": "sigv4",
                        "signingName": "s3-outposts",
                        "disableDoubleEncoding": true
                    ] as [String: AnyHashable]
                ] as [AnyHashable]
            ]

        let headers = Headers()
        let expected = try ClientRuntime.Endpoint(urlString: "https://beta.example.com", headers: headers, properties: properties)

        XCTAssertEqual(expected, actual)
    }

    /// CreateBucket + OutpostId endpoint url@us-east-2
    func testResolve37() throws {
        let endpointParams = EndpointParams(
            bucket: "blah",
            endpoint: "https://beta.example.com",
            outpostId: "123",
            region: "us-east-2",
            requiresAccountId: false,
            useDualStack: false,
            useFIPS: true
        )
        let resolver = try DefaultEndpointResolver()

        let actual = try resolver.resolve(params: endpointParams)

        let properties: [String: AnyHashable] =
            [
                "authSchemes": [
                    [
                        "signingRegion": "us-east-2",
                        "name": "sigv4",
                        "signingName": "s3-outposts",
                        "disableDoubleEncoding": true
                    ] as [String: AnyHashable]
                ] as [AnyHashable]
            ]

        let headers = Headers()
        let expected = try ClientRuntime.Endpoint(urlString: "https://beta.example.com", headers: headers, properties: properties)

        XCTAssertEqual(expected, actual)
    }

    /// dualstack cannot be used with outposts when an endpoint URL is set@us-west-2.
    func testResolve38() throws {
        let endpointParams = EndpointParams(
            accessPointName: "arn:aws:s3-outposts:us-west-2:123456789012:outpost:op-01234567890123456:accesspoint:myaccesspoint",
            endpoint: "https://beta.example.com",
            region: "us-west-2",
            requiresAccountId: true,
            useDualStack: true,
            useFIPS: false
        )
        let resolver = try DefaultEndpointResolver()

        XCTAssertThrowsError(try resolver.resolve(params: endpointParams)) { error in
            switch error {
            case EndpointError.unresolved(let message):
                XCTAssertEqual("Invalid configuration: Outpost Access Points do not support dual-stack", message)
            default:
                XCTFail()
            }
        }
    }

    /// Dual-stack cannot be used with outposts@us-west-2
    func testResolve39() throws {
        let endpointParams = EndpointParams(
            bucket: "bucketname",
            endpoint: "https://beta.example.com",
            outpostId: "op-123",
            region: "us-west-2",
            requiresAccountId: false,
            useDualStack: true,
            useFIPS: false
        )
        let resolver = try DefaultEndpointResolver()

        XCTAssertThrowsError(try resolver.resolve(params: endpointParams)) { error in
            switch error {
            case EndpointError.unresolved(let message):
                XCTAssertEqual("Invalid configuration: Outposts do not support dual-stack", message)
            default:
                XCTFail()
            }
        }
    }

    /// vanilla bucket arn requires account id@us-west-2
    func testResolve40() throws {
        let endpointParams = EndpointParams(
            bucket: "arn:aws:s3-outposts:us-west-2:123456789012:outpost:op-01234567890123456:bucket:mybucket",
            region: "us-west-2",
            requiresAccountId: true,
            useDualStack: false,
            useFIPS: false
        )
        let resolver = try DefaultEndpointResolver()

        let actual = try resolver.resolve(params: endpointParams)

        let properties: [String: AnyHashable] =
            [
                "authSchemes": [
                    [
                        "signingRegion": "us-west-2",
                        "name": "sigv4",
                        "signingName": "s3-outposts",
                        "disableDoubleEncoding": true
                    ] as [String: AnyHashable]
                ] as [AnyHashable]
            ]

        var headers = Headers()
        headers.add(name: "x-amz-account-id", values: ["123456789012"])
        headers.add(name: "x-amz-outpost-id", values: ["op-01234567890123456"])
        let expected = try ClientRuntime.Endpoint(urlString: "https://s3-outposts.us-west-2.amazonaws.com", headers: headers, properties: properties)

        XCTAssertEqual(expected, actual)
    }

    /// bucket arn with UseArnRegion = true (arn region supercedes client configured region)@us-west-2
    func testResolve41() throws {
        let endpointParams = EndpointParams(
            bucket: "arn:aws:s3-outposts:us-east-1:123456789012:outpost:op-01234567890123456:bucket:mybucket",
            region: "us-west-2",
            requiresAccountId: true,
            useDualStack: false,
            useFIPS: false
        )
        let resolver = try DefaultEndpointResolver()

        let actual = try resolver.resolve(params: endpointParams)

        let properties: [String: AnyHashable] =
            [
                "authSchemes": [
                    [
                        "signingRegion": "us-east-1",
                        "name": "sigv4",
                        "signingName": "s3-outposts",
                        "disableDoubleEncoding": true
                    ] as [String: AnyHashable]
                ] as [AnyHashable]
            ]

        var headers = Headers()
        headers.add(name: "x-amz-account-id", values: ["123456789012"])
        headers.add(name: "x-amz-outpost-id", values: ["op-01234567890123456"])
        let expected = try ClientRuntime.Endpoint(urlString: "https://s3-outposts.us-east-1.amazonaws.com", headers: headers, properties: properties)

        XCTAssertEqual(expected, actual)
    }

    /// bucket ARN in gov partition (non-fips)@us-gov-east-1
    func testResolve42() throws {
        let endpointParams = EndpointParams(
            bucket: "arn:aws-us-gov:s3-outposts:us-gov-east-1:123456789012:outpost:op-01234567890123456:bucket:mybucket",
            region: "us-gov-east-1",
            requiresAccountId: true,
            useDualStack: false,
            useFIPS: false
        )
        let resolver = try DefaultEndpointResolver()

        let actual = try resolver.resolve(params: endpointParams)

        let properties: [String: AnyHashable] =
            [
                "authSchemes": [
                    [
                        "signingRegion": "us-gov-east-1",
                        "name": "sigv4",
                        "signingName": "s3-outposts",
                        "disableDoubleEncoding": true
                    ] as [String: AnyHashable]
                ] as [AnyHashable]
            ]

        var headers = Headers()
        headers.add(name: "x-amz-account-id", values: ["123456789012"])
        headers.add(name: "x-amz-outpost-id", values: ["op-01234567890123456"])
        let expected = try ClientRuntime.Endpoint(urlString: "https://s3-outposts.us-gov-east-1.amazonaws.com", headers: headers, properties: properties)

        XCTAssertEqual(expected, actual)
    }

    /// bucket ARN in gov partition with FIPS@us-gov-west-1
    func testResolve43() throws {
        let endpointParams = EndpointParams(
            bucket: "arn:aws-us-gov:s3-outposts:us-gov-west-1:123456789012:outpost:op-01234567890123456:bucket:mybucket",
            region: "us-gov-west-1",
            requiresAccountId: true,
            useDualStack: false,
            useFIPS: true
        )
        let resolver = try DefaultEndpointResolver()

        let actual = try resolver.resolve(params: endpointParams)

        let properties: [String: AnyHashable] =
            [
                "authSchemes": [
                    [
                        "signingRegion": "us-gov-west-1",
                        "name": "sigv4",
                        "signingName": "s3-outposts",
                        "disableDoubleEncoding": true
                    ] as [String: AnyHashable]
                ] as [AnyHashable]
            ]

        var headers = Headers()
        headers.add(name: "x-amz-account-id", values: ["123456789012"])
        headers.add(name: "x-amz-outpost-id", values: ["op-01234567890123456"])
        let expected = try ClientRuntime.Endpoint(urlString: "https://s3-outposts-fips.us-gov-west-1.amazonaws.com", headers: headers, properties: properties)

        XCTAssertEqual(expected, actual)
    }

    /// bucket ARN in aws partition with FIPS@us-east-2
    func testResolve44() throws {
        let endpointParams = EndpointParams(
            bucket: "arn:aws:s3-outposts:us-east-2:123456789012:outpost:op-01234567890123456:bucket:mybucket",
            region: "us-east-2",
            requiresAccountId: true,
            useDualStack: false,
            useFIPS: true
        )
        let resolver = try DefaultEndpointResolver()

        let actual = try resolver.resolve(params: endpointParams)

        let properties: [String: AnyHashable] =
            [
                "authSchemes": [
                    [
                        "signingRegion": "us-east-2",
                        "name": "sigv4",
                        "signingName": "s3-outposts",
                        "disableDoubleEncoding": true
                    ] as [String: AnyHashable]
                ] as [AnyHashable]
            ]

        var headers = Headers()
        headers.add(name: "x-amz-account-id", values: ["123456789012"])
        headers.add(name: "x-amz-outpost-id", values: ["op-01234567890123456"])
        let expected = try ClientRuntime.Endpoint(urlString: "https://s3-outposts-fips.us-east-2.amazonaws.com", headers: headers, properties: properties)

        XCTAssertEqual(expected, actual)
    }

    /// Outposts do not support dualstack@us-west-2
    func testResolve45() throws {
        let endpointParams = EndpointParams(
            bucket: "arn:aws:s3-outposts:us-west-2:123456789012:outpost:op-01234567890123456:bucket:mybucket",
            region: "us-west-2",
            requiresAccountId: true,
            useDualStack: true,
            useFIPS: false
        )
        let resolver = try DefaultEndpointResolver()

        XCTAssertThrowsError(try resolver.resolve(params: endpointParams)) { error in
            switch error {
            case EndpointError.unresolved(let message):
                XCTAssertEqual("Invalid configuration: Outpost buckets do not support dual-stack", message)
            default:
                XCTFail()
            }
        }
    }

    /// vanilla bucket arn requires account id@cn-north-1
    func testResolve46() throws {
        let endpointParams = EndpointParams(
            bucket: "arn:aws-cn:s3-outposts:cn-north-1:123456789012:outpost:op-01234567890123456:bucket:mybucket",
            region: "cn-north-1",
            requiresAccountId: true,
            useDualStack: false,
            useFIPS: false
        )
        let resolver = try DefaultEndpointResolver()

        let actual = try resolver.resolve(params: endpointParams)

        let properties: [String: AnyHashable] =
            [
                "authSchemes": [
                    [
                        "signingRegion": "cn-north-1",
                        "name": "sigv4",
                        "signingName": "s3-outposts",
                        "disableDoubleEncoding": true
                    ] as [String: AnyHashable]
                ] as [AnyHashable]
            ]

        var headers = Headers()
        headers.add(name: "x-amz-account-id", values: ["123456789012"])
        headers.add(name: "x-amz-outpost-id", values: ["op-01234567890123456"])
        let expected = try ClientRuntime.Endpoint(urlString: "https://s3-outposts.cn-north-1.amazonaws.com.cn", headers: headers, properties: properties)

        XCTAssertEqual(expected, actual)
    }

    /// bucket arn with UseArnRegion = true (arn region supercedes client configured region)@us-west-2
    func testResolve47() throws {
        let endpointParams = EndpointParams(
            bucket: "arn:aws:s3-outposts:us-east-1:123456789012:outpost:op-01234567890123456:bucket:mybucket",
            region: "us-west-2",
            requiresAccountId: true,
            useDualStack: false,
            useFIPS: false
        )
        let resolver = try DefaultEndpointResolver()

        let actual = try resolver.resolve(params: endpointParams)

        let properties: [String: AnyHashable] =
            [
                "authSchemes": [
                    [
                        "signingRegion": "us-east-1",
                        "name": "sigv4",
                        "signingName": "s3-outposts",
                        "disableDoubleEncoding": true
                    ] as [String: AnyHashable]
                ] as [AnyHashable]
            ]

        var headers = Headers()
        headers.add(name: "x-amz-account-id", values: ["123456789012"])
        headers.add(name: "x-amz-outpost-id", values: ["op-01234567890123456"])
        let expected = try ClientRuntime.Endpoint(urlString: "https://s3-outposts.us-east-1.amazonaws.com", headers: headers, properties: properties)

        XCTAssertEqual(expected, actual)
    }

    /// bucket ARN in gov partition (non-fips)@us-gov-east-1
    func testResolve48() throws {
        let endpointParams = EndpointParams(
            bucket: "arn:aws-us-gov:s3-outposts:us-gov-east-1:123456789012:outpost:op-01234567890123456:bucket:mybucket",
            region: "us-gov-east-1",
            requiresAccountId: true,
            useDualStack: false,
            useFIPS: false
        )
        let resolver = try DefaultEndpointResolver()

        let actual = try resolver.resolve(params: endpointParams)

        let properties: [String: AnyHashable] =
            [
                "authSchemes": [
                    [
                        "signingRegion": "us-gov-east-1",
                        "name": "sigv4",
                        "signingName": "s3-outposts",
                        "disableDoubleEncoding": true
                    ] as [String: AnyHashable]
                ] as [AnyHashable]
            ]

        var headers = Headers()
        headers.add(name: "x-amz-account-id", values: ["123456789012"])
        headers.add(name: "x-amz-outpost-id", values: ["op-01234567890123456"])
        let expected = try ClientRuntime.Endpoint(urlString: "https://s3-outposts.us-gov-east-1.amazonaws.com", headers: headers, properties: properties)

        XCTAssertEqual(expected, actual)
    }

    /// bucket ARN in gov partition with FIPS@us-gov-west-1
    func testResolve49() throws {
        let endpointParams = EndpointParams(
            bucket: "arn:aws-us-gov:s3-outposts:us-gov-west-1:123456789012:outpost:op-01234567890123456:bucket:mybucket",
            region: "us-gov-west-1",
            requiresAccountId: true,
            useDualStack: false,
            useFIPS: true
        )
        let resolver = try DefaultEndpointResolver()

        let actual = try resolver.resolve(params: endpointParams)

        let properties: [String: AnyHashable] =
            [
                "authSchemes": [
                    [
                        "signingRegion": "us-gov-west-1",
                        "name": "sigv4",
                        "signingName": "s3-outposts",
                        "disableDoubleEncoding": true
                    ] as [String: AnyHashable]
                ] as [AnyHashable]
            ]

        var headers = Headers()
        headers.add(name: "x-amz-account-id", values: ["123456789012"])
        headers.add(name: "x-amz-outpost-id", values: ["op-01234567890123456"])
        let expected = try ClientRuntime.Endpoint(urlString: "https://s3-outposts-fips.us-gov-west-1.amazonaws.com", headers: headers, properties: properties)

        XCTAssertEqual(expected, actual)
    }

    /// bucket ARN in aws partition with FIPS@us-east-2
    func testResolve50() throws {
        let endpointParams = EndpointParams(
            bucket: "arn:aws:s3-outposts:us-east-2:123456789012:outpost:op-01234567890123456:bucket:mybucket",
            region: "us-east-2",
            requiresAccountId: true,
            useDualStack: false,
            useFIPS: true
        )
        let resolver = try DefaultEndpointResolver()

        let actual = try resolver.resolve(params: endpointParams)

        let properties: [String: AnyHashable] =
            [
                "authSchemes": [
                    [
                        "signingRegion": "us-east-2",
                        "name": "sigv4",
                        "signingName": "s3-outposts",
                        "disableDoubleEncoding": true
                    ] as [String: AnyHashable]
                ] as [AnyHashable]
            ]

        var headers = Headers()
        headers.add(name: "x-amz-account-id", values: ["123456789012"])
        headers.add(name: "x-amz-outpost-id", values: ["op-01234567890123456"])
        let expected = try ClientRuntime.Endpoint(urlString: "https://s3-outposts-fips.us-east-2.amazonaws.com", headers: headers, properties: properties)

        XCTAssertEqual(expected, actual)
    }

    /// Outposts do not support dualstack@us-west-2
    func testResolve51() throws {
        let endpointParams = EndpointParams(
            bucket: "arn:aws:s3-outposts:us-west-2:123456789012:outpost:op-01234567890123456:bucket:mybucket",
            region: "us-west-2",
            requiresAccountId: true,
            useDualStack: true,
            useFIPS: false
        )
        let resolver = try DefaultEndpointResolver()

        XCTAssertThrowsError(try resolver.resolve(params: endpointParams)) { error in
            switch error {
            case EndpointError.unresolved(let message):
                XCTAssertEqual("Invalid configuration: Outpost buckets do not support dual-stack", message)
            default:
                XCTFail()
            }
        }
    }

    /// vanilla bucket arn requires account id@af-south-1
    func testResolve52() throws {
        let endpointParams = EndpointParams(
            bucket: "arn:aws:s3-outposts:af-south-1:123456789012:outpost:op-01234567890123456:bucket:mybucket",
            region: "af-south-1",
            requiresAccountId: true,
            useDualStack: false,
            useFIPS: false
        )
        let resolver = try DefaultEndpointResolver()

        let actual = try resolver.resolve(params: endpointParams)

        let properties: [String: AnyHashable] =
            [
                "authSchemes": [
                    [
                        "signingRegion": "af-south-1",
                        "name": "sigv4",
                        "signingName": "s3-outposts",
                        "disableDoubleEncoding": true
                    ] as [String: AnyHashable]
                ] as [AnyHashable]
            ]

        var headers = Headers()
        headers.add(name: "x-amz-account-id", values: ["123456789012"])
        headers.add(name: "x-amz-outpost-id", values: ["op-01234567890123456"])
        let expected = try ClientRuntime.Endpoint(urlString: "https://s3-outposts.af-south-1.amazonaws.com", headers: headers, properties: properties)

        XCTAssertEqual(expected, actual)
    }

    /// bucket arn with UseArnRegion = true (arn region supercedes client configured region)@us-west-2
    func testResolve53() throws {
        let endpointParams = EndpointParams(
            bucket: "arn:aws:s3-outposts:us-east-1:123456789012:outpost:op-01234567890123456:bucket:mybucket",
            region: "us-west-2",
            requiresAccountId: true,
            useDualStack: false,
            useFIPS: false
        )
        let resolver = try DefaultEndpointResolver()

        let actual = try resolver.resolve(params: endpointParams)

        let properties: [String: AnyHashable] =
            [
                "authSchemes": [
                    [
                        "signingRegion": "us-east-1",
                        "name": "sigv4",
                        "signingName": "s3-outposts",
                        "disableDoubleEncoding": true
                    ] as [String: AnyHashable]
                ] as [AnyHashable]
            ]

        var headers = Headers()
        headers.add(name: "x-amz-account-id", values: ["123456789012"])
        headers.add(name: "x-amz-outpost-id", values: ["op-01234567890123456"])
        let expected = try ClientRuntime.Endpoint(urlString: "https://s3-outposts.us-east-1.amazonaws.com", headers: headers, properties: properties)

        XCTAssertEqual(expected, actual)
    }

    /// bucket ARN in gov partition (non-fips)@us-gov-east-1
    func testResolve54() throws {
        let endpointParams = EndpointParams(
            bucket: "arn:aws-us-gov:s3-outposts:us-gov-east-1:123456789012:outpost:op-01234567890123456:bucket:mybucket",
            region: "us-gov-east-1",
            requiresAccountId: true,
            useDualStack: false,
            useFIPS: false
        )
        let resolver = try DefaultEndpointResolver()

        let actual = try resolver.resolve(params: endpointParams)

        let properties: [String: AnyHashable] =
            [
                "authSchemes": [
                    [
                        "signingRegion": "us-gov-east-1",
                        "name": "sigv4",
                        "signingName": "s3-outposts",
                        "disableDoubleEncoding": true
                    ] as [String: AnyHashable]
                ] as [AnyHashable]
            ]

        var headers = Headers()
        headers.add(name: "x-amz-account-id", values: ["123456789012"])
        headers.add(name: "x-amz-outpost-id", values: ["op-01234567890123456"])
        let expected = try ClientRuntime.Endpoint(urlString: "https://s3-outposts.us-gov-east-1.amazonaws.com", headers: headers, properties: properties)

        XCTAssertEqual(expected, actual)
    }

    /// bucket ARN in gov partition with FIPS@us-gov-west-1
    func testResolve55() throws {
        let endpointParams = EndpointParams(
            bucket: "arn:aws-us-gov:s3-outposts:us-gov-west-1:123456789012:outpost:op-01234567890123456:bucket:mybucket",
            region: "us-gov-west-1",
            requiresAccountId: true,
            useDualStack: false,
            useFIPS: true
        )
        let resolver = try DefaultEndpointResolver()

        let actual = try resolver.resolve(params: endpointParams)

        let properties: [String: AnyHashable] =
            [
                "authSchemes": [
                    [
                        "signingRegion": "us-gov-west-1",
                        "name": "sigv4",
                        "signingName": "s3-outposts",
                        "disableDoubleEncoding": true
                    ] as [String: AnyHashable]
                ] as [AnyHashable]
            ]

        var headers = Headers()
        headers.add(name: "x-amz-account-id", values: ["123456789012"])
        headers.add(name: "x-amz-outpost-id", values: ["op-01234567890123456"])
        let expected = try ClientRuntime.Endpoint(urlString: "https://s3-outposts-fips.us-gov-west-1.amazonaws.com", headers: headers, properties: properties)

        XCTAssertEqual(expected, actual)
    }

    /// bucket ARN in aws partition with FIPS@us-east-2
    func testResolve56() throws {
        let endpointParams = EndpointParams(
            bucket: "arn:aws:s3-outposts:us-east-2:123456789012:outpost:op-01234567890123456:bucket:mybucket",
            region: "us-east-2",
            requiresAccountId: true,
            useDualStack: false,
            useFIPS: true
        )
        let resolver = try DefaultEndpointResolver()

        let actual = try resolver.resolve(params: endpointParams)

        let properties: [String: AnyHashable] =
            [
                "authSchemes": [
                    [
                        "signingRegion": "us-east-2",
                        "name": "sigv4",
                        "signingName": "s3-outposts",
                        "disableDoubleEncoding": true
                    ] as [String: AnyHashable]
                ] as [AnyHashable]
            ]

        var headers = Headers()
        headers.add(name: "x-amz-account-id", values: ["123456789012"])
        headers.add(name: "x-amz-outpost-id", values: ["op-01234567890123456"])
        let expected = try ClientRuntime.Endpoint(urlString: "https://s3-outposts-fips.us-east-2.amazonaws.com", headers: headers, properties: properties)

        XCTAssertEqual(expected, actual)
    }

    /// Outposts do not support dualstack@us-west-2
    func testResolve57() throws {
        let endpointParams = EndpointParams(
            bucket: "arn:aws:s3-outposts:us-west-2:123456789012:outpost:op-01234567890123456:bucket:mybucket",
            region: "us-west-2",
            requiresAccountId: true,
            useDualStack: true,
            useFIPS: false
        )
        let resolver = try DefaultEndpointResolver()

        XCTAssertThrowsError(try resolver.resolve(params: endpointParams)) { error in
            switch error {
            case EndpointError.unresolved(let message):
                XCTAssertEqual("Invalid configuration: Outpost buckets do not support dual-stack", message)
            default:
                XCTFail()
            }
        }
    }

    /// Invalid ARN: missing outpost id and bucket@us-west-2
    func testResolve58() throws {
        let endpointParams = EndpointParams(
            bucket: "arn:aws:s3-outposts:us-west-2:123456789012:outpost",
            region: "us-west-2",
            requiresAccountId: true,
            useDualStack: false,
            useFIPS: false
        )
        let resolver = try DefaultEndpointResolver()

        XCTAssertThrowsError(try resolver.resolve(params: endpointParams)) { error in
            switch error {
            case EndpointError.unresolved(let message):
                XCTAssertEqual("Invalid ARN: The Outpost Id was not set", message)
            default:
                XCTFail()
            }
        }
    }

    /// Invalid ARN: missing bucket@us-west-2
    func testResolve59() throws {
        let endpointParams = EndpointParams(
            bucket: "arn:aws:s3-outposts:us-west-2:123456789012:outpost:op-01234567890123456",
            region: "us-west-2",
            requiresAccountId: true,
            useDualStack: false,
            useFIPS: false
        )
        let resolver = try DefaultEndpointResolver()

        XCTAssertThrowsError(try resolver.resolve(params: endpointParams)) { error in
            switch error {
            case EndpointError.unresolved(let message):
                XCTAssertEqual("Invalid ARN: Expected a 4-component resource", message)
            default:
                XCTFail()
            }
        }
    }

    /// Invalid ARN: missing outpost and bucket ids@us-west-2
    func testResolve60() throws {
        let endpointParams = EndpointParams(
            bucket: "arn:aws:s3-outposts:us-west-2:123456789012:outpost:bucket",
            region: "us-west-2",
            requiresAccountId: true,
            useDualStack: false,
            useFIPS: false
        )
        let resolver = try DefaultEndpointResolver()

        XCTAssertThrowsError(try resolver.resolve(params: endpointParams)) { error in
            switch error {
            case EndpointError.unresolved(let message):
                XCTAssertEqual("Invalid ARN: Expected a 4-component resource", message)
            default:
                XCTFail()
            }
        }
    }

    /// Invalid ARN: missing bucket id@us-west-2
    func testResolve61() throws {
        let endpointParams = EndpointParams(
            bucket: "arn:aws:s3-outposts:us-west-2:123456789012:outpost:op-01234567890123456:bucket",
            region: "us-west-2",
            requiresAccountId: true,
            useDualStack: false,
            useFIPS: false
        )
        let resolver = try DefaultEndpointResolver()

        XCTAssertThrowsError(try resolver.resolve(params: endpointParams)) { error in
            switch error {
            case EndpointError.unresolved(let message):
                XCTAssertEqual("Invalid ARN: expected a bucket name", message)
            default:
                XCTFail()
            }
        }
    }

    /// account id inserted into hostname@us-west-2
    func testResolve62() throws {
        let endpointParams = EndpointParams(
            accountId: "1234567890",
            region: "us-west-2",
            requiresAccountId: true,
            useDualStack: false,
            useFIPS: false
        )
        let resolver = try DefaultEndpointResolver()

        let actual = try resolver.resolve(params: endpointParams)

        let properties: [String: AnyHashable] =
            [
                "authSchemes": [
                    [
                        "signingRegion": "us-west-2",
                        "name": "sigv4",
                        "signingName": "s3",
                        "disableDoubleEncoding": true
                    ] as [String: AnyHashable]
                ] as [AnyHashable]
            ]

        let headers = Headers()
        let expected = try ClientRuntime.Endpoint(urlString: "https://1234567890.s3-control.us-west-2.amazonaws.com", headers: headers, properties: properties)

        XCTAssertEqual(expected, actual)
    }

    /// account id prefix with dualstack@us-east-1
    func testResolve63() throws {
        let endpointParams = EndpointParams(
            accountId: "1234567890",
            region: "us-east-1",
            requiresAccountId: true,
            useDualStack: true,
            useFIPS: false
        )
        let resolver = try DefaultEndpointResolver()

        let actual = try resolver.resolve(params: endpointParams)

        let properties: [String: AnyHashable] =
            [
                "authSchemes": [
                    [
                        "signingRegion": "us-east-1",
                        "name": "sigv4",
                        "signingName": "s3",
                        "disableDoubleEncoding": true
                    ] as [String: AnyHashable]
                ] as [AnyHashable]
            ]

        let headers = Headers()
        let expected = try ClientRuntime.Endpoint(urlString: "https://1234567890.s3-control.dualstack.us-east-1.amazonaws.com", headers: headers, properties: properties)

        XCTAssertEqual(expected, actual)
    }

    /// account id prefix with fips@us-east-1
    func testResolve64() throws {
        let endpointParams = EndpointParams(
            accountId: "1234567890",
            region: "us-east-1",
            requiresAccountId: true,
            useDualStack: false,
            useFIPS: true
        )
        let resolver = try DefaultEndpointResolver()

        let actual = try resolver.resolve(params: endpointParams)

        let properties: [String: AnyHashable] =
            [
                "authSchemes": [
                    [
                        "signingRegion": "us-east-1",
                        "name": "sigv4",
                        "signingName": "s3",
                        "disableDoubleEncoding": true
                    ] as [String: AnyHashable]
                ] as [AnyHashable]
            ]

        let headers = Headers()
        let expected = try ClientRuntime.Endpoint(urlString: "https://1234567890.s3-control-fips.us-east-1.amazonaws.com", headers: headers, properties: properties)

        XCTAssertEqual(expected, actual)
    }

    /// custom account id prefix with fips@us-east-1
    func testResolve65() throws {
        let endpointParams = EndpointParams(
            accountId: "1234567890-aBC",
            region: "us-east-1",
            requiresAccountId: true,
            useDualStack: false,
            useFIPS: true
        )
        let resolver = try DefaultEndpointResolver()

        let actual = try resolver.resolve(params: endpointParams)

        let properties: [String: AnyHashable] =
            [
                "authSchemes": [
                    [
                        "signingRegion": "us-east-1",
                        "name": "sigv4",
                        "signingName": "s3",
                        "disableDoubleEncoding": true
                    ] as [String: AnyHashable]
                ] as [AnyHashable]
            ]

        let headers = Headers()
        let expected = try ClientRuntime.Endpoint(urlString: "https://1234567890-aBC.s3-control-fips.us-east-1.amazonaws.com", headers: headers, properties: properties)

        XCTAssertEqual(expected, actual)
    }

    /// standard url @ us-east-1
    func testResolve66() throws {
        let endpointParams = EndpointParams(
            region: "us-east-1"
        )
        let resolver = try DefaultEndpointResolver()

        let actual = try resolver.resolve(params: endpointParams)

        let properties: [String: AnyHashable] =
            [
                "authSchemes": [
                    [
                        "signingRegion": "us-east-1",
                        "name": "sigv4",
                        "signingName": "s3",
                        "disableDoubleEncoding": true
                    ] as [String: AnyHashable]
                ] as [AnyHashable]
            ]

        let headers = Headers()
        let expected = try ClientRuntime.Endpoint(urlString: "https://s3-control.us-east-1.amazonaws.com", headers: headers, properties: properties)

        XCTAssertEqual(expected, actual)
    }

    /// fips url @ us-east-1
    func testResolve67() throws {
        let endpointParams = EndpointParams(
            region: "us-east-1",
            useFIPS: true
        )
        let resolver = try DefaultEndpointResolver()

        let actual = try resolver.resolve(params: endpointParams)

        let properties: [String: AnyHashable] =
            [
                "authSchemes": [
                    [
                        "signingRegion": "us-east-1",
                        "name": "sigv4",
                        "signingName": "s3",
                        "disableDoubleEncoding": true
                    ] as [String: AnyHashable]
                ] as [AnyHashable]
            ]

        let headers = Headers()
        let expected = try ClientRuntime.Endpoint(urlString: "https://s3-control-fips.us-east-1.amazonaws.com", headers: headers, properties: properties)

        XCTAssertEqual(expected, actual)
    }

    /// dualstack url @ us-east-1
    func testResolve68() throws {
        let endpointParams = EndpointParams(
            region: "us-east-1",
            useDualStack: true
        )
        let resolver = try DefaultEndpointResolver()

        let actual = try resolver.resolve(params: endpointParams)

        let properties: [String: AnyHashable] =
            [
                "authSchemes": [
                    [
                        "signingRegion": "us-east-1",
                        "name": "sigv4",
                        "signingName": "s3",
                        "disableDoubleEncoding": true
                    ] as [String: AnyHashable]
                ] as [AnyHashable]
            ]

        let headers = Headers()
        let expected = try ClientRuntime.Endpoint(urlString: "https://s3-control.dualstack.us-east-1.amazonaws.com", headers: headers, properties: properties)

        XCTAssertEqual(expected, actual)
    }

    /// fips,dualstack url @ us-east-1
    func testResolve69() throws {
        let endpointParams = EndpointParams(
            region: "us-east-1",
            useDualStack: true,
            useFIPS: true
        )
        let resolver = try DefaultEndpointResolver()

        let actual = try resolver.resolve(params: endpointParams)

        let properties: [String: AnyHashable] =
            [
                "authSchemes": [
                    [
                        "signingRegion": "us-east-1",
                        "name": "sigv4",
                        "signingName": "s3",
                        "disableDoubleEncoding": true
                    ] as [String: AnyHashable]
                ] as [AnyHashable]
            ]

        let headers = Headers()
        let expected = try ClientRuntime.Endpoint(urlString: "https://s3-control-fips.dualstack.us-east-1.amazonaws.com", headers: headers, properties: properties)

        XCTAssertEqual(expected, actual)
    }

    /// standard url @ cn-north-1
    func testResolve70() throws {
        let endpointParams = EndpointParams(
            region: "cn-north-1"
        )
        let resolver = try DefaultEndpointResolver()

        let actual = try resolver.resolve(params: endpointParams)

        let properties: [String: AnyHashable] =
            [
                "authSchemes": [
                    [
                        "signingRegion": "cn-north-1",
                        "name": "sigv4",
                        "signingName": "s3",
                        "disableDoubleEncoding": true
                    ] as [String: AnyHashable]
                ] as [AnyHashable]
            ]

        let headers = Headers()
        let expected = try ClientRuntime.Endpoint(urlString: "https://s3-control.cn-north-1.amazonaws.com.cn", headers: headers, properties: properties)

        XCTAssertEqual(expected, actual)
    }

    /// fips @ cn-north-1
    func testResolve71() throws {
        let endpointParams = EndpointParams(
            region: "cn-north-1",
            useDualStack: true,
            useFIPS: true
        )
        let resolver = try DefaultEndpointResolver()

        XCTAssertThrowsError(try resolver.resolve(params: endpointParams)) { error in
            switch error {
            case EndpointError.unresolved(let message):
                XCTAssertEqual("Partition does not support FIPS", message)
            default:
                XCTFail()
            }
        }
    }

    /// custom account id prefix @us-east-1
    func testResolve72() throws {
        let endpointParams = EndpointParams(
            accountId: "1234567890-aBC",
            region: "us-east-1",
            requiresAccountId: true,
            useDualStack: false,
            useFIPS: false
        )
        let resolver = try DefaultEndpointResolver()

        let actual = try resolver.resolve(params: endpointParams)

        let properties: [String: AnyHashable] =
            [
                "authSchemes": [
                    [
                        "signingRegion": "us-east-1",
                        "name": "sigv4",
                        "signingName": "s3",
                        "disableDoubleEncoding": true
                    ] as [String: AnyHashable]
                ] as [AnyHashable]
            ]

        let headers = Headers()
        let expected = try ClientRuntime.Endpoint(urlString: "https://1234567890-aBC.s3-control.us-east-1.amazonaws.com", headers: headers, properties: properties)

        XCTAssertEqual(expected, actual)
    }

    /// invalid account id prefix @us-east-1
    func testResolve73() throws {
        let endpointParams = EndpointParams(
            accountId: "/?invalid&not-host*label",
            region: "us-east-1",
            requiresAccountId: true,
            useDualStack: false,
            useFIPS: false
        )
        let resolver = try DefaultEndpointResolver()

        XCTAssertThrowsError(try resolver.resolve(params: endpointParams)) { error in
            switch error {
            case EndpointError.unresolved(let message):
                XCTAssertEqual("AccountId must only contain a-z, A-Z, 0-9 and `-`.", message)
            default:
                XCTFail()
            }
        }
    }

    /// custom account id prefix with fips@us-east-1
    func testResolve74() throws {
        let endpointParams = EndpointParams(
            accountId: "1234567890-aBC",
            region: "us-east-1",
            requiresAccountId: true,
            useDualStack: false,
            useFIPS: true
        )
        let resolver = try DefaultEndpointResolver()

        let actual = try resolver.resolve(params: endpointParams)

        let properties: [String: AnyHashable] =
            [
                "authSchemes": [
                    [
                        "signingRegion": "us-east-1",
                        "name": "sigv4",
                        "signingName": "s3",
                        "disableDoubleEncoding": true
                    ] as [String: AnyHashable]
                ] as [AnyHashable]
            ]

        let headers = Headers()
        let expected = try ClientRuntime.Endpoint(urlString: "https://1234567890-aBC.s3-control-fips.us-east-1.amazonaws.com", headers: headers, properties: properties)

        XCTAssertEqual(expected, actual)
    }

    /// custom account id prefix with dualstack,fips@us-east-1
    func testResolve75() throws {
        let endpointParams = EndpointParams(
            accountId: "1234567890-aBC",
            region: "us-east-1",
            requiresAccountId: true,
            useDualStack: true,
            useFIPS: true
        )
        let resolver = try DefaultEndpointResolver()

        let actual = try resolver.resolve(params: endpointParams)

        let properties: [String: AnyHashable] =
            [
                "authSchemes": [
                    [
                        "signingRegion": "us-east-1",
                        "name": "sigv4",
                        "signingName": "s3",
                        "disableDoubleEncoding": true
                    ] as [String: AnyHashable]
                ] as [AnyHashable]
            ]

        let headers = Headers()
        let expected = try ClientRuntime.Endpoint(urlString: "https://1234567890-aBC.s3-control-fips.dualstack.us-east-1.amazonaws.com", headers: headers, properties: properties)

        XCTAssertEqual(expected, actual)
    }

    /// custom account id with custom endpoint
    func testResolve76() throws {
        let endpointParams = EndpointParams(
            accountId: "1234567890-aBC",
            endpoint: "https://example.com",
            region: "us-east-1",
            requiresAccountId: true
        )
        let resolver = try DefaultEndpointResolver()

        let actual = try resolver.resolve(params: endpointParams)

        let properties: [String: AnyHashable] =
            [
                "authSchemes": [
                    [
                        "signingRegion": "us-east-1",
                        "name": "sigv4",
                        "signingName": "s3",
                        "disableDoubleEncoding": true
                    ] as [String: AnyHashable]
                ] as [AnyHashable]
            ]

        let headers = Headers()
        let expected = try ClientRuntime.Endpoint(urlString: "https://1234567890-aBC.example.com", headers: headers, properties: properties)

        XCTAssertEqual(expected, actual)
    }

    /// RequiresAccountId with AccountId unset
    func testResolve77() throws {
        let endpointParams = EndpointParams(
            region: "us-east-1",
            requiresAccountId: true
        )
        let resolver = try DefaultEndpointResolver()

        XCTAssertThrowsError(try resolver.resolve(params: endpointParams)) { error in
            switch error {
            case EndpointError.unresolved(let message):
                XCTAssertEqual("AccountId is required but not set", message)
            default:
                XCTFail()
            }
        }
    }

    /// RequiresAccountId with AccountId unset and custom endpoint
    func testResolve78() throws {
        let endpointParams = EndpointParams(
            endpoint: "https://beta.example.com",
            region: "us-east-1",
            requiresAccountId: true
        )
        let resolver = try DefaultEndpointResolver()

        XCTAssertThrowsError(try resolver.resolve(params: endpointParams)) { error in
            switch error {
            case EndpointError.unresolved(let message):
                XCTAssertEqual("AccountId is required but not set", message)
            default:
                XCTFail()
            }
        }
    }

    /// RequiresAccountId with invalid AccountId and custom endpoint
    func testResolve79() throws {
        let endpointParams = EndpointParams(
            accountId: "/?invalid&not-host*label",
            endpoint: "https://beta.example.com",
            region: "us-east-1",
            requiresAccountId: true
        )
        let resolver = try DefaultEndpointResolver()

        XCTAssertThrowsError(try resolver.resolve(params: endpointParams)) { error in
            switch error {
            case EndpointError.unresolved(let message):
                XCTAssertEqual("AccountId must only contain a-z, A-Z, 0-9 and `-`.", message)
            default:
                XCTFail()
            }
        }
    }

    /// account id with custom endpoint, fips and dualstack
    func testResolve80() throws {
        let endpointParams = EndpointParams(
            accountId: "1234567890-aBC",
            endpoint: "https://example.com",
            region: "us-east-1",
            requiresAccountId: true,
            useFIPS: true
        )
        let resolver = try DefaultEndpointResolver()

        let actual = try resolver.resolve(params: endpointParams)

        let properties: [String: AnyHashable] =
            [
                "authSchemes": [
                    [
                        "signingRegion": "us-east-1",
                        "name": "sigv4",
                        "signingName": "s3",
                        "disableDoubleEncoding": true
                    ] as [String: AnyHashable]
                ] as [AnyHashable]
            ]

        let headers = Headers()
        let expected = try ClientRuntime.Endpoint(urlString: "https://1234567890-aBC.example.com", headers: headers, properties: properties)

        XCTAssertEqual(expected, actual)
    }

    /// custom endpoint, fips and dualstack
    func testResolve81() throws {
        let endpointParams = EndpointParams(
            endpoint: "https://example.com",
            region: "us-east-1",
            useFIPS: true
        )
        let resolver = try DefaultEndpointResolver()

        let actual = try resolver.resolve(params: endpointParams)

        let properties: [String: AnyHashable] =
            [
                "authSchemes": [
                    [
                        "signingRegion": "us-east-1",
                        "name": "sigv4",
                        "signingName": "s3",
                        "disableDoubleEncoding": true
                    ] as [String: AnyHashable]
                ] as [AnyHashable]
            ]

        let headers = Headers()
        let expected = try ClientRuntime.Endpoint(urlString: "https://example.com", headers: headers, properties: properties)

        XCTAssertEqual(expected, actual)
    }

    /// custom endpoint, fips
    func testResolve82() throws {
        let endpointParams = EndpointParams(
            endpoint: "https://example.com",
            region: "us-east-1",
            useFIPS: true
        )
        let resolver = try DefaultEndpointResolver()

        let actual = try resolver.resolve(params: endpointParams)

        let properties: [String: AnyHashable] =
            [
                "authSchemes": [
                    [
                        "signingRegion": "us-east-1",
                        "name": "sigv4",
                        "signingName": "s3",
                        "disableDoubleEncoding": true
                    ] as [String: AnyHashable]
                ] as [AnyHashable]
            ]

        let headers = Headers()
        let expected = try ClientRuntime.Endpoint(urlString: "https://example.com", headers: headers, properties: properties)

        XCTAssertEqual(expected, actual)
    }

    /// custom endpoint, dualstack
    func testResolve83() throws {
        let endpointParams = EndpointParams(
            endpoint: "https://example.com",
            region: "us-east-1",
            useFIPS: false
        )
        let resolver = try DefaultEndpointResolver()

        let actual = try resolver.resolve(params: endpointParams)

        let properties: [String: AnyHashable] =
            [
                "authSchemes": [
                    [
                        "signingRegion": "us-east-1",
                        "name": "sigv4",
                        "signingName": "s3",
                        "disableDoubleEncoding": true
                    ] as [String: AnyHashable]
                ] as [AnyHashable]
            ]

        let headers = Headers()
        let expected = try ClientRuntime.Endpoint(urlString: "https://example.com", headers: headers, properties: properties)

        XCTAssertEqual(expected, actual)
    }

    /// region not set
    func testResolve84() throws {
        let endpointParams = EndpointParams(
        )
        let resolver = try DefaultEndpointResolver()

        XCTAssertThrowsError(try resolver.resolve(params: endpointParams)) { error in
            switch error {
            case EndpointError.unresolved(let message):
                XCTAssertEqual("Region must be set", message)
            default:
                XCTFail()
            }
        }
    }

    /// invalid partition
    func testResolve85() throws {
        let endpointParams = EndpointParams(
            region: "invalid-region 42"
        )
        let resolver = try DefaultEndpointResolver()

        XCTAssertThrowsError(try resolver.resolve(params: endpointParams)) { error in
            switch error {
            case EndpointError.unresolved(let message):
                XCTAssertEqual("Invalid region: region was not a valid DNS name.", message)
            default:
                XCTFail()
            }
        }
    }

    /// ListRegionalBuckets + OutpostId without accountId set.
    func testResolve86() throws {
        let endpointParams = EndpointParams(
            outpostId: "op-123",
            region: "us-east-2",
            requiresAccountId: true,
            useDualStack: false,
            useFIPS: false
        )
        let resolver = try DefaultEndpointResolver()

        XCTAssertThrowsError(try resolver.resolve(params: endpointParams)) { error in
            switch error {
            case EndpointError.unresolved(let message):
                XCTAssertEqual("AccountId is required but not set", message)
            default:
                XCTFail()
            }
        }
    }

    /// ListRegionalBuckets + OutpostId with invalid accountId set.
    func testResolve87() throws {
        let endpointParams = EndpointParams(
            accountId: "/?invalid&not-host*label",
            outpostId: "op-123",
            region: "us-east-2",
            requiresAccountId: true,
            useDualStack: false,
            useFIPS: false
        )
        let resolver = try DefaultEndpointResolver()

        XCTAssertThrowsError(try resolver.resolve(params: endpointParams)) { error in
            switch error {
            case EndpointError.unresolved(let message):
                XCTAssertEqual("AccountId must only contain a-z, A-Z, 0-9 and `-`.", message)
            default:
                XCTFail()
            }
        }
    }

    /// accesspoint set but missing accountId
    func testResolve88() throws {
        let endpointParams = EndpointParams(
            accessPointName: "myaccesspoint",
            region: "us-west-2",
            requiresAccountId: true,
            useDualStack: false,
            useFIPS: false
        )
        let resolver = try DefaultEndpointResolver()

        XCTAssertThrowsError(try resolver.resolve(params: endpointParams)) { error in
            switch error {
            case EndpointError.unresolved(let message):
                XCTAssertEqual("AccountId is required but not set", message)
            default:
                XCTFail()
            }
        }
    }

    /// outpost accesspoint ARN with missing accountId
    func testResolve89() throws {
        let endpointParams = EndpointParams(
            accessPointName: "arn:aws:s3-outposts:us-west-2::outpost:op-01234567890123456:outpost:op1",
            region: "us-west-2",
            requiresAccountId: true,
            useDualStack: false,
            useFIPS: false
        )
        let resolver = try DefaultEndpointResolver()

        XCTAssertThrowsError(try resolver.resolve(params: endpointParams)) { error in
            switch error {
            case EndpointError.unresolved(let message):
                XCTAssertEqual("Invalid ARN: missing account ID", message)
            default:
                XCTFail()
            }
        }
    }

    /// bucket ARN with missing accountId
    func testResolve90() throws {
        let endpointParams = EndpointParams(
            accessPointName: "arn:aws:s3-outposts:us-west-2::outpost:op-01234567890123456:bucket:mybucket",
            region: "us-west-2",
            requiresAccountId: true,
            useDualStack: false,
            useFIPS: false
        )
        let resolver = try DefaultEndpointResolver()

        XCTAssertThrowsError(try resolver.resolve(params: endpointParams)) { error in
            switch error {
            case EndpointError.unresolved(let message):
                XCTAssertEqual("Invalid ARN: missing account ID", message)
            default:
                XCTFail()
            }
        }
    }

    /// endpoint url with accesspoint (non-arn)
    func testResolve91() throws {
        let endpointParams = EndpointParams(
            accessPointName: "apname",
            accountId: "123456789012",
            endpoint: "https://beta.example.com",
            region: "us-west-2",
            requiresAccountId: true,
            useDualStack: false,
            useFIPS: false
        )
        let resolver = try DefaultEndpointResolver()

        let actual = try resolver.resolve(params: endpointParams)

        let properties: [String: AnyHashable] =
            [
                "authSchemes": [
                    [
                        "signingRegion": "us-west-2",
                        "name": "sigv4",
                        "signingName": "s3",
                        "disableDoubleEncoding": true
                    ] as [String: AnyHashable]
                ] as [AnyHashable]
            ]

        let headers = Headers()
        let expected = try ClientRuntime.Endpoint(urlString: "https://123456789012.beta.example.com", headers: headers, properties: properties)

        XCTAssertEqual(expected, actual)
    }

    /// access point name with an accesspoint arn@us-west-2
    func testResolve92() throws {
        let endpointParams = EndpointParams(
            accessPointName: "arn:aws:s3-outposts:us-west-2:123456789012:outpost:op-01234567890123456:accesspoint:myaccesspoint",
            endpoint: "https://beta.example.com",
            region: "us-west-2",
            requiresAccountId: true,
            useDualStack: false,
            useFIPS: false
        )
        let resolver = try DefaultEndpointResolver()

        let actual = try resolver.resolve(params: endpointParams)

        let properties: [String: AnyHashable] =
            [
                "authSchemes": [
                    [
                        "signingRegion": "us-west-2",
                        "name": "sigv4",
                        "signingName": "s3-outposts",
                        "disableDoubleEncoding": true
                    ] as [String: AnyHashable]
                ] as [AnyHashable]
            ]

        var headers = Headers()
        headers.add(name: "x-amz-account-id", values: ["123456789012"])
        headers.add(name: "x-amz-outpost-id", values: ["op-01234567890123456"])
        let expected = try ClientRuntime.Endpoint(urlString: "https://beta.example.com", headers: headers, properties: properties)

        XCTAssertEqual(expected, actual)
    }

    /// Dualstack + Custom endpoint is not supported(non-arn)
    func testResolve93() throws {
        let endpointParams = EndpointParams(
            accessPointName: "apname",
            accountId: "123456789012",
            endpoint: "https://beta.example.com",
            region: "us-west-2",
            requiresAccountId: true,
            useDualStack: true,
            useFIPS: false
        )
        let resolver = try DefaultEndpointResolver()

        XCTAssertThrowsError(try resolver.resolve(params: endpointParams)) { error in
            switch error {
            case EndpointError.unresolved(let message):
                XCTAssertEqual("Invalid Configuration: Dualstack and custom endpoint are not supported", message)
            default:
                XCTFail()
            }
        }
    }

    /// get bucket with endpoint_url and dualstack is not supported@us-west-2
    func testResolve94() throws {
        let endpointParams = EndpointParams(
            bucket: "arn:aws:s3-outposts:us-west-2:123456789012:outpost:op-01234567890123456:bucket:mybucket",
            endpoint: "https://beta.example.com",
            region: "us-west-2",
            requiresAccountId: true,
            useDualStack: true,
            useFIPS: false
        )
        let resolver = try DefaultEndpointResolver()

        XCTAssertThrowsError(try resolver.resolve(params: endpointParams)) { error in
            switch error {
            case EndpointError.unresolved(let message):
                XCTAssertEqual("Invalid configuration: Outpost buckets do not support dual-stack", message)
            default:
                XCTFail()
            }
        }
    }

    /// ListRegionalBuckets + OutpostId with fips in CN.
    func testResolve95() throws {
        let endpointParams = EndpointParams(
            accountId: "0123456789012",
            outpostId: "op-123",
            region: "cn-north-1",
            requiresAccountId: true,
            useDualStack: false,
            useFIPS: true
        )
        let resolver = try DefaultEndpointResolver()

        XCTAssertThrowsError(try resolver.resolve(params: endpointParams)) { error in
            switch error {
            case EndpointError.unresolved(let message):
                XCTAssertEqual("Partition does not support FIPS", message)
            default:
                XCTFail()
            }
        }
    }

    /// ListRegionalBuckets + invalid OutpostId.
    func testResolve96() throws {
        let endpointParams = EndpointParams(
            accountId: "0123456789012",
            outpostId: "?outpost/invalid+",
            region: "us-west-1",
            requiresAccountId: true,
            useDualStack: false,
            useFIPS: false
        )
        let resolver = try DefaultEndpointResolver()

        XCTAssertThrowsError(try resolver.resolve(params: endpointParams)) { error in
            switch error {
            case EndpointError.unresolved(let message):
                XCTAssertEqual("OutpostId must only contain a-z, A-Z, 0-9 and `-`.", message)
            default:
                XCTFail()
            }
        }
    }

    /// bucket ARN with mismatched accountId
    func testResolve97() throws {
        let endpointParams = EndpointParams(
            accountId: "0123456789012",
            bucket: "arn:aws:s3-outposts:us-west-2:999999:outpost:op-01234567890123456:bucket:mybucket",
            region: "us-west-2",
            requiresAccountId: true,
            useDualStack: false,
            useFIPS: false
        )
        let resolver = try DefaultEndpointResolver()

        XCTAssertThrowsError(try resolver.resolve(params: endpointParams)) { error in
            switch error {
            case EndpointError.unresolved(let message):
                XCTAssertEqual("Invalid ARN: the accountId specified in the ARN (`999999`) does not match the parameter (`0123456789012`)", message)
            default:
                XCTFail()
            }
        }
    }

    /// OutpostId with invalid region
    func testResolve98() throws {
        let endpointParams = EndpointParams(
            accountId: "0123456",
            outpostId: "op-123",
            region: "invalid-region 42",
            requiresAccountId: true,
            useDualStack: false,
            useFIPS: false
        )
        let resolver = try DefaultEndpointResolver()

        XCTAssertThrowsError(try resolver.resolve(params: endpointParams)) { error in
            switch error {
            case EndpointError.unresolved(let message):
                XCTAssertEqual("Invalid region: region was not a valid DNS name.", message)
            default:
                XCTFail()
            }
        }
    }

    /// OutpostId with RequireAccountId unset
    func testResolve99() throws {
        let endpointParams = EndpointParams(
            outpostId: "op-123",
            region: "us-west-2",
            useDualStack: false,
            useFIPS: false
        )
        let resolver = try DefaultEndpointResolver()

        let actual = try resolver.resolve(params: endpointParams)

        let properties: [String: AnyHashable] =
            [
                "authSchemes": [
                    [
                        "signingRegion": "us-west-2",
                        "name": "sigv4",
                        "signingName": "s3-outposts",
                        "disableDoubleEncoding": true
                    ] as [String: AnyHashable]
                ] as [AnyHashable]
            ]

        let headers = Headers()
        let expected = try ClientRuntime.Endpoint(urlString: "https://s3-outposts.us-west-2.amazonaws.com", headers: headers, properties: properties)

        XCTAssertEqual(expected, actual)
    }

    /// Outpost Accesspoint ARN with arn region and client region mismatch with UseArnRegion=false
    func testResolve100() throws {
        let endpointParams = EndpointParams(
            accessPointName: "arn:aws:s3-outposts:us-east-1:123456789012:outpost:op-01234567890123456:accesspoint:myaccesspoint",
            accountId: "123456789012",
            region: "us-west-2",
            requiresAccountId: true,
            useArnRegion: false,
            useDualStack: false,
            useFIPS: false
        )
        let resolver = try DefaultEndpointResolver()

        XCTAssertThrowsError(try resolver.resolve(params: endpointParams)) { error in
            switch error {
            case EndpointError.unresolved(let message):
                XCTAssertEqual("Invalid configuration: region from ARN `us-east-1` does not match client region `us-west-2` and UseArnRegion is `false`", message)
            default:
                XCTFail()
            }
        }
    }

    /// Outpost Bucket ARN with arn region and client region mismatch with UseArnRegion=false
    func testResolve101() throws {
        let endpointParams = EndpointParams(
            bucket: "arn:aws:s3-outposts:us-east-1:123456789012:outpost:op-01234567890123456:bucket:mybucket",
            endpoint: "https://beta.example.com",
            region: "us-west-2",
            requiresAccountId: true,
            useArnRegion: false,
            useDualStack: false,
            useFIPS: false
        )
        let resolver = try DefaultEndpointResolver()

        XCTAssertThrowsError(try resolver.resolve(params: endpointParams)) { error in
            switch error {
            case EndpointError.unresolved(let message):
                XCTAssertEqual("Invalid configuration: region from ARN `us-east-1` does not match client region `us-west-2` and UseArnRegion is `false`", message)
            default:
                XCTFail()
            }
        }
    }

    /// Accesspoint ARN with region mismatch and UseArnRegion unset
    func testResolve102() throws {
        let endpointParams = EndpointParams(
            accessPointName: "arn:aws:s3-outposts:us-east-1:123456789012:outpost:op-01234567890123456:accesspoint:myaccesspoint",
            accountId: "123456789012",
            region: "us-west-2",
            requiresAccountId: true,
            useDualStack: false,
            useFIPS: false
        )
        let resolver = try DefaultEndpointResolver()

        let actual = try resolver.resolve(params: endpointParams)

        let properties: [String: AnyHashable] =
            [
                "authSchemes": [
                    [
                        "signingRegion": "us-east-1",
                        "name": "sigv4",
                        "signingName": "s3-outposts",
                        "disableDoubleEncoding": true
                    ] as [String: AnyHashable]
                ] as [AnyHashable]
            ]

        var headers = Headers()
        headers.add(name: "x-amz-account-id", values: ["123456789012"])
        headers.add(name: "x-amz-outpost-id", values: ["op-01234567890123456"])
        let expected = try ClientRuntime.Endpoint(urlString: "https://s3-outposts.us-east-1.amazonaws.com", headers: headers, properties: properties)

        XCTAssertEqual(expected, actual)
    }

    /// Bucket ARN with region mismatch and UseArnRegion unset
    func testResolve103() throws {
        let endpointParams = EndpointParams(
            bucket: "arn:aws:s3-outposts:us-east-1:123456789012:outpost:op-01234567890123456:bucket:mybucket",
            region: "us-west-2",
            requiresAccountId: true,
            useDualStack: false,
            useFIPS: false
        )
        let resolver = try DefaultEndpointResolver()

        let actual = try resolver.resolve(params: endpointParams)

        let properties: [String: AnyHashable] =
            [
                "authSchemes": [
                    [
                        "signingRegion": "us-east-1",
                        "name": "sigv4",
                        "signingName": "s3-outposts",
                        "disableDoubleEncoding": true
                    ] as [String: AnyHashable]
                ] as [AnyHashable]
            ]

        var headers = Headers()
        headers.add(name: "x-amz-account-id", values: ["123456789012"])
        headers.add(name: "x-amz-outpost-id", values: ["op-01234567890123456"])
        let expected = try ClientRuntime.Endpoint(urlString: "https://s3-outposts.us-east-1.amazonaws.com", headers: headers, properties: properties)

        XCTAssertEqual(expected, actual)
    }

    /// Outpost Bucket ARN with partition mismatch with UseArnRegion=true
    func testResolve104() throws {
        let endpointParams = EndpointParams(
            bucket: "arn:aws:s3-outposts:cn-north-1:123456789012:outpost:op-01234567890123456:bucket:mybucket",
            region: "us-west-2",
            requiresAccountId: true,
            useArnRegion: true,
            useDualStack: false,
            useFIPS: false
        )
        let resolver = try DefaultEndpointResolver()

        XCTAssertThrowsError(try resolver.resolve(params: endpointParams)) { error in
            switch error {
            case EndpointError.unresolved(let message):
                XCTAssertEqual("Client was configured for partition `aws` but ARN has `aws-cn`", message)
            default:
                XCTFail()
            }
        }
    }

    /// Accesspoint ARN with partition mismatch and UseArnRegion=true
    func testResolve105() throws {
        let endpointParams = EndpointParams(
            accessPointName: "arn:aws:s3-outposts:cn-north-1:123456789012:outpost:op-01234567890123456:accesspoint:myaccesspoint",
            accountId: "123456789012",
            region: "us-west-2",
            requiresAccountId: true,
            useArnRegion: true,
            useDualStack: false,
            useFIPS: false
        )
        let resolver = try DefaultEndpointResolver()

        XCTAssertThrowsError(try resolver.resolve(params: endpointParams)) { error in
            switch error {
            case EndpointError.unresolved(let message):
                XCTAssertEqual("Client was configured for partition `aws` but ARN has `aws-cn`", message)
            default:
                XCTFail()
            }
        }
    }

    /// Accesspoint ARN with region mismatch, UseArnRegion=false and custom endpoint
    func testResolve106() throws {
        let endpointParams = EndpointParams(
            accessPointName: "arn:aws:s3-outposts:cn-north-1:123456789012:outpost:op-01234567890123456:accesspoint:myaccesspoint",
            endpoint: "https://example.com",
            region: "us-west-2",
            requiresAccountId: true,
            useArnRegion: false,
            useDualStack: false,
            useFIPS: false
        )
        let resolver = try DefaultEndpointResolver()

        XCTAssertThrowsError(try resolver.resolve(params: endpointParams)) { error in
            switch error {
            case EndpointError.unresolved(let message):
                XCTAssertEqual("Invalid configuration: region from ARN `cn-north-1` does not match client region `us-west-2` and UseArnRegion is `false`", message)
            default:
                XCTFail()
            }
        }
    }

    /// outpost bucket arn@us-west-2
    func testResolve107() throws {
        let endpointParams = EndpointParams(
            bucket: "arn:aws:s3-outposts:us-west-2:123456789012:outpost:op-01234567890123456:bucket:mybucket",
            region: "us-west-2",
            requiresAccountId: true,
            useDualStack: false,
            useFIPS: false
        )
        let resolver = try DefaultEndpointResolver()

        let actual = try resolver.resolve(params: endpointParams)

        let properties: [String: AnyHashable] =
            [
                "authSchemes": [
                    [
                        "signingRegion": "us-west-2",
                        "name": "sigv4",
                        "signingName": "s3-outposts",
                        "disableDoubleEncoding": true
                    ] as [String: AnyHashable]
                ] as [AnyHashable]
            ]

        var headers = Headers()
        headers.add(name: "x-amz-account-id", values: ["123456789012"])
        headers.add(name: "x-amz-outpost-id", values: ["op-01234567890123456"])
        let expected = try ClientRuntime.Endpoint(urlString: "https://s3-outposts.us-west-2.amazonaws.com", headers: headers, properties: properties)

        XCTAssertEqual(expected, actual)
    }

}
