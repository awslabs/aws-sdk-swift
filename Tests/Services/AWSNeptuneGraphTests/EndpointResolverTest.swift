// Code generated by smithy-swift-codegen. DO NOT EDIT!

import AWSClientRuntime
@testable import AWSNeptuneGraph
import AwsCommonRuntimeKit
import ClientRuntime
import SmithyTestUtil
import XCTest

class EndpointResolverTest: XCTestCase {

    override class func setUp() {
        AwsCommonRuntimeKit.CommonRuntimeKit.initialize()
    }

    /// Region and CP ApiType are provided
    func testResolve1() throws {
        let endpointParams = EndpointParams(
            apiType: "ControlPlane",
            endpoint: "https://mycustomDomain.com",
            region: "us-east-1"
        )
        let resolver = try DefaultEndpointResolver()

        let actual = try resolver.resolve(params: endpointParams)

        let properties: [String: AnyHashable] =
            [:]

        let headers = Headers()
        let expected = try ClientRuntime.Endpoint(urlString: "https://mycustomDomain.com", headers: headers, properties: properties)

        XCTAssertEqual(expected, actual)
    }

    /// Region and DP ApiType are provided
    func testResolve2() throws {
        let endpointParams = EndpointParams(
            apiType: "DataPlane",
            endpoint: "https://mycustomDomain.com",
            region: "us-east-1"
        )
        let resolver = try DefaultEndpointResolver()

        let actual = try resolver.resolve(params: endpointParams)

        let properties: [String: AnyHashable] =
            [:]

        let headers = Headers()
        let expected = try ClientRuntime.Endpoint(urlString: "https://mycustomDomain.com", headers: headers, properties: properties)

        XCTAssertEqual(expected, actual)
    }

    /// Region and invalid ApiType are provided
    func testResolve3() throws {
        let endpointParams = EndpointParams(
            apiType: "someInvalidApiType",
            endpoint: "https://mycustomDomain.com",
            region: "us-east-1"
        )
        let resolver = try DefaultEndpointResolver()

        let actual = try resolver.resolve(params: endpointParams)

        let properties: [String: AnyHashable] =
            [:]

        let headers = Headers()
        let expected = try ClientRuntime.Endpoint(urlString: "https://mycustomDomain.com", headers: headers, properties: properties)

        XCTAssertEqual(expected, actual)
    }

    /// Only invalid ApiType is provided
    func testResolve4() throws {
        let endpointParams = EndpointParams(
            apiType: "someInvalidApiType",
            endpoint: "https://mycustomDomain.com"
        )
        let resolver = try DefaultEndpointResolver()

        let actual = try resolver.resolve(params: endpointParams)

        let properties: [String: AnyHashable] =
            [:]

        let headers = Headers()
        let expected = try ClientRuntime.Endpoint(urlString: "https://mycustomDomain.com", headers: headers, properties: properties)

        XCTAssertEqual(expected, actual)
    }

    /// Validate CP endpoint in region: us-east-1, useFipsEndpoint: true, useDualStackEndpoint: true
    func testResolve5() throws {
        let endpointParams = EndpointParams(
            apiType: "ControlPlane",
            region: "us-east-1",
            useDualStack: true,
            useFIPS: true
        )
        let resolver = try DefaultEndpointResolver()

        let actual = try resolver.resolve(params: endpointParams)

        let properties: [String: AnyHashable] =
            [:]

        let headers = Headers()
        let expected = try ClientRuntime.Endpoint(urlString: "https://neptune-graph-fips.us-east-1.api.aws", headers: headers, properties: properties)

        XCTAssertEqual(expected, actual)
    }

    /// Validate DP endpoint in region: us-east-1, useFipsEndpoint: true, useDualStackEndpoint: true
    func testResolve6() throws {
        let endpointParams = EndpointParams(
            apiType: "DataPlane",
            region: "us-east-1",
            useDualStack: true,
            useFIPS: true
        )
        let resolver = try DefaultEndpointResolver()

        XCTAssertThrowsError(try resolver.resolve(params: endpointParams)) { error in
            switch error {
            case EndpointError.unresolved(let message):
                XCTAssertEqual("Invalid Configuration: fips endpoint is not supported for this API", message)
            default:
                XCTFail()
            }
        }
    }

    /// Validate CP endpoint in region: us-east-1, useFipsEndpoint: true, useDualStackEndpoint: false
    func testResolve7() throws {
        let endpointParams = EndpointParams(
            apiType: "ControlPlane",
            region: "us-east-1",
            useDualStack: false,
            useFIPS: true
        )
        let resolver = try DefaultEndpointResolver()

        let actual = try resolver.resolve(params: endpointParams)

        let properties: [String: AnyHashable] =
            [:]

        let headers = Headers()
        let expected = try ClientRuntime.Endpoint(urlString: "https://neptune-graph-fips.us-east-1.amazonaws.com", headers: headers, properties: properties)

        XCTAssertEqual(expected, actual)
    }

    /// Validate DP endpoint in region: us-east-1, useFipsEndpoint: true, useDualStackEndpoint: false
    func testResolve8() throws {
        let endpointParams = EndpointParams(
            apiType: "DataPlane",
            region: "us-east-1",
            useDualStack: false,
            useFIPS: true
        )
        let resolver = try DefaultEndpointResolver()

        XCTAssertThrowsError(try resolver.resolve(params: endpointParams)) { error in
            switch error {
            case EndpointError.unresolved(let message):
                XCTAssertEqual("Invalid Configuration: fips endpoint is not supported for this API", message)
            default:
                XCTFail()
            }
        }
    }

    /// Validate CP endpoint in region: us-east-1, useFipsEndpoint: false, useDualStackEndpoint: true
    func testResolve9() throws {
        let endpointParams = EndpointParams(
            apiType: "ControlPlane",
            region: "us-east-1",
            useDualStack: true,
            useFIPS: false
        )
        let resolver = try DefaultEndpointResolver()

        let actual = try resolver.resolve(params: endpointParams)

        let properties: [String: AnyHashable] =
            [:]

        let headers = Headers()
        let expected = try ClientRuntime.Endpoint(urlString: "https://neptune-graph.us-east-1.api.aws", headers: headers, properties: properties)

        XCTAssertEqual(expected, actual)
    }

    /// Validate DP endpoint in region: us-east-1, useFipsEndpoint: false, useDualStackEndpoint: true
    func testResolve10() throws {
        let endpointParams = EndpointParams(
            apiType: "DataPlane",
            region: "us-east-1",
            useDualStack: true,
            useFIPS: false
        )
        let resolver = try DefaultEndpointResolver()

        let actual = try resolver.resolve(params: endpointParams)

        let properties: [String: AnyHashable] =
            [:]

        let headers = Headers()
        let expected = try ClientRuntime.Endpoint(urlString: "https://neptune-graph.us-east-1.on.aws", headers: headers, properties: properties)

        XCTAssertEqual(expected, actual)
    }

    /// Validate CP endpoint in region: us-east-1, useFipsEndpoint: false, useDualStackEndpoint: false
    func testResolve11() throws {
        let endpointParams = EndpointParams(
            apiType: "ControlPlane",
            region: "us-east-1",
            useDualStack: false,
            useFIPS: false
        )
        let resolver = try DefaultEndpointResolver()

        let actual = try resolver.resolve(params: endpointParams)

        let properties: [String: AnyHashable] =
            [:]

        let headers = Headers()
        let expected = try ClientRuntime.Endpoint(urlString: "https://neptune-graph.us-east-1.amazonaws.com", headers: headers, properties: properties)

        XCTAssertEqual(expected, actual)
    }

    /// Validate DP endpoint in region: us-east-1, useFipsEndpoint: false, useDualStackEndpoint: false
    func testResolve12() throws {
        let endpointParams = EndpointParams(
            apiType: "DataPlane",
            region: "us-east-1",
            useDualStack: false,
            useFIPS: false
        )
        let resolver = try DefaultEndpointResolver()

        let actual = try resolver.resolve(params: endpointParams)

        let properties: [String: AnyHashable] =
            [:]

        let headers = Headers()
        let expected = try ClientRuntime.Endpoint(urlString: "https://us-east-1.neptune-graph.amazonaws.com", headers: headers, properties: properties)

        XCTAssertEqual(expected, actual)
    }

    /// Validate CP endpoint in region: us-east-2, useFipsEndpoint: true, useDualStackEndpoint: true
    func testResolve13() throws {
        let endpointParams = EndpointParams(
            apiType: "ControlPlane",
            region: "us-east-2",
            useDualStack: true,
            useFIPS: true
        )
        let resolver = try DefaultEndpointResolver()

        let actual = try resolver.resolve(params: endpointParams)

        let properties: [String: AnyHashable] =
            [:]

        let headers = Headers()
        let expected = try ClientRuntime.Endpoint(urlString: "https://neptune-graph-fips.us-east-2.api.aws", headers: headers, properties: properties)

        XCTAssertEqual(expected, actual)
    }

    /// Validate DP endpoint in region: us-east-2, useFipsEndpoint: true, useDualStackEndpoint: true
    func testResolve14() throws {
        let endpointParams = EndpointParams(
            apiType: "DataPlane",
            region: "us-east-2",
            useDualStack: true,
            useFIPS: true
        )
        let resolver = try DefaultEndpointResolver()

        XCTAssertThrowsError(try resolver.resolve(params: endpointParams)) { error in
            switch error {
            case EndpointError.unresolved(let message):
                XCTAssertEqual("Invalid Configuration: fips endpoint is not supported for this API", message)
            default:
                XCTFail()
            }
        }
    }

    /// Validate CP endpoint in region: us-east-2, useFipsEndpoint: true, useDualStackEndpoint: false
    func testResolve15() throws {
        let endpointParams = EndpointParams(
            apiType: "ControlPlane",
            region: "us-east-2",
            useDualStack: false,
            useFIPS: true
        )
        let resolver = try DefaultEndpointResolver()

        let actual = try resolver.resolve(params: endpointParams)

        let properties: [String: AnyHashable] =
            [:]

        let headers = Headers()
        let expected = try ClientRuntime.Endpoint(urlString: "https://neptune-graph-fips.us-east-2.amazonaws.com", headers: headers, properties: properties)

        XCTAssertEqual(expected, actual)
    }

    /// Validate DP endpoint in region: us-east-2, useFipsEndpoint: true, useDualStackEndpoint: false
    func testResolve16() throws {
        let endpointParams = EndpointParams(
            apiType: "DataPlane",
            region: "us-east-2",
            useDualStack: false,
            useFIPS: true
        )
        let resolver = try DefaultEndpointResolver()

        XCTAssertThrowsError(try resolver.resolve(params: endpointParams)) { error in
            switch error {
            case EndpointError.unresolved(let message):
                XCTAssertEqual("Invalid Configuration: fips endpoint is not supported for this API", message)
            default:
                XCTFail()
            }
        }
    }

    /// Validate CP endpoint in region: us-east-2, useFipsEndpoint: false, useDualStackEndpoint: true
    func testResolve17() throws {
        let endpointParams = EndpointParams(
            apiType: "ControlPlane",
            region: "us-east-2",
            useDualStack: true,
            useFIPS: false
        )
        let resolver = try DefaultEndpointResolver()

        let actual = try resolver.resolve(params: endpointParams)

        let properties: [String: AnyHashable] =
            [:]

        let headers = Headers()
        let expected = try ClientRuntime.Endpoint(urlString: "https://neptune-graph.us-east-2.api.aws", headers: headers, properties: properties)

        XCTAssertEqual(expected, actual)
    }

    /// Validate DP endpoint in region: us-east-2, useFipsEndpoint: false, useDualStackEndpoint: true
    func testResolve18() throws {
        let endpointParams = EndpointParams(
            apiType: "DataPlane",
            region: "us-east-2",
            useDualStack: true,
            useFIPS: false
        )
        let resolver = try DefaultEndpointResolver()

        let actual = try resolver.resolve(params: endpointParams)

        let properties: [String: AnyHashable] =
            [:]

        let headers = Headers()
        let expected = try ClientRuntime.Endpoint(urlString: "https://neptune-graph.us-east-2.on.aws", headers: headers, properties: properties)

        XCTAssertEqual(expected, actual)
    }

    /// Validate CP endpoint in region: us-east-2, useFipsEndpoint: false, useDualStackEndpoint: false
    func testResolve19() throws {
        let endpointParams = EndpointParams(
            apiType: "ControlPlane",
            region: "us-east-2",
            useDualStack: false,
            useFIPS: false
        )
        let resolver = try DefaultEndpointResolver()

        let actual = try resolver.resolve(params: endpointParams)

        let properties: [String: AnyHashable] =
            [:]

        let headers = Headers()
        let expected = try ClientRuntime.Endpoint(urlString: "https://neptune-graph.us-east-2.amazonaws.com", headers: headers, properties: properties)

        XCTAssertEqual(expected, actual)
    }

    /// Validate DP endpoint in region: us-east-2, useFipsEndpoint: false, useDualStackEndpoint: false
    func testResolve20() throws {
        let endpointParams = EndpointParams(
            apiType: "DataPlane",
            region: "us-east-2",
            useDualStack: false,
            useFIPS: false
        )
        let resolver = try DefaultEndpointResolver()

        let actual = try resolver.resolve(params: endpointParams)

        let properties: [String: AnyHashable] =
            [:]

        let headers = Headers()
        let expected = try ClientRuntime.Endpoint(urlString: "https://us-east-2.neptune-graph.amazonaws.com", headers: headers, properties: properties)

        XCTAssertEqual(expected, actual)
    }

    /// Validate CP endpoint in region: us-west-2, useFipsEndpoint: true, useDualStackEndpoint: true
    func testResolve21() throws {
        let endpointParams = EndpointParams(
            apiType: "ControlPlane",
            region: "us-west-2",
            useDualStack: true,
            useFIPS: true
        )
        let resolver = try DefaultEndpointResolver()

        let actual = try resolver.resolve(params: endpointParams)

        let properties: [String: AnyHashable] =
            [:]

        let headers = Headers()
        let expected = try ClientRuntime.Endpoint(urlString: "https://neptune-graph-fips.us-west-2.api.aws", headers: headers, properties: properties)

        XCTAssertEqual(expected, actual)
    }

    /// Validate DP endpoint in region: us-west-2, useFipsEndpoint: true, useDualStackEndpoint: true
    func testResolve22() throws {
        let endpointParams = EndpointParams(
            apiType: "DataPlane",
            region: "us-west-2",
            useDualStack: true,
            useFIPS: true
        )
        let resolver = try DefaultEndpointResolver()

        XCTAssertThrowsError(try resolver.resolve(params: endpointParams)) { error in
            switch error {
            case EndpointError.unresolved(let message):
                XCTAssertEqual("Invalid Configuration: fips endpoint is not supported for this API", message)
            default:
                XCTFail()
            }
        }
    }

    /// Validate CP endpoint in region: us-west-2, useFipsEndpoint: true, useDualStackEndpoint: false
    func testResolve23() throws {
        let endpointParams = EndpointParams(
            apiType: "ControlPlane",
            region: "us-west-2",
            useDualStack: false,
            useFIPS: true
        )
        let resolver = try DefaultEndpointResolver()

        let actual = try resolver.resolve(params: endpointParams)

        let properties: [String: AnyHashable] =
            [:]

        let headers = Headers()
        let expected = try ClientRuntime.Endpoint(urlString: "https://neptune-graph-fips.us-west-2.amazonaws.com", headers: headers, properties: properties)

        XCTAssertEqual(expected, actual)
    }

    /// Validate DP endpoint in region: us-west-2, useFipsEndpoint: true, useDualStackEndpoint: false
    func testResolve24() throws {
        let endpointParams = EndpointParams(
            apiType: "DataPlane",
            region: "us-west-2",
            useDualStack: false,
            useFIPS: true
        )
        let resolver = try DefaultEndpointResolver()

        XCTAssertThrowsError(try resolver.resolve(params: endpointParams)) { error in
            switch error {
            case EndpointError.unresolved(let message):
                XCTAssertEqual("Invalid Configuration: fips endpoint is not supported for this API", message)
            default:
                XCTFail()
            }
        }
    }

    /// Validate CP endpoint in region: us-west-2, useFipsEndpoint: false, useDualStackEndpoint: true
    func testResolve25() throws {
        let endpointParams = EndpointParams(
            apiType: "ControlPlane",
            region: "us-west-2",
            useDualStack: true,
            useFIPS: false
        )
        let resolver = try DefaultEndpointResolver()

        let actual = try resolver.resolve(params: endpointParams)

        let properties: [String: AnyHashable] =
            [:]

        let headers = Headers()
        let expected = try ClientRuntime.Endpoint(urlString: "https://neptune-graph.us-west-2.api.aws", headers: headers, properties: properties)

        XCTAssertEqual(expected, actual)
    }

    /// Validate DP endpoint in region: us-west-2, useFipsEndpoint: false, useDualStackEndpoint: true
    func testResolve26() throws {
        let endpointParams = EndpointParams(
            apiType: "DataPlane",
            region: "us-west-2",
            useDualStack: true,
            useFIPS: false
        )
        let resolver = try DefaultEndpointResolver()

        let actual = try resolver.resolve(params: endpointParams)

        let properties: [String: AnyHashable] =
            [:]

        let headers = Headers()
        let expected = try ClientRuntime.Endpoint(urlString: "https://neptune-graph.us-west-2.on.aws", headers: headers, properties: properties)

        XCTAssertEqual(expected, actual)
    }

    /// Validate CP endpoint in region: us-west-2, useFipsEndpoint: false, useDualStackEndpoint: false
    func testResolve27() throws {
        let endpointParams = EndpointParams(
            apiType: "ControlPlane",
            region: "us-west-2",
            useDualStack: false,
            useFIPS: false
        )
        let resolver = try DefaultEndpointResolver()

        let actual = try resolver.resolve(params: endpointParams)

        let properties: [String: AnyHashable] =
            [:]

        let headers = Headers()
        let expected = try ClientRuntime.Endpoint(urlString: "https://neptune-graph.us-west-2.amazonaws.com", headers: headers, properties: properties)

        XCTAssertEqual(expected, actual)
    }

    /// Validate DP endpoint in region: us-west-2, useFipsEndpoint: false, useDualStackEndpoint: false
    func testResolve28() throws {
        let endpointParams = EndpointParams(
            apiType: "DataPlane",
            region: "us-west-2",
            useDualStack: false,
            useFIPS: false
        )
        let resolver = try DefaultEndpointResolver()

        let actual = try resolver.resolve(params: endpointParams)

        let properties: [String: AnyHashable] =
            [:]

        let headers = Headers()
        let expected = try ClientRuntime.Endpoint(urlString: "https://us-west-2.neptune-graph.amazonaws.com", headers: headers, properties: properties)

        XCTAssertEqual(expected, actual)
    }

    /// Validate CP endpoint in region: eu-west-1, useFipsEndpoint: true, useDualStackEndpoint: true
    func testResolve29() throws {
        let endpointParams = EndpointParams(
            apiType: "ControlPlane",
            region: "eu-west-1",
            useDualStack: true,
            useFIPS: true
        )
        let resolver = try DefaultEndpointResolver()

        let actual = try resolver.resolve(params: endpointParams)

        let properties: [String: AnyHashable] =
            [:]

        let headers = Headers()
        let expected = try ClientRuntime.Endpoint(urlString: "https://neptune-graph-fips.eu-west-1.api.aws", headers: headers, properties: properties)

        XCTAssertEqual(expected, actual)
    }

    /// Validate DP endpoint in region: eu-west-1, useFipsEndpoint: true, useDualStackEndpoint: true
    func testResolve30() throws {
        let endpointParams = EndpointParams(
            apiType: "DataPlane",
            region: "eu-west-1",
            useDualStack: true,
            useFIPS: true
        )
        let resolver = try DefaultEndpointResolver()

        XCTAssertThrowsError(try resolver.resolve(params: endpointParams)) { error in
            switch error {
            case EndpointError.unresolved(let message):
                XCTAssertEqual("Invalid Configuration: fips endpoint is not supported for this API", message)
            default:
                XCTFail()
            }
        }
    }

    /// Validate CP endpoint in region: eu-west-1, useFipsEndpoint: true, useDualStackEndpoint: false
    func testResolve31() throws {
        let endpointParams = EndpointParams(
            apiType: "ControlPlane",
            region: "eu-west-1",
            useDualStack: false,
            useFIPS: true
        )
        let resolver = try DefaultEndpointResolver()

        let actual = try resolver.resolve(params: endpointParams)

        let properties: [String: AnyHashable] =
            [:]

        let headers = Headers()
        let expected = try ClientRuntime.Endpoint(urlString: "https://neptune-graph-fips.eu-west-1.amazonaws.com", headers: headers, properties: properties)

        XCTAssertEqual(expected, actual)
    }

    /// Validate DP endpoint in region: eu-west-1, useFipsEndpoint: true, useDualStackEndpoint: false
    func testResolve32() throws {
        let endpointParams = EndpointParams(
            apiType: "DataPlane",
            region: "eu-west-1",
            useDualStack: false,
            useFIPS: true
        )
        let resolver = try DefaultEndpointResolver()

        XCTAssertThrowsError(try resolver.resolve(params: endpointParams)) { error in
            switch error {
            case EndpointError.unresolved(let message):
                XCTAssertEqual("Invalid Configuration: fips endpoint is not supported for this API", message)
            default:
                XCTFail()
            }
        }
    }

    /// Validate CP endpoint in region: eu-west-1, useFipsEndpoint: false, useDualStackEndpoint: true
    func testResolve33() throws {
        let endpointParams = EndpointParams(
            apiType: "ControlPlane",
            region: "eu-west-1",
            useDualStack: true,
            useFIPS: false
        )
        let resolver = try DefaultEndpointResolver()

        let actual = try resolver.resolve(params: endpointParams)

        let properties: [String: AnyHashable] =
            [:]

        let headers = Headers()
        let expected = try ClientRuntime.Endpoint(urlString: "https://neptune-graph.eu-west-1.api.aws", headers: headers, properties: properties)

        XCTAssertEqual(expected, actual)
    }

    /// Validate DP endpoint in region: eu-west-1, useFipsEndpoint: false, useDualStackEndpoint: true
    func testResolve34() throws {
        let endpointParams = EndpointParams(
            apiType: "DataPlane",
            region: "eu-west-1",
            useDualStack: true,
            useFIPS: false
        )
        let resolver = try DefaultEndpointResolver()

        let actual = try resolver.resolve(params: endpointParams)

        let properties: [String: AnyHashable] =
            [:]

        let headers = Headers()
        let expected = try ClientRuntime.Endpoint(urlString: "https://neptune-graph.eu-west-1.on.aws", headers: headers, properties: properties)

        XCTAssertEqual(expected, actual)
    }

    /// Validate CP endpoint in region: eu-west-1, useFipsEndpoint: false, useDualStackEndpoint: false
    func testResolve35() throws {
        let endpointParams = EndpointParams(
            apiType: "ControlPlane",
            region: "eu-west-1",
            useDualStack: false,
            useFIPS: false
        )
        let resolver = try DefaultEndpointResolver()

        let actual = try resolver.resolve(params: endpointParams)

        let properties: [String: AnyHashable] =
            [:]

        let headers = Headers()
        let expected = try ClientRuntime.Endpoint(urlString: "https://neptune-graph.eu-west-1.amazonaws.com", headers: headers, properties: properties)

        XCTAssertEqual(expected, actual)
    }

    /// Validate DP endpoint in region: eu-west-1, useFipsEndpoint: false, useDualStackEndpoint: false
    func testResolve36() throws {
        let endpointParams = EndpointParams(
            apiType: "DataPlane",
            region: "eu-west-1",
            useDualStack: false,
            useFIPS: false
        )
        let resolver = try DefaultEndpointResolver()

        let actual = try resolver.resolve(params: endpointParams)

        let properties: [String: AnyHashable] =
            [:]

        let headers = Headers()
        let expected = try ClientRuntime.Endpoint(urlString: "https://eu-west-1.neptune-graph.amazonaws.com", headers: headers, properties: properties)

        XCTAssertEqual(expected, actual)
    }

    /// Validate CP endpoint in region: eu-west-2, useFipsEndpoint: true, useDualStackEndpoint: true
    func testResolve37() throws {
        let endpointParams = EndpointParams(
            apiType: "ControlPlane",
            region: "eu-west-2",
            useDualStack: true,
            useFIPS: true
        )
        let resolver = try DefaultEndpointResolver()

        let actual = try resolver.resolve(params: endpointParams)

        let properties: [String: AnyHashable] =
            [:]

        let headers = Headers()
        let expected = try ClientRuntime.Endpoint(urlString: "https://neptune-graph-fips.eu-west-2.api.aws", headers: headers, properties: properties)

        XCTAssertEqual(expected, actual)
    }

    /// Validate DP endpoint in region: eu-west-2, useFipsEndpoint: true, useDualStackEndpoint: true
    func testResolve38() throws {
        let endpointParams = EndpointParams(
            apiType: "DataPlane",
            region: "eu-west-2",
            useDualStack: true,
            useFIPS: true
        )
        let resolver = try DefaultEndpointResolver()

        XCTAssertThrowsError(try resolver.resolve(params: endpointParams)) { error in
            switch error {
            case EndpointError.unresolved(let message):
                XCTAssertEqual("Invalid Configuration: fips endpoint is not supported for this API", message)
            default:
                XCTFail()
            }
        }
    }

    /// Validate CP endpoint in region: eu-west-2, useFipsEndpoint: true, useDualStackEndpoint: false
    func testResolve39() throws {
        let endpointParams = EndpointParams(
            apiType: "ControlPlane",
            region: "eu-west-2",
            useDualStack: false,
            useFIPS: true
        )
        let resolver = try DefaultEndpointResolver()

        let actual = try resolver.resolve(params: endpointParams)

        let properties: [String: AnyHashable] =
            [:]

        let headers = Headers()
        let expected = try ClientRuntime.Endpoint(urlString: "https://neptune-graph-fips.eu-west-2.amazonaws.com", headers: headers, properties: properties)

        XCTAssertEqual(expected, actual)
    }

    /// Validate DP endpoint in region: eu-west-2, useFipsEndpoint: true, useDualStackEndpoint: false
    func testResolve40() throws {
        let endpointParams = EndpointParams(
            apiType: "DataPlane",
            region: "eu-west-2",
            useDualStack: false,
            useFIPS: true
        )
        let resolver = try DefaultEndpointResolver()

        XCTAssertThrowsError(try resolver.resolve(params: endpointParams)) { error in
            switch error {
            case EndpointError.unresolved(let message):
                XCTAssertEqual("Invalid Configuration: fips endpoint is not supported for this API", message)
            default:
                XCTFail()
            }
        }
    }

    /// Validate CP endpoint in region: eu-west-2, useFipsEndpoint: false, useDualStackEndpoint: true
    func testResolve41() throws {
        let endpointParams = EndpointParams(
            apiType: "ControlPlane",
            region: "eu-west-2",
            useDualStack: true,
            useFIPS: false
        )
        let resolver = try DefaultEndpointResolver()

        let actual = try resolver.resolve(params: endpointParams)

        let properties: [String: AnyHashable] =
            [:]

        let headers = Headers()
        let expected = try ClientRuntime.Endpoint(urlString: "https://neptune-graph.eu-west-2.api.aws", headers: headers, properties: properties)

        XCTAssertEqual(expected, actual)
    }

    /// Validate DP endpoint in region: eu-west-2, useFipsEndpoint: false, useDualStackEndpoint: true
    func testResolve42() throws {
        let endpointParams = EndpointParams(
            apiType: "DataPlane",
            region: "eu-west-2",
            useDualStack: true,
            useFIPS: false
        )
        let resolver = try DefaultEndpointResolver()

        let actual = try resolver.resolve(params: endpointParams)

        let properties: [String: AnyHashable] =
            [:]

        let headers = Headers()
        let expected = try ClientRuntime.Endpoint(urlString: "https://neptune-graph.eu-west-2.on.aws", headers: headers, properties: properties)

        XCTAssertEqual(expected, actual)
    }

    /// Validate CP endpoint in region: eu-west-2, useFipsEndpoint: false, useDualStackEndpoint: false
    func testResolve43() throws {
        let endpointParams = EndpointParams(
            apiType: "ControlPlane",
            region: "eu-west-2",
            useDualStack: false,
            useFIPS: false
        )
        let resolver = try DefaultEndpointResolver()

        let actual = try resolver.resolve(params: endpointParams)

        let properties: [String: AnyHashable] =
            [:]

        let headers = Headers()
        let expected = try ClientRuntime.Endpoint(urlString: "https://neptune-graph.eu-west-2.amazonaws.com", headers: headers, properties: properties)

        XCTAssertEqual(expected, actual)
    }

    /// Validate DP endpoint in region: eu-west-2, useFipsEndpoint: false, useDualStackEndpoint: false
    func testResolve44() throws {
        let endpointParams = EndpointParams(
            apiType: "DataPlane",
            region: "eu-west-2",
            useDualStack: false,
            useFIPS: false
        )
        let resolver = try DefaultEndpointResolver()

        let actual = try resolver.resolve(params: endpointParams)

        let properties: [String: AnyHashable] =
            [:]

        let headers = Headers()
        let expected = try ClientRuntime.Endpoint(urlString: "https://eu-west-2.neptune-graph.amazonaws.com", headers: headers, properties: properties)

        XCTAssertEqual(expected, actual)
    }

    /// Validate CP endpoint in region: eu-central-1, useFipsEndpoint: true, useDualStackEndpoint: true
    func testResolve45() throws {
        let endpointParams = EndpointParams(
            apiType: "ControlPlane",
            region: "eu-central-1",
            useDualStack: true,
            useFIPS: true
        )
        let resolver = try DefaultEndpointResolver()

        let actual = try resolver.resolve(params: endpointParams)

        let properties: [String: AnyHashable] =
            [:]

        let headers = Headers()
        let expected = try ClientRuntime.Endpoint(urlString: "https://neptune-graph-fips.eu-central-1.api.aws", headers: headers, properties: properties)

        XCTAssertEqual(expected, actual)
    }

    /// Validate DP endpoint in region: eu-central-1, useFipsEndpoint: true, useDualStackEndpoint: true
    func testResolve46() throws {
        let endpointParams = EndpointParams(
            apiType: "DataPlane",
            region: "eu-central-1",
            useDualStack: true,
            useFIPS: true
        )
        let resolver = try DefaultEndpointResolver()

        XCTAssertThrowsError(try resolver.resolve(params: endpointParams)) { error in
            switch error {
            case EndpointError.unresolved(let message):
                XCTAssertEqual("Invalid Configuration: fips endpoint is not supported for this API", message)
            default:
                XCTFail()
            }
        }
    }

    /// Validate CP endpoint in region: eu-central-1, useFipsEndpoint: true, useDualStackEndpoint: false
    func testResolve47() throws {
        let endpointParams = EndpointParams(
            apiType: "ControlPlane",
            region: "eu-central-1",
            useDualStack: false,
            useFIPS: true
        )
        let resolver = try DefaultEndpointResolver()

        let actual = try resolver.resolve(params: endpointParams)

        let properties: [String: AnyHashable] =
            [:]

        let headers = Headers()
        let expected = try ClientRuntime.Endpoint(urlString: "https://neptune-graph-fips.eu-central-1.amazonaws.com", headers: headers, properties: properties)

        XCTAssertEqual(expected, actual)
    }

    /// Validate DP endpoint in region: eu-central-1, useFipsEndpoint: true, useDualStackEndpoint: false
    func testResolve48() throws {
        let endpointParams = EndpointParams(
            apiType: "DataPlane",
            region: "eu-central-1",
            useDualStack: false,
            useFIPS: true
        )
        let resolver = try DefaultEndpointResolver()

        XCTAssertThrowsError(try resolver.resolve(params: endpointParams)) { error in
            switch error {
            case EndpointError.unresolved(let message):
                XCTAssertEqual("Invalid Configuration: fips endpoint is not supported for this API", message)
            default:
                XCTFail()
            }
        }
    }

    /// Validate CP endpoint in region: eu-central-1, useFipsEndpoint: false, useDualStackEndpoint: true
    func testResolve49() throws {
        let endpointParams = EndpointParams(
            apiType: "ControlPlane",
            region: "eu-central-1",
            useDualStack: true,
            useFIPS: false
        )
        let resolver = try DefaultEndpointResolver()

        let actual = try resolver.resolve(params: endpointParams)

        let properties: [String: AnyHashable] =
            [:]

        let headers = Headers()
        let expected = try ClientRuntime.Endpoint(urlString: "https://neptune-graph.eu-central-1.api.aws", headers: headers, properties: properties)

        XCTAssertEqual(expected, actual)
    }

    /// Validate DP endpoint in region: eu-central-1, useFipsEndpoint: false, useDualStackEndpoint: true
    func testResolve50() throws {
        let endpointParams = EndpointParams(
            apiType: "DataPlane",
            region: "eu-central-1",
            useDualStack: true,
            useFIPS: false
        )
        let resolver = try DefaultEndpointResolver()

        let actual = try resolver.resolve(params: endpointParams)

        let properties: [String: AnyHashable] =
            [:]

        let headers = Headers()
        let expected = try ClientRuntime.Endpoint(urlString: "https://neptune-graph.eu-central-1.on.aws", headers: headers, properties: properties)

        XCTAssertEqual(expected, actual)
    }

    /// Validate CP endpoint in region: eu-central-1, useFipsEndpoint: false, useDualStackEndpoint: false
    func testResolve51() throws {
        let endpointParams = EndpointParams(
            apiType: "ControlPlane",
            region: "eu-central-1",
            useDualStack: false,
            useFIPS: false
        )
        let resolver = try DefaultEndpointResolver()

        let actual = try resolver.resolve(params: endpointParams)

        let properties: [String: AnyHashable] =
            [:]

        let headers = Headers()
        let expected = try ClientRuntime.Endpoint(urlString: "https://neptune-graph.eu-central-1.amazonaws.com", headers: headers, properties: properties)

        XCTAssertEqual(expected, actual)
    }

    /// Validate DP endpoint in region: eu-central-1, useFipsEndpoint: false, useDualStackEndpoint: false
    func testResolve52() throws {
        let endpointParams = EndpointParams(
            apiType: "DataPlane",
            region: "eu-central-1",
            useDualStack: false,
            useFIPS: false
        )
        let resolver = try DefaultEndpointResolver()

        let actual = try resolver.resolve(params: endpointParams)

        let properties: [String: AnyHashable] =
            [:]

        let headers = Headers()
        let expected = try ClientRuntime.Endpoint(urlString: "https://eu-central-1.neptune-graph.amazonaws.com", headers: headers, properties: properties)

        XCTAssertEqual(expected, actual)
    }

    /// Validate CP endpoint in region: ap-southeast-1, useFipsEndpoint: true, useDualStackEndpoint: true
    func testResolve53() throws {
        let endpointParams = EndpointParams(
            apiType: "ControlPlane",
            region: "ap-southeast-1",
            useDualStack: true,
            useFIPS: true
        )
        let resolver = try DefaultEndpointResolver()

        let actual = try resolver.resolve(params: endpointParams)

        let properties: [String: AnyHashable] =
            [:]

        let headers = Headers()
        let expected = try ClientRuntime.Endpoint(urlString: "https://neptune-graph-fips.ap-southeast-1.api.aws", headers: headers, properties: properties)

        XCTAssertEqual(expected, actual)
    }

    /// Validate DP endpoint in region: ap-southeast-1, useFipsEndpoint: true, useDualStackEndpoint: true
    func testResolve54() throws {
        let endpointParams = EndpointParams(
            apiType: "DataPlane",
            region: "ap-southeast-1",
            useDualStack: true,
            useFIPS: true
        )
        let resolver = try DefaultEndpointResolver()

        XCTAssertThrowsError(try resolver.resolve(params: endpointParams)) { error in
            switch error {
            case EndpointError.unresolved(let message):
                XCTAssertEqual("Invalid Configuration: fips endpoint is not supported for this API", message)
            default:
                XCTFail()
            }
        }
    }

    /// Validate CP endpoint in region: ap-southeast-1, useFipsEndpoint: true, useDualStackEndpoint: false
    func testResolve55() throws {
        let endpointParams = EndpointParams(
            apiType: "ControlPlane",
            region: "ap-southeast-1",
            useDualStack: false,
            useFIPS: true
        )
        let resolver = try DefaultEndpointResolver()

        let actual = try resolver.resolve(params: endpointParams)

        let properties: [String: AnyHashable] =
            [:]

        let headers = Headers()
        let expected = try ClientRuntime.Endpoint(urlString: "https://neptune-graph-fips.ap-southeast-1.amazonaws.com", headers: headers, properties: properties)

        XCTAssertEqual(expected, actual)
    }

    /// Validate DP endpoint in region: ap-southeast-1, useFipsEndpoint: true, useDualStackEndpoint: false
    func testResolve56() throws {
        let endpointParams = EndpointParams(
            apiType: "DataPlane",
            region: "ap-southeast-1",
            useDualStack: false,
            useFIPS: true
        )
        let resolver = try DefaultEndpointResolver()

        XCTAssertThrowsError(try resolver.resolve(params: endpointParams)) { error in
            switch error {
            case EndpointError.unresolved(let message):
                XCTAssertEqual("Invalid Configuration: fips endpoint is not supported for this API", message)
            default:
                XCTFail()
            }
        }
    }

    /// Validate CP endpoint in region: ap-southeast-1, useFipsEndpoint: false, useDualStackEndpoint: true
    func testResolve57() throws {
        let endpointParams = EndpointParams(
            apiType: "ControlPlane",
            region: "ap-southeast-1",
            useDualStack: true,
            useFIPS: false
        )
        let resolver = try DefaultEndpointResolver()

        let actual = try resolver.resolve(params: endpointParams)

        let properties: [String: AnyHashable] =
            [:]

        let headers = Headers()
        let expected = try ClientRuntime.Endpoint(urlString: "https://neptune-graph.ap-southeast-1.api.aws", headers: headers, properties: properties)

        XCTAssertEqual(expected, actual)
    }

    /// Validate DP endpoint in region: ap-southeast-1, useFipsEndpoint: false, useDualStackEndpoint: true
    func testResolve58() throws {
        let endpointParams = EndpointParams(
            apiType: "DataPlane",
            region: "ap-southeast-1",
            useDualStack: true,
            useFIPS: false
        )
        let resolver = try DefaultEndpointResolver()

        let actual = try resolver.resolve(params: endpointParams)

        let properties: [String: AnyHashable] =
            [:]

        let headers = Headers()
        let expected = try ClientRuntime.Endpoint(urlString: "https://neptune-graph.ap-southeast-1.on.aws", headers: headers, properties: properties)

        XCTAssertEqual(expected, actual)
    }

    /// Validate CP endpoint in region: ap-southeast-1, useFipsEndpoint: false, useDualStackEndpoint: false
    func testResolve59() throws {
        let endpointParams = EndpointParams(
            apiType: "ControlPlane",
            region: "ap-southeast-1",
            useDualStack: false,
            useFIPS: false
        )
        let resolver = try DefaultEndpointResolver()

        let actual = try resolver.resolve(params: endpointParams)

        let properties: [String: AnyHashable] =
            [:]

        let headers = Headers()
        let expected = try ClientRuntime.Endpoint(urlString: "https://neptune-graph.ap-southeast-1.amazonaws.com", headers: headers, properties: properties)

        XCTAssertEqual(expected, actual)
    }

    /// Validate DP endpoint in region: ap-southeast-1, useFipsEndpoint: false, useDualStackEndpoint: false
    func testResolve60() throws {
        let endpointParams = EndpointParams(
            apiType: "DataPlane",
            region: "ap-southeast-1",
            useDualStack: false,
            useFIPS: false
        )
        let resolver = try DefaultEndpointResolver()

        let actual = try resolver.resolve(params: endpointParams)

        let properties: [String: AnyHashable] =
            [:]

        let headers = Headers()
        let expected = try ClientRuntime.Endpoint(urlString: "https://ap-southeast-1.neptune-graph.amazonaws.com", headers: headers, properties: properties)

        XCTAssertEqual(expected, actual)
    }

    /// Validate CP endpoint in region: ap-northeast-1, useFipsEndpoint: true, useDualStackEndpoint: true
    func testResolve61() throws {
        let endpointParams = EndpointParams(
            apiType: "ControlPlane",
            region: "ap-northeast-1",
            useDualStack: true,
            useFIPS: true
        )
        let resolver = try DefaultEndpointResolver()

        let actual = try resolver.resolve(params: endpointParams)

        let properties: [String: AnyHashable] =
            [:]

        let headers = Headers()
        let expected = try ClientRuntime.Endpoint(urlString: "https://neptune-graph-fips.ap-northeast-1.api.aws", headers: headers, properties: properties)

        XCTAssertEqual(expected, actual)
    }

    /// Validate DP endpoint in region: ap-northeast-1, useFipsEndpoint: true, useDualStackEndpoint: true
    func testResolve62() throws {
        let endpointParams = EndpointParams(
            apiType: "DataPlane",
            region: "ap-northeast-1",
            useDualStack: true,
            useFIPS: true
        )
        let resolver = try DefaultEndpointResolver()

        XCTAssertThrowsError(try resolver.resolve(params: endpointParams)) { error in
            switch error {
            case EndpointError.unresolved(let message):
                XCTAssertEqual("Invalid Configuration: fips endpoint is not supported for this API", message)
            default:
                XCTFail()
            }
        }
    }

    /// Validate CP endpoint in region: ap-northeast-1, useFipsEndpoint: true, useDualStackEndpoint: false
    func testResolve63() throws {
        let endpointParams = EndpointParams(
            apiType: "ControlPlane",
            region: "ap-northeast-1",
            useDualStack: false,
            useFIPS: true
        )
        let resolver = try DefaultEndpointResolver()

        let actual = try resolver.resolve(params: endpointParams)

        let properties: [String: AnyHashable] =
            [:]

        let headers = Headers()
        let expected = try ClientRuntime.Endpoint(urlString: "https://neptune-graph-fips.ap-northeast-1.amazonaws.com", headers: headers, properties: properties)

        XCTAssertEqual(expected, actual)
    }

    /// Validate DP endpoint in region: ap-northeast-1, useFipsEndpoint: true, useDualStackEndpoint: false
    func testResolve64() throws {
        let endpointParams = EndpointParams(
            apiType: "DataPlane",
            region: "ap-northeast-1",
            useDualStack: false,
            useFIPS: true
        )
        let resolver = try DefaultEndpointResolver()

        XCTAssertThrowsError(try resolver.resolve(params: endpointParams)) { error in
            switch error {
            case EndpointError.unresolved(let message):
                XCTAssertEqual("Invalid Configuration: fips endpoint is not supported for this API", message)
            default:
                XCTFail()
            }
        }
    }

    /// Validate CP endpoint in region: ap-northeast-1, useFipsEndpoint: false, useDualStackEndpoint: true
    func testResolve65() throws {
        let endpointParams = EndpointParams(
            apiType: "ControlPlane",
            region: "ap-northeast-1",
            useDualStack: true,
            useFIPS: false
        )
        let resolver = try DefaultEndpointResolver()

        let actual = try resolver.resolve(params: endpointParams)

        let properties: [String: AnyHashable] =
            [:]

        let headers = Headers()
        let expected = try ClientRuntime.Endpoint(urlString: "https://neptune-graph.ap-northeast-1.api.aws", headers: headers, properties: properties)

        XCTAssertEqual(expected, actual)
    }

    /// Validate DP endpoint in region: ap-northeast-1, useFipsEndpoint: false, useDualStackEndpoint: true
    func testResolve66() throws {
        let endpointParams = EndpointParams(
            apiType: "DataPlane",
            region: "ap-northeast-1",
            useDualStack: true,
            useFIPS: false
        )
        let resolver = try DefaultEndpointResolver()

        let actual = try resolver.resolve(params: endpointParams)

        let properties: [String: AnyHashable] =
            [:]

        let headers = Headers()
        let expected = try ClientRuntime.Endpoint(urlString: "https://neptune-graph.ap-northeast-1.on.aws", headers: headers, properties: properties)

        XCTAssertEqual(expected, actual)
    }

    /// Validate CP endpoint in region: ap-northeast-1, useFipsEndpoint: false, useDualStackEndpoint: false
    func testResolve67() throws {
        let endpointParams = EndpointParams(
            apiType: "ControlPlane",
            region: "ap-northeast-1",
            useDualStack: false,
            useFIPS: false
        )
        let resolver = try DefaultEndpointResolver()

        let actual = try resolver.resolve(params: endpointParams)

        let properties: [String: AnyHashable] =
            [:]

        let headers = Headers()
        let expected = try ClientRuntime.Endpoint(urlString: "https://neptune-graph.ap-northeast-1.amazonaws.com", headers: headers, properties: properties)

        XCTAssertEqual(expected, actual)
    }

    /// Validate DP endpoint in region: ap-northeast-1, useFipsEndpoint: false, useDualStackEndpoint: false
    func testResolve68() throws {
        let endpointParams = EndpointParams(
            apiType: "DataPlane",
            region: "ap-northeast-1",
            useDualStack: false,
            useFIPS: false
        )
        let resolver = try DefaultEndpointResolver()

        let actual = try resolver.resolve(params: endpointParams)

        let properties: [String: AnyHashable] =
            [:]

        let headers = Headers()
        let expected = try ClientRuntime.Endpoint(urlString: "https://ap-northeast-1.neptune-graph.amazonaws.com", headers: headers, properties: properties)

        XCTAssertEqual(expected, actual)
    }

    /// Validate When no region is provided
    func testResolve69() throws {
        let endpointParams = EndpointParams(
            apiType: "DataPlane"
        )
        let resolver = try DefaultEndpointResolver()

        XCTAssertThrowsError(try resolver.resolve(params: endpointParams)) { error in
            switch error {
            case EndpointError.unresolved(let message):
                XCTAssertEqual("Invalid Configuration: Missing Region", message)
            default:
                XCTFail()
            }
        }
    }

    /// Validate When invalid/unknown ApiType provided
    func testResolve70() throws {
        let endpointParams = EndpointParams(
            apiType: "someUnknownValue",
            region: "us-east-1"
        )
        let resolver = try DefaultEndpointResolver()

        XCTAssertThrowsError(try resolver.resolve(params: endpointParams)) { error in
            switch error {
            case EndpointError.unresolved(let message):
                XCTAssertEqual("Invalid Configuration: Unknown ApiType", message)
            default:
                XCTFail()
            }
        }
    }

    /// Both Fips and dualstack enabled
    func testResolve71() throws {
        let endpointParams = EndpointParams(
            apiType: "ControlPlane",
            endpoint: "https://mycustomDomain.com",
            region: "us-east-1",
            useDualStack: true,
            useFIPS: true
        )
        let resolver = try DefaultEndpointResolver()

        XCTAssertThrowsError(try resolver.resolve(params: endpointParams)) { error in
            switch error {
            case EndpointError.unresolved(let message):
                XCTAssertEqual("Invalid Configuration: FIPS and custom endpoint are not supported", message)
            default:
                XCTFail()
            }
        }
    }

    /// Fips enabled and dualstack disabled
    func testResolve72() throws {
        let endpointParams = EndpointParams(
            apiType: "ControlPlane",
            endpoint: "https://mycustomDomain.com",
            region: "us-east-1",
            useDualStack: false,
            useFIPS: true
        )
        let resolver = try DefaultEndpointResolver()

        XCTAssertThrowsError(try resolver.resolve(params: endpointParams)) { error in
            switch error {
            case EndpointError.unresolved(let message):
                XCTAssertEqual("Invalid Configuration: FIPS and custom endpoint are not supported", message)
            default:
                XCTFail()
            }
        }
    }

    /// Fips disabled and dualstack enabled
    func testResolve73() throws {
        let endpointParams = EndpointParams(
            apiType: "ControlPlane",
            endpoint: "https://mycustomDomain.com",
            region: "us-east-1",
            useDualStack: true,
            useFIPS: false
        )
        let resolver = try DefaultEndpointResolver()

        XCTAssertThrowsError(try resolver.resolve(params: endpointParams)) { error in
            switch error {
            case EndpointError.unresolved(let message):
                XCTAssertEqual("Invalid Configuration: Dualstack and custom endpoint are not supported", message)
            default:
                XCTFail()
            }
        }
    }

}
