// Code generated by smithy-swift-codegen. DO NOT EDIT!

@testable import AWSS3
import ClientRuntime
import SmithyTestUtil
import XCTest


class PutObjectRequestTest: HttpRequestTestBase {
    /// This test case validates default content-type behavior when not specified in the request
    func testPutObjectDefaultContentType() async throws {
        let urlPrefix = urlPrefixFromHost(host: "s3.us-west-2.amazonaws.com")
        let hostOnly = hostOnlyFromHost(host: "s3.us-west-2.amazonaws.com")
        let expected = buildExpectedHttpRequest(
            method: .put,
            path: "/mybucket/mykey",
            headers: [
                "Content-Type": "application/octet-stream"
            ],
            body: """
            foobar
            """,
            host: "s3.us-west-2.amazonaws.com",
            resolvedHost: ""
        )

        let decoder = ClientRuntime.XMLDecoder()
        decoder.dateDecodingStrategy = .secondsSince1970
        decoder.nonConformingFloatDecodingStrategy = .convertFromString(positiveInfinity: "Infinity", negativeInfinity: "-Infinity", nan: "NaN")
        decoder.trimValueWhitespaces = false
        decoder.removeWhitespaceElements = true

        let input = PutObjectInput(
            body: ByteStream.from(data: "foobar".data(using: .utf8)!),
            bucket: "mybucket",
            key: "mykey"
        )
        let encoder = ClientRuntime.XMLEncoder()
        encoder.dateEncodingStrategy = .secondsSince1970
        encoder.nonConformingFloatEncodingStrategy = .convertToString(positiveInfinity: "Infinity", negativeInfinity: "-Infinity", nan: "NaN")
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withMethod(value: .put)
                      .build()
        var operationStack = OperationStack<PutObjectInput, PutObjectOutputResponse, PutObjectOutputError>(id: "PutObjectDefaultContentType")
        operationStack.initializeStep.intercept(position: .after, middleware: ClientRuntime.URLPathMiddleware<PutObjectInput, PutObjectOutputResponse, PutObjectOutputError>(urlPrefix: urlPrefix))
        operationStack.initializeStep.intercept(position: .after, middleware: ClientRuntime.URLHostMiddleware<PutObjectInput, PutObjectOutputResponse>(host: hostOnly))
        operationStack.buildStep.intercept(position: .after, id: "RequestTestEndpointResolver") { (context, input, next) -> ClientRuntime.OperationOutput<PutObjectOutputResponse> in
            input.withMethod(context.getMethod())
            input.withPath(context.getPath())
            let host = "\(context.getHostPrefix() ?? "")\(context.getHost() ?? "")"
            input.withHost(host)
            return try await next.handle(context: context, input: input)
        }
        operationStack.serializeStep.intercept(position: .after, middleware: ClientRuntime.HeaderMiddleware<PutObjectInput, PutObjectOutputResponse>())
        operationStack.serializeStep.intercept(position: .after, middleware: ClientRuntime.QueryItemMiddleware<PutObjectInput, PutObjectOutputResponse>())
        operationStack.serializeStep.intercept(position: .after, middleware: ContentTypeMiddleware<PutObjectInput, PutObjectOutputResponse>(contentType: "application/octet-stream"))
        operationStack.serializeStep.intercept(position: .after, middleware: PutObjectInputBodyMiddleware())
        operationStack.finalizeStep.intercept(position: .before, middleware: ClientRuntime.ContentLengthMiddleware())
        operationStack.deserializeStep.intercept(position: .after,
                     middleware: MockDeserializeMiddleware<PutObjectOutputResponse, PutObjectOutputError>(
                             id: "TestDeserializeMiddleware"){ context, actual in
            self.assertEqual(expected, actual, { (expectedHttpBody, actualHttpBody) -> Void in
                XCTAssertNotNil(actualHttpBody, "The actual HttpBody is nil")
                XCTAssertNotNil(expectedHttpBody, "The expected HttpBody is nil")
                self.genericAssertEqualHttpBodyData(expectedHttpBody!, actualHttpBody!, encoder) { expectedData, actualData in
                    XCTAssertEqual(expectedData, actualData)
                }
            })
            let response = HttpResponse(body: HttpBody.none, statusCode: .ok)
            let mockOutput = try! PutObjectOutputResponse(httpResponse: response, decoder: nil)
            let output = OperationOutput<PutObjectOutputResponse>(httpResponse: response, output: mockOutput)
            return output
        })
        _ = try await operationStack.handleMiddleware(context: context, input: input, next: MockHandler(){ (context, request) in
            XCTFail("Deserialize was mocked out, this should fail")
            let httpResponse = HttpResponse(body: .none, statusCode: .badRequest)
            let serviceError = try! PutObjectOutputError(httpResponse: httpResponse)
            throw SdkError<PutObjectOutputError>.service(serviceError, httpResponse)
        })
    }
    /// This test case validates https://github.com/awslabs/aws-sdk-kotlin/issues/193
    func testPutOtTbjectExplicitContenype() async throws {
        let urlPrefix = urlPrefixFromHost(host: "s3.us-west-2.amazonaws.com")
        let hostOnly = hostOnlyFromHost(host: "s3.us-west-2.amazonaws.com")
        let expected = buildExpectedHttpRequest(
            method: .put,
            path: "/mybucket/mykey",
            headers: [
                "Content-Type": "application/json"
            ],
            body: """
            {"foo":"bar"}
            """,
            host: "s3.us-west-2.amazonaws.com",
            resolvedHost: ""
        )

        let decoder = ClientRuntime.XMLDecoder()
        decoder.dateDecodingStrategy = .secondsSince1970
        decoder.nonConformingFloatDecodingStrategy = .convertFromString(positiveInfinity: "Infinity", negativeInfinity: "-Infinity", nan: "NaN")
        decoder.trimValueWhitespaces = false
        decoder.removeWhitespaceElements = true

        let input = PutObjectInput(
            body: ByteStream.from(data: "{\"foo\":\"bar\"}".data(using: .utf8)!),
            bucket: "mybucket",
            contentType: "application/json",
            key: "mykey"
        )
        let encoder = ClientRuntime.XMLEncoder()
        encoder.dateEncodingStrategy = .secondsSince1970
        encoder.nonConformingFloatEncodingStrategy = .convertToString(positiveInfinity: "Infinity", negativeInfinity: "-Infinity", nan: "NaN")
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withMethod(value: .put)
                      .build()
        var operationStack = OperationStack<PutObjectInput, PutObjectOutputResponse, PutObjectOutputError>(id: "PutOtTbjectExplicitContenype")
        operationStack.initializeStep.intercept(position: .after, middleware: ClientRuntime.URLPathMiddleware<PutObjectInput, PutObjectOutputResponse, PutObjectOutputError>(urlPrefix: urlPrefix))
        operationStack.initializeStep.intercept(position: .after, middleware: ClientRuntime.URLHostMiddleware<PutObjectInput, PutObjectOutputResponse>(host: hostOnly))
        operationStack.buildStep.intercept(position: .after, id: "RequestTestEndpointResolver") { (context, input, next) -> ClientRuntime.OperationOutput<PutObjectOutputResponse> in
            input.withMethod(context.getMethod())
            input.withPath(context.getPath())
            let host = "\(context.getHostPrefix() ?? "")\(context.getHost() ?? "")"
            input.withHost(host)
            return try await next.handle(context: context, input: input)
        }
        operationStack.serializeStep.intercept(position: .after, middleware: ClientRuntime.HeaderMiddleware<PutObjectInput, PutObjectOutputResponse>())
        operationStack.serializeStep.intercept(position: .after, middleware: ClientRuntime.QueryItemMiddleware<PutObjectInput, PutObjectOutputResponse>())
        operationStack.serializeStep.intercept(position: .after, middleware: ContentTypeMiddleware<PutObjectInput, PutObjectOutputResponse>(contentType: "application/octet-stream"))
        operationStack.serializeStep.intercept(position: .after, middleware: PutObjectInputBodyMiddleware())
        operationStack.finalizeStep.intercept(position: .before, middleware: ClientRuntime.ContentLengthMiddleware())
        operationStack.deserializeStep.intercept(position: .after,
                     middleware: MockDeserializeMiddleware<PutObjectOutputResponse, PutObjectOutputError>(
                             id: "TestDeserializeMiddleware"){ context, actual in
            self.assertEqual(expected, actual, { (expectedHttpBody, actualHttpBody) -> Void in
                XCTAssertNotNil(actualHttpBody, "The actual HttpBody is nil")
                XCTAssertNotNil(expectedHttpBody, "The expected HttpBody is nil")
                self.genericAssertEqualHttpBodyData(expectedHttpBody!, actualHttpBody!, encoder) { expectedData, actualData in
                    XCTAssertEqual(expectedData, actualData)
                }
            })
            let response = HttpResponse(body: HttpBody.none, statusCode: .ok)
            let mockOutput = try! PutObjectOutputResponse(httpResponse: response, decoder: nil)
            let output = OperationOutput<PutObjectOutputResponse>(httpResponse: response, output: mockOutput)
            return output
        })
        _ = try await operationStack.handleMiddleware(context: context, input: input, next: MockHandler(){ (context, request) in
            XCTFail("Deserialize was mocked out, this should fail")
            let httpResponse = HttpResponse(body: .none, statusCode: .badRequest)
            let serviceError = try! PutObjectOutputError(httpResponse: httpResponse)
            throw SdkError<PutObjectOutputError>.service(serviceError, httpResponse)
        })
    }
}
