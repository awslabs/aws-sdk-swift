// Code generated by smithy-swift-codegen. DO NOT EDIT!

@testable import AWSS3
import AWSClientRuntime
import ClientRuntime
import SmithyTestUtil
import XCTest

class EndpointResolverTest: CrtXCBaseTestCase {
    /// region is not a valid DNS-suffix
    func testResolve1() throws {
        let endpointParams = EndpointParams(
            accelerate: false,
            region: "a b",
            useDualStack: false,
            useFIPS: false
        )
        let resolver = try DefaultEndpointResolver()

        XCTAssertThrowsError(try resolver.resolve(params: endpointParams)) { error in
            switch error {
            case EndpointError.unresolved(let message):
                XCTAssertEqual("Invalid region: region was not a valid DNS name.", message)
            default:
                XCTFail()
            }
        }
    }

    /// Invalid access point ARN: Not S3
    func testResolve2() throws {
        let endpointParams = EndpointParams(
            accelerate: false,
            bucket: "arn:aws:not-s3:us-west-2:123456789012:accesspoint:myendpoint",
            region: "us-east-1",
            useDualStack: false,
            useFIPS: false
        )
        let resolver = try DefaultEndpointResolver()

        XCTAssertThrowsError(try resolver.resolve(params: endpointParams)) { error in
            switch error {
            case EndpointError.unresolved(let message):
                XCTAssertEqual("Invalid ARN: The ARN was not for the S3 service, found: not-s3", message)
            default:
                XCTFail()
            }
        }
    }

    /// Invalid access point ARN: invalid resource
    func testResolve3() throws {
        let endpointParams = EndpointParams(
            accelerate: false,
            bucket: "arn:aws:s3:us-west-2:123456789012:accesspoint:myendpoint:more-data",
            region: "us-east-1",
            useDualStack: false,
            useFIPS: false
        )
        let resolver = try DefaultEndpointResolver()

        XCTAssertThrowsError(try resolver.resolve(params: endpointParams)) { error in
            switch error {
            case EndpointError.unresolved(let message):
                XCTAssertEqual("Invalid ARN: The ARN may only contain a single resource component after `accesspoint`.", message)
            default:
                XCTFail()
            }
        }
    }

    /// Invalid access point ARN: invalid no ap name
    func testResolve4() throws {
        let endpointParams = EndpointParams(
            accelerate: false,
            bucket: "arn:aws:s3:us-west-2:123456789012:accesspoint:",
            region: "us-east-1",
            useDualStack: false,
            useFIPS: false
        )
        let resolver = try DefaultEndpointResolver()

        XCTAssertThrowsError(try resolver.resolve(params: endpointParams)) { error in
            switch error {
            case EndpointError.unresolved(let message):
                XCTAssertEqual("Invalid ARN: Expected a resource of the format `accesspoint:<accesspoint name>` but no name was provided", message)
            default:
                XCTFail()
            }
        }
    }

    /// Invalid access point ARN: AccountId is invalid
    func testResolve5() throws {
        let endpointParams = EndpointParams(
            accelerate: false,
            bucket: "arn:aws:s3:us-west-2:123456_789012:accesspoint:apname",
            region: "us-east-1",
            useDualStack: false,
            useFIPS: false
        )
        let resolver = try DefaultEndpointResolver()

        XCTAssertThrowsError(try resolver.resolve(params: endpointParams)) { error in
            switch error {
            case EndpointError.unresolved(let message):
                XCTAssertEqual("Invalid ARN: The account id may only contain a-z, A-Z, 0-9 and `-`. Found: `123456_789012`", message)
            default:
                XCTFail()
            }
        }
    }

    /// Invalid access point ARN: access point name is invalid
    func testResolve6() throws {
        let endpointParams = EndpointParams(
            accelerate: false,
            bucket: "arn:aws:s3:us-west-2:123456789012:accesspoint:ap_name",
            region: "us-east-1",
            useDualStack: false,
            useFIPS: false
        )
        let resolver = try DefaultEndpointResolver()

        XCTAssertThrowsError(try resolver.resolve(params: endpointParams)) { error in
            switch error {
            case EndpointError.unresolved(let message):
                XCTAssertEqual("Invalid ARN: The access point name may only contain a-z, A-Z, 0-9 and `-`. Found: `ap_name`", message)
            default:
                XCTFail()
            }
        }
    }

    /// Access points (disable access points explicitly false)
    func testResolve7() throws {
        let endpointParams = EndpointParams(
            accelerate: false,
            bucket: "arn:aws:s3:us-west-2:123456789012:accesspoint:myendpoint",
            disableAccessPoints: false,
            region: "us-east-1",
            useDualStack: false,
            useFIPS: false
        )
        let resolver = try DefaultEndpointResolver()

        let actual = try resolver.resolve(params: endpointParams)

        let properties: [String: AnyHashable] =
            [
                "authSchemes": [
                    [
                        "signingRegion": "us-west-2",
                        "name": "sigv4",
                        "signingName": "s3",
                        "disableDoubleEncoding": true
                    ] as [String: AnyHashable]
                ] as [AnyHashable]
            ]

        let headers = Headers()
        let expected = try ClientRuntime.Endpoint(urlString: "https://myendpoint-123456789012.s3-accesspoint.us-west-2.amazonaws.com", headers: headers, properties: properties)

        XCTAssertEqual(expected, actual)
    }

    /// Access points: partition does not support FIPS
    func testResolve8() throws {
        let endpointParams = EndpointParams(
            accelerate: false,
            bucket: "arn:aws:s3:cn-north-1:123456789012:accesspoint:myendpoint",
            region: "cn-north-1",
            useDualStack: false,
            useFIPS: true
        )
        let resolver = try DefaultEndpointResolver()

        XCTAssertThrowsError(try resolver.resolve(params: endpointParams)) { error in
            switch error {
            case EndpointError.unresolved(let message):
                XCTAssertEqual("Partition does not support FIPS", message)
            default:
                XCTFail()
            }
        }
    }

    /// Bucket region is invalid
    func testResolve9() throws {
        let endpointParams = EndpointParams(
            accelerate: false,
            bucket: "arn:aws:s3:us-west -2:123456789012:accesspoint:myendpoint",
            disableAccessPoints: false,
            region: "us-east-1",
            useDualStack: false,
            useFIPS: false
        )
        let resolver = try DefaultEndpointResolver()

        XCTAssertThrowsError(try resolver.resolve(params: endpointParams)) { error in
            switch error {
            case EndpointError.unresolved(let message):
                XCTAssertEqual("Invalid region in ARN: `us-west -2` (invalid DNS name)", message)
            default:
                XCTFail()
            }
        }
    }

    /// Access points when Access points explicitly disabled (used for CreateBucket)
    func testResolve10() throws {
        let endpointParams = EndpointParams(
            accelerate: false,
            bucket: "arn:aws:s3:us-west-2:123456789012:accesspoint:myendpoint",
            disableAccessPoints: true,
            region: "us-east-1",
            useDualStack: false,
            useFIPS: false
        )
        let resolver = try DefaultEndpointResolver()

        XCTAssertThrowsError(try resolver.resolve(params: endpointParams)) { error in
            switch error {
            case EndpointError.unresolved(let message):
                XCTAssertEqual("Access points are not supported for this operation", message)
            default:
                XCTFail()
            }
        }
    }

    /// missing arn type
    func testResolve11() throws {
        let endpointParams = EndpointParams(
            accelerate: false,
            bucket: "arn:aws:s3:us-west-2:123456789012:",
            disableAccessPoints: true,
            region: "us-east-1",
            useDualStack: false,
            useFIPS: false
        )
        let resolver = try DefaultEndpointResolver()

        XCTAssertThrowsError(try resolver.resolve(params: endpointParams)) { error in
            switch error {
            case EndpointError.unresolved(let message):
                XCTAssertEqual("Invalid ARN: `arn:aws:s3:us-west-2:123456789012:` was not a valid ARN", message)
            default:
                XCTFail()
            }
        }
    }

    /// SDK::Host + access point + Dualstack is an error
    func testResolve12() throws {
        let endpointParams = EndpointParams(
            accelerate: false,
            bucket: "arn:aws-cn:s3:cn-north-1:123456789012:accesspoint:myendpoint",
            endpoint: "https://beta.example.com",
            forcePathStyle: false,
            region: "cn-north-1",
            useDualStack: true,
            useFIPS: false
        )
        let resolver = try DefaultEndpointResolver()

        XCTAssertThrowsError(try resolver.resolve(params: endpointParams)) { error in
            switch error {
            case EndpointError.unresolved(let message):
                XCTAssertEqual("DualStack cannot be combined with a Host override (PrivateLink)", message)
            default:
                XCTFail()
            }
        }
    }

    /// Access point ARN with FIPS & Dualstack
    func testResolve13() throws {
        let endpointParams = EndpointParams(
            accelerate: false,
            bucket: "arn:aws:s3:us-west-2:123456789012:accesspoint:myendpoint",
            disableAccessPoints: false,
            region: "us-east-1",
            useDualStack: true,
            useFIPS: true
        )
        let resolver = try DefaultEndpointResolver()

        let actual = try resolver.resolve(params: endpointParams)

        let properties: [String: AnyHashable] =
            [
                "authSchemes": [
                    [
                        "signingRegion": "us-west-2",
                        "name": "sigv4",
                        "signingName": "s3",
                        "disableDoubleEncoding": true
                    ] as [String: AnyHashable]
                ] as [AnyHashable]
            ]

        let headers = Headers()
        let expected = try ClientRuntime.Endpoint(urlString: "https://myendpoint-123456789012.s3-accesspoint-fips.dualstack.us-west-2.amazonaws.com", headers: headers, properties: properties)

        XCTAssertEqual(expected, actual)
    }

    /// Access point ARN with Dualstack
    func testResolve14() throws {
        let endpointParams = EndpointParams(
            accelerate: false,
            bucket: "arn:aws:s3:us-west-2:123456789012:accesspoint:myendpoint",
            disableAccessPoints: false,
            region: "us-east-1",
            useDualStack: true,
            useFIPS: false
        )
        let resolver = try DefaultEndpointResolver()

        let actual = try resolver.resolve(params: endpointParams)

        let properties: [String: AnyHashable] =
            [
                "authSchemes": [
                    [
                        "signingRegion": "us-west-2",
                        "name": "sigv4",
                        "signingName": "s3",
                        "disableDoubleEncoding": true
                    ] as [String: AnyHashable]
                ] as [AnyHashable]
            ]

        let headers = Headers()
        let expected = try ClientRuntime.Endpoint(urlString: "https://myendpoint-123456789012.s3-accesspoint.dualstack.us-west-2.amazonaws.com", headers: headers, properties: properties)

        XCTAssertEqual(expected, actual)
    }

    /// vanilla MRAP
    func testResolve15() throws {
        let endpointParams = EndpointParams(
            accelerate: false,
            bucket: "arn:aws:s3::123456789012:accesspoint:mfzwi23gnjvgw.mrap",
            disableMultiRegionAccessPoints: false,
            region: "us-east-1",
            useDualStack: false,
            useFIPS: false
        )
        let resolver = try DefaultEndpointResolver()

        let actual = try resolver.resolve(params: endpointParams)

        let properties: [String: AnyHashable] =
            [
                "authSchemes": [
                    [
                        "signingRegionSet": [
                            "*"
                        ] as [AnyHashable],
                        "name": "sigv4a",
                        "signingName": "s3",
                        "disableDoubleEncoding": true
                    ] as [String: AnyHashable]
                ] as [AnyHashable]
            ]

        let headers = Headers()
        let expected = try ClientRuntime.Endpoint(urlString: "https://mfzwi23gnjvgw.mrap.accesspoint.s3-global.amazonaws.com", headers: headers, properties: properties)

        XCTAssertEqual(expected, actual)
    }

    /// MRAP does not support FIPS
    func testResolve16() throws {
        let endpointParams = EndpointParams(
            accelerate: false,
            bucket: "arn:aws:s3::123456789012:accesspoint:mfzwi23gnjvgw.mrap",
            disableMultiRegionAccessPoints: false,
            region: "us-east-1",
            useDualStack: false,
            useFIPS: true
        )
        let resolver = try DefaultEndpointResolver()

        XCTAssertThrowsError(try resolver.resolve(params: endpointParams)) { error in
            switch error {
            case EndpointError.unresolved(let message):
                XCTAssertEqual("S3 MRAP does not support FIPS", message)
            default:
                XCTFail()
            }
        }
    }

    /// MRAP does not support DualStack
    func testResolve17() throws {
        let endpointParams = EndpointParams(
            accelerate: false,
            bucket: "arn:aws:s3::123456789012:accesspoint:mfzwi23gnjvgw.mrap",
            disableMultiRegionAccessPoints: false,
            region: "us-east-1",
            useDualStack: true,
            useFIPS: false
        )
        let resolver = try DefaultEndpointResolver()

        XCTAssertThrowsError(try resolver.resolve(params: endpointParams)) { error in
            switch error {
            case EndpointError.unresolved(let message):
                XCTAssertEqual("S3 MRAP does not support dual-stack", message)
            default:
                XCTFail()
            }
        }
    }

    /// MRAP does not support S3 Accelerate
    func testResolve18() throws {
        let endpointParams = EndpointParams(
            accelerate: true,
            bucket: "arn:aws:s3::123456789012:accesspoint:mfzwi23gnjvgw.mrap",
            disableMultiRegionAccessPoints: false,
            region: "us-east-1",
            useDualStack: false,
            useFIPS: false
        )
        let resolver = try DefaultEndpointResolver()

        XCTAssertThrowsError(try resolver.resolve(params: endpointParams)) { error in
            switch error {
            case EndpointError.unresolved(let message):
                XCTAssertEqual("S3 MRAP does not support S3 Accelerate", message)
            default:
                XCTFail()
            }
        }
    }

    /// MRAP explicitly disabled
    func testResolve19() throws {
        let endpointParams = EndpointParams(
            accelerate: false,
            bucket: "arn:aws:s3::123456789012:accesspoint:mfzwi23gnjvgw.mrap",
            disableMultiRegionAccessPoints: true,
            region: "us-east-1",
            useDualStack: false,
            useFIPS: false
        )
        let resolver = try DefaultEndpointResolver()

        XCTAssertThrowsError(try resolver.resolve(params: endpointParams)) { error in
            switch error {
            case EndpointError.unresolved(let message):
                XCTAssertEqual("Invalid configuration: Multi-Region Access Point ARNs are disabled.", message)
            default:
                XCTFail()
            }
        }
    }

    /// Dual-stack endpoint with path-style forced
    func testResolve20() throws {
        let endpointParams = EndpointParams(
            accelerate: false,
            bucket: "bucketname",
            forcePathStyle: true,
            region: "us-west-2",
            useDualStack: true,
            useFIPS: false
        )
        let resolver = try DefaultEndpointResolver()

        let actual = try resolver.resolve(params: endpointParams)

        let properties: [String: AnyHashable] =
            [
                "authSchemes": [
                    [
                        "signingRegion": "us-west-2",
                        "name": "sigv4",
                        "signingName": "s3",
                        "disableDoubleEncoding": true
                    ] as [String: AnyHashable]
                ] as [AnyHashable]
            ]

        let headers = Headers()
        let expected = try ClientRuntime.Endpoint(urlString: "https://s3.dualstack.us-west-2.amazonaws.com/bucketname", headers: headers, properties: properties)

        XCTAssertEqual(expected, actual)
    }

    /// Dual-stack endpoint + SDK::Host is error
    func testResolve21() throws {
        let endpointParams = EndpointParams(
            accelerate: false,
            bucket: "bucketname",
            endpoint: "https://abc.com",
            forcePathStyle: true,
            region: "us-west-2",
            useDualStack: true,
            useFIPS: false
        )
        let resolver = try DefaultEndpointResolver()

        XCTAssertThrowsError(try resolver.resolve(params: endpointParams)) { error in
            switch error {
            case EndpointError.unresolved(let message):
                XCTAssertEqual("Cannot set dual-stack in combination with a custom endpoint.", message)
            default:
                XCTFail()
            }
        }
    }

    /// path style + ARN bucket
    func testResolve22() throws {
        let endpointParams = EndpointParams(
            accelerate: false,
            bucket: "arn:aws:s3::123456789012:accesspoint:mfzwi23gnjvgw.mrap",
            forcePathStyle: true,
            region: "us-west-2",
            useDualStack: false,
            useFIPS: false
        )
        let resolver = try DefaultEndpointResolver()

        XCTAssertThrowsError(try resolver.resolve(params: endpointParams)) { error in
            switch error {
            case EndpointError.unresolved(let message):
                XCTAssertEqual("Path-style addressing cannot be used with ARN buckets", message)
            default:
                XCTFail()
            }
        }
    }

    /// implicit path style bucket + dualstack
    func testResolve23() throws {
        let endpointParams = EndpointParams(
            accelerate: false,
            bucket: "99_ab",
            region: "us-west-2",
            useDualStack: true,
            useFIPS: false
        )
        let resolver = try DefaultEndpointResolver()

        let actual = try resolver.resolve(params: endpointParams)

        let properties: [String: AnyHashable] =
            [
                "authSchemes": [
                    [
                        "signingRegion": "us-west-2",
                        "name": "sigv4",
                        "signingName": "s3",
                        "disableDoubleEncoding": true
                    ] as [String: AnyHashable]
                ] as [AnyHashable]
            ]

        let headers = Headers()
        let expected = try ClientRuntime.Endpoint(urlString: "https://s3.dualstack.us-west-2.amazonaws.com/99_ab", headers: headers, properties: properties)

        XCTAssertEqual(expected, actual)
    }

    /// implicit path style bucket + dualstack
    func testResolve24() throws {
        let endpointParams = EndpointParams(
            accelerate: false,
            bucket: "99_ab",
            endpoint: "http://abc.com",
            region: "us-west-2",
            useDualStack: true,
            useFIPS: false
        )
        let resolver = try DefaultEndpointResolver()

        XCTAssertThrowsError(try resolver.resolve(params: endpointParams)) { error in
            switch error {
            case EndpointError.unresolved(let message):
                XCTAssertEqual("Cannot set dual-stack in combination with a custom endpoint.", message)
            default:
                XCTFail()
            }
        }
    }

    /// don't allow URL injections in the bucket
    func testResolve25() throws {
        let endpointParams = EndpointParams(
            accelerate: false,
            bucket: "example.com#",
            region: "us-west-2",
            useDualStack: false,
            useFIPS: false
        )
        let resolver = try DefaultEndpointResolver()

        let actual = try resolver.resolve(params: endpointParams)

        let properties: [String: AnyHashable] =
            [
                "authSchemes": [
                    [
                        "signingRegion": "us-west-2",
                        "name": "sigv4",
                        "signingName": "s3",
                        "disableDoubleEncoding": true
                    ] as [String: AnyHashable]
                ] as [AnyHashable]
            ]

        let headers = Headers()
        let expected = try ClientRuntime.Endpoint(urlString: "https://s3.us-west-2.amazonaws.com/example.com%23", headers: headers, properties: properties)

        XCTAssertEqual(expected, actual)
    }

    /// URI encode bucket names in the path
    func testResolve26() throws {
        let endpointParams = EndpointParams(
            accelerate: false,
            bucket: "bucket name",
            region: "us-west-2",
            useDualStack: false,
            useFIPS: false
        )
        let resolver = try DefaultEndpointResolver()

        let actual = try resolver.resolve(params: endpointParams)

        let properties: [String: AnyHashable] =
            [
                "authSchemes": [
                    [
                        "signingRegion": "us-west-2",
                        "name": "sigv4",
                        "signingName": "s3",
                        "disableDoubleEncoding": true
                    ] as [String: AnyHashable]
                ] as [AnyHashable]
            ]

        let headers = Headers()
        let expected = try ClientRuntime.Endpoint(urlString: "https://s3.us-west-2.amazonaws.com/bucket%20name", headers: headers, properties: properties)

        XCTAssertEqual(expected, actual)
    }

    /// scheme is respected
    func testResolve27() throws {
        let endpointParams = EndpointParams(
            accelerate: false,
            bucket: "99_ab",
            endpoint: "http://control.vpce-1a2b3c4d-5e6f.s3.us-west-2.vpce.amazonaws.com",
            region: "af-south-1",
            useDualStack: false,
            useFIPS: false
        )
        let resolver = try DefaultEndpointResolver()

        let actual = try resolver.resolve(params: endpointParams)

        let properties: [String: AnyHashable] =
            [
                "authSchemes": [
                    [
                        "signingRegion": "af-south-1",
                        "name": "sigv4",
                        "signingName": "s3",
                        "disableDoubleEncoding": true
                    ] as [String: AnyHashable]
                ] as [AnyHashable]
            ]

        let headers = Headers()
        let expected = try ClientRuntime.Endpoint(urlString: "http://control.vpce-1a2b3c4d-5e6f.s3.us-west-2.vpce.amazonaws.com/99_ab", headers: headers, properties: properties)

        XCTAssertEqual(expected, actual)
    }

    /// scheme is respected (virtual addressing)
    func testResolve28() throws {
        let endpointParams = EndpointParams(
            accelerate: false,
            bucket: "bucketname",
            endpoint: "http://control.vpce-1a2b3c4d-5e6f.s3.us-west-2.vpce.amazonaws.com/foo",
            region: "af-south-1",
            useDualStack: false,
            useFIPS: false
        )
        let resolver = try DefaultEndpointResolver()

        let actual = try resolver.resolve(params: endpointParams)

        let properties: [String: AnyHashable] =
            [
                "authSchemes": [
                    [
                        "signingRegion": "af-south-1",
                        "name": "sigv4",
                        "signingName": "s3",
                        "disableDoubleEncoding": true
                    ] as [String: AnyHashable]
                ] as [AnyHashable]
            ]

        let headers = Headers()
        let expected = try ClientRuntime.Endpoint(urlString: "http://bucketname.control.vpce-1a2b3c4d-5e6f.s3.us-west-2.vpce.amazonaws.com/foo", headers: headers, properties: properties)

        XCTAssertEqual(expected, actual)
    }

    /// path style + implicit private link
    func testResolve29() throws {
        let endpointParams = EndpointParams(
            accelerate: false,
            bucket: "99_ab",
            endpoint: "https://control.vpce-1a2b3c4d-5e6f.s3.us-west-2.vpce.amazonaws.com",
            region: "af-south-1",
            useDualStack: false,
            useFIPS: false
        )
        let resolver = try DefaultEndpointResolver()

        let actual = try resolver.resolve(params: endpointParams)

        let properties: [String: AnyHashable] =
            [
                "authSchemes": [
                    [
                        "signingRegion": "af-south-1",
                        "name": "sigv4",
                        "signingName": "s3",
                        "disableDoubleEncoding": true
                    ] as [String: AnyHashable]
                ] as [AnyHashable]
            ]

        let headers = Headers()
        let expected = try ClientRuntime.Endpoint(urlString: "https://control.vpce-1a2b3c4d-5e6f.s3.us-west-2.vpce.amazonaws.com/99_ab", headers: headers, properties: properties)

        XCTAssertEqual(expected, actual)
    }

    /// invalid Endpoint override
    func testResolve30() throws {
        let endpointParams = EndpointParams(
            accelerate: false,
            bucket: "bucketname",
            endpoint: "abcde://nota#url",
            region: "af-south-1",
            useDualStack: false,
            useFIPS: false
        )
        let resolver = try DefaultEndpointResolver()

        XCTAssertThrowsError(try resolver.resolve(params: endpointParams)) { error in
            switch error {
            case EndpointError.unresolved(let message):
                XCTAssertEqual("Custom endpoint `abcde://nota#url` was not a valid URI", message)
            default:
                XCTFail()
            }
        }
    }

    /// using an IPv4 address forces path style
    func testResolve31() throws {
        let endpointParams = EndpointParams(
            accelerate: false,
            bucket: "bucketname",
            endpoint: "https://123.123.0.1",
            region: "af-south-1",
            useDualStack: false,
            useFIPS: false
        )
        let resolver = try DefaultEndpointResolver()

        let actual = try resolver.resolve(params: endpointParams)

        let properties: [String: AnyHashable] =
            [
                "authSchemes": [
                    [
                        "signingRegion": "af-south-1",
                        "name": "sigv4",
                        "signingName": "s3",
                        "disableDoubleEncoding": true
                    ] as [String: AnyHashable]
                ] as [AnyHashable]
            ]

        let headers = Headers()
        let expected = try ClientRuntime.Endpoint(urlString: "https://123.123.0.1/bucketname", headers: headers, properties: properties)

        XCTAssertEqual(expected, actual)
    }

    /// vanilla access point arn with region mismatch and UseArnRegion=false
    func testResolve32() throws {
        let endpointParams = EndpointParams(
            accelerate: false,
            bucket: "arn:aws:s3:us-east-1:123456789012:accesspoint:myendpoint",
            forcePathStyle: false,
            region: "us-west-2",
            useArnRegion: false,
            useDualStack: false,
            useFIPS: false
        )
        let resolver = try DefaultEndpointResolver()

        XCTAssertThrowsError(try resolver.resolve(params: endpointParams)) { error in
            switch error {
            case EndpointError.unresolved(let message):
                XCTAssertEqual("Invalid configuration: region from ARN `us-east-1` does not match client region `us-west-2` and UseArnRegion is `false`", message)
            default:
                XCTFail()
            }
        }
    }

    /// vanilla access point arn with region mismatch and UseArnRegion unset
    func testResolve33() throws {
        let endpointParams = EndpointParams(
            accelerate: false,
            bucket: "arn:aws:s3:us-west-2:123456789012:accesspoint:myendpoint",
            forcePathStyle: false,
            region: "us-east-1",
            useDualStack: false,
            useFIPS: false
        )
        let resolver = try DefaultEndpointResolver()

        let actual = try resolver.resolve(params: endpointParams)

        let properties: [String: AnyHashable] =
            [
                "authSchemes": [
                    [
                        "signingRegion": "us-west-2",
                        "name": "sigv4",
                        "signingName": "s3",
                        "disableDoubleEncoding": true
                    ] as [String: AnyHashable]
                ] as [AnyHashable]
            ]

        let headers = Headers()
        let expected = try ClientRuntime.Endpoint(urlString: "https://myendpoint-123456789012.s3-accesspoint.us-west-2.amazonaws.com", headers: headers, properties: properties)

        XCTAssertEqual(expected, actual)
    }

    /// vanilla access point arn with region mismatch and UseArnRegion=true
    func testResolve34() throws {
        let endpointParams = EndpointParams(
            accelerate: false,
            bucket: "arn:aws:s3:us-west-2:123456789012:accesspoint:myendpoint",
            forcePathStyle: false,
            region: "us-east-1",
            useArnRegion: true,
            useDualStack: false,
            useFIPS: false
        )
        let resolver = try DefaultEndpointResolver()

        let actual = try resolver.resolve(params: endpointParams)

        let properties: [String: AnyHashable] =
            [
                "authSchemes": [
                    [
                        "signingRegion": "us-west-2",
                        "name": "sigv4",
                        "signingName": "s3",
                        "disableDoubleEncoding": true
                    ] as [String: AnyHashable]
                ] as [AnyHashable]
            ]

        let headers = Headers()
        let expected = try ClientRuntime.Endpoint(urlString: "https://myendpoint-123456789012.s3-accesspoint.us-west-2.amazonaws.com", headers: headers, properties: properties)

        XCTAssertEqual(expected, actual)
    }

    /// subdomains are not allowed in virtual buckets
    func testResolve35() throws {
        let endpointParams = EndpointParams(
            bucket: "bucket.name",
            region: "us-east-1"
        )
        let resolver = try DefaultEndpointResolver()

        let actual = try resolver.resolve(params: endpointParams)

        let properties: [String: AnyHashable] =
            [
                "authSchemes": [
                    [
                        "signingRegion": "us-east-1",
                        "name": "sigv4",
                        "signingName": "s3",
                        "disableDoubleEncoding": true
                    ] as [String: AnyHashable]
                ] as [AnyHashable]
            ]

        let headers = Headers()
        let expected = try ClientRuntime.Endpoint(urlString: "https://s3.us-east-1.amazonaws.com/bucket.name", headers: headers, properties: properties)

        XCTAssertEqual(expected, actual)
    }

    /// bucket names with 3 characters are allowed in virtual buckets
    func testResolve36() throws {
        let endpointParams = EndpointParams(
            bucket: "aaa",
            region: "us-east-1"
        )
        let resolver = try DefaultEndpointResolver()

        let actual = try resolver.resolve(params: endpointParams)

        let properties: [String: AnyHashable] =
            [
                "authSchemes": [
                    [
                        "signingRegion": "us-east-1",
                        "name": "sigv4",
                        "signingName": "s3",
                        "disableDoubleEncoding": true
                    ] as [String: AnyHashable]
                ] as [AnyHashable]
            ]

        let headers = Headers()
        let expected = try ClientRuntime.Endpoint(urlString: "https://aaa.s3.us-east-1.amazonaws.com", headers: headers, properties: properties)

        XCTAssertEqual(expected, actual)
    }

    /// bucket names with fewer than 3 characters are not allowed in virtual host
    func testResolve37() throws {
        let endpointParams = EndpointParams(
            bucket: "aa",
            region: "us-east-1"
        )
        let resolver = try DefaultEndpointResolver()

        let actual = try resolver.resolve(params: endpointParams)

        let properties: [String: AnyHashable] =
            [
                "authSchemes": [
                    [
                        "signingRegion": "us-east-1",
                        "name": "sigv4",
                        "signingName": "s3",
                        "disableDoubleEncoding": true
                    ] as [String: AnyHashable]
                ] as [AnyHashable]
            ]

        let headers = Headers()
        let expected = try ClientRuntime.Endpoint(urlString: "https://s3.us-east-1.amazonaws.com/aa", headers: headers, properties: properties)

        XCTAssertEqual(expected, actual)
    }

    /// bucket names with uppercase characters are not allowed in virtual host
    func testResolve38() throws {
        let endpointParams = EndpointParams(
            bucket: "BucketName",
            region: "us-east-1"
        )
        let resolver = try DefaultEndpointResolver()

        let actual = try resolver.resolve(params: endpointParams)

        let properties: [String: AnyHashable] =
            [
                "authSchemes": [
                    [
                        "signingRegion": "us-east-1",
                        "name": "sigv4",
                        "signingName": "s3",
                        "disableDoubleEncoding": true
                    ] as [String: AnyHashable]
                ] as [AnyHashable]
            ]

        let headers = Headers()
        let expected = try ClientRuntime.Endpoint(urlString: "https://s3.us-east-1.amazonaws.com/BucketName", headers: headers, properties: properties)

        XCTAssertEqual(expected, actual)
    }

    /// subdomains are allowed in virtual buckets on http endpoints
    func testResolve39() throws {
        let endpointParams = EndpointParams(
            bucket: "bucket.name",
            endpoint: "http://example.com",
            region: "us-east-1"
        )
        let resolver = try DefaultEndpointResolver()

        let actual = try resolver.resolve(params: endpointParams)

        let properties: [String: AnyHashable] =
            [
                "authSchemes": [
                    [
                        "signingRegion": "us-east-1",
                        "name": "sigv4",
                        "signingName": "s3",
                        "disableDoubleEncoding": true
                    ] as [String: AnyHashable]
                ] as [AnyHashable]
            ]

        let headers = Headers()
        let expected = try ClientRuntime.Endpoint(urlString: "http://bucket.name.example.com", headers: headers, properties: properties)

        XCTAssertEqual(expected, actual)
    }

    /// no region set
    func testResolve40() throws {
        let endpointParams = EndpointParams(
            bucket: "bucket-name"
        )
        let resolver = try DefaultEndpointResolver()

        XCTAssertThrowsError(try resolver.resolve(params: endpointParams)) { error in
            switch error {
            case EndpointError.unresolved(let message):
                XCTAssertEqual("A region must be set when sending requests to S3.", message)
            default:
                XCTFail()
            }
        }
    }

    /// UseGlobalEndpoints=true, region=us-east-1 uses the global endpoint
    func testResolve41() throws {
        let endpointParams = EndpointParams(
            accelerate: false,
            region: "us-east-1",
            useDualStack: false,
            useFIPS: false,
            useGlobalEndpoint: true
        )
        let resolver = try DefaultEndpointResolver()

        let actual = try resolver.resolve(params: endpointParams)

        let properties: [String: AnyHashable] =
            [
                "authSchemes": [
                    [
                        "signingRegion": "us-east-1",
                        "name": "sigv4",
                        "signingName": "s3",
                        "disableDoubleEncoding": true
                    ] as [String: AnyHashable]
                ] as [AnyHashable]
            ]

        let headers = Headers()
        let expected = try ClientRuntime.Endpoint(urlString: "https://s3.amazonaws.com", headers: headers, properties: properties)

        XCTAssertEqual(expected, actual)
    }

    /// UseGlobalEndpoints=true, region=us-west-2 uses the regional endpoint
    func testResolve42() throws {
        let endpointParams = EndpointParams(
            accelerate: false,
            region: "us-west-2",
            useDualStack: false,
            useFIPS: false,
            useGlobalEndpoint: true
        )
        let resolver = try DefaultEndpointResolver()

        let actual = try resolver.resolve(params: endpointParams)

        let properties: [String: AnyHashable] =
            [
                "authSchemes": [
                    [
                        "signingRegion": "us-west-2",
                        "name": "sigv4",
                        "signingName": "s3",
                        "disableDoubleEncoding": true
                    ] as [String: AnyHashable]
                ] as [AnyHashable]
            ]

        let headers = Headers()
        let expected = try ClientRuntime.Endpoint(urlString: "https://s3.us-west-2.amazonaws.com", headers: headers, properties: properties)

        XCTAssertEqual(expected, actual)
    }

    /// UseGlobalEndpoints=true, region=cn-north-1 uses the regional endpoint
    func testResolve43() throws {
        let endpointParams = EndpointParams(
            accelerate: false,
            region: "cn-north-1",
            useDualStack: false,
            useFIPS: false,
            useGlobalEndpoint: true
        )
        let resolver = try DefaultEndpointResolver()

        let actual = try resolver.resolve(params: endpointParams)

        let properties: [String: AnyHashable] =
            [
                "authSchemes": [
                    [
                        "signingRegion": "cn-north-1",
                        "name": "sigv4",
                        "signingName": "s3",
                        "disableDoubleEncoding": true
                    ] as [String: AnyHashable]
                ] as [AnyHashable]
            ]

        let headers = Headers()
        let expected = try ClientRuntime.Endpoint(urlString: "https://s3.cn-north-1.amazonaws.com.cn", headers: headers, properties: properties)

        XCTAssertEqual(expected, actual)
    }

    /// UseGlobalEndpoints=true, region=us-east-1, fips=true uses the regional endpoint with fips
    func testResolve44() throws {
        let endpointParams = EndpointParams(
            accelerate: false,
            region: "us-east-1",
            useDualStack: false,
            useFIPS: true,
            useGlobalEndpoint: true
        )
        let resolver = try DefaultEndpointResolver()

        let actual = try resolver.resolve(params: endpointParams)

        let properties: [String: AnyHashable] =
            [
                "authSchemes": [
                    [
                        "signingRegion": "us-east-1",
                        "name": "sigv4",
                        "signingName": "s3",
                        "disableDoubleEncoding": true
                    ] as [String: AnyHashable]
                ] as [AnyHashable]
            ]

        let headers = Headers()
        let expected = try ClientRuntime.Endpoint(urlString: "https://s3-fips.us-east-1.amazonaws.com", headers: headers, properties: properties)

        XCTAssertEqual(expected, actual)
    }

    /// UseGlobalEndpoints=true, region=us-east-1, dualstack=true uses the regional endpoint with dualstack
    func testResolve45() throws {
        let endpointParams = EndpointParams(
            accelerate: false,
            region: "us-east-1",
            useDualStack: true,
            useFIPS: false,
            useGlobalEndpoint: true
        )
        let resolver = try DefaultEndpointResolver()

        let actual = try resolver.resolve(params: endpointParams)

        let properties: [String: AnyHashable] =
            [
                "authSchemes": [
                    [
                        "signingRegion": "us-east-1",
                        "name": "sigv4",
                        "signingName": "s3",
                        "disableDoubleEncoding": true
                    ] as [String: AnyHashable]
                ] as [AnyHashable]
            ]

        let headers = Headers()
        let expected = try ClientRuntime.Endpoint(urlString: "https://s3.dualstack.us-east-1.amazonaws.com", headers: headers, properties: properties)

        XCTAssertEqual(expected, actual)
    }

    /// UseGlobalEndpoints=true, region=us-east-1, dualstack and fips uses the regional endpoint with fips/dualstack
    func testResolve46() throws {
        let endpointParams = EndpointParams(
            accelerate: false,
            region: "us-east-1",
            useDualStack: true,
            useFIPS: true,
            useGlobalEndpoint: true
        )
        let resolver = try DefaultEndpointResolver()

        let actual = try resolver.resolve(params: endpointParams)

        let properties: [String: AnyHashable] =
            [
                "authSchemes": [
                    [
                        "signingRegion": "us-east-1",
                        "name": "sigv4",
                        "signingName": "s3",
                        "disableDoubleEncoding": true
                    ] as [String: AnyHashable]
                ] as [AnyHashable]
            ]

        let headers = Headers()
        let expected = try ClientRuntime.Endpoint(urlString: "https://s3-fips.dualstack.us-east-1.amazonaws.com", headers: headers, properties: properties)

        XCTAssertEqual(expected, actual)
    }

    /// UseGlobalEndpoints=true, region=us-east-1 with custom endpoint, uses custom
    func testResolve47() throws {
        let endpointParams = EndpointParams(
            accelerate: false,
            endpoint: "https://example.com",
            region: "us-east-1",
            useDualStack: false,
            useFIPS: false,
            useGlobalEndpoint: true
        )
        let resolver = try DefaultEndpointResolver()

        let actual = try resolver.resolve(params: endpointParams)

        let properties: [String: AnyHashable] =
            [
                "authSchemes": [
                    [
                        "signingRegion": "us-east-1",
                        "name": "sigv4",
                        "signingName": "s3",
                        "disableDoubleEncoding": true
                    ] as [String: AnyHashable]
                ] as [AnyHashable]
            ]

        let headers = Headers()
        let expected = try ClientRuntime.Endpoint(urlString: "https://example.com", headers: headers, properties: properties)

        XCTAssertEqual(expected, actual)
    }

    /// UseGlobalEndpoints=true, region=us-west-2 with custom endpoint, uses custom
    func testResolve48() throws {
        let endpointParams = EndpointParams(
            accelerate: false,
            endpoint: "https://example.com",
            region: "us-west-2",
            useDualStack: false,
            useFIPS: false,
            useGlobalEndpoint: true
        )
        let resolver = try DefaultEndpointResolver()

        let actual = try resolver.resolve(params: endpointParams)

        let properties: [String: AnyHashable] =
            [
                "authSchemes": [
                    [
                        "signingRegion": "us-west-2",
                        "name": "sigv4",
                        "signingName": "s3",
                        "disableDoubleEncoding": true
                    ] as [String: AnyHashable]
                ] as [AnyHashable]
            ]

        let headers = Headers()
        let expected = try ClientRuntime.Endpoint(urlString: "https://example.com", headers: headers, properties: properties)

        XCTAssertEqual(expected, actual)
    }

    /// UseGlobalEndpoints=true, region=us-east-1 with accelerate on non bucket case uses the global endpoint and ignores accelerate
    func testResolve49() throws {
        let endpointParams = EndpointParams(
            accelerate: true,
            region: "us-east-1",
            useDualStack: false,
            useFIPS: false,
            useGlobalEndpoint: true
        )
        let resolver = try DefaultEndpointResolver()

        let actual = try resolver.resolve(params: endpointParams)

        let properties: [String: AnyHashable] =
            [
                "authSchemes": [
                    [
                        "signingRegion": "us-east-1",
                        "name": "sigv4",
                        "signingName": "s3",
                        "disableDoubleEncoding": true
                    ] as [String: AnyHashable]
                ] as [AnyHashable]
            ]

        let headers = Headers()
        let expected = try ClientRuntime.Endpoint(urlString: "https://s3.amazonaws.com", headers: headers, properties: properties)

        XCTAssertEqual(expected, actual)
    }

    /// aws-global region uses the global endpoint
    func testResolve50() throws {
        let endpointParams = EndpointParams(
            accelerate: false,
            region: "aws-global",
            useDualStack: false,
            useFIPS: false
        )
        let resolver = try DefaultEndpointResolver()

        let actual = try resolver.resolve(params: endpointParams)

        let properties: [String: AnyHashable] =
            [
                "authSchemes": [
                    [
                        "signingRegion": "us-east-1",
                        "name": "sigv4",
                        "signingName": "s3",
                        "disableDoubleEncoding": true
                    ] as [String: AnyHashable]
                ] as [AnyHashable]
            ]

        let headers = Headers()
        let expected = try ClientRuntime.Endpoint(urlString: "https://s3.amazonaws.com", headers: headers, properties: properties)

        XCTAssertEqual(expected, actual)
    }

    /// aws-global region with fips uses the regional endpoint
    func testResolve51() throws {
        let endpointParams = EndpointParams(
            accelerate: false,
            region: "aws-global",
            useDualStack: false,
            useFIPS: true
        )
        let resolver = try DefaultEndpointResolver()

        let actual = try resolver.resolve(params: endpointParams)

        let properties: [String: AnyHashable] =
            [
                "authSchemes": [
                    [
                        "signingRegion": "us-east-1",
                        "name": "sigv4",
                        "signingName": "s3",
                        "disableDoubleEncoding": true
                    ] as [String: AnyHashable]
                ] as [AnyHashable]
            ]

        let headers = Headers()
        let expected = try ClientRuntime.Endpoint(urlString: "https://s3-fips.us-east-1.amazonaws.com", headers: headers, properties: properties)

        XCTAssertEqual(expected, actual)
    }

    /// aws-global region with dualstack uses the regional endpoint
    func testResolve52() throws {
        let endpointParams = EndpointParams(
            accelerate: false,
            region: "aws-global",
            useDualStack: true,
            useFIPS: false
        )
        let resolver = try DefaultEndpointResolver()

        let actual = try resolver.resolve(params: endpointParams)

        let properties: [String: AnyHashable] =
            [
                "authSchemes": [
                    [
                        "signingRegion": "us-east-1",
                        "name": "sigv4",
                        "signingName": "s3",
                        "disableDoubleEncoding": true
                    ] as [String: AnyHashable]
                ] as [AnyHashable]
            ]

        let headers = Headers()
        let expected = try ClientRuntime.Endpoint(urlString: "https://s3.dualstack.us-east-1.amazonaws.com", headers: headers, properties: properties)

        XCTAssertEqual(expected, actual)
    }

    /// aws-global region with fips and dualstack uses the regional endpoint
    func testResolve53() throws {
        let endpointParams = EndpointParams(
            accelerate: false,
            region: "aws-global",
            useDualStack: true,
            useFIPS: true
        )
        let resolver = try DefaultEndpointResolver()

        let actual = try resolver.resolve(params: endpointParams)

        let properties: [String: AnyHashable] =
            [
                "authSchemes": [
                    [
                        "signingRegion": "us-east-1",
                        "name": "sigv4",
                        "signingName": "s3",
                        "disableDoubleEncoding": true
                    ] as [String: AnyHashable]
                ] as [AnyHashable]
            ]

        let headers = Headers()
        let expected = try ClientRuntime.Endpoint(urlString: "https://s3-fips.dualstack.us-east-1.amazonaws.com", headers: headers, properties: properties)

        XCTAssertEqual(expected, actual)
    }

    /// aws-global region with accelerate on non-bucket case, uses global endpoint and ignores accelerate
    func testResolve54() throws {
        let endpointParams = EndpointParams(
            accelerate: true,
            region: "aws-global",
            useDualStack: false,
            useFIPS: false
        )
        let resolver = try DefaultEndpointResolver()

        let actual = try resolver.resolve(params: endpointParams)

        let properties: [String: AnyHashable] =
            [
                "authSchemes": [
                    [
                        "signingRegion": "us-east-1",
                        "name": "sigv4",
                        "signingName": "s3",
                        "disableDoubleEncoding": true
                    ] as [String: AnyHashable]
                ] as [AnyHashable]
            ]

        let headers = Headers()
        let expected = try ClientRuntime.Endpoint(urlString: "https://s3.amazonaws.com", headers: headers, properties: properties)

        XCTAssertEqual(expected, actual)
    }

    /// aws-global region with custom endpoint, uses custom
    func testResolve55() throws {
        let endpointParams = EndpointParams(
            accelerate: false,
            endpoint: "https://example.com",
            region: "aws-global",
            useDualStack: false,
            useFIPS: false,
            useGlobalEndpoint: false
        )
        let resolver = try DefaultEndpointResolver()

        let actual = try resolver.resolve(params: endpointParams)

        let properties: [String: AnyHashable] =
            [
                "authSchemes": [
                    [
                        "signingRegion": "us-east-1",
                        "name": "sigv4",
                        "signingName": "s3",
                        "disableDoubleEncoding": true
                    ] as [String: AnyHashable]
                ] as [AnyHashable]
            ]

        let headers = Headers()
        let expected = try ClientRuntime.Endpoint(urlString: "https://example.com", headers: headers, properties: properties)

        XCTAssertEqual(expected, actual)
    }

    /// virtual addressing, aws-global region uses the global endpoint
    func testResolve56() throws {
        let endpointParams = EndpointParams(
            accelerate: false,
            bucket: "bucket-name",
            region: "aws-global",
            useDualStack: false,
            useFIPS: false
        )
        let resolver = try DefaultEndpointResolver()

        let actual = try resolver.resolve(params: endpointParams)

        let properties: [String: AnyHashable] =
            [
                "authSchemes": [
                    [
                        "signingRegion": "us-east-1",
                        "name": "sigv4",
                        "signingName": "s3",
                        "disableDoubleEncoding": true
                    ] as [String: AnyHashable]
                ] as [AnyHashable]
            ]

        let headers = Headers()
        let expected = try ClientRuntime.Endpoint(urlString: "https://bucket-name.s3.amazonaws.com", headers: headers, properties: properties)

        XCTAssertEqual(expected, actual)
    }

    /// virtual addressing, aws-global region with fips uses the regional fips endpoint
    func testResolve57() throws {
        let endpointParams = EndpointParams(
            accelerate: false,
            bucket: "bucket-name",
            region: "aws-global",
            useDualStack: false,
            useFIPS: true
        )
        let resolver = try DefaultEndpointResolver()

        let actual = try resolver.resolve(params: endpointParams)

        let properties: [String: AnyHashable] =
            [
                "authSchemes": [
                    [
                        "signingRegion": "us-east-1",
                        "name": "sigv4",
                        "signingName": "s3",
                        "disableDoubleEncoding": true
                    ] as [String: AnyHashable]
                ] as [AnyHashable]
            ]

        let headers = Headers()
        let expected = try ClientRuntime.Endpoint(urlString: "https://bucket-name.s3-fips.us-east-1.amazonaws.com", headers: headers, properties: properties)

        XCTAssertEqual(expected, actual)
    }

    /// virtual addressing, aws-global region with dualstack uses the regional dualstack endpoint
    func testResolve58() throws {
        let endpointParams = EndpointParams(
            accelerate: false,
            bucket: "bucket-name",
            region: "aws-global",
            useDualStack: true,
            useFIPS: false
        )
        let resolver = try DefaultEndpointResolver()

        let actual = try resolver.resolve(params: endpointParams)

        let properties: [String: AnyHashable] =
            [
                "authSchemes": [
                    [
                        "signingRegion": "us-east-1",
                        "name": "sigv4",
                        "signingName": "s3",
                        "disableDoubleEncoding": true
                    ] as [String: AnyHashable]
                ] as [AnyHashable]
            ]

        let headers = Headers()
        let expected = try ClientRuntime.Endpoint(urlString: "https://bucket-name.s3.dualstack.us-east-1.amazonaws.com", headers: headers, properties: properties)

        XCTAssertEqual(expected, actual)
    }

    /// virtual addressing, aws-global region with fips/dualstack uses the regional fips/dualstack endpoint
    func testResolve59() throws {
        let endpointParams = EndpointParams(
            accelerate: false,
            bucket: "bucket-name",
            region: "aws-global",
            useDualStack: true,
            useFIPS: true
        )
        let resolver = try DefaultEndpointResolver()

        let actual = try resolver.resolve(params: endpointParams)

        let properties: [String: AnyHashable] =
            [
                "authSchemes": [
                    [
                        "signingRegion": "us-east-1",
                        "name": "sigv4",
                        "signingName": "s3",
                        "disableDoubleEncoding": true
                    ] as [String: AnyHashable]
                ] as [AnyHashable]
            ]

        let headers = Headers()
        let expected = try ClientRuntime.Endpoint(urlString: "https://bucket-name.s3-fips.dualstack.us-east-1.amazonaws.com", headers: headers, properties: properties)

        XCTAssertEqual(expected, actual)
    }

    /// virtual addressing, aws-global region with accelerate uses the global accelerate endpoint
    func testResolve60() throws {
        let endpointParams = EndpointParams(
            accelerate: true,
            bucket: "bucket-name",
            region: "aws-global",
            useDualStack: false,
            useFIPS: false
        )
        let resolver = try DefaultEndpointResolver()

        let actual = try resolver.resolve(params: endpointParams)

        let properties: [String: AnyHashable] =
            [
                "authSchemes": [
                    [
                        "signingRegion": "us-east-1",
                        "name": "sigv4",
                        "signingName": "s3",
                        "disableDoubleEncoding": true
                    ] as [String: AnyHashable]
                ] as [AnyHashable]
            ]

        let headers = Headers()
        let expected = try ClientRuntime.Endpoint(urlString: "https://bucket-name.s3-accelerate.amazonaws.com", headers: headers, properties: properties)

        XCTAssertEqual(expected, actual)
    }

    /// virtual addressing, aws-global region with custom endpoint
    func testResolve61() throws {
        let endpointParams = EndpointParams(
            accelerate: false,
            bucket: "bucket-name",
            endpoint: "https://example.com",
            region: "aws-global",
            useDualStack: false,
            useFIPS: false
        )
        let resolver = try DefaultEndpointResolver()

        let actual = try resolver.resolve(params: endpointParams)

        let properties: [String: AnyHashable] =
            [
                "authSchemes": [
                    [
                        "signingRegion": "us-east-1",
                        "name": "sigv4",
                        "signingName": "s3",
                        "disableDoubleEncoding": true
                    ] as [String: AnyHashable]
                ] as [AnyHashable]
            ]

        let headers = Headers()
        let expected = try ClientRuntime.Endpoint(urlString: "https://bucket-name.example.com", headers: headers, properties: properties)

        XCTAssertEqual(expected, actual)
    }

    /// virtual addressing, UseGlobalEndpoint and us-east-1 region uses the global endpoint
    func testResolve62() throws {
        let endpointParams = EndpointParams(
            accelerate: false,
            bucket: "bucket-name",
            region: "us-east-1",
            useDualStack: false,
            useFIPS: false,
            useGlobalEndpoint: true
        )
        let resolver = try DefaultEndpointResolver()

        let actual = try resolver.resolve(params: endpointParams)

        let properties: [String: AnyHashable] =
            [
                "authSchemes": [
                    [
                        "signingRegion": "us-east-1",
                        "name": "sigv4",
                        "signingName": "s3",
                        "disableDoubleEncoding": true
                    ] as [String: AnyHashable]
                ] as [AnyHashable]
            ]

        let headers = Headers()
        let expected = try ClientRuntime.Endpoint(urlString: "https://bucket-name.s3.amazonaws.com", headers: headers, properties: properties)

        XCTAssertEqual(expected, actual)
    }

    /// virtual addressing, UseGlobalEndpoint and us-west-2 region uses the regional endpoint
    func testResolve63() throws {
        let endpointParams = EndpointParams(
            accelerate: false,
            bucket: "bucket-name",
            region: "us-west-2",
            useDualStack: false,
            useFIPS: false,
            useGlobalEndpoint: true
        )
        let resolver = try DefaultEndpointResolver()

        let actual = try resolver.resolve(params: endpointParams)

        let properties: [String: AnyHashable] =
            [
                "authSchemes": [
                    [
                        "signingRegion": "us-west-2",
                        "name": "sigv4",
                        "signingName": "s3",
                        "disableDoubleEncoding": true
                    ] as [String: AnyHashable]
                ] as [AnyHashable]
            ]

        let headers = Headers()
        let expected = try ClientRuntime.Endpoint(urlString: "https://bucket-name.s3.us-west-2.amazonaws.com", headers: headers, properties: properties)

        XCTAssertEqual(expected, actual)
    }

    /// virtual addressing, UseGlobalEndpoint and us-east-1 region and fips uses the regional fips endpoint
    func testResolve64() throws {
        let endpointParams = EndpointParams(
            accelerate: false,
            bucket: "bucket-name",
            region: "us-east-1",
            useDualStack: false,
            useFIPS: true,
            useGlobalEndpoint: true
        )
        let resolver = try DefaultEndpointResolver()

        let actual = try resolver.resolve(params: endpointParams)

        let properties: [String: AnyHashable] =
            [
                "authSchemes": [
                    [
                        "signingRegion": "us-east-1",
                        "name": "sigv4",
                        "signingName": "s3",
                        "disableDoubleEncoding": true
                    ] as [String: AnyHashable]
                ] as [AnyHashable]
            ]

        let headers = Headers()
        let expected = try ClientRuntime.Endpoint(urlString: "https://bucket-name.s3-fips.us-east-1.amazonaws.com", headers: headers, properties: properties)

        XCTAssertEqual(expected, actual)
    }

    /// virtual addressing, UseGlobalEndpoint and us-east-1 region and dualstack uses the regional dualstack endpoint
    func testResolve65() throws {
        let endpointParams = EndpointParams(
            accelerate: false,
            bucket: "bucket-name",
            region: "us-east-1",
            useDualStack: true,
            useFIPS: false,
            useGlobalEndpoint: true
        )
        let resolver = try DefaultEndpointResolver()

        let actual = try resolver.resolve(params: endpointParams)

        let properties: [String: AnyHashable] =
            [
                "authSchemes": [
                    [
                        "signingRegion": "us-east-1",
                        "name": "sigv4",
                        "signingName": "s3",
                        "disableDoubleEncoding": true
                    ] as [String: AnyHashable]
                ] as [AnyHashable]
            ]

        let headers = Headers()
        let expected = try ClientRuntime.Endpoint(urlString: "https://bucket-name.s3.dualstack.us-east-1.amazonaws.com", headers: headers, properties: properties)

        XCTAssertEqual(expected, actual)
    }

    /// virtual addressing, UseGlobalEndpoint and us-east-1 region and accelerate uses the global accelerate endpoint
    func testResolve66() throws {
        let endpointParams = EndpointParams(
            accelerate: true,
            bucket: "bucket-name",
            region: "us-east-1",
            useDualStack: false,
            useFIPS: false,
            useGlobalEndpoint: true
        )
        let resolver = try DefaultEndpointResolver()

        let actual = try resolver.resolve(params: endpointParams)

        let properties: [String: AnyHashable] =
            [
                "authSchemes": [
                    [
                        "signingRegion": "us-east-1",
                        "name": "sigv4",
                        "signingName": "s3",
                        "disableDoubleEncoding": true
                    ] as [String: AnyHashable]
                ] as [AnyHashable]
            ]

        let headers = Headers()
        let expected = try ClientRuntime.Endpoint(urlString: "https://bucket-name.s3-accelerate.amazonaws.com", headers: headers, properties: properties)

        XCTAssertEqual(expected, actual)
    }

    /// virtual addressing, UseGlobalEndpoint and us-east-1 region with custom endpoint
    func testResolve67() throws {
        let endpointParams = EndpointParams(
            accelerate: false,
            bucket: "bucket-name",
            endpoint: "https://example.com",
            region: "us-east-1",
            useDualStack: false,
            useFIPS: false,
            useGlobalEndpoint: true
        )
        let resolver = try DefaultEndpointResolver()

        let actual = try resolver.resolve(params: endpointParams)

        let properties: [String: AnyHashable] =
            [
                "authSchemes": [
                    [
                        "signingRegion": "us-east-1",
                        "name": "sigv4",
                        "signingName": "s3",
                        "disableDoubleEncoding": true
                    ] as [String: AnyHashable]
                ] as [AnyHashable]
            ]

        let headers = Headers()
        let expected = try ClientRuntime.Endpoint(urlString: "https://bucket-name.example.com", headers: headers, properties: properties)

        XCTAssertEqual(expected, actual)
    }

    /// ForcePathStyle, aws-global region uses the global endpoint
    func testResolve68() throws {
        let endpointParams = EndpointParams(
            accelerate: false,
            bucket: "bucket-name",
            forcePathStyle: true,
            region: "aws-global",
            useDualStack: false,
            useFIPS: false
        )
        let resolver = try DefaultEndpointResolver()

        let actual = try resolver.resolve(params: endpointParams)

        let properties: [String: AnyHashable] =
            [
                "authSchemes": [
                    [
                        "signingRegion": "us-east-1",
                        "name": "sigv4",
                        "signingName": "s3",
                        "disableDoubleEncoding": true
                    ] as [String: AnyHashable]
                ] as [AnyHashable]
            ]

        let headers = Headers()
        let expected = try ClientRuntime.Endpoint(urlString: "https://s3.amazonaws.com/bucket-name", headers: headers, properties: properties)

        XCTAssertEqual(expected, actual)
    }

    /// ForcePathStyle, aws-global region with fips is invalid
    func testResolve69() throws {
        let endpointParams = EndpointParams(
            accelerate: false,
            bucket: "bucket-name",
            forcePathStyle: true,
            region: "aws-global",
            useDualStack: false,
            useFIPS: true
        )
        let resolver = try DefaultEndpointResolver()

        let actual = try resolver.resolve(params: endpointParams)

        let properties: [String: AnyHashable] =
            [
                "authSchemes": [
                    [
                        "signingRegion": "us-east-1",
                        "name": "sigv4",
                        "signingName": "s3",
                        "disableDoubleEncoding": true
                    ] as [String: AnyHashable]
                ] as [AnyHashable]
            ]

        let headers = Headers()
        let expected = try ClientRuntime.Endpoint(urlString: "https://s3-fips.us-east-1.amazonaws.com/bucket-name", headers: headers, properties: properties)

        XCTAssertEqual(expected, actual)
    }

    /// ForcePathStyle, aws-global region with dualstack uses regional dualstack endpoint
    func testResolve70() throws {
        let endpointParams = EndpointParams(
            accelerate: false,
            bucket: "bucket-name",
            forcePathStyle: true,
            region: "aws-global",
            useDualStack: true,
            useFIPS: false
        )
        let resolver = try DefaultEndpointResolver()

        let actual = try resolver.resolve(params: endpointParams)

        let properties: [String: AnyHashable] =
            [
                "authSchemes": [
                    [
                        "signingRegion": "us-east-1",
                        "name": "sigv4",
                        "signingName": "s3",
                        "disableDoubleEncoding": true
                    ] as [String: AnyHashable]
                ] as [AnyHashable]
            ]

        let headers = Headers()
        let expected = try ClientRuntime.Endpoint(urlString: "https://s3.dualstack.us-east-1.amazonaws.com/bucket-name", headers: headers, properties: properties)

        XCTAssertEqual(expected, actual)
    }

    /// ForcePathStyle, aws-global region custom endpoint uses the custom endpoint
    func testResolve71() throws {
        let endpointParams = EndpointParams(
            accelerate: false,
            bucket: "bucket-name",
            endpoint: "https://example.com",
            forcePathStyle: true,
            region: "aws-global",
            useDualStack: false,
            useFIPS: false
        )
        let resolver = try DefaultEndpointResolver()

        let actual = try resolver.resolve(params: endpointParams)

        let properties: [String: AnyHashable] =
            [
                "authSchemes": [
                    [
                        "signingRegion": "us-east-1",
                        "name": "sigv4",
                        "signingName": "s3",
                        "disableDoubleEncoding": true
                    ] as [String: AnyHashable]
                ] as [AnyHashable]
            ]

        let headers = Headers()
        let expected = try ClientRuntime.Endpoint(urlString: "https://example.com/bucket-name", headers: headers, properties: properties)

        XCTAssertEqual(expected, actual)
    }

    /// ForcePathStyle, UseGlobalEndpoint us-east-1 region uses the global endpoint
    func testResolve72() throws {
        let endpointParams = EndpointParams(
            accelerate: false,
            bucket: "bucket-name",
            forcePathStyle: true,
            region: "us-east-1",
            useDualStack: false,
            useFIPS: false,
            useGlobalEndpoint: true
        )
        let resolver = try DefaultEndpointResolver()

        let actual = try resolver.resolve(params: endpointParams)

        let properties: [String: AnyHashable] =
            [
                "authSchemes": [
                    [
                        "signingRegion": "us-east-1",
                        "name": "sigv4",
                        "signingName": "s3",
                        "disableDoubleEncoding": true
                    ] as [String: AnyHashable]
                ] as [AnyHashable]
            ]

        let headers = Headers()
        let expected = try ClientRuntime.Endpoint(urlString: "https://s3.amazonaws.com/bucket-name", headers: headers, properties: properties)

        XCTAssertEqual(expected, actual)
    }

    /// ForcePathStyle, UseGlobalEndpoint us-west-2 region uses the regional endpoint
    func testResolve73() throws {
        let endpointParams = EndpointParams(
            accelerate: false,
            bucket: "bucket-name",
            forcePathStyle: true,
            region: "us-west-2",
            useDualStack: false,
            useFIPS: false,
            useGlobalEndpoint: true
        )
        let resolver = try DefaultEndpointResolver()

        let actual = try resolver.resolve(params: endpointParams)

        let properties: [String: AnyHashable] =
            [
                "authSchemes": [
                    [
                        "signingRegion": "us-west-2",
                        "name": "sigv4",
                        "signingName": "s3",
                        "disableDoubleEncoding": true
                    ] as [String: AnyHashable]
                ] as [AnyHashable]
            ]

        let headers = Headers()
        let expected = try ClientRuntime.Endpoint(urlString: "https://s3.us-west-2.amazonaws.com/bucket-name", headers: headers, properties: properties)

        XCTAssertEqual(expected, actual)
    }

    /// ForcePathStyle, UseGlobalEndpoint us-east-1 region, dualstack uses the regional dualstack endpoint
    func testResolve74() throws {
        let endpointParams = EndpointParams(
            accelerate: false,
            bucket: "bucket-name",
            forcePathStyle: true,
            region: "us-east-1",
            useDualStack: true,
            useFIPS: false,
            useGlobalEndpoint: true
        )
        let resolver = try DefaultEndpointResolver()

        let actual = try resolver.resolve(params: endpointParams)

        let properties: [String: AnyHashable] =
            [
                "authSchemes": [
                    [
                        "signingRegion": "us-east-1",
                        "name": "sigv4",
                        "signingName": "s3",
                        "disableDoubleEncoding": true
                    ] as [String: AnyHashable]
                ] as [AnyHashable]
            ]

        let headers = Headers()
        let expected = try ClientRuntime.Endpoint(urlString: "https://s3.dualstack.us-east-1.amazonaws.com/bucket-name", headers: headers, properties: properties)

        XCTAssertEqual(expected, actual)
    }

    /// ForcePathStyle, UseGlobalEndpoint us-east-1 region custom endpoint uses the custom endpoint
    func testResolve75() throws {
        let endpointParams = EndpointParams(
            accelerate: false,
            bucket: "bucket-name",
            endpoint: "https://example.com",
            forcePathStyle: true,
            region: "us-east-1",
            useDualStack: false,
            useFIPS: false,
            useGlobalEndpoint: true
        )
        let resolver = try DefaultEndpointResolver()

        let actual = try resolver.resolve(params: endpointParams)

        let properties: [String: AnyHashable] =
            [
                "authSchemes": [
                    [
                        "signingRegion": "us-east-1",
                        "name": "sigv4",
                        "signingName": "s3",
                        "disableDoubleEncoding": true
                    ] as [String: AnyHashable]
                ] as [AnyHashable]
            ]

        let headers = Headers()
        let expected = try ClientRuntime.Endpoint(urlString: "https://example.com/bucket-name", headers: headers, properties: properties)

        XCTAssertEqual(expected, actual)
    }

    /// ARN with aws-global region and  UseArnRegion uses the regional endpoint
    func testResolve76() throws {
        let endpointParams = EndpointParams(
            accelerate: false,
            bucket: "arn:aws:s3-outposts:us-east-1:123456789012:outpost/op-01234567890123456/accesspoint/reports",
            region: "aws-global",
            useArnRegion: true,
            useDualStack: false,
            useFIPS: false
        )
        let resolver = try DefaultEndpointResolver()

        let actual = try resolver.resolve(params: endpointParams)

        let properties: [String: AnyHashable] =
            [
                "authSchemes": [
                    [
                        "signingRegion": "us-east-1",
                        "name": "sigv4",
                        "signingName": "s3-outposts",
                        "disableDoubleEncoding": true
                    ] as [String: AnyHashable]
                ] as [AnyHashable]
            ]

        let headers = Headers()
        let expected = try ClientRuntime.Endpoint(urlString: "https://reports-123456789012.op-01234567890123456.s3-outposts.us-east-1.amazonaws.com", headers: headers, properties: properties)

        XCTAssertEqual(expected, actual)
    }

    /// cross partition MRAP ARN is an error
    func testResolve77() throws {
        let endpointParams = EndpointParams(
            bucket: "arn:aws-cn:s3::123456789012:accesspoint:mfzwi23gnjvgw.mrap",
            region: "us-west-1"
        )
        let resolver = try DefaultEndpointResolver()

        XCTAssertThrowsError(try resolver.resolve(params: endpointParams)) { error in
            switch error {
            case EndpointError.unresolved(let message):
                XCTAssertEqual("Client was configured for partition `aws` but bucket referred to partition `aws-cn`", message)
            default:
                XCTFail()
            }
        }
    }

    /// Endpoint override, accesspoint with HTTP, port
    func testResolve78() throws {
        let endpointParams = EndpointParams(
            bucket: "arn:aws:s3:us-west-2:123456789012:accesspoint:myendpoint",
            endpoint: "http://beta.example.com:1234",
            region: "us-west-2"
        )
        let resolver = try DefaultEndpointResolver()

        let actual = try resolver.resolve(params: endpointParams)

        let properties: [String: AnyHashable] =
            [
                "authSchemes": [
                    [
                        "signingRegion": "us-west-2",
                        "name": "sigv4",
                        "signingName": "s3",
                        "disableDoubleEncoding": true
                    ] as [String: AnyHashable]
                ] as [AnyHashable]
            ]

        let headers = Headers()
        let expected = try ClientRuntime.Endpoint(urlString: "http://myendpoint-123456789012.beta.example.com:1234", headers: headers, properties: properties)

        XCTAssertEqual(expected, actual)
    }

    /// Endpoint override, accesspoint with http, path, query, and port
    func testResolve79() throws {
        let endpointParams = EndpointParams(
            accelerate: false,
            bucket: "arn:aws:s3:us-west-2:123456789012:accesspoint:myendpoint",
            endpoint: "http://beta.example.com:1234/path",
            region: "us-west-2",
            useDualStack: false,
            useFIPS: false
        )
        let resolver = try DefaultEndpointResolver()

        let actual = try resolver.resolve(params: endpointParams)

        let properties: [String: AnyHashable] =
            [
                "authSchemes": [
                    [
                        "signingRegion": "us-west-2",
                        "name": "sigv4",
                        "signingName": "s3",
                        "disableDoubleEncoding": true
                    ] as [String: AnyHashable]
                ] as [AnyHashable]
            ]

        let headers = Headers()
        let expected = try ClientRuntime.Endpoint(urlString: "http://myendpoint-123456789012.beta.example.com:1234/path", headers: headers, properties: properties)

        XCTAssertEqual(expected, actual)
    }

    /// vanilla virtual addressing@us-west-2
    func testResolve80() throws {
        let endpointParams = EndpointParams(
            accelerate: false,
            bucket: "bucket-name",
            forcePathStyle: false,
            region: "us-west-2",
            useDualStack: false,
            useFIPS: false
        )
        let resolver = try DefaultEndpointResolver()

        let actual = try resolver.resolve(params: endpointParams)

        let properties: [String: AnyHashable] =
            [
                "authSchemes": [
                    [
                        "signingRegion": "us-west-2",
                        "name": "sigv4",
                        "signingName": "s3",
                        "disableDoubleEncoding": true
                    ] as [String: AnyHashable]
                ] as [AnyHashable]
            ]

        let headers = Headers()
        let expected = try ClientRuntime.Endpoint(urlString: "https://bucket-name.s3.us-west-2.amazonaws.com", headers: headers, properties: properties)

        XCTAssertEqual(expected, actual)
    }

    /// virtual addressing + dualstack@us-west-2
    func testResolve81() throws {
        let endpointParams = EndpointParams(
            accelerate: false,
            bucket: "bucket-name",
            forcePathStyle: false,
            region: "us-west-2",
            useDualStack: true,
            useFIPS: false
        )
        let resolver = try DefaultEndpointResolver()

        let actual = try resolver.resolve(params: endpointParams)

        let properties: [String: AnyHashable] =
            [
                "authSchemes": [
                    [
                        "signingRegion": "us-west-2",
                        "name": "sigv4",
                        "signingName": "s3",
                        "disableDoubleEncoding": true
                    ] as [String: AnyHashable]
                ] as [AnyHashable]
            ]

        let headers = Headers()
        let expected = try ClientRuntime.Endpoint(urlString: "https://bucket-name.s3.dualstack.us-west-2.amazonaws.com", headers: headers, properties: properties)

        XCTAssertEqual(expected, actual)
    }

    /// accelerate + dualstack@us-west-2
    func testResolve82() throws {
        let endpointParams = EndpointParams(
            accelerate: true,
            bucket: "bucket-name",
            forcePathStyle: false,
            region: "us-west-2",
            useDualStack: true,
            useFIPS: false
        )
        let resolver = try DefaultEndpointResolver()

        let actual = try resolver.resolve(params: endpointParams)

        let properties: [String: AnyHashable] =
            [
                "authSchemes": [
                    [
                        "signingRegion": "us-west-2",
                        "name": "sigv4",
                        "signingName": "s3",
                        "disableDoubleEncoding": true
                    ] as [String: AnyHashable]
                ] as [AnyHashable]
            ]

        let headers = Headers()
        let expected = try ClientRuntime.Endpoint(urlString: "https://bucket-name.s3-accelerate.dualstack.amazonaws.com", headers: headers, properties: properties)

        XCTAssertEqual(expected, actual)
    }

    /// accelerate (dualstack=false)@us-west-2
    func testResolve83() throws {
        let endpointParams = EndpointParams(
            accelerate: true,
            bucket: "bucket-name",
            forcePathStyle: false,
            region: "us-west-2",
            useDualStack: false,
            useFIPS: false
        )
        let resolver = try DefaultEndpointResolver()

        let actual = try resolver.resolve(params: endpointParams)

        let properties: [String: AnyHashable] =
            [
                "authSchemes": [
                    [
                        "signingRegion": "us-west-2",
                        "name": "sigv4",
                        "signingName": "s3",
                        "disableDoubleEncoding": true
                    ] as [String: AnyHashable]
                ] as [AnyHashable]
            ]

        let headers = Headers()
        let expected = try ClientRuntime.Endpoint(urlString: "https://bucket-name.s3-accelerate.amazonaws.com", headers: headers, properties: properties)

        XCTAssertEqual(expected, actual)
    }

    /// virtual addressing + fips@us-west-2
    func testResolve84() throws {
        let endpointParams = EndpointParams(
            accelerate: false,
            bucket: "bucket-name",
            forcePathStyle: false,
            region: "us-west-2",
            useDualStack: false,
            useFIPS: true
        )
        let resolver = try DefaultEndpointResolver()

        let actual = try resolver.resolve(params: endpointParams)

        let properties: [String: AnyHashable] =
            [
                "authSchemes": [
                    [
                        "signingRegion": "us-west-2",
                        "name": "sigv4",
                        "signingName": "s3",
                        "disableDoubleEncoding": true
                    ] as [String: AnyHashable]
                ] as [AnyHashable]
            ]

        let headers = Headers()
        let expected = try ClientRuntime.Endpoint(urlString: "https://bucket-name.s3-fips.us-west-2.amazonaws.com", headers: headers, properties: properties)

        XCTAssertEqual(expected, actual)
    }

    /// virtual addressing + dualstack + fips@us-west-2
    func testResolve85() throws {
        let endpointParams = EndpointParams(
            accelerate: false,
            bucket: "bucket-name",
            forcePathStyle: false,
            region: "us-west-2",
            useDualStack: true,
            useFIPS: true
        )
        let resolver = try DefaultEndpointResolver()

        let actual = try resolver.resolve(params: endpointParams)

        let properties: [String: AnyHashable] =
            [
                "authSchemes": [
                    [
                        "signingRegion": "us-west-2",
                        "name": "sigv4",
                        "signingName": "s3",
                        "disableDoubleEncoding": true
                    ] as [String: AnyHashable]
                ] as [AnyHashable]
            ]

        let headers = Headers()
        let expected = try ClientRuntime.Endpoint(urlString: "https://bucket-name.s3-fips.dualstack.us-west-2.amazonaws.com", headers: headers, properties: properties)

        XCTAssertEqual(expected, actual)
    }

    /// accelerate + fips = error@us-west-2
    func testResolve86() throws {
        let endpointParams = EndpointParams(
            accelerate: true,
            bucket: "bucket-name",
            forcePathStyle: false,
            region: "us-west-2",
            useDualStack: false,
            useFIPS: true
        )
        let resolver = try DefaultEndpointResolver()

        XCTAssertThrowsError(try resolver.resolve(params: endpointParams)) { error in
            switch error {
            case EndpointError.unresolved(let message):
                XCTAssertEqual("Accelerate cannot be used with FIPS", message)
            default:
                XCTFail()
            }
        }
    }

    /// vanilla virtual addressing@cn-north-1
    func testResolve87() throws {
        let endpointParams = EndpointParams(
            accelerate: false,
            bucket: "bucket-name",
            forcePathStyle: false,
            region: "cn-north-1",
            useDualStack: false,
            useFIPS: false
        )
        let resolver = try DefaultEndpointResolver()

        let actual = try resolver.resolve(params: endpointParams)

        let properties: [String: AnyHashable] =
            [
                "authSchemes": [
                    [
                        "signingRegion": "cn-north-1",
                        "name": "sigv4",
                        "signingName": "s3",
                        "disableDoubleEncoding": true
                    ] as [String: AnyHashable]
                ] as [AnyHashable]
            ]

        let headers = Headers()
        let expected = try ClientRuntime.Endpoint(urlString: "https://bucket-name.s3.cn-north-1.amazonaws.com.cn", headers: headers, properties: properties)

        XCTAssertEqual(expected, actual)
    }

    /// virtual addressing + dualstack@cn-north-1
    func testResolve88() throws {
        let endpointParams = EndpointParams(
            accelerate: false,
            bucket: "bucket-name",
            forcePathStyle: false,
            region: "cn-north-1",
            useDualStack: true,
            useFIPS: false
        )
        let resolver = try DefaultEndpointResolver()

        let actual = try resolver.resolve(params: endpointParams)

        let properties: [String: AnyHashable] =
            [
                "authSchemes": [
                    [
                        "signingRegion": "cn-north-1",
                        "name": "sigv4",
                        "signingName": "s3",
                        "disableDoubleEncoding": true
                    ] as [String: AnyHashable]
                ] as [AnyHashable]
            ]

        let headers = Headers()
        let expected = try ClientRuntime.Endpoint(urlString: "https://bucket-name.s3.dualstack.cn-north-1.amazonaws.com.cn", headers: headers, properties: properties)

        XCTAssertEqual(expected, actual)
    }

    /// accelerate (dualstack=false)@cn-north-1
    func testResolve89() throws {
        let endpointParams = EndpointParams(
            accelerate: true,
            bucket: "bucket-name",
            forcePathStyle: false,
            region: "cn-north-1",
            useDualStack: false,
            useFIPS: false
        )
        let resolver = try DefaultEndpointResolver()

        XCTAssertThrowsError(try resolver.resolve(params: endpointParams)) { error in
            switch error {
            case EndpointError.unresolved(let message):
                XCTAssertEqual("S3 Accelerate cannot be used in this region", message)
            default:
                XCTFail()
            }
        }
    }

    /// virtual addressing + fips@cn-north-1
    func testResolve90() throws {
        let endpointParams = EndpointParams(
            accelerate: false,
            bucket: "bucket-name",
            forcePathStyle: false,
            region: "cn-north-1",
            useDualStack: false,
            useFIPS: true
        )
        let resolver = try DefaultEndpointResolver()

        XCTAssertThrowsError(try resolver.resolve(params: endpointParams)) { error in
            switch error {
            case EndpointError.unresolved(let message):
                XCTAssertEqual("Partition does not support FIPS", message)
            default:
                XCTFail()
            }
        }
    }

    /// vanilla virtual addressing@af-south-1
    func testResolve91() throws {
        let endpointParams = EndpointParams(
            accelerate: false,
            bucket: "bucket-name",
            forcePathStyle: false,
            region: "af-south-1",
            useDualStack: false,
            useFIPS: false
        )
        let resolver = try DefaultEndpointResolver()

        let actual = try resolver.resolve(params: endpointParams)

        let properties: [String: AnyHashable] =
            [
                "authSchemes": [
                    [
                        "signingRegion": "af-south-1",
                        "name": "sigv4",
                        "signingName": "s3",
                        "disableDoubleEncoding": true
                    ] as [String: AnyHashable]
                ] as [AnyHashable]
            ]

        let headers = Headers()
        let expected = try ClientRuntime.Endpoint(urlString: "https://bucket-name.s3.af-south-1.amazonaws.com", headers: headers, properties: properties)

        XCTAssertEqual(expected, actual)
    }

    /// virtual addressing + dualstack@af-south-1
    func testResolve92() throws {
        let endpointParams = EndpointParams(
            accelerate: false,
            bucket: "bucket-name",
            forcePathStyle: false,
            region: "af-south-1",
            useDualStack: true,
            useFIPS: false
        )
        let resolver = try DefaultEndpointResolver()

        let actual = try resolver.resolve(params: endpointParams)

        let properties: [String: AnyHashable] =
            [
                "authSchemes": [
                    [
                        "signingRegion": "af-south-1",
                        "name": "sigv4",
                        "signingName": "s3",
                        "disableDoubleEncoding": true
                    ] as [String: AnyHashable]
                ] as [AnyHashable]
            ]

        let headers = Headers()
        let expected = try ClientRuntime.Endpoint(urlString: "https://bucket-name.s3.dualstack.af-south-1.amazonaws.com", headers: headers, properties: properties)

        XCTAssertEqual(expected, actual)
    }

    /// accelerate + dualstack@af-south-1
    func testResolve93() throws {
        let endpointParams = EndpointParams(
            accelerate: true,
            bucket: "bucket-name",
            forcePathStyle: false,
            region: "af-south-1",
            useDualStack: true,
            useFIPS: false
        )
        let resolver = try DefaultEndpointResolver()

        let actual = try resolver.resolve(params: endpointParams)

        let properties: [String: AnyHashable] =
            [
                "authSchemes": [
                    [
                        "signingRegion": "af-south-1",
                        "name": "sigv4",
                        "signingName": "s3",
                        "disableDoubleEncoding": true
                    ] as [String: AnyHashable]
                ] as [AnyHashable]
            ]

        let headers = Headers()
        let expected = try ClientRuntime.Endpoint(urlString: "https://bucket-name.s3-accelerate.dualstack.amazonaws.com", headers: headers, properties: properties)

        XCTAssertEqual(expected, actual)
    }

    /// accelerate (dualstack=false)@af-south-1
    func testResolve94() throws {
        let endpointParams = EndpointParams(
            accelerate: true,
            bucket: "bucket-name",
            forcePathStyle: false,
            region: "af-south-1",
            useDualStack: false,
            useFIPS: false
        )
        let resolver = try DefaultEndpointResolver()

        let actual = try resolver.resolve(params: endpointParams)

        let properties: [String: AnyHashable] =
            [
                "authSchemes": [
                    [
                        "signingRegion": "af-south-1",
                        "name": "sigv4",
                        "signingName": "s3",
                        "disableDoubleEncoding": true
                    ] as [String: AnyHashable]
                ] as [AnyHashable]
            ]

        let headers = Headers()
        let expected = try ClientRuntime.Endpoint(urlString: "https://bucket-name.s3-accelerate.amazonaws.com", headers: headers, properties: properties)

        XCTAssertEqual(expected, actual)
    }

    /// virtual addressing + fips@af-south-1
    func testResolve95() throws {
        let endpointParams = EndpointParams(
            accelerate: false,
            bucket: "bucket-name",
            forcePathStyle: false,
            region: "af-south-1",
            useDualStack: false,
            useFIPS: true
        )
        let resolver = try DefaultEndpointResolver()

        let actual = try resolver.resolve(params: endpointParams)

        let properties: [String: AnyHashable] =
            [
                "authSchemes": [
                    [
                        "signingRegion": "af-south-1",
                        "name": "sigv4",
                        "signingName": "s3",
                        "disableDoubleEncoding": true
                    ] as [String: AnyHashable]
                ] as [AnyHashable]
            ]

        let headers = Headers()
        let expected = try ClientRuntime.Endpoint(urlString: "https://bucket-name.s3-fips.af-south-1.amazonaws.com", headers: headers, properties: properties)

        XCTAssertEqual(expected, actual)
    }

    /// virtual addressing + dualstack + fips@af-south-1
    func testResolve96() throws {
        let endpointParams = EndpointParams(
            accelerate: false,
            bucket: "bucket-name",
            forcePathStyle: false,
            region: "af-south-1",
            useDualStack: true,
            useFIPS: true
        )
        let resolver = try DefaultEndpointResolver()

        let actual = try resolver.resolve(params: endpointParams)

        let properties: [String: AnyHashable] =
            [
                "authSchemes": [
                    [
                        "signingRegion": "af-south-1",
                        "name": "sigv4",
                        "signingName": "s3",
                        "disableDoubleEncoding": true
                    ] as [String: AnyHashable]
                ] as [AnyHashable]
            ]

        let headers = Headers()
        let expected = try ClientRuntime.Endpoint(urlString: "https://bucket-name.s3-fips.dualstack.af-south-1.amazonaws.com", headers: headers, properties: properties)

        XCTAssertEqual(expected, actual)
    }

    /// accelerate + fips = error@af-south-1
    func testResolve97() throws {
        let endpointParams = EndpointParams(
            accelerate: true,
            bucket: "bucket-name",
            forcePathStyle: false,
            region: "af-south-1",
            useDualStack: false,
            useFIPS: true
        )
        let resolver = try DefaultEndpointResolver()

        XCTAssertThrowsError(try resolver.resolve(params: endpointParams)) { error in
            switch error {
            case EndpointError.unresolved(let message):
                XCTAssertEqual("Accelerate cannot be used with FIPS", message)
            default:
                XCTFail()
            }
        }
    }

    /// vanilla path style@us-west-2
    func testResolve98() throws {
        let endpointParams = EndpointParams(
            accelerate: false,
            bucket: "bucket-name",
            forcePathStyle: true,
            region: "us-west-2",
            useDualStack: false,
            useFIPS: false
        )
        let resolver = try DefaultEndpointResolver()

        let actual = try resolver.resolve(params: endpointParams)

        let properties: [String: AnyHashable] =
            [
                "authSchemes": [
                    [
                        "signingRegion": "us-west-2",
                        "name": "sigv4",
                        "signingName": "s3",
                        "disableDoubleEncoding": true
                    ] as [String: AnyHashable]
                ] as [AnyHashable]
            ]

        let headers = Headers()
        let expected = try ClientRuntime.Endpoint(urlString: "https://s3.us-west-2.amazonaws.com/bucket-name", headers: headers, properties: properties)

        XCTAssertEqual(expected, actual)
    }

    /// fips@us-gov-west-2, bucket is not S3-dns-compatible (subdomains)
    func testResolve99() throws {
        let endpointParams = EndpointParams(
            accelerate: false,
            bucket: "bucket.with.dots",
            region: "us-gov-west-1",
            useDualStack: false,
            useFIPS: true
        )
        let resolver = try DefaultEndpointResolver()

        let actual = try resolver.resolve(params: endpointParams)

        let properties: [String: AnyHashable] =
            [
                "authSchemes": [
                    [
                        "signingRegion": "us-gov-west-1",
                        "name": "sigv4",
                        "signingName": "s3",
                        "disableDoubleEncoding": true
                    ] as [String: AnyHashable]
                ] as [AnyHashable]
            ]

        let headers = Headers()
        let expected = try ClientRuntime.Endpoint(urlString: "https://s3-fips.us-gov-west-1.amazonaws.com/bucket.with.dots", headers: headers, properties: properties)

        XCTAssertEqual(expected, actual)
    }

    /// path style + accelerate = error@us-west-2
    func testResolve100() throws {
        let endpointParams = EndpointParams(
            accelerate: true,
            bucket: "bucket-name",
            forcePathStyle: true,
            region: "us-west-2",
            useDualStack: false,
            useFIPS: false
        )
        let resolver = try DefaultEndpointResolver()

        XCTAssertThrowsError(try resolver.resolve(params: endpointParams)) { error in
            switch error {
            case EndpointError.unresolved(let message):
                XCTAssertEqual("Path-style addressing cannot be used with S3 Accelerate", message)
            default:
                XCTFail()
            }
        }
    }

    /// path style + dualstack@us-west-2
    func testResolve101() throws {
        let endpointParams = EndpointParams(
            accelerate: false,
            bucket: "bucket-name",
            forcePathStyle: true,
            region: "us-west-2",
            useDualStack: true,
            useFIPS: false
        )
        let resolver = try DefaultEndpointResolver()

        let actual = try resolver.resolve(params: endpointParams)

        let properties: [String: AnyHashable] =
            [
                "authSchemes": [
                    [
                        "signingRegion": "us-west-2",
                        "name": "sigv4",
                        "signingName": "s3",
                        "disableDoubleEncoding": true
                    ] as [String: AnyHashable]
                ] as [AnyHashable]
            ]

        let headers = Headers()
        let expected = try ClientRuntime.Endpoint(urlString: "https://s3.dualstack.us-west-2.amazonaws.com/bucket-name", headers: headers, properties: properties)

        XCTAssertEqual(expected, actual)
    }

    /// path style + arn is error@us-west-2
    func testResolve102() throws {
        let endpointParams = EndpointParams(
            accelerate: false,
            bucket: "arn:PARTITION:s3-outposts:REGION:123456789012:outpost:op-01234567890123456:bucket:mybucket",
            forcePathStyle: true,
            region: "us-west-2",
            useDualStack: false,
            useFIPS: false
        )
        let resolver = try DefaultEndpointResolver()

        XCTAssertThrowsError(try resolver.resolve(params: endpointParams)) { error in
            switch error {
            case EndpointError.unresolved(let message):
                XCTAssertEqual("Path-style addressing cannot be used with ARN buckets", message)
            default:
                XCTFail()
            }
        }
    }

    /// path style + invalid DNS name@us-west-2
    func testResolve103() throws {
        let endpointParams = EndpointParams(
            accelerate: false,
            bucket: "99a_b",
            forcePathStyle: true,
            region: "us-west-2",
            useDualStack: false,
            useFIPS: false
        )
        let resolver = try DefaultEndpointResolver()

        let actual = try resolver.resolve(params: endpointParams)

        let properties: [String: AnyHashable] =
            [
                "authSchemes": [
                    [
                        "signingRegion": "us-west-2",
                        "name": "sigv4",
                        "signingName": "s3",
                        "disableDoubleEncoding": true
                    ] as [String: AnyHashable]
                ] as [AnyHashable]
            ]

        let headers = Headers()
        let expected = try ClientRuntime.Endpoint(urlString: "https://s3.us-west-2.amazonaws.com/99a_b", headers: headers, properties: properties)

        XCTAssertEqual(expected, actual)
    }

    /// no path style + invalid DNS name@us-west-2
    func testResolve104() throws {
        let endpointParams = EndpointParams(
            accelerate: false,
            bucket: "99a_b",
            region: "us-west-2",
            useDualStack: false,
            useFIPS: false
        )
        let resolver = try DefaultEndpointResolver()

        let actual = try resolver.resolve(params: endpointParams)

        let properties: [String: AnyHashable] =
            [
                "authSchemes": [
                    [
                        "signingRegion": "us-west-2",
                        "name": "sigv4",
                        "signingName": "s3",
                        "disableDoubleEncoding": true
                    ] as [String: AnyHashable]
                ] as [AnyHashable]
            ]

        let headers = Headers()
        let expected = try ClientRuntime.Endpoint(urlString: "https://s3.us-west-2.amazonaws.com/99a_b", headers: headers, properties: properties)

        XCTAssertEqual(expected, actual)
    }

    /// vanilla path style@cn-north-1
    func testResolve105() throws {
        let endpointParams = EndpointParams(
            accelerate: false,
            bucket: "bucket-name",
            forcePathStyle: true,
            region: "cn-north-1",
            useDualStack: false,
            useFIPS: false
        )
        let resolver = try DefaultEndpointResolver()

        let actual = try resolver.resolve(params: endpointParams)

        let properties: [String: AnyHashable] =
            [
                "authSchemes": [
                    [
                        "signingRegion": "cn-north-1",
                        "name": "sigv4",
                        "signingName": "s3",
                        "disableDoubleEncoding": true
                    ] as [String: AnyHashable]
                ] as [AnyHashable]
            ]

        let headers = Headers()
        let expected = try ClientRuntime.Endpoint(urlString: "https://s3.cn-north-1.amazonaws.com.cn/bucket-name", headers: headers, properties: properties)

        XCTAssertEqual(expected, actual)
    }

    /// path style + fips@cn-north-1
    func testResolve106() throws {
        let endpointParams = EndpointParams(
            accelerate: false,
            bucket: "bucket-name",
            forcePathStyle: true,
            region: "cn-north-1",
            useDualStack: false,
            useFIPS: true
        )
        let resolver = try DefaultEndpointResolver()

        let actual = try resolver.resolve(params: endpointParams)

        let properties: [String: AnyHashable] =
            [
                "authSchemes": [
                    [
                        "signingRegion": "cn-north-1",
                        "name": "sigv4",
                        "signingName": "s3",
                        "disableDoubleEncoding": true
                    ] as [String: AnyHashable]
                ] as [AnyHashable]
            ]

        let headers = Headers()
        let expected = try ClientRuntime.Endpoint(urlString: "https://s3-fips.cn-north-1.amazonaws.com.cn/bucket-name", headers: headers, properties: properties)

        XCTAssertEqual(expected, actual)
    }

    /// path style + accelerate = error@cn-north-1
    func testResolve107() throws {
        let endpointParams = EndpointParams(
            accelerate: true,
            bucket: "bucket-name",
            forcePathStyle: true,
            region: "cn-north-1",
            useDualStack: false,
            useFIPS: false
        )
        let resolver = try DefaultEndpointResolver()

        XCTAssertThrowsError(try resolver.resolve(params: endpointParams)) { error in
            switch error {
            case EndpointError.unresolved(let message):
                XCTAssertEqual("Path-style addressing cannot be used with S3 Accelerate", message)
            default:
                XCTFail()
            }
        }
    }

    /// path style + dualstack@cn-north-1
    func testResolve108() throws {
        let endpointParams = EndpointParams(
            accelerate: false,
            bucket: "bucket-name",
            forcePathStyle: true,
            region: "cn-north-1",
            useDualStack: true,
            useFIPS: false
        )
        let resolver = try DefaultEndpointResolver()

        let actual = try resolver.resolve(params: endpointParams)

        let properties: [String: AnyHashable] =
            [
                "authSchemes": [
                    [
                        "signingRegion": "cn-north-1",
                        "name": "sigv4",
                        "signingName": "s3",
                        "disableDoubleEncoding": true
                    ] as [String: AnyHashable]
                ] as [AnyHashable]
            ]

        let headers = Headers()
        let expected = try ClientRuntime.Endpoint(urlString: "https://s3.dualstack.cn-north-1.amazonaws.com.cn/bucket-name", headers: headers, properties: properties)

        XCTAssertEqual(expected, actual)
    }

    /// path style + arn is error@cn-north-1
    func testResolve109() throws {
        let endpointParams = EndpointParams(
            accelerate: false,
            bucket: "arn:PARTITION:s3-outposts:REGION:123456789012:outpost:op-01234567890123456:bucket:mybucket",
            forcePathStyle: true,
            region: "cn-north-1",
            useDualStack: false,
            useFIPS: false
        )
        let resolver = try DefaultEndpointResolver()

        XCTAssertThrowsError(try resolver.resolve(params: endpointParams)) { error in
            switch error {
            case EndpointError.unresolved(let message):
                XCTAssertEqual("Path-style addressing cannot be used with ARN buckets", message)
            default:
                XCTFail()
            }
        }
    }

    /// path style + invalid DNS name@cn-north-1
    func testResolve110() throws {
        let endpointParams = EndpointParams(
            accelerate: false,
            bucket: "99a_b",
            forcePathStyle: true,
            region: "cn-north-1",
            useDualStack: false,
            useFIPS: false
        )
        let resolver = try DefaultEndpointResolver()

        let actual = try resolver.resolve(params: endpointParams)

        let properties: [String: AnyHashable] =
            [
                "authSchemes": [
                    [
                        "signingRegion": "cn-north-1",
                        "name": "sigv4",
                        "signingName": "s3",
                        "disableDoubleEncoding": true
                    ] as [String: AnyHashable]
                ] as [AnyHashable]
            ]

        let headers = Headers()
        let expected = try ClientRuntime.Endpoint(urlString: "https://s3.cn-north-1.amazonaws.com.cn/99a_b", headers: headers, properties: properties)

        XCTAssertEqual(expected, actual)
    }

    /// no path style + invalid DNS name@cn-north-1
    func testResolve111() throws {
        let endpointParams = EndpointParams(
            accelerate: false,
            bucket: "99a_b",
            region: "cn-north-1",
            useDualStack: false,
            useFIPS: false
        )
        let resolver = try DefaultEndpointResolver()

        let actual = try resolver.resolve(params: endpointParams)

        let properties: [String: AnyHashable] =
            [
                "authSchemes": [
                    [
                        "signingRegion": "cn-north-1",
                        "name": "sigv4",
                        "signingName": "s3",
                        "disableDoubleEncoding": true
                    ] as [String: AnyHashable]
                ] as [AnyHashable]
            ]

        let headers = Headers()
        let expected = try ClientRuntime.Endpoint(urlString: "https://s3.cn-north-1.amazonaws.com.cn/99a_b", headers: headers, properties: properties)

        XCTAssertEqual(expected, actual)
    }

    /// vanilla path style@af-south-1
    func testResolve112() throws {
        let endpointParams = EndpointParams(
            accelerate: false,
            bucket: "bucket-name",
            forcePathStyle: true,
            region: "af-south-1",
            useDualStack: false,
            useFIPS: false
        )
        let resolver = try DefaultEndpointResolver()

        let actual = try resolver.resolve(params: endpointParams)

        let properties: [String: AnyHashable] =
            [
                "authSchemes": [
                    [
                        "signingRegion": "af-south-1",
                        "name": "sigv4",
                        "signingName": "s3",
                        "disableDoubleEncoding": true
                    ] as [String: AnyHashable]
                ] as [AnyHashable]
            ]

        let headers = Headers()
        let expected = try ClientRuntime.Endpoint(urlString: "https://s3.af-south-1.amazonaws.com/bucket-name", headers: headers, properties: properties)

        XCTAssertEqual(expected, actual)
    }

    /// path style + fips@af-south-1
    func testResolve113() throws {
        let endpointParams = EndpointParams(
            accelerate: false,
            bucket: "bucket-name",
            forcePathStyle: true,
            region: "af-south-1",
            useDualStack: false,
            useFIPS: true
        )
        let resolver = try DefaultEndpointResolver()

        let actual = try resolver.resolve(params: endpointParams)

        let properties: [String: AnyHashable] =
            [
                "authSchemes": [
                    [
                        "signingRegion": "af-south-1",
                        "name": "sigv4",
                        "signingName": "s3",
                        "disableDoubleEncoding": true
                    ] as [String: AnyHashable]
                ] as [AnyHashable]
            ]

        let headers = Headers()
        let expected = try ClientRuntime.Endpoint(urlString: "https://s3-fips.af-south-1.amazonaws.com/bucket-name", headers: headers, properties: properties)

        XCTAssertEqual(expected, actual)
    }

    /// path style + accelerate = error@af-south-1
    func testResolve114() throws {
        let endpointParams = EndpointParams(
            accelerate: true,
            bucket: "bucket-name",
            forcePathStyle: true,
            region: "af-south-1",
            useDualStack: false,
            useFIPS: false
        )
        let resolver = try DefaultEndpointResolver()

        XCTAssertThrowsError(try resolver.resolve(params: endpointParams)) { error in
            switch error {
            case EndpointError.unresolved(let message):
                XCTAssertEqual("Path-style addressing cannot be used with S3 Accelerate", message)
            default:
                XCTFail()
            }
        }
    }

    /// path style + dualstack@af-south-1
    func testResolve115() throws {
        let endpointParams = EndpointParams(
            accelerate: false,
            bucket: "bucket-name",
            forcePathStyle: true,
            region: "af-south-1",
            useDualStack: true,
            useFIPS: false
        )
        let resolver = try DefaultEndpointResolver()

        let actual = try resolver.resolve(params: endpointParams)

        let properties: [String: AnyHashable] =
            [
                "authSchemes": [
                    [
                        "signingRegion": "af-south-1",
                        "name": "sigv4",
                        "signingName": "s3",
                        "disableDoubleEncoding": true
                    ] as [String: AnyHashable]
                ] as [AnyHashable]
            ]

        let headers = Headers()
        let expected = try ClientRuntime.Endpoint(urlString: "https://s3.dualstack.af-south-1.amazonaws.com/bucket-name", headers: headers, properties: properties)

        XCTAssertEqual(expected, actual)
    }

    /// path style + arn is error@af-south-1
    func testResolve116() throws {
        let endpointParams = EndpointParams(
            accelerate: false,
            bucket: "arn:PARTITION:s3-outposts:REGION:123456789012:outpost:op-01234567890123456:bucket:mybucket",
            forcePathStyle: true,
            region: "af-south-1",
            useDualStack: false,
            useFIPS: false
        )
        let resolver = try DefaultEndpointResolver()

        XCTAssertThrowsError(try resolver.resolve(params: endpointParams)) { error in
            switch error {
            case EndpointError.unresolved(let message):
                XCTAssertEqual("Path-style addressing cannot be used with ARN buckets", message)
            default:
                XCTFail()
            }
        }
    }

    /// path style + invalid DNS name@af-south-1
    func testResolve117() throws {
        let endpointParams = EndpointParams(
            accelerate: false,
            bucket: "99a_b",
            forcePathStyle: true,
            region: "af-south-1",
            useDualStack: false,
            useFIPS: false
        )
        let resolver = try DefaultEndpointResolver()

        let actual = try resolver.resolve(params: endpointParams)

        let properties: [String: AnyHashable] =
            [
                "authSchemes": [
                    [
                        "signingRegion": "af-south-1",
                        "name": "sigv4",
                        "signingName": "s3",
                        "disableDoubleEncoding": true
                    ] as [String: AnyHashable]
                ] as [AnyHashable]
            ]

        let headers = Headers()
        let expected = try ClientRuntime.Endpoint(urlString: "https://s3.af-south-1.amazonaws.com/99a_b", headers: headers, properties: properties)

        XCTAssertEqual(expected, actual)
    }

    /// no path style + invalid DNS name@af-south-1
    func testResolve118() throws {
        let endpointParams = EndpointParams(
            accelerate: false,
            bucket: "99a_b",
            region: "af-south-1",
            useDualStack: false,
            useFIPS: false
        )
        let resolver = try DefaultEndpointResolver()

        let actual = try resolver.resolve(params: endpointParams)

        let properties: [String: AnyHashable] =
            [
                "authSchemes": [
                    [
                        "signingRegion": "af-south-1",
                        "name": "sigv4",
                        "signingName": "s3",
                        "disableDoubleEncoding": true
                    ] as [String: AnyHashable]
                ] as [AnyHashable]
            ]

        let headers = Headers()
        let expected = try ClientRuntime.Endpoint(urlString: "https://s3.af-south-1.amazonaws.com/99a_b", headers: headers, properties: properties)

        XCTAssertEqual(expected, actual)
    }

    /// virtual addressing + private link@us-west-2
    func testResolve119() throws {
        let endpointParams = EndpointParams(
            accelerate: false,
            bucket: "bucket-name",
            endpoint: "http://control.vpce-1a2b3c4d-5e6f.s3.us-west-2.vpce.amazonaws.com",
            forcePathStyle: false,
            region: "us-west-2",
            useDualStack: false,
            useFIPS: false
        )
        let resolver = try DefaultEndpointResolver()

        let actual = try resolver.resolve(params: endpointParams)

        let properties: [String: AnyHashable] =
            [
                "authSchemes": [
                    [
                        "signingRegion": "us-west-2",
                        "name": "sigv4",
                        "signingName": "s3",
                        "disableDoubleEncoding": true
                    ] as [String: AnyHashable]
                ] as [AnyHashable]
            ]

        let headers = Headers()
        let expected = try ClientRuntime.Endpoint(urlString: "http://bucket-name.control.vpce-1a2b3c4d-5e6f.s3.us-west-2.vpce.amazonaws.com", headers: headers, properties: properties)

        XCTAssertEqual(expected, actual)
    }

    /// path style + private link@us-west-2
    func testResolve120() throws {
        let endpointParams = EndpointParams(
            accelerate: false,
            bucket: "bucket-name",
            endpoint: "https://control.vpce-1a2b3c4d-5e6f.s3.us-west-2.vpce.amazonaws.com",
            forcePathStyle: true,
            region: "us-west-2",
            useDualStack: false,
            useFIPS: false
        )
        let resolver = try DefaultEndpointResolver()

        let actual = try resolver.resolve(params: endpointParams)

        let properties: [String: AnyHashable] =
            [
                "authSchemes": [
                    [
                        "signingRegion": "us-west-2",
                        "name": "sigv4",
                        "signingName": "s3",
                        "disableDoubleEncoding": true
                    ] as [String: AnyHashable]
                ] as [AnyHashable]
            ]

        let headers = Headers()
        let expected = try ClientRuntime.Endpoint(urlString: "https://control.vpce-1a2b3c4d-5e6f.s3.us-west-2.vpce.amazonaws.com/bucket-name", headers: headers, properties: properties)

        XCTAssertEqual(expected, actual)
    }

    /// SDK::Host + FIPS@us-west-2
    func testResolve121() throws {
        let endpointParams = EndpointParams(
            accelerate: false,
            bucket: "bucket-name",
            endpoint: "https://control.vpce-1a2b3c4d-5e6f.s3.us-west-2.vpce.amazonaws.com",
            forcePathStyle: false,
            region: "us-west-2",
            useDualStack: false,
            useFIPS: true
        )
        let resolver = try DefaultEndpointResolver()

        XCTAssertThrowsError(try resolver.resolve(params: endpointParams)) { error in
            switch error {
            case EndpointError.unresolved(let message):
                XCTAssertEqual("Host override cannot be combined with Dualstack, FIPS, or S3 Accelerate", message)
            default:
                XCTFail()
            }
        }
    }

    /// SDK::Host + DualStack@us-west-2
    func testResolve122() throws {
        let endpointParams = EndpointParams(
            accelerate: false,
            bucket: "bucket-name",
            endpoint: "https://control.vpce-1a2b3c4d-5e6f.s3.us-west-2.vpce.amazonaws.com",
            forcePathStyle: false,
            region: "us-west-2",
            useDualStack: true,
            useFIPS: false
        )
        let resolver = try DefaultEndpointResolver()

        XCTAssertThrowsError(try resolver.resolve(params: endpointParams)) { error in
            switch error {
            case EndpointError.unresolved(let message):
                XCTAssertEqual("Host override cannot be combined with Dualstack, FIPS, or S3 Accelerate", message)
            default:
                XCTFail()
            }
        }
    }

    /// SDK::HOST + accelerate@us-west-2
    func testResolve123() throws {
        let endpointParams = EndpointParams(
            accelerate: true,
            bucket: "bucket-name",
            endpoint: "http://control.vpce-1a2b3c4d-5e6f.s3.us-west-2.vpce.amazonaws.com",
            forcePathStyle: false,
            region: "us-west-2",
            useDualStack: false,
            useFIPS: false
        )
        let resolver = try DefaultEndpointResolver()

        XCTAssertThrowsError(try resolver.resolve(params: endpointParams)) { error in
            switch error {
            case EndpointError.unresolved(let message):
                XCTAssertEqual("Host override cannot be combined with Dualstack, FIPS, or S3 Accelerate", message)
            default:
                XCTFail()
            }
        }
    }

    /// SDK::Host + access point ARN@us-west-2
    func testResolve124() throws {
        let endpointParams = EndpointParams(
            accelerate: false,
            bucket: "arn:aws:s3:us-west-2:123456789012:accesspoint:myendpoint",
            endpoint: "https://beta.example.com",
            forcePathStyle: false,
            region: "us-west-2",
            useDualStack: false,
            useFIPS: false
        )
        let resolver = try DefaultEndpointResolver()

        let actual = try resolver.resolve(params: endpointParams)

        let properties: [String: AnyHashable] =
            [
                "authSchemes": [
                    [
                        "signingRegion": "us-west-2",
                        "name": "sigv4",
                        "signingName": "s3",
                        "disableDoubleEncoding": true
                    ] as [String: AnyHashable]
                ] as [AnyHashable]
            ]

        let headers = Headers()
        let expected = try ClientRuntime.Endpoint(urlString: "https://myendpoint-123456789012.beta.example.com", headers: headers, properties: properties)

        XCTAssertEqual(expected, actual)
    }

    /// virtual addressing + private link@cn-north-1
    func testResolve125() throws {
        let endpointParams = EndpointParams(
            accelerate: false,
            bucket: "bucket-name",
            endpoint: "https://control.vpce-1a2b3c4d-5e6f.s3.us-west-2.vpce.amazonaws.com",
            forcePathStyle: false,
            region: "cn-north-1",
            useDualStack: false,
            useFIPS: false
        )
        let resolver = try DefaultEndpointResolver()

        let actual = try resolver.resolve(params: endpointParams)

        let properties: [String: AnyHashable] =
            [
                "authSchemes": [
                    [
                        "signingRegion": "cn-north-1",
                        "name": "sigv4",
                        "signingName": "s3",
                        "disableDoubleEncoding": true
                    ] as [String: AnyHashable]
                ] as [AnyHashable]
            ]

        let headers = Headers()
        let expected = try ClientRuntime.Endpoint(urlString: "https://bucket-name.control.vpce-1a2b3c4d-5e6f.s3.us-west-2.vpce.amazonaws.com", headers: headers, properties: properties)

        XCTAssertEqual(expected, actual)
    }

    /// path style + private link@cn-north-1
    func testResolve126() throws {
        let endpointParams = EndpointParams(
            accelerate: false,
            bucket: "bucket-name",
            endpoint: "https://control.vpce-1a2b3c4d-5e6f.s3.us-west-2.vpce.amazonaws.com",
            forcePathStyle: true,
            region: "cn-north-1",
            useDualStack: false,
            useFIPS: false
        )
        let resolver = try DefaultEndpointResolver()

        let actual = try resolver.resolve(params: endpointParams)

        let properties: [String: AnyHashable] =
            [
                "authSchemes": [
                    [
                        "signingRegion": "cn-north-1",
                        "name": "sigv4",
                        "signingName": "s3",
                        "disableDoubleEncoding": true
                    ] as [String: AnyHashable]
                ] as [AnyHashable]
            ]

        let headers = Headers()
        let expected = try ClientRuntime.Endpoint(urlString: "https://control.vpce-1a2b3c4d-5e6f.s3.us-west-2.vpce.amazonaws.com/bucket-name", headers: headers, properties: properties)

        XCTAssertEqual(expected, actual)
    }

    /// SDK::Host + FIPS@cn-north-1
    func testResolve127() throws {
        let endpointParams = EndpointParams(
            accelerate: false,
            bucket: "bucket-name",
            endpoint: "https://control.vpce-1a2b3c4d-5e6f.s3.us-west-2.vpce.amazonaws.com",
            forcePathStyle: false,
            region: "cn-north-1",
            useDualStack: false,
            useFIPS: true
        )
        let resolver = try DefaultEndpointResolver()

        XCTAssertThrowsError(try resolver.resolve(params: endpointParams)) { error in
            switch error {
            case EndpointError.unresolved(let message):
                XCTAssertEqual("Partition does not support FIPS", message)
            default:
                XCTFail()
            }
        }
    }

    /// SDK::Host + DualStack@cn-north-1
    func testResolve128() throws {
        let endpointParams = EndpointParams(
            accelerate: false,
            bucket: "bucket-name",
            endpoint: "https://control.vpce-1a2b3c4d-5e6f.s3.us-west-2.vpce.amazonaws.com",
            forcePathStyle: false,
            region: "cn-north-1",
            useDualStack: true,
            useFIPS: false
        )
        let resolver = try DefaultEndpointResolver()

        XCTAssertThrowsError(try resolver.resolve(params: endpointParams)) { error in
            switch error {
            case EndpointError.unresolved(let message):
                XCTAssertEqual("Host override cannot be combined with Dualstack, FIPS, or S3 Accelerate", message)
            default:
                XCTFail()
            }
        }
    }

    /// SDK::HOST + accelerate@cn-north-1
    func testResolve129() throws {
        let endpointParams = EndpointParams(
            accelerate: true,
            bucket: "bucket-name",
            endpoint: "https://control.vpce-1a2b3c4d-5e6f.s3.us-west-2.vpce.amazonaws.com",
            forcePathStyle: false,
            region: "cn-north-1",
            useDualStack: false,
            useFIPS: false
        )
        let resolver = try DefaultEndpointResolver()

        XCTAssertThrowsError(try resolver.resolve(params: endpointParams)) { error in
            switch error {
            case EndpointError.unresolved(let message):
                XCTAssertEqual("S3 Accelerate cannot be used in this region", message)
            default:
                XCTFail()
            }
        }
    }

    /// SDK::Host + access point ARN@cn-north-1
    func testResolve130() throws {
        let endpointParams = EndpointParams(
            accelerate: false,
            bucket: "arn:aws-cn:s3:cn-north-1:123456789012:accesspoint:myendpoint",
            endpoint: "https://beta.example.com",
            forcePathStyle: false,
            region: "cn-north-1",
            useDualStack: false,
            useFIPS: false
        )
        let resolver = try DefaultEndpointResolver()

        let actual = try resolver.resolve(params: endpointParams)

        let properties: [String: AnyHashable] =
            [
                "authSchemes": [
                    [
                        "signingRegion": "cn-north-1",
                        "name": "sigv4",
                        "signingName": "s3",
                        "disableDoubleEncoding": true
                    ] as [String: AnyHashable]
                ] as [AnyHashable]
            ]

        let headers = Headers()
        let expected = try ClientRuntime.Endpoint(urlString: "https://myendpoint-123456789012.beta.example.com", headers: headers, properties: properties)

        XCTAssertEqual(expected, actual)
    }

    /// virtual addressing + private link@af-south-1
    func testResolve131() throws {
        let endpointParams = EndpointParams(
            accelerate: false,
            bucket: "bucket-name",
            endpoint: "https://control.vpce-1a2b3c4d-5e6f.s3.us-west-2.vpce.amazonaws.com",
            forcePathStyle: false,
            region: "af-south-1",
            useDualStack: false,
            useFIPS: false
        )
        let resolver = try DefaultEndpointResolver()

        let actual = try resolver.resolve(params: endpointParams)

        let properties: [String: AnyHashable] =
            [
                "authSchemes": [
                    [
                        "signingRegion": "af-south-1",
                        "name": "sigv4",
                        "signingName": "s3",
                        "disableDoubleEncoding": true
                    ] as [String: AnyHashable]
                ] as [AnyHashable]
            ]

        let headers = Headers()
        let expected = try ClientRuntime.Endpoint(urlString: "https://bucket-name.control.vpce-1a2b3c4d-5e6f.s3.us-west-2.vpce.amazonaws.com", headers: headers, properties: properties)

        XCTAssertEqual(expected, actual)
    }

    /// path style + private link@af-south-1
    func testResolve132() throws {
        let endpointParams = EndpointParams(
            accelerate: false,
            bucket: "bucket-name",
            endpoint: "https://control.vpce-1a2b3c4d-5e6f.s3.us-west-2.vpce.amazonaws.com",
            forcePathStyle: true,
            region: "af-south-1",
            useDualStack: false,
            useFIPS: false
        )
        let resolver = try DefaultEndpointResolver()

        let actual = try resolver.resolve(params: endpointParams)

        let properties: [String: AnyHashable] =
            [
                "authSchemes": [
                    [
                        "signingRegion": "af-south-1",
                        "name": "sigv4",
                        "signingName": "s3",
                        "disableDoubleEncoding": true
                    ] as [String: AnyHashable]
                ] as [AnyHashable]
            ]

        let headers = Headers()
        let expected = try ClientRuntime.Endpoint(urlString: "https://control.vpce-1a2b3c4d-5e6f.s3.us-west-2.vpce.amazonaws.com/bucket-name", headers: headers, properties: properties)

        XCTAssertEqual(expected, actual)
    }

    /// SDK::Host + FIPS@af-south-1
    func testResolve133() throws {
        let endpointParams = EndpointParams(
            accelerate: false,
            bucket: "bucket-name",
            endpoint: "https://control.vpce-1a2b3c4d-5e6f.s3.us-west-2.vpce.amazonaws.com",
            forcePathStyle: false,
            region: "af-south-1",
            useDualStack: false,
            useFIPS: true
        )
        let resolver = try DefaultEndpointResolver()

        XCTAssertThrowsError(try resolver.resolve(params: endpointParams)) { error in
            switch error {
            case EndpointError.unresolved(let message):
                XCTAssertEqual("Host override cannot be combined with Dualstack, FIPS, or S3 Accelerate", message)
            default:
                XCTFail()
            }
        }
    }

    /// SDK::Host + DualStack@af-south-1
    func testResolve134() throws {
        let endpointParams = EndpointParams(
            accelerate: false,
            bucket: "bucket-name",
            endpoint: "https://control.vpce-1a2b3c4d-5e6f.s3.us-west-2.vpce.amazonaws.com",
            forcePathStyle: false,
            region: "af-south-1",
            useDualStack: true,
            useFIPS: false
        )
        let resolver = try DefaultEndpointResolver()

        XCTAssertThrowsError(try resolver.resolve(params: endpointParams)) { error in
            switch error {
            case EndpointError.unresolved(let message):
                XCTAssertEqual("Host override cannot be combined with Dualstack, FIPS, or S3 Accelerate", message)
            default:
                XCTFail()
            }
        }
    }

    /// SDK::HOST + accelerate@af-south-1
    func testResolve135() throws {
        let endpointParams = EndpointParams(
            accelerate: true,
            bucket: "bucket-name",
            endpoint: "https://control.vpce-1a2b3c4d-5e6f.s3.us-west-2.vpce.amazonaws.com",
            forcePathStyle: false,
            region: "af-south-1",
            useDualStack: false,
            useFIPS: false
        )
        let resolver = try DefaultEndpointResolver()

        XCTAssertThrowsError(try resolver.resolve(params: endpointParams)) { error in
            switch error {
            case EndpointError.unresolved(let message):
                XCTAssertEqual("Host override cannot be combined with Dualstack, FIPS, or S3 Accelerate", message)
            default:
                XCTFail()
            }
        }
    }

    /// SDK::Host + access point ARN@af-south-1
    func testResolve136() throws {
        let endpointParams = EndpointParams(
            accelerate: false,
            bucket: "arn:aws:s3:af-south-1:123456789012:accesspoint:myendpoint",
            endpoint: "https://beta.example.com",
            forcePathStyle: false,
            region: "af-south-1",
            useDualStack: false,
            useFIPS: false
        )
        let resolver = try DefaultEndpointResolver()

        let actual = try resolver.resolve(params: endpointParams)

        let properties: [String: AnyHashable] =
            [
                "authSchemes": [
                    [
                        "signingRegion": "af-south-1",
                        "name": "sigv4",
                        "signingName": "s3",
                        "disableDoubleEncoding": true
                    ] as [String: AnyHashable]
                ] as [AnyHashable]
            ]

        let headers = Headers()
        let expected = try ClientRuntime.Endpoint(urlString: "https://myendpoint-123456789012.beta.example.com", headers: headers, properties: properties)

        XCTAssertEqual(expected, actual)
    }

    /// vanilla access point arn@us-west-2
    func testResolve137() throws {
        let endpointParams = EndpointParams(
            accelerate: false,
            bucket: "arn:aws:s3:us-west-2:123456789012:accesspoint:myendpoint",
            forcePathStyle: false,
            region: "us-west-2",
            useDualStack: false,
            useFIPS: false
        )
        let resolver = try DefaultEndpointResolver()

        let actual = try resolver.resolve(params: endpointParams)

        let properties: [String: AnyHashable] =
            [
                "authSchemes": [
                    [
                        "signingRegion": "us-west-2",
                        "name": "sigv4",
                        "signingName": "s3",
                        "disableDoubleEncoding": true
                    ] as [String: AnyHashable]
                ] as [AnyHashable]
            ]

        let headers = Headers()
        let expected = try ClientRuntime.Endpoint(urlString: "https://myendpoint-123456789012.s3-accesspoint.us-west-2.amazonaws.com", headers: headers, properties: properties)

        XCTAssertEqual(expected, actual)
    }

    /// access point arn + FIPS@us-west-2
    func testResolve138() throws {
        let endpointParams = EndpointParams(
            accelerate: false,
            bucket: "arn:aws:s3:us-west-2:123456789012:accesspoint:myendpoint",
            forcePathStyle: false,
            region: "us-west-2",
            useDualStack: false,
            useFIPS: true
        )
        let resolver = try DefaultEndpointResolver()

        let actual = try resolver.resolve(params: endpointParams)

        let properties: [String: AnyHashable] =
            [
                "authSchemes": [
                    [
                        "signingRegion": "us-west-2",
                        "name": "sigv4",
                        "signingName": "s3",
                        "disableDoubleEncoding": true
                    ] as [String: AnyHashable]
                ] as [AnyHashable]
            ]

        let headers = Headers()
        let expected = try ClientRuntime.Endpoint(urlString: "https://myendpoint-123456789012.s3-accesspoint-fips.us-west-2.amazonaws.com", headers: headers, properties: properties)

        XCTAssertEqual(expected, actual)
    }

    /// access point arn + accelerate = error@us-west-2
    func testResolve139() throws {
        let endpointParams = EndpointParams(
            accelerate: true,
            bucket: "arn:aws:s3:us-west-2:123456789012:accesspoint:myendpoint",
            forcePathStyle: false,
            region: "us-west-2",
            useDualStack: false,
            useFIPS: false
        )
        let resolver = try DefaultEndpointResolver()

        XCTAssertThrowsError(try resolver.resolve(params: endpointParams)) { error in
            switch error {
            case EndpointError.unresolved(let message):
                XCTAssertEqual("Access Points do not support S3 Accelerate", message)
            default:
                XCTFail()
            }
        }
    }

    /// access point arn + FIPS + DualStack@us-west-2
    func testResolve140() throws {
        let endpointParams = EndpointParams(
            accelerate: false,
            bucket: "arn:aws:s3:us-west-2:123456789012:accesspoint:myendpoint",
            forcePathStyle: false,
            region: "us-west-2",
            useDualStack: true,
            useFIPS: true
        )
        let resolver = try DefaultEndpointResolver()

        let actual = try resolver.resolve(params: endpointParams)

        let properties: [String: AnyHashable] =
            [
                "authSchemes": [
                    [
                        "signingRegion": "us-west-2",
                        "name": "sigv4",
                        "signingName": "s3",
                        "disableDoubleEncoding": true
                    ] as [String: AnyHashable]
                ] as [AnyHashable]
            ]

        let headers = Headers()
        let expected = try ClientRuntime.Endpoint(urlString: "https://myendpoint-123456789012.s3-accesspoint-fips.dualstack.us-west-2.amazonaws.com", headers: headers, properties: properties)

        XCTAssertEqual(expected, actual)
    }

    /// vanilla access point arn@cn-north-1
    func testResolve141() throws {
        let endpointParams = EndpointParams(
            accelerate: false,
            bucket: "arn:aws-cn:s3:cn-north-1:123456789012:accesspoint:myendpoint",
            forcePathStyle: false,
            region: "cn-north-1",
            useDualStack: false,
            useFIPS: false
        )
        let resolver = try DefaultEndpointResolver()

        let actual = try resolver.resolve(params: endpointParams)

        let properties: [String: AnyHashable] =
            [
                "authSchemes": [
                    [
                        "signingRegion": "cn-north-1",
                        "name": "sigv4",
                        "signingName": "s3",
                        "disableDoubleEncoding": true
                    ] as [String: AnyHashable]
                ] as [AnyHashable]
            ]

        let headers = Headers()
        let expected = try ClientRuntime.Endpoint(urlString: "https://myendpoint-123456789012.s3-accesspoint.cn-north-1.amazonaws.com.cn", headers: headers, properties: properties)

        XCTAssertEqual(expected, actual)
    }

    /// access point arn + FIPS@cn-north-1
    func testResolve142() throws {
        let endpointParams = EndpointParams(
            accelerate: false,
            bucket: "arn:aws-cn:s3:cn-north-1:123456789012:accesspoint:myendpoint",
            forcePathStyle: false,
            region: "cn-north-1",
            useDualStack: false,
            useFIPS: true
        )
        let resolver = try DefaultEndpointResolver()

        XCTAssertThrowsError(try resolver.resolve(params: endpointParams)) { error in
            switch error {
            case EndpointError.unresolved(let message):
                XCTAssertEqual("Partition does not support FIPS", message)
            default:
                XCTFail()
            }
        }
    }

    /// access point arn + accelerate = error@cn-north-1
    func testResolve143() throws {
        let endpointParams = EndpointParams(
            accelerate: true,
            bucket: "arn:aws-cn:s3:cn-north-1:123456789012:accesspoint:myendpoint",
            forcePathStyle: false,
            region: "cn-north-1",
            useDualStack: false,
            useFIPS: false
        )
        let resolver = try DefaultEndpointResolver()

        XCTAssertThrowsError(try resolver.resolve(params: endpointParams)) { error in
            switch error {
            case EndpointError.unresolved(let message):
                XCTAssertEqual("Access Points do not support S3 Accelerate", message)
            default:
                XCTFail()
            }
        }
    }

    /// access point arn + FIPS + DualStack@cn-north-1
    func testResolve144() throws {
        let endpointParams = EndpointParams(
            accelerate: false,
            bucket: "arn:aws-cn:s3:cn-north-1:123456789012:accesspoint:myendpoint",
            forcePathStyle: false,
            region: "cn-north-1",
            useDualStack: true,
            useFIPS: true
        )
        let resolver = try DefaultEndpointResolver()

        XCTAssertThrowsError(try resolver.resolve(params: endpointParams)) { error in
            switch error {
            case EndpointError.unresolved(let message):
                XCTAssertEqual("Partition does not support FIPS", message)
            default:
                XCTFail()
            }
        }
    }

    /// vanilla access point arn@af-south-1
    func testResolve145() throws {
        let endpointParams = EndpointParams(
            accelerate: false,
            bucket: "arn:aws:s3:af-south-1:123456789012:accesspoint:myendpoint",
            forcePathStyle: false,
            region: "af-south-1",
            useDualStack: false,
            useFIPS: false
        )
        let resolver = try DefaultEndpointResolver()

        let actual = try resolver.resolve(params: endpointParams)

        let properties: [String: AnyHashable] =
            [
                "authSchemes": [
                    [
                        "signingRegion": "af-south-1",
                        "name": "sigv4",
                        "signingName": "s3",
                        "disableDoubleEncoding": true
                    ] as [String: AnyHashable]
                ] as [AnyHashable]
            ]

        let headers = Headers()
        let expected = try ClientRuntime.Endpoint(urlString: "https://myendpoint-123456789012.s3-accesspoint.af-south-1.amazonaws.com", headers: headers, properties: properties)

        XCTAssertEqual(expected, actual)
    }

    /// access point arn + FIPS@af-south-1
    func testResolve146() throws {
        let endpointParams = EndpointParams(
            accelerate: false,
            bucket: "arn:aws:s3:af-south-1:123456789012:accesspoint:myendpoint",
            forcePathStyle: false,
            region: "af-south-1",
            useDualStack: false,
            useFIPS: true
        )
        let resolver = try DefaultEndpointResolver()

        let actual = try resolver.resolve(params: endpointParams)

        let properties: [String: AnyHashable] =
            [
                "authSchemes": [
                    [
                        "signingRegion": "af-south-1",
                        "name": "sigv4",
                        "signingName": "s3",
                        "disableDoubleEncoding": true
                    ] as [String: AnyHashable]
                ] as [AnyHashable]
            ]

        let headers = Headers()
        let expected = try ClientRuntime.Endpoint(urlString: "https://myendpoint-123456789012.s3-accesspoint-fips.af-south-1.amazonaws.com", headers: headers, properties: properties)

        XCTAssertEqual(expected, actual)
    }

    /// access point arn + accelerate = error@af-south-1
    func testResolve147() throws {
        let endpointParams = EndpointParams(
            accelerate: true,
            bucket: "arn:aws:s3:af-south-1:123456789012:accesspoint:myendpoint",
            forcePathStyle: false,
            region: "af-south-1",
            useDualStack: false,
            useFIPS: false
        )
        let resolver = try DefaultEndpointResolver()

        XCTAssertThrowsError(try resolver.resolve(params: endpointParams)) { error in
            switch error {
            case EndpointError.unresolved(let message):
                XCTAssertEqual("Access Points do not support S3 Accelerate", message)
            default:
                XCTFail()
            }
        }
    }

    /// access point arn + FIPS + DualStack@af-south-1
    func testResolve148() throws {
        let endpointParams = EndpointParams(
            accelerate: false,
            bucket: "arn:aws:s3:af-south-1:123456789012:accesspoint:myendpoint",
            forcePathStyle: false,
            region: "af-south-1",
            useDualStack: true,
            useFIPS: true
        )
        let resolver = try DefaultEndpointResolver()

        let actual = try resolver.resolve(params: endpointParams)

        let properties: [String: AnyHashable] =
            [
                "authSchemes": [
                    [
                        "signingRegion": "af-south-1",
                        "name": "sigv4",
                        "signingName": "s3",
                        "disableDoubleEncoding": true
                    ] as [String: AnyHashable]
                ] as [AnyHashable]
            ]

        let headers = Headers()
        let expected = try ClientRuntime.Endpoint(urlString: "https://myendpoint-123456789012.s3-accesspoint-fips.dualstack.af-south-1.amazonaws.com", headers: headers, properties: properties)

        XCTAssertEqual(expected, actual)
    }

    /// S3 outposts vanilla test
    func testResolve149() throws {
        let endpointParams = EndpointParams(
            accelerate: false,
            bucket: "arn:aws:s3-outposts:us-west-2:123456789012:outpost/op-01234567890123456/accesspoint/reports",
            region: "us-west-2",
            useDualStack: false,
            useFIPS: false
        )
        let resolver = try DefaultEndpointResolver()

        let actual = try resolver.resolve(params: endpointParams)

        let properties: [String: AnyHashable] =
            [
                "authSchemes": [
                    [
                        "signingRegion": "us-west-2",
                        "name": "sigv4",
                        "signingName": "s3-outposts",
                        "disableDoubleEncoding": true
                    ] as [String: AnyHashable]
                ] as [AnyHashable]
            ]

        let headers = Headers()
        let expected = try ClientRuntime.Endpoint(urlString: "https://reports-123456789012.op-01234567890123456.s3-outposts.us-west-2.amazonaws.com", headers: headers, properties: properties)

        XCTAssertEqual(expected, actual)
    }

    /// S3 outposts custom endpoint
    func testResolve150() throws {
        let endpointParams = EndpointParams(
            accelerate: false,
            bucket: "arn:aws:s3-outposts:us-west-2:123456789012:outpost/op-01234567890123456/accesspoint/reports",
            endpoint: "https://example.amazonaws.com",
            region: "us-west-2",
            useDualStack: false,
            useFIPS: false
        )
        let resolver = try DefaultEndpointResolver()

        let actual = try resolver.resolve(params: endpointParams)

        let properties: [String: AnyHashable] =
            [
                "authSchemes": [
                    [
                        "signingRegion": "us-west-2",
                        "name": "sigv4",
                        "signingName": "s3-outposts",
                        "disableDoubleEncoding": true
                    ] as [String: AnyHashable]
                ] as [AnyHashable]
            ]

        let headers = Headers()
        let expected = try ClientRuntime.Endpoint(urlString: "https://reports-123456789012.op-01234567890123456.example.amazonaws.com", headers: headers, properties: properties)

        XCTAssertEqual(expected, actual)
    }

    /// outposts arn with region mismatch and UseArnRegion=false
    func testResolve151() throws {
        let endpointParams = EndpointParams(
            accelerate: false,
            bucket: "arn:aws:s3-outposts:us-east-1:123456789012:outpost:op-01234567890123456:accesspoint:myaccesspoint",
            forcePathStyle: false,
            region: "us-west-2",
            useArnRegion: false,
            useDualStack: false,
            useFIPS: false
        )
        let resolver = try DefaultEndpointResolver()

        XCTAssertThrowsError(try resolver.resolve(params: endpointParams)) { error in
            switch error {
            case EndpointError.unresolved(let message):
                XCTAssertEqual("Invalid configuration: region from ARN `us-east-1` does not match client region `us-west-2` and UseArnRegion is `false`", message)
            default:
                XCTFail()
            }
        }
    }

    /// outposts arn with region mismatch, custom region and UseArnRegion=false
    func testResolve152() throws {
        let endpointParams = EndpointParams(
            accelerate: false,
            bucket: "arn:aws:s3-outposts:us-east-1:123456789012:outpost:op-01234567890123456:accesspoint:myaccesspoint",
            endpoint: "https://example.com",
            forcePathStyle: false,
            region: "us-west-2",
            useArnRegion: false,
            useDualStack: false,
            useFIPS: false
        )
        let resolver = try DefaultEndpointResolver()

        XCTAssertThrowsError(try resolver.resolve(params: endpointParams)) { error in
            switch error {
            case EndpointError.unresolved(let message):
                XCTAssertEqual("Invalid configuration: region from ARN `us-east-1` does not match client region `us-west-2` and UseArnRegion is `false`", message)
            default:
                XCTFail()
            }
        }
    }

    /// outposts arn with region mismatch and UseArnRegion=true
    func testResolve153() throws {
        let endpointParams = EndpointParams(
            accelerate: false,
            bucket: "arn:aws:s3-outposts:us-east-1:123456789012:outpost:op-01234567890123456:accesspoint:myaccesspoint",
            forcePathStyle: false,
            region: "us-west-2",
            useArnRegion: true,
            useDualStack: false,
            useFIPS: false
        )
        let resolver = try DefaultEndpointResolver()

        let actual = try resolver.resolve(params: endpointParams)

        let properties: [String: AnyHashable] =
            [
                "authSchemes": [
                    [
                        "signingRegion": "us-east-1",
                        "name": "sigv4",
                        "signingName": "s3-outposts",
                        "disableDoubleEncoding": true
                    ] as [String: AnyHashable]
                ] as [AnyHashable]
            ]

        let headers = Headers()
        let expected = try ClientRuntime.Endpoint(urlString: "https://myaccesspoint-123456789012.op-01234567890123456.s3-outposts.us-east-1.amazonaws.com", headers: headers, properties: properties)

        XCTAssertEqual(expected, actual)
    }

    /// outposts arn with region mismatch and UseArnRegion unset
    func testResolve154() throws {
        let endpointParams = EndpointParams(
            accelerate: false,
            bucket: "arn:aws:s3-outposts:us-east-1:123456789012:outpost:op-01234567890123456:accesspoint:myaccesspoint",
            forcePathStyle: false,
            region: "us-west-2",
            useDualStack: false,
            useFIPS: false
        )
        let resolver = try DefaultEndpointResolver()

        let actual = try resolver.resolve(params: endpointParams)

        let properties: [String: AnyHashable] =
            [
                "authSchemes": [
                    [
                        "signingRegion": "us-east-1",
                        "name": "sigv4",
                        "signingName": "s3-outposts",
                        "disableDoubleEncoding": true
                    ] as [String: AnyHashable]
                ] as [AnyHashable]
            ]

        let headers = Headers()
        let expected = try ClientRuntime.Endpoint(urlString: "https://myaccesspoint-123456789012.op-01234567890123456.s3-outposts.us-east-1.amazonaws.com", headers: headers, properties: properties)

        XCTAssertEqual(expected, actual)
    }

    /// outposts arn with partition mismatch and UseArnRegion=true
    func testResolve155() throws {
        let endpointParams = EndpointParams(
            accelerate: false,
            bucket: "arn:aws:s3-outposts:cn-north-1:123456789012:outpost:op-01234567890123456:accesspoint:myaccesspoint",
            forcePathStyle: false,
            region: "us-west-2",
            useArnRegion: true,
            useDualStack: false,
            useFIPS: false
        )
        let resolver = try DefaultEndpointResolver()

        XCTAssertThrowsError(try resolver.resolve(params: endpointParams)) { error in
            switch error {
            case EndpointError.unresolved(let message):
                XCTAssertEqual("Client was configured for partition `aws` but ARN (`arn:aws:s3-outposts:cn-north-1:123456789012:outpost:op-01234567890123456:accesspoint:myaccesspoint`) has `aws-cn`", message)
            default:
                XCTFail()
            }
        }
    }

    /// ARN with UseGlobalEndpoint and use-east-1 region uses the regional endpoint
    func testResolve156() throws {
        let endpointParams = EndpointParams(
            accelerate: false,
            bucket: "arn:aws:s3-outposts:us-east-1:123456789012:outpost/op-01234567890123456/accesspoint/reports",
            region: "us-east-1",
            useDualStack: false,
            useFIPS: false,
            useGlobalEndpoint: true
        )
        let resolver = try DefaultEndpointResolver()

        let actual = try resolver.resolve(params: endpointParams)

        let properties: [String: AnyHashable] =
            [
                "authSchemes": [
                    [
                        "signingRegion": "us-east-1",
                        "name": "sigv4",
                        "signingName": "s3-outposts",
                        "disableDoubleEncoding": true
                    ] as [String: AnyHashable]
                ] as [AnyHashable]
            ]

        let headers = Headers()
        let expected = try ClientRuntime.Endpoint(urlString: "https://reports-123456789012.op-01234567890123456.s3-outposts.us-east-1.amazonaws.com", headers: headers, properties: properties)

        XCTAssertEqual(expected, actual)
    }

    /// S3 outposts does not support dualstack
    func testResolve157() throws {
        let endpointParams = EndpointParams(
            accelerate: false,
            bucket: "arn:aws:s3-outposts:us-west-2:123456789012:outpost/op-01234567890123456/accesspoint/reports",
            region: "us-east-1",
            useDualStack: true,
            useFIPS: false
        )
        let resolver = try DefaultEndpointResolver()

        XCTAssertThrowsError(try resolver.resolve(params: endpointParams)) { error in
            switch error {
            case EndpointError.unresolved(let message):
                XCTAssertEqual("S3 Outposts does not support Dual-stack", message)
            default:
                XCTFail()
            }
        }
    }

    /// S3 outposts does not support fips
    func testResolve158() throws {
        let endpointParams = EndpointParams(
            accelerate: false,
            bucket: "arn:aws:s3-outposts:us-west-2:123456789012:outpost/op-01234567890123456/accesspoint/reports",
            region: "us-east-1",
            useDualStack: false,
            useFIPS: true
        )
        let resolver = try DefaultEndpointResolver()

        XCTAssertThrowsError(try resolver.resolve(params: endpointParams)) { error in
            switch error {
            case EndpointError.unresolved(let message):
                XCTAssertEqual("S3 Outposts does not support FIPS", message)
            default:
                XCTFail()
            }
        }
    }

    /// S3 outposts does not support accelerate
    func testResolve159() throws {
        let endpointParams = EndpointParams(
            accelerate: true,
            bucket: "arn:aws:s3-outposts:us-west-2:123456789012:outpost/op-01234567890123456/accesspoint/reports",
            region: "us-east-1",
            useDualStack: false,
            useFIPS: false
        )
        let resolver = try DefaultEndpointResolver()

        XCTAssertThrowsError(try resolver.resolve(params: endpointParams)) { error in
            switch error {
            case EndpointError.unresolved(let message):
                XCTAssertEqual("S3 Outposts does not support S3 Accelerate", message)
            default:
                XCTFail()
            }
        }
    }

    /// validates against subresource
    func testResolve160() throws {
        let endpointParams = EndpointParams(
            accelerate: false,
            bucket: "arn:aws:s3-outposts:us-west-2:123456789012:outpost:op-01234567890123456:accesspoint:mybucket:object:foo",
            region: "us-west-2",
            useDualStack: false,
            useFIPS: false
        )
        let resolver = try DefaultEndpointResolver()

        XCTAssertThrowsError(try resolver.resolve(params: endpointParams)) { error in
            switch error {
            case EndpointError.unresolved(let message):
                XCTAssertEqual("Invalid Arn: Outpost Access Point ARN contains sub resources", message)
            default:
                XCTFail()
            }
        }
    }

    /// object lambda @us-east-1
    func testResolve161() throws {
        let endpointParams = EndpointParams(
            accelerate: false,
            bucket: "arn:aws:s3-object-lambda:us-east-1:123456789012:accesspoint/mybanner",
            region: "us-east-1",
            useArnRegion: false,
            useDualStack: false,
            useFIPS: false
        )
        let resolver = try DefaultEndpointResolver()

        let actual = try resolver.resolve(params: endpointParams)

        let properties: [String: AnyHashable] =
            [
                "authSchemes": [
                    [
                        "signingRegion": "us-east-1",
                        "name": "sigv4",
                        "signingName": "s3-object-lambda",
                        "disableDoubleEncoding": true
                    ] as [String: AnyHashable]
                ] as [AnyHashable]
            ]

        let headers = Headers()
        let expected = try ClientRuntime.Endpoint(urlString: "https://mybanner-123456789012.s3-object-lambda.us-east-1.amazonaws.com", headers: headers, properties: properties)

        XCTAssertEqual(expected, actual)
    }

    /// object lambda @us-west-2
    func testResolve162() throws {
        let endpointParams = EndpointParams(
            accelerate: false,
            bucket: "arn:aws:s3-object-lambda:us-west-2:123456789012:accesspoint/mybanner",
            region: "us-west-2",
            useArnRegion: false,
            useDualStack: false,
            useFIPS: false
        )
        let resolver = try DefaultEndpointResolver()

        let actual = try resolver.resolve(params: endpointParams)

        let properties: [String: AnyHashable] =
            [
                "authSchemes": [
                    [
                        "signingRegion": "us-west-2",
                        "name": "sigv4",
                        "signingName": "s3-object-lambda",
                        "disableDoubleEncoding": true
                    ] as [String: AnyHashable]
                ] as [AnyHashable]
            ]

        let headers = Headers()
        let expected = try ClientRuntime.Endpoint(urlString: "https://mybanner-123456789012.s3-object-lambda.us-west-2.amazonaws.com", headers: headers, properties: properties)

        XCTAssertEqual(expected, actual)
    }

    /// object lambda, colon resource deliminator @us-west-2
    func testResolve163() throws {
        let endpointParams = EndpointParams(
            accelerate: false,
            bucket: "arn:aws:s3-object-lambda:us-west-2:123456789012:accesspoint:mybanner",
            region: "us-west-2",
            useArnRegion: false,
            useDualStack: false,
            useFIPS: false
        )
        let resolver = try DefaultEndpointResolver()

        let actual = try resolver.resolve(params: endpointParams)

        let properties: [String: AnyHashable] =
            [
                "authSchemes": [
                    [
                        "signingRegion": "us-west-2",
                        "name": "sigv4",
                        "signingName": "s3-object-lambda",
                        "disableDoubleEncoding": true
                    ] as [String: AnyHashable]
                ] as [AnyHashable]
            ]

        let headers = Headers()
        let expected = try ClientRuntime.Endpoint(urlString: "https://mybanner-123456789012.s3-object-lambda.us-west-2.amazonaws.com", headers: headers, properties: properties)

        XCTAssertEqual(expected, actual)
    }

    /// object lambda @us-east-1, client region us-west-2, useArnRegion=true
    func testResolve164() throws {
        let endpointParams = EndpointParams(
            accelerate: false,
            bucket: "arn:aws:s3-object-lambda:us-east-1:123456789012:accesspoint/mybanner",
            region: "us-west-2",
            useArnRegion: true,
            useDualStack: false,
            useFIPS: false
        )
        let resolver = try DefaultEndpointResolver()

        let actual = try resolver.resolve(params: endpointParams)

        let properties: [String: AnyHashable] =
            [
                "authSchemes": [
                    [
                        "signingRegion": "us-east-1",
                        "name": "sigv4",
                        "signingName": "s3-object-lambda",
                        "disableDoubleEncoding": true
                    ] as [String: AnyHashable]
                ] as [AnyHashable]
            ]

        let headers = Headers()
        let expected = try ClientRuntime.Endpoint(urlString: "https://mybanner-123456789012.s3-object-lambda.us-east-1.amazonaws.com", headers: headers, properties: properties)

        XCTAssertEqual(expected, actual)
    }

    /// object lambda @us-east-1, client region s3-external-1, useArnRegion=true
    func testResolve165() throws {
        let endpointParams = EndpointParams(
            accelerate: false,
            bucket: "arn:aws:s3-object-lambda:us-east-1:123456789012:accesspoint/mybanner",
            region: "s3-external-1",
            useArnRegion: true,
            useDualStack: false,
            useFIPS: false
        )
        let resolver = try DefaultEndpointResolver()

        let actual = try resolver.resolve(params: endpointParams)

        let properties: [String: AnyHashable] =
            [
                "authSchemes": [
                    [
                        "signingRegion": "us-east-1",
                        "name": "sigv4",
                        "signingName": "s3-object-lambda",
                        "disableDoubleEncoding": true
                    ] as [String: AnyHashable]
                ] as [AnyHashable]
            ]

        let headers = Headers()
        let expected = try ClientRuntime.Endpoint(urlString: "https://mybanner-123456789012.s3-object-lambda.us-east-1.amazonaws.com", headers: headers, properties: properties)

        XCTAssertEqual(expected, actual)
    }

    /// object lambda @us-east-1, client region s3-external-1, useArnRegion=false
    func testResolve166() throws {
        let endpointParams = EndpointParams(
            accelerate: false,
            bucket: "arn:aws:s3-object-lambda:us-east-1:123456789012:accesspoint/mybanner",
            region: "s3-external-1",
            useArnRegion: false,
            useDualStack: false,
            useFIPS: false
        )
        let resolver = try DefaultEndpointResolver()

        XCTAssertThrowsError(try resolver.resolve(params: endpointParams)) { error in
            switch error {
            case EndpointError.unresolved(let message):
                XCTAssertEqual("Invalid configuration: region from ARN `us-east-1` does not match client region `s3-external-1` and UseArnRegion is `false`", message)
            default:
                XCTFail()
            }
        }
    }

    /// object lambda @us-east-1, client region aws-global, useArnRegion=true
    func testResolve167() throws {
        let endpointParams = EndpointParams(
            accelerate: false,
            bucket: "arn:aws:s3-object-lambda:us-east-1:123456789012:accesspoint/mybanner",
            region: "aws-global",
            useArnRegion: true,
            useDualStack: false,
            useFIPS: false
        )
        let resolver = try DefaultEndpointResolver()

        let actual = try resolver.resolve(params: endpointParams)

        let properties: [String: AnyHashable] =
            [
                "authSchemes": [
                    [
                        "signingRegion": "us-east-1",
                        "name": "sigv4",
                        "signingName": "s3-object-lambda",
                        "disableDoubleEncoding": true
                    ] as [String: AnyHashable]
                ] as [AnyHashable]
            ]

        let headers = Headers()
        let expected = try ClientRuntime.Endpoint(urlString: "https://mybanner-123456789012.s3-object-lambda.us-east-1.amazonaws.com", headers: headers, properties: properties)

        XCTAssertEqual(expected, actual)
    }

    /// object lambda @us-east-1, client region aws-global, useArnRegion=false
    func testResolve168() throws {
        let endpointParams = EndpointParams(
            accelerate: false,
            bucket: "arn:aws:s3-object-lambda:us-east-1:123456789012:accesspoint/mybanner",
            region: "aws-global",
            useArnRegion: false,
            useDualStack: false,
            useFIPS: false
        )
        let resolver = try DefaultEndpointResolver()

        XCTAssertThrowsError(try resolver.resolve(params: endpointParams)) { error in
            switch error {
            case EndpointError.unresolved(let message):
                XCTAssertEqual("Invalid configuration: region from ARN `us-east-1` does not match client region `aws-global` and UseArnRegion is `false`", message)
            default:
                XCTFail()
            }
        }
    }

    /// object lambda @cn-north-1, client region us-west-2 (cross partition), useArnRegion=true
    func testResolve169() throws {
        let endpointParams = EndpointParams(
            accelerate: false,
            bucket: "arn:aws-cn:s3-object-lambda:cn-north-1:123456789012:accesspoint/mybanner",
            region: "aws-global",
            useArnRegion: true,
            useDualStack: false,
            useFIPS: false
        )
        let resolver = try DefaultEndpointResolver()

        XCTAssertThrowsError(try resolver.resolve(params: endpointParams)) { error in
            switch error {
            case EndpointError.unresolved(let message):
                XCTAssertEqual("Client was configured for partition `aws` but ARN (`arn:aws-cn:s3-object-lambda:cn-north-1:123456789012:accesspoint/mybanner`) has `aws-cn`", message)
            default:
                XCTFail()
            }
        }
    }

    /// object lambda with dualstack
    func testResolve170() throws {
        let endpointParams = EndpointParams(
            accelerate: false,
            bucket: "arn:aws:s3-object-lambda:us-west-2:123456789012:accesspoint/mybanner",
            region: "us-west-2",
            useArnRegion: false,
            useDualStack: true,
            useFIPS: false
        )
        let resolver = try DefaultEndpointResolver()

        XCTAssertThrowsError(try resolver.resolve(params: endpointParams)) { error in
            switch error {
            case EndpointError.unresolved(let message):
                XCTAssertEqual("S3 Object Lambda does not support Dual-stack", message)
            default:
                XCTFail()
            }
        }
    }

    /// object lambda @us-gov-east-1
    func testResolve171() throws {
        let endpointParams = EndpointParams(
            accelerate: false,
            bucket: "arn:aws-us-gov:s3-object-lambda:us-gov-east-1:123456789012:accesspoint/mybanner",
            region: "us-gov-east-1",
            useArnRegion: false,
            useDualStack: false,
            useFIPS: false
        )
        let resolver = try DefaultEndpointResolver()

        let actual = try resolver.resolve(params: endpointParams)

        let properties: [String: AnyHashable] =
            [
                "authSchemes": [
                    [
                        "signingRegion": "us-gov-east-1",
                        "name": "sigv4",
                        "signingName": "s3-object-lambda",
                        "disableDoubleEncoding": true
                    ] as [String: AnyHashable]
                ] as [AnyHashable]
            ]

        let headers = Headers()
        let expected = try ClientRuntime.Endpoint(urlString: "https://mybanner-123456789012.s3-object-lambda.us-gov-east-1.amazonaws.com", headers: headers, properties: properties)

        XCTAssertEqual(expected, actual)
    }

    /// object lambda @us-gov-east-1, with fips
    func testResolve172() throws {
        let endpointParams = EndpointParams(
            accelerate: false,
            bucket: "arn:aws-us-gov:s3-object-lambda:us-gov-east-1:123456789012:accesspoint/mybanner",
            region: "us-gov-east-1",
            useArnRegion: false,
            useDualStack: false,
            useFIPS: true
        )
        let resolver = try DefaultEndpointResolver()

        let actual = try resolver.resolve(params: endpointParams)

        let properties: [String: AnyHashable] =
            [
                "authSchemes": [
                    [
                        "signingRegion": "us-gov-east-1",
                        "name": "sigv4",
                        "signingName": "s3-object-lambda",
                        "disableDoubleEncoding": true
                    ] as [String: AnyHashable]
                ] as [AnyHashable]
            ]

        let headers = Headers()
        let expected = try ClientRuntime.Endpoint(urlString: "https://mybanner-123456789012.s3-object-lambda-fips.us-gov-east-1.amazonaws.com", headers: headers, properties: properties)

        XCTAssertEqual(expected, actual)
    }

    /// object lambda @cn-north-1, with fips
    func testResolve173() throws {
        let endpointParams = EndpointParams(
            accelerate: false,
            bucket: "arn:aws-cn:s3-object-lambda:cn-north-1:123456789012:accesspoint/mybanner",
            region: "cn-north-1",
            useArnRegion: false,
            useDualStack: false,
            useFIPS: true
        )
        let resolver = try DefaultEndpointResolver()

        XCTAssertThrowsError(try resolver.resolve(params: endpointParams)) { error in
            switch error {
            case EndpointError.unresolved(let message):
                XCTAssertEqual("Partition does not support FIPS", message)
            default:
                XCTFail()
            }
        }
    }

    /// object lambda with accelerate
    func testResolve174() throws {
        let endpointParams = EndpointParams(
            accelerate: true,
            bucket: "arn:aws:s3-object-lambda:us-west-2:123456789012:accesspoint/mybanner",
            region: "us-west-2",
            useArnRegion: false,
            useDualStack: false,
            useFIPS: false
        )
        let resolver = try DefaultEndpointResolver()

        XCTAssertThrowsError(try resolver.resolve(params: endpointParams)) { error in
            switch error {
            case EndpointError.unresolved(let message):
                XCTAssertEqual("S3 Object Lambda does not support S3 Accelerate", message)
            default:
                XCTFail()
            }
        }
    }

    /// object lambda with invalid arn - bad service and someresource
    func testResolve175() throws {
        let endpointParams = EndpointParams(
            accelerate: false,
            bucket: "arn:aws:sqs:us-west-2:123456789012:someresource",
            region: "us-west-2",
            useArnRegion: false,
            useDualStack: false,
            useFIPS: false
        )
        let resolver = try DefaultEndpointResolver()

        XCTAssertThrowsError(try resolver.resolve(params: endpointParams)) { error in
            switch error {
            case EndpointError.unresolved(let message):
                XCTAssertEqual("Invalid ARN: Unrecognized format: arn:aws:sqs:us-west-2:123456789012:someresource (type: someresource)", message)
            default:
                XCTFail()
            }
        }
    }

    /// object lambda with invalid arn - invalid resource
    func testResolve176() throws {
        let endpointParams = EndpointParams(
            accelerate: false,
            bucket: "arn:aws:s3-object-lambda:us-west-2:123456789012:bucket_name:mybucket",
            region: "us-west-2",
            useArnRegion: false,
            useDualStack: false,
            useFIPS: false
        )
        let resolver = try DefaultEndpointResolver()

        XCTAssertThrowsError(try resolver.resolve(params: endpointParams)) { error in
            switch error {
            case EndpointError.unresolved(let message):
                XCTAssertEqual("Invalid ARN: Object Lambda ARNs only support `accesspoint` arn types, but found: `bucket_name`", message)
            default:
                XCTFail()
            }
        }
    }

    /// object lambda with invalid arn - missing region
    func testResolve177() throws {
        let endpointParams = EndpointParams(
            accelerate: false,
            bucket: "arn:aws:s3-object-lambda::123456789012:accesspoint/mybanner",
            region: "us-west-2",
            useArnRegion: false,
            useDualStack: false,
            useFIPS: false
        )
        let resolver = try DefaultEndpointResolver()

        XCTAssertThrowsError(try resolver.resolve(params: endpointParams)) { error in
            switch error {
            case EndpointError.unresolved(let message):
                XCTAssertEqual("Invalid ARN: bucket ARN is missing a region", message)
            default:
                XCTFail()
            }
        }
    }

    /// object lambda with invalid arn - missing account-id
    func testResolve178() throws {
        let endpointParams = EndpointParams(
            accelerate: false,
            bucket: "arn:aws:s3-object-lambda:us-west-2::accesspoint/mybanner",
            region: "us-west-2",
            useArnRegion: true,
            useDualStack: false,
            useFIPS: false
        )
        let resolver = try DefaultEndpointResolver()

        XCTAssertThrowsError(try resolver.resolve(params: endpointParams)) { error in
            switch error {
            case EndpointError.unresolved(let message):
                XCTAssertEqual("Invalid ARN: Missing account id", message)
            default:
                XCTFail()
            }
        }
    }

    /// object lambda with invalid arn - account id contains invalid characters
    func testResolve179() throws {
        let endpointParams = EndpointParams(
            accelerate: false,
            bucket: "arn:aws:s3-object-lambda:us-west-2:123.45678.9012:accesspoint:mybucket",
            region: "us-west-2",
            useArnRegion: true,
            useDualStack: false,
            useFIPS: false
        )
        let resolver = try DefaultEndpointResolver()

        XCTAssertThrowsError(try resolver.resolve(params: endpointParams)) { error in
            switch error {
            case EndpointError.unresolved(let message):
                XCTAssertEqual("Invalid ARN: The account id may only contain a-z, A-Z, 0-9 and `-`. Found: `123.45678.9012`", message)
            default:
                XCTFail()
            }
        }
    }

    /// object lambda with invalid arn - missing access point name
    func testResolve180() throws {
        let endpointParams = EndpointParams(
            accelerate: false,
            bucket: "arn:aws:s3-object-lambda:us-west-2:123456789012:accesspoint",
            region: "us-west-2",
            useArnRegion: true,
            useDualStack: false,
            useFIPS: false
        )
        let resolver = try DefaultEndpointResolver()

        XCTAssertThrowsError(try resolver.resolve(params: endpointParams)) { error in
            switch error {
            case EndpointError.unresolved(let message):
                XCTAssertEqual("Invalid ARN: Expected a resource of the format `accesspoint:<accesspoint name>` but no name was provided", message)
            default:
                XCTFail()
            }
        }
    }

    /// object lambda with invalid arn - access point name contains invalid character: *
    func testResolve181() throws {
        let endpointParams = EndpointParams(
            accelerate: false,
            bucket: "arn:aws:s3-object-lambda:us-west-2:123456789012:accesspoint:*",
            region: "us-west-2",
            useArnRegion: true,
            useDualStack: false,
            useFIPS: false
        )
        let resolver = try DefaultEndpointResolver()

        XCTAssertThrowsError(try resolver.resolve(params: endpointParams)) { error in
            switch error {
            case EndpointError.unresolved(let message):
                XCTAssertEqual("Invalid ARN: The access point name may only contain a-z, A-Z, 0-9 and `-`. Found: `*`", message)
            default:
                XCTFail()
            }
        }
    }

    /// object lambda with invalid arn - access point name contains invalid character: .
    func testResolve182() throws {
        let endpointParams = EndpointParams(
            accelerate: false,
            bucket: "arn:aws:s3-object-lambda:us-west-2:123456789012:accesspoint:my.bucket",
            region: "us-west-2",
            useArnRegion: true,
            useDualStack: false,
            useFIPS: false
        )
        let resolver = try DefaultEndpointResolver()

        XCTAssertThrowsError(try resolver.resolve(params: endpointParams)) { error in
            switch error {
            case EndpointError.unresolved(let message):
                XCTAssertEqual("Invalid ARN: The access point name may only contain a-z, A-Z, 0-9 and `-`. Found: `my.bucket`", message)
            default:
                XCTFail()
            }
        }
    }

    /// object lambda with invalid arn - access point name contains sub resources
    func testResolve183() throws {
        let endpointParams = EndpointParams(
            accelerate: false,
            bucket: "arn:aws:s3-object-lambda:us-west-2:123456789012:accesspoint:mybucket:object:foo",
            region: "us-west-2",
            useArnRegion: true,
            useDualStack: false,
            useFIPS: false
        )
        let resolver = try DefaultEndpointResolver()

        XCTAssertThrowsError(try resolver.resolve(params: endpointParams)) { error in
            switch error {
            case EndpointError.unresolved(let message):
                XCTAssertEqual("Invalid ARN: The ARN may only contain a single resource component after `accesspoint`.", message)
            default:
                XCTFail()
            }
        }
    }

    /// object lambda with custom endpoint
    func testResolve184() throws {
        let endpointParams = EndpointParams(
            accelerate: false,
            bucket: "arn:aws:s3-object-lambda:us-west-2:123456789012:accesspoint/mybanner",
            endpoint: "https://my-endpoint.com",
            region: "us-west-2",
            useArnRegion: false,
            useDualStack: false,
            useFIPS: false
        )
        let resolver = try DefaultEndpointResolver()

        let actual = try resolver.resolve(params: endpointParams)

        let properties: [String: AnyHashable] =
            [
                "authSchemes": [
                    [
                        "signingRegion": "us-west-2",
                        "name": "sigv4",
                        "signingName": "s3-object-lambda",
                        "disableDoubleEncoding": true
                    ] as [String: AnyHashable]
                ] as [AnyHashable]
            ]

        let headers = Headers()
        let expected = try ClientRuntime.Endpoint(urlString: "https://mybanner-123456789012.my-endpoint.com", headers: headers, properties: properties)

        XCTAssertEqual(expected, actual)
    }

    /// object lambda arn with region mismatch and UseArnRegion=false
    func testResolve185() throws {
        let endpointParams = EndpointParams(
            accelerate: false,
            bucket: "arn:aws:s3-object-lambda:us-east-1:123456789012:accesspoint/mybanner",
            forcePathStyle: false,
            region: "us-west-2",
            useArnRegion: false,
            useDualStack: false,
            useFIPS: false
        )
        let resolver = try DefaultEndpointResolver()

        XCTAssertThrowsError(try resolver.resolve(params: endpointParams)) { error in
            switch error {
            case EndpointError.unresolved(let message):
                XCTAssertEqual("Invalid configuration: region from ARN `us-east-1` does not match client region `us-west-2` and UseArnRegion is `false`", message)
            default:
                XCTFail()
            }
        }
    }

    /// WriteGetObjectResponse @ us-west-2
    func testResolve186() throws {
        let endpointParams = EndpointParams(
            accelerate: false,
            region: "us-west-2",
            useDualStack: false,
            useFIPS: false,
            useObjectLambdaEndpoint: true
        )
        let resolver = try DefaultEndpointResolver()

        let actual = try resolver.resolve(params: endpointParams)

        let properties: [String: AnyHashable] =
            [
                "authSchemes": [
                    [
                        "signingRegion": "us-west-2",
                        "name": "sigv4",
                        "signingName": "s3-object-lambda",
                        "disableDoubleEncoding": true
                    ] as [String: AnyHashable]
                ] as [AnyHashable]
            ]

        let headers = Headers()
        let expected = try ClientRuntime.Endpoint(urlString: "https://s3-object-lambda.us-west-2.amazonaws.com", headers: headers, properties: properties)

        XCTAssertEqual(expected, actual)
    }

    /// WriteGetObjectResponse with custom endpoint
    func testResolve187() throws {
        let endpointParams = EndpointParams(
            accelerate: false,
            endpoint: "https://my-endpoint.com",
            region: "us-west-2",
            useDualStack: false,
            useFIPS: false,
            useObjectLambdaEndpoint: true
        )
        let resolver = try DefaultEndpointResolver()

        let actual = try resolver.resolve(params: endpointParams)

        let properties: [String: AnyHashable] =
            [
                "authSchemes": [
                    [
                        "signingRegion": "us-west-2",
                        "name": "sigv4",
                        "signingName": "s3-object-lambda",
                        "disableDoubleEncoding": true
                    ] as [String: AnyHashable]
                ] as [AnyHashable]
            ]

        let headers = Headers()
        let expected = try ClientRuntime.Endpoint(urlString: "https://my-endpoint.com", headers: headers, properties: properties)

        XCTAssertEqual(expected, actual)
    }

    /// WriteGetObjectResponse @ us-east-1
    func testResolve188() throws {
        let endpointParams = EndpointParams(
            accelerate: false,
            region: "us-east-1",
            useDualStack: false,
            useFIPS: false,
            useObjectLambdaEndpoint: true
        )
        let resolver = try DefaultEndpointResolver()

        let actual = try resolver.resolve(params: endpointParams)

        let properties: [String: AnyHashable] =
            [
                "authSchemes": [
                    [
                        "signingRegion": "us-east-1",
                        "name": "sigv4",
                        "signingName": "s3-object-lambda",
                        "disableDoubleEncoding": true
                    ] as [String: AnyHashable]
                ] as [AnyHashable]
            ]

        let headers = Headers()
        let expected = try ClientRuntime.Endpoint(urlString: "https://s3-object-lambda.us-east-1.amazonaws.com", headers: headers, properties: properties)

        XCTAssertEqual(expected, actual)
    }

    /// WriteGetObjectResponse with fips
    func testResolve189() throws {
        let endpointParams = EndpointParams(
            accelerate: false,
            region: "us-east-1",
            useDualStack: false,
            useFIPS: true,
            useObjectLambdaEndpoint: true
        )
        let resolver = try DefaultEndpointResolver()

        let actual = try resolver.resolve(params: endpointParams)

        let properties: [String: AnyHashable] =
            [
                "authSchemes": [
                    [
                        "signingRegion": "us-east-1",
                        "name": "sigv4",
                        "signingName": "s3-object-lambda",
                        "disableDoubleEncoding": true
                    ] as [String: AnyHashable]
                ] as [AnyHashable]
            ]

        let headers = Headers()
        let expected = try ClientRuntime.Endpoint(urlString: "https://s3-object-lambda-fips.us-east-1.amazonaws.com", headers: headers, properties: properties)

        XCTAssertEqual(expected, actual)
    }

    /// WriteGetObjectResponse with dualstack
    func testResolve190() throws {
        let endpointParams = EndpointParams(
            accelerate: false,
            region: "us-east-1",
            useDualStack: true,
            useFIPS: false,
            useObjectLambdaEndpoint: true
        )
        let resolver = try DefaultEndpointResolver()

        XCTAssertThrowsError(try resolver.resolve(params: endpointParams)) { error in
            switch error {
            case EndpointError.unresolved(let message):
                XCTAssertEqual("S3 Object Lambda does not support Dual-stack", message)
            default:
                XCTFail()
            }
        }
    }

    /// WriteGetObjectResponse with accelerate
    func testResolve191() throws {
        let endpointParams = EndpointParams(
            accelerate: true,
            region: "us-east-1",
            useDualStack: false,
            useFIPS: false,
            useObjectLambdaEndpoint: true
        )
        let resolver = try DefaultEndpointResolver()

        XCTAssertThrowsError(try resolver.resolve(params: endpointParams)) { error in
            switch error {
            case EndpointError.unresolved(let message):
                XCTAssertEqual("S3 Object Lambda does not support S3 Accelerate", message)
            default:
                XCTFail()
            }
        }
    }

    /// WriteGetObjectResponse with fips in CN
    func testResolve192() throws {
        let endpointParams = EndpointParams(
            accelerate: false,
            region: "cn-north-1",
            useDualStack: false,
            useFIPS: true,
            useObjectLambdaEndpoint: true
        )
        let resolver = try DefaultEndpointResolver()

        XCTAssertThrowsError(try resolver.resolve(params: endpointParams)) { error in
            switch error {
            case EndpointError.unresolved(let message):
                XCTAssertEqual("Partition does not support FIPS", message)
            default:
                XCTFail()
            }
        }
    }

    /// WriteGetObjectResponse with invalid partition
    func testResolve193() throws {
        let endpointParams = EndpointParams(
            accelerate: false,
            region: "not a valid DNS name",
            useDualStack: false,
            useFIPS: false,
            useObjectLambdaEndpoint: true
        )
        let resolver = try DefaultEndpointResolver()

        XCTAssertThrowsError(try resolver.resolve(params: endpointParams)) { error in
            switch error {
            case EndpointError.unresolved(let message):
                XCTAssertEqual("Invalid region: region was not a valid DNS name.", message)
            default:
                XCTFail()
            }
        }
    }

    /// WriteGetObjectResponse with an unknown partition
    func testResolve194() throws {
        let endpointParams = EndpointParams(
            accelerate: false,
            region: "us-east.special",
            useDualStack: false,
            useFIPS: false,
            useObjectLambdaEndpoint: true
        )
        let resolver = try DefaultEndpointResolver()

        let actual = try resolver.resolve(params: endpointParams)

        let properties: [String: AnyHashable] =
            [
                "authSchemes": [
                    [
                        "signingRegion": "us-east.special",
                        "name": "sigv4",
                        "signingName": "s3-object-lambda",
                        "disableDoubleEncoding": true
                    ] as [String: AnyHashable]
                ] as [AnyHashable]
            ]

        let headers = Headers()
        let expected = try ClientRuntime.Endpoint(urlString: "https://s3-object-lambda.us-east.special.amazonaws.com", headers: headers, properties: properties)

        XCTAssertEqual(expected, actual)
    }

    /// S3 Outposts Abba Real Outpost Prod us-west-1
    func testResolve195() throws {
        let endpointParams = EndpointParams(
            accelerate: false,
            bucket: "test-accessp-o0b1d075431d83bebde8xz5w8ijx1qzlbp3i3kuse10--op-s3",
            region: "us-west-1",
            useDualStack: false,
            useFIPS: false
        )
        let resolver = try DefaultEndpointResolver()

        let actual = try resolver.resolve(params: endpointParams)

        let properties: [String: AnyHashable] =
            [
                "authSchemes": [
                    [
                        "signingRegion": "us-west-1",
                        "name": "sigv4",
                        "signingName": "s3-outposts",
                        "disableDoubleEncoding": true
                    ] as [String: AnyHashable]
                ] as [AnyHashable]
            ]

        let headers = Headers()
        let expected = try ClientRuntime.Endpoint(urlString: "https://test-accessp-o0b1d075431d83bebde8xz5w8ijx1qzlbp3i3kuse10--op-s3.op-0b1d075431d83bebd.s3-outposts.us-west-1.amazonaws.com", headers: headers, properties: properties)

        XCTAssertEqual(expected, actual)
    }

    /// S3 Outposts Abba Real Outpost Prod ap-east-1
    func testResolve196() throws {
        let endpointParams = EndpointParams(
            accelerate: false,
            bucket: "test-accessp-o0b1d075431d83bebde8xz5w8ijx1qzlbp3i3kuse10--op-s3",
            region: "ap-east-1",
            useDualStack: false,
            useFIPS: false
        )
        let resolver = try DefaultEndpointResolver()

        let actual = try resolver.resolve(params: endpointParams)

        let properties: [String: AnyHashable] =
            [
                "authSchemes": [
                    [
                        "signingRegion": "ap-east-1",
                        "name": "sigv4",
                        "signingName": "s3-outposts",
                        "disableDoubleEncoding": true
                    ] as [String: AnyHashable]
                ] as [AnyHashable]
            ]

        let headers = Headers()
        let expected = try ClientRuntime.Endpoint(urlString: "https://test-accessp-o0b1d075431d83bebde8xz5w8ijx1qzlbp3i3kuse10--op-s3.op-0b1d075431d83bebd.s3-outposts.ap-east-1.amazonaws.com", headers: headers, properties: properties)

        XCTAssertEqual(expected, actual)
    }

    /// S3 Outposts Abba Ec2 Outpost Prod us-east-1
    func testResolve197() throws {
        let endpointParams = EndpointParams(
            accelerate: false,
            bucket: "test-accessp-e0000075431d83bebde8xz5w8ijx1qzlbp3i3kuse10--op-s3",
            region: "us-east-1",
            useDualStack: false,
            useFIPS: false
        )
        let resolver = try DefaultEndpointResolver()

        let actual = try resolver.resolve(params: endpointParams)

        let properties: [String: AnyHashable] =
            [
                "authSchemes": [
                    [
                        "signingRegion": "us-east-1",
                        "name": "sigv4",
                        "signingName": "s3-outposts",
                        "disableDoubleEncoding": true
                    ] as [String: AnyHashable]
                ] as [AnyHashable]
            ]

        let headers = Headers()
        let expected = try ClientRuntime.Endpoint(urlString: "https://test-accessp-e0000075431d83bebde8xz5w8ijx1qzlbp3i3kuse10--op-s3.ec2.s3-outposts.us-east-1.amazonaws.com", headers: headers, properties: properties)

        XCTAssertEqual(expected, actual)
    }

    /// S3 Outposts Abba Ec2 Outpost Prod me-south-1
    func testResolve198() throws {
        let endpointParams = EndpointParams(
            accelerate: false,
            bucket: "test-accessp-e0000075431d83bebde8xz5w8ijx1qzlbp3i3kuse10--op-s3",
            region: "me-south-1",
            useDualStack: false,
            useFIPS: false
        )
        let resolver = try DefaultEndpointResolver()

        let actual = try resolver.resolve(params: endpointParams)

        let properties: [String: AnyHashable] =
            [
                "authSchemes": [
                    [
                        "signingRegion": "me-south-1",
                        "name": "sigv4",
                        "signingName": "s3-outposts",
                        "disableDoubleEncoding": true
                    ] as [String: AnyHashable]
                ] as [AnyHashable]
            ]

        let headers = Headers()
        let expected = try ClientRuntime.Endpoint(urlString: "https://test-accessp-e0000075431d83bebde8xz5w8ijx1qzlbp3i3kuse10--op-s3.ec2.s3-outposts.me-south-1.amazonaws.com", headers: headers, properties: properties)

        XCTAssertEqual(expected, actual)
    }

    /// S3 Outposts Abba Real Outpost Beta
    func testResolve199() throws {
        let endpointParams = EndpointParams(
            accelerate: false,
            bucket: "test-accessp-o0b1d075431d83bebde8xz5w8ijx1qzlbp3i3kbeta0--op-s3",
            endpoint: "https://example.amazonaws.com",
            region: "us-east-1",
            useDualStack: false,
            useFIPS: false
        )
        let resolver = try DefaultEndpointResolver()

        let actual = try resolver.resolve(params: endpointParams)

        let properties: [String: AnyHashable] =
            [
                "authSchemes": [
                    [
                        "signingRegion": "us-east-1",
                        "name": "sigv4",
                        "signingName": "s3-outposts",
                        "disableDoubleEncoding": true
                    ] as [String: AnyHashable]
                ] as [AnyHashable]
            ]

        let headers = Headers()
        let expected = try ClientRuntime.Endpoint(urlString: "https://test-accessp-o0b1d075431d83bebde8xz5w8ijx1qzlbp3i3kbeta0--op-s3.op-0b1d075431d83bebd.example.amazonaws.com", headers: headers, properties: properties)

        XCTAssertEqual(expected, actual)
    }

    /// S3 Outposts Abba Ec2 Outpost Beta
    func testResolve200() throws {
        let endpointParams = EndpointParams(
            accelerate: false,
            bucket: "161743052723-e00000136899934034jeahy1t8gpzpbwjj8kb7beta0--op-s3",
            endpoint: "https://example.amazonaws.com",
            region: "us-east-1",
            useDualStack: false,
            useFIPS: false
        )
        let resolver = try DefaultEndpointResolver()

        let actual = try resolver.resolve(params: endpointParams)

        let properties: [String: AnyHashable] =
            [
                "authSchemes": [
                    [
                        "signingRegion": "us-east-1",
                        "name": "sigv4",
                        "signingName": "s3-outposts",
                        "disableDoubleEncoding": true
                    ] as [String: AnyHashable]
                ] as [AnyHashable]
            ]

        let headers = Headers()
        let expected = try ClientRuntime.Endpoint(urlString: "https://161743052723-e00000136899934034jeahy1t8gpzpbwjj8kb7beta0--op-s3.ec2.example.amazonaws.com", headers: headers, properties: properties)

        XCTAssertEqual(expected, actual)
    }

    /// S3 Outposts Abba - No endpoint set for beta
    func testResolve201() throws {
        let endpointParams = EndpointParams(
            accelerate: false,
            bucket: "test-accessp-o0b1d075431d83bebde8xz5w8ijx1qzlbp3i3kbeta0--op-s3",
            region: "us-east-1",
            useDualStack: false,
            useFIPS: false
        )
        let resolver = try DefaultEndpointResolver()

        XCTAssertThrowsError(try resolver.resolve(params: endpointParams)) { error in
            switch error {
            case EndpointError.unresolved(let message):
                XCTAssertEqual("Expected a endpoint to be specified but no endpoint was found", message)
            default:
                XCTFail()
            }
        }
    }

    /// S3 Outposts Abba Invalid hardware type
    func testResolve202() throws {
        let endpointParams = EndpointParams(
            accelerate: false,
            bucket: "test-accessp-h0000075431d83bebde8xz5w8ijx1qzlbp3i3kuse10--op-s3",
            region: "us-east-1",
            useDualStack: false,
            useFIPS: false
        )
        let resolver = try DefaultEndpointResolver()

        XCTAssertThrowsError(try resolver.resolve(params: endpointParams)) { error in
            switch error {
            case EndpointError.unresolved(let message):
                XCTAssertEqual("Unrecognized hardware type: \"Expected hardware type o or e but got h\"", message)
            default:
                XCTFail()
            }
        }
    }

    /// S3 Outposts Abba Special character in Outpost Arn
    func testResolve203() throws {
        let endpointParams = EndpointParams(
            accelerate: false,
            bucket: "test-accessp-o00000754%1d83bebde8xz5w8ijx1qzlbp3i3kuse10--op-s3",
            region: "us-east-1",
            useDualStack: false,
            useFIPS: false
        )
        let resolver = try DefaultEndpointResolver()

        XCTAssertThrowsError(try resolver.resolve(params: endpointParams)) { error in
            switch error {
            case EndpointError.unresolved(let message):
                XCTAssertEqual("Invalid ARN: The outpost Id must only contain a-z, A-Z, 0-9 and `-`.", message)
            default:
                XCTFail()
            }
        }
    }

}
