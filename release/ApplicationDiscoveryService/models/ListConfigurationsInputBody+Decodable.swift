// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListConfigurationsInputBody: Equatable {
    public let configurationType: ConfigurationItemType?
    public let filters: [Filter]?
    public let maxResults: Int
    public let nextToken: String?
    public let orderBy: [OrderByElement]?
}

extension ListConfigurationsInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case configurationType
        case filters
        case maxResults
        case nextToken
        case orderBy
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let configurationTypeDecoded = try containerValues.decodeIfPresent(ConfigurationItemType.self, forKey: .configurationType)
        configurationType = configurationTypeDecoded
        let filtersContainer = try containerValues.decodeIfPresent([Filter].self, forKey: .filters)
        var filtersDecoded0:[Filter]? = nil
        if let filtersContainer = filtersContainer {
            filtersDecoded0 = [Filter]()
            for structure0 in filtersContainer {
                filtersDecoded0?.append(structure0)
            }
        }
        filters = filtersDecoded0
        let maxResultsDecoded = try containerValues.decode(Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let orderByContainer = try containerValues.decodeIfPresent([OrderByElement].self, forKey: .orderBy)
        var orderByDecoded0:[OrderByElement]? = nil
        if let orderByContainer = orderByContainer {
            orderByDecoded0 = [OrderByElement]()
            for structure0 in orderByContainer {
                orderByDecoded0?.append(structure0)
            }
        }
        orderBy = orderByDecoded0
    }
}
