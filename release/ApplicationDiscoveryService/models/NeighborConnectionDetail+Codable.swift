// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension NeighborConnectionDetail: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case connectionsCount
        case destinationPort
        case destinationServerId
        case sourceServerId
        case transportProtocol
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if connectionsCount != 0 {
            try encodeContainer.encode(connectionsCount, forKey: .connectionsCount)
        }
        if let destinationPort = destinationPort {
            try encodeContainer.encode(destinationPort, forKey: .destinationPort)
        }
        if let destinationServerId = destinationServerId {
            try encodeContainer.encode(destinationServerId, forKey: .destinationServerId)
        }
        if let sourceServerId = sourceServerId {
            try encodeContainer.encode(sourceServerId, forKey: .sourceServerId)
        }
        if let transportProtocol = transportProtocol {
            try encodeContainer.encode(transportProtocol, forKey: .transportProtocol)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let sourceServerIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .sourceServerId)
        sourceServerId = sourceServerIdDecoded
        let destinationServerIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .destinationServerId)
        destinationServerId = destinationServerIdDecoded
        let destinationPortDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .destinationPort)
        destinationPort = destinationPortDecoded
        let transportProtocolDecoded = try containerValues.decodeIfPresent(String.self, forKey: .transportProtocol)
        transportProtocol = transportProtocolDecoded
        let connectionsCountDecoded = try containerValues.decode(Int.self, forKey: .connectionsCount)
        connectionsCount = connectionsCountDecoded
    }
}
