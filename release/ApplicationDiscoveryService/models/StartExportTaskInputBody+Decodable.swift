// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct StartExportTaskInputBody: Equatable {
    public let exportDataFormat: [ExportDataFormat]?
    public let filters: [ExportFilter]?
    public let startTime: Date?
    public let endTime: Date?
}

extension StartExportTaskInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case endTime
        case exportDataFormat
        case filters
        case startTime
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let exportDataFormatContainer = try containerValues.decodeIfPresent([ExportDataFormat].self, forKey: .exportDataFormat)
        var exportDataFormatDecoded0:[ExportDataFormat]? = nil
        if let exportDataFormatContainer = exportDataFormatContainer {
            exportDataFormatDecoded0 = [ExportDataFormat]()
            for string0 in exportDataFormatContainer {
                exportDataFormatDecoded0?.append(string0)
            }
        }
        exportDataFormat = exportDataFormatDecoded0
        let filtersContainer = try containerValues.decodeIfPresent([ExportFilter].self, forKey: .filters)
        var filtersDecoded0:[ExportFilter]? = nil
        if let filtersContainer = filtersContainer {
            filtersDecoded0 = [ExportFilter]()
            for structure0 in filtersContainer {
                filtersDecoded0?.append(structure0)
            }
        }
        filters = filtersDecoded0
        let startTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .startTime)
        startTime = startTimeDecoded
        let endTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .endTime)
        endTime = endTimeDecoded
    }
}
