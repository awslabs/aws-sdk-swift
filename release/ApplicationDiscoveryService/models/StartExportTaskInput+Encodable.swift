// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension StartExportTaskInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case endTime
        case exportDataFormat
        case filters
        case startTime
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let endTime = endTime {
            try encodeContainer.encode(endTime.timeIntervalSince1970, forKey: .endTime)
        }
        if let exportDataFormat = exportDataFormat {
            var exportDataFormatContainer = encodeContainer.nestedUnkeyedContainer(forKey: .exportDataFormat)
            for exportdataformats0 in exportDataFormat {
                try exportDataFormatContainer.encode(exportdataformats0.rawValue)
            }
        }
        if let filters = filters {
            var filtersContainer = encodeContainer.nestedUnkeyedContainer(forKey: .filters)
            for exportfilters0 in filters {
                try filtersContainer.encode(exportfilters0)
            }
        }
        if let startTime = startTime {
            try encodeContainer.encode(startTime.timeIntervalSince1970, forKey: .startTime)
        }
    }
}
