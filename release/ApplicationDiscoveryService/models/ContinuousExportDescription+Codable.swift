// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ContinuousExportDescription: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case dataSource
        case exportId
        case s3Bucket
        case schemaStorageConfig
        case startTime
        case status
        case statusDetail
        case stopTime
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let dataSource = dataSource {
            try encodeContainer.encode(dataSource.rawValue, forKey: .dataSource)
        }
        if let exportId = exportId {
            try encodeContainer.encode(exportId, forKey: .exportId)
        }
        if let s3Bucket = s3Bucket {
            try encodeContainer.encode(s3Bucket, forKey: .s3Bucket)
        }
        if let schemaStorageConfig = schemaStorageConfig {
            var schemaStorageConfigContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .schemaStorageConfig)
            for (dictKey0, schemastorageconfig0) in schemaStorageConfig {
                try schemaStorageConfigContainer.encode(schemastorageconfig0, forKey: Key(stringValue: dictKey0))
            }
        }
        if let startTime = startTime {
            try encodeContainer.encode(startTime.timeIntervalSince1970, forKey: .startTime)
        }
        if let status = status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
        if let statusDetail = statusDetail {
            try encodeContainer.encode(statusDetail, forKey: .statusDetail)
        }
        if let stopTime = stopTime {
            try encodeContainer.encode(stopTime.timeIntervalSince1970, forKey: .stopTime)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let exportIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .exportId)
        exportId = exportIdDecoded
        let statusDecoded = try containerValues.decodeIfPresent(ContinuousExportStatus.self, forKey: .status)
        status = statusDecoded
        let statusDetailDecoded = try containerValues.decodeIfPresent(String.self, forKey: .statusDetail)
        statusDetail = statusDetailDecoded
        let s3BucketDecoded = try containerValues.decodeIfPresent(String.self, forKey: .s3Bucket)
        s3Bucket = s3BucketDecoded
        let startTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .startTime)
        startTime = startTimeDecoded
        let stopTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .stopTime)
        stopTime = stopTimeDecoded
        let dataSourceDecoded = try containerValues.decodeIfPresent(DataSource.self, forKey: .dataSource)
        dataSource = dataSourceDecoded
        let schemaStorageConfigContainer = try containerValues.decodeIfPresent([String:String].self, forKey: .schemaStorageConfig)
        var schemaStorageConfigDecoded0: [String:String]? = nil
        if let schemaStorageConfigContainer = schemaStorageConfigContainer {
            schemaStorageConfigDecoded0 = [String:String]()
            for (key0, string0) in schemaStorageConfigContainer {
                schemaStorageConfigDecoded0?[key0] = string0
            }
        }
        schemaStorageConfig = schemaStorageConfigDecoded0
    }
}
