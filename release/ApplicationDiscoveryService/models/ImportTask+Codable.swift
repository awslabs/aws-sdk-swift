// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ImportTask: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case applicationImportFailure
        case applicationImportSuccess
        case clientRequestToken
        case errorsAndFailedEntriesZip
        case importCompletionTime
        case importDeletedTime
        case importRequestTime
        case importTaskId
        case importUrl
        case name
        case serverImportFailure
        case serverImportSuccess
        case status
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if applicationImportFailure != 0 {
            try encodeContainer.encode(applicationImportFailure, forKey: .applicationImportFailure)
        }
        if applicationImportSuccess != 0 {
            try encodeContainer.encode(applicationImportSuccess, forKey: .applicationImportSuccess)
        }
        if let clientRequestToken = clientRequestToken {
            try encodeContainer.encode(clientRequestToken, forKey: .clientRequestToken)
        }
        if let errorsAndFailedEntriesZip = errorsAndFailedEntriesZip {
            try encodeContainer.encode(errorsAndFailedEntriesZip, forKey: .errorsAndFailedEntriesZip)
        }
        if let importCompletionTime = importCompletionTime {
            try encodeContainer.encode(importCompletionTime.timeIntervalSince1970, forKey: .importCompletionTime)
        }
        if let importDeletedTime = importDeletedTime {
            try encodeContainer.encode(importDeletedTime.timeIntervalSince1970, forKey: .importDeletedTime)
        }
        if let importRequestTime = importRequestTime {
            try encodeContainer.encode(importRequestTime.timeIntervalSince1970, forKey: .importRequestTime)
        }
        if let importTaskId = importTaskId {
            try encodeContainer.encode(importTaskId, forKey: .importTaskId)
        }
        if let importUrl = importUrl {
            try encodeContainer.encode(importUrl, forKey: .importUrl)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if serverImportFailure != 0 {
            try encodeContainer.encode(serverImportFailure, forKey: .serverImportFailure)
        }
        if serverImportSuccess != 0 {
            try encodeContainer.encode(serverImportSuccess, forKey: .serverImportSuccess)
        }
        if let status = status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let importTaskIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .importTaskId)
        importTaskId = importTaskIdDecoded
        let clientRequestTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .clientRequestToken)
        clientRequestToken = clientRequestTokenDecoded
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
        let importUrlDecoded = try containerValues.decodeIfPresent(String.self, forKey: .importUrl)
        importUrl = importUrlDecoded
        let statusDecoded = try containerValues.decodeIfPresent(ImportStatus.self, forKey: .status)
        status = statusDecoded
        let importRequestTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .importRequestTime)
        importRequestTime = importRequestTimeDecoded
        let importCompletionTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .importCompletionTime)
        importCompletionTime = importCompletionTimeDecoded
        let importDeletedTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .importDeletedTime)
        importDeletedTime = importDeletedTimeDecoded
        let serverImportSuccessDecoded = try containerValues.decode(Int.self, forKey: .serverImportSuccess)
        serverImportSuccess = serverImportSuccessDecoded
        let serverImportFailureDecoded = try containerValues.decode(Int.self, forKey: .serverImportFailure)
        serverImportFailure = serverImportFailureDecoded
        let applicationImportSuccessDecoded = try containerValues.decode(Int.self, forKey: .applicationImportSuccess)
        applicationImportSuccess = applicationImportSuccessDecoded
        let applicationImportFailureDecoded = try containerValues.decode(Int.self, forKey: .applicationImportFailure)
        applicationImportFailure = applicationImportFailureDecoded
        let errorsAndFailedEntriesZipDecoded = try containerValues.decodeIfPresent(String.self, forKey: .errorsAndFailedEntriesZip)
        errorsAndFailedEntriesZip = errorsAndFailedEntriesZipDecoded
    }
}
