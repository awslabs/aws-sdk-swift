// Code generated by smithy-swift-codegen. DO NOT EDIT!



public enum ImportStatus {
    case deleteComplete
    case deleteFailed
    case deleteFailedLimitExceeded
    case deleteInProgress
    case importComplete
    case importCompleteWithErrors
    case importFailed
    case importFailedRecordLimitExceeded
    case importFailedServerLimitExceeded
    case importInProgress
    case internalError
    case sdkUnknown(String)
}

extension ImportStatus : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [ImportStatus] {
        return [
            .deleteComplete,
            .deleteFailed,
            .deleteFailedLimitExceeded,
            .deleteInProgress,
            .importComplete,
            .importCompleteWithErrors,
            .importFailed,
            .importFailedRecordLimitExceeded,
            .importFailedServerLimitExceeded,
            .importInProgress,
            .internalError,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .deleteComplete: return "DELETE_COMPLETE"
        case .deleteFailed: return "DELETE_FAILED"
        case .deleteFailedLimitExceeded: return "DELETE_FAILED_LIMIT_EXCEEDED"
        case .deleteInProgress: return "DELETE_IN_PROGRESS"
        case .importComplete: return "IMPORT_COMPLETE"
        case .importCompleteWithErrors: return "IMPORT_COMPLETE_WITH_ERRORS"
        case .importFailed: return "IMPORT_FAILED"
        case .importFailedRecordLimitExceeded: return "IMPORT_FAILED_RECORD_LIMIT_EXCEEDED"
        case .importFailedServerLimitExceeded: return "IMPORT_FAILED_SERVER_LIMIT_EXCEEDED"
        case .importInProgress: return "IMPORT_IN_PROGRESS"
        case .internalError: return "INTERNAL_ERROR"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = ImportStatus(rawValue: rawValue) ?? ImportStatus.sdkUnknown(rawValue)
    }
}
