// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ConfigurationTag: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case configurationId
        case configurationType
        case key
        case timeOfCreation
        case value
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let configurationId = configurationId {
            try encodeContainer.encode(configurationId, forKey: .configurationId)
        }
        if let configurationType = configurationType {
            try encodeContainer.encode(configurationType.rawValue, forKey: .configurationType)
        }
        if let key = key {
            try encodeContainer.encode(key, forKey: .key)
        }
        if let timeOfCreation = timeOfCreation {
            try encodeContainer.encode(timeOfCreation.timeIntervalSince1970, forKey: .timeOfCreation)
        }
        if let value = value {
            try encodeContainer.encode(value, forKey: .value)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let configurationTypeDecoded = try containerValues.decodeIfPresent(ConfigurationItemType.self, forKey: .configurationType)
        configurationType = configurationTypeDecoded
        let configurationIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .configurationId)
        configurationId = configurationIdDecoded
        let keyDecoded = try containerValues.decodeIfPresent(String.self, forKey: .key)
        key = keyDecoded
        let valueDecoded = try containerValues.decodeIfPresent(String.self, forKey: .value)
        value = valueDecoded
        let timeOfCreationDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .timeOfCreation)
        timeOfCreation = timeOfCreationDecoded
    }
}
