// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct StartContinuousExportOutputBody: Equatable {
    public let exportId: String?
    public let s3Bucket: String?
    public let startTime: Date?
    public let dataSource: DataSource?
    public let schemaStorageConfig: [String:String]?
}

extension StartContinuousExportOutputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case dataSource
        case exportId
        case s3Bucket
        case schemaStorageConfig
        case startTime
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let exportIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .exportId)
        exportId = exportIdDecoded
        let s3BucketDecoded = try containerValues.decodeIfPresent(String.self, forKey: .s3Bucket)
        s3Bucket = s3BucketDecoded
        let startTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .startTime)
        startTime = startTimeDecoded
        let dataSourceDecoded = try containerValues.decodeIfPresent(DataSource.self, forKey: .dataSource)
        dataSource = dataSourceDecoded
        let schemaStorageConfigContainer = try containerValues.decodeIfPresent([String:String].self, forKey: .schemaStorageConfig)
        var schemaStorageConfigDecoded0: [String:String]? = nil
        if let schemaStorageConfigContainer = schemaStorageConfigContainer {
            schemaStorageConfigDecoded0 = [String:String]()
            for (key0, string0) in schemaStorageConfigContainer {
                schemaStorageConfigDecoded0?[key0] = string0
            }
        }
        schemaStorageConfig = schemaStorageConfigDecoded0
    }
}
