// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListAllowedNodeTypeModificationsOutputBody: Equatable {
    public let scaleUpModifications: [String]?
    public let scaleDownModifications: [String]?
}

extension ListAllowedNodeTypeModificationsOutputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case scaleDownModifications = "ScaleDownModifications"
        case scaleUpModifications = "ScaleUpModifications"
    }

    public init (from decoder: Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: Key("ListAllowedNodeTypeModificationsResult"))
        if containerValues.contains(.scaleUpModifications) {
            struct KeyVal0{struct member{}}
            let scaleUpModificationsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .scaleUpModifications)
            if let scaleUpModificationsWrappedContainer = scaleUpModificationsWrappedContainer {
                let scaleUpModificationsContainer = try scaleUpModificationsWrappedContainer.decodeIfPresent([String].self, forKey: .member)
                var scaleUpModificationsBuffer:[String]? = nil
                if let scaleUpModificationsContainer = scaleUpModificationsContainer {
                    scaleUpModificationsBuffer = [String]()
                    for stringContainer0 in scaleUpModificationsContainer {
                        scaleUpModificationsBuffer?.append(stringContainer0)
                    }
                }
                scaleUpModifications = scaleUpModificationsBuffer
            } else {
                scaleUpModifications = []
            }
        } else {
            scaleUpModifications = nil
        }
        if containerValues.contains(.scaleDownModifications) {
            struct KeyVal0{struct member{}}
            let scaleDownModificationsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .scaleDownModifications)
            if let scaleDownModificationsWrappedContainer = scaleDownModificationsWrappedContainer {
                let scaleDownModificationsContainer = try scaleDownModificationsWrappedContainer.decodeIfPresent([String].self, forKey: .member)
                var scaleDownModificationsBuffer:[String]? = nil
                if let scaleDownModificationsContainer = scaleDownModificationsContainer {
                    scaleDownModificationsBuffer = [String]()
                    for stringContainer0 in scaleDownModificationsContainer {
                        scaleDownModificationsBuffer?.append(stringContainer0)
                    }
                }
                scaleDownModifications = scaleDownModificationsBuffer
            } else {
                scaleDownModifications = []
            }
        } else {
            scaleDownModifications = nil
        }
    }
}
