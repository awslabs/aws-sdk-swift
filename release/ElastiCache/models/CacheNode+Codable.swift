// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension CacheNode: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case cacheNodeCreateTime = "CacheNodeCreateTime"
        case cacheNodeId = "CacheNodeId"
        case cacheNodeStatus = "CacheNodeStatus"
        case customerAvailabilityZone = "CustomerAvailabilityZone"
        case customerOutpostArn = "CustomerOutpostArn"
        case endpoint = "Endpoint"
        case parameterGroupStatus = "ParameterGroupStatus"
        case sourceCacheNodeId = "SourceCacheNodeId"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let cacheNodeCreateTime = cacheNodeCreateTime {
            try container.encode(TimestampWrapper(cacheNodeCreateTime, format: .dateTime), forKey: Key("cacheNodeCreateTime"))
        }
        if let cacheNodeId = cacheNodeId {
            try container.encode(cacheNodeId, forKey: Key("CacheNodeId"))
        }
        if let cacheNodeStatus = cacheNodeStatus {
            try container.encode(cacheNodeStatus, forKey: Key("CacheNodeStatus"))
        }
        if let customerAvailabilityZone = customerAvailabilityZone {
            try container.encode(customerAvailabilityZone, forKey: Key("CustomerAvailabilityZone"))
        }
        if let customerOutpostArn = customerOutpostArn {
            try container.encode(customerOutpostArn, forKey: Key("CustomerOutpostArn"))
        }
        if let endpoint = endpoint {
            try container.encode(endpoint, forKey: Key("Endpoint"))
        }
        if let parameterGroupStatus = parameterGroupStatus {
            try container.encode(parameterGroupStatus, forKey: Key("ParameterGroupStatus"))
        }
        if let sourceCacheNodeId = sourceCacheNodeId {
            try container.encode(sourceCacheNodeId, forKey: Key("SourceCacheNodeId"))
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let cacheNodeIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .cacheNodeId)
        cacheNodeId = cacheNodeIdDecoded
        let cacheNodeStatusDecoded = try containerValues.decodeIfPresent(String.self, forKey: .cacheNodeStatus)
        cacheNodeStatus = cacheNodeStatusDecoded
        let cacheNodeCreateTimeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .cacheNodeCreateTime)
        var cacheNodeCreateTimeBuffer:Date? = nil
        if let cacheNodeCreateTimeDecoded = cacheNodeCreateTimeDecoded {
            cacheNodeCreateTimeBuffer = try TimestampWrapperDecoder.parseDateStringValue(cacheNodeCreateTimeDecoded, format: .dateTime)
        }
        cacheNodeCreateTime = cacheNodeCreateTimeBuffer
        let endpointDecoded = try containerValues.decodeIfPresent(Endpoint.self, forKey: .endpoint)
        endpoint = endpointDecoded
        let parameterGroupStatusDecoded = try containerValues.decodeIfPresent(String.self, forKey: .parameterGroupStatus)
        parameterGroupStatus = parameterGroupStatusDecoded
        let sourceCacheNodeIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .sourceCacheNodeId)
        sourceCacheNodeId = sourceCacheNodeIdDecoded
        let customerAvailabilityZoneDecoded = try containerValues.decodeIfPresent(String.self, forKey: .customerAvailabilityZone)
        customerAvailabilityZone = customerAvailabilityZoneDecoded
        let customerOutpostArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .customerOutpostArn)
        customerOutpostArn = customerOutpostArnDecoded
    }
}
