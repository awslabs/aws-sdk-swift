// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension CacheNodeTypeSpecificParameter: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case allowedValues = "AllowedValues"
        case cacheNodeTypeSpecificValues = "CacheNodeTypeSpecificValues"
        case changeType = "ChangeType"
        case dataType = "DataType"
        case description = "Description"
        case isModifiable = "IsModifiable"
        case minimumEngineVersion = "MinimumEngineVersion"
        case parameterName = "ParameterName"
        case source = "Source"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let allowedValues = allowedValues {
            try container.encode(allowedValues, forKey: Key("AllowedValues"))
        }
        if let cacheNodeTypeSpecificValues = cacheNodeTypeSpecificValues {
            var cacheNodeTypeSpecificValuesContainer = container.nestedContainer(keyedBy: Key.self, forKey: Key("CacheNodeTypeSpecificValues"))
            for (index0, cachenodetypespecificvalue0) in cacheNodeTypeSpecificValues.enumerated() {
                try cacheNodeTypeSpecificValuesContainer.encode(cachenodetypespecificvalue0, forKey: Key("CacheNodeTypeSpecificValue.\(index0.advanced(by: 1))"))
            }
        }
        if let changeType = changeType {
            try container.encode(changeType, forKey: Key("ChangeType"))
        }
        if let dataType = dataType {
            try container.encode(dataType, forKey: Key("DataType"))
        }
        if let description = description {
            try container.encode(description, forKey: Key("Description"))
        }
        if isModifiable != false {
            try container.encode(isModifiable, forKey: Key("IsModifiable"))
        }
        if let minimumEngineVersion = minimumEngineVersion {
            try container.encode(minimumEngineVersion, forKey: Key("MinimumEngineVersion"))
        }
        if let parameterName = parameterName {
            try container.encode(parameterName, forKey: Key("ParameterName"))
        }
        if let source = source {
            try container.encode(source, forKey: Key("Source"))
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let parameterNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .parameterName)
        parameterName = parameterNameDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .description)
        description = descriptionDecoded
        let sourceDecoded = try containerValues.decodeIfPresent(String.self, forKey: .source)
        source = sourceDecoded
        let dataTypeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .dataType)
        dataType = dataTypeDecoded
        let allowedValuesDecoded = try containerValues.decodeIfPresent(String.self, forKey: .allowedValues)
        allowedValues = allowedValuesDecoded
        let isModifiableDecoded = try containerValues.decode(Bool.self, forKey: .isModifiable)
        isModifiable = isModifiableDecoded
        let minimumEngineVersionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .minimumEngineVersion)
        minimumEngineVersion = minimumEngineVersionDecoded
        if containerValues.contains(.cacheNodeTypeSpecificValues) {
            struct KeyVal0{struct CacheNodeTypeSpecificValue{}}
            let cacheNodeTypeSpecificValuesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.CacheNodeTypeSpecificValue>.CodingKeys.self, forKey: .cacheNodeTypeSpecificValues)
            if let cacheNodeTypeSpecificValuesWrappedContainer = cacheNodeTypeSpecificValuesWrappedContainer {
                let cacheNodeTypeSpecificValuesContainer = try cacheNodeTypeSpecificValuesWrappedContainer.decodeIfPresent([CacheNodeTypeSpecificValue].self, forKey: .member)
                var cacheNodeTypeSpecificValuesBuffer:[CacheNodeTypeSpecificValue]? = nil
                if let cacheNodeTypeSpecificValuesContainer = cacheNodeTypeSpecificValuesContainer {
                    cacheNodeTypeSpecificValuesBuffer = [CacheNodeTypeSpecificValue]()
                    for structureContainer0 in cacheNodeTypeSpecificValuesContainer {
                        cacheNodeTypeSpecificValuesBuffer?.append(structureContainer0)
                    }
                }
                cacheNodeTypeSpecificValues = cacheNodeTypeSpecificValuesBuffer
            } else {
                cacheNodeTypeSpecificValues = []
            }
        } else {
            cacheNodeTypeSpecificValues = nil
        }
        let changeTypeDecoded = try containerValues.decodeIfPresent(ChangeType.self, forKey: .changeType)
        changeType = changeTypeDecoded
    }
}
