// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeServiceUpdatesOutputBody: Equatable {
    public let marker: String?
    public let serviceUpdates: [ServiceUpdate]?
}

extension DescribeServiceUpdatesOutputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case marker = "Marker"
        case serviceUpdates = "ServiceUpdates"
    }

    public init (from decoder: Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: Key("DescribeServiceUpdatesResult"))
        let markerDecoded = try containerValues.decodeIfPresent(String.self, forKey: .marker)
        marker = markerDecoded
        if containerValues.contains(.serviceUpdates) {
            struct KeyVal0{struct ServiceUpdate{}}
            let serviceUpdatesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.ServiceUpdate>.CodingKeys.self, forKey: .serviceUpdates)
            if let serviceUpdatesWrappedContainer = serviceUpdatesWrappedContainer {
                let serviceUpdatesContainer = try serviceUpdatesWrappedContainer.decodeIfPresent([ServiceUpdate].self, forKey: .member)
                var serviceUpdatesBuffer:[ServiceUpdate]? = nil
                if let serviceUpdatesContainer = serviceUpdatesContainer {
                    serviceUpdatesBuffer = [ServiceUpdate]()
                    for structureContainer0 in serviceUpdatesContainer {
                        serviceUpdatesBuffer?.append(structureContainer0)
                    }
                }
                serviceUpdates = serviceUpdatesBuffer
            } else {
                serviceUpdates = []
            }
        } else {
            serviceUpdates = nil
        }
    }
}
