// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ModifyReplicationGroupInput: Encodable, Reflection {
    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if applyImmediately != false {
            try container.encode(applyImmediately, forKey: Key("ApplyImmediately"))
        }
        if let authToken = authToken {
            try container.encode(authToken, forKey: Key("AuthToken"))
        }
        if let authTokenUpdateStrategy = authTokenUpdateStrategy {
            try container.encode(authTokenUpdateStrategy, forKey: Key("AuthTokenUpdateStrategy"))
        }
        if let autoMinorVersionUpgrade = autoMinorVersionUpgrade {
            try container.encode(autoMinorVersionUpgrade, forKey: Key("AutoMinorVersionUpgrade"))
        }
        if let automaticFailoverEnabled = automaticFailoverEnabled {
            try container.encode(automaticFailoverEnabled, forKey: Key("AutomaticFailoverEnabled"))
        }
        if let cacheNodeType = cacheNodeType {
            try container.encode(cacheNodeType, forKey: Key("CacheNodeType"))
        }
        if let cacheParameterGroupName = cacheParameterGroupName {
            try container.encode(cacheParameterGroupName, forKey: Key("CacheParameterGroupName"))
        }
        if let cacheSecurityGroupNames = cacheSecurityGroupNames {
            var cacheSecurityGroupNamesContainer = container.nestedContainer(keyedBy: Key.self, forKey: Key("CacheSecurityGroupNames"))
            for (index0, string0) in cacheSecurityGroupNames.enumerated() {
                try cacheSecurityGroupNamesContainer.encode(string0, forKey: Key("CacheSecurityGroupName.\(index0.advanced(by: 1))"))
            }
        }
        if let engineVersion = engineVersion {
            try container.encode(engineVersion, forKey: Key("EngineVersion"))
        }
        if let logDeliveryConfigurations = logDeliveryConfigurations {
            var logDeliveryConfigurationsContainer = container.nestedContainer(keyedBy: Key.self, forKey: Key("LogDeliveryConfigurations"))
            for (index0, logdeliveryconfigurationrequest0) in logDeliveryConfigurations.enumerated() {
                try logDeliveryConfigurationsContainer.encode(logdeliveryconfigurationrequest0, forKey: Key("LogDeliveryConfigurationRequest.\(index0.advanced(by: 1))"))
            }
        }
        if let multiAZEnabled = multiAZEnabled {
            try container.encode(multiAZEnabled, forKey: Key("MultiAZEnabled"))
        }
        if let nodeGroupId = nodeGroupId {
            try container.encode(nodeGroupId, forKey: Key("NodeGroupId"))
        }
        if let notificationTopicArn = notificationTopicArn {
            try container.encode(notificationTopicArn, forKey: Key("NotificationTopicArn"))
        }
        if let notificationTopicStatus = notificationTopicStatus {
            try container.encode(notificationTopicStatus, forKey: Key("NotificationTopicStatus"))
        }
        if let preferredMaintenanceWindow = preferredMaintenanceWindow {
            try container.encode(preferredMaintenanceWindow, forKey: Key("PreferredMaintenanceWindow"))
        }
        if let primaryClusterId = primaryClusterId {
            try container.encode(primaryClusterId, forKey: Key("PrimaryClusterId"))
        }
        if let removeUserGroups = removeUserGroups {
            try container.encode(removeUserGroups, forKey: Key("RemoveUserGroups"))
        }
        if let replicationGroupDescription = replicationGroupDescription {
            try container.encode(replicationGroupDescription, forKey: Key("ReplicationGroupDescription"))
        }
        if let replicationGroupId = replicationGroupId {
            try container.encode(replicationGroupId, forKey: Key("ReplicationGroupId"))
        }
        if let securityGroupIds = securityGroupIds {
            var securityGroupIdsContainer = container.nestedContainer(keyedBy: Key.self, forKey: Key("SecurityGroupIds"))
            for (index0, string0) in securityGroupIds.enumerated() {
                try securityGroupIdsContainer.encode(string0, forKey: Key("SecurityGroupId.\(index0.advanced(by: 1))"))
            }
        }
        if let snapshotRetentionLimit = snapshotRetentionLimit {
            try container.encode(snapshotRetentionLimit, forKey: Key("SnapshotRetentionLimit"))
        }
        if let snapshotWindow = snapshotWindow {
            try container.encode(snapshotWindow, forKey: Key("SnapshotWindow"))
        }
        if let snapshottingClusterId = snapshottingClusterId {
            try container.encode(snapshottingClusterId, forKey: Key("SnapshottingClusterId"))
        }
        if let userGroupIdsToAdd = userGroupIdsToAdd {
            var userGroupIdsToAddContainer = container.nestedContainer(keyedBy: Key.self, forKey: Key("UserGroupIdsToAdd"))
            for (index0, usergroupid0) in userGroupIdsToAdd.enumerated() {
                try userGroupIdsToAddContainer.encode(usergroupid0, forKey: Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let userGroupIdsToRemove = userGroupIdsToRemove {
            var userGroupIdsToRemoveContainer = container.nestedContainer(keyedBy: Key.self, forKey: Key("UserGroupIdsToRemove"))
            for (index0, usergroupid0) in userGroupIdsToRemove.enumerated() {
                try userGroupIdsToRemoveContainer.encode(usergroupid0, forKey: Key("member.\(index0.advanced(by: 1))"))
            }
        }
        try container.encode("ModifyReplicationGroup", forKey:Key("Action"))
        try container.encode("2015-02-02", forKey:Key("Version"))
    }
}
