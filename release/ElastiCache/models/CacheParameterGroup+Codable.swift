// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension CacheParameterGroup: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case aRN = "ARN"
        case cacheParameterGroupFamily = "CacheParameterGroupFamily"
        case cacheParameterGroupName = "CacheParameterGroupName"
        case description = "Description"
        case isGlobal = "IsGlobal"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let aRN = aRN {
            try container.encode(aRN, forKey: Key("ARN"))
        }
        if let cacheParameterGroupFamily = cacheParameterGroupFamily {
            try container.encode(cacheParameterGroupFamily, forKey: Key("CacheParameterGroupFamily"))
        }
        if let cacheParameterGroupName = cacheParameterGroupName {
            try container.encode(cacheParameterGroupName, forKey: Key("CacheParameterGroupName"))
        }
        if let description = description {
            try container.encode(description, forKey: Key("Description"))
        }
        if isGlobal != false {
            try container.encode(isGlobal, forKey: Key("IsGlobal"))
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let cacheParameterGroupNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .cacheParameterGroupName)
        cacheParameterGroupName = cacheParameterGroupNameDecoded
        let cacheParameterGroupFamilyDecoded = try containerValues.decodeIfPresent(String.self, forKey: .cacheParameterGroupFamily)
        cacheParameterGroupFamily = cacheParameterGroupFamilyDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .description)
        description = descriptionDecoded
        let isGlobalDecoded = try containerValues.decode(Bool.self, forKey: .isGlobal)
        isGlobal = isGlobalDecoded
        let aRNDecoded = try containerValues.decodeIfPresent(String.self, forKey: .aRN)
        aRN = aRNDecoded
    }
}
