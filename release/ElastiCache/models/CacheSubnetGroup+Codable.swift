// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension CacheSubnetGroup: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case aRN = "ARN"
        case cacheSubnetGroupDescription = "CacheSubnetGroupDescription"
        case cacheSubnetGroupName = "CacheSubnetGroupName"
        case subnets = "Subnets"
        case vpcId = "VpcId"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let aRN = aRN {
            try container.encode(aRN, forKey: Key("ARN"))
        }
        if let cacheSubnetGroupDescription = cacheSubnetGroupDescription {
            try container.encode(cacheSubnetGroupDescription, forKey: Key("CacheSubnetGroupDescription"))
        }
        if let cacheSubnetGroupName = cacheSubnetGroupName {
            try container.encode(cacheSubnetGroupName, forKey: Key("CacheSubnetGroupName"))
        }
        if let subnets = subnets {
            var subnetsContainer = container.nestedContainer(keyedBy: Key.self, forKey: Key("Subnets"))
            for (index0, subnet0) in subnets.enumerated() {
                try subnetsContainer.encode(subnet0, forKey: Key("Subnet.\(index0.advanced(by: 1))"))
            }
        }
        if let vpcId = vpcId {
            try container.encode(vpcId, forKey: Key("VpcId"))
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let cacheSubnetGroupNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .cacheSubnetGroupName)
        cacheSubnetGroupName = cacheSubnetGroupNameDecoded
        let cacheSubnetGroupDescriptionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .cacheSubnetGroupDescription)
        cacheSubnetGroupDescription = cacheSubnetGroupDescriptionDecoded
        let vpcIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .vpcId)
        vpcId = vpcIdDecoded
        if containerValues.contains(.subnets) {
            struct KeyVal0{struct Subnet{}}
            let subnetsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.Subnet>.CodingKeys.self, forKey: .subnets)
            if let subnetsWrappedContainer = subnetsWrappedContainer {
                let subnetsContainer = try subnetsWrappedContainer.decodeIfPresent([Subnet].self, forKey: .member)
                var subnetsBuffer:[Subnet]? = nil
                if let subnetsContainer = subnetsContainer {
                    subnetsBuffer = [Subnet]()
                    for structureContainer0 in subnetsContainer {
                        subnetsBuffer?.append(structureContainer0)
                    }
                }
                subnets = subnetsBuffer
            } else {
                subnets = []
            }
        } else {
            subnets = nil
        }
        let aRNDecoded = try containerValues.decodeIfPresent(String.self, forKey: .aRN)
        aRN = aRNDecoded
    }
}
