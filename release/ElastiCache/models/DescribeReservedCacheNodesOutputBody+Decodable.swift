// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeReservedCacheNodesOutputBody: Equatable {
    public let marker: String?
    public let reservedCacheNodes: [ReservedCacheNode]?
}

extension DescribeReservedCacheNodesOutputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case marker = "Marker"
        case reservedCacheNodes = "ReservedCacheNodes"
    }

    public init (from decoder: Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: Key("DescribeReservedCacheNodesResult"))
        let markerDecoded = try containerValues.decodeIfPresent(String.self, forKey: .marker)
        marker = markerDecoded
        if containerValues.contains(.reservedCacheNodes) {
            struct KeyVal0{struct ReservedCacheNode{}}
            let reservedCacheNodesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.ReservedCacheNode>.CodingKeys.self, forKey: .reservedCacheNodes)
            if let reservedCacheNodesWrappedContainer = reservedCacheNodesWrappedContainer {
                let reservedCacheNodesContainer = try reservedCacheNodesWrappedContainer.decodeIfPresent([ReservedCacheNode].self, forKey: .member)
                var reservedCacheNodesBuffer:[ReservedCacheNode]? = nil
                if let reservedCacheNodesContainer = reservedCacheNodesContainer {
                    reservedCacheNodesBuffer = [ReservedCacheNode]()
                    for structureContainer0 in reservedCacheNodesContainer {
                        reservedCacheNodesBuffer?.append(structureContainer0)
                    }
                }
                reservedCacheNodes = reservedCacheNodesBuffer
            } else {
                reservedCacheNodes = []
            }
        } else {
            reservedCacheNodes = nil
        }
    }
}
