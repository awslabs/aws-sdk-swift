// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ModifyUserOutputBody: Equatable {
    public let userId: String?
    public let userName: String?
    public let status: String?
    public let engine: String?
    public let accessString: String?
    public let userGroupIds: [String]?
    public let authentication: Authentication?
    public let aRN: String?
}

extension ModifyUserOutputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case aRN = "ARN"
        case accessString = "AccessString"
        case authentication = "Authentication"
        case engine = "Engine"
        case status = "Status"
        case userGroupIds = "UserGroupIds"
        case userId = "UserId"
        case userName = "UserName"
    }

    public init (from decoder: Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: Key("ModifyUserResult"))
        let userIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .userId)
        userId = userIdDecoded
        let userNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .userName)
        userName = userNameDecoded
        let statusDecoded = try containerValues.decodeIfPresent(String.self, forKey: .status)
        status = statusDecoded
        let engineDecoded = try containerValues.decodeIfPresent(String.self, forKey: .engine)
        engine = engineDecoded
        let accessStringDecoded = try containerValues.decodeIfPresent(String.self, forKey: .accessString)
        accessString = accessStringDecoded
        if containerValues.contains(.userGroupIds) {
            struct KeyVal0{struct member{}}
            let userGroupIdsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .userGroupIds)
            if let userGroupIdsWrappedContainer = userGroupIdsWrappedContainer {
                let userGroupIdsContainer = try userGroupIdsWrappedContainer.decodeIfPresent([String].self, forKey: .member)
                var userGroupIdsBuffer:[String]? = nil
                if let userGroupIdsContainer = userGroupIdsContainer {
                    userGroupIdsBuffer = [String]()
                    for stringContainer0 in userGroupIdsContainer {
                        userGroupIdsBuffer?.append(stringContainer0)
                    }
                }
                userGroupIds = userGroupIdsBuffer
            } else {
                userGroupIds = []
            }
        } else {
            userGroupIds = nil
        }
        let authenticationDecoded = try containerValues.decodeIfPresent(Authentication.self, forKey: .authentication)
        authentication = authenticationDecoded
        let aRNDecoded = try containerValues.decodeIfPresent(String.self, forKey: .aRN)
        aRN = aRNDecoded
    }
}
