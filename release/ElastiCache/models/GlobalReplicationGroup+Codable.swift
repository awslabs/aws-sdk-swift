// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension GlobalReplicationGroup: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case aRN = "ARN"
        case atRestEncryptionEnabled = "AtRestEncryptionEnabled"
        case authTokenEnabled = "AuthTokenEnabled"
        case cacheNodeType = "CacheNodeType"
        case clusterEnabled = "ClusterEnabled"
        case engine = "Engine"
        case engineVersion = "EngineVersion"
        case globalNodeGroups = "GlobalNodeGroups"
        case globalReplicationGroupDescription = "GlobalReplicationGroupDescription"
        case globalReplicationGroupId = "GlobalReplicationGroupId"
        case members = "Members"
        case status = "Status"
        case transitEncryptionEnabled = "TransitEncryptionEnabled"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let aRN = aRN {
            try container.encode(aRN, forKey: Key("ARN"))
        }
        if let atRestEncryptionEnabled = atRestEncryptionEnabled {
            try container.encode(atRestEncryptionEnabled, forKey: Key("AtRestEncryptionEnabled"))
        }
        if let authTokenEnabled = authTokenEnabled {
            try container.encode(authTokenEnabled, forKey: Key("AuthTokenEnabled"))
        }
        if let cacheNodeType = cacheNodeType {
            try container.encode(cacheNodeType, forKey: Key("CacheNodeType"))
        }
        if let clusterEnabled = clusterEnabled {
            try container.encode(clusterEnabled, forKey: Key("ClusterEnabled"))
        }
        if let engine = engine {
            try container.encode(engine, forKey: Key("Engine"))
        }
        if let engineVersion = engineVersion {
            try container.encode(engineVersion, forKey: Key("EngineVersion"))
        }
        if let globalNodeGroups = globalNodeGroups {
            var globalNodeGroupsContainer = container.nestedContainer(keyedBy: Key.self, forKey: Key("GlobalNodeGroups"))
            for (index0, globalnodegroup0) in globalNodeGroups.enumerated() {
                try globalNodeGroupsContainer.encode(globalnodegroup0, forKey: Key("GlobalNodeGroup.\(index0.advanced(by: 1))"))
            }
        }
        if let globalReplicationGroupDescription = globalReplicationGroupDescription {
            try container.encode(globalReplicationGroupDescription, forKey: Key("GlobalReplicationGroupDescription"))
        }
        if let globalReplicationGroupId = globalReplicationGroupId {
            try container.encode(globalReplicationGroupId, forKey: Key("GlobalReplicationGroupId"))
        }
        if let members = members {
            var membersContainer = container.nestedContainer(keyedBy: Key.self, forKey: Key("Members"))
            for (index0, globalreplicationgroupmember0) in members.enumerated() {
                try membersContainer.encode(globalreplicationgroupmember0, forKey: Key("GlobalReplicationGroupMember.\(index0.advanced(by: 1))"))
            }
        }
        if let status = status {
            try container.encode(status, forKey: Key("Status"))
        }
        if let transitEncryptionEnabled = transitEncryptionEnabled {
            try container.encode(transitEncryptionEnabled, forKey: Key("TransitEncryptionEnabled"))
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let globalReplicationGroupIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .globalReplicationGroupId)
        globalReplicationGroupId = globalReplicationGroupIdDecoded
        let globalReplicationGroupDescriptionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .globalReplicationGroupDescription)
        globalReplicationGroupDescription = globalReplicationGroupDescriptionDecoded
        let statusDecoded = try containerValues.decodeIfPresent(String.self, forKey: .status)
        status = statusDecoded
        let cacheNodeTypeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .cacheNodeType)
        cacheNodeType = cacheNodeTypeDecoded
        let engineDecoded = try containerValues.decodeIfPresent(String.self, forKey: .engine)
        engine = engineDecoded
        let engineVersionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .engineVersion)
        engineVersion = engineVersionDecoded
        if containerValues.contains(.members) {
            struct KeyVal0{struct GlobalReplicationGroupMember{}}
            let membersWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.GlobalReplicationGroupMember>.CodingKeys.self, forKey: .members)
            if let membersWrappedContainer = membersWrappedContainer {
                let membersContainer = try membersWrappedContainer.decodeIfPresent([GlobalReplicationGroupMember].self, forKey: .member)
                var membersBuffer:[GlobalReplicationGroupMember]? = nil
                if let membersContainer = membersContainer {
                    membersBuffer = [GlobalReplicationGroupMember]()
                    for structureContainer0 in membersContainer {
                        membersBuffer?.append(structureContainer0)
                    }
                }
                members = membersBuffer
            } else {
                members = []
            }
        } else {
            members = nil
        }
        let clusterEnabledDecoded = try containerValues.decodeIfPresent(Bool.self, forKey: .clusterEnabled)
        clusterEnabled = clusterEnabledDecoded
        if containerValues.contains(.globalNodeGroups) {
            struct KeyVal0{struct GlobalNodeGroup{}}
            let globalNodeGroupsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.GlobalNodeGroup>.CodingKeys.self, forKey: .globalNodeGroups)
            if let globalNodeGroupsWrappedContainer = globalNodeGroupsWrappedContainer {
                let globalNodeGroupsContainer = try globalNodeGroupsWrappedContainer.decodeIfPresent([GlobalNodeGroup].self, forKey: .member)
                var globalNodeGroupsBuffer:[GlobalNodeGroup]? = nil
                if let globalNodeGroupsContainer = globalNodeGroupsContainer {
                    globalNodeGroupsBuffer = [GlobalNodeGroup]()
                    for structureContainer0 in globalNodeGroupsContainer {
                        globalNodeGroupsBuffer?.append(structureContainer0)
                    }
                }
                globalNodeGroups = globalNodeGroupsBuffer
            } else {
                globalNodeGroups = []
            }
        } else {
            globalNodeGroups = nil
        }
        let authTokenEnabledDecoded = try containerValues.decodeIfPresent(Bool.self, forKey: .authTokenEnabled)
        authTokenEnabled = authTokenEnabledDecoded
        let transitEncryptionEnabledDecoded = try containerValues.decodeIfPresent(Bool.self, forKey: .transitEncryptionEnabled)
        transitEncryptionEnabled = transitEncryptionEnabledDecoded
        let atRestEncryptionEnabledDecoded = try containerValues.decodeIfPresent(Bool.self, forKey: .atRestEncryptionEnabled)
        atRestEncryptionEnabled = atRestEncryptionEnabledDecoded
        let aRNDecoded = try containerValues.decodeIfPresent(String.self, forKey: .aRN)
        aRN = aRNDecoded
    }
}
