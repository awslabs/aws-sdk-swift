// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ReplicationGroupPendingModifiedValues: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case authTokenStatus = "AuthTokenStatus"
        case automaticFailoverStatus = "AutomaticFailoverStatus"
        case logDeliveryConfigurations = "LogDeliveryConfigurations"
        case primaryClusterId = "PrimaryClusterId"
        case resharding = "Resharding"
        case userGroups = "UserGroups"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let authTokenStatus = authTokenStatus {
            try container.encode(authTokenStatus, forKey: Key("AuthTokenStatus"))
        }
        if let automaticFailoverStatus = automaticFailoverStatus {
            try container.encode(automaticFailoverStatus, forKey: Key("AutomaticFailoverStatus"))
        }
        if let logDeliveryConfigurations = logDeliveryConfigurations {
            var logDeliveryConfigurationsContainer = container.nestedContainer(keyedBy: Key.self, forKey: Key("LogDeliveryConfigurations"))
            for (index0, pendinglogdeliveryconfiguration0) in logDeliveryConfigurations.enumerated() {
                try logDeliveryConfigurationsContainer.encode(pendinglogdeliveryconfiguration0, forKey: Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let primaryClusterId = primaryClusterId {
            try container.encode(primaryClusterId, forKey: Key("PrimaryClusterId"))
        }
        if let resharding = resharding {
            try container.encode(resharding, forKey: Key("Resharding"))
        }
        if let userGroups = userGroups {
            try container.encode(userGroups, forKey: Key("UserGroups"))
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let primaryClusterIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .primaryClusterId)
        primaryClusterId = primaryClusterIdDecoded
        let automaticFailoverStatusDecoded = try containerValues.decodeIfPresent(PendingAutomaticFailoverStatus.self, forKey: .automaticFailoverStatus)
        automaticFailoverStatus = automaticFailoverStatusDecoded
        let reshardingDecoded = try containerValues.decodeIfPresent(ReshardingStatus.self, forKey: .resharding)
        resharding = reshardingDecoded
        let authTokenStatusDecoded = try containerValues.decodeIfPresent(AuthTokenUpdateStatus.self, forKey: .authTokenStatus)
        authTokenStatus = authTokenStatusDecoded
        let userGroupsDecoded = try containerValues.decodeIfPresent(UserGroupsUpdateStatus.self, forKey: .userGroups)
        userGroups = userGroupsDecoded
        if containerValues.contains(.logDeliveryConfigurations) {
            struct KeyVal0{struct member{}}
            let logDeliveryConfigurationsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .logDeliveryConfigurations)
            if let logDeliveryConfigurationsWrappedContainer = logDeliveryConfigurationsWrappedContainer {
                let logDeliveryConfigurationsContainer = try logDeliveryConfigurationsWrappedContainer.decodeIfPresent([PendingLogDeliveryConfiguration].self, forKey: .member)
                var logDeliveryConfigurationsBuffer:[PendingLogDeliveryConfiguration]? = nil
                if let logDeliveryConfigurationsContainer = logDeliveryConfigurationsContainer {
                    logDeliveryConfigurationsBuffer = [PendingLogDeliveryConfiguration]()
                    for structureContainer0 in logDeliveryConfigurationsContainer {
                        logDeliveryConfigurationsBuffer?.append(structureContainer0)
                    }
                }
                logDeliveryConfigurations = logDeliveryConfigurationsBuffer
            } else {
                logDeliveryConfigurations = []
            }
        } else {
            logDeliveryConfigurations = nil
        }
    }
}
