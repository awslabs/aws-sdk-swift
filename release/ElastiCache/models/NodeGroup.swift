// Code generated by smithy-swift-codegen. DO NOT EDIT!



/// <p>Represents a collection of cache nodes in a replication group.
///             One node in the node group is the read/write primary node.
///             All the other nodes are read-only Replica nodes.</p>
public struct NodeGroup: Equatable {
    /// <p>The identifier for the node group (shard). A Redis (cluster mode disabled) replication group contains only 1 node group; therefore, the node group ID is 0001.
    ///             A Redis (cluster mode enabled) replication group contains 1 to 90 node groups numbered 0001 to 0090. Optionally, the user can provide the id for
    ///             a node group. </p>
    public let nodeGroupId: String?
    /// <p>A list containing information about individual nodes within the node group (shard).</p>
    public let nodeGroupMembers: [NodeGroupMember]?
    /// <p>The endpoint of the primary node in this node group (shard).</p>
    public let primaryEndpoint: Endpoint?
    /// <p>The endpoint of the replica nodes in this node group (shard).</p>
    public let readerEndpoint: Endpoint?
    /// <p>The keyspace for this node group (shard).</p>
    public let slots: String?
    /// <p>The current state of this replication group - <code>creating</code>,
    ///             <code>available</code>, <code>modifying</code>, <code>deleting</code>.</p>
    public let status: String?

    public init (
        nodeGroupId: String? = nil,
        nodeGroupMembers: [NodeGroupMember]? = nil,
        primaryEndpoint: Endpoint? = nil,
        readerEndpoint: Endpoint? = nil,
        slots: String? = nil,
        status: String? = nil
    )
    {
        self.nodeGroupId = nodeGroupId
        self.nodeGroupMembers = nodeGroupMembers
        self.primaryEndpoint = primaryEndpoint
        self.readerEndpoint = readerEndpoint
        self.slots = slots
        self.status = status
    }
}
