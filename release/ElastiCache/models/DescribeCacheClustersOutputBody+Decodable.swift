// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeCacheClustersOutputBody: Equatable {
    public let marker: String?
    public let cacheClusters: [CacheCluster]?
}

extension DescribeCacheClustersOutputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case cacheClusters = "CacheClusters"
        case marker = "Marker"
    }

    public init (from decoder: Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: Key("DescribeCacheClustersResult"))
        let markerDecoded = try containerValues.decodeIfPresent(String.self, forKey: .marker)
        marker = markerDecoded
        if containerValues.contains(.cacheClusters) {
            struct KeyVal0{struct CacheCluster{}}
            let cacheClustersWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.CacheCluster>.CodingKeys.self, forKey: .cacheClusters)
            if let cacheClustersWrappedContainer = cacheClustersWrappedContainer {
                let cacheClustersContainer = try cacheClustersWrappedContainer.decodeIfPresent([CacheCluster].self, forKey: .member)
                var cacheClustersBuffer:[CacheCluster]? = nil
                if let cacheClustersContainer = cacheClustersContainer {
                    cacheClustersBuffer = [CacheCluster]()
                    for structureContainer0 in cacheClustersContainer {
                        cacheClustersBuffer?.append(structureContainer0)
                    }
                }
                cacheClusters = cacheClustersBuffer
            } else {
                cacheClusters = []
            }
        } else {
            cacheClusters = nil
        }
    }
}
