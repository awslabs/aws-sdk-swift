// Code generated by smithy-swift-codegen. DO NOT EDIT!



/// <p>Represents the input of a <code>ModifyReplicationGroups</code> operation.</p>
public struct ModifyReplicationGroupInput: Equatable {
    /// <p>If <code>true</code>, this parameter causes the modifications in this request and any
    ///             pending modifications to be applied, asynchronously and as soon as possible, regardless
    ///             of the <code>PreferredMaintenanceWindow</code> setting for the replication group.</p>
    ///         <p>If <code>false</code>, changes to the nodes in the replication group are applied on
    ///             the next maintenance reboot, or the next failure reboot, whichever occurs first.</p>
    ///         <p>Valid values: <code>true</code> | <code>false</code>
    ///          </p>
    ///         <p>Default: <code>false</code>
    ///          </p>
    public let applyImmediately: Bool
    /// <p>Reserved parameter. The password used to access a password protected server. This parameter must be specified with the <code>auth-token-update-strategy </code>
    ///             parameter.
    ///             Password constraints:</p>
    ///         <ul>
    ///             <li>
    ///                <p>Must be only printable ASCII characters</p>
    ///             </li>
    ///             <li>
    ///                <p>Must be at least 16 characters and no more than 128 characters in length</p>
    ///             </li>
    ///             <li>
    ///                <p>Cannot contain any of the following characters: '/', '"', or '@', '%'</p>
    ///             </li>
    ///          </ul>
    ///         <p>
    ///
    ///             For more information, see AUTH password at <a href="http://redis.io/commands/AUTH">AUTH</a>.</p>
    public let authToken: String?
    /// <p>Specifies the strategy to use to update the AUTH token. This parameter must be specified with the <code>auth-token</code> parameter.
    ///                 Possible values:</p>
    ///             <ul>
    ///             <li>
    ///                <p>Rotate</p>
    ///             </li>
    ///             <li>
    ///                <p>Set</p>
    ///             </li>
    ///          </ul>
    ///             <p>
    ///                 For more information, see <a href="http://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/auth.html">Authenticating Users with Redis AUTH</a>
    ///          </p>
    public let authTokenUpdateStrategy: AuthTokenUpdateStrategyType?
    /// <p>This parameter is currently disabled.</p>
    public let autoMinorVersionUpgrade: Bool?
    /// <p>Determines whether a read replica is automatically promoted to read/write primary if the existing primary encounters a failure.</p>
    ///         <p>Valid values: <code>true</code> | <code>false</code>
    ///          </p>
    public let automaticFailoverEnabled: Bool?
    /// <p>A valid cache node type that you want to scale this replication group to.</p>
    public let cacheNodeType: String?
    /// <p>The name of the cache parameter group to apply to all of the clusters in this replication group.
    ///             This change is asynchronously applied as soon as possible for parameters when the
    ///             <code>ApplyImmediately</code> parameter is specified as <code>true</code> for this request.</p>
    public let cacheParameterGroupName: String?
    /// <p>A list of cache security group names to authorize for the clusters in this replication group. This change is asynchronously applied as soon as possible.</p>
    ///         <p>This parameter can be used only with replication group containing clusters running outside of an Amazon Virtual Private Cloud (Amazon VPC).</p>
    ///         <p>Constraints: Must contain no more than 255 alphanumeric characters. Must not be <code>Default</code>.</p>
    public let cacheSecurityGroupNames: [String]?
    /// <p>The upgraded version of the cache engine to be run on the clusters in the replication group.</p>
    ///
    ///         <p>
    ///             <b>Important:</b> You can upgrade to a newer engine version (see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/SelectEngine.html#VersionManagement">Selecting a Cache Engine and Version</a>), but you cannot downgrade to an earlier engine version.
    ///             If you want to use an earlier engine version,
    ///             you must delete the existing replication group and create it anew with the earlier engine version. </p>
    public let engineVersion: String?
    /// <p>Specifies the destination, format and type of the logs.</p>
    public let logDeliveryConfigurations: [LogDeliveryConfigurationRequest]?
    /// <p>A list of tags to be added to this resource. A tag is a key-value pair. A tag key must be accompanied by a tag value, although null is accepted.</p>
    public let multiAZEnabled: Bool?
    /// <p>Deprecated. This parameter is not used.</p>
    @available(*, deprecated)
    public let nodeGroupId: String?
    /// <p>The Amazon Resource Name (ARN) of the Amazon SNS topic to which notifications are sent.</p>
    ///         <note>
    ///             <p>The Amazon SNS topic owner must be same as the replication group owner. </p>
    ///          </note>
    public let notificationTopicArn: String?
    /// <p>The status of the Amazon SNS notification topic for the replication group.
    ///             Notifications are sent only if the status is <code>active</code>.</p>
    ///         <p>Valid values: <code>active</code> | <code>inactive</code>
    ///          </p>
    public let notificationTopicStatus: String?
    /// <p>Specifies the weekly time range during which maintenance
    ///    on the cluster is performed. It is specified as a range in
    ///    the format ddd:hh24:mi-ddd:hh24:mi (24H Clock UTC). The minimum
    ///    maintenance window is a 60 minute period.</p>
    ///          <p>Valid values for <code>ddd</code> are:</p>
    ///          <ul>
    ///             <li>
    ///                <p>
    ///                   <code>sun</code>
    ///                </p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>mon</code>
    ///                </p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>tue</code>
    ///                </p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>wed</code>
    ///                </p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>thu</code>
    ///                </p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>fri</code>
    ///                </p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>sat</code>
    ///                </p>
    ///             </li>
    ///          </ul>
    ///          <p>Example: <code>sun:23:00-mon:01:30</code>
    ///          </p>
    public let preferredMaintenanceWindow: String?
    /// <p>For replication groups with a single primary,
    ///             if this parameter is specified, ElastiCache promotes the specified cluster in the specified replication group to the primary role.
    ///             The nodes of all other clusters in the replication group are read replicas.</p>
    public let primaryClusterId: String?
    /// <p>Removes the user groups that can access this replication group.</p>
    public let removeUserGroups: Bool?
    /// <p>A description for the replication group. Maximum length is 255 characters.</p>
    public let replicationGroupDescription: String?
    /// <p>The identifier of the replication group to modify.</p>
    public let replicationGroupId: String?
    /// <p>Specifies the VPC Security Groups associated with the clusters in the replication group.</p>
    ///         <p>This parameter can be used only with replication group containing clusters running in
    ///             an Amazon Virtual Private Cloud (Amazon VPC).</p>
    public let securityGroupIds: [String]?
    /// <p>The number of days for which ElastiCache retains automatic node group (shard) snapshots before
    ///             deleting them. For example, if you set <code>SnapshotRetentionLimit</code> to 5, a
    ///             snapshot that was taken today is retained for 5 days before being deleted.</p>
    ///         <p>
    ///             <b>Important</b> If the value of SnapshotRetentionLimit is set to zero (0),
    ///             backups are turned off.</p>
    public let snapshotRetentionLimit: Int?
    /// <p>The daily time range (in UTC) during which ElastiCache  begins taking a daily snapshot of
    ///             the node group (shard) specified by <code>SnapshottingClusterId</code>.</p>
    ///         <p>Example: <code>05:00-09:00</code>
    ///          </p>
    ///         <p>If you do not specify this parameter, ElastiCache  automatically chooses an appropriate time range.</p>
    public let snapshotWindow: String?
    /// <p>The cluster ID that is used as the daily snapshot source for the replication group.
    ///             This parameter cannot be set for Redis (cluster mode enabled) replication groups.</p>
    public let snapshottingClusterId: String?
    /// <p>The user group you are associating with the replication group.</p>
    public let userGroupIdsToAdd: [String]?
    /// <p>The user group to remove, meaning the users in the group no longer can access the replication group.</p>
    public let userGroupIdsToRemove: [String]?

    public init (
        applyImmediately: Bool = false,
        authToken: String? = nil,
        authTokenUpdateStrategy: AuthTokenUpdateStrategyType? = nil,
        autoMinorVersionUpgrade: Bool? = nil,
        automaticFailoverEnabled: Bool? = nil,
        cacheNodeType: String? = nil,
        cacheParameterGroupName: String? = nil,
        cacheSecurityGroupNames: [String]? = nil,
        engineVersion: String? = nil,
        logDeliveryConfigurations: [LogDeliveryConfigurationRequest]? = nil,
        multiAZEnabled: Bool? = nil,
        nodeGroupId: String? = nil,
        notificationTopicArn: String? = nil,
        notificationTopicStatus: String? = nil,
        preferredMaintenanceWindow: String? = nil,
        primaryClusterId: String? = nil,
        removeUserGroups: Bool? = nil,
        replicationGroupDescription: String? = nil,
        replicationGroupId: String? = nil,
        securityGroupIds: [String]? = nil,
        snapshotRetentionLimit: Int? = nil,
        snapshotWindow: String? = nil,
        snapshottingClusterId: String? = nil,
        userGroupIdsToAdd: [String]? = nil,
        userGroupIdsToRemove: [String]? = nil
    )
    {
        self.applyImmediately = applyImmediately
        self.authToken = authToken
        self.authTokenUpdateStrategy = authTokenUpdateStrategy
        self.autoMinorVersionUpgrade = autoMinorVersionUpgrade
        self.automaticFailoverEnabled = automaticFailoverEnabled
        self.cacheNodeType = cacheNodeType
        self.cacheParameterGroupName = cacheParameterGroupName
        self.cacheSecurityGroupNames = cacheSecurityGroupNames
        self.engineVersion = engineVersion
        self.logDeliveryConfigurations = logDeliveryConfigurations
        self.multiAZEnabled = multiAZEnabled
        self.nodeGroupId = nodeGroupId
        self.notificationTopicArn = notificationTopicArn
        self.notificationTopicStatus = notificationTopicStatus
        self.preferredMaintenanceWindow = preferredMaintenanceWindow
        self.primaryClusterId = primaryClusterId
        self.removeUserGroups = removeUserGroups
        self.replicationGroupDescription = replicationGroupDescription
        self.replicationGroupId = replicationGroupId
        self.securityGroupIds = securityGroupIds
        self.snapshotRetentionLimit = snapshotRetentionLimit
        self.snapshotWindow = snapshotWindow
        self.snapshottingClusterId = snapshottingClusterId
        self.userGroupIdsToAdd = userGroupIdsToAdd
        self.userGroupIdsToRemove = userGroupIdsToRemove
    }
}
