// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeCacheSubnetGroupsOutputBody: Equatable {
    public let marker: String?
    public let cacheSubnetGroups: [CacheSubnetGroup]?
}

extension DescribeCacheSubnetGroupsOutputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case cacheSubnetGroups = "CacheSubnetGroups"
        case marker = "Marker"
    }

    public init (from decoder: Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: Key("DescribeCacheSubnetGroupsResult"))
        let markerDecoded = try containerValues.decodeIfPresent(String.self, forKey: .marker)
        marker = markerDecoded
        if containerValues.contains(.cacheSubnetGroups) {
            struct KeyVal0{struct CacheSubnetGroup{}}
            let cacheSubnetGroupsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.CacheSubnetGroup>.CodingKeys.self, forKey: .cacheSubnetGroups)
            if let cacheSubnetGroupsWrappedContainer = cacheSubnetGroupsWrappedContainer {
                let cacheSubnetGroupsContainer = try cacheSubnetGroupsWrappedContainer.decodeIfPresent([CacheSubnetGroup].self, forKey: .member)
                var cacheSubnetGroupsBuffer:[CacheSubnetGroup]? = nil
                if let cacheSubnetGroupsContainer = cacheSubnetGroupsContainer {
                    cacheSubnetGroupsBuffer = [CacheSubnetGroup]()
                    for structureContainer0 in cacheSubnetGroupsContainer {
                        cacheSubnetGroupsBuffer?.append(structureContainer0)
                    }
                }
                cacheSubnetGroups = cacheSubnetGroupsBuffer
            } else {
                cacheSubnetGroups = []
            }
        } else {
            cacheSubnetGroups = nil
        }
    }
}
