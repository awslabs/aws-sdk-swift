// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension NodeGroupUpdateStatus: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case nodeGroupId = "NodeGroupId"
        case nodeGroupMemberUpdateStatus = "NodeGroupMemberUpdateStatus"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let nodeGroupId = nodeGroupId {
            try container.encode(nodeGroupId, forKey: Key("NodeGroupId"))
        }
        if let nodeGroupMemberUpdateStatus = nodeGroupMemberUpdateStatus {
            var nodeGroupMemberUpdateStatusContainer = container.nestedContainer(keyedBy: Key.self, forKey: Key("NodeGroupMemberUpdateStatus"))
            for (index0, nodegroupmemberupdatestatus0) in nodeGroupMemberUpdateStatus.enumerated() {
                try nodeGroupMemberUpdateStatusContainer.encode(nodegroupmemberupdatestatus0, forKey: Key("NodeGroupMemberUpdateStatus.\(index0.advanced(by: 1))"))
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nodeGroupIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nodeGroupId)
        nodeGroupId = nodeGroupIdDecoded
        if containerValues.contains(.nodeGroupMemberUpdateStatus) {
            struct KeyVal0{struct NodeGroupMemberUpdateStatus{}}
            let nodeGroupMemberUpdateStatusWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.NodeGroupMemberUpdateStatus>.CodingKeys.self, forKey: .nodeGroupMemberUpdateStatus)
            if let nodeGroupMemberUpdateStatusWrappedContainer = nodeGroupMemberUpdateStatusWrappedContainer {
                let nodeGroupMemberUpdateStatusContainer = try nodeGroupMemberUpdateStatusWrappedContainer.decodeIfPresent([NodeGroupMemberUpdateStatus].self, forKey: .member)
                var nodeGroupMemberUpdateStatusBuffer:[NodeGroupMemberUpdateStatus]? = nil
                if let nodeGroupMemberUpdateStatusContainer = nodeGroupMemberUpdateStatusContainer {
                    nodeGroupMemberUpdateStatusBuffer = [NodeGroupMemberUpdateStatus]()
                    for structureContainer0 in nodeGroupMemberUpdateStatusContainer {
                        nodeGroupMemberUpdateStatusBuffer?.append(structureContainer0)
                    }
                }
                nodeGroupMemberUpdateStatus = nodeGroupMemberUpdateStatusBuffer
            } else {
                nodeGroupMemberUpdateStatus = []
            }
        } else {
            nodeGroupMemberUpdateStatus = nil
        }
    }
}
