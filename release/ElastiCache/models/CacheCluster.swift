// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

/// <p>Contains all of the attributes of a specific cluster.</p>
public struct CacheCluster: Equatable {
    /// <p>The ARN (Amazon Resource Name) of the cache cluster.</p>
    public let aRN: String?
    /// <p>A flag that enables encryption at-rest when set to <code>true</code>.</p>
    ///         <p>You cannot modify the value of <code>AtRestEncryptionEnabled</code>
    ///             after the cluster is created. To enable at-rest encryption on a cluster
    ///             you must set <code>AtRestEncryptionEnabled</code> to <code>true</code>
    ///             when you create a cluster.</p>
    ///         <p>
    ///             <b>Required:</b>
    ///             Only available when creating a replication group in an Amazon VPC using redis version <code>3.2.6</code>, <code>4.x</code> or later.</p>
    ///         <p>Default: <code>false</code>
    ///          </p>
    public let atRestEncryptionEnabled: Bool?
    /// <p>A flag that enables using an <code>AuthToken</code> (password)
    ///             when issuing Redis commands.</p>
    ///         <p>Default: <code>false</code>
    ///          </p>
    public let authTokenEnabled: Bool?
    /// <p>The date the auth token was last modified</p>
    public let authTokenLastModifiedDate: Date?
    /// <p>This parameter is currently disabled.</p>
    public let autoMinorVersionUpgrade: Bool
    /// <p>The date and time when the cluster was created.</p>
    public let cacheClusterCreateTime: Date?
    /// <p>The user-supplied identifier of the cluster.
    ///             This identifier is a unique key that identifies a cluster.</p>
    public let cacheClusterId: String?
    /// <p>The current state of this cluster, one of the following values:
    ///                                                      <code>available</code>,
    ///                                                      <code>creating</code>,
    ///                                                      <code>deleted</code>,
    ///                                                      <code>deleting</code>,
    ///                                                      <code>incompatible-network</code>,
    ///                                                      <code>modifying</code>,
    ///                                                      <code>rebooting cluster nodes</code>,
    ///                                                      <code>restore-failed</code>, or
    ///                                                      <code>snapshotting</code>.</p>
    public let cacheClusterStatus: String?
    /// <p>The name of the compute and memory capacity node type for the cluster.</p>
    ///
    ///         <p>The following node types are supported by ElastiCache.
    /// 				Generally speaking, the current generation types provide more memory and computational power
    /// 			at lower cost when compared to their equivalent previous generation counterparts.</p>
    /// 		       <ul>
    ///             <li>
    ///                <p>General purpose:</p>
    /// 				           <ul>
    ///                   <li>
    ///                      <p>Current generation: </p>
    /// 					
    ///     						           <p>
    ///                         <b>M6g node types</b> (available only for Redis engine version 5.0.6 onward and for Memcached engine version 1.5.16 onward).</p>
    /// 						               <p>	
    ///                         <code>cache.m6g.large</code>,
    /// 							<code>cache.m6g.xlarge</code>,
    /// 							<code>cache.m6g.2xlarge</code>,
    /// 							<code>cache.m6g.4xlarge</code>,
    /// 							<code>cache.m6g.8xlarge</code>,
    /// 							<code>cache.m6g.12xlarge</code>,
    /// 							<code>cache.m6g.16xlarge</code>
    /// 							
    /// 							
    /// 							
    /// 						               </p>	
    /// 						
    /// 						               <note>
    ///                         <p>For region availability, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/CacheNodes.SupportedTypes.html#CacheNodes.SupportedTypesByRegion">Supported Node Types</a>
    ///                         </p>
    ///                      </note>
    ///     					
    ///     					
    ///     					            <p>
    ///                         <b>M5 node types:</b>
    ///     						              <code>cache.m5.large</code>,
    ///     						<code>cache.m5.xlarge</code>,
    ///     						<code>cache.m5.2xlarge</code>,
    ///     						<code>cache.m5.4xlarge</code>,
    ///     						<code>cache.m5.12xlarge</code>,
    ///     						<code>cache.m5.24xlarge</code>
    ///     						
    ///     						
    ///     						           </p>	
    ///     						
    /// 						
    /// 						               <p>
    ///                         <b>M4 node types:</b>
    ///     						              <code>cache.m4.large</code>,
    ///     						<code>cache.m4.xlarge</code>,
    ///     						<code>cache.m4.2xlarge</code>,
    ///     						<code>cache.m4.4xlarge</code>,
    ///     						<code>cache.m4.10xlarge</code>
    ///                      </p>
    ///     					            <p>
    ///                         <b>T3 node types:</b>
    /// 					                   <code>cache.t3.micro</code>,
    ///     						<code>cache.t3.small</code>,
    ///     						<code>cache.t3.medium</code>
    ///                      </p>
    ///     								
    ///     						
    ///     				             <p>
    ///                         <b>T2 node types:</b>
    /// 					                   <code>cache.t2.micro</code>,
    ///     						<code>cache.t2.small</code>,
    ///     						<code>cache.t2.medium</code>
    ///                      </p>
    ///     						
    ///     						
    ///     						
    ///     						
    ///     						        </li>
    ///                   <li>
    ///                      <p>Previous generation: (not recommended)</p>
    /// 						               <p>
    ///                         <b>T1 node types:</b>
    /// 					                   <code>cache.t1.micro</code>
    ///                      </p>
    /// 					
    /// 						               <p>
    ///                         <b>M1 node types:</b>
    /// 						                  <code>cache.m1.small</code>,
    /// 						   <code>cache.m1.medium</code>,
    /// 						   <code>cache.m1.large</code>,
    /// 						   <code>cache.m1.xlarge</code>
    ///                      </p>
    /// 						
    /// 						               <p>
    ///                         <b>M3 node types:</b>
    ///     						              <code>cache.m3.medium</code>,
    ///     						<code>cache.m3.large</code>,
    ///     						<code>cache.m3.xlarge</code>,
    ///     						<code>cache.m3.2xlarge</code>
    ///                      </p>
    /// 						
    /// 						            </li>
    ///                </ul>
    ///             </li>
    ///             <li>
    ///                <p>Compute optimized:</p>
    ///
    /// 				           <ul>
    ///                   <li>
    ///                      <p>Previous generation: (not recommended)</p>
    /// 			                  <p>
    ///                         <b>C1 node types:</b>
    /// 			                     <code>cache.c1.xlarge</code>
    ///                      </p>
    ///                   </li>
    ///                </ul>
    ///             </li>
    ///             <li>
    ///                <p>Memory optimized:</p>
    /// 				           <ul>
    ///                   <li>
    ///                      <p>Current generation: </p>
    /// 											          <p>
    ///                         <b>R6g node types</b> (available only for Redis engine version 5.0.6 onward and for Memcached engine version 1.5.16 onward).</p>
    /// 						
    /// 						
    /// 						
    /// 						
    /// 						               <p>	
    /// 							                 <code>cache.r6g.large</code>,
    /// 							<code>cache.r6g.xlarge</code>,
    /// 							<code>cache.r6g.2xlarge</code>,
    /// 							<code>cache.r6g.4xlarge</code>,
    /// 							<code>cache.r6g.8xlarge</code>,
    /// 							<code>cache.r6g.12xlarge</code>,
    /// 							<code>cache.r6g.16xlarge</code>
    /// 							
    /// 							
    /// 							
    /// 							
    /// 							
    /// 							
    /// 						               </p>	
    /// 						               <note>
    ///                         <p>For region availability, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/CacheNodes.SupportedTypes.html#CacheNodes.SupportedTypesByRegion">Supported Node Types</a>
    ///                         </p>
    ///                      </note>
    /// 					                <p>
    ///                         <b>R5 node types:</b>
    ///     					               <code>cache.r5.large</code>,
    ///     					   <code>cache.r5.xlarge</code>,
    ///     					   <code>cache.r5.2xlarge</code>,
    ///     					   <code>cache.r5.4xlarge</code>,
    ///     					   <code>cache.r5.12xlarge</code>,
    ///     					   <code>cache.r5.24xlarge</code>
    ///                      </p>
    /// 						
    ///     					            <p>
    ///                         <b>R4 node types:</b>
    ///     					               <code>cache.r4.large</code>,
    ///     					   <code>cache.r4.xlarge</code>,
    ///     					   <code>cache.r4.2xlarge</code>,
    ///     					   <code>cache.r4.4xlarge</code>,
    ///     					   <code>cache.r4.8xlarge</code>,
    ///     					   <code>cache.r4.16xlarge</code>
    ///                      </p>
    ///     					
    ///     					
    ///     					
    ///
    ///
    ///     					
    ///     					
    ///     					
    ///     					
    ///     					
    ///     					
    ///     					         </li>
    ///                   <li>
    ///                      <p>Previous generation: (not recommended)</p>
    ///                         <p>
    ///                         <b>M2 node types:</b>						
    ///     					               <code>cache.m2.xlarge</code>,
    ///     						<code>cache.m2.2xlarge</code>,
    ///     						<code>cache.m2.4xlarge</code>
    ///                      </p>
    ///     						
    ///     						           <p>
    ///                         <b>R3 node types:</b>
    ///     					               <code>cache.r3.large</code>,
    ///     						<code>cache.r3.xlarge</code>,
    ///     						<code>cache.r3.2xlarge</code>,
    ///     						<code>cache.r3.4xlarge</code>,
    ///     						<code>cache.r3.8xlarge</code>
    ///                      </p>
    ///     						
    ///     						        </li>
    ///                </ul>
    ///             </li>
    ///          </ul>
    /// 				
    /// 		       <p>
    ///             <b>Additional node type info</b>
    ///          </p>
    /// 		       <ul>
    ///             <li>
    ///                <p>All current generation instance types are created in Amazon VPC by default.</p>
    ///             </li>
    ///             <li>
    ///                <p>Redis append-only files (AOF) are not supported for T1 or T2 instances.</p>
    ///             </li>
    ///             <li>
    ///                <p>Redis Multi-AZ with automatic failover is not supported on T1 instances.</p>
    ///             </li>
    ///             <li>
    ///                <p>Redis configuration variables <code>appendonly</code> and
    /// 				<code>appendfsync</code> are not supported on Redis version 2.8.22 and later.</p>
    ///             </li>
    ///          </ul>
    public let cacheNodeType: String?
    /// <p>A list of cache nodes that are members of the cluster.</p>
    public let cacheNodes: [CacheNode]?
    /// <p>Status of the cache parameter group.</p>
    public let cacheParameterGroup: CacheParameterGroupStatus?
    /// <p>A list of cache security group elements, composed of name and status sub-elements.</p>
    public let cacheSecurityGroups: [CacheSecurityGroupMembership]?
    /// <p>The name of the cache subnet group associated with the cluster.</p>
    public let cacheSubnetGroupName: String?
    /// <p>The URL of the web page where you can download the latest ElastiCache client library.</p>
    public let clientDownloadLandingPage: String?
    /// <p>Represents a Memcached cluster endpoint which can be used by an application to connect to any node in the cluster.
    ///             The configuration endpoint will always have <code>.cfg</code> in it.</p>
    ///         <p>Example: <code>mem-3.9dvc4r<u>.cfg</u>.usw2.cache.amazonaws.com:11211</code>
    ///          </p>
    public let configurationEndpoint: Endpoint?
    /// <p>The name of the cache engine (<code>memcached</code> or
    ///             <code>redis</code>) to be used for this cluster.</p>
    public let engine: String?
    /// <p>The version of the cache engine that is used in this cluster.</p>
    public let engineVersion: String?
    /// <p>Returns the destination, format and type of the logs.</p>
    public let logDeliveryConfigurations: [LogDeliveryConfiguration]?
    /// <p>Describes a notification topic and its status.
    ///             Notification topics are used for publishing ElastiCache events to subscribers using Amazon Simple Notification Service (SNS). </p>
    public let notificationConfiguration: NotificationConfiguration?
    /// <p>The number of cache nodes in the cluster.</p>
    ///         <p>For clusters running Redis, this value must be 1. For clusters running Memcached,
    ///             this value must be between 1 and 40.</p>
    public let numCacheNodes: Int?
    /// <p>A group of settings that are applied to the cluster in the future,
    ///             or that are currently being applied.</p>
    public let pendingModifiedValues: PendingModifiedValues?
    /// <p>The name of the Availability Zone in which the cluster is located or "Multiple"
    ///             if the cache nodes are located in different Availability Zones.</p>
    public let preferredAvailabilityZone: String?
    /// <p>Specifies the weekly time range during which maintenance
    ///    on the cluster is performed. It is specified as a range in
    ///    the format ddd:hh24:mi-ddd:hh24:mi (24H Clock UTC). The minimum
    ///    maintenance window is a 60 minute period.</p>
    ///          <p>Valid values for <code>ddd</code> are:</p>
    ///          <ul>
    ///             <li>
    ///                <p>
    ///                   <code>sun</code>
    ///                </p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>mon</code>
    ///                </p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>tue</code>
    ///                </p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>wed</code>
    ///                </p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>thu</code>
    ///                </p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>fri</code>
    ///                </p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>sat</code>
    ///                </p>
    ///             </li>
    ///          </ul>
    ///          <p>Example: <code>sun:23:00-mon:01:30</code>
    ///          </p>
    public let preferredMaintenanceWindow: String?
    /// <p>The outpost ARN in which the cache cluster is created.</p>
    public let preferredOutpostArn: String?
    /// <p>The replication group to which this cluster belongs.
    ///             If this field is empty, the cluster is not associated with any replication group.</p>
    public let replicationGroupId: String?
    /// <p>A boolean value indicating whether log delivery is enabled for the replication group.</p>
    public let replicationGroupLogDeliveryEnabled: Bool
    /// <p>A list of VPC Security Groups associated with the cluster.</p>
    public let securityGroups: [SecurityGroupMembership]?
    /// <p>The number of days for which ElastiCache retains automatic cluster snapshots before
    ///             deleting them. For example, if you set <code>SnapshotRetentionLimit</code> to 5,  a
    ///             snapshot that was taken today is retained for 5 days before being deleted.</p>
    ///         <important>
    ///             <p>
    ///           If the value of SnapshotRetentionLimit is set to zero (0), backups are turned off.</p>
    ///          </important>
    public let snapshotRetentionLimit: Int?
    /// <p>The daily time range (in UTC) during which ElastiCache begins taking a
    ///             daily snapshot of your cluster.</p>
    ///         <p>Example: <code>05:00-09:00</code>
    ///          </p>
    public let snapshotWindow: String?
    /// <p>A flag that enables in-transit encryption when set to <code>true</code>.</p>
    ///         <p>You cannot modify the value of <code>TransitEncryptionEnabled</code>
    ///             after the cluster is created. To enable in-transit encryption on a cluster
    ///             you must set <code>TransitEncryptionEnabled</code> to <code>true</code>
    ///             when you create a cluster.</p>
    ///         <p>
    ///             <b>Required:</b>
    ///             Only available when creating a replication group in an Amazon VPC using redis version <code>3.2.6</code>, <code>4.x</code> or later.</p>
    ///         <p>Default: <code>false</code>
    ///          </p>
    public let transitEncryptionEnabled: Bool?

    public init (
        aRN: String? = nil,
        atRestEncryptionEnabled: Bool? = nil,
        authTokenEnabled: Bool? = nil,
        authTokenLastModifiedDate: Date? = nil,
        autoMinorVersionUpgrade: Bool = false,
        cacheClusterCreateTime: Date? = nil,
        cacheClusterId: String? = nil,
        cacheClusterStatus: String? = nil,
        cacheNodeType: String? = nil,
        cacheNodes: [CacheNode]? = nil,
        cacheParameterGroup: CacheParameterGroupStatus? = nil,
        cacheSecurityGroups: [CacheSecurityGroupMembership]? = nil,
        cacheSubnetGroupName: String? = nil,
        clientDownloadLandingPage: String? = nil,
        configurationEndpoint: Endpoint? = nil,
        engine: String? = nil,
        engineVersion: String? = nil,
        logDeliveryConfigurations: [LogDeliveryConfiguration]? = nil,
        notificationConfiguration: NotificationConfiguration? = nil,
        numCacheNodes: Int? = nil,
        pendingModifiedValues: PendingModifiedValues? = nil,
        preferredAvailabilityZone: String? = nil,
        preferredMaintenanceWindow: String? = nil,
        preferredOutpostArn: String? = nil,
        replicationGroupId: String? = nil,
        replicationGroupLogDeliveryEnabled: Bool = false,
        securityGroups: [SecurityGroupMembership]? = nil,
        snapshotRetentionLimit: Int? = nil,
        snapshotWindow: String? = nil,
        transitEncryptionEnabled: Bool? = nil
    )
    {
        self.aRN = aRN
        self.atRestEncryptionEnabled = atRestEncryptionEnabled
        self.authTokenEnabled = authTokenEnabled
        self.authTokenLastModifiedDate = authTokenLastModifiedDate
        self.autoMinorVersionUpgrade = autoMinorVersionUpgrade
        self.cacheClusterCreateTime = cacheClusterCreateTime
        self.cacheClusterId = cacheClusterId
        self.cacheClusterStatus = cacheClusterStatus
        self.cacheNodeType = cacheNodeType
        self.cacheNodes = cacheNodes
        self.cacheParameterGroup = cacheParameterGroup
        self.cacheSecurityGroups = cacheSecurityGroups
        self.cacheSubnetGroupName = cacheSubnetGroupName
        self.clientDownloadLandingPage = clientDownloadLandingPage
        self.configurationEndpoint = configurationEndpoint
        self.engine = engine
        self.engineVersion = engineVersion
        self.logDeliveryConfigurations = logDeliveryConfigurations
        self.notificationConfiguration = notificationConfiguration
        self.numCacheNodes = numCacheNodes
        self.pendingModifiedValues = pendingModifiedValues
        self.preferredAvailabilityZone = preferredAvailabilityZone
        self.preferredMaintenanceWindow = preferredMaintenanceWindow
        self.preferredOutpostArn = preferredOutpostArn
        self.replicationGroupId = replicationGroupId
        self.replicationGroupLogDeliveryEnabled = replicationGroupLogDeliveryEnabled
        self.securityGroups = securityGroups
        self.snapshotRetentionLimit = snapshotRetentionLimit
        self.snapshotWindow = snapshotWindow
        self.transitEncryptionEnabled = transitEncryptionEnabled
    }
}
