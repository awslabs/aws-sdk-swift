// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ConfigureShard: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case newReplicaCount = "NewReplicaCount"
        case nodeGroupId = "NodeGroupId"
        case preferredAvailabilityZones = "PreferredAvailabilityZones"
        case preferredOutpostArns = "PreferredOutpostArns"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if newReplicaCount != 0 {
            try container.encode(newReplicaCount, forKey: Key("NewReplicaCount"))
        }
        if let nodeGroupId = nodeGroupId {
            try container.encode(nodeGroupId, forKey: Key("NodeGroupId"))
        }
        if let preferredAvailabilityZones = preferredAvailabilityZones {
            var preferredAvailabilityZonesContainer = container.nestedContainer(keyedBy: Key.self, forKey: Key("PreferredAvailabilityZones"))
            for (index0, string0) in preferredAvailabilityZones.enumerated() {
                try preferredAvailabilityZonesContainer.encode(string0, forKey: Key("PreferredAvailabilityZone.\(index0.advanced(by: 1))"))
            }
        }
        if let preferredOutpostArns = preferredOutpostArns {
            var preferredOutpostArnsContainer = container.nestedContainer(keyedBy: Key.self, forKey: Key("PreferredOutpostArns"))
            for (index0, string0) in preferredOutpostArns.enumerated() {
                try preferredOutpostArnsContainer.encode(string0, forKey: Key("PreferredOutpostArn.\(index0.advanced(by: 1))"))
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nodeGroupIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nodeGroupId)
        nodeGroupId = nodeGroupIdDecoded
        let newReplicaCountDecoded = try containerValues.decode(Int.self, forKey: .newReplicaCount)
        newReplicaCount = newReplicaCountDecoded
        if containerValues.contains(.preferredAvailabilityZones) {
            struct KeyVal0{struct PreferredAvailabilityZone{}}
            let preferredAvailabilityZonesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.PreferredAvailabilityZone>.CodingKeys.self, forKey: .preferredAvailabilityZones)
            if let preferredAvailabilityZonesWrappedContainer = preferredAvailabilityZonesWrappedContainer {
                let preferredAvailabilityZonesContainer = try preferredAvailabilityZonesWrappedContainer.decodeIfPresent([String].self, forKey: .member)
                var preferredAvailabilityZonesBuffer:[String]? = nil
                if let preferredAvailabilityZonesContainer = preferredAvailabilityZonesContainer {
                    preferredAvailabilityZonesBuffer = [String]()
                    for stringContainer0 in preferredAvailabilityZonesContainer {
                        preferredAvailabilityZonesBuffer?.append(stringContainer0)
                    }
                }
                preferredAvailabilityZones = preferredAvailabilityZonesBuffer
            } else {
                preferredAvailabilityZones = []
            }
        } else {
            preferredAvailabilityZones = nil
        }
        if containerValues.contains(.preferredOutpostArns) {
            struct KeyVal0{struct PreferredOutpostArn{}}
            let preferredOutpostArnsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.PreferredOutpostArn>.CodingKeys.self, forKey: .preferredOutpostArns)
            if let preferredOutpostArnsWrappedContainer = preferredOutpostArnsWrappedContainer {
                let preferredOutpostArnsContainer = try preferredOutpostArnsWrappedContainer.decodeIfPresent([String].self, forKey: .member)
                var preferredOutpostArnsBuffer:[String]? = nil
                if let preferredOutpostArnsContainer = preferredOutpostArnsContainer {
                    preferredOutpostArnsBuffer = [String]()
                    for stringContainer0 in preferredOutpostArnsContainer {
                        preferredOutpostArnsBuffer?.append(stringContainer0)
                    }
                }
                preferredOutpostArns = preferredOutpostArnsBuffer
            } else {
                preferredOutpostArns = []
            }
        } else {
            preferredOutpostArns = nil
        }
    }
}
