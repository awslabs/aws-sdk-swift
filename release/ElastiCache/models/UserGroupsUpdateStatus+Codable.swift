// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension UserGroupsUpdateStatus: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case userGroupIdsToAdd = "UserGroupIdsToAdd"
        case userGroupIdsToRemove = "UserGroupIdsToRemove"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let userGroupIdsToAdd = userGroupIdsToAdd {
            var userGroupIdsToAddContainer = container.nestedContainer(keyedBy: Key.self, forKey: Key("UserGroupIdsToAdd"))
            for (index0, usergroupid0) in userGroupIdsToAdd.enumerated() {
                try userGroupIdsToAddContainer.encode(usergroupid0, forKey: Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let userGroupIdsToRemove = userGroupIdsToRemove {
            var userGroupIdsToRemoveContainer = container.nestedContainer(keyedBy: Key.self, forKey: Key("UserGroupIdsToRemove"))
            for (index0, usergroupid0) in userGroupIdsToRemove.enumerated() {
                try userGroupIdsToRemoveContainer.encode(usergroupid0, forKey: Key("member.\(index0.advanced(by: 1))"))
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        if containerValues.contains(.userGroupIdsToAdd) {
            struct KeyVal0{struct member{}}
            let userGroupIdsToAddWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .userGroupIdsToAdd)
            if let userGroupIdsToAddWrappedContainer = userGroupIdsToAddWrappedContainer {
                let userGroupIdsToAddContainer = try userGroupIdsToAddWrappedContainer.decodeIfPresent([String].self, forKey: .member)
                var userGroupIdsToAddBuffer:[String]? = nil
                if let userGroupIdsToAddContainer = userGroupIdsToAddContainer {
                    userGroupIdsToAddBuffer = [String]()
                    for stringContainer0 in userGroupIdsToAddContainer {
                        userGroupIdsToAddBuffer?.append(stringContainer0)
                    }
                }
                userGroupIdsToAdd = userGroupIdsToAddBuffer
            } else {
                userGroupIdsToAdd = []
            }
        } else {
            userGroupIdsToAdd = nil
        }
        if containerValues.contains(.userGroupIdsToRemove) {
            struct KeyVal0{struct member{}}
            let userGroupIdsToRemoveWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .userGroupIdsToRemove)
            if let userGroupIdsToRemoveWrappedContainer = userGroupIdsToRemoveWrappedContainer {
                let userGroupIdsToRemoveContainer = try userGroupIdsToRemoveWrappedContainer.decodeIfPresent([String].self, forKey: .member)
                var userGroupIdsToRemoveBuffer:[String]? = nil
                if let userGroupIdsToRemoveContainer = userGroupIdsToRemoveContainer {
                    userGroupIdsToRemoveBuffer = [String]()
                    for stringContainer0 in userGroupIdsToRemoveContainer {
                        userGroupIdsToRemoveBuffer?.append(stringContainer0)
                    }
                }
                userGroupIdsToRemove = userGroupIdsToRemoveBuffer
            } else {
                userGroupIdsToRemove = []
            }
        } else {
            userGroupIdsToRemove = nil
        }
    }
}
