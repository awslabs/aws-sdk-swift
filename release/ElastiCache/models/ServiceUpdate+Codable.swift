// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ServiceUpdate: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case autoUpdateAfterRecommendedApplyByDate = "AutoUpdateAfterRecommendedApplyByDate"
        case engine = "Engine"
        case engineVersion = "EngineVersion"
        case estimatedUpdateTime = "EstimatedUpdateTime"
        case serviceUpdateDescription = "ServiceUpdateDescription"
        case serviceUpdateEndDate = "ServiceUpdateEndDate"
        case serviceUpdateName = "ServiceUpdateName"
        case serviceUpdateRecommendedApplyByDate = "ServiceUpdateRecommendedApplyByDate"
        case serviceUpdateReleaseDate = "ServiceUpdateReleaseDate"
        case serviceUpdateSeverity = "ServiceUpdateSeverity"
        case serviceUpdateStatus = "ServiceUpdateStatus"
        case serviceUpdateType = "ServiceUpdateType"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let autoUpdateAfterRecommendedApplyByDate = autoUpdateAfterRecommendedApplyByDate {
            try container.encode(autoUpdateAfterRecommendedApplyByDate, forKey: Key("AutoUpdateAfterRecommendedApplyByDate"))
        }
        if let engine = engine {
            try container.encode(engine, forKey: Key("Engine"))
        }
        if let engineVersion = engineVersion {
            try container.encode(engineVersion, forKey: Key("EngineVersion"))
        }
        if let estimatedUpdateTime = estimatedUpdateTime {
            try container.encode(estimatedUpdateTime, forKey: Key("EstimatedUpdateTime"))
        }
        if let serviceUpdateDescription = serviceUpdateDescription {
            try container.encode(serviceUpdateDescription, forKey: Key("ServiceUpdateDescription"))
        }
        if let serviceUpdateEndDate = serviceUpdateEndDate {
            try container.encode(TimestampWrapper(serviceUpdateEndDate, format: .dateTime), forKey: Key("serviceUpdateEndDate"))
        }
        if let serviceUpdateName = serviceUpdateName {
            try container.encode(serviceUpdateName, forKey: Key("ServiceUpdateName"))
        }
        if let serviceUpdateRecommendedApplyByDate = serviceUpdateRecommendedApplyByDate {
            try container.encode(TimestampWrapper(serviceUpdateRecommendedApplyByDate, format: .dateTime), forKey: Key("serviceUpdateRecommendedApplyByDate"))
        }
        if let serviceUpdateReleaseDate = serviceUpdateReleaseDate {
            try container.encode(TimestampWrapper(serviceUpdateReleaseDate, format: .dateTime), forKey: Key("serviceUpdateReleaseDate"))
        }
        if let serviceUpdateSeverity = serviceUpdateSeverity {
            try container.encode(serviceUpdateSeverity, forKey: Key("ServiceUpdateSeverity"))
        }
        if let serviceUpdateStatus = serviceUpdateStatus {
            try container.encode(serviceUpdateStatus, forKey: Key("ServiceUpdateStatus"))
        }
        if let serviceUpdateType = serviceUpdateType {
            try container.encode(serviceUpdateType, forKey: Key("ServiceUpdateType"))
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let serviceUpdateNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .serviceUpdateName)
        serviceUpdateName = serviceUpdateNameDecoded
        let serviceUpdateReleaseDateDecoded = try containerValues.decodeIfPresent(String.self, forKey: .serviceUpdateReleaseDate)
        var serviceUpdateReleaseDateBuffer:Date? = nil
        if let serviceUpdateReleaseDateDecoded = serviceUpdateReleaseDateDecoded {
            serviceUpdateReleaseDateBuffer = try TimestampWrapperDecoder.parseDateStringValue(serviceUpdateReleaseDateDecoded, format: .dateTime)
        }
        serviceUpdateReleaseDate = serviceUpdateReleaseDateBuffer
        let serviceUpdateEndDateDecoded = try containerValues.decodeIfPresent(String.self, forKey: .serviceUpdateEndDate)
        var serviceUpdateEndDateBuffer:Date? = nil
        if let serviceUpdateEndDateDecoded = serviceUpdateEndDateDecoded {
            serviceUpdateEndDateBuffer = try TimestampWrapperDecoder.parseDateStringValue(serviceUpdateEndDateDecoded, format: .dateTime)
        }
        serviceUpdateEndDate = serviceUpdateEndDateBuffer
        let serviceUpdateSeverityDecoded = try containerValues.decodeIfPresent(ServiceUpdateSeverity.self, forKey: .serviceUpdateSeverity)
        serviceUpdateSeverity = serviceUpdateSeverityDecoded
        let serviceUpdateRecommendedApplyByDateDecoded = try containerValues.decodeIfPresent(String.self, forKey: .serviceUpdateRecommendedApplyByDate)
        var serviceUpdateRecommendedApplyByDateBuffer:Date? = nil
        if let serviceUpdateRecommendedApplyByDateDecoded = serviceUpdateRecommendedApplyByDateDecoded {
            serviceUpdateRecommendedApplyByDateBuffer = try TimestampWrapperDecoder.parseDateStringValue(serviceUpdateRecommendedApplyByDateDecoded, format: .dateTime)
        }
        serviceUpdateRecommendedApplyByDate = serviceUpdateRecommendedApplyByDateBuffer
        let serviceUpdateStatusDecoded = try containerValues.decodeIfPresent(ServiceUpdateStatus.self, forKey: .serviceUpdateStatus)
        serviceUpdateStatus = serviceUpdateStatusDecoded
        let serviceUpdateDescriptionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .serviceUpdateDescription)
        serviceUpdateDescription = serviceUpdateDescriptionDecoded
        let serviceUpdateTypeDecoded = try containerValues.decodeIfPresent(ServiceUpdateType.self, forKey: .serviceUpdateType)
        serviceUpdateType = serviceUpdateTypeDecoded
        let engineDecoded = try containerValues.decodeIfPresent(String.self, forKey: .engine)
        engine = engineDecoded
        let engineVersionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .engineVersion)
        engineVersion = engineVersionDecoded
        let autoUpdateAfterRecommendedApplyByDateDecoded = try containerValues.decodeIfPresent(Bool.self, forKey: .autoUpdateAfterRecommendedApplyByDate)
        autoUpdateAfterRecommendedApplyByDate = autoUpdateAfterRecommendedApplyByDateDecoded
        let estimatedUpdateTimeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .estimatedUpdateTime)
        estimatedUpdateTime = estimatedUpdateTimeDecoded
    }
}
