// Code generated by smithy-swift-codegen. DO NOT EDIT!



/// <p>Consists of a primary cluster that accepts writes and an associated secondary cluster that resides in a different AWS region. The secondary cluster accepts only reads. The primary
///         cluster automatically replicates updates to the secondary cluster.</p>
///
///
///         <ul>
///             <li>
///                <p>The <b>GlobalReplicationGroupIdSuffix</b> represents the name of the Global datastore,
///             which is what you use to associate a secondary cluster.</p>
///             </li>
///          </ul>
public struct GlobalReplicationGroup: Equatable {
    /// <p>The ARN (Amazon Resource Name) of the global replication group.</p>
    public let aRN: String?
    /// <p>A flag that enables encryption at rest when set to <code>true</code>.</p>
    ///             <p>You cannot modify the value of <code>AtRestEncryptionEnabled</code> after the replication
    ///                 group is created.
    ///                 To enable encryption at rest on a replication group you must set <code>AtRestEncryptionEnabled</code> to
    ///                 <code>true</code> when you create the replication group. </p>
    ///             <p>
    ///             <b>Required:</b>
    ///                 Only available when creating a replication group in an Amazon VPC using redis version <code>3.2.6</code>, <code>4.x</code> or later.</p>
    public let atRestEncryptionEnabled: Bool?
    /// <p>A flag that enables using an <code>AuthToken</code> (password)
    ///             when issuing Redis commands.</p>
    ///             <p>Default: <code>false</code>
    ///          </p>
    public let authTokenEnabled: Bool?
    /// <p>The cache node type of the Global datastore</p>
    public let cacheNodeType: String?
    /// <p>A flag that indicates whether the Global datastore is cluster enabled.</p>
    public let clusterEnabled: Bool?
    /// <p>The Elasticache engine. For Redis only.</p>
    public let engine: String?
    /// <p>The Elasticache Redis engine version.</p>
    public let engineVersion: String?
    /// <p>Indicates the slot configuration and global identifier for each slice group.</p>
    public let globalNodeGroups: [GlobalNodeGroup]?
    /// <p>The optional description of the Global datastore</p>
    public let globalReplicationGroupDescription: String?
    /// <p>The name of the Global datastore</p>
    public let globalReplicationGroupId: String?
    /// <p>The replication groups that comprise the Global datastore.</p>
    public let members: [GlobalReplicationGroupMember]?
    /// <p>The status of the Global datastore</p>
    public let status: String?
    /// <p>A flag that enables in-transit encryption when set to true.
    ///
    ///             You cannot modify the value of <code>TransitEncryptionEnabled</code> after the cluster is created. To enable in-transit encryption on a cluster you must set <code>TransitEncryptionEnabled</code> to true when you create a cluster. </p>
    ///         <p>
    ///             <b>Required:</b>
    ///             Only available when creating a replication group in an Amazon VPC using redis version <code>3.2.6</code>, <code>4.x</code> or later.</p>
    public let transitEncryptionEnabled: Bool?

    public init (
        aRN: String? = nil,
        atRestEncryptionEnabled: Bool? = nil,
        authTokenEnabled: Bool? = nil,
        cacheNodeType: String? = nil,
        clusterEnabled: Bool? = nil,
        engine: String? = nil,
        engineVersion: String? = nil,
        globalNodeGroups: [GlobalNodeGroup]? = nil,
        globalReplicationGroupDescription: String? = nil,
        globalReplicationGroupId: String? = nil,
        members: [GlobalReplicationGroupMember]? = nil,
        status: String? = nil,
        transitEncryptionEnabled: Bool? = nil
    )
    {
        self.aRN = aRN
        self.atRestEncryptionEnabled = atRestEncryptionEnabled
        self.authTokenEnabled = authTokenEnabled
        self.cacheNodeType = cacheNodeType
        self.clusterEnabled = clusterEnabled
        self.engine = engine
        self.engineVersion = engineVersion
        self.globalNodeGroups = globalNodeGroups
        self.globalReplicationGroupDescription = globalReplicationGroupDescription
        self.globalReplicationGroupId = globalReplicationGroupId
        self.members = members
        self.status = status
        self.transitEncryptionEnabled = transitEncryptionEnabled
    }
}
