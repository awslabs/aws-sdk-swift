// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension EngineDefaults: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case cacheNodeTypeSpecificParameters = "CacheNodeTypeSpecificParameters"
        case cacheParameterGroupFamily = "CacheParameterGroupFamily"
        case marker = "Marker"
        case parameters = "Parameters"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let cacheNodeTypeSpecificParameters = cacheNodeTypeSpecificParameters {
            var cacheNodeTypeSpecificParametersContainer = container.nestedContainer(keyedBy: Key.self, forKey: Key("CacheNodeTypeSpecificParameters"))
            for (index0, cachenodetypespecificparameter0) in cacheNodeTypeSpecificParameters.enumerated() {
                try cacheNodeTypeSpecificParametersContainer.encode(cachenodetypespecificparameter0, forKey: Key("CacheNodeTypeSpecificParameter.\(index0.advanced(by: 1))"))
            }
        }
        if let cacheParameterGroupFamily = cacheParameterGroupFamily {
            try container.encode(cacheParameterGroupFamily, forKey: Key("CacheParameterGroupFamily"))
        }
        if let marker = marker {
            try container.encode(marker, forKey: Key("Marker"))
        }
        if let parameters = parameters {
            var parametersContainer = container.nestedContainer(keyedBy: Key.self, forKey: Key("Parameters"))
            for (index0, parameter0) in parameters.enumerated() {
                try parametersContainer.encode(parameter0, forKey: Key("Parameter.\(index0.advanced(by: 1))"))
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let cacheParameterGroupFamilyDecoded = try containerValues.decodeIfPresent(String.self, forKey: .cacheParameterGroupFamily)
        cacheParameterGroupFamily = cacheParameterGroupFamilyDecoded
        let markerDecoded = try containerValues.decodeIfPresent(String.self, forKey: .marker)
        marker = markerDecoded
        if containerValues.contains(.parameters) {
            struct KeyVal0{struct Parameter{}}
            let parametersWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.Parameter>.CodingKeys.self, forKey: .parameters)
            if let parametersWrappedContainer = parametersWrappedContainer {
                let parametersContainer = try parametersWrappedContainer.decodeIfPresent([Parameter].self, forKey: .member)
                var parametersBuffer:[Parameter]? = nil
                if let parametersContainer = parametersContainer {
                    parametersBuffer = [Parameter]()
                    for structureContainer0 in parametersContainer {
                        parametersBuffer?.append(structureContainer0)
                    }
                }
                parameters = parametersBuffer
            } else {
                parameters = []
            }
        } else {
            parameters = nil
        }
        if containerValues.contains(.cacheNodeTypeSpecificParameters) {
            struct KeyVal0{struct CacheNodeTypeSpecificParameter{}}
            let cacheNodeTypeSpecificParametersWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.CacheNodeTypeSpecificParameter>.CodingKeys.self, forKey: .cacheNodeTypeSpecificParameters)
            if let cacheNodeTypeSpecificParametersWrappedContainer = cacheNodeTypeSpecificParametersWrappedContainer {
                let cacheNodeTypeSpecificParametersContainer = try cacheNodeTypeSpecificParametersWrappedContainer.decodeIfPresent([CacheNodeTypeSpecificParameter].self, forKey: .member)
                var cacheNodeTypeSpecificParametersBuffer:[CacheNodeTypeSpecificParameter]? = nil
                if let cacheNodeTypeSpecificParametersContainer = cacheNodeTypeSpecificParametersContainer {
                    cacheNodeTypeSpecificParametersBuffer = [CacheNodeTypeSpecificParameter]()
                    for structureContainer0 in cacheNodeTypeSpecificParametersContainer {
                        cacheNodeTypeSpecificParametersBuffer?.append(structureContainer0)
                    }
                }
                cacheNodeTypeSpecificParameters = cacheNodeTypeSpecificParametersBuffer
            } else {
                cacheNodeTypeSpecificParameters = []
            }
        } else {
            cacheNodeTypeSpecificParameters = nil
        }
    }
}
